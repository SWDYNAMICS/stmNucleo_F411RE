
stmf411re_fw.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08008000  08008000  00008000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ac68  080081a0  080081a0  000081a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001cc  08012e08  08012e08  00012e08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012fd4  08012fd4  0002020c  2**0
                  CONTENTS
  4 .ARM          00000008  08012fd4  08012fd4  00012fd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012fdc  08012fdc  0002020c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012fdc  08012fdc  00012fdc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08012fe0  08012fe0  00012fe0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000020c  20000000  08012fe4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001750  2000020c  080131f0  0002020c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000195c  080131f0  0002195c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017ad0  00000000  00000000  0002023c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000048bf  00000000  00000000  00037d0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001490  00000000  00000000  0003c5d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001258  00000000  00000000  0003da60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001dd5f  00000000  00000000  0003ecb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000239c7  00000000  00000000  0005ca17  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00091ce9  00000000  00000000  000803de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001120c7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005930  00000000  00000000  00112118  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080081a0 <__do_global_dtors_aux>:
 80081a0:	b510      	push	{r4, lr}
 80081a2:	4c05      	ldr	r4, [pc, #20]	; (80081b8 <__do_global_dtors_aux+0x18>)
 80081a4:	7823      	ldrb	r3, [r4, #0]
 80081a6:	b933      	cbnz	r3, 80081b6 <__do_global_dtors_aux+0x16>
 80081a8:	4b04      	ldr	r3, [pc, #16]	; (80081bc <__do_global_dtors_aux+0x1c>)
 80081aa:	b113      	cbz	r3, 80081b2 <__do_global_dtors_aux+0x12>
 80081ac:	4804      	ldr	r0, [pc, #16]	; (80081c0 <__do_global_dtors_aux+0x20>)
 80081ae:	f3af 8000 	nop.w
 80081b2:	2301      	movs	r3, #1
 80081b4:	7023      	strb	r3, [r4, #0]
 80081b6:	bd10      	pop	{r4, pc}
 80081b8:	2000020c 	.word	0x2000020c
 80081bc:	00000000 	.word	0x00000000
 80081c0:	08012df0 	.word	0x08012df0

080081c4 <frame_dummy>:
 80081c4:	b508      	push	{r3, lr}
 80081c6:	4b03      	ldr	r3, [pc, #12]	; (80081d4 <frame_dummy+0x10>)
 80081c8:	b11b      	cbz	r3, 80081d2 <frame_dummy+0xe>
 80081ca:	4903      	ldr	r1, [pc, #12]	; (80081d8 <frame_dummy+0x14>)
 80081cc:	4803      	ldr	r0, [pc, #12]	; (80081dc <frame_dummy+0x18>)
 80081ce:	f3af 8000 	nop.w
 80081d2:	bd08      	pop	{r3, pc}
 80081d4:	00000000 	.word	0x00000000
 80081d8:	20000210 	.word	0x20000210
 80081dc:	08012df0 	.word	0x08012df0

080081e0 <memchr>:
 80081e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80081e4:	2a10      	cmp	r2, #16
 80081e6:	db2b      	blt.n	8008240 <memchr+0x60>
 80081e8:	f010 0f07 	tst.w	r0, #7
 80081ec:	d008      	beq.n	8008200 <memchr+0x20>
 80081ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80081f2:	3a01      	subs	r2, #1
 80081f4:	428b      	cmp	r3, r1
 80081f6:	d02d      	beq.n	8008254 <memchr+0x74>
 80081f8:	f010 0f07 	tst.w	r0, #7
 80081fc:	b342      	cbz	r2, 8008250 <memchr+0x70>
 80081fe:	d1f6      	bne.n	80081ee <memchr+0xe>
 8008200:	b4f0      	push	{r4, r5, r6, r7}
 8008202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8008206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800820a:	f022 0407 	bic.w	r4, r2, #7
 800820e:	f07f 0700 	mvns.w	r7, #0
 8008212:	2300      	movs	r3, #0
 8008214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8008218:	3c08      	subs	r4, #8
 800821a:	ea85 0501 	eor.w	r5, r5, r1
 800821e:	ea86 0601 	eor.w	r6, r6, r1
 8008222:	fa85 f547 	uadd8	r5, r5, r7
 8008226:	faa3 f587 	sel	r5, r3, r7
 800822a:	fa86 f647 	uadd8	r6, r6, r7
 800822e:	faa5 f687 	sel	r6, r5, r7
 8008232:	b98e      	cbnz	r6, 8008258 <memchr+0x78>
 8008234:	d1ee      	bne.n	8008214 <memchr+0x34>
 8008236:	bcf0      	pop	{r4, r5, r6, r7}
 8008238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800823c:	f002 0207 	and.w	r2, r2, #7
 8008240:	b132      	cbz	r2, 8008250 <memchr+0x70>
 8008242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8008246:	3a01      	subs	r2, #1
 8008248:	ea83 0301 	eor.w	r3, r3, r1
 800824c:	b113      	cbz	r3, 8008254 <memchr+0x74>
 800824e:	d1f8      	bne.n	8008242 <memchr+0x62>
 8008250:	2000      	movs	r0, #0
 8008252:	4770      	bx	lr
 8008254:	3801      	subs	r0, #1
 8008256:	4770      	bx	lr
 8008258:	2d00      	cmp	r5, #0
 800825a:	bf06      	itte	eq
 800825c:	4635      	moveq	r5, r6
 800825e:	3803      	subeq	r0, #3
 8008260:	3807      	subne	r0, #7
 8008262:	f015 0f01 	tst.w	r5, #1
 8008266:	d107      	bne.n	8008278 <memchr+0x98>
 8008268:	3001      	adds	r0, #1
 800826a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800826e:	bf02      	ittt	eq
 8008270:	3001      	addeq	r0, #1
 8008272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8008276:	3001      	addeq	r0, #1
 8008278:	bcf0      	pop	{r4, r5, r6, r7}
 800827a:	3801      	subs	r0, #1
 800827c:	4770      	bx	lr
 800827e:	bf00      	nop

08008280 <__aeabi_uldivmod>:
 8008280:	b953      	cbnz	r3, 8008298 <__aeabi_uldivmod+0x18>
 8008282:	b94a      	cbnz	r2, 8008298 <__aeabi_uldivmod+0x18>
 8008284:	2900      	cmp	r1, #0
 8008286:	bf08      	it	eq
 8008288:	2800      	cmpeq	r0, #0
 800828a:	bf1c      	itt	ne
 800828c:	f04f 31ff 	movne.w	r1, #4294967295
 8008290:	f04f 30ff 	movne.w	r0, #4294967295
 8008294:	f000 b974 	b.w	8008580 <__aeabi_idiv0>
 8008298:	f1ad 0c08 	sub.w	ip, sp, #8
 800829c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80082a0:	f000 f806 	bl	80082b0 <__udivmoddi4>
 80082a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80082a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80082ac:	b004      	add	sp, #16
 80082ae:	4770      	bx	lr

080082b0 <__udivmoddi4>:
 80082b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80082b4:	9d08      	ldr	r5, [sp, #32]
 80082b6:	4604      	mov	r4, r0
 80082b8:	468e      	mov	lr, r1
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d14d      	bne.n	800835a <__udivmoddi4+0xaa>
 80082be:	428a      	cmp	r2, r1
 80082c0:	4694      	mov	ip, r2
 80082c2:	d969      	bls.n	8008398 <__udivmoddi4+0xe8>
 80082c4:	fab2 f282 	clz	r2, r2
 80082c8:	b152      	cbz	r2, 80082e0 <__udivmoddi4+0x30>
 80082ca:	fa01 f302 	lsl.w	r3, r1, r2
 80082ce:	f1c2 0120 	rsb	r1, r2, #32
 80082d2:	fa20 f101 	lsr.w	r1, r0, r1
 80082d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80082da:	ea41 0e03 	orr.w	lr, r1, r3
 80082de:	4094      	lsls	r4, r2
 80082e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80082e4:	0c21      	lsrs	r1, r4, #16
 80082e6:	fbbe f6f8 	udiv	r6, lr, r8
 80082ea:	fa1f f78c 	uxth.w	r7, ip
 80082ee:	fb08 e316 	mls	r3, r8, r6, lr
 80082f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80082f6:	fb06 f107 	mul.w	r1, r6, r7
 80082fa:	4299      	cmp	r1, r3
 80082fc:	d90a      	bls.n	8008314 <__udivmoddi4+0x64>
 80082fe:	eb1c 0303 	adds.w	r3, ip, r3
 8008302:	f106 30ff 	add.w	r0, r6, #4294967295
 8008306:	f080 811f 	bcs.w	8008548 <__udivmoddi4+0x298>
 800830a:	4299      	cmp	r1, r3
 800830c:	f240 811c 	bls.w	8008548 <__udivmoddi4+0x298>
 8008310:	3e02      	subs	r6, #2
 8008312:	4463      	add	r3, ip
 8008314:	1a5b      	subs	r3, r3, r1
 8008316:	b2a4      	uxth	r4, r4
 8008318:	fbb3 f0f8 	udiv	r0, r3, r8
 800831c:	fb08 3310 	mls	r3, r8, r0, r3
 8008320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8008324:	fb00 f707 	mul.w	r7, r0, r7
 8008328:	42a7      	cmp	r7, r4
 800832a:	d90a      	bls.n	8008342 <__udivmoddi4+0x92>
 800832c:	eb1c 0404 	adds.w	r4, ip, r4
 8008330:	f100 33ff 	add.w	r3, r0, #4294967295
 8008334:	f080 810a 	bcs.w	800854c <__udivmoddi4+0x29c>
 8008338:	42a7      	cmp	r7, r4
 800833a:	f240 8107 	bls.w	800854c <__udivmoddi4+0x29c>
 800833e:	4464      	add	r4, ip
 8008340:	3802      	subs	r0, #2
 8008342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8008346:	1be4      	subs	r4, r4, r7
 8008348:	2600      	movs	r6, #0
 800834a:	b11d      	cbz	r5, 8008354 <__udivmoddi4+0xa4>
 800834c:	40d4      	lsrs	r4, r2
 800834e:	2300      	movs	r3, #0
 8008350:	e9c5 4300 	strd	r4, r3, [r5]
 8008354:	4631      	mov	r1, r6
 8008356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800835a:	428b      	cmp	r3, r1
 800835c:	d909      	bls.n	8008372 <__udivmoddi4+0xc2>
 800835e:	2d00      	cmp	r5, #0
 8008360:	f000 80ef 	beq.w	8008542 <__udivmoddi4+0x292>
 8008364:	2600      	movs	r6, #0
 8008366:	e9c5 0100 	strd	r0, r1, [r5]
 800836a:	4630      	mov	r0, r6
 800836c:	4631      	mov	r1, r6
 800836e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008372:	fab3 f683 	clz	r6, r3
 8008376:	2e00      	cmp	r6, #0
 8008378:	d14a      	bne.n	8008410 <__udivmoddi4+0x160>
 800837a:	428b      	cmp	r3, r1
 800837c:	d302      	bcc.n	8008384 <__udivmoddi4+0xd4>
 800837e:	4282      	cmp	r2, r0
 8008380:	f200 80f9 	bhi.w	8008576 <__udivmoddi4+0x2c6>
 8008384:	1a84      	subs	r4, r0, r2
 8008386:	eb61 0303 	sbc.w	r3, r1, r3
 800838a:	2001      	movs	r0, #1
 800838c:	469e      	mov	lr, r3
 800838e:	2d00      	cmp	r5, #0
 8008390:	d0e0      	beq.n	8008354 <__udivmoddi4+0xa4>
 8008392:	e9c5 4e00 	strd	r4, lr, [r5]
 8008396:	e7dd      	b.n	8008354 <__udivmoddi4+0xa4>
 8008398:	b902      	cbnz	r2, 800839c <__udivmoddi4+0xec>
 800839a:	deff      	udf	#255	; 0xff
 800839c:	fab2 f282 	clz	r2, r2
 80083a0:	2a00      	cmp	r2, #0
 80083a2:	f040 8092 	bne.w	80084ca <__udivmoddi4+0x21a>
 80083a6:	eba1 010c 	sub.w	r1, r1, ip
 80083aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80083ae:	fa1f fe8c 	uxth.w	lr, ip
 80083b2:	2601      	movs	r6, #1
 80083b4:	0c20      	lsrs	r0, r4, #16
 80083b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80083ba:	fb07 1113 	mls	r1, r7, r3, r1
 80083be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80083c2:	fb0e f003 	mul.w	r0, lr, r3
 80083c6:	4288      	cmp	r0, r1
 80083c8:	d908      	bls.n	80083dc <__udivmoddi4+0x12c>
 80083ca:	eb1c 0101 	adds.w	r1, ip, r1
 80083ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80083d2:	d202      	bcs.n	80083da <__udivmoddi4+0x12a>
 80083d4:	4288      	cmp	r0, r1
 80083d6:	f200 80cb 	bhi.w	8008570 <__udivmoddi4+0x2c0>
 80083da:	4643      	mov	r3, r8
 80083dc:	1a09      	subs	r1, r1, r0
 80083de:	b2a4      	uxth	r4, r4
 80083e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80083e4:	fb07 1110 	mls	r1, r7, r0, r1
 80083e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80083ec:	fb0e fe00 	mul.w	lr, lr, r0
 80083f0:	45a6      	cmp	lr, r4
 80083f2:	d908      	bls.n	8008406 <__udivmoddi4+0x156>
 80083f4:	eb1c 0404 	adds.w	r4, ip, r4
 80083f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80083fc:	d202      	bcs.n	8008404 <__udivmoddi4+0x154>
 80083fe:	45a6      	cmp	lr, r4
 8008400:	f200 80bb 	bhi.w	800857a <__udivmoddi4+0x2ca>
 8008404:	4608      	mov	r0, r1
 8008406:	eba4 040e 	sub.w	r4, r4, lr
 800840a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800840e:	e79c      	b.n	800834a <__udivmoddi4+0x9a>
 8008410:	f1c6 0720 	rsb	r7, r6, #32
 8008414:	40b3      	lsls	r3, r6
 8008416:	fa22 fc07 	lsr.w	ip, r2, r7
 800841a:	ea4c 0c03 	orr.w	ip, ip, r3
 800841e:	fa20 f407 	lsr.w	r4, r0, r7
 8008422:	fa01 f306 	lsl.w	r3, r1, r6
 8008426:	431c      	orrs	r4, r3
 8008428:	40f9      	lsrs	r1, r7
 800842a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800842e:	fa00 f306 	lsl.w	r3, r0, r6
 8008432:	fbb1 f8f9 	udiv	r8, r1, r9
 8008436:	0c20      	lsrs	r0, r4, #16
 8008438:	fa1f fe8c 	uxth.w	lr, ip
 800843c:	fb09 1118 	mls	r1, r9, r8, r1
 8008440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8008444:	fb08 f00e 	mul.w	r0, r8, lr
 8008448:	4288      	cmp	r0, r1
 800844a:	fa02 f206 	lsl.w	r2, r2, r6
 800844e:	d90b      	bls.n	8008468 <__udivmoddi4+0x1b8>
 8008450:	eb1c 0101 	adds.w	r1, ip, r1
 8008454:	f108 3aff 	add.w	sl, r8, #4294967295
 8008458:	f080 8088 	bcs.w	800856c <__udivmoddi4+0x2bc>
 800845c:	4288      	cmp	r0, r1
 800845e:	f240 8085 	bls.w	800856c <__udivmoddi4+0x2bc>
 8008462:	f1a8 0802 	sub.w	r8, r8, #2
 8008466:	4461      	add	r1, ip
 8008468:	1a09      	subs	r1, r1, r0
 800846a:	b2a4      	uxth	r4, r4
 800846c:	fbb1 f0f9 	udiv	r0, r1, r9
 8008470:	fb09 1110 	mls	r1, r9, r0, r1
 8008474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8008478:	fb00 fe0e 	mul.w	lr, r0, lr
 800847c:	458e      	cmp	lr, r1
 800847e:	d908      	bls.n	8008492 <__udivmoddi4+0x1e2>
 8008480:	eb1c 0101 	adds.w	r1, ip, r1
 8008484:	f100 34ff 	add.w	r4, r0, #4294967295
 8008488:	d26c      	bcs.n	8008564 <__udivmoddi4+0x2b4>
 800848a:	458e      	cmp	lr, r1
 800848c:	d96a      	bls.n	8008564 <__udivmoddi4+0x2b4>
 800848e:	3802      	subs	r0, #2
 8008490:	4461      	add	r1, ip
 8008492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8008496:	fba0 9402 	umull	r9, r4, r0, r2
 800849a:	eba1 010e 	sub.w	r1, r1, lr
 800849e:	42a1      	cmp	r1, r4
 80084a0:	46c8      	mov	r8, r9
 80084a2:	46a6      	mov	lr, r4
 80084a4:	d356      	bcc.n	8008554 <__udivmoddi4+0x2a4>
 80084a6:	d053      	beq.n	8008550 <__udivmoddi4+0x2a0>
 80084a8:	b15d      	cbz	r5, 80084c2 <__udivmoddi4+0x212>
 80084aa:	ebb3 0208 	subs.w	r2, r3, r8
 80084ae:	eb61 010e 	sbc.w	r1, r1, lr
 80084b2:	fa01 f707 	lsl.w	r7, r1, r7
 80084b6:	fa22 f306 	lsr.w	r3, r2, r6
 80084ba:	40f1      	lsrs	r1, r6
 80084bc:	431f      	orrs	r7, r3
 80084be:	e9c5 7100 	strd	r7, r1, [r5]
 80084c2:	2600      	movs	r6, #0
 80084c4:	4631      	mov	r1, r6
 80084c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80084ca:	f1c2 0320 	rsb	r3, r2, #32
 80084ce:	40d8      	lsrs	r0, r3
 80084d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80084d4:	fa21 f303 	lsr.w	r3, r1, r3
 80084d8:	4091      	lsls	r1, r2
 80084da:	4301      	orrs	r1, r0
 80084dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80084e0:	fa1f fe8c 	uxth.w	lr, ip
 80084e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80084e8:	fb07 3610 	mls	r6, r7, r0, r3
 80084ec:	0c0b      	lsrs	r3, r1, #16
 80084ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80084f2:	fb00 f60e 	mul.w	r6, r0, lr
 80084f6:	429e      	cmp	r6, r3
 80084f8:	fa04 f402 	lsl.w	r4, r4, r2
 80084fc:	d908      	bls.n	8008510 <__udivmoddi4+0x260>
 80084fe:	eb1c 0303 	adds.w	r3, ip, r3
 8008502:	f100 38ff 	add.w	r8, r0, #4294967295
 8008506:	d22f      	bcs.n	8008568 <__udivmoddi4+0x2b8>
 8008508:	429e      	cmp	r6, r3
 800850a:	d92d      	bls.n	8008568 <__udivmoddi4+0x2b8>
 800850c:	3802      	subs	r0, #2
 800850e:	4463      	add	r3, ip
 8008510:	1b9b      	subs	r3, r3, r6
 8008512:	b289      	uxth	r1, r1
 8008514:	fbb3 f6f7 	udiv	r6, r3, r7
 8008518:	fb07 3316 	mls	r3, r7, r6, r3
 800851c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8008520:	fb06 f30e 	mul.w	r3, r6, lr
 8008524:	428b      	cmp	r3, r1
 8008526:	d908      	bls.n	800853a <__udivmoddi4+0x28a>
 8008528:	eb1c 0101 	adds.w	r1, ip, r1
 800852c:	f106 38ff 	add.w	r8, r6, #4294967295
 8008530:	d216      	bcs.n	8008560 <__udivmoddi4+0x2b0>
 8008532:	428b      	cmp	r3, r1
 8008534:	d914      	bls.n	8008560 <__udivmoddi4+0x2b0>
 8008536:	3e02      	subs	r6, #2
 8008538:	4461      	add	r1, ip
 800853a:	1ac9      	subs	r1, r1, r3
 800853c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8008540:	e738      	b.n	80083b4 <__udivmoddi4+0x104>
 8008542:	462e      	mov	r6, r5
 8008544:	4628      	mov	r0, r5
 8008546:	e705      	b.n	8008354 <__udivmoddi4+0xa4>
 8008548:	4606      	mov	r6, r0
 800854a:	e6e3      	b.n	8008314 <__udivmoddi4+0x64>
 800854c:	4618      	mov	r0, r3
 800854e:	e6f8      	b.n	8008342 <__udivmoddi4+0x92>
 8008550:	454b      	cmp	r3, r9
 8008552:	d2a9      	bcs.n	80084a8 <__udivmoddi4+0x1f8>
 8008554:	ebb9 0802 	subs.w	r8, r9, r2
 8008558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800855c:	3801      	subs	r0, #1
 800855e:	e7a3      	b.n	80084a8 <__udivmoddi4+0x1f8>
 8008560:	4646      	mov	r6, r8
 8008562:	e7ea      	b.n	800853a <__udivmoddi4+0x28a>
 8008564:	4620      	mov	r0, r4
 8008566:	e794      	b.n	8008492 <__udivmoddi4+0x1e2>
 8008568:	4640      	mov	r0, r8
 800856a:	e7d1      	b.n	8008510 <__udivmoddi4+0x260>
 800856c:	46d0      	mov	r8, sl
 800856e:	e77b      	b.n	8008468 <__udivmoddi4+0x1b8>
 8008570:	3b02      	subs	r3, #2
 8008572:	4461      	add	r1, ip
 8008574:	e732      	b.n	80083dc <__udivmoddi4+0x12c>
 8008576:	4630      	mov	r0, r6
 8008578:	e709      	b.n	800838e <__udivmoddi4+0xde>
 800857a:	4464      	add	r4, ip
 800857c:	3802      	subs	r0, #2
 800857e:	e742      	b.n	8008406 <__udivmoddi4+0x156>

08008580 <__aeabi_idiv0>:
 8008580:	4770      	bx	lr
 8008582:	bf00      	nop

08008584 <apInit>:
#include "qbuffer.h"



void apInit(void)
{
 8008584:	b580      	push	{r7, lr}
 8008586:	af00      	add	r7, sp, #0
	uartOpen(_DEF_UART1, 57600);
 8008588:	f44f 4161 	mov.w	r1, #57600	; 0xe100
 800858c:	2000      	movs	r0, #0
 800858e:	f000 fdb5 	bl	80090fc <uartOpen>
	uartOpen(_DEF_UART2, 57600);
 8008592:	f44f 4161 	mov.w	r1, #57600	; 0xe100
 8008596:	2001      	movs	r0, #1
 8008598:	f000 fdb0 	bl	80090fc <uartOpen>
}
 800859c:	bf00      	nop
 800859e:	bd80      	pop	{r7, pc}

080085a0 <apMain>:

void apMain(void)
{
 80085a0:	b580      	push	{r7, lr}
 80085a2:	b08c      	sub	sp, #48	; 0x30
 80085a4:	af00      	add	r7, sp, #0
	uint32_t pre_time;

	pre_time = millis();
 80085a6:	f000 f8d2 	bl	800874e <millis>
 80085aa:	62f8      	str	r0, [r7, #44]	; 0x2c
	while (1)
	{
		if(millis() - pre_time >= 1500)
 80085ac:	f000 f8cf 	bl	800874e <millis>
 80085b0:	4602      	mov	r2, r0
 80085b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085b4:	1ad3      	subs	r3, r2, r3
 80085b6:	f240 52db 	movw	r2, #1499	; 0x5db
 80085ba:	4293      	cmp	r3, r2
 80085bc:	d905      	bls.n	80085ca <apMain+0x2a>
		{
			pre_time = millis();
 80085be:	f000 f8c6 	bl	800874e <millis>
 80085c2:	62f8      	str	r0, [r7, #44]	; 0x2c
			ledToggle(_DEF_LED1);
 80085c4:	2000      	movs	r0, #0
 80085c6:	f000 fcbb 	bl	8008f40 <ledToggle>
		}

		if(uartAvailable(_DEF_UART1) > 0)
 80085ca:	2000      	movs	r0, #0
 80085cc:	f000 fe2e 	bl	800922c <uartAvailable>
 80085d0:	4603      	mov	r3, r0
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d0ea      	beq.n	80085ac <apMain+0xc>
		{
		  uint8_t rx_data;
		  rx_data = uartRead(_DEF_UART1);
 80085d6:	2000      	movs	r0, #0
 80085d8:	f000 fe5a 	bl	8009290 <uartRead>
 80085dc:	4603      	mov	r3, r0
 80085de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

		  if(rx_data == '1')
 80085e2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80085e6:	2b31      	cmp	r3, #49	; 0x31
 80085e8:	d11e      	bne.n	8008628 <apMain+0x88>
		  {
		    uint8_t buf[32];

		    logPrintf("READ... \n");
 80085ea:	482e      	ldr	r0, [pc, #184]	; (80086a4 <apMain+0x104>)
 80085ec:	f009 fc82 	bl	8011ef4 <puts>

		    flashRead(0x8000000 + (60*1024), buf, 32);
 80085f0:	463b      	mov	r3, r7
 80085f2:	2220      	movs	r2, #32
 80085f4:	4619      	mov	r1, r3
 80085f6:	482c      	ldr	r0, [pc, #176]	; (80086a8 <apMain+0x108>)
 80085f8:	f000 fba1 	bl	8008d3e <flashRead>

		    for(int i=0; i<32; i++)
 80085fc:	2300      	movs	r3, #0
 80085fe:	62bb      	str	r3, [r7, #40]	; 0x28
 8008600:	e00f      	b.n	8008622 <apMain+0x82>
		    {
		      logPrintf("0x%X : 0x%X\n", 0x8000000 + (60*1024)+ i ,buf[i]);
 8008602:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008604:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8008608:	f503 4370 	add.w	r3, r3, #61440	; 0xf000
 800860c:	4639      	mov	r1, r7
 800860e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008610:	440a      	add	r2, r1
 8008612:	7812      	ldrb	r2, [r2, #0]
 8008614:	4619      	mov	r1, r3
 8008616:	4825      	ldr	r0, [pc, #148]	; (80086ac <apMain+0x10c>)
 8008618:	f009 fbe6 	bl	8011de8 <iprintf>
		    for(int i=0; i<32; i++)
 800861c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800861e:	3301      	adds	r3, #1
 8008620:	62bb      	str	r3, [r7, #40]	; 0x28
 8008622:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008624:	2b1f      	cmp	r3, #31
 8008626:	ddec      	ble.n	8008602 <apMain+0x62>
		    }
		  }
		  if(rx_data == '2')
 8008628:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800862c:	2b32      	cmp	r3, #50	; 0x32
 800862e:	d110      	bne.n	8008652 <apMain+0xb2>
		  {
		    logPrintf("ERASE... \n");
 8008630:	481f      	ldr	r0, [pc, #124]	; (80086b0 <apMain+0x110>)
 8008632:	f009 fc5f 	bl	8011ef4 <puts>
		    if(flashErase(0x8000000 + (60*1024), 32) == true)
 8008636:	2120      	movs	r1, #32
 8008638:	481b      	ldr	r0, [pc, #108]	; (80086a8 <apMain+0x108>)
 800863a:	f000 fadd 	bl	8008bf8 <flashErase>
 800863e:	4603      	mov	r3, r0
 8008640:	2b00      	cmp	r3, #0
 8008642:	d003      	beq.n	800864c <apMain+0xac>
		    {
		      logPrintf("ERASE OK! \n");
 8008644:	481b      	ldr	r0, [pc, #108]	; (80086b4 <apMain+0x114>)
 8008646:	f009 fc55 	bl	8011ef4 <puts>
 800864a:	e002      	b.n	8008652 <apMain+0xb2>
		    }
		    else
		    {
		      logPrintf("ERASE FAIL..\n");
 800864c:	481a      	ldr	r0, [pc, #104]	; (80086b8 <apMain+0x118>)
 800864e:	f009 fc51 	bl	8011ef4 <puts>
		    }
		  }
		  if(rx_data == '3')
 8008652:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008656:	2b33      	cmp	r3, #51	; 0x33
 8008658:	d1a8      	bne.n	80085ac <apMain+0xc>
		  {
		    uint8_t buf[32];

		    for(int i=0; i<32; i++)
 800865a:	2300      	movs	r3, #0
 800865c:	627b      	str	r3, [r7, #36]	; 0x24
 800865e:	e009      	b.n	8008674 <apMain+0xd4>
		    {
		      buf[i] = i;
 8008660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008662:	b2d9      	uxtb	r1, r3
 8008664:	463a      	mov	r2, r7
 8008666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008668:	4413      	add	r3, r2
 800866a:	460a      	mov	r2, r1
 800866c:	701a      	strb	r2, [r3, #0]
		    for(int i=0; i<32; i++)
 800866e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008670:	3301      	adds	r3, #1
 8008672:	627b      	str	r3, [r7, #36]	; 0x24
 8008674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008676:	2b1f      	cmp	r3, #31
 8008678:	ddf2      	ble.n	8008660 <apMain+0xc0>
		    }
		    logPrintf("WRITE...\n");
 800867a:	4810      	ldr	r0, [pc, #64]	; (80086bc <apMain+0x11c>)
 800867c:	f009 fc3a 	bl	8011ef4 <puts>
		    if(flashWrite(0x8000000 + (60*1024), buf, 32) == true)
 8008680:	463b      	mov	r3, r7
 8008682:	2220      	movs	r2, #32
 8008684:	4619      	mov	r1, r3
 8008686:	4808      	ldr	r0, [pc, #32]	; (80086a8 <apMain+0x108>)
 8008688:	f000 fb12 	bl	8008cb0 <flashWrite>
 800868c:	4603      	mov	r3, r0
 800868e:	2b00      	cmp	r3, #0
 8008690:	d003      	beq.n	800869a <apMain+0xfa>
        {
          logPrintf("WRITE OK! \n");
 8008692:	480b      	ldr	r0, [pc, #44]	; (80086c0 <apMain+0x120>)
 8008694:	f009 fc2e 	bl	8011ef4 <puts>
 8008698:	e788      	b.n	80085ac <apMain+0xc>
        }
		    else
		    {
		      logPrintf("WRITE FAIL..\n");
 800869a:	480a      	ldr	r0, [pc, #40]	; (80086c4 <apMain+0x124>)
 800869c:	f009 fc2a 	bl	8011ef4 <puts>
		if(millis() - pre_time >= 1500)
 80086a0:	e784      	b.n	80085ac <apMain+0xc>
 80086a2:	bf00      	nop
 80086a4:	08012e08 	.word	0x08012e08
 80086a8:	0800f000 	.word	0x0800f000
 80086ac:	08012e14 	.word	0x08012e14
 80086b0:	08012e24 	.word	0x08012e24
 80086b4:	08012e30 	.word	0x08012e30
 80086b8:	08012e3c 	.word	0x08012e3c
 80086bc:	08012e4c 	.word	0x08012e4c
 80086c0:	08012e58 	.word	0x08012e58
 80086c4:	08012e64 	.word	0x08012e64

080086c8 <bspInit>:
#include "uart.h"

void SystemClock_Config(void);

void bspInit(void)
{
 80086c8:	b580      	push	{r7, lr}
 80086ca:	b084      	sub	sp, #16
 80086cc:	af00      	add	r7, sp, #0
  HAL_Init();
 80086ce:	f000 ff33 	bl	8009538 <HAL_Init>
  SystemClock_Config();
 80086d2:	f000 f853 	bl	800877c <SystemClock_Config>

  __HAL_RCC_GPIOC_CLK_ENABLE();
 80086d6:	2300      	movs	r3, #0
 80086d8:	60fb      	str	r3, [r7, #12]
 80086da:	4b16      	ldr	r3, [pc, #88]	; (8008734 <bspInit+0x6c>)
 80086dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086de:	4a15      	ldr	r2, [pc, #84]	; (8008734 <bspInit+0x6c>)
 80086e0:	f043 0304 	orr.w	r3, r3, #4
 80086e4:	6313      	str	r3, [r2, #48]	; 0x30
 80086e6:	4b13      	ldr	r3, [pc, #76]	; (8008734 <bspInit+0x6c>)
 80086e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086ea:	f003 0304 	and.w	r3, r3, #4
 80086ee:	60fb      	str	r3, [r7, #12]
 80086f0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80086f2:	2300      	movs	r3, #0
 80086f4:	60bb      	str	r3, [r7, #8]
 80086f6:	4b0f      	ldr	r3, [pc, #60]	; (8008734 <bspInit+0x6c>)
 80086f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086fa:	4a0e      	ldr	r2, [pc, #56]	; (8008734 <bspInit+0x6c>)
 80086fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008700:	6313      	str	r3, [r2, #48]	; 0x30
 8008702:	4b0c      	ldr	r3, [pc, #48]	; (8008734 <bspInit+0x6c>)
 8008704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008706:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800870a:	60bb      	str	r3, [r7, #8]
 800870c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800870e:	2300      	movs	r3, #0
 8008710:	607b      	str	r3, [r7, #4]
 8008712:	4b08      	ldr	r3, [pc, #32]	; (8008734 <bspInit+0x6c>)
 8008714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008716:	4a07      	ldr	r2, [pc, #28]	; (8008734 <bspInit+0x6c>)
 8008718:	f043 0301 	orr.w	r3, r3, #1
 800871c:	6313      	str	r3, [r2, #48]	; 0x30
 800871e:	4b05      	ldr	r3, [pc, #20]	; (8008734 <bspInit+0x6c>)
 8008720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008722:	f003 0301 	and.w	r3, r3, #1
 8008726:	607b      	str	r3, [r7, #4]
 8008728:	687b      	ldr	r3, [r7, #4]

}
 800872a:	bf00      	nop
 800872c:	3710      	adds	r7, #16
 800872e:	46bd      	mov	sp, r7
 8008730:	bd80      	pop	{r7, pc}
 8008732:	bf00      	nop
 8008734:	40023800 	.word	0x40023800

08008738 <delay>:
void delay(uint32_t ms)
{
 8008738:	b580      	push	{r7, lr}
 800873a:	b082      	sub	sp, #8
 800873c:	af00      	add	r7, sp, #0
 800873e:	6078      	str	r0, [r7, #4]
  HAL_Delay(ms);
 8008740:	6878      	ldr	r0, [r7, #4]
 8008742:	f000 ff6b 	bl	800961c <HAL_Delay>
}
 8008746:	bf00      	nop
 8008748:	3708      	adds	r7, #8
 800874a:	46bd      	mov	sp, r7
 800874c:	bd80      	pop	{r7, pc}

0800874e <millis>:
uint32_t millis(void)
{
 800874e:	b580      	push	{r7, lr}
 8008750:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8008752:	f000 ff57 	bl	8009604 <HAL_GetTick>
 8008756:	4603      	mov	r3, r0
}
 8008758:	4618      	mov	r0, r3
 800875a:	bd80      	pop	{r7, pc}

0800875c <__io_putchar>:

int __io_putchar(int ch)
{
 800875c:	b580      	push	{r7, lr}
 800875e:	b082      	sub	sp, #8
 8008760:	af00      	add	r7, sp, #0
 8008762:	6078      	str	r0, [r7, #4]
  uartWrite(_DEF_UART1, (uint8_t *)&ch, 1);
 8008764:	1d3b      	adds	r3, r7, #4
 8008766:	2201      	movs	r2, #1
 8008768:	4619      	mov	r1, r3
 800876a:	2000      	movs	r0, #0
 800876c:	f000 fdb0 	bl	80092d0 <uartWrite>

  return 1;
 8008770:	2301      	movs	r3, #1
}
 8008772:	4618      	mov	r0, r3
 8008774:	3708      	adds	r7, #8
 8008776:	46bd      	mov	sp, r7
 8008778:	bd80      	pop	{r7, pc}
	...

0800877c <SystemClock_Config>:


void SystemClock_Config(void)
{
 800877c:	b580      	push	{r7, lr}
 800877e:	b094      	sub	sp, #80	; 0x50
 8008780:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8008782:	f107 0320 	add.w	r3, r7, #32
 8008786:	2230      	movs	r2, #48	; 0x30
 8008788:	2100      	movs	r1, #0
 800878a:	4618      	mov	r0, r3
 800878c:	f009 fb24 	bl	8011dd8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8008790:	f107 030c 	add.w	r3, r7, #12
 8008794:	2200      	movs	r2, #0
 8008796:	601a      	str	r2, [r3, #0]
 8008798:	605a      	str	r2, [r3, #4]
 800879a:	609a      	str	r2, [r3, #8]
 800879c:	60da      	str	r2, [r3, #12]
 800879e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80087a0:	2300      	movs	r3, #0
 80087a2:	60bb      	str	r3, [r7, #8]
 80087a4:	4b28      	ldr	r3, [pc, #160]	; (8008848 <SystemClock_Config+0xcc>)
 80087a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087a8:	4a27      	ldr	r2, [pc, #156]	; (8008848 <SystemClock_Config+0xcc>)
 80087aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80087ae:	6413      	str	r3, [r2, #64]	; 0x40
 80087b0:	4b25      	ldr	r3, [pc, #148]	; (8008848 <SystemClock_Config+0xcc>)
 80087b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80087b8:	60bb      	str	r3, [r7, #8]
 80087ba:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80087bc:	2300      	movs	r3, #0
 80087be:	607b      	str	r3, [r7, #4]
 80087c0:	4b22      	ldr	r3, [pc, #136]	; (800884c <SystemClock_Config+0xd0>)
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	4a21      	ldr	r2, [pc, #132]	; (800884c <SystemClock_Config+0xd0>)
 80087c6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80087ca:	6013      	str	r3, [r2, #0]
 80087cc:	4b1f      	ldr	r3, [pc, #124]	; (800884c <SystemClock_Config+0xd0>)
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80087d4:	607b      	str	r3, [r7, #4]
 80087d6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 80087d8:	2305      	movs	r3, #5
 80087da:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80087dc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80087e0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80087e2:	2301      	movs	r3, #1
 80087e4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80087e6:	2302      	movs	r3, #2
 80087e8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80087ea:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80087ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80087f0:	2319      	movs	r3, #25
 80087f2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 80087f4:	23c0      	movs	r3, #192	; 0xc0
 80087f6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80087f8:	2302      	movs	r3, #2
 80087fa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80087fc:	2304      	movs	r3, #4
 80087fe:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8008800:	f107 0320 	add.w	r3, r7, #32
 8008804:	4618      	mov	r0, r3
 8008806:	f003 fbd7 	bl	800bfb8 <HAL_RCC_OscConfig>
 800880a:	4603      	mov	r3, r0
 800880c:	2b00      	cmp	r3, #0
 800880e:	d001      	beq.n	8008814 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8008810:	f000 f81e 	bl	8008850 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8008814:	230f      	movs	r3, #15
 8008816:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8008818:	2302      	movs	r3, #2
 800881a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800881c:	2300      	movs	r3, #0
 800881e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8008820:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008824:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8008826:	2300      	movs	r3, #0
 8008828:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800882a:	f107 030c 	add.w	r3, r7, #12
 800882e:	2103      	movs	r1, #3
 8008830:	4618      	mov	r0, r3
 8008832:	f003 fe39 	bl	800c4a8 <HAL_RCC_ClockConfig>
 8008836:	4603      	mov	r3, r0
 8008838:	2b00      	cmp	r3, #0
 800883a:	d001      	beq.n	8008840 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800883c:	f000 f808 	bl	8008850 <Error_Handler>
  }
}
 8008840:	bf00      	nop
 8008842:	3750      	adds	r7, #80	; 0x50
 8008844:	46bd      	mov	sp, r7
 8008846:	bd80      	pop	{r7, pc}
 8008848:	40023800 	.word	0x40023800
 800884c:	40007000 	.word	0x40007000

08008850 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8008850:	b480      	push	{r7}
 8008852:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8008854:	b672      	cpsid	i
}
 8008856:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8008858:	e7fe      	b.n	8008858 <Error_Handler+0x8>
	...

0800885c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800885c:	b480      	push	{r7}
 800885e:	b083      	sub	sp, #12
 8008860:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008862:	2300      	movs	r3, #0
 8008864:	607b      	str	r3, [r7, #4]
 8008866:	4b10      	ldr	r3, [pc, #64]	; (80088a8 <HAL_MspInit+0x4c>)
 8008868:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800886a:	4a0f      	ldr	r2, [pc, #60]	; (80088a8 <HAL_MspInit+0x4c>)
 800886c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008870:	6453      	str	r3, [r2, #68]	; 0x44
 8008872:	4b0d      	ldr	r3, [pc, #52]	; (80088a8 <HAL_MspInit+0x4c>)
 8008874:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008876:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800887a:	607b      	str	r3, [r7, #4]
 800887c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800887e:	2300      	movs	r3, #0
 8008880:	603b      	str	r3, [r7, #0]
 8008882:	4b09      	ldr	r3, [pc, #36]	; (80088a8 <HAL_MspInit+0x4c>)
 8008884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008886:	4a08      	ldr	r2, [pc, #32]	; (80088a8 <HAL_MspInit+0x4c>)
 8008888:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800888c:	6413      	str	r3, [r2, #64]	; 0x40
 800888e:	4b06      	ldr	r3, [pc, #24]	; (80088a8 <HAL_MspInit+0x4c>)
 8008890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008892:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008896:	603b      	str	r3, [r7, #0]
 8008898:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800889a:	bf00      	nop
 800889c:	370c      	adds	r7, #12
 800889e:	46bd      	mov	sp, r7
 80088a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088a4:	4770      	bx	lr
 80088a6:	bf00      	nop
 80088a8:	40023800 	.word	0x40023800

080088ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80088ac:	b480      	push	{r7}
 80088ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80088b0:	e7fe      	b.n	80088b0 <NMI_Handler+0x4>

080088b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80088b2:	b480      	push	{r7}
 80088b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80088b6:	e7fe      	b.n	80088b6 <HardFault_Handler+0x4>

080088b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80088b8:	b480      	push	{r7}
 80088ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80088bc:	e7fe      	b.n	80088bc <MemManage_Handler+0x4>

080088be <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80088be:	b480      	push	{r7}
 80088c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80088c2:	e7fe      	b.n	80088c2 <BusFault_Handler+0x4>

080088c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80088c4:	b480      	push	{r7}
 80088c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80088c8:	e7fe      	b.n	80088c8 <UsageFault_Handler+0x4>

080088ca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80088ca:	b480      	push	{r7}
 80088cc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80088ce:	bf00      	nop
 80088d0:	46bd      	mov	sp, r7
 80088d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088d6:	4770      	bx	lr

080088d8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80088d8:	b480      	push	{r7}
 80088da:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80088dc:	bf00      	nop
 80088de:	46bd      	mov	sp, r7
 80088e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088e4:	4770      	bx	lr

080088e6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80088e6:	b480      	push	{r7}
 80088e8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80088ea:	bf00      	nop
 80088ec:	46bd      	mov	sp, r7
 80088ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088f2:	4770      	bx	lr

080088f4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80088f4:	b580      	push	{r7, lr}
 80088f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80088f8:	f000 fe70 	bl	80095dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80088fc:	bf00      	nop
 80088fe:	bd80      	pop	{r7, pc}

08008900 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8008900:	b580      	push	{r7, lr}
 8008902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8008904:	4802      	ldr	r0, [pc, #8]	; (8008910 <USART1_IRQHandler+0x10>)
 8008906:	f004 faf5 	bl	800cef4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800890a:	bf00      	nop
 800890c:	bd80      	pop	{r7, pc}
 800890e:	bf00      	nop
 8008910:	20000250 	.word	0x20000250

08008914 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8008914:	b580      	push	{r7, lr}
 8008916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8008918:	4802      	ldr	r0, [pc, #8]	; (8008924 <DMA2_Stream2_IRQHandler+0x10>)
 800891a:	f001 f9dd 	bl	8009cd8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800891e:	bf00      	nop
 8008920:	bd80      	pop	{r7, pc}
 8008922:	bf00      	nop
 8008924:	20000294 	.word	0x20000294

08008928 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8008928:	b580      	push	{r7, lr}
 800892a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800892c:	4802      	ldr	r0, [pc, #8]	; (8008938 <OTG_FS_IRQHandler+0x10>)
 800892e:	f002 fb10 	bl	800af52 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8008932:	bf00      	nop
 8008934:	bd80      	pop	{r7, pc}
 8008936:	bf00      	nop
 8008938:	20001324 	.word	0x20001324

0800893c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800893c:	b580      	push	{r7, lr}
 800893e:	b086      	sub	sp, #24
 8008940:	af00      	add	r7, sp, #0
 8008942:	60f8      	str	r0, [r7, #12]
 8008944:	60b9      	str	r1, [r7, #8]
 8008946:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008948:	2300      	movs	r3, #0
 800894a:	617b      	str	r3, [r7, #20]
 800894c:	e00a      	b.n	8008964 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800894e:	f3af 8000 	nop.w
 8008952:	4601      	mov	r1, r0
 8008954:	68bb      	ldr	r3, [r7, #8]
 8008956:	1c5a      	adds	r2, r3, #1
 8008958:	60ba      	str	r2, [r7, #8]
 800895a:	b2ca      	uxtb	r2, r1
 800895c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800895e:	697b      	ldr	r3, [r7, #20]
 8008960:	3301      	adds	r3, #1
 8008962:	617b      	str	r3, [r7, #20]
 8008964:	697a      	ldr	r2, [r7, #20]
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	429a      	cmp	r2, r3
 800896a:	dbf0      	blt.n	800894e <_read+0x12>
	}

return len;
 800896c:	687b      	ldr	r3, [r7, #4]
}
 800896e:	4618      	mov	r0, r3
 8008970:	3718      	adds	r7, #24
 8008972:	46bd      	mov	sp, r7
 8008974:	bd80      	pop	{r7, pc}

08008976 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8008976:	b580      	push	{r7, lr}
 8008978:	b086      	sub	sp, #24
 800897a:	af00      	add	r7, sp, #0
 800897c:	60f8      	str	r0, [r7, #12]
 800897e:	60b9      	str	r1, [r7, #8]
 8008980:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008982:	2300      	movs	r3, #0
 8008984:	617b      	str	r3, [r7, #20]
 8008986:	e009      	b.n	800899c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8008988:	68bb      	ldr	r3, [r7, #8]
 800898a:	1c5a      	adds	r2, r3, #1
 800898c:	60ba      	str	r2, [r7, #8]
 800898e:	781b      	ldrb	r3, [r3, #0]
 8008990:	4618      	mov	r0, r3
 8008992:	f7ff fee3 	bl	800875c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008996:	697b      	ldr	r3, [r7, #20]
 8008998:	3301      	adds	r3, #1
 800899a:	617b      	str	r3, [r7, #20]
 800899c:	697a      	ldr	r2, [r7, #20]
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	429a      	cmp	r2, r3
 80089a2:	dbf1      	blt.n	8008988 <_write+0x12>
	}
	return len;
 80089a4:	687b      	ldr	r3, [r7, #4]
}
 80089a6:	4618      	mov	r0, r3
 80089a8:	3718      	adds	r7, #24
 80089aa:	46bd      	mov	sp, r7
 80089ac:	bd80      	pop	{r7, pc}

080089ae <_close>:

int _close(int file)
{
 80089ae:	b480      	push	{r7}
 80089b0:	b083      	sub	sp, #12
 80089b2:	af00      	add	r7, sp, #0
 80089b4:	6078      	str	r0, [r7, #4]
	return -1;
 80089b6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80089ba:	4618      	mov	r0, r3
 80089bc:	370c      	adds	r7, #12
 80089be:	46bd      	mov	sp, r7
 80089c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089c4:	4770      	bx	lr

080089c6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80089c6:	b480      	push	{r7}
 80089c8:	b083      	sub	sp, #12
 80089ca:	af00      	add	r7, sp, #0
 80089cc:	6078      	str	r0, [r7, #4]
 80089ce:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80089d0:	683b      	ldr	r3, [r7, #0]
 80089d2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80089d6:	605a      	str	r2, [r3, #4]
	return 0;
 80089d8:	2300      	movs	r3, #0
}
 80089da:	4618      	mov	r0, r3
 80089dc:	370c      	adds	r7, #12
 80089de:	46bd      	mov	sp, r7
 80089e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089e4:	4770      	bx	lr

080089e6 <_isatty>:

int _isatty(int file)
{
 80089e6:	b480      	push	{r7}
 80089e8:	b083      	sub	sp, #12
 80089ea:	af00      	add	r7, sp, #0
 80089ec:	6078      	str	r0, [r7, #4]
	return 1;
 80089ee:	2301      	movs	r3, #1
}
 80089f0:	4618      	mov	r0, r3
 80089f2:	370c      	adds	r7, #12
 80089f4:	46bd      	mov	sp, r7
 80089f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089fa:	4770      	bx	lr

080089fc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80089fc:	b480      	push	{r7}
 80089fe:	b085      	sub	sp, #20
 8008a00:	af00      	add	r7, sp, #0
 8008a02:	60f8      	str	r0, [r7, #12]
 8008a04:	60b9      	str	r1, [r7, #8]
 8008a06:	607a      	str	r2, [r7, #4]
	return 0;
 8008a08:	2300      	movs	r3, #0
}
 8008a0a:	4618      	mov	r0, r3
 8008a0c:	3714      	adds	r7, #20
 8008a0e:	46bd      	mov	sp, r7
 8008a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a14:	4770      	bx	lr
	...

08008a18 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8008a18:	b580      	push	{r7, lr}
 8008a1a:	b086      	sub	sp, #24
 8008a1c:	af00      	add	r7, sp, #0
 8008a1e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8008a20:	4a14      	ldr	r2, [pc, #80]	; (8008a74 <_sbrk+0x5c>)
 8008a22:	4b15      	ldr	r3, [pc, #84]	; (8008a78 <_sbrk+0x60>)
 8008a24:	1ad3      	subs	r3, r2, r3
 8008a26:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8008a28:	697b      	ldr	r3, [r7, #20]
 8008a2a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8008a2c:	4b13      	ldr	r3, [pc, #76]	; (8008a7c <_sbrk+0x64>)
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d102      	bne.n	8008a3a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8008a34:	4b11      	ldr	r3, [pc, #68]	; (8008a7c <_sbrk+0x64>)
 8008a36:	4a12      	ldr	r2, [pc, #72]	; (8008a80 <_sbrk+0x68>)
 8008a38:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8008a3a:	4b10      	ldr	r3, [pc, #64]	; (8008a7c <_sbrk+0x64>)
 8008a3c:	681a      	ldr	r2, [r3, #0]
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	4413      	add	r3, r2
 8008a42:	693a      	ldr	r2, [r7, #16]
 8008a44:	429a      	cmp	r2, r3
 8008a46:	d207      	bcs.n	8008a58 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8008a48:	f009 f99c 	bl	8011d84 <__errno>
 8008a4c:	4603      	mov	r3, r0
 8008a4e:	220c      	movs	r2, #12
 8008a50:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8008a52:	f04f 33ff 	mov.w	r3, #4294967295
 8008a56:	e009      	b.n	8008a6c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8008a58:	4b08      	ldr	r3, [pc, #32]	; (8008a7c <_sbrk+0x64>)
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8008a5e:	4b07      	ldr	r3, [pc, #28]	; (8008a7c <_sbrk+0x64>)
 8008a60:	681a      	ldr	r2, [r3, #0]
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	4413      	add	r3, r2
 8008a66:	4a05      	ldr	r2, [pc, #20]	; (8008a7c <_sbrk+0x64>)
 8008a68:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8008a6a:	68fb      	ldr	r3, [r7, #12]
}
 8008a6c:	4618      	mov	r0, r3
 8008a6e:	3718      	adds	r7, #24
 8008a70:	46bd      	mov	sp, r7
 8008a72:	bd80      	pop	{r7, pc}
 8008a74:	20020000 	.word	0x20020000
 8008a78:	00000400 	.word	0x00000400
 8008a7c:	20000228 	.word	0x20000228
 8008a80:	20001960 	.word	0x20001960

08008a84 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8008a84:	b480      	push	{r7}
 8008a86:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8008a88:	4b07      	ldr	r3, [pc, #28]	; (8008aa8 <SystemInit+0x24>)
 8008a8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008a8e:	4a06      	ldr	r2, [pc, #24]	; (8008aa8 <SystemInit+0x24>)
 8008a90:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008a94:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM || DATA_IN_ExtSDRAM */

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
 8008a98:	4b03      	ldr	r3, [pc, #12]	; (8008aa8 <SystemInit+0x24>)
 8008a9a:	4a04      	ldr	r2, [pc, #16]	; (8008aac <SystemInit+0x28>)
 8008a9c:	609a      	str	r2, [r3, #8]
#endif /* USER_VECT_TAB_ADDRESS */
}
 8008a9e:	bf00      	nop
 8008aa0:	46bd      	mov	sp, r7
 8008aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aa6:	4770      	bx	lr
 8008aa8:	e000ed00 	.word	0xe000ed00
 8008aac:	08008000 	.word	0x08008000

08008ab0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8008ab0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8008ae8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8008ab4:	480d      	ldr	r0, [pc, #52]	; (8008aec <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8008ab6:	490e      	ldr	r1, [pc, #56]	; (8008af0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8008ab8:	4a0e      	ldr	r2, [pc, #56]	; (8008af4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8008aba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8008abc:	e002      	b.n	8008ac4 <LoopCopyDataInit>

08008abe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8008abe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8008ac0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8008ac2:	3304      	adds	r3, #4

08008ac4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8008ac4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8008ac6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8008ac8:	d3f9      	bcc.n	8008abe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8008aca:	4a0b      	ldr	r2, [pc, #44]	; (8008af8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8008acc:	4c0b      	ldr	r4, [pc, #44]	; (8008afc <LoopFillZerobss+0x26>)
  movs r3, #0
 8008ace:	2300      	movs	r3, #0
  b LoopFillZerobss
 8008ad0:	e001      	b.n	8008ad6 <LoopFillZerobss>

08008ad2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8008ad2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8008ad4:	3204      	adds	r2, #4

08008ad6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8008ad6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8008ad8:	d3fb      	bcc.n	8008ad2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8008ada:	f7ff ffd3 	bl	8008a84 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8008ade:	f009 f957 	bl	8011d90 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8008ae2:	f009 f943 	bl	8011d6c <main>
  bx  lr    
 8008ae6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8008ae8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8008aec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8008af0:	2000020c 	.word	0x2000020c
  ldr r2, =_sidata
 8008af4:	08012fe4 	.word	0x08012fe4
  ldr r2, =_sbss
 8008af8:	2000020c 	.word	0x2000020c
  ldr r4, =_ebss
 8008afc:	2000195c 	.word	0x2000195c

08008b00 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8008b00:	e7fe      	b.n	8008b00 <ADC_IRQHandler>

08008b02 <qbufferCreate>:
{

}

bool qbufferCreate(qbuffer_t *p_node, uint8_t *p_buf, uint32_t length)
{
 8008b02:	b480      	push	{r7}
 8008b04:	b087      	sub	sp, #28
 8008b06:	af00      	add	r7, sp, #0
 8008b08:	60f8      	str	r0, [r7, #12]
 8008b0a:	60b9      	str	r1, [r7, #8]
 8008b0c:	607a      	str	r2, [r7, #4]
	/*Making buffer is index initializing */
	bool ret = true;
 8008b0e:	2301      	movs	r3, #1
 8008b10:	75fb      	strb	r3, [r7, #23]

	p_node->in 		= 0;
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	2200      	movs	r2, #0
 8008b16:	601a      	str	r2, [r3, #0]
	p_node->out	  = 0;
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	2200      	movs	r2, #0
 8008b1c:	605a      	str	r2, [r3, #4]
	p_node->len   = length;
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	687a      	ldr	r2, [r7, #4]
 8008b22:	609a      	str	r2, [r3, #8]
	p_node->p_buf = p_buf;
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	68ba      	ldr	r2, [r7, #8]
 8008b28:	60da      	str	r2, [r3, #12]

	return ret;
 8008b2a:	7dfb      	ldrb	r3, [r7, #23]
}
 8008b2c:	4618      	mov	r0, r3
 8008b2e:	371c      	adds	r7, #28
 8008b30:	46bd      	mov	sp, r7
 8008b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b36:	4770      	bx	lr

08008b38 <qbufferRead>:
	return ret;
}

/* Read qbuffer and input to p_data. */
bool qbufferRead(qbuffer_t *p_node, uint8_t *p_data, uint32_t length)
{
 8008b38:	b480      	push	{r7}
 8008b3a:	b087      	sub	sp, #28
 8008b3c:	af00      	add	r7, sp, #0
 8008b3e:	60f8      	str	r0, [r7, #12]
 8008b40:	60b9      	str	r1, [r7, #8]
 8008b42:	607a      	str	r2, [r7, #4]
	bool ret = true;
 8008b44:	2301      	movs	r3, #1
 8008b46:	75fb      	strb	r3, [r7, #23]
	for(int i = 0; i < length; i++)
 8008b48:	2300      	movs	r3, #0
 8008b4a:	613b      	str	r3, [r7, #16]
 8008b4c:	e026      	b.n	8008b9c <qbufferRead+0x64>
	{
		if(p_node->p_buf != NULL)
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	68db      	ldr	r3, [r3, #12]
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d009      	beq.n	8008b6a <qbufferRead+0x32>
		{
			p_data[i] = p_node->p_buf[p_node->out];
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	68da      	ldr	r2, [r3, #12]
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	685b      	ldr	r3, [r3, #4]
 8008b5e:	441a      	add	r2, r3
 8008b60:	693b      	ldr	r3, [r7, #16]
 8008b62:	68b9      	ldr	r1, [r7, #8]
 8008b64:	440b      	add	r3, r1
 8008b66:	7812      	ldrb	r2, [r2, #0]
 8008b68:	701a      	strb	r2, [r3, #0]
		}
		if(p_node->out != p_node->in)
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	685a      	ldr	r2, [r3, #4]
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	429a      	cmp	r2, r3
 8008b74:	d00c      	beq.n	8008b90 <qbufferRead+0x58>
		{
			/* index update */
			p_node->out = (p_node->out + 1) % p_node->len;
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	685b      	ldr	r3, [r3, #4]
 8008b7a:	3301      	adds	r3, #1
 8008b7c:	68fa      	ldr	r2, [r7, #12]
 8008b7e:	6892      	ldr	r2, [r2, #8]
 8008b80:	fbb3 f1f2 	udiv	r1, r3, r2
 8008b84:	fb01 f202 	mul.w	r2, r1, r2
 8008b88:	1a9a      	subs	r2, r3, r2
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	605a      	str	r2, [r3, #4]
 8008b8e:	e002      	b.n	8008b96 <qbufferRead+0x5e>
		}
		else /*when in idx = out idx*/
		{
			ret = false;
 8008b90:	2300      	movs	r3, #0
 8008b92:	75fb      	strb	r3, [r7, #23]
			break;
 8008b94:	e006      	b.n	8008ba4 <qbufferRead+0x6c>
	for(int i = 0; i < length; i++)
 8008b96:	693b      	ldr	r3, [r7, #16]
 8008b98:	3301      	adds	r3, #1
 8008b9a:	613b      	str	r3, [r7, #16]
 8008b9c:	693b      	ldr	r3, [r7, #16]
 8008b9e:	687a      	ldr	r2, [r7, #4]
 8008ba0:	429a      	cmp	r2, r3
 8008ba2:	d8d4      	bhi.n	8008b4e <qbufferRead+0x16>
		}
	}
	return ret;
 8008ba4:	7dfb      	ldrb	r3, [r7, #23]
}
 8008ba6:	4618      	mov	r0, r3
 8008ba8:	371c      	adds	r7, #28
 8008baa:	46bd      	mov	sp, r7
 8008bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bb0:	4770      	bx	lr

08008bb2 <qbufferAvailable>:

/*transmit struct pointer, receive current buffer's data number*/
uint32_t qbufferAvailable(qbuffer_t *p_node)
{
 8008bb2:	b480      	push	{r7}
 8008bb4:	b085      	sub	sp, #20
 8008bb6:	af00      	add	r7, sp, #0
 8008bb8:	6078      	str	r0, [r7, #4]
	uint32_t ret;

	ret = (p_node->len + p_node->in - p_node->out) % p_node->len;
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	689a      	ldr	r2, [r3, #8]
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	441a      	add	r2, r3
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	685b      	ldr	r3, [r3, #4]
 8008bc8:	1ad3      	subs	r3, r2, r3
 8008bca:	687a      	ldr	r2, [r7, #4]
 8008bcc:	6892      	ldr	r2, [r2, #8]
 8008bce:	fbb3 f1f2 	udiv	r1, r3, r2
 8008bd2:	fb01 f202 	mul.w	r2, r1, r2
 8008bd6:	1a9b      	subs	r3, r3, r2
 8008bd8:	60fb      	str	r3, [r7, #12]

	return ret;
 8008bda:	68fb      	ldr	r3, [r7, #12]
}
 8008bdc:	4618      	mov	r0, r3
 8008bde:	3714      	adds	r7, #20
 8008be0:	46bd      	mov	sp, r7
 8008be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008be6:	4770      	bx	lr

08008be8 <flashInit>:
  {FLASH_SECTOR_6, 0x08040000, 131072},
  {FLASH_SECTOR_7, 0x08060000, 131072}
};

bool flashInit(void)
{
 8008be8:	b480      	push	{r7}
 8008bea:	af00      	add	r7, sp, #0
  return true;
 8008bec:	2301      	movs	r3, #1
}
 8008bee:	4618      	mov	r0, r3
 8008bf0:	46bd      	mov	sp, r7
 8008bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bf6:	4770      	bx	lr

08008bf8 <flashErase>:
bool flashErase(uint32_t addr, uint32_t length)
{
 8008bf8:	b580      	push	{r7, lr}
 8008bfa:	b08c      	sub	sp, #48	; 0x30
 8008bfc:	af00      	add	r7, sp, #0
 8008bfe:	6078      	str	r0, [r7, #4]
 8008c00:	6039      	str	r1, [r7, #0]
  bool ret = false;
 8008c02:	2300      	movs	r3, #0
 8008c04:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  HAL_StatusTypeDef status;
  FLASH_EraseInitTypeDef init;
  uint32_t sector_error;

  int16_t start_sector_num = -1;
 8008c08:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008c0c:	85bb      	strh	r3, [r7, #44]	; 0x2c
  uint32_t sector_count    = 0;
 8008c0e:	2300      	movs	r3, #0
 8008c10:	62bb      	str	r3, [r7, #40]	; 0x28

  for(int i=0; i<FLASH_SECTOR_MAX; i++)
 8008c12:	2300      	movs	r3, #0
 8008c14:	627b      	str	r3, [r7, #36]	; 0x24
 8008c16:	e015      	b.n	8008c44 <flashErase+0x4c>
  {
    if(flashInSector(i, addr, length) == true)
 8008c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c1a:	b29b      	uxth	r3, r3
 8008c1c:	683a      	ldr	r2, [r7, #0]
 8008c1e:	6879      	ldr	r1, [r7, #4]
 8008c20:	4618      	mov	r0, r3
 8008c22:	f000 f8af 	bl	8008d84 <flashInSector>
 8008c26:	4603      	mov	r3, r0
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d008      	beq.n	8008c3e <flashErase+0x46>
    {
      if(start_sector_num < 0)
 8008c2c:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	da01      	bge.n	8008c38 <flashErase+0x40>
      {
        start_sector_num = i;
 8008c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c36:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }
      sector_count++;
 8008c38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c3a:	3301      	adds	r3, #1
 8008c3c:	62bb      	str	r3, [r7, #40]	; 0x28
  for(int i=0; i<FLASH_SECTOR_MAX; i++)
 8008c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c40:	3301      	adds	r3, #1
 8008c42:	627b      	str	r3, [r7, #36]	; 0x24
 8008c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c46:	2b07      	cmp	r3, #7
 8008c48:	dde6      	ble.n	8008c18 <flashErase+0x20>
    }
  }

  if(sector_count > 0 )
 8008c4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d027      	beq.n	8008ca0 <flashErase+0xa8>
  {
    HAL_FLASH_Unlock();
 8008c50:	f001 fb00 	bl	800a254 <HAL_FLASH_Unlock>
    init.TypeErase    = FLASH_TYPEERASE_SECTORS;
 8008c54:	2300      	movs	r3, #0
 8008c56:	60fb      	str	r3, [r7, #12]
    init.Banks        = FLASH_BANK_1;
 8008c58:	2301      	movs	r3, #1
 8008c5a:	613b      	str	r3, [r7, #16]
    init.Sector       = flash_tbl[start_sector_num].sector;
 8008c5c:	f9b7 202c 	ldrsh.w	r2, [r7, #44]	; 0x2c
 8008c60:	4912      	ldr	r1, [pc, #72]	; (8008cac <flashErase+0xb4>)
 8008c62:	4613      	mov	r3, r2
 8008c64:	005b      	lsls	r3, r3, #1
 8008c66:	4413      	add	r3, r2
 8008c68:	009b      	lsls	r3, r3, #2
 8008c6a:	440b      	add	r3, r1
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	617b      	str	r3, [r7, #20]
    init.NbSectors    = sector_count;
 8008c70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c72:	61bb      	str	r3, [r7, #24]
    init.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 8008c74:	2302      	movs	r3, #2
 8008c76:	61fb      	str	r3, [r7, #28]

    status = HAL_FLASHEx_Erase(&init, &sector_error);
 8008c78:	f107 0208 	add.w	r2, r7, #8
 8008c7c:	f107 030c 	add.w	r3, r7, #12
 8008c80:	4611      	mov	r1, r2
 8008c82:	4618      	mov	r0, r3
 8008c84:	f001 fc58 	bl	800a538 <HAL_FLASHEx_Erase>
 8008c88:	4603      	mov	r3, r0
 8008c8a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    if(status == HAL_OK)
 8008c8e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d102      	bne.n	8008c9c <flashErase+0xa4>
    {
      ret = true;
 8008c96:	2301      	movs	r3, #1
 8008c98:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }
    HAL_FLASH_Lock();
 8008c9c:	f001 fafc 	bl	800a298 <HAL_FLASH_Lock>
  }

  return ret;
 8008ca0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8008ca4:	4618      	mov	r0, r3
 8008ca6:	3730      	adds	r7, #48	; 0x30
 8008ca8:	46bd      	mov	sp, r7
 8008caa:	bd80      	pop	{r7, pc}
 8008cac:	08012ed4 	.word	0x08012ed4

08008cb0 <flashWrite>:
bool flashWrite(uint32_t addr, uint8_t *p_data, uint32_t length)
{
 8008cb0:	b5b0      	push	{r4, r5, r7, lr}
 8008cb2:	b088      	sub	sp, #32
 8008cb4:	af00      	add	r7, sp, #0
 8008cb6:	60f8      	str	r0, [r7, #12]
 8008cb8:	60b9      	str	r1, [r7, #8]
 8008cba:	607a      	str	r2, [r7, #4]
  bool ret = true;
 8008cbc:	2301      	movs	r3, #1
 8008cbe:	77fb      	strb	r3, [r7, #31]

  HAL_StatusTypeDef status;

  if(addr%2 != 0)
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	f003 0301 	and.w	r3, r3, #1
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d001      	beq.n	8008cce <flashWrite+0x1e>
  {
    return false;
 8008cca:	2300      	movs	r3, #0
 8008ccc:	e033      	b.n	8008d36 <flashWrite+0x86>
  }
  HAL_FLASH_Unlock();
 8008cce:	f001 fac1 	bl	800a254 <HAL_FLASH_Unlock>
  for(int i=0; i<length; i+=2)
 8008cd2:	2300      	movs	r3, #0
 8008cd4:	61bb      	str	r3, [r7, #24]
 8008cd6:	e027      	b.n	8008d28 <flashWrite+0x78>
  {//per HALFWORD 16bit
    uint16_t data;

    data  = p_data[i+0] << 0; // is equal = *(p_data + i);???
 8008cd8:	69bb      	ldr	r3, [r7, #24]
 8008cda:	68ba      	ldr	r2, [r7, #8]
 8008cdc:	4413      	add	r3, r2
 8008cde:	781b      	ldrb	r3, [r3, #0]
 8008ce0:	82fb      	strh	r3, [r7, #22]
    data |= p_data[i+1] << 8;
 8008ce2:	69bb      	ldr	r3, [r7, #24]
 8008ce4:	3301      	adds	r3, #1
 8008ce6:	68ba      	ldr	r2, [r7, #8]
 8008ce8:	4413      	add	r3, r2
 8008cea:	781b      	ldrb	r3, [r3, #0]
 8008cec:	021b      	lsls	r3, r3, #8
 8008cee:	b21a      	sxth	r2, r3
 8008cf0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8008cf4:	4313      	orrs	r3, r2
 8008cf6:	b21b      	sxth	r3, r3
 8008cf8:	82fb      	strh	r3, [r7, #22]

    status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, addr + i, (uint64_t)data);// 16bit write
 8008cfa:	69ba      	ldr	r2, [r7, #24]
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	18d1      	adds	r1, r2, r3
 8008d00:	8afb      	ldrh	r3, [r7, #22]
 8008d02:	2200      	movs	r2, #0
 8008d04:	461c      	mov	r4, r3
 8008d06:	4615      	mov	r5, r2
 8008d08:	4622      	mov	r2, r4
 8008d0a:	462b      	mov	r3, r5
 8008d0c:	2001      	movs	r0, #1
 8008d0e:	f001 fa4d 	bl	800a1ac <HAL_FLASH_Program>
 8008d12:	4603      	mov	r3, r0
 8008d14:	757b      	strb	r3, [r7, #21]
    if(status != HAL_OK)
 8008d16:	7d7b      	ldrb	r3, [r7, #21]
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d002      	beq.n	8008d22 <flashWrite+0x72>
    {
      ret = false;
 8008d1c:	2300      	movs	r3, #0
 8008d1e:	77fb      	strb	r3, [r7, #31]
      break;
 8008d20:	e006      	b.n	8008d30 <flashWrite+0x80>
  for(int i=0; i<length; i+=2)
 8008d22:	69bb      	ldr	r3, [r7, #24]
 8008d24:	3302      	adds	r3, #2
 8008d26:	61bb      	str	r3, [r7, #24]
 8008d28:	69bb      	ldr	r3, [r7, #24]
 8008d2a:	687a      	ldr	r2, [r7, #4]
 8008d2c:	429a      	cmp	r2, r3
 8008d2e:	d8d3      	bhi.n	8008cd8 <flashWrite+0x28>
    }
  }

  HAL_FLASH_Lock();
 8008d30:	f001 fab2 	bl	800a298 <HAL_FLASH_Lock>

  return ret;
 8008d34:	7ffb      	ldrb	r3, [r7, #31]
}
 8008d36:	4618      	mov	r0, r3
 8008d38:	3720      	adds	r7, #32
 8008d3a:	46bd      	mov	sp, r7
 8008d3c:	bdb0      	pop	{r4, r5, r7, pc}

08008d3e <flashRead>:
bool flashRead(uint32_t addr, uint8_t *p_data, uint32_t length)
{
 8008d3e:	b480      	push	{r7}
 8008d40:	b089      	sub	sp, #36	; 0x24
 8008d42:	af00      	add	r7, sp, #0
 8008d44:	60f8      	str	r0, [r7, #12]
 8008d46:	60b9      	str	r1, [r7, #8]
 8008d48:	607a      	str	r2, [r7, #4]
  bool ret = true;
 8008d4a:	2301      	movs	r3, #1
 8008d4c:	76fb      	strb	r3, [r7, #27]

  uint8_t *p_byte = (uint8_t *)addr;//-> changing address meaning value
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	617b      	str	r3, [r7, #20]

  for(int i=0; i<length; i++)
 8008d52:	2300      	movs	r3, #0
 8008d54:	61fb      	str	r3, [r7, #28]
 8008d56:	e00a      	b.n	8008d6e <flashRead+0x30>
  {
    p_data[i] = p_byte[i];
 8008d58:	69fb      	ldr	r3, [r7, #28]
 8008d5a:	697a      	ldr	r2, [r7, #20]
 8008d5c:	441a      	add	r2, r3
 8008d5e:	69fb      	ldr	r3, [r7, #28]
 8008d60:	68b9      	ldr	r1, [r7, #8]
 8008d62:	440b      	add	r3, r1
 8008d64:	7812      	ldrb	r2, [r2, #0]
 8008d66:	701a      	strb	r2, [r3, #0]
  for(int i=0; i<length; i++)
 8008d68:	69fb      	ldr	r3, [r7, #28]
 8008d6a:	3301      	adds	r3, #1
 8008d6c:	61fb      	str	r3, [r7, #28]
 8008d6e:	69fb      	ldr	r3, [r7, #28]
 8008d70:	687a      	ldr	r2, [r7, #4]
 8008d72:	429a      	cmp	r2, r3
 8008d74:	d8f0      	bhi.n	8008d58 <flashRead+0x1a>
  }

  return ret;
 8008d76:	7efb      	ldrb	r3, [r7, #27]
}
 8008d78:	4618      	mov	r0, r3
 8008d7a:	3724      	adds	r7, #36	; 0x24
 8008d7c:	46bd      	mov	sp, r7
 8008d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d82:	4770      	bx	lr

08008d84 <flashInSector>:
bool flashInSector(uint16_t sector_num, uint32_t addr, uint32_t length)
{
 8008d84:	b480      	push	{r7}
 8008d86:	b08b      	sub	sp, #44	; 0x2c
 8008d88:	af00      	add	r7, sp, #0
 8008d8a:	4603      	mov	r3, r0
 8008d8c:	60b9      	str	r1, [r7, #8]
 8008d8e:	607a      	str	r2, [r7, #4]
 8008d90:	81fb      	strh	r3, [r7, #14]
  bool ret = false;
 8008d92:	2300      	movs	r3, #0
 8008d94:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t sector_start;
  uint32_t sector_end;
  uint32_t flash_start;
  uint32_t flash_end;

  sector_start = flash_tbl[sector_num].addr;
 8008d98:	89fa      	ldrh	r2, [r7, #14]
 8008d9a:	492c      	ldr	r1, [pc, #176]	; (8008e4c <flashInSector+0xc8>)
 8008d9c:	4613      	mov	r3, r2
 8008d9e:	005b      	lsls	r3, r3, #1
 8008da0:	4413      	add	r3, r2
 8008da2:	009b      	lsls	r3, r3, #2
 8008da4:	440b      	add	r3, r1
 8008da6:	3304      	adds	r3, #4
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	623b      	str	r3, [r7, #32]
  sector_end   = flash_tbl[sector_num].addr + flash_tbl[sector_num].length - 1;
 8008dac:	89fa      	ldrh	r2, [r7, #14]
 8008dae:	4927      	ldr	r1, [pc, #156]	; (8008e4c <flashInSector+0xc8>)
 8008db0:	4613      	mov	r3, r2
 8008db2:	005b      	lsls	r3, r3, #1
 8008db4:	4413      	add	r3, r2
 8008db6:	009b      	lsls	r3, r3, #2
 8008db8:	440b      	add	r3, r1
 8008dba:	3304      	adds	r3, #4
 8008dbc:	6819      	ldr	r1, [r3, #0]
 8008dbe:	89fa      	ldrh	r2, [r7, #14]
 8008dc0:	4822      	ldr	r0, [pc, #136]	; (8008e4c <flashInSector+0xc8>)
 8008dc2:	4613      	mov	r3, r2
 8008dc4:	005b      	lsls	r3, r3, #1
 8008dc6:	4413      	add	r3, r2
 8008dc8:	009b      	lsls	r3, r3, #2
 8008dca:	4403      	add	r3, r0
 8008dcc:	3308      	adds	r3, #8
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	440b      	add	r3, r1
 8008dd2:	3b01      	subs	r3, #1
 8008dd4:	61fb      	str	r3, [r7, #28]
  flash_start  = addr;
 8008dd6:	68bb      	ldr	r3, [r7, #8]
 8008dd8:	61bb      	str	r3, [r7, #24]
  flash_end    = addr + length - 1;
 8008dda:	68ba      	ldr	r2, [r7, #8]
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	4413      	add	r3, r2
 8008de0:	3b01      	subs	r3, #1
 8008de2:	617b      	str	r3, [r7, #20]

  if(sector_start >= flash_start && sector_start <= flash_end)
 8008de4:	6a3a      	ldr	r2, [r7, #32]
 8008de6:	69bb      	ldr	r3, [r7, #24]
 8008de8:	429a      	cmp	r2, r3
 8008dea:	d306      	bcc.n	8008dfa <flashInSector+0x76>
 8008dec:	6a3a      	ldr	r2, [r7, #32]
 8008dee:	697b      	ldr	r3, [r7, #20]
 8008df0:	429a      	cmp	r2, r3
 8008df2:	d802      	bhi.n	8008dfa <flashInSector+0x76>
  {
    ret = true;
 8008df4:	2301      	movs	r3, #1
 8008df6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  if(sector_end >= flash_start && sector_end <= flash_end)
 8008dfa:	69fa      	ldr	r2, [r7, #28]
 8008dfc:	69bb      	ldr	r3, [r7, #24]
 8008dfe:	429a      	cmp	r2, r3
 8008e00:	d306      	bcc.n	8008e10 <flashInSector+0x8c>
 8008e02:	69fa      	ldr	r2, [r7, #28]
 8008e04:	697b      	ldr	r3, [r7, #20]
 8008e06:	429a      	cmp	r2, r3
 8008e08:	d802      	bhi.n	8008e10 <flashInSector+0x8c>
  {
    ret = true;
 8008e0a:	2301      	movs	r3, #1
 8008e0c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  if(flash_start >= sector_start && flash_start <= sector_end)
 8008e10:	69ba      	ldr	r2, [r7, #24]
 8008e12:	6a3b      	ldr	r3, [r7, #32]
 8008e14:	429a      	cmp	r2, r3
 8008e16:	d306      	bcc.n	8008e26 <flashInSector+0xa2>
 8008e18:	69ba      	ldr	r2, [r7, #24]
 8008e1a:	69fb      	ldr	r3, [r7, #28]
 8008e1c:	429a      	cmp	r2, r3
 8008e1e:	d802      	bhi.n	8008e26 <flashInSector+0xa2>
  {
    ret = true;
 8008e20:	2301      	movs	r3, #1
 8008e22:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  if(flash_end >= sector_start && flash_end <= sector_end)
 8008e26:	697a      	ldr	r2, [r7, #20]
 8008e28:	6a3b      	ldr	r3, [r7, #32]
 8008e2a:	429a      	cmp	r2, r3
 8008e2c:	d306      	bcc.n	8008e3c <flashInSector+0xb8>
 8008e2e:	697a      	ldr	r2, [r7, #20]
 8008e30:	69fb      	ldr	r3, [r7, #28]
 8008e32:	429a      	cmp	r2, r3
 8008e34:	d802      	bhi.n	8008e3c <flashInSector+0xb8>
  {
    ret = true;
 8008e36:	2301      	movs	r3, #1
 8008e38:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  return ret;
 8008e3c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8008e40:	4618      	mov	r0, r3
 8008e42:	372c      	adds	r7, #44	; 0x2c
 8008e44:	46bd      	mov	sp, r7
 8008e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e4a:	4770      	bx	lr
 8008e4c:	08012ed4 	.word	0x08012ed4

08008e50 <ledInit>:
{
	{GPIOC, GPIO_PIN_13, GPIO_PIN_SET, GPIO_PIN_RESET}
};

bool ledInit(void)
{
 8008e50:	b580      	push	{r7, lr}
 8008e52:	b088      	sub	sp, #32
 8008e54:	af00      	add	r7, sp, #0
	bool ret = true;
 8008e56:	2301      	movs	r3, #1
 8008e58:	76fb      	strb	r3, [r7, #27]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008e5a:	1d3b      	adds	r3, r7, #4
 8008e5c:	2200      	movs	r2, #0
 8008e5e:	601a      	str	r2, [r3, #0]
 8008e60:	605a      	str	r2, [r3, #4]
 8008e62:	609a      	str	r2, [r3, #8]
 8008e64:	60da      	str	r2, [r3, #12]
 8008e66:	611a      	str	r2, [r3, #16]

	__HAL_RCC_GPIOA_CLK_ENABLE();
 8008e68:	2300      	movs	r3, #0
 8008e6a:	603b      	str	r3, [r7, #0]
 8008e6c:	4b1d      	ldr	r3, [pc, #116]	; (8008ee4 <ledInit+0x94>)
 8008e6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e70:	4a1c      	ldr	r2, [pc, #112]	; (8008ee4 <ledInit+0x94>)
 8008e72:	f043 0301 	orr.w	r3, r3, #1
 8008e76:	6313      	str	r3, [r2, #48]	; 0x30
 8008e78:	4b1a      	ldr	r3, [pc, #104]	; (8008ee4 <ledInit+0x94>)
 8008e7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e7c:	f003 0301 	and.w	r3, r3, #1
 8008e80:	603b      	str	r3, [r7, #0]
 8008e82:	683b      	ldr	r3, [r7, #0]

	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008e84:	2301      	movs	r3, #1
 8008e86:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008e88:	2300      	movs	r3, #0
 8008e8a:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008e8c:	2300      	movs	r3, #0
 8008e8e:	613b      	str	r3, [r7, #16]

	for(int i = 0; i < LED_MAX_CHANNEL; i++)
 8008e90:	2300      	movs	r3, #0
 8008e92:	61fb      	str	r3, [r7, #28]
 8008e94:	e01e      	b.n	8008ed4 <ledInit+0x84>
	{
		ledOff(i);
 8008e96:	69fb      	ldr	r3, [r7, #28]
 8008e98:	b2db      	uxtb	r3, r3
 8008e9a:	4618      	mov	r0, r3
 8008e9c:	f000 f826 	bl	8008eec <ledOff>
		GPIO_InitStruct.Pin = led_tbl[i].pin;
 8008ea0:	4911      	ldr	r1, [pc, #68]	; (8008ee8 <ledInit+0x98>)
 8008ea2:	69fa      	ldr	r2, [r7, #28]
 8008ea4:	4613      	mov	r3, r2
 8008ea6:	005b      	lsls	r3, r3, #1
 8008ea8:	4413      	add	r3, r2
 8008eaa:	009b      	lsls	r3, r3, #2
 8008eac:	440b      	add	r3, r1
 8008eae:	3304      	adds	r3, #4
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	607b      	str	r3, [r7, #4]
		HAL_GPIO_Init(led_tbl[i].port, &GPIO_InitStruct);
 8008eb4:	490c      	ldr	r1, [pc, #48]	; (8008ee8 <ledInit+0x98>)
 8008eb6:	69fa      	ldr	r2, [r7, #28]
 8008eb8:	4613      	mov	r3, r2
 8008eba:	005b      	lsls	r3, r3, #1
 8008ebc:	4413      	add	r3, r2
 8008ebe:	009b      	lsls	r3, r3, #2
 8008ec0:	440b      	add	r3, r1
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	1d3a      	adds	r2, r7, #4
 8008ec6:	4611      	mov	r1, r2
 8008ec8:	4618      	mov	r0, r3
 8008eca:	f001 fc57 	bl	800a77c <HAL_GPIO_Init>
	for(int i = 0; i < LED_MAX_CHANNEL; i++)
 8008ece:	69fb      	ldr	r3, [r7, #28]
 8008ed0:	3301      	adds	r3, #1
 8008ed2:	61fb      	str	r3, [r7, #28]
 8008ed4:	69fb      	ldr	r3, [r7, #28]
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	dddd      	ble.n	8008e96 <ledInit+0x46>
	}
	return ret;
 8008eda:	7efb      	ldrb	r3, [r7, #27]
}
 8008edc:	4618      	mov	r0, r3
 8008ede:	3720      	adds	r7, #32
 8008ee0:	46bd      	mov	sp, r7
 8008ee2:	bd80      	pop	{r7, pc}
 8008ee4:	40023800 	.word	0x40023800
 8008ee8:	20000004 	.word	0x20000004

08008eec <ledOff>:
void ledOn(uint8_t ch)
{
	HAL_GPIO_WritePin(led_tbl[ch].port, led_tbl[ch].pin, led_tbl[ch].on_state);
}
void ledOff(uint8_t ch)
{
 8008eec:	b590      	push	{r4, r7, lr}
 8008eee:	b083      	sub	sp, #12
 8008ef0:	af00      	add	r7, sp, #0
 8008ef2:	4603      	mov	r3, r0
 8008ef4:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(led_tbl[ch].port, led_tbl[ch].pin, led_tbl[ch].off_state);
 8008ef6:	79fa      	ldrb	r2, [r7, #7]
 8008ef8:	4910      	ldr	r1, [pc, #64]	; (8008f3c <ledOff+0x50>)
 8008efa:	4613      	mov	r3, r2
 8008efc:	005b      	lsls	r3, r3, #1
 8008efe:	4413      	add	r3, r2
 8008f00:	009b      	lsls	r3, r3, #2
 8008f02:	440b      	add	r3, r1
 8008f04:	6818      	ldr	r0, [r3, #0]
 8008f06:	79fa      	ldrb	r2, [r7, #7]
 8008f08:	490c      	ldr	r1, [pc, #48]	; (8008f3c <ledOff+0x50>)
 8008f0a:	4613      	mov	r3, r2
 8008f0c:	005b      	lsls	r3, r3, #1
 8008f0e:	4413      	add	r3, r2
 8008f10:	009b      	lsls	r3, r3, #2
 8008f12:	440b      	add	r3, r1
 8008f14:	3304      	adds	r3, #4
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	b299      	uxth	r1, r3
 8008f1a:	79fa      	ldrb	r2, [r7, #7]
 8008f1c:	4c07      	ldr	r4, [pc, #28]	; (8008f3c <ledOff+0x50>)
 8008f1e:	4613      	mov	r3, r2
 8008f20:	005b      	lsls	r3, r3, #1
 8008f22:	4413      	add	r3, r2
 8008f24:	009b      	lsls	r3, r3, #2
 8008f26:	4423      	add	r3, r4
 8008f28:	3309      	adds	r3, #9
 8008f2a:	781b      	ldrb	r3, [r3, #0]
 8008f2c:	461a      	mov	r2, r3
 8008f2e:	f001 fe8d 	bl	800ac4c <HAL_GPIO_WritePin>
}
 8008f32:	bf00      	nop
 8008f34:	370c      	adds	r7, #12
 8008f36:	46bd      	mov	sp, r7
 8008f38:	bd90      	pop	{r4, r7, pc}
 8008f3a:	bf00      	nop
 8008f3c:	20000004 	.word	0x20000004

08008f40 <ledToggle>:
void ledToggle(uint8_t ch)
{
 8008f40:	b580      	push	{r7, lr}
 8008f42:	b082      	sub	sp, #8
 8008f44:	af00      	add	r7, sp, #0
 8008f46:	4603      	mov	r3, r0
 8008f48:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_TogglePin(led_tbl[ch].port, led_tbl[ch].pin);
 8008f4a:	79fa      	ldrb	r2, [r7, #7]
 8008f4c:	490b      	ldr	r1, [pc, #44]	; (8008f7c <ledToggle+0x3c>)
 8008f4e:	4613      	mov	r3, r2
 8008f50:	005b      	lsls	r3, r3, #1
 8008f52:	4413      	add	r3, r2
 8008f54:	009b      	lsls	r3, r3, #2
 8008f56:	440b      	add	r3, r1
 8008f58:	6818      	ldr	r0, [r3, #0]
 8008f5a:	79fa      	ldrb	r2, [r7, #7]
 8008f5c:	4907      	ldr	r1, [pc, #28]	; (8008f7c <ledToggle+0x3c>)
 8008f5e:	4613      	mov	r3, r2
 8008f60:	005b      	lsls	r3, r3, #1
 8008f62:	4413      	add	r3, r2
 8008f64:	009b      	lsls	r3, r3, #2
 8008f66:	440b      	add	r3, r1
 8008f68:	3304      	adds	r3, #4
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	b29b      	uxth	r3, r3
 8008f6e:	4619      	mov	r1, r3
 8008f70:	f001 fe85 	bl	800ac7e <HAL_GPIO_TogglePin>
}
 8008f74:	bf00      	nop
 8008f76:	3708      	adds	r7, #8
 8008f78:	46bd      	mov	sp, r7
 8008f7a:	bd80      	pop	{r7, pc}
 8008f7c:	20000004 	.word	0x20000004

08008f80 <resetInit>:
#include "rtc.h"

static uint32_t reset_count = 0;

bool resetInit(void)
{
 8008f80:	b580      	push	{r7, lr}
 8008f82:	b082      	sub	sp, #8
 8008f84:	af00      	add	r7, sp, #0
	bool ret = true;
 8008f86:	2301      	movs	r3, #1
 8008f88:	71fb      	strb	r3, [r7, #7]

	if(RCC->CSR & (1<<26))
 8008f8a:	4b11      	ldr	r3, [pc, #68]	; (8008fd0 <resetInit+0x50>)
 8008f8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008f8e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d013      	beq.n	8008fbe <resetInit+0x3e>
	{
		rtcBackupRegWrite(0, rtcBackupRegRead(0) + 1);
 8008f96:	2000      	movs	r0, #0
 8008f98:	f000 f85a 	bl	8009050 <rtcBackupRegRead>
 8008f9c:	4603      	mov	r3, r0
 8008f9e:	3301      	adds	r3, #1
 8008fa0:	4619      	mov	r1, r3
 8008fa2:	2000      	movs	r0, #0
 8008fa4:	f000 f844 	bl	8009030 <rtcBackupRegWrite>
		delay(500);
 8008fa8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8008fac:	f7ff fbc4 	bl	8008738 <delay>
		/* due to multiple input */
		reset_count = rtcBackupRegRead(0);
 8008fb0:	2000      	movs	r0, #0
 8008fb2:	f000 f84d 	bl	8009050 <rtcBackupRegRead>
 8008fb6:	4603      	mov	r3, r0
 8008fb8:	461a      	mov	r2, r3
 8008fba:	4b06      	ldr	r3, [pc, #24]	; (8008fd4 <resetInit+0x54>)
 8008fbc:	601a      	str	r2, [r3, #0]
		/* one count increase itself */
	}
	rtcBackupRegWrite(0, 0);
 8008fbe:	2100      	movs	r1, #0
 8008fc0:	2000      	movs	r0, #0
 8008fc2:	f000 f835 	bl	8009030 <rtcBackupRegWrite>
	return ret;
 8008fc6:	79fb      	ldrb	r3, [r7, #7]
}
 8008fc8:	4618      	mov	r0, r3
 8008fca:	3708      	adds	r7, #8
 8008fcc:	46bd      	mov	sp, r7
 8008fce:	bd80      	pop	{r7, pc}
 8008fd0:	40023800 	.word	0x40023800
 8008fd4:	2000022c 	.word	0x2000022c

08008fd8 <rtcInit>:
#include "rtc.h"

static RTC_HandleTypeDef hrtc;

bool rtcInit(void)
{
 8008fd8:	b580      	push	{r7, lr}
 8008fda:	b082      	sub	sp, #8
 8008fdc:	af00      	add	r7, sp, #0
	bool ret = true;
 8008fde:	2301      	movs	r3, #1
 8008fe0:	71fb      	strb	r3, [r7, #7]
	// also need to enable GPIOC -> already declared on "bsp.c"
	hrtc.Instance 						= RTC;
 8008fe2:	4b11      	ldr	r3, [pc, #68]	; (8009028 <rtcInit+0x50>)
 8008fe4:	4a11      	ldr	r2, [pc, #68]	; (800902c <rtcInit+0x54>)
 8008fe6:	601a      	str	r2, [r3, #0]
	hrtc.Init.HourFormat 			= RTC_HOURFORMAT_24;
 8008fe8:	4b0f      	ldr	r3, [pc, #60]	; (8009028 <rtcInit+0x50>)
 8008fea:	2200      	movs	r2, #0
 8008fec:	605a      	str	r2, [r3, #4]
	hrtc.Init.AsynchPrediv 		= 127;
 8008fee:	4b0e      	ldr	r3, [pc, #56]	; (8009028 <rtcInit+0x50>)
 8008ff0:	227f      	movs	r2, #127	; 0x7f
 8008ff2:	609a      	str	r2, [r3, #8]
	hrtc.Init.SynchPrediv 		= 255;
 8008ff4:	4b0c      	ldr	r3, [pc, #48]	; (8009028 <rtcInit+0x50>)
 8008ff6:	22ff      	movs	r2, #255	; 0xff
 8008ff8:	60da      	str	r2, [r3, #12]
	hrtc.Init.OutPut 					= RTC_OUTPUT_DISABLE;
 8008ffa:	4b0b      	ldr	r3, [pc, #44]	; (8009028 <rtcInit+0x50>)
 8008ffc:	2200      	movs	r2, #0
 8008ffe:	611a      	str	r2, [r3, #16]
	hrtc.Init.OutPutPolarity 	= RTC_OUTPUT_POLARITY_HIGH;
 8009000:	4b09      	ldr	r3, [pc, #36]	; (8009028 <rtcInit+0x50>)
 8009002:	2200      	movs	r2, #0
 8009004:	615a      	str	r2, [r3, #20]
	hrtc.Init.OutPutType	    = RTC_OUTPUT_TYPE_OPENDRAIN;
 8009006:	4b08      	ldr	r3, [pc, #32]	; (8009028 <rtcInit+0x50>)
 8009008:	2200      	movs	r2, #0
 800900a:	619a      	str	r2, [r3, #24]
	if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800900c:	4806      	ldr	r0, [pc, #24]	; (8009028 <rtcInit+0x50>)
 800900e:	f003 fd1b 	bl	800ca48 <HAL_RTC_Init>
 8009012:	4603      	mov	r3, r0
 8009014:	2b00      	cmp	r3, #0
 8009016:	d001      	beq.n	800901c <rtcInit+0x44>
	{
	Error_Handler();
 8009018:	f7ff fc1a 	bl	8008850 <Error_Handler>
	}
	return ret;
 800901c:	79fb      	ldrb	r3, [r7, #7]
}
 800901e:	4618      	mov	r0, r3
 8009020:	3708      	adds	r7, #8
 8009022:	46bd      	mov	sp, r7
 8009024:	bd80      	pop	{r7, pc}
 8009026:	bf00      	nop
 8009028:	20000230 	.word	0x20000230
 800902c:	40002800 	.word	0x40002800

08009030 <rtcBackupRegWrite>:

void rtcBackupRegWrite(uint32_t index, uint32_t data)
{
 8009030:	b580      	push	{r7, lr}
 8009032:	b082      	sub	sp, #8
 8009034:	af00      	add	r7, sp, #0
 8009036:	6078      	str	r0, [r7, #4]
 8009038:	6039      	str	r1, [r7, #0]
	HAL_RTCEx_BKUPWrite(&hrtc, index, data);
 800903a:	683a      	ldr	r2, [r7, #0]
 800903c:	6879      	ldr	r1, [r7, #4]
 800903e:	4803      	ldr	r0, [pc, #12]	; (800904c <rtcBackupRegWrite+0x1c>)
 8009040:	f003 fde7 	bl	800cc12 <HAL_RTCEx_BKUPWrite>
}
 8009044:	bf00      	nop
 8009046:	3708      	adds	r7, #8
 8009048:	46bd      	mov	sp, r7
 800904a:	bd80      	pop	{r7, pc}
 800904c:	20000230 	.word	0x20000230

08009050 <rtcBackupRegRead>:
uint32_t rtcBackupRegRead(uint32_t index)
{
 8009050:	b580      	push	{r7, lr}
 8009052:	b082      	sub	sp, #8
 8009054:	af00      	add	r7, sp, #0
 8009056:	6078      	str	r0, [r7, #4]
	return HAL_RTCEx_BKUPRead(&hrtc, index);
 8009058:	6879      	ldr	r1, [r7, #4]
 800905a:	4804      	ldr	r0, [pc, #16]	; (800906c <rtcBackupRegRead+0x1c>)
 800905c:	f003 fdf3 	bl	800cc46 <HAL_RTCEx_BKUPRead>
 8009060:	4603      	mov	r3, r0
}
 8009062:	4618      	mov	r0, r3
 8009064:	3708      	adds	r7, #8
 8009066:	46bd      	mov	sp, r7
 8009068:	bd80      	pop	{r7, pc}
 800906a:	bf00      	nop
 800906c:	20000230 	.word	0x20000230

08009070 <HAL_RTC_MspInit>:


void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8009070:	b580      	push	{r7, lr}
 8009072:	b088      	sub	sp, #32
 8009074:	af00      	add	r7, sp, #0
 8009076:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8009078:	f107 0308 	add.w	r3, r7, #8
 800907c:	2200      	movs	r2, #0
 800907e:	601a      	str	r2, [r3, #0]
 8009080:	605a      	str	r2, [r3, #4]
 8009082:	609a      	str	r2, [r3, #8]
 8009084:	60da      	str	r2, [r3, #12]
 8009086:	611a      	str	r2, [r3, #16]
 8009088:	615a      	str	r2, [r3, #20]
  if(rtcHandle->Instance==RTC)
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	4a0c      	ldr	r2, [pc, #48]	; (80090c0 <HAL_RTC_MspInit+0x50>)
 8009090:	4293      	cmp	r3, r2
 8009092:	d111      	bne.n	80090b8 <HAL_RTC_MspInit+0x48>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8009094:	2302      	movs	r3, #2
 8009096:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8009098:	f44f 7380 	mov.w	r3, #256	; 0x100
 800909c:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800909e:	f107 0308 	add.w	r3, r7, #8
 80090a2:	4618      	mov	r0, r3
 80090a4:	f003 fbe0 	bl	800c868 <HAL_RCCEx_PeriphCLKConfig>
 80090a8:	4603      	mov	r3, r0
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d001      	beq.n	80090b2 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 80090ae:	f7ff fbcf 	bl	8008850 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 80090b2:	4b04      	ldr	r3, [pc, #16]	; (80090c4 <HAL_RTC_MspInit+0x54>)
 80090b4:	2201      	movs	r2, #1
 80090b6:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80090b8:	bf00      	nop
 80090ba:	3720      	adds	r7, #32
 80090bc:	46bd      	mov	sp, r7
 80090be:	bd80      	pop	{r7, pc}
 80090c0:	40002800 	.word	0x40002800
 80090c4:	42470e3c 	.word	0x42470e3c

080090c8 <uartInit>:
static qbuffer_t qbuffer[UART_MAX_CHANNEL];
static uint8_t rx_buf[256];
//static uint8_t rx_data[UART_MAX_CHANNEL];

bool uartInit(void)
{
 80090c8:	b480      	push	{r7}
 80090ca:	b083      	sub	sp, #12
 80090cc:	af00      	add	r7, sp, #0
	for(int i = 0; i < UART_MAX_CHANNEL; i++)
 80090ce:	2300      	movs	r3, #0
 80090d0:	607b      	str	r3, [r7, #4]
 80090d2:	e007      	b.n	80090e4 <uartInit+0x1c>
	{
		is_open[i] = false;
 80090d4:	4a08      	ldr	r2, [pc, #32]	; (80090f8 <uartInit+0x30>)
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	4413      	add	r3, r2
 80090da:	2200      	movs	r2, #0
 80090dc:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < UART_MAX_CHANNEL; i++)
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	3301      	adds	r3, #1
 80090e2:	607b      	str	r3, [r7, #4]
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	2b01      	cmp	r3, #1
 80090e8:	ddf4      	ble.n	80090d4 <uartInit+0xc>
	}
	return false;
 80090ea:	2300      	movs	r3, #0
}
 80090ec:	4618      	mov	r0, r3
 80090ee:	370c      	adds	r7, #12
 80090f0:	46bd      	mov	sp, r7
 80090f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090f6:	4770      	bx	lr
 80090f8:	200002f4 	.word	0x200002f4

080090fc <uartOpen>:

bool uartOpen(uint8_t ch, uint32_t baud)
{
 80090fc:	b580      	push	{r7, lr}
 80090fe:	b084      	sub	sp, #16
 8009100:	af00      	add	r7, sp, #0
 8009102:	4603      	mov	r3, r0
 8009104:	6039      	str	r1, [r7, #0]
 8009106:	71fb      	strb	r3, [r7, #7]
	bool ret = false;
 8009108:	2300      	movs	r3, #0
 800910a:	73fb      	strb	r3, [r7, #15]

	switch(ch)
 800910c:	79fb      	ldrb	r3, [r7, #7]
 800910e:	2b00      	cmp	r3, #0
 8009110:	d002      	beq.n	8009118 <uartOpen+0x1c>
 8009112:	2b01      	cmp	r3, #1
 8009114:	d007      	beq.n	8009126 <uartOpen+0x2a>
 8009116:	e076      	b.n	8009206 <uartOpen+0x10a>
	{
		case _DEF_UART1:
			is_open[ch] = true;
 8009118:	79fb      	ldrb	r3, [r7, #7]
 800911a:	4a3d      	ldr	r2, [pc, #244]	; (8009210 <uartOpen+0x114>)
 800911c:	2101      	movs	r1, #1
 800911e:	54d1      	strb	r1, [r2, r3]
			ret = true;
 8009120:	2301      	movs	r3, #1
 8009122:	73fb      	strb	r3, [r7, #15]
			break;
 8009124:	e06f      	b.n	8009206 <uartOpen+0x10a>

		case _DEF_UART2:
			huart1.Instance 					= USART1;
 8009126:	4b3b      	ldr	r3, [pc, #236]	; (8009214 <uartOpen+0x118>)
 8009128:	4a3b      	ldr	r2, [pc, #236]	; (8009218 <uartOpen+0x11c>)
 800912a:	601a      	str	r2, [r3, #0]
			huart1.Init.BaudRate 			= baud;
 800912c:	4a39      	ldr	r2, [pc, #228]	; (8009214 <uartOpen+0x118>)
 800912e:	683b      	ldr	r3, [r7, #0]
 8009130:	6053      	str	r3, [r2, #4]
			huart1.Init.WordLength		= UART_WORDLENGTH_8B;
 8009132:	4b38      	ldr	r3, [pc, #224]	; (8009214 <uartOpen+0x118>)
 8009134:	2200      	movs	r2, #0
 8009136:	609a      	str	r2, [r3, #8]
			huart1.Init.StopBits 			= UART_STOPBITS_1;
 8009138:	4b36      	ldr	r3, [pc, #216]	; (8009214 <uartOpen+0x118>)
 800913a:	2200      	movs	r2, #0
 800913c:	60da      	str	r2, [r3, #12]
			huart1.Init.Parity 				= UART_PARITY_NONE;
 800913e:	4b35      	ldr	r3, [pc, #212]	; (8009214 <uartOpen+0x118>)
 8009140:	2200      	movs	r2, #0
 8009142:	611a      	str	r2, [r3, #16]
			huart1.Init.Mode 					= UART_MODE_TX_RX;
 8009144:	4b33      	ldr	r3, [pc, #204]	; (8009214 <uartOpen+0x118>)
 8009146:	220c      	movs	r2, #12
 8009148:	615a      	str	r2, [r3, #20]
			huart1.Init.HwFlowCtl 		= UART_HWCONTROL_NONE;
 800914a:	4b32      	ldr	r3, [pc, #200]	; (8009214 <uartOpen+0x118>)
 800914c:	2200      	movs	r2, #0
 800914e:	619a      	str	r2, [r3, #24]
			huart1.Init.OverSampling 	= UART_OVERSAMPLING_16;
 8009150:	4b30      	ldr	r3, [pc, #192]	; (8009214 <uartOpen+0x118>)
 8009152:	2200      	movs	r2, #0
 8009154:	61da      	str	r2, [r3, #28]

			HAL_UART_DeInit(&huart1);
 8009156:	482f      	ldr	r0, [pc, #188]	; (8009214 <uartOpen+0x118>)
 8009158:	f003 fdda 	bl	800cd10 <HAL_UART_DeInit>

			qbufferCreate(&qbuffer[ch], &rx_buf[0], 256);
 800915c:	79fb      	ldrb	r3, [r7, #7]
 800915e:	011b      	lsls	r3, r3, #4
 8009160:	4a2e      	ldr	r2, [pc, #184]	; (800921c <uartOpen+0x120>)
 8009162:	4413      	add	r3, r2
 8009164:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009168:	492d      	ldr	r1, [pc, #180]	; (8009220 <uartOpen+0x124>)
 800916a:	4618      	mov	r0, r3
 800916c:	f7ff fcc9 	bl	8008b02 <qbufferCreate>

      __HAL_RCC_DMA2_CLK_ENABLE();
 8009170:	2300      	movs	r3, #0
 8009172:	60bb      	str	r3, [r7, #8]
 8009174:	4b2b      	ldr	r3, [pc, #172]	; (8009224 <uartOpen+0x128>)
 8009176:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009178:	4a2a      	ldr	r2, [pc, #168]	; (8009224 <uartOpen+0x128>)
 800917a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800917e:	6313      	str	r3, [r2, #48]	; 0x30
 8009180:	4b28      	ldr	r3, [pc, #160]	; (8009224 <uartOpen+0x128>)
 8009182:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009184:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009188:	60bb      	str	r3, [r7, #8]
 800918a:	68bb      	ldr	r3, [r7, #8]
      HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 800918c:	2200      	movs	r2, #0
 800918e:	2100      	movs	r1, #0
 8009190:	203a      	movs	r0, #58	; 0x3a
 8009192:	f000 fb66 	bl	8009862 <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8009196:	203a      	movs	r0, #58	; 0x3a
 8009198:	f000 fb7f 	bl	800989a <HAL_NVIC_EnableIRQ>

			if (HAL_UART_Init(&huart1) != HAL_OK)
 800919c:	481d      	ldr	r0, [pc, #116]	; (8009214 <uartOpen+0x118>)
 800919e:	f003 fd6a 	bl	800cc76 <HAL_UART_Init>
 80091a2:	4603      	mov	r3, r0
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d002      	beq.n	80091ae <uartOpen+0xb2>
			{
				ret = false;
 80091a8:	2300      	movs	r3, #0
 80091aa:	73fb      	strb	r3, [r7, #15]
				}
				/* FLUSH */
				qbuffer[ch].in  = qbuffer[ch].len - hdma_usart1_rx.Instance->NDTR;
				qbuffer[ch].out = qbuffer[ch].in;
			}
			break;
 80091ac:	e02a      	b.n	8009204 <uartOpen+0x108>
				ret = true;
 80091ae:	2301      	movs	r3, #1
 80091b0:	73fb      	strb	r3, [r7, #15]
				is_open[ch] = true;
 80091b2:	79fb      	ldrb	r3, [r7, #7]
 80091b4:	4a16      	ldr	r2, [pc, #88]	; (8009210 <uartOpen+0x114>)
 80091b6:	2101      	movs	r1, #1
 80091b8:	54d1      	strb	r1, [r2, r3]
				if(HAL_UART_Receive_DMA(&huart1, (uint8_t *)&rx_buf[0], 256) != HAL_OK)
 80091ba:	f44f 7280 	mov.w	r2, #256	; 0x100
 80091be:	4918      	ldr	r1, [pc, #96]	; (8009220 <uartOpen+0x124>)
 80091c0:	4814      	ldr	r0, [pc, #80]	; (8009214 <uartOpen+0x118>)
 80091c2:	f003 fe66 	bl	800ce92 <HAL_UART_Receive_DMA>
 80091c6:	4603      	mov	r3, r0
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d001      	beq.n	80091d0 <uartOpen+0xd4>
				  ret = false;
 80091cc:	2300      	movs	r3, #0
 80091ce:	73fb      	strb	r3, [r7, #15]
				qbuffer[ch].in  = qbuffer[ch].len - hdma_usart1_rx.Instance->NDTR;
 80091d0:	79fb      	ldrb	r3, [r7, #7]
 80091d2:	4a12      	ldr	r2, [pc, #72]	; (800921c <uartOpen+0x120>)
 80091d4:	011b      	lsls	r3, r3, #4
 80091d6:	4413      	add	r3, r2
 80091d8:	3308      	adds	r3, #8
 80091da:	6819      	ldr	r1, [r3, #0]
 80091dc:	4b12      	ldr	r3, [pc, #72]	; (8009228 <uartOpen+0x12c>)
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	685a      	ldr	r2, [r3, #4]
 80091e2:	79fb      	ldrb	r3, [r7, #7]
 80091e4:	1a8a      	subs	r2, r1, r2
 80091e6:	490d      	ldr	r1, [pc, #52]	; (800921c <uartOpen+0x120>)
 80091e8:	011b      	lsls	r3, r3, #4
 80091ea:	440b      	add	r3, r1
 80091ec:	601a      	str	r2, [r3, #0]
				qbuffer[ch].out = qbuffer[ch].in;
 80091ee:	79fa      	ldrb	r2, [r7, #7]
 80091f0:	79fb      	ldrb	r3, [r7, #7]
 80091f2:	490a      	ldr	r1, [pc, #40]	; (800921c <uartOpen+0x120>)
 80091f4:	0112      	lsls	r2, r2, #4
 80091f6:	440a      	add	r2, r1
 80091f8:	6812      	ldr	r2, [r2, #0]
 80091fa:	4908      	ldr	r1, [pc, #32]	; (800921c <uartOpen+0x120>)
 80091fc:	011b      	lsls	r3, r3, #4
 80091fe:	440b      	add	r3, r1
 8009200:	3304      	adds	r3, #4
 8009202:	601a      	str	r2, [r3, #0]
			break;
 8009204:	bf00      	nop
	}

	return ret;
 8009206:	7bfb      	ldrb	r3, [r7, #15]
}
 8009208:	4618      	mov	r0, r3
 800920a:	3710      	adds	r7, #16
 800920c:	46bd      	mov	sp, r7
 800920e:	bd80      	pop	{r7, pc}
 8009210:	200002f4 	.word	0x200002f4
 8009214:	20000250 	.word	0x20000250
 8009218:	40011000 	.word	0x40011000
 800921c:	200002f8 	.word	0x200002f8
 8009220:	20000318 	.word	0x20000318
 8009224:	40023800 	.word	0x40023800
 8009228:	20000294 	.word	0x20000294

0800922c <uartAvailable>:
uint32_t uartAvailable(uint8_t ch)
{
 800922c:	b580      	push	{r7, lr}
 800922e:	b084      	sub	sp, #16
 8009230:	af00      	add	r7, sp, #0
 8009232:	4603      	mov	r3, r0
 8009234:	71fb      	strb	r3, [r7, #7]
	uint32_t ret = 0;
 8009236:	2300      	movs	r3, #0
 8009238:	60fb      	str	r3, [r7, #12]


	switch(ch)
 800923a:	79fb      	ldrb	r3, [r7, #7]
 800923c:	2b00      	cmp	r3, #0
 800923e:	d002      	beq.n	8009246 <uartAvailable+0x1a>
 8009240:	2b01      	cmp	r3, #1
 8009242:	d004      	beq.n	800924e <uartAvailable+0x22>
 8009244:	e01b      	b.n	800927e <uartAvailable+0x52>
	{
		case _DEF_UART1: // 첫번째 채널 uart -> 1. cdc 추
			ret = cdcAvailable();
 8009246:	f007 ff73 	bl	8011130 <cdcAvailable>
 800924a:	60f8      	str	r0, [r7, #12]
			break;
 800924c:	e017      	b.n	800927e <uartAvailable+0x52>
		case _DEF_UART2:
		  qbuffer[ch].in = qbuffer[ch].len - hdma_usart1_rx.Instance->NDTR;
 800924e:	79fb      	ldrb	r3, [r7, #7]
 8009250:	4a0d      	ldr	r2, [pc, #52]	; (8009288 <uartAvailable+0x5c>)
 8009252:	011b      	lsls	r3, r3, #4
 8009254:	4413      	add	r3, r2
 8009256:	3308      	adds	r3, #8
 8009258:	6819      	ldr	r1, [r3, #0]
 800925a:	4b0c      	ldr	r3, [pc, #48]	; (800928c <uartAvailable+0x60>)
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	685a      	ldr	r2, [r3, #4]
 8009260:	79fb      	ldrb	r3, [r7, #7]
 8009262:	1a8a      	subs	r2, r1, r2
 8009264:	4908      	ldr	r1, [pc, #32]	; (8009288 <uartAvailable+0x5c>)
 8009266:	011b      	lsls	r3, r3, #4
 8009268:	440b      	add	r3, r1
 800926a:	601a      	str	r2, [r3, #0]
		  ret = qbufferAvailable(&qbuffer[ch]);
 800926c:	79fb      	ldrb	r3, [r7, #7]
 800926e:	011b      	lsls	r3, r3, #4
 8009270:	4a05      	ldr	r2, [pc, #20]	; (8009288 <uartAvailable+0x5c>)
 8009272:	4413      	add	r3, r2
 8009274:	4618      	mov	r0, r3
 8009276:	f7ff fc9c 	bl	8008bb2 <qbufferAvailable>
 800927a:	60f8      	str	r0, [r7, #12]
		  break;
 800927c:	bf00      	nop
	}

	return ret;
 800927e:	68fb      	ldr	r3, [r7, #12]
}
 8009280:	4618      	mov	r0, r3
 8009282:	3710      	adds	r7, #16
 8009284:	46bd      	mov	sp, r7
 8009286:	bd80      	pop	{r7, pc}
 8009288:	200002f8 	.word	0x200002f8
 800928c:	20000294 	.word	0x20000294

08009290 <uartRead>:
uint8_t uartRead(uint8_t ch)
{
 8009290:	b580      	push	{r7, lr}
 8009292:	b084      	sub	sp, #16
 8009294:	af00      	add	r7, sp, #0
 8009296:	4603      	mov	r3, r0
 8009298:	71fb      	strb	r3, [r7, #7]
	uint8_t ret;

	switch(ch)
 800929a:	79fb      	ldrb	r3, [r7, #7]
 800929c:	2b00      	cmp	r3, #0
 800929e:	d002      	beq.n	80092a6 <uartRead+0x16>
 80092a0:	2b01      	cmp	r3, #1
 80092a2:	d005      	beq.n	80092b0 <uartRead+0x20>
 80092a4:	e00c      	b.n	80092c0 <uartRead+0x30>
	{
		case _DEF_UART1:
			ret = cdcRead();
 80092a6:	f007 ff61 	bl	801116c <cdcRead>
 80092aa:	4603      	mov	r3, r0
 80092ac:	73fb      	strb	r3, [r7, #15]
			break;
 80092ae:	e007      	b.n	80092c0 <uartRead+0x30>
		case _DEF_UART2:
		  qbufferRead(&qbuffer[_DEF_UART2], &ret, 1);
 80092b0:	f107 030f 	add.w	r3, r7, #15
 80092b4:	2201      	movs	r2, #1
 80092b6:	4619      	mov	r1, r3
 80092b8:	4804      	ldr	r0, [pc, #16]	; (80092cc <uartRead+0x3c>)
 80092ba:	f7ff fc3d 	bl	8008b38 <qbufferRead>
		  break;
 80092be:	bf00      	nop
	}

	return ret;
 80092c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80092c2:	4618      	mov	r0, r3
 80092c4:	3710      	adds	r7, #16
 80092c6:	46bd      	mov	sp, r7
 80092c8:	bd80      	pop	{r7, pc}
 80092ca:	bf00      	nop
 80092cc:	20000308 	.word	0x20000308

080092d0 <uartWrite>:
uint32_t uartWrite(uint8_t ch, uint8_t *pData, uint32_t length)
{
 80092d0:	b580      	push	{r7, lr}
 80092d2:	b086      	sub	sp, #24
 80092d4:	af00      	add	r7, sp, #0
 80092d6:	4603      	mov	r3, r0
 80092d8:	60b9      	str	r1, [r7, #8]
 80092da:	607a      	str	r2, [r7, #4]
 80092dc:	73fb      	strb	r3, [r7, #15]
	uint32_t ret;
	HAL_StatusTypeDef status;

	switch(ch)
 80092de:	7bfb      	ldrb	r3, [r7, #15]
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	d002      	beq.n	80092ea <uartWrite+0x1a>
 80092e4:	2b01      	cmp	r3, #1
 80092e6:	d006      	beq.n	80092f6 <uartWrite+0x26>
 80092e8:	e014      	b.n	8009314 <uartWrite+0x44>
		{
			case _DEF_UART1:
				ret = cdcWrite(pData, length);
 80092ea:	6879      	ldr	r1, [r7, #4]
 80092ec:	68b8      	ldr	r0, [r7, #8]
 80092ee:	f007 ff93 	bl	8011218 <cdcWrite>
 80092f2:	6178      	str	r0, [r7, #20]
				break;
 80092f4:	e00e      	b.n	8009314 <uartWrite+0x44>

			case _DEF_UART2:
				status = HAL_UART_Transmit(&huart1, pData, length, 100);
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	b29a      	uxth	r2, r3
 80092fa:	2364      	movs	r3, #100	; 0x64
 80092fc:	68b9      	ldr	r1, [r7, #8]
 80092fe:	4808      	ldr	r0, [pc, #32]	; (8009320 <uartWrite+0x50>)
 8009300:	f003 fd35 	bl	800cd6e <HAL_UART_Transmit>
 8009304:	4603      	mov	r3, r0
 8009306:	74fb      	strb	r3, [r7, #19]
				if(status == HAL_OK)
 8009308:	7cfb      	ldrb	r3, [r7, #19]
 800930a:	2b00      	cmp	r3, #0
 800930c:	d101      	bne.n	8009312 <uartWrite+0x42>
				{
					ret = length;
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	617b      	str	r3, [r7, #20]
				}
				break;
 8009312:	bf00      	nop
		}

	return ret;
 8009314:	697b      	ldr	r3, [r7, #20]
}
 8009316:	4618      	mov	r0, r3
 8009318:	3718      	adds	r7, #24
 800931a:	46bd      	mov	sp, r7
 800931c:	bd80      	pop	{r7, pc}
 800931e:	bf00      	nop
 8009320:	20000250 	.word	0x20000250

08009324 <HAL_UART_ErrorCallback>:




void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009324:	b480      	push	{r7}
 8009326:	b083      	sub	sp, #12
 8009328:	af00      	add	r7, sp, #0
 800932a:	6078      	str	r0, [r7, #4]
  if(huart1.Instance == USART1)
  {

  }
}
 800932c:	bf00      	nop
 800932e:	370c      	adds	r7, #12
 8009330:	46bd      	mov	sp, r7
 8009332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009336:	4770      	bx	lr

08009338 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8009338:	b480      	push	{r7}
 800933a:	b083      	sub	sp, #12
 800933c:	af00      	add	r7, sp, #0
 800933e:	6078      	str	r0, [r7, #4]
    /* received 1 byte data will be sent to our buffer
     * and to receive 1byte again, recall HAL_UART_Receive_IT*/
    HAL_UART_Receive_IT(&huart1, (uint8_t *)&rx_data[_DEF_UART2], 1);
  }
#endif
}
 8009340:	bf00      	nop
 8009342:	370c      	adds	r7, #12
 8009344:	46bd      	mov	sp, r7
 8009346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800934a:	4770      	bx	lr

0800934c <HAL_UART_MspInit>:




void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800934c:	b580      	push	{r7, lr}
 800934e:	b08a      	sub	sp, #40	; 0x28
 8009350:	af00      	add	r7, sp, #0
 8009352:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009354:	f107 0314 	add.w	r3, r7, #20
 8009358:	2200      	movs	r2, #0
 800935a:	601a      	str	r2, [r3, #0]
 800935c:	605a      	str	r2, [r3, #4]
 800935e:	609a      	str	r2, [r3, #8]
 8009360:	60da      	str	r2, [r3, #12]
 8009362:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	4a35      	ldr	r2, [pc, #212]	; (8009440 <HAL_UART_MspInit+0xf4>)
 800936a:	4293      	cmp	r3, r2
 800936c:	d163      	bne.n	8009436 <HAL_UART_MspInit+0xea>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800936e:	2300      	movs	r3, #0
 8009370:	613b      	str	r3, [r7, #16]
 8009372:	4b34      	ldr	r3, [pc, #208]	; (8009444 <HAL_UART_MspInit+0xf8>)
 8009374:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009376:	4a33      	ldr	r2, [pc, #204]	; (8009444 <HAL_UART_MspInit+0xf8>)
 8009378:	f043 0310 	orr.w	r3, r3, #16
 800937c:	6453      	str	r3, [r2, #68]	; 0x44
 800937e:	4b31      	ldr	r3, [pc, #196]	; (8009444 <HAL_UART_MspInit+0xf8>)
 8009380:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009382:	f003 0310 	and.w	r3, r3, #16
 8009386:	613b      	str	r3, [r7, #16]
 8009388:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800938a:	2300      	movs	r3, #0
 800938c:	60fb      	str	r3, [r7, #12]
 800938e:	4b2d      	ldr	r3, [pc, #180]	; (8009444 <HAL_UART_MspInit+0xf8>)
 8009390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009392:	4a2c      	ldr	r2, [pc, #176]	; (8009444 <HAL_UART_MspInit+0xf8>)
 8009394:	f043 0301 	orr.w	r3, r3, #1
 8009398:	6313      	str	r3, [r2, #48]	; 0x30
 800939a:	4b2a      	ldr	r3, [pc, #168]	; (8009444 <HAL_UART_MspInit+0xf8>)
 800939c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800939e:	f003 0301 	and.w	r3, r3, #1
 80093a2:	60fb      	str	r3, [r7, #12]
 80093a4:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80093a6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80093aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80093ac:	2302      	movs	r3, #2
 80093ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80093b0:	2300      	movs	r3, #0
 80093b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80093b4:	2303      	movs	r3, #3
 80093b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80093b8:	2307      	movs	r3, #7
 80093ba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80093bc:	f107 0314 	add.w	r3, r7, #20
 80093c0:	4619      	mov	r1, r3
 80093c2:	4821      	ldr	r0, [pc, #132]	; (8009448 <HAL_UART_MspInit+0xfc>)
 80093c4:	f001 f9da 	bl	800a77c <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 80093c8:	4b20      	ldr	r3, [pc, #128]	; (800944c <HAL_UART_MspInit+0x100>)
 80093ca:	4a21      	ldr	r2, [pc, #132]	; (8009450 <HAL_UART_MspInit+0x104>)
 80093cc:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 80093ce:	4b1f      	ldr	r3, [pc, #124]	; (800944c <HAL_UART_MspInit+0x100>)
 80093d0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80093d4:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80093d6:	4b1d      	ldr	r3, [pc, #116]	; (800944c <HAL_UART_MspInit+0x100>)
 80093d8:	2200      	movs	r2, #0
 80093da:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80093dc:	4b1b      	ldr	r3, [pc, #108]	; (800944c <HAL_UART_MspInit+0x100>)
 80093de:	2200      	movs	r2, #0
 80093e0:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80093e2:	4b1a      	ldr	r3, [pc, #104]	; (800944c <HAL_UART_MspInit+0x100>)
 80093e4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80093e8:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80093ea:	4b18      	ldr	r3, [pc, #96]	; (800944c <HAL_UART_MspInit+0x100>)
 80093ec:	2200      	movs	r2, #0
 80093ee:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80093f0:	4b16      	ldr	r3, [pc, #88]	; (800944c <HAL_UART_MspInit+0x100>)
 80093f2:	2200      	movs	r2, #0
 80093f4:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 80093f6:	4b15      	ldr	r3, [pc, #84]	; (800944c <HAL_UART_MspInit+0x100>)
 80093f8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80093fc:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80093fe:	4b13      	ldr	r3, [pc, #76]	; (800944c <HAL_UART_MspInit+0x100>)
 8009400:	2200      	movs	r2, #0
 8009402:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8009404:	4b11      	ldr	r3, [pc, #68]	; (800944c <HAL_UART_MspInit+0x100>)
 8009406:	2200      	movs	r2, #0
 8009408:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800940a:	4810      	ldr	r0, [pc, #64]	; (800944c <HAL_UART_MspInit+0x100>)
 800940c:	f000 fa6e 	bl	80098ec <HAL_DMA_Init>
 8009410:	4603      	mov	r3, r0
 8009412:	2b00      	cmp	r3, #0
 8009414:	d001      	beq.n	800941a <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8009416:	f7ff fa1b 	bl	8008850 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	4a0b      	ldr	r2, [pc, #44]	; (800944c <HAL_UART_MspInit+0x100>)
 800941e:	639a      	str	r2, [r3, #56]	; 0x38
 8009420:	4a0a      	ldr	r2, [pc, #40]	; (800944c <HAL_UART_MspInit+0x100>)
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8009426:	2200      	movs	r2, #0
 8009428:	2100      	movs	r1, #0
 800942a:	2025      	movs	r0, #37	; 0x25
 800942c:	f000 fa19 	bl	8009862 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8009430:	2025      	movs	r0, #37	; 0x25
 8009432:	f000 fa32 	bl	800989a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8009436:	bf00      	nop
 8009438:	3728      	adds	r7, #40	; 0x28
 800943a:	46bd      	mov	sp, r7
 800943c:	bd80      	pop	{r7, pc}
 800943e:	bf00      	nop
 8009440:	40011000 	.word	0x40011000
 8009444:	40023800 	.word	0x40023800
 8009448:	40020000 	.word	0x40020000
 800944c:	20000294 	.word	0x20000294
 8009450:	40026440 	.word	0x40026440

08009454 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 8009454:	b580      	push	{r7, lr}
 8009456:	b082      	sub	sp, #8
 8009458:	af00      	add	r7, sp, #0
 800945a:	6078      	str	r0, [r7, #4]

  if(uartHandle->Instance==USART1)
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	4a0c      	ldr	r2, [pc, #48]	; (8009494 <HAL_UART_MspDeInit+0x40>)
 8009462:	4293      	cmp	r3, r2
 8009464:	d112      	bne.n	800948c <HAL_UART_MspDeInit+0x38>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 8009466:	4b0c      	ldr	r3, [pc, #48]	; (8009498 <HAL_UART_MspDeInit+0x44>)
 8009468:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800946a:	4a0b      	ldr	r2, [pc, #44]	; (8009498 <HAL_UART_MspDeInit+0x44>)
 800946c:	f023 0310 	bic.w	r3, r3, #16
 8009470:	6453      	str	r3, [r2, #68]	; 0x44

    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9|GPIO_PIN_10);
 8009472:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8009476:	4809      	ldr	r0, [pc, #36]	; (800949c <HAL_UART_MspDeInit+0x48>)
 8009478:	f001 fb04 	bl	800aa84 <HAL_GPIO_DeInit>

    /* USART1 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmarx);
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009480:	4618      	mov	r0, r3
 8009482:	f000 fae1 	bl	8009a48 <HAL_DMA_DeInit>

    /* USART1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 8009486:	2025      	movs	r0, #37	; 0x25
 8009488:	f000 fa15 	bl	80098b6 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART1_MspDeInit 1 */

  /* USER CODE END USART1_MspDeInit 1 */
  }
}
 800948c:	bf00      	nop
 800948e:	3708      	adds	r7, #8
 8009490:	46bd      	mov	sp, r7
 8009492:	bd80      	pop	{r7, pc}
 8009494:	40011000 	.word	0x40011000
 8009498:	40023800 	.word	0x40023800
 800949c:	40020000 	.word	0x40020000

080094a0 <usbInit>:


#include "usb.h"

bool usbInit(void)
{
 80094a0:	b580      	push	{r7, lr}
 80094a2:	b086      	sub	sp, #24
 80094a4:	af00      	add	r7, sp, #0
	bool ret = true;
 80094a6:	2301      	movs	r3, #1
 80094a8:	75fb      	strb	r3, [r7, #23]

	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80094aa:	463b      	mov	r3, r7
 80094ac:	2200      	movs	r2, #0
 80094ae:	601a      	str	r2, [r3, #0]
 80094b0:	605a      	str	r2, [r3, #4]
 80094b2:	609a      	str	r2, [r3, #8]
 80094b4:	60da      	str	r2, [r3, #12]
 80094b6:	611a      	str	r2, [r3, #16]

	GPIO_InitStruct.Pin = GPIO_PIN_12;
 80094b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80094bc:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80094be:	2311      	movs	r3, #17
 80094c0:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80094c2:	2300      	movs	r3, #0
 80094c4:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80094c6:	2300      	movs	r3, #0
 80094c8:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80094ca:	463b      	mov	r3, r7
 80094cc:	4619      	mov	r1, r3
 80094ce:	4810      	ldr	r0, [pc, #64]	; (8009510 <usbInit+0x70>)
 80094d0:	f001 f954 	bl	800a77c <HAL_GPIO_Init>

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 80094d4:	2200      	movs	r2, #0
 80094d6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80094da:	480d      	ldr	r0, [pc, #52]	; (8009510 <usbInit+0x70>)
 80094dc:	f001 fbb6 	bl	800ac4c <HAL_GPIO_WritePin>
	delay(200);
 80094e0:	20c8      	movs	r0, #200	; 0xc8
 80094e2:	f7ff f929 	bl	8008738 <delay>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 80094e6:	2201      	movs	r2, #1
 80094e8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80094ec:	4808      	ldr	r0, [pc, #32]	; (8009510 <usbInit+0x70>)
 80094ee:	f001 fbad 	bl	800ac4c <HAL_GPIO_WritePin>

	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80094f2:	2300      	movs	r3, #0
 80094f4:	607b      	str	r3, [r7, #4]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80094f6:	463b      	mov	r3, r7
 80094f8:	4619      	mov	r1, r3
 80094fa:	4805      	ldr	r0, [pc, #20]	; (8009510 <usbInit+0x70>)
 80094fc:	f001 f93e 	bl	800a77c <HAL_GPIO_Init>

	MX_USB_DEVICE_Init();
 8009500:	f007 fde6 	bl	80110d0 <MX_USB_DEVICE_Init>
	return ret;
 8009504:	7dfb      	ldrb	r3, [r7, #23]
}
 8009506:	4618      	mov	r0, r3
 8009508:	3718      	adds	r7, #24
 800950a:	46bd      	mov	sp, r7
 800950c:	bd80      	pop	{r7, pc}
 800950e:	bf00      	nop
 8009510:	40020000 	.word	0x40020000

08009514 <hwInit>:
 */

#include "hw.h"

void hwInit()
{
 8009514:	b580      	push	{r7, lr}
 8009516:	af00      	add	r7, sp, #0
  bspInit();
 8009518:	f7ff f8d6 	bl	80086c8 <bspInit>
  rtcInit();
 800951c:	f7ff fd5c 	bl	8008fd8 <rtcInit>

  resetInit();
 8009520:	f7ff fd2e 	bl	8008f80 <resetInit>
  ledInit();
 8009524:	f7ff fc94 	bl	8008e50 <ledInit>
  usbInit();
 8009528:	f7ff ffba 	bl	80094a0 <usbInit>
  uartInit();
 800952c:	f7ff fdcc 	bl	80090c8 <uartInit>
  flashInit();
 8009530:	f7ff fb5a 	bl	8008be8 <flashInit>
}
 8009534:	bf00      	nop
 8009536:	bd80      	pop	{r7, pc}

08009538 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8009538:	b580      	push	{r7, lr}
 800953a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800953c:	4b0e      	ldr	r3, [pc, #56]	; (8009578 <HAL_Init+0x40>)
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	4a0d      	ldr	r2, [pc, #52]	; (8009578 <HAL_Init+0x40>)
 8009542:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009546:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8009548:	4b0b      	ldr	r3, [pc, #44]	; (8009578 <HAL_Init+0x40>)
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	4a0a      	ldr	r2, [pc, #40]	; (8009578 <HAL_Init+0x40>)
 800954e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8009552:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8009554:	4b08      	ldr	r3, [pc, #32]	; (8009578 <HAL_Init+0x40>)
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	4a07      	ldr	r2, [pc, #28]	; (8009578 <HAL_Init+0x40>)
 800955a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800955e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8009560:	2003      	movs	r0, #3
 8009562:	f000 f973 	bl	800984c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8009566:	200f      	movs	r0, #15
 8009568:	f000 f808 	bl	800957c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800956c:	f7ff f976 	bl	800885c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8009570:	2300      	movs	r3, #0
}
 8009572:	4618      	mov	r0, r3
 8009574:	bd80      	pop	{r7, pc}
 8009576:	bf00      	nop
 8009578:	40023c00 	.word	0x40023c00

0800957c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800957c:	b580      	push	{r7, lr}
 800957e:	b082      	sub	sp, #8
 8009580:	af00      	add	r7, sp, #0
 8009582:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8009584:	4b12      	ldr	r3, [pc, #72]	; (80095d0 <HAL_InitTick+0x54>)
 8009586:	681a      	ldr	r2, [r3, #0]
 8009588:	4b12      	ldr	r3, [pc, #72]	; (80095d4 <HAL_InitTick+0x58>)
 800958a:	781b      	ldrb	r3, [r3, #0]
 800958c:	4619      	mov	r1, r3
 800958e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8009592:	fbb3 f3f1 	udiv	r3, r3, r1
 8009596:	fbb2 f3f3 	udiv	r3, r2, r3
 800959a:	4618      	mov	r0, r3
 800959c:	f000 f999 	bl	80098d2 <HAL_SYSTICK_Config>
 80095a0:	4603      	mov	r3, r0
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	d001      	beq.n	80095aa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80095a6:	2301      	movs	r3, #1
 80095a8:	e00e      	b.n	80095c8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	2b0f      	cmp	r3, #15
 80095ae:	d80a      	bhi.n	80095c6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80095b0:	2200      	movs	r2, #0
 80095b2:	6879      	ldr	r1, [r7, #4]
 80095b4:	f04f 30ff 	mov.w	r0, #4294967295
 80095b8:	f000 f953 	bl	8009862 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80095bc:	4a06      	ldr	r2, [pc, #24]	; (80095d8 <HAL_InitTick+0x5c>)
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80095c2:	2300      	movs	r3, #0
 80095c4:	e000      	b.n	80095c8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80095c6:	2301      	movs	r3, #1
}
 80095c8:	4618      	mov	r0, r3
 80095ca:	3708      	adds	r7, #8
 80095cc:	46bd      	mov	sp, r7
 80095ce:	bd80      	pop	{r7, pc}
 80095d0:	20000000 	.word	0x20000000
 80095d4:	2000002c 	.word	0x2000002c
 80095d8:	20000028 	.word	0x20000028

080095dc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80095dc:	b480      	push	{r7}
 80095de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80095e0:	4b06      	ldr	r3, [pc, #24]	; (80095fc <HAL_IncTick+0x20>)
 80095e2:	781b      	ldrb	r3, [r3, #0]
 80095e4:	461a      	mov	r2, r3
 80095e6:	4b06      	ldr	r3, [pc, #24]	; (8009600 <HAL_IncTick+0x24>)
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	4413      	add	r3, r2
 80095ec:	4a04      	ldr	r2, [pc, #16]	; (8009600 <HAL_IncTick+0x24>)
 80095ee:	6013      	str	r3, [r2, #0]
}
 80095f0:	bf00      	nop
 80095f2:	46bd      	mov	sp, r7
 80095f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095f8:	4770      	bx	lr
 80095fa:	bf00      	nop
 80095fc:	2000002c 	.word	0x2000002c
 8009600:	20000418 	.word	0x20000418

08009604 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8009604:	b480      	push	{r7}
 8009606:	af00      	add	r7, sp, #0
  return uwTick;
 8009608:	4b03      	ldr	r3, [pc, #12]	; (8009618 <HAL_GetTick+0x14>)
 800960a:	681b      	ldr	r3, [r3, #0]
}
 800960c:	4618      	mov	r0, r3
 800960e:	46bd      	mov	sp, r7
 8009610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009614:	4770      	bx	lr
 8009616:	bf00      	nop
 8009618:	20000418 	.word	0x20000418

0800961c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800961c:	b580      	push	{r7, lr}
 800961e:	b084      	sub	sp, #16
 8009620:	af00      	add	r7, sp, #0
 8009622:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8009624:	f7ff ffee 	bl	8009604 <HAL_GetTick>
 8009628:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009634:	d005      	beq.n	8009642 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8009636:	4b0a      	ldr	r3, [pc, #40]	; (8009660 <HAL_Delay+0x44>)
 8009638:	781b      	ldrb	r3, [r3, #0]
 800963a:	461a      	mov	r2, r3
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	4413      	add	r3, r2
 8009640:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8009642:	bf00      	nop
 8009644:	f7ff ffde 	bl	8009604 <HAL_GetTick>
 8009648:	4602      	mov	r2, r0
 800964a:	68bb      	ldr	r3, [r7, #8]
 800964c:	1ad3      	subs	r3, r2, r3
 800964e:	68fa      	ldr	r2, [r7, #12]
 8009650:	429a      	cmp	r2, r3
 8009652:	d8f7      	bhi.n	8009644 <HAL_Delay+0x28>
  {
  }
}
 8009654:	bf00      	nop
 8009656:	bf00      	nop
 8009658:	3710      	adds	r7, #16
 800965a:	46bd      	mov	sp, r7
 800965c:	bd80      	pop	{r7, pc}
 800965e:	bf00      	nop
 8009660:	2000002c 	.word	0x2000002c

08009664 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8009664:	b480      	push	{r7}
 8009666:	b085      	sub	sp, #20
 8009668:	af00      	add	r7, sp, #0
 800966a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	f003 0307 	and.w	r3, r3, #7
 8009672:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8009674:	4b0c      	ldr	r3, [pc, #48]	; (80096a8 <__NVIC_SetPriorityGrouping+0x44>)
 8009676:	68db      	ldr	r3, [r3, #12]
 8009678:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800967a:	68ba      	ldr	r2, [r7, #8]
 800967c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8009680:	4013      	ands	r3, r2
 8009682:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8009688:	68bb      	ldr	r3, [r7, #8]
 800968a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800968c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8009690:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009694:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8009696:	4a04      	ldr	r2, [pc, #16]	; (80096a8 <__NVIC_SetPriorityGrouping+0x44>)
 8009698:	68bb      	ldr	r3, [r7, #8]
 800969a:	60d3      	str	r3, [r2, #12]
}
 800969c:	bf00      	nop
 800969e:	3714      	adds	r7, #20
 80096a0:	46bd      	mov	sp, r7
 80096a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096a6:	4770      	bx	lr
 80096a8:	e000ed00 	.word	0xe000ed00

080096ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80096ac:	b480      	push	{r7}
 80096ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80096b0:	4b04      	ldr	r3, [pc, #16]	; (80096c4 <__NVIC_GetPriorityGrouping+0x18>)
 80096b2:	68db      	ldr	r3, [r3, #12]
 80096b4:	0a1b      	lsrs	r3, r3, #8
 80096b6:	f003 0307 	and.w	r3, r3, #7
}
 80096ba:	4618      	mov	r0, r3
 80096bc:	46bd      	mov	sp, r7
 80096be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096c2:	4770      	bx	lr
 80096c4:	e000ed00 	.word	0xe000ed00

080096c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80096c8:	b480      	push	{r7}
 80096ca:	b083      	sub	sp, #12
 80096cc:	af00      	add	r7, sp, #0
 80096ce:	4603      	mov	r3, r0
 80096d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80096d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	db0b      	blt.n	80096f2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80096da:	79fb      	ldrb	r3, [r7, #7]
 80096dc:	f003 021f 	and.w	r2, r3, #31
 80096e0:	4907      	ldr	r1, [pc, #28]	; (8009700 <__NVIC_EnableIRQ+0x38>)
 80096e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80096e6:	095b      	lsrs	r3, r3, #5
 80096e8:	2001      	movs	r0, #1
 80096ea:	fa00 f202 	lsl.w	r2, r0, r2
 80096ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80096f2:	bf00      	nop
 80096f4:	370c      	adds	r7, #12
 80096f6:	46bd      	mov	sp, r7
 80096f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096fc:	4770      	bx	lr
 80096fe:	bf00      	nop
 8009700:	e000e100 	.word	0xe000e100

08009704 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8009704:	b480      	push	{r7}
 8009706:	b083      	sub	sp, #12
 8009708:	af00      	add	r7, sp, #0
 800970a:	4603      	mov	r3, r0
 800970c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800970e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009712:	2b00      	cmp	r3, #0
 8009714:	db12      	blt.n	800973c <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8009716:	79fb      	ldrb	r3, [r7, #7]
 8009718:	f003 021f 	and.w	r2, r3, #31
 800971c:	490a      	ldr	r1, [pc, #40]	; (8009748 <__NVIC_DisableIRQ+0x44>)
 800971e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009722:	095b      	lsrs	r3, r3, #5
 8009724:	2001      	movs	r0, #1
 8009726:	fa00 f202 	lsl.w	r2, r0, r2
 800972a:	3320      	adds	r3, #32
 800972c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8009730:	f3bf 8f4f 	dsb	sy
}
 8009734:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8009736:	f3bf 8f6f 	isb	sy
}
 800973a:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 800973c:	bf00      	nop
 800973e:	370c      	adds	r7, #12
 8009740:	46bd      	mov	sp, r7
 8009742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009746:	4770      	bx	lr
 8009748:	e000e100 	.word	0xe000e100

0800974c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800974c:	b480      	push	{r7}
 800974e:	b083      	sub	sp, #12
 8009750:	af00      	add	r7, sp, #0
 8009752:	4603      	mov	r3, r0
 8009754:	6039      	str	r1, [r7, #0]
 8009756:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009758:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800975c:	2b00      	cmp	r3, #0
 800975e:	db0a      	blt.n	8009776 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009760:	683b      	ldr	r3, [r7, #0]
 8009762:	b2da      	uxtb	r2, r3
 8009764:	490c      	ldr	r1, [pc, #48]	; (8009798 <__NVIC_SetPriority+0x4c>)
 8009766:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800976a:	0112      	lsls	r2, r2, #4
 800976c:	b2d2      	uxtb	r2, r2
 800976e:	440b      	add	r3, r1
 8009770:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8009774:	e00a      	b.n	800978c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009776:	683b      	ldr	r3, [r7, #0]
 8009778:	b2da      	uxtb	r2, r3
 800977a:	4908      	ldr	r1, [pc, #32]	; (800979c <__NVIC_SetPriority+0x50>)
 800977c:	79fb      	ldrb	r3, [r7, #7]
 800977e:	f003 030f 	and.w	r3, r3, #15
 8009782:	3b04      	subs	r3, #4
 8009784:	0112      	lsls	r2, r2, #4
 8009786:	b2d2      	uxtb	r2, r2
 8009788:	440b      	add	r3, r1
 800978a:	761a      	strb	r2, [r3, #24]
}
 800978c:	bf00      	nop
 800978e:	370c      	adds	r7, #12
 8009790:	46bd      	mov	sp, r7
 8009792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009796:	4770      	bx	lr
 8009798:	e000e100 	.word	0xe000e100
 800979c:	e000ed00 	.word	0xe000ed00

080097a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80097a0:	b480      	push	{r7}
 80097a2:	b089      	sub	sp, #36	; 0x24
 80097a4:	af00      	add	r7, sp, #0
 80097a6:	60f8      	str	r0, [r7, #12]
 80097a8:	60b9      	str	r1, [r7, #8]
 80097aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	f003 0307 	and.w	r3, r3, #7
 80097b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80097b4:	69fb      	ldr	r3, [r7, #28]
 80097b6:	f1c3 0307 	rsb	r3, r3, #7
 80097ba:	2b04      	cmp	r3, #4
 80097bc:	bf28      	it	cs
 80097be:	2304      	movcs	r3, #4
 80097c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80097c2:	69fb      	ldr	r3, [r7, #28]
 80097c4:	3304      	adds	r3, #4
 80097c6:	2b06      	cmp	r3, #6
 80097c8:	d902      	bls.n	80097d0 <NVIC_EncodePriority+0x30>
 80097ca:	69fb      	ldr	r3, [r7, #28]
 80097cc:	3b03      	subs	r3, #3
 80097ce:	e000      	b.n	80097d2 <NVIC_EncodePriority+0x32>
 80097d0:	2300      	movs	r3, #0
 80097d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80097d4:	f04f 32ff 	mov.w	r2, #4294967295
 80097d8:	69bb      	ldr	r3, [r7, #24]
 80097da:	fa02 f303 	lsl.w	r3, r2, r3
 80097de:	43da      	mvns	r2, r3
 80097e0:	68bb      	ldr	r3, [r7, #8]
 80097e2:	401a      	ands	r2, r3
 80097e4:	697b      	ldr	r3, [r7, #20]
 80097e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80097e8:	f04f 31ff 	mov.w	r1, #4294967295
 80097ec:	697b      	ldr	r3, [r7, #20]
 80097ee:	fa01 f303 	lsl.w	r3, r1, r3
 80097f2:	43d9      	mvns	r1, r3
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80097f8:	4313      	orrs	r3, r2
         );
}
 80097fa:	4618      	mov	r0, r3
 80097fc:	3724      	adds	r7, #36	; 0x24
 80097fe:	46bd      	mov	sp, r7
 8009800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009804:	4770      	bx	lr
	...

08009808 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8009808:	b580      	push	{r7, lr}
 800980a:	b082      	sub	sp, #8
 800980c:	af00      	add	r7, sp, #0
 800980e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	3b01      	subs	r3, #1
 8009814:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009818:	d301      	bcc.n	800981e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800981a:	2301      	movs	r3, #1
 800981c:	e00f      	b.n	800983e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800981e:	4a0a      	ldr	r2, [pc, #40]	; (8009848 <SysTick_Config+0x40>)
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	3b01      	subs	r3, #1
 8009824:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8009826:	210f      	movs	r1, #15
 8009828:	f04f 30ff 	mov.w	r0, #4294967295
 800982c:	f7ff ff8e 	bl	800974c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8009830:	4b05      	ldr	r3, [pc, #20]	; (8009848 <SysTick_Config+0x40>)
 8009832:	2200      	movs	r2, #0
 8009834:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8009836:	4b04      	ldr	r3, [pc, #16]	; (8009848 <SysTick_Config+0x40>)
 8009838:	2207      	movs	r2, #7
 800983a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800983c:	2300      	movs	r3, #0
}
 800983e:	4618      	mov	r0, r3
 8009840:	3708      	adds	r7, #8
 8009842:	46bd      	mov	sp, r7
 8009844:	bd80      	pop	{r7, pc}
 8009846:	bf00      	nop
 8009848:	e000e010 	.word	0xe000e010

0800984c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800984c:	b580      	push	{r7, lr}
 800984e:	b082      	sub	sp, #8
 8009850:	af00      	add	r7, sp, #0
 8009852:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8009854:	6878      	ldr	r0, [r7, #4]
 8009856:	f7ff ff05 	bl	8009664 <__NVIC_SetPriorityGrouping>
}
 800985a:	bf00      	nop
 800985c:	3708      	adds	r7, #8
 800985e:	46bd      	mov	sp, r7
 8009860:	bd80      	pop	{r7, pc}

08009862 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8009862:	b580      	push	{r7, lr}
 8009864:	b086      	sub	sp, #24
 8009866:	af00      	add	r7, sp, #0
 8009868:	4603      	mov	r3, r0
 800986a:	60b9      	str	r1, [r7, #8]
 800986c:	607a      	str	r2, [r7, #4]
 800986e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8009870:	2300      	movs	r3, #0
 8009872:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8009874:	f7ff ff1a 	bl	80096ac <__NVIC_GetPriorityGrouping>
 8009878:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800987a:	687a      	ldr	r2, [r7, #4]
 800987c:	68b9      	ldr	r1, [r7, #8]
 800987e:	6978      	ldr	r0, [r7, #20]
 8009880:	f7ff ff8e 	bl	80097a0 <NVIC_EncodePriority>
 8009884:	4602      	mov	r2, r0
 8009886:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800988a:	4611      	mov	r1, r2
 800988c:	4618      	mov	r0, r3
 800988e:	f7ff ff5d 	bl	800974c <__NVIC_SetPriority>
}
 8009892:	bf00      	nop
 8009894:	3718      	adds	r7, #24
 8009896:	46bd      	mov	sp, r7
 8009898:	bd80      	pop	{r7, pc}

0800989a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800989a:	b580      	push	{r7, lr}
 800989c:	b082      	sub	sp, #8
 800989e:	af00      	add	r7, sp, #0
 80098a0:	4603      	mov	r3, r0
 80098a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80098a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80098a8:	4618      	mov	r0, r3
 80098aa:	f7ff ff0d 	bl	80096c8 <__NVIC_EnableIRQ>
}
 80098ae:	bf00      	nop
 80098b0:	3708      	adds	r7, #8
 80098b2:	46bd      	mov	sp, r7
 80098b4:	bd80      	pop	{r7, pc}

080098b6 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80098b6:	b580      	push	{r7, lr}
 80098b8:	b082      	sub	sp, #8
 80098ba:	af00      	add	r7, sp, #0
 80098bc:	4603      	mov	r3, r0
 80098be:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80098c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80098c4:	4618      	mov	r0, r3
 80098c6:	f7ff ff1d 	bl	8009704 <__NVIC_DisableIRQ>
}
 80098ca:	bf00      	nop
 80098cc:	3708      	adds	r7, #8
 80098ce:	46bd      	mov	sp, r7
 80098d0:	bd80      	pop	{r7, pc}

080098d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80098d2:	b580      	push	{r7, lr}
 80098d4:	b082      	sub	sp, #8
 80098d6:	af00      	add	r7, sp, #0
 80098d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80098da:	6878      	ldr	r0, [r7, #4]
 80098dc:	f7ff ff94 	bl	8009808 <SysTick_Config>
 80098e0:	4603      	mov	r3, r0
}
 80098e2:	4618      	mov	r0, r3
 80098e4:	3708      	adds	r7, #8
 80098e6:	46bd      	mov	sp, r7
 80098e8:	bd80      	pop	{r7, pc}
	...

080098ec <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80098ec:	b580      	push	{r7, lr}
 80098ee:	b086      	sub	sp, #24
 80098f0:	af00      	add	r7, sp, #0
 80098f2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80098f4:	2300      	movs	r3, #0
 80098f6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80098f8:	f7ff fe84 	bl	8009604 <HAL_GetTick>
 80098fc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	2b00      	cmp	r3, #0
 8009902:	d101      	bne.n	8009908 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8009904:	2301      	movs	r3, #1
 8009906:	e099      	b.n	8009a3c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	2202      	movs	r2, #2
 800990c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	2200      	movs	r2, #0
 8009914:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	681a      	ldr	r2, [r3, #0]
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	f022 0201 	bic.w	r2, r2, #1
 8009926:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8009928:	e00f      	b.n	800994a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800992a:	f7ff fe6b 	bl	8009604 <HAL_GetTick>
 800992e:	4602      	mov	r2, r0
 8009930:	693b      	ldr	r3, [r7, #16]
 8009932:	1ad3      	subs	r3, r2, r3
 8009934:	2b05      	cmp	r3, #5
 8009936:	d908      	bls.n	800994a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	2220      	movs	r2, #32
 800993c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	2203      	movs	r2, #3
 8009942:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8009946:	2303      	movs	r3, #3
 8009948:	e078      	b.n	8009a3c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	f003 0301 	and.w	r3, r3, #1
 8009954:	2b00      	cmp	r3, #0
 8009956:	d1e8      	bne.n	800992a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8009960:	697a      	ldr	r2, [r7, #20]
 8009962:	4b38      	ldr	r3, [pc, #224]	; (8009a44 <HAL_DMA_Init+0x158>)
 8009964:	4013      	ands	r3, r2
 8009966:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	685a      	ldr	r2, [r3, #4]
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	689b      	ldr	r3, [r3, #8]
 8009970:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8009976:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	691b      	ldr	r3, [r3, #16]
 800997c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009982:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	699b      	ldr	r3, [r3, #24]
 8009988:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800998e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	6a1b      	ldr	r3, [r3, #32]
 8009994:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8009996:	697a      	ldr	r2, [r7, #20]
 8009998:	4313      	orrs	r3, r2
 800999a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099a0:	2b04      	cmp	r3, #4
 80099a2:	d107      	bne.n	80099b4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80099ac:	4313      	orrs	r3, r2
 80099ae:	697a      	ldr	r2, [r7, #20]
 80099b0:	4313      	orrs	r3, r2
 80099b2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	697a      	ldr	r2, [r7, #20]
 80099ba:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	695b      	ldr	r3, [r3, #20]
 80099c2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80099c4:	697b      	ldr	r3, [r7, #20]
 80099c6:	f023 0307 	bic.w	r3, r3, #7
 80099ca:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099d0:	697a      	ldr	r2, [r7, #20]
 80099d2:	4313      	orrs	r3, r2
 80099d4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099da:	2b04      	cmp	r3, #4
 80099dc:	d117      	bne.n	8009a0e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099e2:	697a      	ldr	r2, [r7, #20]
 80099e4:	4313      	orrs	r3, r2
 80099e6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	d00e      	beq.n	8009a0e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80099f0:	6878      	ldr	r0, [r7, #4]
 80099f2:	f000 fb5f 	bl	800a0b4 <DMA_CheckFifoParam>
 80099f6:	4603      	mov	r3, r0
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d008      	beq.n	8009a0e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	2240      	movs	r2, #64	; 0x40
 8009a00:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	2201      	movs	r2, #1
 8009a06:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8009a0a:	2301      	movs	r3, #1
 8009a0c:	e016      	b.n	8009a3c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	697a      	ldr	r2, [r7, #20]
 8009a14:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8009a16:	6878      	ldr	r0, [r7, #4]
 8009a18:	f000 fb16 	bl	800a048 <DMA_CalcBaseAndBitshift>
 8009a1c:	4603      	mov	r3, r0
 8009a1e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009a24:	223f      	movs	r2, #63	; 0x3f
 8009a26:	409a      	lsls	r2, r3
 8009a28:	68fb      	ldr	r3, [r7, #12]
 8009a2a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	2200      	movs	r2, #0
 8009a30:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	2201      	movs	r2, #1
 8009a36:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8009a3a:	2300      	movs	r3, #0
}
 8009a3c:	4618      	mov	r0, r3
 8009a3e:	3718      	adds	r7, #24
 8009a40:	46bd      	mov	sp, r7
 8009a42:	bd80      	pop	{r7, pc}
 8009a44:	f010803f 	.word	0xf010803f

08009a48 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8009a48:	b580      	push	{r7, lr}
 8009a4a:	b084      	sub	sp, #16
 8009a4c:	af00      	add	r7, sp, #0
 8009a4e:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d101      	bne.n	8009a5a <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8009a56:	2301      	movs	r3, #1
 8009a58:	e050      	b.n	8009afc <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8009a60:	b2db      	uxtb	r3, r3
 8009a62:	2b02      	cmp	r3, #2
 8009a64:	d101      	bne.n	8009a6a <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8009a66:	2302      	movs	r3, #2
 8009a68:	e048      	b.n	8009afc <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	681a      	ldr	r2, [r3, #0]
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	f022 0201 	bic.w	r2, r2, #1
 8009a78:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	2200      	movs	r2, #0
 8009a80:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	2200      	movs	r2, #0
 8009a88:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	2200      	movs	r2, #0
 8009a90:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	2200      	movs	r2, #0
 8009a98:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	2200      	movs	r2, #0
 8009aa0:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	2221      	movs	r2, #33	; 0x21
 8009aa8:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8009aaa:	6878      	ldr	r0, [r7, #4]
 8009aac:	f000 facc 	bl	800a048 <DMA_CalcBaseAndBitshift>
 8009ab0:	4603      	mov	r3, r0
 8009ab2:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	2200      	movs	r2, #0
 8009ab8:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	2200      	movs	r2, #0
 8009abe:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	2200      	movs	r2, #0
 8009ac4:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	2200      	movs	r2, #0
 8009aca:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	2200      	movs	r2, #0
 8009ad0:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	2200      	movs	r2, #0
 8009ad6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009adc:	223f      	movs	r2, #63	; 0x3f
 8009ade:	409a      	lsls	r2, r3
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	2200      	movs	r2, #0
 8009ae8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	2200      	movs	r2, #0
 8009aee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	2200      	movs	r2, #0
 8009af6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8009afa:	2300      	movs	r3, #0
}
 8009afc:	4618      	mov	r0, r3
 8009afe:	3710      	adds	r7, #16
 8009b00:	46bd      	mov	sp, r7
 8009b02:	bd80      	pop	{r7, pc}

08009b04 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8009b04:	b580      	push	{r7, lr}
 8009b06:	b086      	sub	sp, #24
 8009b08:	af00      	add	r7, sp, #0
 8009b0a:	60f8      	str	r0, [r7, #12]
 8009b0c:	60b9      	str	r1, [r7, #8]
 8009b0e:	607a      	str	r2, [r7, #4]
 8009b10:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009b12:	2300      	movs	r3, #0
 8009b14:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8009b16:	68fb      	ldr	r3, [r7, #12]
 8009b18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009b1a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8009b22:	2b01      	cmp	r3, #1
 8009b24:	d101      	bne.n	8009b2a <HAL_DMA_Start_IT+0x26>
 8009b26:	2302      	movs	r3, #2
 8009b28:	e040      	b.n	8009bac <HAL_DMA_Start_IT+0xa8>
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	2201      	movs	r2, #1
 8009b2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8009b32:	68fb      	ldr	r3, [r7, #12]
 8009b34:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8009b38:	b2db      	uxtb	r3, r3
 8009b3a:	2b01      	cmp	r3, #1
 8009b3c:	d12f      	bne.n	8009b9e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8009b3e:	68fb      	ldr	r3, [r7, #12]
 8009b40:	2202      	movs	r2, #2
 8009b42:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8009b46:	68fb      	ldr	r3, [r7, #12]
 8009b48:	2200      	movs	r2, #0
 8009b4a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8009b4c:	683b      	ldr	r3, [r7, #0]
 8009b4e:	687a      	ldr	r2, [r7, #4]
 8009b50:	68b9      	ldr	r1, [r7, #8]
 8009b52:	68f8      	ldr	r0, [r7, #12]
 8009b54:	f000 fa4a 	bl	8009fec <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8009b58:	68fb      	ldr	r3, [r7, #12]
 8009b5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009b5c:	223f      	movs	r2, #63	; 0x3f
 8009b5e:	409a      	lsls	r2, r3
 8009b60:	693b      	ldr	r3, [r7, #16]
 8009b62:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	681a      	ldr	r2, [r3, #0]
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	f042 0216 	orr.w	r2, r2, #22
 8009b72:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8009b74:	68fb      	ldr	r3, [r7, #12]
 8009b76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	d007      	beq.n	8009b8c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	681a      	ldr	r2, [r3, #0]
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	f042 0208 	orr.w	r2, r2, #8
 8009b8a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8009b8c:	68fb      	ldr	r3, [r7, #12]
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	681a      	ldr	r2, [r3, #0]
 8009b92:	68fb      	ldr	r3, [r7, #12]
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	f042 0201 	orr.w	r2, r2, #1
 8009b9a:	601a      	str	r2, [r3, #0]
 8009b9c:	e005      	b.n	8009baa <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	2200      	movs	r2, #0
 8009ba2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8009ba6:	2302      	movs	r3, #2
 8009ba8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8009baa:	7dfb      	ldrb	r3, [r7, #23]
}
 8009bac:	4618      	mov	r0, r3
 8009bae:	3718      	adds	r7, #24
 8009bb0:	46bd      	mov	sp, r7
 8009bb2:	bd80      	pop	{r7, pc}

08009bb4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8009bb4:	b580      	push	{r7, lr}
 8009bb6:	b084      	sub	sp, #16
 8009bb8:	af00      	add	r7, sp, #0
 8009bba:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009bc0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8009bc2:	f7ff fd1f 	bl	8009604 <HAL_GetTick>
 8009bc6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8009bce:	b2db      	uxtb	r3, r3
 8009bd0:	2b02      	cmp	r3, #2
 8009bd2:	d008      	beq.n	8009be6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	2280      	movs	r2, #128	; 0x80
 8009bd8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	2200      	movs	r2, #0
 8009bde:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8009be2:	2301      	movs	r3, #1
 8009be4:	e052      	b.n	8009c8c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	681a      	ldr	r2, [r3, #0]
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	f022 0216 	bic.w	r2, r2, #22
 8009bf4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	695a      	ldr	r2, [r3, #20]
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009c04:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	d103      	bne.n	8009c16 <HAL_DMA_Abort+0x62>
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	d007      	beq.n	8009c26 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	681a      	ldr	r2, [r3, #0]
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	f022 0208 	bic.w	r2, r2, #8
 8009c24:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	681a      	ldr	r2, [r3, #0]
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	f022 0201 	bic.w	r2, r2, #1
 8009c34:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8009c36:	e013      	b.n	8009c60 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8009c38:	f7ff fce4 	bl	8009604 <HAL_GetTick>
 8009c3c:	4602      	mov	r2, r0
 8009c3e:	68bb      	ldr	r3, [r7, #8]
 8009c40:	1ad3      	subs	r3, r2, r3
 8009c42:	2b05      	cmp	r3, #5
 8009c44:	d90c      	bls.n	8009c60 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	2220      	movs	r2, #32
 8009c4a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	2203      	movs	r2, #3
 8009c50:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	2200      	movs	r2, #0
 8009c58:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8009c5c:	2303      	movs	r3, #3
 8009c5e:	e015      	b.n	8009c8c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	f003 0301 	and.w	r3, r3, #1
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	d1e4      	bne.n	8009c38 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009c72:	223f      	movs	r2, #63	; 0x3f
 8009c74:	409a      	lsls	r2, r3
 8009c76:	68fb      	ldr	r3, [r7, #12]
 8009c78:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	2201      	movs	r2, #1
 8009c7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	2200      	movs	r2, #0
 8009c86:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8009c8a:	2300      	movs	r3, #0
}
 8009c8c:	4618      	mov	r0, r3
 8009c8e:	3710      	adds	r7, #16
 8009c90:	46bd      	mov	sp, r7
 8009c92:	bd80      	pop	{r7, pc}

08009c94 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8009c94:	b480      	push	{r7}
 8009c96:	b083      	sub	sp, #12
 8009c98:	af00      	add	r7, sp, #0
 8009c9a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8009ca2:	b2db      	uxtb	r3, r3
 8009ca4:	2b02      	cmp	r3, #2
 8009ca6:	d004      	beq.n	8009cb2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	2280      	movs	r2, #128	; 0x80
 8009cac:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8009cae:	2301      	movs	r3, #1
 8009cb0:	e00c      	b.n	8009ccc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	2205      	movs	r2, #5
 8009cb6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	681a      	ldr	r2, [r3, #0]
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	f022 0201 	bic.w	r2, r2, #1
 8009cc8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8009cca:	2300      	movs	r3, #0
}
 8009ccc:	4618      	mov	r0, r3
 8009cce:	370c      	adds	r7, #12
 8009cd0:	46bd      	mov	sp, r7
 8009cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cd6:	4770      	bx	lr

08009cd8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8009cd8:	b580      	push	{r7, lr}
 8009cda:	b086      	sub	sp, #24
 8009cdc:	af00      	add	r7, sp, #0
 8009cde:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8009ce0:	2300      	movs	r3, #0
 8009ce2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8009ce4:	4b8e      	ldr	r3, [pc, #568]	; (8009f20 <HAL_DMA_IRQHandler+0x248>)
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	4a8e      	ldr	r2, [pc, #568]	; (8009f24 <HAL_DMA_IRQHandler+0x24c>)
 8009cea:	fba2 2303 	umull	r2, r3, r2, r3
 8009cee:	0a9b      	lsrs	r3, r3, #10
 8009cf0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009cf6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8009cf8:	693b      	ldr	r3, [r7, #16]
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009d02:	2208      	movs	r2, #8
 8009d04:	409a      	lsls	r2, r3
 8009d06:	68fb      	ldr	r3, [r7, #12]
 8009d08:	4013      	ands	r3, r2
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	d01a      	beq.n	8009d44 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	f003 0304 	and.w	r3, r3, #4
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	d013      	beq.n	8009d44 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	681a      	ldr	r2, [r3, #0]
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	f022 0204 	bic.w	r2, r2, #4
 8009d2a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009d30:	2208      	movs	r2, #8
 8009d32:	409a      	lsls	r2, r3
 8009d34:	693b      	ldr	r3, [r7, #16]
 8009d36:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009d3c:	f043 0201 	orr.w	r2, r3, #1
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009d48:	2201      	movs	r2, #1
 8009d4a:	409a      	lsls	r2, r3
 8009d4c:	68fb      	ldr	r3, [r7, #12]
 8009d4e:	4013      	ands	r3, r2
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	d012      	beq.n	8009d7a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	695b      	ldr	r3, [r3, #20]
 8009d5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	d00b      	beq.n	8009d7a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009d66:	2201      	movs	r2, #1
 8009d68:	409a      	lsls	r2, r3
 8009d6a:	693b      	ldr	r3, [r7, #16]
 8009d6c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009d72:	f043 0202 	orr.w	r2, r3, #2
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009d7e:	2204      	movs	r2, #4
 8009d80:	409a      	lsls	r2, r3
 8009d82:	68fb      	ldr	r3, [r7, #12]
 8009d84:	4013      	ands	r3, r2
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	d012      	beq.n	8009db0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	f003 0302 	and.w	r3, r3, #2
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	d00b      	beq.n	8009db0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009d9c:	2204      	movs	r2, #4
 8009d9e:	409a      	lsls	r2, r3
 8009da0:	693b      	ldr	r3, [r7, #16]
 8009da2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009da8:	f043 0204 	orr.w	r2, r3, #4
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009db4:	2210      	movs	r2, #16
 8009db6:	409a      	lsls	r2, r3
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	4013      	ands	r3, r2
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	d043      	beq.n	8009e48 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	f003 0308 	and.w	r3, r3, #8
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	d03c      	beq.n	8009e48 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009dd2:	2210      	movs	r2, #16
 8009dd4:	409a      	lsls	r2, r3
 8009dd6:	693b      	ldr	r3, [r7, #16]
 8009dd8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	d018      	beq.n	8009e1a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	d108      	bne.n	8009e08 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d024      	beq.n	8009e48 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e02:	6878      	ldr	r0, [r7, #4]
 8009e04:	4798      	blx	r3
 8009e06:	e01f      	b.n	8009e48 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	d01b      	beq.n	8009e48 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009e14:	6878      	ldr	r0, [r7, #4]
 8009e16:	4798      	blx	r3
 8009e18:	e016      	b.n	8009e48 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	d107      	bne.n	8009e38 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	681a      	ldr	r2, [r3, #0]
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	f022 0208 	bic.w	r2, r2, #8
 8009e36:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	d003      	beq.n	8009e48 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e44:	6878      	ldr	r0, [r7, #4]
 8009e46:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009e4c:	2220      	movs	r2, #32
 8009e4e:	409a      	lsls	r2, r3
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	4013      	ands	r3, r2
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	f000 808f 	beq.w	8009f78 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	f003 0310 	and.w	r3, r3, #16
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	f000 8087 	beq.w	8009f78 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009e6e:	2220      	movs	r2, #32
 8009e70:	409a      	lsls	r2, r3
 8009e72:	693b      	ldr	r3, [r7, #16]
 8009e74:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8009e7c:	b2db      	uxtb	r3, r3
 8009e7e:	2b05      	cmp	r3, #5
 8009e80:	d136      	bne.n	8009ef0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	681a      	ldr	r2, [r3, #0]
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	f022 0216 	bic.w	r2, r2, #22
 8009e90:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	695a      	ldr	r2, [r3, #20]
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009ea0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	d103      	bne.n	8009eb2 <HAL_DMA_IRQHandler+0x1da>
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	d007      	beq.n	8009ec2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	681a      	ldr	r2, [r3, #0]
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	f022 0208 	bic.w	r2, r2, #8
 8009ec0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009ec6:	223f      	movs	r2, #63	; 0x3f
 8009ec8:	409a      	lsls	r2, r3
 8009eca:	693b      	ldr	r3, [r7, #16]
 8009ecc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	2201      	movs	r2, #1
 8009ed2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	2200      	movs	r2, #0
 8009eda:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	d07e      	beq.n	8009fe4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009eea:	6878      	ldr	r0, [r7, #4]
 8009eec:	4798      	blx	r3
        }
        return;
 8009eee:	e079      	b.n	8009fe4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	d01d      	beq.n	8009f3a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	d10d      	bne.n	8009f28 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	d031      	beq.n	8009f78 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009f18:	6878      	ldr	r0, [r7, #4]
 8009f1a:	4798      	blx	r3
 8009f1c:	e02c      	b.n	8009f78 <HAL_DMA_IRQHandler+0x2a0>
 8009f1e:	bf00      	nop
 8009f20:	20000000 	.word	0x20000000
 8009f24:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	d023      	beq.n	8009f78 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009f34:	6878      	ldr	r0, [r7, #4]
 8009f36:	4798      	blx	r3
 8009f38:	e01e      	b.n	8009f78 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	681b      	ldr	r3, [r3, #0]
 8009f40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	d10f      	bne.n	8009f68 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	681a      	ldr	r2, [r3, #0]
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	f022 0210 	bic.w	r2, r2, #16
 8009f56:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	2201      	movs	r2, #1
 8009f5c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	2200      	movs	r2, #0
 8009f64:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	d003      	beq.n	8009f78 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009f74:	6878      	ldr	r0, [r7, #4]
 8009f76:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	d032      	beq.n	8009fe6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009f84:	f003 0301 	and.w	r3, r3, #1
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	d022      	beq.n	8009fd2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	2205      	movs	r2, #5
 8009f90:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	681a      	ldr	r2, [r3, #0]
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	f022 0201 	bic.w	r2, r2, #1
 8009fa2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8009fa4:	68bb      	ldr	r3, [r7, #8]
 8009fa6:	3301      	adds	r3, #1
 8009fa8:	60bb      	str	r3, [r7, #8]
 8009faa:	697a      	ldr	r2, [r7, #20]
 8009fac:	429a      	cmp	r2, r3
 8009fae:	d307      	bcc.n	8009fc0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	f003 0301 	and.w	r3, r3, #1
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	d1f2      	bne.n	8009fa4 <HAL_DMA_IRQHandler+0x2cc>
 8009fbe:	e000      	b.n	8009fc2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8009fc0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	2201      	movs	r2, #1
 8009fc6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	2200      	movs	r2, #0
 8009fce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	d005      	beq.n	8009fe6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009fde:	6878      	ldr	r0, [r7, #4]
 8009fe0:	4798      	blx	r3
 8009fe2:	e000      	b.n	8009fe6 <HAL_DMA_IRQHandler+0x30e>
        return;
 8009fe4:	bf00      	nop
    }
  }
}
 8009fe6:	3718      	adds	r7, #24
 8009fe8:	46bd      	mov	sp, r7
 8009fea:	bd80      	pop	{r7, pc}

08009fec <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8009fec:	b480      	push	{r7}
 8009fee:	b085      	sub	sp, #20
 8009ff0:	af00      	add	r7, sp, #0
 8009ff2:	60f8      	str	r0, [r7, #12]
 8009ff4:	60b9      	str	r1, [r7, #8]
 8009ff6:	607a      	str	r2, [r7, #4]
 8009ff8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8009ffa:	68fb      	ldr	r3, [r7, #12]
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	681a      	ldr	r2, [r3, #0]
 800a000:	68fb      	ldr	r3, [r7, #12]
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800a008:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800a00a:	68fb      	ldr	r3, [r7, #12]
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	683a      	ldr	r2, [r7, #0]
 800a010:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800a012:	68fb      	ldr	r3, [r7, #12]
 800a014:	689b      	ldr	r3, [r3, #8]
 800a016:	2b40      	cmp	r3, #64	; 0x40
 800a018:	d108      	bne.n	800a02c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800a01a:	68fb      	ldr	r3, [r7, #12]
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	687a      	ldr	r2, [r7, #4]
 800a020:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800a022:	68fb      	ldr	r3, [r7, #12]
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	68ba      	ldr	r2, [r7, #8]
 800a028:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800a02a:	e007      	b.n	800a03c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800a02c:	68fb      	ldr	r3, [r7, #12]
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	68ba      	ldr	r2, [r7, #8]
 800a032:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800a034:	68fb      	ldr	r3, [r7, #12]
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	687a      	ldr	r2, [r7, #4]
 800a03a:	60da      	str	r2, [r3, #12]
}
 800a03c:	bf00      	nop
 800a03e:	3714      	adds	r7, #20
 800a040:	46bd      	mov	sp, r7
 800a042:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a046:	4770      	bx	lr

0800a048 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800a048:	b480      	push	{r7}
 800a04a:	b085      	sub	sp, #20
 800a04c:	af00      	add	r7, sp, #0
 800a04e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	b2db      	uxtb	r3, r3
 800a056:	3b10      	subs	r3, #16
 800a058:	4a14      	ldr	r2, [pc, #80]	; (800a0ac <DMA_CalcBaseAndBitshift+0x64>)
 800a05a:	fba2 2303 	umull	r2, r3, r2, r3
 800a05e:	091b      	lsrs	r3, r3, #4
 800a060:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800a062:	4a13      	ldr	r2, [pc, #76]	; (800a0b0 <DMA_CalcBaseAndBitshift+0x68>)
 800a064:	68fb      	ldr	r3, [r7, #12]
 800a066:	4413      	add	r3, r2
 800a068:	781b      	ldrb	r3, [r3, #0]
 800a06a:	461a      	mov	r2, r3
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800a070:	68fb      	ldr	r3, [r7, #12]
 800a072:	2b03      	cmp	r3, #3
 800a074:	d909      	bls.n	800a08a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800a07e:	f023 0303 	bic.w	r3, r3, #3
 800a082:	1d1a      	adds	r2, r3, #4
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	659a      	str	r2, [r3, #88]	; 0x58
 800a088:	e007      	b.n	800a09a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800a092:	f023 0303 	bic.w	r3, r3, #3
 800a096:	687a      	ldr	r2, [r7, #4]
 800a098:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800a09e:	4618      	mov	r0, r3
 800a0a0:	3714      	adds	r7, #20
 800a0a2:	46bd      	mov	sp, r7
 800a0a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0a8:	4770      	bx	lr
 800a0aa:	bf00      	nop
 800a0ac:	aaaaaaab 	.word	0xaaaaaaab
 800a0b0:	08012f34 	.word	0x08012f34

0800a0b4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800a0b4:	b480      	push	{r7}
 800a0b6:	b085      	sub	sp, #20
 800a0b8:	af00      	add	r7, sp, #0
 800a0ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a0bc:	2300      	movs	r3, #0
 800a0be:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a0c4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	699b      	ldr	r3, [r3, #24]
 800a0ca:	2b00      	cmp	r3, #0
 800a0cc:	d11f      	bne.n	800a10e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800a0ce:	68bb      	ldr	r3, [r7, #8]
 800a0d0:	2b03      	cmp	r3, #3
 800a0d2:	d856      	bhi.n	800a182 <DMA_CheckFifoParam+0xce>
 800a0d4:	a201      	add	r2, pc, #4	; (adr r2, 800a0dc <DMA_CheckFifoParam+0x28>)
 800a0d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0da:	bf00      	nop
 800a0dc:	0800a0ed 	.word	0x0800a0ed
 800a0e0:	0800a0ff 	.word	0x0800a0ff
 800a0e4:	0800a0ed 	.word	0x0800a0ed
 800a0e8:	0800a183 	.word	0x0800a183
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0f0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a0f4:	2b00      	cmp	r3, #0
 800a0f6:	d046      	beq.n	800a186 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800a0f8:	2301      	movs	r3, #1
 800a0fa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800a0fc:	e043      	b.n	800a186 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a102:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800a106:	d140      	bne.n	800a18a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800a108:	2301      	movs	r3, #1
 800a10a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800a10c:	e03d      	b.n	800a18a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	699b      	ldr	r3, [r3, #24]
 800a112:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a116:	d121      	bne.n	800a15c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800a118:	68bb      	ldr	r3, [r7, #8]
 800a11a:	2b03      	cmp	r3, #3
 800a11c:	d837      	bhi.n	800a18e <DMA_CheckFifoParam+0xda>
 800a11e:	a201      	add	r2, pc, #4	; (adr r2, 800a124 <DMA_CheckFifoParam+0x70>)
 800a120:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a124:	0800a135 	.word	0x0800a135
 800a128:	0800a13b 	.word	0x0800a13b
 800a12c:	0800a135 	.word	0x0800a135
 800a130:	0800a14d 	.word	0x0800a14d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800a134:	2301      	movs	r3, #1
 800a136:	73fb      	strb	r3, [r7, #15]
      break;
 800a138:	e030      	b.n	800a19c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a13e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a142:	2b00      	cmp	r3, #0
 800a144:	d025      	beq.n	800a192 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800a146:	2301      	movs	r3, #1
 800a148:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800a14a:	e022      	b.n	800a192 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a150:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800a154:	d11f      	bne.n	800a196 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800a156:	2301      	movs	r3, #1
 800a158:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800a15a:	e01c      	b.n	800a196 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800a15c:	68bb      	ldr	r3, [r7, #8]
 800a15e:	2b02      	cmp	r3, #2
 800a160:	d903      	bls.n	800a16a <DMA_CheckFifoParam+0xb6>
 800a162:	68bb      	ldr	r3, [r7, #8]
 800a164:	2b03      	cmp	r3, #3
 800a166:	d003      	beq.n	800a170 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800a168:	e018      	b.n	800a19c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800a16a:	2301      	movs	r3, #1
 800a16c:	73fb      	strb	r3, [r7, #15]
      break;
 800a16e:	e015      	b.n	800a19c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a174:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a178:	2b00      	cmp	r3, #0
 800a17a:	d00e      	beq.n	800a19a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800a17c:	2301      	movs	r3, #1
 800a17e:	73fb      	strb	r3, [r7, #15]
      break;
 800a180:	e00b      	b.n	800a19a <DMA_CheckFifoParam+0xe6>
      break;
 800a182:	bf00      	nop
 800a184:	e00a      	b.n	800a19c <DMA_CheckFifoParam+0xe8>
      break;
 800a186:	bf00      	nop
 800a188:	e008      	b.n	800a19c <DMA_CheckFifoParam+0xe8>
      break;
 800a18a:	bf00      	nop
 800a18c:	e006      	b.n	800a19c <DMA_CheckFifoParam+0xe8>
      break;
 800a18e:	bf00      	nop
 800a190:	e004      	b.n	800a19c <DMA_CheckFifoParam+0xe8>
      break;
 800a192:	bf00      	nop
 800a194:	e002      	b.n	800a19c <DMA_CheckFifoParam+0xe8>
      break;   
 800a196:	bf00      	nop
 800a198:	e000      	b.n	800a19c <DMA_CheckFifoParam+0xe8>
      break;
 800a19a:	bf00      	nop
    }
  } 
  
  return status; 
 800a19c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a19e:	4618      	mov	r0, r3
 800a1a0:	3714      	adds	r7, #20
 800a1a2:	46bd      	mov	sp, r7
 800a1a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1a8:	4770      	bx	lr
 800a1aa:	bf00      	nop

0800a1ac <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 800a1ac:	b580      	push	{r7, lr}
 800a1ae:	b086      	sub	sp, #24
 800a1b0:	af00      	add	r7, sp, #0
 800a1b2:	60f8      	str	r0, [r7, #12]
 800a1b4:	60b9      	str	r1, [r7, #8]
 800a1b6:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 800a1ba:	2301      	movs	r3, #1
 800a1bc:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800a1be:	4b23      	ldr	r3, [pc, #140]	; (800a24c <HAL_FLASH_Program+0xa0>)
 800a1c0:	7e1b      	ldrb	r3, [r3, #24]
 800a1c2:	2b01      	cmp	r3, #1
 800a1c4:	d101      	bne.n	800a1ca <HAL_FLASH_Program+0x1e>
 800a1c6:	2302      	movs	r3, #2
 800a1c8:	e03b      	b.n	800a242 <HAL_FLASH_Program+0x96>
 800a1ca:	4b20      	ldr	r3, [pc, #128]	; (800a24c <HAL_FLASH_Program+0xa0>)
 800a1cc:	2201      	movs	r2, #1
 800a1ce:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800a1d0:	f24c 3050 	movw	r0, #50000	; 0xc350
 800a1d4:	f000 f870 	bl	800a2b8 <FLASH_WaitForLastOperation>
 800a1d8:	4603      	mov	r3, r0
 800a1da:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 800a1dc:	7dfb      	ldrb	r3, [r7, #23]
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	d12b      	bne.n	800a23a <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 800a1e2:	68fb      	ldr	r3, [r7, #12]
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	d105      	bne.n	800a1f4 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 800a1e8:	783b      	ldrb	r3, [r7, #0]
 800a1ea:	4619      	mov	r1, r3
 800a1ec:	68b8      	ldr	r0, [r7, #8]
 800a1ee:	f000 f91b 	bl	800a428 <FLASH_Program_Byte>
 800a1f2:	e016      	b.n	800a222 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 800a1f4:	68fb      	ldr	r3, [r7, #12]
 800a1f6:	2b01      	cmp	r3, #1
 800a1f8:	d105      	bne.n	800a206 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 800a1fa:	883b      	ldrh	r3, [r7, #0]
 800a1fc:	4619      	mov	r1, r3
 800a1fe:	68b8      	ldr	r0, [r7, #8]
 800a200:	f000 f8ee 	bl	800a3e0 <FLASH_Program_HalfWord>
 800a204:	e00d      	b.n	800a222 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 800a206:	68fb      	ldr	r3, [r7, #12]
 800a208:	2b02      	cmp	r3, #2
 800a20a:	d105      	bne.n	800a218 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 800a20c:	683b      	ldr	r3, [r7, #0]
 800a20e:	4619      	mov	r1, r3
 800a210:	68b8      	ldr	r0, [r7, #8]
 800a212:	f000 f8c3 	bl	800a39c <FLASH_Program_Word>
 800a216:	e004      	b.n	800a222 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 800a218:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a21c:	68b8      	ldr	r0, [r7, #8]
 800a21e:	f000 f88b 	bl	800a338 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800a222:	f24c 3050 	movw	r0, #50000	; 0xc350
 800a226:	f000 f847 	bl	800a2b8 <FLASH_WaitForLastOperation>
 800a22a:	4603      	mov	r3, r0
 800a22c:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 800a22e:	4b08      	ldr	r3, [pc, #32]	; (800a250 <HAL_FLASH_Program+0xa4>)
 800a230:	691b      	ldr	r3, [r3, #16]
 800a232:	4a07      	ldr	r2, [pc, #28]	; (800a250 <HAL_FLASH_Program+0xa4>)
 800a234:	f023 0301 	bic.w	r3, r3, #1
 800a238:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800a23a:	4b04      	ldr	r3, [pc, #16]	; (800a24c <HAL_FLASH_Program+0xa0>)
 800a23c:	2200      	movs	r2, #0
 800a23e:	761a      	strb	r2, [r3, #24]
  
  return status;
 800a240:	7dfb      	ldrb	r3, [r7, #23]
}
 800a242:	4618      	mov	r0, r3
 800a244:	3718      	adds	r7, #24
 800a246:	46bd      	mov	sp, r7
 800a248:	bd80      	pop	{r7, pc}
 800a24a:	bf00      	nop
 800a24c:	2000041c 	.word	0x2000041c
 800a250:	40023c00 	.word	0x40023c00

0800a254 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 800a254:	b480      	push	{r7}
 800a256:	b083      	sub	sp, #12
 800a258:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800a25a:	2300      	movs	r3, #0
 800a25c:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800a25e:	4b0b      	ldr	r3, [pc, #44]	; (800a28c <HAL_FLASH_Unlock+0x38>)
 800a260:	691b      	ldr	r3, [r3, #16]
 800a262:	2b00      	cmp	r3, #0
 800a264:	da0b      	bge.n	800a27e <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800a266:	4b09      	ldr	r3, [pc, #36]	; (800a28c <HAL_FLASH_Unlock+0x38>)
 800a268:	4a09      	ldr	r2, [pc, #36]	; (800a290 <HAL_FLASH_Unlock+0x3c>)
 800a26a:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800a26c:	4b07      	ldr	r3, [pc, #28]	; (800a28c <HAL_FLASH_Unlock+0x38>)
 800a26e:	4a09      	ldr	r2, [pc, #36]	; (800a294 <HAL_FLASH_Unlock+0x40>)
 800a270:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800a272:	4b06      	ldr	r3, [pc, #24]	; (800a28c <HAL_FLASH_Unlock+0x38>)
 800a274:	691b      	ldr	r3, [r3, #16]
 800a276:	2b00      	cmp	r3, #0
 800a278:	da01      	bge.n	800a27e <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 800a27a:	2301      	movs	r3, #1
 800a27c:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 800a27e:	79fb      	ldrb	r3, [r7, #7]
}
 800a280:	4618      	mov	r0, r3
 800a282:	370c      	adds	r7, #12
 800a284:	46bd      	mov	sp, r7
 800a286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a28a:	4770      	bx	lr
 800a28c:	40023c00 	.word	0x40023c00
 800a290:	45670123 	.word	0x45670123
 800a294:	cdef89ab 	.word	0xcdef89ab

0800a298 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 800a298:	b480      	push	{r7}
 800a29a:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 800a29c:	4b05      	ldr	r3, [pc, #20]	; (800a2b4 <HAL_FLASH_Lock+0x1c>)
 800a29e:	691b      	ldr	r3, [r3, #16]
 800a2a0:	4a04      	ldr	r2, [pc, #16]	; (800a2b4 <HAL_FLASH_Lock+0x1c>)
 800a2a2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a2a6:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 800a2a8:	2300      	movs	r3, #0
}
 800a2aa:	4618      	mov	r0, r3
 800a2ac:	46bd      	mov	sp, r7
 800a2ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2b2:	4770      	bx	lr
 800a2b4:	40023c00 	.word	0x40023c00

0800a2b8 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 800a2b8:	b580      	push	{r7, lr}
 800a2ba:	b084      	sub	sp, #16
 800a2bc:	af00      	add	r7, sp, #0
 800a2be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800a2c0:	2300      	movs	r3, #0
 800a2c2:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800a2c4:	4b1a      	ldr	r3, [pc, #104]	; (800a330 <FLASH_WaitForLastOperation+0x78>)
 800a2c6:	2200      	movs	r2, #0
 800a2c8:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 800a2ca:	f7ff f99b 	bl	8009604 <HAL_GetTick>
 800a2ce:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 800a2d0:	e010      	b.n	800a2f4 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a2d8:	d00c      	beq.n	800a2f4 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	d007      	beq.n	800a2f0 <FLASH_WaitForLastOperation+0x38>
 800a2e0:	f7ff f990 	bl	8009604 <HAL_GetTick>
 800a2e4:	4602      	mov	r2, r0
 800a2e6:	68fb      	ldr	r3, [r7, #12]
 800a2e8:	1ad3      	subs	r3, r2, r3
 800a2ea:	687a      	ldr	r2, [r7, #4]
 800a2ec:	429a      	cmp	r2, r3
 800a2ee:	d201      	bcs.n	800a2f4 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 800a2f0:	2303      	movs	r3, #3
 800a2f2:	e019      	b.n	800a328 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 800a2f4:	4b0f      	ldr	r3, [pc, #60]	; (800a334 <FLASH_WaitForLastOperation+0x7c>)
 800a2f6:	68db      	ldr	r3, [r3, #12]
 800a2f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	d1e8      	bne.n	800a2d2 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 800a300:	4b0c      	ldr	r3, [pc, #48]	; (800a334 <FLASH_WaitForLastOperation+0x7c>)
 800a302:	68db      	ldr	r3, [r3, #12]
 800a304:	f003 0301 	and.w	r3, r3, #1
 800a308:	2b00      	cmp	r3, #0
 800a30a:	d002      	beq.n	800a312 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800a30c:	4b09      	ldr	r3, [pc, #36]	; (800a334 <FLASH_WaitForLastOperation+0x7c>)
 800a30e:	2201      	movs	r2, #1
 800a310:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 800a312:	4b08      	ldr	r3, [pc, #32]	; (800a334 <FLASH_WaitForLastOperation+0x7c>)
 800a314:	68db      	ldr	r3, [r3, #12]
 800a316:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	d003      	beq.n	800a326 <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 800a31e:	f000 f8a5 	bl	800a46c <FLASH_SetErrorCode>
    return HAL_ERROR;
 800a322:	2301      	movs	r3, #1
 800a324:	e000      	b.n	800a328 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 800a326:	2300      	movs	r3, #0
  
}  
 800a328:	4618      	mov	r0, r3
 800a32a:	3710      	adds	r7, #16
 800a32c:	46bd      	mov	sp, r7
 800a32e:	bd80      	pop	{r7, pc}
 800a330:	2000041c 	.word	0x2000041c
 800a334:	40023c00 	.word	0x40023c00

0800a338 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 800a338:	b480      	push	{r7}
 800a33a:	b085      	sub	sp, #20
 800a33c:	af00      	add	r7, sp, #0
 800a33e:	60f8      	str	r0, [r7, #12]
 800a340:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800a344:	4b14      	ldr	r3, [pc, #80]	; (800a398 <FLASH_Program_DoubleWord+0x60>)
 800a346:	691b      	ldr	r3, [r3, #16]
 800a348:	4a13      	ldr	r2, [pc, #76]	; (800a398 <FLASH_Program_DoubleWord+0x60>)
 800a34a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a34e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 800a350:	4b11      	ldr	r3, [pc, #68]	; (800a398 <FLASH_Program_DoubleWord+0x60>)
 800a352:	691b      	ldr	r3, [r3, #16]
 800a354:	4a10      	ldr	r2, [pc, #64]	; (800a398 <FLASH_Program_DoubleWord+0x60>)
 800a356:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800a35a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800a35c:	4b0e      	ldr	r3, [pc, #56]	; (800a398 <FLASH_Program_DoubleWord+0x60>)
 800a35e:	691b      	ldr	r3, [r3, #16]
 800a360:	4a0d      	ldr	r2, [pc, #52]	; (800a398 <FLASH_Program_DoubleWord+0x60>)
 800a362:	f043 0301 	orr.w	r3, r3, #1
 800a366:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	683a      	ldr	r2, [r7, #0]
 800a36c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 800a36e:	f3bf 8f6f 	isb	sy
}
 800a372:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 800a374:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a378:	f04f 0200 	mov.w	r2, #0
 800a37c:	f04f 0300 	mov.w	r3, #0
 800a380:	000a      	movs	r2, r1
 800a382:	2300      	movs	r3, #0
 800a384:	68f9      	ldr	r1, [r7, #12]
 800a386:	3104      	adds	r1, #4
 800a388:	4613      	mov	r3, r2
 800a38a:	600b      	str	r3, [r1, #0]
}
 800a38c:	bf00      	nop
 800a38e:	3714      	adds	r7, #20
 800a390:	46bd      	mov	sp, r7
 800a392:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a396:	4770      	bx	lr
 800a398:	40023c00 	.word	0x40023c00

0800a39c <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 800a39c:	b480      	push	{r7}
 800a39e:	b083      	sub	sp, #12
 800a3a0:	af00      	add	r7, sp, #0
 800a3a2:	6078      	str	r0, [r7, #4]
 800a3a4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800a3a6:	4b0d      	ldr	r3, [pc, #52]	; (800a3dc <FLASH_Program_Word+0x40>)
 800a3a8:	691b      	ldr	r3, [r3, #16]
 800a3aa:	4a0c      	ldr	r2, [pc, #48]	; (800a3dc <FLASH_Program_Word+0x40>)
 800a3ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a3b0:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 800a3b2:	4b0a      	ldr	r3, [pc, #40]	; (800a3dc <FLASH_Program_Word+0x40>)
 800a3b4:	691b      	ldr	r3, [r3, #16]
 800a3b6:	4a09      	ldr	r2, [pc, #36]	; (800a3dc <FLASH_Program_Word+0x40>)
 800a3b8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a3bc:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800a3be:	4b07      	ldr	r3, [pc, #28]	; (800a3dc <FLASH_Program_Word+0x40>)
 800a3c0:	691b      	ldr	r3, [r3, #16]
 800a3c2:	4a06      	ldr	r2, [pc, #24]	; (800a3dc <FLASH_Program_Word+0x40>)
 800a3c4:	f043 0301 	orr.w	r3, r3, #1
 800a3c8:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	683a      	ldr	r2, [r7, #0]
 800a3ce:	601a      	str	r2, [r3, #0]
}
 800a3d0:	bf00      	nop
 800a3d2:	370c      	adds	r7, #12
 800a3d4:	46bd      	mov	sp, r7
 800a3d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3da:	4770      	bx	lr
 800a3dc:	40023c00 	.word	0x40023c00

0800a3e0 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 800a3e0:	b480      	push	{r7}
 800a3e2:	b083      	sub	sp, #12
 800a3e4:	af00      	add	r7, sp, #0
 800a3e6:	6078      	str	r0, [r7, #4]
 800a3e8:	460b      	mov	r3, r1
 800a3ea:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800a3ec:	4b0d      	ldr	r3, [pc, #52]	; (800a424 <FLASH_Program_HalfWord+0x44>)
 800a3ee:	691b      	ldr	r3, [r3, #16]
 800a3f0:	4a0c      	ldr	r2, [pc, #48]	; (800a424 <FLASH_Program_HalfWord+0x44>)
 800a3f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a3f6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 800a3f8:	4b0a      	ldr	r3, [pc, #40]	; (800a424 <FLASH_Program_HalfWord+0x44>)
 800a3fa:	691b      	ldr	r3, [r3, #16]
 800a3fc:	4a09      	ldr	r2, [pc, #36]	; (800a424 <FLASH_Program_HalfWord+0x44>)
 800a3fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a402:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800a404:	4b07      	ldr	r3, [pc, #28]	; (800a424 <FLASH_Program_HalfWord+0x44>)
 800a406:	691b      	ldr	r3, [r3, #16]
 800a408:	4a06      	ldr	r2, [pc, #24]	; (800a424 <FLASH_Program_HalfWord+0x44>)
 800a40a:	f043 0301 	orr.w	r3, r3, #1
 800a40e:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	887a      	ldrh	r2, [r7, #2]
 800a414:	801a      	strh	r2, [r3, #0]
}
 800a416:	bf00      	nop
 800a418:	370c      	adds	r7, #12
 800a41a:	46bd      	mov	sp, r7
 800a41c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a420:	4770      	bx	lr
 800a422:	bf00      	nop
 800a424:	40023c00 	.word	0x40023c00

0800a428 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 800a428:	b480      	push	{r7}
 800a42a:	b083      	sub	sp, #12
 800a42c:	af00      	add	r7, sp, #0
 800a42e:	6078      	str	r0, [r7, #4]
 800a430:	460b      	mov	r3, r1
 800a432:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800a434:	4b0c      	ldr	r3, [pc, #48]	; (800a468 <FLASH_Program_Byte+0x40>)
 800a436:	691b      	ldr	r3, [r3, #16]
 800a438:	4a0b      	ldr	r2, [pc, #44]	; (800a468 <FLASH_Program_Byte+0x40>)
 800a43a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a43e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 800a440:	4b09      	ldr	r3, [pc, #36]	; (800a468 <FLASH_Program_Byte+0x40>)
 800a442:	4a09      	ldr	r2, [pc, #36]	; (800a468 <FLASH_Program_Byte+0x40>)
 800a444:	691b      	ldr	r3, [r3, #16]
 800a446:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800a448:	4b07      	ldr	r3, [pc, #28]	; (800a468 <FLASH_Program_Byte+0x40>)
 800a44a:	691b      	ldr	r3, [r3, #16]
 800a44c:	4a06      	ldr	r2, [pc, #24]	; (800a468 <FLASH_Program_Byte+0x40>)
 800a44e:	f043 0301 	orr.w	r3, r3, #1
 800a452:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	78fa      	ldrb	r2, [r7, #3]
 800a458:	701a      	strb	r2, [r3, #0]
}
 800a45a:	bf00      	nop
 800a45c:	370c      	adds	r7, #12
 800a45e:	46bd      	mov	sp, r7
 800a460:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a464:	4770      	bx	lr
 800a466:	bf00      	nop
 800a468:	40023c00 	.word	0x40023c00

0800a46c <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 800a46c:	b480      	push	{r7}
 800a46e:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 800a470:	4b2f      	ldr	r3, [pc, #188]	; (800a530 <FLASH_SetErrorCode+0xc4>)
 800a472:	68db      	ldr	r3, [r3, #12]
 800a474:	f003 0310 	and.w	r3, r3, #16
 800a478:	2b00      	cmp	r3, #0
 800a47a:	d008      	beq.n	800a48e <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800a47c:	4b2d      	ldr	r3, [pc, #180]	; (800a534 <FLASH_SetErrorCode+0xc8>)
 800a47e:	69db      	ldr	r3, [r3, #28]
 800a480:	f043 0310 	orr.w	r3, r3, #16
 800a484:	4a2b      	ldr	r2, [pc, #172]	; (800a534 <FLASH_SetErrorCode+0xc8>)
 800a486:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 800a488:	4b29      	ldr	r3, [pc, #164]	; (800a530 <FLASH_SetErrorCode+0xc4>)
 800a48a:	2210      	movs	r2, #16
 800a48c:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 800a48e:	4b28      	ldr	r3, [pc, #160]	; (800a530 <FLASH_SetErrorCode+0xc4>)
 800a490:	68db      	ldr	r3, [r3, #12]
 800a492:	f003 0320 	and.w	r3, r3, #32
 800a496:	2b00      	cmp	r3, #0
 800a498:	d008      	beq.n	800a4ac <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 800a49a:	4b26      	ldr	r3, [pc, #152]	; (800a534 <FLASH_SetErrorCode+0xc8>)
 800a49c:	69db      	ldr	r3, [r3, #28]
 800a49e:	f043 0308 	orr.w	r3, r3, #8
 800a4a2:	4a24      	ldr	r2, [pc, #144]	; (800a534 <FLASH_SetErrorCode+0xc8>)
 800a4a4:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 800a4a6:	4b22      	ldr	r3, [pc, #136]	; (800a530 <FLASH_SetErrorCode+0xc4>)
 800a4a8:	2220      	movs	r2, #32
 800a4aa:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 800a4ac:	4b20      	ldr	r3, [pc, #128]	; (800a530 <FLASH_SetErrorCode+0xc4>)
 800a4ae:	68db      	ldr	r3, [r3, #12]
 800a4b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a4b4:	2b00      	cmp	r3, #0
 800a4b6:	d008      	beq.n	800a4ca <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 800a4b8:	4b1e      	ldr	r3, [pc, #120]	; (800a534 <FLASH_SetErrorCode+0xc8>)
 800a4ba:	69db      	ldr	r3, [r3, #28]
 800a4bc:	f043 0304 	orr.w	r3, r3, #4
 800a4c0:	4a1c      	ldr	r2, [pc, #112]	; (800a534 <FLASH_SetErrorCode+0xc8>)
 800a4c2:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 800a4c4:	4b1a      	ldr	r3, [pc, #104]	; (800a530 <FLASH_SetErrorCode+0xc4>)
 800a4c6:	2240      	movs	r2, #64	; 0x40
 800a4c8:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 800a4ca:	4b19      	ldr	r3, [pc, #100]	; (800a530 <FLASH_SetErrorCode+0xc4>)
 800a4cc:	68db      	ldr	r3, [r3, #12]
 800a4ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a4d2:	2b00      	cmp	r3, #0
 800a4d4:	d008      	beq.n	800a4e8 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 800a4d6:	4b17      	ldr	r3, [pc, #92]	; (800a534 <FLASH_SetErrorCode+0xc8>)
 800a4d8:	69db      	ldr	r3, [r3, #28]
 800a4da:	f043 0302 	orr.w	r3, r3, #2
 800a4de:	4a15      	ldr	r2, [pc, #84]	; (800a534 <FLASH_SetErrorCode+0xc8>)
 800a4e0:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 800a4e2:	4b13      	ldr	r3, [pc, #76]	; (800a530 <FLASH_SetErrorCode+0xc4>)
 800a4e4:	2280      	movs	r2, #128	; 0x80
 800a4e6:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 800a4e8:	4b11      	ldr	r3, [pc, #68]	; (800a530 <FLASH_SetErrorCode+0xc4>)
 800a4ea:	68db      	ldr	r3, [r3, #12]
 800a4ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	d009      	beq.n	800a508 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 800a4f4:	4b0f      	ldr	r3, [pc, #60]	; (800a534 <FLASH_SetErrorCode+0xc8>)
 800a4f6:	69db      	ldr	r3, [r3, #28]
 800a4f8:	f043 0301 	orr.w	r3, r3, #1
 800a4fc:	4a0d      	ldr	r2, [pc, #52]	; (800a534 <FLASH_SetErrorCode+0xc8>)
 800a4fe:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 800a500:	4b0b      	ldr	r3, [pc, #44]	; (800a530 <FLASH_SetErrorCode+0xc4>)
 800a502:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a506:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 800a508:	4b09      	ldr	r3, [pc, #36]	; (800a530 <FLASH_SetErrorCode+0xc4>)
 800a50a:	68db      	ldr	r3, [r3, #12]
 800a50c:	f003 0302 	and.w	r3, r3, #2
 800a510:	2b00      	cmp	r3, #0
 800a512:	d008      	beq.n	800a526 <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 800a514:	4b07      	ldr	r3, [pc, #28]	; (800a534 <FLASH_SetErrorCode+0xc8>)
 800a516:	69db      	ldr	r3, [r3, #28]
 800a518:	f043 0320 	orr.w	r3, r3, #32
 800a51c:	4a05      	ldr	r2, [pc, #20]	; (800a534 <FLASH_SetErrorCode+0xc8>)
 800a51e:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 800a520:	4b03      	ldr	r3, [pc, #12]	; (800a530 <FLASH_SetErrorCode+0xc4>)
 800a522:	2202      	movs	r2, #2
 800a524:	60da      	str	r2, [r3, #12]
  }
}
 800a526:	bf00      	nop
 800a528:	46bd      	mov	sp, r7
 800a52a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a52e:	4770      	bx	lr
 800a530:	40023c00 	.word	0x40023c00
 800a534:	2000041c 	.word	0x2000041c

0800a538 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 800a538:	b580      	push	{r7, lr}
 800a53a:	b084      	sub	sp, #16
 800a53c:	af00      	add	r7, sp, #0
 800a53e:	6078      	str	r0, [r7, #4]
 800a540:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 800a542:	2301      	movs	r3, #1
 800a544:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 800a546:	2300      	movs	r3, #0
 800a548:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800a54a:	4b31      	ldr	r3, [pc, #196]	; (800a610 <HAL_FLASHEx_Erase+0xd8>)
 800a54c:	7e1b      	ldrb	r3, [r3, #24]
 800a54e:	2b01      	cmp	r3, #1
 800a550:	d101      	bne.n	800a556 <HAL_FLASHEx_Erase+0x1e>
 800a552:	2302      	movs	r3, #2
 800a554:	e058      	b.n	800a608 <HAL_FLASHEx_Erase+0xd0>
 800a556:	4b2e      	ldr	r3, [pc, #184]	; (800a610 <HAL_FLASHEx_Erase+0xd8>)
 800a558:	2201      	movs	r2, #1
 800a55a:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800a55c:	f24c 3050 	movw	r0, #50000	; 0xc350
 800a560:	f7ff feaa 	bl	800a2b8 <FLASH_WaitForLastOperation>
 800a564:	4603      	mov	r3, r0
 800a566:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 800a568:	7bfb      	ldrb	r3, [r7, #15]
 800a56a:	2b00      	cmp	r3, #0
 800a56c:	d148      	bne.n	800a600 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 800a56e:	683b      	ldr	r3, [r7, #0]
 800a570:	f04f 32ff 	mov.w	r2, #4294967295
 800a574:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	2b01      	cmp	r3, #1
 800a57c:	d115      	bne.n	800a5aa <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	691b      	ldr	r3, [r3, #16]
 800a582:	b2da      	uxtb	r2, r3
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	685b      	ldr	r3, [r3, #4]
 800a588:	4619      	mov	r1, r3
 800a58a:	4610      	mov	r0, r2
 800a58c:	f000 f844 	bl	800a618 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800a590:	f24c 3050 	movw	r0, #50000	; 0xc350
 800a594:	f7ff fe90 	bl	800a2b8 <FLASH_WaitForLastOperation>
 800a598:	4603      	mov	r3, r0
 800a59a:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 800a59c:	4b1d      	ldr	r3, [pc, #116]	; (800a614 <HAL_FLASHEx_Erase+0xdc>)
 800a59e:	691b      	ldr	r3, [r3, #16]
 800a5a0:	4a1c      	ldr	r2, [pc, #112]	; (800a614 <HAL_FLASHEx_Erase+0xdc>)
 800a5a2:	f023 0304 	bic.w	r3, r3, #4
 800a5a6:	6113      	str	r3, [r2, #16]
 800a5a8:	e028      	b.n	800a5fc <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	689b      	ldr	r3, [r3, #8]
 800a5ae:	60bb      	str	r3, [r7, #8]
 800a5b0:	e01c      	b.n	800a5ec <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	691b      	ldr	r3, [r3, #16]
 800a5b6:	b2db      	uxtb	r3, r3
 800a5b8:	4619      	mov	r1, r3
 800a5ba:	68b8      	ldr	r0, [r7, #8]
 800a5bc:	f000 f850 	bl	800a660 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800a5c0:	f24c 3050 	movw	r0, #50000	; 0xc350
 800a5c4:	f7ff fe78 	bl	800a2b8 <FLASH_WaitForLastOperation>
 800a5c8:	4603      	mov	r3, r0
 800a5ca:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 800a5cc:	4b11      	ldr	r3, [pc, #68]	; (800a614 <HAL_FLASHEx_Erase+0xdc>)
 800a5ce:	691b      	ldr	r3, [r3, #16]
 800a5d0:	4a10      	ldr	r2, [pc, #64]	; (800a614 <HAL_FLASHEx_Erase+0xdc>)
 800a5d2:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 800a5d6:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 800a5d8:	7bfb      	ldrb	r3, [r7, #15]
 800a5da:	2b00      	cmp	r3, #0
 800a5dc:	d003      	beq.n	800a5e6 <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 800a5de:	683b      	ldr	r3, [r7, #0]
 800a5e0:	68ba      	ldr	r2, [r7, #8]
 800a5e2:	601a      	str	r2, [r3, #0]
          break;
 800a5e4:	e00a      	b.n	800a5fc <HAL_FLASHEx_Erase+0xc4>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800a5e6:	68bb      	ldr	r3, [r7, #8]
 800a5e8:	3301      	adds	r3, #1
 800a5ea:	60bb      	str	r3, [r7, #8]
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	68da      	ldr	r2, [r3, #12]
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	689b      	ldr	r3, [r3, #8]
 800a5f4:	4413      	add	r3, r2
 800a5f6:	68ba      	ldr	r2, [r7, #8]
 800a5f8:	429a      	cmp	r2, r3
 800a5fa:	d3da      	bcc.n	800a5b2 <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 800a5fc:	f000 f878 	bl	800a6f0 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800a600:	4b03      	ldr	r3, [pc, #12]	; (800a610 <HAL_FLASHEx_Erase+0xd8>)
 800a602:	2200      	movs	r2, #0
 800a604:	761a      	strb	r2, [r3, #24]

  return status;
 800a606:	7bfb      	ldrb	r3, [r7, #15]
}
 800a608:	4618      	mov	r0, r3
 800a60a:	3710      	adds	r7, #16
 800a60c:	46bd      	mov	sp, r7
 800a60e:	bd80      	pop	{r7, pc}
 800a610:	2000041c 	.word	0x2000041c
 800a614:	40023c00 	.word	0x40023c00

0800a618 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 800a618:	b480      	push	{r7}
 800a61a:	b083      	sub	sp, #12
 800a61c:	af00      	add	r7, sp, #0
 800a61e:	4603      	mov	r3, r0
 800a620:	6039      	str	r1, [r7, #0]
 800a622:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800a624:	4b0d      	ldr	r3, [pc, #52]	; (800a65c <FLASH_MassErase+0x44>)
 800a626:	691b      	ldr	r3, [r3, #16]
 800a628:	4a0c      	ldr	r2, [pc, #48]	; (800a65c <FLASH_MassErase+0x44>)
 800a62a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a62e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 800a630:	4b0a      	ldr	r3, [pc, #40]	; (800a65c <FLASH_MassErase+0x44>)
 800a632:	691b      	ldr	r3, [r3, #16]
 800a634:	4a09      	ldr	r2, [pc, #36]	; (800a65c <FLASH_MassErase+0x44>)
 800a636:	f043 0304 	orr.w	r3, r3, #4
 800a63a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 800a63c:	4b07      	ldr	r3, [pc, #28]	; (800a65c <FLASH_MassErase+0x44>)
 800a63e:	691a      	ldr	r2, [r3, #16]
 800a640:	79fb      	ldrb	r3, [r7, #7]
 800a642:	021b      	lsls	r3, r3, #8
 800a644:	4313      	orrs	r3, r2
 800a646:	4a05      	ldr	r2, [pc, #20]	; (800a65c <FLASH_MassErase+0x44>)
 800a648:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a64c:	6113      	str	r3, [r2, #16]
}
 800a64e:	bf00      	nop
 800a650:	370c      	adds	r7, #12
 800a652:	46bd      	mov	sp, r7
 800a654:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a658:	4770      	bx	lr
 800a65a:	bf00      	nop
 800a65c:	40023c00 	.word	0x40023c00

0800a660 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 800a660:	b480      	push	{r7}
 800a662:	b085      	sub	sp, #20
 800a664:	af00      	add	r7, sp, #0
 800a666:	6078      	str	r0, [r7, #4]
 800a668:	460b      	mov	r3, r1
 800a66a:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 800a66c:	2300      	movs	r3, #0
 800a66e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 800a670:	78fb      	ldrb	r3, [r7, #3]
 800a672:	2b00      	cmp	r3, #0
 800a674:	d102      	bne.n	800a67c <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 800a676:	2300      	movs	r3, #0
 800a678:	60fb      	str	r3, [r7, #12]
 800a67a:	e010      	b.n	800a69e <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 800a67c:	78fb      	ldrb	r3, [r7, #3]
 800a67e:	2b01      	cmp	r3, #1
 800a680:	d103      	bne.n	800a68a <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 800a682:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a686:	60fb      	str	r3, [r7, #12]
 800a688:	e009      	b.n	800a69e <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 800a68a:	78fb      	ldrb	r3, [r7, #3]
 800a68c:	2b02      	cmp	r3, #2
 800a68e:	d103      	bne.n	800a698 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 800a690:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a694:	60fb      	str	r3, [r7, #12]
 800a696:	e002      	b.n	800a69e <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 800a698:	f44f 7340 	mov.w	r3, #768	; 0x300
 800a69c:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800a69e:	4b13      	ldr	r3, [pc, #76]	; (800a6ec <FLASH_Erase_Sector+0x8c>)
 800a6a0:	691b      	ldr	r3, [r3, #16]
 800a6a2:	4a12      	ldr	r2, [pc, #72]	; (800a6ec <FLASH_Erase_Sector+0x8c>)
 800a6a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a6a8:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 800a6aa:	4b10      	ldr	r3, [pc, #64]	; (800a6ec <FLASH_Erase_Sector+0x8c>)
 800a6ac:	691a      	ldr	r2, [r3, #16]
 800a6ae:	490f      	ldr	r1, [pc, #60]	; (800a6ec <FLASH_Erase_Sector+0x8c>)
 800a6b0:	68fb      	ldr	r3, [r7, #12]
 800a6b2:	4313      	orrs	r3, r2
 800a6b4:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 800a6b6:	4b0d      	ldr	r3, [pc, #52]	; (800a6ec <FLASH_Erase_Sector+0x8c>)
 800a6b8:	691b      	ldr	r3, [r3, #16]
 800a6ba:	4a0c      	ldr	r2, [pc, #48]	; (800a6ec <FLASH_Erase_Sector+0x8c>)
 800a6bc:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800a6c0:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 800a6c2:	4b0a      	ldr	r3, [pc, #40]	; (800a6ec <FLASH_Erase_Sector+0x8c>)
 800a6c4:	691a      	ldr	r2, [r3, #16]
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	00db      	lsls	r3, r3, #3
 800a6ca:	4313      	orrs	r3, r2
 800a6cc:	4a07      	ldr	r2, [pc, #28]	; (800a6ec <FLASH_Erase_Sector+0x8c>)
 800a6ce:	f043 0302 	orr.w	r3, r3, #2
 800a6d2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 800a6d4:	4b05      	ldr	r3, [pc, #20]	; (800a6ec <FLASH_Erase_Sector+0x8c>)
 800a6d6:	691b      	ldr	r3, [r3, #16]
 800a6d8:	4a04      	ldr	r2, [pc, #16]	; (800a6ec <FLASH_Erase_Sector+0x8c>)
 800a6da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a6de:	6113      	str	r3, [r2, #16]
}
 800a6e0:	bf00      	nop
 800a6e2:	3714      	adds	r7, #20
 800a6e4:	46bd      	mov	sp, r7
 800a6e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ea:	4770      	bx	lr
 800a6ec:	40023c00 	.word	0x40023c00

0800a6f0 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 800a6f0:	b480      	push	{r7}
 800a6f2:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 800a6f4:	4b20      	ldr	r3, [pc, #128]	; (800a778 <FLASH_FlushCaches+0x88>)
 800a6f6:	681b      	ldr	r3, [r3, #0]
 800a6f8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a6fc:	2b00      	cmp	r3, #0
 800a6fe:	d017      	beq.n	800a730 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 800a700:	4b1d      	ldr	r3, [pc, #116]	; (800a778 <FLASH_FlushCaches+0x88>)
 800a702:	681b      	ldr	r3, [r3, #0]
 800a704:	4a1c      	ldr	r2, [pc, #112]	; (800a778 <FLASH_FlushCaches+0x88>)
 800a706:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a70a:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 800a70c:	4b1a      	ldr	r3, [pc, #104]	; (800a778 <FLASH_FlushCaches+0x88>)
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	4a19      	ldr	r2, [pc, #100]	; (800a778 <FLASH_FlushCaches+0x88>)
 800a712:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800a716:	6013      	str	r3, [r2, #0]
 800a718:	4b17      	ldr	r3, [pc, #92]	; (800a778 <FLASH_FlushCaches+0x88>)
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	4a16      	ldr	r2, [pc, #88]	; (800a778 <FLASH_FlushCaches+0x88>)
 800a71e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a722:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800a724:	4b14      	ldr	r3, [pc, #80]	; (800a778 <FLASH_FlushCaches+0x88>)
 800a726:	681b      	ldr	r3, [r3, #0]
 800a728:	4a13      	ldr	r2, [pc, #76]	; (800a778 <FLASH_FlushCaches+0x88>)
 800a72a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a72e:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 800a730:	4b11      	ldr	r3, [pc, #68]	; (800a778 <FLASH_FlushCaches+0x88>)
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a738:	2b00      	cmp	r3, #0
 800a73a:	d017      	beq.n	800a76c <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 800a73c:	4b0e      	ldr	r3, [pc, #56]	; (800a778 <FLASH_FlushCaches+0x88>)
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	4a0d      	ldr	r2, [pc, #52]	; (800a778 <FLASH_FlushCaches+0x88>)
 800a742:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a746:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 800a748:	4b0b      	ldr	r3, [pc, #44]	; (800a778 <FLASH_FlushCaches+0x88>)
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	4a0a      	ldr	r2, [pc, #40]	; (800a778 <FLASH_FlushCaches+0x88>)
 800a74e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800a752:	6013      	str	r3, [r2, #0]
 800a754:	4b08      	ldr	r3, [pc, #32]	; (800a778 <FLASH_FlushCaches+0x88>)
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	4a07      	ldr	r2, [pc, #28]	; (800a778 <FLASH_FlushCaches+0x88>)
 800a75a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a75e:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 800a760:	4b05      	ldr	r3, [pc, #20]	; (800a778 <FLASH_FlushCaches+0x88>)
 800a762:	681b      	ldr	r3, [r3, #0]
 800a764:	4a04      	ldr	r2, [pc, #16]	; (800a778 <FLASH_FlushCaches+0x88>)
 800a766:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800a76a:	6013      	str	r3, [r2, #0]
  }
}
 800a76c:	bf00      	nop
 800a76e:	46bd      	mov	sp, r7
 800a770:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a774:	4770      	bx	lr
 800a776:	bf00      	nop
 800a778:	40023c00 	.word	0x40023c00

0800a77c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800a77c:	b480      	push	{r7}
 800a77e:	b089      	sub	sp, #36	; 0x24
 800a780:	af00      	add	r7, sp, #0
 800a782:	6078      	str	r0, [r7, #4]
 800a784:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800a786:	2300      	movs	r3, #0
 800a788:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800a78a:	2300      	movs	r3, #0
 800a78c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800a78e:	2300      	movs	r3, #0
 800a790:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800a792:	2300      	movs	r3, #0
 800a794:	61fb      	str	r3, [r7, #28]
 800a796:	e159      	b.n	800aa4c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800a798:	2201      	movs	r2, #1
 800a79a:	69fb      	ldr	r3, [r7, #28]
 800a79c:	fa02 f303 	lsl.w	r3, r2, r3
 800a7a0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800a7a2:	683b      	ldr	r3, [r7, #0]
 800a7a4:	681b      	ldr	r3, [r3, #0]
 800a7a6:	697a      	ldr	r2, [r7, #20]
 800a7a8:	4013      	ands	r3, r2
 800a7aa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800a7ac:	693a      	ldr	r2, [r7, #16]
 800a7ae:	697b      	ldr	r3, [r7, #20]
 800a7b0:	429a      	cmp	r2, r3
 800a7b2:	f040 8148 	bne.w	800aa46 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800a7b6:	683b      	ldr	r3, [r7, #0]
 800a7b8:	685b      	ldr	r3, [r3, #4]
 800a7ba:	f003 0303 	and.w	r3, r3, #3
 800a7be:	2b01      	cmp	r3, #1
 800a7c0:	d005      	beq.n	800a7ce <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800a7c2:	683b      	ldr	r3, [r7, #0]
 800a7c4:	685b      	ldr	r3, [r3, #4]
 800a7c6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800a7ca:	2b02      	cmp	r3, #2
 800a7cc:	d130      	bne.n	800a830 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	689b      	ldr	r3, [r3, #8]
 800a7d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800a7d4:	69fb      	ldr	r3, [r7, #28]
 800a7d6:	005b      	lsls	r3, r3, #1
 800a7d8:	2203      	movs	r2, #3
 800a7da:	fa02 f303 	lsl.w	r3, r2, r3
 800a7de:	43db      	mvns	r3, r3
 800a7e0:	69ba      	ldr	r2, [r7, #24]
 800a7e2:	4013      	ands	r3, r2
 800a7e4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800a7e6:	683b      	ldr	r3, [r7, #0]
 800a7e8:	68da      	ldr	r2, [r3, #12]
 800a7ea:	69fb      	ldr	r3, [r7, #28]
 800a7ec:	005b      	lsls	r3, r3, #1
 800a7ee:	fa02 f303 	lsl.w	r3, r2, r3
 800a7f2:	69ba      	ldr	r2, [r7, #24]
 800a7f4:	4313      	orrs	r3, r2
 800a7f6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	69ba      	ldr	r2, [r7, #24]
 800a7fc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	685b      	ldr	r3, [r3, #4]
 800a802:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800a804:	2201      	movs	r2, #1
 800a806:	69fb      	ldr	r3, [r7, #28]
 800a808:	fa02 f303 	lsl.w	r3, r2, r3
 800a80c:	43db      	mvns	r3, r3
 800a80e:	69ba      	ldr	r2, [r7, #24]
 800a810:	4013      	ands	r3, r2
 800a812:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800a814:	683b      	ldr	r3, [r7, #0]
 800a816:	685b      	ldr	r3, [r3, #4]
 800a818:	091b      	lsrs	r3, r3, #4
 800a81a:	f003 0201 	and.w	r2, r3, #1
 800a81e:	69fb      	ldr	r3, [r7, #28]
 800a820:	fa02 f303 	lsl.w	r3, r2, r3
 800a824:	69ba      	ldr	r2, [r7, #24]
 800a826:	4313      	orrs	r3, r2
 800a828:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	69ba      	ldr	r2, [r7, #24]
 800a82e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800a830:	683b      	ldr	r3, [r7, #0]
 800a832:	685b      	ldr	r3, [r3, #4]
 800a834:	f003 0303 	and.w	r3, r3, #3
 800a838:	2b03      	cmp	r3, #3
 800a83a:	d017      	beq.n	800a86c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	68db      	ldr	r3, [r3, #12]
 800a840:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800a842:	69fb      	ldr	r3, [r7, #28]
 800a844:	005b      	lsls	r3, r3, #1
 800a846:	2203      	movs	r2, #3
 800a848:	fa02 f303 	lsl.w	r3, r2, r3
 800a84c:	43db      	mvns	r3, r3
 800a84e:	69ba      	ldr	r2, [r7, #24]
 800a850:	4013      	ands	r3, r2
 800a852:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800a854:	683b      	ldr	r3, [r7, #0]
 800a856:	689a      	ldr	r2, [r3, #8]
 800a858:	69fb      	ldr	r3, [r7, #28]
 800a85a:	005b      	lsls	r3, r3, #1
 800a85c:	fa02 f303 	lsl.w	r3, r2, r3
 800a860:	69ba      	ldr	r2, [r7, #24]
 800a862:	4313      	orrs	r3, r2
 800a864:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	69ba      	ldr	r2, [r7, #24]
 800a86a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800a86c:	683b      	ldr	r3, [r7, #0]
 800a86e:	685b      	ldr	r3, [r3, #4]
 800a870:	f003 0303 	and.w	r3, r3, #3
 800a874:	2b02      	cmp	r3, #2
 800a876:	d123      	bne.n	800a8c0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800a878:	69fb      	ldr	r3, [r7, #28]
 800a87a:	08da      	lsrs	r2, r3, #3
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	3208      	adds	r2, #8
 800a880:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a884:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800a886:	69fb      	ldr	r3, [r7, #28]
 800a888:	f003 0307 	and.w	r3, r3, #7
 800a88c:	009b      	lsls	r3, r3, #2
 800a88e:	220f      	movs	r2, #15
 800a890:	fa02 f303 	lsl.w	r3, r2, r3
 800a894:	43db      	mvns	r3, r3
 800a896:	69ba      	ldr	r2, [r7, #24]
 800a898:	4013      	ands	r3, r2
 800a89a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800a89c:	683b      	ldr	r3, [r7, #0]
 800a89e:	691a      	ldr	r2, [r3, #16]
 800a8a0:	69fb      	ldr	r3, [r7, #28]
 800a8a2:	f003 0307 	and.w	r3, r3, #7
 800a8a6:	009b      	lsls	r3, r3, #2
 800a8a8:	fa02 f303 	lsl.w	r3, r2, r3
 800a8ac:	69ba      	ldr	r2, [r7, #24]
 800a8ae:	4313      	orrs	r3, r2
 800a8b0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800a8b2:	69fb      	ldr	r3, [r7, #28]
 800a8b4:	08da      	lsrs	r2, r3, #3
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	3208      	adds	r2, #8
 800a8ba:	69b9      	ldr	r1, [r7, #24]
 800a8bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800a8c6:	69fb      	ldr	r3, [r7, #28]
 800a8c8:	005b      	lsls	r3, r3, #1
 800a8ca:	2203      	movs	r2, #3
 800a8cc:	fa02 f303 	lsl.w	r3, r2, r3
 800a8d0:	43db      	mvns	r3, r3
 800a8d2:	69ba      	ldr	r2, [r7, #24]
 800a8d4:	4013      	ands	r3, r2
 800a8d6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800a8d8:	683b      	ldr	r3, [r7, #0]
 800a8da:	685b      	ldr	r3, [r3, #4]
 800a8dc:	f003 0203 	and.w	r2, r3, #3
 800a8e0:	69fb      	ldr	r3, [r7, #28]
 800a8e2:	005b      	lsls	r3, r3, #1
 800a8e4:	fa02 f303 	lsl.w	r3, r2, r3
 800a8e8:	69ba      	ldr	r2, [r7, #24]
 800a8ea:	4313      	orrs	r3, r2
 800a8ec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	69ba      	ldr	r2, [r7, #24]
 800a8f2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800a8f4:	683b      	ldr	r3, [r7, #0]
 800a8f6:	685b      	ldr	r3, [r3, #4]
 800a8f8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	f000 80a2 	beq.w	800aa46 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a902:	2300      	movs	r3, #0
 800a904:	60fb      	str	r3, [r7, #12]
 800a906:	4b57      	ldr	r3, [pc, #348]	; (800aa64 <HAL_GPIO_Init+0x2e8>)
 800a908:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a90a:	4a56      	ldr	r2, [pc, #344]	; (800aa64 <HAL_GPIO_Init+0x2e8>)
 800a90c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a910:	6453      	str	r3, [r2, #68]	; 0x44
 800a912:	4b54      	ldr	r3, [pc, #336]	; (800aa64 <HAL_GPIO_Init+0x2e8>)
 800a914:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a916:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a91a:	60fb      	str	r3, [r7, #12]
 800a91c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800a91e:	4a52      	ldr	r2, [pc, #328]	; (800aa68 <HAL_GPIO_Init+0x2ec>)
 800a920:	69fb      	ldr	r3, [r7, #28]
 800a922:	089b      	lsrs	r3, r3, #2
 800a924:	3302      	adds	r3, #2
 800a926:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a92a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800a92c:	69fb      	ldr	r3, [r7, #28]
 800a92e:	f003 0303 	and.w	r3, r3, #3
 800a932:	009b      	lsls	r3, r3, #2
 800a934:	220f      	movs	r2, #15
 800a936:	fa02 f303 	lsl.w	r3, r2, r3
 800a93a:	43db      	mvns	r3, r3
 800a93c:	69ba      	ldr	r2, [r7, #24]
 800a93e:	4013      	ands	r3, r2
 800a940:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	4a49      	ldr	r2, [pc, #292]	; (800aa6c <HAL_GPIO_Init+0x2f0>)
 800a946:	4293      	cmp	r3, r2
 800a948:	d019      	beq.n	800a97e <HAL_GPIO_Init+0x202>
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	4a48      	ldr	r2, [pc, #288]	; (800aa70 <HAL_GPIO_Init+0x2f4>)
 800a94e:	4293      	cmp	r3, r2
 800a950:	d013      	beq.n	800a97a <HAL_GPIO_Init+0x1fe>
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	4a47      	ldr	r2, [pc, #284]	; (800aa74 <HAL_GPIO_Init+0x2f8>)
 800a956:	4293      	cmp	r3, r2
 800a958:	d00d      	beq.n	800a976 <HAL_GPIO_Init+0x1fa>
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	4a46      	ldr	r2, [pc, #280]	; (800aa78 <HAL_GPIO_Init+0x2fc>)
 800a95e:	4293      	cmp	r3, r2
 800a960:	d007      	beq.n	800a972 <HAL_GPIO_Init+0x1f6>
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	4a45      	ldr	r2, [pc, #276]	; (800aa7c <HAL_GPIO_Init+0x300>)
 800a966:	4293      	cmp	r3, r2
 800a968:	d101      	bne.n	800a96e <HAL_GPIO_Init+0x1f2>
 800a96a:	2304      	movs	r3, #4
 800a96c:	e008      	b.n	800a980 <HAL_GPIO_Init+0x204>
 800a96e:	2307      	movs	r3, #7
 800a970:	e006      	b.n	800a980 <HAL_GPIO_Init+0x204>
 800a972:	2303      	movs	r3, #3
 800a974:	e004      	b.n	800a980 <HAL_GPIO_Init+0x204>
 800a976:	2302      	movs	r3, #2
 800a978:	e002      	b.n	800a980 <HAL_GPIO_Init+0x204>
 800a97a:	2301      	movs	r3, #1
 800a97c:	e000      	b.n	800a980 <HAL_GPIO_Init+0x204>
 800a97e:	2300      	movs	r3, #0
 800a980:	69fa      	ldr	r2, [r7, #28]
 800a982:	f002 0203 	and.w	r2, r2, #3
 800a986:	0092      	lsls	r2, r2, #2
 800a988:	4093      	lsls	r3, r2
 800a98a:	69ba      	ldr	r2, [r7, #24]
 800a98c:	4313      	orrs	r3, r2
 800a98e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800a990:	4935      	ldr	r1, [pc, #212]	; (800aa68 <HAL_GPIO_Init+0x2ec>)
 800a992:	69fb      	ldr	r3, [r7, #28]
 800a994:	089b      	lsrs	r3, r3, #2
 800a996:	3302      	adds	r3, #2
 800a998:	69ba      	ldr	r2, [r7, #24]
 800a99a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800a99e:	4b38      	ldr	r3, [pc, #224]	; (800aa80 <HAL_GPIO_Init+0x304>)
 800a9a0:	681b      	ldr	r3, [r3, #0]
 800a9a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800a9a4:	693b      	ldr	r3, [r7, #16]
 800a9a6:	43db      	mvns	r3, r3
 800a9a8:	69ba      	ldr	r2, [r7, #24]
 800a9aa:	4013      	ands	r3, r2
 800a9ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800a9ae:	683b      	ldr	r3, [r7, #0]
 800a9b0:	685b      	ldr	r3, [r3, #4]
 800a9b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a9b6:	2b00      	cmp	r3, #0
 800a9b8:	d003      	beq.n	800a9c2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800a9ba:	69ba      	ldr	r2, [r7, #24]
 800a9bc:	693b      	ldr	r3, [r7, #16]
 800a9be:	4313      	orrs	r3, r2
 800a9c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800a9c2:	4a2f      	ldr	r2, [pc, #188]	; (800aa80 <HAL_GPIO_Init+0x304>)
 800a9c4:	69bb      	ldr	r3, [r7, #24]
 800a9c6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800a9c8:	4b2d      	ldr	r3, [pc, #180]	; (800aa80 <HAL_GPIO_Init+0x304>)
 800a9ca:	685b      	ldr	r3, [r3, #4]
 800a9cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800a9ce:	693b      	ldr	r3, [r7, #16]
 800a9d0:	43db      	mvns	r3, r3
 800a9d2:	69ba      	ldr	r2, [r7, #24]
 800a9d4:	4013      	ands	r3, r2
 800a9d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800a9d8:	683b      	ldr	r3, [r7, #0]
 800a9da:	685b      	ldr	r3, [r3, #4]
 800a9dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a9e0:	2b00      	cmp	r3, #0
 800a9e2:	d003      	beq.n	800a9ec <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800a9e4:	69ba      	ldr	r2, [r7, #24]
 800a9e6:	693b      	ldr	r3, [r7, #16]
 800a9e8:	4313      	orrs	r3, r2
 800a9ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800a9ec:	4a24      	ldr	r2, [pc, #144]	; (800aa80 <HAL_GPIO_Init+0x304>)
 800a9ee:	69bb      	ldr	r3, [r7, #24]
 800a9f0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800a9f2:	4b23      	ldr	r3, [pc, #140]	; (800aa80 <HAL_GPIO_Init+0x304>)
 800a9f4:	689b      	ldr	r3, [r3, #8]
 800a9f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800a9f8:	693b      	ldr	r3, [r7, #16]
 800a9fa:	43db      	mvns	r3, r3
 800a9fc:	69ba      	ldr	r2, [r7, #24]
 800a9fe:	4013      	ands	r3, r2
 800aa00:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800aa02:	683b      	ldr	r3, [r7, #0]
 800aa04:	685b      	ldr	r3, [r3, #4]
 800aa06:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800aa0a:	2b00      	cmp	r3, #0
 800aa0c:	d003      	beq.n	800aa16 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800aa0e:	69ba      	ldr	r2, [r7, #24]
 800aa10:	693b      	ldr	r3, [r7, #16]
 800aa12:	4313      	orrs	r3, r2
 800aa14:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800aa16:	4a1a      	ldr	r2, [pc, #104]	; (800aa80 <HAL_GPIO_Init+0x304>)
 800aa18:	69bb      	ldr	r3, [r7, #24]
 800aa1a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800aa1c:	4b18      	ldr	r3, [pc, #96]	; (800aa80 <HAL_GPIO_Init+0x304>)
 800aa1e:	68db      	ldr	r3, [r3, #12]
 800aa20:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800aa22:	693b      	ldr	r3, [r7, #16]
 800aa24:	43db      	mvns	r3, r3
 800aa26:	69ba      	ldr	r2, [r7, #24]
 800aa28:	4013      	ands	r3, r2
 800aa2a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800aa2c:	683b      	ldr	r3, [r7, #0]
 800aa2e:	685b      	ldr	r3, [r3, #4]
 800aa30:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800aa34:	2b00      	cmp	r3, #0
 800aa36:	d003      	beq.n	800aa40 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800aa38:	69ba      	ldr	r2, [r7, #24]
 800aa3a:	693b      	ldr	r3, [r7, #16]
 800aa3c:	4313      	orrs	r3, r2
 800aa3e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800aa40:	4a0f      	ldr	r2, [pc, #60]	; (800aa80 <HAL_GPIO_Init+0x304>)
 800aa42:	69bb      	ldr	r3, [r7, #24]
 800aa44:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800aa46:	69fb      	ldr	r3, [r7, #28]
 800aa48:	3301      	adds	r3, #1
 800aa4a:	61fb      	str	r3, [r7, #28]
 800aa4c:	69fb      	ldr	r3, [r7, #28]
 800aa4e:	2b0f      	cmp	r3, #15
 800aa50:	f67f aea2 	bls.w	800a798 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800aa54:	bf00      	nop
 800aa56:	bf00      	nop
 800aa58:	3724      	adds	r7, #36	; 0x24
 800aa5a:	46bd      	mov	sp, r7
 800aa5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa60:	4770      	bx	lr
 800aa62:	bf00      	nop
 800aa64:	40023800 	.word	0x40023800
 800aa68:	40013800 	.word	0x40013800
 800aa6c:	40020000 	.word	0x40020000
 800aa70:	40020400 	.word	0x40020400
 800aa74:	40020800 	.word	0x40020800
 800aa78:	40020c00 	.word	0x40020c00
 800aa7c:	40021000 	.word	0x40021000
 800aa80:	40013c00 	.word	0x40013c00

0800aa84 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800aa84:	b480      	push	{r7}
 800aa86:	b087      	sub	sp, #28
 800aa88:	af00      	add	r7, sp, #0
 800aa8a:	6078      	str	r0, [r7, #4]
 800aa8c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800aa8e:	2300      	movs	r3, #0
 800aa90:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 800aa92:	2300      	movs	r3, #0
 800aa94:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 800aa96:	2300      	movs	r3, #0
 800aa98:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800aa9a:	2300      	movs	r3, #0
 800aa9c:	617b      	str	r3, [r7, #20]
 800aa9e:	e0bb      	b.n	800ac18 <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800aaa0:	2201      	movs	r2, #1
 800aaa2:	697b      	ldr	r3, [r7, #20]
 800aaa4:	fa02 f303 	lsl.w	r3, r2, r3
 800aaa8:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 800aaaa:	683a      	ldr	r2, [r7, #0]
 800aaac:	693b      	ldr	r3, [r7, #16]
 800aaae:	4013      	ands	r3, r2
 800aab0:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800aab2:	68fa      	ldr	r2, [r7, #12]
 800aab4:	693b      	ldr	r3, [r7, #16]
 800aab6:	429a      	cmp	r2, r3
 800aab8:	f040 80ab 	bne.w	800ac12 <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 800aabc:	4a5c      	ldr	r2, [pc, #368]	; (800ac30 <HAL_GPIO_DeInit+0x1ac>)
 800aabe:	697b      	ldr	r3, [r7, #20]
 800aac0:	089b      	lsrs	r3, r3, #2
 800aac2:	3302      	adds	r3, #2
 800aac4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800aac8:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 800aaca:	697b      	ldr	r3, [r7, #20]
 800aacc:	f003 0303 	and.w	r3, r3, #3
 800aad0:	009b      	lsls	r3, r3, #2
 800aad2:	220f      	movs	r2, #15
 800aad4:	fa02 f303 	lsl.w	r3, r2, r3
 800aad8:	68ba      	ldr	r2, [r7, #8]
 800aada:	4013      	ands	r3, r2
 800aadc:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	4a54      	ldr	r2, [pc, #336]	; (800ac34 <HAL_GPIO_DeInit+0x1b0>)
 800aae2:	4293      	cmp	r3, r2
 800aae4:	d019      	beq.n	800ab1a <HAL_GPIO_DeInit+0x96>
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	4a53      	ldr	r2, [pc, #332]	; (800ac38 <HAL_GPIO_DeInit+0x1b4>)
 800aaea:	4293      	cmp	r3, r2
 800aaec:	d013      	beq.n	800ab16 <HAL_GPIO_DeInit+0x92>
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	4a52      	ldr	r2, [pc, #328]	; (800ac3c <HAL_GPIO_DeInit+0x1b8>)
 800aaf2:	4293      	cmp	r3, r2
 800aaf4:	d00d      	beq.n	800ab12 <HAL_GPIO_DeInit+0x8e>
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	4a51      	ldr	r2, [pc, #324]	; (800ac40 <HAL_GPIO_DeInit+0x1bc>)
 800aafa:	4293      	cmp	r3, r2
 800aafc:	d007      	beq.n	800ab0e <HAL_GPIO_DeInit+0x8a>
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	4a50      	ldr	r2, [pc, #320]	; (800ac44 <HAL_GPIO_DeInit+0x1c0>)
 800ab02:	4293      	cmp	r3, r2
 800ab04:	d101      	bne.n	800ab0a <HAL_GPIO_DeInit+0x86>
 800ab06:	2304      	movs	r3, #4
 800ab08:	e008      	b.n	800ab1c <HAL_GPIO_DeInit+0x98>
 800ab0a:	2307      	movs	r3, #7
 800ab0c:	e006      	b.n	800ab1c <HAL_GPIO_DeInit+0x98>
 800ab0e:	2303      	movs	r3, #3
 800ab10:	e004      	b.n	800ab1c <HAL_GPIO_DeInit+0x98>
 800ab12:	2302      	movs	r3, #2
 800ab14:	e002      	b.n	800ab1c <HAL_GPIO_DeInit+0x98>
 800ab16:	2301      	movs	r3, #1
 800ab18:	e000      	b.n	800ab1c <HAL_GPIO_DeInit+0x98>
 800ab1a:	2300      	movs	r3, #0
 800ab1c:	697a      	ldr	r2, [r7, #20]
 800ab1e:	f002 0203 	and.w	r2, r2, #3
 800ab22:	0092      	lsls	r2, r2, #2
 800ab24:	4093      	lsls	r3, r2
 800ab26:	68ba      	ldr	r2, [r7, #8]
 800ab28:	429a      	cmp	r2, r3
 800ab2a:	d132      	bne.n	800ab92 <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 800ab2c:	4b46      	ldr	r3, [pc, #280]	; (800ac48 <HAL_GPIO_DeInit+0x1c4>)
 800ab2e:	681a      	ldr	r2, [r3, #0]
 800ab30:	68fb      	ldr	r3, [r7, #12]
 800ab32:	43db      	mvns	r3, r3
 800ab34:	4944      	ldr	r1, [pc, #272]	; (800ac48 <HAL_GPIO_DeInit+0x1c4>)
 800ab36:	4013      	ands	r3, r2
 800ab38:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800ab3a:	4b43      	ldr	r3, [pc, #268]	; (800ac48 <HAL_GPIO_DeInit+0x1c4>)
 800ab3c:	685a      	ldr	r2, [r3, #4]
 800ab3e:	68fb      	ldr	r3, [r7, #12]
 800ab40:	43db      	mvns	r3, r3
 800ab42:	4941      	ldr	r1, [pc, #260]	; (800ac48 <HAL_GPIO_DeInit+0x1c4>)
 800ab44:	4013      	ands	r3, r2
 800ab46:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800ab48:	4b3f      	ldr	r3, [pc, #252]	; (800ac48 <HAL_GPIO_DeInit+0x1c4>)
 800ab4a:	689a      	ldr	r2, [r3, #8]
 800ab4c:	68fb      	ldr	r3, [r7, #12]
 800ab4e:	43db      	mvns	r3, r3
 800ab50:	493d      	ldr	r1, [pc, #244]	; (800ac48 <HAL_GPIO_DeInit+0x1c4>)
 800ab52:	4013      	ands	r3, r2
 800ab54:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 800ab56:	4b3c      	ldr	r3, [pc, #240]	; (800ac48 <HAL_GPIO_DeInit+0x1c4>)
 800ab58:	68da      	ldr	r2, [r3, #12]
 800ab5a:	68fb      	ldr	r3, [r7, #12]
 800ab5c:	43db      	mvns	r3, r3
 800ab5e:	493a      	ldr	r1, [pc, #232]	; (800ac48 <HAL_GPIO_DeInit+0x1c4>)
 800ab60:	4013      	ands	r3, r2
 800ab62:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 800ab64:	697b      	ldr	r3, [r7, #20]
 800ab66:	f003 0303 	and.w	r3, r3, #3
 800ab6a:	009b      	lsls	r3, r3, #2
 800ab6c:	220f      	movs	r2, #15
 800ab6e:	fa02 f303 	lsl.w	r3, r2, r3
 800ab72:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800ab74:	4a2e      	ldr	r2, [pc, #184]	; (800ac30 <HAL_GPIO_DeInit+0x1ac>)
 800ab76:	697b      	ldr	r3, [r7, #20]
 800ab78:	089b      	lsrs	r3, r3, #2
 800ab7a:	3302      	adds	r3, #2
 800ab7c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800ab80:	68bb      	ldr	r3, [r7, #8]
 800ab82:	43da      	mvns	r2, r3
 800ab84:	482a      	ldr	r0, [pc, #168]	; (800ac30 <HAL_GPIO_DeInit+0x1ac>)
 800ab86:	697b      	ldr	r3, [r7, #20]
 800ab88:	089b      	lsrs	r3, r3, #2
 800ab8a:	400a      	ands	r2, r1
 800ab8c:	3302      	adds	r3, #2
 800ab8e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	681a      	ldr	r2, [r3, #0]
 800ab96:	697b      	ldr	r3, [r7, #20]
 800ab98:	005b      	lsls	r3, r3, #1
 800ab9a:	2103      	movs	r1, #3
 800ab9c:	fa01 f303 	lsl.w	r3, r1, r3
 800aba0:	43db      	mvns	r3, r3
 800aba2:	401a      	ands	r2, r3
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800aba8:	697b      	ldr	r3, [r7, #20]
 800abaa:	08da      	lsrs	r2, r3, #3
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	3208      	adds	r2, #8
 800abb0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800abb4:	697b      	ldr	r3, [r7, #20]
 800abb6:	f003 0307 	and.w	r3, r3, #7
 800abba:	009b      	lsls	r3, r3, #2
 800abbc:	220f      	movs	r2, #15
 800abbe:	fa02 f303 	lsl.w	r3, r2, r3
 800abc2:	43db      	mvns	r3, r3
 800abc4:	697a      	ldr	r2, [r7, #20]
 800abc6:	08d2      	lsrs	r2, r2, #3
 800abc8:	4019      	ands	r1, r3
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	3208      	adds	r2, #8
 800abce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	68da      	ldr	r2, [r3, #12]
 800abd6:	697b      	ldr	r3, [r7, #20]
 800abd8:	005b      	lsls	r3, r3, #1
 800abda:	2103      	movs	r1, #3
 800abdc:	fa01 f303 	lsl.w	r3, r1, r3
 800abe0:	43db      	mvns	r3, r3
 800abe2:	401a      	ands	r2, r3
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	685a      	ldr	r2, [r3, #4]
 800abec:	2101      	movs	r1, #1
 800abee:	697b      	ldr	r3, [r7, #20]
 800abf0:	fa01 f303 	lsl.w	r3, r1, r3
 800abf4:	43db      	mvns	r3, r3
 800abf6:	401a      	ands	r2, r3
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	689a      	ldr	r2, [r3, #8]
 800ac00:	697b      	ldr	r3, [r7, #20]
 800ac02:	005b      	lsls	r3, r3, #1
 800ac04:	2103      	movs	r1, #3
 800ac06:	fa01 f303 	lsl.w	r3, r1, r3
 800ac0a:	43db      	mvns	r3, r3
 800ac0c:	401a      	ands	r2, r3
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800ac12:	697b      	ldr	r3, [r7, #20]
 800ac14:	3301      	adds	r3, #1
 800ac16:	617b      	str	r3, [r7, #20]
 800ac18:	697b      	ldr	r3, [r7, #20]
 800ac1a:	2b0f      	cmp	r3, #15
 800ac1c:	f67f af40 	bls.w	800aaa0 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 800ac20:	bf00      	nop
 800ac22:	bf00      	nop
 800ac24:	371c      	adds	r7, #28
 800ac26:	46bd      	mov	sp, r7
 800ac28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac2c:	4770      	bx	lr
 800ac2e:	bf00      	nop
 800ac30:	40013800 	.word	0x40013800
 800ac34:	40020000 	.word	0x40020000
 800ac38:	40020400 	.word	0x40020400
 800ac3c:	40020800 	.word	0x40020800
 800ac40:	40020c00 	.word	0x40020c00
 800ac44:	40021000 	.word	0x40021000
 800ac48:	40013c00 	.word	0x40013c00

0800ac4c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800ac4c:	b480      	push	{r7}
 800ac4e:	b083      	sub	sp, #12
 800ac50:	af00      	add	r7, sp, #0
 800ac52:	6078      	str	r0, [r7, #4]
 800ac54:	460b      	mov	r3, r1
 800ac56:	807b      	strh	r3, [r7, #2]
 800ac58:	4613      	mov	r3, r2
 800ac5a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800ac5c:	787b      	ldrb	r3, [r7, #1]
 800ac5e:	2b00      	cmp	r3, #0
 800ac60:	d003      	beq.n	800ac6a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800ac62:	887a      	ldrh	r2, [r7, #2]
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800ac68:	e003      	b.n	800ac72 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800ac6a:	887b      	ldrh	r3, [r7, #2]
 800ac6c:	041a      	lsls	r2, r3, #16
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	619a      	str	r2, [r3, #24]
}
 800ac72:	bf00      	nop
 800ac74:	370c      	adds	r7, #12
 800ac76:	46bd      	mov	sp, r7
 800ac78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac7c:	4770      	bx	lr

0800ac7e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800ac7e:	b480      	push	{r7}
 800ac80:	b085      	sub	sp, #20
 800ac82:	af00      	add	r7, sp, #0
 800ac84:	6078      	str	r0, [r7, #4]
 800ac86:	460b      	mov	r3, r1
 800ac88:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	695b      	ldr	r3, [r3, #20]
 800ac8e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800ac90:	887a      	ldrh	r2, [r7, #2]
 800ac92:	68fb      	ldr	r3, [r7, #12]
 800ac94:	4013      	ands	r3, r2
 800ac96:	041a      	lsls	r2, r3, #16
 800ac98:	68fb      	ldr	r3, [r7, #12]
 800ac9a:	43d9      	mvns	r1, r3
 800ac9c:	887b      	ldrh	r3, [r7, #2]
 800ac9e:	400b      	ands	r3, r1
 800aca0:	431a      	orrs	r2, r3
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	619a      	str	r2, [r3, #24]
}
 800aca6:	bf00      	nop
 800aca8:	3714      	adds	r7, #20
 800acaa:	46bd      	mov	sp, r7
 800acac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acb0:	4770      	bx	lr

0800acb2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800acb2:	b5f0      	push	{r4, r5, r6, r7, lr}
 800acb4:	b08f      	sub	sp, #60	; 0x3c
 800acb6:	af0a      	add	r7, sp, #40	; 0x28
 800acb8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	2b00      	cmp	r3, #0
 800acbe:	d101      	bne.n	800acc4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800acc0:	2301      	movs	r3, #1
 800acc2:	e10f      	b.n	800aee4 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	681b      	ldr	r3, [r3, #0]
 800acc8:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 800acd0:	b2db      	uxtb	r3, r3
 800acd2:	2b00      	cmp	r3, #0
 800acd4:	d106      	bne.n	800ace4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	2200      	movs	r2, #0
 800acda:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800acde:	6878      	ldr	r0, [r7, #4]
 800ace0:	f006 fd3a 	bl	8011758 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	2203      	movs	r2, #3
 800ace8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800acec:	68bb      	ldr	r3, [r7, #8]
 800acee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800acf0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800acf4:	2b00      	cmp	r3, #0
 800acf6:	d102      	bne.n	800acfe <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	2200      	movs	r2, #0
 800acfc:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	681b      	ldr	r3, [r3, #0]
 800ad02:	4618      	mov	r0, r3
 800ad04:	f003 faef 	bl	800e2e6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	681b      	ldr	r3, [r3, #0]
 800ad0c:	603b      	str	r3, [r7, #0]
 800ad0e:	687e      	ldr	r6, [r7, #4]
 800ad10:	466d      	mov	r5, sp
 800ad12:	f106 0410 	add.w	r4, r6, #16
 800ad16:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ad18:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800ad1a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ad1c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800ad1e:	e894 0003 	ldmia.w	r4, {r0, r1}
 800ad22:	e885 0003 	stmia.w	r5, {r0, r1}
 800ad26:	1d33      	adds	r3, r6, #4
 800ad28:	cb0e      	ldmia	r3, {r1, r2, r3}
 800ad2a:	6838      	ldr	r0, [r7, #0]
 800ad2c:	f003 f9c6 	bl	800e0bc <USB_CoreInit>
 800ad30:	4603      	mov	r3, r0
 800ad32:	2b00      	cmp	r3, #0
 800ad34:	d005      	beq.n	800ad42 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	2202      	movs	r2, #2
 800ad3a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800ad3e:	2301      	movs	r3, #1
 800ad40:	e0d0      	b.n	800aee4 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	681b      	ldr	r3, [r3, #0]
 800ad46:	2100      	movs	r1, #0
 800ad48:	4618      	mov	r0, r3
 800ad4a:	f003 fadd 	bl	800e308 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800ad4e:	2300      	movs	r3, #0
 800ad50:	73fb      	strb	r3, [r7, #15]
 800ad52:	e04a      	b.n	800adea <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800ad54:	7bfa      	ldrb	r2, [r7, #15]
 800ad56:	6879      	ldr	r1, [r7, #4]
 800ad58:	4613      	mov	r3, r2
 800ad5a:	00db      	lsls	r3, r3, #3
 800ad5c:	1a9b      	subs	r3, r3, r2
 800ad5e:	009b      	lsls	r3, r3, #2
 800ad60:	440b      	add	r3, r1
 800ad62:	333d      	adds	r3, #61	; 0x3d
 800ad64:	2201      	movs	r2, #1
 800ad66:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800ad68:	7bfa      	ldrb	r2, [r7, #15]
 800ad6a:	6879      	ldr	r1, [r7, #4]
 800ad6c:	4613      	mov	r3, r2
 800ad6e:	00db      	lsls	r3, r3, #3
 800ad70:	1a9b      	subs	r3, r3, r2
 800ad72:	009b      	lsls	r3, r3, #2
 800ad74:	440b      	add	r3, r1
 800ad76:	333c      	adds	r3, #60	; 0x3c
 800ad78:	7bfa      	ldrb	r2, [r7, #15]
 800ad7a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800ad7c:	7bfa      	ldrb	r2, [r7, #15]
 800ad7e:	7bfb      	ldrb	r3, [r7, #15]
 800ad80:	b298      	uxth	r0, r3
 800ad82:	6879      	ldr	r1, [r7, #4]
 800ad84:	4613      	mov	r3, r2
 800ad86:	00db      	lsls	r3, r3, #3
 800ad88:	1a9b      	subs	r3, r3, r2
 800ad8a:	009b      	lsls	r3, r3, #2
 800ad8c:	440b      	add	r3, r1
 800ad8e:	3342      	adds	r3, #66	; 0x42
 800ad90:	4602      	mov	r2, r0
 800ad92:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800ad94:	7bfa      	ldrb	r2, [r7, #15]
 800ad96:	6879      	ldr	r1, [r7, #4]
 800ad98:	4613      	mov	r3, r2
 800ad9a:	00db      	lsls	r3, r3, #3
 800ad9c:	1a9b      	subs	r3, r3, r2
 800ad9e:	009b      	lsls	r3, r3, #2
 800ada0:	440b      	add	r3, r1
 800ada2:	333f      	adds	r3, #63	; 0x3f
 800ada4:	2200      	movs	r2, #0
 800ada6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800ada8:	7bfa      	ldrb	r2, [r7, #15]
 800adaa:	6879      	ldr	r1, [r7, #4]
 800adac:	4613      	mov	r3, r2
 800adae:	00db      	lsls	r3, r3, #3
 800adb0:	1a9b      	subs	r3, r3, r2
 800adb2:	009b      	lsls	r3, r3, #2
 800adb4:	440b      	add	r3, r1
 800adb6:	3344      	adds	r3, #68	; 0x44
 800adb8:	2200      	movs	r2, #0
 800adba:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800adbc:	7bfa      	ldrb	r2, [r7, #15]
 800adbe:	6879      	ldr	r1, [r7, #4]
 800adc0:	4613      	mov	r3, r2
 800adc2:	00db      	lsls	r3, r3, #3
 800adc4:	1a9b      	subs	r3, r3, r2
 800adc6:	009b      	lsls	r3, r3, #2
 800adc8:	440b      	add	r3, r1
 800adca:	3348      	adds	r3, #72	; 0x48
 800adcc:	2200      	movs	r2, #0
 800adce:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800add0:	7bfa      	ldrb	r2, [r7, #15]
 800add2:	6879      	ldr	r1, [r7, #4]
 800add4:	4613      	mov	r3, r2
 800add6:	00db      	lsls	r3, r3, #3
 800add8:	1a9b      	subs	r3, r3, r2
 800adda:	009b      	lsls	r3, r3, #2
 800addc:	440b      	add	r3, r1
 800adde:	3350      	adds	r3, #80	; 0x50
 800ade0:	2200      	movs	r2, #0
 800ade2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800ade4:	7bfb      	ldrb	r3, [r7, #15]
 800ade6:	3301      	adds	r3, #1
 800ade8:	73fb      	strb	r3, [r7, #15]
 800adea:	7bfa      	ldrb	r2, [r7, #15]
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	685b      	ldr	r3, [r3, #4]
 800adf0:	429a      	cmp	r2, r3
 800adf2:	d3af      	bcc.n	800ad54 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800adf4:	2300      	movs	r3, #0
 800adf6:	73fb      	strb	r3, [r7, #15]
 800adf8:	e044      	b.n	800ae84 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800adfa:	7bfa      	ldrb	r2, [r7, #15]
 800adfc:	6879      	ldr	r1, [r7, #4]
 800adfe:	4613      	mov	r3, r2
 800ae00:	00db      	lsls	r3, r3, #3
 800ae02:	1a9b      	subs	r3, r3, r2
 800ae04:	009b      	lsls	r3, r3, #2
 800ae06:	440b      	add	r3, r1
 800ae08:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800ae0c:	2200      	movs	r2, #0
 800ae0e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800ae10:	7bfa      	ldrb	r2, [r7, #15]
 800ae12:	6879      	ldr	r1, [r7, #4]
 800ae14:	4613      	mov	r3, r2
 800ae16:	00db      	lsls	r3, r3, #3
 800ae18:	1a9b      	subs	r3, r3, r2
 800ae1a:	009b      	lsls	r3, r3, #2
 800ae1c:	440b      	add	r3, r1
 800ae1e:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800ae22:	7bfa      	ldrb	r2, [r7, #15]
 800ae24:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800ae26:	7bfa      	ldrb	r2, [r7, #15]
 800ae28:	6879      	ldr	r1, [r7, #4]
 800ae2a:	4613      	mov	r3, r2
 800ae2c:	00db      	lsls	r3, r3, #3
 800ae2e:	1a9b      	subs	r3, r3, r2
 800ae30:	009b      	lsls	r3, r3, #2
 800ae32:	440b      	add	r3, r1
 800ae34:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800ae38:	2200      	movs	r2, #0
 800ae3a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800ae3c:	7bfa      	ldrb	r2, [r7, #15]
 800ae3e:	6879      	ldr	r1, [r7, #4]
 800ae40:	4613      	mov	r3, r2
 800ae42:	00db      	lsls	r3, r3, #3
 800ae44:	1a9b      	subs	r3, r3, r2
 800ae46:	009b      	lsls	r3, r3, #2
 800ae48:	440b      	add	r3, r1
 800ae4a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800ae4e:	2200      	movs	r2, #0
 800ae50:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800ae52:	7bfa      	ldrb	r2, [r7, #15]
 800ae54:	6879      	ldr	r1, [r7, #4]
 800ae56:	4613      	mov	r3, r2
 800ae58:	00db      	lsls	r3, r3, #3
 800ae5a:	1a9b      	subs	r3, r3, r2
 800ae5c:	009b      	lsls	r3, r3, #2
 800ae5e:	440b      	add	r3, r1
 800ae60:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800ae64:	2200      	movs	r2, #0
 800ae66:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800ae68:	7bfa      	ldrb	r2, [r7, #15]
 800ae6a:	6879      	ldr	r1, [r7, #4]
 800ae6c:	4613      	mov	r3, r2
 800ae6e:	00db      	lsls	r3, r3, #3
 800ae70:	1a9b      	subs	r3, r3, r2
 800ae72:	009b      	lsls	r3, r3, #2
 800ae74:	440b      	add	r3, r1
 800ae76:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800ae7a:	2200      	movs	r2, #0
 800ae7c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800ae7e:	7bfb      	ldrb	r3, [r7, #15]
 800ae80:	3301      	adds	r3, #1
 800ae82:	73fb      	strb	r3, [r7, #15]
 800ae84:	7bfa      	ldrb	r2, [r7, #15]
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	685b      	ldr	r3, [r3, #4]
 800ae8a:	429a      	cmp	r2, r3
 800ae8c:	d3b5      	bcc.n	800adfa <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	681b      	ldr	r3, [r3, #0]
 800ae92:	603b      	str	r3, [r7, #0]
 800ae94:	687e      	ldr	r6, [r7, #4]
 800ae96:	466d      	mov	r5, sp
 800ae98:	f106 0410 	add.w	r4, r6, #16
 800ae9c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ae9e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800aea0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800aea2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800aea4:	e894 0003 	ldmia.w	r4, {r0, r1}
 800aea8:	e885 0003 	stmia.w	r5, {r0, r1}
 800aeac:	1d33      	adds	r3, r6, #4
 800aeae:	cb0e      	ldmia	r3, {r1, r2, r3}
 800aeb0:	6838      	ldr	r0, [r7, #0]
 800aeb2:	f003 fa75 	bl	800e3a0 <USB_DevInit>
 800aeb6:	4603      	mov	r3, r0
 800aeb8:	2b00      	cmp	r3, #0
 800aeba:	d005      	beq.n	800aec8 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	2202      	movs	r2, #2
 800aec0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800aec4:	2301      	movs	r3, #1
 800aec6:	e00d      	b.n	800aee4 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	2200      	movs	r2, #0
 800aecc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	2201      	movs	r2, #1
 800aed4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	681b      	ldr	r3, [r3, #0]
 800aedc:	4618      	mov	r0, r3
 800aede:	f004 faf1 	bl	800f4c4 <USB_DevDisconnect>

  return HAL_OK;
 800aee2:	2300      	movs	r3, #0
}
 800aee4:	4618      	mov	r0, r3
 800aee6:	3714      	adds	r7, #20
 800aee8:	46bd      	mov	sp, r7
 800aeea:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800aeec <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800aeec:	b580      	push	{r7, lr}
 800aeee:	b084      	sub	sp, #16
 800aef0:	af00      	add	r7, sp, #0
 800aef2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	681b      	ldr	r3, [r3, #0]
 800aef8:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800af00:	2b01      	cmp	r3, #1
 800af02:	d101      	bne.n	800af08 <HAL_PCD_Start+0x1c>
 800af04:	2302      	movs	r3, #2
 800af06:	e020      	b.n	800af4a <HAL_PCD_Start+0x5e>
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	2201      	movs	r2, #1
 800af0c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af14:	2b01      	cmp	r3, #1
 800af16:	d109      	bne.n	800af2c <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800af1c:	2b01      	cmp	r3, #1
 800af1e:	d005      	beq.n	800af2c <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800af20:	68fb      	ldr	r3, [r7, #12]
 800af22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af24:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800af28:	68fb      	ldr	r3, [r7, #12]
 800af2a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	681b      	ldr	r3, [r3, #0]
 800af30:	4618      	mov	r0, r3
 800af32:	f003 f9c7 	bl	800e2c4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	681b      	ldr	r3, [r3, #0]
 800af3a:	4618      	mov	r0, r3
 800af3c:	f004 faa1 	bl	800f482 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	2200      	movs	r2, #0
 800af44:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800af48:	2300      	movs	r3, #0
}
 800af4a:	4618      	mov	r0, r3
 800af4c:	3710      	adds	r7, #16
 800af4e:	46bd      	mov	sp, r7
 800af50:	bd80      	pop	{r7, pc}

0800af52 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800af52:	b590      	push	{r4, r7, lr}
 800af54:	b08d      	sub	sp, #52	; 0x34
 800af56:	af00      	add	r7, sp, #0
 800af58:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	681b      	ldr	r3, [r3, #0]
 800af5e:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800af60:	6a3b      	ldr	r3, [r7, #32]
 800af62:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	681b      	ldr	r3, [r3, #0]
 800af68:	4618      	mov	r0, r3
 800af6a:	f004 fb5f 	bl	800f62c <USB_GetMode>
 800af6e:	4603      	mov	r3, r0
 800af70:	2b00      	cmp	r3, #0
 800af72:	f040 839d 	bne.w	800b6b0 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	681b      	ldr	r3, [r3, #0]
 800af7a:	4618      	mov	r0, r3
 800af7c:	f004 fac3 	bl	800f506 <USB_ReadInterrupts>
 800af80:	4603      	mov	r3, r0
 800af82:	2b00      	cmp	r3, #0
 800af84:	f000 8393 	beq.w	800b6ae <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	681b      	ldr	r3, [r3, #0]
 800af8c:	4618      	mov	r0, r3
 800af8e:	f004 faba 	bl	800f506 <USB_ReadInterrupts>
 800af92:	4603      	mov	r3, r0
 800af94:	f003 0302 	and.w	r3, r3, #2
 800af98:	2b02      	cmp	r3, #2
 800af9a:	d107      	bne.n	800afac <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	681b      	ldr	r3, [r3, #0]
 800afa0:	695a      	ldr	r2, [r3, #20]
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	681b      	ldr	r3, [r3, #0]
 800afa6:	f002 0202 	and.w	r2, r2, #2
 800afaa:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	681b      	ldr	r3, [r3, #0]
 800afb0:	4618      	mov	r0, r3
 800afb2:	f004 faa8 	bl	800f506 <USB_ReadInterrupts>
 800afb6:	4603      	mov	r3, r0
 800afb8:	f003 0310 	and.w	r3, r3, #16
 800afbc:	2b10      	cmp	r3, #16
 800afbe:	d161      	bne.n	800b084 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	681b      	ldr	r3, [r3, #0]
 800afc4:	699a      	ldr	r2, [r3, #24]
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	681b      	ldr	r3, [r3, #0]
 800afca:	f022 0210 	bic.w	r2, r2, #16
 800afce:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 800afd0:	6a3b      	ldr	r3, [r7, #32]
 800afd2:	6a1b      	ldr	r3, [r3, #32]
 800afd4:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 800afd6:	69bb      	ldr	r3, [r7, #24]
 800afd8:	f003 020f 	and.w	r2, r3, #15
 800afdc:	4613      	mov	r3, r2
 800afde:	00db      	lsls	r3, r3, #3
 800afe0:	1a9b      	subs	r3, r3, r2
 800afe2:	009b      	lsls	r3, r3, #2
 800afe4:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800afe8:	687a      	ldr	r2, [r7, #4]
 800afea:	4413      	add	r3, r2
 800afec:	3304      	adds	r3, #4
 800afee:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800aff0:	69bb      	ldr	r3, [r7, #24]
 800aff2:	0c5b      	lsrs	r3, r3, #17
 800aff4:	f003 030f 	and.w	r3, r3, #15
 800aff8:	2b02      	cmp	r3, #2
 800affa:	d124      	bne.n	800b046 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 800affc:	69ba      	ldr	r2, [r7, #24]
 800affe:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800b002:	4013      	ands	r3, r2
 800b004:	2b00      	cmp	r3, #0
 800b006:	d035      	beq.n	800b074 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800b008:	697b      	ldr	r3, [r7, #20]
 800b00a:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 800b00c:	69bb      	ldr	r3, [r7, #24]
 800b00e:	091b      	lsrs	r3, r3, #4
 800b010:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800b012:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b016:	b29b      	uxth	r3, r3
 800b018:	461a      	mov	r2, r3
 800b01a:	6a38      	ldr	r0, [r7, #32]
 800b01c:	f004 f8df 	bl	800f1de <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800b020:	697b      	ldr	r3, [r7, #20]
 800b022:	68da      	ldr	r2, [r3, #12]
 800b024:	69bb      	ldr	r3, [r7, #24]
 800b026:	091b      	lsrs	r3, r3, #4
 800b028:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b02c:	441a      	add	r2, r3
 800b02e:	697b      	ldr	r3, [r7, #20]
 800b030:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800b032:	697b      	ldr	r3, [r7, #20]
 800b034:	699a      	ldr	r2, [r3, #24]
 800b036:	69bb      	ldr	r3, [r7, #24]
 800b038:	091b      	lsrs	r3, r3, #4
 800b03a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b03e:	441a      	add	r2, r3
 800b040:	697b      	ldr	r3, [r7, #20]
 800b042:	619a      	str	r2, [r3, #24]
 800b044:	e016      	b.n	800b074 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 800b046:	69bb      	ldr	r3, [r7, #24]
 800b048:	0c5b      	lsrs	r3, r3, #17
 800b04a:	f003 030f 	and.w	r3, r3, #15
 800b04e:	2b06      	cmp	r3, #6
 800b050:	d110      	bne.n	800b074 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800b058:	2208      	movs	r2, #8
 800b05a:	4619      	mov	r1, r3
 800b05c:	6a38      	ldr	r0, [r7, #32]
 800b05e:	f004 f8be 	bl	800f1de <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800b062:	697b      	ldr	r3, [r7, #20]
 800b064:	699a      	ldr	r2, [r3, #24]
 800b066:	69bb      	ldr	r3, [r7, #24]
 800b068:	091b      	lsrs	r3, r3, #4
 800b06a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b06e:	441a      	add	r2, r3
 800b070:	697b      	ldr	r3, [r7, #20]
 800b072:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	681b      	ldr	r3, [r3, #0]
 800b078:	699a      	ldr	r2, [r3, #24]
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	681b      	ldr	r3, [r3, #0]
 800b07e:	f042 0210 	orr.w	r2, r2, #16
 800b082:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	681b      	ldr	r3, [r3, #0]
 800b088:	4618      	mov	r0, r3
 800b08a:	f004 fa3c 	bl	800f506 <USB_ReadInterrupts>
 800b08e:	4603      	mov	r3, r0
 800b090:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800b094:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800b098:	d16e      	bne.n	800b178 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 800b09a:	2300      	movs	r3, #0
 800b09c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	681b      	ldr	r3, [r3, #0]
 800b0a2:	4618      	mov	r0, r3
 800b0a4:	f004 fa42 	bl	800f52c <USB_ReadDevAllOutEpInterrupt>
 800b0a8:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800b0aa:	e062      	b.n	800b172 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 800b0ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0ae:	f003 0301 	and.w	r3, r3, #1
 800b0b2:	2b00      	cmp	r3, #0
 800b0b4:	d057      	beq.n	800b166 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	681b      	ldr	r3, [r3, #0]
 800b0ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b0bc:	b2d2      	uxtb	r2, r2
 800b0be:	4611      	mov	r1, r2
 800b0c0:	4618      	mov	r0, r3
 800b0c2:	f004 fa67 	bl	800f594 <USB_ReadDevOutEPInterrupt>
 800b0c6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800b0c8:	693b      	ldr	r3, [r7, #16]
 800b0ca:	f003 0301 	and.w	r3, r3, #1
 800b0ce:	2b00      	cmp	r3, #0
 800b0d0:	d00c      	beq.n	800b0ec <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800b0d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0d4:	015a      	lsls	r2, r3, #5
 800b0d6:	69fb      	ldr	r3, [r7, #28]
 800b0d8:	4413      	add	r3, r2
 800b0da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b0de:	461a      	mov	r2, r3
 800b0e0:	2301      	movs	r3, #1
 800b0e2:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800b0e4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b0e6:	6878      	ldr	r0, [r7, #4]
 800b0e8:	f000 fdb0 	bl	800bc4c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800b0ec:	693b      	ldr	r3, [r7, #16]
 800b0ee:	f003 0308 	and.w	r3, r3, #8
 800b0f2:	2b00      	cmp	r3, #0
 800b0f4:	d00c      	beq.n	800b110 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800b0f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0f8:	015a      	lsls	r2, r3, #5
 800b0fa:	69fb      	ldr	r3, [r7, #28]
 800b0fc:	4413      	add	r3, r2
 800b0fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b102:	461a      	mov	r2, r3
 800b104:	2308      	movs	r3, #8
 800b106:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800b108:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b10a:	6878      	ldr	r0, [r7, #4]
 800b10c:	f000 feaa 	bl	800be64 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800b110:	693b      	ldr	r3, [r7, #16]
 800b112:	f003 0310 	and.w	r3, r3, #16
 800b116:	2b00      	cmp	r3, #0
 800b118:	d008      	beq.n	800b12c <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800b11a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b11c:	015a      	lsls	r2, r3, #5
 800b11e:	69fb      	ldr	r3, [r7, #28]
 800b120:	4413      	add	r3, r2
 800b122:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b126:	461a      	mov	r2, r3
 800b128:	2310      	movs	r3, #16
 800b12a:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800b12c:	693b      	ldr	r3, [r7, #16]
 800b12e:	f003 0320 	and.w	r3, r3, #32
 800b132:	2b00      	cmp	r3, #0
 800b134:	d008      	beq.n	800b148 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800b136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b138:	015a      	lsls	r2, r3, #5
 800b13a:	69fb      	ldr	r3, [r7, #28]
 800b13c:	4413      	add	r3, r2
 800b13e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b142:	461a      	mov	r2, r3
 800b144:	2320      	movs	r3, #32
 800b146:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800b148:	693b      	ldr	r3, [r7, #16]
 800b14a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b14e:	2b00      	cmp	r3, #0
 800b150:	d009      	beq.n	800b166 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800b152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b154:	015a      	lsls	r2, r3, #5
 800b156:	69fb      	ldr	r3, [r7, #28]
 800b158:	4413      	add	r3, r2
 800b15a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b15e:	461a      	mov	r2, r3
 800b160:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b164:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800b166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b168:	3301      	adds	r3, #1
 800b16a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800b16c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b16e:	085b      	lsrs	r3, r3, #1
 800b170:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800b172:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b174:	2b00      	cmp	r3, #0
 800b176:	d199      	bne.n	800b0ac <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	681b      	ldr	r3, [r3, #0]
 800b17c:	4618      	mov	r0, r3
 800b17e:	f004 f9c2 	bl	800f506 <USB_ReadInterrupts>
 800b182:	4603      	mov	r3, r0
 800b184:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b188:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b18c:	f040 80c0 	bne.w	800b310 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	681b      	ldr	r3, [r3, #0]
 800b194:	4618      	mov	r0, r3
 800b196:	f004 f9e3 	bl	800f560 <USB_ReadDevAllInEpInterrupt>
 800b19a:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800b19c:	2300      	movs	r3, #0
 800b19e:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800b1a0:	e0b2      	b.n	800b308 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800b1a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1a4:	f003 0301 	and.w	r3, r3, #1
 800b1a8:	2b00      	cmp	r3, #0
 800b1aa:	f000 80a7 	beq.w	800b2fc <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	681b      	ldr	r3, [r3, #0]
 800b1b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b1b4:	b2d2      	uxtb	r2, r2
 800b1b6:	4611      	mov	r1, r2
 800b1b8:	4618      	mov	r0, r3
 800b1ba:	f004 fa09 	bl	800f5d0 <USB_ReadDevInEPInterrupt>
 800b1be:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800b1c0:	693b      	ldr	r3, [r7, #16]
 800b1c2:	f003 0301 	and.w	r3, r3, #1
 800b1c6:	2b00      	cmp	r3, #0
 800b1c8:	d057      	beq.n	800b27a <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800b1ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1cc:	f003 030f 	and.w	r3, r3, #15
 800b1d0:	2201      	movs	r2, #1
 800b1d2:	fa02 f303 	lsl.w	r3, r2, r3
 800b1d6:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800b1d8:	69fb      	ldr	r3, [r7, #28]
 800b1da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b1de:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b1e0:	68fb      	ldr	r3, [r7, #12]
 800b1e2:	43db      	mvns	r3, r3
 800b1e4:	69f9      	ldr	r1, [r7, #28]
 800b1e6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b1ea:	4013      	ands	r3, r2
 800b1ec:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800b1ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1f0:	015a      	lsls	r2, r3, #5
 800b1f2:	69fb      	ldr	r3, [r7, #28]
 800b1f4:	4413      	add	r3, r2
 800b1f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b1fa:	461a      	mov	r2, r3
 800b1fc:	2301      	movs	r3, #1
 800b1fe:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	691b      	ldr	r3, [r3, #16]
 800b204:	2b01      	cmp	r3, #1
 800b206:	d132      	bne.n	800b26e <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800b208:	6879      	ldr	r1, [r7, #4]
 800b20a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b20c:	4613      	mov	r3, r2
 800b20e:	00db      	lsls	r3, r3, #3
 800b210:	1a9b      	subs	r3, r3, r2
 800b212:	009b      	lsls	r3, r3, #2
 800b214:	440b      	add	r3, r1
 800b216:	3348      	adds	r3, #72	; 0x48
 800b218:	6819      	ldr	r1, [r3, #0]
 800b21a:	6878      	ldr	r0, [r7, #4]
 800b21c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b21e:	4613      	mov	r3, r2
 800b220:	00db      	lsls	r3, r3, #3
 800b222:	1a9b      	subs	r3, r3, r2
 800b224:	009b      	lsls	r3, r3, #2
 800b226:	4403      	add	r3, r0
 800b228:	3344      	adds	r3, #68	; 0x44
 800b22a:	681b      	ldr	r3, [r3, #0]
 800b22c:	4419      	add	r1, r3
 800b22e:	6878      	ldr	r0, [r7, #4]
 800b230:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b232:	4613      	mov	r3, r2
 800b234:	00db      	lsls	r3, r3, #3
 800b236:	1a9b      	subs	r3, r3, r2
 800b238:	009b      	lsls	r3, r3, #2
 800b23a:	4403      	add	r3, r0
 800b23c:	3348      	adds	r3, #72	; 0x48
 800b23e:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800b240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b242:	2b00      	cmp	r3, #0
 800b244:	d113      	bne.n	800b26e <HAL_PCD_IRQHandler+0x31c>
 800b246:	6879      	ldr	r1, [r7, #4]
 800b248:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b24a:	4613      	mov	r3, r2
 800b24c:	00db      	lsls	r3, r3, #3
 800b24e:	1a9b      	subs	r3, r3, r2
 800b250:	009b      	lsls	r3, r3, #2
 800b252:	440b      	add	r3, r1
 800b254:	3350      	adds	r3, #80	; 0x50
 800b256:	681b      	ldr	r3, [r3, #0]
 800b258:	2b00      	cmp	r3, #0
 800b25a:	d108      	bne.n	800b26e <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	6818      	ldr	r0, [r3, #0]
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800b266:	461a      	mov	r2, r3
 800b268:	2101      	movs	r1, #1
 800b26a:	f004 fa11 	bl	800f690 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800b26e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b270:	b2db      	uxtb	r3, r3
 800b272:	4619      	mov	r1, r3
 800b274:	6878      	ldr	r0, [r7, #4]
 800b276:	f006 faf0 	bl	801185a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800b27a:	693b      	ldr	r3, [r7, #16]
 800b27c:	f003 0308 	and.w	r3, r3, #8
 800b280:	2b00      	cmp	r3, #0
 800b282:	d008      	beq.n	800b296 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800b284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b286:	015a      	lsls	r2, r3, #5
 800b288:	69fb      	ldr	r3, [r7, #28]
 800b28a:	4413      	add	r3, r2
 800b28c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b290:	461a      	mov	r2, r3
 800b292:	2308      	movs	r3, #8
 800b294:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800b296:	693b      	ldr	r3, [r7, #16]
 800b298:	f003 0310 	and.w	r3, r3, #16
 800b29c:	2b00      	cmp	r3, #0
 800b29e:	d008      	beq.n	800b2b2 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800b2a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2a2:	015a      	lsls	r2, r3, #5
 800b2a4:	69fb      	ldr	r3, [r7, #28]
 800b2a6:	4413      	add	r3, r2
 800b2a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b2ac:	461a      	mov	r2, r3
 800b2ae:	2310      	movs	r3, #16
 800b2b0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800b2b2:	693b      	ldr	r3, [r7, #16]
 800b2b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b2b8:	2b00      	cmp	r3, #0
 800b2ba:	d008      	beq.n	800b2ce <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800b2bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2be:	015a      	lsls	r2, r3, #5
 800b2c0:	69fb      	ldr	r3, [r7, #28]
 800b2c2:	4413      	add	r3, r2
 800b2c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b2c8:	461a      	mov	r2, r3
 800b2ca:	2340      	movs	r3, #64	; 0x40
 800b2cc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800b2ce:	693b      	ldr	r3, [r7, #16]
 800b2d0:	f003 0302 	and.w	r3, r3, #2
 800b2d4:	2b00      	cmp	r3, #0
 800b2d6:	d008      	beq.n	800b2ea <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800b2d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2da:	015a      	lsls	r2, r3, #5
 800b2dc:	69fb      	ldr	r3, [r7, #28]
 800b2de:	4413      	add	r3, r2
 800b2e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b2e4:	461a      	mov	r2, r3
 800b2e6:	2302      	movs	r3, #2
 800b2e8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800b2ea:	693b      	ldr	r3, [r7, #16]
 800b2ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b2f0:	2b00      	cmp	r3, #0
 800b2f2:	d003      	beq.n	800b2fc <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800b2f4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b2f6:	6878      	ldr	r0, [r7, #4]
 800b2f8:	f000 fc1b 	bl	800bb32 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800b2fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2fe:	3301      	adds	r3, #1
 800b300:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800b302:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b304:	085b      	lsrs	r3, r3, #1
 800b306:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800b308:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b30a:	2b00      	cmp	r3, #0
 800b30c:	f47f af49 	bne.w	800b1a2 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	681b      	ldr	r3, [r3, #0]
 800b314:	4618      	mov	r0, r3
 800b316:	f004 f8f6 	bl	800f506 <USB_ReadInterrupts>
 800b31a:	4603      	mov	r3, r0
 800b31c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b320:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b324:	d122      	bne.n	800b36c <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800b326:	69fb      	ldr	r3, [r7, #28]
 800b328:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b32c:	685b      	ldr	r3, [r3, #4]
 800b32e:	69fa      	ldr	r2, [r7, #28]
 800b330:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b334:	f023 0301 	bic.w	r3, r3, #1
 800b338:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 800b340:	2b01      	cmp	r3, #1
 800b342:	d108      	bne.n	800b356 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	2200      	movs	r2, #0
 800b348:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800b34c:	2100      	movs	r1, #0
 800b34e:	6878      	ldr	r0, [r7, #4]
 800b350:	f000 fe26 	bl	800bfa0 <HAL_PCDEx_LPM_Callback>
 800b354:	e002      	b.n	800b35c <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800b356:	6878      	ldr	r0, [r7, #4]
 800b358:	f006 faec 	bl	8011934 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	681b      	ldr	r3, [r3, #0]
 800b360:	695a      	ldr	r2, [r3, #20]
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	681b      	ldr	r3, [r3, #0]
 800b366:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800b36a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	681b      	ldr	r3, [r3, #0]
 800b370:	4618      	mov	r0, r3
 800b372:	f004 f8c8 	bl	800f506 <USB_ReadInterrupts>
 800b376:	4603      	mov	r3, r0
 800b378:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b37c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b380:	d112      	bne.n	800b3a8 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800b382:	69fb      	ldr	r3, [r7, #28]
 800b384:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b388:	689b      	ldr	r3, [r3, #8]
 800b38a:	f003 0301 	and.w	r3, r3, #1
 800b38e:	2b01      	cmp	r3, #1
 800b390:	d102      	bne.n	800b398 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800b392:	6878      	ldr	r0, [r7, #4]
 800b394:	f006 faa8 	bl	80118e8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	681b      	ldr	r3, [r3, #0]
 800b39c:	695a      	ldr	r2, [r3, #20]
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	681b      	ldr	r3, [r3, #0]
 800b3a2:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800b3a6:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	681b      	ldr	r3, [r3, #0]
 800b3ac:	4618      	mov	r0, r3
 800b3ae:	f004 f8aa 	bl	800f506 <USB_ReadInterrupts>
 800b3b2:	4603      	mov	r3, r0
 800b3b4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800b3b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b3bc:	f040 80c7 	bne.w	800b54e <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800b3c0:	69fb      	ldr	r3, [r7, #28]
 800b3c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b3c6:	685b      	ldr	r3, [r3, #4]
 800b3c8:	69fa      	ldr	r2, [r7, #28]
 800b3ca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b3ce:	f023 0301 	bic.w	r3, r3, #1
 800b3d2:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	681b      	ldr	r3, [r3, #0]
 800b3d8:	2110      	movs	r1, #16
 800b3da:	4618      	mov	r0, r3
 800b3dc:	f003 f944 	bl	800e668 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800b3e0:	2300      	movs	r3, #0
 800b3e2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b3e4:	e056      	b.n	800b494 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800b3e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3e8:	015a      	lsls	r2, r3, #5
 800b3ea:	69fb      	ldr	r3, [r7, #28]
 800b3ec:	4413      	add	r3, r2
 800b3ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b3f2:	461a      	mov	r2, r3
 800b3f4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800b3f8:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800b3fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3fc:	015a      	lsls	r2, r3, #5
 800b3fe:	69fb      	ldr	r3, [r7, #28]
 800b400:	4413      	add	r3, r2
 800b402:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b406:	681b      	ldr	r3, [r3, #0]
 800b408:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b40a:	0151      	lsls	r1, r2, #5
 800b40c:	69fa      	ldr	r2, [r7, #28]
 800b40e:	440a      	add	r2, r1
 800b410:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b414:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b418:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800b41a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b41c:	015a      	lsls	r2, r3, #5
 800b41e:	69fb      	ldr	r3, [r7, #28]
 800b420:	4413      	add	r3, r2
 800b422:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b426:	681b      	ldr	r3, [r3, #0]
 800b428:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b42a:	0151      	lsls	r1, r2, #5
 800b42c:	69fa      	ldr	r2, [r7, #28]
 800b42e:	440a      	add	r2, r1
 800b430:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b434:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800b438:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800b43a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b43c:	015a      	lsls	r2, r3, #5
 800b43e:	69fb      	ldr	r3, [r7, #28]
 800b440:	4413      	add	r3, r2
 800b442:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b446:	461a      	mov	r2, r3
 800b448:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800b44c:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800b44e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b450:	015a      	lsls	r2, r3, #5
 800b452:	69fb      	ldr	r3, [r7, #28]
 800b454:	4413      	add	r3, r2
 800b456:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b45a:	681b      	ldr	r3, [r3, #0]
 800b45c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b45e:	0151      	lsls	r1, r2, #5
 800b460:	69fa      	ldr	r2, [r7, #28]
 800b462:	440a      	add	r2, r1
 800b464:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b468:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b46c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800b46e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b470:	015a      	lsls	r2, r3, #5
 800b472:	69fb      	ldr	r3, [r7, #28]
 800b474:	4413      	add	r3, r2
 800b476:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b47a:	681b      	ldr	r3, [r3, #0]
 800b47c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b47e:	0151      	lsls	r1, r2, #5
 800b480:	69fa      	ldr	r2, [r7, #28]
 800b482:	440a      	add	r2, r1
 800b484:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b488:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800b48c:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800b48e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b490:	3301      	adds	r3, #1
 800b492:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	685b      	ldr	r3, [r3, #4]
 800b498:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b49a:	429a      	cmp	r2, r3
 800b49c:	d3a3      	bcc.n	800b3e6 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800b49e:	69fb      	ldr	r3, [r7, #28]
 800b4a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b4a4:	69db      	ldr	r3, [r3, #28]
 800b4a6:	69fa      	ldr	r2, [r7, #28]
 800b4a8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b4ac:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800b4b0:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b4b6:	2b00      	cmp	r3, #0
 800b4b8:	d016      	beq.n	800b4e8 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800b4ba:	69fb      	ldr	r3, [r7, #28]
 800b4bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b4c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b4c4:	69fa      	ldr	r2, [r7, #28]
 800b4c6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b4ca:	f043 030b 	orr.w	r3, r3, #11
 800b4ce:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800b4d2:	69fb      	ldr	r3, [r7, #28]
 800b4d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b4d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b4da:	69fa      	ldr	r2, [r7, #28]
 800b4dc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b4e0:	f043 030b 	orr.w	r3, r3, #11
 800b4e4:	6453      	str	r3, [r2, #68]	; 0x44
 800b4e6:	e015      	b.n	800b514 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800b4e8:	69fb      	ldr	r3, [r7, #28]
 800b4ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b4ee:	695b      	ldr	r3, [r3, #20]
 800b4f0:	69fa      	ldr	r2, [r7, #28]
 800b4f2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b4f6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800b4fa:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800b4fe:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800b500:	69fb      	ldr	r3, [r7, #28]
 800b502:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b506:	691b      	ldr	r3, [r3, #16]
 800b508:	69fa      	ldr	r2, [r7, #28]
 800b50a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b50e:	f043 030b 	orr.w	r3, r3, #11
 800b512:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800b514:	69fb      	ldr	r3, [r7, #28]
 800b516:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b51a:	681b      	ldr	r3, [r3, #0]
 800b51c:	69fa      	ldr	r2, [r7, #28]
 800b51e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b522:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800b526:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	6818      	ldr	r0, [r3, #0]
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	691b      	ldr	r3, [r3, #16]
 800b530:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800b538:	461a      	mov	r2, r3
 800b53a:	f004 f8a9 	bl	800f690 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	681b      	ldr	r3, [r3, #0]
 800b542:	695a      	ldr	r2, [r3, #20]
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	681b      	ldr	r3, [r3, #0]
 800b548:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800b54c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	681b      	ldr	r3, [r3, #0]
 800b552:	4618      	mov	r0, r3
 800b554:	f003 ffd7 	bl	800f506 <USB_ReadInterrupts>
 800b558:	4603      	mov	r3, r0
 800b55a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b55e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b562:	d124      	bne.n	800b5ae <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	681b      	ldr	r3, [r3, #0]
 800b568:	4618      	mov	r0, r3
 800b56a:	f004 f86d 	bl	800f648 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	681b      	ldr	r3, [r3, #0]
 800b572:	4618      	mov	r0, r3
 800b574:	f003 f8d5 	bl	800e722 <USB_GetDevSpeed>
 800b578:	4603      	mov	r3, r0
 800b57a:	461a      	mov	r2, r3
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	681c      	ldr	r4, [r3, #0]
 800b584:	f001 f93c 	bl	800c800 <HAL_RCC_GetHCLKFreq>
 800b588:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800b58e:	b2db      	uxtb	r3, r3
 800b590:	461a      	mov	r2, r3
 800b592:	4620      	mov	r0, r4
 800b594:	f002 fdf4 	bl	800e180 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800b598:	6878      	ldr	r0, [r7, #4]
 800b59a:	f006 f986 	bl	80118aa <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	681b      	ldr	r3, [r3, #0]
 800b5a2:	695a      	ldr	r2, [r3, #20]
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	681b      	ldr	r3, [r3, #0]
 800b5a8:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800b5ac:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	681b      	ldr	r3, [r3, #0]
 800b5b2:	4618      	mov	r0, r3
 800b5b4:	f003 ffa7 	bl	800f506 <USB_ReadInterrupts>
 800b5b8:	4603      	mov	r3, r0
 800b5ba:	f003 0308 	and.w	r3, r3, #8
 800b5be:	2b08      	cmp	r3, #8
 800b5c0:	d10a      	bne.n	800b5d8 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800b5c2:	6878      	ldr	r0, [r7, #4]
 800b5c4:	f006 f963 	bl	801188e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	681b      	ldr	r3, [r3, #0]
 800b5cc:	695a      	ldr	r2, [r3, #20]
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	681b      	ldr	r3, [r3, #0]
 800b5d2:	f002 0208 	and.w	r2, r2, #8
 800b5d6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	681b      	ldr	r3, [r3, #0]
 800b5dc:	4618      	mov	r0, r3
 800b5de:	f003 ff92 	bl	800f506 <USB_ReadInterrupts>
 800b5e2:	4603      	mov	r3, r0
 800b5e4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b5e8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b5ec:	d10f      	bne.n	800b60e <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800b5ee:	2300      	movs	r3, #0
 800b5f0:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800b5f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5f4:	b2db      	uxtb	r3, r3
 800b5f6:	4619      	mov	r1, r3
 800b5f8:	6878      	ldr	r0, [r7, #4]
 800b5fa:	f006 f9bb 	bl	8011974 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	681b      	ldr	r3, [r3, #0]
 800b602:	695a      	ldr	r2, [r3, #20]
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	681b      	ldr	r3, [r3, #0]
 800b608:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800b60c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	681b      	ldr	r3, [r3, #0]
 800b612:	4618      	mov	r0, r3
 800b614:	f003 ff77 	bl	800f506 <USB_ReadInterrupts>
 800b618:	4603      	mov	r3, r0
 800b61a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b61e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b622:	d10f      	bne.n	800b644 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800b624:	2300      	movs	r3, #0
 800b626:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800b628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b62a:	b2db      	uxtb	r3, r3
 800b62c:	4619      	mov	r1, r3
 800b62e:	6878      	ldr	r0, [r7, #4]
 800b630:	f006 f98e 	bl	8011950 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	681b      	ldr	r3, [r3, #0]
 800b638:	695a      	ldr	r2, [r3, #20]
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	681b      	ldr	r3, [r3, #0]
 800b63e:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800b642:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	681b      	ldr	r3, [r3, #0]
 800b648:	4618      	mov	r0, r3
 800b64a:	f003 ff5c 	bl	800f506 <USB_ReadInterrupts>
 800b64e:	4603      	mov	r3, r0
 800b650:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800b654:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b658:	d10a      	bne.n	800b670 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800b65a:	6878      	ldr	r0, [r7, #4]
 800b65c:	f006 f99c 	bl	8011998 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	681b      	ldr	r3, [r3, #0]
 800b664:	695a      	ldr	r2, [r3, #20]
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	681b      	ldr	r3, [r3, #0]
 800b66a:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800b66e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	681b      	ldr	r3, [r3, #0]
 800b674:	4618      	mov	r0, r3
 800b676:	f003 ff46 	bl	800f506 <USB_ReadInterrupts>
 800b67a:	4603      	mov	r3, r0
 800b67c:	f003 0304 	and.w	r3, r3, #4
 800b680:	2b04      	cmp	r3, #4
 800b682:	d115      	bne.n	800b6b0 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	681b      	ldr	r3, [r3, #0]
 800b688:	685b      	ldr	r3, [r3, #4]
 800b68a:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800b68c:	69bb      	ldr	r3, [r7, #24]
 800b68e:	f003 0304 	and.w	r3, r3, #4
 800b692:	2b00      	cmp	r3, #0
 800b694:	d002      	beq.n	800b69c <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800b696:	6878      	ldr	r0, [r7, #4]
 800b698:	f006 f98c 	bl	80119b4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	681b      	ldr	r3, [r3, #0]
 800b6a0:	6859      	ldr	r1, [r3, #4]
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	681b      	ldr	r3, [r3, #0]
 800b6a6:	69ba      	ldr	r2, [r7, #24]
 800b6a8:	430a      	orrs	r2, r1
 800b6aa:	605a      	str	r2, [r3, #4]
 800b6ac:	e000      	b.n	800b6b0 <HAL_PCD_IRQHandler+0x75e>
      return;
 800b6ae:	bf00      	nop
    }
  }
}
 800b6b0:	3734      	adds	r7, #52	; 0x34
 800b6b2:	46bd      	mov	sp, r7
 800b6b4:	bd90      	pop	{r4, r7, pc}

0800b6b6 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800b6b6:	b580      	push	{r7, lr}
 800b6b8:	b082      	sub	sp, #8
 800b6ba:	af00      	add	r7, sp, #0
 800b6bc:	6078      	str	r0, [r7, #4]
 800b6be:	460b      	mov	r3, r1
 800b6c0:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800b6c8:	2b01      	cmp	r3, #1
 800b6ca:	d101      	bne.n	800b6d0 <HAL_PCD_SetAddress+0x1a>
 800b6cc:	2302      	movs	r3, #2
 800b6ce:	e013      	b.n	800b6f8 <HAL_PCD_SetAddress+0x42>
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	2201      	movs	r2, #1
 800b6d4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	78fa      	ldrb	r2, [r7, #3]
 800b6dc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	681b      	ldr	r3, [r3, #0]
 800b6e4:	78fa      	ldrb	r2, [r7, #3]
 800b6e6:	4611      	mov	r1, r2
 800b6e8:	4618      	mov	r0, r3
 800b6ea:	f003 fea4 	bl	800f436 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	2200      	movs	r2, #0
 800b6f2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800b6f6:	2300      	movs	r3, #0
}
 800b6f8:	4618      	mov	r0, r3
 800b6fa:	3708      	adds	r7, #8
 800b6fc:	46bd      	mov	sp, r7
 800b6fe:	bd80      	pop	{r7, pc}

0800b700 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800b700:	b580      	push	{r7, lr}
 800b702:	b084      	sub	sp, #16
 800b704:	af00      	add	r7, sp, #0
 800b706:	6078      	str	r0, [r7, #4]
 800b708:	4608      	mov	r0, r1
 800b70a:	4611      	mov	r1, r2
 800b70c:	461a      	mov	r2, r3
 800b70e:	4603      	mov	r3, r0
 800b710:	70fb      	strb	r3, [r7, #3]
 800b712:	460b      	mov	r3, r1
 800b714:	803b      	strh	r3, [r7, #0]
 800b716:	4613      	mov	r3, r2
 800b718:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800b71a:	2300      	movs	r3, #0
 800b71c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800b71e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b722:	2b00      	cmp	r3, #0
 800b724:	da0f      	bge.n	800b746 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800b726:	78fb      	ldrb	r3, [r7, #3]
 800b728:	f003 020f 	and.w	r2, r3, #15
 800b72c:	4613      	mov	r3, r2
 800b72e:	00db      	lsls	r3, r3, #3
 800b730:	1a9b      	subs	r3, r3, r2
 800b732:	009b      	lsls	r3, r3, #2
 800b734:	3338      	adds	r3, #56	; 0x38
 800b736:	687a      	ldr	r2, [r7, #4]
 800b738:	4413      	add	r3, r2
 800b73a:	3304      	adds	r3, #4
 800b73c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800b73e:	68fb      	ldr	r3, [r7, #12]
 800b740:	2201      	movs	r2, #1
 800b742:	705a      	strb	r2, [r3, #1]
 800b744:	e00f      	b.n	800b766 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800b746:	78fb      	ldrb	r3, [r7, #3]
 800b748:	f003 020f 	and.w	r2, r3, #15
 800b74c:	4613      	mov	r3, r2
 800b74e:	00db      	lsls	r3, r3, #3
 800b750:	1a9b      	subs	r3, r3, r2
 800b752:	009b      	lsls	r3, r3, #2
 800b754:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800b758:	687a      	ldr	r2, [r7, #4]
 800b75a:	4413      	add	r3, r2
 800b75c:	3304      	adds	r3, #4
 800b75e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800b760:	68fb      	ldr	r3, [r7, #12]
 800b762:	2200      	movs	r2, #0
 800b764:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800b766:	78fb      	ldrb	r3, [r7, #3]
 800b768:	f003 030f 	and.w	r3, r3, #15
 800b76c:	b2da      	uxtb	r2, r3
 800b76e:	68fb      	ldr	r3, [r7, #12]
 800b770:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800b772:	883a      	ldrh	r2, [r7, #0]
 800b774:	68fb      	ldr	r3, [r7, #12]
 800b776:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800b778:	68fb      	ldr	r3, [r7, #12]
 800b77a:	78ba      	ldrb	r2, [r7, #2]
 800b77c:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800b77e:	68fb      	ldr	r3, [r7, #12]
 800b780:	785b      	ldrb	r3, [r3, #1]
 800b782:	2b00      	cmp	r3, #0
 800b784:	d004      	beq.n	800b790 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800b786:	68fb      	ldr	r3, [r7, #12]
 800b788:	781b      	ldrb	r3, [r3, #0]
 800b78a:	b29a      	uxth	r2, r3
 800b78c:	68fb      	ldr	r3, [r7, #12]
 800b78e:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800b790:	78bb      	ldrb	r3, [r7, #2]
 800b792:	2b02      	cmp	r3, #2
 800b794:	d102      	bne.n	800b79c <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800b796:	68fb      	ldr	r3, [r7, #12]
 800b798:	2200      	movs	r2, #0
 800b79a:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800b7a2:	2b01      	cmp	r3, #1
 800b7a4:	d101      	bne.n	800b7aa <HAL_PCD_EP_Open+0xaa>
 800b7a6:	2302      	movs	r3, #2
 800b7a8:	e00e      	b.n	800b7c8 <HAL_PCD_EP_Open+0xc8>
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	2201      	movs	r2, #1
 800b7ae:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	681b      	ldr	r3, [r3, #0]
 800b7b6:	68f9      	ldr	r1, [r7, #12]
 800b7b8:	4618      	mov	r0, r3
 800b7ba:	f002 ffd7 	bl	800e76c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	2200      	movs	r2, #0
 800b7c2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 800b7c6:	7afb      	ldrb	r3, [r7, #11]
}
 800b7c8:	4618      	mov	r0, r3
 800b7ca:	3710      	adds	r7, #16
 800b7cc:	46bd      	mov	sp, r7
 800b7ce:	bd80      	pop	{r7, pc}

0800b7d0 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800b7d0:	b580      	push	{r7, lr}
 800b7d2:	b084      	sub	sp, #16
 800b7d4:	af00      	add	r7, sp, #0
 800b7d6:	6078      	str	r0, [r7, #4]
 800b7d8:	460b      	mov	r3, r1
 800b7da:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800b7dc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b7e0:	2b00      	cmp	r3, #0
 800b7e2:	da0f      	bge.n	800b804 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800b7e4:	78fb      	ldrb	r3, [r7, #3]
 800b7e6:	f003 020f 	and.w	r2, r3, #15
 800b7ea:	4613      	mov	r3, r2
 800b7ec:	00db      	lsls	r3, r3, #3
 800b7ee:	1a9b      	subs	r3, r3, r2
 800b7f0:	009b      	lsls	r3, r3, #2
 800b7f2:	3338      	adds	r3, #56	; 0x38
 800b7f4:	687a      	ldr	r2, [r7, #4]
 800b7f6:	4413      	add	r3, r2
 800b7f8:	3304      	adds	r3, #4
 800b7fa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800b7fc:	68fb      	ldr	r3, [r7, #12]
 800b7fe:	2201      	movs	r2, #1
 800b800:	705a      	strb	r2, [r3, #1]
 800b802:	e00f      	b.n	800b824 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800b804:	78fb      	ldrb	r3, [r7, #3]
 800b806:	f003 020f 	and.w	r2, r3, #15
 800b80a:	4613      	mov	r3, r2
 800b80c:	00db      	lsls	r3, r3, #3
 800b80e:	1a9b      	subs	r3, r3, r2
 800b810:	009b      	lsls	r3, r3, #2
 800b812:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800b816:	687a      	ldr	r2, [r7, #4]
 800b818:	4413      	add	r3, r2
 800b81a:	3304      	adds	r3, #4
 800b81c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800b81e:	68fb      	ldr	r3, [r7, #12]
 800b820:	2200      	movs	r2, #0
 800b822:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800b824:	78fb      	ldrb	r3, [r7, #3]
 800b826:	f003 030f 	and.w	r3, r3, #15
 800b82a:	b2da      	uxtb	r2, r3
 800b82c:	68fb      	ldr	r3, [r7, #12]
 800b82e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800b836:	2b01      	cmp	r3, #1
 800b838:	d101      	bne.n	800b83e <HAL_PCD_EP_Close+0x6e>
 800b83a:	2302      	movs	r3, #2
 800b83c:	e00e      	b.n	800b85c <HAL_PCD_EP_Close+0x8c>
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	2201      	movs	r2, #1
 800b842:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	681b      	ldr	r3, [r3, #0]
 800b84a:	68f9      	ldr	r1, [r7, #12]
 800b84c:	4618      	mov	r0, r3
 800b84e:	f003 f815 	bl	800e87c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	2200      	movs	r2, #0
 800b856:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800b85a:	2300      	movs	r3, #0
}
 800b85c:	4618      	mov	r0, r3
 800b85e:	3710      	adds	r7, #16
 800b860:	46bd      	mov	sp, r7
 800b862:	bd80      	pop	{r7, pc}

0800b864 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800b864:	b580      	push	{r7, lr}
 800b866:	b086      	sub	sp, #24
 800b868:	af00      	add	r7, sp, #0
 800b86a:	60f8      	str	r0, [r7, #12]
 800b86c:	607a      	str	r2, [r7, #4]
 800b86e:	603b      	str	r3, [r7, #0]
 800b870:	460b      	mov	r3, r1
 800b872:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800b874:	7afb      	ldrb	r3, [r7, #11]
 800b876:	f003 020f 	and.w	r2, r3, #15
 800b87a:	4613      	mov	r3, r2
 800b87c:	00db      	lsls	r3, r3, #3
 800b87e:	1a9b      	subs	r3, r3, r2
 800b880:	009b      	lsls	r3, r3, #2
 800b882:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800b886:	68fa      	ldr	r2, [r7, #12]
 800b888:	4413      	add	r3, r2
 800b88a:	3304      	adds	r3, #4
 800b88c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800b88e:	697b      	ldr	r3, [r7, #20]
 800b890:	687a      	ldr	r2, [r7, #4]
 800b892:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800b894:	697b      	ldr	r3, [r7, #20]
 800b896:	683a      	ldr	r2, [r7, #0]
 800b898:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800b89a:	697b      	ldr	r3, [r7, #20]
 800b89c:	2200      	movs	r2, #0
 800b89e:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 800b8a0:	697b      	ldr	r3, [r7, #20]
 800b8a2:	2200      	movs	r2, #0
 800b8a4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800b8a6:	7afb      	ldrb	r3, [r7, #11]
 800b8a8:	f003 030f 	and.w	r3, r3, #15
 800b8ac:	b2da      	uxtb	r2, r3
 800b8ae:	697b      	ldr	r3, [r7, #20]
 800b8b0:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800b8b2:	68fb      	ldr	r3, [r7, #12]
 800b8b4:	691b      	ldr	r3, [r3, #16]
 800b8b6:	2b01      	cmp	r3, #1
 800b8b8:	d102      	bne.n	800b8c0 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800b8ba:	687a      	ldr	r2, [r7, #4]
 800b8bc:	697b      	ldr	r3, [r7, #20]
 800b8be:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800b8c0:	7afb      	ldrb	r3, [r7, #11]
 800b8c2:	f003 030f 	and.w	r3, r3, #15
 800b8c6:	2b00      	cmp	r3, #0
 800b8c8:	d109      	bne.n	800b8de <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800b8ca:	68fb      	ldr	r3, [r7, #12]
 800b8cc:	6818      	ldr	r0, [r3, #0]
 800b8ce:	68fb      	ldr	r3, [r7, #12]
 800b8d0:	691b      	ldr	r3, [r3, #16]
 800b8d2:	b2db      	uxtb	r3, r3
 800b8d4:	461a      	mov	r2, r3
 800b8d6:	6979      	ldr	r1, [r7, #20]
 800b8d8:	f003 faf0 	bl	800eebc <USB_EP0StartXfer>
 800b8dc:	e008      	b.n	800b8f0 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800b8de:	68fb      	ldr	r3, [r7, #12]
 800b8e0:	6818      	ldr	r0, [r3, #0]
 800b8e2:	68fb      	ldr	r3, [r7, #12]
 800b8e4:	691b      	ldr	r3, [r3, #16]
 800b8e6:	b2db      	uxtb	r3, r3
 800b8e8:	461a      	mov	r2, r3
 800b8ea:	6979      	ldr	r1, [r7, #20]
 800b8ec:	f003 f8a2 	bl	800ea34 <USB_EPStartXfer>
  }

  return HAL_OK;
 800b8f0:	2300      	movs	r3, #0
}
 800b8f2:	4618      	mov	r0, r3
 800b8f4:	3718      	adds	r7, #24
 800b8f6:	46bd      	mov	sp, r7
 800b8f8:	bd80      	pop	{r7, pc}

0800b8fa <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800b8fa:	b480      	push	{r7}
 800b8fc:	b083      	sub	sp, #12
 800b8fe:	af00      	add	r7, sp, #0
 800b900:	6078      	str	r0, [r7, #4]
 800b902:	460b      	mov	r3, r1
 800b904:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800b906:	78fb      	ldrb	r3, [r7, #3]
 800b908:	f003 020f 	and.w	r2, r3, #15
 800b90c:	6879      	ldr	r1, [r7, #4]
 800b90e:	4613      	mov	r3, r2
 800b910:	00db      	lsls	r3, r3, #3
 800b912:	1a9b      	subs	r3, r3, r2
 800b914:	009b      	lsls	r3, r3, #2
 800b916:	440b      	add	r3, r1
 800b918:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800b91c:	681b      	ldr	r3, [r3, #0]
}
 800b91e:	4618      	mov	r0, r3
 800b920:	370c      	adds	r7, #12
 800b922:	46bd      	mov	sp, r7
 800b924:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b928:	4770      	bx	lr

0800b92a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800b92a:	b580      	push	{r7, lr}
 800b92c:	b086      	sub	sp, #24
 800b92e:	af00      	add	r7, sp, #0
 800b930:	60f8      	str	r0, [r7, #12]
 800b932:	607a      	str	r2, [r7, #4]
 800b934:	603b      	str	r3, [r7, #0]
 800b936:	460b      	mov	r3, r1
 800b938:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800b93a:	7afb      	ldrb	r3, [r7, #11]
 800b93c:	f003 020f 	and.w	r2, r3, #15
 800b940:	4613      	mov	r3, r2
 800b942:	00db      	lsls	r3, r3, #3
 800b944:	1a9b      	subs	r3, r3, r2
 800b946:	009b      	lsls	r3, r3, #2
 800b948:	3338      	adds	r3, #56	; 0x38
 800b94a:	68fa      	ldr	r2, [r7, #12]
 800b94c:	4413      	add	r3, r2
 800b94e:	3304      	adds	r3, #4
 800b950:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800b952:	697b      	ldr	r3, [r7, #20]
 800b954:	687a      	ldr	r2, [r7, #4]
 800b956:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800b958:	697b      	ldr	r3, [r7, #20]
 800b95a:	683a      	ldr	r2, [r7, #0]
 800b95c:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800b95e:	697b      	ldr	r3, [r7, #20]
 800b960:	2200      	movs	r2, #0
 800b962:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 800b964:	697b      	ldr	r3, [r7, #20]
 800b966:	2201      	movs	r2, #1
 800b968:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800b96a:	7afb      	ldrb	r3, [r7, #11]
 800b96c:	f003 030f 	and.w	r3, r3, #15
 800b970:	b2da      	uxtb	r2, r3
 800b972:	697b      	ldr	r3, [r7, #20]
 800b974:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800b976:	68fb      	ldr	r3, [r7, #12]
 800b978:	691b      	ldr	r3, [r3, #16]
 800b97a:	2b01      	cmp	r3, #1
 800b97c:	d102      	bne.n	800b984 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800b97e:	687a      	ldr	r2, [r7, #4]
 800b980:	697b      	ldr	r3, [r7, #20]
 800b982:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800b984:	7afb      	ldrb	r3, [r7, #11]
 800b986:	f003 030f 	and.w	r3, r3, #15
 800b98a:	2b00      	cmp	r3, #0
 800b98c:	d109      	bne.n	800b9a2 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800b98e:	68fb      	ldr	r3, [r7, #12]
 800b990:	6818      	ldr	r0, [r3, #0]
 800b992:	68fb      	ldr	r3, [r7, #12]
 800b994:	691b      	ldr	r3, [r3, #16]
 800b996:	b2db      	uxtb	r3, r3
 800b998:	461a      	mov	r2, r3
 800b99a:	6979      	ldr	r1, [r7, #20]
 800b99c:	f003 fa8e 	bl	800eebc <USB_EP0StartXfer>
 800b9a0:	e008      	b.n	800b9b4 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800b9a2:	68fb      	ldr	r3, [r7, #12]
 800b9a4:	6818      	ldr	r0, [r3, #0]
 800b9a6:	68fb      	ldr	r3, [r7, #12]
 800b9a8:	691b      	ldr	r3, [r3, #16]
 800b9aa:	b2db      	uxtb	r3, r3
 800b9ac:	461a      	mov	r2, r3
 800b9ae:	6979      	ldr	r1, [r7, #20]
 800b9b0:	f003 f840 	bl	800ea34 <USB_EPStartXfer>
  }

  return HAL_OK;
 800b9b4:	2300      	movs	r3, #0
}
 800b9b6:	4618      	mov	r0, r3
 800b9b8:	3718      	adds	r7, #24
 800b9ba:	46bd      	mov	sp, r7
 800b9bc:	bd80      	pop	{r7, pc}

0800b9be <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800b9be:	b580      	push	{r7, lr}
 800b9c0:	b084      	sub	sp, #16
 800b9c2:	af00      	add	r7, sp, #0
 800b9c4:	6078      	str	r0, [r7, #4]
 800b9c6:	460b      	mov	r3, r1
 800b9c8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800b9ca:	78fb      	ldrb	r3, [r7, #3]
 800b9cc:	f003 020f 	and.w	r2, r3, #15
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	685b      	ldr	r3, [r3, #4]
 800b9d4:	429a      	cmp	r2, r3
 800b9d6:	d901      	bls.n	800b9dc <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800b9d8:	2301      	movs	r3, #1
 800b9da:	e050      	b.n	800ba7e <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800b9dc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b9e0:	2b00      	cmp	r3, #0
 800b9e2:	da0f      	bge.n	800ba04 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800b9e4:	78fb      	ldrb	r3, [r7, #3]
 800b9e6:	f003 020f 	and.w	r2, r3, #15
 800b9ea:	4613      	mov	r3, r2
 800b9ec:	00db      	lsls	r3, r3, #3
 800b9ee:	1a9b      	subs	r3, r3, r2
 800b9f0:	009b      	lsls	r3, r3, #2
 800b9f2:	3338      	adds	r3, #56	; 0x38
 800b9f4:	687a      	ldr	r2, [r7, #4]
 800b9f6:	4413      	add	r3, r2
 800b9f8:	3304      	adds	r3, #4
 800b9fa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800b9fc:	68fb      	ldr	r3, [r7, #12]
 800b9fe:	2201      	movs	r2, #1
 800ba00:	705a      	strb	r2, [r3, #1]
 800ba02:	e00d      	b.n	800ba20 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800ba04:	78fa      	ldrb	r2, [r7, #3]
 800ba06:	4613      	mov	r3, r2
 800ba08:	00db      	lsls	r3, r3, #3
 800ba0a:	1a9b      	subs	r3, r3, r2
 800ba0c:	009b      	lsls	r3, r3, #2
 800ba0e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800ba12:	687a      	ldr	r2, [r7, #4]
 800ba14:	4413      	add	r3, r2
 800ba16:	3304      	adds	r3, #4
 800ba18:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800ba1a:	68fb      	ldr	r3, [r7, #12]
 800ba1c:	2200      	movs	r2, #0
 800ba1e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800ba20:	68fb      	ldr	r3, [r7, #12]
 800ba22:	2201      	movs	r2, #1
 800ba24:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800ba26:	78fb      	ldrb	r3, [r7, #3]
 800ba28:	f003 030f 	and.w	r3, r3, #15
 800ba2c:	b2da      	uxtb	r2, r3
 800ba2e:	68fb      	ldr	r3, [r7, #12]
 800ba30:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800ba38:	2b01      	cmp	r3, #1
 800ba3a:	d101      	bne.n	800ba40 <HAL_PCD_EP_SetStall+0x82>
 800ba3c:	2302      	movs	r3, #2
 800ba3e:	e01e      	b.n	800ba7e <HAL_PCD_EP_SetStall+0xc0>
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	2201      	movs	r2, #1
 800ba44:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	681b      	ldr	r3, [r3, #0]
 800ba4c:	68f9      	ldr	r1, [r7, #12]
 800ba4e:	4618      	mov	r0, r3
 800ba50:	f003 fc1d 	bl	800f28e <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800ba54:	78fb      	ldrb	r3, [r7, #3]
 800ba56:	f003 030f 	and.w	r3, r3, #15
 800ba5a:	2b00      	cmp	r3, #0
 800ba5c:	d10a      	bne.n	800ba74 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	6818      	ldr	r0, [r3, #0]
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	691b      	ldr	r3, [r3, #16]
 800ba66:	b2d9      	uxtb	r1, r3
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800ba6e:	461a      	mov	r2, r3
 800ba70:	f003 fe0e 	bl	800f690 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	2200      	movs	r2, #0
 800ba78:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800ba7c:	2300      	movs	r3, #0
}
 800ba7e:	4618      	mov	r0, r3
 800ba80:	3710      	adds	r7, #16
 800ba82:	46bd      	mov	sp, r7
 800ba84:	bd80      	pop	{r7, pc}

0800ba86 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800ba86:	b580      	push	{r7, lr}
 800ba88:	b084      	sub	sp, #16
 800ba8a:	af00      	add	r7, sp, #0
 800ba8c:	6078      	str	r0, [r7, #4]
 800ba8e:	460b      	mov	r3, r1
 800ba90:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800ba92:	78fb      	ldrb	r3, [r7, #3]
 800ba94:	f003 020f 	and.w	r2, r3, #15
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	685b      	ldr	r3, [r3, #4]
 800ba9c:	429a      	cmp	r2, r3
 800ba9e:	d901      	bls.n	800baa4 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800baa0:	2301      	movs	r3, #1
 800baa2:	e042      	b.n	800bb2a <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800baa4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800baa8:	2b00      	cmp	r3, #0
 800baaa:	da0f      	bge.n	800bacc <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800baac:	78fb      	ldrb	r3, [r7, #3]
 800baae:	f003 020f 	and.w	r2, r3, #15
 800bab2:	4613      	mov	r3, r2
 800bab4:	00db      	lsls	r3, r3, #3
 800bab6:	1a9b      	subs	r3, r3, r2
 800bab8:	009b      	lsls	r3, r3, #2
 800baba:	3338      	adds	r3, #56	; 0x38
 800babc:	687a      	ldr	r2, [r7, #4]
 800babe:	4413      	add	r3, r2
 800bac0:	3304      	adds	r3, #4
 800bac2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800bac4:	68fb      	ldr	r3, [r7, #12]
 800bac6:	2201      	movs	r2, #1
 800bac8:	705a      	strb	r2, [r3, #1]
 800baca:	e00f      	b.n	800baec <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800bacc:	78fb      	ldrb	r3, [r7, #3]
 800bace:	f003 020f 	and.w	r2, r3, #15
 800bad2:	4613      	mov	r3, r2
 800bad4:	00db      	lsls	r3, r3, #3
 800bad6:	1a9b      	subs	r3, r3, r2
 800bad8:	009b      	lsls	r3, r3, #2
 800bada:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800bade:	687a      	ldr	r2, [r7, #4]
 800bae0:	4413      	add	r3, r2
 800bae2:	3304      	adds	r3, #4
 800bae4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800bae6:	68fb      	ldr	r3, [r7, #12]
 800bae8:	2200      	movs	r2, #0
 800baea:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800baec:	68fb      	ldr	r3, [r7, #12]
 800baee:	2200      	movs	r2, #0
 800baf0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800baf2:	78fb      	ldrb	r3, [r7, #3]
 800baf4:	f003 030f 	and.w	r3, r3, #15
 800baf8:	b2da      	uxtb	r2, r3
 800bafa:	68fb      	ldr	r3, [r7, #12]
 800bafc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800bb04:	2b01      	cmp	r3, #1
 800bb06:	d101      	bne.n	800bb0c <HAL_PCD_EP_ClrStall+0x86>
 800bb08:	2302      	movs	r3, #2
 800bb0a:	e00e      	b.n	800bb2a <HAL_PCD_EP_ClrStall+0xa4>
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	2201      	movs	r2, #1
 800bb10:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	681b      	ldr	r3, [r3, #0]
 800bb18:	68f9      	ldr	r1, [r7, #12]
 800bb1a:	4618      	mov	r0, r3
 800bb1c:	f003 fc25 	bl	800f36a <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	2200      	movs	r2, #0
 800bb24:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800bb28:	2300      	movs	r3, #0
}
 800bb2a:	4618      	mov	r0, r3
 800bb2c:	3710      	adds	r7, #16
 800bb2e:	46bd      	mov	sp, r7
 800bb30:	bd80      	pop	{r7, pc}

0800bb32 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800bb32:	b580      	push	{r7, lr}
 800bb34:	b08a      	sub	sp, #40	; 0x28
 800bb36:	af02      	add	r7, sp, #8
 800bb38:	6078      	str	r0, [r7, #4]
 800bb3a:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	681b      	ldr	r3, [r3, #0]
 800bb40:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bb42:	697b      	ldr	r3, [r7, #20]
 800bb44:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800bb46:	683a      	ldr	r2, [r7, #0]
 800bb48:	4613      	mov	r3, r2
 800bb4a:	00db      	lsls	r3, r3, #3
 800bb4c:	1a9b      	subs	r3, r3, r2
 800bb4e:	009b      	lsls	r3, r3, #2
 800bb50:	3338      	adds	r3, #56	; 0x38
 800bb52:	687a      	ldr	r2, [r7, #4]
 800bb54:	4413      	add	r3, r2
 800bb56:	3304      	adds	r3, #4
 800bb58:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800bb5a:	68fb      	ldr	r3, [r7, #12]
 800bb5c:	699a      	ldr	r2, [r3, #24]
 800bb5e:	68fb      	ldr	r3, [r7, #12]
 800bb60:	695b      	ldr	r3, [r3, #20]
 800bb62:	429a      	cmp	r2, r3
 800bb64:	d901      	bls.n	800bb6a <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800bb66:	2301      	movs	r3, #1
 800bb68:	e06c      	b.n	800bc44 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800bb6a:	68fb      	ldr	r3, [r7, #12]
 800bb6c:	695a      	ldr	r2, [r3, #20]
 800bb6e:	68fb      	ldr	r3, [r7, #12]
 800bb70:	699b      	ldr	r3, [r3, #24]
 800bb72:	1ad3      	subs	r3, r2, r3
 800bb74:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800bb76:	68fb      	ldr	r3, [r7, #12]
 800bb78:	689b      	ldr	r3, [r3, #8]
 800bb7a:	69fa      	ldr	r2, [r7, #28]
 800bb7c:	429a      	cmp	r2, r3
 800bb7e:	d902      	bls.n	800bb86 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800bb80:	68fb      	ldr	r3, [r7, #12]
 800bb82:	689b      	ldr	r3, [r3, #8]
 800bb84:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800bb86:	69fb      	ldr	r3, [r7, #28]
 800bb88:	3303      	adds	r3, #3
 800bb8a:	089b      	lsrs	r3, r3, #2
 800bb8c:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800bb8e:	e02b      	b.n	800bbe8 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800bb90:	68fb      	ldr	r3, [r7, #12]
 800bb92:	695a      	ldr	r2, [r3, #20]
 800bb94:	68fb      	ldr	r3, [r7, #12]
 800bb96:	699b      	ldr	r3, [r3, #24]
 800bb98:	1ad3      	subs	r3, r2, r3
 800bb9a:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800bb9c:	68fb      	ldr	r3, [r7, #12]
 800bb9e:	689b      	ldr	r3, [r3, #8]
 800bba0:	69fa      	ldr	r2, [r7, #28]
 800bba2:	429a      	cmp	r2, r3
 800bba4:	d902      	bls.n	800bbac <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800bba6:	68fb      	ldr	r3, [r7, #12]
 800bba8:	689b      	ldr	r3, [r3, #8]
 800bbaa:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800bbac:	69fb      	ldr	r3, [r7, #28]
 800bbae:	3303      	adds	r3, #3
 800bbb0:	089b      	lsrs	r3, r3, #2
 800bbb2:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800bbb4:	68fb      	ldr	r3, [r7, #12]
 800bbb6:	68d9      	ldr	r1, [r3, #12]
 800bbb8:	683b      	ldr	r3, [r7, #0]
 800bbba:	b2da      	uxtb	r2, r3
 800bbbc:	69fb      	ldr	r3, [r7, #28]
 800bbbe:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800bbc4:	b2db      	uxtb	r3, r3
 800bbc6:	9300      	str	r3, [sp, #0]
 800bbc8:	4603      	mov	r3, r0
 800bbca:	6978      	ldr	r0, [r7, #20]
 800bbcc:	f003 fac9 	bl	800f162 <USB_WritePacket>

    ep->xfer_buff  += len;
 800bbd0:	68fb      	ldr	r3, [r7, #12]
 800bbd2:	68da      	ldr	r2, [r3, #12]
 800bbd4:	69fb      	ldr	r3, [r7, #28]
 800bbd6:	441a      	add	r2, r3
 800bbd8:	68fb      	ldr	r3, [r7, #12]
 800bbda:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800bbdc:	68fb      	ldr	r3, [r7, #12]
 800bbde:	699a      	ldr	r2, [r3, #24]
 800bbe0:	69fb      	ldr	r3, [r7, #28]
 800bbe2:	441a      	add	r2, r3
 800bbe4:	68fb      	ldr	r3, [r7, #12]
 800bbe6:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800bbe8:	683b      	ldr	r3, [r7, #0]
 800bbea:	015a      	lsls	r2, r3, #5
 800bbec:	693b      	ldr	r3, [r7, #16]
 800bbee:	4413      	add	r3, r2
 800bbf0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bbf4:	699b      	ldr	r3, [r3, #24]
 800bbf6:	b29b      	uxth	r3, r3
 800bbf8:	69ba      	ldr	r2, [r7, #24]
 800bbfa:	429a      	cmp	r2, r3
 800bbfc:	d809      	bhi.n	800bc12 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800bbfe:	68fb      	ldr	r3, [r7, #12]
 800bc00:	699a      	ldr	r2, [r3, #24]
 800bc02:	68fb      	ldr	r3, [r7, #12]
 800bc04:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800bc06:	429a      	cmp	r2, r3
 800bc08:	d203      	bcs.n	800bc12 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800bc0a:	68fb      	ldr	r3, [r7, #12]
 800bc0c:	695b      	ldr	r3, [r3, #20]
 800bc0e:	2b00      	cmp	r3, #0
 800bc10:	d1be      	bne.n	800bb90 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800bc12:	68fb      	ldr	r3, [r7, #12]
 800bc14:	695a      	ldr	r2, [r3, #20]
 800bc16:	68fb      	ldr	r3, [r7, #12]
 800bc18:	699b      	ldr	r3, [r3, #24]
 800bc1a:	429a      	cmp	r2, r3
 800bc1c:	d811      	bhi.n	800bc42 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800bc1e:	683b      	ldr	r3, [r7, #0]
 800bc20:	f003 030f 	and.w	r3, r3, #15
 800bc24:	2201      	movs	r2, #1
 800bc26:	fa02 f303 	lsl.w	r3, r2, r3
 800bc2a:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800bc2c:	693b      	ldr	r3, [r7, #16]
 800bc2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bc32:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800bc34:	68bb      	ldr	r3, [r7, #8]
 800bc36:	43db      	mvns	r3, r3
 800bc38:	6939      	ldr	r1, [r7, #16]
 800bc3a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bc3e:	4013      	ands	r3, r2
 800bc40:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800bc42:	2300      	movs	r3, #0
}
 800bc44:	4618      	mov	r0, r3
 800bc46:	3720      	adds	r7, #32
 800bc48:	46bd      	mov	sp, r7
 800bc4a:	bd80      	pop	{r7, pc}

0800bc4c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800bc4c:	b580      	push	{r7, lr}
 800bc4e:	b086      	sub	sp, #24
 800bc50:	af00      	add	r7, sp, #0
 800bc52:	6078      	str	r0, [r7, #4]
 800bc54:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	681b      	ldr	r3, [r3, #0]
 800bc5a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bc5c:	697b      	ldr	r3, [r7, #20]
 800bc5e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800bc60:	697b      	ldr	r3, [r7, #20]
 800bc62:	333c      	adds	r3, #60	; 0x3c
 800bc64:	3304      	adds	r3, #4
 800bc66:	681b      	ldr	r3, [r3, #0]
 800bc68:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800bc6a:	683b      	ldr	r3, [r7, #0]
 800bc6c:	015a      	lsls	r2, r3, #5
 800bc6e:	693b      	ldr	r3, [r7, #16]
 800bc70:	4413      	add	r3, r2
 800bc72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bc76:	689b      	ldr	r3, [r3, #8]
 800bc78:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	691b      	ldr	r3, [r3, #16]
 800bc7e:	2b01      	cmp	r3, #1
 800bc80:	f040 80a0 	bne.w	800bdc4 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800bc84:	68bb      	ldr	r3, [r7, #8]
 800bc86:	f003 0308 	and.w	r3, r3, #8
 800bc8a:	2b00      	cmp	r3, #0
 800bc8c:	d015      	beq.n	800bcba <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800bc8e:	68fb      	ldr	r3, [r7, #12]
 800bc90:	4a72      	ldr	r2, [pc, #456]	; (800be5c <PCD_EP_OutXfrComplete_int+0x210>)
 800bc92:	4293      	cmp	r3, r2
 800bc94:	f240 80dd 	bls.w	800be52 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800bc98:	68bb      	ldr	r3, [r7, #8]
 800bc9a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800bc9e:	2b00      	cmp	r3, #0
 800bca0:	f000 80d7 	beq.w	800be52 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800bca4:	683b      	ldr	r3, [r7, #0]
 800bca6:	015a      	lsls	r2, r3, #5
 800bca8:	693b      	ldr	r3, [r7, #16]
 800bcaa:	4413      	add	r3, r2
 800bcac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bcb0:	461a      	mov	r2, r3
 800bcb2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bcb6:	6093      	str	r3, [r2, #8]
 800bcb8:	e0cb      	b.n	800be52 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800bcba:	68bb      	ldr	r3, [r7, #8]
 800bcbc:	f003 0320 	and.w	r3, r3, #32
 800bcc0:	2b00      	cmp	r3, #0
 800bcc2:	d009      	beq.n	800bcd8 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800bcc4:	683b      	ldr	r3, [r7, #0]
 800bcc6:	015a      	lsls	r2, r3, #5
 800bcc8:	693b      	ldr	r3, [r7, #16]
 800bcca:	4413      	add	r3, r2
 800bccc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bcd0:	461a      	mov	r2, r3
 800bcd2:	2320      	movs	r3, #32
 800bcd4:	6093      	str	r3, [r2, #8]
 800bcd6:	e0bc      	b.n	800be52 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800bcd8:	68bb      	ldr	r3, [r7, #8]
 800bcda:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800bcde:	2b00      	cmp	r3, #0
 800bce0:	f040 80b7 	bne.w	800be52 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800bce4:	68fb      	ldr	r3, [r7, #12]
 800bce6:	4a5d      	ldr	r2, [pc, #372]	; (800be5c <PCD_EP_OutXfrComplete_int+0x210>)
 800bce8:	4293      	cmp	r3, r2
 800bcea:	d90f      	bls.n	800bd0c <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800bcec:	68bb      	ldr	r3, [r7, #8]
 800bcee:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800bcf2:	2b00      	cmp	r3, #0
 800bcf4:	d00a      	beq.n	800bd0c <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800bcf6:	683b      	ldr	r3, [r7, #0]
 800bcf8:	015a      	lsls	r2, r3, #5
 800bcfa:	693b      	ldr	r3, [r7, #16]
 800bcfc:	4413      	add	r3, r2
 800bcfe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bd02:	461a      	mov	r2, r3
 800bd04:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bd08:	6093      	str	r3, [r2, #8]
 800bd0a:	e0a2      	b.n	800be52 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 800bd0c:	6879      	ldr	r1, [r7, #4]
 800bd0e:	683a      	ldr	r2, [r7, #0]
 800bd10:	4613      	mov	r3, r2
 800bd12:	00db      	lsls	r3, r3, #3
 800bd14:	1a9b      	subs	r3, r3, r2
 800bd16:	009b      	lsls	r3, r3, #2
 800bd18:	440b      	add	r3, r1
 800bd1a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800bd1e:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800bd20:	683b      	ldr	r3, [r7, #0]
 800bd22:	0159      	lsls	r1, r3, #5
 800bd24:	693b      	ldr	r3, [r7, #16]
 800bd26:	440b      	add	r3, r1
 800bd28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bd2c:	691b      	ldr	r3, [r3, #16]
 800bd2e:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 800bd32:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 800bd34:	6878      	ldr	r0, [r7, #4]
 800bd36:	683a      	ldr	r2, [r7, #0]
 800bd38:	4613      	mov	r3, r2
 800bd3a:	00db      	lsls	r3, r3, #3
 800bd3c:	1a9b      	subs	r3, r3, r2
 800bd3e:	009b      	lsls	r3, r3, #2
 800bd40:	4403      	add	r3, r0
 800bd42:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800bd46:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 800bd48:	6879      	ldr	r1, [r7, #4]
 800bd4a:	683a      	ldr	r2, [r7, #0]
 800bd4c:	4613      	mov	r3, r2
 800bd4e:	00db      	lsls	r3, r3, #3
 800bd50:	1a9b      	subs	r3, r3, r2
 800bd52:	009b      	lsls	r3, r3, #2
 800bd54:	440b      	add	r3, r1
 800bd56:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800bd5a:	6819      	ldr	r1, [r3, #0]
 800bd5c:	6878      	ldr	r0, [r7, #4]
 800bd5e:	683a      	ldr	r2, [r7, #0]
 800bd60:	4613      	mov	r3, r2
 800bd62:	00db      	lsls	r3, r3, #3
 800bd64:	1a9b      	subs	r3, r3, r2
 800bd66:	009b      	lsls	r3, r3, #2
 800bd68:	4403      	add	r3, r0
 800bd6a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800bd6e:	681b      	ldr	r3, [r3, #0]
 800bd70:	4419      	add	r1, r3
 800bd72:	6878      	ldr	r0, [r7, #4]
 800bd74:	683a      	ldr	r2, [r7, #0]
 800bd76:	4613      	mov	r3, r2
 800bd78:	00db      	lsls	r3, r3, #3
 800bd7a:	1a9b      	subs	r3, r3, r2
 800bd7c:	009b      	lsls	r3, r3, #2
 800bd7e:	4403      	add	r3, r0
 800bd80:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800bd84:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800bd86:	683b      	ldr	r3, [r7, #0]
 800bd88:	2b00      	cmp	r3, #0
 800bd8a:	d114      	bne.n	800bdb6 <PCD_EP_OutXfrComplete_int+0x16a>
 800bd8c:	6879      	ldr	r1, [r7, #4]
 800bd8e:	683a      	ldr	r2, [r7, #0]
 800bd90:	4613      	mov	r3, r2
 800bd92:	00db      	lsls	r3, r3, #3
 800bd94:	1a9b      	subs	r3, r3, r2
 800bd96:	009b      	lsls	r3, r3, #2
 800bd98:	440b      	add	r3, r1
 800bd9a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800bd9e:	681b      	ldr	r3, [r3, #0]
 800bda0:	2b00      	cmp	r3, #0
 800bda2:	d108      	bne.n	800bdb6 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	6818      	ldr	r0, [r3, #0]
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800bdae:	461a      	mov	r2, r3
 800bdb0:	2101      	movs	r1, #1
 800bdb2:	f003 fc6d 	bl	800f690 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800bdb6:	683b      	ldr	r3, [r7, #0]
 800bdb8:	b2db      	uxtb	r3, r3
 800bdba:	4619      	mov	r1, r3
 800bdbc:	6878      	ldr	r0, [r7, #4]
 800bdbe:	f005 fd31 	bl	8011824 <HAL_PCD_DataOutStageCallback>
 800bdc2:	e046      	b.n	800be52 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800bdc4:	68fb      	ldr	r3, [r7, #12]
 800bdc6:	4a26      	ldr	r2, [pc, #152]	; (800be60 <PCD_EP_OutXfrComplete_int+0x214>)
 800bdc8:	4293      	cmp	r3, r2
 800bdca:	d124      	bne.n	800be16 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800bdcc:	68bb      	ldr	r3, [r7, #8]
 800bdce:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800bdd2:	2b00      	cmp	r3, #0
 800bdd4:	d00a      	beq.n	800bdec <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800bdd6:	683b      	ldr	r3, [r7, #0]
 800bdd8:	015a      	lsls	r2, r3, #5
 800bdda:	693b      	ldr	r3, [r7, #16]
 800bddc:	4413      	add	r3, r2
 800bdde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bde2:	461a      	mov	r2, r3
 800bde4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bde8:	6093      	str	r3, [r2, #8]
 800bdea:	e032      	b.n	800be52 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800bdec:	68bb      	ldr	r3, [r7, #8]
 800bdee:	f003 0320 	and.w	r3, r3, #32
 800bdf2:	2b00      	cmp	r3, #0
 800bdf4:	d008      	beq.n	800be08 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800bdf6:	683b      	ldr	r3, [r7, #0]
 800bdf8:	015a      	lsls	r2, r3, #5
 800bdfa:	693b      	ldr	r3, [r7, #16]
 800bdfc:	4413      	add	r3, r2
 800bdfe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800be02:	461a      	mov	r2, r3
 800be04:	2320      	movs	r3, #32
 800be06:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800be08:	683b      	ldr	r3, [r7, #0]
 800be0a:	b2db      	uxtb	r3, r3
 800be0c:	4619      	mov	r1, r3
 800be0e:	6878      	ldr	r0, [r7, #4]
 800be10:	f005 fd08 	bl	8011824 <HAL_PCD_DataOutStageCallback>
 800be14:	e01d      	b.n	800be52 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800be16:	683b      	ldr	r3, [r7, #0]
 800be18:	2b00      	cmp	r3, #0
 800be1a:	d114      	bne.n	800be46 <PCD_EP_OutXfrComplete_int+0x1fa>
 800be1c:	6879      	ldr	r1, [r7, #4]
 800be1e:	683a      	ldr	r2, [r7, #0]
 800be20:	4613      	mov	r3, r2
 800be22:	00db      	lsls	r3, r3, #3
 800be24:	1a9b      	subs	r3, r3, r2
 800be26:	009b      	lsls	r3, r3, #2
 800be28:	440b      	add	r3, r1
 800be2a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800be2e:	681b      	ldr	r3, [r3, #0]
 800be30:	2b00      	cmp	r3, #0
 800be32:	d108      	bne.n	800be46 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	6818      	ldr	r0, [r3, #0]
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800be3e:	461a      	mov	r2, r3
 800be40:	2100      	movs	r1, #0
 800be42:	f003 fc25 	bl	800f690 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800be46:	683b      	ldr	r3, [r7, #0]
 800be48:	b2db      	uxtb	r3, r3
 800be4a:	4619      	mov	r1, r3
 800be4c:	6878      	ldr	r0, [r7, #4]
 800be4e:	f005 fce9 	bl	8011824 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800be52:	2300      	movs	r3, #0
}
 800be54:	4618      	mov	r0, r3
 800be56:	3718      	adds	r7, #24
 800be58:	46bd      	mov	sp, r7
 800be5a:	bd80      	pop	{r7, pc}
 800be5c:	4f54300a 	.word	0x4f54300a
 800be60:	4f54310a 	.word	0x4f54310a

0800be64 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800be64:	b580      	push	{r7, lr}
 800be66:	b086      	sub	sp, #24
 800be68:	af00      	add	r7, sp, #0
 800be6a:	6078      	str	r0, [r7, #4]
 800be6c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	681b      	ldr	r3, [r3, #0]
 800be72:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800be74:	697b      	ldr	r3, [r7, #20]
 800be76:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800be78:	697b      	ldr	r3, [r7, #20]
 800be7a:	333c      	adds	r3, #60	; 0x3c
 800be7c:	3304      	adds	r3, #4
 800be7e:	681b      	ldr	r3, [r3, #0]
 800be80:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800be82:	683b      	ldr	r3, [r7, #0]
 800be84:	015a      	lsls	r2, r3, #5
 800be86:	693b      	ldr	r3, [r7, #16]
 800be88:	4413      	add	r3, r2
 800be8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800be8e:	689b      	ldr	r3, [r3, #8]
 800be90:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800be92:	68fb      	ldr	r3, [r7, #12]
 800be94:	4a15      	ldr	r2, [pc, #84]	; (800beec <PCD_EP_OutSetupPacket_int+0x88>)
 800be96:	4293      	cmp	r3, r2
 800be98:	d90e      	bls.n	800beb8 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800be9a:	68bb      	ldr	r3, [r7, #8]
 800be9c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800bea0:	2b00      	cmp	r3, #0
 800bea2:	d009      	beq.n	800beb8 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800bea4:	683b      	ldr	r3, [r7, #0]
 800bea6:	015a      	lsls	r2, r3, #5
 800bea8:	693b      	ldr	r3, [r7, #16]
 800beaa:	4413      	add	r3, r2
 800beac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800beb0:	461a      	mov	r2, r3
 800beb2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800beb6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800beb8:	6878      	ldr	r0, [r7, #4]
 800beba:	f005 fca1 	bl	8011800 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800bebe:	68fb      	ldr	r3, [r7, #12]
 800bec0:	4a0a      	ldr	r2, [pc, #40]	; (800beec <PCD_EP_OutSetupPacket_int+0x88>)
 800bec2:	4293      	cmp	r3, r2
 800bec4:	d90c      	bls.n	800bee0 <PCD_EP_OutSetupPacket_int+0x7c>
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	691b      	ldr	r3, [r3, #16]
 800beca:	2b01      	cmp	r3, #1
 800becc:	d108      	bne.n	800bee0 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	6818      	ldr	r0, [r3, #0]
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800bed8:	461a      	mov	r2, r3
 800beda:	2101      	movs	r1, #1
 800bedc:	f003 fbd8 	bl	800f690 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800bee0:	2300      	movs	r3, #0
}
 800bee2:	4618      	mov	r0, r3
 800bee4:	3718      	adds	r7, #24
 800bee6:	46bd      	mov	sp, r7
 800bee8:	bd80      	pop	{r7, pc}
 800beea:	bf00      	nop
 800beec:	4f54300a 	.word	0x4f54300a

0800bef0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800bef0:	b480      	push	{r7}
 800bef2:	b085      	sub	sp, #20
 800bef4:	af00      	add	r7, sp, #0
 800bef6:	6078      	str	r0, [r7, #4]
 800bef8:	460b      	mov	r3, r1
 800befa:	70fb      	strb	r3, [r7, #3]
 800befc:	4613      	mov	r3, r2
 800befe:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	681b      	ldr	r3, [r3, #0]
 800bf04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf06:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800bf08:	78fb      	ldrb	r3, [r7, #3]
 800bf0a:	2b00      	cmp	r3, #0
 800bf0c:	d107      	bne.n	800bf1e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800bf0e:	883b      	ldrh	r3, [r7, #0]
 800bf10:	0419      	lsls	r1, r3, #16
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	681b      	ldr	r3, [r3, #0]
 800bf16:	68ba      	ldr	r2, [r7, #8]
 800bf18:	430a      	orrs	r2, r1
 800bf1a:	629a      	str	r2, [r3, #40]	; 0x28
 800bf1c:	e028      	b.n	800bf70 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	681b      	ldr	r3, [r3, #0]
 800bf22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bf24:	0c1b      	lsrs	r3, r3, #16
 800bf26:	68ba      	ldr	r2, [r7, #8]
 800bf28:	4413      	add	r3, r2
 800bf2a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800bf2c:	2300      	movs	r3, #0
 800bf2e:	73fb      	strb	r3, [r7, #15]
 800bf30:	e00d      	b.n	800bf4e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	681a      	ldr	r2, [r3, #0]
 800bf36:	7bfb      	ldrb	r3, [r7, #15]
 800bf38:	3340      	adds	r3, #64	; 0x40
 800bf3a:	009b      	lsls	r3, r3, #2
 800bf3c:	4413      	add	r3, r2
 800bf3e:	685b      	ldr	r3, [r3, #4]
 800bf40:	0c1b      	lsrs	r3, r3, #16
 800bf42:	68ba      	ldr	r2, [r7, #8]
 800bf44:	4413      	add	r3, r2
 800bf46:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800bf48:	7bfb      	ldrb	r3, [r7, #15]
 800bf4a:	3301      	adds	r3, #1
 800bf4c:	73fb      	strb	r3, [r7, #15]
 800bf4e:	7bfa      	ldrb	r2, [r7, #15]
 800bf50:	78fb      	ldrb	r3, [r7, #3]
 800bf52:	3b01      	subs	r3, #1
 800bf54:	429a      	cmp	r2, r3
 800bf56:	d3ec      	bcc.n	800bf32 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800bf58:	883b      	ldrh	r3, [r7, #0]
 800bf5a:	0418      	lsls	r0, r3, #16
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	6819      	ldr	r1, [r3, #0]
 800bf60:	78fb      	ldrb	r3, [r7, #3]
 800bf62:	3b01      	subs	r3, #1
 800bf64:	68ba      	ldr	r2, [r7, #8]
 800bf66:	4302      	orrs	r2, r0
 800bf68:	3340      	adds	r3, #64	; 0x40
 800bf6a:	009b      	lsls	r3, r3, #2
 800bf6c:	440b      	add	r3, r1
 800bf6e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800bf70:	2300      	movs	r3, #0
}
 800bf72:	4618      	mov	r0, r3
 800bf74:	3714      	adds	r7, #20
 800bf76:	46bd      	mov	sp, r7
 800bf78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf7c:	4770      	bx	lr

0800bf7e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800bf7e:	b480      	push	{r7}
 800bf80:	b083      	sub	sp, #12
 800bf82:	af00      	add	r7, sp, #0
 800bf84:	6078      	str	r0, [r7, #4]
 800bf86:	460b      	mov	r3, r1
 800bf88:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	681b      	ldr	r3, [r3, #0]
 800bf8e:	887a      	ldrh	r2, [r7, #2]
 800bf90:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800bf92:	2300      	movs	r3, #0
}
 800bf94:	4618      	mov	r0, r3
 800bf96:	370c      	adds	r7, #12
 800bf98:	46bd      	mov	sp, r7
 800bf9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf9e:	4770      	bx	lr

0800bfa0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800bfa0:	b480      	push	{r7}
 800bfa2:	b083      	sub	sp, #12
 800bfa4:	af00      	add	r7, sp, #0
 800bfa6:	6078      	str	r0, [r7, #4]
 800bfa8:	460b      	mov	r3, r1
 800bfaa:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800bfac:	bf00      	nop
 800bfae:	370c      	adds	r7, #12
 800bfb0:	46bd      	mov	sp, r7
 800bfb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfb6:	4770      	bx	lr

0800bfb8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800bfb8:	b580      	push	{r7, lr}
 800bfba:	b086      	sub	sp, #24
 800bfbc:	af00      	add	r7, sp, #0
 800bfbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	2b00      	cmp	r3, #0
 800bfc4:	d101      	bne.n	800bfca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800bfc6:	2301      	movs	r3, #1
 800bfc8:	e267      	b.n	800c49a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	681b      	ldr	r3, [r3, #0]
 800bfce:	f003 0301 	and.w	r3, r3, #1
 800bfd2:	2b00      	cmp	r3, #0
 800bfd4:	d075      	beq.n	800c0c2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800bfd6:	4b88      	ldr	r3, [pc, #544]	; (800c1f8 <HAL_RCC_OscConfig+0x240>)
 800bfd8:	689b      	ldr	r3, [r3, #8]
 800bfda:	f003 030c 	and.w	r3, r3, #12
 800bfde:	2b04      	cmp	r3, #4
 800bfe0:	d00c      	beq.n	800bffc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800bfe2:	4b85      	ldr	r3, [pc, #532]	; (800c1f8 <HAL_RCC_OscConfig+0x240>)
 800bfe4:	689b      	ldr	r3, [r3, #8]
 800bfe6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800bfea:	2b08      	cmp	r3, #8
 800bfec:	d112      	bne.n	800c014 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800bfee:	4b82      	ldr	r3, [pc, #520]	; (800c1f8 <HAL_RCC_OscConfig+0x240>)
 800bff0:	685b      	ldr	r3, [r3, #4]
 800bff2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800bff6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800bffa:	d10b      	bne.n	800c014 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800bffc:	4b7e      	ldr	r3, [pc, #504]	; (800c1f8 <HAL_RCC_OscConfig+0x240>)
 800bffe:	681b      	ldr	r3, [r3, #0]
 800c000:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c004:	2b00      	cmp	r3, #0
 800c006:	d05b      	beq.n	800c0c0 <HAL_RCC_OscConfig+0x108>
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	685b      	ldr	r3, [r3, #4]
 800c00c:	2b00      	cmp	r3, #0
 800c00e:	d157      	bne.n	800c0c0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800c010:	2301      	movs	r3, #1
 800c012:	e242      	b.n	800c49a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	685b      	ldr	r3, [r3, #4]
 800c018:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c01c:	d106      	bne.n	800c02c <HAL_RCC_OscConfig+0x74>
 800c01e:	4b76      	ldr	r3, [pc, #472]	; (800c1f8 <HAL_RCC_OscConfig+0x240>)
 800c020:	681b      	ldr	r3, [r3, #0]
 800c022:	4a75      	ldr	r2, [pc, #468]	; (800c1f8 <HAL_RCC_OscConfig+0x240>)
 800c024:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c028:	6013      	str	r3, [r2, #0]
 800c02a:	e01d      	b.n	800c068 <HAL_RCC_OscConfig+0xb0>
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	685b      	ldr	r3, [r3, #4]
 800c030:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c034:	d10c      	bne.n	800c050 <HAL_RCC_OscConfig+0x98>
 800c036:	4b70      	ldr	r3, [pc, #448]	; (800c1f8 <HAL_RCC_OscConfig+0x240>)
 800c038:	681b      	ldr	r3, [r3, #0]
 800c03a:	4a6f      	ldr	r2, [pc, #444]	; (800c1f8 <HAL_RCC_OscConfig+0x240>)
 800c03c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800c040:	6013      	str	r3, [r2, #0]
 800c042:	4b6d      	ldr	r3, [pc, #436]	; (800c1f8 <HAL_RCC_OscConfig+0x240>)
 800c044:	681b      	ldr	r3, [r3, #0]
 800c046:	4a6c      	ldr	r2, [pc, #432]	; (800c1f8 <HAL_RCC_OscConfig+0x240>)
 800c048:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c04c:	6013      	str	r3, [r2, #0]
 800c04e:	e00b      	b.n	800c068 <HAL_RCC_OscConfig+0xb0>
 800c050:	4b69      	ldr	r3, [pc, #420]	; (800c1f8 <HAL_RCC_OscConfig+0x240>)
 800c052:	681b      	ldr	r3, [r3, #0]
 800c054:	4a68      	ldr	r2, [pc, #416]	; (800c1f8 <HAL_RCC_OscConfig+0x240>)
 800c056:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c05a:	6013      	str	r3, [r2, #0]
 800c05c:	4b66      	ldr	r3, [pc, #408]	; (800c1f8 <HAL_RCC_OscConfig+0x240>)
 800c05e:	681b      	ldr	r3, [r3, #0]
 800c060:	4a65      	ldr	r2, [pc, #404]	; (800c1f8 <HAL_RCC_OscConfig+0x240>)
 800c062:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800c066:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	685b      	ldr	r3, [r3, #4]
 800c06c:	2b00      	cmp	r3, #0
 800c06e:	d013      	beq.n	800c098 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c070:	f7fd fac8 	bl	8009604 <HAL_GetTick>
 800c074:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c076:	e008      	b.n	800c08a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800c078:	f7fd fac4 	bl	8009604 <HAL_GetTick>
 800c07c:	4602      	mov	r2, r0
 800c07e:	693b      	ldr	r3, [r7, #16]
 800c080:	1ad3      	subs	r3, r2, r3
 800c082:	2b64      	cmp	r3, #100	; 0x64
 800c084:	d901      	bls.n	800c08a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800c086:	2303      	movs	r3, #3
 800c088:	e207      	b.n	800c49a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c08a:	4b5b      	ldr	r3, [pc, #364]	; (800c1f8 <HAL_RCC_OscConfig+0x240>)
 800c08c:	681b      	ldr	r3, [r3, #0]
 800c08e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c092:	2b00      	cmp	r3, #0
 800c094:	d0f0      	beq.n	800c078 <HAL_RCC_OscConfig+0xc0>
 800c096:	e014      	b.n	800c0c2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c098:	f7fd fab4 	bl	8009604 <HAL_GetTick>
 800c09c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800c09e:	e008      	b.n	800c0b2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800c0a0:	f7fd fab0 	bl	8009604 <HAL_GetTick>
 800c0a4:	4602      	mov	r2, r0
 800c0a6:	693b      	ldr	r3, [r7, #16]
 800c0a8:	1ad3      	subs	r3, r2, r3
 800c0aa:	2b64      	cmp	r3, #100	; 0x64
 800c0ac:	d901      	bls.n	800c0b2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800c0ae:	2303      	movs	r3, #3
 800c0b0:	e1f3      	b.n	800c49a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800c0b2:	4b51      	ldr	r3, [pc, #324]	; (800c1f8 <HAL_RCC_OscConfig+0x240>)
 800c0b4:	681b      	ldr	r3, [r3, #0]
 800c0b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c0ba:	2b00      	cmp	r3, #0
 800c0bc:	d1f0      	bne.n	800c0a0 <HAL_RCC_OscConfig+0xe8>
 800c0be:	e000      	b.n	800c0c2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c0c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	681b      	ldr	r3, [r3, #0]
 800c0c6:	f003 0302 	and.w	r3, r3, #2
 800c0ca:	2b00      	cmp	r3, #0
 800c0cc:	d063      	beq.n	800c196 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800c0ce:	4b4a      	ldr	r3, [pc, #296]	; (800c1f8 <HAL_RCC_OscConfig+0x240>)
 800c0d0:	689b      	ldr	r3, [r3, #8]
 800c0d2:	f003 030c 	and.w	r3, r3, #12
 800c0d6:	2b00      	cmp	r3, #0
 800c0d8:	d00b      	beq.n	800c0f2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800c0da:	4b47      	ldr	r3, [pc, #284]	; (800c1f8 <HAL_RCC_OscConfig+0x240>)
 800c0dc:	689b      	ldr	r3, [r3, #8]
 800c0de:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800c0e2:	2b08      	cmp	r3, #8
 800c0e4:	d11c      	bne.n	800c120 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800c0e6:	4b44      	ldr	r3, [pc, #272]	; (800c1f8 <HAL_RCC_OscConfig+0x240>)
 800c0e8:	685b      	ldr	r3, [r3, #4]
 800c0ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c0ee:	2b00      	cmp	r3, #0
 800c0f0:	d116      	bne.n	800c120 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800c0f2:	4b41      	ldr	r3, [pc, #260]	; (800c1f8 <HAL_RCC_OscConfig+0x240>)
 800c0f4:	681b      	ldr	r3, [r3, #0]
 800c0f6:	f003 0302 	and.w	r3, r3, #2
 800c0fa:	2b00      	cmp	r3, #0
 800c0fc:	d005      	beq.n	800c10a <HAL_RCC_OscConfig+0x152>
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	68db      	ldr	r3, [r3, #12]
 800c102:	2b01      	cmp	r3, #1
 800c104:	d001      	beq.n	800c10a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800c106:	2301      	movs	r3, #1
 800c108:	e1c7      	b.n	800c49a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c10a:	4b3b      	ldr	r3, [pc, #236]	; (800c1f8 <HAL_RCC_OscConfig+0x240>)
 800c10c:	681b      	ldr	r3, [r3, #0]
 800c10e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	691b      	ldr	r3, [r3, #16]
 800c116:	00db      	lsls	r3, r3, #3
 800c118:	4937      	ldr	r1, [pc, #220]	; (800c1f8 <HAL_RCC_OscConfig+0x240>)
 800c11a:	4313      	orrs	r3, r2
 800c11c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800c11e:	e03a      	b.n	800c196 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	68db      	ldr	r3, [r3, #12]
 800c124:	2b00      	cmp	r3, #0
 800c126:	d020      	beq.n	800c16a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800c128:	4b34      	ldr	r3, [pc, #208]	; (800c1fc <HAL_RCC_OscConfig+0x244>)
 800c12a:	2201      	movs	r2, #1
 800c12c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c12e:	f7fd fa69 	bl	8009604 <HAL_GetTick>
 800c132:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c134:	e008      	b.n	800c148 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800c136:	f7fd fa65 	bl	8009604 <HAL_GetTick>
 800c13a:	4602      	mov	r2, r0
 800c13c:	693b      	ldr	r3, [r7, #16]
 800c13e:	1ad3      	subs	r3, r2, r3
 800c140:	2b02      	cmp	r3, #2
 800c142:	d901      	bls.n	800c148 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800c144:	2303      	movs	r3, #3
 800c146:	e1a8      	b.n	800c49a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c148:	4b2b      	ldr	r3, [pc, #172]	; (800c1f8 <HAL_RCC_OscConfig+0x240>)
 800c14a:	681b      	ldr	r3, [r3, #0]
 800c14c:	f003 0302 	and.w	r3, r3, #2
 800c150:	2b00      	cmp	r3, #0
 800c152:	d0f0      	beq.n	800c136 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c154:	4b28      	ldr	r3, [pc, #160]	; (800c1f8 <HAL_RCC_OscConfig+0x240>)
 800c156:	681b      	ldr	r3, [r3, #0]
 800c158:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	691b      	ldr	r3, [r3, #16]
 800c160:	00db      	lsls	r3, r3, #3
 800c162:	4925      	ldr	r1, [pc, #148]	; (800c1f8 <HAL_RCC_OscConfig+0x240>)
 800c164:	4313      	orrs	r3, r2
 800c166:	600b      	str	r3, [r1, #0]
 800c168:	e015      	b.n	800c196 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800c16a:	4b24      	ldr	r3, [pc, #144]	; (800c1fc <HAL_RCC_OscConfig+0x244>)
 800c16c:	2200      	movs	r2, #0
 800c16e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c170:	f7fd fa48 	bl	8009604 <HAL_GetTick>
 800c174:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800c176:	e008      	b.n	800c18a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800c178:	f7fd fa44 	bl	8009604 <HAL_GetTick>
 800c17c:	4602      	mov	r2, r0
 800c17e:	693b      	ldr	r3, [r7, #16]
 800c180:	1ad3      	subs	r3, r2, r3
 800c182:	2b02      	cmp	r3, #2
 800c184:	d901      	bls.n	800c18a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800c186:	2303      	movs	r3, #3
 800c188:	e187      	b.n	800c49a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800c18a:	4b1b      	ldr	r3, [pc, #108]	; (800c1f8 <HAL_RCC_OscConfig+0x240>)
 800c18c:	681b      	ldr	r3, [r3, #0]
 800c18e:	f003 0302 	and.w	r3, r3, #2
 800c192:	2b00      	cmp	r3, #0
 800c194:	d1f0      	bne.n	800c178 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	681b      	ldr	r3, [r3, #0]
 800c19a:	f003 0308 	and.w	r3, r3, #8
 800c19e:	2b00      	cmp	r3, #0
 800c1a0:	d036      	beq.n	800c210 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	695b      	ldr	r3, [r3, #20]
 800c1a6:	2b00      	cmp	r3, #0
 800c1a8:	d016      	beq.n	800c1d8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800c1aa:	4b15      	ldr	r3, [pc, #84]	; (800c200 <HAL_RCC_OscConfig+0x248>)
 800c1ac:	2201      	movs	r2, #1
 800c1ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c1b0:	f7fd fa28 	bl	8009604 <HAL_GetTick>
 800c1b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800c1b6:	e008      	b.n	800c1ca <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800c1b8:	f7fd fa24 	bl	8009604 <HAL_GetTick>
 800c1bc:	4602      	mov	r2, r0
 800c1be:	693b      	ldr	r3, [r7, #16]
 800c1c0:	1ad3      	subs	r3, r2, r3
 800c1c2:	2b02      	cmp	r3, #2
 800c1c4:	d901      	bls.n	800c1ca <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800c1c6:	2303      	movs	r3, #3
 800c1c8:	e167      	b.n	800c49a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800c1ca:	4b0b      	ldr	r3, [pc, #44]	; (800c1f8 <HAL_RCC_OscConfig+0x240>)
 800c1cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c1ce:	f003 0302 	and.w	r3, r3, #2
 800c1d2:	2b00      	cmp	r3, #0
 800c1d4:	d0f0      	beq.n	800c1b8 <HAL_RCC_OscConfig+0x200>
 800c1d6:	e01b      	b.n	800c210 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800c1d8:	4b09      	ldr	r3, [pc, #36]	; (800c200 <HAL_RCC_OscConfig+0x248>)
 800c1da:	2200      	movs	r2, #0
 800c1dc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800c1de:	f7fd fa11 	bl	8009604 <HAL_GetTick>
 800c1e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800c1e4:	e00e      	b.n	800c204 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800c1e6:	f7fd fa0d 	bl	8009604 <HAL_GetTick>
 800c1ea:	4602      	mov	r2, r0
 800c1ec:	693b      	ldr	r3, [r7, #16]
 800c1ee:	1ad3      	subs	r3, r2, r3
 800c1f0:	2b02      	cmp	r3, #2
 800c1f2:	d907      	bls.n	800c204 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800c1f4:	2303      	movs	r3, #3
 800c1f6:	e150      	b.n	800c49a <HAL_RCC_OscConfig+0x4e2>
 800c1f8:	40023800 	.word	0x40023800
 800c1fc:	42470000 	.word	0x42470000
 800c200:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800c204:	4b88      	ldr	r3, [pc, #544]	; (800c428 <HAL_RCC_OscConfig+0x470>)
 800c206:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c208:	f003 0302 	and.w	r3, r3, #2
 800c20c:	2b00      	cmp	r3, #0
 800c20e:	d1ea      	bne.n	800c1e6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	681b      	ldr	r3, [r3, #0]
 800c214:	f003 0304 	and.w	r3, r3, #4
 800c218:	2b00      	cmp	r3, #0
 800c21a:	f000 8097 	beq.w	800c34c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800c21e:	2300      	movs	r3, #0
 800c220:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800c222:	4b81      	ldr	r3, [pc, #516]	; (800c428 <HAL_RCC_OscConfig+0x470>)
 800c224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c226:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c22a:	2b00      	cmp	r3, #0
 800c22c:	d10f      	bne.n	800c24e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800c22e:	2300      	movs	r3, #0
 800c230:	60bb      	str	r3, [r7, #8]
 800c232:	4b7d      	ldr	r3, [pc, #500]	; (800c428 <HAL_RCC_OscConfig+0x470>)
 800c234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c236:	4a7c      	ldr	r2, [pc, #496]	; (800c428 <HAL_RCC_OscConfig+0x470>)
 800c238:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c23c:	6413      	str	r3, [r2, #64]	; 0x40
 800c23e:	4b7a      	ldr	r3, [pc, #488]	; (800c428 <HAL_RCC_OscConfig+0x470>)
 800c240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c242:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c246:	60bb      	str	r3, [r7, #8]
 800c248:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800c24a:	2301      	movs	r3, #1
 800c24c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800c24e:	4b77      	ldr	r3, [pc, #476]	; (800c42c <HAL_RCC_OscConfig+0x474>)
 800c250:	681b      	ldr	r3, [r3, #0]
 800c252:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c256:	2b00      	cmp	r3, #0
 800c258:	d118      	bne.n	800c28c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800c25a:	4b74      	ldr	r3, [pc, #464]	; (800c42c <HAL_RCC_OscConfig+0x474>)
 800c25c:	681b      	ldr	r3, [r3, #0]
 800c25e:	4a73      	ldr	r2, [pc, #460]	; (800c42c <HAL_RCC_OscConfig+0x474>)
 800c260:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c264:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800c266:	f7fd f9cd 	bl	8009604 <HAL_GetTick>
 800c26a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800c26c:	e008      	b.n	800c280 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c26e:	f7fd f9c9 	bl	8009604 <HAL_GetTick>
 800c272:	4602      	mov	r2, r0
 800c274:	693b      	ldr	r3, [r7, #16]
 800c276:	1ad3      	subs	r3, r2, r3
 800c278:	2b02      	cmp	r3, #2
 800c27a:	d901      	bls.n	800c280 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800c27c:	2303      	movs	r3, #3
 800c27e:	e10c      	b.n	800c49a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800c280:	4b6a      	ldr	r3, [pc, #424]	; (800c42c <HAL_RCC_OscConfig+0x474>)
 800c282:	681b      	ldr	r3, [r3, #0]
 800c284:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c288:	2b00      	cmp	r3, #0
 800c28a:	d0f0      	beq.n	800c26e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	689b      	ldr	r3, [r3, #8]
 800c290:	2b01      	cmp	r3, #1
 800c292:	d106      	bne.n	800c2a2 <HAL_RCC_OscConfig+0x2ea>
 800c294:	4b64      	ldr	r3, [pc, #400]	; (800c428 <HAL_RCC_OscConfig+0x470>)
 800c296:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c298:	4a63      	ldr	r2, [pc, #396]	; (800c428 <HAL_RCC_OscConfig+0x470>)
 800c29a:	f043 0301 	orr.w	r3, r3, #1
 800c29e:	6713      	str	r3, [r2, #112]	; 0x70
 800c2a0:	e01c      	b.n	800c2dc <HAL_RCC_OscConfig+0x324>
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	689b      	ldr	r3, [r3, #8]
 800c2a6:	2b05      	cmp	r3, #5
 800c2a8:	d10c      	bne.n	800c2c4 <HAL_RCC_OscConfig+0x30c>
 800c2aa:	4b5f      	ldr	r3, [pc, #380]	; (800c428 <HAL_RCC_OscConfig+0x470>)
 800c2ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c2ae:	4a5e      	ldr	r2, [pc, #376]	; (800c428 <HAL_RCC_OscConfig+0x470>)
 800c2b0:	f043 0304 	orr.w	r3, r3, #4
 800c2b4:	6713      	str	r3, [r2, #112]	; 0x70
 800c2b6:	4b5c      	ldr	r3, [pc, #368]	; (800c428 <HAL_RCC_OscConfig+0x470>)
 800c2b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c2ba:	4a5b      	ldr	r2, [pc, #364]	; (800c428 <HAL_RCC_OscConfig+0x470>)
 800c2bc:	f043 0301 	orr.w	r3, r3, #1
 800c2c0:	6713      	str	r3, [r2, #112]	; 0x70
 800c2c2:	e00b      	b.n	800c2dc <HAL_RCC_OscConfig+0x324>
 800c2c4:	4b58      	ldr	r3, [pc, #352]	; (800c428 <HAL_RCC_OscConfig+0x470>)
 800c2c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c2c8:	4a57      	ldr	r2, [pc, #348]	; (800c428 <HAL_RCC_OscConfig+0x470>)
 800c2ca:	f023 0301 	bic.w	r3, r3, #1
 800c2ce:	6713      	str	r3, [r2, #112]	; 0x70
 800c2d0:	4b55      	ldr	r3, [pc, #340]	; (800c428 <HAL_RCC_OscConfig+0x470>)
 800c2d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c2d4:	4a54      	ldr	r2, [pc, #336]	; (800c428 <HAL_RCC_OscConfig+0x470>)
 800c2d6:	f023 0304 	bic.w	r3, r3, #4
 800c2da:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	689b      	ldr	r3, [r3, #8]
 800c2e0:	2b00      	cmp	r3, #0
 800c2e2:	d015      	beq.n	800c310 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c2e4:	f7fd f98e 	bl	8009604 <HAL_GetTick>
 800c2e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c2ea:	e00a      	b.n	800c302 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800c2ec:	f7fd f98a 	bl	8009604 <HAL_GetTick>
 800c2f0:	4602      	mov	r2, r0
 800c2f2:	693b      	ldr	r3, [r7, #16]
 800c2f4:	1ad3      	subs	r3, r2, r3
 800c2f6:	f241 3288 	movw	r2, #5000	; 0x1388
 800c2fa:	4293      	cmp	r3, r2
 800c2fc:	d901      	bls.n	800c302 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800c2fe:	2303      	movs	r3, #3
 800c300:	e0cb      	b.n	800c49a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c302:	4b49      	ldr	r3, [pc, #292]	; (800c428 <HAL_RCC_OscConfig+0x470>)
 800c304:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c306:	f003 0302 	and.w	r3, r3, #2
 800c30a:	2b00      	cmp	r3, #0
 800c30c:	d0ee      	beq.n	800c2ec <HAL_RCC_OscConfig+0x334>
 800c30e:	e014      	b.n	800c33a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800c310:	f7fd f978 	bl	8009604 <HAL_GetTick>
 800c314:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800c316:	e00a      	b.n	800c32e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800c318:	f7fd f974 	bl	8009604 <HAL_GetTick>
 800c31c:	4602      	mov	r2, r0
 800c31e:	693b      	ldr	r3, [r7, #16]
 800c320:	1ad3      	subs	r3, r2, r3
 800c322:	f241 3288 	movw	r2, #5000	; 0x1388
 800c326:	4293      	cmp	r3, r2
 800c328:	d901      	bls.n	800c32e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800c32a:	2303      	movs	r3, #3
 800c32c:	e0b5      	b.n	800c49a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800c32e:	4b3e      	ldr	r3, [pc, #248]	; (800c428 <HAL_RCC_OscConfig+0x470>)
 800c330:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c332:	f003 0302 	and.w	r3, r3, #2
 800c336:	2b00      	cmp	r3, #0
 800c338:	d1ee      	bne.n	800c318 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800c33a:	7dfb      	ldrb	r3, [r7, #23]
 800c33c:	2b01      	cmp	r3, #1
 800c33e:	d105      	bne.n	800c34c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800c340:	4b39      	ldr	r3, [pc, #228]	; (800c428 <HAL_RCC_OscConfig+0x470>)
 800c342:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c344:	4a38      	ldr	r2, [pc, #224]	; (800c428 <HAL_RCC_OscConfig+0x470>)
 800c346:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c34a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	699b      	ldr	r3, [r3, #24]
 800c350:	2b00      	cmp	r3, #0
 800c352:	f000 80a1 	beq.w	800c498 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800c356:	4b34      	ldr	r3, [pc, #208]	; (800c428 <HAL_RCC_OscConfig+0x470>)
 800c358:	689b      	ldr	r3, [r3, #8]
 800c35a:	f003 030c 	and.w	r3, r3, #12
 800c35e:	2b08      	cmp	r3, #8
 800c360:	d05c      	beq.n	800c41c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	699b      	ldr	r3, [r3, #24]
 800c366:	2b02      	cmp	r3, #2
 800c368:	d141      	bne.n	800c3ee <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c36a:	4b31      	ldr	r3, [pc, #196]	; (800c430 <HAL_RCC_OscConfig+0x478>)
 800c36c:	2200      	movs	r2, #0
 800c36e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c370:	f7fd f948 	bl	8009604 <HAL_GetTick>
 800c374:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c376:	e008      	b.n	800c38a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800c378:	f7fd f944 	bl	8009604 <HAL_GetTick>
 800c37c:	4602      	mov	r2, r0
 800c37e:	693b      	ldr	r3, [r7, #16]
 800c380:	1ad3      	subs	r3, r2, r3
 800c382:	2b02      	cmp	r3, #2
 800c384:	d901      	bls.n	800c38a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800c386:	2303      	movs	r3, #3
 800c388:	e087      	b.n	800c49a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c38a:	4b27      	ldr	r3, [pc, #156]	; (800c428 <HAL_RCC_OscConfig+0x470>)
 800c38c:	681b      	ldr	r3, [r3, #0]
 800c38e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c392:	2b00      	cmp	r3, #0
 800c394:	d1f0      	bne.n	800c378 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	69da      	ldr	r2, [r3, #28]
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	6a1b      	ldr	r3, [r3, #32]
 800c39e:	431a      	orrs	r2, r3
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c3a4:	019b      	lsls	r3, r3, #6
 800c3a6:	431a      	orrs	r2, r3
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c3ac:	085b      	lsrs	r3, r3, #1
 800c3ae:	3b01      	subs	r3, #1
 800c3b0:	041b      	lsls	r3, r3, #16
 800c3b2:	431a      	orrs	r2, r3
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c3b8:	061b      	lsls	r3, r3, #24
 800c3ba:	491b      	ldr	r1, [pc, #108]	; (800c428 <HAL_RCC_OscConfig+0x470>)
 800c3bc:	4313      	orrs	r3, r2
 800c3be:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800c3c0:	4b1b      	ldr	r3, [pc, #108]	; (800c430 <HAL_RCC_OscConfig+0x478>)
 800c3c2:	2201      	movs	r2, #1
 800c3c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c3c6:	f7fd f91d 	bl	8009604 <HAL_GetTick>
 800c3ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800c3cc:	e008      	b.n	800c3e0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800c3ce:	f7fd f919 	bl	8009604 <HAL_GetTick>
 800c3d2:	4602      	mov	r2, r0
 800c3d4:	693b      	ldr	r3, [r7, #16]
 800c3d6:	1ad3      	subs	r3, r2, r3
 800c3d8:	2b02      	cmp	r3, #2
 800c3da:	d901      	bls.n	800c3e0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800c3dc:	2303      	movs	r3, #3
 800c3de:	e05c      	b.n	800c49a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800c3e0:	4b11      	ldr	r3, [pc, #68]	; (800c428 <HAL_RCC_OscConfig+0x470>)
 800c3e2:	681b      	ldr	r3, [r3, #0]
 800c3e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c3e8:	2b00      	cmp	r3, #0
 800c3ea:	d0f0      	beq.n	800c3ce <HAL_RCC_OscConfig+0x416>
 800c3ec:	e054      	b.n	800c498 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c3ee:	4b10      	ldr	r3, [pc, #64]	; (800c430 <HAL_RCC_OscConfig+0x478>)
 800c3f0:	2200      	movs	r2, #0
 800c3f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c3f4:	f7fd f906 	bl	8009604 <HAL_GetTick>
 800c3f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c3fa:	e008      	b.n	800c40e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800c3fc:	f7fd f902 	bl	8009604 <HAL_GetTick>
 800c400:	4602      	mov	r2, r0
 800c402:	693b      	ldr	r3, [r7, #16]
 800c404:	1ad3      	subs	r3, r2, r3
 800c406:	2b02      	cmp	r3, #2
 800c408:	d901      	bls.n	800c40e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800c40a:	2303      	movs	r3, #3
 800c40c:	e045      	b.n	800c49a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c40e:	4b06      	ldr	r3, [pc, #24]	; (800c428 <HAL_RCC_OscConfig+0x470>)
 800c410:	681b      	ldr	r3, [r3, #0]
 800c412:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c416:	2b00      	cmp	r3, #0
 800c418:	d1f0      	bne.n	800c3fc <HAL_RCC_OscConfig+0x444>
 800c41a:	e03d      	b.n	800c498 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	699b      	ldr	r3, [r3, #24]
 800c420:	2b01      	cmp	r3, #1
 800c422:	d107      	bne.n	800c434 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800c424:	2301      	movs	r3, #1
 800c426:	e038      	b.n	800c49a <HAL_RCC_OscConfig+0x4e2>
 800c428:	40023800 	.word	0x40023800
 800c42c:	40007000 	.word	0x40007000
 800c430:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800c434:	4b1b      	ldr	r3, [pc, #108]	; (800c4a4 <HAL_RCC_OscConfig+0x4ec>)
 800c436:	685b      	ldr	r3, [r3, #4]
 800c438:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	699b      	ldr	r3, [r3, #24]
 800c43e:	2b01      	cmp	r3, #1
 800c440:	d028      	beq.n	800c494 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800c442:	68fb      	ldr	r3, [r7, #12]
 800c444:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800c44c:	429a      	cmp	r2, r3
 800c44e:	d121      	bne.n	800c494 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800c450:	68fb      	ldr	r3, [r7, #12]
 800c452:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800c45a:	429a      	cmp	r2, r3
 800c45c:	d11a      	bne.n	800c494 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800c45e:	68fa      	ldr	r2, [r7, #12]
 800c460:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800c464:	4013      	ands	r3, r2
 800c466:	687a      	ldr	r2, [r7, #4]
 800c468:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800c46a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800c46c:	4293      	cmp	r3, r2
 800c46e:	d111      	bne.n	800c494 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800c470:	68fb      	ldr	r3, [r7, #12]
 800c472:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c47a:	085b      	lsrs	r3, r3, #1
 800c47c:	3b01      	subs	r3, #1
 800c47e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800c480:	429a      	cmp	r2, r3
 800c482:	d107      	bne.n	800c494 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800c484:	68fb      	ldr	r3, [r7, #12]
 800c486:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c48e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800c490:	429a      	cmp	r2, r3
 800c492:	d001      	beq.n	800c498 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800c494:	2301      	movs	r3, #1
 800c496:	e000      	b.n	800c49a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800c498:	2300      	movs	r3, #0
}
 800c49a:	4618      	mov	r0, r3
 800c49c:	3718      	adds	r7, #24
 800c49e:	46bd      	mov	sp, r7
 800c4a0:	bd80      	pop	{r7, pc}
 800c4a2:	bf00      	nop
 800c4a4:	40023800 	.word	0x40023800

0800c4a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800c4a8:	b580      	push	{r7, lr}
 800c4aa:	b084      	sub	sp, #16
 800c4ac:	af00      	add	r7, sp, #0
 800c4ae:	6078      	str	r0, [r7, #4]
 800c4b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	2b00      	cmp	r3, #0
 800c4b6:	d101      	bne.n	800c4bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800c4b8:	2301      	movs	r3, #1
 800c4ba:	e0cc      	b.n	800c656 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800c4bc:	4b68      	ldr	r3, [pc, #416]	; (800c660 <HAL_RCC_ClockConfig+0x1b8>)
 800c4be:	681b      	ldr	r3, [r3, #0]
 800c4c0:	f003 0307 	and.w	r3, r3, #7
 800c4c4:	683a      	ldr	r2, [r7, #0]
 800c4c6:	429a      	cmp	r2, r3
 800c4c8:	d90c      	bls.n	800c4e4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c4ca:	4b65      	ldr	r3, [pc, #404]	; (800c660 <HAL_RCC_ClockConfig+0x1b8>)
 800c4cc:	683a      	ldr	r2, [r7, #0]
 800c4ce:	b2d2      	uxtb	r2, r2
 800c4d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800c4d2:	4b63      	ldr	r3, [pc, #396]	; (800c660 <HAL_RCC_ClockConfig+0x1b8>)
 800c4d4:	681b      	ldr	r3, [r3, #0]
 800c4d6:	f003 0307 	and.w	r3, r3, #7
 800c4da:	683a      	ldr	r2, [r7, #0]
 800c4dc:	429a      	cmp	r2, r3
 800c4de:	d001      	beq.n	800c4e4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800c4e0:	2301      	movs	r3, #1
 800c4e2:	e0b8      	b.n	800c656 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	681b      	ldr	r3, [r3, #0]
 800c4e8:	f003 0302 	and.w	r3, r3, #2
 800c4ec:	2b00      	cmp	r3, #0
 800c4ee:	d020      	beq.n	800c532 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	681b      	ldr	r3, [r3, #0]
 800c4f4:	f003 0304 	and.w	r3, r3, #4
 800c4f8:	2b00      	cmp	r3, #0
 800c4fa:	d005      	beq.n	800c508 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800c4fc:	4b59      	ldr	r3, [pc, #356]	; (800c664 <HAL_RCC_ClockConfig+0x1bc>)
 800c4fe:	689b      	ldr	r3, [r3, #8]
 800c500:	4a58      	ldr	r2, [pc, #352]	; (800c664 <HAL_RCC_ClockConfig+0x1bc>)
 800c502:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800c506:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	681b      	ldr	r3, [r3, #0]
 800c50c:	f003 0308 	and.w	r3, r3, #8
 800c510:	2b00      	cmp	r3, #0
 800c512:	d005      	beq.n	800c520 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800c514:	4b53      	ldr	r3, [pc, #332]	; (800c664 <HAL_RCC_ClockConfig+0x1bc>)
 800c516:	689b      	ldr	r3, [r3, #8]
 800c518:	4a52      	ldr	r2, [pc, #328]	; (800c664 <HAL_RCC_ClockConfig+0x1bc>)
 800c51a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800c51e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800c520:	4b50      	ldr	r3, [pc, #320]	; (800c664 <HAL_RCC_ClockConfig+0x1bc>)
 800c522:	689b      	ldr	r3, [r3, #8]
 800c524:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	689b      	ldr	r3, [r3, #8]
 800c52c:	494d      	ldr	r1, [pc, #308]	; (800c664 <HAL_RCC_ClockConfig+0x1bc>)
 800c52e:	4313      	orrs	r3, r2
 800c530:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	681b      	ldr	r3, [r3, #0]
 800c536:	f003 0301 	and.w	r3, r3, #1
 800c53a:	2b00      	cmp	r3, #0
 800c53c:	d044      	beq.n	800c5c8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	685b      	ldr	r3, [r3, #4]
 800c542:	2b01      	cmp	r3, #1
 800c544:	d107      	bne.n	800c556 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c546:	4b47      	ldr	r3, [pc, #284]	; (800c664 <HAL_RCC_ClockConfig+0x1bc>)
 800c548:	681b      	ldr	r3, [r3, #0]
 800c54a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c54e:	2b00      	cmp	r3, #0
 800c550:	d119      	bne.n	800c586 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800c552:	2301      	movs	r3, #1
 800c554:	e07f      	b.n	800c656 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	685b      	ldr	r3, [r3, #4]
 800c55a:	2b02      	cmp	r3, #2
 800c55c:	d003      	beq.n	800c566 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800c562:	2b03      	cmp	r3, #3
 800c564:	d107      	bne.n	800c576 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800c566:	4b3f      	ldr	r3, [pc, #252]	; (800c664 <HAL_RCC_ClockConfig+0x1bc>)
 800c568:	681b      	ldr	r3, [r3, #0]
 800c56a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c56e:	2b00      	cmp	r3, #0
 800c570:	d109      	bne.n	800c586 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800c572:	2301      	movs	r3, #1
 800c574:	e06f      	b.n	800c656 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c576:	4b3b      	ldr	r3, [pc, #236]	; (800c664 <HAL_RCC_ClockConfig+0x1bc>)
 800c578:	681b      	ldr	r3, [r3, #0]
 800c57a:	f003 0302 	and.w	r3, r3, #2
 800c57e:	2b00      	cmp	r3, #0
 800c580:	d101      	bne.n	800c586 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800c582:	2301      	movs	r3, #1
 800c584:	e067      	b.n	800c656 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800c586:	4b37      	ldr	r3, [pc, #220]	; (800c664 <HAL_RCC_ClockConfig+0x1bc>)
 800c588:	689b      	ldr	r3, [r3, #8]
 800c58a:	f023 0203 	bic.w	r2, r3, #3
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	685b      	ldr	r3, [r3, #4]
 800c592:	4934      	ldr	r1, [pc, #208]	; (800c664 <HAL_RCC_ClockConfig+0x1bc>)
 800c594:	4313      	orrs	r3, r2
 800c596:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800c598:	f7fd f834 	bl	8009604 <HAL_GetTick>
 800c59c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c59e:	e00a      	b.n	800c5b6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800c5a0:	f7fd f830 	bl	8009604 <HAL_GetTick>
 800c5a4:	4602      	mov	r2, r0
 800c5a6:	68fb      	ldr	r3, [r7, #12]
 800c5a8:	1ad3      	subs	r3, r2, r3
 800c5aa:	f241 3288 	movw	r2, #5000	; 0x1388
 800c5ae:	4293      	cmp	r3, r2
 800c5b0:	d901      	bls.n	800c5b6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800c5b2:	2303      	movs	r3, #3
 800c5b4:	e04f      	b.n	800c656 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c5b6:	4b2b      	ldr	r3, [pc, #172]	; (800c664 <HAL_RCC_ClockConfig+0x1bc>)
 800c5b8:	689b      	ldr	r3, [r3, #8]
 800c5ba:	f003 020c 	and.w	r2, r3, #12
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	685b      	ldr	r3, [r3, #4]
 800c5c2:	009b      	lsls	r3, r3, #2
 800c5c4:	429a      	cmp	r2, r3
 800c5c6:	d1eb      	bne.n	800c5a0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800c5c8:	4b25      	ldr	r3, [pc, #148]	; (800c660 <HAL_RCC_ClockConfig+0x1b8>)
 800c5ca:	681b      	ldr	r3, [r3, #0]
 800c5cc:	f003 0307 	and.w	r3, r3, #7
 800c5d0:	683a      	ldr	r2, [r7, #0]
 800c5d2:	429a      	cmp	r2, r3
 800c5d4:	d20c      	bcs.n	800c5f0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c5d6:	4b22      	ldr	r3, [pc, #136]	; (800c660 <HAL_RCC_ClockConfig+0x1b8>)
 800c5d8:	683a      	ldr	r2, [r7, #0]
 800c5da:	b2d2      	uxtb	r2, r2
 800c5dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800c5de:	4b20      	ldr	r3, [pc, #128]	; (800c660 <HAL_RCC_ClockConfig+0x1b8>)
 800c5e0:	681b      	ldr	r3, [r3, #0]
 800c5e2:	f003 0307 	and.w	r3, r3, #7
 800c5e6:	683a      	ldr	r2, [r7, #0]
 800c5e8:	429a      	cmp	r2, r3
 800c5ea:	d001      	beq.n	800c5f0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800c5ec:	2301      	movs	r3, #1
 800c5ee:	e032      	b.n	800c656 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	681b      	ldr	r3, [r3, #0]
 800c5f4:	f003 0304 	and.w	r3, r3, #4
 800c5f8:	2b00      	cmp	r3, #0
 800c5fa:	d008      	beq.n	800c60e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800c5fc:	4b19      	ldr	r3, [pc, #100]	; (800c664 <HAL_RCC_ClockConfig+0x1bc>)
 800c5fe:	689b      	ldr	r3, [r3, #8]
 800c600:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	68db      	ldr	r3, [r3, #12]
 800c608:	4916      	ldr	r1, [pc, #88]	; (800c664 <HAL_RCC_ClockConfig+0x1bc>)
 800c60a:	4313      	orrs	r3, r2
 800c60c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	681b      	ldr	r3, [r3, #0]
 800c612:	f003 0308 	and.w	r3, r3, #8
 800c616:	2b00      	cmp	r3, #0
 800c618:	d009      	beq.n	800c62e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800c61a:	4b12      	ldr	r3, [pc, #72]	; (800c664 <HAL_RCC_ClockConfig+0x1bc>)
 800c61c:	689b      	ldr	r3, [r3, #8]
 800c61e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	691b      	ldr	r3, [r3, #16]
 800c626:	00db      	lsls	r3, r3, #3
 800c628:	490e      	ldr	r1, [pc, #56]	; (800c664 <HAL_RCC_ClockConfig+0x1bc>)
 800c62a:	4313      	orrs	r3, r2
 800c62c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800c62e:	f000 f821 	bl	800c674 <HAL_RCC_GetSysClockFreq>
 800c632:	4602      	mov	r2, r0
 800c634:	4b0b      	ldr	r3, [pc, #44]	; (800c664 <HAL_RCC_ClockConfig+0x1bc>)
 800c636:	689b      	ldr	r3, [r3, #8]
 800c638:	091b      	lsrs	r3, r3, #4
 800c63a:	f003 030f 	and.w	r3, r3, #15
 800c63e:	490a      	ldr	r1, [pc, #40]	; (800c668 <HAL_RCC_ClockConfig+0x1c0>)
 800c640:	5ccb      	ldrb	r3, [r1, r3]
 800c642:	fa22 f303 	lsr.w	r3, r2, r3
 800c646:	4a09      	ldr	r2, [pc, #36]	; (800c66c <HAL_RCC_ClockConfig+0x1c4>)
 800c648:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800c64a:	4b09      	ldr	r3, [pc, #36]	; (800c670 <HAL_RCC_ClockConfig+0x1c8>)
 800c64c:	681b      	ldr	r3, [r3, #0]
 800c64e:	4618      	mov	r0, r3
 800c650:	f7fc ff94 	bl	800957c <HAL_InitTick>

  return HAL_OK;
 800c654:	2300      	movs	r3, #0
}
 800c656:	4618      	mov	r0, r3
 800c658:	3710      	adds	r7, #16
 800c65a:	46bd      	mov	sp, r7
 800c65c:	bd80      	pop	{r7, pc}
 800c65e:	bf00      	nop
 800c660:	40023c00 	.word	0x40023c00
 800c664:	40023800 	.word	0x40023800
 800c668:	08012ebc 	.word	0x08012ebc
 800c66c:	20000000 	.word	0x20000000
 800c670:	20000028 	.word	0x20000028

0800c674 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800c674:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c678:	b090      	sub	sp, #64	; 0x40
 800c67a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800c67c:	2300      	movs	r3, #0
 800c67e:	637b      	str	r3, [r7, #52]	; 0x34
 800c680:	2300      	movs	r3, #0
 800c682:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c684:	2300      	movs	r3, #0
 800c686:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 800c688:	2300      	movs	r3, #0
 800c68a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800c68c:	4b59      	ldr	r3, [pc, #356]	; (800c7f4 <HAL_RCC_GetSysClockFreq+0x180>)
 800c68e:	689b      	ldr	r3, [r3, #8]
 800c690:	f003 030c 	and.w	r3, r3, #12
 800c694:	2b08      	cmp	r3, #8
 800c696:	d00d      	beq.n	800c6b4 <HAL_RCC_GetSysClockFreq+0x40>
 800c698:	2b08      	cmp	r3, #8
 800c69a:	f200 80a1 	bhi.w	800c7e0 <HAL_RCC_GetSysClockFreq+0x16c>
 800c69e:	2b00      	cmp	r3, #0
 800c6a0:	d002      	beq.n	800c6a8 <HAL_RCC_GetSysClockFreq+0x34>
 800c6a2:	2b04      	cmp	r3, #4
 800c6a4:	d003      	beq.n	800c6ae <HAL_RCC_GetSysClockFreq+0x3a>
 800c6a6:	e09b      	b.n	800c7e0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800c6a8:	4b53      	ldr	r3, [pc, #332]	; (800c7f8 <HAL_RCC_GetSysClockFreq+0x184>)
 800c6aa:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 800c6ac:	e09b      	b.n	800c7e6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800c6ae:	4b53      	ldr	r3, [pc, #332]	; (800c7fc <HAL_RCC_GetSysClockFreq+0x188>)
 800c6b0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800c6b2:	e098      	b.n	800c7e6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800c6b4:	4b4f      	ldr	r3, [pc, #316]	; (800c7f4 <HAL_RCC_GetSysClockFreq+0x180>)
 800c6b6:	685b      	ldr	r3, [r3, #4]
 800c6b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c6bc:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800c6be:	4b4d      	ldr	r3, [pc, #308]	; (800c7f4 <HAL_RCC_GetSysClockFreq+0x180>)
 800c6c0:	685b      	ldr	r3, [r3, #4]
 800c6c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c6c6:	2b00      	cmp	r3, #0
 800c6c8:	d028      	beq.n	800c71c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800c6ca:	4b4a      	ldr	r3, [pc, #296]	; (800c7f4 <HAL_RCC_GetSysClockFreq+0x180>)
 800c6cc:	685b      	ldr	r3, [r3, #4]
 800c6ce:	099b      	lsrs	r3, r3, #6
 800c6d0:	2200      	movs	r2, #0
 800c6d2:	623b      	str	r3, [r7, #32]
 800c6d4:	627a      	str	r2, [r7, #36]	; 0x24
 800c6d6:	6a3b      	ldr	r3, [r7, #32]
 800c6d8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800c6dc:	2100      	movs	r1, #0
 800c6de:	4b47      	ldr	r3, [pc, #284]	; (800c7fc <HAL_RCC_GetSysClockFreq+0x188>)
 800c6e0:	fb03 f201 	mul.w	r2, r3, r1
 800c6e4:	2300      	movs	r3, #0
 800c6e6:	fb00 f303 	mul.w	r3, r0, r3
 800c6ea:	4413      	add	r3, r2
 800c6ec:	4a43      	ldr	r2, [pc, #268]	; (800c7fc <HAL_RCC_GetSysClockFreq+0x188>)
 800c6ee:	fba0 1202 	umull	r1, r2, r0, r2
 800c6f2:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c6f4:	460a      	mov	r2, r1
 800c6f6:	62ba      	str	r2, [r7, #40]	; 0x28
 800c6f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c6fa:	4413      	add	r3, r2
 800c6fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c6fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c700:	2200      	movs	r2, #0
 800c702:	61bb      	str	r3, [r7, #24]
 800c704:	61fa      	str	r2, [r7, #28]
 800c706:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800c70a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800c70e:	f7fb fdb7 	bl	8008280 <__aeabi_uldivmod>
 800c712:	4602      	mov	r2, r0
 800c714:	460b      	mov	r3, r1
 800c716:	4613      	mov	r3, r2
 800c718:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c71a:	e053      	b.n	800c7c4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800c71c:	4b35      	ldr	r3, [pc, #212]	; (800c7f4 <HAL_RCC_GetSysClockFreq+0x180>)
 800c71e:	685b      	ldr	r3, [r3, #4]
 800c720:	099b      	lsrs	r3, r3, #6
 800c722:	2200      	movs	r2, #0
 800c724:	613b      	str	r3, [r7, #16]
 800c726:	617a      	str	r2, [r7, #20]
 800c728:	693b      	ldr	r3, [r7, #16]
 800c72a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800c72e:	f04f 0b00 	mov.w	fp, #0
 800c732:	4652      	mov	r2, sl
 800c734:	465b      	mov	r3, fp
 800c736:	f04f 0000 	mov.w	r0, #0
 800c73a:	f04f 0100 	mov.w	r1, #0
 800c73e:	0159      	lsls	r1, r3, #5
 800c740:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800c744:	0150      	lsls	r0, r2, #5
 800c746:	4602      	mov	r2, r0
 800c748:	460b      	mov	r3, r1
 800c74a:	ebb2 080a 	subs.w	r8, r2, sl
 800c74e:	eb63 090b 	sbc.w	r9, r3, fp
 800c752:	f04f 0200 	mov.w	r2, #0
 800c756:	f04f 0300 	mov.w	r3, #0
 800c75a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800c75e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800c762:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800c766:	ebb2 0408 	subs.w	r4, r2, r8
 800c76a:	eb63 0509 	sbc.w	r5, r3, r9
 800c76e:	f04f 0200 	mov.w	r2, #0
 800c772:	f04f 0300 	mov.w	r3, #0
 800c776:	00eb      	lsls	r3, r5, #3
 800c778:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800c77c:	00e2      	lsls	r2, r4, #3
 800c77e:	4614      	mov	r4, r2
 800c780:	461d      	mov	r5, r3
 800c782:	eb14 030a 	adds.w	r3, r4, sl
 800c786:	603b      	str	r3, [r7, #0]
 800c788:	eb45 030b 	adc.w	r3, r5, fp
 800c78c:	607b      	str	r3, [r7, #4]
 800c78e:	f04f 0200 	mov.w	r2, #0
 800c792:	f04f 0300 	mov.w	r3, #0
 800c796:	e9d7 4500 	ldrd	r4, r5, [r7]
 800c79a:	4629      	mov	r1, r5
 800c79c:	028b      	lsls	r3, r1, #10
 800c79e:	4621      	mov	r1, r4
 800c7a0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800c7a4:	4621      	mov	r1, r4
 800c7a6:	028a      	lsls	r2, r1, #10
 800c7a8:	4610      	mov	r0, r2
 800c7aa:	4619      	mov	r1, r3
 800c7ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c7ae:	2200      	movs	r2, #0
 800c7b0:	60bb      	str	r3, [r7, #8]
 800c7b2:	60fa      	str	r2, [r7, #12]
 800c7b4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800c7b8:	f7fb fd62 	bl	8008280 <__aeabi_uldivmod>
 800c7bc:	4602      	mov	r2, r0
 800c7be:	460b      	mov	r3, r1
 800c7c0:	4613      	mov	r3, r2
 800c7c2:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800c7c4:	4b0b      	ldr	r3, [pc, #44]	; (800c7f4 <HAL_RCC_GetSysClockFreq+0x180>)
 800c7c6:	685b      	ldr	r3, [r3, #4]
 800c7c8:	0c1b      	lsrs	r3, r3, #16
 800c7ca:	f003 0303 	and.w	r3, r3, #3
 800c7ce:	3301      	adds	r3, #1
 800c7d0:	005b      	lsls	r3, r3, #1
 800c7d2:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 800c7d4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c7d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7d8:	fbb2 f3f3 	udiv	r3, r2, r3
 800c7dc:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800c7de:	e002      	b.n	800c7e6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800c7e0:	4b05      	ldr	r3, [pc, #20]	; (800c7f8 <HAL_RCC_GetSysClockFreq+0x184>)
 800c7e2:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800c7e4:	bf00      	nop
    }
  }
  return sysclockfreq;
 800c7e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800c7e8:	4618      	mov	r0, r3
 800c7ea:	3740      	adds	r7, #64	; 0x40
 800c7ec:	46bd      	mov	sp, r7
 800c7ee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c7f2:	bf00      	nop
 800c7f4:	40023800 	.word	0x40023800
 800c7f8:	00f42400 	.word	0x00f42400
 800c7fc:	017d7840 	.word	0x017d7840

0800c800 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800c800:	b480      	push	{r7}
 800c802:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800c804:	4b03      	ldr	r3, [pc, #12]	; (800c814 <HAL_RCC_GetHCLKFreq+0x14>)
 800c806:	681b      	ldr	r3, [r3, #0]
}
 800c808:	4618      	mov	r0, r3
 800c80a:	46bd      	mov	sp, r7
 800c80c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c810:	4770      	bx	lr
 800c812:	bf00      	nop
 800c814:	20000000 	.word	0x20000000

0800c818 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800c818:	b580      	push	{r7, lr}
 800c81a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800c81c:	f7ff fff0 	bl	800c800 <HAL_RCC_GetHCLKFreq>
 800c820:	4602      	mov	r2, r0
 800c822:	4b05      	ldr	r3, [pc, #20]	; (800c838 <HAL_RCC_GetPCLK1Freq+0x20>)
 800c824:	689b      	ldr	r3, [r3, #8]
 800c826:	0a9b      	lsrs	r3, r3, #10
 800c828:	f003 0307 	and.w	r3, r3, #7
 800c82c:	4903      	ldr	r1, [pc, #12]	; (800c83c <HAL_RCC_GetPCLK1Freq+0x24>)
 800c82e:	5ccb      	ldrb	r3, [r1, r3]
 800c830:	fa22 f303 	lsr.w	r3, r2, r3
}
 800c834:	4618      	mov	r0, r3
 800c836:	bd80      	pop	{r7, pc}
 800c838:	40023800 	.word	0x40023800
 800c83c:	08012ecc 	.word	0x08012ecc

0800c840 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800c840:	b580      	push	{r7, lr}
 800c842:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800c844:	f7ff ffdc 	bl	800c800 <HAL_RCC_GetHCLKFreq>
 800c848:	4602      	mov	r2, r0
 800c84a:	4b05      	ldr	r3, [pc, #20]	; (800c860 <HAL_RCC_GetPCLK2Freq+0x20>)
 800c84c:	689b      	ldr	r3, [r3, #8]
 800c84e:	0b5b      	lsrs	r3, r3, #13
 800c850:	f003 0307 	and.w	r3, r3, #7
 800c854:	4903      	ldr	r1, [pc, #12]	; (800c864 <HAL_RCC_GetPCLK2Freq+0x24>)
 800c856:	5ccb      	ldrb	r3, [r1, r3]
 800c858:	fa22 f303 	lsr.w	r3, r2, r3
}
 800c85c:	4618      	mov	r0, r3
 800c85e:	bd80      	pop	{r7, pc}
 800c860:	40023800 	.word	0x40023800
 800c864:	08012ecc 	.word	0x08012ecc

0800c868 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800c868:	b580      	push	{r7, lr}
 800c86a:	b086      	sub	sp, #24
 800c86c:	af00      	add	r7, sp, #0
 800c86e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800c870:	2300      	movs	r3, #0
 800c872:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800c874:	2300      	movs	r3, #0
 800c876:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	681b      	ldr	r3, [r3, #0]
 800c87c:	f003 0301 	and.w	r3, r3, #1
 800c880:	2b00      	cmp	r3, #0
 800c882:	d105      	bne.n	800c890 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	681b      	ldr	r3, [r3, #0]
 800c888:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800c88c:	2b00      	cmp	r3, #0
 800c88e:	d038      	beq.n	800c902 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800c890:	4b68      	ldr	r3, [pc, #416]	; (800ca34 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800c892:	2200      	movs	r2, #0
 800c894:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800c896:	f7fc feb5 	bl	8009604 <HAL_GetTick>
 800c89a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800c89c:	e008      	b.n	800c8b0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800c89e:	f7fc feb1 	bl	8009604 <HAL_GetTick>
 800c8a2:	4602      	mov	r2, r0
 800c8a4:	697b      	ldr	r3, [r7, #20]
 800c8a6:	1ad3      	subs	r3, r2, r3
 800c8a8:	2b02      	cmp	r3, #2
 800c8aa:	d901      	bls.n	800c8b0 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800c8ac:	2303      	movs	r3, #3
 800c8ae:	e0bd      	b.n	800ca2c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800c8b0:	4b61      	ldr	r3, [pc, #388]	; (800ca38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c8b2:	681b      	ldr	r3, [r3, #0]
 800c8b4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c8b8:	2b00      	cmp	r3, #0
 800c8ba:	d1f0      	bne.n	800c89e <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	685a      	ldr	r2, [r3, #4]
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	689b      	ldr	r3, [r3, #8]
 800c8c4:	019b      	lsls	r3, r3, #6
 800c8c6:	431a      	orrs	r2, r3
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	68db      	ldr	r3, [r3, #12]
 800c8cc:	071b      	lsls	r3, r3, #28
 800c8ce:	495a      	ldr	r1, [pc, #360]	; (800ca38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c8d0:	4313      	orrs	r3, r2
 800c8d2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800c8d6:	4b57      	ldr	r3, [pc, #348]	; (800ca34 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800c8d8:	2201      	movs	r2, #1
 800c8da:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800c8dc:	f7fc fe92 	bl	8009604 <HAL_GetTick>
 800c8e0:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800c8e2:	e008      	b.n	800c8f6 <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800c8e4:	f7fc fe8e 	bl	8009604 <HAL_GetTick>
 800c8e8:	4602      	mov	r2, r0
 800c8ea:	697b      	ldr	r3, [r7, #20]
 800c8ec:	1ad3      	subs	r3, r2, r3
 800c8ee:	2b02      	cmp	r3, #2
 800c8f0:	d901      	bls.n	800c8f6 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800c8f2:	2303      	movs	r3, #3
 800c8f4:	e09a      	b.n	800ca2c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800c8f6:	4b50      	ldr	r3, [pc, #320]	; (800ca38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c8f8:	681b      	ldr	r3, [r3, #0]
 800c8fa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c8fe:	2b00      	cmp	r3, #0
 800c900:	d0f0      	beq.n	800c8e4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800c902:	687b      	ldr	r3, [r7, #4]
 800c904:	681b      	ldr	r3, [r3, #0]
 800c906:	f003 0302 	and.w	r3, r3, #2
 800c90a:	2b00      	cmp	r3, #0
 800c90c:	f000 8083 	beq.w	800ca16 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800c910:	2300      	movs	r3, #0
 800c912:	60fb      	str	r3, [r7, #12]
 800c914:	4b48      	ldr	r3, [pc, #288]	; (800ca38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c916:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c918:	4a47      	ldr	r2, [pc, #284]	; (800ca38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c91a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c91e:	6413      	str	r3, [r2, #64]	; 0x40
 800c920:	4b45      	ldr	r3, [pc, #276]	; (800ca38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c922:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c924:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c928:	60fb      	str	r3, [r7, #12]
 800c92a:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800c92c:	4b43      	ldr	r3, [pc, #268]	; (800ca3c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800c92e:	681b      	ldr	r3, [r3, #0]
 800c930:	4a42      	ldr	r2, [pc, #264]	; (800ca3c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800c932:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c936:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800c938:	f7fc fe64 	bl	8009604 <HAL_GetTick>
 800c93c:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800c93e:	e008      	b.n	800c952 <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800c940:	f7fc fe60 	bl	8009604 <HAL_GetTick>
 800c944:	4602      	mov	r2, r0
 800c946:	697b      	ldr	r3, [r7, #20]
 800c948:	1ad3      	subs	r3, r2, r3
 800c94a:	2b02      	cmp	r3, #2
 800c94c:	d901      	bls.n	800c952 <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 800c94e:	2303      	movs	r3, #3
 800c950:	e06c      	b.n	800ca2c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800c952:	4b3a      	ldr	r3, [pc, #232]	; (800ca3c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800c954:	681b      	ldr	r3, [r3, #0]
 800c956:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c95a:	2b00      	cmp	r3, #0
 800c95c:	d0f0      	beq.n	800c940 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800c95e:	4b36      	ldr	r3, [pc, #216]	; (800ca38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c960:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c962:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c966:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800c968:	693b      	ldr	r3, [r7, #16]
 800c96a:	2b00      	cmp	r3, #0
 800c96c:	d02f      	beq.n	800c9ce <HAL_RCCEx_PeriphCLKConfig+0x166>
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	691b      	ldr	r3, [r3, #16]
 800c972:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c976:	693a      	ldr	r2, [r7, #16]
 800c978:	429a      	cmp	r2, r3
 800c97a:	d028      	beq.n	800c9ce <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800c97c:	4b2e      	ldr	r3, [pc, #184]	; (800ca38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c97e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c980:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c984:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800c986:	4b2e      	ldr	r3, [pc, #184]	; (800ca40 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800c988:	2201      	movs	r2, #1
 800c98a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800c98c:	4b2c      	ldr	r3, [pc, #176]	; (800ca40 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800c98e:	2200      	movs	r2, #0
 800c990:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800c992:	4a29      	ldr	r2, [pc, #164]	; (800ca38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c994:	693b      	ldr	r3, [r7, #16]
 800c996:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800c998:	4b27      	ldr	r3, [pc, #156]	; (800ca38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c99a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c99c:	f003 0301 	and.w	r3, r3, #1
 800c9a0:	2b01      	cmp	r3, #1
 800c9a2:	d114      	bne.n	800c9ce <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800c9a4:	f7fc fe2e 	bl	8009604 <HAL_GetTick>
 800c9a8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c9aa:	e00a      	b.n	800c9c2 <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800c9ac:	f7fc fe2a 	bl	8009604 <HAL_GetTick>
 800c9b0:	4602      	mov	r2, r0
 800c9b2:	697b      	ldr	r3, [r7, #20]
 800c9b4:	1ad3      	subs	r3, r2, r3
 800c9b6:	f241 3288 	movw	r2, #5000	; 0x1388
 800c9ba:	4293      	cmp	r3, r2
 800c9bc:	d901      	bls.n	800c9c2 <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 800c9be:	2303      	movs	r3, #3
 800c9c0:	e034      	b.n	800ca2c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c9c2:	4b1d      	ldr	r3, [pc, #116]	; (800ca38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c9c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c9c6:	f003 0302 	and.w	r3, r3, #2
 800c9ca:	2b00      	cmp	r3, #0
 800c9cc:	d0ee      	beq.n	800c9ac <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	691b      	ldr	r3, [r3, #16]
 800c9d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c9d6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c9da:	d10d      	bne.n	800c9f8 <HAL_RCCEx_PeriphCLKConfig+0x190>
 800c9dc:	4b16      	ldr	r3, [pc, #88]	; (800ca38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c9de:	689b      	ldr	r3, [r3, #8]
 800c9e0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	691b      	ldr	r3, [r3, #16]
 800c9e8:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800c9ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c9f0:	4911      	ldr	r1, [pc, #68]	; (800ca38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c9f2:	4313      	orrs	r3, r2
 800c9f4:	608b      	str	r3, [r1, #8]
 800c9f6:	e005      	b.n	800ca04 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 800c9f8:	4b0f      	ldr	r3, [pc, #60]	; (800ca38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c9fa:	689b      	ldr	r3, [r3, #8]
 800c9fc:	4a0e      	ldr	r2, [pc, #56]	; (800ca38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c9fe:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800ca02:	6093      	str	r3, [r2, #8]
 800ca04:	4b0c      	ldr	r3, [pc, #48]	; (800ca38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ca06:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	691b      	ldr	r3, [r3, #16]
 800ca0c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ca10:	4909      	ldr	r1, [pc, #36]	; (800ca38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ca12:	4313      	orrs	r3, r2
 800ca14:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	681b      	ldr	r3, [r3, #0]
 800ca1a:	f003 0308 	and.w	r3, r3, #8
 800ca1e:	2b00      	cmp	r3, #0
 800ca20:	d003      	beq.n	800ca2a <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800ca22:	687b      	ldr	r3, [r7, #4]
 800ca24:	7d1a      	ldrb	r2, [r3, #20]
 800ca26:	4b07      	ldr	r3, [pc, #28]	; (800ca44 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 800ca28:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 800ca2a:	2300      	movs	r3, #0
}
 800ca2c:	4618      	mov	r0, r3
 800ca2e:	3718      	adds	r7, #24
 800ca30:	46bd      	mov	sp, r7
 800ca32:	bd80      	pop	{r7, pc}
 800ca34:	42470068 	.word	0x42470068
 800ca38:	40023800 	.word	0x40023800
 800ca3c:	40007000 	.word	0x40007000
 800ca40:	42470e40 	.word	0x42470e40
 800ca44:	424711e0 	.word	0x424711e0

0800ca48 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800ca48:	b580      	push	{r7, lr}
 800ca4a:	b082      	sub	sp, #8
 800ca4c:	af00      	add	r7, sp, #0
 800ca4e:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 800ca50:	687b      	ldr	r3, [r7, #4]
 800ca52:	2b00      	cmp	r3, #0
 800ca54:	d101      	bne.n	800ca5a <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 800ca56:	2301      	movs	r3, #1
 800ca58:	e083      	b.n	800cb62 <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 800ca5a:	687b      	ldr	r3, [r7, #4]
 800ca5c:	7f5b      	ldrb	r3, [r3, #29]
 800ca5e:	b2db      	uxtb	r3, r3
 800ca60:	2b00      	cmp	r3, #0
 800ca62:	d105      	bne.n	800ca70 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	2200      	movs	r2, #0
 800ca68:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800ca6a:	6878      	ldr	r0, [r7, #4]
 800ca6c:	f7fc fb00 	bl	8009070 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	2202      	movs	r2, #2
 800ca74:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	681b      	ldr	r3, [r3, #0]
 800ca7a:	22ca      	movs	r2, #202	; 0xca
 800ca7c:	625a      	str	r2, [r3, #36]	; 0x24
 800ca7e:	687b      	ldr	r3, [r7, #4]
 800ca80:	681b      	ldr	r3, [r3, #0]
 800ca82:	2253      	movs	r2, #83	; 0x53
 800ca84:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800ca86:	6878      	ldr	r0, [r7, #4]
 800ca88:	f000 f897 	bl	800cbba <RTC_EnterInitMode>
 800ca8c:	4603      	mov	r3, r0
 800ca8e:	2b00      	cmp	r3, #0
 800ca90:	d008      	beq.n	800caa4 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	681b      	ldr	r3, [r3, #0]
 800ca96:	22ff      	movs	r2, #255	; 0xff
 800ca98:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	2204      	movs	r2, #4
 800ca9e:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 800caa0:	2301      	movs	r3, #1
 800caa2:	e05e      	b.n	800cb62 <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	681b      	ldr	r3, [r3, #0]
 800caa8:	689b      	ldr	r3, [r3, #8]
 800caaa:	687a      	ldr	r2, [r7, #4]
 800caac:	6812      	ldr	r2, [r2, #0]
 800caae:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800cab2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cab6:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	681b      	ldr	r3, [r3, #0]
 800cabc:	6899      	ldr	r1, [r3, #8]
 800cabe:	687b      	ldr	r3, [r7, #4]
 800cac0:	685a      	ldr	r2, [r3, #4]
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	691b      	ldr	r3, [r3, #16]
 800cac6:	431a      	orrs	r2, r3
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	695b      	ldr	r3, [r3, #20]
 800cacc:	431a      	orrs	r2, r3
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	681b      	ldr	r3, [r3, #0]
 800cad2:	430a      	orrs	r2, r1
 800cad4:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	681b      	ldr	r3, [r3, #0]
 800cada:	687a      	ldr	r2, [r7, #4]
 800cadc:	68d2      	ldr	r2, [r2, #12]
 800cade:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	681b      	ldr	r3, [r3, #0]
 800cae4:	6919      	ldr	r1, [r3, #16]
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	689b      	ldr	r3, [r3, #8]
 800caea:	041a      	lsls	r2, r3, #16
 800caec:	687b      	ldr	r3, [r7, #4]
 800caee:	681b      	ldr	r3, [r3, #0]
 800caf0:	430a      	orrs	r2, r1
 800caf2:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	681b      	ldr	r3, [r3, #0]
 800caf8:	68da      	ldr	r2, [r3, #12]
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	681b      	ldr	r3, [r3, #0]
 800cafe:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800cb02:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	681b      	ldr	r3, [r3, #0]
 800cb08:	689b      	ldr	r3, [r3, #8]
 800cb0a:	f003 0320 	and.w	r3, r3, #32
 800cb0e:	2b00      	cmp	r3, #0
 800cb10:	d10e      	bne.n	800cb30 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800cb12:	6878      	ldr	r0, [r7, #4]
 800cb14:	f000 f829 	bl	800cb6a <HAL_RTC_WaitForSynchro>
 800cb18:	4603      	mov	r3, r0
 800cb1a:	2b00      	cmp	r3, #0
 800cb1c:	d008      	beq.n	800cb30 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	681b      	ldr	r3, [r3, #0]
 800cb22:	22ff      	movs	r2, #255	; 0xff
 800cb24:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800cb26:	687b      	ldr	r3, [r7, #4]
 800cb28:	2204      	movs	r2, #4
 800cb2a:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 800cb2c:	2301      	movs	r3, #1
 800cb2e:	e018      	b.n	800cb62 <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 800cb30:	687b      	ldr	r3, [r7, #4]
 800cb32:	681b      	ldr	r3, [r3, #0]
 800cb34:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800cb36:	687b      	ldr	r3, [r7, #4]
 800cb38:	681b      	ldr	r3, [r3, #0]
 800cb3a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800cb3e:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	681b      	ldr	r3, [r3, #0]
 800cb44:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	699a      	ldr	r2, [r3, #24]
 800cb4a:	687b      	ldr	r3, [r7, #4]
 800cb4c:	681b      	ldr	r3, [r3, #0]
 800cb4e:	430a      	orrs	r2, r1
 800cb50:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	681b      	ldr	r3, [r3, #0]
 800cb56:	22ff      	movs	r2, #255	; 0xff
 800cb58:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	2201      	movs	r2, #1
 800cb5e:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 800cb60:	2300      	movs	r3, #0
  }
}
 800cb62:	4618      	mov	r0, r3
 800cb64:	3708      	adds	r7, #8
 800cb66:	46bd      	mov	sp, r7
 800cb68:	bd80      	pop	{r7, pc}

0800cb6a <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 800cb6a:	b580      	push	{r7, lr}
 800cb6c:	b084      	sub	sp, #16
 800cb6e:	af00      	add	r7, sp, #0
 800cb70:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800cb72:	2300      	movs	r3, #0
 800cb74:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800cb76:	687b      	ldr	r3, [r7, #4]
 800cb78:	681b      	ldr	r3, [r3, #0]
 800cb7a:	68da      	ldr	r2, [r3, #12]
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	681b      	ldr	r3, [r3, #0]
 800cb80:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800cb84:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800cb86:	f7fc fd3d 	bl	8009604 <HAL_GetTick>
 800cb8a:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800cb8c:	e009      	b.n	800cba2 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800cb8e:	f7fc fd39 	bl	8009604 <HAL_GetTick>
 800cb92:	4602      	mov	r2, r0
 800cb94:	68fb      	ldr	r3, [r7, #12]
 800cb96:	1ad3      	subs	r3, r2, r3
 800cb98:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800cb9c:	d901      	bls.n	800cba2 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800cb9e:	2303      	movs	r3, #3
 800cba0:	e007      	b.n	800cbb2 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	681b      	ldr	r3, [r3, #0]
 800cba6:	68db      	ldr	r3, [r3, #12]
 800cba8:	f003 0320 	and.w	r3, r3, #32
 800cbac:	2b00      	cmp	r3, #0
 800cbae:	d0ee      	beq.n	800cb8e <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800cbb0:	2300      	movs	r3, #0
}
 800cbb2:	4618      	mov	r0, r3
 800cbb4:	3710      	adds	r7, #16
 800cbb6:	46bd      	mov	sp, r7
 800cbb8:	bd80      	pop	{r7, pc}

0800cbba <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 800cbba:	b580      	push	{r7, lr}
 800cbbc:	b084      	sub	sp, #16
 800cbbe:	af00      	add	r7, sp, #0
 800cbc0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800cbc2:	2300      	movs	r3, #0
 800cbc4:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800cbc6:	687b      	ldr	r3, [r7, #4]
 800cbc8:	681b      	ldr	r3, [r3, #0]
 800cbca:	68db      	ldr	r3, [r3, #12]
 800cbcc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cbd0:	2b00      	cmp	r3, #0
 800cbd2:	d119      	bne.n	800cc08 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	681b      	ldr	r3, [r3, #0]
 800cbd8:	f04f 32ff 	mov.w	r2, #4294967295
 800cbdc:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800cbde:	f7fc fd11 	bl	8009604 <HAL_GetTick>
 800cbe2:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800cbe4:	e009      	b.n	800cbfa <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800cbe6:	f7fc fd0d 	bl	8009604 <HAL_GetTick>
 800cbea:	4602      	mov	r2, r0
 800cbec:	68fb      	ldr	r3, [r7, #12]
 800cbee:	1ad3      	subs	r3, r2, r3
 800cbf0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800cbf4:	d901      	bls.n	800cbfa <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 800cbf6:	2303      	movs	r3, #3
 800cbf8:	e007      	b.n	800cc0a <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	681b      	ldr	r3, [r3, #0]
 800cbfe:	68db      	ldr	r3, [r3, #12]
 800cc00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cc04:	2b00      	cmp	r3, #0
 800cc06:	d0ee      	beq.n	800cbe6 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 800cc08:	2300      	movs	r3, #0
}
 800cc0a:	4618      	mov	r0, r3
 800cc0c:	3710      	adds	r7, #16
 800cc0e:	46bd      	mov	sp, r7
 800cc10:	bd80      	pop	{r7, pc}

0800cc12 <HAL_RTCEx_BKUPWrite>:
  *                                 specify the register.
  * @param  Data Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 800cc12:	b480      	push	{r7}
 800cc14:	b087      	sub	sp, #28
 800cc16:	af00      	add	r7, sp, #0
 800cc18:	60f8      	str	r0, [r7, #12]
 800cc1a:	60b9      	str	r1, [r7, #8]
 800cc1c:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 800cc1e:	2300      	movs	r3, #0
 800cc20:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 800cc22:	68fb      	ldr	r3, [r7, #12]
 800cc24:	681b      	ldr	r3, [r3, #0]
 800cc26:	3350      	adds	r3, #80	; 0x50
 800cc28:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 800cc2a:	68bb      	ldr	r3, [r7, #8]
 800cc2c:	009b      	lsls	r3, r3, #2
 800cc2e:	697a      	ldr	r2, [r7, #20]
 800cc30:	4413      	add	r3, r2
 800cc32:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 800cc34:	697b      	ldr	r3, [r7, #20]
 800cc36:	687a      	ldr	r2, [r7, #4]
 800cc38:	601a      	str	r2, [r3, #0]
}
 800cc3a:	bf00      	nop
 800cc3c:	371c      	adds	r7, #28
 800cc3e:	46bd      	mov	sp, r7
 800cc40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc44:	4770      	bx	lr

0800cc46 <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx where x can be from 0 to 19 to
  *                                 specify the register.
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 800cc46:	b480      	push	{r7}
 800cc48:	b085      	sub	sp, #20
 800cc4a:	af00      	add	r7, sp, #0
 800cc4c:	6078      	str	r0, [r7, #4]
 800cc4e:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0U;
 800cc50:	2300      	movs	r3, #0
 800cc52:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	681b      	ldr	r3, [r3, #0]
 800cc58:	3350      	adds	r3, #80	; 0x50
 800cc5a:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 800cc5c:	683b      	ldr	r3, [r7, #0]
 800cc5e:	009b      	lsls	r3, r3, #2
 800cc60:	68fa      	ldr	r2, [r7, #12]
 800cc62:	4413      	add	r3, r2
 800cc64:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 800cc66:	68fb      	ldr	r3, [r7, #12]
 800cc68:	681b      	ldr	r3, [r3, #0]
}
 800cc6a:	4618      	mov	r0, r3
 800cc6c:	3714      	adds	r7, #20
 800cc6e:	46bd      	mov	sp, r7
 800cc70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc74:	4770      	bx	lr

0800cc76 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800cc76:	b580      	push	{r7, lr}
 800cc78:	b082      	sub	sp, #8
 800cc7a:	af00      	add	r7, sp, #0
 800cc7c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800cc7e:	687b      	ldr	r3, [r7, #4]
 800cc80:	2b00      	cmp	r3, #0
 800cc82:	d101      	bne.n	800cc88 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800cc84:	2301      	movs	r3, #1
 800cc86:	e03f      	b.n	800cd08 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cc8e:	b2db      	uxtb	r3, r3
 800cc90:	2b00      	cmp	r3, #0
 800cc92:	d106      	bne.n	800cca2 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800cc94:	687b      	ldr	r3, [r7, #4]
 800cc96:	2200      	movs	r2, #0
 800cc98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800cc9c:	6878      	ldr	r0, [r7, #4]
 800cc9e:	f7fc fb55 	bl	800934c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	2224      	movs	r2, #36	; 0x24
 800cca6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	681b      	ldr	r3, [r3, #0]
 800ccae:	68da      	ldr	r2, [r3, #12]
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	681b      	ldr	r3, [r3, #0]
 800ccb4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800ccb8:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800ccba:	6878      	ldr	r0, [r7, #4]
 800ccbc:	f000 ff8a 	bl	800dbd4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	681b      	ldr	r3, [r3, #0]
 800ccc4:	691a      	ldr	r2, [r3, #16]
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	681b      	ldr	r3, [r3, #0]
 800ccca:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800ccce:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ccd0:	687b      	ldr	r3, [r7, #4]
 800ccd2:	681b      	ldr	r3, [r3, #0]
 800ccd4:	695a      	ldr	r2, [r3, #20]
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	681b      	ldr	r3, [r3, #0]
 800ccda:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800ccde:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	681b      	ldr	r3, [r3, #0]
 800cce4:	68da      	ldr	r2, [r3, #12]
 800cce6:	687b      	ldr	r3, [r7, #4]
 800cce8:	681b      	ldr	r3, [r3, #0]
 800ccea:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800ccee:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ccf0:	687b      	ldr	r3, [r7, #4]
 800ccf2:	2200      	movs	r2, #0
 800ccf4:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800ccf6:	687b      	ldr	r3, [r7, #4]
 800ccf8:	2220      	movs	r2, #32
 800ccfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800ccfe:	687b      	ldr	r3, [r7, #4]
 800cd00:	2220      	movs	r2, #32
 800cd02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800cd06:	2300      	movs	r3, #0
}
 800cd08:	4618      	mov	r0, r3
 800cd0a:	3708      	adds	r7, #8
 800cd0c:	46bd      	mov	sp, r7
 800cd0e:	bd80      	pop	{r7, pc}

0800cd10 <HAL_UART_DeInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 800cd10:	b580      	push	{r7, lr}
 800cd12:	b082      	sub	sp, #8
 800cd14:	af00      	add	r7, sp, #0
 800cd16:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	2b00      	cmp	r3, #0
 800cd1c:	d101      	bne.n	800cd22 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 800cd1e:	2301      	movs	r3, #1
 800cd20:	e021      	b.n	800cd66 <HAL_UART_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	2224      	movs	r2, #36	; 0x24
 800cd26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800cd2a:	687b      	ldr	r3, [r7, #4]
 800cd2c:	681b      	ldr	r3, [r3, #0]
 800cd2e:	68da      	ldr	r2, [r3, #12]
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	681b      	ldr	r3, [r3, #0]
 800cd34:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800cd38:	60da      	str	r2, [r3, #12]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 800cd3a:	6878      	ldr	r0, [r7, #4]
 800cd3c:	f7fc fb8a 	bl	8009454 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	2200      	movs	r2, #0
 800cd44:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_RESET;
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	2200      	movs	r2, #0
 800cd4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_RESET;
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	2200      	movs	r2, #0
 800cd52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	2200      	movs	r2, #0
 800cd5a:	631a      	str	r2, [r3, #48]	; 0x30

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	2200      	movs	r2, #0
 800cd60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800cd64:	2300      	movs	r3, #0
}
 800cd66:	4618      	mov	r0, r3
 800cd68:	3708      	adds	r7, #8
 800cd6a:	46bd      	mov	sp, r7
 800cd6c:	bd80      	pop	{r7, pc}

0800cd6e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800cd6e:	b580      	push	{r7, lr}
 800cd70:	b08a      	sub	sp, #40	; 0x28
 800cd72:	af02      	add	r7, sp, #8
 800cd74:	60f8      	str	r0, [r7, #12]
 800cd76:	60b9      	str	r1, [r7, #8]
 800cd78:	603b      	str	r3, [r7, #0]
 800cd7a:	4613      	mov	r3, r2
 800cd7c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800cd7e:	2300      	movs	r3, #0
 800cd80:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800cd82:	68fb      	ldr	r3, [r7, #12]
 800cd84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cd88:	b2db      	uxtb	r3, r3
 800cd8a:	2b20      	cmp	r3, #32
 800cd8c:	d17c      	bne.n	800ce88 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800cd8e:	68bb      	ldr	r3, [r7, #8]
 800cd90:	2b00      	cmp	r3, #0
 800cd92:	d002      	beq.n	800cd9a <HAL_UART_Transmit+0x2c>
 800cd94:	88fb      	ldrh	r3, [r7, #6]
 800cd96:	2b00      	cmp	r3, #0
 800cd98:	d101      	bne.n	800cd9e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800cd9a:	2301      	movs	r3, #1
 800cd9c:	e075      	b.n	800ce8a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800cd9e:	68fb      	ldr	r3, [r7, #12]
 800cda0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800cda4:	2b01      	cmp	r3, #1
 800cda6:	d101      	bne.n	800cdac <HAL_UART_Transmit+0x3e>
 800cda8:	2302      	movs	r3, #2
 800cdaa:	e06e      	b.n	800ce8a <HAL_UART_Transmit+0x11c>
 800cdac:	68fb      	ldr	r3, [r7, #12]
 800cdae:	2201      	movs	r2, #1
 800cdb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cdb4:	68fb      	ldr	r3, [r7, #12]
 800cdb6:	2200      	movs	r2, #0
 800cdb8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800cdba:	68fb      	ldr	r3, [r7, #12]
 800cdbc:	2221      	movs	r2, #33	; 0x21
 800cdbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800cdc2:	f7fc fc1f 	bl	8009604 <HAL_GetTick>
 800cdc6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800cdc8:	68fb      	ldr	r3, [r7, #12]
 800cdca:	88fa      	ldrh	r2, [r7, #6]
 800cdcc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800cdce:	68fb      	ldr	r3, [r7, #12]
 800cdd0:	88fa      	ldrh	r2, [r7, #6]
 800cdd2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800cdd4:	68fb      	ldr	r3, [r7, #12]
 800cdd6:	689b      	ldr	r3, [r3, #8]
 800cdd8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cddc:	d108      	bne.n	800cdf0 <HAL_UART_Transmit+0x82>
 800cdde:	68fb      	ldr	r3, [r7, #12]
 800cde0:	691b      	ldr	r3, [r3, #16]
 800cde2:	2b00      	cmp	r3, #0
 800cde4:	d104      	bne.n	800cdf0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800cde6:	2300      	movs	r3, #0
 800cde8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800cdea:	68bb      	ldr	r3, [r7, #8]
 800cdec:	61bb      	str	r3, [r7, #24]
 800cdee:	e003      	b.n	800cdf8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800cdf0:	68bb      	ldr	r3, [r7, #8]
 800cdf2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800cdf4:	2300      	movs	r3, #0
 800cdf6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800cdf8:	68fb      	ldr	r3, [r7, #12]
 800cdfa:	2200      	movs	r2, #0
 800cdfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800ce00:	e02a      	b.n	800ce58 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800ce02:	683b      	ldr	r3, [r7, #0]
 800ce04:	9300      	str	r3, [sp, #0]
 800ce06:	697b      	ldr	r3, [r7, #20]
 800ce08:	2200      	movs	r2, #0
 800ce0a:	2180      	movs	r1, #128	; 0x80
 800ce0c:	68f8      	ldr	r0, [r7, #12]
 800ce0e:	f000 fc17 	bl	800d640 <UART_WaitOnFlagUntilTimeout>
 800ce12:	4603      	mov	r3, r0
 800ce14:	2b00      	cmp	r3, #0
 800ce16:	d001      	beq.n	800ce1c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800ce18:	2303      	movs	r3, #3
 800ce1a:	e036      	b.n	800ce8a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800ce1c:	69fb      	ldr	r3, [r7, #28]
 800ce1e:	2b00      	cmp	r3, #0
 800ce20:	d10b      	bne.n	800ce3a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800ce22:	69bb      	ldr	r3, [r7, #24]
 800ce24:	881b      	ldrh	r3, [r3, #0]
 800ce26:	461a      	mov	r2, r3
 800ce28:	68fb      	ldr	r3, [r7, #12]
 800ce2a:	681b      	ldr	r3, [r3, #0]
 800ce2c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ce30:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800ce32:	69bb      	ldr	r3, [r7, #24]
 800ce34:	3302      	adds	r3, #2
 800ce36:	61bb      	str	r3, [r7, #24]
 800ce38:	e007      	b.n	800ce4a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800ce3a:	69fb      	ldr	r3, [r7, #28]
 800ce3c:	781a      	ldrb	r2, [r3, #0]
 800ce3e:	68fb      	ldr	r3, [r7, #12]
 800ce40:	681b      	ldr	r3, [r3, #0]
 800ce42:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800ce44:	69fb      	ldr	r3, [r7, #28]
 800ce46:	3301      	adds	r3, #1
 800ce48:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800ce4a:	68fb      	ldr	r3, [r7, #12]
 800ce4c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800ce4e:	b29b      	uxth	r3, r3
 800ce50:	3b01      	subs	r3, #1
 800ce52:	b29a      	uxth	r2, r3
 800ce54:	68fb      	ldr	r3, [r7, #12]
 800ce56:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800ce58:	68fb      	ldr	r3, [r7, #12]
 800ce5a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800ce5c:	b29b      	uxth	r3, r3
 800ce5e:	2b00      	cmp	r3, #0
 800ce60:	d1cf      	bne.n	800ce02 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800ce62:	683b      	ldr	r3, [r7, #0]
 800ce64:	9300      	str	r3, [sp, #0]
 800ce66:	697b      	ldr	r3, [r7, #20]
 800ce68:	2200      	movs	r2, #0
 800ce6a:	2140      	movs	r1, #64	; 0x40
 800ce6c:	68f8      	ldr	r0, [r7, #12]
 800ce6e:	f000 fbe7 	bl	800d640 <UART_WaitOnFlagUntilTimeout>
 800ce72:	4603      	mov	r3, r0
 800ce74:	2b00      	cmp	r3, #0
 800ce76:	d001      	beq.n	800ce7c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800ce78:	2303      	movs	r3, #3
 800ce7a:	e006      	b.n	800ce8a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800ce7c:	68fb      	ldr	r3, [r7, #12]
 800ce7e:	2220      	movs	r2, #32
 800ce80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800ce84:	2300      	movs	r3, #0
 800ce86:	e000      	b.n	800ce8a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800ce88:	2302      	movs	r3, #2
  }
}
 800ce8a:	4618      	mov	r0, r3
 800ce8c:	3720      	adds	r7, #32
 800ce8e:	46bd      	mov	sp, r7
 800ce90:	bd80      	pop	{r7, pc}

0800ce92 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ce92:	b580      	push	{r7, lr}
 800ce94:	b084      	sub	sp, #16
 800ce96:	af00      	add	r7, sp, #0
 800ce98:	60f8      	str	r0, [r7, #12]
 800ce9a:	60b9      	str	r1, [r7, #8]
 800ce9c:	4613      	mov	r3, r2
 800ce9e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800cea0:	68fb      	ldr	r3, [r7, #12]
 800cea2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800cea6:	b2db      	uxtb	r3, r3
 800cea8:	2b20      	cmp	r3, #32
 800ceaa:	d11d      	bne.n	800cee8 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800ceac:	68bb      	ldr	r3, [r7, #8]
 800ceae:	2b00      	cmp	r3, #0
 800ceb0:	d002      	beq.n	800ceb8 <HAL_UART_Receive_DMA+0x26>
 800ceb2:	88fb      	ldrh	r3, [r7, #6]
 800ceb4:	2b00      	cmp	r3, #0
 800ceb6:	d101      	bne.n	800cebc <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800ceb8:	2301      	movs	r3, #1
 800ceba:	e016      	b.n	800ceea <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800cebc:	68fb      	ldr	r3, [r7, #12]
 800cebe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800cec2:	2b01      	cmp	r3, #1
 800cec4:	d101      	bne.n	800ceca <HAL_UART_Receive_DMA+0x38>
 800cec6:	2302      	movs	r3, #2
 800cec8:	e00f      	b.n	800ceea <HAL_UART_Receive_DMA+0x58>
 800ceca:	68fb      	ldr	r3, [r7, #12]
 800cecc:	2201      	movs	r2, #1
 800cece:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ced2:	68fb      	ldr	r3, [r7, #12]
 800ced4:	2200      	movs	r2, #0
 800ced6:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800ced8:	88fb      	ldrh	r3, [r7, #6]
 800ceda:	461a      	mov	r2, r3
 800cedc:	68b9      	ldr	r1, [r7, #8]
 800cede:	68f8      	ldr	r0, [r7, #12]
 800cee0:	f000 fc1c 	bl	800d71c <UART_Start_Receive_DMA>
 800cee4:	4603      	mov	r3, r0
 800cee6:	e000      	b.n	800ceea <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 800cee8:	2302      	movs	r3, #2
  }
}
 800ceea:	4618      	mov	r0, r3
 800ceec:	3710      	adds	r7, #16
 800ceee:	46bd      	mov	sp, r7
 800cef0:	bd80      	pop	{r7, pc}
	...

0800cef4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800cef4:	b580      	push	{r7, lr}
 800cef6:	b0ba      	sub	sp, #232	; 0xe8
 800cef8:	af00      	add	r7, sp, #0
 800cefa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	681b      	ldr	r3, [r3, #0]
 800cf00:	681b      	ldr	r3, [r3, #0]
 800cf02:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800cf06:	687b      	ldr	r3, [r7, #4]
 800cf08:	681b      	ldr	r3, [r3, #0]
 800cf0a:	68db      	ldr	r3, [r3, #12]
 800cf0c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	681b      	ldr	r3, [r3, #0]
 800cf14:	695b      	ldr	r3, [r3, #20]
 800cf16:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800cf1a:	2300      	movs	r3, #0
 800cf1c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800cf20:	2300      	movs	r3, #0
 800cf22:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800cf26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cf2a:	f003 030f 	and.w	r3, r3, #15
 800cf2e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800cf32:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800cf36:	2b00      	cmp	r3, #0
 800cf38:	d10f      	bne.n	800cf5a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800cf3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cf3e:	f003 0320 	and.w	r3, r3, #32
 800cf42:	2b00      	cmp	r3, #0
 800cf44:	d009      	beq.n	800cf5a <HAL_UART_IRQHandler+0x66>
 800cf46:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cf4a:	f003 0320 	and.w	r3, r3, #32
 800cf4e:	2b00      	cmp	r3, #0
 800cf50:	d003      	beq.n	800cf5a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800cf52:	6878      	ldr	r0, [r7, #4]
 800cf54:	f000 fd83 	bl	800da5e <UART_Receive_IT>
      return;
 800cf58:	e256      	b.n	800d408 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800cf5a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800cf5e:	2b00      	cmp	r3, #0
 800cf60:	f000 80de 	beq.w	800d120 <HAL_UART_IRQHandler+0x22c>
 800cf64:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800cf68:	f003 0301 	and.w	r3, r3, #1
 800cf6c:	2b00      	cmp	r3, #0
 800cf6e:	d106      	bne.n	800cf7e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800cf70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cf74:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800cf78:	2b00      	cmp	r3, #0
 800cf7a:	f000 80d1 	beq.w	800d120 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800cf7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cf82:	f003 0301 	and.w	r3, r3, #1
 800cf86:	2b00      	cmp	r3, #0
 800cf88:	d00b      	beq.n	800cfa2 <HAL_UART_IRQHandler+0xae>
 800cf8a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cf8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cf92:	2b00      	cmp	r3, #0
 800cf94:	d005      	beq.n	800cfa2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800cf96:	687b      	ldr	r3, [r7, #4]
 800cf98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cf9a:	f043 0201 	orr.w	r2, r3, #1
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800cfa2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cfa6:	f003 0304 	and.w	r3, r3, #4
 800cfaa:	2b00      	cmp	r3, #0
 800cfac:	d00b      	beq.n	800cfc6 <HAL_UART_IRQHandler+0xd2>
 800cfae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800cfb2:	f003 0301 	and.w	r3, r3, #1
 800cfb6:	2b00      	cmp	r3, #0
 800cfb8:	d005      	beq.n	800cfc6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cfbe:	f043 0202 	orr.w	r2, r3, #2
 800cfc2:	687b      	ldr	r3, [r7, #4]
 800cfc4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800cfc6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cfca:	f003 0302 	and.w	r3, r3, #2
 800cfce:	2b00      	cmp	r3, #0
 800cfd0:	d00b      	beq.n	800cfea <HAL_UART_IRQHandler+0xf6>
 800cfd2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800cfd6:	f003 0301 	and.w	r3, r3, #1
 800cfda:	2b00      	cmp	r3, #0
 800cfdc:	d005      	beq.n	800cfea <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800cfde:	687b      	ldr	r3, [r7, #4]
 800cfe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cfe2:	f043 0204 	orr.w	r2, r3, #4
 800cfe6:	687b      	ldr	r3, [r7, #4]
 800cfe8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800cfea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cfee:	f003 0308 	and.w	r3, r3, #8
 800cff2:	2b00      	cmp	r3, #0
 800cff4:	d011      	beq.n	800d01a <HAL_UART_IRQHandler+0x126>
 800cff6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cffa:	f003 0320 	and.w	r3, r3, #32
 800cffe:	2b00      	cmp	r3, #0
 800d000:	d105      	bne.n	800d00e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800d002:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d006:	f003 0301 	and.w	r3, r3, #1
 800d00a:	2b00      	cmp	r3, #0
 800d00c:	d005      	beq.n	800d01a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800d00e:	687b      	ldr	r3, [r7, #4]
 800d010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d012:	f043 0208 	orr.w	r2, r3, #8
 800d016:	687b      	ldr	r3, [r7, #4]
 800d018:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d01e:	2b00      	cmp	r3, #0
 800d020:	f000 81ed 	beq.w	800d3fe <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800d024:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d028:	f003 0320 	and.w	r3, r3, #32
 800d02c:	2b00      	cmp	r3, #0
 800d02e:	d008      	beq.n	800d042 <HAL_UART_IRQHandler+0x14e>
 800d030:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d034:	f003 0320 	and.w	r3, r3, #32
 800d038:	2b00      	cmp	r3, #0
 800d03a:	d002      	beq.n	800d042 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800d03c:	6878      	ldr	r0, [r7, #4]
 800d03e:	f000 fd0e 	bl	800da5e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800d042:	687b      	ldr	r3, [r7, #4]
 800d044:	681b      	ldr	r3, [r3, #0]
 800d046:	695b      	ldr	r3, [r3, #20]
 800d048:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d04c:	2b40      	cmp	r3, #64	; 0x40
 800d04e:	bf0c      	ite	eq
 800d050:	2301      	moveq	r3, #1
 800d052:	2300      	movne	r3, #0
 800d054:	b2db      	uxtb	r3, r3
 800d056:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800d05a:	687b      	ldr	r3, [r7, #4]
 800d05c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d05e:	f003 0308 	and.w	r3, r3, #8
 800d062:	2b00      	cmp	r3, #0
 800d064:	d103      	bne.n	800d06e <HAL_UART_IRQHandler+0x17a>
 800d066:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800d06a:	2b00      	cmp	r3, #0
 800d06c:	d04f      	beq.n	800d10e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800d06e:	6878      	ldr	r0, [r7, #4]
 800d070:	f000 fc16 	bl	800d8a0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	681b      	ldr	r3, [r3, #0]
 800d078:	695b      	ldr	r3, [r3, #20]
 800d07a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d07e:	2b40      	cmp	r3, #64	; 0x40
 800d080:	d141      	bne.n	800d106 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d082:	687b      	ldr	r3, [r7, #4]
 800d084:	681b      	ldr	r3, [r3, #0]
 800d086:	3314      	adds	r3, #20
 800d088:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d08c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800d090:	e853 3f00 	ldrex	r3, [r3]
 800d094:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800d098:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800d09c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d0a0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	681b      	ldr	r3, [r3, #0]
 800d0a8:	3314      	adds	r3, #20
 800d0aa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800d0ae:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800d0b2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d0b6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800d0ba:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800d0be:	e841 2300 	strex	r3, r2, [r1]
 800d0c2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800d0c6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800d0ca:	2b00      	cmp	r3, #0
 800d0cc:	d1d9      	bne.n	800d082 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d0d2:	2b00      	cmp	r3, #0
 800d0d4:	d013      	beq.n	800d0fe <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800d0d6:	687b      	ldr	r3, [r7, #4]
 800d0d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d0da:	4a7d      	ldr	r2, [pc, #500]	; (800d2d0 <HAL_UART_IRQHandler+0x3dc>)
 800d0dc:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800d0de:	687b      	ldr	r3, [r7, #4]
 800d0e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d0e2:	4618      	mov	r0, r3
 800d0e4:	f7fc fdd6 	bl	8009c94 <HAL_DMA_Abort_IT>
 800d0e8:	4603      	mov	r3, r0
 800d0ea:	2b00      	cmp	r3, #0
 800d0ec:	d016      	beq.n	800d11c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800d0ee:	687b      	ldr	r3, [r7, #4]
 800d0f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d0f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d0f4:	687a      	ldr	r2, [r7, #4]
 800d0f6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800d0f8:	4610      	mov	r0, r2
 800d0fa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d0fc:	e00e      	b.n	800d11c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800d0fe:	6878      	ldr	r0, [r7, #4]
 800d100:	f7fc f910 	bl	8009324 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d104:	e00a      	b.n	800d11c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800d106:	6878      	ldr	r0, [r7, #4]
 800d108:	f7fc f90c 	bl	8009324 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d10c:	e006      	b.n	800d11c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800d10e:	6878      	ldr	r0, [r7, #4]
 800d110:	f7fc f908 	bl	8009324 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d114:	687b      	ldr	r3, [r7, #4]
 800d116:	2200      	movs	r2, #0
 800d118:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800d11a:	e170      	b.n	800d3fe <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d11c:	bf00      	nop
    return;
 800d11e:	e16e      	b.n	800d3fe <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d120:	687b      	ldr	r3, [r7, #4]
 800d122:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d124:	2b01      	cmp	r3, #1
 800d126:	f040 814a 	bne.w	800d3be <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800d12a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d12e:	f003 0310 	and.w	r3, r3, #16
 800d132:	2b00      	cmp	r3, #0
 800d134:	f000 8143 	beq.w	800d3be <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800d138:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d13c:	f003 0310 	and.w	r3, r3, #16
 800d140:	2b00      	cmp	r3, #0
 800d142:	f000 813c 	beq.w	800d3be <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800d146:	2300      	movs	r3, #0
 800d148:	60bb      	str	r3, [r7, #8]
 800d14a:	687b      	ldr	r3, [r7, #4]
 800d14c:	681b      	ldr	r3, [r3, #0]
 800d14e:	681b      	ldr	r3, [r3, #0]
 800d150:	60bb      	str	r3, [r7, #8]
 800d152:	687b      	ldr	r3, [r7, #4]
 800d154:	681b      	ldr	r3, [r3, #0]
 800d156:	685b      	ldr	r3, [r3, #4]
 800d158:	60bb      	str	r3, [r7, #8]
 800d15a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	681b      	ldr	r3, [r3, #0]
 800d160:	695b      	ldr	r3, [r3, #20]
 800d162:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d166:	2b40      	cmp	r3, #64	; 0x40
 800d168:	f040 80b4 	bne.w	800d2d4 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800d16c:	687b      	ldr	r3, [r7, #4]
 800d16e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d170:	681b      	ldr	r3, [r3, #0]
 800d172:	685b      	ldr	r3, [r3, #4]
 800d174:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800d178:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800d17c:	2b00      	cmp	r3, #0
 800d17e:	f000 8140 	beq.w	800d402 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800d182:	687b      	ldr	r3, [r7, #4]
 800d184:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800d186:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800d18a:	429a      	cmp	r2, r3
 800d18c:	f080 8139 	bcs.w	800d402 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800d196:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800d198:	687b      	ldr	r3, [r7, #4]
 800d19a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d19c:	69db      	ldr	r3, [r3, #28]
 800d19e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d1a2:	f000 8088 	beq.w	800d2b6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d1a6:	687b      	ldr	r3, [r7, #4]
 800d1a8:	681b      	ldr	r3, [r3, #0]
 800d1aa:	330c      	adds	r3, #12
 800d1ac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d1b0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800d1b4:	e853 3f00 	ldrex	r3, [r3]
 800d1b8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800d1bc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800d1c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d1c4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800d1c8:	687b      	ldr	r3, [r7, #4]
 800d1ca:	681b      	ldr	r3, [r3, #0]
 800d1cc:	330c      	adds	r3, #12
 800d1ce:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800d1d2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800d1d6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d1da:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800d1de:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800d1e2:	e841 2300 	strex	r3, r2, [r1]
 800d1e6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800d1ea:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d1ee:	2b00      	cmp	r3, #0
 800d1f0:	d1d9      	bne.n	800d1a6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d1f2:	687b      	ldr	r3, [r7, #4]
 800d1f4:	681b      	ldr	r3, [r3, #0]
 800d1f6:	3314      	adds	r3, #20
 800d1f8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d1fa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d1fc:	e853 3f00 	ldrex	r3, [r3]
 800d200:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800d202:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d204:	f023 0301 	bic.w	r3, r3, #1
 800d208:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800d20c:	687b      	ldr	r3, [r7, #4]
 800d20e:	681b      	ldr	r3, [r3, #0]
 800d210:	3314      	adds	r3, #20
 800d212:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800d216:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800d21a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d21c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800d21e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800d222:	e841 2300 	strex	r3, r2, [r1]
 800d226:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800d228:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d22a:	2b00      	cmp	r3, #0
 800d22c:	d1e1      	bne.n	800d1f2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	681b      	ldr	r3, [r3, #0]
 800d232:	3314      	adds	r3, #20
 800d234:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d236:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d238:	e853 3f00 	ldrex	r3, [r3]
 800d23c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800d23e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d240:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d244:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800d248:	687b      	ldr	r3, [r7, #4]
 800d24a:	681b      	ldr	r3, [r3, #0]
 800d24c:	3314      	adds	r3, #20
 800d24e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800d252:	66fa      	str	r2, [r7, #108]	; 0x6c
 800d254:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d256:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800d258:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800d25a:	e841 2300 	strex	r3, r2, [r1]
 800d25e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800d260:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d262:	2b00      	cmp	r3, #0
 800d264:	d1e3      	bne.n	800d22e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800d266:	687b      	ldr	r3, [r7, #4]
 800d268:	2220      	movs	r2, #32
 800d26a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d26e:	687b      	ldr	r3, [r7, #4]
 800d270:	2200      	movs	r2, #0
 800d272:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d274:	687b      	ldr	r3, [r7, #4]
 800d276:	681b      	ldr	r3, [r3, #0]
 800d278:	330c      	adds	r3, #12
 800d27a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d27c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d27e:	e853 3f00 	ldrex	r3, [r3]
 800d282:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800d284:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d286:	f023 0310 	bic.w	r3, r3, #16
 800d28a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800d28e:	687b      	ldr	r3, [r7, #4]
 800d290:	681b      	ldr	r3, [r3, #0]
 800d292:	330c      	adds	r3, #12
 800d294:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800d298:	65ba      	str	r2, [r7, #88]	; 0x58
 800d29a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d29c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800d29e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d2a0:	e841 2300 	strex	r3, r2, [r1]
 800d2a4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800d2a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d2a8:	2b00      	cmp	r3, #0
 800d2aa:	d1e3      	bne.n	800d274 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800d2ac:	687b      	ldr	r3, [r7, #4]
 800d2ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d2b0:	4618      	mov	r0, r3
 800d2b2:	f7fc fc7f 	bl	8009bb4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800d2b6:	687b      	ldr	r3, [r7, #4]
 800d2b8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800d2ba:	687b      	ldr	r3, [r7, #4]
 800d2bc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800d2be:	b29b      	uxth	r3, r3
 800d2c0:	1ad3      	subs	r3, r2, r3
 800d2c2:	b29b      	uxth	r3, r3
 800d2c4:	4619      	mov	r1, r3
 800d2c6:	6878      	ldr	r0, [r7, #4]
 800d2c8:	f000 f8b6 	bl	800d438 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800d2cc:	e099      	b.n	800d402 <HAL_UART_IRQHandler+0x50e>
 800d2ce:	bf00      	nop
 800d2d0:	0800d967 	.word	0x0800d967
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800d2d8:	687b      	ldr	r3, [r7, #4]
 800d2da:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800d2dc:	b29b      	uxth	r3, r3
 800d2de:	1ad3      	subs	r3, r2, r3
 800d2e0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800d2e8:	b29b      	uxth	r3, r3
 800d2ea:	2b00      	cmp	r3, #0
 800d2ec:	f000 808b 	beq.w	800d406 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800d2f0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800d2f4:	2b00      	cmp	r3, #0
 800d2f6:	f000 8086 	beq.w	800d406 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800d2fa:	687b      	ldr	r3, [r7, #4]
 800d2fc:	681b      	ldr	r3, [r3, #0]
 800d2fe:	330c      	adds	r3, #12
 800d300:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d302:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d304:	e853 3f00 	ldrex	r3, [r3]
 800d308:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800d30a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d30c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800d310:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800d314:	687b      	ldr	r3, [r7, #4]
 800d316:	681b      	ldr	r3, [r3, #0]
 800d318:	330c      	adds	r3, #12
 800d31a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800d31e:	647a      	str	r2, [r7, #68]	; 0x44
 800d320:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d322:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800d324:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d326:	e841 2300 	strex	r3, r2, [r1]
 800d32a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800d32c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d32e:	2b00      	cmp	r3, #0
 800d330:	d1e3      	bne.n	800d2fa <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d332:	687b      	ldr	r3, [r7, #4]
 800d334:	681b      	ldr	r3, [r3, #0]
 800d336:	3314      	adds	r3, #20
 800d338:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d33a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d33c:	e853 3f00 	ldrex	r3, [r3]
 800d340:	623b      	str	r3, [r7, #32]
   return(result);
 800d342:	6a3b      	ldr	r3, [r7, #32]
 800d344:	f023 0301 	bic.w	r3, r3, #1
 800d348:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800d34c:	687b      	ldr	r3, [r7, #4]
 800d34e:	681b      	ldr	r3, [r3, #0]
 800d350:	3314      	adds	r3, #20
 800d352:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800d356:	633a      	str	r2, [r7, #48]	; 0x30
 800d358:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d35a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d35c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d35e:	e841 2300 	strex	r3, r2, [r1]
 800d362:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800d364:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d366:	2b00      	cmp	r3, #0
 800d368:	d1e3      	bne.n	800d332 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800d36a:	687b      	ldr	r3, [r7, #4]
 800d36c:	2220      	movs	r2, #32
 800d36e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d372:	687b      	ldr	r3, [r7, #4]
 800d374:	2200      	movs	r2, #0
 800d376:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d378:	687b      	ldr	r3, [r7, #4]
 800d37a:	681b      	ldr	r3, [r3, #0]
 800d37c:	330c      	adds	r3, #12
 800d37e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d380:	693b      	ldr	r3, [r7, #16]
 800d382:	e853 3f00 	ldrex	r3, [r3]
 800d386:	60fb      	str	r3, [r7, #12]
   return(result);
 800d388:	68fb      	ldr	r3, [r7, #12]
 800d38a:	f023 0310 	bic.w	r3, r3, #16
 800d38e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800d392:	687b      	ldr	r3, [r7, #4]
 800d394:	681b      	ldr	r3, [r3, #0]
 800d396:	330c      	adds	r3, #12
 800d398:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800d39c:	61fa      	str	r2, [r7, #28]
 800d39e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d3a0:	69b9      	ldr	r1, [r7, #24]
 800d3a2:	69fa      	ldr	r2, [r7, #28]
 800d3a4:	e841 2300 	strex	r3, r2, [r1]
 800d3a8:	617b      	str	r3, [r7, #20]
   return(result);
 800d3aa:	697b      	ldr	r3, [r7, #20]
 800d3ac:	2b00      	cmp	r3, #0
 800d3ae:	d1e3      	bne.n	800d378 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800d3b0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800d3b4:	4619      	mov	r1, r3
 800d3b6:	6878      	ldr	r0, [r7, #4]
 800d3b8:	f000 f83e 	bl	800d438 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800d3bc:	e023      	b.n	800d406 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800d3be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d3c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d3c6:	2b00      	cmp	r3, #0
 800d3c8:	d009      	beq.n	800d3de <HAL_UART_IRQHandler+0x4ea>
 800d3ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d3ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d3d2:	2b00      	cmp	r3, #0
 800d3d4:	d003      	beq.n	800d3de <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800d3d6:	6878      	ldr	r0, [r7, #4]
 800d3d8:	f000 fad9 	bl	800d98e <UART_Transmit_IT>
    return;
 800d3dc:	e014      	b.n	800d408 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800d3de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d3e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d3e6:	2b00      	cmp	r3, #0
 800d3e8:	d00e      	beq.n	800d408 <HAL_UART_IRQHandler+0x514>
 800d3ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d3ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d3f2:	2b00      	cmp	r3, #0
 800d3f4:	d008      	beq.n	800d408 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800d3f6:	6878      	ldr	r0, [r7, #4]
 800d3f8:	f000 fb19 	bl	800da2e <UART_EndTransmit_IT>
    return;
 800d3fc:	e004      	b.n	800d408 <HAL_UART_IRQHandler+0x514>
    return;
 800d3fe:	bf00      	nop
 800d400:	e002      	b.n	800d408 <HAL_UART_IRQHandler+0x514>
      return;
 800d402:	bf00      	nop
 800d404:	e000      	b.n	800d408 <HAL_UART_IRQHandler+0x514>
      return;
 800d406:	bf00      	nop
  }
}
 800d408:	37e8      	adds	r7, #232	; 0xe8
 800d40a:	46bd      	mov	sp, r7
 800d40c:	bd80      	pop	{r7, pc}
 800d40e:	bf00      	nop

0800d410 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800d410:	b480      	push	{r7}
 800d412:	b083      	sub	sp, #12
 800d414:	af00      	add	r7, sp, #0
 800d416:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800d418:	bf00      	nop
 800d41a:	370c      	adds	r7, #12
 800d41c:	46bd      	mov	sp, r7
 800d41e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d422:	4770      	bx	lr

0800d424 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800d424:	b480      	push	{r7}
 800d426:	b083      	sub	sp, #12
 800d428:	af00      	add	r7, sp, #0
 800d42a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800d42c:	bf00      	nop
 800d42e:	370c      	adds	r7, #12
 800d430:	46bd      	mov	sp, r7
 800d432:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d436:	4770      	bx	lr

0800d438 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800d438:	b480      	push	{r7}
 800d43a:	b083      	sub	sp, #12
 800d43c:	af00      	add	r7, sp, #0
 800d43e:	6078      	str	r0, [r7, #4]
 800d440:	460b      	mov	r3, r1
 800d442:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800d444:	bf00      	nop
 800d446:	370c      	adds	r7, #12
 800d448:	46bd      	mov	sp, r7
 800d44a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d44e:	4770      	bx	lr

0800d450 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800d450:	b580      	push	{r7, lr}
 800d452:	b09c      	sub	sp, #112	; 0x70
 800d454:	af00      	add	r7, sp, #0
 800d456:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800d458:	687b      	ldr	r3, [r7, #4]
 800d45a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d45c:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800d45e:	687b      	ldr	r3, [r7, #4]
 800d460:	681b      	ldr	r3, [r3, #0]
 800d462:	681b      	ldr	r3, [r3, #0]
 800d464:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d468:	2b00      	cmp	r3, #0
 800d46a:	d172      	bne.n	800d552 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800d46c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d46e:	2200      	movs	r2, #0
 800d470:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d472:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d474:	681b      	ldr	r3, [r3, #0]
 800d476:	330c      	adds	r3, #12
 800d478:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d47a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d47c:	e853 3f00 	ldrex	r3, [r3]
 800d480:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800d482:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d484:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d488:	66bb      	str	r3, [r7, #104]	; 0x68
 800d48a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d48c:	681b      	ldr	r3, [r3, #0]
 800d48e:	330c      	adds	r3, #12
 800d490:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800d492:	65ba      	str	r2, [r7, #88]	; 0x58
 800d494:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d496:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800d498:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d49a:	e841 2300 	strex	r3, r2, [r1]
 800d49e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800d4a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d4a2:	2b00      	cmp	r3, #0
 800d4a4:	d1e5      	bne.n	800d472 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d4a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d4a8:	681b      	ldr	r3, [r3, #0]
 800d4aa:	3314      	adds	r3, #20
 800d4ac:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d4ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d4b0:	e853 3f00 	ldrex	r3, [r3]
 800d4b4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800d4b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d4b8:	f023 0301 	bic.w	r3, r3, #1
 800d4bc:	667b      	str	r3, [r7, #100]	; 0x64
 800d4be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d4c0:	681b      	ldr	r3, [r3, #0]
 800d4c2:	3314      	adds	r3, #20
 800d4c4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800d4c6:	647a      	str	r2, [r7, #68]	; 0x44
 800d4c8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d4ca:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800d4cc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d4ce:	e841 2300 	strex	r3, r2, [r1]
 800d4d2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800d4d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d4d6:	2b00      	cmp	r3, #0
 800d4d8:	d1e5      	bne.n	800d4a6 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d4da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d4dc:	681b      	ldr	r3, [r3, #0]
 800d4de:	3314      	adds	r3, #20
 800d4e0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d4e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4e4:	e853 3f00 	ldrex	r3, [r3]
 800d4e8:	623b      	str	r3, [r7, #32]
   return(result);
 800d4ea:	6a3b      	ldr	r3, [r7, #32]
 800d4ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d4f0:	663b      	str	r3, [r7, #96]	; 0x60
 800d4f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d4f4:	681b      	ldr	r3, [r3, #0]
 800d4f6:	3314      	adds	r3, #20
 800d4f8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800d4fa:	633a      	str	r2, [r7, #48]	; 0x30
 800d4fc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d4fe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d500:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d502:	e841 2300 	strex	r3, r2, [r1]
 800d506:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800d508:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d50a:	2b00      	cmp	r3, #0
 800d50c:	d1e5      	bne.n	800d4da <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800d50e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d510:	2220      	movs	r2, #32
 800d512:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d516:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d51a:	2b01      	cmp	r3, #1
 800d51c:	d119      	bne.n	800d552 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d51e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d520:	681b      	ldr	r3, [r3, #0]
 800d522:	330c      	adds	r3, #12
 800d524:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d526:	693b      	ldr	r3, [r7, #16]
 800d528:	e853 3f00 	ldrex	r3, [r3]
 800d52c:	60fb      	str	r3, [r7, #12]
   return(result);
 800d52e:	68fb      	ldr	r3, [r7, #12]
 800d530:	f023 0310 	bic.w	r3, r3, #16
 800d534:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d536:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d538:	681b      	ldr	r3, [r3, #0]
 800d53a:	330c      	adds	r3, #12
 800d53c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800d53e:	61fa      	str	r2, [r7, #28]
 800d540:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d542:	69b9      	ldr	r1, [r7, #24]
 800d544:	69fa      	ldr	r2, [r7, #28]
 800d546:	e841 2300 	strex	r3, r2, [r1]
 800d54a:	617b      	str	r3, [r7, #20]
   return(result);
 800d54c:	697b      	ldr	r3, [r7, #20]
 800d54e:	2b00      	cmp	r3, #0
 800d550:	d1e5      	bne.n	800d51e <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d552:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d556:	2b01      	cmp	r3, #1
 800d558:	d106      	bne.n	800d568 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d55a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d55c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800d55e:	4619      	mov	r1, r3
 800d560:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800d562:	f7ff ff69 	bl	800d438 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800d566:	e002      	b.n	800d56e <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 800d568:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800d56a:	f7fb fee5 	bl	8009338 <HAL_UART_RxCpltCallback>
}
 800d56e:	bf00      	nop
 800d570:	3770      	adds	r7, #112	; 0x70
 800d572:	46bd      	mov	sp, r7
 800d574:	bd80      	pop	{r7, pc}

0800d576 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800d576:	b580      	push	{r7, lr}
 800d578:	b084      	sub	sp, #16
 800d57a:	af00      	add	r7, sp, #0
 800d57c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800d57e:	687b      	ldr	r3, [r7, #4]
 800d580:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d582:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d584:	68fb      	ldr	r3, [r7, #12]
 800d586:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d588:	2b01      	cmp	r3, #1
 800d58a:	d108      	bne.n	800d59e <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800d58c:	68fb      	ldr	r3, [r7, #12]
 800d58e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800d590:	085b      	lsrs	r3, r3, #1
 800d592:	b29b      	uxth	r3, r3
 800d594:	4619      	mov	r1, r3
 800d596:	68f8      	ldr	r0, [r7, #12]
 800d598:	f7ff ff4e 	bl	800d438 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800d59c:	e002      	b.n	800d5a4 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 800d59e:	68f8      	ldr	r0, [r7, #12]
 800d5a0:	f7ff ff40 	bl	800d424 <HAL_UART_RxHalfCpltCallback>
}
 800d5a4:	bf00      	nop
 800d5a6:	3710      	adds	r7, #16
 800d5a8:	46bd      	mov	sp, r7
 800d5aa:	bd80      	pop	{r7, pc}

0800d5ac <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800d5ac:	b580      	push	{r7, lr}
 800d5ae:	b084      	sub	sp, #16
 800d5b0:	af00      	add	r7, sp, #0
 800d5b2:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800d5b4:	2300      	movs	r3, #0
 800d5b6:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800d5b8:	687b      	ldr	r3, [r7, #4]
 800d5ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d5bc:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800d5be:	68bb      	ldr	r3, [r7, #8]
 800d5c0:	681b      	ldr	r3, [r3, #0]
 800d5c2:	695b      	ldr	r3, [r3, #20]
 800d5c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d5c8:	2b80      	cmp	r3, #128	; 0x80
 800d5ca:	bf0c      	ite	eq
 800d5cc:	2301      	moveq	r3, #1
 800d5ce:	2300      	movne	r3, #0
 800d5d0:	b2db      	uxtb	r3, r3
 800d5d2:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800d5d4:	68bb      	ldr	r3, [r7, #8]
 800d5d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d5da:	b2db      	uxtb	r3, r3
 800d5dc:	2b21      	cmp	r3, #33	; 0x21
 800d5de:	d108      	bne.n	800d5f2 <UART_DMAError+0x46>
 800d5e0:	68fb      	ldr	r3, [r7, #12]
 800d5e2:	2b00      	cmp	r3, #0
 800d5e4:	d005      	beq.n	800d5f2 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800d5e6:	68bb      	ldr	r3, [r7, #8]
 800d5e8:	2200      	movs	r2, #0
 800d5ea:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800d5ec:	68b8      	ldr	r0, [r7, #8]
 800d5ee:	f000 f92f 	bl	800d850 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800d5f2:	68bb      	ldr	r3, [r7, #8]
 800d5f4:	681b      	ldr	r3, [r3, #0]
 800d5f6:	695b      	ldr	r3, [r3, #20]
 800d5f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d5fc:	2b40      	cmp	r3, #64	; 0x40
 800d5fe:	bf0c      	ite	eq
 800d600:	2301      	moveq	r3, #1
 800d602:	2300      	movne	r3, #0
 800d604:	b2db      	uxtb	r3, r3
 800d606:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800d608:	68bb      	ldr	r3, [r7, #8]
 800d60a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800d60e:	b2db      	uxtb	r3, r3
 800d610:	2b22      	cmp	r3, #34	; 0x22
 800d612:	d108      	bne.n	800d626 <UART_DMAError+0x7a>
 800d614:	68fb      	ldr	r3, [r7, #12]
 800d616:	2b00      	cmp	r3, #0
 800d618:	d005      	beq.n	800d626 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800d61a:	68bb      	ldr	r3, [r7, #8]
 800d61c:	2200      	movs	r2, #0
 800d61e:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800d620:	68b8      	ldr	r0, [r7, #8]
 800d622:	f000 f93d 	bl	800d8a0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800d626:	68bb      	ldr	r3, [r7, #8]
 800d628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d62a:	f043 0210 	orr.w	r2, r3, #16
 800d62e:	68bb      	ldr	r3, [r7, #8]
 800d630:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800d632:	68b8      	ldr	r0, [r7, #8]
 800d634:	f7fb fe76 	bl	8009324 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d638:	bf00      	nop
 800d63a:	3710      	adds	r7, #16
 800d63c:	46bd      	mov	sp, r7
 800d63e:	bd80      	pop	{r7, pc}

0800d640 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800d640:	b580      	push	{r7, lr}
 800d642:	b090      	sub	sp, #64	; 0x40
 800d644:	af00      	add	r7, sp, #0
 800d646:	60f8      	str	r0, [r7, #12]
 800d648:	60b9      	str	r1, [r7, #8]
 800d64a:	603b      	str	r3, [r7, #0]
 800d64c:	4613      	mov	r3, r2
 800d64e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d650:	e050      	b.n	800d6f4 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d652:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d654:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d658:	d04c      	beq.n	800d6f4 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800d65a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d65c:	2b00      	cmp	r3, #0
 800d65e:	d007      	beq.n	800d670 <UART_WaitOnFlagUntilTimeout+0x30>
 800d660:	f7fb ffd0 	bl	8009604 <HAL_GetTick>
 800d664:	4602      	mov	r2, r0
 800d666:	683b      	ldr	r3, [r7, #0]
 800d668:	1ad3      	subs	r3, r2, r3
 800d66a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d66c:	429a      	cmp	r2, r3
 800d66e:	d241      	bcs.n	800d6f4 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800d670:	68fb      	ldr	r3, [r7, #12]
 800d672:	681b      	ldr	r3, [r3, #0]
 800d674:	330c      	adds	r3, #12
 800d676:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d678:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d67a:	e853 3f00 	ldrex	r3, [r3]
 800d67e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d682:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800d686:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d688:	68fb      	ldr	r3, [r7, #12]
 800d68a:	681b      	ldr	r3, [r3, #0]
 800d68c:	330c      	adds	r3, #12
 800d68e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d690:	637a      	str	r2, [r7, #52]	; 0x34
 800d692:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d694:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d696:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d698:	e841 2300 	strex	r3, r2, [r1]
 800d69c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800d69e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6a0:	2b00      	cmp	r3, #0
 800d6a2:	d1e5      	bne.n	800d670 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d6a4:	68fb      	ldr	r3, [r7, #12]
 800d6a6:	681b      	ldr	r3, [r3, #0]
 800d6a8:	3314      	adds	r3, #20
 800d6aa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d6ac:	697b      	ldr	r3, [r7, #20]
 800d6ae:	e853 3f00 	ldrex	r3, [r3]
 800d6b2:	613b      	str	r3, [r7, #16]
   return(result);
 800d6b4:	693b      	ldr	r3, [r7, #16]
 800d6b6:	f023 0301 	bic.w	r3, r3, #1
 800d6ba:	63bb      	str	r3, [r7, #56]	; 0x38
 800d6bc:	68fb      	ldr	r3, [r7, #12]
 800d6be:	681b      	ldr	r3, [r3, #0]
 800d6c0:	3314      	adds	r3, #20
 800d6c2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d6c4:	623a      	str	r2, [r7, #32]
 800d6c6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d6c8:	69f9      	ldr	r1, [r7, #28]
 800d6ca:	6a3a      	ldr	r2, [r7, #32]
 800d6cc:	e841 2300 	strex	r3, r2, [r1]
 800d6d0:	61bb      	str	r3, [r7, #24]
   return(result);
 800d6d2:	69bb      	ldr	r3, [r7, #24]
 800d6d4:	2b00      	cmp	r3, #0
 800d6d6:	d1e5      	bne.n	800d6a4 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800d6d8:	68fb      	ldr	r3, [r7, #12]
 800d6da:	2220      	movs	r2, #32
 800d6dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800d6e0:	68fb      	ldr	r3, [r7, #12]
 800d6e2:	2220      	movs	r2, #32
 800d6e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800d6e8:	68fb      	ldr	r3, [r7, #12]
 800d6ea:	2200      	movs	r2, #0
 800d6ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800d6f0:	2303      	movs	r3, #3
 800d6f2:	e00f      	b.n	800d714 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d6f4:	68fb      	ldr	r3, [r7, #12]
 800d6f6:	681b      	ldr	r3, [r3, #0]
 800d6f8:	681a      	ldr	r2, [r3, #0]
 800d6fa:	68bb      	ldr	r3, [r7, #8]
 800d6fc:	4013      	ands	r3, r2
 800d6fe:	68ba      	ldr	r2, [r7, #8]
 800d700:	429a      	cmp	r2, r3
 800d702:	bf0c      	ite	eq
 800d704:	2301      	moveq	r3, #1
 800d706:	2300      	movne	r3, #0
 800d708:	b2db      	uxtb	r3, r3
 800d70a:	461a      	mov	r2, r3
 800d70c:	79fb      	ldrb	r3, [r7, #7]
 800d70e:	429a      	cmp	r2, r3
 800d710:	d09f      	beq.n	800d652 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800d712:	2300      	movs	r3, #0
}
 800d714:	4618      	mov	r0, r3
 800d716:	3740      	adds	r7, #64	; 0x40
 800d718:	46bd      	mov	sp, r7
 800d71a:	bd80      	pop	{r7, pc}

0800d71c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800d71c:	b580      	push	{r7, lr}
 800d71e:	b098      	sub	sp, #96	; 0x60
 800d720:	af00      	add	r7, sp, #0
 800d722:	60f8      	str	r0, [r7, #12]
 800d724:	60b9      	str	r1, [r7, #8]
 800d726:	4613      	mov	r3, r2
 800d728:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800d72a:	68ba      	ldr	r2, [r7, #8]
 800d72c:	68fb      	ldr	r3, [r7, #12]
 800d72e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800d730:	68fb      	ldr	r3, [r7, #12]
 800d732:	88fa      	ldrh	r2, [r7, #6]
 800d734:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d736:	68fb      	ldr	r3, [r7, #12]
 800d738:	2200      	movs	r2, #0
 800d73a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800d73c:	68fb      	ldr	r3, [r7, #12]
 800d73e:	2222      	movs	r2, #34	; 0x22
 800d740:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800d744:	68fb      	ldr	r3, [r7, #12]
 800d746:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d748:	4a3e      	ldr	r2, [pc, #248]	; (800d844 <UART_Start_Receive_DMA+0x128>)
 800d74a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800d74c:	68fb      	ldr	r3, [r7, #12]
 800d74e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d750:	4a3d      	ldr	r2, [pc, #244]	; (800d848 <UART_Start_Receive_DMA+0x12c>)
 800d752:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800d754:	68fb      	ldr	r3, [r7, #12]
 800d756:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d758:	4a3c      	ldr	r2, [pc, #240]	; (800d84c <UART_Start_Receive_DMA+0x130>)
 800d75a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800d75c:	68fb      	ldr	r3, [r7, #12]
 800d75e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d760:	2200      	movs	r2, #0
 800d762:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800d764:	f107 0308 	add.w	r3, r7, #8
 800d768:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800d76a:	68fb      	ldr	r3, [r7, #12]
 800d76c:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800d76e:	68fb      	ldr	r3, [r7, #12]
 800d770:	681b      	ldr	r3, [r3, #0]
 800d772:	3304      	adds	r3, #4
 800d774:	4619      	mov	r1, r3
 800d776:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d778:	681a      	ldr	r2, [r3, #0]
 800d77a:	88fb      	ldrh	r3, [r7, #6]
 800d77c:	f7fc f9c2 	bl	8009b04 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800d780:	2300      	movs	r3, #0
 800d782:	613b      	str	r3, [r7, #16]
 800d784:	68fb      	ldr	r3, [r7, #12]
 800d786:	681b      	ldr	r3, [r3, #0]
 800d788:	681b      	ldr	r3, [r3, #0]
 800d78a:	613b      	str	r3, [r7, #16]
 800d78c:	68fb      	ldr	r3, [r7, #12]
 800d78e:	681b      	ldr	r3, [r3, #0]
 800d790:	685b      	ldr	r3, [r3, #4]
 800d792:	613b      	str	r3, [r7, #16]
 800d794:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d796:	68fb      	ldr	r3, [r7, #12]
 800d798:	2200      	movs	r2, #0
 800d79a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d79e:	68fb      	ldr	r3, [r7, #12]
 800d7a0:	681b      	ldr	r3, [r3, #0]
 800d7a2:	330c      	adds	r3, #12
 800d7a4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d7a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d7a8:	e853 3f00 	ldrex	r3, [r3]
 800d7ac:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800d7ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d7b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d7b4:	65bb      	str	r3, [r7, #88]	; 0x58
 800d7b6:	68fb      	ldr	r3, [r7, #12]
 800d7b8:	681b      	ldr	r3, [r3, #0]
 800d7ba:	330c      	adds	r3, #12
 800d7bc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d7be:	64fa      	str	r2, [r7, #76]	; 0x4c
 800d7c0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d7c2:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800d7c4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800d7c6:	e841 2300 	strex	r3, r2, [r1]
 800d7ca:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800d7cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d7ce:	2b00      	cmp	r3, #0
 800d7d0:	d1e5      	bne.n	800d79e <UART_Start_Receive_DMA+0x82>

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d7d2:	68fb      	ldr	r3, [r7, #12]
 800d7d4:	681b      	ldr	r3, [r3, #0]
 800d7d6:	3314      	adds	r3, #20
 800d7d8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d7da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7dc:	e853 3f00 	ldrex	r3, [r3]
 800d7e0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800d7e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7e4:	f043 0301 	orr.w	r3, r3, #1
 800d7e8:	657b      	str	r3, [r7, #84]	; 0x54
 800d7ea:	68fb      	ldr	r3, [r7, #12]
 800d7ec:	681b      	ldr	r3, [r3, #0]
 800d7ee:	3314      	adds	r3, #20
 800d7f0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800d7f2:	63ba      	str	r2, [r7, #56]	; 0x38
 800d7f4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d7f6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800d7f8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d7fa:	e841 2300 	strex	r3, r2, [r1]
 800d7fe:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800d800:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d802:	2b00      	cmp	r3, #0
 800d804:	d1e5      	bne.n	800d7d2 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d806:	68fb      	ldr	r3, [r7, #12]
 800d808:	681b      	ldr	r3, [r3, #0]
 800d80a:	3314      	adds	r3, #20
 800d80c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d80e:	69bb      	ldr	r3, [r7, #24]
 800d810:	e853 3f00 	ldrex	r3, [r3]
 800d814:	617b      	str	r3, [r7, #20]
   return(result);
 800d816:	697b      	ldr	r3, [r7, #20]
 800d818:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d81c:	653b      	str	r3, [r7, #80]	; 0x50
 800d81e:	68fb      	ldr	r3, [r7, #12]
 800d820:	681b      	ldr	r3, [r3, #0]
 800d822:	3314      	adds	r3, #20
 800d824:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d826:	627a      	str	r2, [r7, #36]	; 0x24
 800d828:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d82a:	6a39      	ldr	r1, [r7, #32]
 800d82c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d82e:	e841 2300 	strex	r3, r2, [r1]
 800d832:	61fb      	str	r3, [r7, #28]
   return(result);
 800d834:	69fb      	ldr	r3, [r7, #28]
 800d836:	2b00      	cmp	r3, #0
 800d838:	d1e5      	bne.n	800d806 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 800d83a:	2300      	movs	r3, #0
}
 800d83c:	4618      	mov	r0, r3
 800d83e:	3760      	adds	r7, #96	; 0x60
 800d840:	46bd      	mov	sp, r7
 800d842:	bd80      	pop	{r7, pc}
 800d844:	0800d451 	.word	0x0800d451
 800d848:	0800d577 	.word	0x0800d577
 800d84c:	0800d5ad 	.word	0x0800d5ad

0800d850 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800d850:	b480      	push	{r7}
 800d852:	b089      	sub	sp, #36	; 0x24
 800d854:	af00      	add	r7, sp, #0
 800d856:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800d858:	687b      	ldr	r3, [r7, #4]
 800d85a:	681b      	ldr	r3, [r3, #0]
 800d85c:	330c      	adds	r3, #12
 800d85e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d860:	68fb      	ldr	r3, [r7, #12]
 800d862:	e853 3f00 	ldrex	r3, [r3]
 800d866:	60bb      	str	r3, [r7, #8]
   return(result);
 800d868:	68bb      	ldr	r3, [r7, #8]
 800d86a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800d86e:	61fb      	str	r3, [r7, #28]
 800d870:	687b      	ldr	r3, [r7, #4]
 800d872:	681b      	ldr	r3, [r3, #0]
 800d874:	330c      	adds	r3, #12
 800d876:	69fa      	ldr	r2, [r7, #28]
 800d878:	61ba      	str	r2, [r7, #24]
 800d87a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d87c:	6979      	ldr	r1, [r7, #20]
 800d87e:	69ba      	ldr	r2, [r7, #24]
 800d880:	e841 2300 	strex	r3, r2, [r1]
 800d884:	613b      	str	r3, [r7, #16]
   return(result);
 800d886:	693b      	ldr	r3, [r7, #16]
 800d888:	2b00      	cmp	r3, #0
 800d88a:	d1e5      	bne.n	800d858 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d88c:	687b      	ldr	r3, [r7, #4]
 800d88e:	2220      	movs	r2, #32
 800d890:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800d894:	bf00      	nop
 800d896:	3724      	adds	r7, #36	; 0x24
 800d898:	46bd      	mov	sp, r7
 800d89a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d89e:	4770      	bx	lr

0800d8a0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800d8a0:	b480      	push	{r7}
 800d8a2:	b095      	sub	sp, #84	; 0x54
 800d8a4:	af00      	add	r7, sp, #0
 800d8a6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800d8a8:	687b      	ldr	r3, [r7, #4]
 800d8aa:	681b      	ldr	r3, [r3, #0]
 800d8ac:	330c      	adds	r3, #12
 800d8ae:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d8b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d8b2:	e853 3f00 	ldrex	r3, [r3]
 800d8b6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800d8b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8ba:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800d8be:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d8c0:	687b      	ldr	r3, [r7, #4]
 800d8c2:	681b      	ldr	r3, [r3, #0]
 800d8c4:	330c      	adds	r3, #12
 800d8c6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800d8c8:	643a      	str	r2, [r7, #64]	; 0x40
 800d8ca:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d8cc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800d8ce:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d8d0:	e841 2300 	strex	r3, r2, [r1]
 800d8d4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800d8d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d8d8:	2b00      	cmp	r3, #0
 800d8da:	d1e5      	bne.n	800d8a8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d8dc:	687b      	ldr	r3, [r7, #4]
 800d8de:	681b      	ldr	r3, [r3, #0]
 800d8e0:	3314      	adds	r3, #20
 800d8e2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d8e4:	6a3b      	ldr	r3, [r7, #32]
 800d8e6:	e853 3f00 	ldrex	r3, [r3]
 800d8ea:	61fb      	str	r3, [r7, #28]
   return(result);
 800d8ec:	69fb      	ldr	r3, [r7, #28]
 800d8ee:	f023 0301 	bic.w	r3, r3, #1
 800d8f2:	64bb      	str	r3, [r7, #72]	; 0x48
 800d8f4:	687b      	ldr	r3, [r7, #4]
 800d8f6:	681b      	ldr	r3, [r3, #0]
 800d8f8:	3314      	adds	r3, #20
 800d8fa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d8fc:	62fa      	str	r2, [r7, #44]	; 0x2c
 800d8fe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d900:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d902:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d904:	e841 2300 	strex	r3, r2, [r1]
 800d908:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d90a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d90c:	2b00      	cmp	r3, #0
 800d90e:	d1e5      	bne.n	800d8dc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d910:	687b      	ldr	r3, [r7, #4]
 800d912:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d914:	2b01      	cmp	r3, #1
 800d916:	d119      	bne.n	800d94c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d918:	687b      	ldr	r3, [r7, #4]
 800d91a:	681b      	ldr	r3, [r3, #0]
 800d91c:	330c      	adds	r3, #12
 800d91e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d920:	68fb      	ldr	r3, [r7, #12]
 800d922:	e853 3f00 	ldrex	r3, [r3]
 800d926:	60bb      	str	r3, [r7, #8]
   return(result);
 800d928:	68bb      	ldr	r3, [r7, #8]
 800d92a:	f023 0310 	bic.w	r3, r3, #16
 800d92e:	647b      	str	r3, [r7, #68]	; 0x44
 800d930:	687b      	ldr	r3, [r7, #4]
 800d932:	681b      	ldr	r3, [r3, #0]
 800d934:	330c      	adds	r3, #12
 800d936:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d938:	61ba      	str	r2, [r7, #24]
 800d93a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d93c:	6979      	ldr	r1, [r7, #20]
 800d93e:	69ba      	ldr	r2, [r7, #24]
 800d940:	e841 2300 	strex	r3, r2, [r1]
 800d944:	613b      	str	r3, [r7, #16]
   return(result);
 800d946:	693b      	ldr	r3, [r7, #16]
 800d948:	2b00      	cmp	r3, #0
 800d94a:	d1e5      	bne.n	800d918 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800d94c:	687b      	ldr	r3, [r7, #4]
 800d94e:	2220      	movs	r2, #32
 800d950:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d954:	687b      	ldr	r3, [r7, #4]
 800d956:	2200      	movs	r2, #0
 800d958:	631a      	str	r2, [r3, #48]	; 0x30
}
 800d95a:	bf00      	nop
 800d95c:	3754      	adds	r7, #84	; 0x54
 800d95e:	46bd      	mov	sp, r7
 800d960:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d964:	4770      	bx	lr

0800d966 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800d966:	b580      	push	{r7, lr}
 800d968:	b084      	sub	sp, #16
 800d96a:	af00      	add	r7, sp, #0
 800d96c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800d96e:	687b      	ldr	r3, [r7, #4]
 800d970:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d972:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800d974:	68fb      	ldr	r3, [r7, #12]
 800d976:	2200      	movs	r2, #0
 800d978:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800d97a:	68fb      	ldr	r3, [r7, #12]
 800d97c:	2200      	movs	r2, #0
 800d97e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800d980:	68f8      	ldr	r0, [r7, #12]
 800d982:	f7fb fccf 	bl	8009324 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d986:	bf00      	nop
 800d988:	3710      	adds	r7, #16
 800d98a:	46bd      	mov	sp, r7
 800d98c:	bd80      	pop	{r7, pc}

0800d98e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800d98e:	b480      	push	{r7}
 800d990:	b085      	sub	sp, #20
 800d992:	af00      	add	r7, sp, #0
 800d994:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800d996:	687b      	ldr	r3, [r7, #4]
 800d998:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d99c:	b2db      	uxtb	r3, r3
 800d99e:	2b21      	cmp	r3, #33	; 0x21
 800d9a0:	d13e      	bne.n	800da20 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d9a2:	687b      	ldr	r3, [r7, #4]
 800d9a4:	689b      	ldr	r3, [r3, #8]
 800d9a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d9aa:	d114      	bne.n	800d9d6 <UART_Transmit_IT+0x48>
 800d9ac:	687b      	ldr	r3, [r7, #4]
 800d9ae:	691b      	ldr	r3, [r3, #16]
 800d9b0:	2b00      	cmp	r3, #0
 800d9b2:	d110      	bne.n	800d9d6 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800d9b4:	687b      	ldr	r3, [r7, #4]
 800d9b6:	6a1b      	ldr	r3, [r3, #32]
 800d9b8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800d9ba:	68fb      	ldr	r3, [r7, #12]
 800d9bc:	881b      	ldrh	r3, [r3, #0]
 800d9be:	461a      	mov	r2, r3
 800d9c0:	687b      	ldr	r3, [r7, #4]
 800d9c2:	681b      	ldr	r3, [r3, #0]
 800d9c4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800d9c8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800d9ca:	687b      	ldr	r3, [r7, #4]
 800d9cc:	6a1b      	ldr	r3, [r3, #32]
 800d9ce:	1c9a      	adds	r2, r3, #2
 800d9d0:	687b      	ldr	r3, [r7, #4]
 800d9d2:	621a      	str	r2, [r3, #32]
 800d9d4:	e008      	b.n	800d9e8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800d9d6:	687b      	ldr	r3, [r7, #4]
 800d9d8:	6a1b      	ldr	r3, [r3, #32]
 800d9da:	1c59      	adds	r1, r3, #1
 800d9dc:	687a      	ldr	r2, [r7, #4]
 800d9de:	6211      	str	r1, [r2, #32]
 800d9e0:	781a      	ldrb	r2, [r3, #0]
 800d9e2:	687b      	ldr	r3, [r7, #4]
 800d9e4:	681b      	ldr	r3, [r3, #0]
 800d9e6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800d9e8:	687b      	ldr	r3, [r7, #4]
 800d9ea:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800d9ec:	b29b      	uxth	r3, r3
 800d9ee:	3b01      	subs	r3, #1
 800d9f0:	b29b      	uxth	r3, r3
 800d9f2:	687a      	ldr	r2, [r7, #4]
 800d9f4:	4619      	mov	r1, r3
 800d9f6:	84d1      	strh	r1, [r2, #38]	; 0x26
 800d9f8:	2b00      	cmp	r3, #0
 800d9fa:	d10f      	bne.n	800da1c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800d9fc:	687b      	ldr	r3, [r7, #4]
 800d9fe:	681b      	ldr	r3, [r3, #0]
 800da00:	68da      	ldr	r2, [r3, #12]
 800da02:	687b      	ldr	r3, [r7, #4]
 800da04:	681b      	ldr	r3, [r3, #0]
 800da06:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800da0a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800da0c:	687b      	ldr	r3, [r7, #4]
 800da0e:	681b      	ldr	r3, [r3, #0]
 800da10:	68da      	ldr	r2, [r3, #12]
 800da12:	687b      	ldr	r3, [r7, #4]
 800da14:	681b      	ldr	r3, [r3, #0]
 800da16:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800da1a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800da1c:	2300      	movs	r3, #0
 800da1e:	e000      	b.n	800da22 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800da20:	2302      	movs	r3, #2
  }
}
 800da22:	4618      	mov	r0, r3
 800da24:	3714      	adds	r7, #20
 800da26:	46bd      	mov	sp, r7
 800da28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da2c:	4770      	bx	lr

0800da2e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800da2e:	b580      	push	{r7, lr}
 800da30:	b082      	sub	sp, #8
 800da32:	af00      	add	r7, sp, #0
 800da34:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800da36:	687b      	ldr	r3, [r7, #4]
 800da38:	681b      	ldr	r3, [r3, #0]
 800da3a:	68da      	ldr	r2, [r3, #12]
 800da3c:	687b      	ldr	r3, [r7, #4]
 800da3e:	681b      	ldr	r3, [r3, #0]
 800da40:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800da44:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800da46:	687b      	ldr	r3, [r7, #4]
 800da48:	2220      	movs	r2, #32
 800da4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800da4e:	6878      	ldr	r0, [r7, #4]
 800da50:	f7ff fcde 	bl	800d410 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800da54:	2300      	movs	r3, #0
}
 800da56:	4618      	mov	r0, r3
 800da58:	3708      	adds	r7, #8
 800da5a:	46bd      	mov	sp, r7
 800da5c:	bd80      	pop	{r7, pc}

0800da5e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800da5e:	b580      	push	{r7, lr}
 800da60:	b08c      	sub	sp, #48	; 0x30
 800da62:	af00      	add	r7, sp, #0
 800da64:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800da66:	687b      	ldr	r3, [r7, #4]
 800da68:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800da6c:	b2db      	uxtb	r3, r3
 800da6e:	2b22      	cmp	r3, #34	; 0x22
 800da70:	f040 80ab 	bne.w	800dbca <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800da74:	687b      	ldr	r3, [r7, #4]
 800da76:	689b      	ldr	r3, [r3, #8]
 800da78:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800da7c:	d117      	bne.n	800daae <UART_Receive_IT+0x50>
 800da7e:	687b      	ldr	r3, [r7, #4]
 800da80:	691b      	ldr	r3, [r3, #16]
 800da82:	2b00      	cmp	r3, #0
 800da84:	d113      	bne.n	800daae <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800da86:	2300      	movs	r3, #0
 800da88:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800da8a:	687b      	ldr	r3, [r7, #4]
 800da8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800da8e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800da90:	687b      	ldr	r3, [r7, #4]
 800da92:	681b      	ldr	r3, [r3, #0]
 800da94:	685b      	ldr	r3, [r3, #4]
 800da96:	b29b      	uxth	r3, r3
 800da98:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800da9c:	b29a      	uxth	r2, r3
 800da9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800daa0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800daa2:	687b      	ldr	r3, [r7, #4]
 800daa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800daa6:	1c9a      	adds	r2, r3, #2
 800daa8:	687b      	ldr	r3, [r7, #4]
 800daaa:	629a      	str	r2, [r3, #40]	; 0x28
 800daac:	e026      	b.n	800dafc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800daae:	687b      	ldr	r3, [r7, #4]
 800dab0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dab2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800dab4:	2300      	movs	r3, #0
 800dab6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800dab8:	687b      	ldr	r3, [r7, #4]
 800daba:	689b      	ldr	r3, [r3, #8]
 800dabc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800dac0:	d007      	beq.n	800dad2 <UART_Receive_IT+0x74>
 800dac2:	687b      	ldr	r3, [r7, #4]
 800dac4:	689b      	ldr	r3, [r3, #8]
 800dac6:	2b00      	cmp	r3, #0
 800dac8:	d10a      	bne.n	800dae0 <UART_Receive_IT+0x82>
 800daca:	687b      	ldr	r3, [r7, #4]
 800dacc:	691b      	ldr	r3, [r3, #16]
 800dace:	2b00      	cmp	r3, #0
 800dad0:	d106      	bne.n	800dae0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800dad2:	687b      	ldr	r3, [r7, #4]
 800dad4:	681b      	ldr	r3, [r3, #0]
 800dad6:	685b      	ldr	r3, [r3, #4]
 800dad8:	b2da      	uxtb	r2, r3
 800dada:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dadc:	701a      	strb	r2, [r3, #0]
 800dade:	e008      	b.n	800daf2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800dae0:	687b      	ldr	r3, [r7, #4]
 800dae2:	681b      	ldr	r3, [r3, #0]
 800dae4:	685b      	ldr	r3, [r3, #4]
 800dae6:	b2db      	uxtb	r3, r3
 800dae8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800daec:	b2da      	uxtb	r2, r3
 800daee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800daf0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800daf2:	687b      	ldr	r3, [r7, #4]
 800daf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800daf6:	1c5a      	adds	r2, r3, #1
 800daf8:	687b      	ldr	r3, [r7, #4]
 800dafa:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800dafc:	687b      	ldr	r3, [r7, #4]
 800dafe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800db00:	b29b      	uxth	r3, r3
 800db02:	3b01      	subs	r3, #1
 800db04:	b29b      	uxth	r3, r3
 800db06:	687a      	ldr	r2, [r7, #4]
 800db08:	4619      	mov	r1, r3
 800db0a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800db0c:	2b00      	cmp	r3, #0
 800db0e:	d15a      	bne.n	800dbc6 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800db10:	687b      	ldr	r3, [r7, #4]
 800db12:	681b      	ldr	r3, [r3, #0]
 800db14:	68da      	ldr	r2, [r3, #12]
 800db16:	687b      	ldr	r3, [r7, #4]
 800db18:	681b      	ldr	r3, [r3, #0]
 800db1a:	f022 0220 	bic.w	r2, r2, #32
 800db1e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800db20:	687b      	ldr	r3, [r7, #4]
 800db22:	681b      	ldr	r3, [r3, #0]
 800db24:	68da      	ldr	r2, [r3, #12]
 800db26:	687b      	ldr	r3, [r7, #4]
 800db28:	681b      	ldr	r3, [r3, #0]
 800db2a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800db2e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800db30:	687b      	ldr	r3, [r7, #4]
 800db32:	681b      	ldr	r3, [r3, #0]
 800db34:	695a      	ldr	r2, [r3, #20]
 800db36:	687b      	ldr	r3, [r7, #4]
 800db38:	681b      	ldr	r3, [r3, #0]
 800db3a:	f022 0201 	bic.w	r2, r2, #1
 800db3e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800db40:	687b      	ldr	r3, [r7, #4]
 800db42:	2220      	movs	r2, #32
 800db44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800db48:	687b      	ldr	r3, [r7, #4]
 800db4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800db4c:	2b01      	cmp	r3, #1
 800db4e:	d135      	bne.n	800dbbc <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800db50:	687b      	ldr	r3, [r7, #4]
 800db52:	2200      	movs	r2, #0
 800db54:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800db56:	687b      	ldr	r3, [r7, #4]
 800db58:	681b      	ldr	r3, [r3, #0]
 800db5a:	330c      	adds	r3, #12
 800db5c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800db5e:	697b      	ldr	r3, [r7, #20]
 800db60:	e853 3f00 	ldrex	r3, [r3]
 800db64:	613b      	str	r3, [r7, #16]
   return(result);
 800db66:	693b      	ldr	r3, [r7, #16]
 800db68:	f023 0310 	bic.w	r3, r3, #16
 800db6c:	627b      	str	r3, [r7, #36]	; 0x24
 800db6e:	687b      	ldr	r3, [r7, #4]
 800db70:	681b      	ldr	r3, [r3, #0]
 800db72:	330c      	adds	r3, #12
 800db74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800db76:	623a      	str	r2, [r7, #32]
 800db78:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800db7a:	69f9      	ldr	r1, [r7, #28]
 800db7c:	6a3a      	ldr	r2, [r7, #32]
 800db7e:	e841 2300 	strex	r3, r2, [r1]
 800db82:	61bb      	str	r3, [r7, #24]
   return(result);
 800db84:	69bb      	ldr	r3, [r7, #24]
 800db86:	2b00      	cmp	r3, #0
 800db88:	d1e5      	bne.n	800db56 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800db8a:	687b      	ldr	r3, [r7, #4]
 800db8c:	681b      	ldr	r3, [r3, #0]
 800db8e:	681b      	ldr	r3, [r3, #0]
 800db90:	f003 0310 	and.w	r3, r3, #16
 800db94:	2b10      	cmp	r3, #16
 800db96:	d10a      	bne.n	800dbae <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800db98:	2300      	movs	r3, #0
 800db9a:	60fb      	str	r3, [r7, #12]
 800db9c:	687b      	ldr	r3, [r7, #4]
 800db9e:	681b      	ldr	r3, [r3, #0]
 800dba0:	681b      	ldr	r3, [r3, #0]
 800dba2:	60fb      	str	r3, [r7, #12]
 800dba4:	687b      	ldr	r3, [r7, #4]
 800dba6:	681b      	ldr	r3, [r3, #0]
 800dba8:	685b      	ldr	r3, [r3, #4]
 800dbaa:	60fb      	str	r3, [r7, #12]
 800dbac:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800dbae:	687b      	ldr	r3, [r7, #4]
 800dbb0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800dbb2:	4619      	mov	r1, r3
 800dbb4:	6878      	ldr	r0, [r7, #4]
 800dbb6:	f7ff fc3f 	bl	800d438 <HAL_UARTEx_RxEventCallback>
 800dbba:	e002      	b.n	800dbc2 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800dbbc:	6878      	ldr	r0, [r7, #4]
 800dbbe:	f7fb fbbb 	bl	8009338 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800dbc2:	2300      	movs	r3, #0
 800dbc4:	e002      	b.n	800dbcc <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800dbc6:	2300      	movs	r3, #0
 800dbc8:	e000      	b.n	800dbcc <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800dbca:	2302      	movs	r3, #2
  }
}
 800dbcc:	4618      	mov	r0, r3
 800dbce:	3730      	adds	r7, #48	; 0x30
 800dbd0:	46bd      	mov	sp, r7
 800dbd2:	bd80      	pop	{r7, pc}

0800dbd4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800dbd4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800dbd8:	b0c0      	sub	sp, #256	; 0x100
 800dbda:	af00      	add	r7, sp, #0
 800dbdc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800dbe0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800dbe4:	681b      	ldr	r3, [r3, #0]
 800dbe6:	691b      	ldr	r3, [r3, #16]
 800dbe8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800dbec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800dbf0:	68d9      	ldr	r1, [r3, #12]
 800dbf2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800dbf6:	681a      	ldr	r2, [r3, #0]
 800dbf8:	ea40 0301 	orr.w	r3, r0, r1
 800dbfc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800dbfe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800dc02:	689a      	ldr	r2, [r3, #8]
 800dc04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800dc08:	691b      	ldr	r3, [r3, #16]
 800dc0a:	431a      	orrs	r2, r3
 800dc0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800dc10:	695b      	ldr	r3, [r3, #20]
 800dc12:	431a      	orrs	r2, r3
 800dc14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800dc18:	69db      	ldr	r3, [r3, #28]
 800dc1a:	4313      	orrs	r3, r2
 800dc1c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800dc20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800dc24:	681b      	ldr	r3, [r3, #0]
 800dc26:	68db      	ldr	r3, [r3, #12]
 800dc28:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800dc2c:	f021 010c 	bic.w	r1, r1, #12
 800dc30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800dc34:	681a      	ldr	r2, [r3, #0]
 800dc36:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800dc3a:	430b      	orrs	r3, r1
 800dc3c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800dc3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800dc42:	681b      	ldr	r3, [r3, #0]
 800dc44:	695b      	ldr	r3, [r3, #20]
 800dc46:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800dc4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800dc4e:	6999      	ldr	r1, [r3, #24]
 800dc50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800dc54:	681a      	ldr	r2, [r3, #0]
 800dc56:	ea40 0301 	orr.w	r3, r0, r1
 800dc5a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800dc5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800dc60:	681a      	ldr	r2, [r3, #0]
 800dc62:	4b8f      	ldr	r3, [pc, #572]	; (800dea0 <UART_SetConfig+0x2cc>)
 800dc64:	429a      	cmp	r2, r3
 800dc66:	d005      	beq.n	800dc74 <UART_SetConfig+0xa0>
 800dc68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800dc6c:	681a      	ldr	r2, [r3, #0]
 800dc6e:	4b8d      	ldr	r3, [pc, #564]	; (800dea4 <UART_SetConfig+0x2d0>)
 800dc70:	429a      	cmp	r2, r3
 800dc72:	d104      	bne.n	800dc7e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800dc74:	f7fe fde4 	bl	800c840 <HAL_RCC_GetPCLK2Freq>
 800dc78:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800dc7c:	e003      	b.n	800dc86 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800dc7e:	f7fe fdcb 	bl	800c818 <HAL_RCC_GetPCLK1Freq>
 800dc82:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800dc86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800dc8a:	69db      	ldr	r3, [r3, #28]
 800dc8c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800dc90:	f040 810c 	bne.w	800deac <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800dc94:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800dc98:	2200      	movs	r2, #0
 800dc9a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800dc9e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800dca2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800dca6:	4622      	mov	r2, r4
 800dca8:	462b      	mov	r3, r5
 800dcaa:	1891      	adds	r1, r2, r2
 800dcac:	65b9      	str	r1, [r7, #88]	; 0x58
 800dcae:	415b      	adcs	r3, r3
 800dcb0:	65fb      	str	r3, [r7, #92]	; 0x5c
 800dcb2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800dcb6:	4621      	mov	r1, r4
 800dcb8:	eb12 0801 	adds.w	r8, r2, r1
 800dcbc:	4629      	mov	r1, r5
 800dcbe:	eb43 0901 	adc.w	r9, r3, r1
 800dcc2:	f04f 0200 	mov.w	r2, #0
 800dcc6:	f04f 0300 	mov.w	r3, #0
 800dcca:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800dcce:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800dcd2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800dcd6:	4690      	mov	r8, r2
 800dcd8:	4699      	mov	r9, r3
 800dcda:	4623      	mov	r3, r4
 800dcdc:	eb18 0303 	adds.w	r3, r8, r3
 800dce0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800dce4:	462b      	mov	r3, r5
 800dce6:	eb49 0303 	adc.w	r3, r9, r3
 800dcea:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800dcee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800dcf2:	685b      	ldr	r3, [r3, #4]
 800dcf4:	2200      	movs	r2, #0
 800dcf6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800dcfa:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800dcfe:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800dd02:	460b      	mov	r3, r1
 800dd04:	18db      	adds	r3, r3, r3
 800dd06:	653b      	str	r3, [r7, #80]	; 0x50
 800dd08:	4613      	mov	r3, r2
 800dd0a:	eb42 0303 	adc.w	r3, r2, r3
 800dd0e:	657b      	str	r3, [r7, #84]	; 0x54
 800dd10:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800dd14:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800dd18:	f7fa fab2 	bl	8008280 <__aeabi_uldivmod>
 800dd1c:	4602      	mov	r2, r0
 800dd1e:	460b      	mov	r3, r1
 800dd20:	4b61      	ldr	r3, [pc, #388]	; (800dea8 <UART_SetConfig+0x2d4>)
 800dd22:	fba3 2302 	umull	r2, r3, r3, r2
 800dd26:	095b      	lsrs	r3, r3, #5
 800dd28:	011c      	lsls	r4, r3, #4
 800dd2a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800dd2e:	2200      	movs	r2, #0
 800dd30:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800dd34:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800dd38:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800dd3c:	4642      	mov	r2, r8
 800dd3e:	464b      	mov	r3, r9
 800dd40:	1891      	adds	r1, r2, r2
 800dd42:	64b9      	str	r1, [r7, #72]	; 0x48
 800dd44:	415b      	adcs	r3, r3
 800dd46:	64fb      	str	r3, [r7, #76]	; 0x4c
 800dd48:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800dd4c:	4641      	mov	r1, r8
 800dd4e:	eb12 0a01 	adds.w	sl, r2, r1
 800dd52:	4649      	mov	r1, r9
 800dd54:	eb43 0b01 	adc.w	fp, r3, r1
 800dd58:	f04f 0200 	mov.w	r2, #0
 800dd5c:	f04f 0300 	mov.w	r3, #0
 800dd60:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800dd64:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800dd68:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800dd6c:	4692      	mov	sl, r2
 800dd6e:	469b      	mov	fp, r3
 800dd70:	4643      	mov	r3, r8
 800dd72:	eb1a 0303 	adds.w	r3, sl, r3
 800dd76:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800dd7a:	464b      	mov	r3, r9
 800dd7c:	eb4b 0303 	adc.w	r3, fp, r3
 800dd80:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800dd84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800dd88:	685b      	ldr	r3, [r3, #4]
 800dd8a:	2200      	movs	r2, #0
 800dd8c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800dd90:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800dd94:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800dd98:	460b      	mov	r3, r1
 800dd9a:	18db      	adds	r3, r3, r3
 800dd9c:	643b      	str	r3, [r7, #64]	; 0x40
 800dd9e:	4613      	mov	r3, r2
 800dda0:	eb42 0303 	adc.w	r3, r2, r3
 800dda4:	647b      	str	r3, [r7, #68]	; 0x44
 800dda6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800ddaa:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800ddae:	f7fa fa67 	bl	8008280 <__aeabi_uldivmod>
 800ddb2:	4602      	mov	r2, r0
 800ddb4:	460b      	mov	r3, r1
 800ddb6:	4611      	mov	r1, r2
 800ddb8:	4b3b      	ldr	r3, [pc, #236]	; (800dea8 <UART_SetConfig+0x2d4>)
 800ddba:	fba3 2301 	umull	r2, r3, r3, r1
 800ddbe:	095b      	lsrs	r3, r3, #5
 800ddc0:	2264      	movs	r2, #100	; 0x64
 800ddc2:	fb02 f303 	mul.w	r3, r2, r3
 800ddc6:	1acb      	subs	r3, r1, r3
 800ddc8:	00db      	lsls	r3, r3, #3
 800ddca:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800ddce:	4b36      	ldr	r3, [pc, #216]	; (800dea8 <UART_SetConfig+0x2d4>)
 800ddd0:	fba3 2302 	umull	r2, r3, r3, r2
 800ddd4:	095b      	lsrs	r3, r3, #5
 800ddd6:	005b      	lsls	r3, r3, #1
 800ddd8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800dddc:	441c      	add	r4, r3
 800ddde:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800dde2:	2200      	movs	r2, #0
 800dde4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800dde8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800ddec:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800ddf0:	4642      	mov	r2, r8
 800ddf2:	464b      	mov	r3, r9
 800ddf4:	1891      	adds	r1, r2, r2
 800ddf6:	63b9      	str	r1, [r7, #56]	; 0x38
 800ddf8:	415b      	adcs	r3, r3
 800ddfa:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ddfc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800de00:	4641      	mov	r1, r8
 800de02:	1851      	adds	r1, r2, r1
 800de04:	6339      	str	r1, [r7, #48]	; 0x30
 800de06:	4649      	mov	r1, r9
 800de08:	414b      	adcs	r3, r1
 800de0a:	637b      	str	r3, [r7, #52]	; 0x34
 800de0c:	f04f 0200 	mov.w	r2, #0
 800de10:	f04f 0300 	mov.w	r3, #0
 800de14:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800de18:	4659      	mov	r1, fp
 800de1a:	00cb      	lsls	r3, r1, #3
 800de1c:	4651      	mov	r1, sl
 800de1e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800de22:	4651      	mov	r1, sl
 800de24:	00ca      	lsls	r2, r1, #3
 800de26:	4610      	mov	r0, r2
 800de28:	4619      	mov	r1, r3
 800de2a:	4603      	mov	r3, r0
 800de2c:	4642      	mov	r2, r8
 800de2e:	189b      	adds	r3, r3, r2
 800de30:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800de34:	464b      	mov	r3, r9
 800de36:	460a      	mov	r2, r1
 800de38:	eb42 0303 	adc.w	r3, r2, r3
 800de3c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800de40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800de44:	685b      	ldr	r3, [r3, #4]
 800de46:	2200      	movs	r2, #0
 800de48:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800de4c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800de50:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800de54:	460b      	mov	r3, r1
 800de56:	18db      	adds	r3, r3, r3
 800de58:	62bb      	str	r3, [r7, #40]	; 0x28
 800de5a:	4613      	mov	r3, r2
 800de5c:	eb42 0303 	adc.w	r3, r2, r3
 800de60:	62fb      	str	r3, [r7, #44]	; 0x2c
 800de62:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800de66:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800de6a:	f7fa fa09 	bl	8008280 <__aeabi_uldivmod>
 800de6e:	4602      	mov	r2, r0
 800de70:	460b      	mov	r3, r1
 800de72:	4b0d      	ldr	r3, [pc, #52]	; (800dea8 <UART_SetConfig+0x2d4>)
 800de74:	fba3 1302 	umull	r1, r3, r3, r2
 800de78:	095b      	lsrs	r3, r3, #5
 800de7a:	2164      	movs	r1, #100	; 0x64
 800de7c:	fb01 f303 	mul.w	r3, r1, r3
 800de80:	1ad3      	subs	r3, r2, r3
 800de82:	00db      	lsls	r3, r3, #3
 800de84:	3332      	adds	r3, #50	; 0x32
 800de86:	4a08      	ldr	r2, [pc, #32]	; (800dea8 <UART_SetConfig+0x2d4>)
 800de88:	fba2 2303 	umull	r2, r3, r2, r3
 800de8c:	095b      	lsrs	r3, r3, #5
 800de8e:	f003 0207 	and.w	r2, r3, #7
 800de92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800de96:	681b      	ldr	r3, [r3, #0]
 800de98:	4422      	add	r2, r4
 800de9a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800de9c:	e105      	b.n	800e0aa <UART_SetConfig+0x4d6>
 800de9e:	bf00      	nop
 800dea0:	40011000 	.word	0x40011000
 800dea4:	40011400 	.word	0x40011400
 800dea8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800deac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800deb0:	2200      	movs	r2, #0
 800deb2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800deb6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800deba:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800debe:	4642      	mov	r2, r8
 800dec0:	464b      	mov	r3, r9
 800dec2:	1891      	adds	r1, r2, r2
 800dec4:	6239      	str	r1, [r7, #32]
 800dec6:	415b      	adcs	r3, r3
 800dec8:	627b      	str	r3, [r7, #36]	; 0x24
 800deca:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800dece:	4641      	mov	r1, r8
 800ded0:	1854      	adds	r4, r2, r1
 800ded2:	4649      	mov	r1, r9
 800ded4:	eb43 0501 	adc.w	r5, r3, r1
 800ded8:	f04f 0200 	mov.w	r2, #0
 800dedc:	f04f 0300 	mov.w	r3, #0
 800dee0:	00eb      	lsls	r3, r5, #3
 800dee2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800dee6:	00e2      	lsls	r2, r4, #3
 800dee8:	4614      	mov	r4, r2
 800deea:	461d      	mov	r5, r3
 800deec:	4643      	mov	r3, r8
 800deee:	18e3      	adds	r3, r4, r3
 800def0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800def4:	464b      	mov	r3, r9
 800def6:	eb45 0303 	adc.w	r3, r5, r3
 800defa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800defe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800df02:	685b      	ldr	r3, [r3, #4]
 800df04:	2200      	movs	r2, #0
 800df06:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800df0a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800df0e:	f04f 0200 	mov.w	r2, #0
 800df12:	f04f 0300 	mov.w	r3, #0
 800df16:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800df1a:	4629      	mov	r1, r5
 800df1c:	008b      	lsls	r3, r1, #2
 800df1e:	4621      	mov	r1, r4
 800df20:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800df24:	4621      	mov	r1, r4
 800df26:	008a      	lsls	r2, r1, #2
 800df28:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800df2c:	f7fa f9a8 	bl	8008280 <__aeabi_uldivmod>
 800df30:	4602      	mov	r2, r0
 800df32:	460b      	mov	r3, r1
 800df34:	4b60      	ldr	r3, [pc, #384]	; (800e0b8 <UART_SetConfig+0x4e4>)
 800df36:	fba3 2302 	umull	r2, r3, r3, r2
 800df3a:	095b      	lsrs	r3, r3, #5
 800df3c:	011c      	lsls	r4, r3, #4
 800df3e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800df42:	2200      	movs	r2, #0
 800df44:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800df48:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800df4c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800df50:	4642      	mov	r2, r8
 800df52:	464b      	mov	r3, r9
 800df54:	1891      	adds	r1, r2, r2
 800df56:	61b9      	str	r1, [r7, #24]
 800df58:	415b      	adcs	r3, r3
 800df5a:	61fb      	str	r3, [r7, #28]
 800df5c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800df60:	4641      	mov	r1, r8
 800df62:	1851      	adds	r1, r2, r1
 800df64:	6139      	str	r1, [r7, #16]
 800df66:	4649      	mov	r1, r9
 800df68:	414b      	adcs	r3, r1
 800df6a:	617b      	str	r3, [r7, #20]
 800df6c:	f04f 0200 	mov.w	r2, #0
 800df70:	f04f 0300 	mov.w	r3, #0
 800df74:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800df78:	4659      	mov	r1, fp
 800df7a:	00cb      	lsls	r3, r1, #3
 800df7c:	4651      	mov	r1, sl
 800df7e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800df82:	4651      	mov	r1, sl
 800df84:	00ca      	lsls	r2, r1, #3
 800df86:	4610      	mov	r0, r2
 800df88:	4619      	mov	r1, r3
 800df8a:	4603      	mov	r3, r0
 800df8c:	4642      	mov	r2, r8
 800df8e:	189b      	adds	r3, r3, r2
 800df90:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800df94:	464b      	mov	r3, r9
 800df96:	460a      	mov	r2, r1
 800df98:	eb42 0303 	adc.w	r3, r2, r3
 800df9c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800dfa0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800dfa4:	685b      	ldr	r3, [r3, #4]
 800dfa6:	2200      	movs	r2, #0
 800dfa8:	67bb      	str	r3, [r7, #120]	; 0x78
 800dfaa:	67fa      	str	r2, [r7, #124]	; 0x7c
 800dfac:	f04f 0200 	mov.w	r2, #0
 800dfb0:	f04f 0300 	mov.w	r3, #0
 800dfb4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800dfb8:	4649      	mov	r1, r9
 800dfba:	008b      	lsls	r3, r1, #2
 800dfbc:	4641      	mov	r1, r8
 800dfbe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800dfc2:	4641      	mov	r1, r8
 800dfc4:	008a      	lsls	r2, r1, #2
 800dfc6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800dfca:	f7fa f959 	bl	8008280 <__aeabi_uldivmod>
 800dfce:	4602      	mov	r2, r0
 800dfd0:	460b      	mov	r3, r1
 800dfd2:	4b39      	ldr	r3, [pc, #228]	; (800e0b8 <UART_SetConfig+0x4e4>)
 800dfd4:	fba3 1302 	umull	r1, r3, r3, r2
 800dfd8:	095b      	lsrs	r3, r3, #5
 800dfda:	2164      	movs	r1, #100	; 0x64
 800dfdc:	fb01 f303 	mul.w	r3, r1, r3
 800dfe0:	1ad3      	subs	r3, r2, r3
 800dfe2:	011b      	lsls	r3, r3, #4
 800dfe4:	3332      	adds	r3, #50	; 0x32
 800dfe6:	4a34      	ldr	r2, [pc, #208]	; (800e0b8 <UART_SetConfig+0x4e4>)
 800dfe8:	fba2 2303 	umull	r2, r3, r2, r3
 800dfec:	095b      	lsrs	r3, r3, #5
 800dfee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800dff2:	441c      	add	r4, r3
 800dff4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800dff8:	2200      	movs	r2, #0
 800dffa:	673b      	str	r3, [r7, #112]	; 0x70
 800dffc:	677a      	str	r2, [r7, #116]	; 0x74
 800dffe:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800e002:	4642      	mov	r2, r8
 800e004:	464b      	mov	r3, r9
 800e006:	1891      	adds	r1, r2, r2
 800e008:	60b9      	str	r1, [r7, #8]
 800e00a:	415b      	adcs	r3, r3
 800e00c:	60fb      	str	r3, [r7, #12]
 800e00e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800e012:	4641      	mov	r1, r8
 800e014:	1851      	adds	r1, r2, r1
 800e016:	6039      	str	r1, [r7, #0]
 800e018:	4649      	mov	r1, r9
 800e01a:	414b      	adcs	r3, r1
 800e01c:	607b      	str	r3, [r7, #4]
 800e01e:	f04f 0200 	mov.w	r2, #0
 800e022:	f04f 0300 	mov.w	r3, #0
 800e026:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800e02a:	4659      	mov	r1, fp
 800e02c:	00cb      	lsls	r3, r1, #3
 800e02e:	4651      	mov	r1, sl
 800e030:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800e034:	4651      	mov	r1, sl
 800e036:	00ca      	lsls	r2, r1, #3
 800e038:	4610      	mov	r0, r2
 800e03a:	4619      	mov	r1, r3
 800e03c:	4603      	mov	r3, r0
 800e03e:	4642      	mov	r2, r8
 800e040:	189b      	adds	r3, r3, r2
 800e042:	66bb      	str	r3, [r7, #104]	; 0x68
 800e044:	464b      	mov	r3, r9
 800e046:	460a      	mov	r2, r1
 800e048:	eb42 0303 	adc.w	r3, r2, r3
 800e04c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800e04e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e052:	685b      	ldr	r3, [r3, #4]
 800e054:	2200      	movs	r2, #0
 800e056:	663b      	str	r3, [r7, #96]	; 0x60
 800e058:	667a      	str	r2, [r7, #100]	; 0x64
 800e05a:	f04f 0200 	mov.w	r2, #0
 800e05e:	f04f 0300 	mov.w	r3, #0
 800e062:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800e066:	4649      	mov	r1, r9
 800e068:	008b      	lsls	r3, r1, #2
 800e06a:	4641      	mov	r1, r8
 800e06c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800e070:	4641      	mov	r1, r8
 800e072:	008a      	lsls	r2, r1, #2
 800e074:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800e078:	f7fa f902 	bl	8008280 <__aeabi_uldivmod>
 800e07c:	4602      	mov	r2, r0
 800e07e:	460b      	mov	r3, r1
 800e080:	4b0d      	ldr	r3, [pc, #52]	; (800e0b8 <UART_SetConfig+0x4e4>)
 800e082:	fba3 1302 	umull	r1, r3, r3, r2
 800e086:	095b      	lsrs	r3, r3, #5
 800e088:	2164      	movs	r1, #100	; 0x64
 800e08a:	fb01 f303 	mul.w	r3, r1, r3
 800e08e:	1ad3      	subs	r3, r2, r3
 800e090:	011b      	lsls	r3, r3, #4
 800e092:	3332      	adds	r3, #50	; 0x32
 800e094:	4a08      	ldr	r2, [pc, #32]	; (800e0b8 <UART_SetConfig+0x4e4>)
 800e096:	fba2 2303 	umull	r2, r3, r2, r3
 800e09a:	095b      	lsrs	r3, r3, #5
 800e09c:	f003 020f 	and.w	r2, r3, #15
 800e0a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e0a4:	681b      	ldr	r3, [r3, #0]
 800e0a6:	4422      	add	r2, r4
 800e0a8:	609a      	str	r2, [r3, #8]
}
 800e0aa:	bf00      	nop
 800e0ac:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800e0b0:	46bd      	mov	sp, r7
 800e0b2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800e0b6:	bf00      	nop
 800e0b8:	51eb851f 	.word	0x51eb851f

0800e0bc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800e0bc:	b084      	sub	sp, #16
 800e0be:	b580      	push	{r7, lr}
 800e0c0:	b084      	sub	sp, #16
 800e0c2:	af00      	add	r7, sp, #0
 800e0c4:	6078      	str	r0, [r7, #4]
 800e0c6:	f107 001c 	add.w	r0, r7, #28
 800e0ca:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800e0ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e0d0:	2b01      	cmp	r3, #1
 800e0d2:	d122      	bne.n	800e11a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800e0d4:	687b      	ldr	r3, [r7, #4]
 800e0d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e0d8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800e0dc:	687b      	ldr	r3, [r7, #4]
 800e0de:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800e0e0:	687b      	ldr	r3, [r7, #4]
 800e0e2:	68db      	ldr	r3, [r3, #12]
 800e0e4:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800e0e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e0ec:	687a      	ldr	r2, [r7, #4]
 800e0ee:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800e0f0:	687b      	ldr	r3, [r7, #4]
 800e0f2:	68db      	ldr	r3, [r3, #12]
 800e0f4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800e0f8:	687b      	ldr	r3, [r7, #4]
 800e0fa:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800e0fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e0fe:	2b01      	cmp	r3, #1
 800e100:	d105      	bne.n	800e10e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800e102:	687b      	ldr	r3, [r7, #4]
 800e104:	68db      	ldr	r3, [r3, #12]
 800e106:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800e10a:	687b      	ldr	r3, [r7, #4]
 800e10c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800e10e:	6878      	ldr	r0, [r7, #4]
 800e110:	f001 fb1c 	bl	800f74c <USB_CoreReset>
 800e114:	4603      	mov	r3, r0
 800e116:	73fb      	strb	r3, [r7, #15]
 800e118:	e01a      	b.n	800e150 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800e11a:	687b      	ldr	r3, [r7, #4]
 800e11c:	68db      	ldr	r3, [r3, #12]
 800e11e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800e122:	687b      	ldr	r3, [r7, #4]
 800e124:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800e126:	6878      	ldr	r0, [r7, #4]
 800e128:	f001 fb10 	bl	800f74c <USB_CoreReset>
 800e12c:	4603      	mov	r3, r0
 800e12e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800e130:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e132:	2b00      	cmp	r3, #0
 800e134:	d106      	bne.n	800e144 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800e136:	687b      	ldr	r3, [r7, #4]
 800e138:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e13a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800e13e:	687b      	ldr	r3, [r7, #4]
 800e140:	639a      	str	r2, [r3, #56]	; 0x38
 800e142:	e005      	b.n	800e150 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800e144:	687b      	ldr	r3, [r7, #4]
 800e146:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e148:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800e14c:	687b      	ldr	r3, [r7, #4]
 800e14e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800e150:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e152:	2b01      	cmp	r3, #1
 800e154:	d10b      	bne.n	800e16e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800e156:	687b      	ldr	r3, [r7, #4]
 800e158:	689b      	ldr	r3, [r3, #8]
 800e15a:	f043 0206 	orr.w	r2, r3, #6
 800e15e:	687b      	ldr	r3, [r7, #4]
 800e160:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800e162:	687b      	ldr	r3, [r7, #4]
 800e164:	689b      	ldr	r3, [r3, #8]
 800e166:	f043 0220 	orr.w	r2, r3, #32
 800e16a:	687b      	ldr	r3, [r7, #4]
 800e16c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800e16e:	7bfb      	ldrb	r3, [r7, #15]
}
 800e170:	4618      	mov	r0, r3
 800e172:	3710      	adds	r7, #16
 800e174:	46bd      	mov	sp, r7
 800e176:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800e17a:	b004      	add	sp, #16
 800e17c:	4770      	bx	lr
	...

0800e180 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800e180:	b480      	push	{r7}
 800e182:	b087      	sub	sp, #28
 800e184:	af00      	add	r7, sp, #0
 800e186:	60f8      	str	r0, [r7, #12]
 800e188:	60b9      	str	r1, [r7, #8]
 800e18a:	4613      	mov	r3, r2
 800e18c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800e18e:	79fb      	ldrb	r3, [r7, #7]
 800e190:	2b02      	cmp	r3, #2
 800e192:	d165      	bne.n	800e260 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800e194:	68bb      	ldr	r3, [r7, #8]
 800e196:	4a41      	ldr	r2, [pc, #260]	; (800e29c <USB_SetTurnaroundTime+0x11c>)
 800e198:	4293      	cmp	r3, r2
 800e19a:	d906      	bls.n	800e1aa <USB_SetTurnaroundTime+0x2a>
 800e19c:	68bb      	ldr	r3, [r7, #8]
 800e19e:	4a40      	ldr	r2, [pc, #256]	; (800e2a0 <USB_SetTurnaroundTime+0x120>)
 800e1a0:	4293      	cmp	r3, r2
 800e1a2:	d202      	bcs.n	800e1aa <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800e1a4:	230f      	movs	r3, #15
 800e1a6:	617b      	str	r3, [r7, #20]
 800e1a8:	e062      	b.n	800e270 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800e1aa:	68bb      	ldr	r3, [r7, #8]
 800e1ac:	4a3c      	ldr	r2, [pc, #240]	; (800e2a0 <USB_SetTurnaroundTime+0x120>)
 800e1ae:	4293      	cmp	r3, r2
 800e1b0:	d306      	bcc.n	800e1c0 <USB_SetTurnaroundTime+0x40>
 800e1b2:	68bb      	ldr	r3, [r7, #8]
 800e1b4:	4a3b      	ldr	r2, [pc, #236]	; (800e2a4 <USB_SetTurnaroundTime+0x124>)
 800e1b6:	4293      	cmp	r3, r2
 800e1b8:	d202      	bcs.n	800e1c0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800e1ba:	230e      	movs	r3, #14
 800e1bc:	617b      	str	r3, [r7, #20]
 800e1be:	e057      	b.n	800e270 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800e1c0:	68bb      	ldr	r3, [r7, #8]
 800e1c2:	4a38      	ldr	r2, [pc, #224]	; (800e2a4 <USB_SetTurnaroundTime+0x124>)
 800e1c4:	4293      	cmp	r3, r2
 800e1c6:	d306      	bcc.n	800e1d6 <USB_SetTurnaroundTime+0x56>
 800e1c8:	68bb      	ldr	r3, [r7, #8]
 800e1ca:	4a37      	ldr	r2, [pc, #220]	; (800e2a8 <USB_SetTurnaroundTime+0x128>)
 800e1cc:	4293      	cmp	r3, r2
 800e1ce:	d202      	bcs.n	800e1d6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800e1d0:	230d      	movs	r3, #13
 800e1d2:	617b      	str	r3, [r7, #20]
 800e1d4:	e04c      	b.n	800e270 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800e1d6:	68bb      	ldr	r3, [r7, #8]
 800e1d8:	4a33      	ldr	r2, [pc, #204]	; (800e2a8 <USB_SetTurnaroundTime+0x128>)
 800e1da:	4293      	cmp	r3, r2
 800e1dc:	d306      	bcc.n	800e1ec <USB_SetTurnaroundTime+0x6c>
 800e1de:	68bb      	ldr	r3, [r7, #8]
 800e1e0:	4a32      	ldr	r2, [pc, #200]	; (800e2ac <USB_SetTurnaroundTime+0x12c>)
 800e1e2:	4293      	cmp	r3, r2
 800e1e4:	d802      	bhi.n	800e1ec <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800e1e6:	230c      	movs	r3, #12
 800e1e8:	617b      	str	r3, [r7, #20]
 800e1ea:	e041      	b.n	800e270 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800e1ec:	68bb      	ldr	r3, [r7, #8]
 800e1ee:	4a2f      	ldr	r2, [pc, #188]	; (800e2ac <USB_SetTurnaroundTime+0x12c>)
 800e1f0:	4293      	cmp	r3, r2
 800e1f2:	d906      	bls.n	800e202 <USB_SetTurnaroundTime+0x82>
 800e1f4:	68bb      	ldr	r3, [r7, #8]
 800e1f6:	4a2e      	ldr	r2, [pc, #184]	; (800e2b0 <USB_SetTurnaroundTime+0x130>)
 800e1f8:	4293      	cmp	r3, r2
 800e1fa:	d802      	bhi.n	800e202 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800e1fc:	230b      	movs	r3, #11
 800e1fe:	617b      	str	r3, [r7, #20]
 800e200:	e036      	b.n	800e270 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800e202:	68bb      	ldr	r3, [r7, #8]
 800e204:	4a2a      	ldr	r2, [pc, #168]	; (800e2b0 <USB_SetTurnaroundTime+0x130>)
 800e206:	4293      	cmp	r3, r2
 800e208:	d906      	bls.n	800e218 <USB_SetTurnaroundTime+0x98>
 800e20a:	68bb      	ldr	r3, [r7, #8]
 800e20c:	4a29      	ldr	r2, [pc, #164]	; (800e2b4 <USB_SetTurnaroundTime+0x134>)
 800e20e:	4293      	cmp	r3, r2
 800e210:	d802      	bhi.n	800e218 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800e212:	230a      	movs	r3, #10
 800e214:	617b      	str	r3, [r7, #20]
 800e216:	e02b      	b.n	800e270 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800e218:	68bb      	ldr	r3, [r7, #8]
 800e21a:	4a26      	ldr	r2, [pc, #152]	; (800e2b4 <USB_SetTurnaroundTime+0x134>)
 800e21c:	4293      	cmp	r3, r2
 800e21e:	d906      	bls.n	800e22e <USB_SetTurnaroundTime+0xae>
 800e220:	68bb      	ldr	r3, [r7, #8]
 800e222:	4a25      	ldr	r2, [pc, #148]	; (800e2b8 <USB_SetTurnaroundTime+0x138>)
 800e224:	4293      	cmp	r3, r2
 800e226:	d202      	bcs.n	800e22e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800e228:	2309      	movs	r3, #9
 800e22a:	617b      	str	r3, [r7, #20]
 800e22c:	e020      	b.n	800e270 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800e22e:	68bb      	ldr	r3, [r7, #8]
 800e230:	4a21      	ldr	r2, [pc, #132]	; (800e2b8 <USB_SetTurnaroundTime+0x138>)
 800e232:	4293      	cmp	r3, r2
 800e234:	d306      	bcc.n	800e244 <USB_SetTurnaroundTime+0xc4>
 800e236:	68bb      	ldr	r3, [r7, #8]
 800e238:	4a20      	ldr	r2, [pc, #128]	; (800e2bc <USB_SetTurnaroundTime+0x13c>)
 800e23a:	4293      	cmp	r3, r2
 800e23c:	d802      	bhi.n	800e244 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800e23e:	2308      	movs	r3, #8
 800e240:	617b      	str	r3, [r7, #20]
 800e242:	e015      	b.n	800e270 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800e244:	68bb      	ldr	r3, [r7, #8]
 800e246:	4a1d      	ldr	r2, [pc, #116]	; (800e2bc <USB_SetTurnaroundTime+0x13c>)
 800e248:	4293      	cmp	r3, r2
 800e24a:	d906      	bls.n	800e25a <USB_SetTurnaroundTime+0xda>
 800e24c:	68bb      	ldr	r3, [r7, #8]
 800e24e:	4a1c      	ldr	r2, [pc, #112]	; (800e2c0 <USB_SetTurnaroundTime+0x140>)
 800e250:	4293      	cmp	r3, r2
 800e252:	d202      	bcs.n	800e25a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800e254:	2307      	movs	r3, #7
 800e256:	617b      	str	r3, [r7, #20]
 800e258:	e00a      	b.n	800e270 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800e25a:	2306      	movs	r3, #6
 800e25c:	617b      	str	r3, [r7, #20]
 800e25e:	e007      	b.n	800e270 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800e260:	79fb      	ldrb	r3, [r7, #7]
 800e262:	2b00      	cmp	r3, #0
 800e264:	d102      	bne.n	800e26c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800e266:	2309      	movs	r3, #9
 800e268:	617b      	str	r3, [r7, #20]
 800e26a:	e001      	b.n	800e270 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800e26c:	2309      	movs	r3, #9
 800e26e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800e270:	68fb      	ldr	r3, [r7, #12]
 800e272:	68db      	ldr	r3, [r3, #12]
 800e274:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800e278:	68fb      	ldr	r3, [r7, #12]
 800e27a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800e27c:	68fb      	ldr	r3, [r7, #12]
 800e27e:	68da      	ldr	r2, [r3, #12]
 800e280:	697b      	ldr	r3, [r7, #20]
 800e282:	029b      	lsls	r3, r3, #10
 800e284:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800e288:	431a      	orrs	r2, r3
 800e28a:	68fb      	ldr	r3, [r7, #12]
 800e28c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800e28e:	2300      	movs	r3, #0
}
 800e290:	4618      	mov	r0, r3
 800e292:	371c      	adds	r7, #28
 800e294:	46bd      	mov	sp, r7
 800e296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e29a:	4770      	bx	lr
 800e29c:	00d8acbf 	.word	0x00d8acbf
 800e2a0:	00e4e1c0 	.word	0x00e4e1c0
 800e2a4:	00f42400 	.word	0x00f42400
 800e2a8:	01067380 	.word	0x01067380
 800e2ac:	011a499f 	.word	0x011a499f
 800e2b0:	01312cff 	.word	0x01312cff
 800e2b4:	014ca43f 	.word	0x014ca43f
 800e2b8:	016e3600 	.word	0x016e3600
 800e2bc:	01a6ab1f 	.word	0x01a6ab1f
 800e2c0:	01e84800 	.word	0x01e84800

0800e2c4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800e2c4:	b480      	push	{r7}
 800e2c6:	b083      	sub	sp, #12
 800e2c8:	af00      	add	r7, sp, #0
 800e2ca:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800e2cc:	687b      	ldr	r3, [r7, #4]
 800e2ce:	689b      	ldr	r3, [r3, #8]
 800e2d0:	f043 0201 	orr.w	r2, r3, #1
 800e2d4:	687b      	ldr	r3, [r7, #4]
 800e2d6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800e2d8:	2300      	movs	r3, #0
}
 800e2da:	4618      	mov	r0, r3
 800e2dc:	370c      	adds	r7, #12
 800e2de:	46bd      	mov	sp, r7
 800e2e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2e4:	4770      	bx	lr

0800e2e6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800e2e6:	b480      	push	{r7}
 800e2e8:	b083      	sub	sp, #12
 800e2ea:	af00      	add	r7, sp, #0
 800e2ec:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800e2ee:	687b      	ldr	r3, [r7, #4]
 800e2f0:	689b      	ldr	r3, [r3, #8]
 800e2f2:	f023 0201 	bic.w	r2, r3, #1
 800e2f6:	687b      	ldr	r3, [r7, #4]
 800e2f8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800e2fa:	2300      	movs	r3, #0
}
 800e2fc:	4618      	mov	r0, r3
 800e2fe:	370c      	adds	r7, #12
 800e300:	46bd      	mov	sp, r7
 800e302:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e306:	4770      	bx	lr

0800e308 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800e308:	b580      	push	{r7, lr}
 800e30a:	b084      	sub	sp, #16
 800e30c:	af00      	add	r7, sp, #0
 800e30e:	6078      	str	r0, [r7, #4]
 800e310:	460b      	mov	r3, r1
 800e312:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800e314:	2300      	movs	r3, #0
 800e316:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800e318:	687b      	ldr	r3, [r7, #4]
 800e31a:	68db      	ldr	r3, [r3, #12]
 800e31c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800e320:	687b      	ldr	r3, [r7, #4]
 800e322:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800e324:	78fb      	ldrb	r3, [r7, #3]
 800e326:	2b01      	cmp	r3, #1
 800e328:	d115      	bne.n	800e356 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800e32a:	687b      	ldr	r3, [r7, #4]
 800e32c:	68db      	ldr	r3, [r3, #12]
 800e32e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800e332:	687b      	ldr	r3, [r7, #4]
 800e334:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800e336:	2001      	movs	r0, #1
 800e338:	f7fb f970 	bl	800961c <HAL_Delay>
      ms++;
 800e33c:	68fb      	ldr	r3, [r7, #12]
 800e33e:	3301      	adds	r3, #1
 800e340:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800e342:	6878      	ldr	r0, [r7, #4]
 800e344:	f001 f972 	bl	800f62c <USB_GetMode>
 800e348:	4603      	mov	r3, r0
 800e34a:	2b01      	cmp	r3, #1
 800e34c:	d01e      	beq.n	800e38c <USB_SetCurrentMode+0x84>
 800e34e:	68fb      	ldr	r3, [r7, #12]
 800e350:	2b31      	cmp	r3, #49	; 0x31
 800e352:	d9f0      	bls.n	800e336 <USB_SetCurrentMode+0x2e>
 800e354:	e01a      	b.n	800e38c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800e356:	78fb      	ldrb	r3, [r7, #3]
 800e358:	2b00      	cmp	r3, #0
 800e35a:	d115      	bne.n	800e388 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800e35c:	687b      	ldr	r3, [r7, #4]
 800e35e:	68db      	ldr	r3, [r3, #12]
 800e360:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800e364:	687b      	ldr	r3, [r7, #4]
 800e366:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800e368:	2001      	movs	r0, #1
 800e36a:	f7fb f957 	bl	800961c <HAL_Delay>
      ms++;
 800e36e:	68fb      	ldr	r3, [r7, #12]
 800e370:	3301      	adds	r3, #1
 800e372:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800e374:	6878      	ldr	r0, [r7, #4]
 800e376:	f001 f959 	bl	800f62c <USB_GetMode>
 800e37a:	4603      	mov	r3, r0
 800e37c:	2b00      	cmp	r3, #0
 800e37e:	d005      	beq.n	800e38c <USB_SetCurrentMode+0x84>
 800e380:	68fb      	ldr	r3, [r7, #12]
 800e382:	2b31      	cmp	r3, #49	; 0x31
 800e384:	d9f0      	bls.n	800e368 <USB_SetCurrentMode+0x60>
 800e386:	e001      	b.n	800e38c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800e388:	2301      	movs	r3, #1
 800e38a:	e005      	b.n	800e398 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800e38c:	68fb      	ldr	r3, [r7, #12]
 800e38e:	2b32      	cmp	r3, #50	; 0x32
 800e390:	d101      	bne.n	800e396 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800e392:	2301      	movs	r3, #1
 800e394:	e000      	b.n	800e398 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800e396:	2300      	movs	r3, #0
}
 800e398:	4618      	mov	r0, r3
 800e39a:	3710      	adds	r7, #16
 800e39c:	46bd      	mov	sp, r7
 800e39e:	bd80      	pop	{r7, pc}

0800e3a0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800e3a0:	b084      	sub	sp, #16
 800e3a2:	b580      	push	{r7, lr}
 800e3a4:	b086      	sub	sp, #24
 800e3a6:	af00      	add	r7, sp, #0
 800e3a8:	6078      	str	r0, [r7, #4]
 800e3aa:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800e3ae:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800e3b2:	2300      	movs	r3, #0
 800e3b4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e3b6:	687b      	ldr	r3, [r7, #4]
 800e3b8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800e3ba:	2300      	movs	r3, #0
 800e3bc:	613b      	str	r3, [r7, #16]
 800e3be:	e009      	b.n	800e3d4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800e3c0:	687a      	ldr	r2, [r7, #4]
 800e3c2:	693b      	ldr	r3, [r7, #16]
 800e3c4:	3340      	adds	r3, #64	; 0x40
 800e3c6:	009b      	lsls	r3, r3, #2
 800e3c8:	4413      	add	r3, r2
 800e3ca:	2200      	movs	r2, #0
 800e3cc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800e3ce:	693b      	ldr	r3, [r7, #16]
 800e3d0:	3301      	adds	r3, #1
 800e3d2:	613b      	str	r3, [r7, #16]
 800e3d4:	693b      	ldr	r3, [r7, #16]
 800e3d6:	2b0e      	cmp	r3, #14
 800e3d8:	d9f2      	bls.n	800e3c0 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800e3da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e3dc:	2b00      	cmp	r3, #0
 800e3de:	d11c      	bne.n	800e41a <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800e3e0:	68fb      	ldr	r3, [r7, #12]
 800e3e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e3e6:	685b      	ldr	r3, [r3, #4]
 800e3e8:	68fa      	ldr	r2, [r7, #12]
 800e3ea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e3ee:	f043 0302 	orr.w	r3, r3, #2
 800e3f2:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800e3f4:	687b      	ldr	r3, [r7, #4]
 800e3f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e3f8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800e3fc:	687b      	ldr	r3, [r7, #4]
 800e3fe:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800e400:	687b      	ldr	r3, [r7, #4]
 800e402:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e404:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800e408:	687b      	ldr	r3, [r7, #4]
 800e40a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800e40c:	687b      	ldr	r3, [r7, #4]
 800e40e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e410:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800e414:	687b      	ldr	r3, [r7, #4]
 800e416:	639a      	str	r2, [r3, #56]	; 0x38
 800e418:	e00b      	b.n	800e432 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800e41a:	687b      	ldr	r3, [r7, #4]
 800e41c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e41e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800e422:	687b      	ldr	r3, [r7, #4]
 800e424:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800e426:	687b      	ldr	r3, [r7, #4]
 800e428:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e42a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800e42e:	687b      	ldr	r3, [r7, #4]
 800e430:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800e432:	68fb      	ldr	r3, [r7, #12]
 800e434:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800e438:	461a      	mov	r2, r3
 800e43a:	2300      	movs	r3, #0
 800e43c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800e43e:	68fb      	ldr	r3, [r7, #12]
 800e440:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e444:	4619      	mov	r1, r3
 800e446:	68fb      	ldr	r3, [r7, #12]
 800e448:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e44c:	461a      	mov	r2, r3
 800e44e:	680b      	ldr	r3, [r1, #0]
 800e450:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800e452:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e454:	2b01      	cmp	r3, #1
 800e456:	d10c      	bne.n	800e472 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800e458:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e45a:	2b00      	cmp	r3, #0
 800e45c:	d104      	bne.n	800e468 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800e45e:	2100      	movs	r1, #0
 800e460:	6878      	ldr	r0, [r7, #4]
 800e462:	f000 f945 	bl	800e6f0 <USB_SetDevSpeed>
 800e466:	e008      	b.n	800e47a <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800e468:	2101      	movs	r1, #1
 800e46a:	6878      	ldr	r0, [r7, #4]
 800e46c:	f000 f940 	bl	800e6f0 <USB_SetDevSpeed>
 800e470:	e003      	b.n	800e47a <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800e472:	2103      	movs	r1, #3
 800e474:	6878      	ldr	r0, [r7, #4]
 800e476:	f000 f93b 	bl	800e6f0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800e47a:	2110      	movs	r1, #16
 800e47c:	6878      	ldr	r0, [r7, #4]
 800e47e:	f000 f8f3 	bl	800e668 <USB_FlushTxFifo>
 800e482:	4603      	mov	r3, r0
 800e484:	2b00      	cmp	r3, #0
 800e486:	d001      	beq.n	800e48c <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800e488:	2301      	movs	r3, #1
 800e48a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800e48c:	6878      	ldr	r0, [r7, #4]
 800e48e:	f000 f90f 	bl	800e6b0 <USB_FlushRxFifo>
 800e492:	4603      	mov	r3, r0
 800e494:	2b00      	cmp	r3, #0
 800e496:	d001      	beq.n	800e49c <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800e498:	2301      	movs	r3, #1
 800e49a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800e49c:	68fb      	ldr	r3, [r7, #12]
 800e49e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e4a2:	461a      	mov	r2, r3
 800e4a4:	2300      	movs	r3, #0
 800e4a6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800e4a8:	68fb      	ldr	r3, [r7, #12]
 800e4aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e4ae:	461a      	mov	r2, r3
 800e4b0:	2300      	movs	r3, #0
 800e4b2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800e4b4:	68fb      	ldr	r3, [r7, #12]
 800e4b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e4ba:	461a      	mov	r2, r3
 800e4bc:	2300      	movs	r3, #0
 800e4be:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800e4c0:	2300      	movs	r3, #0
 800e4c2:	613b      	str	r3, [r7, #16]
 800e4c4:	e043      	b.n	800e54e <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800e4c6:	693b      	ldr	r3, [r7, #16]
 800e4c8:	015a      	lsls	r2, r3, #5
 800e4ca:	68fb      	ldr	r3, [r7, #12]
 800e4cc:	4413      	add	r3, r2
 800e4ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e4d2:	681b      	ldr	r3, [r3, #0]
 800e4d4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800e4d8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e4dc:	d118      	bne.n	800e510 <USB_DevInit+0x170>
    {
      if (i == 0U)
 800e4de:	693b      	ldr	r3, [r7, #16]
 800e4e0:	2b00      	cmp	r3, #0
 800e4e2:	d10a      	bne.n	800e4fa <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800e4e4:	693b      	ldr	r3, [r7, #16]
 800e4e6:	015a      	lsls	r2, r3, #5
 800e4e8:	68fb      	ldr	r3, [r7, #12]
 800e4ea:	4413      	add	r3, r2
 800e4ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e4f0:	461a      	mov	r2, r3
 800e4f2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800e4f6:	6013      	str	r3, [r2, #0]
 800e4f8:	e013      	b.n	800e522 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800e4fa:	693b      	ldr	r3, [r7, #16]
 800e4fc:	015a      	lsls	r2, r3, #5
 800e4fe:	68fb      	ldr	r3, [r7, #12]
 800e500:	4413      	add	r3, r2
 800e502:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e506:	461a      	mov	r2, r3
 800e508:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800e50c:	6013      	str	r3, [r2, #0]
 800e50e:	e008      	b.n	800e522 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800e510:	693b      	ldr	r3, [r7, #16]
 800e512:	015a      	lsls	r2, r3, #5
 800e514:	68fb      	ldr	r3, [r7, #12]
 800e516:	4413      	add	r3, r2
 800e518:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e51c:	461a      	mov	r2, r3
 800e51e:	2300      	movs	r3, #0
 800e520:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800e522:	693b      	ldr	r3, [r7, #16]
 800e524:	015a      	lsls	r2, r3, #5
 800e526:	68fb      	ldr	r3, [r7, #12]
 800e528:	4413      	add	r3, r2
 800e52a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e52e:	461a      	mov	r2, r3
 800e530:	2300      	movs	r3, #0
 800e532:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800e534:	693b      	ldr	r3, [r7, #16]
 800e536:	015a      	lsls	r2, r3, #5
 800e538:	68fb      	ldr	r3, [r7, #12]
 800e53a:	4413      	add	r3, r2
 800e53c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e540:	461a      	mov	r2, r3
 800e542:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800e546:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800e548:	693b      	ldr	r3, [r7, #16]
 800e54a:	3301      	adds	r3, #1
 800e54c:	613b      	str	r3, [r7, #16]
 800e54e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e550:	693a      	ldr	r2, [r7, #16]
 800e552:	429a      	cmp	r2, r3
 800e554:	d3b7      	bcc.n	800e4c6 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800e556:	2300      	movs	r3, #0
 800e558:	613b      	str	r3, [r7, #16]
 800e55a:	e043      	b.n	800e5e4 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800e55c:	693b      	ldr	r3, [r7, #16]
 800e55e:	015a      	lsls	r2, r3, #5
 800e560:	68fb      	ldr	r3, [r7, #12]
 800e562:	4413      	add	r3, r2
 800e564:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e568:	681b      	ldr	r3, [r3, #0]
 800e56a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800e56e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e572:	d118      	bne.n	800e5a6 <USB_DevInit+0x206>
    {
      if (i == 0U)
 800e574:	693b      	ldr	r3, [r7, #16]
 800e576:	2b00      	cmp	r3, #0
 800e578:	d10a      	bne.n	800e590 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800e57a:	693b      	ldr	r3, [r7, #16]
 800e57c:	015a      	lsls	r2, r3, #5
 800e57e:	68fb      	ldr	r3, [r7, #12]
 800e580:	4413      	add	r3, r2
 800e582:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e586:	461a      	mov	r2, r3
 800e588:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800e58c:	6013      	str	r3, [r2, #0]
 800e58e:	e013      	b.n	800e5b8 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800e590:	693b      	ldr	r3, [r7, #16]
 800e592:	015a      	lsls	r2, r3, #5
 800e594:	68fb      	ldr	r3, [r7, #12]
 800e596:	4413      	add	r3, r2
 800e598:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e59c:	461a      	mov	r2, r3
 800e59e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800e5a2:	6013      	str	r3, [r2, #0]
 800e5a4:	e008      	b.n	800e5b8 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800e5a6:	693b      	ldr	r3, [r7, #16]
 800e5a8:	015a      	lsls	r2, r3, #5
 800e5aa:	68fb      	ldr	r3, [r7, #12]
 800e5ac:	4413      	add	r3, r2
 800e5ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e5b2:	461a      	mov	r2, r3
 800e5b4:	2300      	movs	r3, #0
 800e5b6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800e5b8:	693b      	ldr	r3, [r7, #16]
 800e5ba:	015a      	lsls	r2, r3, #5
 800e5bc:	68fb      	ldr	r3, [r7, #12]
 800e5be:	4413      	add	r3, r2
 800e5c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e5c4:	461a      	mov	r2, r3
 800e5c6:	2300      	movs	r3, #0
 800e5c8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800e5ca:	693b      	ldr	r3, [r7, #16]
 800e5cc:	015a      	lsls	r2, r3, #5
 800e5ce:	68fb      	ldr	r3, [r7, #12]
 800e5d0:	4413      	add	r3, r2
 800e5d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e5d6:	461a      	mov	r2, r3
 800e5d8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800e5dc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800e5de:	693b      	ldr	r3, [r7, #16]
 800e5e0:	3301      	adds	r3, #1
 800e5e2:	613b      	str	r3, [r7, #16]
 800e5e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5e6:	693a      	ldr	r2, [r7, #16]
 800e5e8:	429a      	cmp	r2, r3
 800e5ea:	d3b7      	bcc.n	800e55c <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800e5ec:	68fb      	ldr	r3, [r7, #12]
 800e5ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e5f2:	691b      	ldr	r3, [r3, #16]
 800e5f4:	68fa      	ldr	r2, [r7, #12]
 800e5f6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e5fa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e5fe:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800e600:	687b      	ldr	r3, [r7, #4]
 800e602:	2200      	movs	r2, #0
 800e604:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800e606:	687b      	ldr	r3, [r7, #4]
 800e608:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800e60c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800e60e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e610:	2b00      	cmp	r3, #0
 800e612:	d105      	bne.n	800e620 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800e614:	687b      	ldr	r3, [r7, #4]
 800e616:	699b      	ldr	r3, [r3, #24]
 800e618:	f043 0210 	orr.w	r2, r3, #16
 800e61c:	687b      	ldr	r3, [r7, #4]
 800e61e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800e620:	687b      	ldr	r3, [r7, #4]
 800e622:	699a      	ldr	r2, [r3, #24]
 800e624:	4b0f      	ldr	r3, [pc, #60]	; (800e664 <USB_DevInit+0x2c4>)
 800e626:	4313      	orrs	r3, r2
 800e628:	687a      	ldr	r2, [r7, #4]
 800e62a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800e62c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e62e:	2b00      	cmp	r3, #0
 800e630:	d005      	beq.n	800e63e <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800e632:	687b      	ldr	r3, [r7, #4]
 800e634:	699b      	ldr	r3, [r3, #24]
 800e636:	f043 0208 	orr.w	r2, r3, #8
 800e63a:	687b      	ldr	r3, [r7, #4]
 800e63c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800e63e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e640:	2b01      	cmp	r3, #1
 800e642:	d107      	bne.n	800e654 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800e644:	687b      	ldr	r3, [r7, #4]
 800e646:	699b      	ldr	r3, [r3, #24]
 800e648:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800e64c:	f043 0304 	orr.w	r3, r3, #4
 800e650:	687a      	ldr	r2, [r7, #4]
 800e652:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800e654:	7dfb      	ldrb	r3, [r7, #23]
}
 800e656:	4618      	mov	r0, r3
 800e658:	3718      	adds	r7, #24
 800e65a:	46bd      	mov	sp, r7
 800e65c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800e660:	b004      	add	sp, #16
 800e662:	4770      	bx	lr
 800e664:	803c3800 	.word	0x803c3800

0800e668 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800e668:	b480      	push	{r7}
 800e66a:	b085      	sub	sp, #20
 800e66c:	af00      	add	r7, sp, #0
 800e66e:	6078      	str	r0, [r7, #4]
 800e670:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800e672:	2300      	movs	r3, #0
 800e674:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800e676:	683b      	ldr	r3, [r7, #0]
 800e678:	019b      	lsls	r3, r3, #6
 800e67a:	f043 0220 	orr.w	r2, r3, #32
 800e67e:	687b      	ldr	r3, [r7, #4]
 800e680:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800e682:	68fb      	ldr	r3, [r7, #12]
 800e684:	3301      	adds	r3, #1
 800e686:	60fb      	str	r3, [r7, #12]
 800e688:	4a08      	ldr	r2, [pc, #32]	; (800e6ac <USB_FlushTxFifo+0x44>)
 800e68a:	4293      	cmp	r3, r2
 800e68c:	d901      	bls.n	800e692 <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 800e68e:	2303      	movs	r3, #3
 800e690:	e006      	b.n	800e6a0 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800e692:	687b      	ldr	r3, [r7, #4]
 800e694:	691b      	ldr	r3, [r3, #16]
 800e696:	f003 0320 	and.w	r3, r3, #32
 800e69a:	2b20      	cmp	r3, #32
 800e69c:	d0f1      	beq.n	800e682 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800e69e:	2300      	movs	r3, #0
}
 800e6a0:	4618      	mov	r0, r3
 800e6a2:	3714      	adds	r7, #20
 800e6a4:	46bd      	mov	sp, r7
 800e6a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6aa:	4770      	bx	lr
 800e6ac:	00030d40 	.word	0x00030d40

0800e6b0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800e6b0:	b480      	push	{r7}
 800e6b2:	b085      	sub	sp, #20
 800e6b4:	af00      	add	r7, sp, #0
 800e6b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800e6b8:	2300      	movs	r3, #0
 800e6ba:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800e6bc:	687b      	ldr	r3, [r7, #4]
 800e6be:	2210      	movs	r2, #16
 800e6c0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800e6c2:	68fb      	ldr	r3, [r7, #12]
 800e6c4:	3301      	adds	r3, #1
 800e6c6:	60fb      	str	r3, [r7, #12]
 800e6c8:	4a08      	ldr	r2, [pc, #32]	; (800e6ec <USB_FlushRxFifo+0x3c>)
 800e6ca:	4293      	cmp	r3, r2
 800e6cc:	d901      	bls.n	800e6d2 <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 800e6ce:	2303      	movs	r3, #3
 800e6d0:	e006      	b.n	800e6e0 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800e6d2:	687b      	ldr	r3, [r7, #4]
 800e6d4:	691b      	ldr	r3, [r3, #16]
 800e6d6:	f003 0310 	and.w	r3, r3, #16
 800e6da:	2b10      	cmp	r3, #16
 800e6dc:	d0f1      	beq.n	800e6c2 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800e6de:	2300      	movs	r3, #0
}
 800e6e0:	4618      	mov	r0, r3
 800e6e2:	3714      	adds	r7, #20
 800e6e4:	46bd      	mov	sp, r7
 800e6e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6ea:	4770      	bx	lr
 800e6ec:	00030d40 	.word	0x00030d40

0800e6f0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800e6f0:	b480      	push	{r7}
 800e6f2:	b085      	sub	sp, #20
 800e6f4:	af00      	add	r7, sp, #0
 800e6f6:	6078      	str	r0, [r7, #4]
 800e6f8:	460b      	mov	r3, r1
 800e6fa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e6fc:	687b      	ldr	r3, [r7, #4]
 800e6fe:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800e700:	68fb      	ldr	r3, [r7, #12]
 800e702:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e706:	681a      	ldr	r2, [r3, #0]
 800e708:	78fb      	ldrb	r3, [r7, #3]
 800e70a:	68f9      	ldr	r1, [r7, #12]
 800e70c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e710:	4313      	orrs	r3, r2
 800e712:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800e714:	2300      	movs	r3, #0
}
 800e716:	4618      	mov	r0, r3
 800e718:	3714      	adds	r7, #20
 800e71a:	46bd      	mov	sp, r7
 800e71c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e720:	4770      	bx	lr

0800e722 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800e722:	b480      	push	{r7}
 800e724:	b087      	sub	sp, #28
 800e726:	af00      	add	r7, sp, #0
 800e728:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e72a:	687b      	ldr	r3, [r7, #4]
 800e72c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800e72e:	693b      	ldr	r3, [r7, #16]
 800e730:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e734:	689b      	ldr	r3, [r3, #8]
 800e736:	f003 0306 	and.w	r3, r3, #6
 800e73a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800e73c:	68fb      	ldr	r3, [r7, #12]
 800e73e:	2b00      	cmp	r3, #0
 800e740:	d102      	bne.n	800e748 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800e742:	2300      	movs	r3, #0
 800e744:	75fb      	strb	r3, [r7, #23]
 800e746:	e00a      	b.n	800e75e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800e748:	68fb      	ldr	r3, [r7, #12]
 800e74a:	2b02      	cmp	r3, #2
 800e74c:	d002      	beq.n	800e754 <USB_GetDevSpeed+0x32>
 800e74e:	68fb      	ldr	r3, [r7, #12]
 800e750:	2b06      	cmp	r3, #6
 800e752:	d102      	bne.n	800e75a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800e754:	2302      	movs	r3, #2
 800e756:	75fb      	strb	r3, [r7, #23]
 800e758:	e001      	b.n	800e75e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800e75a:	230f      	movs	r3, #15
 800e75c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800e75e:	7dfb      	ldrb	r3, [r7, #23]
}
 800e760:	4618      	mov	r0, r3
 800e762:	371c      	adds	r7, #28
 800e764:	46bd      	mov	sp, r7
 800e766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e76a:	4770      	bx	lr

0800e76c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800e76c:	b480      	push	{r7}
 800e76e:	b085      	sub	sp, #20
 800e770:	af00      	add	r7, sp, #0
 800e772:	6078      	str	r0, [r7, #4]
 800e774:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e776:	687b      	ldr	r3, [r7, #4]
 800e778:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800e77a:	683b      	ldr	r3, [r7, #0]
 800e77c:	781b      	ldrb	r3, [r3, #0]
 800e77e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800e780:	683b      	ldr	r3, [r7, #0]
 800e782:	785b      	ldrb	r3, [r3, #1]
 800e784:	2b01      	cmp	r3, #1
 800e786:	d13a      	bne.n	800e7fe <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800e788:	68fb      	ldr	r3, [r7, #12]
 800e78a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e78e:	69da      	ldr	r2, [r3, #28]
 800e790:	683b      	ldr	r3, [r7, #0]
 800e792:	781b      	ldrb	r3, [r3, #0]
 800e794:	f003 030f 	and.w	r3, r3, #15
 800e798:	2101      	movs	r1, #1
 800e79a:	fa01 f303 	lsl.w	r3, r1, r3
 800e79e:	b29b      	uxth	r3, r3
 800e7a0:	68f9      	ldr	r1, [r7, #12]
 800e7a2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e7a6:	4313      	orrs	r3, r2
 800e7a8:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800e7aa:	68bb      	ldr	r3, [r7, #8]
 800e7ac:	015a      	lsls	r2, r3, #5
 800e7ae:	68fb      	ldr	r3, [r7, #12]
 800e7b0:	4413      	add	r3, r2
 800e7b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e7b6:	681b      	ldr	r3, [r3, #0]
 800e7b8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e7bc:	2b00      	cmp	r3, #0
 800e7be:	d155      	bne.n	800e86c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800e7c0:	68bb      	ldr	r3, [r7, #8]
 800e7c2:	015a      	lsls	r2, r3, #5
 800e7c4:	68fb      	ldr	r3, [r7, #12]
 800e7c6:	4413      	add	r3, r2
 800e7c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e7cc:	681a      	ldr	r2, [r3, #0]
 800e7ce:	683b      	ldr	r3, [r7, #0]
 800e7d0:	689b      	ldr	r3, [r3, #8]
 800e7d2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800e7d6:	683b      	ldr	r3, [r7, #0]
 800e7d8:	78db      	ldrb	r3, [r3, #3]
 800e7da:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800e7dc:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800e7de:	68bb      	ldr	r3, [r7, #8]
 800e7e0:	059b      	lsls	r3, r3, #22
 800e7e2:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800e7e4:	4313      	orrs	r3, r2
 800e7e6:	68ba      	ldr	r2, [r7, #8]
 800e7e8:	0151      	lsls	r1, r2, #5
 800e7ea:	68fa      	ldr	r2, [r7, #12]
 800e7ec:	440a      	add	r2, r1
 800e7ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e7f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e7f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e7fa:	6013      	str	r3, [r2, #0]
 800e7fc:	e036      	b.n	800e86c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800e7fe:	68fb      	ldr	r3, [r7, #12]
 800e800:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e804:	69da      	ldr	r2, [r3, #28]
 800e806:	683b      	ldr	r3, [r7, #0]
 800e808:	781b      	ldrb	r3, [r3, #0]
 800e80a:	f003 030f 	and.w	r3, r3, #15
 800e80e:	2101      	movs	r1, #1
 800e810:	fa01 f303 	lsl.w	r3, r1, r3
 800e814:	041b      	lsls	r3, r3, #16
 800e816:	68f9      	ldr	r1, [r7, #12]
 800e818:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e81c:	4313      	orrs	r3, r2
 800e81e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800e820:	68bb      	ldr	r3, [r7, #8]
 800e822:	015a      	lsls	r2, r3, #5
 800e824:	68fb      	ldr	r3, [r7, #12]
 800e826:	4413      	add	r3, r2
 800e828:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e82c:	681b      	ldr	r3, [r3, #0]
 800e82e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e832:	2b00      	cmp	r3, #0
 800e834:	d11a      	bne.n	800e86c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800e836:	68bb      	ldr	r3, [r7, #8]
 800e838:	015a      	lsls	r2, r3, #5
 800e83a:	68fb      	ldr	r3, [r7, #12]
 800e83c:	4413      	add	r3, r2
 800e83e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e842:	681a      	ldr	r2, [r3, #0]
 800e844:	683b      	ldr	r3, [r7, #0]
 800e846:	689b      	ldr	r3, [r3, #8]
 800e848:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800e84c:	683b      	ldr	r3, [r7, #0]
 800e84e:	78db      	ldrb	r3, [r3, #3]
 800e850:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800e852:	430b      	orrs	r3, r1
 800e854:	4313      	orrs	r3, r2
 800e856:	68ba      	ldr	r2, [r7, #8]
 800e858:	0151      	lsls	r1, r2, #5
 800e85a:	68fa      	ldr	r2, [r7, #12]
 800e85c:	440a      	add	r2, r1
 800e85e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e862:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e866:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e86a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800e86c:	2300      	movs	r3, #0
}
 800e86e:	4618      	mov	r0, r3
 800e870:	3714      	adds	r7, #20
 800e872:	46bd      	mov	sp, r7
 800e874:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e878:	4770      	bx	lr
	...

0800e87c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800e87c:	b480      	push	{r7}
 800e87e:	b085      	sub	sp, #20
 800e880:	af00      	add	r7, sp, #0
 800e882:	6078      	str	r0, [r7, #4]
 800e884:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e886:	687b      	ldr	r3, [r7, #4]
 800e888:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800e88a:	683b      	ldr	r3, [r7, #0]
 800e88c:	781b      	ldrb	r3, [r3, #0]
 800e88e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800e890:	683b      	ldr	r3, [r7, #0]
 800e892:	785b      	ldrb	r3, [r3, #1]
 800e894:	2b01      	cmp	r3, #1
 800e896:	d161      	bne.n	800e95c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800e898:	68bb      	ldr	r3, [r7, #8]
 800e89a:	015a      	lsls	r2, r3, #5
 800e89c:	68fb      	ldr	r3, [r7, #12]
 800e89e:	4413      	add	r3, r2
 800e8a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e8a4:	681b      	ldr	r3, [r3, #0]
 800e8a6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800e8aa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e8ae:	d11f      	bne.n	800e8f0 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800e8b0:	68bb      	ldr	r3, [r7, #8]
 800e8b2:	015a      	lsls	r2, r3, #5
 800e8b4:	68fb      	ldr	r3, [r7, #12]
 800e8b6:	4413      	add	r3, r2
 800e8b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e8bc:	681b      	ldr	r3, [r3, #0]
 800e8be:	68ba      	ldr	r2, [r7, #8]
 800e8c0:	0151      	lsls	r1, r2, #5
 800e8c2:	68fa      	ldr	r2, [r7, #12]
 800e8c4:	440a      	add	r2, r1
 800e8c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e8ca:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800e8ce:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800e8d0:	68bb      	ldr	r3, [r7, #8]
 800e8d2:	015a      	lsls	r2, r3, #5
 800e8d4:	68fb      	ldr	r3, [r7, #12]
 800e8d6:	4413      	add	r3, r2
 800e8d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e8dc:	681b      	ldr	r3, [r3, #0]
 800e8de:	68ba      	ldr	r2, [r7, #8]
 800e8e0:	0151      	lsls	r1, r2, #5
 800e8e2:	68fa      	ldr	r2, [r7, #12]
 800e8e4:	440a      	add	r2, r1
 800e8e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e8ea:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800e8ee:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800e8f0:	68fb      	ldr	r3, [r7, #12]
 800e8f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e8f6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e8f8:	683b      	ldr	r3, [r7, #0]
 800e8fa:	781b      	ldrb	r3, [r3, #0]
 800e8fc:	f003 030f 	and.w	r3, r3, #15
 800e900:	2101      	movs	r1, #1
 800e902:	fa01 f303 	lsl.w	r3, r1, r3
 800e906:	b29b      	uxth	r3, r3
 800e908:	43db      	mvns	r3, r3
 800e90a:	68f9      	ldr	r1, [r7, #12]
 800e90c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e910:	4013      	ands	r3, r2
 800e912:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800e914:	68fb      	ldr	r3, [r7, #12]
 800e916:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e91a:	69da      	ldr	r2, [r3, #28]
 800e91c:	683b      	ldr	r3, [r7, #0]
 800e91e:	781b      	ldrb	r3, [r3, #0]
 800e920:	f003 030f 	and.w	r3, r3, #15
 800e924:	2101      	movs	r1, #1
 800e926:	fa01 f303 	lsl.w	r3, r1, r3
 800e92a:	b29b      	uxth	r3, r3
 800e92c:	43db      	mvns	r3, r3
 800e92e:	68f9      	ldr	r1, [r7, #12]
 800e930:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e934:	4013      	ands	r3, r2
 800e936:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800e938:	68bb      	ldr	r3, [r7, #8]
 800e93a:	015a      	lsls	r2, r3, #5
 800e93c:	68fb      	ldr	r3, [r7, #12]
 800e93e:	4413      	add	r3, r2
 800e940:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e944:	681a      	ldr	r2, [r3, #0]
 800e946:	68bb      	ldr	r3, [r7, #8]
 800e948:	0159      	lsls	r1, r3, #5
 800e94a:	68fb      	ldr	r3, [r7, #12]
 800e94c:	440b      	add	r3, r1
 800e94e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e952:	4619      	mov	r1, r3
 800e954:	4b35      	ldr	r3, [pc, #212]	; (800ea2c <USB_DeactivateEndpoint+0x1b0>)
 800e956:	4013      	ands	r3, r2
 800e958:	600b      	str	r3, [r1, #0]
 800e95a:	e060      	b.n	800ea1e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800e95c:	68bb      	ldr	r3, [r7, #8]
 800e95e:	015a      	lsls	r2, r3, #5
 800e960:	68fb      	ldr	r3, [r7, #12]
 800e962:	4413      	add	r3, r2
 800e964:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e968:	681b      	ldr	r3, [r3, #0]
 800e96a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800e96e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e972:	d11f      	bne.n	800e9b4 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800e974:	68bb      	ldr	r3, [r7, #8]
 800e976:	015a      	lsls	r2, r3, #5
 800e978:	68fb      	ldr	r3, [r7, #12]
 800e97a:	4413      	add	r3, r2
 800e97c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e980:	681b      	ldr	r3, [r3, #0]
 800e982:	68ba      	ldr	r2, [r7, #8]
 800e984:	0151      	lsls	r1, r2, #5
 800e986:	68fa      	ldr	r2, [r7, #12]
 800e988:	440a      	add	r2, r1
 800e98a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e98e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800e992:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800e994:	68bb      	ldr	r3, [r7, #8]
 800e996:	015a      	lsls	r2, r3, #5
 800e998:	68fb      	ldr	r3, [r7, #12]
 800e99a:	4413      	add	r3, r2
 800e99c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e9a0:	681b      	ldr	r3, [r3, #0]
 800e9a2:	68ba      	ldr	r2, [r7, #8]
 800e9a4:	0151      	lsls	r1, r2, #5
 800e9a6:	68fa      	ldr	r2, [r7, #12]
 800e9a8:	440a      	add	r2, r1
 800e9aa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e9ae:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800e9b2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800e9b4:	68fb      	ldr	r3, [r7, #12]
 800e9b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e9ba:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e9bc:	683b      	ldr	r3, [r7, #0]
 800e9be:	781b      	ldrb	r3, [r3, #0]
 800e9c0:	f003 030f 	and.w	r3, r3, #15
 800e9c4:	2101      	movs	r1, #1
 800e9c6:	fa01 f303 	lsl.w	r3, r1, r3
 800e9ca:	041b      	lsls	r3, r3, #16
 800e9cc:	43db      	mvns	r3, r3
 800e9ce:	68f9      	ldr	r1, [r7, #12]
 800e9d0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e9d4:	4013      	ands	r3, r2
 800e9d6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800e9d8:	68fb      	ldr	r3, [r7, #12]
 800e9da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e9de:	69da      	ldr	r2, [r3, #28]
 800e9e0:	683b      	ldr	r3, [r7, #0]
 800e9e2:	781b      	ldrb	r3, [r3, #0]
 800e9e4:	f003 030f 	and.w	r3, r3, #15
 800e9e8:	2101      	movs	r1, #1
 800e9ea:	fa01 f303 	lsl.w	r3, r1, r3
 800e9ee:	041b      	lsls	r3, r3, #16
 800e9f0:	43db      	mvns	r3, r3
 800e9f2:	68f9      	ldr	r1, [r7, #12]
 800e9f4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e9f8:	4013      	ands	r3, r2
 800e9fa:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800e9fc:	68bb      	ldr	r3, [r7, #8]
 800e9fe:	015a      	lsls	r2, r3, #5
 800ea00:	68fb      	ldr	r3, [r7, #12]
 800ea02:	4413      	add	r3, r2
 800ea04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ea08:	681a      	ldr	r2, [r3, #0]
 800ea0a:	68bb      	ldr	r3, [r7, #8]
 800ea0c:	0159      	lsls	r1, r3, #5
 800ea0e:	68fb      	ldr	r3, [r7, #12]
 800ea10:	440b      	add	r3, r1
 800ea12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ea16:	4619      	mov	r1, r3
 800ea18:	4b05      	ldr	r3, [pc, #20]	; (800ea30 <USB_DeactivateEndpoint+0x1b4>)
 800ea1a:	4013      	ands	r3, r2
 800ea1c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800ea1e:	2300      	movs	r3, #0
}
 800ea20:	4618      	mov	r0, r3
 800ea22:	3714      	adds	r7, #20
 800ea24:	46bd      	mov	sp, r7
 800ea26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea2a:	4770      	bx	lr
 800ea2c:	ec337800 	.word	0xec337800
 800ea30:	eff37800 	.word	0xeff37800

0800ea34 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800ea34:	b580      	push	{r7, lr}
 800ea36:	b08a      	sub	sp, #40	; 0x28
 800ea38:	af02      	add	r7, sp, #8
 800ea3a:	60f8      	str	r0, [r7, #12]
 800ea3c:	60b9      	str	r1, [r7, #8]
 800ea3e:	4613      	mov	r3, r2
 800ea40:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ea42:	68fb      	ldr	r3, [r7, #12]
 800ea44:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800ea46:	68bb      	ldr	r3, [r7, #8]
 800ea48:	781b      	ldrb	r3, [r3, #0]
 800ea4a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800ea4c:	68bb      	ldr	r3, [r7, #8]
 800ea4e:	785b      	ldrb	r3, [r3, #1]
 800ea50:	2b01      	cmp	r3, #1
 800ea52:	f040 815c 	bne.w	800ed0e <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800ea56:	68bb      	ldr	r3, [r7, #8]
 800ea58:	695b      	ldr	r3, [r3, #20]
 800ea5a:	2b00      	cmp	r3, #0
 800ea5c:	d132      	bne.n	800eac4 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800ea5e:	69bb      	ldr	r3, [r7, #24]
 800ea60:	015a      	lsls	r2, r3, #5
 800ea62:	69fb      	ldr	r3, [r7, #28]
 800ea64:	4413      	add	r3, r2
 800ea66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ea6a:	691b      	ldr	r3, [r3, #16]
 800ea6c:	69ba      	ldr	r2, [r7, #24]
 800ea6e:	0151      	lsls	r1, r2, #5
 800ea70:	69fa      	ldr	r2, [r7, #28]
 800ea72:	440a      	add	r2, r1
 800ea74:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ea78:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800ea7c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800ea80:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800ea82:	69bb      	ldr	r3, [r7, #24]
 800ea84:	015a      	lsls	r2, r3, #5
 800ea86:	69fb      	ldr	r3, [r7, #28]
 800ea88:	4413      	add	r3, r2
 800ea8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ea8e:	691b      	ldr	r3, [r3, #16]
 800ea90:	69ba      	ldr	r2, [r7, #24]
 800ea92:	0151      	lsls	r1, r2, #5
 800ea94:	69fa      	ldr	r2, [r7, #28]
 800ea96:	440a      	add	r2, r1
 800ea98:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ea9c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800eaa0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800eaa2:	69bb      	ldr	r3, [r7, #24]
 800eaa4:	015a      	lsls	r2, r3, #5
 800eaa6:	69fb      	ldr	r3, [r7, #28]
 800eaa8:	4413      	add	r3, r2
 800eaaa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800eaae:	691b      	ldr	r3, [r3, #16]
 800eab0:	69ba      	ldr	r2, [r7, #24]
 800eab2:	0151      	lsls	r1, r2, #5
 800eab4:	69fa      	ldr	r2, [r7, #28]
 800eab6:	440a      	add	r2, r1
 800eab8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800eabc:	0cdb      	lsrs	r3, r3, #19
 800eabe:	04db      	lsls	r3, r3, #19
 800eac0:	6113      	str	r3, [r2, #16]
 800eac2:	e074      	b.n	800ebae <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800eac4:	69bb      	ldr	r3, [r7, #24]
 800eac6:	015a      	lsls	r2, r3, #5
 800eac8:	69fb      	ldr	r3, [r7, #28]
 800eaca:	4413      	add	r3, r2
 800eacc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ead0:	691b      	ldr	r3, [r3, #16]
 800ead2:	69ba      	ldr	r2, [r7, #24]
 800ead4:	0151      	lsls	r1, r2, #5
 800ead6:	69fa      	ldr	r2, [r7, #28]
 800ead8:	440a      	add	r2, r1
 800eada:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800eade:	0cdb      	lsrs	r3, r3, #19
 800eae0:	04db      	lsls	r3, r3, #19
 800eae2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800eae4:	69bb      	ldr	r3, [r7, #24]
 800eae6:	015a      	lsls	r2, r3, #5
 800eae8:	69fb      	ldr	r3, [r7, #28]
 800eaea:	4413      	add	r3, r2
 800eaec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800eaf0:	691b      	ldr	r3, [r3, #16]
 800eaf2:	69ba      	ldr	r2, [r7, #24]
 800eaf4:	0151      	lsls	r1, r2, #5
 800eaf6:	69fa      	ldr	r2, [r7, #28]
 800eaf8:	440a      	add	r2, r1
 800eafa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800eafe:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800eb02:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800eb06:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800eb08:	69bb      	ldr	r3, [r7, #24]
 800eb0a:	015a      	lsls	r2, r3, #5
 800eb0c:	69fb      	ldr	r3, [r7, #28]
 800eb0e:	4413      	add	r3, r2
 800eb10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800eb14:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800eb16:	68bb      	ldr	r3, [r7, #8]
 800eb18:	6959      	ldr	r1, [r3, #20]
 800eb1a:	68bb      	ldr	r3, [r7, #8]
 800eb1c:	689b      	ldr	r3, [r3, #8]
 800eb1e:	440b      	add	r3, r1
 800eb20:	1e59      	subs	r1, r3, #1
 800eb22:	68bb      	ldr	r3, [r7, #8]
 800eb24:	689b      	ldr	r3, [r3, #8]
 800eb26:	fbb1 f3f3 	udiv	r3, r1, r3
 800eb2a:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800eb2c:	4b9d      	ldr	r3, [pc, #628]	; (800eda4 <USB_EPStartXfer+0x370>)
 800eb2e:	400b      	ands	r3, r1
 800eb30:	69b9      	ldr	r1, [r7, #24]
 800eb32:	0148      	lsls	r0, r1, #5
 800eb34:	69f9      	ldr	r1, [r7, #28]
 800eb36:	4401      	add	r1, r0
 800eb38:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800eb3c:	4313      	orrs	r3, r2
 800eb3e:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800eb40:	69bb      	ldr	r3, [r7, #24]
 800eb42:	015a      	lsls	r2, r3, #5
 800eb44:	69fb      	ldr	r3, [r7, #28]
 800eb46:	4413      	add	r3, r2
 800eb48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800eb4c:	691a      	ldr	r2, [r3, #16]
 800eb4e:	68bb      	ldr	r3, [r7, #8]
 800eb50:	695b      	ldr	r3, [r3, #20]
 800eb52:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800eb56:	69b9      	ldr	r1, [r7, #24]
 800eb58:	0148      	lsls	r0, r1, #5
 800eb5a:	69f9      	ldr	r1, [r7, #28]
 800eb5c:	4401      	add	r1, r0
 800eb5e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800eb62:	4313      	orrs	r3, r2
 800eb64:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800eb66:	68bb      	ldr	r3, [r7, #8]
 800eb68:	78db      	ldrb	r3, [r3, #3]
 800eb6a:	2b01      	cmp	r3, #1
 800eb6c:	d11f      	bne.n	800ebae <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800eb6e:	69bb      	ldr	r3, [r7, #24]
 800eb70:	015a      	lsls	r2, r3, #5
 800eb72:	69fb      	ldr	r3, [r7, #28]
 800eb74:	4413      	add	r3, r2
 800eb76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800eb7a:	691b      	ldr	r3, [r3, #16]
 800eb7c:	69ba      	ldr	r2, [r7, #24]
 800eb7e:	0151      	lsls	r1, r2, #5
 800eb80:	69fa      	ldr	r2, [r7, #28]
 800eb82:	440a      	add	r2, r1
 800eb84:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800eb88:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800eb8c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800eb8e:	69bb      	ldr	r3, [r7, #24]
 800eb90:	015a      	lsls	r2, r3, #5
 800eb92:	69fb      	ldr	r3, [r7, #28]
 800eb94:	4413      	add	r3, r2
 800eb96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800eb9a:	691b      	ldr	r3, [r3, #16]
 800eb9c:	69ba      	ldr	r2, [r7, #24]
 800eb9e:	0151      	lsls	r1, r2, #5
 800eba0:	69fa      	ldr	r2, [r7, #28]
 800eba2:	440a      	add	r2, r1
 800eba4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800eba8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800ebac:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800ebae:	79fb      	ldrb	r3, [r7, #7]
 800ebb0:	2b01      	cmp	r3, #1
 800ebb2:	d14b      	bne.n	800ec4c <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800ebb4:	68bb      	ldr	r3, [r7, #8]
 800ebb6:	691b      	ldr	r3, [r3, #16]
 800ebb8:	2b00      	cmp	r3, #0
 800ebba:	d009      	beq.n	800ebd0 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800ebbc:	69bb      	ldr	r3, [r7, #24]
 800ebbe:	015a      	lsls	r2, r3, #5
 800ebc0:	69fb      	ldr	r3, [r7, #28]
 800ebc2:	4413      	add	r3, r2
 800ebc4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ebc8:	461a      	mov	r2, r3
 800ebca:	68bb      	ldr	r3, [r7, #8]
 800ebcc:	691b      	ldr	r3, [r3, #16]
 800ebce:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800ebd0:	68bb      	ldr	r3, [r7, #8]
 800ebd2:	78db      	ldrb	r3, [r3, #3]
 800ebd4:	2b01      	cmp	r3, #1
 800ebd6:	d128      	bne.n	800ec2a <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800ebd8:	69fb      	ldr	r3, [r7, #28]
 800ebda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ebde:	689b      	ldr	r3, [r3, #8]
 800ebe0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ebe4:	2b00      	cmp	r3, #0
 800ebe6:	d110      	bne.n	800ec0a <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800ebe8:	69bb      	ldr	r3, [r7, #24]
 800ebea:	015a      	lsls	r2, r3, #5
 800ebec:	69fb      	ldr	r3, [r7, #28]
 800ebee:	4413      	add	r3, r2
 800ebf0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ebf4:	681b      	ldr	r3, [r3, #0]
 800ebf6:	69ba      	ldr	r2, [r7, #24]
 800ebf8:	0151      	lsls	r1, r2, #5
 800ebfa:	69fa      	ldr	r2, [r7, #28]
 800ebfc:	440a      	add	r2, r1
 800ebfe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ec02:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800ec06:	6013      	str	r3, [r2, #0]
 800ec08:	e00f      	b.n	800ec2a <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800ec0a:	69bb      	ldr	r3, [r7, #24]
 800ec0c:	015a      	lsls	r2, r3, #5
 800ec0e:	69fb      	ldr	r3, [r7, #28]
 800ec10:	4413      	add	r3, r2
 800ec12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ec16:	681b      	ldr	r3, [r3, #0]
 800ec18:	69ba      	ldr	r2, [r7, #24]
 800ec1a:	0151      	lsls	r1, r2, #5
 800ec1c:	69fa      	ldr	r2, [r7, #28]
 800ec1e:	440a      	add	r2, r1
 800ec20:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ec24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ec28:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800ec2a:	69bb      	ldr	r3, [r7, #24]
 800ec2c:	015a      	lsls	r2, r3, #5
 800ec2e:	69fb      	ldr	r3, [r7, #28]
 800ec30:	4413      	add	r3, r2
 800ec32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ec36:	681b      	ldr	r3, [r3, #0]
 800ec38:	69ba      	ldr	r2, [r7, #24]
 800ec3a:	0151      	lsls	r1, r2, #5
 800ec3c:	69fa      	ldr	r2, [r7, #28]
 800ec3e:	440a      	add	r2, r1
 800ec40:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ec44:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800ec48:	6013      	str	r3, [r2, #0]
 800ec4a:	e12f      	b.n	800eeac <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800ec4c:	69bb      	ldr	r3, [r7, #24]
 800ec4e:	015a      	lsls	r2, r3, #5
 800ec50:	69fb      	ldr	r3, [r7, #28]
 800ec52:	4413      	add	r3, r2
 800ec54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ec58:	681b      	ldr	r3, [r3, #0]
 800ec5a:	69ba      	ldr	r2, [r7, #24]
 800ec5c:	0151      	lsls	r1, r2, #5
 800ec5e:	69fa      	ldr	r2, [r7, #28]
 800ec60:	440a      	add	r2, r1
 800ec62:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ec66:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800ec6a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800ec6c:	68bb      	ldr	r3, [r7, #8]
 800ec6e:	78db      	ldrb	r3, [r3, #3]
 800ec70:	2b01      	cmp	r3, #1
 800ec72:	d015      	beq.n	800eca0 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800ec74:	68bb      	ldr	r3, [r7, #8]
 800ec76:	695b      	ldr	r3, [r3, #20]
 800ec78:	2b00      	cmp	r3, #0
 800ec7a:	f000 8117 	beq.w	800eeac <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800ec7e:	69fb      	ldr	r3, [r7, #28]
 800ec80:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ec84:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ec86:	68bb      	ldr	r3, [r7, #8]
 800ec88:	781b      	ldrb	r3, [r3, #0]
 800ec8a:	f003 030f 	and.w	r3, r3, #15
 800ec8e:	2101      	movs	r1, #1
 800ec90:	fa01 f303 	lsl.w	r3, r1, r3
 800ec94:	69f9      	ldr	r1, [r7, #28]
 800ec96:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ec9a:	4313      	orrs	r3, r2
 800ec9c:	634b      	str	r3, [r1, #52]	; 0x34
 800ec9e:	e105      	b.n	800eeac <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800eca0:	69fb      	ldr	r3, [r7, #28]
 800eca2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800eca6:	689b      	ldr	r3, [r3, #8]
 800eca8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ecac:	2b00      	cmp	r3, #0
 800ecae:	d110      	bne.n	800ecd2 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800ecb0:	69bb      	ldr	r3, [r7, #24]
 800ecb2:	015a      	lsls	r2, r3, #5
 800ecb4:	69fb      	ldr	r3, [r7, #28]
 800ecb6:	4413      	add	r3, r2
 800ecb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ecbc:	681b      	ldr	r3, [r3, #0]
 800ecbe:	69ba      	ldr	r2, [r7, #24]
 800ecc0:	0151      	lsls	r1, r2, #5
 800ecc2:	69fa      	ldr	r2, [r7, #28]
 800ecc4:	440a      	add	r2, r1
 800ecc6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ecca:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800ecce:	6013      	str	r3, [r2, #0]
 800ecd0:	e00f      	b.n	800ecf2 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800ecd2:	69bb      	ldr	r3, [r7, #24]
 800ecd4:	015a      	lsls	r2, r3, #5
 800ecd6:	69fb      	ldr	r3, [r7, #28]
 800ecd8:	4413      	add	r3, r2
 800ecda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ecde:	681b      	ldr	r3, [r3, #0]
 800ece0:	69ba      	ldr	r2, [r7, #24]
 800ece2:	0151      	lsls	r1, r2, #5
 800ece4:	69fa      	ldr	r2, [r7, #28]
 800ece6:	440a      	add	r2, r1
 800ece8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ecec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ecf0:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800ecf2:	68bb      	ldr	r3, [r7, #8]
 800ecf4:	68d9      	ldr	r1, [r3, #12]
 800ecf6:	68bb      	ldr	r3, [r7, #8]
 800ecf8:	781a      	ldrb	r2, [r3, #0]
 800ecfa:	68bb      	ldr	r3, [r7, #8]
 800ecfc:	695b      	ldr	r3, [r3, #20]
 800ecfe:	b298      	uxth	r0, r3
 800ed00:	79fb      	ldrb	r3, [r7, #7]
 800ed02:	9300      	str	r3, [sp, #0]
 800ed04:	4603      	mov	r3, r0
 800ed06:	68f8      	ldr	r0, [r7, #12]
 800ed08:	f000 fa2b 	bl	800f162 <USB_WritePacket>
 800ed0c:	e0ce      	b.n	800eeac <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800ed0e:	69bb      	ldr	r3, [r7, #24]
 800ed10:	015a      	lsls	r2, r3, #5
 800ed12:	69fb      	ldr	r3, [r7, #28]
 800ed14:	4413      	add	r3, r2
 800ed16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ed1a:	691b      	ldr	r3, [r3, #16]
 800ed1c:	69ba      	ldr	r2, [r7, #24]
 800ed1e:	0151      	lsls	r1, r2, #5
 800ed20:	69fa      	ldr	r2, [r7, #28]
 800ed22:	440a      	add	r2, r1
 800ed24:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ed28:	0cdb      	lsrs	r3, r3, #19
 800ed2a:	04db      	lsls	r3, r3, #19
 800ed2c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800ed2e:	69bb      	ldr	r3, [r7, #24]
 800ed30:	015a      	lsls	r2, r3, #5
 800ed32:	69fb      	ldr	r3, [r7, #28]
 800ed34:	4413      	add	r3, r2
 800ed36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ed3a:	691b      	ldr	r3, [r3, #16]
 800ed3c:	69ba      	ldr	r2, [r7, #24]
 800ed3e:	0151      	lsls	r1, r2, #5
 800ed40:	69fa      	ldr	r2, [r7, #28]
 800ed42:	440a      	add	r2, r1
 800ed44:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ed48:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800ed4c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800ed50:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800ed52:	68bb      	ldr	r3, [r7, #8]
 800ed54:	695b      	ldr	r3, [r3, #20]
 800ed56:	2b00      	cmp	r3, #0
 800ed58:	d126      	bne.n	800eda8 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800ed5a:	69bb      	ldr	r3, [r7, #24]
 800ed5c:	015a      	lsls	r2, r3, #5
 800ed5e:	69fb      	ldr	r3, [r7, #28]
 800ed60:	4413      	add	r3, r2
 800ed62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ed66:	691a      	ldr	r2, [r3, #16]
 800ed68:	68bb      	ldr	r3, [r7, #8]
 800ed6a:	689b      	ldr	r3, [r3, #8]
 800ed6c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ed70:	69b9      	ldr	r1, [r7, #24]
 800ed72:	0148      	lsls	r0, r1, #5
 800ed74:	69f9      	ldr	r1, [r7, #28]
 800ed76:	4401      	add	r1, r0
 800ed78:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800ed7c:	4313      	orrs	r3, r2
 800ed7e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800ed80:	69bb      	ldr	r3, [r7, #24]
 800ed82:	015a      	lsls	r2, r3, #5
 800ed84:	69fb      	ldr	r3, [r7, #28]
 800ed86:	4413      	add	r3, r2
 800ed88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ed8c:	691b      	ldr	r3, [r3, #16]
 800ed8e:	69ba      	ldr	r2, [r7, #24]
 800ed90:	0151      	lsls	r1, r2, #5
 800ed92:	69fa      	ldr	r2, [r7, #28]
 800ed94:	440a      	add	r2, r1
 800ed96:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ed9a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ed9e:	6113      	str	r3, [r2, #16]
 800eda0:	e036      	b.n	800ee10 <USB_EPStartXfer+0x3dc>
 800eda2:	bf00      	nop
 800eda4:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800eda8:	68bb      	ldr	r3, [r7, #8]
 800edaa:	695a      	ldr	r2, [r3, #20]
 800edac:	68bb      	ldr	r3, [r7, #8]
 800edae:	689b      	ldr	r3, [r3, #8]
 800edb0:	4413      	add	r3, r2
 800edb2:	1e5a      	subs	r2, r3, #1
 800edb4:	68bb      	ldr	r3, [r7, #8]
 800edb6:	689b      	ldr	r3, [r3, #8]
 800edb8:	fbb2 f3f3 	udiv	r3, r2, r3
 800edbc:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800edbe:	69bb      	ldr	r3, [r7, #24]
 800edc0:	015a      	lsls	r2, r3, #5
 800edc2:	69fb      	ldr	r3, [r7, #28]
 800edc4:	4413      	add	r3, r2
 800edc6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800edca:	691a      	ldr	r2, [r3, #16]
 800edcc:	8afb      	ldrh	r3, [r7, #22]
 800edce:	04d9      	lsls	r1, r3, #19
 800edd0:	4b39      	ldr	r3, [pc, #228]	; (800eeb8 <USB_EPStartXfer+0x484>)
 800edd2:	400b      	ands	r3, r1
 800edd4:	69b9      	ldr	r1, [r7, #24]
 800edd6:	0148      	lsls	r0, r1, #5
 800edd8:	69f9      	ldr	r1, [r7, #28]
 800edda:	4401      	add	r1, r0
 800eddc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800ede0:	4313      	orrs	r3, r2
 800ede2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800ede4:	69bb      	ldr	r3, [r7, #24]
 800ede6:	015a      	lsls	r2, r3, #5
 800ede8:	69fb      	ldr	r3, [r7, #28]
 800edea:	4413      	add	r3, r2
 800edec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800edf0:	691a      	ldr	r2, [r3, #16]
 800edf2:	68bb      	ldr	r3, [r7, #8]
 800edf4:	689b      	ldr	r3, [r3, #8]
 800edf6:	8af9      	ldrh	r1, [r7, #22]
 800edf8:	fb01 f303 	mul.w	r3, r1, r3
 800edfc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ee00:	69b9      	ldr	r1, [r7, #24]
 800ee02:	0148      	lsls	r0, r1, #5
 800ee04:	69f9      	ldr	r1, [r7, #28]
 800ee06:	4401      	add	r1, r0
 800ee08:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800ee0c:	4313      	orrs	r3, r2
 800ee0e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800ee10:	79fb      	ldrb	r3, [r7, #7]
 800ee12:	2b01      	cmp	r3, #1
 800ee14:	d10d      	bne.n	800ee32 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800ee16:	68bb      	ldr	r3, [r7, #8]
 800ee18:	68db      	ldr	r3, [r3, #12]
 800ee1a:	2b00      	cmp	r3, #0
 800ee1c:	d009      	beq.n	800ee32 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800ee1e:	68bb      	ldr	r3, [r7, #8]
 800ee20:	68d9      	ldr	r1, [r3, #12]
 800ee22:	69bb      	ldr	r3, [r7, #24]
 800ee24:	015a      	lsls	r2, r3, #5
 800ee26:	69fb      	ldr	r3, [r7, #28]
 800ee28:	4413      	add	r3, r2
 800ee2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ee2e:	460a      	mov	r2, r1
 800ee30:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800ee32:	68bb      	ldr	r3, [r7, #8]
 800ee34:	78db      	ldrb	r3, [r3, #3]
 800ee36:	2b01      	cmp	r3, #1
 800ee38:	d128      	bne.n	800ee8c <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800ee3a:	69fb      	ldr	r3, [r7, #28]
 800ee3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ee40:	689b      	ldr	r3, [r3, #8]
 800ee42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ee46:	2b00      	cmp	r3, #0
 800ee48:	d110      	bne.n	800ee6c <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800ee4a:	69bb      	ldr	r3, [r7, #24]
 800ee4c:	015a      	lsls	r2, r3, #5
 800ee4e:	69fb      	ldr	r3, [r7, #28]
 800ee50:	4413      	add	r3, r2
 800ee52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ee56:	681b      	ldr	r3, [r3, #0]
 800ee58:	69ba      	ldr	r2, [r7, #24]
 800ee5a:	0151      	lsls	r1, r2, #5
 800ee5c:	69fa      	ldr	r2, [r7, #28]
 800ee5e:	440a      	add	r2, r1
 800ee60:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ee64:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800ee68:	6013      	str	r3, [r2, #0]
 800ee6a:	e00f      	b.n	800ee8c <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800ee6c:	69bb      	ldr	r3, [r7, #24]
 800ee6e:	015a      	lsls	r2, r3, #5
 800ee70:	69fb      	ldr	r3, [r7, #28]
 800ee72:	4413      	add	r3, r2
 800ee74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ee78:	681b      	ldr	r3, [r3, #0]
 800ee7a:	69ba      	ldr	r2, [r7, #24]
 800ee7c:	0151      	lsls	r1, r2, #5
 800ee7e:	69fa      	ldr	r2, [r7, #28]
 800ee80:	440a      	add	r2, r1
 800ee82:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ee86:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ee8a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800ee8c:	69bb      	ldr	r3, [r7, #24]
 800ee8e:	015a      	lsls	r2, r3, #5
 800ee90:	69fb      	ldr	r3, [r7, #28]
 800ee92:	4413      	add	r3, r2
 800ee94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ee98:	681b      	ldr	r3, [r3, #0]
 800ee9a:	69ba      	ldr	r2, [r7, #24]
 800ee9c:	0151      	lsls	r1, r2, #5
 800ee9e:	69fa      	ldr	r2, [r7, #28]
 800eea0:	440a      	add	r2, r1
 800eea2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800eea6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800eeaa:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800eeac:	2300      	movs	r3, #0
}
 800eeae:	4618      	mov	r0, r3
 800eeb0:	3720      	adds	r7, #32
 800eeb2:	46bd      	mov	sp, r7
 800eeb4:	bd80      	pop	{r7, pc}
 800eeb6:	bf00      	nop
 800eeb8:	1ff80000 	.word	0x1ff80000

0800eebc <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800eebc:	b480      	push	{r7}
 800eebe:	b087      	sub	sp, #28
 800eec0:	af00      	add	r7, sp, #0
 800eec2:	60f8      	str	r0, [r7, #12]
 800eec4:	60b9      	str	r1, [r7, #8]
 800eec6:	4613      	mov	r3, r2
 800eec8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800eeca:	68fb      	ldr	r3, [r7, #12]
 800eecc:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800eece:	68bb      	ldr	r3, [r7, #8]
 800eed0:	781b      	ldrb	r3, [r3, #0]
 800eed2:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800eed4:	68bb      	ldr	r3, [r7, #8]
 800eed6:	785b      	ldrb	r3, [r3, #1]
 800eed8:	2b01      	cmp	r3, #1
 800eeda:	f040 80cd 	bne.w	800f078 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800eede:	68bb      	ldr	r3, [r7, #8]
 800eee0:	695b      	ldr	r3, [r3, #20]
 800eee2:	2b00      	cmp	r3, #0
 800eee4:	d132      	bne.n	800ef4c <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800eee6:	693b      	ldr	r3, [r7, #16]
 800eee8:	015a      	lsls	r2, r3, #5
 800eeea:	697b      	ldr	r3, [r7, #20]
 800eeec:	4413      	add	r3, r2
 800eeee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800eef2:	691b      	ldr	r3, [r3, #16]
 800eef4:	693a      	ldr	r2, [r7, #16]
 800eef6:	0151      	lsls	r1, r2, #5
 800eef8:	697a      	ldr	r2, [r7, #20]
 800eefa:	440a      	add	r2, r1
 800eefc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ef00:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800ef04:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800ef08:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800ef0a:	693b      	ldr	r3, [r7, #16]
 800ef0c:	015a      	lsls	r2, r3, #5
 800ef0e:	697b      	ldr	r3, [r7, #20]
 800ef10:	4413      	add	r3, r2
 800ef12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ef16:	691b      	ldr	r3, [r3, #16]
 800ef18:	693a      	ldr	r2, [r7, #16]
 800ef1a:	0151      	lsls	r1, r2, #5
 800ef1c:	697a      	ldr	r2, [r7, #20]
 800ef1e:	440a      	add	r2, r1
 800ef20:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ef24:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ef28:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800ef2a:	693b      	ldr	r3, [r7, #16]
 800ef2c:	015a      	lsls	r2, r3, #5
 800ef2e:	697b      	ldr	r3, [r7, #20]
 800ef30:	4413      	add	r3, r2
 800ef32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ef36:	691b      	ldr	r3, [r3, #16]
 800ef38:	693a      	ldr	r2, [r7, #16]
 800ef3a:	0151      	lsls	r1, r2, #5
 800ef3c:	697a      	ldr	r2, [r7, #20]
 800ef3e:	440a      	add	r2, r1
 800ef40:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ef44:	0cdb      	lsrs	r3, r3, #19
 800ef46:	04db      	lsls	r3, r3, #19
 800ef48:	6113      	str	r3, [r2, #16]
 800ef4a:	e04e      	b.n	800efea <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800ef4c:	693b      	ldr	r3, [r7, #16]
 800ef4e:	015a      	lsls	r2, r3, #5
 800ef50:	697b      	ldr	r3, [r7, #20]
 800ef52:	4413      	add	r3, r2
 800ef54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ef58:	691b      	ldr	r3, [r3, #16]
 800ef5a:	693a      	ldr	r2, [r7, #16]
 800ef5c:	0151      	lsls	r1, r2, #5
 800ef5e:	697a      	ldr	r2, [r7, #20]
 800ef60:	440a      	add	r2, r1
 800ef62:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ef66:	0cdb      	lsrs	r3, r3, #19
 800ef68:	04db      	lsls	r3, r3, #19
 800ef6a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800ef6c:	693b      	ldr	r3, [r7, #16]
 800ef6e:	015a      	lsls	r2, r3, #5
 800ef70:	697b      	ldr	r3, [r7, #20]
 800ef72:	4413      	add	r3, r2
 800ef74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ef78:	691b      	ldr	r3, [r3, #16]
 800ef7a:	693a      	ldr	r2, [r7, #16]
 800ef7c:	0151      	lsls	r1, r2, #5
 800ef7e:	697a      	ldr	r2, [r7, #20]
 800ef80:	440a      	add	r2, r1
 800ef82:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ef86:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800ef8a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800ef8e:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800ef90:	68bb      	ldr	r3, [r7, #8]
 800ef92:	695a      	ldr	r2, [r3, #20]
 800ef94:	68bb      	ldr	r3, [r7, #8]
 800ef96:	689b      	ldr	r3, [r3, #8]
 800ef98:	429a      	cmp	r2, r3
 800ef9a:	d903      	bls.n	800efa4 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800ef9c:	68bb      	ldr	r3, [r7, #8]
 800ef9e:	689a      	ldr	r2, [r3, #8]
 800efa0:	68bb      	ldr	r3, [r7, #8]
 800efa2:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800efa4:	693b      	ldr	r3, [r7, #16]
 800efa6:	015a      	lsls	r2, r3, #5
 800efa8:	697b      	ldr	r3, [r7, #20]
 800efaa:	4413      	add	r3, r2
 800efac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800efb0:	691b      	ldr	r3, [r3, #16]
 800efb2:	693a      	ldr	r2, [r7, #16]
 800efb4:	0151      	lsls	r1, r2, #5
 800efb6:	697a      	ldr	r2, [r7, #20]
 800efb8:	440a      	add	r2, r1
 800efba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800efbe:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800efc2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800efc4:	693b      	ldr	r3, [r7, #16]
 800efc6:	015a      	lsls	r2, r3, #5
 800efc8:	697b      	ldr	r3, [r7, #20]
 800efca:	4413      	add	r3, r2
 800efcc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800efd0:	691a      	ldr	r2, [r3, #16]
 800efd2:	68bb      	ldr	r3, [r7, #8]
 800efd4:	695b      	ldr	r3, [r3, #20]
 800efd6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800efda:	6939      	ldr	r1, [r7, #16]
 800efdc:	0148      	lsls	r0, r1, #5
 800efde:	6979      	ldr	r1, [r7, #20]
 800efe0:	4401      	add	r1, r0
 800efe2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800efe6:	4313      	orrs	r3, r2
 800efe8:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800efea:	79fb      	ldrb	r3, [r7, #7]
 800efec:	2b01      	cmp	r3, #1
 800efee:	d11e      	bne.n	800f02e <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800eff0:	68bb      	ldr	r3, [r7, #8]
 800eff2:	691b      	ldr	r3, [r3, #16]
 800eff4:	2b00      	cmp	r3, #0
 800eff6:	d009      	beq.n	800f00c <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800eff8:	693b      	ldr	r3, [r7, #16]
 800effa:	015a      	lsls	r2, r3, #5
 800effc:	697b      	ldr	r3, [r7, #20]
 800effe:	4413      	add	r3, r2
 800f000:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f004:	461a      	mov	r2, r3
 800f006:	68bb      	ldr	r3, [r7, #8]
 800f008:	691b      	ldr	r3, [r3, #16]
 800f00a:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800f00c:	693b      	ldr	r3, [r7, #16]
 800f00e:	015a      	lsls	r2, r3, #5
 800f010:	697b      	ldr	r3, [r7, #20]
 800f012:	4413      	add	r3, r2
 800f014:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f018:	681b      	ldr	r3, [r3, #0]
 800f01a:	693a      	ldr	r2, [r7, #16]
 800f01c:	0151      	lsls	r1, r2, #5
 800f01e:	697a      	ldr	r2, [r7, #20]
 800f020:	440a      	add	r2, r1
 800f022:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f026:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800f02a:	6013      	str	r3, [r2, #0]
 800f02c:	e092      	b.n	800f154 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800f02e:	693b      	ldr	r3, [r7, #16]
 800f030:	015a      	lsls	r2, r3, #5
 800f032:	697b      	ldr	r3, [r7, #20]
 800f034:	4413      	add	r3, r2
 800f036:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f03a:	681b      	ldr	r3, [r3, #0]
 800f03c:	693a      	ldr	r2, [r7, #16]
 800f03e:	0151      	lsls	r1, r2, #5
 800f040:	697a      	ldr	r2, [r7, #20]
 800f042:	440a      	add	r2, r1
 800f044:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f048:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800f04c:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800f04e:	68bb      	ldr	r3, [r7, #8]
 800f050:	695b      	ldr	r3, [r3, #20]
 800f052:	2b00      	cmp	r3, #0
 800f054:	d07e      	beq.n	800f154 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800f056:	697b      	ldr	r3, [r7, #20]
 800f058:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f05c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f05e:	68bb      	ldr	r3, [r7, #8]
 800f060:	781b      	ldrb	r3, [r3, #0]
 800f062:	f003 030f 	and.w	r3, r3, #15
 800f066:	2101      	movs	r1, #1
 800f068:	fa01 f303 	lsl.w	r3, r1, r3
 800f06c:	6979      	ldr	r1, [r7, #20]
 800f06e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f072:	4313      	orrs	r3, r2
 800f074:	634b      	str	r3, [r1, #52]	; 0x34
 800f076:	e06d      	b.n	800f154 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800f078:	693b      	ldr	r3, [r7, #16]
 800f07a:	015a      	lsls	r2, r3, #5
 800f07c:	697b      	ldr	r3, [r7, #20]
 800f07e:	4413      	add	r3, r2
 800f080:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f084:	691b      	ldr	r3, [r3, #16]
 800f086:	693a      	ldr	r2, [r7, #16]
 800f088:	0151      	lsls	r1, r2, #5
 800f08a:	697a      	ldr	r2, [r7, #20]
 800f08c:	440a      	add	r2, r1
 800f08e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f092:	0cdb      	lsrs	r3, r3, #19
 800f094:	04db      	lsls	r3, r3, #19
 800f096:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800f098:	693b      	ldr	r3, [r7, #16]
 800f09a:	015a      	lsls	r2, r3, #5
 800f09c:	697b      	ldr	r3, [r7, #20]
 800f09e:	4413      	add	r3, r2
 800f0a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f0a4:	691b      	ldr	r3, [r3, #16]
 800f0a6:	693a      	ldr	r2, [r7, #16]
 800f0a8:	0151      	lsls	r1, r2, #5
 800f0aa:	697a      	ldr	r2, [r7, #20]
 800f0ac:	440a      	add	r2, r1
 800f0ae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f0b2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800f0b6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800f0ba:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800f0bc:	68bb      	ldr	r3, [r7, #8]
 800f0be:	695b      	ldr	r3, [r3, #20]
 800f0c0:	2b00      	cmp	r3, #0
 800f0c2:	d003      	beq.n	800f0cc <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 800f0c4:	68bb      	ldr	r3, [r7, #8]
 800f0c6:	689a      	ldr	r2, [r3, #8]
 800f0c8:	68bb      	ldr	r3, [r7, #8]
 800f0ca:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800f0cc:	693b      	ldr	r3, [r7, #16]
 800f0ce:	015a      	lsls	r2, r3, #5
 800f0d0:	697b      	ldr	r3, [r7, #20]
 800f0d2:	4413      	add	r3, r2
 800f0d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f0d8:	691b      	ldr	r3, [r3, #16]
 800f0da:	693a      	ldr	r2, [r7, #16]
 800f0dc:	0151      	lsls	r1, r2, #5
 800f0de:	697a      	ldr	r2, [r7, #20]
 800f0e0:	440a      	add	r2, r1
 800f0e2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f0e6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800f0ea:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800f0ec:	693b      	ldr	r3, [r7, #16]
 800f0ee:	015a      	lsls	r2, r3, #5
 800f0f0:	697b      	ldr	r3, [r7, #20]
 800f0f2:	4413      	add	r3, r2
 800f0f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f0f8:	691a      	ldr	r2, [r3, #16]
 800f0fa:	68bb      	ldr	r3, [r7, #8]
 800f0fc:	689b      	ldr	r3, [r3, #8]
 800f0fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800f102:	6939      	ldr	r1, [r7, #16]
 800f104:	0148      	lsls	r0, r1, #5
 800f106:	6979      	ldr	r1, [r7, #20]
 800f108:	4401      	add	r1, r0
 800f10a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800f10e:	4313      	orrs	r3, r2
 800f110:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800f112:	79fb      	ldrb	r3, [r7, #7]
 800f114:	2b01      	cmp	r3, #1
 800f116:	d10d      	bne.n	800f134 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800f118:	68bb      	ldr	r3, [r7, #8]
 800f11a:	68db      	ldr	r3, [r3, #12]
 800f11c:	2b00      	cmp	r3, #0
 800f11e:	d009      	beq.n	800f134 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800f120:	68bb      	ldr	r3, [r7, #8]
 800f122:	68d9      	ldr	r1, [r3, #12]
 800f124:	693b      	ldr	r3, [r7, #16]
 800f126:	015a      	lsls	r2, r3, #5
 800f128:	697b      	ldr	r3, [r7, #20]
 800f12a:	4413      	add	r3, r2
 800f12c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f130:	460a      	mov	r2, r1
 800f132:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800f134:	693b      	ldr	r3, [r7, #16]
 800f136:	015a      	lsls	r2, r3, #5
 800f138:	697b      	ldr	r3, [r7, #20]
 800f13a:	4413      	add	r3, r2
 800f13c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f140:	681b      	ldr	r3, [r3, #0]
 800f142:	693a      	ldr	r2, [r7, #16]
 800f144:	0151      	lsls	r1, r2, #5
 800f146:	697a      	ldr	r2, [r7, #20]
 800f148:	440a      	add	r2, r1
 800f14a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f14e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800f152:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800f154:	2300      	movs	r3, #0
}
 800f156:	4618      	mov	r0, r3
 800f158:	371c      	adds	r7, #28
 800f15a:	46bd      	mov	sp, r7
 800f15c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f160:	4770      	bx	lr

0800f162 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800f162:	b480      	push	{r7}
 800f164:	b089      	sub	sp, #36	; 0x24
 800f166:	af00      	add	r7, sp, #0
 800f168:	60f8      	str	r0, [r7, #12]
 800f16a:	60b9      	str	r1, [r7, #8]
 800f16c:	4611      	mov	r1, r2
 800f16e:	461a      	mov	r2, r3
 800f170:	460b      	mov	r3, r1
 800f172:	71fb      	strb	r3, [r7, #7]
 800f174:	4613      	mov	r3, r2
 800f176:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f178:	68fb      	ldr	r3, [r7, #12]
 800f17a:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800f17c:	68bb      	ldr	r3, [r7, #8]
 800f17e:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800f180:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800f184:	2b00      	cmp	r3, #0
 800f186:	d123      	bne.n	800f1d0 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800f188:	88bb      	ldrh	r3, [r7, #4]
 800f18a:	3303      	adds	r3, #3
 800f18c:	089b      	lsrs	r3, r3, #2
 800f18e:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800f190:	2300      	movs	r3, #0
 800f192:	61bb      	str	r3, [r7, #24]
 800f194:	e018      	b.n	800f1c8 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800f196:	79fb      	ldrb	r3, [r7, #7]
 800f198:	031a      	lsls	r2, r3, #12
 800f19a:	697b      	ldr	r3, [r7, #20]
 800f19c:	4413      	add	r3, r2
 800f19e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f1a2:	461a      	mov	r2, r3
 800f1a4:	69fb      	ldr	r3, [r7, #28]
 800f1a6:	681b      	ldr	r3, [r3, #0]
 800f1a8:	6013      	str	r3, [r2, #0]
      pSrc++;
 800f1aa:	69fb      	ldr	r3, [r7, #28]
 800f1ac:	3301      	adds	r3, #1
 800f1ae:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800f1b0:	69fb      	ldr	r3, [r7, #28]
 800f1b2:	3301      	adds	r3, #1
 800f1b4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800f1b6:	69fb      	ldr	r3, [r7, #28]
 800f1b8:	3301      	adds	r3, #1
 800f1ba:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800f1bc:	69fb      	ldr	r3, [r7, #28]
 800f1be:	3301      	adds	r3, #1
 800f1c0:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800f1c2:	69bb      	ldr	r3, [r7, #24]
 800f1c4:	3301      	adds	r3, #1
 800f1c6:	61bb      	str	r3, [r7, #24]
 800f1c8:	69ba      	ldr	r2, [r7, #24]
 800f1ca:	693b      	ldr	r3, [r7, #16]
 800f1cc:	429a      	cmp	r2, r3
 800f1ce:	d3e2      	bcc.n	800f196 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800f1d0:	2300      	movs	r3, #0
}
 800f1d2:	4618      	mov	r0, r3
 800f1d4:	3724      	adds	r7, #36	; 0x24
 800f1d6:	46bd      	mov	sp, r7
 800f1d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1dc:	4770      	bx	lr

0800f1de <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800f1de:	b480      	push	{r7}
 800f1e0:	b08b      	sub	sp, #44	; 0x2c
 800f1e2:	af00      	add	r7, sp, #0
 800f1e4:	60f8      	str	r0, [r7, #12]
 800f1e6:	60b9      	str	r1, [r7, #8]
 800f1e8:	4613      	mov	r3, r2
 800f1ea:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f1ec:	68fb      	ldr	r3, [r7, #12]
 800f1ee:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800f1f0:	68bb      	ldr	r3, [r7, #8]
 800f1f2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800f1f4:	88fb      	ldrh	r3, [r7, #6]
 800f1f6:	089b      	lsrs	r3, r3, #2
 800f1f8:	b29b      	uxth	r3, r3
 800f1fa:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800f1fc:	88fb      	ldrh	r3, [r7, #6]
 800f1fe:	f003 0303 	and.w	r3, r3, #3
 800f202:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800f204:	2300      	movs	r3, #0
 800f206:	623b      	str	r3, [r7, #32]
 800f208:	e014      	b.n	800f234 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800f20a:	69bb      	ldr	r3, [r7, #24]
 800f20c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f210:	681a      	ldr	r2, [r3, #0]
 800f212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f214:	601a      	str	r2, [r3, #0]
    pDest++;
 800f216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f218:	3301      	adds	r3, #1
 800f21a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800f21c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f21e:	3301      	adds	r3, #1
 800f220:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800f222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f224:	3301      	adds	r3, #1
 800f226:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800f228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f22a:	3301      	adds	r3, #1
 800f22c:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800f22e:	6a3b      	ldr	r3, [r7, #32]
 800f230:	3301      	adds	r3, #1
 800f232:	623b      	str	r3, [r7, #32]
 800f234:	6a3a      	ldr	r2, [r7, #32]
 800f236:	697b      	ldr	r3, [r7, #20]
 800f238:	429a      	cmp	r2, r3
 800f23a:	d3e6      	bcc.n	800f20a <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800f23c:	8bfb      	ldrh	r3, [r7, #30]
 800f23e:	2b00      	cmp	r3, #0
 800f240:	d01e      	beq.n	800f280 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800f242:	2300      	movs	r3, #0
 800f244:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800f246:	69bb      	ldr	r3, [r7, #24]
 800f248:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f24c:	461a      	mov	r2, r3
 800f24e:	f107 0310 	add.w	r3, r7, #16
 800f252:	6812      	ldr	r2, [r2, #0]
 800f254:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800f256:	693a      	ldr	r2, [r7, #16]
 800f258:	6a3b      	ldr	r3, [r7, #32]
 800f25a:	b2db      	uxtb	r3, r3
 800f25c:	00db      	lsls	r3, r3, #3
 800f25e:	fa22 f303 	lsr.w	r3, r2, r3
 800f262:	b2da      	uxtb	r2, r3
 800f264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f266:	701a      	strb	r2, [r3, #0]
      i++;
 800f268:	6a3b      	ldr	r3, [r7, #32]
 800f26a:	3301      	adds	r3, #1
 800f26c:	623b      	str	r3, [r7, #32]
      pDest++;
 800f26e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f270:	3301      	adds	r3, #1
 800f272:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800f274:	8bfb      	ldrh	r3, [r7, #30]
 800f276:	3b01      	subs	r3, #1
 800f278:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800f27a:	8bfb      	ldrh	r3, [r7, #30]
 800f27c:	2b00      	cmp	r3, #0
 800f27e:	d1ea      	bne.n	800f256 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800f280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800f282:	4618      	mov	r0, r3
 800f284:	372c      	adds	r7, #44	; 0x2c
 800f286:	46bd      	mov	sp, r7
 800f288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f28c:	4770      	bx	lr

0800f28e <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800f28e:	b480      	push	{r7}
 800f290:	b085      	sub	sp, #20
 800f292:	af00      	add	r7, sp, #0
 800f294:	6078      	str	r0, [r7, #4]
 800f296:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f298:	687b      	ldr	r3, [r7, #4]
 800f29a:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800f29c:	683b      	ldr	r3, [r7, #0]
 800f29e:	781b      	ldrb	r3, [r3, #0]
 800f2a0:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800f2a2:	683b      	ldr	r3, [r7, #0]
 800f2a4:	785b      	ldrb	r3, [r3, #1]
 800f2a6:	2b01      	cmp	r3, #1
 800f2a8:	d12c      	bne.n	800f304 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800f2aa:	68bb      	ldr	r3, [r7, #8]
 800f2ac:	015a      	lsls	r2, r3, #5
 800f2ae:	68fb      	ldr	r3, [r7, #12]
 800f2b0:	4413      	add	r3, r2
 800f2b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f2b6:	681b      	ldr	r3, [r3, #0]
 800f2b8:	2b00      	cmp	r3, #0
 800f2ba:	db12      	blt.n	800f2e2 <USB_EPSetStall+0x54>
 800f2bc:	68bb      	ldr	r3, [r7, #8]
 800f2be:	2b00      	cmp	r3, #0
 800f2c0:	d00f      	beq.n	800f2e2 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800f2c2:	68bb      	ldr	r3, [r7, #8]
 800f2c4:	015a      	lsls	r2, r3, #5
 800f2c6:	68fb      	ldr	r3, [r7, #12]
 800f2c8:	4413      	add	r3, r2
 800f2ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f2ce:	681b      	ldr	r3, [r3, #0]
 800f2d0:	68ba      	ldr	r2, [r7, #8]
 800f2d2:	0151      	lsls	r1, r2, #5
 800f2d4:	68fa      	ldr	r2, [r7, #12]
 800f2d6:	440a      	add	r2, r1
 800f2d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f2dc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800f2e0:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800f2e2:	68bb      	ldr	r3, [r7, #8]
 800f2e4:	015a      	lsls	r2, r3, #5
 800f2e6:	68fb      	ldr	r3, [r7, #12]
 800f2e8:	4413      	add	r3, r2
 800f2ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f2ee:	681b      	ldr	r3, [r3, #0]
 800f2f0:	68ba      	ldr	r2, [r7, #8]
 800f2f2:	0151      	lsls	r1, r2, #5
 800f2f4:	68fa      	ldr	r2, [r7, #12]
 800f2f6:	440a      	add	r2, r1
 800f2f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f2fc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800f300:	6013      	str	r3, [r2, #0]
 800f302:	e02b      	b.n	800f35c <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800f304:	68bb      	ldr	r3, [r7, #8]
 800f306:	015a      	lsls	r2, r3, #5
 800f308:	68fb      	ldr	r3, [r7, #12]
 800f30a:	4413      	add	r3, r2
 800f30c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f310:	681b      	ldr	r3, [r3, #0]
 800f312:	2b00      	cmp	r3, #0
 800f314:	db12      	blt.n	800f33c <USB_EPSetStall+0xae>
 800f316:	68bb      	ldr	r3, [r7, #8]
 800f318:	2b00      	cmp	r3, #0
 800f31a:	d00f      	beq.n	800f33c <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800f31c:	68bb      	ldr	r3, [r7, #8]
 800f31e:	015a      	lsls	r2, r3, #5
 800f320:	68fb      	ldr	r3, [r7, #12]
 800f322:	4413      	add	r3, r2
 800f324:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f328:	681b      	ldr	r3, [r3, #0]
 800f32a:	68ba      	ldr	r2, [r7, #8]
 800f32c:	0151      	lsls	r1, r2, #5
 800f32e:	68fa      	ldr	r2, [r7, #12]
 800f330:	440a      	add	r2, r1
 800f332:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f336:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800f33a:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800f33c:	68bb      	ldr	r3, [r7, #8]
 800f33e:	015a      	lsls	r2, r3, #5
 800f340:	68fb      	ldr	r3, [r7, #12]
 800f342:	4413      	add	r3, r2
 800f344:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f348:	681b      	ldr	r3, [r3, #0]
 800f34a:	68ba      	ldr	r2, [r7, #8]
 800f34c:	0151      	lsls	r1, r2, #5
 800f34e:	68fa      	ldr	r2, [r7, #12]
 800f350:	440a      	add	r2, r1
 800f352:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f356:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800f35a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800f35c:	2300      	movs	r3, #0
}
 800f35e:	4618      	mov	r0, r3
 800f360:	3714      	adds	r7, #20
 800f362:	46bd      	mov	sp, r7
 800f364:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f368:	4770      	bx	lr

0800f36a <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800f36a:	b480      	push	{r7}
 800f36c:	b085      	sub	sp, #20
 800f36e:	af00      	add	r7, sp, #0
 800f370:	6078      	str	r0, [r7, #4]
 800f372:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f374:	687b      	ldr	r3, [r7, #4]
 800f376:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800f378:	683b      	ldr	r3, [r7, #0]
 800f37a:	781b      	ldrb	r3, [r3, #0]
 800f37c:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800f37e:	683b      	ldr	r3, [r7, #0]
 800f380:	785b      	ldrb	r3, [r3, #1]
 800f382:	2b01      	cmp	r3, #1
 800f384:	d128      	bne.n	800f3d8 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800f386:	68bb      	ldr	r3, [r7, #8]
 800f388:	015a      	lsls	r2, r3, #5
 800f38a:	68fb      	ldr	r3, [r7, #12]
 800f38c:	4413      	add	r3, r2
 800f38e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f392:	681b      	ldr	r3, [r3, #0]
 800f394:	68ba      	ldr	r2, [r7, #8]
 800f396:	0151      	lsls	r1, r2, #5
 800f398:	68fa      	ldr	r2, [r7, #12]
 800f39a:	440a      	add	r2, r1
 800f39c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f3a0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800f3a4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800f3a6:	683b      	ldr	r3, [r7, #0]
 800f3a8:	78db      	ldrb	r3, [r3, #3]
 800f3aa:	2b03      	cmp	r3, #3
 800f3ac:	d003      	beq.n	800f3b6 <USB_EPClearStall+0x4c>
 800f3ae:	683b      	ldr	r3, [r7, #0]
 800f3b0:	78db      	ldrb	r3, [r3, #3]
 800f3b2:	2b02      	cmp	r3, #2
 800f3b4:	d138      	bne.n	800f428 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800f3b6:	68bb      	ldr	r3, [r7, #8]
 800f3b8:	015a      	lsls	r2, r3, #5
 800f3ba:	68fb      	ldr	r3, [r7, #12]
 800f3bc:	4413      	add	r3, r2
 800f3be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f3c2:	681b      	ldr	r3, [r3, #0]
 800f3c4:	68ba      	ldr	r2, [r7, #8]
 800f3c6:	0151      	lsls	r1, r2, #5
 800f3c8:	68fa      	ldr	r2, [r7, #12]
 800f3ca:	440a      	add	r2, r1
 800f3cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f3d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f3d4:	6013      	str	r3, [r2, #0]
 800f3d6:	e027      	b.n	800f428 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800f3d8:	68bb      	ldr	r3, [r7, #8]
 800f3da:	015a      	lsls	r2, r3, #5
 800f3dc:	68fb      	ldr	r3, [r7, #12]
 800f3de:	4413      	add	r3, r2
 800f3e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f3e4:	681b      	ldr	r3, [r3, #0]
 800f3e6:	68ba      	ldr	r2, [r7, #8]
 800f3e8:	0151      	lsls	r1, r2, #5
 800f3ea:	68fa      	ldr	r2, [r7, #12]
 800f3ec:	440a      	add	r2, r1
 800f3ee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f3f2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800f3f6:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800f3f8:	683b      	ldr	r3, [r7, #0]
 800f3fa:	78db      	ldrb	r3, [r3, #3]
 800f3fc:	2b03      	cmp	r3, #3
 800f3fe:	d003      	beq.n	800f408 <USB_EPClearStall+0x9e>
 800f400:	683b      	ldr	r3, [r7, #0]
 800f402:	78db      	ldrb	r3, [r3, #3]
 800f404:	2b02      	cmp	r3, #2
 800f406:	d10f      	bne.n	800f428 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800f408:	68bb      	ldr	r3, [r7, #8]
 800f40a:	015a      	lsls	r2, r3, #5
 800f40c:	68fb      	ldr	r3, [r7, #12]
 800f40e:	4413      	add	r3, r2
 800f410:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f414:	681b      	ldr	r3, [r3, #0]
 800f416:	68ba      	ldr	r2, [r7, #8]
 800f418:	0151      	lsls	r1, r2, #5
 800f41a:	68fa      	ldr	r2, [r7, #12]
 800f41c:	440a      	add	r2, r1
 800f41e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f422:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f426:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800f428:	2300      	movs	r3, #0
}
 800f42a:	4618      	mov	r0, r3
 800f42c:	3714      	adds	r7, #20
 800f42e:	46bd      	mov	sp, r7
 800f430:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f434:	4770      	bx	lr

0800f436 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800f436:	b480      	push	{r7}
 800f438:	b085      	sub	sp, #20
 800f43a:	af00      	add	r7, sp, #0
 800f43c:	6078      	str	r0, [r7, #4]
 800f43e:	460b      	mov	r3, r1
 800f440:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f442:	687b      	ldr	r3, [r7, #4]
 800f444:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800f446:	68fb      	ldr	r3, [r7, #12]
 800f448:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f44c:	681b      	ldr	r3, [r3, #0]
 800f44e:	68fa      	ldr	r2, [r7, #12]
 800f450:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f454:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800f458:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800f45a:	68fb      	ldr	r3, [r7, #12]
 800f45c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f460:	681a      	ldr	r2, [r3, #0]
 800f462:	78fb      	ldrb	r3, [r7, #3]
 800f464:	011b      	lsls	r3, r3, #4
 800f466:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800f46a:	68f9      	ldr	r1, [r7, #12]
 800f46c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f470:	4313      	orrs	r3, r2
 800f472:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800f474:	2300      	movs	r3, #0
}
 800f476:	4618      	mov	r0, r3
 800f478:	3714      	adds	r7, #20
 800f47a:	46bd      	mov	sp, r7
 800f47c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f480:	4770      	bx	lr

0800f482 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800f482:	b480      	push	{r7}
 800f484:	b085      	sub	sp, #20
 800f486:	af00      	add	r7, sp, #0
 800f488:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f48a:	687b      	ldr	r3, [r7, #4]
 800f48c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800f48e:	68fb      	ldr	r3, [r7, #12]
 800f490:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800f494:	681b      	ldr	r3, [r3, #0]
 800f496:	68fa      	ldr	r2, [r7, #12]
 800f498:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800f49c:	f023 0303 	bic.w	r3, r3, #3
 800f4a0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800f4a2:	68fb      	ldr	r3, [r7, #12]
 800f4a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f4a8:	685b      	ldr	r3, [r3, #4]
 800f4aa:	68fa      	ldr	r2, [r7, #12]
 800f4ac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f4b0:	f023 0302 	bic.w	r3, r3, #2
 800f4b4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800f4b6:	2300      	movs	r3, #0
}
 800f4b8:	4618      	mov	r0, r3
 800f4ba:	3714      	adds	r7, #20
 800f4bc:	46bd      	mov	sp, r7
 800f4be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4c2:	4770      	bx	lr

0800f4c4 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800f4c4:	b480      	push	{r7}
 800f4c6:	b085      	sub	sp, #20
 800f4c8:	af00      	add	r7, sp, #0
 800f4ca:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f4cc:	687b      	ldr	r3, [r7, #4]
 800f4ce:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800f4d0:	68fb      	ldr	r3, [r7, #12]
 800f4d2:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800f4d6:	681b      	ldr	r3, [r3, #0]
 800f4d8:	68fa      	ldr	r2, [r7, #12]
 800f4da:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800f4de:	f023 0303 	bic.w	r3, r3, #3
 800f4e2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800f4e4:	68fb      	ldr	r3, [r7, #12]
 800f4e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f4ea:	685b      	ldr	r3, [r3, #4]
 800f4ec:	68fa      	ldr	r2, [r7, #12]
 800f4ee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f4f2:	f043 0302 	orr.w	r3, r3, #2
 800f4f6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800f4f8:	2300      	movs	r3, #0
}
 800f4fa:	4618      	mov	r0, r3
 800f4fc:	3714      	adds	r7, #20
 800f4fe:	46bd      	mov	sp, r7
 800f500:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f504:	4770      	bx	lr

0800f506 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800f506:	b480      	push	{r7}
 800f508:	b085      	sub	sp, #20
 800f50a:	af00      	add	r7, sp, #0
 800f50c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800f50e:	687b      	ldr	r3, [r7, #4]
 800f510:	695b      	ldr	r3, [r3, #20]
 800f512:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800f514:	687b      	ldr	r3, [r7, #4]
 800f516:	699b      	ldr	r3, [r3, #24]
 800f518:	68fa      	ldr	r2, [r7, #12]
 800f51a:	4013      	ands	r3, r2
 800f51c:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800f51e:	68fb      	ldr	r3, [r7, #12]
}
 800f520:	4618      	mov	r0, r3
 800f522:	3714      	adds	r7, #20
 800f524:	46bd      	mov	sp, r7
 800f526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f52a:	4770      	bx	lr

0800f52c <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800f52c:	b480      	push	{r7}
 800f52e:	b085      	sub	sp, #20
 800f530:	af00      	add	r7, sp, #0
 800f532:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f534:	687b      	ldr	r3, [r7, #4]
 800f536:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800f538:	68fb      	ldr	r3, [r7, #12]
 800f53a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f53e:	699b      	ldr	r3, [r3, #24]
 800f540:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800f542:	68fb      	ldr	r3, [r7, #12]
 800f544:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f548:	69db      	ldr	r3, [r3, #28]
 800f54a:	68ba      	ldr	r2, [r7, #8]
 800f54c:	4013      	ands	r3, r2
 800f54e:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800f550:	68bb      	ldr	r3, [r7, #8]
 800f552:	0c1b      	lsrs	r3, r3, #16
}
 800f554:	4618      	mov	r0, r3
 800f556:	3714      	adds	r7, #20
 800f558:	46bd      	mov	sp, r7
 800f55a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f55e:	4770      	bx	lr

0800f560 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800f560:	b480      	push	{r7}
 800f562:	b085      	sub	sp, #20
 800f564:	af00      	add	r7, sp, #0
 800f566:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f568:	687b      	ldr	r3, [r7, #4]
 800f56a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800f56c:	68fb      	ldr	r3, [r7, #12]
 800f56e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f572:	699b      	ldr	r3, [r3, #24]
 800f574:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800f576:	68fb      	ldr	r3, [r7, #12]
 800f578:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f57c:	69db      	ldr	r3, [r3, #28]
 800f57e:	68ba      	ldr	r2, [r7, #8]
 800f580:	4013      	ands	r3, r2
 800f582:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800f584:	68bb      	ldr	r3, [r7, #8]
 800f586:	b29b      	uxth	r3, r3
}
 800f588:	4618      	mov	r0, r3
 800f58a:	3714      	adds	r7, #20
 800f58c:	46bd      	mov	sp, r7
 800f58e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f592:	4770      	bx	lr

0800f594 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800f594:	b480      	push	{r7}
 800f596:	b085      	sub	sp, #20
 800f598:	af00      	add	r7, sp, #0
 800f59a:	6078      	str	r0, [r7, #4]
 800f59c:	460b      	mov	r3, r1
 800f59e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f5a0:	687b      	ldr	r3, [r7, #4]
 800f5a2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800f5a4:	78fb      	ldrb	r3, [r7, #3]
 800f5a6:	015a      	lsls	r2, r3, #5
 800f5a8:	68fb      	ldr	r3, [r7, #12]
 800f5aa:	4413      	add	r3, r2
 800f5ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f5b0:	689b      	ldr	r3, [r3, #8]
 800f5b2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800f5b4:	68fb      	ldr	r3, [r7, #12]
 800f5b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f5ba:	695b      	ldr	r3, [r3, #20]
 800f5bc:	68ba      	ldr	r2, [r7, #8]
 800f5be:	4013      	ands	r3, r2
 800f5c0:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800f5c2:	68bb      	ldr	r3, [r7, #8]
}
 800f5c4:	4618      	mov	r0, r3
 800f5c6:	3714      	adds	r7, #20
 800f5c8:	46bd      	mov	sp, r7
 800f5ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5ce:	4770      	bx	lr

0800f5d0 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800f5d0:	b480      	push	{r7}
 800f5d2:	b087      	sub	sp, #28
 800f5d4:	af00      	add	r7, sp, #0
 800f5d6:	6078      	str	r0, [r7, #4]
 800f5d8:	460b      	mov	r3, r1
 800f5da:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f5dc:	687b      	ldr	r3, [r7, #4]
 800f5de:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800f5e0:	697b      	ldr	r3, [r7, #20]
 800f5e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f5e6:	691b      	ldr	r3, [r3, #16]
 800f5e8:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800f5ea:	697b      	ldr	r3, [r7, #20]
 800f5ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f5f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f5f2:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800f5f4:	78fb      	ldrb	r3, [r7, #3]
 800f5f6:	f003 030f 	and.w	r3, r3, #15
 800f5fa:	68fa      	ldr	r2, [r7, #12]
 800f5fc:	fa22 f303 	lsr.w	r3, r2, r3
 800f600:	01db      	lsls	r3, r3, #7
 800f602:	b2db      	uxtb	r3, r3
 800f604:	693a      	ldr	r2, [r7, #16]
 800f606:	4313      	orrs	r3, r2
 800f608:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800f60a:	78fb      	ldrb	r3, [r7, #3]
 800f60c:	015a      	lsls	r2, r3, #5
 800f60e:	697b      	ldr	r3, [r7, #20]
 800f610:	4413      	add	r3, r2
 800f612:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f616:	689b      	ldr	r3, [r3, #8]
 800f618:	693a      	ldr	r2, [r7, #16]
 800f61a:	4013      	ands	r3, r2
 800f61c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800f61e:	68bb      	ldr	r3, [r7, #8]
}
 800f620:	4618      	mov	r0, r3
 800f622:	371c      	adds	r7, #28
 800f624:	46bd      	mov	sp, r7
 800f626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f62a:	4770      	bx	lr

0800f62c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800f62c:	b480      	push	{r7}
 800f62e:	b083      	sub	sp, #12
 800f630:	af00      	add	r7, sp, #0
 800f632:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800f634:	687b      	ldr	r3, [r7, #4]
 800f636:	695b      	ldr	r3, [r3, #20]
 800f638:	f003 0301 	and.w	r3, r3, #1
}
 800f63c:	4618      	mov	r0, r3
 800f63e:	370c      	adds	r7, #12
 800f640:	46bd      	mov	sp, r7
 800f642:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f646:	4770      	bx	lr

0800f648 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800f648:	b480      	push	{r7}
 800f64a:	b085      	sub	sp, #20
 800f64c:	af00      	add	r7, sp, #0
 800f64e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f650:	687b      	ldr	r3, [r7, #4]
 800f652:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800f654:	68fb      	ldr	r3, [r7, #12]
 800f656:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f65a:	681b      	ldr	r3, [r3, #0]
 800f65c:	68fa      	ldr	r2, [r7, #12]
 800f65e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f662:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800f666:	f023 0307 	bic.w	r3, r3, #7
 800f66a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800f66c:	68fb      	ldr	r3, [r7, #12]
 800f66e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f672:	685b      	ldr	r3, [r3, #4]
 800f674:	68fa      	ldr	r2, [r7, #12]
 800f676:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f67a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800f67e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800f680:	2300      	movs	r3, #0
}
 800f682:	4618      	mov	r0, r3
 800f684:	3714      	adds	r7, #20
 800f686:	46bd      	mov	sp, r7
 800f688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f68c:	4770      	bx	lr
	...

0800f690 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800f690:	b480      	push	{r7}
 800f692:	b087      	sub	sp, #28
 800f694:	af00      	add	r7, sp, #0
 800f696:	60f8      	str	r0, [r7, #12]
 800f698:	460b      	mov	r3, r1
 800f69a:	607a      	str	r2, [r7, #4]
 800f69c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f69e:	68fb      	ldr	r3, [r7, #12]
 800f6a0:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800f6a2:	68fb      	ldr	r3, [r7, #12]
 800f6a4:	333c      	adds	r3, #60	; 0x3c
 800f6a6:	3304      	adds	r3, #4
 800f6a8:	681b      	ldr	r3, [r3, #0]
 800f6aa:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800f6ac:	693b      	ldr	r3, [r7, #16]
 800f6ae:	4a26      	ldr	r2, [pc, #152]	; (800f748 <USB_EP0_OutStart+0xb8>)
 800f6b0:	4293      	cmp	r3, r2
 800f6b2:	d90a      	bls.n	800f6ca <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800f6b4:	697b      	ldr	r3, [r7, #20]
 800f6b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f6ba:	681b      	ldr	r3, [r3, #0]
 800f6bc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800f6c0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800f6c4:	d101      	bne.n	800f6ca <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800f6c6:	2300      	movs	r3, #0
 800f6c8:	e037      	b.n	800f73a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800f6ca:	697b      	ldr	r3, [r7, #20]
 800f6cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f6d0:	461a      	mov	r2, r3
 800f6d2:	2300      	movs	r3, #0
 800f6d4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800f6d6:	697b      	ldr	r3, [r7, #20]
 800f6d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f6dc:	691b      	ldr	r3, [r3, #16]
 800f6de:	697a      	ldr	r2, [r7, #20]
 800f6e0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f6e4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800f6e8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800f6ea:	697b      	ldr	r3, [r7, #20]
 800f6ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f6f0:	691b      	ldr	r3, [r3, #16]
 800f6f2:	697a      	ldr	r2, [r7, #20]
 800f6f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f6f8:	f043 0318 	orr.w	r3, r3, #24
 800f6fc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800f6fe:	697b      	ldr	r3, [r7, #20]
 800f700:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f704:	691b      	ldr	r3, [r3, #16]
 800f706:	697a      	ldr	r2, [r7, #20]
 800f708:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f70c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800f710:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800f712:	7afb      	ldrb	r3, [r7, #11]
 800f714:	2b01      	cmp	r3, #1
 800f716:	d10f      	bne.n	800f738 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800f718:	697b      	ldr	r3, [r7, #20]
 800f71a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f71e:	461a      	mov	r2, r3
 800f720:	687b      	ldr	r3, [r7, #4]
 800f722:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800f724:	697b      	ldr	r3, [r7, #20]
 800f726:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f72a:	681b      	ldr	r3, [r3, #0]
 800f72c:	697a      	ldr	r2, [r7, #20]
 800f72e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f732:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800f736:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800f738:	2300      	movs	r3, #0
}
 800f73a:	4618      	mov	r0, r3
 800f73c:	371c      	adds	r7, #28
 800f73e:	46bd      	mov	sp, r7
 800f740:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f744:	4770      	bx	lr
 800f746:	bf00      	nop
 800f748:	4f54300a 	.word	0x4f54300a

0800f74c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800f74c:	b480      	push	{r7}
 800f74e:	b085      	sub	sp, #20
 800f750:	af00      	add	r7, sp, #0
 800f752:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800f754:	2300      	movs	r3, #0
 800f756:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800f758:	68fb      	ldr	r3, [r7, #12]
 800f75a:	3301      	adds	r3, #1
 800f75c:	60fb      	str	r3, [r7, #12]
 800f75e:	4a13      	ldr	r2, [pc, #76]	; (800f7ac <USB_CoreReset+0x60>)
 800f760:	4293      	cmp	r3, r2
 800f762:	d901      	bls.n	800f768 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 800f764:	2303      	movs	r3, #3
 800f766:	e01a      	b.n	800f79e <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800f768:	687b      	ldr	r3, [r7, #4]
 800f76a:	691b      	ldr	r3, [r3, #16]
 800f76c:	2b00      	cmp	r3, #0
 800f76e:	daf3      	bge.n	800f758 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800f770:	2300      	movs	r3, #0
 800f772:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800f774:	687b      	ldr	r3, [r7, #4]
 800f776:	691b      	ldr	r3, [r3, #16]
 800f778:	f043 0201 	orr.w	r2, r3, #1
 800f77c:	687b      	ldr	r3, [r7, #4]
 800f77e:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800f780:	68fb      	ldr	r3, [r7, #12]
 800f782:	3301      	adds	r3, #1
 800f784:	60fb      	str	r3, [r7, #12]
 800f786:	4a09      	ldr	r2, [pc, #36]	; (800f7ac <USB_CoreReset+0x60>)
 800f788:	4293      	cmp	r3, r2
 800f78a:	d901      	bls.n	800f790 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 800f78c:	2303      	movs	r3, #3
 800f78e:	e006      	b.n	800f79e <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800f790:	687b      	ldr	r3, [r7, #4]
 800f792:	691b      	ldr	r3, [r3, #16]
 800f794:	f003 0301 	and.w	r3, r3, #1
 800f798:	2b01      	cmp	r3, #1
 800f79a:	d0f1      	beq.n	800f780 <USB_CoreReset+0x34>

  return HAL_OK;
 800f79c:	2300      	movs	r3, #0
}
 800f79e:	4618      	mov	r0, r3
 800f7a0:	3714      	adds	r7, #20
 800f7a2:	46bd      	mov	sp, r7
 800f7a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7a8:	4770      	bx	lr
 800f7aa:	bf00      	nop
 800f7ac:	00030d40 	.word	0x00030d40

0800f7b0 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800f7b0:	b580      	push	{r7, lr}
 800f7b2:	b084      	sub	sp, #16
 800f7b4:	af00      	add	r7, sp, #0
 800f7b6:	6078      	str	r0, [r7, #4]
 800f7b8:	460b      	mov	r3, r1
 800f7ba:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800f7bc:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800f7c0:	f002 fa90 	bl	8011ce4 <USBD_static_malloc>
 800f7c4:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800f7c6:	68fb      	ldr	r3, [r7, #12]
 800f7c8:	2b00      	cmp	r3, #0
 800f7ca:	d105      	bne.n	800f7d8 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800f7cc:	687b      	ldr	r3, [r7, #4]
 800f7ce:	2200      	movs	r2, #0
 800f7d0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800f7d4:	2302      	movs	r3, #2
 800f7d6:	e066      	b.n	800f8a6 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800f7d8:	687b      	ldr	r3, [r7, #4]
 800f7da:	68fa      	ldr	r2, [r7, #12]
 800f7dc:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f7e0:	687b      	ldr	r3, [r7, #4]
 800f7e2:	7c1b      	ldrb	r3, [r3, #16]
 800f7e4:	2b00      	cmp	r3, #0
 800f7e6:	d119      	bne.n	800f81c <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800f7e8:	f44f 7300 	mov.w	r3, #512	; 0x200
 800f7ec:	2202      	movs	r2, #2
 800f7ee:	2181      	movs	r1, #129	; 0x81
 800f7f0:	6878      	ldr	r0, [r7, #4]
 800f7f2:	f002 f954 	bl	8011a9e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800f7f6:	687b      	ldr	r3, [r7, #4]
 800f7f8:	2201      	movs	r2, #1
 800f7fa:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800f7fc:	f44f 7300 	mov.w	r3, #512	; 0x200
 800f800:	2202      	movs	r2, #2
 800f802:	2101      	movs	r1, #1
 800f804:	6878      	ldr	r0, [r7, #4]
 800f806:	f002 f94a 	bl	8011a9e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800f80a:	687b      	ldr	r3, [r7, #4]
 800f80c:	2201      	movs	r2, #1
 800f80e:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800f812:	687b      	ldr	r3, [r7, #4]
 800f814:	2210      	movs	r2, #16
 800f816:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800f81a:	e016      	b.n	800f84a <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800f81c:	2340      	movs	r3, #64	; 0x40
 800f81e:	2202      	movs	r2, #2
 800f820:	2181      	movs	r1, #129	; 0x81
 800f822:	6878      	ldr	r0, [r7, #4]
 800f824:	f002 f93b 	bl	8011a9e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800f828:	687b      	ldr	r3, [r7, #4]
 800f82a:	2201      	movs	r2, #1
 800f82c:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800f82e:	2340      	movs	r3, #64	; 0x40
 800f830:	2202      	movs	r2, #2
 800f832:	2101      	movs	r1, #1
 800f834:	6878      	ldr	r0, [r7, #4]
 800f836:	f002 f932 	bl	8011a9e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800f83a:	687b      	ldr	r3, [r7, #4]
 800f83c:	2201      	movs	r2, #1
 800f83e:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800f842:	687b      	ldr	r3, [r7, #4]
 800f844:	2210      	movs	r2, #16
 800f846:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800f84a:	2308      	movs	r3, #8
 800f84c:	2203      	movs	r2, #3
 800f84e:	2182      	movs	r1, #130	; 0x82
 800f850:	6878      	ldr	r0, [r7, #4]
 800f852:	f002 f924 	bl	8011a9e <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800f856:	687b      	ldr	r3, [r7, #4]
 800f858:	2201      	movs	r2, #1
 800f85a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800f85e:	687b      	ldr	r3, [r7, #4]
 800f860:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800f864:	681b      	ldr	r3, [r3, #0]
 800f866:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800f868:	68fb      	ldr	r3, [r7, #12]
 800f86a:	2200      	movs	r2, #0
 800f86c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800f870:	68fb      	ldr	r3, [r7, #12]
 800f872:	2200      	movs	r2, #0
 800f874:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f878:	687b      	ldr	r3, [r7, #4]
 800f87a:	7c1b      	ldrb	r3, [r3, #16]
 800f87c:	2b00      	cmp	r3, #0
 800f87e:	d109      	bne.n	800f894 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800f880:	68fb      	ldr	r3, [r7, #12]
 800f882:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800f886:	f44f 7300 	mov.w	r3, #512	; 0x200
 800f88a:	2101      	movs	r1, #1
 800f88c:	6878      	ldr	r0, [r7, #4]
 800f88e:	f002 f9f5 	bl	8011c7c <USBD_LL_PrepareReceive>
 800f892:	e007      	b.n	800f8a4 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800f894:	68fb      	ldr	r3, [r7, #12]
 800f896:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800f89a:	2340      	movs	r3, #64	; 0x40
 800f89c:	2101      	movs	r1, #1
 800f89e:	6878      	ldr	r0, [r7, #4]
 800f8a0:	f002 f9ec 	bl	8011c7c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800f8a4:	2300      	movs	r3, #0
}
 800f8a6:	4618      	mov	r0, r3
 800f8a8:	3710      	adds	r7, #16
 800f8aa:	46bd      	mov	sp, r7
 800f8ac:	bd80      	pop	{r7, pc}

0800f8ae <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800f8ae:	b580      	push	{r7, lr}
 800f8b0:	b082      	sub	sp, #8
 800f8b2:	af00      	add	r7, sp, #0
 800f8b4:	6078      	str	r0, [r7, #4]
 800f8b6:	460b      	mov	r3, r1
 800f8b8:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800f8ba:	2181      	movs	r1, #129	; 0x81
 800f8bc:	6878      	ldr	r0, [r7, #4]
 800f8be:	f002 f914 	bl	8011aea <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800f8c2:	687b      	ldr	r3, [r7, #4]
 800f8c4:	2200      	movs	r2, #0
 800f8c6:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800f8c8:	2101      	movs	r1, #1
 800f8ca:	6878      	ldr	r0, [r7, #4]
 800f8cc:	f002 f90d 	bl	8011aea <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800f8d0:	687b      	ldr	r3, [r7, #4]
 800f8d2:	2200      	movs	r2, #0
 800f8d4:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800f8d8:	2182      	movs	r1, #130	; 0x82
 800f8da:	6878      	ldr	r0, [r7, #4]
 800f8dc:	f002 f905 	bl	8011aea <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800f8e0:	687b      	ldr	r3, [r7, #4]
 800f8e2:	2200      	movs	r2, #0
 800f8e4:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800f8e8:	687b      	ldr	r3, [r7, #4]
 800f8ea:	2200      	movs	r2, #0
 800f8ec:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800f8f0:	687b      	ldr	r3, [r7, #4]
 800f8f2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f8f6:	2b00      	cmp	r3, #0
 800f8f8:	d00e      	beq.n	800f918 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800f8fa:	687b      	ldr	r3, [r7, #4]
 800f8fc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800f900:	685b      	ldr	r3, [r3, #4]
 800f902:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800f904:	687b      	ldr	r3, [r7, #4]
 800f906:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f90a:	4618      	mov	r0, r3
 800f90c:	f002 f9f8 	bl	8011d00 <USBD_static_free>
    pdev->pClassData = NULL;
 800f910:	687b      	ldr	r3, [r7, #4]
 800f912:	2200      	movs	r2, #0
 800f914:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800f918:	2300      	movs	r3, #0
}
 800f91a:	4618      	mov	r0, r3
 800f91c:	3708      	adds	r7, #8
 800f91e:	46bd      	mov	sp, r7
 800f920:	bd80      	pop	{r7, pc}
	...

0800f924 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800f924:	b580      	push	{r7, lr}
 800f926:	b086      	sub	sp, #24
 800f928:	af00      	add	r7, sp, #0
 800f92a:	6078      	str	r0, [r7, #4]
 800f92c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800f92e:	687b      	ldr	r3, [r7, #4]
 800f930:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f934:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800f936:	2300      	movs	r3, #0
 800f938:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800f93a:	2300      	movs	r3, #0
 800f93c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800f93e:	2300      	movs	r3, #0
 800f940:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800f942:	693b      	ldr	r3, [r7, #16]
 800f944:	2b00      	cmp	r3, #0
 800f946:	d101      	bne.n	800f94c <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800f948:	2303      	movs	r3, #3
 800f94a:	e0af      	b.n	800faac <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f94c:	683b      	ldr	r3, [r7, #0]
 800f94e:	781b      	ldrb	r3, [r3, #0]
 800f950:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800f954:	2b00      	cmp	r3, #0
 800f956:	d03f      	beq.n	800f9d8 <USBD_CDC_Setup+0xb4>
 800f958:	2b20      	cmp	r3, #32
 800f95a:	f040 809f 	bne.w	800fa9c <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800f95e:	683b      	ldr	r3, [r7, #0]
 800f960:	88db      	ldrh	r3, [r3, #6]
 800f962:	2b00      	cmp	r3, #0
 800f964:	d02e      	beq.n	800f9c4 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800f966:	683b      	ldr	r3, [r7, #0]
 800f968:	781b      	ldrb	r3, [r3, #0]
 800f96a:	b25b      	sxtb	r3, r3
 800f96c:	2b00      	cmp	r3, #0
 800f96e:	da16      	bge.n	800f99e <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800f970:	687b      	ldr	r3, [r7, #4]
 800f972:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800f976:	689b      	ldr	r3, [r3, #8]
 800f978:	683a      	ldr	r2, [r7, #0]
 800f97a:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800f97c:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800f97e:	683a      	ldr	r2, [r7, #0]
 800f980:	88d2      	ldrh	r2, [r2, #6]
 800f982:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800f984:	683b      	ldr	r3, [r7, #0]
 800f986:	88db      	ldrh	r3, [r3, #6]
 800f988:	2b07      	cmp	r3, #7
 800f98a:	bf28      	it	cs
 800f98c:	2307      	movcs	r3, #7
 800f98e:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800f990:	693b      	ldr	r3, [r7, #16]
 800f992:	89fa      	ldrh	r2, [r7, #14]
 800f994:	4619      	mov	r1, r3
 800f996:	6878      	ldr	r0, [r7, #4]
 800f998:	f001 fb19 	bl	8010fce <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800f99c:	e085      	b.n	800faaa <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800f99e:	683b      	ldr	r3, [r7, #0]
 800f9a0:	785a      	ldrb	r2, [r3, #1]
 800f9a2:	693b      	ldr	r3, [r7, #16]
 800f9a4:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800f9a8:	683b      	ldr	r3, [r7, #0]
 800f9aa:	88db      	ldrh	r3, [r3, #6]
 800f9ac:	b2da      	uxtb	r2, r3
 800f9ae:	693b      	ldr	r3, [r7, #16]
 800f9b0:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800f9b4:	6939      	ldr	r1, [r7, #16]
 800f9b6:	683b      	ldr	r3, [r7, #0]
 800f9b8:	88db      	ldrh	r3, [r3, #6]
 800f9ba:	461a      	mov	r2, r3
 800f9bc:	6878      	ldr	r0, [r7, #4]
 800f9be:	f001 fb32 	bl	8011026 <USBD_CtlPrepareRx>
      break;
 800f9c2:	e072      	b.n	800faaa <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800f9c4:	687b      	ldr	r3, [r7, #4]
 800f9c6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800f9ca:	689b      	ldr	r3, [r3, #8]
 800f9cc:	683a      	ldr	r2, [r7, #0]
 800f9ce:	7850      	ldrb	r0, [r2, #1]
 800f9d0:	2200      	movs	r2, #0
 800f9d2:	6839      	ldr	r1, [r7, #0]
 800f9d4:	4798      	blx	r3
      break;
 800f9d6:	e068      	b.n	800faaa <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800f9d8:	683b      	ldr	r3, [r7, #0]
 800f9da:	785b      	ldrb	r3, [r3, #1]
 800f9dc:	2b0b      	cmp	r3, #11
 800f9de:	d852      	bhi.n	800fa86 <USBD_CDC_Setup+0x162>
 800f9e0:	a201      	add	r2, pc, #4	; (adr r2, 800f9e8 <USBD_CDC_Setup+0xc4>)
 800f9e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f9e6:	bf00      	nop
 800f9e8:	0800fa19 	.word	0x0800fa19
 800f9ec:	0800fa95 	.word	0x0800fa95
 800f9f0:	0800fa87 	.word	0x0800fa87
 800f9f4:	0800fa87 	.word	0x0800fa87
 800f9f8:	0800fa87 	.word	0x0800fa87
 800f9fc:	0800fa87 	.word	0x0800fa87
 800fa00:	0800fa87 	.word	0x0800fa87
 800fa04:	0800fa87 	.word	0x0800fa87
 800fa08:	0800fa87 	.word	0x0800fa87
 800fa0c:	0800fa87 	.word	0x0800fa87
 800fa10:	0800fa43 	.word	0x0800fa43
 800fa14:	0800fa6d 	.word	0x0800fa6d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fa18:	687b      	ldr	r3, [r7, #4]
 800fa1a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fa1e:	b2db      	uxtb	r3, r3
 800fa20:	2b03      	cmp	r3, #3
 800fa22:	d107      	bne.n	800fa34 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800fa24:	f107 030a 	add.w	r3, r7, #10
 800fa28:	2202      	movs	r2, #2
 800fa2a:	4619      	mov	r1, r3
 800fa2c:	6878      	ldr	r0, [r7, #4]
 800fa2e:	f001 face 	bl	8010fce <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800fa32:	e032      	b.n	800fa9a <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800fa34:	6839      	ldr	r1, [r7, #0]
 800fa36:	6878      	ldr	r0, [r7, #4]
 800fa38:	f001 fa58 	bl	8010eec <USBD_CtlError>
            ret = USBD_FAIL;
 800fa3c:	2303      	movs	r3, #3
 800fa3e:	75fb      	strb	r3, [r7, #23]
          break;
 800fa40:	e02b      	b.n	800fa9a <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fa42:	687b      	ldr	r3, [r7, #4]
 800fa44:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fa48:	b2db      	uxtb	r3, r3
 800fa4a:	2b03      	cmp	r3, #3
 800fa4c:	d107      	bne.n	800fa5e <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800fa4e:	f107 030d 	add.w	r3, r7, #13
 800fa52:	2201      	movs	r2, #1
 800fa54:	4619      	mov	r1, r3
 800fa56:	6878      	ldr	r0, [r7, #4]
 800fa58:	f001 fab9 	bl	8010fce <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800fa5c:	e01d      	b.n	800fa9a <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800fa5e:	6839      	ldr	r1, [r7, #0]
 800fa60:	6878      	ldr	r0, [r7, #4]
 800fa62:	f001 fa43 	bl	8010eec <USBD_CtlError>
            ret = USBD_FAIL;
 800fa66:	2303      	movs	r3, #3
 800fa68:	75fb      	strb	r3, [r7, #23]
          break;
 800fa6a:	e016      	b.n	800fa9a <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800fa6c:	687b      	ldr	r3, [r7, #4]
 800fa6e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fa72:	b2db      	uxtb	r3, r3
 800fa74:	2b03      	cmp	r3, #3
 800fa76:	d00f      	beq.n	800fa98 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 800fa78:	6839      	ldr	r1, [r7, #0]
 800fa7a:	6878      	ldr	r0, [r7, #4]
 800fa7c:	f001 fa36 	bl	8010eec <USBD_CtlError>
            ret = USBD_FAIL;
 800fa80:	2303      	movs	r3, #3
 800fa82:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800fa84:	e008      	b.n	800fa98 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800fa86:	6839      	ldr	r1, [r7, #0]
 800fa88:	6878      	ldr	r0, [r7, #4]
 800fa8a:	f001 fa2f 	bl	8010eec <USBD_CtlError>
          ret = USBD_FAIL;
 800fa8e:	2303      	movs	r3, #3
 800fa90:	75fb      	strb	r3, [r7, #23]
          break;
 800fa92:	e002      	b.n	800fa9a <USBD_CDC_Setup+0x176>
          break;
 800fa94:	bf00      	nop
 800fa96:	e008      	b.n	800faaa <USBD_CDC_Setup+0x186>
          break;
 800fa98:	bf00      	nop
      }
      break;
 800fa9a:	e006      	b.n	800faaa <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 800fa9c:	6839      	ldr	r1, [r7, #0]
 800fa9e:	6878      	ldr	r0, [r7, #4]
 800faa0:	f001 fa24 	bl	8010eec <USBD_CtlError>
      ret = USBD_FAIL;
 800faa4:	2303      	movs	r3, #3
 800faa6:	75fb      	strb	r3, [r7, #23]
      break;
 800faa8:	bf00      	nop
  }

  return (uint8_t)ret;
 800faaa:	7dfb      	ldrb	r3, [r7, #23]
}
 800faac:	4618      	mov	r0, r3
 800faae:	3718      	adds	r7, #24
 800fab0:	46bd      	mov	sp, r7
 800fab2:	bd80      	pop	{r7, pc}

0800fab4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800fab4:	b580      	push	{r7, lr}
 800fab6:	b084      	sub	sp, #16
 800fab8:	af00      	add	r7, sp, #0
 800faba:	6078      	str	r0, [r7, #4]
 800fabc:	460b      	mov	r3, r1
 800fabe:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800fac0:	687b      	ldr	r3, [r7, #4]
 800fac2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800fac6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800fac8:	687b      	ldr	r3, [r7, #4]
 800faca:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800face:	2b00      	cmp	r3, #0
 800fad0:	d101      	bne.n	800fad6 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800fad2:	2303      	movs	r3, #3
 800fad4:	e04f      	b.n	800fb76 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800fad6:	687b      	ldr	r3, [r7, #4]
 800fad8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800fadc:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800fade:	78fa      	ldrb	r2, [r7, #3]
 800fae0:	6879      	ldr	r1, [r7, #4]
 800fae2:	4613      	mov	r3, r2
 800fae4:	009b      	lsls	r3, r3, #2
 800fae6:	4413      	add	r3, r2
 800fae8:	009b      	lsls	r3, r3, #2
 800faea:	440b      	add	r3, r1
 800faec:	3318      	adds	r3, #24
 800faee:	681b      	ldr	r3, [r3, #0]
 800faf0:	2b00      	cmp	r3, #0
 800faf2:	d029      	beq.n	800fb48 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800faf4:	78fa      	ldrb	r2, [r7, #3]
 800faf6:	6879      	ldr	r1, [r7, #4]
 800faf8:	4613      	mov	r3, r2
 800fafa:	009b      	lsls	r3, r3, #2
 800fafc:	4413      	add	r3, r2
 800fafe:	009b      	lsls	r3, r3, #2
 800fb00:	440b      	add	r3, r1
 800fb02:	3318      	adds	r3, #24
 800fb04:	681a      	ldr	r2, [r3, #0]
 800fb06:	78f9      	ldrb	r1, [r7, #3]
 800fb08:	68f8      	ldr	r0, [r7, #12]
 800fb0a:	460b      	mov	r3, r1
 800fb0c:	00db      	lsls	r3, r3, #3
 800fb0e:	1a5b      	subs	r3, r3, r1
 800fb10:	009b      	lsls	r3, r3, #2
 800fb12:	4403      	add	r3, r0
 800fb14:	3344      	adds	r3, #68	; 0x44
 800fb16:	681b      	ldr	r3, [r3, #0]
 800fb18:	fbb2 f1f3 	udiv	r1, r2, r3
 800fb1c:	fb01 f303 	mul.w	r3, r1, r3
 800fb20:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800fb22:	2b00      	cmp	r3, #0
 800fb24:	d110      	bne.n	800fb48 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800fb26:	78fa      	ldrb	r2, [r7, #3]
 800fb28:	6879      	ldr	r1, [r7, #4]
 800fb2a:	4613      	mov	r3, r2
 800fb2c:	009b      	lsls	r3, r3, #2
 800fb2e:	4413      	add	r3, r2
 800fb30:	009b      	lsls	r3, r3, #2
 800fb32:	440b      	add	r3, r1
 800fb34:	3318      	adds	r3, #24
 800fb36:	2200      	movs	r2, #0
 800fb38:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800fb3a:	78f9      	ldrb	r1, [r7, #3]
 800fb3c:	2300      	movs	r3, #0
 800fb3e:	2200      	movs	r2, #0
 800fb40:	6878      	ldr	r0, [r7, #4]
 800fb42:	f002 f87a 	bl	8011c3a <USBD_LL_Transmit>
 800fb46:	e015      	b.n	800fb74 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800fb48:	68bb      	ldr	r3, [r7, #8]
 800fb4a:	2200      	movs	r2, #0
 800fb4c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800fb50:	687b      	ldr	r3, [r7, #4]
 800fb52:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800fb56:	691b      	ldr	r3, [r3, #16]
 800fb58:	2b00      	cmp	r3, #0
 800fb5a:	d00b      	beq.n	800fb74 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800fb5c:	687b      	ldr	r3, [r7, #4]
 800fb5e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800fb62:	691b      	ldr	r3, [r3, #16]
 800fb64:	68ba      	ldr	r2, [r7, #8]
 800fb66:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800fb6a:	68ba      	ldr	r2, [r7, #8]
 800fb6c:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800fb70:	78fa      	ldrb	r2, [r7, #3]
 800fb72:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800fb74:	2300      	movs	r3, #0
}
 800fb76:	4618      	mov	r0, r3
 800fb78:	3710      	adds	r7, #16
 800fb7a:	46bd      	mov	sp, r7
 800fb7c:	bd80      	pop	{r7, pc}

0800fb7e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800fb7e:	b580      	push	{r7, lr}
 800fb80:	b084      	sub	sp, #16
 800fb82:	af00      	add	r7, sp, #0
 800fb84:	6078      	str	r0, [r7, #4]
 800fb86:	460b      	mov	r3, r1
 800fb88:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800fb8a:	687b      	ldr	r3, [r7, #4]
 800fb8c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800fb90:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800fb92:	687b      	ldr	r3, [r7, #4]
 800fb94:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800fb98:	2b00      	cmp	r3, #0
 800fb9a:	d101      	bne.n	800fba0 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800fb9c:	2303      	movs	r3, #3
 800fb9e:	e015      	b.n	800fbcc <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800fba0:	78fb      	ldrb	r3, [r7, #3]
 800fba2:	4619      	mov	r1, r3
 800fba4:	6878      	ldr	r0, [r7, #4]
 800fba6:	f002 f88a 	bl	8011cbe <USBD_LL_GetRxDataSize>
 800fbaa:	4602      	mov	r2, r0
 800fbac:	68fb      	ldr	r3, [r7, #12]
 800fbae:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800fbb2:	687b      	ldr	r3, [r7, #4]
 800fbb4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800fbb8:	68db      	ldr	r3, [r3, #12]
 800fbba:	68fa      	ldr	r2, [r7, #12]
 800fbbc:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800fbc0:	68fa      	ldr	r2, [r7, #12]
 800fbc2:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800fbc6:	4611      	mov	r1, r2
 800fbc8:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800fbca:	2300      	movs	r3, #0
}
 800fbcc:	4618      	mov	r0, r3
 800fbce:	3710      	adds	r7, #16
 800fbd0:	46bd      	mov	sp, r7
 800fbd2:	bd80      	pop	{r7, pc}

0800fbd4 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800fbd4:	b580      	push	{r7, lr}
 800fbd6:	b084      	sub	sp, #16
 800fbd8:	af00      	add	r7, sp, #0
 800fbda:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800fbdc:	687b      	ldr	r3, [r7, #4]
 800fbde:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800fbe2:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800fbe4:	68fb      	ldr	r3, [r7, #12]
 800fbe6:	2b00      	cmp	r3, #0
 800fbe8:	d101      	bne.n	800fbee <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800fbea:	2303      	movs	r3, #3
 800fbec:	e01b      	b.n	800fc26 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800fbee:	687b      	ldr	r3, [r7, #4]
 800fbf0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800fbf4:	2b00      	cmp	r3, #0
 800fbf6:	d015      	beq.n	800fc24 <USBD_CDC_EP0_RxReady+0x50>
 800fbf8:	68fb      	ldr	r3, [r7, #12]
 800fbfa:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800fbfe:	2bff      	cmp	r3, #255	; 0xff
 800fc00:	d010      	beq.n	800fc24 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800fc02:	687b      	ldr	r3, [r7, #4]
 800fc04:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800fc08:	689b      	ldr	r3, [r3, #8]
 800fc0a:	68fa      	ldr	r2, [r7, #12]
 800fc0c:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800fc10:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800fc12:	68fa      	ldr	r2, [r7, #12]
 800fc14:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800fc18:	b292      	uxth	r2, r2
 800fc1a:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800fc1c:	68fb      	ldr	r3, [r7, #12]
 800fc1e:	22ff      	movs	r2, #255	; 0xff
 800fc20:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800fc24:	2300      	movs	r3, #0
}
 800fc26:	4618      	mov	r0, r3
 800fc28:	3710      	adds	r7, #16
 800fc2a:	46bd      	mov	sp, r7
 800fc2c:	bd80      	pop	{r7, pc}
	...

0800fc30 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800fc30:	b480      	push	{r7}
 800fc32:	b083      	sub	sp, #12
 800fc34:	af00      	add	r7, sp, #0
 800fc36:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800fc38:	687b      	ldr	r3, [r7, #4]
 800fc3a:	2243      	movs	r2, #67	; 0x43
 800fc3c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800fc3e:	4b03      	ldr	r3, [pc, #12]	; (800fc4c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800fc40:	4618      	mov	r0, r3
 800fc42:	370c      	adds	r7, #12
 800fc44:	46bd      	mov	sp, r7
 800fc46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc4a:	4770      	bx	lr
 800fc4c:	200000b8 	.word	0x200000b8

0800fc50 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800fc50:	b480      	push	{r7}
 800fc52:	b083      	sub	sp, #12
 800fc54:	af00      	add	r7, sp, #0
 800fc56:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800fc58:	687b      	ldr	r3, [r7, #4]
 800fc5a:	2243      	movs	r2, #67	; 0x43
 800fc5c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800fc5e:	4b03      	ldr	r3, [pc, #12]	; (800fc6c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800fc60:	4618      	mov	r0, r3
 800fc62:	370c      	adds	r7, #12
 800fc64:	46bd      	mov	sp, r7
 800fc66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc6a:	4770      	bx	lr
 800fc6c:	20000074 	.word	0x20000074

0800fc70 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800fc70:	b480      	push	{r7}
 800fc72:	b083      	sub	sp, #12
 800fc74:	af00      	add	r7, sp, #0
 800fc76:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800fc78:	687b      	ldr	r3, [r7, #4]
 800fc7a:	2243      	movs	r2, #67	; 0x43
 800fc7c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800fc7e:	4b03      	ldr	r3, [pc, #12]	; (800fc8c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800fc80:	4618      	mov	r0, r3
 800fc82:	370c      	adds	r7, #12
 800fc84:	46bd      	mov	sp, r7
 800fc86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc8a:	4770      	bx	lr
 800fc8c:	200000fc 	.word	0x200000fc

0800fc90 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800fc90:	b480      	push	{r7}
 800fc92:	b083      	sub	sp, #12
 800fc94:	af00      	add	r7, sp, #0
 800fc96:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800fc98:	687b      	ldr	r3, [r7, #4]
 800fc9a:	220a      	movs	r2, #10
 800fc9c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800fc9e:	4b03      	ldr	r3, [pc, #12]	; (800fcac <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800fca0:	4618      	mov	r0, r3
 800fca2:	370c      	adds	r7, #12
 800fca4:	46bd      	mov	sp, r7
 800fca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcaa:	4770      	bx	lr
 800fcac:	20000030 	.word	0x20000030

0800fcb0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800fcb0:	b480      	push	{r7}
 800fcb2:	b083      	sub	sp, #12
 800fcb4:	af00      	add	r7, sp, #0
 800fcb6:	6078      	str	r0, [r7, #4]
 800fcb8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800fcba:	683b      	ldr	r3, [r7, #0]
 800fcbc:	2b00      	cmp	r3, #0
 800fcbe:	d101      	bne.n	800fcc4 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800fcc0:	2303      	movs	r3, #3
 800fcc2:	e004      	b.n	800fcce <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800fcc4:	687b      	ldr	r3, [r7, #4]
 800fcc6:	683a      	ldr	r2, [r7, #0]
 800fcc8:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800fccc:	2300      	movs	r3, #0
}
 800fcce:	4618      	mov	r0, r3
 800fcd0:	370c      	adds	r7, #12
 800fcd2:	46bd      	mov	sp, r7
 800fcd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcd8:	4770      	bx	lr

0800fcda <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800fcda:	b480      	push	{r7}
 800fcdc:	b087      	sub	sp, #28
 800fcde:	af00      	add	r7, sp, #0
 800fce0:	60f8      	str	r0, [r7, #12]
 800fce2:	60b9      	str	r1, [r7, #8]
 800fce4:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800fce6:	68fb      	ldr	r3, [r7, #12]
 800fce8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800fcec:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800fcee:	697b      	ldr	r3, [r7, #20]
 800fcf0:	2b00      	cmp	r3, #0
 800fcf2:	d101      	bne.n	800fcf8 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800fcf4:	2303      	movs	r3, #3
 800fcf6:	e008      	b.n	800fd0a <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 800fcf8:	697b      	ldr	r3, [r7, #20]
 800fcfa:	68ba      	ldr	r2, [r7, #8]
 800fcfc:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800fd00:	697b      	ldr	r3, [r7, #20]
 800fd02:	687a      	ldr	r2, [r7, #4]
 800fd04:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800fd08:	2300      	movs	r3, #0
}
 800fd0a:	4618      	mov	r0, r3
 800fd0c:	371c      	adds	r7, #28
 800fd0e:	46bd      	mov	sp, r7
 800fd10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd14:	4770      	bx	lr

0800fd16 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800fd16:	b480      	push	{r7}
 800fd18:	b085      	sub	sp, #20
 800fd1a:	af00      	add	r7, sp, #0
 800fd1c:	6078      	str	r0, [r7, #4]
 800fd1e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800fd20:	687b      	ldr	r3, [r7, #4]
 800fd22:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800fd26:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800fd28:	68fb      	ldr	r3, [r7, #12]
 800fd2a:	2b00      	cmp	r3, #0
 800fd2c:	d101      	bne.n	800fd32 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800fd2e:	2303      	movs	r3, #3
 800fd30:	e004      	b.n	800fd3c <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800fd32:	68fb      	ldr	r3, [r7, #12]
 800fd34:	683a      	ldr	r2, [r7, #0]
 800fd36:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800fd3a:	2300      	movs	r3, #0
}
 800fd3c:	4618      	mov	r0, r3
 800fd3e:	3714      	adds	r7, #20
 800fd40:	46bd      	mov	sp, r7
 800fd42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd46:	4770      	bx	lr

0800fd48 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800fd48:	b580      	push	{r7, lr}
 800fd4a:	b084      	sub	sp, #16
 800fd4c:	af00      	add	r7, sp, #0
 800fd4e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800fd50:	687b      	ldr	r3, [r7, #4]
 800fd52:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800fd56:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800fd58:	2301      	movs	r3, #1
 800fd5a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 800fd5c:	687b      	ldr	r3, [r7, #4]
 800fd5e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800fd62:	2b00      	cmp	r3, #0
 800fd64:	d101      	bne.n	800fd6a <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800fd66:	2303      	movs	r3, #3
 800fd68:	e01a      	b.n	800fda0 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800fd6a:	68bb      	ldr	r3, [r7, #8]
 800fd6c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800fd70:	2b00      	cmp	r3, #0
 800fd72:	d114      	bne.n	800fd9e <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800fd74:	68bb      	ldr	r3, [r7, #8]
 800fd76:	2201      	movs	r2, #1
 800fd78:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800fd7c:	68bb      	ldr	r3, [r7, #8]
 800fd7e:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800fd82:	687b      	ldr	r3, [r7, #4]
 800fd84:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800fd86:	68bb      	ldr	r3, [r7, #8]
 800fd88:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800fd8c:	68bb      	ldr	r3, [r7, #8]
 800fd8e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800fd92:	2181      	movs	r1, #129	; 0x81
 800fd94:	6878      	ldr	r0, [r7, #4]
 800fd96:	f001 ff50 	bl	8011c3a <USBD_LL_Transmit>

    ret = USBD_OK;
 800fd9a:	2300      	movs	r3, #0
 800fd9c:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800fd9e:	7bfb      	ldrb	r3, [r7, #15]
}
 800fda0:	4618      	mov	r0, r3
 800fda2:	3710      	adds	r7, #16
 800fda4:	46bd      	mov	sp, r7
 800fda6:	bd80      	pop	{r7, pc}

0800fda8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800fda8:	b580      	push	{r7, lr}
 800fdaa:	b084      	sub	sp, #16
 800fdac:	af00      	add	r7, sp, #0
 800fdae:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800fdb0:	687b      	ldr	r3, [r7, #4]
 800fdb2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800fdb6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800fdb8:	687b      	ldr	r3, [r7, #4]
 800fdba:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800fdbe:	2b00      	cmp	r3, #0
 800fdc0:	d101      	bne.n	800fdc6 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800fdc2:	2303      	movs	r3, #3
 800fdc4:	e016      	b.n	800fdf4 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800fdc6:	687b      	ldr	r3, [r7, #4]
 800fdc8:	7c1b      	ldrb	r3, [r3, #16]
 800fdca:	2b00      	cmp	r3, #0
 800fdcc:	d109      	bne.n	800fde2 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800fdce:	68fb      	ldr	r3, [r7, #12]
 800fdd0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800fdd4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800fdd8:	2101      	movs	r1, #1
 800fdda:	6878      	ldr	r0, [r7, #4]
 800fddc:	f001 ff4e 	bl	8011c7c <USBD_LL_PrepareReceive>
 800fde0:	e007      	b.n	800fdf2 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800fde2:	68fb      	ldr	r3, [r7, #12]
 800fde4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800fde8:	2340      	movs	r3, #64	; 0x40
 800fdea:	2101      	movs	r1, #1
 800fdec:	6878      	ldr	r0, [r7, #4]
 800fdee:	f001 ff45 	bl	8011c7c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800fdf2:	2300      	movs	r3, #0
}
 800fdf4:	4618      	mov	r0, r3
 800fdf6:	3710      	adds	r7, #16
 800fdf8:	46bd      	mov	sp, r7
 800fdfa:	bd80      	pop	{r7, pc}

0800fdfc <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800fdfc:	b580      	push	{r7, lr}
 800fdfe:	b086      	sub	sp, #24
 800fe00:	af00      	add	r7, sp, #0
 800fe02:	60f8      	str	r0, [r7, #12]
 800fe04:	60b9      	str	r1, [r7, #8]
 800fe06:	4613      	mov	r3, r2
 800fe08:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800fe0a:	68fb      	ldr	r3, [r7, #12]
 800fe0c:	2b00      	cmp	r3, #0
 800fe0e:	d101      	bne.n	800fe14 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800fe10:	2303      	movs	r3, #3
 800fe12:	e01f      	b.n	800fe54 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800fe14:	68fb      	ldr	r3, [r7, #12]
 800fe16:	2200      	movs	r2, #0
 800fe18:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800fe1c:	68fb      	ldr	r3, [r7, #12]
 800fe1e:	2200      	movs	r2, #0
 800fe20:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800fe24:	68fb      	ldr	r3, [r7, #12]
 800fe26:	2200      	movs	r2, #0
 800fe28:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800fe2c:	68bb      	ldr	r3, [r7, #8]
 800fe2e:	2b00      	cmp	r3, #0
 800fe30:	d003      	beq.n	800fe3a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800fe32:	68fb      	ldr	r3, [r7, #12]
 800fe34:	68ba      	ldr	r2, [r7, #8]
 800fe36:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800fe3a:	68fb      	ldr	r3, [r7, #12]
 800fe3c:	2201      	movs	r2, #1
 800fe3e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800fe42:	68fb      	ldr	r3, [r7, #12]
 800fe44:	79fa      	ldrb	r2, [r7, #7]
 800fe46:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800fe48:	68f8      	ldr	r0, [r7, #12]
 800fe4a:	f001 fdc1 	bl	80119d0 <USBD_LL_Init>
 800fe4e:	4603      	mov	r3, r0
 800fe50:	75fb      	strb	r3, [r7, #23]

  return ret;
 800fe52:	7dfb      	ldrb	r3, [r7, #23]
}
 800fe54:	4618      	mov	r0, r3
 800fe56:	3718      	adds	r7, #24
 800fe58:	46bd      	mov	sp, r7
 800fe5a:	bd80      	pop	{r7, pc}

0800fe5c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800fe5c:	b580      	push	{r7, lr}
 800fe5e:	b084      	sub	sp, #16
 800fe60:	af00      	add	r7, sp, #0
 800fe62:	6078      	str	r0, [r7, #4]
 800fe64:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800fe66:	2300      	movs	r3, #0
 800fe68:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800fe6a:	683b      	ldr	r3, [r7, #0]
 800fe6c:	2b00      	cmp	r3, #0
 800fe6e:	d101      	bne.n	800fe74 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800fe70:	2303      	movs	r3, #3
 800fe72:	e016      	b.n	800fea2 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800fe74:	687b      	ldr	r3, [r7, #4]
 800fe76:	683a      	ldr	r2, [r7, #0]
 800fe78:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800fe7c:	687b      	ldr	r3, [r7, #4]
 800fe7e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fe82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fe84:	2b00      	cmp	r3, #0
 800fe86:	d00b      	beq.n	800fea0 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800fe88:	687b      	ldr	r3, [r7, #4]
 800fe8a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fe8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fe90:	f107 020e 	add.w	r2, r7, #14
 800fe94:	4610      	mov	r0, r2
 800fe96:	4798      	blx	r3
 800fe98:	4602      	mov	r2, r0
 800fe9a:	687b      	ldr	r3, [r7, #4]
 800fe9c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800fea0:	2300      	movs	r3, #0
}
 800fea2:	4618      	mov	r0, r3
 800fea4:	3710      	adds	r7, #16
 800fea6:	46bd      	mov	sp, r7
 800fea8:	bd80      	pop	{r7, pc}

0800feaa <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800feaa:	b580      	push	{r7, lr}
 800feac:	b082      	sub	sp, #8
 800feae:	af00      	add	r7, sp, #0
 800feb0:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800feb2:	6878      	ldr	r0, [r7, #4]
 800feb4:	f001 fdd8 	bl	8011a68 <USBD_LL_Start>
 800feb8:	4603      	mov	r3, r0
}
 800feba:	4618      	mov	r0, r3
 800febc:	3708      	adds	r7, #8
 800febe:	46bd      	mov	sp, r7
 800fec0:	bd80      	pop	{r7, pc}

0800fec2 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800fec2:	b480      	push	{r7}
 800fec4:	b083      	sub	sp, #12
 800fec6:	af00      	add	r7, sp, #0
 800fec8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800feca:	2300      	movs	r3, #0
}
 800fecc:	4618      	mov	r0, r3
 800fece:	370c      	adds	r7, #12
 800fed0:	46bd      	mov	sp, r7
 800fed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fed6:	4770      	bx	lr

0800fed8 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800fed8:	b580      	push	{r7, lr}
 800feda:	b084      	sub	sp, #16
 800fedc:	af00      	add	r7, sp, #0
 800fede:	6078      	str	r0, [r7, #4]
 800fee0:	460b      	mov	r3, r1
 800fee2:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800fee4:	2303      	movs	r3, #3
 800fee6:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800fee8:	687b      	ldr	r3, [r7, #4]
 800feea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800feee:	2b00      	cmp	r3, #0
 800fef0:	d009      	beq.n	800ff06 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800fef2:	687b      	ldr	r3, [r7, #4]
 800fef4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fef8:	681b      	ldr	r3, [r3, #0]
 800fefa:	78fa      	ldrb	r2, [r7, #3]
 800fefc:	4611      	mov	r1, r2
 800fefe:	6878      	ldr	r0, [r7, #4]
 800ff00:	4798      	blx	r3
 800ff02:	4603      	mov	r3, r0
 800ff04:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800ff06:	7bfb      	ldrb	r3, [r7, #15]
}
 800ff08:	4618      	mov	r0, r3
 800ff0a:	3710      	adds	r7, #16
 800ff0c:	46bd      	mov	sp, r7
 800ff0e:	bd80      	pop	{r7, pc}

0800ff10 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ff10:	b580      	push	{r7, lr}
 800ff12:	b082      	sub	sp, #8
 800ff14:	af00      	add	r7, sp, #0
 800ff16:	6078      	str	r0, [r7, #4]
 800ff18:	460b      	mov	r3, r1
 800ff1a:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800ff1c:	687b      	ldr	r3, [r7, #4]
 800ff1e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ff22:	2b00      	cmp	r3, #0
 800ff24:	d007      	beq.n	800ff36 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800ff26:	687b      	ldr	r3, [r7, #4]
 800ff28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ff2c:	685b      	ldr	r3, [r3, #4]
 800ff2e:	78fa      	ldrb	r2, [r7, #3]
 800ff30:	4611      	mov	r1, r2
 800ff32:	6878      	ldr	r0, [r7, #4]
 800ff34:	4798      	blx	r3
  }

  return USBD_OK;
 800ff36:	2300      	movs	r3, #0
}
 800ff38:	4618      	mov	r0, r3
 800ff3a:	3708      	adds	r7, #8
 800ff3c:	46bd      	mov	sp, r7
 800ff3e:	bd80      	pop	{r7, pc}

0800ff40 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800ff40:	b580      	push	{r7, lr}
 800ff42:	b084      	sub	sp, #16
 800ff44:	af00      	add	r7, sp, #0
 800ff46:	6078      	str	r0, [r7, #4]
 800ff48:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800ff4a:	687b      	ldr	r3, [r7, #4]
 800ff4c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800ff50:	6839      	ldr	r1, [r7, #0]
 800ff52:	4618      	mov	r0, r3
 800ff54:	f000 ff90 	bl	8010e78 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800ff58:	687b      	ldr	r3, [r7, #4]
 800ff5a:	2201      	movs	r2, #1
 800ff5c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800ff60:	687b      	ldr	r3, [r7, #4]
 800ff62:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800ff66:	461a      	mov	r2, r3
 800ff68:	687b      	ldr	r3, [r7, #4]
 800ff6a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800ff6e:	687b      	ldr	r3, [r7, #4]
 800ff70:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800ff74:	f003 031f 	and.w	r3, r3, #31
 800ff78:	2b02      	cmp	r3, #2
 800ff7a:	d01a      	beq.n	800ffb2 <USBD_LL_SetupStage+0x72>
 800ff7c:	2b02      	cmp	r3, #2
 800ff7e:	d822      	bhi.n	800ffc6 <USBD_LL_SetupStage+0x86>
 800ff80:	2b00      	cmp	r3, #0
 800ff82:	d002      	beq.n	800ff8a <USBD_LL_SetupStage+0x4a>
 800ff84:	2b01      	cmp	r3, #1
 800ff86:	d00a      	beq.n	800ff9e <USBD_LL_SetupStage+0x5e>
 800ff88:	e01d      	b.n	800ffc6 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800ff8a:	687b      	ldr	r3, [r7, #4]
 800ff8c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800ff90:	4619      	mov	r1, r3
 800ff92:	6878      	ldr	r0, [r7, #4]
 800ff94:	f000 fa62 	bl	801045c <USBD_StdDevReq>
 800ff98:	4603      	mov	r3, r0
 800ff9a:	73fb      	strb	r3, [r7, #15]
      break;
 800ff9c:	e020      	b.n	800ffe0 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800ff9e:	687b      	ldr	r3, [r7, #4]
 800ffa0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800ffa4:	4619      	mov	r1, r3
 800ffa6:	6878      	ldr	r0, [r7, #4]
 800ffa8:	f000 fac6 	bl	8010538 <USBD_StdItfReq>
 800ffac:	4603      	mov	r3, r0
 800ffae:	73fb      	strb	r3, [r7, #15]
      break;
 800ffb0:	e016      	b.n	800ffe0 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800ffb2:	687b      	ldr	r3, [r7, #4]
 800ffb4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800ffb8:	4619      	mov	r1, r3
 800ffba:	6878      	ldr	r0, [r7, #4]
 800ffbc:	f000 fb05 	bl	80105ca <USBD_StdEPReq>
 800ffc0:	4603      	mov	r3, r0
 800ffc2:	73fb      	strb	r3, [r7, #15]
      break;
 800ffc4:	e00c      	b.n	800ffe0 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800ffc6:	687b      	ldr	r3, [r7, #4]
 800ffc8:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800ffcc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800ffd0:	b2db      	uxtb	r3, r3
 800ffd2:	4619      	mov	r1, r3
 800ffd4:	6878      	ldr	r0, [r7, #4]
 800ffd6:	f001 fda7 	bl	8011b28 <USBD_LL_StallEP>
 800ffda:	4603      	mov	r3, r0
 800ffdc:	73fb      	strb	r3, [r7, #15]
      break;
 800ffde:	bf00      	nop
  }

  return ret;
 800ffe0:	7bfb      	ldrb	r3, [r7, #15]
}
 800ffe2:	4618      	mov	r0, r3
 800ffe4:	3710      	adds	r7, #16
 800ffe6:	46bd      	mov	sp, r7
 800ffe8:	bd80      	pop	{r7, pc}

0800ffea <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800ffea:	b580      	push	{r7, lr}
 800ffec:	b086      	sub	sp, #24
 800ffee:	af00      	add	r7, sp, #0
 800fff0:	60f8      	str	r0, [r7, #12]
 800fff2:	460b      	mov	r3, r1
 800fff4:	607a      	str	r2, [r7, #4]
 800fff6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800fff8:	7afb      	ldrb	r3, [r7, #11]
 800fffa:	2b00      	cmp	r3, #0
 800fffc:	d138      	bne.n	8010070 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800fffe:	68fb      	ldr	r3, [r7, #12]
 8010000:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8010004:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8010006:	68fb      	ldr	r3, [r7, #12]
 8010008:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 801000c:	2b03      	cmp	r3, #3
 801000e:	d14a      	bne.n	80100a6 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8010010:	693b      	ldr	r3, [r7, #16]
 8010012:	689a      	ldr	r2, [r3, #8]
 8010014:	693b      	ldr	r3, [r7, #16]
 8010016:	68db      	ldr	r3, [r3, #12]
 8010018:	429a      	cmp	r2, r3
 801001a:	d913      	bls.n	8010044 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 801001c:	693b      	ldr	r3, [r7, #16]
 801001e:	689a      	ldr	r2, [r3, #8]
 8010020:	693b      	ldr	r3, [r7, #16]
 8010022:	68db      	ldr	r3, [r3, #12]
 8010024:	1ad2      	subs	r2, r2, r3
 8010026:	693b      	ldr	r3, [r7, #16]
 8010028:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 801002a:	693b      	ldr	r3, [r7, #16]
 801002c:	68da      	ldr	r2, [r3, #12]
 801002e:	693b      	ldr	r3, [r7, #16]
 8010030:	689b      	ldr	r3, [r3, #8]
 8010032:	4293      	cmp	r3, r2
 8010034:	bf28      	it	cs
 8010036:	4613      	movcs	r3, r2
 8010038:	461a      	mov	r2, r3
 801003a:	6879      	ldr	r1, [r7, #4]
 801003c:	68f8      	ldr	r0, [r7, #12]
 801003e:	f001 f80f 	bl	8011060 <USBD_CtlContinueRx>
 8010042:	e030      	b.n	80100a6 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010044:	68fb      	ldr	r3, [r7, #12]
 8010046:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801004a:	b2db      	uxtb	r3, r3
 801004c:	2b03      	cmp	r3, #3
 801004e:	d10b      	bne.n	8010068 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8010050:	68fb      	ldr	r3, [r7, #12]
 8010052:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010056:	691b      	ldr	r3, [r3, #16]
 8010058:	2b00      	cmp	r3, #0
 801005a:	d005      	beq.n	8010068 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 801005c:	68fb      	ldr	r3, [r7, #12]
 801005e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010062:	691b      	ldr	r3, [r3, #16]
 8010064:	68f8      	ldr	r0, [r7, #12]
 8010066:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8010068:	68f8      	ldr	r0, [r7, #12]
 801006a:	f001 f80a 	bl	8011082 <USBD_CtlSendStatus>
 801006e:	e01a      	b.n	80100a6 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010070:	68fb      	ldr	r3, [r7, #12]
 8010072:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010076:	b2db      	uxtb	r3, r3
 8010078:	2b03      	cmp	r3, #3
 801007a:	d114      	bne.n	80100a6 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 801007c:	68fb      	ldr	r3, [r7, #12]
 801007e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010082:	699b      	ldr	r3, [r3, #24]
 8010084:	2b00      	cmp	r3, #0
 8010086:	d00e      	beq.n	80100a6 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8010088:	68fb      	ldr	r3, [r7, #12]
 801008a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801008e:	699b      	ldr	r3, [r3, #24]
 8010090:	7afa      	ldrb	r2, [r7, #11]
 8010092:	4611      	mov	r1, r2
 8010094:	68f8      	ldr	r0, [r7, #12]
 8010096:	4798      	blx	r3
 8010098:	4603      	mov	r3, r0
 801009a:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 801009c:	7dfb      	ldrb	r3, [r7, #23]
 801009e:	2b00      	cmp	r3, #0
 80100a0:	d001      	beq.n	80100a6 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 80100a2:	7dfb      	ldrb	r3, [r7, #23]
 80100a4:	e000      	b.n	80100a8 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 80100a6:	2300      	movs	r3, #0
}
 80100a8:	4618      	mov	r0, r3
 80100aa:	3718      	adds	r7, #24
 80100ac:	46bd      	mov	sp, r7
 80100ae:	bd80      	pop	{r7, pc}

080100b0 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80100b0:	b580      	push	{r7, lr}
 80100b2:	b086      	sub	sp, #24
 80100b4:	af00      	add	r7, sp, #0
 80100b6:	60f8      	str	r0, [r7, #12]
 80100b8:	460b      	mov	r3, r1
 80100ba:	607a      	str	r2, [r7, #4]
 80100bc:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80100be:	7afb      	ldrb	r3, [r7, #11]
 80100c0:	2b00      	cmp	r3, #0
 80100c2:	d16b      	bne.n	801019c <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 80100c4:	68fb      	ldr	r3, [r7, #12]
 80100c6:	3314      	adds	r3, #20
 80100c8:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80100ca:	68fb      	ldr	r3, [r7, #12]
 80100cc:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80100d0:	2b02      	cmp	r3, #2
 80100d2:	d156      	bne.n	8010182 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 80100d4:	693b      	ldr	r3, [r7, #16]
 80100d6:	689a      	ldr	r2, [r3, #8]
 80100d8:	693b      	ldr	r3, [r7, #16]
 80100da:	68db      	ldr	r3, [r3, #12]
 80100dc:	429a      	cmp	r2, r3
 80100de:	d914      	bls.n	801010a <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80100e0:	693b      	ldr	r3, [r7, #16]
 80100e2:	689a      	ldr	r2, [r3, #8]
 80100e4:	693b      	ldr	r3, [r7, #16]
 80100e6:	68db      	ldr	r3, [r3, #12]
 80100e8:	1ad2      	subs	r2, r2, r3
 80100ea:	693b      	ldr	r3, [r7, #16]
 80100ec:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80100ee:	693b      	ldr	r3, [r7, #16]
 80100f0:	689b      	ldr	r3, [r3, #8]
 80100f2:	461a      	mov	r2, r3
 80100f4:	6879      	ldr	r1, [r7, #4]
 80100f6:	68f8      	ldr	r0, [r7, #12]
 80100f8:	f000 ff84 	bl	8011004 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80100fc:	2300      	movs	r3, #0
 80100fe:	2200      	movs	r2, #0
 8010100:	2100      	movs	r1, #0
 8010102:	68f8      	ldr	r0, [r7, #12]
 8010104:	f001 fdba 	bl	8011c7c <USBD_LL_PrepareReceive>
 8010108:	e03b      	b.n	8010182 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 801010a:	693b      	ldr	r3, [r7, #16]
 801010c:	68da      	ldr	r2, [r3, #12]
 801010e:	693b      	ldr	r3, [r7, #16]
 8010110:	689b      	ldr	r3, [r3, #8]
 8010112:	429a      	cmp	r2, r3
 8010114:	d11c      	bne.n	8010150 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8010116:	693b      	ldr	r3, [r7, #16]
 8010118:	685a      	ldr	r2, [r3, #4]
 801011a:	693b      	ldr	r3, [r7, #16]
 801011c:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 801011e:	429a      	cmp	r2, r3
 8010120:	d316      	bcc.n	8010150 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8010122:	693b      	ldr	r3, [r7, #16]
 8010124:	685a      	ldr	r2, [r3, #4]
 8010126:	68fb      	ldr	r3, [r7, #12]
 8010128:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 801012c:	429a      	cmp	r2, r3
 801012e:	d20f      	bcs.n	8010150 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8010130:	2200      	movs	r2, #0
 8010132:	2100      	movs	r1, #0
 8010134:	68f8      	ldr	r0, [r7, #12]
 8010136:	f000 ff65 	bl	8011004 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 801013a:	68fb      	ldr	r3, [r7, #12]
 801013c:	2200      	movs	r2, #0
 801013e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8010142:	2300      	movs	r3, #0
 8010144:	2200      	movs	r2, #0
 8010146:	2100      	movs	r1, #0
 8010148:	68f8      	ldr	r0, [r7, #12]
 801014a:	f001 fd97 	bl	8011c7c <USBD_LL_PrepareReceive>
 801014e:	e018      	b.n	8010182 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010150:	68fb      	ldr	r3, [r7, #12]
 8010152:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010156:	b2db      	uxtb	r3, r3
 8010158:	2b03      	cmp	r3, #3
 801015a:	d10b      	bne.n	8010174 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 801015c:	68fb      	ldr	r3, [r7, #12]
 801015e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010162:	68db      	ldr	r3, [r3, #12]
 8010164:	2b00      	cmp	r3, #0
 8010166:	d005      	beq.n	8010174 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8010168:	68fb      	ldr	r3, [r7, #12]
 801016a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801016e:	68db      	ldr	r3, [r3, #12]
 8010170:	68f8      	ldr	r0, [r7, #12]
 8010172:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8010174:	2180      	movs	r1, #128	; 0x80
 8010176:	68f8      	ldr	r0, [r7, #12]
 8010178:	f001 fcd6 	bl	8011b28 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 801017c:	68f8      	ldr	r0, [r7, #12]
 801017e:	f000 ff93 	bl	80110a8 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8010182:	68fb      	ldr	r3, [r7, #12]
 8010184:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8010188:	2b01      	cmp	r3, #1
 801018a:	d122      	bne.n	80101d2 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 801018c:	68f8      	ldr	r0, [r7, #12]
 801018e:	f7ff fe98 	bl	800fec2 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8010192:	68fb      	ldr	r3, [r7, #12]
 8010194:	2200      	movs	r2, #0
 8010196:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 801019a:	e01a      	b.n	80101d2 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801019c:	68fb      	ldr	r3, [r7, #12]
 801019e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80101a2:	b2db      	uxtb	r3, r3
 80101a4:	2b03      	cmp	r3, #3
 80101a6:	d114      	bne.n	80101d2 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 80101a8:	68fb      	ldr	r3, [r7, #12]
 80101aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80101ae:	695b      	ldr	r3, [r3, #20]
 80101b0:	2b00      	cmp	r3, #0
 80101b2:	d00e      	beq.n	80101d2 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 80101b4:	68fb      	ldr	r3, [r7, #12]
 80101b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80101ba:	695b      	ldr	r3, [r3, #20]
 80101bc:	7afa      	ldrb	r2, [r7, #11]
 80101be:	4611      	mov	r1, r2
 80101c0:	68f8      	ldr	r0, [r7, #12]
 80101c2:	4798      	blx	r3
 80101c4:	4603      	mov	r3, r0
 80101c6:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 80101c8:	7dfb      	ldrb	r3, [r7, #23]
 80101ca:	2b00      	cmp	r3, #0
 80101cc:	d001      	beq.n	80101d2 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 80101ce:	7dfb      	ldrb	r3, [r7, #23]
 80101d0:	e000      	b.n	80101d4 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 80101d2:	2300      	movs	r3, #0
}
 80101d4:	4618      	mov	r0, r3
 80101d6:	3718      	adds	r7, #24
 80101d8:	46bd      	mov	sp, r7
 80101da:	bd80      	pop	{r7, pc}

080101dc <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80101dc:	b580      	push	{r7, lr}
 80101de:	b082      	sub	sp, #8
 80101e0:	af00      	add	r7, sp, #0
 80101e2:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80101e4:	687b      	ldr	r3, [r7, #4]
 80101e6:	2201      	movs	r2, #1
 80101e8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80101ec:	687b      	ldr	r3, [r7, #4]
 80101ee:	2200      	movs	r2, #0
 80101f0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80101f4:	687b      	ldr	r3, [r7, #4]
 80101f6:	2200      	movs	r2, #0
 80101f8:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80101fa:	687b      	ldr	r3, [r7, #4]
 80101fc:	2200      	movs	r2, #0
 80101fe:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8010202:	687b      	ldr	r3, [r7, #4]
 8010204:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010208:	2b00      	cmp	r3, #0
 801020a:	d101      	bne.n	8010210 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 801020c:	2303      	movs	r3, #3
 801020e:	e02f      	b.n	8010270 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8010210:	687b      	ldr	r3, [r7, #4]
 8010212:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010216:	2b00      	cmp	r3, #0
 8010218:	d00f      	beq.n	801023a <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 801021a:	687b      	ldr	r3, [r7, #4]
 801021c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010220:	685b      	ldr	r3, [r3, #4]
 8010222:	2b00      	cmp	r3, #0
 8010224:	d009      	beq.n	801023a <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8010226:	687b      	ldr	r3, [r7, #4]
 8010228:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801022c:	685b      	ldr	r3, [r3, #4]
 801022e:	687a      	ldr	r2, [r7, #4]
 8010230:	6852      	ldr	r2, [r2, #4]
 8010232:	b2d2      	uxtb	r2, r2
 8010234:	4611      	mov	r1, r2
 8010236:	6878      	ldr	r0, [r7, #4]
 8010238:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 801023a:	2340      	movs	r3, #64	; 0x40
 801023c:	2200      	movs	r2, #0
 801023e:	2100      	movs	r1, #0
 8010240:	6878      	ldr	r0, [r7, #4]
 8010242:	f001 fc2c 	bl	8011a9e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8010246:	687b      	ldr	r3, [r7, #4]
 8010248:	2201      	movs	r2, #1
 801024a:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 801024e:	687b      	ldr	r3, [r7, #4]
 8010250:	2240      	movs	r2, #64	; 0x40
 8010252:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8010256:	2340      	movs	r3, #64	; 0x40
 8010258:	2200      	movs	r2, #0
 801025a:	2180      	movs	r1, #128	; 0x80
 801025c:	6878      	ldr	r0, [r7, #4]
 801025e:	f001 fc1e 	bl	8011a9e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8010262:	687b      	ldr	r3, [r7, #4]
 8010264:	2201      	movs	r2, #1
 8010266:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8010268:	687b      	ldr	r3, [r7, #4]
 801026a:	2240      	movs	r2, #64	; 0x40
 801026c:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 801026e:	2300      	movs	r3, #0
}
 8010270:	4618      	mov	r0, r3
 8010272:	3708      	adds	r7, #8
 8010274:	46bd      	mov	sp, r7
 8010276:	bd80      	pop	{r7, pc}

08010278 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8010278:	b480      	push	{r7}
 801027a:	b083      	sub	sp, #12
 801027c:	af00      	add	r7, sp, #0
 801027e:	6078      	str	r0, [r7, #4]
 8010280:	460b      	mov	r3, r1
 8010282:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8010284:	687b      	ldr	r3, [r7, #4]
 8010286:	78fa      	ldrb	r2, [r7, #3]
 8010288:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 801028a:	2300      	movs	r3, #0
}
 801028c:	4618      	mov	r0, r3
 801028e:	370c      	adds	r7, #12
 8010290:	46bd      	mov	sp, r7
 8010292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010296:	4770      	bx	lr

08010298 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8010298:	b480      	push	{r7}
 801029a:	b083      	sub	sp, #12
 801029c:	af00      	add	r7, sp, #0
 801029e:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80102a0:	687b      	ldr	r3, [r7, #4]
 80102a2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80102a6:	b2da      	uxtb	r2, r3
 80102a8:	687b      	ldr	r3, [r7, #4]
 80102aa:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80102ae:	687b      	ldr	r3, [r7, #4]
 80102b0:	2204      	movs	r2, #4
 80102b2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80102b6:	2300      	movs	r3, #0
}
 80102b8:	4618      	mov	r0, r3
 80102ba:	370c      	adds	r7, #12
 80102bc:	46bd      	mov	sp, r7
 80102be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102c2:	4770      	bx	lr

080102c4 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80102c4:	b480      	push	{r7}
 80102c6:	b083      	sub	sp, #12
 80102c8:	af00      	add	r7, sp, #0
 80102ca:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80102cc:	687b      	ldr	r3, [r7, #4]
 80102ce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80102d2:	b2db      	uxtb	r3, r3
 80102d4:	2b04      	cmp	r3, #4
 80102d6:	d106      	bne.n	80102e6 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80102d8:	687b      	ldr	r3, [r7, #4]
 80102da:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80102de:	b2da      	uxtb	r2, r3
 80102e0:	687b      	ldr	r3, [r7, #4]
 80102e2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80102e6:	2300      	movs	r3, #0
}
 80102e8:	4618      	mov	r0, r3
 80102ea:	370c      	adds	r7, #12
 80102ec:	46bd      	mov	sp, r7
 80102ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102f2:	4770      	bx	lr

080102f4 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80102f4:	b580      	push	{r7, lr}
 80102f6:	b082      	sub	sp, #8
 80102f8:	af00      	add	r7, sp, #0
 80102fa:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 80102fc:	687b      	ldr	r3, [r7, #4]
 80102fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010302:	2b00      	cmp	r3, #0
 8010304:	d101      	bne.n	801030a <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8010306:	2303      	movs	r3, #3
 8010308:	e012      	b.n	8010330 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801030a:	687b      	ldr	r3, [r7, #4]
 801030c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010310:	b2db      	uxtb	r3, r3
 8010312:	2b03      	cmp	r3, #3
 8010314:	d10b      	bne.n	801032e <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8010316:	687b      	ldr	r3, [r7, #4]
 8010318:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801031c:	69db      	ldr	r3, [r3, #28]
 801031e:	2b00      	cmp	r3, #0
 8010320:	d005      	beq.n	801032e <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8010322:	687b      	ldr	r3, [r7, #4]
 8010324:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010328:	69db      	ldr	r3, [r3, #28]
 801032a:	6878      	ldr	r0, [r7, #4]
 801032c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 801032e:	2300      	movs	r3, #0
}
 8010330:	4618      	mov	r0, r3
 8010332:	3708      	adds	r7, #8
 8010334:	46bd      	mov	sp, r7
 8010336:	bd80      	pop	{r7, pc}

08010338 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8010338:	b580      	push	{r7, lr}
 801033a:	b082      	sub	sp, #8
 801033c:	af00      	add	r7, sp, #0
 801033e:	6078      	str	r0, [r7, #4]
 8010340:	460b      	mov	r3, r1
 8010342:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8010344:	687b      	ldr	r3, [r7, #4]
 8010346:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801034a:	2b00      	cmp	r3, #0
 801034c:	d101      	bne.n	8010352 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 801034e:	2303      	movs	r3, #3
 8010350:	e014      	b.n	801037c <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010352:	687b      	ldr	r3, [r7, #4]
 8010354:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010358:	b2db      	uxtb	r3, r3
 801035a:	2b03      	cmp	r3, #3
 801035c:	d10d      	bne.n	801037a <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 801035e:	687b      	ldr	r3, [r7, #4]
 8010360:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010364:	6a1b      	ldr	r3, [r3, #32]
 8010366:	2b00      	cmp	r3, #0
 8010368:	d007      	beq.n	801037a <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 801036a:	687b      	ldr	r3, [r7, #4]
 801036c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010370:	6a1b      	ldr	r3, [r3, #32]
 8010372:	78fa      	ldrb	r2, [r7, #3]
 8010374:	4611      	mov	r1, r2
 8010376:	6878      	ldr	r0, [r7, #4]
 8010378:	4798      	blx	r3
    }
  }

  return USBD_OK;
 801037a:	2300      	movs	r3, #0
}
 801037c:	4618      	mov	r0, r3
 801037e:	3708      	adds	r7, #8
 8010380:	46bd      	mov	sp, r7
 8010382:	bd80      	pop	{r7, pc}

08010384 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8010384:	b580      	push	{r7, lr}
 8010386:	b082      	sub	sp, #8
 8010388:	af00      	add	r7, sp, #0
 801038a:	6078      	str	r0, [r7, #4]
 801038c:	460b      	mov	r3, r1
 801038e:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8010390:	687b      	ldr	r3, [r7, #4]
 8010392:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010396:	2b00      	cmp	r3, #0
 8010398:	d101      	bne.n	801039e <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 801039a:	2303      	movs	r3, #3
 801039c:	e014      	b.n	80103c8 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801039e:	687b      	ldr	r3, [r7, #4]
 80103a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80103a4:	b2db      	uxtb	r3, r3
 80103a6:	2b03      	cmp	r3, #3
 80103a8:	d10d      	bne.n	80103c6 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 80103aa:	687b      	ldr	r3, [r7, #4]
 80103ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80103b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80103b2:	2b00      	cmp	r3, #0
 80103b4:	d007      	beq.n	80103c6 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 80103b6:	687b      	ldr	r3, [r7, #4]
 80103b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80103bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80103be:	78fa      	ldrb	r2, [r7, #3]
 80103c0:	4611      	mov	r1, r2
 80103c2:	6878      	ldr	r0, [r7, #4]
 80103c4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80103c6:	2300      	movs	r3, #0
}
 80103c8:	4618      	mov	r0, r3
 80103ca:	3708      	adds	r7, #8
 80103cc:	46bd      	mov	sp, r7
 80103ce:	bd80      	pop	{r7, pc}

080103d0 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80103d0:	b480      	push	{r7}
 80103d2:	b083      	sub	sp, #12
 80103d4:	af00      	add	r7, sp, #0
 80103d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80103d8:	2300      	movs	r3, #0
}
 80103da:	4618      	mov	r0, r3
 80103dc:	370c      	adds	r7, #12
 80103de:	46bd      	mov	sp, r7
 80103e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103e4:	4770      	bx	lr

080103e6 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80103e6:	b580      	push	{r7, lr}
 80103e8:	b082      	sub	sp, #8
 80103ea:	af00      	add	r7, sp, #0
 80103ec:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80103ee:	687b      	ldr	r3, [r7, #4]
 80103f0:	2201      	movs	r2, #1
 80103f2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 80103f6:	687b      	ldr	r3, [r7, #4]
 80103f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80103fc:	2b00      	cmp	r3, #0
 80103fe:	d009      	beq.n	8010414 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8010400:	687b      	ldr	r3, [r7, #4]
 8010402:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010406:	685b      	ldr	r3, [r3, #4]
 8010408:	687a      	ldr	r2, [r7, #4]
 801040a:	6852      	ldr	r2, [r2, #4]
 801040c:	b2d2      	uxtb	r2, r2
 801040e:	4611      	mov	r1, r2
 8010410:	6878      	ldr	r0, [r7, #4]
 8010412:	4798      	blx	r3
  }

  return USBD_OK;
 8010414:	2300      	movs	r3, #0
}
 8010416:	4618      	mov	r0, r3
 8010418:	3708      	adds	r7, #8
 801041a:	46bd      	mov	sp, r7
 801041c:	bd80      	pop	{r7, pc}

0801041e <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 801041e:	b480      	push	{r7}
 8010420:	b087      	sub	sp, #28
 8010422:	af00      	add	r7, sp, #0
 8010424:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8010426:	687b      	ldr	r3, [r7, #4]
 8010428:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 801042a:	697b      	ldr	r3, [r7, #20]
 801042c:	781b      	ldrb	r3, [r3, #0]
 801042e:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8010430:	697b      	ldr	r3, [r7, #20]
 8010432:	3301      	adds	r3, #1
 8010434:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8010436:	697b      	ldr	r3, [r7, #20]
 8010438:	781b      	ldrb	r3, [r3, #0]
 801043a:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 801043c:	8a3b      	ldrh	r3, [r7, #16]
 801043e:	021b      	lsls	r3, r3, #8
 8010440:	b21a      	sxth	r2, r3
 8010442:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8010446:	4313      	orrs	r3, r2
 8010448:	b21b      	sxth	r3, r3
 801044a:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 801044c:	89fb      	ldrh	r3, [r7, #14]
}
 801044e:	4618      	mov	r0, r3
 8010450:	371c      	adds	r7, #28
 8010452:	46bd      	mov	sp, r7
 8010454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010458:	4770      	bx	lr
	...

0801045c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801045c:	b580      	push	{r7, lr}
 801045e:	b084      	sub	sp, #16
 8010460:	af00      	add	r7, sp, #0
 8010462:	6078      	str	r0, [r7, #4]
 8010464:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8010466:	2300      	movs	r3, #0
 8010468:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801046a:	683b      	ldr	r3, [r7, #0]
 801046c:	781b      	ldrb	r3, [r3, #0]
 801046e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8010472:	2b40      	cmp	r3, #64	; 0x40
 8010474:	d005      	beq.n	8010482 <USBD_StdDevReq+0x26>
 8010476:	2b40      	cmp	r3, #64	; 0x40
 8010478:	d853      	bhi.n	8010522 <USBD_StdDevReq+0xc6>
 801047a:	2b00      	cmp	r3, #0
 801047c:	d00b      	beq.n	8010496 <USBD_StdDevReq+0x3a>
 801047e:	2b20      	cmp	r3, #32
 8010480:	d14f      	bne.n	8010522 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8010482:	687b      	ldr	r3, [r7, #4]
 8010484:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010488:	689b      	ldr	r3, [r3, #8]
 801048a:	6839      	ldr	r1, [r7, #0]
 801048c:	6878      	ldr	r0, [r7, #4]
 801048e:	4798      	blx	r3
 8010490:	4603      	mov	r3, r0
 8010492:	73fb      	strb	r3, [r7, #15]
      break;
 8010494:	e04a      	b.n	801052c <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8010496:	683b      	ldr	r3, [r7, #0]
 8010498:	785b      	ldrb	r3, [r3, #1]
 801049a:	2b09      	cmp	r3, #9
 801049c:	d83b      	bhi.n	8010516 <USBD_StdDevReq+0xba>
 801049e:	a201      	add	r2, pc, #4	; (adr r2, 80104a4 <USBD_StdDevReq+0x48>)
 80104a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80104a4:	080104f9 	.word	0x080104f9
 80104a8:	0801050d 	.word	0x0801050d
 80104ac:	08010517 	.word	0x08010517
 80104b0:	08010503 	.word	0x08010503
 80104b4:	08010517 	.word	0x08010517
 80104b8:	080104d7 	.word	0x080104d7
 80104bc:	080104cd 	.word	0x080104cd
 80104c0:	08010517 	.word	0x08010517
 80104c4:	080104ef 	.word	0x080104ef
 80104c8:	080104e1 	.word	0x080104e1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80104cc:	6839      	ldr	r1, [r7, #0]
 80104ce:	6878      	ldr	r0, [r7, #4]
 80104d0:	f000 f9de 	bl	8010890 <USBD_GetDescriptor>
          break;
 80104d4:	e024      	b.n	8010520 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80104d6:	6839      	ldr	r1, [r7, #0]
 80104d8:	6878      	ldr	r0, [r7, #4]
 80104da:	f000 fb43 	bl	8010b64 <USBD_SetAddress>
          break;
 80104de:	e01f      	b.n	8010520 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80104e0:	6839      	ldr	r1, [r7, #0]
 80104e2:	6878      	ldr	r0, [r7, #4]
 80104e4:	f000 fb82 	bl	8010bec <USBD_SetConfig>
 80104e8:	4603      	mov	r3, r0
 80104ea:	73fb      	strb	r3, [r7, #15]
          break;
 80104ec:	e018      	b.n	8010520 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80104ee:	6839      	ldr	r1, [r7, #0]
 80104f0:	6878      	ldr	r0, [r7, #4]
 80104f2:	f000 fc21 	bl	8010d38 <USBD_GetConfig>
          break;
 80104f6:	e013      	b.n	8010520 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80104f8:	6839      	ldr	r1, [r7, #0]
 80104fa:	6878      	ldr	r0, [r7, #4]
 80104fc:	f000 fc52 	bl	8010da4 <USBD_GetStatus>
          break;
 8010500:	e00e      	b.n	8010520 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8010502:	6839      	ldr	r1, [r7, #0]
 8010504:	6878      	ldr	r0, [r7, #4]
 8010506:	f000 fc81 	bl	8010e0c <USBD_SetFeature>
          break;
 801050a:	e009      	b.n	8010520 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 801050c:	6839      	ldr	r1, [r7, #0]
 801050e:	6878      	ldr	r0, [r7, #4]
 8010510:	f000 fc90 	bl	8010e34 <USBD_ClrFeature>
          break;
 8010514:	e004      	b.n	8010520 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8010516:	6839      	ldr	r1, [r7, #0]
 8010518:	6878      	ldr	r0, [r7, #4]
 801051a:	f000 fce7 	bl	8010eec <USBD_CtlError>
          break;
 801051e:	bf00      	nop
      }
      break;
 8010520:	e004      	b.n	801052c <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8010522:	6839      	ldr	r1, [r7, #0]
 8010524:	6878      	ldr	r0, [r7, #4]
 8010526:	f000 fce1 	bl	8010eec <USBD_CtlError>
      break;
 801052a:	bf00      	nop
  }

  return ret;
 801052c:	7bfb      	ldrb	r3, [r7, #15]
}
 801052e:	4618      	mov	r0, r3
 8010530:	3710      	adds	r7, #16
 8010532:	46bd      	mov	sp, r7
 8010534:	bd80      	pop	{r7, pc}
 8010536:	bf00      	nop

08010538 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010538:	b580      	push	{r7, lr}
 801053a:	b084      	sub	sp, #16
 801053c:	af00      	add	r7, sp, #0
 801053e:	6078      	str	r0, [r7, #4]
 8010540:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8010542:	2300      	movs	r3, #0
 8010544:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8010546:	683b      	ldr	r3, [r7, #0]
 8010548:	781b      	ldrb	r3, [r3, #0]
 801054a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801054e:	2b40      	cmp	r3, #64	; 0x40
 8010550:	d005      	beq.n	801055e <USBD_StdItfReq+0x26>
 8010552:	2b40      	cmp	r3, #64	; 0x40
 8010554:	d82f      	bhi.n	80105b6 <USBD_StdItfReq+0x7e>
 8010556:	2b00      	cmp	r3, #0
 8010558:	d001      	beq.n	801055e <USBD_StdItfReq+0x26>
 801055a:	2b20      	cmp	r3, #32
 801055c:	d12b      	bne.n	80105b6 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 801055e:	687b      	ldr	r3, [r7, #4]
 8010560:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010564:	b2db      	uxtb	r3, r3
 8010566:	3b01      	subs	r3, #1
 8010568:	2b02      	cmp	r3, #2
 801056a:	d81d      	bhi.n	80105a8 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 801056c:	683b      	ldr	r3, [r7, #0]
 801056e:	889b      	ldrh	r3, [r3, #4]
 8010570:	b2db      	uxtb	r3, r3
 8010572:	2b01      	cmp	r3, #1
 8010574:	d813      	bhi.n	801059e <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8010576:	687b      	ldr	r3, [r7, #4]
 8010578:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801057c:	689b      	ldr	r3, [r3, #8]
 801057e:	6839      	ldr	r1, [r7, #0]
 8010580:	6878      	ldr	r0, [r7, #4]
 8010582:	4798      	blx	r3
 8010584:	4603      	mov	r3, r0
 8010586:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8010588:	683b      	ldr	r3, [r7, #0]
 801058a:	88db      	ldrh	r3, [r3, #6]
 801058c:	2b00      	cmp	r3, #0
 801058e:	d110      	bne.n	80105b2 <USBD_StdItfReq+0x7a>
 8010590:	7bfb      	ldrb	r3, [r7, #15]
 8010592:	2b00      	cmp	r3, #0
 8010594:	d10d      	bne.n	80105b2 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8010596:	6878      	ldr	r0, [r7, #4]
 8010598:	f000 fd73 	bl	8011082 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 801059c:	e009      	b.n	80105b2 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 801059e:	6839      	ldr	r1, [r7, #0]
 80105a0:	6878      	ldr	r0, [r7, #4]
 80105a2:	f000 fca3 	bl	8010eec <USBD_CtlError>
          break;
 80105a6:	e004      	b.n	80105b2 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 80105a8:	6839      	ldr	r1, [r7, #0]
 80105aa:	6878      	ldr	r0, [r7, #4]
 80105ac:	f000 fc9e 	bl	8010eec <USBD_CtlError>
          break;
 80105b0:	e000      	b.n	80105b4 <USBD_StdItfReq+0x7c>
          break;
 80105b2:	bf00      	nop
      }
      break;
 80105b4:	e004      	b.n	80105c0 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 80105b6:	6839      	ldr	r1, [r7, #0]
 80105b8:	6878      	ldr	r0, [r7, #4]
 80105ba:	f000 fc97 	bl	8010eec <USBD_CtlError>
      break;
 80105be:	bf00      	nop
  }

  return ret;
 80105c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80105c2:	4618      	mov	r0, r3
 80105c4:	3710      	adds	r7, #16
 80105c6:	46bd      	mov	sp, r7
 80105c8:	bd80      	pop	{r7, pc}

080105ca <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80105ca:	b580      	push	{r7, lr}
 80105cc:	b084      	sub	sp, #16
 80105ce:	af00      	add	r7, sp, #0
 80105d0:	6078      	str	r0, [r7, #4]
 80105d2:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80105d4:	2300      	movs	r3, #0
 80105d6:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 80105d8:	683b      	ldr	r3, [r7, #0]
 80105da:	889b      	ldrh	r3, [r3, #4]
 80105dc:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80105de:	683b      	ldr	r3, [r7, #0]
 80105e0:	781b      	ldrb	r3, [r3, #0]
 80105e2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80105e6:	2b40      	cmp	r3, #64	; 0x40
 80105e8:	d007      	beq.n	80105fa <USBD_StdEPReq+0x30>
 80105ea:	2b40      	cmp	r3, #64	; 0x40
 80105ec:	f200 8145 	bhi.w	801087a <USBD_StdEPReq+0x2b0>
 80105f0:	2b00      	cmp	r3, #0
 80105f2:	d00c      	beq.n	801060e <USBD_StdEPReq+0x44>
 80105f4:	2b20      	cmp	r3, #32
 80105f6:	f040 8140 	bne.w	801087a <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80105fa:	687b      	ldr	r3, [r7, #4]
 80105fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010600:	689b      	ldr	r3, [r3, #8]
 8010602:	6839      	ldr	r1, [r7, #0]
 8010604:	6878      	ldr	r0, [r7, #4]
 8010606:	4798      	blx	r3
 8010608:	4603      	mov	r3, r0
 801060a:	73fb      	strb	r3, [r7, #15]
      break;
 801060c:	e13a      	b.n	8010884 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801060e:	683b      	ldr	r3, [r7, #0]
 8010610:	785b      	ldrb	r3, [r3, #1]
 8010612:	2b03      	cmp	r3, #3
 8010614:	d007      	beq.n	8010626 <USBD_StdEPReq+0x5c>
 8010616:	2b03      	cmp	r3, #3
 8010618:	f300 8129 	bgt.w	801086e <USBD_StdEPReq+0x2a4>
 801061c:	2b00      	cmp	r3, #0
 801061e:	d07f      	beq.n	8010720 <USBD_StdEPReq+0x156>
 8010620:	2b01      	cmp	r3, #1
 8010622:	d03c      	beq.n	801069e <USBD_StdEPReq+0xd4>
 8010624:	e123      	b.n	801086e <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8010626:	687b      	ldr	r3, [r7, #4]
 8010628:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801062c:	b2db      	uxtb	r3, r3
 801062e:	2b02      	cmp	r3, #2
 8010630:	d002      	beq.n	8010638 <USBD_StdEPReq+0x6e>
 8010632:	2b03      	cmp	r3, #3
 8010634:	d016      	beq.n	8010664 <USBD_StdEPReq+0x9a>
 8010636:	e02c      	b.n	8010692 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8010638:	7bbb      	ldrb	r3, [r7, #14]
 801063a:	2b00      	cmp	r3, #0
 801063c:	d00d      	beq.n	801065a <USBD_StdEPReq+0x90>
 801063e:	7bbb      	ldrb	r3, [r7, #14]
 8010640:	2b80      	cmp	r3, #128	; 0x80
 8010642:	d00a      	beq.n	801065a <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8010644:	7bbb      	ldrb	r3, [r7, #14]
 8010646:	4619      	mov	r1, r3
 8010648:	6878      	ldr	r0, [r7, #4]
 801064a:	f001 fa6d 	bl	8011b28 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 801064e:	2180      	movs	r1, #128	; 0x80
 8010650:	6878      	ldr	r0, [r7, #4]
 8010652:	f001 fa69 	bl	8011b28 <USBD_LL_StallEP>
 8010656:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8010658:	e020      	b.n	801069c <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 801065a:	6839      	ldr	r1, [r7, #0]
 801065c:	6878      	ldr	r0, [r7, #4]
 801065e:	f000 fc45 	bl	8010eec <USBD_CtlError>
              break;
 8010662:	e01b      	b.n	801069c <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8010664:	683b      	ldr	r3, [r7, #0]
 8010666:	885b      	ldrh	r3, [r3, #2]
 8010668:	2b00      	cmp	r3, #0
 801066a:	d10e      	bne.n	801068a <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 801066c:	7bbb      	ldrb	r3, [r7, #14]
 801066e:	2b00      	cmp	r3, #0
 8010670:	d00b      	beq.n	801068a <USBD_StdEPReq+0xc0>
 8010672:	7bbb      	ldrb	r3, [r7, #14]
 8010674:	2b80      	cmp	r3, #128	; 0x80
 8010676:	d008      	beq.n	801068a <USBD_StdEPReq+0xc0>
 8010678:	683b      	ldr	r3, [r7, #0]
 801067a:	88db      	ldrh	r3, [r3, #6]
 801067c:	2b00      	cmp	r3, #0
 801067e:	d104      	bne.n	801068a <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8010680:	7bbb      	ldrb	r3, [r7, #14]
 8010682:	4619      	mov	r1, r3
 8010684:	6878      	ldr	r0, [r7, #4]
 8010686:	f001 fa4f 	bl	8011b28 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 801068a:	6878      	ldr	r0, [r7, #4]
 801068c:	f000 fcf9 	bl	8011082 <USBD_CtlSendStatus>

              break;
 8010690:	e004      	b.n	801069c <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8010692:	6839      	ldr	r1, [r7, #0]
 8010694:	6878      	ldr	r0, [r7, #4]
 8010696:	f000 fc29 	bl	8010eec <USBD_CtlError>
              break;
 801069a:	bf00      	nop
          }
          break;
 801069c:	e0ec      	b.n	8010878 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 801069e:	687b      	ldr	r3, [r7, #4]
 80106a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80106a4:	b2db      	uxtb	r3, r3
 80106a6:	2b02      	cmp	r3, #2
 80106a8:	d002      	beq.n	80106b0 <USBD_StdEPReq+0xe6>
 80106aa:	2b03      	cmp	r3, #3
 80106ac:	d016      	beq.n	80106dc <USBD_StdEPReq+0x112>
 80106ae:	e030      	b.n	8010712 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80106b0:	7bbb      	ldrb	r3, [r7, #14]
 80106b2:	2b00      	cmp	r3, #0
 80106b4:	d00d      	beq.n	80106d2 <USBD_StdEPReq+0x108>
 80106b6:	7bbb      	ldrb	r3, [r7, #14]
 80106b8:	2b80      	cmp	r3, #128	; 0x80
 80106ba:	d00a      	beq.n	80106d2 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80106bc:	7bbb      	ldrb	r3, [r7, #14]
 80106be:	4619      	mov	r1, r3
 80106c0:	6878      	ldr	r0, [r7, #4]
 80106c2:	f001 fa31 	bl	8011b28 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80106c6:	2180      	movs	r1, #128	; 0x80
 80106c8:	6878      	ldr	r0, [r7, #4]
 80106ca:	f001 fa2d 	bl	8011b28 <USBD_LL_StallEP>
 80106ce:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80106d0:	e025      	b.n	801071e <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 80106d2:	6839      	ldr	r1, [r7, #0]
 80106d4:	6878      	ldr	r0, [r7, #4]
 80106d6:	f000 fc09 	bl	8010eec <USBD_CtlError>
              break;
 80106da:	e020      	b.n	801071e <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80106dc:	683b      	ldr	r3, [r7, #0]
 80106de:	885b      	ldrh	r3, [r3, #2]
 80106e0:	2b00      	cmp	r3, #0
 80106e2:	d11b      	bne.n	801071c <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80106e4:	7bbb      	ldrb	r3, [r7, #14]
 80106e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80106ea:	2b00      	cmp	r3, #0
 80106ec:	d004      	beq.n	80106f8 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80106ee:	7bbb      	ldrb	r3, [r7, #14]
 80106f0:	4619      	mov	r1, r3
 80106f2:	6878      	ldr	r0, [r7, #4]
 80106f4:	f001 fa37 	bl	8011b66 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80106f8:	6878      	ldr	r0, [r7, #4]
 80106fa:	f000 fcc2 	bl	8011082 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80106fe:	687b      	ldr	r3, [r7, #4]
 8010700:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010704:	689b      	ldr	r3, [r3, #8]
 8010706:	6839      	ldr	r1, [r7, #0]
 8010708:	6878      	ldr	r0, [r7, #4]
 801070a:	4798      	blx	r3
 801070c:	4603      	mov	r3, r0
 801070e:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8010710:	e004      	b.n	801071c <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8010712:	6839      	ldr	r1, [r7, #0]
 8010714:	6878      	ldr	r0, [r7, #4]
 8010716:	f000 fbe9 	bl	8010eec <USBD_CtlError>
              break;
 801071a:	e000      	b.n	801071e <USBD_StdEPReq+0x154>
              break;
 801071c:	bf00      	nop
          }
          break;
 801071e:	e0ab      	b.n	8010878 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8010720:	687b      	ldr	r3, [r7, #4]
 8010722:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010726:	b2db      	uxtb	r3, r3
 8010728:	2b02      	cmp	r3, #2
 801072a:	d002      	beq.n	8010732 <USBD_StdEPReq+0x168>
 801072c:	2b03      	cmp	r3, #3
 801072e:	d032      	beq.n	8010796 <USBD_StdEPReq+0x1cc>
 8010730:	e097      	b.n	8010862 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8010732:	7bbb      	ldrb	r3, [r7, #14]
 8010734:	2b00      	cmp	r3, #0
 8010736:	d007      	beq.n	8010748 <USBD_StdEPReq+0x17e>
 8010738:	7bbb      	ldrb	r3, [r7, #14]
 801073a:	2b80      	cmp	r3, #128	; 0x80
 801073c:	d004      	beq.n	8010748 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 801073e:	6839      	ldr	r1, [r7, #0]
 8010740:	6878      	ldr	r0, [r7, #4]
 8010742:	f000 fbd3 	bl	8010eec <USBD_CtlError>
                break;
 8010746:	e091      	b.n	801086c <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8010748:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801074c:	2b00      	cmp	r3, #0
 801074e:	da0b      	bge.n	8010768 <USBD_StdEPReq+0x19e>
 8010750:	7bbb      	ldrb	r3, [r7, #14]
 8010752:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8010756:	4613      	mov	r3, r2
 8010758:	009b      	lsls	r3, r3, #2
 801075a:	4413      	add	r3, r2
 801075c:	009b      	lsls	r3, r3, #2
 801075e:	3310      	adds	r3, #16
 8010760:	687a      	ldr	r2, [r7, #4]
 8010762:	4413      	add	r3, r2
 8010764:	3304      	adds	r3, #4
 8010766:	e00b      	b.n	8010780 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8010768:	7bbb      	ldrb	r3, [r7, #14]
 801076a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801076e:	4613      	mov	r3, r2
 8010770:	009b      	lsls	r3, r3, #2
 8010772:	4413      	add	r3, r2
 8010774:	009b      	lsls	r3, r3, #2
 8010776:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 801077a:	687a      	ldr	r2, [r7, #4]
 801077c:	4413      	add	r3, r2
 801077e:	3304      	adds	r3, #4
 8010780:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8010782:	68bb      	ldr	r3, [r7, #8]
 8010784:	2200      	movs	r2, #0
 8010786:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8010788:	68bb      	ldr	r3, [r7, #8]
 801078a:	2202      	movs	r2, #2
 801078c:	4619      	mov	r1, r3
 801078e:	6878      	ldr	r0, [r7, #4]
 8010790:	f000 fc1d 	bl	8010fce <USBD_CtlSendData>
              break;
 8010794:	e06a      	b.n	801086c <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8010796:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801079a:	2b00      	cmp	r3, #0
 801079c:	da11      	bge.n	80107c2 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 801079e:	7bbb      	ldrb	r3, [r7, #14]
 80107a0:	f003 020f 	and.w	r2, r3, #15
 80107a4:	6879      	ldr	r1, [r7, #4]
 80107a6:	4613      	mov	r3, r2
 80107a8:	009b      	lsls	r3, r3, #2
 80107aa:	4413      	add	r3, r2
 80107ac:	009b      	lsls	r3, r3, #2
 80107ae:	440b      	add	r3, r1
 80107b0:	3324      	adds	r3, #36	; 0x24
 80107b2:	881b      	ldrh	r3, [r3, #0]
 80107b4:	2b00      	cmp	r3, #0
 80107b6:	d117      	bne.n	80107e8 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 80107b8:	6839      	ldr	r1, [r7, #0]
 80107ba:	6878      	ldr	r0, [r7, #4]
 80107bc:	f000 fb96 	bl	8010eec <USBD_CtlError>
                  break;
 80107c0:	e054      	b.n	801086c <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80107c2:	7bbb      	ldrb	r3, [r7, #14]
 80107c4:	f003 020f 	and.w	r2, r3, #15
 80107c8:	6879      	ldr	r1, [r7, #4]
 80107ca:	4613      	mov	r3, r2
 80107cc:	009b      	lsls	r3, r3, #2
 80107ce:	4413      	add	r3, r2
 80107d0:	009b      	lsls	r3, r3, #2
 80107d2:	440b      	add	r3, r1
 80107d4:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80107d8:	881b      	ldrh	r3, [r3, #0]
 80107da:	2b00      	cmp	r3, #0
 80107dc:	d104      	bne.n	80107e8 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 80107de:	6839      	ldr	r1, [r7, #0]
 80107e0:	6878      	ldr	r0, [r7, #4]
 80107e2:	f000 fb83 	bl	8010eec <USBD_CtlError>
                  break;
 80107e6:	e041      	b.n	801086c <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80107e8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80107ec:	2b00      	cmp	r3, #0
 80107ee:	da0b      	bge.n	8010808 <USBD_StdEPReq+0x23e>
 80107f0:	7bbb      	ldrb	r3, [r7, #14]
 80107f2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80107f6:	4613      	mov	r3, r2
 80107f8:	009b      	lsls	r3, r3, #2
 80107fa:	4413      	add	r3, r2
 80107fc:	009b      	lsls	r3, r3, #2
 80107fe:	3310      	adds	r3, #16
 8010800:	687a      	ldr	r2, [r7, #4]
 8010802:	4413      	add	r3, r2
 8010804:	3304      	adds	r3, #4
 8010806:	e00b      	b.n	8010820 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8010808:	7bbb      	ldrb	r3, [r7, #14]
 801080a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801080e:	4613      	mov	r3, r2
 8010810:	009b      	lsls	r3, r3, #2
 8010812:	4413      	add	r3, r2
 8010814:	009b      	lsls	r3, r3, #2
 8010816:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 801081a:	687a      	ldr	r2, [r7, #4]
 801081c:	4413      	add	r3, r2
 801081e:	3304      	adds	r3, #4
 8010820:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8010822:	7bbb      	ldrb	r3, [r7, #14]
 8010824:	2b00      	cmp	r3, #0
 8010826:	d002      	beq.n	801082e <USBD_StdEPReq+0x264>
 8010828:	7bbb      	ldrb	r3, [r7, #14]
 801082a:	2b80      	cmp	r3, #128	; 0x80
 801082c:	d103      	bne.n	8010836 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 801082e:	68bb      	ldr	r3, [r7, #8]
 8010830:	2200      	movs	r2, #0
 8010832:	601a      	str	r2, [r3, #0]
 8010834:	e00e      	b.n	8010854 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8010836:	7bbb      	ldrb	r3, [r7, #14]
 8010838:	4619      	mov	r1, r3
 801083a:	6878      	ldr	r0, [r7, #4]
 801083c:	f001 f9b2 	bl	8011ba4 <USBD_LL_IsStallEP>
 8010840:	4603      	mov	r3, r0
 8010842:	2b00      	cmp	r3, #0
 8010844:	d003      	beq.n	801084e <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8010846:	68bb      	ldr	r3, [r7, #8]
 8010848:	2201      	movs	r2, #1
 801084a:	601a      	str	r2, [r3, #0]
 801084c:	e002      	b.n	8010854 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 801084e:	68bb      	ldr	r3, [r7, #8]
 8010850:	2200      	movs	r2, #0
 8010852:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8010854:	68bb      	ldr	r3, [r7, #8]
 8010856:	2202      	movs	r2, #2
 8010858:	4619      	mov	r1, r3
 801085a:	6878      	ldr	r0, [r7, #4]
 801085c:	f000 fbb7 	bl	8010fce <USBD_CtlSendData>
              break;
 8010860:	e004      	b.n	801086c <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8010862:	6839      	ldr	r1, [r7, #0]
 8010864:	6878      	ldr	r0, [r7, #4]
 8010866:	f000 fb41 	bl	8010eec <USBD_CtlError>
              break;
 801086a:	bf00      	nop
          }
          break;
 801086c:	e004      	b.n	8010878 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 801086e:	6839      	ldr	r1, [r7, #0]
 8010870:	6878      	ldr	r0, [r7, #4]
 8010872:	f000 fb3b 	bl	8010eec <USBD_CtlError>
          break;
 8010876:	bf00      	nop
      }
      break;
 8010878:	e004      	b.n	8010884 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 801087a:	6839      	ldr	r1, [r7, #0]
 801087c:	6878      	ldr	r0, [r7, #4]
 801087e:	f000 fb35 	bl	8010eec <USBD_CtlError>
      break;
 8010882:	bf00      	nop
  }

  return ret;
 8010884:	7bfb      	ldrb	r3, [r7, #15]
}
 8010886:	4618      	mov	r0, r3
 8010888:	3710      	adds	r7, #16
 801088a:	46bd      	mov	sp, r7
 801088c:	bd80      	pop	{r7, pc}
	...

08010890 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010890:	b580      	push	{r7, lr}
 8010892:	b084      	sub	sp, #16
 8010894:	af00      	add	r7, sp, #0
 8010896:	6078      	str	r0, [r7, #4]
 8010898:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 801089a:	2300      	movs	r3, #0
 801089c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 801089e:	2300      	movs	r3, #0
 80108a0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80108a2:	2300      	movs	r3, #0
 80108a4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80108a6:	683b      	ldr	r3, [r7, #0]
 80108a8:	885b      	ldrh	r3, [r3, #2]
 80108aa:	0a1b      	lsrs	r3, r3, #8
 80108ac:	b29b      	uxth	r3, r3
 80108ae:	3b01      	subs	r3, #1
 80108b0:	2b06      	cmp	r3, #6
 80108b2:	f200 8128 	bhi.w	8010b06 <USBD_GetDescriptor+0x276>
 80108b6:	a201      	add	r2, pc, #4	; (adr r2, 80108bc <USBD_GetDescriptor+0x2c>)
 80108b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80108bc:	080108d9 	.word	0x080108d9
 80108c0:	080108f1 	.word	0x080108f1
 80108c4:	08010931 	.word	0x08010931
 80108c8:	08010b07 	.word	0x08010b07
 80108cc:	08010b07 	.word	0x08010b07
 80108d0:	08010aa7 	.word	0x08010aa7
 80108d4:	08010ad3 	.word	0x08010ad3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80108d8:	687b      	ldr	r3, [r7, #4]
 80108da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80108de:	681b      	ldr	r3, [r3, #0]
 80108e0:	687a      	ldr	r2, [r7, #4]
 80108e2:	7c12      	ldrb	r2, [r2, #16]
 80108e4:	f107 0108 	add.w	r1, r7, #8
 80108e8:	4610      	mov	r0, r2
 80108ea:	4798      	blx	r3
 80108ec:	60f8      	str	r0, [r7, #12]
      break;
 80108ee:	e112      	b.n	8010b16 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80108f0:	687b      	ldr	r3, [r7, #4]
 80108f2:	7c1b      	ldrb	r3, [r3, #16]
 80108f4:	2b00      	cmp	r3, #0
 80108f6:	d10d      	bne.n	8010914 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80108f8:	687b      	ldr	r3, [r7, #4]
 80108fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80108fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010900:	f107 0208 	add.w	r2, r7, #8
 8010904:	4610      	mov	r0, r2
 8010906:	4798      	blx	r3
 8010908:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801090a:	68fb      	ldr	r3, [r7, #12]
 801090c:	3301      	adds	r3, #1
 801090e:	2202      	movs	r2, #2
 8010910:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8010912:	e100      	b.n	8010b16 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8010914:	687b      	ldr	r3, [r7, #4]
 8010916:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801091a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801091c:	f107 0208 	add.w	r2, r7, #8
 8010920:	4610      	mov	r0, r2
 8010922:	4798      	blx	r3
 8010924:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8010926:	68fb      	ldr	r3, [r7, #12]
 8010928:	3301      	adds	r3, #1
 801092a:	2202      	movs	r2, #2
 801092c:	701a      	strb	r2, [r3, #0]
      break;
 801092e:	e0f2      	b.n	8010b16 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8010930:	683b      	ldr	r3, [r7, #0]
 8010932:	885b      	ldrh	r3, [r3, #2]
 8010934:	b2db      	uxtb	r3, r3
 8010936:	2b05      	cmp	r3, #5
 8010938:	f200 80ac 	bhi.w	8010a94 <USBD_GetDescriptor+0x204>
 801093c:	a201      	add	r2, pc, #4	; (adr r2, 8010944 <USBD_GetDescriptor+0xb4>)
 801093e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010942:	bf00      	nop
 8010944:	0801095d 	.word	0x0801095d
 8010948:	08010991 	.word	0x08010991
 801094c:	080109c5 	.word	0x080109c5
 8010950:	080109f9 	.word	0x080109f9
 8010954:	08010a2d 	.word	0x08010a2d
 8010958:	08010a61 	.word	0x08010a61
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 801095c:	687b      	ldr	r3, [r7, #4]
 801095e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010962:	685b      	ldr	r3, [r3, #4]
 8010964:	2b00      	cmp	r3, #0
 8010966:	d00b      	beq.n	8010980 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8010968:	687b      	ldr	r3, [r7, #4]
 801096a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801096e:	685b      	ldr	r3, [r3, #4]
 8010970:	687a      	ldr	r2, [r7, #4]
 8010972:	7c12      	ldrb	r2, [r2, #16]
 8010974:	f107 0108 	add.w	r1, r7, #8
 8010978:	4610      	mov	r0, r2
 801097a:	4798      	blx	r3
 801097c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801097e:	e091      	b.n	8010aa4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8010980:	6839      	ldr	r1, [r7, #0]
 8010982:	6878      	ldr	r0, [r7, #4]
 8010984:	f000 fab2 	bl	8010eec <USBD_CtlError>
            err++;
 8010988:	7afb      	ldrb	r3, [r7, #11]
 801098a:	3301      	adds	r3, #1
 801098c:	72fb      	strb	r3, [r7, #11]
          break;
 801098e:	e089      	b.n	8010aa4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8010990:	687b      	ldr	r3, [r7, #4]
 8010992:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010996:	689b      	ldr	r3, [r3, #8]
 8010998:	2b00      	cmp	r3, #0
 801099a:	d00b      	beq.n	80109b4 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 801099c:	687b      	ldr	r3, [r7, #4]
 801099e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80109a2:	689b      	ldr	r3, [r3, #8]
 80109a4:	687a      	ldr	r2, [r7, #4]
 80109a6:	7c12      	ldrb	r2, [r2, #16]
 80109a8:	f107 0108 	add.w	r1, r7, #8
 80109ac:	4610      	mov	r0, r2
 80109ae:	4798      	blx	r3
 80109b0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80109b2:	e077      	b.n	8010aa4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80109b4:	6839      	ldr	r1, [r7, #0]
 80109b6:	6878      	ldr	r0, [r7, #4]
 80109b8:	f000 fa98 	bl	8010eec <USBD_CtlError>
            err++;
 80109bc:	7afb      	ldrb	r3, [r7, #11]
 80109be:	3301      	adds	r3, #1
 80109c0:	72fb      	strb	r3, [r7, #11]
          break;
 80109c2:	e06f      	b.n	8010aa4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80109c4:	687b      	ldr	r3, [r7, #4]
 80109c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80109ca:	68db      	ldr	r3, [r3, #12]
 80109cc:	2b00      	cmp	r3, #0
 80109ce:	d00b      	beq.n	80109e8 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80109d0:	687b      	ldr	r3, [r7, #4]
 80109d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80109d6:	68db      	ldr	r3, [r3, #12]
 80109d8:	687a      	ldr	r2, [r7, #4]
 80109da:	7c12      	ldrb	r2, [r2, #16]
 80109dc:	f107 0108 	add.w	r1, r7, #8
 80109e0:	4610      	mov	r0, r2
 80109e2:	4798      	blx	r3
 80109e4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80109e6:	e05d      	b.n	8010aa4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80109e8:	6839      	ldr	r1, [r7, #0]
 80109ea:	6878      	ldr	r0, [r7, #4]
 80109ec:	f000 fa7e 	bl	8010eec <USBD_CtlError>
            err++;
 80109f0:	7afb      	ldrb	r3, [r7, #11]
 80109f2:	3301      	adds	r3, #1
 80109f4:	72fb      	strb	r3, [r7, #11]
          break;
 80109f6:	e055      	b.n	8010aa4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80109f8:	687b      	ldr	r3, [r7, #4]
 80109fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80109fe:	691b      	ldr	r3, [r3, #16]
 8010a00:	2b00      	cmp	r3, #0
 8010a02:	d00b      	beq.n	8010a1c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8010a04:	687b      	ldr	r3, [r7, #4]
 8010a06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010a0a:	691b      	ldr	r3, [r3, #16]
 8010a0c:	687a      	ldr	r2, [r7, #4]
 8010a0e:	7c12      	ldrb	r2, [r2, #16]
 8010a10:	f107 0108 	add.w	r1, r7, #8
 8010a14:	4610      	mov	r0, r2
 8010a16:	4798      	blx	r3
 8010a18:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8010a1a:	e043      	b.n	8010aa4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8010a1c:	6839      	ldr	r1, [r7, #0]
 8010a1e:	6878      	ldr	r0, [r7, #4]
 8010a20:	f000 fa64 	bl	8010eec <USBD_CtlError>
            err++;
 8010a24:	7afb      	ldrb	r3, [r7, #11]
 8010a26:	3301      	adds	r3, #1
 8010a28:	72fb      	strb	r3, [r7, #11]
          break;
 8010a2a:	e03b      	b.n	8010aa4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8010a2c:	687b      	ldr	r3, [r7, #4]
 8010a2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010a32:	695b      	ldr	r3, [r3, #20]
 8010a34:	2b00      	cmp	r3, #0
 8010a36:	d00b      	beq.n	8010a50 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8010a38:	687b      	ldr	r3, [r7, #4]
 8010a3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010a3e:	695b      	ldr	r3, [r3, #20]
 8010a40:	687a      	ldr	r2, [r7, #4]
 8010a42:	7c12      	ldrb	r2, [r2, #16]
 8010a44:	f107 0108 	add.w	r1, r7, #8
 8010a48:	4610      	mov	r0, r2
 8010a4a:	4798      	blx	r3
 8010a4c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8010a4e:	e029      	b.n	8010aa4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8010a50:	6839      	ldr	r1, [r7, #0]
 8010a52:	6878      	ldr	r0, [r7, #4]
 8010a54:	f000 fa4a 	bl	8010eec <USBD_CtlError>
            err++;
 8010a58:	7afb      	ldrb	r3, [r7, #11]
 8010a5a:	3301      	adds	r3, #1
 8010a5c:	72fb      	strb	r3, [r7, #11]
          break;
 8010a5e:	e021      	b.n	8010aa4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8010a60:	687b      	ldr	r3, [r7, #4]
 8010a62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010a66:	699b      	ldr	r3, [r3, #24]
 8010a68:	2b00      	cmp	r3, #0
 8010a6a:	d00b      	beq.n	8010a84 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8010a6c:	687b      	ldr	r3, [r7, #4]
 8010a6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010a72:	699b      	ldr	r3, [r3, #24]
 8010a74:	687a      	ldr	r2, [r7, #4]
 8010a76:	7c12      	ldrb	r2, [r2, #16]
 8010a78:	f107 0108 	add.w	r1, r7, #8
 8010a7c:	4610      	mov	r0, r2
 8010a7e:	4798      	blx	r3
 8010a80:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8010a82:	e00f      	b.n	8010aa4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8010a84:	6839      	ldr	r1, [r7, #0]
 8010a86:	6878      	ldr	r0, [r7, #4]
 8010a88:	f000 fa30 	bl	8010eec <USBD_CtlError>
            err++;
 8010a8c:	7afb      	ldrb	r3, [r7, #11]
 8010a8e:	3301      	adds	r3, #1
 8010a90:	72fb      	strb	r3, [r7, #11]
          break;
 8010a92:	e007      	b.n	8010aa4 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8010a94:	6839      	ldr	r1, [r7, #0]
 8010a96:	6878      	ldr	r0, [r7, #4]
 8010a98:	f000 fa28 	bl	8010eec <USBD_CtlError>
          err++;
 8010a9c:	7afb      	ldrb	r3, [r7, #11]
 8010a9e:	3301      	adds	r3, #1
 8010aa0:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8010aa2:	bf00      	nop
      }
      break;
 8010aa4:	e037      	b.n	8010b16 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8010aa6:	687b      	ldr	r3, [r7, #4]
 8010aa8:	7c1b      	ldrb	r3, [r3, #16]
 8010aaa:	2b00      	cmp	r3, #0
 8010aac:	d109      	bne.n	8010ac2 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8010aae:	687b      	ldr	r3, [r7, #4]
 8010ab0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010ab4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010ab6:	f107 0208 	add.w	r2, r7, #8
 8010aba:	4610      	mov	r0, r2
 8010abc:	4798      	blx	r3
 8010abe:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8010ac0:	e029      	b.n	8010b16 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8010ac2:	6839      	ldr	r1, [r7, #0]
 8010ac4:	6878      	ldr	r0, [r7, #4]
 8010ac6:	f000 fa11 	bl	8010eec <USBD_CtlError>
        err++;
 8010aca:	7afb      	ldrb	r3, [r7, #11]
 8010acc:	3301      	adds	r3, #1
 8010ace:	72fb      	strb	r3, [r7, #11]
      break;
 8010ad0:	e021      	b.n	8010b16 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8010ad2:	687b      	ldr	r3, [r7, #4]
 8010ad4:	7c1b      	ldrb	r3, [r3, #16]
 8010ad6:	2b00      	cmp	r3, #0
 8010ad8:	d10d      	bne.n	8010af6 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8010ada:	687b      	ldr	r3, [r7, #4]
 8010adc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010ae2:	f107 0208 	add.w	r2, r7, #8
 8010ae6:	4610      	mov	r0, r2
 8010ae8:	4798      	blx	r3
 8010aea:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8010aec:	68fb      	ldr	r3, [r7, #12]
 8010aee:	3301      	adds	r3, #1
 8010af0:	2207      	movs	r2, #7
 8010af2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8010af4:	e00f      	b.n	8010b16 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8010af6:	6839      	ldr	r1, [r7, #0]
 8010af8:	6878      	ldr	r0, [r7, #4]
 8010afa:	f000 f9f7 	bl	8010eec <USBD_CtlError>
        err++;
 8010afe:	7afb      	ldrb	r3, [r7, #11]
 8010b00:	3301      	adds	r3, #1
 8010b02:	72fb      	strb	r3, [r7, #11]
      break;
 8010b04:	e007      	b.n	8010b16 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8010b06:	6839      	ldr	r1, [r7, #0]
 8010b08:	6878      	ldr	r0, [r7, #4]
 8010b0a:	f000 f9ef 	bl	8010eec <USBD_CtlError>
      err++;
 8010b0e:	7afb      	ldrb	r3, [r7, #11]
 8010b10:	3301      	adds	r3, #1
 8010b12:	72fb      	strb	r3, [r7, #11]
      break;
 8010b14:	bf00      	nop
  }

  if (err != 0U)
 8010b16:	7afb      	ldrb	r3, [r7, #11]
 8010b18:	2b00      	cmp	r3, #0
 8010b1a:	d11e      	bne.n	8010b5a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8010b1c:	683b      	ldr	r3, [r7, #0]
 8010b1e:	88db      	ldrh	r3, [r3, #6]
 8010b20:	2b00      	cmp	r3, #0
 8010b22:	d016      	beq.n	8010b52 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8010b24:	893b      	ldrh	r3, [r7, #8]
 8010b26:	2b00      	cmp	r3, #0
 8010b28:	d00e      	beq.n	8010b48 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8010b2a:	683b      	ldr	r3, [r7, #0]
 8010b2c:	88da      	ldrh	r2, [r3, #6]
 8010b2e:	893b      	ldrh	r3, [r7, #8]
 8010b30:	4293      	cmp	r3, r2
 8010b32:	bf28      	it	cs
 8010b34:	4613      	movcs	r3, r2
 8010b36:	b29b      	uxth	r3, r3
 8010b38:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8010b3a:	893b      	ldrh	r3, [r7, #8]
 8010b3c:	461a      	mov	r2, r3
 8010b3e:	68f9      	ldr	r1, [r7, #12]
 8010b40:	6878      	ldr	r0, [r7, #4]
 8010b42:	f000 fa44 	bl	8010fce <USBD_CtlSendData>
 8010b46:	e009      	b.n	8010b5c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8010b48:	6839      	ldr	r1, [r7, #0]
 8010b4a:	6878      	ldr	r0, [r7, #4]
 8010b4c:	f000 f9ce 	bl	8010eec <USBD_CtlError>
 8010b50:	e004      	b.n	8010b5c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8010b52:	6878      	ldr	r0, [r7, #4]
 8010b54:	f000 fa95 	bl	8011082 <USBD_CtlSendStatus>
 8010b58:	e000      	b.n	8010b5c <USBD_GetDescriptor+0x2cc>
    return;
 8010b5a:	bf00      	nop
  }
}
 8010b5c:	3710      	adds	r7, #16
 8010b5e:	46bd      	mov	sp, r7
 8010b60:	bd80      	pop	{r7, pc}
 8010b62:	bf00      	nop

08010b64 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010b64:	b580      	push	{r7, lr}
 8010b66:	b084      	sub	sp, #16
 8010b68:	af00      	add	r7, sp, #0
 8010b6a:	6078      	str	r0, [r7, #4]
 8010b6c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8010b6e:	683b      	ldr	r3, [r7, #0]
 8010b70:	889b      	ldrh	r3, [r3, #4]
 8010b72:	2b00      	cmp	r3, #0
 8010b74:	d131      	bne.n	8010bda <USBD_SetAddress+0x76>
 8010b76:	683b      	ldr	r3, [r7, #0]
 8010b78:	88db      	ldrh	r3, [r3, #6]
 8010b7a:	2b00      	cmp	r3, #0
 8010b7c:	d12d      	bne.n	8010bda <USBD_SetAddress+0x76>
 8010b7e:	683b      	ldr	r3, [r7, #0]
 8010b80:	885b      	ldrh	r3, [r3, #2]
 8010b82:	2b7f      	cmp	r3, #127	; 0x7f
 8010b84:	d829      	bhi.n	8010bda <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8010b86:	683b      	ldr	r3, [r7, #0]
 8010b88:	885b      	ldrh	r3, [r3, #2]
 8010b8a:	b2db      	uxtb	r3, r3
 8010b8c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010b90:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010b92:	687b      	ldr	r3, [r7, #4]
 8010b94:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010b98:	b2db      	uxtb	r3, r3
 8010b9a:	2b03      	cmp	r3, #3
 8010b9c:	d104      	bne.n	8010ba8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8010b9e:	6839      	ldr	r1, [r7, #0]
 8010ba0:	6878      	ldr	r0, [r7, #4]
 8010ba2:	f000 f9a3 	bl	8010eec <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010ba6:	e01d      	b.n	8010be4 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8010ba8:	687b      	ldr	r3, [r7, #4]
 8010baa:	7bfa      	ldrb	r2, [r7, #15]
 8010bac:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8010bb0:	7bfb      	ldrb	r3, [r7, #15]
 8010bb2:	4619      	mov	r1, r3
 8010bb4:	6878      	ldr	r0, [r7, #4]
 8010bb6:	f001 f821 	bl	8011bfc <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8010bba:	6878      	ldr	r0, [r7, #4]
 8010bbc:	f000 fa61 	bl	8011082 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8010bc0:	7bfb      	ldrb	r3, [r7, #15]
 8010bc2:	2b00      	cmp	r3, #0
 8010bc4:	d004      	beq.n	8010bd0 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8010bc6:	687b      	ldr	r3, [r7, #4]
 8010bc8:	2202      	movs	r2, #2
 8010bca:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010bce:	e009      	b.n	8010be4 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8010bd0:	687b      	ldr	r3, [r7, #4]
 8010bd2:	2201      	movs	r2, #1
 8010bd4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010bd8:	e004      	b.n	8010be4 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8010bda:	6839      	ldr	r1, [r7, #0]
 8010bdc:	6878      	ldr	r0, [r7, #4]
 8010bde:	f000 f985 	bl	8010eec <USBD_CtlError>
  }
}
 8010be2:	bf00      	nop
 8010be4:	bf00      	nop
 8010be6:	3710      	adds	r7, #16
 8010be8:	46bd      	mov	sp, r7
 8010bea:	bd80      	pop	{r7, pc}

08010bec <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010bec:	b580      	push	{r7, lr}
 8010bee:	b084      	sub	sp, #16
 8010bf0:	af00      	add	r7, sp, #0
 8010bf2:	6078      	str	r0, [r7, #4]
 8010bf4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8010bf6:	2300      	movs	r3, #0
 8010bf8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8010bfa:	683b      	ldr	r3, [r7, #0]
 8010bfc:	885b      	ldrh	r3, [r3, #2]
 8010bfe:	b2da      	uxtb	r2, r3
 8010c00:	4b4c      	ldr	r3, [pc, #304]	; (8010d34 <USBD_SetConfig+0x148>)
 8010c02:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8010c04:	4b4b      	ldr	r3, [pc, #300]	; (8010d34 <USBD_SetConfig+0x148>)
 8010c06:	781b      	ldrb	r3, [r3, #0]
 8010c08:	2b01      	cmp	r3, #1
 8010c0a:	d905      	bls.n	8010c18 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8010c0c:	6839      	ldr	r1, [r7, #0]
 8010c0e:	6878      	ldr	r0, [r7, #4]
 8010c10:	f000 f96c 	bl	8010eec <USBD_CtlError>
    return USBD_FAIL;
 8010c14:	2303      	movs	r3, #3
 8010c16:	e088      	b.n	8010d2a <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8010c18:	687b      	ldr	r3, [r7, #4]
 8010c1a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010c1e:	b2db      	uxtb	r3, r3
 8010c20:	2b02      	cmp	r3, #2
 8010c22:	d002      	beq.n	8010c2a <USBD_SetConfig+0x3e>
 8010c24:	2b03      	cmp	r3, #3
 8010c26:	d025      	beq.n	8010c74 <USBD_SetConfig+0x88>
 8010c28:	e071      	b.n	8010d0e <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8010c2a:	4b42      	ldr	r3, [pc, #264]	; (8010d34 <USBD_SetConfig+0x148>)
 8010c2c:	781b      	ldrb	r3, [r3, #0]
 8010c2e:	2b00      	cmp	r3, #0
 8010c30:	d01c      	beq.n	8010c6c <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8010c32:	4b40      	ldr	r3, [pc, #256]	; (8010d34 <USBD_SetConfig+0x148>)
 8010c34:	781b      	ldrb	r3, [r3, #0]
 8010c36:	461a      	mov	r2, r3
 8010c38:	687b      	ldr	r3, [r7, #4]
 8010c3a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8010c3c:	4b3d      	ldr	r3, [pc, #244]	; (8010d34 <USBD_SetConfig+0x148>)
 8010c3e:	781b      	ldrb	r3, [r3, #0]
 8010c40:	4619      	mov	r1, r3
 8010c42:	6878      	ldr	r0, [r7, #4]
 8010c44:	f7ff f948 	bl	800fed8 <USBD_SetClassConfig>
 8010c48:	4603      	mov	r3, r0
 8010c4a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8010c4c:	7bfb      	ldrb	r3, [r7, #15]
 8010c4e:	2b00      	cmp	r3, #0
 8010c50:	d004      	beq.n	8010c5c <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8010c52:	6839      	ldr	r1, [r7, #0]
 8010c54:	6878      	ldr	r0, [r7, #4]
 8010c56:	f000 f949 	bl	8010eec <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8010c5a:	e065      	b.n	8010d28 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8010c5c:	6878      	ldr	r0, [r7, #4]
 8010c5e:	f000 fa10 	bl	8011082 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8010c62:	687b      	ldr	r3, [r7, #4]
 8010c64:	2203      	movs	r2, #3
 8010c66:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8010c6a:	e05d      	b.n	8010d28 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8010c6c:	6878      	ldr	r0, [r7, #4]
 8010c6e:	f000 fa08 	bl	8011082 <USBD_CtlSendStatus>
      break;
 8010c72:	e059      	b.n	8010d28 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8010c74:	4b2f      	ldr	r3, [pc, #188]	; (8010d34 <USBD_SetConfig+0x148>)
 8010c76:	781b      	ldrb	r3, [r3, #0]
 8010c78:	2b00      	cmp	r3, #0
 8010c7a:	d112      	bne.n	8010ca2 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8010c7c:	687b      	ldr	r3, [r7, #4]
 8010c7e:	2202      	movs	r2, #2
 8010c80:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8010c84:	4b2b      	ldr	r3, [pc, #172]	; (8010d34 <USBD_SetConfig+0x148>)
 8010c86:	781b      	ldrb	r3, [r3, #0]
 8010c88:	461a      	mov	r2, r3
 8010c8a:	687b      	ldr	r3, [r7, #4]
 8010c8c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8010c8e:	4b29      	ldr	r3, [pc, #164]	; (8010d34 <USBD_SetConfig+0x148>)
 8010c90:	781b      	ldrb	r3, [r3, #0]
 8010c92:	4619      	mov	r1, r3
 8010c94:	6878      	ldr	r0, [r7, #4]
 8010c96:	f7ff f93b 	bl	800ff10 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8010c9a:	6878      	ldr	r0, [r7, #4]
 8010c9c:	f000 f9f1 	bl	8011082 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8010ca0:	e042      	b.n	8010d28 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8010ca2:	4b24      	ldr	r3, [pc, #144]	; (8010d34 <USBD_SetConfig+0x148>)
 8010ca4:	781b      	ldrb	r3, [r3, #0]
 8010ca6:	461a      	mov	r2, r3
 8010ca8:	687b      	ldr	r3, [r7, #4]
 8010caa:	685b      	ldr	r3, [r3, #4]
 8010cac:	429a      	cmp	r2, r3
 8010cae:	d02a      	beq.n	8010d06 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8010cb0:	687b      	ldr	r3, [r7, #4]
 8010cb2:	685b      	ldr	r3, [r3, #4]
 8010cb4:	b2db      	uxtb	r3, r3
 8010cb6:	4619      	mov	r1, r3
 8010cb8:	6878      	ldr	r0, [r7, #4]
 8010cba:	f7ff f929 	bl	800ff10 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8010cbe:	4b1d      	ldr	r3, [pc, #116]	; (8010d34 <USBD_SetConfig+0x148>)
 8010cc0:	781b      	ldrb	r3, [r3, #0]
 8010cc2:	461a      	mov	r2, r3
 8010cc4:	687b      	ldr	r3, [r7, #4]
 8010cc6:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8010cc8:	4b1a      	ldr	r3, [pc, #104]	; (8010d34 <USBD_SetConfig+0x148>)
 8010cca:	781b      	ldrb	r3, [r3, #0]
 8010ccc:	4619      	mov	r1, r3
 8010cce:	6878      	ldr	r0, [r7, #4]
 8010cd0:	f7ff f902 	bl	800fed8 <USBD_SetClassConfig>
 8010cd4:	4603      	mov	r3, r0
 8010cd6:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8010cd8:	7bfb      	ldrb	r3, [r7, #15]
 8010cda:	2b00      	cmp	r3, #0
 8010cdc:	d00f      	beq.n	8010cfe <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8010cde:	6839      	ldr	r1, [r7, #0]
 8010ce0:	6878      	ldr	r0, [r7, #4]
 8010ce2:	f000 f903 	bl	8010eec <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8010ce6:	687b      	ldr	r3, [r7, #4]
 8010ce8:	685b      	ldr	r3, [r3, #4]
 8010cea:	b2db      	uxtb	r3, r3
 8010cec:	4619      	mov	r1, r3
 8010cee:	6878      	ldr	r0, [r7, #4]
 8010cf0:	f7ff f90e 	bl	800ff10 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8010cf4:	687b      	ldr	r3, [r7, #4]
 8010cf6:	2202      	movs	r2, #2
 8010cf8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8010cfc:	e014      	b.n	8010d28 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8010cfe:	6878      	ldr	r0, [r7, #4]
 8010d00:	f000 f9bf 	bl	8011082 <USBD_CtlSendStatus>
      break;
 8010d04:	e010      	b.n	8010d28 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8010d06:	6878      	ldr	r0, [r7, #4]
 8010d08:	f000 f9bb 	bl	8011082 <USBD_CtlSendStatus>
      break;
 8010d0c:	e00c      	b.n	8010d28 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8010d0e:	6839      	ldr	r1, [r7, #0]
 8010d10:	6878      	ldr	r0, [r7, #4]
 8010d12:	f000 f8eb 	bl	8010eec <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8010d16:	4b07      	ldr	r3, [pc, #28]	; (8010d34 <USBD_SetConfig+0x148>)
 8010d18:	781b      	ldrb	r3, [r3, #0]
 8010d1a:	4619      	mov	r1, r3
 8010d1c:	6878      	ldr	r0, [r7, #4]
 8010d1e:	f7ff f8f7 	bl	800ff10 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8010d22:	2303      	movs	r3, #3
 8010d24:	73fb      	strb	r3, [r7, #15]
      break;
 8010d26:	bf00      	nop
  }

  return ret;
 8010d28:	7bfb      	ldrb	r3, [r7, #15]
}
 8010d2a:	4618      	mov	r0, r3
 8010d2c:	3710      	adds	r7, #16
 8010d2e:	46bd      	mov	sp, r7
 8010d30:	bd80      	pop	{r7, pc}
 8010d32:	bf00      	nop
 8010d34:	2000043c 	.word	0x2000043c

08010d38 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010d38:	b580      	push	{r7, lr}
 8010d3a:	b082      	sub	sp, #8
 8010d3c:	af00      	add	r7, sp, #0
 8010d3e:	6078      	str	r0, [r7, #4]
 8010d40:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8010d42:	683b      	ldr	r3, [r7, #0]
 8010d44:	88db      	ldrh	r3, [r3, #6]
 8010d46:	2b01      	cmp	r3, #1
 8010d48:	d004      	beq.n	8010d54 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8010d4a:	6839      	ldr	r1, [r7, #0]
 8010d4c:	6878      	ldr	r0, [r7, #4]
 8010d4e:	f000 f8cd 	bl	8010eec <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8010d52:	e023      	b.n	8010d9c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8010d54:	687b      	ldr	r3, [r7, #4]
 8010d56:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010d5a:	b2db      	uxtb	r3, r3
 8010d5c:	2b02      	cmp	r3, #2
 8010d5e:	dc02      	bgt.n	8010d66 <USBD_GetConfig+0x2e>
 8010d60:	2b00      	cmp	r3, #0
 8010d62:	dc03      	bgt.n	8010d6c <USBD_GetConfig+0x34>
 8010d64:	e015      	b.n	8010d92 <USBD_GetConfig+0x5a>
 8010d66:	2b03      	cmp	r3, #3
 8010d68:	d00b      	beq.n	8010d82 <USBD_GetConfig+0x4a>
 8010d6a:	e012      	b.n	8010d92 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8010d6c:	687b      	ldr	r3, [r7, #4]
 8010d6e:	2200      	movs	r2, #0
 8010d70:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8010d72:	687b      	ldr	r3, [r7, #4]
 8010d74:	3308      	adds	r3, #8
 8010d76:	2201      	movs	r2, #1
 8010d78:	4619      	mov	r1, r3
 8010d7a:	6878      	ldr	r0, [r7, #4]
 8010d7c:	f000 f927 	bl	8010fce <USBD_CtlSendData>
        break;
 8010d80:	e00c      	b.n	8010d9c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8010d82:	687b      	ldr	r3, [r7, #4]
 8010d84:	3304      	adds	r3, #4
 8010d86:	2201      	movs	r2, #1
 8010d88:	4619      	mov	r1, r3
 8010d8a:	6878      	ldr	r0, [r7, #4]
 8010d8c:	f000 f91f 	bl	8010fce <USBD_CtlSendData>
        break;
 8010d90:	e004      	b.n	8010d9c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8010d92:	6839      	ldr	r1, [r7, #0]
 8010d94:	6878      	ldr	r0, [r7, #4]
 8010d96:	f000 f8a9 	bl	8010eec <USBD_CtlError>
        break;
 8010d9a:	bf00      	nop
}
 8010d9c:	bf00      	nop
 8010d9e:	3708      	adds	r7, #8
 8010da0:	46bd      	mov	sp, r7
 8010da2:	bd80      	pop	{r7, pc}

08010da4 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010da4:	b580      	push	{r7, lr}
 8010da6:	b082      	sub	sp, #8
 8010da8:	af00      	add	r7, sp, #0
 8010daa:	6078      	str	r0, [r7, #4]
 8010dac:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8010dae:	687b      	ldr	r3, [r7, #4]
 8010db0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010db4:	b2db      	uxtb	r3, r3
 8010db6:	3b01      	subs	r3, #1
 8010db8:	2b02      	cmp	r3, #2
 8010dba:	d81e      	bhi.n	8010dfa <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8010dbc:	683b      	ldr	r3, [r7, #0]
 8010dbe:	88db      	ldrh	r3, [r3, #6]
 8010dc0:	2b02      	cmp	r3, #2
 8010dc2:	d004      	beq.n	8010dce <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8010dc4:	6839      	ldr	r1, [r7, #0]
 8010dc6:	6878      	ldr	r0, [r7, #4]
 8010dc8:	f000 f890 	bl	8010eec <USBD_CtlError>
        break;
 8010dcc:	e01a      	b.n	8010e04 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8010dce:	687b      	ldr	r3, [r7, #4]
 8010dd0:	2201      	movs	r2, #1
 8010dd2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8010dd4:	687b      	ldr	r3, [r7, #4]
 8010dd6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8010dda:	2b00      	cmp	r3, #0
 8010ddc:	d005      	beq.n	8010dea <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8010dde:	687b      	ldr	r3, [r7, #4]
 8010de0:	68db      	ldr	r3, [r3, #12]
 8010de2:	f043 0202 	orr.w	r2, r3, #2
 8010de6:	687b      	ldr	r3, [r7, #4]
 8010de8:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8010dea:	687b      	ldr	r3, [r7, #4]
 8010dec:	330c      	adds	r3, #12
 8010dee:	2202      	movs	r2, #2
 8010df0:	4619      	mov	r1, r3
 8010df2:	6878      	ldr	r0, [r7, #4]
 8010df4:	f000 f8eb 	bl	8010fce <USBD_CtlSendData>
      break;
 8010df8:	e004      	b.n	8010e04 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8010dfa:	6839      	ldr	r1, [r7, #0]
 8010dfc:	6878      	ldr	r0, [r7, #4]
 8010dfe:	f000 f875 	bl	8010eec <USBD_CtlError>
      break;
 8010e02:	bf00      	nop
  }
}
 8010e04:	bf00      	nop
 8010e06:	3708      	adds	r7, #8
 8010e08:	46bd      	mov	sp, r7
 8010e0a:	bd80      	pop	{r7, pc}

08010e0c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010e0c:	b580      	push	{r7, lr}
 8010e0e:	b082      	sub	sp, #8
 8010e10:	af00      	add	r7, sp, #0
 8010e12:	6078      	str	r0, [r7, #4]
 8010e14:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8010e16:	683b      	ldr	r3, [r7, #0]
 8010e18:	885b      	ldrh	r3, [r3, #2]
 8010e1a:	2b01      	cmp	r3, #1
 8010e1c:	d106      	bne.n	8010e2c <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8010e1e:	687b      	ldr	r3, [r7, #4]
 8010e20:	2201      	movs	r2, #1
 8010e22:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8010e26:	6878      	ldr	r0, [r7, #4]
 8010e28:	f000 f92b 	bl	8011082 <USBD_CtlSendStatus>
  }
}
 8010e2c:	bf00      	nop
 8010e2e:	3708      	adds	r7, #8
 8010e30:	46bd      	mov	sp, r7
 8010e32:	bd80      	pop	{r7, pc}

08010e34 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010e34:	b580      	push	{r7, lr}
 8010e36:	b082      	sub	sp, #8
 8010e38:	af00      	add	r7, sp, #0
 8010e3a:	6078      	str	r0, [r7, #4]
 8010e3c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8010e3e:	687b      	ldr	r3, [r7, #4]
 8010e40:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010e44:	b2db      	uxtb	r3, r3
 8010e46:	3b01      	subs	r3, #1
 8010e48:	2b02      	cmp	r3, #2
 8010e4a:	d80b      	bhi.n	8010e64 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8010e4c:	683b      	ldr	r3, [r7, #0]
 8010e4e:	885b      	ldrh	r3, [r3, #2]
 8010e50:	2b01      	cmp	r3, #1
 8010e52:	d10c      	bne.n	8010e6e <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8010e54:	687b      	ldr	r3, [r7, #4]
 8010e56:	2200      	movs	r2, #0
 8010e58:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8010e5c:	6878      	ldr	r0, [r7, #4]
 8010e5e:	f000 f910 	bl	8011082 <USBD_CtlSendStatus>
      }
      break;
 8010e62:	e004      	b.n	8010e6e <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8010e64:	6839      	ldr	r1, [r7, #0]
 8010e66:	6878      	ldr	r0, [r7, #4]
 8010e68:	f000 f840 	bl	8010eec <USBD_CtlError>
      break;
 8010e6c:	e000      	b.n	8010e70 <USBD_ClrFeature+0x3c>
      break;
 8010e6e:	bf00      	nop
  }
}
 8010e70:	bf00      	nop
 8010e72:	3708      	adds	r7, #8
 8010e74:	46bd      	mov	sp, r7
 8010e76:	bd80      	pop	{r7, pc}

08010e78 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8010e78:	b580      	push	{r7, lr}
 8010e7a:	b084      	sub	sp, #16
 8010e7c:	af00      	add	r7, sp, #0
 8010e7e:	6078      	str	r0, [r7, #4]
 8010e80:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8010e82:	683b      	ldr	r3, [r7, #0]
 8010e84:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8010e86:	68fb      	ldr	r3, [r7, #12]
 8010e88:	781a      	ldrb	r2, [r3, #0]
 8010e8a:	687b      	ldr	r3, [r7, #4]
 8010e8c:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8010e8e:	68fb      	ldr	r3, [r7, #12]
 8010e90:	3301      	adds	r3, #1
 8010e92:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8010e94:	68fb      	ldr	r3, [r7, #12]
 8010e96:	781a      	ldrb	r2, [r3, #0]
 8010e98:	687b      	ldr	r3, [r7, #4]
 8010e9a:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8010e9c:	68fb      	ldr	r3, [r7, #12]
 8010e9e:	3301      	adds	r3, #1
 8010ea0:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8010ea2:	68f8      	ldr	r0, [r7, #12]
 8010ea4:	f7ff fabb 	bl	801041e <SWAPBYTE>
 8010ea8:	4603      	mov	r3, r0
 8010eaa:	461a      	mov	r2, r3
 8010eac:	687b      	ldr	r3, [r7, #4]
 8010eae:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8010eb0:	68fb      	ldr	r3, [r7, #12]
 8010eb2:	3301      	adds	r3, #1
 8010eb4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8010eb6:	68fb      	ldr	r3, [r7, #12]
 8010eb8:	3301      	adds	r3, #1
 8010eba:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8010ebc:	68f8      	ldr	r0, [r7, #12]
 8010ebe:	f7ff faae 	bl	801041e <SWAPBYTE>
 8010ec2:	4603      	mov	r3, r0
 8010ec4:	461a      	mov	r2, r3
 8010ec6:	687b      	ldr	r3, [r7, #4]
 8010ec8:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8010eca:	68fb      	ldr	r3, [r7, #12]
 8010ecc:	3301      	adds	r3, #1
 8010ece:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8010ed0:	68fb      	ldr	r3, [r7, #12]
 8010ed2:	3301      	adds	r3, #1
 8010ed4:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8010ed6:	68f8      	ldr	r0, [r7, #12]
 8010ed8:	f7ff faa1 	bl	801041e <SWAPBYTE>
 8010edc:	4603      	mov	r3, r0
 8010ede:	461a      	mov	r2, r3
 8010ee0:	687b      	ldr	r3, [r7, #4]
 8010ee2:	80da      	strh	r2, [r3, #6]
}
 8010ee4:	bf00      	nop
 8010ee6:	3710      	adds	r7, #16
 8010ee8:	46bd      	mov	sp, r7
 8010eea:	bd80      	pop	{r7, pc}

08010eec <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010eec:	b580      	push	{r7, lr}
 8010eee:	b082      	sub	sp, #8
 8010ef0:	af00      	add	r7, sp, #0
 8010ef2:	6078      	str	r0, [r7, #4]
 8010ef4:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8010ef6:	2180      	movs	r1, #128	; 0x80
 8010ef8:	6878      	ldr	r0, [r7, #4]
 8010efa:	f000 fe15 	bl	8011b28 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8010efe:	2100      	movs	r1, #0
 8010f00:	6878      	ldr	r0, [r7, #4]
 8010f02:	f000 fe11 	bl	8011b28 <USBD_LL_StallEP>
}
 8010f06:	bf00      	nop
 8010f08:	3708      	adds	r7, #8
 8010f0a:	46bd      	mov	sp, r7
 8010f0c:	bd80      	pop	{r7, pc}

08010f0e <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8010f0e:	b580      	push	{r7, lr}
 8010f10:	b086      	sub	sp, #24
 8010f12:	af00      	add	r7, sp, #0
 8010f14:	60f8      	str	r0, [r7, #12]
 8010f16:	60b9      	str	r1, [r7, #8]
 8010f18:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8010f1a:	2300      	movs	r3, #0
 8010f1c:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8010f1e:	68fb      	ldr	r3, [r7, #12]
 8010f20:	2b00      	cmp	r3, #0
 8010f22:	d036      	beq.n	8010f92 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8010f24:	68fb      	ldr	r3, [r7, #12]
 8010f26:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8010f28:	6938      	ldr	r0, [r7, #16]
 8010f2a:	f000 f836 	bl	8010f9a <USBD_GetLen>
 8010f2e:	4603      	mov	r3, r0
 8010f30:	3301      	adds	r3, #1
 8010f32:	b29b      	uxth	r3, r3
 8010f34:	005b      	lsls	r3, r3, #1
 8010f36:	b29a      	uxth	r2, r3
 8010f38:	687b      	ldr	r3, [r7, #4]
 8010f3a:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8010f3c:	7dfb      	ldrb	r3, [r7, #23]
 8010f3e:	68ba      	ldr	r2, [r7, #8]
 8010f40:	4413      	add	r3, r2
 8010f42:	687a      	ldr	r2, [r7, #4]
 8010f44:	7812      	ldrb	r2, [r2, #0]
 8010f46:	701a      	strb	r2, [r3, #0]
  idx++;
 8010f48:	7dfb      	ldrb	r3, [r7, #23]
 8010f4a:	3301      	adds	r3, #1
 8010f4c:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8010f4e:	7dfb      	ldrb	r3, [r7, #23]
 8010f50:	68ba      	ldr	r2, [r7, #8]
 8010f52:	4413      	add	r3, r2
 8010f54:	2203      	movs	r2, #3
 8010f56:	701a      	strb	r2, [r3, #0]
  idx++;
 8010f58:	7dfb      	ldrb	r3, [r7, #23]
 8010f5a:	3301      	adds	r3, #1
 8010f5c:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8010f5e:	e013      	b.n	8010f88 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8010f60:	7dfb      	ldrb	r3, [r7, #23]
 8010f62:	68ba      	ldr	r2, [r7, #8]
 8010f64:	4413      	add	r3, r2
 8010f66:	693a      	ldr	r2, [r7, #16]
 8010f68:	7812      	ldrb	r2, [r2, #0]
 8010f6a:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8010f6c:	693b      	ldr	r3, [r7, #16]
 8010f6e:	3301      	adds	r3, #1
 8010f70:	613b      	str	r3, [r7, #16]
    idx++;
 8010f72:	7dfb      	ldrb	r3, [r7, #23]
 8010f74:	3301      	adds	r3, #1
 8010f76:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8010f78:	7dfb      	ldrb	r3, [r7, #23]
 8010f7a:	68ba      	ldr	r2, [r7, #8]
 8010f7c:	4413      	add	r3, r2
 8010f7e:	2200      	movs	r2, #0
 8010f80:	701a      	strb	r2, [r3, #0]
    idx++;
 8010f82:	7dfb      	ldrb	r3, [r7, #23]
 8010f84:	3301      	adds	r3, #1
 8010f86:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8010f88:	693b      	ldr	r3, [r7, #16]
 8010f8a:	781b      	ldrb	r3, [r3, #0]
 8010f8c:	2b00      	cmp	r3, #0
 8010f8e:	d1e7      	bne.n	8010f60 <USBD_GetString+0x52>
 8010f90:	e000      	b.n	8010f94 <USBD_GetString+0x86>
    return;
 8010f92:	bf00      	nop
  }
}
 8010f94:	3718      	adds	r7, #24
 8010f96:	46bd      	mov	sp, r7
 8010f98:	bd80      	pop	{r7, pc}

08010f9a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8010f9a:	b480      	push	{r7}
 8010f9c:	b085      	sub	sp, #20
 8010f9e:	af00      	add	r7, sp, #0
 8010fa0:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8010fa2:	2300      	movs	r3, #0
 8010fa4:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8010fa6:	687b      	ldr	r3, [r7, #4]
 8010fa8:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8010faa:	e005      	b.n	8010fb8 <USBD_GetLen+0x1e>
  {
    len++;
 8010fac:	7bfb      	ldrb	r3, [r7, #15]
 8010fae:	3301      	adds	r3, #1
 8010fb0:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8010fb2:	68bb      	ldr	r3, [r7, #8]
 8010fb4:	3301      	adds	r3, #1
 8010fb6:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8010fb8:	68bb      	ldr	r3, [r7, #8]
 8010fba:	781b      	ldrb	r3, [r3, #0]
 8010fbc:	2b00      	cmp	r3, #0
 8010fbe:	d1f5      	bne.n	8010fac <USBD_GetLen+0x12>
  }

  return len;
 8010fc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8010fc2:	4618      	mov	r0, r3
 8010fc4:	3714      	adds	r7, #20
 8010fc6:	46bd      	mov	sp, r7
 8010fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fcc:	4770      	bx	lr

08010fce <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8010fce:	b580      	push	{r7, lr}
 8010fd0:	b084      	sub	sp, #16
 8010fd2:	af00      	add	r7, sp, #0
 8010fd4:	60f8      	str	r0, [r7, #12]
 8010fd6:	60b9      	str	r1, [r7, #8]
 8010fd8:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8010fda:	68fb      	ldr	r3, [r7, #12]
 8010fdc:	2202      	movs	r2, #2
 8010fde:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8010fe2:	68fb      	ldr	r3, [r7, #12]
 8010fe4:	687a      	ldr	r2, [r7, #4]
 8010fe6:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8010fe8:	68fb      	ldr	r3, [r7, #12]
 8010fea:	687a      	ldr	r2, [r7, #4]
 8010fec:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8010fee:	687b      	ldr	r3, [r7, #4]
 8010ff0:	68ba      	ldr	r2, [r7, #8]
 8010ff2:	2100      	movs	r1, #0
 8010ff4:	68f8      	ldr	r0, [r7, #12]
 8010ff6:	f000 fe20 	bl	8011c3a <USBD_LL_Transmit>

  return USBD_OK;
 8010ffa:	2300      	movs	r3, #0
}
 8010ffc:	4618      	mov	r0, r3
 8010ffe:	3710      	adds	r7, #16
 8011000:	46bd      	mov	sp, r7
 8011002:	bd80      	pop	{r7, pc}

08011004 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8011004:	b580      	push	{r7, lr}
 8011006:	b084      	sub	sp, #16
 8011008:	af00      	add	r7, sp, #0
 801100a:	60f8      	str	r0, [r7, #12]
 801100c:	60b9      	str	r1, [r7, #8]
 801100e:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8011010:	687b      	ldr	r3, [r7, #4]
 8011012:	68ba      	ldr	r2, [r7, #8]
 8011014:	2100      	movs	r1, #0
 8011016:	68f8      	ldr	r0, [r7, #12]
 8011018:	f000 fe0f 	bl	8011c3a <USBD_LL_Transmit>

  return USBD_OK;
 801101c:	2300      	movs	r3, #0
}
 801101e:	4618      	mov	r0, r3
 8011020:	3710      	adds	r7, #16
 8011022:	46bd      	mov	sp, r7
 8011024:	bd80      	pop	{r7, pc}

08011026 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8011026:	b580      	push	{r7, lr}
 8011028:	b084      	sub	sp, #16
 801102a:	af00      	add	r7, sp, #0
 801102c:	60f8      	str	r0, [r7, #12]
 801102e:	60b9      	str	r1, [r7, #8]
 8011030:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8011032:	68fb      	ldr	r3, [r7, #12]
 8011034:	2203      	movs	r2, #3
 8011036:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 801103a:	68fb      	ldr	r3, [r7, #12]
 801103c:	687a      	ldr	r2, [r7, #4]
 801103e:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8011042:	68fb      	ldr	r3, [r7, #12]
 8011044:	687a      	ldr	r2, [r7, #4]
 8011046:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801104a:	687b      	ldr	r3, [r7, #4]
 801104c:	68ba      	ldr	r2, [r7, #8]
 801104e:	2100      	movs	r1, #0
 8011050:	68f8      	ldr	r0, [r7, #12]
 8011052:	f000 fe13 	bl	8011c7c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8011056:	2300      	movs	r3, #0
}
 8011058:	4618      	mov	r0, r3
 801105a:	3710      	adds	r7, #16
 801105c:	46bd      	mov	sp, r7
 801105e:	bd80      	pop	{r7, pc}

08011060 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8011060:	b580      	push	{r7, lr}
 8011062:	b084      	sub	sp, #16
 8011064:	af00      	add	r7, sp, #0
 8011066:	60f8      	str	r0, [r7, #12]
 8011068:	60b9      	str	r1, [r7, #8]
 801106a:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801106c:	687b      	ldr	r3, [r7, #4]
 801106e:	68ba      	ldr	r2, [r7, #8]
 8011070:	2100      	movs	r1, #0
 8011072:	68f8      	ldr	r0, [r7, #12]
 8011074:	f000 fe02 	bl	8011c7c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8011078:	2300      	movs	r3, #0
}
 801107a:	4618      	mov	r0, r3
 801107c:	3710      	adds	r7, #16
 801107e:	46bd      	mov	sp, r7
 8011080:	bd80      	pop	{r7, pc}

08011082 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8011082:	b580      	push	{r7, lr}
 8011084:	b082      	sub	sp, #8
 8011086:	af00      	add	r7, sp, #0
 8011088:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 801108a:	687b      	ldr	r3, [r7, #4]
 801108c:	2204      	movs	r2, #4
 801108e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8011092:	2300      	movs	r3, #0
 8011094:	2200      	movs	r2, #0
 8011096:	2100      	movs	r1, #0
 8011098:	6878      	ldr	r0, [r7, #4]
 801109a:	f000 fdce 	bl	8011c3a <USBD_LL_Transmit>

  return USBD_OK;
 801109e:	2300      	movs	r3, #0
}
 80110a0:	4618      	mov	r0, r3
 80110a2:	3708      	adds	r7, #8
 80110a4:	46bd      	mov	sp, r7
 80110a6:	bd80      	pop	{r7, pc}

080110a8 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80110a8:	b580      	push	{r7, lr}
 80110aa:	b082      	sub	sp, #8
 80110ac:	af00      	add	r7, sp, #0
 80110ae:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80110b0:	687b      	ldr	r3, [r7, #4]
 80110b2:	2205      	movs	r2, #5
 80110b4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80110b8:	2300      	movs	r3, #0
 80110ba:	2200      	movs	r2, #0
 80110bc:	2100      	movs	r1, #0
 80110be:	6878      	ldr	r0, [r7, #4]
 80110c0:	f000 fddc 	bl	8011c7c <USBD_LL_PrepareReceive>

  return USBD_OK;
 80110c4:	2300      	movs	r3, #0
}
 80110c6:	4618      	mov	r0, r3
 80110c8:	3708      	adds	r7, #8
 80110ca:	46bd      	mov	sp, r7
 80110cc:	bd80      	pop	{r7, pc}
	...

080110d0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80110d0:	b580      	push	{r7, lr}
 80110d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80110d4:	2200      	movs	r2, #0
 80110d6:	4912      	ldr	r1, [pc, #72]	; (8011120 <MX_USB_DEVICE_Init+0x50>)
 80110d8:	4812      	ldr	r0, [pc, #72]	; (8011124 <MX_USB_DEVICE_Init+0x54>)
 80110da:	f7fe fe8f 	bl	800fdfc <USBD_Init>
 80110de:	4603      	mov	r3, r0
 80110e0:	2b00      	cmp	r3, #0
 80110e2:	d001      	beq.n	80110e8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80110e4:	f7f7 fbb4 	bl	8008850 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80110e8:	490f      	ldr	r1, [pc, #60]	; (8011128 <MX_USB_DEVICE_Init+0x58>)
 80110ea:	480e      	ldr	r0, [pc, #56]	; (8011124 <MX_USB_DEVICE_Init+0x54>)
 80110ec:	f7fe feb6 	bl	800fe5c <USBD_RegisterClass>
 80110f0:	4603      	mov	r3, r0
 80110f2:	2b00      	cmp	r3, #0
 80110f4:	d001      	beq.n	80110fa <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80110f6:	f7f7 fbab 	bl	8008850 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80110fa:	490c      	ldr	r1, [pc, #48]	; (801112c <MX_USB_DEVICE_Init+0x5c>)
 80110fc:	4809      	ldr	r0, [pc, #36]	; (8011124 <MX_USB_DEVICE_Init+0x54>)
 80110fe:	f7fe fdd7 	bl	800fcb0 <USBD_CDC_RegisterInterface>
 8011102:	4603      	mov	r3, r0
 8011104:	2b00      	cmp	r3, #0
 8011106:	d001      	beq.n	801110c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8011108:	f7f7 fba2 	bl	8008850 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 801110c:	4805      	ldr	r0, [pc, #20]	; (8011124 <MX_USB_DEVICE_Init+0x54>)
 801110e:	f7fe fecc 	bl	800feaa <USBD_Start>
 8011112:	4603      	mov	r3, r0
 8011114:	2b00      	cmp	r3, #0
 8011116:	d001      	beq.n	801111c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8011118:	f7f7 fb9a 	bl	8008850 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 801111c:	bf00      	nop
 801111e:	bd80      	pop	{r7, pc}
 8011120:	20000158 	.word	0x20000158
 8011124:	20000440 	.word	0x20000440
 8011128:	2000003c 	.word	0x2000003c
 801112c:	20000144 	.word	0x20000144

08011130 <cdcAvailable>:
uint32_t  rx_len=512;
uint8_t   rx_buf[512];
bool      rx_full = false;

uint32_t cdcAvailable(void)
{
 8011130:	b480      	push	{r7}
 8011132:	b083      	sub	sp, #12
 8011134:	af00      	add	r7, sp, #0
	uint32_t ret;

	ret = (rx_in - rx_out) % rx_len;
 8011136:	4b0a      	ldr	r3, [pc, #40]	; (8011160 <cdcAvailable+0x30>)
 8011138:	681a      	ldr	r2, [r3, #0]
 801113a:	4b0a      	ldr	r3, [pc, #40]	; (8011164 <cdcAvailable+0x34>)
 801113c:	681b      	ldr	r3, [r3, #0]
 801113e:	1ad3      	subs	r3, r2, r3
 8011140:	4a09      	ldr	r2, [pc, #36]	; (8011168 <cdcAvailable+0x38>)
 8011142:	6812      	ldr	r2, [r2, #0]
 8011144:	fbb3 f1f2 	udiv	r1, r3, r2
 8011148:	fb01 f202 	mul.w	r2, r1, r2
 801114c:	1a9b      	subs	r3, r3, r2
 801114e:	607b      	str	r3, [r7, #4]

	return ret;
 8011150:	687b      	ldr	r3, [r7, #4]
}
 8011152:	4618      	mov	r0, r3
 8011154:	370c      	adds	r7, #12
 8011156:	46bd      	mov	sp, r7
 8011158:	f85d 7b04 	ldr.w	r7, [sp], #4
 801115c:	4770      	bx	lr
 801115e:	bf00      	nop
 8011160:	20000718 	.word	0x20000718
 8011164:	2000071c 	.word	0x2000071c
 8011168:	20000140 	.word	0x20000140

0801116c <cdcRead>:

uint8_t cdcRead(void)
{
 801116c:	b480      	push	{r7}
 801116e:	b083      	sub	sp, #12
 8011170:	af00      	add	r7, sp, #0
  /* 1. Read Data and return
   * 2. rx_out index increase
   * */
	uint8_t ret;
	ret = rx_buf[rx_out];
 8011172:	4b0f      	ldr	r3, [pc, #60]	; (80111b0 <cdcRead+0x44>)
 8011174:	681b      	ldr	r3, [r3, #0]
 8011176:	4a0f      	ldr	r2, [pc, #60]	; (80111b4 <cdcRead+0x48>)
 8011178:	5cd3      	ldrb	r3, [r2, r3]
 801117a:	71fb      	strb	r3, [r7, #7]

	if(rx_out != rx_in)
 801117c:	4b0c      	ldr	r3, [pc, #48]	; (80111b0 <cdcRead+0x44>)
 801117e:	681a      	ldr	r2, [r3, #0]
 8011180:	4b0d      	ldr	r3, [pc, #52]	; (80111b8 <cdcRead+0x4c>)
 8011182:	681b      	ldr	r3, [r3, #0]
 8011184:	429a      	cmp	r2, r3
 8011186:	d00b      	beq.n	80111a0 <cdcRead+0x34>
	{
		rx_out = (rx_out + 1) % rx_len;
 8011188:	4b09      	ldr	r3, [pc, #36]	; (80111b0 <cdcRead+0x44>)
 801118a:	681b      	ldr	r3, [r3, #0]
 801118c:	3301      	adds	r3, #1
 801118e:	4a0b      	ldr	r2, [pc, #44]	; (80111bc <cdcRead+0x50>)
 8011190:	6812      	ldr	r2, [r2, #0]
 8011192:	fbb3 f1f2 	udiv	r1, r3, r2
 8011196:	fb01 f202 	mul.w	r2, r1, r2
 801119a:	1a9b      	subs	r3, r3, r2
 801119c:	4a04      	ldr	r2, [pc, #16]	; (80111b0 <cdcRead+0x44>)
 801119e:	6013      	str	r3, [r2, #0]
	}
	return ret;
 80111a0:	79fb      	ldrb	r3, [r7, #7]
}
 80111a2:	4618      	mov	r0, r3
 80111a4:	370c      	adds	r7, #12
 80111a6:	46bd      	mov	sp, r7
 80111a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111ac:	4770      	bx	lr
 80111ae:	bf00      	nop
 80111b0:	2000071c 	.word	0x2000071c
 80111b4:	20000720 	.word	0x20000720
 80111b8:	20000718 	.word	0x20000718
 80111bc:	20000140 	.word	0x20000140

080111c0 <cdcDataIn>:

void cdcDataIn(uint8_t rx_data)
{
 80111c0:	b480      	push	{r7}
 80111c2:	b085      	sub	sp, #20
 80111c4:	af00      	add	r7, sp, #0
 80111c6:	4603      	mov	r3, r0
 80111c8:	71fb      	strb	r3, [r7, #7]
	uint32_t next_rx_in;
	next_rx_in = (rx_in + 1) % rx_len;
 80111ca:	4b0f      	ldr	r3, [pc, #60]	; (8011208 <cdcDataIn+0x48>)
 80111cc:	681b      	ldr	r3, [r3, #0]
 80111ce:	3301      	adds	r3, #1
 80111d0:	4a0e      	ldr	r2, [pc, #56]	; (801120c <cdcDataIn+0x4c>)
 80111d2:	6812      	ldr	r2, [r2, #0]
 80111d4:	fbb3 f1f2 	udiv	r1, r3, r2
 80111d8:	fb01 f202 	mul.w	r2, r1, r2
 80111dc:	1a9b      	subs	r3, r3, r2
 80111de:	60fb      	str	r3, [r7, #12]
	rx_buf[rx_in] = rx_data;
 80111e0:	4b09      	ldr	r3, [pc, #36]	; (8011208 <cdcDataIn+0x48>)
 80111e2:	681b      	ldr	r3, [r3, #0]
 80111e4:	490a      	ldr	r1, [pc, #40]	; (8011210 <cdcDataIn+0x50>)
 80111e6:	79fa      	ldrb	r2, [r7, #7]
 80111e8:	54ca      	strb	r2, [r1, r3]
	if(next_rx_in != rx_out)
 80111ea:	4b0a      	ldr	r3, [pc, #40]	; (8011214 <cdcDataIn+0x54>)
 80111ec:	681b      	ldr	r3, [r3, #0]
 80111ee:	68fa      	ldr	r2, [r7, #12]
 80111f0:	429a      	cmp	r2, r3
 80111f2:	d002      	beq.n	80111fa <cdcDataIn+0x3a>
	{
		rx_in = next_rx_in;
 80111f4:	4a04      	ldr	r2, [pc, #16]	; (8011208 <cdcDataIn+0x48>)
 80111f6:	68fb      	ldr	r3, [r7, #12]
 80111f8:	6013      	str	r3, [r2, #0]
	}
}
 80111fa:	bf00      	nop
 80111fc:	3714      	adds	r7, #20
 80111fe:	46bd      	mov	sp, r7
 8011200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011204:	4770      	bx	lr
 8011206:	bf00      	nop
 8011208:	20000718 	.word	0x20000718
 801120c:	20000140 	.word	0x20000140
 8011210:	20000720 	.word	0x20000720
 8011214:	2000071c 	.word	0x2000071c

08011218 <cdcWrite>:
uint32_t cdcWrite(uint8_t *pData, uint32_t length)
{
 8011218:	b580      	push	{r7, lr}
 801121a:	b084      	sub	sp, #16
 801121c:	af00      	add	r7, sp, #0
 801121e:	6078      	str	r0, [r7, #4]
 8011220:	6039      	str	r1, [r7, #0]
  /* 1. basically transmit..
   * */
	uint32_t pre_time;
	uint8_t ret;

	pre_time = millis();
 8011222:	f7f7 fa94 	bl	800874e <millis>
 8011226:	60f8      	str	r0, [r7, #12]
	while(1)
	{
		ret = CDC_Transmit_FS(pData, length);
 8011228:	683b      	ldr	r3, [r7, #0]
 801122a:	b29b      	uxth	r3, r3
 801122c:	4619      	mov	r1, r3
 801122e:	6878      	ldr	r0, [r7, #4]
 8011230:	f000 f94a 	bl	80114c8 <CDC_Transmit_FS>
 8011234:	4603      	mov	r3, r0
 8011236:	72fb      	strb	r3, [r7, #11]

		if(ret == USBD_OK)
 8011238:	7afb      	ldrb	r3, [r7, #11]
 801123a:	2b00      	cmp	r3, #0
 801123c:	d101      	bne.n	8011242 <cdcWrite+0x2a>
		{
			return length;
 801123e:	683b      	ldr	r3, [r7, #0]
 8011240:	e00e      	b.n	8011260 <cdcWrite+0x48>
		}
		else if(ret == USBD_FAIL)
 8011242:	7afb      	ldrb	r3, [r7, #11]
 8011244:	2b03      	cmp	r3, #3
 8011246:	d101      	bne.n	801124c <cdcWrite+0x34>
		{
			return 0;
 8011248:	2300      	movs	r3, #0
 801124a:	e009      	b.n	8011260 <cdcWrite+0x48>
		}

		if(millis() - pre_time >= 100)
 801124c:	f7f7 fa7f 	bl	800874e <millis>
 8011250:	4602      	mov	r2, r0
 8011252:	68fb      	ldr	r3, [r7, #12]
 8011254:	1ad3      	subs	r3, r2, r3
 8011256:	2b63      	cmp	r3, #99	; 0x63
 8011258:	d800      	bhi.n	801125c <cdcWrite+0x44>
		ret = CDC_Transmit_FS(pData, length);
 801125a:	e7e5      	b.n	8011228 <cdcWrite+0x10>
		{
		  //time out
			break;
 801125c:	bf00      	nop
		}

	}
	return 0;
 801125e:	2300      	movs	r3, #0
}
 8011260:	4618      	mov	r0, r3
 8011262:	3710      	adds	r7, #16
 8011264:	46bd      	mov	sp, r7
 8011266:	bd80      	pop	{r7, pc}

08011268 <USBD_CDC_SOF>:
{
	return LineCoding.bitrate;
}

uint8_t USBD_CDC_SOF(struct _USBD_HandleTypeDef *pdev)
{
 8011268:	b590      	push	{r4, r7, lr}
 801126a:	b085      	sub	sp, #20
 801126c:	af00      	add	r7, sp, #0
 801126e:	6078      	str	r0, [r7, #4]
  if(rx_full == true)
 8011270:	4b0c      	ldr	r3, [pc, #48]	; (80112a4 <USBD_CDC_SOF+0x3c>)
 8011272:	781b      	ldrb	r3, [r3, #0]
 8011274:	2b00      	cmp	r3, #0
 8011276:	d010      	beq.n	801129a <USBD_CDC_SOF+0x32>
  {
    uint32_t buf_len;

    //Empty space amount of received buffer
    buf_len = (rx_len - cdcAvailable()) - 1; // for write one space -> -1
 8011278:	4b0b      	ldr	r3, [pc, #44]	; (80112a8 <USBD_CDC_SOF+0x40>)
 801127a:	681c      	ldr	r4, [r3, #0]
 801127c:	f7ff ff58 	bl	8011130 <cdcAvailable>
 8011280:	4603      	mov	r3, r0
 8011282:	1ae3      	subs	r3, r4, r3
 8011284:	3b01      	subs	r3, #1
 8011286:	60fb      	str	r3, [r7, #12]

    if(buf_len >= USB_FS_MAX_PACKET_SIZE)
 8011288:	68fb      	ldr	r3, [r7, #12]
 801128a:	2b3f      	cmp	r3, #63	; 0x3f
 801128c:	d905      	bls.n	801129a <USBD_CDC_SOF+0x32>
    {
      //USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]); only one is enough
      USBD_CDC_ReceivePacket(pdev);
 801128e:	6878      	ldr	r0, [r7, #4]
 8011290:	f7fe fd8a 	bl	800fda8 <USBD_CDC_ReceivePacket>
      rx_full = false;
 8011294:	4b03      	ldr	r3, [pc, #12]	; (80112a4 <USBD_CDC_SOF+0x3c>)
 8011296:	2200      	movs	r2, #0
 8011298:	701a      	strb	r2, [r3, #0]
    }

  }
  return 0;
 801129a:	2300      	movs	r3, #0
}
 801129c:	4618      	mov	r0, r3
 801129e:	3714      	adds	r7, #20
 80112a0:	46bd      	mov	sp, r7
 80112a2:	bd90      	pop	{r4, r7, pc}
 80112a4:	20000920 	.word	0x20000920
 80112a8:	20000140 	.word	0x20000140

080112ac <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80112ac:	b580      	push	{r7, lr}
 80112ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80112b0:	2200      	movs	r2, #0
 80112b2:	4905      	ldr	r1, [pc, #20]	; (80112c8 <CDC_Init_FS+0x1c>)
 80112b4:	4805      	ldr	r0, [pc, #20]	; (80112cc <CDC_Init_FS+0x20>)
 80112b6:	f7fe fd10 	bl	800fcda <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80112ba:	4905      	ldr	r1, [pc, #20]	; (80112d0 <CDC_Init_FS+0x24>)
 80112bc:	4803      	ldr	r0, [pc, #12]	; (80112cc <CDC_Init_FS+0x20>)
 80112be:	f7fe fd2a 	bl	800fd16 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80112c2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80112c4:	4618      	mov	r0, r3
 80112c6:	bd80      	pop	{r7, pc}
 80112c8:	20000d24 	.word	0x20000d24
 80112cc:	20000440 	.word	0x20000440
 80112d0:	20000924 	.word	0x20000924

080112d4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80112d4:	b480      	push	{r7}
 80112d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80112d8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80112da:	4618      	mov	r0, r3
 80112dc:	46bd      	mov	sp, r7
 80112de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112e2:	4770      	bx	lr

080112e4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80112e4:	b480      	push	{r7}
 80112e6:	b083      	sub	sp, #12
 80112e8:	af00      	add	r7, sp, #0
 80112ea:	4603      	mov	r3, r0
 80112ec:	6039      	str	r1, [r7, #0]
 80112ee:	71fb      	strb	r3, [r7, #7]
 80112f0:	4613      	mov	r3, r2
 80112f2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80112f4:	79fb      	ldrb	r3, [r7, #7]
 80112f6:	2b23      	cmp	r3, #35	; 0x23
 80112f8:	f200 80a3 	bhi.w	8011442 <CDC_Control_FS+0x15e>
 80112fc:	a201      	add	r2, pc, #4	; (adr r2, 8011304 <CDC_Control_FS+0x20>)
 80112fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011302:	bf00      	nop
 8011304:	08011443 	.word	0x08011443
 8011308:	08011443 	.word	0x08011443
 801130c:	08011443 	.word	0x08011443
 8011310:	08011443 	.word	0x08011443
 8011314:	08011443 	.word	0x08011443
 8011318:	08011443 	.word	0x08011443
 801131c:	08011443 	.word	0x08011443
 8011320:	08011443 	.word	0x08011443
 8011324:	08011443 	.word	0x08011443
 8011328:	08011443 	.word	0x08011443
 801132c:	08011443 	.word	0x08011443
 8011330:	08011443 	.word	0x08011443
 8011334:	08011443 	.word	0x08011443
 8011338:	08011443 	.word	0x08011443
 801133c:	08011443 	.word	0x08011443
 8011340:	08011443 	.word	0x08011443
 8011344:	08011443 	.word	0x08011443
 8011348:	08011443 	.word	0x08011443
 801134c:	08011443 	.word	0x08011443
 8011350:	08011443 	.word	0x08011443
 8011354:	08011443 	.word	0x08011443
 8011358:	08011443 	.word	0x08011443
 801135c:	08011443 	.word	0x08011443
 8011360:	08011443 	.word	0x08011443
 8011364:	08011443 	.word	0x08011443
 8011368:	08011443 	.word	0x08011443
 801136c:	08011443 	.word	0x08011443
 8011370:	08011443 	.word	0x08011443
 8011374:	08011443 	.word	0x08011443
 8011378:	08011443 	.word	0x08011443
 801137c:	08011443 	.word	0x08011443
 8011380:	08011443 	.word	0x08011443
 8011384:	08011395 	.word	0x08011395
 8011388:	080113ef 	.word	0x080113ef
 801138c:	08011443 	.word	0x08011443
 8011390:	08011443 	.word	0x08011443
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING: // MCU�?? ?��?��?���?? set
    	LineCoding.bitrate 		 = (uint32_t)(pbuf[0]);
 8011394:	683b      	ldr	r3, [r7, #0]
 8011396:	781b      	ldrb	r3, [r3, #0]
 8011398:	461a      	mov	r2, r3
 801139a:	4b2e      	ldr	r3, [pc, #184]	; (8011454 <CDC_Control_FS+0x170>)
 801139c:	601a      	str	r2, [r3, #0]
    	LineCoding.bitrate 		|= (uint32_t)(pbuf[1]) << 8;
 801139e:	4b2d      	ldr	r3, [pc, #180]	; (8011454 <CDC_Control_FS+0x170>)
 80113a0:	681a      	ldr	r2, [r3, #0]
 80113a2:	683b      	ldr	r3, [r7, #0]
 80113a4:	3301      	adds	r3, #1
 80113a6:	781b      	ldrb	r3, [r3, #0]
 80113a8:	021b      	lsls	r3, r3, #8
 80113aa:	4313      	orrs	r3, r2
 80113ac:	4a29      	ldr	r2, [pc, #164]	; (8011454 <CDC_Control_FS+0x170>)
 80113ae:	6013      	str	r3, [r2, #0]
    	LineCoding.bitrate 		|= (uint32_t)(pbuf[2]) << 16;
 80113b0:	4b28      	ldr	r3, [pc, #160]	; (8011454 <CDC_Control_FS+0x170>)
 80113b2:	681a      	ldr	r2, [r3, #0]
 80113b4:	683b      	ldr	r3, [r7, #0]
 80113b6:	3302      	adds	r3, #2
 80113b8:	781b      	ldrb	r3, [r3, #0]
 80113ba:	041b      	lsls	r3, r3, #16
 80113bc:	4313      	orrs	r3, r2
 80113be:	4a25      	ldr	r2, [pc, #148]	; (8011454 <CDC_Control_FS+0x170>)
 80113c0:	6013      	str	r3, [r2, #0]
    	LineCoding.bitrate 		|= (uint32_t)(pbuf[3]) << 24;
 80113c2:	4b24      	ldr	r3, [pc, #144]	; (8011454 <CDC_Control_FS+0x170>)
 80113c4:	681a      	ldr	r2, [r3, #0]
 80113c6:	683b      	ldr	r3, [r7, #0]
 80113c8:	3303      	adds	r3, #3
 80113ca:	781b      	ldrb	r3, [r3, #0]
 80113cc:	061b      	lsls	r3, r3, #24
 80113ce:	4313      	orrs	r3, r2
 80113d0:	4a20      	ldr	r2, [pc, #128]	; (8011454 <CDC_Control_FS+0x170>)
 80113d2:	6013      	str	r3, [r2, #0]
    	LineCoding.format 		 = pbuf[4];
 80113d4:	683b      	ldr	r3, [r7, #0]
 80113d6:	791a      	ldrb	r2, [r3, #4]
 80113d8:	4b1e      	ldr	r3, [pc, #120]	; (8011454 <CDC_Control_FS+0x170>)
 80113da:	711a      	strb	r2, [r3, #4]
    	LineCoding.paritytype  = pbuf[5];
 80113dc:	683b      	ldr	r3, [r7, #0]
 80113de:	795a      	ldrb	r2, [r3, #5]
 80113e0:	4b1c      	ldr	r3, [pc, #112]	; (8011454 <CDC_Control_FS+0x170>)
 80113e2:	715a      	strb	r2, [r3, #5]
    	LineCoding.datatype 	 = pbuf[6];
 80113e4:	683b      	ldr	r3, [r7, #0]
 80113e6:	799a      	ldrb	r2, [r3, #6]
 80113e8:	4b1a      	ldr	r3, [pc, #104]	; (8011454 <CDC_Control_FS+0x170>)
 80113ea:	719a      	strb	r2, [r3, #6]
    break;
 80113ec:	e02a      	b.n	8011444 <CDC_Control_FS+0x160>

    case CDC_GET_LINE_CODING: // PC�?? ?��?��?���?? ?��?���??
    	pbuf[0] = (uint8_t)(LineCoding.bitrate);
 80113ee:	4b19      	ldr	r3, [pc, #100]	; (8011454 <CDC_Control_FS+0x170>)
 80113f0:	681b      	ldr	r3, [r3, #0]
 80113f2:	b2da      	uxtb	r2, r3
 80113f4:	683b      	ldr	r3, [r7, #0]
 80113f6:	701a      	strb	r2, [r3, #0]
    	pbuf[1] = (uint8_t)(LineCoding.bitrate >> 8);
 80113f8:	4b16      	ldr	r3, [pc, #88]	; (8011454 <CDC_Control_FS+0x170>)
 80113fa:	681b      	ldr	r3, [r3, #0]
 80113fc:	0a1a      	lsrs	r2, r3, #8
 80113fe:	683b      	ldr	r3, [r7, #0]
 8011400:	3301      	adds	r3, #1
 8011402:	b2d2      	uxtb	r2, r2
 8011404:	701a      	strb	r2, [r3, #0]
    	pbuf[2] = (uint8_t)(LineCoding.bitrate >> 16);
 8011406:	4b13      	ldr	r3, [pc, #76]	; (8011454 <CDC_Control_FS+0x170>)
 8011408:	681b      	ldr	r3, [r3, #0]
 801140a:	0c1a      	lsrs	r2, r3, #16
 801140c:	683b      	ldr	r3, [r7, #0]
 801140e:	3302      	adds	r3, #2
 8011410:	b2d2      	uxtb	r2, r2
 8011412:	701a      	strb	r2, [r3, #0]
    	pbuf[3] = (uint8_t)(LineCoding.bitrate >> 24);
 8011414:	4b0f      	ldr	r3, [pc, #60]	; (8011454 <CDC_Control_FS+0x170>)
 8011416:	681b      	ldr	r3, [r3, #0]
 8011418:	0e1a      	lsrs	r2, r3, #24
 801141a:	683b      	ldr	r3, [r7, #0]
 801141c:	3303      	adds	r3, #3
 801141e:	b2d2      	uxtb	r2, r2
 8011420:	701a      	strb	r2, [r3, #0]
    	pbuf[4] = LineCoding.format;
 8011422:	683b      	ldr	r3, [r7, #0]
 8011424:	3304      	adds	r3, #4
 8011426:	4a0b      	ldr	r2, [pc, #44]	; (8011454 <CDC_Control_FS+0x170>)
 8011428:	7912      	ldrb	r2, [r2, #4]
 801142a:	701a      	strb	r2, [r3, #0]
    	pbuf[5] = LineCoding.paritytype;
 801142c:	683b      	ldr	r3, [r7, #0]
 801142e:	3305      	adds	r3, #5
 8011430:	4a08      	ldr	r2, [pc, #32]	; (8011454 <CDC_Control_FS+0x170>)
 8011432:	7952      	ldrb	r2, [r2, #5]
 8011434:	701a      	strb	r2, [r3, #0]
    	pbuf[6] = LineCoding.datatype;
 8011436:	683b      	ldr	r3, [r7, #0]
 8011438:	3306      	adds	r3, #6
 801143a:	4a06      	ldr	r2, [pc, #24]	; (8011454 <CDC_Control_FS+0x170>)
 801143c:	7992      	ldrb	r2, [r2, #6]
 801143e:	701a      	strb	r2, [r3, #0]
    break;
 8011440:	e000      	b.n	8011444 <CDC_Control_FS+0x160>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8011442:	bf00      	nop
  }

  return (USBD_OK);
 8011444:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8011446:	4618      	mov	r0, r3
 8011448:	370c      	adds	r7, #12
 801144a:	46bd      	mov	sp, r7
 801144c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011450:	4770      	bx	lr
 8011452:	bf00      	nop
 8011454:	20000710 	.word	0x20000710

08011458 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8011458:	b590      	push	{r4, r7, lr}
 801145a:	b085      	sub	sp, #20
 801145c:	af00      	add	r7, sp, #0
 801145e:	6078      	str	r0, [r7, #4]
 8011460:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */

  for(int i=0; i<*Len; i++)
 8011462:	2300      	movs	r3, #0
 8011464:	60fb      	str	r3, [r7, #12]
 8011466:	e009      	b.n	801147c <CDC_Receive_FS+0x24>
  {
    cdcDataIn(Buf[i]);
 8011468:	68fb      	ldr	r3, [r7, #12]
 801146a:	687a      	ldr	r2, [r7, #4]
 801146c:	4413      	add	r3, r2
 801146e:	781b      	ldrb	r3, [r3, #0]
 8011470:	4618      	mov	r0, r3
 8011472:	f7ff fea5 	bl	80111c0 <cdcDataIn>
  for(int i=0; i<*Len; i++)
 8011476:	68fb      	ldr	r3, [r7, #12]
 8011478:	3301      	adds	r3, #1
 801147a:	60fb      	str	r3, [r7, #12]
 801147c:	683b      	ldr	r3, [r7, #0]
 801147e:	681a      	ldr	r2, [r3, #0]
 8011480:	68fb      	ldr	r3, [r7, #12]
 8011482:	429a      	cmp	r2, r3
 8011484:	d8f0      	bhi.n	8011468 <CDC_Receive_FS+0x10>
  }
  uint32_t buf_len;

  //Empty space amount of received buffer
  buf_len = (rx_len - cdcAvailable()) - 1; // for write one space -> -1
 8011486:	4b0d      	ldr	r3, [pc, #52]	; (80114bc <CDC_Receive_FS+0x64>)
 8011488:	681c      	ldr	r4, [r3, #0]
 801148a:	f7ff fe51 	bl	8011130 <cdcAvailable>
 801148e:	4603      	mov	r3, r0
 8011490:	1ae3      	subs	r3, r4, r3
 8011492:	3b01      	subs	r3, #1
 8011494:	60bb      	str	r3, [r7, #8]

  if(buf_len >= USB_FS_MAX_PACKET_SIZE)
 8011496:	68bb      	ldr	r3, [r7, #8]
 8011498:	2b3f      	cmp	r3, #63	; 0x3f
 801149a:	d907      	bls.n	80114ac <CDC_Receive_FS+0x54>
  {
    USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 801149c:	6879      	ldr	r1, [r7, #4]
 801149e:	4808      	ldr	r0, [pc, #32]	; (80114c0 <CDC_Receive_FS+0x68>)
 80114a0:	f7fe fc39 	bl	800fd16 <USBD_CDC_SetRxBuffer>
    USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80114a4:	4806      	ldr	r0, [pc, #24]	; (80114c0 <CDC_Receive_FS+0x68>)
 80114a6:	f7fe fc7f 	bl	800fda8 <USBD_CDC_ReceivePacket>
 80114aa:	e002      	b.n	80114b2 <CDC_Receive_FS+0x5a>
  }
  else
  {
    /*buffer not enough space.. please wait*/
    rx_full = true;
 80114ac:	4b05      	ldr	r3, [pc, #20]	; (80114c4 <CDC_Receive_FS+0x6c>)
 80114ae:	2201      	movs	r2, #1
 80114b0:	701a      	strb	r2, [r3, #0]
  }

  return (USBD_OK);
 80114b2:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80114b4:	4618      	mov	r0, r3
 80114b6:	3714      	adds	r7, #20
 80114b8:	46bd      	mov	sp, r7
 80114ba:	bd90      	pop	{r4, r7, pc}
 80114bc:	20000140 	.word	0x20000140
 80114c0:	20000440 	.word	0x20000440
 80114c4:	20000920 	.word	0x20000920

080114c8 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80114c8:	b580      	push	{r7, lr}
 80114ca:	b084      	sub	sp, #16
 80114cc:	af00      	add	r7, sp, #0
 80114ce:	6078      	str	r0, [r7, #4]
 80114d0:	460b      	mov	r3, r1
 80114d2:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80114d4:	2300      	movs	r3, #0
 80114d6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80114d8:	4b0d      	ldr	r3, [pc, #52]	; (8011510 <CDC_Transmit_FS+0x48>)
 80114da:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80114de:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80114e0:	68bb      	ldr	r3, [r7, #8]
 80114e2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80114e6:	2b00      	cmp	r3, #0
 80114e8:	d001      	beq.n	80114ee <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80114ea:	2301      	movs	r3, #1
 80114ec:	e00b      	b.n	8011506 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80114ee:	887b      	ldrh	r3, [r7, #2]
 80114f0:	461a      	mov	r2, r3
 80114f2:	6879      	ldr	r1, [r7, #4]
 80114f4:	4806      	ldr	r0, [pc, #24]	; (8011510 <CDC_Transmit_FS+0x48>)
 80114f6:	f7fe fbf0 	bl	800fcda <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80114fa:	4805      	ldr	r0, [pc, #20]	; (8011510 <CDC_Transmit_FS+0x48>)
 80114fc:	f7fe fc24 	bl	800fd48 <USBD_CDC_TransmitPacket>
 8011500:	4603      	mov	r3, r0
 8011502:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8011504:	7bfb      	ldrb	r3, [r7, #15]
}
 8011506:	4618      	mov	r0, r3
 8011508:	3710      	adds	r7, #16
 801150a:	46bd      	mov	sp, r7
 801150c:	bd80      	pop	{r7, pc}
 801150e:	bf00      	nop
 8011510:	20000440 	.word	0x20000440

08011514 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8011514:	b480      	push	{r7}
 8011516:	b087      	sub	sp, #28
 8011518:	af00      	add	r7, sp, #0
 801151a:	60f8      	str	r0, [r7, #12]
 801151c:	60b9      	str	r1, [r7, #8]
 801151e:	4613      	mov	r3, r2
 8011520:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8011522:	2300      	movs	r3, #0
 8011524:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8011526:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801152a:	4618      	mov	r0, r3
 801152c:	371c      	adds	r7, #28
 801152e:	46bd      	mov	sp, r7
 8011530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011534:	4770      	bx	lr
	...

08011538 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011538:	b480      	push	{r7}
 801153a:	b083      	sub	sp, #12
 801153c:	af00      	add	r7, sp, #0
 801153e:	4603      	mov	r3, r0
 8011540:	6039      	str	r1, [r7, #0]
 8011542:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8011544:	683b      	ldr	r3, [r7, #0]
 8011546:	2212      	movs	r2, #18
 8011548:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 801154a:	4b03      	ldr	r3, [pc, #12]	; (8011558 <USBD_FS_DeviceDescriptor+0x20>)
}
 801154c:	4618      	mov	r0, r3
 801154e:	370c      	adds	r7, #12
 8011550:	46bd      	mov	sp, r7
 8011552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011556:	4770      	bx	lr
 8011558:	20000174 	.word	0x20000174

0801155c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801155c:	b480      	push	{r7}
 801155e:	b083      	sub	sp, #12
 8011560:	af00      	add	r7, sp, #0
 8011562:	4603      	mov	r3, r0
 8011564:	6039      	str	r1, [r7, #0]
 8011566:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8011568:	683b      	ldr	r3, [r7, #0]
 801156a:	2204      	movs	r2, #4
 801156c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 801156e:	4b03      	ldr	r3, [pc, #12]	; (801157c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8011570:	4618      	mov	r0, r3
 8011572:	370c      	adds	r7, #12
 8011574:	46bd      	mov	sp, r7
 8011576:	f85d 7b04 	ldr.w	r7, [sp], #4
 801157a:	4770      	bx	lr
 801157c:	20000188 	.word	0x20000188

08011580 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011580:	b580      	push	{r7, lr}
 8011582:	b082      	sub	sp, #8
 8011584:	af00      	add	r7, sp, #0
 8011586:	4603      	mov	r3, r0
 8011588:	6039      	str	r1, [r7, #0]
 801158a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801158c:	79fb      	ldrb	r3, [r7, #7]
 801158e:	2b00      	cmp	r3, #0
 8011590:	d105      	bne.n	801159e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8011592:	683a      	ldr	r2, [r7, #0]
 8011594:	4907      	ldr	r1, [pc, #28]	; (80115b4 <USBD_FS_ProductStrDescriptor+0x34>)
 8011596:	4808      	ldr	r0, [pc, #32]	; (80115b8 <USBD_FS_ProductStrDescriptor+0x38>)
 8011598:	f7ff fcb9 	bl	8010f0e <USBD_GetString>
 801159c:	e004      	b.n	80115a8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801159e:	683a      	ldr	r2, [r7, #0]
 80115a0:	4904      	ldr	r1, [pc, #16]	; (80115b4 <USBD_FS_ProductStrDescriptor+0x34>)
 80115a2:	4805      	ldr	r0, [pc, #20]	; (80115b8 <USBD_FS_ProductStrDescriptor+0x38>)
 80115a4:	f7ff fcb3 	bl	8010f0e <USBD_GetString>
  }
  return USBD_StrDesc;
 80115a8:	4b02      	ldr	r3, [pc, #8]	; (80115b4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80115aa:	4618      	mov	r0, r3
 80115ac:	3708      	adds	r7, #8
 80115ae:	46bd      	mov	sp, r7
 80115b0:	bd80      	pop	{r7, pc}
 80115b2:	bf00      	nop
 80115b4:	20001124 	.word	0x20001124
 80115b8:	08012e74 	.word	0x08012e74

080115bc <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80115bc:	b580      	push	{r7, lr}
 80115be:	b082      	sub	sp, #8
 80115c0:	af00      	add	r7, sp, #0
 80115c2:	4603      	mov	r3, r0
 80115c4:	6039      	str	r1, [r7, #0]
 80115c6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80115c8:	683a      	ldr	r2, [r7, #0]
 80115ca:	4904      	ldr	r1, [pc, #16]	; (80115dc <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80115cc:	4804      	ldr	r0, [pc, #16]	; (80115e0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80115ce:	f7ff fc9e 	bl	8010f0e <USBD_GetString>
  return USBD_StrDesc;
 80115d2:	4b02      	ldr	r3, [pc, #8]	; (80115dc <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80115d4:	4618      	mov	r0, r3
 80115d6:	3708      	adds	r7, #8
 80115d8:	46bd      	mov	sp, r7
 80115da:	bd80      	pop	{r7, pc}
 80115dc:	20001124 	.word	0x20001124
 80115e0:	08012e8c 	.word	0x08012e8c

080115e4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80115e4:	b580      	push	{r7, lr}
 80115e6:	b082      	sub	sp, #8
 80115e8:	af00      	add	r7, sp, #0
 80115ea:	4603      	mov	r3, r0
 80115ec:	6039      	str	r1, [r7, #0]
 80115ee:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80115f0:	683b      	ldr	r3, [r7, #0]
 80115f2:	221a      	movs	r2, #26
 80115f4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80115f6:	f000 f843 	bl	8011680 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80115fa:	4b02      	ldr	r3, [pc, #8]	; (8011604 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80115fc:	4618      	mov	r0, r3
 80115fe:	3708      	adds	r7, #8
 8011600:	46bd      	mov	sp, r7
 8011602:	bd80      	pop	{r7, pc}
 8011604:	2000018c 	.word	0x2000018c

08011608 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011608:	b580      	push	{r7, lr}
 801160a:	b082      	sub	sp, #8
 801160c:	af00      	add	r7, sp, #0
 801160e:	4603      	mov	r3, r0
 8011610:	6039      	str	r1, [r7, #0]
 8011612:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8011614:	79fb      	ldrb	r3, [r7, #7]
 8011616:	2b00      	cmp	r3, #0
 8011618:	d105      	bne.n	8011626 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801161a:	683a      	ldr	r2, [r7, #0]
 801161c:	4907      	ldr	r1, [pc, #28]	; (801163c <USBD_FS_ConfigStrDescriptor+0x34>)
 801161e:	4808      	ldr	r0, [pc, #32]	; (8011640 <USBD_FS_ConfigStrDescriptor+0x38>)
 8011620:	f7ff fc75 	bl	8010f0e <USBD_GetString>
 8011624:	e004      	b.n	8011630 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8011626:	683a      	ldr	r2, [r7, #0]
 8011628:	4904      	ldr	r1, [pc, #16]	; (801163c <USBD_FS_ConfigStrDescriptor+0x34>)
 801162a:	4805      	ldr	r0, [pc, #20]	; (8011640 <USBD_FS_ConfigStrDescriptor+0x38>)
 801162c:	f7ff fc6f 	bl	8010f0e <USBD_GetString>
  }
  return USBD_StrDesc;
 8011630:	4b02      	ldr	r3, [pc, #8]	; (801163c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8011632:	4618      	mov	r0, r3
 8011634:	3708      	adds	r7, #8
 8011636:	46bd      	mov	sp, r7
 8011638:	bd80      	pop	{r7, pc}
 801163a:	bf00      	nop
 801163c:	20001124 	.word	0x20001124
 8011640:	08012ea0 	.word	0x08012ea0

08011644 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011644:	b580      	push	{r7, lr}
 8011646:	b082      	sub	sp, #8
 8011648:	af00      	add	r7, sp, #0
 801164a:	4603      	mov	r3, r0
 801164c:	6039      	str	r1, [r7, #0]
 801164e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8011650:	79fb      	ldrb	r3, [r7, #7]
 8011652:	2b00      	cmp	r3, #0
 8011654:	d105      	bne.n	8011662 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8011656:	683a      	ldr	r2, [r7, #0]
 8011658:	4907      	ldr	r1, [pc, #28]	; (8011678 <USBD_FS_InterfaceStrDescriptor+0x34>)
 801165a:	4808      	ldr	r0, [pc, #32]	; (801167c <USBD_FS_InterfaceStrDescriptor+0x38>)
 801165c:	f7ff fc57 	bl	8010f0e <USBD_GetString>
 8011660:	e004      	b.n	801166c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8011662:	683a      	ldr	r2, [r7, #0]
 8011664:	4904      	ldr	r1, [pc, #16]	; (8011678 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8011666:	4805      	ldr	r0, [pc, #20]	; (801167c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8011668:	f7ff fc51 	bl	8010f0e <USBD_GetString>
  }
  return USBD_StrDesc;
 801166c:	4b02      	ldr	r3, [pc, #8]	; (8011678 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 801166e:	4618      	mov	r0, r3
 8011670:	3708      	adds	r7, #8
 8011672:	46bd      	mov	sp, r7
 8011674:	bd80      	pop	{r7, pc}
 8011676:	bf00      	nop
 8011678:	20001124 	.word	0x20001124
 801167c:	08012eac 	.word	0x08012eac

08011680 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8011680:	b580      	push	{r7, lr}
 8011682:	b084      	sub	sp, #16
 8011684:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8011686:	4b0f      	ldr	r3, [pc, #60]	; (80116c4 <Get_SerialNum+0x44>)
 8011688:	681b      	ldr	r3, [r3, #0]
 801168a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 801168c:	4b0e      	ldr	r3, [pc, #56]	; (80116c8 <Get_SerialNum+0x48>)
 801168e:	681b      	ldr	r3, [r3, #0]
 8011690:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8011692:	4b0e      	ldr	r3, [pc, #56]	; (80116cc <Get_SerialNum+0x4c>)
 8011694:	681b      	ldr	r3, [r3, #0]
 8011696:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8011698:	68fa      	ldr	r2, [r7, #12]
 801169a:	687b      	ldr	r3, [r7, #4]
 801169c:	4413      	add	r3, r2
 801169e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80116a0:	68fb      	ldr	r3, [r7, #12]
 80116a2:	2b00      	cmp	r3, #0
 80116a4:	d009      	beq.n	80116ba <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80116a6:	2208      	movs	r2, #8
 80116a8:	4909      	ldr	r1, [pc, #36]	; (80116d0 <Get_SerialNum+0x50>)
 80116aa:	68f8      	ldr	r0, [r7, #12]
 80116ac:	f000 f814 	bl	80116d8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80116b0:	2204      	movs	r2, #4
 80116b2:	4908      	ldr	r1, [pc, #32]	; (80116d4 <Get_SerialNum+0x54>)
 80116b4:	68b8      	ldr	r0, [r7, #8]
 80116b6:	f000 f80f 	bl	80116d8 <IntToUnicode>
  }
}
 80116ba:	bf00      	nop
 80116bc:	3710      	adds	r7, #16
 80116be:	46bd      	mov	sp, r7
 80116c0:	bd80      	pop	{r7, pc}
 80116c2:	bf00      	nop
 80116c4:	1fff7a10 	.word	0x1fff7a10
 80116c8:	1fff7a14 	.word	0x1fff7a14
 80116cc:	1fff7a18 	.word	0x1fff7a18
 80116d0:	2000018e 	.word	0x2000018e
 80116d4:	2000019e 	.word	0x2000019e

080116d8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80116d8:	b480      	push	{r7}
 80116da:	b087      	sub	sp, #28
 80116dc:	af00      	add	r7, sp, #0
 80116de:	60f8      	str	r0, [r7, #12]
 80116e0:	60b9      	str	r1, [r7, #8]
 80116e2:	4613      	mov	r3, r2
 80116e4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80116e6:	2300      	movs	r3, #0
 80116e8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80116ea:	2300      	movs	r3, #0
 80116ec:	75fb      	strb	r3, [r7, #23]
 80116ee:	e027      	b.n	8011740 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80116f0:	68fb      	ldr	r3, [r7, #12]
 80116f2:	0f1b      	lsrs	r3, r3, #28
 80116f4:	2b09      	cmp	r3, #9
 80116f6:	d80b      	bhi.n	8011710 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80116f8:	68fb      	ldr	r3, [r7, #12]
 80116fa:	0f1b      	lsrs	r3, r3, #28
 80116fc:	b2da      	uxtb	r2, r3
 80116fe:	7dfb      	ldrb	r3, [r7, #23]
 8011700:	005b      	lsls	r3, r3, #1
 8011702:	4619      	mov	r1, r3
 8011704:	68bb      	ldr	r3, [r7, #8]
 8011706:	440b      	add	r3, r1
 8011708:	3230      	adds	r2, #48	; 0x30
 801170a:	b2d2      	uxtb	r2, r2
 801170c:	701a      	strb	r2, [r3, #0]
 801170e:	e00a      	b.n	8011726 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8011710:	68fb      	ldr	r3, [r7, #12]
 8011712:	0f1b      	lsrs	r3, r3, #28
 8011714:	b2da      	uxtb	r2, r3
 8011716:	7dfb      	ldrb	r3, [r7, #23]
 8011718:	005b      	lsls	r3, r3, #1
 801171a:	4619      	mov	r1, r3
 801171c:	68bb      	ldr	r3, [r7, #8]
 801171e:	440b      	add	r3, r1
 8011720:	3237      	adds	r2, #55	; 0x37
 8011722:	b2d2      	uxtb	r2, r2
 8011724:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8011726:	68fb      	ldr	r3, [r7, #12]
 8011728:	011b      	lsls	r3, r3, #4
 801172a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 801172c:	7dfb      	ldrb	r3, [r7, #23]
 801172e:	005b      	lsls	r3, r3, #1
 8011730:	3301      	adds	r3, #1
 8011732:	68ba      	ldr	r2, [r7, #8]
 8011734:	4413      	add	r3, r2
 8011736:	2200      	movs	r2, #0
 8011738:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 801173a:	7dfb      	ldrb	r3, [r7, #23]
 801173c:	3301      	adds	r3, #1
 801173e:	75fb      	strb	r3, [r7, #23]
 8011740:	7dfa      	ldrb	r2, [r7, #23]
 8011742:	79fb      	ldrb	r3, [r7, #7]
 8011744:	429a      	cmp	r2, r3
 8011746:	d3d3      	bcc.n	80116f0 <IntToUnicode+0x18>
  }
}
 8011748:	bf00      	nop
 801174a:	bf00      	nop
 801174c:	371c      	adds	r7, #28
 801174e:	46bd      	mov	sp, r7
 8011750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011754:	4770      	bx	lr
	...

08011758 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8011758:	b580      	push	{r7, lr}
 801175a:	b08a      	sub	sp, #40	; 0x28
 801175c:	af00      	add	r7, sp, #0
 801175e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8011760:	f107 0314 	add.w	r3, r7, #20
 8011764:	2200      	movs	r2, #0
 8011766:	601a      	str	r2, [r3, #0]
 8011768:	605a      	str	r2, [r3, #4]
 801176a:	609a      	str	r2, [r3, #8]
 801176c:	60da      	str	r2, [r3, #12]
 801176e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8011770:	687b      	ldr	r3, [r7, #4]
 8011772:	681b      	ldr	r3, [r3, #0]
 8011774:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8011778:	d13a      	bne.n	80117f0 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 801177a:	2300      	movs	r3, #0
 801177c:	613b      	str	r3, [r7, #16]
 801177e:	4b1e      	ldr	r3, [pc, #120]	; (80117f8 <HAL_PCD_MspInit+0xa0>)
 8011780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011782:	4a1d      	ldr	r2, [pc, #116]	; (80117f8 <HAL_PCD_MspInit+0xa0>)
 8011784:	f043 0301 	orr.w	r3, r3, #1
 8011788:	6313      	str	r3, [r2, #48]	; 0x30
 801178a:	4b1b      	ldr	r3, [pc, #108]	; (80117f8 <HAL_PCD_MspInit+0xa0>)
 801178c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801178e:	f003 0301 	and.w	r3, r3, #1
 8011792:	613b      	str	r3, [r7, #16]
 8011794:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8011796:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 801179a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801179c:	2302      	movs	r3, #2
 801179e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80117a0:	2300      	movs	r3, #0
 80117a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80117a4:	2303      	movs	r3, #3
 80117a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80117a8:	230a      	movs	r3, #10
 80117aa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80117ac:	f107 0314 	add.w	r3, r7, #20
 80117b0:	4619      	mov	r1, r3
 80117b2:	4812      	ldr	r0, [pc, #72]	; (80117fc <HAL_PCD_MspInit+0xa4>)
 80117b4:	f7f8 ffe2 	bl	800a77c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80117b8:	4b0f      	ldr	r3, [pc, #60]	; (80117f8 <HAL_PCD_MspInit+0xa0>)
 80117ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80117bc:	4a0e      	ldr	r2, [pc, #56]	; (80117f8 <HAL_PCD_MspInit+0xa0>)
 80117be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80117c2:	6353      	str	r3, [r2, #52]	; 0x34
 80117c4:	2300      	movs	r3, #0
 80117c6:	60fb      	str	r3, [r7, #12]
 80117c8:	4b0b      	ldr	r3, [pc, #44]	; (80117f8 <HAL_PCD_MspInit+0xa0>)
 80117ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80117cc:	4a0a      	ldr	r2, [pc, #40]	; (80117f8 <HAL_PCD_MspInit+0xa0>)
 80117ce:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80117d2:	6453      	str	r3, [r2, #68]	; 0x44
 80117d4:	4b08      	ldr	r3, [pc, #32]	; (80117f8 <HAL_PCD_MspInit+0xa0>)
 80117d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80117d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80117dc:	60fb      	str	r3, [r7, #12]
 80117de:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80117e0:	2200      	movs	r2, #0
 80117e2:	2100      	movs	r1, #0
 80117e4:	2043      	movs	r0, #67	; 0x43
 80117e6:	f7f8 f83c 	bl	8009862 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80117ea:	2043      	movs	r0, #67	; 0x43
 80117ec:	f7f8 f855 	bl	800989a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80117f0:	bf00      	nop
 80117f2:	3728      	adds	r7, #40	; 0x28
 80117f4:	46bd      	mov	sp, r7
 80117f6:	bd80      	pop	{r7, pc}
 80117f8:	40023800 	.word	0x40023800
 80117fc:	40020000 	.word	0x40020000

08011800 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011800:	b580      	push	{r7, lr}
 8011802:	b082      	sub	sp, #8
 8011804:	af00      	add	r7, sp, #0
 8011806:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8011808:	687b      	ldr	r3, [r7, #4]
 801180a:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 801180e:	687b      	ldr	r3, [r7, #4]
 8011810:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8011814:	4619      	mov	r1, r3
 8011816:	4610      	mov	r0, r2
 8011818:	f7fe fb92 	bl	800ff40 <USBD_LL_SetupStage>
}
 801181c:	bf00      	nop
 801181e:	3708      	adds	r7, #8
 8011820:	46bd      	mov	sp, r7
 8011822:	bd80      	pop	{r7, pc}

08011824 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011824:	b580      	push	{r7, lr}
 8011826:	b082      	sub	sp, #8
 8011828:	af00      	add	r7, sp, #0
 801182a:	6078      	str	r0, [r7, #4]
 801182c:	460b      	mov	r3, r1
 801182e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8011830:	687b      	ldr	r3, [r7, #4]
 8011832:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8011836:	78fa      	ldrb	r2, [r7, #3]
 8011838:	6879      	ldr	r1, [r7, #4]
 801183a:	4613      	mov	r3, r2
 801183c:	00db      	lsls	r3, r3, #3
 801183e:	1a9b      	subs	r3, r3, r2
 8011840:	009b      	lsls	r3, r3, #2
 8011842:	440b      	add	r3, r1
 8011844:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8011848:	681a      	ldr	r2, [r3, #0]
 801184a:	78fb      	ldrb	r3, [r7, #3]
 801184c:	4619      	mov	r1, r3
 801184e:	f7fe fbcc 	bl	800ffea <USBD_LL_DataOutStage>
}
 8011852:	bf00      	nop
 8011854:	3708      	adds	r7, #8
 8011856:	46bd      	mov	sp, r7
 8011858:	bd80      	pop	{r7, pc}

0801185a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801185a:	b580      	push	{r7, lr}
 801185c:	b082      	sub	sp, #8
 801185e:	af00      	add	r7, sp, #0
 8011860:	6078      	str	r0, [r7, #4]
 8011862:	460b      	mov	r3, r1
 8011864:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8011866:	687b      	ldr	r3, [r7, #4]
 8011868:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 801186c:	78fa      	ldrb	r2, [r7, #3]
 801186e:	6879      	ldr	r1, [r7, #4]
 8011870:	4613      	mov	r3, r2
 8011872:	00db      	lsls	r3, r3, #3
 8011874:	1a9b      	subs	r3, r3, r2
 8011876:	009b      	lsls	r3, r3, #2
 8011878:	440b      	add	r3, r1
 801187a:	3348      	adds	r3, #72	; 0x48
 801187c:	681a      	ldr	r2, [r3, #0]
 801187e:	78fb      	ldrb	r3, [r7, #3]
 8011880:	4619      	mov	r1, r3
 8011882:	f7fe fc15 	bl	80100b0 <USBD_LL_DataInStage>
}
 8011886:	bf00      	nop
 8011888:	3708      	adds	r7, #8
 801188a:	46bd      	mov	sp, r7
 801188c:	bd80      	pop	{r7, pc}

0801188e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801188e:	b580      	push	{r7, lr}
 8011890:	b082      	sub	sp, #8
 8011892:	af00      	add	r7, sp, #0
 8011894:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8011896:	687b      	ldr	r3, [r7, #4]
 8011898:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801189c:	4618      	mov	r0, r3
 801189e:	f7fe fd29 	bl	80102f4 <USBD_LL_SOF>
}
 80118a2:	bf00      	nop
 80118a4:	3708      	adds	r7, #8
 80118a6:	46bd      	mov	sp, r7
 80118a8:	bd80      	pop	{r7, pc}

080118aa <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80118aa:	b580      	push	{r7, lr}
 80118ac:	b084      	sub	sp, #16
 80118ae:	af00      	add	r7, sp, #0
 80118b0:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80118b2:	2301      	movs	r3, #1
 80118b4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80118b6:	687b      	ldr	r3, [r7, #4]
 80118b8:	68db      	ldr	r3, [r3, #12]
 80118ba:	2b02      	cmp	r3, #2
 80118bc:	d001      	beq.n	80118c2 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80118be:	f7f6 ffc7 	bl	8008850 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80118c2:	687b      	ldr	r3, [r7, #4]
 80118c4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80118c8:	7bfa      	ldrb	r2, [r7, #15]
 80118ca:	4611      	mov	r1, r2
 80118cc:	4618      	mov	r0, r3
 80118ce:	f7fe fcd3 	bl	8010278 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80118d2:	687b      	ldr	r3, [r7, #4]
 80118d4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80118d8:	4618      	mov	r0, r3
 80118da:	f7fe fc7f 	bl	80101dc <USBD_LL_Reset>
}
 80118de:	bf00      	nop
 80118e0:	3710      	adds	r7, #16
 80118e2:	46bd      	mov	sp, r7
 80118e4:	bd80      	pop	{r7, pc}
	...

080118e8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80118e8:	b580      	push	{r7, lr}
 80118ea:	b082      	sub	sp, #8
 80118ec:	af00      	add	r7, sp, #0
 80118ee:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80118f0:	687b      	ldr	r3, [r7, #4]
 80118f2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80118f6:	4618      	mov	r0, r3
 80118f8:	f7fe fcce 	bl	8010298 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80118fc:	687b      	ldr	r3, [r7, #4]
 80118fe:	681b      	ldr	r3, [r3, #0]
 8011900:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8011904:	681b      	ldr	r3, [r3, #0]
 8011906:	687a      	ldr	r2, [r7, #4]
 8011908:	6812      	ldr	r2, [r2, #0]
 801190a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801190e:	f043 0301 	orr.w	r3, r3, #1
 8011912:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8011914:	687b      	ldr	r3, [r7, #4]
 8011916:	6a1b      	ldr	r3, [r3, #32]
 8011918:	2b00      	cmp	r3, #0
 801191a:	d005      	beq.n	8011928 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801191c:	4b04      	ldr	r3, [pc, #16]	; (8011930 <HAL_PCD_SuspendCallback+0x48>)
 801191e:	691b      	ldr	r3, [r3, #16]
 8011920:	4a03      	ldr	r2, [pc, #12]	; (8011930 <HAL_PCD_SuspendCallback+0x48>)
 8011922:	f043 0306 	orr.w	r3, r3, #6
 8011926:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8011928:	bf00      	nop
 801192a:	3708      	adds	r7, #8
 801192c:	46bd      	mov	sp, r7
 801192e:	bd80      	pop	{r7, pc}
 8011930:	e000ed00 	.word	0xe000ed00

08011934 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011934:	b580      	push	{r7, lr}
 8011936:	b082      	sub	sp, #8
 8011938:	af00      	add	r7, sp, #0
 801193a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 801193c:	687b      	ldr	r3, [r7, #4]
 801193e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8011942:	4618      	mov	r0, r3
 8011944:	f7fe fcbe 	bl	80102c4 <USBD_LL_Resume>
}
 8011948:	bf00      	nop
 801194a:	3708      	adds	r7, #8
 801194c:	46bd      	mov	sp, r7
 801194e:	bd80      	pop	{r7, pc}

08011950 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011950:	b580      	push	{r7, lr}
 8011952:	b082      	sub	sp, #8
 8011954:	af00      	add	r7, sp, #0
 8011956:	6078      	str	r0, [r7, #4]
 8011958:	460b      	mov	r3, r1
 801195a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801195c:	687b      	ldr	r3, [r7, #4]
 801195e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8011962:	78fa      	ldrb	r2, [r7, #3]
 8011964:	4611      	mov	r1, r2
 8011966:	4618      	mov	r0, r3
 8011968:	f7fe fd0c 	bl	8010384 <USBD_LL_IsoOUTIncomplete>
}
 801196c:	bf00      	nop
 801196e:	3708      	adds	r7, #8
 8011970:	46bd      	mov	sp, r7
 8011972:	bd80      	pop	{r7, pc}

08011974 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011974:	b580      	push	{r7, lr}
 8011976:	b082      	sub	sp, #8
 8011978:	af00      	add	r7, sp, #0
 801197a:	6078      	str	r0, [r7, #4]
 801197c:	460b      	mov	r3, r1
 801197e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8011980:	687b      	ldr	r3, [r7, #4]
 8011982:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8011986:	78fa      	ldrb	r2, [r7, #3]
 8011988:	4611      	mov	r1, r2
 801198a:	4618      	mov	r0, r3
 801198c:	f7fe fcd4 	bl	8010338 <USBD_LL_IsoINIncomplete>
}
 8011990:	bf00      	nop
 8011992:	3708      	adds	r7, #8
 8011994:	46bd      	mov	sp, r7
 8011996:	bd80      	pop	{r7, pc}

08011998 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011998:	b580      	push	{r7, lr}
 801199a:	b082      	sub	sp, #8
 801199c:	af00      	add	r7, sp, #0
 801199e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80119a0:	687b      	ldr	r3, [r7, #4]
 80119a2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80119a6:	4618      	mov	r0, r3
 80119a8:	f7fe fd12 	bl	80103d0 <USBD_LL_DevConnected>
}
 80119ac:	bf00      	nop
 80119ae:	3708      	adds	r7, #8
 80119b0:	46bd      	mov	sp, r7
 80119b2:	bd80      	pop	{r7, pc}

080119b4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80119b4:	b580      	push	{r7, lr}
 80119b6:	b082      	sub	sp, #8
 80119b8:	af00      	add	r7, sp, #0
 80119ba:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80119bc:	687b      	ldr	r3, [r7, #4]
 80119be:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80119c2:	4618      	mov	r0, r3
 80119c4:	f7fe fd0f 	bl	80103e6 <USBD_LL_DevDisconnected>
}
 80119c8:	bf00      	nop
 80119ca:	3708      	adds	r7, #8
 80119cc:	46bd      	mov	sp, r7
 80119ce:	bd80      	pop	{r7, pc}

080119d0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80119d0:	b580      	push	{r7, lr}
 80119d2:	b082      	sub	sp, #8
 80119d4:	af00      	add	r7, sp, #0
 80119d6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80119d8:	687b      	ldr	r3, [r7, #4]
 80119da:	781b      	ldrb	r3, [r3, #0]
 80119dc:	2b00      	cmp	r3, #0
 80119de:	d13c      	bne.n	8011a5a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80119e0:	4a20      	ldr	r2, [pc, #128]	; (8011a64 <USBD_LL_Init+0x94>)
 80119e2:	687b      	ldr	r3, [r7, #4]
 80119e4:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 80119e8:	687b      	ldr	r3, [r7, #4]
 80119ea:	4a1e      	ldr	r2, [pc, #120]	; (8011a64 <USBD_LL_Init+0x94>)
 80119ec:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80119f0:	4b1c      	ldr	r3, [pc, #112]	; (8011a64 <USBD_LL_Init+0x94>)
 80119f2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80119f6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80119f8:	4b1a      	ldr	r3, [pc, #104]	; (8011a64 <USBD_LL_Init+0x94>)
 80119fa:	2204      	movs	r2, #4
 80119fc:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80119fe:	4b19      	ldr	r3, [pc, #100]	; (8011a64 <USBD_LL_Init+0x94>)
 8011a00:	2202      	movs	r2, #2
 8011a02:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8011a04:	4b17      	ldr	r3, [pc, #92]	; (8011a64 <USBD_LL_Init+0x94>)
 8011a06:	2200      	movs	r2, #0
 8011a08:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8011a0a:	4b16      	ldr	r3, [pc, #88]	; (8011a64 <USBD_LL_Init+0x94>)
 8011a0c:	2202      	movs	r2, #2
 8011a0e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8011a10:	4b14      	ldr	r3, [pc, #80]	; (8011a64 <USBD_LL_Init+0x94>)
 8011a12:	2201      	movs	r2, #1
 8011a14:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8011a16:	4b13      	ldr	r3, [pc, #76]	; (8011a64 <USBD_LL_Init+0x94>)
 8011a18:	2200      	movs	r2, #0
 8011a1a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8011a1c:	4b11      	ldr	r3, [pc, #68]	; (8011a64 <USBD_LL_Init+0x94>)
 8011a1e:	2200      	movs	r2, #0
 8011a20:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8011a22:	4b10      	ldr	r3, [pc, #64]	; (8011a64 <USBD_LL_Init+0x94>)
 8011a24:	2200      	movs	r2, #0
 8011a26:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8011a28:	4b0e      	ldr	r3, [pc, #56]	; (8011a64 <USBD_LL_Init+0x94>)
 8011a2a:	2200      	movs	r2, #0
 8011a2c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8011a2e:	480d      	ldr	r0, [pc, #52]	; (8011a64 <USBD_LL_Init+0x94>)
 8011a30:	f7f9 f93f 	bl	800acb2 <HAL_PCD_Init>
 8011a34:	4603      	mov	r3, r0
 8011a36:	2b00      	cmp	r3, #0
 8011a38:	d001      	beq.n	8011a3e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8011a3a:	f7f6 ff09 	bl	8008850 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8011a3e:	2180      	movs	r1, #128	; 0x80
 8011a40:	4808      	ldr	r0, [pc, #32]	; (8011a64 <USBD_LL_Init+0x94>)
 8011a42:	f7fa fa9c 	bl	800bf7e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8011a46:	2240      	movs	r2, #64	; 0x40
 8011a48:	2100      	movs	r1, #0
 8011a4a:	4806      	ldr	r0, [pc, #24]	; (8011a64 <USBD_LL_Init+0x94>)
 8011a4c:	f7fa fa50 	bl	800bef0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8011a50:	2280      	movs	r2, #128	; 0x80
 8011a52:	2101      	movs	r1, #1
 8011a54:	4803      	ldr	r0, [pc, #12]	; (8011a64 <USBD_LL_Init+0x94>)
 8011a56:	f7fa fa4b 	bl	800bef0 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8011a5a:	2300      	movs	r3, #0
}
 8011a5c:	4618      	mov	r0, r3
 8011a5e:	3708      	adds	r7, #8
 8011a60:	46bd      	mov	sp, r7
 8011a62:	bd80      	pop	{r7, pc}
 8011a64:	20001324 	.word	0x20001324

08011a68 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8011a68:	b580      	push	{r7, lr}
 8011a6a:	b084      	sub	sp, #16
 8011a6c:	af00      	add	r7, sp, #0
 8011a6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011a70:	2300      	movs	r3, #0
 8011a72:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011a74:	2300      	movs	r3, #0
 8011a76:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8011a78:	687b      	ldr	r3, [r7, #4]
 8011a7a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8011a7e:	4618      	mov	r0, r3
 8011a80:	f7f9 fa34 	bl	800aeec <HAL_PCD_Start>
 8011a84:	4603      	mov	r3, r0
 8011a86:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011a88:	7bfb      	ldrb	r3, [r7, #15]
 8011a8a:	4618      	mov	r0, r3
 8011a8c:	f000 f942 	bl	8011d14 <USBD_Get_USB_Status>
 8011a90:	4603      	mov	r3, r0
 8011a92:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011a94:	7bbb      	ldrb	r3, [r7, #14]
}
 8011a96:	4618      	mov	r0, r3
 8011a98:	3710      	adds	r7, #16
 8011a9a:	46bd      	mov	sp, r7
 8011a9c:	bd80      	pop	{r7, pc}

08011a9e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8011a9e:	b580      	push	{r7, lr}
 8011aa0:	b084      	sub	sp, #16
 8011aa2:	af00      	add	r7, sp, #0
 8011aa4:	6078      	str	r0, [r7, #4]
 8011aa6:	4608      	mov	r0, r1
 8011aa8:	4611      	mov	r1, r2
 8011aaa:	461a      	mov	r2, r3
 8011aac:	4603      	mov	r3, r0
 8011aae:	70fb      	strb	r3, [r7, #3]
 8011ab0:	460b      	mov	r3, r1
 8011ab2:	70bb      	strb	r3, [r7, #2]
 8011ab4:	4613      	mov	r3, r2
 8011ab6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011ab8:	2300      	movs	r3, #0
 8011aba:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011abc:	2300      	movs	r3, #0
 8011abe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8011ac0:	687b      	ldr	r3, [r7, #4]
 8011ac2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8011ac6:	78bb      	ldrb	r3, [r7, #2]
 8011ac8:	883a      	ldrh	r2, [r7, #0]
 8011aca:	78f9      	ldrb	r1, [r7, #3]
 8011acc:	f7f9 fe18 	bl	800b700 <HAL_PCD_EP_Open>
 8011ad0:	4603      	mov	r3, r0
 8011ad2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011ad4:	7bfb      	ldrb	r3, [r7, #15]
 8011ad6:	4618      	mov	r0, r3
 8011ad8:	f000 f91c 	bl	8011d14 <USBD_Get_USB_Status>
 8011adc:	4603      	mov	r3, r0
 8011ade:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011ae0:	7bbb      	ldrb	r3, [r7, #14]
}
 8011ae2:	4618      	mov	r0, r3
 8011ae4:	3710      	adds	r7, #16
 8011ae6:	46bd      	mov	sp, r7
 8011ae8:	bd80      	pop	{r7, pc}

08011aea <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011aea:	b580      	push	{r7, lr}
 8011aec:	b084      	sub	sp, #16
 8011aee:	af00      	add	r7, sp, #0
 8011af0:	6078      	str	r0, [r7, #4]
 8011af2:	460b      	mov	r3, r1
 8011af4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011af6:	2300      	movs	r3, #0
 8011af8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011afa:	2300      	movs	r3, #0
 8011afc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8011afe:	687b      	ldr	r3, [r7, #4]
 8011b00:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8011b04:	78fa      	ldrb	r2, [r7, #3]
 8011b06:	4611      	mov	r1, r2
 8011b08:	4618      	mov	r0, r3
 8011b0a:	f7f9 fe61 	bl	800b7d0 <HAL_PCD_EP_Close>
 8011b0e:	4603      	mov	r3, r0
 8011b10:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011b12:	7bfb      	ldrb	r3, [r7, #15]
 8011b14:	4618      	mov	r0, r3
 8011b16:	f000 f8fd 	bl	8011d14 <USBD_Get_USB_Status>
 8011b1a:	4603      	mov	r3, r0
 8011b1c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011b1e:	7bbb      	ldrb	r3, [r7, #14]
}
 8011b20:	4618      	mov	r0, r3
 8011b22:	3710      	adds	r7, #16
 8011b24:	46bd      	mov	sp, r7
 8011b26:	bd80      	pop	{r7, pc}

08011b28 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011b28:	b580      	push	{r7, lr}
 8011b2a:	b084      	sub	sp, #16
 8011b2c:	af00      	add	r7, sp, #0
 8011b2e:	6078      	str	r0, [r7, #4]
 8011b30:	460b      	mov	r3, r1
 8011b32:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011b34:	2300      	movs	r3, #0
 8011b36:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011b38:	2300      	movs	r3, #0
 8011b3a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8011b3c:	687b      	ldr	r3, [r7, #4]
 8011b3e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8011b42:	78fa      	ldrb	r2, [r7, #3]
 8011b44:	4611      	mov	r1, r2
 8011b46:	4618      	mov	r0, r3
 8011b48:	f7f9 ff39 	bl	800b9be <HAL_PCD_EP_SetStall>
 8011b4c:	4603      	mov	r3, r0
 8011b4e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011b50:	7bfb      	ldrb	r3, [r7, #15]
 8011b52:	4618      	mov	r0, r3
 8011b54:	f000 f8de 	bl	8011d14 <USBD_Get_USB_Status>
 8011b58:	4603      	mov	r3, r0
 8011b5a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011b5c:	7bbb      	ldrb	r3, [r7, #14]
}
 8011b5e:	4618      	mov	r0, r3
 8011b60:	3710      	adds	r7, #16
 8011b62:	46bd      	mov	sp, r7
 8011b64:	bd80      	pop	{r7, pc}

08011b66 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011b66:	b580      	push	{r7, lr}
 8011b68:	b084      	sub	sp, #16
 8011b6a:	af00      	add	r7, sp, #0
 8011b6c:	6078      	str	r0, [r7, #4]
 8011b6e:	460b      	mov	r3, r1
 8011b70:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011b72:	2300      	movs	r3, #0
 8011b74:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011b76:	2300      	movs	r3, #0
 8011b78:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8011b7a:	687b      	ldr	r3, [r7, #4]
 8011b7c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8011b80:	78fa      	ldrb	r2, [r7, #3]
 8011b82:	4611      	mov	r1, r2
 8011b84:	4618      	mov	r0, r3
 8011b86:	f7f9 ff7e 	bl	800ba86 <HAL_PCD_EP_ClrStall>
 8011b8a:	4603      	mov	r3, r0
 8011b8c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011b8e:	7bfb      	ldrb	r3, [r7, #15]
 8011b90:	4618      	mov	r0, r3
 8011b92:	f000 f8bf 	bl	8011d14 <USBD_Get_USB_Status>
 8011b96:	4603      	mov	r3, r0
 8011b98:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011b9a:	7bbb      	ldrb	r3, [r7, #14]
}
 8011b9c:	4618      	mov	r0, r3
 8011b9e:	3710      	adds	r7, #16
 8011ba0:	46bd      	mov	sp, r7
 8011ba2:	bd80      	pop	{r7, pc}

08011ba4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011ba4:	b480      	push	{r7}
 8011ba6:	b085      	sub	sp, #20
 8011ba8:	af00      	add	r7, sp, #0
 8011baa:	6078      	str	r0, [r7, #4]
 8011bac:	460b      	mov	r3, r1
 8011bae:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8011bb0:	687b      	ldr	r3, [r7, #4]
 8011bb2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8011bb6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8011bb8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8011bbc:	2b00      	cmp	r3, #0
 8011bbe:	da0b      	bge.n	8011bd8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8011bc0:	78fb      	ldrb	r3, [r7, #3]
 8011bc2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8011bc6:	68f9      	ldr	r1, [r7, #12]
 8011bc8:	4613      	mov	r3, r2
 8011bca:	00db      	lsls	r3, r3, #3
 8011bcc:	1a9b      	subs	r3, r3, r2
 8011bce:	009b      	lsls	r3, r3, #2
 8011bd0:	440b      	add	r3, r1
 8011bd2:	333e      	adds	r3, #62	; 0x3e
 8011bd4:	781b      	ldrb	r3, [r3, #0]
 8011bd6:	e00b      	b.n	8011bf0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8011bd8:	78fb      	ldrb	r3, [r7, #3]
 8011bda:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8011bde:	68f9      	ldr	r1, [r7, #12]
 8011be0:	4613      	mov	r3, r2
 8011be2:	00db      	lsls	r3, r3, #3
 8011be4:	1a9b      	subs	r3, r3, r2
 8011be6:	009b      	lsls	r3, r3, #2
 8011be8:	440b      	add	r3, r1
 8011bea:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8011bee:	781b      	ldrb	r3, [r3, #0]
  }
}
 8011bf0:	4618      	mov	r0, r3
 8011bf2:	3714      	adds	r7, #20
 8011bf4:	46bd      	mov	sp, r7
 8011bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bfa:	4770      	bx	lr

08011bfc <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8011bfc:	b580      	push	{r7, lr}
 8011bfe:	b084      	sub	sp, #16
 8011c00:	af00      	add	r7, sp, #0
 8011c02:	6078      	str	r0, [r7, #4]
 8011c04:	460b      	mov	r3, r1
 8011c06:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011c08:	2300      	movs	r3, #0
 8011c0a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011c0c:	2300      	movs	r3, #0
 8011c0e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8011c10:	687b      	ldr	r3, [r7, #4]
 8011c12:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8011c16:	78fa      	ldrb	r2, [r7, #3]
 8011c18:	4611      	mov	r1, r2
 8011c1a:	4618      	mov	r0, r3
 8011c1c:	f7f9 fd4b 	bl	800b6b6 <HAL_PCD_SetAddress>
 8011c20:	4603      	mov	r3, r0
 8011c22:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011c24:	7bfb      	ldrb	r3, [r7, #15]
 8011c26:	4618      	mov	r0, r3
 8011c28:	f000 f874 	bl	8011d14 <USBD_Get_USB_Status>
 8011c2c:	4603      	mov	r3, r0
 8011c2e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011c30:	7bbb      	ldrb	r3, [r7, #14]
}
 8011c32:	4618      	mov	r0, r3
 8011c34:	3710      	adds	r7, #16
 8011c36:	46bd      	mov	sp, r7
 8011c38:	bd80      	pop	{r7, pc}

08011c3a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8011c3a:	b580      	push	{r7, lr}
 8011c3c:	b086      	sub	sp, #24
 8011c3e:	af00      	add	r7, sp, #0
 8011c40:	60f8      	str	r0, [r7, #12]
 8011c42:	607a      	str	r2, [r7, #4]
 8011c44:	603b      	str	r3, [r7, #0]
 8011c46:	460b      	mov	r3, r1
 8011c48:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011c4a:	2300      	movs	r3, #0
 8011c4c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011c4e:	2300      	movs	r3, #0
 8011c50:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8011c52:	68fb      	ldr	r3, [r7, #12]
 8011c54:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8011c58:	7af9      	ldrb	r1, [r7, #11]
 8011c5a:	683b      	ldr	r3, [r7, #0]
 8011c5c:	687a      	ldr	r2, [r7, #4]
 8011c5e:	f7f9 fe64 	bl	800b92a <HAL_PCD_EP_Transmit>
 8011c62:	4603      	mov	r3, r0
 8011c64:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011c66:	7dfb      	ldrb	r3, [r7, #23]
 8011c68:	4618      	mov	r0, r3
 8011c6a:	f000 f853 	bl	8011d14 <USBD_Get_USB_Status>
 8011c6e:	4603      	mov	r3, r0
 8011c70:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8011c72:	7dbb      	ldrb	r3, [r7, #22]
}
 8011c74:	4618      	mov	r0, r3
 8011c76:	3718      	adds	r7, #24
 8011c78:	46bd      	mov	sp, r7
 8011c7a:	bd80      	pop	{r7, pc}

08011c7c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8011c7c:	b580      	push	{r7, lr}
 8011c7e:	b086      	sub	sp, #24
 8011c80:	af00      	add	r7, sp, #0
 8011c82:	60f8      	str	r0, [r7, #12]
 8011c84:	607a      	str	r2, [r7, #4]
 8011c86:	603b      	str	r3, [r7, #0]
 8011c88:	460b      	mov	r3, r1
 8011c8a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011c8c:	2300      	movs	r3, #0
 8011c8e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011c90:	2300      	movs	r3, #0
 8011c92:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8011c94:	68fb      	ldr	r3, [r7, #12]
 8011c96:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8011c9a:	7af9      	ldrb	r1, [r7, #11]
 8011c9c:	683b      	ldr	r3, [r7, #0]
 8011c9e:	687a      	ldr	r2, [r7, #4]
 8011ca0:	f7f9 fde0 	bl	800b864 <HAL_PCD_EP_Receive>
 8011ca4:	4603      	mov	r3, r0
 8011ca6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011ca8:	7dfb      	ldrb	r3, [r7, #23]
 8011caa:	4618      	mov	r0, r3
 8011cac:	f000 f832 	bl	8011d14 <USBD_Get_USB_Status>
 8011cb0:	4603      	mov	r3, r0
 8011cb2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8011cb4:	7dbb      	ldrb	r3, [r7, #22]
}
 8011cb6:	4618      	mov	r0, r3
 8011cb8:	3718      	adds	r7, #24
 8011cba:	46bd      	mov	sp, r7
 8011cbc:	bd80      	pop	{r7, pc}

08011cbe <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011cbe:	b580      	push	{r7, lr}
 8011cc0:	b082      	sub	sp, #8
 8011cc2:	af00      	add	r7, sp, #0
 8011cc4:	6078      	str	r0, [r7, #4]
 8011cc6:	460b      	mov	r3, r1
 8011cc8:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8011cca:	687b      	ldr	r3, [r7, #4]
 8011ccc:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8011cd0:	78fa      	ldrb	r2, [r7, #3]
 8011cd2:	4611      	mov	r1, r2
 8011cd4:	4618      	mov	r0, r3
 8011cd6:	f7f9 fe10 	bl	800b8fa <HAL_PCD_EP_GetRxCount>
 8011cda:	4603      	mov	r3, r0
}
 8011cdc:	4618      	mov	r0, r3
 8011cde:	3708      	adds	r7, #8
 8011ce0:	46bd      	mov	sp, r7
 8011ce2:	bd80      	pop	{r7, pc}

08011ce4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8011ce4:	b480      	push	{r7}
 8011ce6:	b083      	sub	sp, #12
 8011ce8:	af00      	add	r7, sp, #0
 8011cea:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8011cec:	4b03      	ldr	r3, [pc, #12]	; (8011cfc <USBD_static_malloc+0x18>)
}
 8011cee:	4618      	mov	r0, r3
 8011cf0:	370c      	adds	r7, #12
 8011cf2:	46bd      	mov	sp, r7
 8011cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cf8:	4770      	bx	lr
 8011cfa:	bf00      	nop
 8011cfc:	2000172c 	.word	0x2000172c

08011d00 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8011d00:	b480      	push	{r7}
 8011d02:	b083      	sub	sp, #12
 8011d04:	af00      	add	r7, sp, #0
 8011d06:	6078      	str	r0, [r7, #4]

}
 8011d08:	bf00      	nop
 8011d0a:	370c      	adds	r7, #12
 8011d0c:	46bd      	mov	sp, r7
 8011d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d12:	4770      	bx	lr

08011d14 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8011d14:	b480      	push	{r7}
 8011d16:	b085      	sub	sp, #20
 8011d18:	af00      	add	r7, sp, #0
 8011d1a:	4603      	mov	r3, r0
 8011d1c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011d1e:	2300      	movs	r3, #0
 8011d20:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8011d22:	79fb      	ldrb	r3, [r7, #7]
 8011d24:	2b03      	cmp	r3, #3
 8011d26:	d817      	bhi.n	8011d58 <USBD_Get_USB_Status+0x44>
 8011d28:	a201      	add	r2, pc, #4	; (adr r2, 8011d30 <USBD_Get_USB_Status+0x1c>)
 8011d2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011d2e:	bf00      	nop
 8011d30:	08011d41 	.word	0x08011d41
 8011d34:	08011d47 	.word	0x08011d47
 8011d38:	08011d4d 	.word	0x08011d4d
 8011d3c:	08011d53 	.word	0x08011d53
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8011d40:	2300      	movs	r3, #0
 8011d42:	73fb      	strb	r3, [r7, #15]
    break;
 8011d44:	e00b      	b.n	8011d5e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8011d46:	2303      	movs	r3, #3
 8011d48:	73fb      	strb	r3, [r7, #15]
    break;
 8011d4a:	e008      	b.n	8011d5e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8011d4c:	2301      	movs	r3, #1
 8011d4e:	73fb      	strb	r3, [r7, #15]
    break;
 8011d50:	e005      	b.n	8011d5e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8011d52:	2303      	movs	r3, #3
 8011d54:	73fb      	strb	r3, [r7, #15]
    break;
 8011d56:	e002      	b.n	8011d5e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8011d58:	2303      	movs	r3, #3
 8011d5a:	73fb      	strb	r3, [r7, #15]
    break;
 8011d5c:	bf00      	nop
  }
  return usb_status;
 8011d5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8011d60:	4618      	mov	r0, r3
 8011d62:	3714      	adds	r7, #20
 8011d64:	46bd      	mov	sp, r7
 8011d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d6a:	4770      	bx	lr

08011d6c <main>:
 */

#include "main.h"

int main(void)
{
 8011d6c:	b580      	push	{r7, lr}
 8011d6e:	af00      	add	r7, sp, #0

	hwInit();
 8011d70:	f7f7 fbd0 	bl	8009514 <hwInit>
	apInit();
 8011d74:	f7f6 fc06 	bl	8008584 <apInit>

	apMain();
 8011d78:	f7f6 fc12 	bl	80085a0 <apMain>
	return 0;
 8011d7c:	2300      	movs	r3, #0
}
 8011d7e:	4618      	mov	r0, r3
 8011d80:	bd80      	pop	{r7, pc}
	...

08011d84 <__errno>:
 8011d84:	4b01      	ldr	r3, [pc, #4]	; (8011d8c <__errno+0x8>)
 8011d86:	6818      	ldr	r0, [r3, #0]
 8011d88:	4770      	bx	lr
 8011d8a:	bf00      	nop
 8011d8c:	200001a8 	.word	0x200001a8

08011d90 <__libc_init_array>:
 8011d90:	b570      	push	{r4, r5, r6, lr}
 8011d92:	4d0d      	ldr	r5, [pc, #52]	; (8011dc8 <__libc_init_array+0x38>)
 8011d94:	4c0d      	ldr	r4, [pc, #52]	; (8011dcc <__libc_init_array+0x3c>)
 8011d96:	1b64      	subs	r4, r4, r5
 8011d98:	10a4      	asrs	r4, r4, #2
 8011d9a:	2600      	movs	r6, #0
 8011d9c:	42a6      	cmp	r6, r4
 8011d9e:	d109      	bne.n	8011db4 <__libc_init_array+0x24>
 8011da0:	4d0b      	ldr	r5, [pc, #44]	; (8011dd0 <__libc_init_array+0x40>)
 8011da2:	4c0c      	ldr	r4, [pc, #48]	; (8011dd4 <__libc_init_array+0x44>)
 8011da4:	f001 f824 	bl	8012df0 <_init>
 8011da8:	1b64      	subs	r4, r4, r5
 8011daa:	10a4      	asrs	r4, r4, #2
 8011dac:	2600      	movs	r6, #0
 8011dae:	42a6      	cmp	r6, r4
 8011db0:	d105      	bne.n	8011dbe <__libc_init_array+0x2e>
 8011db2:	bd70      	pop	{r4, r5, r6, pc}
 8011db4:	f855 3b04 	ldr.w	r3, [r5], #4
 8011db8:	4798      	blx	r3
 8011dba:	3601      	adds	r6, #1
 8011dbc:	e7ee      	b.n	8011d9c <__libc_init_array+0xc>
 8011dbe:	f855 3b04 	ldr.w	r3, [r5], #4
 8011dc2:	4798      	blx	r3
 8011dc4:	3601      	adds	r6, #1
 8011dc6:	e7f2      	b.n	8011dae <__libc_init_array+0x1e>
 8011dc8:	08012fdc 	.word	0x08012fdc
 8011dcc:	08012fdc 	.word	0x08012fdc
 8011dd0:	08012fdc 	.word	0x08012fdc
 8011dd4:	08012fe0 	.word	0x08012fe0

08011dd8 <memset>:
 8011dd8:	4402      	add	r2, r0
 8011dda:	4603      	mov	r3, r0
 8011ddc:	4293      	cmp	r3, r2
 8011dde:	d100      	bne.n	8011de2 <memset+0xa>
 8011de0:	4770      	bx	lr
 8011de2:	f803 1b01 	strb.w	r1, [r3], #1
 8011de6:	e7f9      	b.n	8011ddc <memset+0x4>

08011de8 <iprintf>:
 8011de8:	b40f      	push	{r0, r1, r2, r3}
 8011dea:	4b0a      	ldr	r3, [pc, #40]	; (8011e14 <iprintf+0x2c>)
 8011dec:	b513      	push	{r0, r1, r4, lr}
 8011dee:	681c      	ldr	r4, [r3, #0]
 8011df0:	b124      	cbz	r4, 8011dfc <iprintf+0x14>
 8011df2:	69a3      	ldr	r3, [r4, #24]
 8011df4:	b913      	cbnz	r3, 8011dfc <iprintf+0x14>
 8011df6:	4620      	mov	r0, r4
 8011df8:	f000 fa5e 	bl	80122b8 <__sinit>
 8011dfc:	ab05      	add	r3, sp, #20
 8011dfe:	9a04      	ldr	r2, [sp, #16]
 8011e00:	68a1      	ldr	r1, [r4, #8]
 8011e02:	9301      	str	r3, [sp, #4]
 8011e04:	4620      	mov	r0, r4
 8011e06:	f000 fc67 	bl	80126d8 <_vfiprintf_r>
 8011e0a:	b002      	add	sp, #8
 8011e0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011e10:	b004      	add	sp, #16
 8011e12:	4770      	bx	lr
 8011e14:	200001a8 	.word	0x200001a8

08011e18 <_puts_r>:
 8011e18:	b570      	push	{r4, r5, r6, lr}
 8011e1a:	460e      	mov	r6, r1
 8011e1c:	4605      	mov	r5, r0
 8011e1e:	b118      	cbz	r0, 8011e28 <_puts_r+0x10>
 8011e20:	6983      	ldr	r3, [r0, #24]
 8011e22:	b90b      	cbnz	r3, 8011e28 <_puts_r+0x10>
 8011e24:	f000 fa48 	bl	80122b8 <__sinit>
 8011e28:	69ab      	ldr	r3, [r5, #24]
 8011e2a:	68ac      	ldr	r4, [r5, #8]
 8011e2c:	b913      	cbnz	r3, 8011e34 <_puts_r+0x1c>
 8011e2e:	4628      	mov	r0, r5
 8011e30:	f000 fa42 	bl	80122b8 <__sinit>
 8011e34:	4b2c      	ldr	r3, [pc, #176]	; (8011ee8 <_puts_r+0xd0>)
 8011e36:	429c      	cmp	r4, r3
 8011e38:	d120      	bne.n	8011e7c <_puts_r+0x64>
 8011e3a:	686c      	ldr	r4, [r5, #4]
 8011e3c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011e3e:	07db      	lsls	r3, r3, #31
 8011e40:	d405      	bmi.n	8011e4e <_puts_r+0x36>
 8011e42:	89a3      	ldrh	r3, [r4, #12]
 8011e44:	0598      	lsls	r0, r3, #22
 8011e46:	d402      	bmi.n	8011e4e <_puts_r+0x36>
 8011e48:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011e4a:	f000 fad3 	bl	80123f4 <__retarget_lock_acquire_recursive>
 8011e4e:	89a3      	ldrh	r3, [r4, #12]
 8011e50:	0719      	lsls	r1, r3, #28
 8011e52:	d51d      	bpl.n	8011e90 <_puts_r+0x78>
 8011e54:	6923      	ldr	r3, [r4, #16]
 8011e56:	b1db      	cbz	r3, 8011e90 <_puts_r+0x78>
 8011e58:	3e01      	subs	r6, #1
 8011e5a:	68a3      	ldr	r3, [r4, #8]
 8011e5c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8011e60:	3b01      	subs	r3, #1
 8011e62:	60a3      	str	r3, [r4, #8]
 8011e64:	bb39      	cbnz	r1, 8011eb6 <_puts_r+0x9e>
 8011e66:	2b00      	cmp	r3, #0
 8011e68:	da38      	bge.n	8011edc <_puts_r+0xc4>
 8011e6a:	4622      	mov	r2, r4
 8011e6c:	210a      	movs	r1, #10
 8011e6e:	4628      	mov	r0, r5
 8011e70:	f000 f848 	bl	8011f04 <__swbuf_r>
 8011e74:	3001      	adds	r0, #1
 8011e76:	d011      	beq.n	8011e9c <_puts_r+0x84>
 8011e78:	250a      	movs	r5, #10
 8011e7a:	e011      	b.n	8011ea0 <_puts_r+0x88>
 8011e7c:	4b1b      	ldr	r3, [pc, #108]	; (8011eec <_puts_r+0xd4>)
 8011e7e:	429c      	cmp	r4, r3
 8011e80:	d101      	bne.n	8011e86 <_puts_r+0x6e>
 8011e82:	68ac      	ldr	r4, [r5, #8]
 8011e84:	e7da      	b.n	8011e3c <_puts_r+0x24>
 8011e86:	4b1a      	ldr	r3, [pc, #104]	; (8011ef0 <_puts_r+0xd8>)
 8011e88:	429c      	cmp	r4, r3
 8011e8a:	bf08      	it	eq
 8011e8c:	68ec      	ldreq	r4, [r5, #12]
 8011e8e:	e7d5      	b.n	8011e3c <_puts_r+0x24>
 8011e90:	4621      	mov	r1, r4
 8011e92:	4628      	mov	r0, r5
 8011e94:	f000 f888 	bl	8011fa8 <__swsetup_r>
 8011e98:	2800      	cmp	r0, #0
 8011e9a:	d0dd      	beq.n	8011e58 <_puts_r+0x40>
 8011e9c:	f04f 35ff 	mov.w	r5, #4294967295
 8011ea0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011ea2:	07da      	lsls	r2, r3, #31
 8011ea4:	d405      	bmi.n	8011eb2 <_puts_r+0x9a>
 8011ea6:	89a3      	ldrh	r3, [r4, #12]
 8011ea8:	059b      	lsls	r3, r3, #22
 8011eaa:	d402      	bmi.n	8011eb2 <_puts_r+0x9a>
 8011eac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011eae:	f000 faa2 	bl	80123f6 <__retarget_lock_release_recursive>
 8011eb2:	4628      	mov	r0, r5
 8011eb4:	bd70      	pop	{r4, r5, r6, pc}
 8011eb6:	2b00      	cmp	r3, #0
 8011eb8:	da04      	bge.n	8011ec4 <_puts_r+0xac>
 8011eba:	69a2      	ldr	r2, [r4, #24]
 8011ebc:	429a      	cmp	r2, r3
 8011ebe:	dc06      	bgt.n	8011ece <_puts_r+0xb6>
 8011ec0:	290a      	cmp	r1, #10
 8011ec2:	d004      	beq.n	8011ece <_puts_r+0xb6>
 8011ec4:	6823      	ldr	r3, [r4, #0]
 8011ec6:	1c5a      	adds	r2, r3, #1
 8011ec8:	6022      	str	r2, [r4, #0]
 8011eca:	7019      	strb	r1, [r3, #0]
 8011ecc:	e7c5      	b.n	8011e5a <_puts_r+0x42>
 8011ece:	4622      	mov	r2, r4
 8011ed0:	4628      	mov	r0, r5
 8011ed2:	f000 f817 	bl	8011f04 <__swbuf_r>
 8011ed6:	3001      	adds	r0, #1
 8011ed8:	d1bf      	bne.n	8011e5a <_puts_r+0x42>
 8011eda:	e7df      	b.n	8011e9c <_puts_r+0x84>
 8011edc:	6823      	ldr	r3, [r4, #0]
 8011ede:	250a      	movs	r5, #10
 8011ee0:	1c5a      	adds	r2, r3, #1
 8011ee2:	6022      	str	r2, [r4, #0]
 8011ee4:	701d      	strb	r5, [r3, #0]
 8011ee6:	e7db      	b.n	8011ea0 <_puts_r+0x88>
 8011ee8:	08012f60 	.word	0x08012f60
 8011eec:	08012f80 	.word	0x08012f80
 8011ef0:	08012f40 	.word	0x08012f40

08011ef4 <puts>:
 8011ef4:	4b02      	ldr	r3, [pc, #8]	; (8011f00 <puts+0xc>)
 8011ef6:	4601      	mov	r1, r0
 8011ef8:	6818      	ldr	r0, [r3, #0]
 8011efa:	f7ff bf8d 	b.w	8011e18 <_puts_r>
 8011efe:	bf00      	nop
 8011f00:	200001a8 	.word	0x200001a8

08011f04 <__swbuf_r>:
 8011f04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011f06:	460e      	mov	r6, r1
 8011f08:	4614      	mov	r4, r2
 8011f0a:	4605      	mov	r5, r0
 8011f0c:	b118      	cbz	r0, 8011f16 <__swbuf_r+0x12>
 8011f0e:	6983      	ldr	r3, [r0, #24]
 8011f10:	b90b      	cbnz	r3, 8011f16 <__swbuf_r+0x12>
 8011f12:	f000 f9d1 	bl	80122b8 <__sinit>
 8011f16:	4b21      	ldr	r3, [pc, #132]	; (8011f9c <__swbuf_r+0x98>)
 8011f18:	429c      	cmp	r4, r3
 8011f1a:	d12b      	bne.n	8011f74 <__swbuf_r+0x70>
 8011f1c:	686c      	ldr	r4, [r5, #4]
 8011f1e:	69a3      	ldr	r3, [r4, #24]
 8011f20:	60a3      	str	r3, [r4, #8]
 8011f22:	89a3      	ldrh	r3, [r4, #12]
 8011f24:	071a      	lsls	r2, r3, #28
 8011f26:	d52f      	bpl.n	8011f88 <__swbuf_r+0x84>
 8011f28:	6923      	ldr	r3, [r4, #16]
 8011f2a:	b36b      	cbz	r3, 8011f88 <__swbuf_r+0x84>
 8011f2c:	6923      	ldr	r3, [r4, #16]
 8011f2e:	6820      	ldr	r0, [r4, #0]
 8011f30:	1ac0      	subs	r0, r0, r3
 8011f32:	6963      	ldr	r3, [r4, #20]
 8011f34:	b2f6      	uxtb	r6, r6
 8011f36:	4283      	cmp	r3, r0
 8011f38:	4637      	mov	r7, r6
 8011f3a:	dc04      	bgt.n	8011f46 <__swbuf_r+0x42>
 8011f3c:	4621      	mov	r1, r4
 8011f3e:	4628      	mov	r0, r5
 8011f40:	f000 f926 	bl	8012190 <_fflush_r>
 8011f44:	bb30      	cbnz	r0, 8011f94 <__swbuf_r+0x90>
 8011f46:	68a3      	ldr	r3, [r4, #8]
 8011f48:	3b01      	subs	r3, #1
 8011f4a:	60a3      	str	r3, [r4, #8]
 8011f4c:	6823      	ldr	r3, [r4, #0]
 8011f4e:	1c5a      	adds	r2, r3, #1
 8011f50:	6022      	str	r2, [r4, #0]
 8011f52:	701e      	strb	r6, [r3, #0]
 8011f54:	6963      	ldr	r3, [r4, #20]
 8011f56:	3001      	adds	r0, #1
 8011f58:	4283      	cmp	r3, r0
 8011f5a:	d004      	beq.n	8011f66 <__swbuf_r+0x62>
 8011f5c:	89a3      	ldrh	r3, [r4, #12]
 8011f5e:	07db      	lsls	r3, r3, #31
 8011f60:	d506      	bpl.n	8011f70 <__swbuf_r+0x6c>
 8011f62:	2e0a      	cmp	r6, #10
 8011f64:	d104      	bne.n	8011f70 <__swbuf_r+0x6c>
 8011f66:	4621      	mov	r1, r4
 8011f68:	4628      	mov	r0, r5
 8011f6a:	f000 f911 	bl	8012190 <_fflush_r>
 8011f6e:	b988      	cbnz	r0, 8011f94 <__swbuf_r+0x90>
 8011f70:	4638      	mov	r0, r7
 8011f72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011f74:	4b0a      	ldr	r3, [pc, #40]	; (8011fa0 <__swbuf_r+0x9c>)
 8011f76:	429c      	cmp	r4, r3
 8011f78:	d101      	bne.n	8011f7e <__swbuf_r+0x7a>
 8011f7a:	68ac      	ldr	r4, [r5, #8]
 8011f7c:	e7cf      	b.n	8011f1e <__swbuf_r+0x1a>
 8011f7e:	4b09      	ldr	r3, [pc, #36]	; (8011fa4 <__swbuf_r+0xa0>)
 8011f80:	429c      	cmp	r4, r3
 8011f82:	bf08      	it	eq
 8011f84:	68ec      	ldreq	r4, [r5, #12]
 8011f86:	e7ca      	b.n	8011f1e <__swbuf_r+0x1a>
 8011f88:	4621      	mov	r1, r4
 8011f8a:	4628      	mov	r0, r5
 8011f8c:	f000 f80c 	bl	8011fa8 <__swsetup_r>
 8011f90:	2800      	cmp	r0, #0
 8011f92:	d0cb      	beq.n	8011f2c <__swbuf_r+0x28>
 8011f94:	f04f 37ff 	mov.w	r7, #4294967295
 8011f98:	e7ea      	b.n	8011f70 <__swbuf_r+0x6c>
 8011f9a:	bf00      	nop
 8011f9c:	08012f60 	.word	0x08012f60
 8011fa0:	08012f80 	.word	0x08012f80
 8011fa4:	08012f40 	.word	0x08012f40

08011fa8 <__swsetup_r>:
 8011fa8:	4b32      	ldr	r3, [pc, #200]	; (8012074 <__swsetup_r+0xcc>)
 8011faa:	b570      	push	{r4, r5, r6, lr}
 8011fac:	681d      	ldr	r5, [r3, #0]
 8011fae:	4606      	mov	r6, r0
 8011fb0:	460c      	mov	r4, r1
 8011fb2:	b125      	cbz	r5, 8011fbe <__swsetup_r+0x16>
 8011fb4:	69ab      	ldr	r3, [r5, #24]
 8011fb6:	b913      	cbnz	r3, 8011fbe <__swsetup_r+0x16>
 8011fb8:	4628      	mov	r0, r5
 8011fba:	f000 f97d 	bl	80122b8 <__sinit>
 8011fbe:	4b2e      	ldr	r3, [pc, #184]	; (8012078 <__swsetup_r+0xd0>)
 8011fc0:	429c      	cmp	r4, r3
 8011fc2:	d10f      	bne.n	8011fe4 <__swsetup_r+0x3c>
 8011fc4:	686c      	ldr	r4, [r5, #4]
 8011fc6:	89a3      	ldrh	r3, [r4, #12]
 8011fc8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011fcc:	0719      	lsls	r1, r3, #28
 8011fce:	d42c      	bmi.n	801202a <__swsetup_r+0x82>
 8011fd0:	06dd      	lsls	r5, r3, #27
 8011fd2:	d411      	bmi.n	8011ff8 <__swsetup_r+0x50>
 8011fd4:	2309      	movs	r3, #9
 8011fd6:	6033      	str	r3, [r6, #0]
 8011fd8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8011fdc:	81a3      	strh	r3, [r4, #12]
 8011fde:	f04f 30ff 	mov.w	r0, #4294967295
 8011fe2:	e03e      	b.n	8012062 <__swsetup_r+0xba>
 8011fe4:	4b25      	ldr	r3, [pc, #148]	; (801207c <__swsetup_r+0xd4>)
 8011fe6:	429c      	cmp	r4, r3
 8011fe8:	d101      	bne.n	8011fee <__swsetup_r+0x46>
 8011fea:	68ac      	ldr	r4, [r5, #8]
 8011fec:	e7eb      	b.n	8011fc6 <__swsetup_r+0x1e>
 8011fee:	4b24      	ldr	r3, [pc, #144]	; (8012080 <__swsetup_r+0xd8>)
 8011ff0:	429c      	cmp	r4, r3
 8011ff2:	bf08      	it	eq
 8011ff4:	68ec      	ldreq	r4, [r5, #12]
 8011ff6:	e7e6      	b.n	8011fc6 <__swsetup_r+0x1e>
 8011ff8:	0758      	lsls	r0, r3, #29
 8011ffa:	d512      	bpl.n	8012022 <__swsetup_r+0x7a>
 8011ffc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011ffe:	b141      	cbz	r1, 8012012 <__swsetup_r+0x6a>
 8012000:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012004:	4299      	cmp	r1, r3
 8012006:	d002      	beq.n	801200e <__swsetup_r+0x66>
 8012008:	4630      	mov	r0, r6
 801200a:	f000 fa5b 	bl	80124c4 <_free_r>
 801200e:	2300      	movs	r3, #0
 8012010:	6363      	str	r3, [r4, #52]	; 0x34
 8012012:	89a3      	ldrh	r3, [r4, #12]
 8012014:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8012018:	81a3      	strh	r3, [r4, #12]
 801201a:	2300      	movs	r3, #0
 801201c:	6063      	str	r3, [r4, #4]
 801201e:	6923      	ldr	r3, [r4, #16]
 8012020:	6023      	str	r3, [r4, #0]
 8012022:	89a3      	ldrh	r3, [r4, #12]
 8012024:	f043 0308 	orr.w	r3, r3, #8
 8012028:	81a3      	strh	r3, [r4, #12]
 801202a:	6923      	ldr	r3, [r4, #16]
 801202c:	b94b      	cbnz	r3, 8012042 <__swsetup_r+0x9a>
 801202e:	89a3      	ldrh	r3, [r4, #12]
 8012030:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8012034:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012038:	d003      	beq.n	8012042 <__swsetup_r+0x9a>
 801203a:	4621      	mov	r1, r4
 801203c:	4630      	mov	r0, r6
 801203e:	f000 fa01 	bl	8012444 <__smakebuf_r>
 8012042:	89a0      	ldrh	r0, [r4, #12]
 8012044:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8012048:	f010 0301 	ands.w	r3, r0, #1
 801204c:	d00a      	beq.n	8012064 <__swsetup_r+0xbc>
 801204e:	2300      	movs	r3, #0
 8012050:	60a3      	str	r3, [r4, #8]
 8012052:	6963      	ldr	r3, [r4, #20]
 8012054:	425b      	negs	r3, r3
 8012056:	61a3      	str	r3, [r4, #24]
 8012058:	6923      	ldr	r3, [r4, #16]
 801205a:	b943      	cbnz	r3, 801206e <__swsetup_r+0xc6>
 801205c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8012060:	d1ba      	bne.n	8011fd8 <__swsetup_r+0x30>
 8012062:	bd70      	pop	{r4, r5, r6, pc}
 8012064:	0781      	lsls	r1, r0, #30
 8012066:	bf58      	it	pl
 8012068:	6963      	ldrpl	r3, [r4, #20]
 801206a:	60a3      	str	r3, [r4, #8]
 801206c:	e7f4      	b.n	8012058 <__swsetup_r+0xb0>
 801206e:	2000      	movs	r0, #0
 8012070:	e7f7      	b.n	8012062 <__swsetup_r+0xba>
 8012072:	bf00      	nop
 8012074:	200001a8 	.word	0x200001a8
 8012078:	08012f60 	.word	0x08012f60
 801207c:	08012f80 	.word	0x08012f80
 8012080:	08012f40 	.word	0x08012f40

08012084 <__sflush_r>:
 8012084:	898a      	ldrh	r2, [r1, #12]
 8012086:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801208a:	4605      	mov	r5, r0
 801208c:	0710      	lsls	r0, r2, #28
 801208e:	460c      	mov	r4, r1
 8012090:	d458      	bmi.n	8012144 <__sflush_r+0xc0>
 8012092:	684b      	ldr	r3, [r1, #4]
 8012094:	2b00      	cmp	r3, #0
 8012096:	dc05      	bgt.n	80120a4 <__sflush_r+0x20>
 8012098:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801209a:	2b00      	cmp	r3, #0
 801209c:	dc02      	bgt.n	80120a4 <__sflush_r+0x20>
 801209e:	2000      	movs	r0, #0
 80120a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80120a4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80120a6:	2e00      	cmp	r6, #0
 80120a8:	d0f9      	beq.n	801209e <__sflush_r+0x1a>
 80120aa:	2300      	movs	r3, #0
 80120ac:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80120b0:	682f      	ldr	r7, [r5, #0]
 80120b2:	602b      	str	r3, [r5, #0]
 80120b4:	d032      	beq.n	801211c <__sflush_r+0x98>
 80120b6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80120b8:	89a3      	ldrh	r3, [r4, #12]
 80120ba:	075a      	lsls	r2, r3, #29
 80120bc:	d505      	bpl.n	80120ca <__sflush_r+0x46>
 80120be:	6863      	ldr	r3, [r4, #4]
 80120c0:	1ac0      	subs	r0, r0, r3
 80120c2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80120c4:	b10b      	cbz	r3, 80120ca <__sflush_r+0x46>
 80120c6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80120c8:	1ac0      	subs	r0, r0, r3
 80120ca:	2300      	movs	r3, #0
 80120cc:	4602      	mov	r2, r0
 80120ce:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80120d0:	6a21      	ldr	r1, [r4, #32]
 80120d2:	4628      	mov	r0, r5
 80120d4:	47b0      	blx	r6
 80120d6:	1c43      	adds	r3, r0, #1
 80120d8:	89a3      	ldrh	r3, [r4, #12]
 80120da:	d106      	bne.n	80120ea <__sflush_r+0x66>
 80120dc:	6829      	ldr	r1, [r5, #0]
 80120de:	291d      	cmp	r1, #29
 80120e0:	d82c      	bhi.n	801213c <__sflush_r+0xb8>
 80120e2:	4a2a      	ldr	r2, [pc, #168]	; (801218c <__sflush_r+0x108>)
 80120e4:	40ca      	lsrs	r2, r1
 80120e6:	07d6      	lsls	r6, r2, #31
 80120e8:	d528      	bpl.n	801213c <__sflush_r+0xb8>
 80120ea:	2200      	movs	r2, #0
 80120ec:	6062      	str	r2, [r4, #4]
 80120ee:	04d9      	lsls	r1, r3, #19
 80120f0:	6922      	ldr	r2, [r4, #16]
 80120f2:	6022      	str	r2, [r4, #0]
 80120f4:	d504      	bpl.n	8012100 <__sflush_r+0x7c>
 80120f6:	1c42      	adds	r2, r0, #1
 80120f8:	d101      	bne.n	80120fe <__sflush_r+0x7a>
 80120fa:	682b      	ldr	r3, [r5, #0]
 80120fc:	b903      	cbnz	r3, 8012100 <__sflush_r+0x7c>
 80120fe:	6560      	str	r0, [r4, #84]	; 0x54
 8012100:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012102:	602f      	str	r7, [r5, #0]
 8012104:	2900      	cmp	r1, #0
 8012106:	d0ca      	beq.n	801209e <__sflush_r+0x1a>
 8012108:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801210c:	4299      	cmp	r1, r3
 801210e:	d002      	beq.n	8012116 <__sflush_r+0x92>
 8012110:	4628      	mov	r0, r5
 8012112:	f000 f9d7 	bl	80124c4 <_free_r>
 8012116:	2000      	movs	r0, #0
 8012118:	6360      	str	r0, [r4, #52]	; 0x34
 801211a:	e7c1      	b.n	80120a0 <__sflush_r+0x1c>
 801211c:	6a21      	ldr	r1, [r4, #32]
 801211e:	2301      	movs	r3, #1
 8012120:	4628      	mov	r0, r5
 8012122:	47b0      	blx	r6
 8012124:	1c41      	adds	r1, r0, #1
 8012126:	d1c7      	bne.n	80120b8 <__sflush_r+0x34>
 8012128:	682b      	ldr	r3, [r5, #0]
 801212a:	2b00      	cmp	r3, #0
 801212c:	d0c4      	beq.n	80120b8 <__sflush_r+0x34>
 801212e:	2b1d      	cmp	r3, #29
 8012130:	d001      	beq.n	8012136 <__sflush_r+0xb2>
 8012132:	2b16      	cmp	r3, #22
 8012134:	d101      	bne.n	801213a <__sflush_r+0xb6>
 8012136:	602f      	str	r7, [r5, #0]
 8012138:	e7b1      	b.n	801209e <__sflush_r+0x1a>
 801213a:	89a3      	ldrh	r3, [r4, #12]
 801213c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012140:	81a3      	strh	r3, [r4, #12]
 8012142:	e7ad      	b.n	80120a0 <__sflush_r+0x1c>
 8012144:	690f      	ldr	r7, [r1, #16]
 8012146:	2f00      	cmp	r7, #0
 8012148:	d0a9      	beq.n	801209e <__sflush_r+0x1a>
 801214a:	0793      	lsls	r3, r2, #30
 801214c:	680e      	ldr	r6, [r1, #0]
 801214e:	bf08      	it	eq
 8012150:	694b      	ldreq	r3, [r1, #20]
 8012152:	600f      	str	r7, [r1, #0]
 8012154:	bf18      	it	ne
 8012156:	2300      	movne	r3, #0
 8012158:	eba6 0807 	sub.w	r8, r6, r7
 801215c:	608b      	str	r3, [r1, #8]
 801215e:	f1b8 0f00 	cmp.w	r8, #0
 8012162:	dd9c      	ble.n	801209e <__sflush_r+0x1a>
 8012164:	6a21      	ldr	r1, [r4, #32]
 8012166:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8012168:	4643      	mov	r3, r8
 801216a:	463a      	mov	r2, r7
 801216c:	4628      	mov	r0, r5
 801216e:	47b0      	blx	r6
 8012170:	2800      	cmp	r0, #0
 8012172:	dc06      	bgt.n	8012182 <__sflush_r+0xfe>
 8012174:	89a3      	ldrh	r3, [r4, #12]
 8012176:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801217a:	81a3      	strh	r3, [r4, #12]
 801217c:	f04f 30ff 	mov.w	r0, #4294967295
 8012180:	e78e      	b.n	80120a0 <__sflush_r+0x1c>
 8012182:	4407      	add	r7, r0
 8012184:	eba8 0800 	sub.w	r8, r8, r0
 8012188:	e7e9      	b.n	801215e <__sflush_r+0xda>
 801218a:	bf00      	nop
 801218c:	20400001 	.word	0x20400001

08012190 <_fflush_r>:
 8012190:	b538      	push	{r3, r4, r5, lr}
 8012192:	690b      	ldr	r3, [r1, #16]
 8012194:	4605      	mov	r5, r0
 8012196:	460c      	mov	r4, r1
 8012198:	b913      	cbnz	r3, 80121a0 <_fflush_r+0x10>
 801219a:	2500      	movs	r5, #0
 801219c:	4628      	mov	r0, r5
 801219e:	bd38      	pop	{r3, r4, r5, pc}
 80121a0:	b118      	cbz	r0, 80121aa <_fflush_r+0x1a>
 80121a2:	6983      	ldr	r3, [r0, #24]
 80121a4:	b90b      	cbnz	r3, 80121aa <_fflush_r+0x1a>
 80121a6:	f000 f887 	bl	80122b8 <__sinit>
 80121aa:	4b14      	ldr	r3, [pc, #80]	; (80121fc <_fflush_r+0x6c>)
 80121ac:	429c      	cmp	r4, r3
 80121ae:	d11b      	bne.n	80121e8 <_fflush_r+0x58>
 80121b0:	686c      	ldr	r4, [r5, #4]
 80121b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80121b6:	2b00      	cmp	r3, #0
 80121b8:	d0ef      	beq.n	801219a <_fflush_r+0xa>
 80121ba:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80121bc:	07d0      	lsls	r0, r2, #31
 80121be:	d404      	bmi.n	80121ca <_fflush_r+0x3a>
 80121c0:	0599      	lsls	r1, r3, #22
 80121c2:	d402      	bmi.n	80121ca <_fflush_r+0x3a>
 80121c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80121c6:	f000 f915 	bl	80123f4 <__retarget_lock_acquire_recursive>
 80121ca:	4628      	mov	r0, r5
 80121cc:	4621      	mov	r1, r4
 80121ce:	f7ff ff59 	bl	8012084 <__sflush_r>
 80121d2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80121d4:	07da      	lsls	r2, r3, #31
 80121d6:	4605      	mov	r5, r0
 80121d8:	d4e0      	bmi.n	801219c <_fflush_r+0xc>
 80121da:	89a3      	ldrh	r3, [r4, #12]
 80121dc:	059b      	lsls	r3, r3, #22
 80121de:	d4dd      	bmi.n	801219c <_fflush_r+0xc>
 80121e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80121e2:	f000 f908 	bl	80123f6 <__retarget_lock_release_recursive>
 80121e6:	e7d9      	b.n	801219c <_fflush_r+0xc>
 80121e8:	4b05      	ldr	r3, [pc, #20]	; (8012200 <_fflush_r+0x70>)
 80121ea:	429c      	cmp	r4, r3
 80121ec:	d101      	bne.n	80121f2 <_fflush_r+0x62>
 80121ee:	68ac      	ldr	r4, [r5, #8]
 80121f0:	e7df      	b.n	80121b2 <_fflush_r+0x22>
 80121f2:	4b04      	ldr	r3, [pc, #16]	; (8012204 <_fflush_r+0x74>)
 80121f4:	429c      	cmp	r4, r3
 80121f6:	bf08      	it	eq
 80121f8:	68ec      	ldreq	r4, [r5, #12]
 80121fa:	e7da      	b.n	80121b2 <_fflush_r+0x22>
 80121fc:	08012f60 	.word	0x08012f60
 8012200:	08012f80 	.word	0x08012f80
 8012204:	08012f40 	.word	0x08012f40

08012208 <std>:
 8012208:	2300      	movs	r3, #0
 801220a:	b510      	push	{r4, lr}
 801220c:	4604      	mov	r4, r0
 801220e:	e9c0 3300 	strd	r3, r3, [r0]
 8012212:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8012216:	6083      	str	r3, [r0, #8]
 8012218:	8181      	strh	r1, [r0, #12]
 801221a:	6643      	str	r3, [r0, #100]	; 0x64
 801221c:	81c2      	strh	r2, [r0, #14]
 801221e:	6183      	str	r3, [r0, #24]
 8012220:	4619      	mov	r1, r3
 8012222:	2208      	movs	r2, #8
 8012224:	305c      	adds	r0, #92	; 0x5c
 8012226:	f7ff fdd7 	bl	8011dd8 <memset>
 801222a:	4b05      	ldr	r3, [pc, #20]	; (8012240 <std+0x38>)
 801222c:	6263      	str	r3, [r4, #36]	; 0x24
 801222e:	4b05      	ldr	r3, [pc, #20]	; (8012244 <std+0x3c>)
 8012230:	62a3      	str	r3, [r4, #40]	; 0x28
 8012232:	4b05      	ldr	r3, [pc, #20]	; (8012248 <std+0x40>)
 8012234:	62e3      	str	r3, [r4, #44]	; 0x2c
 8012236:	4b05      	ldr	r3, [pc, #20]	; (801224c <std+0x44>)
 8012238:	6224      	str	r4, [r4, #32]
 801223a:	6323      	str	r3, [r4, #48]	; 0x30
 801223c:	bd10      	pop	{r4, pc}
 801223e:	bf00      	nop
 8012240:	08012c81 	.word	0x08012c81
 8012244:	08012ca3 	.word	0x08012ca3
 8012248:	08012cdb 	.word	0x08012cdb
 801224c:	08012cff 	.word	0x08012cff

08012250 <_cleanup_r>:
 8012250:	4901      	ldr	r1, [pc, #4]	; (8012258 <_cleanup_r+0x8>)
 8012252:	f000 b8af 	b.w	80123b4 <_fwalk_reent>
 8012256:	bf00      	nop
 8012258:	08012191 	.word	0x08012191

0801225c <__sfmoreglue>:
 801225c:	b570      	push	{r4, r5, r6, lr}
 801225e:	2268      	movs	r2, #104	; 0x68
 8012260:	1e4d      	subs	r5, r1, #1
 8012262:	4355      	muls	r5, r2
 8012264:	460e      	mov	r6, r1
 8012266:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801226a:	f000 f997 	bl	801259c <_malloc_r>
 801226e:	4604      	mov	r4, r0
 8012270:	b140      	cbz	r0, 8012284 <__sfmoreglue+0x28>
 8012272:	2100      	movs	r1, #0
 8012274:	e9c0 1600 	strd	r1, r6, [r0]
 8012278:	300c      	adds	r0, #12
 801227a:	60a0      	str	r0, [r4, #8]
 801227c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8012280:	f7ff fdaa 	bl	8011dd8 <memset>
 8012284:	4620      	mov	r0, r4
 8012286:	bd70      	pop	{r4, r5, r6, pc}

08012288 <__sfp_lock_acquire>:
 8012288:	4801      	ldr	r0, [pc, #4]	; (8012290 <__sfp_lock_acquire+0x8>)
 801228a:	f000 b8b3 	b.w	80123f4 <__retarget_lock_acquire_recursive>
 801228e:	bf00      	nop
 8012290:	2000194d 	.word	0x2000194d

08012294 <__sfp_lock_release>:
 8012294:	4801      	ldr	r0, [pc, #4]	; (801229c <__sfp_lock_release+0x8>)
 8012296:	f000 b8ae 	b.w	80123f6 <__retarget_lock_release_recursive>
 801229a:	bf00      	nop
 801229c:	2000194d 	.word	0x2000194d

080122a0 <__sinit_lock_acquire>:
 80122a0:	4801      	ldr	r0, [pc, #4]	; (80122a8 <__sinit_lock_acquire+0x8>)
 80122a2:	f000 b8a7 	b.w	80123f4 <__retarget_lock_acquire_recursive>
 80122a6:	bf00      	nop
 80122a8:	2000194e 	.word	0x2000194e

080122ac <__sinit_lock_release>:
 80122ac:	4801      	ldr	r0, [pc, #4]	; (80122b4 <__sinit_lock_release+0x8>)
 80122ae:	f000 b8a2 	b.w	80123f6 <__retarget_lock_release_recursive>
 80122b2:	bf00      	nop
 80122b4:	2000194e 	.word	0x2000194e

080122b8 <__sinit>:
 80122b8:	b510      	push	{r4, lr}
 80122ba:	4604      	mov	r4, r0
 80122bc:	f7ff fff0 	bl	80122a0 <__sinit_lock_acquire>
 80122c0:	69a3      	ldr	r3, [r4, #24]
 80122c2:	b11b      	cbz	r3, 80122cc <__sinit+0x14>
 80122c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80122c8:	f7ff bff0 	b.w	80122ac <__sinit_lock_release>
 80122cc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80122d0:	6523      	str	r3, [r4, #80]	; 0x50
 80122d2:	4b13      	ldr	r3, [pc, #76]	; (8012320 <__sinit+0x68>)
 80122d4:	4a13      	ldr	r2, [pc, #76]	; (8012324 <__sinit+0x6c>)
 80122d6:	681b      	ldr	r3, [r3, #0]
 80122d8:	62a2      	str	r2, [r4, #40]	; 0x28
 80122da:	42a3      	cmp	r3, r4
 80122dc:	bf04      	itt	eq
 80122de:	2301      	moveq	r3, #1
 80122e0:	61a3      	streq	r3, [r4, #24]
 80122e2:	4620      	mov	r0, r4
 80122e4:	f000 f820 	bl	8012328 <__sfp>
 80122e8:	6060      	str	r0, [r4, #4]
 80122ea:	4620      	mov	r0, r4
 80122ec:	f000 f81c 	bl	8012328 <__sfp>
 80122f0:	60a0      	str	r0, [r4, #8]
 80122f2:	4620      	mov	r0, r4
 80122f4:	f000 f818 	bl	8012328 <__sfp>
 80122f8:	2200      	movs	r2, #0
 80122fa:	60e0      	str	r0, [r4, #12]
 80122fc:	2104      	movs	r1, #4
 80122fe:	6860      	ldr	r0, [r4, #4]
 8012300:	f7ff ff82 	bl	8012208 <std>
 8012304:	68a0      	ldr	r0, [r4, #8]
 8012306:	2201      	movs	r2, #1
 8012308:	2109      	movs	r1, #9
 801230a:	f7ff ff7d 	bl	8012208 <std>
 801230e:	68e0      	ldr	r0, [r4, #12]
 8012310:	2202      	movs	r2, #2
 8012312:	2112      	movs	r1, #18
 8012314:	f7ff ff78 	bl	8012208 <std>
 8012318:	2301      	movs	r3, #1
 801231a:	61a3      	str	r3, [r4, #24]
 801231c:	e7d2      	b.n	80122c4 <__sinit+0xc>
 801231e:	bf00      	nop
 8012320:	08012f3c 	.word	0x08012f3c
 8012324:	08012251 	.word	0x08012251

08012328 <__sfp>:
 8012328:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801232a:	4607      	mov	r7, r0
 801232c:	f7ff ffac 	bl	8012288 <__sfp_lock_acquire>
 8012330:	4b1e      	ldr	r3, [pc, #120]	; (80123ac <__sfp+0x84>)
 8012332:	681e      	ldr	r6, [r3, #0]
 8012334:	69b3      	ldr	r3, [r6, #24]
 8012336:	b913      	cbnz	r3, 801233e <__sfp+0x16>
 8012338:	4630      	mov	r0, r6
 801233a:	f7ff ffbd 	bl	80122b8 <__sinit>
 801233e:	3648      	adds	r6, #72	; 0x48
 8012340:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8012344:	3b01      	subs	r3, #1
 8012346:	d503      	bpl.n	8012350 <__sfp+0x28>
 8012348:	6833      	ldr	r3, [r6, #0]
 801234a:	b30b      	cbz	r3, 8012390 <__sfp+0x68>
 801234c:	6836      	ldr	r6, [r6, #0]
 801234e:	e7f7      	b.n	8012340 <__sfp+0x18>
 8012350:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8012354:	b9d5      	cbnz	r5, 801238c <__sfp+0x64>
 8012356:	4b16      	ldr	r3, [pc, #88]	; (80123b0 <__sfp+0x88>)
 8012358:	60e3      	str	r3, [r4, #12]
 801235a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801235e:	6665      	str	r5, [r4, #100]	; 0x64
 8012360:	f000 f847 	bl	80123f2 <__retarget_lock_init_recursive>
 8012364:	f7ff ff96 	bl	8012294 <__sfp_lock_release>
 8012368:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801236c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8012370:	6025      	str	r5, [r4, #0]
 8012372:	61a5      	str	r5, [r4, #24]
 8012374:	2208      	movs	r2, #8
 8012376:	4629      	mov	r1, r5
 8012378:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801237c:	f7ff fd2c 	bl	8011dd8 <memset>
 8012380:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8012384:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8012388:	4620      	mov	r0, r4
 801238a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801238c:	3468      	adds	r4, #104	; 0x68
 801238e:	e7d9      	b.n	8012344 <__sfp+0x1c>
 8012390:	2104      	movs	r1, #4
 8012392:	4638      	mov	r0, r7
 8012394:	f7ff ff62 	bl	801225c <__sfmoreglue>
 8012398:	4604      	mov	r4, r0
 801239a:	6030      	str	r0, [r6, #0]
 801239c:	2800      	cmp	r0, #0
 801239e:	d1d5      	bne.n	801234c <__sfp+0x24>
 80123a0:	f7ff ff78 	bl	8012294 <__sfp_lock_release>
 80123a4:	230c      	movs	r3, #12
 80123a6:	603b      	str	r3, [r7, #0]
 80123a8:	e7ee      	b.n	8012388 <__sfp+0x60>
 80123aa:	bf00      	nop
 80123ac:	08012f3c 	.word	0x08012f3c
 80123b0:	ffff0001 	.word	0xffff0001

080123b4 <_fwalk_reent>:
 80123b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80123b8:	4606      	mov	r6, r0
 80123ba:	4688      	mov	r8, r1
 80123bc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80123c0:	2700      	movs	r7, #0
 80123c2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80123c6:	f1b9 0901 	subs.w	r9, r9, #1
 80123ca:	d505      	bpl.n	80123d8 <_fwalk_reent+0x24>
 80123cc:	6824      	ldr	r4, [r4, #0]
 80123ce:	2c00      	cmp	r4, #0
 80123d0:	d1f7      	bne.n	80123c2 <_fwalk_reent+0xe>
 80123d2:	4638      	mov	r0, r7
 80123d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80123d8:	89ab      	ldrh	r3, [r5, #12]
 80123da:	2b01      	cmp	r3, #1
 80123dc:	d907      	bls.n	80123ee <_fwalk_reent+0x3a>
 80123de:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80123e2:	3301      	adds	r3, #1
 80123e4:	d003      	beq.n	80123ee <_fwalk_reent+0x3a>
 80123e6:	4629      	mov	r1, r5
 80123e8:	4630      	mov	r0, r6
 80123ea:	47c0      	blx	r8
 80123ec:	4307      	orrs	r7, r0
 80123ee:	3568      	adds	r5, #104	; 0x68
 80123f0:	e7e9      	b.n	80123c6 <_fwalk_reent+0x12>

080123f2 <__retarget_lock_init_recursive>:
 80123f2:	4770      	bx	lr

080123f4 <__retarget_lock_acquire_recursive>:
 80123f4:	4770      	bx	lr

080123f6 <__retarget_lock_release_recursive>:
 80123f6:	4770      	bx	lr

080123f8 <__swhatbuf_r>:
 80123f8:	b570      	push	{r4, r5, r6, lr}
 80123fa:	460e      	mov	r6, r1
 80123fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012400:	2900      	cmp	r1, #0
 8012402:	b096      	sub	sp, #88	; 0x58
 8012404:	4614      	mov	r4, r2
 8012406:	461d      	mov	r5, r3
 8012408:	da08      	bge.n	801241c <__swhatbuf_r+0x24>
 801240a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 801240e:	2200      	movs	r2, #0
 8012410:	602a      	str	r2, [r5, #0]
 8012412:	061a      	lsls	r2, r3, #24
 8012414:	d410      	bmi.n	8012438 <__swhatbuf_r+0x40>
 8012416:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801241a:	e00e      	b.n	801243a <__swhatbuf_r+0x42>
 801241c:	466a      	mov	r2, sp
 801241e:	f000 fc95 	bl	8012d4c <_fstat_r>
 8012422:	2800      	cmp	r0, #0
 8012424:	dbf1      	blt.n	801240a <__swhatbuf_r+0x12>
 8012426:	9a01      	ldr	r2, [sp, #4]
 8012428:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801242c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8012430:	425a      	negs	r2, r3
 8012432:	415a      	adcs	r2, r3
 8012434:	602a      	str	r2, [r5, #0]
 8012436:	e7ee      	b.n	8012416 <__swhatbuf_r+0x1e>
 8012438:	2340      	movs	r3, #64	; 0x40
 801243a:	2000      	movs	r0, #0
 801243c:	6023      	str	r3, [r4, #0]
 801243e:	b016      	add	sp, #88	; 0x58
 8012440:	bd70      	pop	{r4, r5, r6, pc}
	...

08012444 <__smakebuf_r>:
 8012444:	898b      	ldrh	r3, [r1, #12]
 8012446:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8012448:	079d      	lsls	r5, r3, #30
 801244a:	4606      	mov	r6, r0
 801244c:	460c      	mov	r4, r1
 801244e:	d507      	bpl.n	8012460 <__smakebuf_r+0x1c>
 8012450:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8012454:	6023      	str	r3, [r4, #0]
 8012456:	6123      	str	r3, [r4, #16]
 8012458:	2301      	movs	r3, #1
 801245a:	6163      	str	r3, [r4, #20]
 801245c:	b002      	add	sp, #8
 801245e:	bd70      	pop	{r4, r5, r6, pc}
 8012460:	ab01      	add	r3, sp, #4
 8012462:	466a      	mov	r2, sp
 8012464:	f7ff ffc8 	bl	80123f8 <__swhatbuf_r>
 8012468:	9900      	ldr	r1, [sp, #0]
 801246a:	4605      	mov	r5, r0
 801246c:	4630      	mov	r0, r6
 801246e:	f000 f895 	bl	801259c <_malloc_r>
 8012472:	b948      	cbnz	r0, 8012488 <__smakebuf_r+0x44>
 8012474:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012478:	059a      	lsls	r2, r3, #22
 801247a:	d4ef      	bmi.n	801245c <__smakebuf_r+0x18>
 801247c:	f023 0303 	bic.w	r3, r3, #3
 8012480:	f043 0302 	orr.w	r3, r3, #2
 8012484:	81a3      	strh	r3, [r4, #12]
 8012486:	e7e3      	b.n	8012450 <__smakebuf_r+0xc>
 8012488:	4b0d      	ldr	r3, [pc, #52]	; (80124c0 <__smakebuf_r+0x7c>)
 801248a:	62b3      	str	r3, [r6, #40]	; 0x28
 801248c:	89a3      	ldrh	r3, [r4, #12]
 801248e:	6020      	str	r0, [r4, #0]
 8012490:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012494:	81a3      	strh	r3, [r4, #12]
 8012496:	9b00      	ldr	r3, [sp, #0]
 8012498:	6163      	str	r3, [r4, #20]
 801249a:	9b01      	ldr	r3, [sp, #4]
 801249c:	6120      	str	r0, [r4, #16]
 801249e:	b15b      	cbz	r3, 80124b8 <__smakebuf_r+0x74>
 80124a0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80124a4:	4630      	mov	r0, r6
 80124a6:	f000 fc63 	bl	8012d70 <_isatty_r>
 80124aa:	b128      	cbz	r0, 80124b8 <__smakebuf_r+0x74>
 80124ac:	89a3      	ldrh	r3, [r4, #12]
 80124ae:	f023 0303 	bic.w	r3, r3, #3
 80124b2:	f043 0301 	orr.w	r3, r3, #1
 80124b6:	81a3      	strh	r3, [r4, #12]
 80124b8:	89a0      	ldrh	r0, [r4, #12]
 80124ba:	4305      	orrs	r5, r0
 80124bc:	81a5      	strh	r5, [r4, #12]
 80124be:	e7cd      	b.n	801245c <__smakebuf_r+0x18>
 80124c0:	08012251 	.word	0x08012251

080124c4 <_free_r>:
 80124c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80124c6:	2900      	cmp	r1, #0
 80124c8:	d044      	beq.n	8012554 <_free_r+0x90>
 80124ca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80124ce:	9001      	str	r0, [sp, #4]
 80124d0:	2b00      	cmp	r3, #0
 80124d2:	f1a1 0404 	sub.w	r4, r1, #4
 80124d6:	bfb8      	it	lt
 80124d8:	18e4      	addlt	r4, r4, r3
 80124da:	f000 fc6b 	bl	8012db4 <__malloc_lock>
 80124de:	4a1e      	ldr	r2, [pc, #120]	; (8012558 <_free_r+0x94>)
 80124e0:	9801      	ldr	r0, [sp, #4]
 80124e2:	6813      	ldr	r3, [r2, #0]
 80124e4:	b933      	cbnz	r3, 80124f4 <_free_r+0x30>
 80124e6:	6063      	str	r3, [r4, #4]
 80124e8:	6014      	str	r4, [r2, #0]
 80124ea:	b003      	add	sp, #12
 80124ec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80124f0:	f000 bc66 	b.w	8012dc0 <__malloc_unlock>
 80124f4:	42a3      	cmp	r3, r4
 80124f6:	d908      	bls.n	801250a <_free_r+0x46>
 80124f8:	6825      	ldr	r5, [r4, #0]
 80124fa:	1961      	adds	r1, r4, r5
 80124fc:	428b      	cmp	r3, r1
 80124fe:	bf01      	itttt	eq
 8012500:	6819      	ldreq	r1, [r3, #0]
 8012502:	685b      	ldreq	r3, [r3, #4]
 8012504:	1949      	addeq	r1, r1, r5
 8012506:	6021      	streq	r1, [r4, #0]
 8012508:	e7ed      	b.n	80124e6 <_free_r+0x22>
 801250a:	461a      	mov	r2, r3
 801250c:	685b      	ldr	r3, [r3, #4]
 801250e:	b10b      	cbz	r3, 8012514 <_free_r+0x50>
 8012510:	42a3      	cmp	r3, r4
 8012512:	d9fa      	bls.n	801250a <_free_r+0x46>
 8012514:	6811      	ldr	r1, [r2, #0]
 8012516:	1855      	adds	r5, r2, r1
 8012518:	42a5      	cmp	r5, r4
 801251a:	d10b      	bne.n	8012534 <_free_r+0x70>
 801251c:	6824      	ldr	r4, [r4, #0]
 801251e:	4421      	add	r1, r4
 8012520:	1854      	adds	r4, r2, r1
 8012522:	42a3      	cmp	r3, r4
 8012524:	6011      	str	r1, [r2, #0]
 8012526:	d1e0      	bne.n	80124ea <_free_r+0x26>
 8012528:	681c      	ldr	r4, [r3, #0]
 801252a:	685b      	ldr	r3, [r3, #4]
 801252c:	6053      	str	r3, [r2, #4]
 801252e:	4421      	add	r1, r4
 8012530:	6011      	str	r1, [r2, #0]
 8012532:	e7da      	b.n	80124ea <_free_r+0x26>
 8012534:	d902      	bls.n	801253c <_free_r+0x78>
 8012536:	230c      	movs	r3, #12
 8012538:	6003      	str	r3, [r0, #0]
 801253a:	e7d6      	b.n	80124ea <_free_r+0x26>
 801253c:	6825      	ldr	r5, [r4, #0]
 801253e:	1961      	adds	r1, r4, r5
 8012540:	428b      	cmp	r3, r1
 8012542:	bf04      	itt	eq
 8012544:	6819      	ldreq	r1, [r3, #0]
 8012546:	685b      	ldreq	r3, [r3, #4]
 8012548:	6063      	str	r3, [r4, #4]
 801254a:	bf04      	itt	eq
 801254c:	1949      	addeq	r1, r1, r5
 801254e:	6021      	streq	r1, [r4, #0]
 8012550:	6054      	str	r4, [r2, #4]
 8012552:	e7ca      	b.n	80124ea <_free_r+0x26>
 8012554:	b003      	add	sp, #12
 8012556:	bd30      	pop	{r4, r5, pc}
 8012558:	20001950 	.word	0x20001950

0801255c <sbrk_aligned>:
 801255c:	b570      	push	{r4, r5, r6, lr}
 801255e:	4e0e      	ldr	r6, [pc, #56]	; (8012598 <sbrk_aligned+0x3c>)
 8012560:	460c      	mov	r4, r1
 8012562:	6831      	ldr	r1, [r6, #0]
 8012564:	4605      	mov	r5, r0
 8012566:	b911      	cbnz	r1, 801256e <sbrk_aligned+0x12>
 8012568:	f000 fb7a 	bl	8012c60 <_sbrk_r>
 801256c:	6030      	str	r0, [r6, #0]
 801256e:	4621      	mov	r1, r4
 8012570:	4628      	mov	r0, r5
 8012572:	f000 fb75 	bl	8012c60 <_sbrk_r>
 8012576:	1c43      	adds	r3, r0, #1
 8012578:	d00a      	beq.n	8012590 <sbrk_aligned+0x34>
 801257a:	1cc4      	adds	r4, r0, #3
 801257c:	f024 0403 	bic.w	r4, r4, #3
 8012580:	42a0      	cmp	r0, r4
 8012582:	d007      	beq.n	8012594 <sbrk_aligned+0x38>
 8012584:	1a21      	subs	r1, r4, r0
 8012586:	4628      	mov	r0, r5
 8012588:	f000 fb6a 	bl	8012c60 <_sbrk_r>
 801258c:	3001      	adds	r0, #1
 801258e:	d101      	bne.n	8012594 <sbrk_aligned+0x38>
 8012590:	f04f 34ff 	mov.w	r4, #4294967295
 8012594:	4620      	mov	r0, r4
 8012596:	bd70      	pop	{r4, r5, r6, pc}
 8012598:	20001954 	.word	0x20001954

0801259c <_malloc_r>:
 801259c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80125a0:	1ccd      	adds	r5, r1, #3
 80125a2:	f025 0503 	bic.w	r5, r5, #3
 80125a6:	3508      	adds	r5, #8
 80125a8:	2d0c      	cmp	r5, #12
 80125aa:	bf38      	it	cc
 80125ac:	250c      	movcc	r5, #12
 80125ae:	2d00      	cmp	r5, #0
 80125b0:	4607      	mov	r7, r0
 80125b2:	db01      	blt.n	80125b8 <_malloc_r+0x1c>
 80125b4:	42a9      	cmp	r1, r5
 80125b6:	d905      	bls.n	80125c4 <_malloc_r+0x28>
 80125b8:	230c      	movs	r3, #12
 80125ba:	603b      	str	r3, [r7, #0]
 80125bc:	2600      	movs	r6, #0
 80125be:	4630      	mov	r0, r6
 80125c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80125c4:	4e2e      	ldr	r6, [pc, #184]	; (8012680 <_malloc_r+0xe4>)
 80125c6:	f000 fbf5 	bl	8012db4 <__malloc_lock>
 80125ca:	6833      	ldr	r3, [r6, #0]
 80125cc:	461c      	mov	r4, r3
 80125ce:	bb34      	cbnz	r4, 801261e <_malloc_r+0x82>
 80125d0:	4629      	mov	r1, r5
 80125d2:	4638      	mov	r0, r7
 80125d4:	f7ff ffc2 	bl	801255c <sbrk_aligned>
 80125d8:	1c43      	adds	r3, r0, #1
 80125da:	4604      	mov	r4, r0
 80125dc:	d14d      	bne.n	801267a <_malloc_r+0xde>
 80125de:	6834      	ldr	r4, [r6, #0]
 80125e0:	4626      	mov	r6, r4
 80125e2:	2e00      	cmp	r6, #0
 80125e4:	d140      	bne.n	8012668 <_malloc_r+0xcc>
 80125e6:	6823      	ldr	r3, [r4, #0]
 80125e8:	4631      	mov	r1, r6
 80125ea:	4638      	mov	r0, r7
 80125ec:	eb04 0803 	add.w	r8, r4, r3
 80125f0:	f000 fb36 	bl	8012c60 <_sbrk_r>
 80125f4:	4580      	cmp	r8, r0
 80125f6:	d13a      	bne.n	801266e <_malloc_r+0xd2>
 80125f8:	6821      	ldr	r1, [r4, #0]
 80125fa:	3503      	adds	r5, #3
 80125fc:	1a6d      	subs	r5, r5, r1
 80125fe:	f025 0503 	bic.w	r5, r5, #3
 8012602:	3508      	adds	r5, #8
 8012604:	2d0c      	cmp	r5, #12
 8012606:	bf38      	it	cc
 8012608:	250c      	movcc	r5, #12
 801260a:	4629      	mov	r1, r5
 801260c:	4638      	mov	r0, r7
 801260e:	f7ff ffa5 	bl	801255c <sbrk_aligned>
 8012612:	3001      	adds	r0, #1
 8012614:	d02b      	beq.n	801266e <_malloc_r+0xd2>
 8012616:	6823      	ldr	r3, [r4, #0]
 8012618:	442b      	add	r3, r5
 801261a:	6023      	str	r3, [r4, #0]
 801261c:	e00e      	b.n	801263c <_malloc_r+0xa0>
 801261e:	6822      	ldr	r2, [r4, #0]
 8012620:	1b52      	subs	r2, r2, r5
 8012622:	d41e      	bmi.n	8012662 <_malloc_r+0xc6>
 8012624:	2a0b      	cmp	r2, #11
 8012626:	d916      	bls.n	8012656 <_malloc_r+0xba>
 8012628:	1961      	adds	r1, r4, r5
 801262a:	42a3      	cmp	r3, r4
 801262c:	6025      	str	r5, [r4, #0]
 801262e:	bf18      	it	ne
 8012630:	6059      	strne	r1, [r3, #4]
 8012632:	6863      	ldr	r3, [r4, #4]
 8012634:	bf08      	it	eq
 8012636:	6031      	streq	r1, [r6, #0]
 8012638:	5162      	str	r2, [r4, r5]
 801263a:	604b      	str	r3, [r1, #4]
 801263c:	4638      	mov	r0, r7
 801263e:	f104 060b 	add.w	r6, r4, #11
 8012642:	f000 fbbd 	bl	8012dc0 <__malloc_unlock>
 8012646:	f026 0607 	bic.w	r6, r6, #7
 801264a:	1d23      	adds	r3, r4, #4
 801264c:	1af2      	subs	r2, r6, r3
 801264e:	d0b6      	beq.n	80125be <_malloc_r+0x22>
 8012650:	1b9b      	subs	r3, r3, r6
 8012652:	50a3      	str	r3, [r4, r2]
 8012654:	e7b3      	b.n	80125be <_malloc_r+0x22>
 8012656:	6862      	ldr	r2, [r4, #4]
 8012658:	42a3      	cmp	r3, r4
 801265a:	bf0c      	ite	eq
 801265c:	6032      	streq	r2, [r6, #0]
 801265e:	605a      	strne	r2, [r3, #4]
 8012660:	e7ec      	b.n	801263c <_malloc_r+0xa0>
 8012662:	4623      	mov	r3, r4
 8012664:	6864      	ldr	r4, [r4, #4]
 8012666:	e7b2      	b.n	80125ce <_malloc_r+0x32>
 8012668:	4634      	mov	r4, r6
 801266a:	6876      	ldr	r6, [r6, #4]
 801266c:	e7b9      	b.n	80125e2 <_malloc_r+0x46>
 801266e:	230c      	movs	r3, #12
 8012670:	603b      	str	r3, [r7, #0]
 8012672:	4638      	mov	r0, r7
 8012674:	f000 fba4 	bl	8012dc0 <__malloc_unlock>
 8012678:	e7a1      	b.n	80125be <_malloc_r+0x22>
 801267a:	6025      	str	r5, [r4, #0]
 801267c:	e7de      	b.n	801263c <_malloc_r+0xa0>
 801267e:	bf00      	nop
 8012680:	20001950 	.word	0x20001950

08012684 <__sfputc_r>:
 8012684:	6893      	ldr	r3, [r2, #8]
 8012686:	3b01      	subs	r3, #1
 8012688:	2b00      	cmp	r3, #0
 801268a:	b410      	push	{r4}
 801268c:	6093      	str	r3, [r2, #8]
 801268e:	da08      	bge.n	80126a2 <__sfputc_r+0x1e>
 8012690:	6994      	ldr	r4, [r2, #24]
 8012692:	42a3      	cmp	r3, r4
 8012694:	db01      	blt.n	801269a <__sfputc_r+0x16>
 8012696:	290a      	cmp	r1, #10
 8012698:	d103      	bne.n	80126a2 <__sfputc_r+0x1e>
 801269a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801269e:	f7ff bc31 	b.w	8011f04 <__swbuf_r>
 80126a2:	6813      	ldr	r3, [r2, #0]
 80126a4:	1c58      	adds	r0, r3, #1
 80126a6:	6010      	str	r0, [r2, #0]
 80126a8:	7019      	strb	r1, [r3, #0]
 80126aa:	4608      	mov	r0, r1
 80126ac:	f85d 4b04 	ldr.w	r4, [sp], #4
 80126b0:	4770      	bx	lr

080126b2 <__sfputs_r>:
 80126b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80126b4:	4606      	mov	r6, r0
 80126b6:	460f      	mov	r7, r1
 80126b8:	4614      	mov	r4, r2
 80126ba:	18d5      	adds	r5, r2, r3
 80126bc:	42ac      	cmp	r4, r5
 80126be:	d101      	bne.n	80126c4 <__sfputs_r+0x12>
 80126c0:	2000      	movs	r0, #0
 80126c2:	e007      	b.n	80126d4 <__sfputs_r+0x22>
 80126c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80126c8:	463a      	mov	r2, r7
 80126ca:	4630      	mov	r0, r6
 80126cc:	f7ff ffda 	bl	8012684 <__sfputc_r>
 80126d0:	1c43      	adds	r3, r0, #1
 80126d2:	d1f3      	bne.n	80126bc <__sfputs_r+0xa>
 80126d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080126d8 <_vfiprintf_r>:
 80126d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80126dc:	460d      	mov	r5, r1
 80126de:	b09d      	sub	sp, #116	; 0x74
 80126e0:	4614      	mov	r4, r2
 80126e2:	4698      	mov	r8, r3
 80126e4:	4606      	mov	r6, r0
 80126e6:	b118      	cbz	r0, 80126f0 <_vfiprintf_r+0x18>
 80126e8:	6983      	ldr	r3, [r0, #24]
 80126ea:	b90b      	cbnz	r3, 80126f0 <_vfiprintf_r+0x18>
 80126ec:	f7ff fde4 	bl	80122b8 <__sinit>
 80126f0:	4b89      	ldr	r3, [pc, #548]	; (8012918 <_vfiprintf_r+0x240>)
 80126f2:	429d      	cmp	r5, r3
 80126f4:	d11b      	bne.n	801272e <_vfiprintf_r+0x56>
 80126f6:	6875      	ldr	r5, [r6, #4]
 80126f8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80126fa:	07d9      	lsls	r1, r3, #31
 80126fc:	d405      	bmi.n	801270a <_vfiprintf_r+0x32>
 80126fe:	89ab      	ldrh	r3, [r5, #12]
 8012700:	059a      	lsls	r2, r3, #22
 8012702:	d402      	bmi.n	801270a <_vfiprintf_r+0x32>
 8012704:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012706:	f7ff fe75 	bl	80123f4 <__retarget_lock_acquire_recursive>
 801270a:	89ab      	ldrh	r3, [r5, #12]
 801270c:	071b      	lsls	r3, r3, #28
 801270e:	d501      	bpl.n	8012714 <_vfiprintf_r+0x3c>
 8012710:	692b      	ldr	r3, [r5, #16]
 8012712:	b9eb      	cbnz	r3, 8012750 <_vfiprintf_r+0x78>
 8012714:	4629      	mov	r1, r5
 8012716:	4630      	mov	r0, r6
 8012718:	f7ff fc46 	bl	8011fa8 <__swsetup_r>
 801271c:	b1c0      	cbz	r0, 8012750 <_vfiprintf_r+0x78>
 801271e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012720:	07dc      	lsls	r4, r3, #31
 8012722:	d50e      	bpl.n	8012742 <_vfiprintf_r+0x6a>
 8012724:	f04f 30ff 	mov.w	r0, #4294967295
 8012728:	b01d      	add	sp, #116	; 0x74
 801272a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801272e:	4b7b      	ldr	r3, [pc, #492]	; (801291c <_vfiprintf_r+0x244>)
 8012730:	429d      	cmp	r5, r3
 8012732:	d101      	bne.n	8012738 <_vfiprintf_r+0x60>
 8012734:	68b5      	ldr	r5, [r6, #8]
 8012736:	e7df      	b.n	80126f8 <_vfiprintf_r+0x20>
 8012738:	4b79      	ldr	r3, [pc, #484]	; (8012920 <_vfiprintf_r+0x248>)
 801273a:	429d      	cmp	r5, r3
 801273c:	bf08      	it	eq
 801273e:	68f5      	ldreq	r5, [r6, #12]
 8012740:	e7da      	b.n	80126f8 <_vfiprintf_r+0x20>
 8012742:	89ab      	ldrh	r3, [r5, #12]
 8012744:	0598      	lsls	r0, r3, #22
 8012746:	d4ed      	bmi.n	8012724 <_vfiprintf_r+0x4c>
 8012748:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801274a:	f7ff fe54 	bl	80123f6 <__retarget_lock_release_recursive>
 801274e:	e7e9      	b.n	8012724 <_vfiprintf_r+0x4c>
 8012750:	2300      	movs	r3, #0
 8012752:	9309      	str	r3, [sp, #36]	; 0x24
 8012754:	2320      	movs	r3, #32
 8012756:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801275a:	f8cd 800c 	str.w	r8, [sp, #12]
 801275e:	2330      	movs	r3, #48	; 0x30
 8012760:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8012924 <_vfiprintf_r+0x24c>
 8012764:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8012768:	f04f 0901 	mov.w	r9, #1
 801276c:	4623      	mov	r3, r4
 801276e:	469a      	mov	sl, r3
 8012770:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012774:	b10a      	cbz	r2, 801277a <_vfiprintf_r+0xa2>
 8012776:	2a25      	cmp	r2, #37	; 0x25
 8012778:	d1f9      	bne.n	801276e <_vfiprintf_r+0x96>
 801277a:	ebba 0b04 	subs.w	fp, sl, r4
 801277e:	d00b      	beq.n	8012798 <_vfiprintf_r+0xc0>
 8012780:	465b      	mov	r3, fp
 8012782:	4622      	mov	r2, r4
 8012784:	4629      	mov	r1, r5
 8012786:	4630      	mov	r0, r6
 8012788:	f7ff ff93 	bl	80126b2 <__sfputs_r>
 801278c:	3001      	adds	r0, #1
 801278e:	f000 80aa 	beq.w	80128e6 <_vfiprintf_r+0x20e>
 8012792:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012794:	445a      	add	r2, fp
 8012796:	9209      	str	r2, [sp, #36]	; 0x24
 8012798:	f89a 3000 	ldrb.w	r3, [sl]
 801279c:	2b00      	cmp	r3, #0
 801279e:	f000 80a2 	beq.w	80128e6 <_vfiprintf_r+0x20e>
 80127a2:	2300      	movs	r3, #0
 80127a4:	f04f 32ff 	mov.w	r2, #4294967295
 80127a8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80127ac:	f10a 0a01 	add.w	sl, sl, #1
 80127b0:	9304      	str	r3, [sp, #16]
 80127b2:	9307      	str	r3, [sp, #28]
 80127b4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80127b8:	931a      	str	r3, [sp, #104]	; 0x68
 80127ba:	4654      	mov	r4, sl
 80127bc:	2205      	movs	r2, #5
 80127be:	f814 1b01 	ldrb.w	r1, [r4], #1
 80127c2:	4858      	ldr	r0, [pc, #352]	; (8012924 <_vfiprintf_r+0x24c>)
 80127c4:	f7f5 fd0c 	bl	80081e0 <memchr>
 80127c8:	9a04      	ldr	r2, [sp, #16]
 80127ca:	b9d8      	cbnz	r0, 8012804 <_vfiprintf_r+0x12c>
 80127cc:	06d1      	lsls	r1, r2, #27
 80127ce:	bf44      	itt	mi
 80127d0:	2320      	movmi	r3, #32
 80127d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80127d6:	0713      	lsls	r3, r2, #28
 80127d8:	bf44      	itt	mi
 80127da:	232b      	movmi	r3, #43	; 0x2b
 80127dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80127e0:	f89a 3000 	ldrb.w	r3, [sl]
 80127e4:	2b2a      	cmp	r3, #42	; 0x2a
 80127e6:	d015      	beq.n	8012814 <_vfiprintf_r+0x13c>
 80127e8:	9a07      	ldr	r2, [sp, #28]
 80127ea:	4654      	mov	r4, sl
 80127ec:	2000      	movs	r0, #0
 80127ee:	f04f 0c0a 	mov.w	ip, #10
 80127f2:	4621      	mov	r1, r4
 80127f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80127f8:	3b30      	subs	r3, #48	; 0x30
 80127fa:	2b09      	cmp	r3, #9
 80127fc:	d94e      	bls.n	801289c <_vfiprintf_r+0x1c4>
 80127fe:	b1b0      	cbz	r0, 801282e <_vfiprintf_r+0x156>
 8012800:	9207      	str	r2, [sp, #28]
 8012802:	e014      	b.n	801282e <_vfiprintf_r+0x156>
 8012804:	eba0 0308 	sub.w	r3, r0, r8
 8012808:	fa09 f303 	lsl.w	r3, r9, r3
 801280c:	4313      	orrs	r3, r2
 801280e:	9304      	str	r3, [sp, #16]
 8012810:	46a2      	mov	sl, r4
 8012812:	e7d2      	b.n	80127ba <_vfiprintf_r+0xe2>
 8012814:	9b03      	ldr	r3, [sp, #12]
 8012816:	1d19      	adds	r1, r3, #4
 8012818:	681b      	ldr	r3, [r3, #0]
 801281a:	9103      	str	r1, [sp, #12]
 801281c:	2b00      	cmp	r3, #0
 801281e:	bfbb      	ittet	lt
 8012820:	425b      	neglt	r3, r3
 8012822:	f042 0202 	orrlt.w	r2, r2, #2
 8012826:	9307      	strge	r3, [sp, #28]
 8012828:	9307      	strlt	r3, [sp, #28]
 801282a:	bfb8      	it	lt
 801282c:	9204      	strlt	r2, [sp, #16]
 801282e:	7823      	ldrb	r3, [r4, #0]
 8012830:	2b2e      	cmp	r3, #46	; 0x2e
 8012832:	d10c      	bne.n	801284e <_vfiprintf_r+0x176>
 8012834:	7863      	ldrb	r3, [r4, #1]
 8012836:	2b2a      	cmp	r3, #42	; 0x2a
 8012838:	d135      	bne.n	80128a6 <_vfiprintf_r+0x1ce>
 801283a:	9b03      	ldr	r3, [sp, #12]
 801283c:	1d1a      	adds	r2, r3, #4
 801283e:	681b      	ldr	r3, [r3, #0]
 8012840:	9203      	str	r2, [sp, #12]
 8012842:	2b00      	cmp	r3, #0
 8012844:	bfb8      	it	lt
 8012846:	f04f 33ff 	movlt.w	r3, #4294967295
 801284a:	3402      	adds	r4, #2
 801284c:	9305      	str	r3, [sp, #20]
 801284e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8012934 <_vfiprintf_r+0x25c>
 8012852:	7821      	ldrb	r1, [r4, #0]
 8012854:	2203      	movs	r2, #3
 8012856:	4650      	mov	r0, sl
 8012858:	f7f5 fcc2 	bl	80081e0 <memchr>
 801285c:	b140      	cbz	r0, 8012870 <_vfiprintf_r+0x198>
 801285e:	2340      	movs	r3, #64	; 0x40
 8012860:	eba0 000a 	sub.w	r0, r0, sl
 8012864:	fa03 f000 	lsl.w	r0, r3, r0
 8012868:	9b04      	ldr	r3, [sp, #16]
 801286a:	4303      	orrs	r3, r0
 801286c:	3401      	adds	r4, #1
 801286e:	9304      	str	r3, [sp, #16]
 8012870:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012874:	482c      	ldr	r0, [pc, #176]	; (8012928 <_vfiprintf_r+0x250>)
 8012876:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801287a:	2206      	movs	r2, #6
 801287c:	f7f5 fcb0 	bl	80081e0 <memchr>
 8012880:	2800      	cmp	r0, #0
 8012882:	d03f      	beq.n	8012904 <_vfiprintf_r+0x22c>
 8012884:	4b29      	ldr	r3, [pc, #164]	; (801292c <_vfiprintf_r+0x254>)
 8012886:	bb1b      	cbnz	r3, 80128d0 <_vfiprintf_r+0x1f8>
 8012888:	9b03      	ldr	r3, [sp, #12]
 801288a:	3307      	adds	r3, #7
 801288c:	f023 0307 	bic.w	r3, r3, #7
 8012890:	3308      	adds	r3, #8
 8012892:	9303      	str	r3, [sp, #12]
 8012894:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012896:	443b      	add	r3, r7
 8012898:	9309      	str	r3, [sp, #36]	; 0x24
 801289a:	e767      	b.n	801276c <_vfiprintf_r+0x94>
 801289c:	fb0c 3202 	mla	r2, ip, r2, r3
 80128a0:	460c      	mov	r4, r1
 80128a2:	2001      	movs	r0, #1
 80128a4:	e7a5      	b.n	80127f2 <_vfiprintf_r+0x11a>
 80128a6:	2300      	movs	r3, #0
 80128a8:	3401      	adds	r4, #1
 80128aa:	9305      	str	r3, [sp, #20]
 80128ac:	4619      	mov	r1, r3
 80128ae:	f04f 0c0a 	mov.w	ip, #10
 80128b2:	4620      	mov	r0, r4
 80128b4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80128b8:	3a30      	subs	r2, #48	; 0x30
 80128ba:	2a09      	cmp	r2, #9
 80128bc:	d903      	bls.n	80128c6 <_vfiprintf_r+0x1ee>
 80128be:	2b00      	cmp	r3, #0
 80128c0:	d0c5      	beq.n	801284e <_vfiprintf_r+0x176>
 80128c2:	9105      	str	r1, [sp, #20]
 80128c4:	e7c3      	b.n	801284e <_vfiprintf_r+0x176>
 80128c6:	fb0c 2101 	mla	r1, ip, r1, r2
 80128ca:	4604      	mov	r4, r0
 80128cc:	2301      	movs	r3, #1
 80128ce:	e7f0      	b.n	80128b2 <_vfiprintf_r+0x1da>
 80128d0:	ab03      	add	r3, sp, #12
 80128d2:	9300      	str	r3, [sp, #0]
 80128d4:	462a      	mov	r2, r5
 80128d6:	4b16      	ldr	r3, [pc, #88]	; (8012930 <_vfiprintf_r+0x258>)
 80128d8:	a904      	add	r1, sp, #16
 80128da:	4630      	mov	r0, r6
 80128dc:	f3af 8000 	nop.w
 80128e0:	4607      	mov	r7, r0
 80128e2:	1c78      	adds	r0, r7, #1
 80128e4:	d1d6      	bne.n	8012894 <_vfiprintf_r+0x1bc>
 80128e6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80128e8:	07d9      	lsls	r1, r3, #31
 80128ea:	d405      	bmi.n	80128f8 <_vfiprintf_r+0x220>
 80128ec:	89ab      	ldrh	r3, [r5, #12]
 80128ee:	059a      	lsls	r2, r3, #22
 80128f0:	d402      	bmi.n	80128f8 <_vfiprintf_r+0x220>
 80128f2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80128f4:	f7ff fd7f 	bl	80123f6 <__retarget_lock_release_recursive>
 80128f8:	89ab      	ldrh	r3, [r5, #12]
 80128fa:	065b      	lsls	r3, r3, #25
 80128fc:	f53f af12 	bmi.w	8012724 <_vfiprintf_r+0x4c>
 8012900:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012902:	e711      	b.n	8012728 <_vfiprintf_r+0x50>
 8012904:	ab03      	add	r3, sp, #12
 8012906:	9300      	str	r3, [sp, #0]
 8012908:	462a      	mov	r2, r5
 801290a:	4b09      	ldr	r3, [pc, #36]	; (8012930 <_vfiprintf_r+0x258>)
 801290c:	a904      	add	r1, sp, #16
 801290e:	4630      	mov	r0, r6
 8012910:	f000 f880 	bl	8012a14 <_printf_i>
 8012914:	e7e4      	b.n	80128e0 <_vfiprintf_r+0x208>
 8012916:	bf00      	nop
 8012918:	08012f60 	.word	0x08012f60
 801291c:	08012f80 	.word	0x08012f80
 8012920:	08012f40 	.word	0x08012f40
 8012924:	08012fa0 	.word	0x08012fa0
 8012928:	08012faa 	.word	0x08012faa
 801292c:	00000000 	.word	0x00000000
 8012930:	080126b3 	.word	0x080126b3
 8012934:	08012fa6 	.word	0x08012fa6

08012938 <_printf_common>:
 8012938:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801293c:	4616      	mov	r6, r2
 801293e:	4699      	mov	r9, r3
 8012940:	688a      	ldr	r2, [r1, #8]
 8012942:	690b      	ldr	r3, [r1, #16]
 8012944:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8012948:	4293      	cmp	r3, r2
 801294a:	bfb8      	it	lt
 801294c:	4613      	movlt	r3, r2
 801294e:	6033      	str	r3, [r6, #0]
 8012950:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8012954:	4607      	mov	r7, r0
 8012956:	460c      	mov	r4, r1
 8012958:	b10a      	cbz	r2, 801295e <_printf_common+0x26>
 801295a:	3301      	adds	r3, #1
 801295c:	6033      	str	r3, [r6, #0]
 801295e:	6823      	ldr	r3, [r4, #0]
 8012960:	0699      	lsls	r1, r3, #26
 8012962:	bf42      	ittt	mi
 8012964:	6833      	ldrmi	r3, [r6, #0]
 8012966:	3302      	addmi	r3, #2
 8012968:	6033      	strmi	r3, [r6, #0]
 801296a:	6825      	ldr	r5, [r4, #0]
 801296c:	f015 0506 	ands.w	r5, r5, #6
 8012970:	d106      	bne.n	8012980 <_printf_common+0x48>
 8012972:	f104 0a19 	add.w	sl, r4, #25
 8012976:	68e3      	ldr	r3, [r4, #12]
 8012978:	6832      	ldr	r2, [r6, #0]
 801297a:	1a9b      	subs	r3, r3, r2
 801297c:	42ab      	cmp	r3, r5
 801297e:	dc26      	bgt.n	80129ce <_printf_common+0x96>
 8012980:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8012984:	1e13      	subs	r3, r2, #0
 8012986:	6822      	ldr	r2, [r4, #0]
 8012988:	bf18      	it	ne
 801298a:	2301      	movne	r3, #1
 801298c:	0692      	lsls	r2, r2, #26
 801298e:	d42b      	bmi.n	80129e8 <_printf_common+0xb0>
 8012990:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8012994:	4649      	mov	r1, r9
 8012996:	4638      	mov	r0, r7
 8012998:	47c0      	blx	r8
 801299a:	3001      	adds	r0, #1
 801299c:	d01e      	beq.n	80129dc <_printf_common+0xa4>
 801299e:	6823      	ldr	r3, [r4, #0]
 80129a0:	68e5      	ldr	r5, [r4, #12]
 80129a2:	6832      	ldr	r2, [r6, #0]
 80129a4:	f003 0306 	and.w	r3, r3, #6
 80129a8:	2b04      	cmp	r3, #4
 80129aa:	bf08      	it	eq
 80129ac:	1aad      	subeq	r5, r5, r2
 80129ae:	68a3      	ldr	r3, [r4, #8]
 80129b0:	6922      	ldr	r2, [r4, #16]
 80129b2:	bf0c      	ite	eq
 80129b4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80129b8:	2500      	movne	r5, #0
 80129ba:	4293      	cmp	r3, r2
 80129bc:	bfc4      	itt	gt
 80129be:	1a9b      	subgt	r3, r3, r2
 80129c0:	18ed      	addgt	r5, r5, r3
 80129c2:	2600      	movs	r6, #0
 80129c4:	341a      	adds	r4, #26
 80129c6:	42b5      	cmp	r5, r6
 80129c8:	d11a      	bne.n	8012a00 <_printf_common+0xc8>
 80129ca:	2000      	movs	r0, #0
 80129cc:	e008      	b.n	80129e0 <_printf_common+0xa8>
 80129ce:	2301      	movs	r3, #1
 80129d0:	4652      	mov	r2, sl
 80129d2:	4649      	mov	r1, r9
 80129d4:	4638      	mov	r0, r7
 80129d6:	47c0      	blx	r8
 80129d8:	3001      	adds	r0, #1
 80129da:	d103      	bne.n	80129e4 <_printf_common+0xac>
 80129dc:	f04f 30ff 	mov.w	r0, #4294967295
 80129e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80129e4:	3501      	adds	r5, #1
 80129e6:	e7c6      	b.n	8012976 <_printf_common+0x3e>
 80129e8:	18e1      	adds	r1, r4, r3
 80129ea:	1c5a      	adds	r2, r3, #1
 80129ec:	2030      	movs	r0, #48	; 0x30
 80129ee:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80129f2:	4422      	add	r2, r4
 80129f4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80129f8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80129fc:	3302      	adds	r3, #2
 80129fe:	e7c7      	b.n	8012990 <_printf_common+0x58>
 8012a00:	2301      	movs	r3, #1
 8012a02:	4622      	mov	r2, r4
 8012a04:	4649      	mov	r1, r9
 8012a06:	4638      	mov	r0, r7
 8012a08:	47c0      	blx	r8
 8012a0a:	3001      	adds	r0, #1
 8012a0c:	d0e6      	beq.n	80129dc <_printf_common+0xa4>
 8012a0e:	3601      	adds	r6, #1
 8012a10:	e7d9      	b.n	80129c6 <_printf_common+0x8e>
	...

08012a14 <_printf_i>:
 8012a14:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8012a18:	7e0f      	ldrb	r7, [r1, #24]
 8012a1a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8012a1c:	2f78      	cmp	r7, #120	; 0x78
 8012a1e:	4691      	mov	r9, r2
 8012a20:	4680      	mov	r8, r0
 8012a22:	460c      	mov	r4, r1
 8012a24:	469a      	mov	sl, r3
 8012a26:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8012a2a:	d807      	bhi.n	8012a3c <_printf_i+0x28>
 8012a2c:	2f62      	cmp	r7, #98	; 0x62
 8012a2e:	d80a      	bhi.n	8012a46 <_printf_i+0x32>
 8012a30:	2f00      	cmp	r7, #0
 8012a32:	f000 80d8 	beq.w	8012be6 <_printf_i+0x1d2>
 8012a36:	2f58      	cmp	r7, #88	; 0x58
 8012a38:	f000 80a3 	beq.w	8012b82 <_printf_i+0x16e>
 8012a3c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012a40:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8012a44:	e03a      	b.n	8012abc <_printf_i+0xa8>
 8012a46:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8012a4a:	2b15      	cmp	r3, #21
 8012a4c:	d8f6      	bhi.n	8012a3c <_printf_i+0x28>
 8012a4e:	a101      	add	r1, pc, #4	; (adr r1, 8012a54 <_printf_i+0x40>)
 8012a50:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8012a54:	08012aad 	.word	0x08012aad
 8012a58:	08012ac1 	.word	0x08012ac1
 8012a5c:	08012a3d 	.word	0x08012a3d
 8012a60:	08012a3d 	.word	0x08012a3d
 8012a64:	08012a3d 	.word	0x08012a3d
 8012a68:	08012a3d 	.word	0x08012a3d
 8012a6c:	08012ac1 	.word	0x08012ac1
 8012a70:	08012a3d 	.word	0x08012a3d
 8012a74:	08012a3d 	.word	0x08012a3d
 8012a78:	08012a3d 	.word	0x08012a3d
 8012a7c:	08012a3d 	.word	0x08012a3d
 8012a80:	08012bcd 	.word	0x08012bcd
 8012a84:	08012af1 	.word	0x08012af1
 8012a88:	08012baf 	.word	0x08012baf
 8012a8c:	08012a3d 	.word	0x08012a3d
 8012a90:	08012a3d 	.word	0x08012a3d
 8012a94:	08012bef 	.word	0x08012bef
 8012a98:	08012a3d 	.word	0x08012a3d
 8012a9c:	08012af1 	.word	0x08012af1
 8012aa0:	08012a3d 	.word	0x08012a3d
 8012aa4:	08012a3d 	.word	0x08012a3d
 8012aa8:	08012bb7 	.word	0x08012bb7
 8012aac:	682b      	ldr	r3, [r5, #0]
 8012aae:	1d1a      	adds	r2, r3, #4
 8012ab0:	681b      	ldr	r3, [r3, #0]
 8012ab2:	602a      	str	r2, [r5, #0]
 8012ab4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012ab8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8012abc:	2301      	movs	r3, #1
 8012abe:	e0a3      	b.n	8012c08 <_printf_i+0x1f4>
 8012ac0:	6820      	ldr	r0, [r4, #0]
 8012ac2:	6829      	ldr	r1, [r5, #0]
 8012ac4:	0606      	lsls	r6, r0, #24
 8012ac6:	f101 0304 	add.w	r3, r1, #4
 8012aca:	d50a      	bpl.n	8012ae2 <_printf_i+0xce>
 8012acc:	680e      	ldr	r6, [r1, #0]
 8012ace:	602b      	str	r3, [r5, #0]
 8012ad0:	2e00      	cmp	r6, #0
 8012ad2:	da03      	bge.n	8012adc <_printf_i+0xc8>
 8012ad4:	232d      	movs	r3, #45	; 0x2d
 8012ad6:	4276      	negs	r6, r6
 8012ad8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012adc:	485e      	ldr	r0, [pc, #376]	; (8012c58 <_printf_i+0x244>)
 8012ade:	230a      	movs	r3, #10
 8012ae0:	e019      	b.n	8012b16 <_printf_i+0x102>
 8012ae2:	680e      	ldr	r6, [r1, #0]
 8012ae4:	602b      	str	r3, [r5, #0]
 8012ae6:	f010 0f40 	tst.w	r0, #64	; 0x40
 8012aea:	bf18      	it	ne
 8012aec:	b236      	sxthne	r6, r6
 8012aee:	e7ef      	b.n	8012ad0 <_printf_i+0xbc>
 8012af0:	682b      	ldr	r3, [r5, #0]
 8012af2:	6820      	ldr	r0, [r4, #0]
 8012af4:	1d19      	adds	r1, r3, #4
 8012af6:	6029      	str	r1, [r5, #0]
 8012af8:	0601      	lsls	r1, r0, #24
 8012afa:	d501      	bpl.n	8012b00 <_printf_i+0xec>
 8012afc:	681e      	ldr	r6, [r3, #0]
 8012afe:	e002      	b.n	8012b06 <_printf_i+0xf2>
 8012b00:	0646      	lsls	r6, r0, #25
 8012b02:	d5fb      	bpl.n	8012afc <_printf_i+0xe8>
 8012b04:	881e      	ldrh	r6, [r3, #0]
 8012b06:	4854      	ldr	r0, [pc, #336]	; (8012c58 <_printf_i+0x244>)
 8012b08:	2f6f      	cmp	r7, #111	; 0x6f
 8012b0a:	bf0c      	ite	eq
 8012b0c:	2308      	moveq	r3, #8
 8012b0e:	230a      	movne	r3, #10
 8012b10:	2100      	movs	r1, #0
 8012b12:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8012b16:	6865      	ldr	r5, [r4, #4]
 8012b18:	60a5      	str	r5, [r4, #8]
 8012b1a:	2d00      	cmp	r5, #0
 8012b1c:	bfa2      	ittt	ge
 8012b1e:	6821      	ldrge	r1, [r4, #0]
 8012b20:	f021 0104 	bicge.w	r1, r1, #4
 8012b24:	6021      	strge	r1, [r4, #0]
 8012b26:	b90e      	cbnz	r6, 8012b2c <_printf_i+0x118>
 8012b28:	2d00      	cmp	r5, #0
 8012b2a:	d04d      	beq.n	8012bc8 <_printf_i+0x1b4>
 8012b2c:	4615      	mov	r5, r2
 8012b2e:	fbb6 f1f3 	udiv	r1, r6, r3
 8012b32:	fb03 6711 	mls	r7, r3, r1, r6
 8012b36:	5dc7      	ldrb	r7, [r0, r7]
 8012b38:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8012b3c:	4637      	mov	r7, r6
 8012b3e:	42bb      	cmp	r3, r7
 8012b40:	460e      	mov	r6, r1
 8012b42:	d9f4      	bls.n	8012b2e <_printf_i+0x11a>
 8012b44:	2b08      	cmp	r3, #8
 8012b46:	d10b      	bne.n	8012b60 <_printf_i+0x14c>
 8012b48:	6823      	ldr	r3, [r4, #0]
 8012b4a:	07de      	lsls	r6, r3, #31
 8012b4c:	d508      	bpl.n	8012b60 <_printf_i+0x14c>
 8012b4e:	6923      	ldr	r3, [r4, #16]
 8012b50:	6861      	ldr	r1, [r4, #4]
 8012b52:	4299      	cmp	r1, r3
 8012b54:	bfde      	ittt	le
 8012b56:	2330      	movle	r3, #48	; 0x30
 8012b58:	f805 3c01 	strble.w	r3, [r5, #-1]
 8012b5c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8012b60:	1b52      	subs	r2, r2, r5
 8012b62:	6122      	str	r2, [r4, #16]
 8012b64:	f8cd a000 	str.w	sl, [sp]
 8012b68:	464b      	mov	r3, r9
 8012b6a:	aa03      	add	r2, sp, #12
 8012b6c:	4621      	mov	r1, r4
 8012b6e:	4640      	mov	r0, r8
 8012b70:	f7ff fee2 	bl	8012938 <_printf_common>
 8012b74:	3001      	adds	r0, #1
 8012b76:	d14c      	bne.n	8012c12 <_printf_i+0x1fe>
 8012b78:	f04f 30ff 	mov.w	r0, #4294967295
 8012b7c:	b004      	add	sp, #16
 8012b7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012b82:	4835      	ldr	r0, [pc, #212]	; (8012c58 <_printf_i+0x244>)
 8012b84:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8012b88:	6829      	ldr	r1, [r5, #0]
 8012b8a:	6823      	ldr	r3, [r4, #0]
 8012b8c:	f851 6b04 	ldr.w	r6, [r1], #4
 8012b90:	6029      	str	r1, [r5, #0]
 8012b92:	061d      	lsls	r5, r3, #24
 8012b94:	d514      	bpl.n	8012bc0 <_printf_i+0x1ac>
 8012b96:	07df      	lsls	r7, r3, #31
 8012b98:	bf44      	itt	mi
 8012b9a:	f043 0320 	orrmi.w	r3, r3, #32
 8012b9e:	6023      	strmi	r3, [r4, #0]
 8012ba0:	b91e      	cbnz	r6, 8012baa <_printf_i+0x196>
 8012ba2:	6823      	ldr	r3, [r4, #0]
 8012ba4:	f023 0320 	bic.w	r3, r3, #32
 8012ba8:	6023      	str	r3, [r4, #0]
 8012baa:	2310      	movs	r3, #16
 8012bac:	e7b0      	b.n	8012b10 <_printf_i+0xfc>
 8012bae:	6823      	ldr	r3, [r4, #0]
 8012bb0:	f043 0320 	orr.w	r3, r3, #32
 8012bb4:	6023      	str	r3, [r4, #0]
 8012bb6:	2378      	movs	r3, #120	; 0x78
 8012bb8:	4828      	ldr	r0, [pc, #160]	; (8012c5c <_printf_i+0x248>)
 8012bba:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8012bbe:	e7e3      	b.n	8012b88 <_printf_i+0x174>
 8012bc0:	0659      	lsls	r1, r3, #25
 8012bc2:	bf48      	it	mi
 8012bc4:	b2b6      	uxthmi	r6, r6
 8012bc6:	e7e6      	b.n	8012b96 <_printf_i+0x182>
 8012bc8:	4615      	mov	r5, r2
 8012bca:	e7bb      	b.n	8012b44 <_printf_i+0x130>
 8012bcc:	682b      	ldr	r3, [r5, #0]
 8012bce:	6826      	ldr	r6, [r4, #0]
 8012bd0:	6961      	ldr	r1, [r4, #20]
 8012bd2:	1d18      	adds	r0, r3, #4
 8012bd4:	6028      	str	r0, [r5, #0]
 8012bd6:	0635      	lsls	r5, r6, #24
 8012bd8:	681b      	ldr	r3, [r3, #0]
 8012bda:	d501      	bpl.n	8012be0 <_printf_i+0x1cc>
 8012bdc:	6019      	str	r1, [r3, #0]
 8012bde:	e002      	b.n	8012be6 <_printf_i+0x1d2>
 8012be0:	0670      	lsls	r0, r6, #25
 8012be2:	d5fb      	bpl.n	8012bdc <_printf_i+0x1c8>
 8012be4:	8019      	strh	r1, [r3, #0]
 8012be6:	2300      	movs	r3, #0
 8012be8:	6123      	str	r3, [r4, #16]
 8012bea:	4615      	mov	r5, r2
 8012bec:	e7ba      	b.n	8012b64 <_printf_i+0x150>
 8012bee:	682b      	ldr	r3, [r5, #0]
 8012bf0:	1d1a      	adds	r2, r3, #4
 8012bf2:	602a      	str	r2, [r5, #0]
 8012bf4:	681d      	ldr	r5, [r3, #0]
 8012bf6:	6862      	ldr	r2, [r4, #4]
 8012bf8:	2100      	movs	r1, #0
 8012bfa:	4628      	mov	r0, r5
 8012bfc:	f7f5 faf0 	bl	80081e0 <memchr>
 8012c00:	b108      	cbz	r0, 8012c06 <_printf_i+0x1f2>
 8012c02:	1b40      	subs	r0, r0, r5
 8012c04:	6060      	str	r0, [r4, #4]
 8012c06:	6863      	ldr	r3, [r4, #4]
 8012c08:	6123      	str	r3, [r4, #16]
 8012c0a:	2300      	movs	r3, #0
 8012c0c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012c10:	e7a8      	b.n	8012b64 <_printf_i+0x150>
 8012c12:	6923      	ldr	r3, [r4, #16]
 8012c14:	462a      	mov	r2, r5
 8012c16:	4649      	mov	r1, r9
 8012c18:	4640      	mov	r0, r8
 8012c1a:	47d0      	blx	sl
 8012c1c:	3001      	adds	r0, #1
 8012c1e:	d0ab      	beq.n	8012b78 <_printf_i+0x164>
 8012c20:	6823      	ldr	r3, [r4, #0]
 8012c22:	079b      	lsls	r3, r3, #30
 8012c24:	d413      	bmi.n	8012c4e <_printf_i+0x23a>
 8012c26:	68e0      	ldr	r0, [r4, #12]
 8012c28:	9b03      	ldr	r3, [sp, #12]
 8012c2a:	4298      	cmp	r0, r3
 8012c2c:	bfb8      	it	lt
 8012c2e:	4618      	movlt	r0, r3
 8012c30:	e7a4      	b.n	8012b7c <_printf_i+0x168>
 8012c32:	2301      	movs	r3, #1
 8012c34:	4632      	mov	r2, r6
 8012c36:	4649      	mov	r1, r9
 8012c38:	4640      	mov	r0, r8
 8012c3a:	47d0      	blx	sl
 8012c3c:	3001      	adds	r0, #1
 8012c3e:	d09b      	beq.n	8012b78 <_printf_i+0x164>
 8012c40:	3501      	adds	r5, #1
 8012c42:	68e3      	ldr	r3, [r4, #12]
 8012c44:	9903      	ldr	r1, [sp, #12]
 8012c46:	1a5b      	subs	r3, r3, r1
 8012c48:	42ab      	cmp	r3, r5
 8012c4a:	dcf2      	bgt.n	8012c32 <_printf_i+0x21e>
 8012c4c:	e7eb      	b.n	8012c26 <_printf_i+0x212>
 8012c4e:	2500      	movs	r5, #0
 8012c50:	f104 0619 	add.w	r6, r4, #25
 8012c54:	e7f5      	b.n	8012c42 <_printf_i+0x22e>
 8012c56:	bf00      	nop
 8012c58:	08012fb1 	.word	0x08012fb1
 8012c5c:	08012fc2 	.word	0x08012fc2

08012c60 <_sbrk_r>:
 8012c60:	b538      	push	{r3, r4, r5, lr}
 8012c62:	4d06      	ldr	r5, [pc, #24]	; (8012c7c <_sbrk_r+0x1c>)
 8012c64:	2300      	movs	r3, #0
 8012c66:	4604      	mov	r4, r0
 8012c68:	4608      	mov	r0, r1
 8012c6a:	602b      	str	r3, [r5, #0]
 8012c6c:	f7f5 fed4 	bl	8008a18 <_sbrk>
 8012c70:	1c43      	adds	r3, r0, #1
 8012c72:	d102      	bne.n	8012c7a <_sbrk_r+0x1a>
 8012c74:	682b      	ldr	r3, [r5, #0]
 8012c76:	b103      	cbz	r3, 8012c7a <_sbrk_r+0x1a>
 8012c78:	6023      	str	r3, [r4, #0]
 8012c7a:	bd38      	pop	{r3, r4, r5, pc}
 8012c7c:	20001958 	.word	0x20001958

08012c80 <__sread>:
 8012c80:	b510      	push	{r4, lr}
 8012c82:	460c      	mov	r4, r1
 8012c84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012c88:	f000 f8a0 	bl	8012dcc <_read_r>
 8012c8c:	2800      	cmp	r0, #0
 8012c8e:	bfab      	itete	ge
 8012c90:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8012c92:	89a3      	ldrhlt	r3, [r4, #12]
 8012c94:	181b      	addge	r3, r3, r0
 8012c96:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8012c9a:	bfac      	ite	ge
 8012c9c:	6563      	strge	r3, [r4, #84]	; 0x54
 8012c9e:	81a3      	strhlt	r3, [r4, #12]
 8012ca0:	bd10      	pop	{r4, pc}

08012ca2 <__swrite>:
 8012ca2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012ca6:	461f      	mov	r7, r3
 8012ca8:	898b      	ldrh	r3, [r1, #12]
 8012caa:	05db      	lsls	r3, r3, #23
 8012cac:	4605      	mov	r5, r0
 8012cae:	460c      	mov	r4, r1
 8012cb0:	4616      	mov	r6, r2
 8012cb2:	d505      	bpl.n	8012cc0 <__swrite+0x1e>
 8012cb4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012cb8:	2302      	movs	r3, #2
 8012cba:	2200      	movs	r2, #0
 8012cbc:	f000 f868 	bl	8012d90 <_lseek_r>
 8012cc0:	89a3      	ldrh	r3, [r4, #12]
 8012cc2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012cc6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8012cca:	81a3      	strh	r3, [r4, #12]
 8012ccc:	4632      	mov	r2, r6
 8012cce:	463b      	mov	r3, r7
 8012cd0:	4628      	mov	r0, r5
 8012cd2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012cd6:	f000 b817 	b.w	8012d08 <_write_r>

08012cda <__sseek>:
 8012cda:	b510      	push	{r4, lr}
 8012cdc:	460c      	mov	r4, r1
 8012cde:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012ce2:	f000 f855 	bl	8012d90 <_lseek_r>
 8012ce6:	1c43      	adds	r3, r0, #1
 8012ce8:	89a3      	ldrh	r3, [r4, #12]
 8012cea:	bf15      	itete	ne
 8012cec:	6560      	strne	r0, [r4, #84]	; 0x54
 8012cee:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8012cf2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8012cf6:	81a3      	strheq	r3, [r4, #12]
 8012cf8:	bf18      	it	ne
 8012cfa:	81a3      	strhne	r3, [r4, #12]
 8012cfc:	bd10      	pop	{r4, pc}

08012cfe <__sclose>:
 8012cfe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012d02:	f000 b813 	b.w	8012d2c <_close_r>
	...

08012d08 <_write_r>:
 8012d08:	b538      	push	{r3, r4, r5, lr}
 8012d0a:	4d07      	ldr	r5, [pc, #28]	; (8012d28 <_write_r+0x20>)
 8012d0c:	4604      	mov	r4, r0
 8012d0e:	4608      	mov	r0, r1
 8012d10:	4611      	mov	r1, r2
 8012d12:	2200      	movs	r2, #0
 8012d14:	602a      	str	r2, [r5, #0]
 8012d16:	461a      	mov	r2, r3
 8012d18:	f7f5 fe2d 	bl	8008976 <_write>
 8012d1c:	1c43      	adds	r3, r0, #1
 8012d1e:	d102      	bne.n	8012d26 <_write_r+0x1e>
 8012d20:	682b      	ldr	r3, [r5, #0]
 8012d22:	b103      	cbz	r3, 8012d26 <_write_r+0x1e>
 8012d24:	6023      	str	r3, [r4, #0]
 8012d26:	bd38      	pop	{r3, r4, r5, pc}
 8012d28:	20001958 	.word	0x20001958

08012d2c <_close_r>:
 8012d2c:	b538      	push	{r3, r4, r5, lr}
 8012d2e:	4d06      	ldr	r5, [pc, #24]	; (8012d48 <_close_r+0x1c>)
 8012d30:	2300      	movs	r3, #0
 8012d32:	4604      	mov	r4, r0
 8012d34:	4608      	mov	r0, r1
 8012d36:	602b      	str	r3, [r5, #0]
 8012d38:	f7f5 fe39 	bl	80089ae <_close>
 8012d3c:	1c43      	adds	r3, r0, #1
 8012d3e:	d102      	bne.n	8012d46 <_close_r+0x1a>
 8012d40:	682b      	ldr	r3, [r5, #0]
 8012d42:	b103      	cbz	r3, 8012d46 <_close_r+0x1a>
 8012d44:	6023      	str	r3, [r4, #0]
 8012d46:	bd38      	pop	{r3, r4, r5, pc}
 8012d48:	20001958 	.word	0x20001958

08012d4c <_fstat_r>:
 8012d4c:	b538      	push	{r3, r4, r5, lr}
 8012d4e:	4d07      	ldr	r5, [pc, #28]	; (8012d6c <_fstat_r+0x20>)
 8012d50:	2300      	movs	r3, #0
 8012d52:	4604      	mov	r4, r0
 8012d54:	4608      	mov	r0, r1
 8012d56:	4611      	mov	r1, r2
 8012d58:	602b      	str	r3, [r5, #0]
 8012d5a:	f7f5 fe34 	bl	80089c6 <_fstat>
 8012d5e:	1c43      	adds	r3, r0, #1
 8012d60:	d102      	bne.n	8012d68 <_fstat_r+0x1c>
 8012d62:	682b      	ldr	r3, [r5, #0]
 8012d64:	b103      	cbz	r3, 8012d68 <_fstat_r+0x1c>
 8012d66:	6023      	str	r3, [r4, #0]
 8012d68:	bd38      	pop	{r3, r4, r5, pc}
 8012d6a:	bf00      	nop
 8012d6c:	20001958 	.word	0x20001958

08012d70 <_isatty_r>:
 8012d70:	b538      	push	{r3, r4, r5, lr}
 8012d72:	4d06      	ldr	r5, [pc, #24]	; (8012d8c <_isatty_r+0x1c>)
 8012d74:	2300      	movs	r3, #0
 8012d76:	4604      	mov	r4, r0
 8012d78:	4608      	mov	r0, r1
 8012d7a:	602b      	str	r3, [r5, #0]
 8012d7c:	f7f5 fe33 	bl	80089e6 <_isatty>
 8012d80:	1c43      	adds	r3, r0, #1
 8012d82:	d102      	bne.n	8012d8a <_isatty_r+0x1a>
 8012d84:	682b      	ldr	r3, [r5, #0]
 8012d86:	b103      	cbz	r3, 8012d8a <_isatty_r+0x1a>
 8012d88:	6023      	str	r3, [r4, #0]
 8012d8a:	bd38      	pop	{r3, r4, r5, pc}
 8012d8c:	20001958 	.word	0x20001958

08012d90 <_lseek_r>:
 8012d90:	b538      	push	{r3, r4, r5, lr}
 8012d92:	4d07      	ldr	r5, [pc, #28]	; (8012db0 <_lseek_r+0x20>)
 8012d94:	4604      	mov	r4, r0
 8012d96:	4608      	mov	r0, r1
 8012d98:	4611      	mov	r1, r2
 8012d9a:	2200      	movs	r2, #0
 8012d9c:	602a      	str	r2, [r5, #0]
 8012d9e:	461a      	mov	r2, r3
 8012da0:	f7f5 fe2c 	bl	80089fc <_lseek>
 8012da4:	1c43      	adds	r3, r0, #1
 8012da6:	d102      	bne.n	8012dae <_lseek_r+0x1e>
 8012da8:	682b      	ldr	r3, [r5, #0]
 8012daa:	b103      	cbz	r3, 8012dae <_lseek_r+0x1e>
 8012dac:	6023      	str	r3, [r4, #0]
 8012dae:	bd38      	pop	{r3, r4, r5, pc}
 8012db0:	20001958 	.word	0x20001958

08012db4 <__malloc_lock>:
 8012db4:	4801      	ldr	r0, [pc, #4]	; (8012dbc <__malloc_lock+0x8>)
 8012db6:	f7ff bb1d 	b.w	80123f4 <__retarget_lock_acquire_recursive>
 8012dba:	bf00      	nop
 8012dbc:	2000194c 	.word	0x2000194c

08012dc0 <__malloc_unlock>:
 8012dc0:	4801      	ldr	r0, [pc, #4]	; (8012dc8 <__malloc_unlock+0x8>)
 8012dc2:	f7ff bb18 	b.w	80123f6 <__retarget_lock_release_recursive>
 8012dc6:	bf00      	nop
 8012dc8:	2000194c 	.word	0x2000194c

08012dcc <_read_r>:
 8012dcc:	b538      	push	{r3, r4, r5, lr}
 8012dce:	4d07      	ldr	r5, [pc, #28]	; (8012dec <_read_r+0x20>)
 8012dd0:	4604      	mov	r4, r0
 8012dd2:	4608      	mov	r0, r1
 8012dd4:	4611      	mov	r1, r2
 8012dd6:	2200      	movs	r2, #0
 8012dd8:	602a      	str	r2, [r5, #0]
 8012dda:	461a      	mov	r2, r3
 8012ddc:	f7f5 fdae 	bl	800893c <_read>
 8012de0:	1c43      	adds	r3, r0, #1
 8012de2:	d102      	bne.n	8012dea <_read_r+0x1e>
 8012de4:	682b      	ldr	r3, [r5, #0]
 8012de6:	b103      	cbz	r3, 8012dea <_read_r+0x1e>
 8012de8:	6023      	str	r3, [r4, #0]
 8012dea:	bd38      	pop	{r3, r4, r5, pc}
 8012dec:	20001958 	.word	0x20001958

08012df0 <_init>:
 8012df0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012df2:	bf00      	nop
 8012df4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012df6:	bc08      	pop	{r3}
 8012df8:	469e      	mov	lr, r3
 8012dfa:	4770      	bx	lr

08012dfc <_fini>:
 8012dfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012dfe:	bf00      	nop
 8012e00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012e02:	bc08      	pop	{r3}
 8012e04:	469e      	mov	lr, r3
 8012e06:	4770      	bx	lr
