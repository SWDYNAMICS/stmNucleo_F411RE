
stmf411re_fw.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007294  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000bc  08007434  08007434  00017434  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080074f0  080074f0  00020214  2**0
                  CONTENTS
  4 .ARM          00000008  080074f0  080074f0  000174f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080074f8  080074f8  00020214  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080074f8  080074f8  000174f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080074fc  080074fc  000174fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000214  20000000  08007500  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000153c  20000214  08007714  00020214  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001750  08007714  00021750  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e39a  00000000  00000000  00020244  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ecb  00000000  00000000  0002e5de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c40  00000000  00000000  000314b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000aa8  00000000  00000000  000320f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019fb0  00000000  00000000  00032b98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015ec0  00000000  00000000  0004cb48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008761f  00000000  00000000  00062a08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ea027  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000032e0  00000000  00000000  000ea078  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000214 	.word	0x20000214
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800741c 	.word	0x0800741c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000218 	.word	0x20000218
 80001dc:	0800741c 	.word	0x0800741c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <apInit>:




void apInit(void)
{
 8000584:	b480      	push	{r7}
 8000586:	af00      	add	r7, sp, #0

}
 8000588:	bf00      	nop
 800058a:	46bd      	mov	sp, r7
 800058c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000590:	4770      	bx	lr
	...

08000594 <apMain>:

void apMain(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b084      	sub	sp, #16
 8000598:	af00      	add	r7, sp, #0
	uint32_t pre_time;
	uint32_t pre_baud;

	pre_baud = uartGetBaud(_DEF_UART1);
 800059a:	2000      	movs	r0, #0
 800059c:	f000 fb18 	bl	8000bd0 <uartGetBaud>
 80005a0:	60b8      	str	r0, [r7, #8]
	pre_time = millis();
 80005a2:	f000 f8ae 	bl	8000702 <millis>
 80005a6:	60f8      	str	r0, [r7, #12]


	while (1)
	{
		if(millis() - pre_time >= 500)
 80005a8:	f000 f8ab 	bl	8000702 <millis>
 80005ac:	4602      	mov	r2, r0
 80005ae:	68fb      	ldr	r3, [r7, #12]
 80005b0:	1ad3      	subs	r3, r2, r3
 80005b2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80005b6:	d305      	bcc.n	80005c4 <apMain+0x30>
		{
			pre_time = millis();
 80005b8:	f000 f8a3 	bl	8000702 <millis>
 80005bc:	60f8      	str	r0, [r7, #12]
			ledToggle(_DEF_LED1);
 80005be:	2000      	movs	r0, #0
 80005c0:	f000 fa5a 	bl	8000a78 <ledToggle>
		}

		if(uartAvailable(_DEF_UART1) > 0 )
 80005c4:	2000      	movs	r0, #0
 80005c6:	f000 fa91 	bl	8000aec <uartAvailable>
 80005ca:	4603      	mov	r3, r0
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d00a      	beq.n	80005e6 <apMain+0x52>
		{
			uint8_t rx_data;

			rx_data = uartRead(_DEF_UART1);
 80005d0:	2000      	movs	r0, #0
 80005d2:	f000 fa9e 	bl	8000b12 <uartRead>
 80005d6:	4603      	mov	r3, r0
 80005d8:	71fb      	strb	r3, [r7, #7]

			uartPrint(_DEF_UART1, "RX_DATA = %c , 0x%x\n", rx_data, rx_data);
 80005da:	79fa      	ldrb	r2, [r7, #7]
 80005dc:	79fb      	ldrb	r3, [r7, #7]
 80005de:	490c      	ldr	r1, [pc, #48]	; (8000610 <apMain+0x7c>)
 80005e0:	2000      	movs	r0, #0
 80005e2:	f000 fabd 	bl	8000b60 <uartPrint>
		}
		if(pre_baud != uartGetBaud(_DEF_UART1))
 80005e6:	2000      	movs	r0, #0
 80005e8:	f000 faf2 	bl	8000bd0 <uartGetBaud>
 80005ec:	4602      	mov	r2, r0
 80005ee:	68bb      	ldr	r3, [r7, #8]
 80005f0:	4293      	cmp	r3, r2
 80005f2:	d0d9      	beq.n	80005a8 <apMain+0x14>
		{
			pre_baud = uartGetBaud(_DEF_UART1);
 80005f4:	2000      	movs	r0, #0
 80005f6:	f000 faeb 	bl	8000bd0 <uartGetBaud>
 80005fa:	60b8      	str	r0, [r7, #8]
			uartPrint(_DEF_UART1, "Changed buad rate: %d \n", uartGetBaud(_DEF_UART1));
 80005fc:	2000      	movs	r0, #0
 80005fe:	f000 fae7 	bl	8000bd0 <uartGetBaud>
 8000602:	4603      	mov	r3, r0
 8000604:	461a      	mov	r2, r3
 8000606:	4903      	ldr	r1, [pc, #12]	; (8000614 <apMain+0x80>)
 8000608:	2000      	movs	r0, #0
 800060a:	f000 faa9 	bl	8000b60 <uartPrint>
		if(millis() - pre_time >= 500)
 800060e:	e7cb      	b.n	80005a8 <apMain+0x14>
 8000610:	08007434 	.word	0x08007434
 8000614:	0800744c 	.word	0x0800744c

08000618 <bspInit>:

#include "bsp.h"
void SystemClock_Config(void);

void bspInit(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b088      	sub	sp, #32
 800061c:	af00      	add	r7, sp, #0
  HAL_Init();
 800061e:	f000 faf5 	bl	8000c0c <HAL_Init>
  SystemClock_Config();
 8000622:	f000 f875 	bl	8000710 <SystemClock_Config>

  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000626:	2300      	movs	r3, #0
 8000628:	60bb      	str	r3, [r7, #8]
 800062a:	4b2e      	ldr	r3, [pc, #184]	; (80006e4 <bspInit+0xcc>)
 800062c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800062e:	4a2d      	ldr	r2, [pc, #180]	; (80006e4 <bspInit+0xcc>)
 8000630:	f043 0304 	orr.w	r3, r3, #4
 8000634:	6313      	str	r3, [r2, #48]	; 0x30
 8000636:	4b2b      	ldr	r3, [pc, #172]	; (80006e4 <bspInit+0xcc>)
 8000638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800063a:	f003 0304 	and.w	r3, r3, #4
 800063e:	60bb      	str	r3, [r7, #8]
 8000640:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000642:	2300      	movs	r3, #0
 8000644:	607b      	str	r3, [r7, #4]
 8000646:	4b27      	ldr	r3, [pc, #156]	; (80006e4 <bspInit+0xcc>)
 8000648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800064a:	4a26      	ldr	r2, [pc, #152]	; (80006e4 <bspInit+0xcc>)
 800064c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000650:	6313      	str	r3, [r2, #48]	; 0x30
 8000652:	4b24      	ldr	r3, [pc, #144]	; (80006e4 <bspInit+0xcc>)
 8000654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000656:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800065a:	607b      	str	r3, [r7, #4]
 800065c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800065e:	2300      	movs	r3, #0
 8000660:	603b      	str	r3, [r7, #0]
 8000662:	4b20      	ldr	r3, [pc, #128]	; (80006e4 <bspInit+0xcc>)
 8000664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000666:	4a1f      	ldr	r2, [pc, #124]	; (80006e4 <bspInit+0xcc>)
 8000668:	f043 0301 	orr.w	r3, r3, #1
 800066c:	6313      	str	r3, [r2, #48]	; 0x30
 800066e:	4b1d      	ldr	r3, [pc, #116]	; (80006e4 <bspInit+0xcc>)
 8000670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000672:	f003 0301 	and.w	r3, r3, #1
 8000676:	603b      	str	r3, [r7, #0]
 8000678:	683b      	ldr	r3, [r7, #0]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800067a:	f107 030c 	add.w	r3, r7, #12
 800067e:	2200      	movs	r2, #0
 8000680:	601a      	str	r2, [r3, #0]
 8000682:	605a      	str	r2, [r3, #4]
 8000684:	609a      	str	r2, [r3, #8]
 8000686:	60da      	str	r2, [r3, #12]
 8000688:	611a      	str	r2, [r3, #16]

	GPIO_InitStruct.Pin = GPIO_PIN_12;
 800068a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800068e:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000690:	2311      	movs	r3, #17
 8000692:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000694:	2300      	movs	r3, #0
 8000696:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000698:	2300      	movs	r3, #0
 800069a:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800069c:	f107 030c 	add.w	r3, r7, #12
 80006a0:	4619      	mov	r1, r3
 80006a2:	4811      	ldr	r0, [pc, #68]	; (80006e8 <bspInit+0xd0>)
 80006a4:	f000 fc5a 	bl	8000f5c <HAL_GPIO_Init>

  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 80006a8:	2200      	movs	r2, #0
 80006aa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006ae:	480e      	ldr	r0, [pc, #56]	; (80006e8 <bspInit+0xd0>)
 80006b0:	f000 fdd8 	bl	8001264 <HAL_GPIO_WritePin>
	delay(100);
 80006b4:	2064      	movs	r0, #100	; 0x64
 80006b6:	f000 f819 	bl	80006ec <delay>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 80006ba:	2201      	movs	r2, #1
 80006bc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006c0:	4809      	ldr	r0, [pc, #36]	; (80006e8 <bspInit+0xd0>)
 80006c2:	f000 fdcf 	bl	8001264 <HAL_GPIO_WritePin>

	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006c6:	2300      	movs	r3, #0
 80006c8:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006ca:	f107 030c 	add.w	r3, r7, #12
 80006ce:	4619      	mov	r1, r3
 80006d0:	4805      	ldr	r0, [pc, #20]	; (80006e8 <bspInit+0xd0>)
 80006d2:	f000 fc43 	bl	8000f5c <HAL_GPIO_Init>

  MX_USB_DEVICE_Init();
 80006d6:	f005 fbb5 	bl	8005e44 <MX_USB_DEVICE_Init>

}
 80006da:	bf00      	nop
 80006dc:	3720      	adds	r7, #32
 80006de:	46bd      	mov	sp, r7
 80006e0:	bd80      	pop	{r7, pc}
 80006e2:	bf00      	nop
 80006e4:	40023800 	.word	0x40023800
 80006e8:	40020000 	.word	0x40020000

080006ec <delay>:
void delay(uint32_t ms)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b082      	sub	sp, #8
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	6078      	str	r0, [r7, #4]
  HAL_Delay(ms);
 80006f4:	6878      	ldr	r0, [r7, #4]
 80006f6:	f000 fafb 	bl	8000cf0 <HAL_Delay>
}
 80006fa:	bf00      	nop
 80006fc:	3708      	adds	r7, #8
 80006fe:	46bd      	mov	sp, r7
 8000700:	bd80      	pop	{r7, pc}

08000702 <millis>:
uint32_t millis(void)
{
 8000702:	b580      	push	{r7, lr}
 8000704:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8000706:	f000 fae7 	bl	8000cd8 <HAL_GetTick>
 800070a:	4603      	mov	r3, r0
}
 800070c:	4618      	mov	r0, r3
 800070e:	bd80      	pop	{r7, pc}

08000710 <SystemClock_Config>:




void SystemClock_Config(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b094      	sub	sp, #80	; 0x50
 8000714:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000716:	f107 0320 	add.w	r3, r7, #32
 800071a:	2230      	movs	r2, #48	; 0x30
 800071c:	2100      	movs	r1, #0
 800071e:	4618      	mov	r0, r3
 8000720:	f006 f9ec 	bl	8006afc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000724:	f107 030c 	add.w	r3, r7, #12
 8000728:	2200      	movs	r2, #0
 800072a:	601a      	str	r2, [r3, #0]
 800072c:	605a      	str	r2, [r3, #4]
 800072e:	609a      	str	r2, [r3, #8]
 8000730:	60da      	str	r2, [r3, #12]
 8000732:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000734:	2300      	movs	r3, #0
 8000736:	60bb      	str	r3, [r7, #8]
 8000738:	4b27      	ldr	r3, [pc, #156]	; (80007d8 <SystemClock_Config+0xc8>)
 800073a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800073c:	4a26      	ldr	r2, [pc, #152]	; (80007d8 <SystemClock_Config+0xc8>)
 800073e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000742:	6413      	str	r3, [r2, #64]	; 0x40
 8000744:	4b24      	ldr	r3, [pc, #144]	; (80007d8 <SystemClock_Config+0xc8>)
 8000746:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000748:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800074c:	60bb      	str	r3, [r7, #8]
 800074e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000750:	2300      	movs	r3, #0
 8000752:	607b      	str	r3, [r7, #4]
 8000754:	4b21      	ldr	r3, [pc, #132]	; (80007dc <SystemClock_Config+0xcc>)
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	4a20      	ldr	r2, [pc, #128]	; (80007dc <SystemClock_Config+0xcc>)
 800075a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800075e:	6013      	str	r3, [r2, #0]
 8000760:	4b1e      	ldr	r3, [pc, #120]	; (80007dc <SystemClock_Config+0xcc>)
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000768:	607b      	str	r3, [r7, #4]
 800076a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800076c:	2301      	movs	r3, #1
 800076e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000770:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000774:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000776:	2302      	movs	r3, #2
 8000778:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800077a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800077e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000780:	2319      	movs	r3, #25
 8000782:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000784:	23c0      	movs	r3, #192	; 0xc0
 8000786:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000788:	2302      	movs	r3, #2
 800078a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800078c:	2304      	movs	r3, #4
 800078e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000790:	f107 0320 	add.w	r3, r7, #32
 8000794:	4618      	mov	r0, r3
 8000796:	f001 ff1b 	bl	80025d0 <HAL_RCC_OscConfig>
 800079a:	4603      	mov	r3, r0
 800079c:	2b00      	cmp	r3, #0
 800079e:	d001      	beq.n	80007a4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80007a0:	f000 f81e 	bl	80007e0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007a4:	230f      	movs	r3, #15
 80007a6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007a8:	2302      	movs	r3, #2
 80007aa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007ac:	2300      	movs	r3, #0
 80007ae:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007b4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007b6:	2300      	movs	r3, #0
 80007b8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80007ba:	f107 030c 	add.w	r3, r7, #12
 80007be:	2103      	movs	r1, #3
 80007c0:	4618      	mov	r0, r3
 80007c2:	f002 f97d 	bl	8002ac0 <HAL_RCC_ClockConfig>
 80007c6:	4603      	mov	r3, r0
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d001      	beq.n	80007d0 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80007cc:	f000 f808 	bl	80007e0 <Error_Handler>
  }
}
 80007d0:	bf00      	nop
 80007d2:	3750      	adds	r7, #80	; 0x50
 80007d4:	46bd      	mov	sp, r7
 80007d6:	bd80      	pop	{r7, pc}
 80007d8:	40023800 	.word	0x40023800
 80007dc:	40007000 	.word	0x40007000

080007e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007e0:	b480      	push	{r7}
 80007e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007e4:	b672      	cpsid	i
}
 80007e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007e8:	e7fe      	b.n	80007e8 <Error_Handler+0x8>
	...

080007ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007ec:	b480      	push	{r7}
 80007ee:	b083      	sub	sp, #12
 80007f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007f2:	2300      	movs	r3, #0
 80007f4:	607b      	str	r3, [r7, #4]
 80007f6:	4b10      	ldr	r3, [pc, #64]	; (8000838 <HAL_MspInit+0x4c>)
 80007f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007fa:	4a0f      	ldr	r2, [pc, #60]	; (8000838 <HAL_MspInit+0x4c>)
 80007fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000800:	6453      	str	r3, [r2, #68]	; 0x44
 8000802:	4b0d      	ldr	r3, [pc, #52]	; (8000838 <HAL_MspInit+0x4c>)
 8000804:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000806:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800080a:	607b      	str	r3, [r7, #4]
 800080c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800080e:	2300      	movs	r3, #0
 8000810:	603b      	str	r3, [r7, #0]
 8000812:	4b09      	ldr	r3, [pc, #36]	; (8000838 <HAL_MspInit+0x4c>)
 8000814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000816:	4a08      	ldr	r2, [pc, #32]	; (8000838 <HAL_MspInit+0x4c>)
 8000818:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800081c:	6413      	str	r3, [r2, #64]	; 0x40
 800081e:	4b06      	ldr	r3, [pc, #24]	; (8000838 <HAL_MspInit+0x4c>)
 8000820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000822:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000826:	603b      	str	r3, [r7, #0]
 8000828:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800082a:	bf00      	nop
 800082c:	370c      	adds	r7, #12
 800082e:	46bd      	mov	sp, r7
 8000830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000834:	4770      	bx	lr
 8000836:	bf00      	nop
 8000838:	40023800 	.word	0x40023800

0800083c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800083c:	b480      	push	{r7}
 800083e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000840:	e7fe      	b.n	8000840 <NMI_Handler+0x4>

08000842 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000842:	b480      	push	{r7}
 8000844:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000846:	e7fe      	b.n	8000846 <HardFault_Handler+0x4>

08000848 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000848:	b480      	push	{r7}
 800084a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800084c:	e7fe      	b.n	800084c <MemManage_Handler+0x4>

0800084e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800084e:	b480      	push	{r7}
 8000850:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000852:	e7fe      	b.n	8000852 <BusFault_Handler+0x4>

08000854 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000854:	b480      	push	{r7}
 8000856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000858:	e7fe      	b.n	8000858 <UsageFault_Handler+0x4>

0800085a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800085a:	b480      	push	{r7}
 800085c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800085e:	bf00      	nop
 8000860:	46bd      	mov	sp, r7
 8000862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000866:	4770      	bx	lr

08000868 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000868:	b480      	push	{r7}
 800086a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800086c:	bf00      	nop
 800086e:	46bd      	mov	sp, r7
 8000870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000874:	4770      	bx	lr

08000876 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000876:	b480      	push	{r7}
 8000878:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800087a:	bf00      	nop
 800087c:	46bd      	mov	sp, r7
 800087e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000882:	4770      	bx	lr

08000884 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000888:	f000 fa12 	bl	8000cb0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800088c:	bf00      	nop
 800088e:	bd80      	pop	{r7, pc}

08000890 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000894:	4802      	ldr	r0, [pc, #8]	; (80008a0 <OTG_FS_IRQHandler+0x10>)
 8000896:	f000 fe68 	bl	800156a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800089a:	bf00      	nop
 800089c:	bd80      	pop	{r7, pc}
 800089e:	bf00      	nop
 80008a0:	20001118 	.word	0x20001118

080008a4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b086      	sub	sp, #24
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80008ac:	4a14      	ldr	r2, [pc, #80]	; (8000900 <_sbrk+0x5c>)
 80008ae:	4b15      	ldr	r3, [pc, #84]	; (8000904 <_sbrk+0x60>)
 80008b0:	1ad3      	subs	r3, r2, r3
 80008b2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80008b4:	697b      	ldr	r3, [r7, #20]
 80008b6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80008b8:	4b13      	ldr	r3, [pc, #76]	; (8000908 <_sbrk+0x64>)
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d102      	bne.n	80008c6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80008c0:	4b11      	ldr	r3, [pc, #68]	; (8000908 <_sbrk+0x64>)
 80008c2:	4a12      	ldr	r2, [pc, #72]	; (800090c <_sbrk+0x68>)
 80008c4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80008c6:	4b10      	ldr	r3, [pc, #64]	; (8000908 <_sbrk+0x64>)
 80008c8:	681a      	ldr	r2, [r3, #0]
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	4413      	add	r3, r2
 80008ce:	693a      	ldr	r2, [r7, #16]
 80008d0:	429a      	cmp	r2, r3
 80008d2:	d207      	bcs.n	80008e4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80008d4:	f006 f8e8 	bl	8006aa8 <__errno>
 80008d8:	4603      	mov	r3, r0
 80008da:	220c      	movs	r2, #12
 80008dc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80008de:	f04f 33ff 	mov.w	r3, #4294967295
 80008e2:	e009      	b.n	80008f8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80008e4:	4b08      	ldr	r3, [pc, #32]	; (8000908 <_sbrk+0x64>)
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80008ea:	4b07      	ldr	r3, [pc, #28]	; (8000908 <_sbrk+0x64>)
 80008ec:	681a      	ldr	r2, [r3, #0]
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	4413      	add	r3, r2
 80008f2:	4a05      	ldr	r2, [pc, #20]	; (8000908 <_sbrk+0x64>)
 80008f4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80008f6:	68fb      	ldr	r3, [r7, #12]
}
 80008f8:	4618      	mov	r0, r3
 80008fa:	3718      	adds	r7, #24
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bd80      	pop	{r7, pc}
 8000900:	20020000 	.word	0x20020000
 8000904:	00000400 	.word	0x00000400
 8000908:	20000230 	.word	0x20000230
 800090c:	20001750 	.word	0x20001750

08000910 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000910:	b480      	push	{r7}
 8000912:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000914:	4b06      	ldr	r3, [pc, #24]	; (8000930 <SystemInit+0x20>)
 8000916:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800091a:	4a05      	ldr	r2, [pc, #20]	; (8000930 <SystemInit+0x20>)
 800091c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000920:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000924:	bf00      	nop
 8000926:	46bd      	mov	sp, r7
 8000928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092c:	4770      	bx	lr
 800092e:	bf00      	nop
 8000930:	e000ed00 	.word	0xe000ed00

08000934 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000934:	f8df d034 	ldr.w	sp, [pc, #52]	; 800096c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000938:	480d      	ldr	r0, [pc, #52]	; (8000970 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800093a:	490e      	ldr	r1, [pc, #56]	; (8000974 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800093c:	4a0e      	ldr	r2, [pc, #56]	; (8000978 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800093e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000940:	e002      	b.n	8000948 <LoopCopyDataInit>

08000942 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000942:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000944:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000946:	3304      	adds	r3, #4

08000948 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000948:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800094a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800094c:	d3f9      	bcc.n	8000942 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800094e:	4a0b      	ldr	r2, [pc, #44]	; (800097c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000950:	4c0b      	ldr	r4, [pc, #44]	; (8000980 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000952:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000954:	e001      	b.n	800095a <LoopFillZerobss>

08000956 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000956:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000958:	3204      	adds	r2, #4

0800095a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800095a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800095c:	d3fb      	bcc.n	8000956 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800095e:	f7ff ffd7 	bl	8000910 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000962:	f006 f8a7 	bl	8006ab4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000966:	f006 f893 	bl	8006a90 <main>
  bx  lr    
 800096a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800096c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000970:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000974:	20000214 	.word	0x20000214
  ldr r2, =_sidata
 8000978:	08007500 	.word	0x08007500
  ldr r2, =_sbss
 800097c:	20000214 	.word	0x20000214
  ldr r4, =_ebss
 8000980:	20001750 	.word	0x20001750

08000984 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000984:	e7fe      	b.n	8000984 <ADC_IRQHandler>
	...

08000988 <ledInit>:
{
	{GPIOC, GPIO_PIN_13, GPIO_PIN_SET, GPIO_PIN_RESET}
};

bool ledInit(void)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b088      	sub	sp, #32
 800098c:	af00      	add	r7, sp, #0
	bool ret = true;
 800098e:	2301      	movs	r3, #1
 8000990:	76fb      	strb	r3, [r7, #27]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000992:	1d3b      	adds	r3, r7, #4
 8000994:	2200      	movs	r2, #0
 8000996:	601a      	str	r2, [r3, #0]
 8000998:	605a      	str	r2, [r3, #4]
 800099a:	609a      	str	r2, [r3, #8]
 800099c:	60da      	str	r2, [r3, #12]
 800099e:	611a      	str	r2, [r3, #16]

	__HAL_RCC_GPIOA_CLK_ENABLE();
 80009a0:	2300      	movs	r3, #0
 80009a2:	603b      	str	r3, [r7, #0]
 80009a4:	4b1d      	ldr	r3, [pc, #116]	; (8000a1c <ledInit+0x94>)
 80009a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a8:	4a1c      	ldr	r2, [pc, #112]	; (8000a1c <ledInit+0x94>)
 80009aa:	f043 0301 	orr.w	r3, r3, #1
 80009ae:	6313      	str	r3, [r2, #48]	; 0x30
 80009b0:	4b1a      	ldr	r3, [pc, #104]	; (8000a1c <ledInit+0x94>)
 80009b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b4:	f003 0301 	and.w	r3, r3, #1
 80009b8:	603b      	str	r3, [r7, #0]
 80009ba:	683b      	ldr	r3, [r7, #0]

	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009bc:	2301      	movs	r3, #1
 80009be:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c0:	2300      	movs	r3, #0
 80009c2:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009c4:	2300      	movs	r3, #0
 80009c6:	613b      	str	r3, [r7, #16]

	for(int i = 0; i < LED_MAX_CHANNEL; i++)
 80009c8:	2300      	movs	r3, #0
 80009ca:	61fb      	str	r3, [r7, #28]
 80009cc:	e01e      	b.n	8000a0c <ledInit+0x84>
	{
		ledOff(i);
 80009ce:	69fb      	ldr	r3, [r7, #28]
 80009d0:	b2db      	uxtb	r3, r3
 80009d2:	4618      	mov	r0, r3
 80009d4:	f000 f826 	bl	8000a24 <ledOff>
		GPIO_InitStruct.Pin = led_tbl[i].pin;
 80009d8:	4911      	ldr	r1, [pc, #68]	; (8000a20 <ledInit+0x98>)
 80009da:	69fa      	ldr	r2, [r7, #28]
 80009dc:	4613      	mov	r3, r2
 80009de:	005b      	lsls	r3, r3, #1
 80009e0:	4413      	add	r3, r2
 80009e2:	009b      	lsls	r3, r3, #2
 80009e4:	440b      	add	r3, r1
 80009e6:	3304      	adds	r3, #4
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	607b      	str	r3, [r7, #4]
		HAL_GPIO_Init(led_tbl[i].port, &GPIO_InitStruct);
 80009ec:	490c      	ldr	r1, [pc, #48]	; (8000a20 <ledInit+0x98>)
 80009ee:	69fa      	ldr	r2, [r7, #28]
 80009f0:	4613      	mov	r3, r2
 80009f2:	005b      	lsls	r3, r3, #1
 80009f4:	4413      	add	r3, r2
 80009f6:	009b      	lsls	r3, r3, #2
 80009f8:	440b      	add	r3, r1
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	1d3a      	adds	r2, r7, #4
 80009fe:	4611      	mov	r1, r2
 8000a00:	4618      	mov	r0, r3
 8000a02:	f000 faab 	bl	8000f5c <HAL_GPIO_Init>
	for(int i = 0; i < LED_MAX_CHANNEL; i++)
 8000a06:	69fb      	ldr	r3, [r7, #28]
 8000a08:	3301      	adds	r3, #1
 8000a0a:	61fb      	str	r3, [r7, #28]
 8000a0c:	69fb      	ldr	r3, [r7, #28]
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	dddd      	ble.n	80009ce <ledInit+0x46>
	}
	return ret;
 8000a12:	7efb      	ldrb	r3, [r7, #27]
}
 8000a14:	4618      	mov	r0, r3
 8000a16:	3720      	adds	r7, #32
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	bd80      	pop	{r7, pc}
 8000a1c:	40023800 	.word	0x40023800
 8000a20:	20000004 	.word	0x20000004

08000a24 <ledOff>:
void ledOn(uint8_t ch)
{
	HAL_GPIO_WritePin(led_tbl[ch].port, led_tbl[ch].pin, led_tbl[ch].on_state);
}
void ledOff(uint8_t ch)
{
 8000a24:	b590      	push	{r4, r7, lr}
 8000a26:	b083      	sub	sp, #12
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(led_tbl[ch].port, led_tbl[ch].pin, led_tbl[ch].off_state);
 8000a2e:	79fa      	ldrb	r2, [r7, #7]
 8000a30:	4910      	ldr	r1, [pc, #64]	; (8000a74 <ledOff+0x50>)
 8000a32:	4613      	mov	r3, r2
 8000a34:	005b      	lsls	r3, r3, #1
 8000a36:	4413      	add	r3, r2
 8000a38:	009b      	lsls	r3, r3, #2
 8000a3a:	440b      	add	r3, r1
 8000a3c:	6818      	ldr	r0, [r3, #0]
 8000a3e:	79fa      	ldrb	r2, [r7, #7]
 8000a40:	490c      	ldr	r1, [pc, #48]	; (8000a74 <ledOff+0x50>)
 8000a42:	4613      	mov	r3, r2
 8000a44:	005b      	lsls	r3, r3, #1
 8000a46:	4413      	add	r3, r2
 8000a48:	009b      	lsls	r3, r3, #2
 8000a4a:	440b      	add	r3, r1
 8000a4c:	3304      	adds	r3, #4
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	b299      	uxth	r1, r3
 8000a52:	79fa      	ldrb	r2, [r7, #7]
 8000a54:	4c07      	ldr	r4, [pc, #28]	; (8000a74 <ledOff+0x50>)
 8000a56:	4613      	mov	r3, r2
 8000a58:	005b      	lsls	r3, r3, #1
 8000a5a:	4413      	add	r3, r2
 8000a5c:	009b      	lsls	r3, r3, #2
 8000a5e:	4423      	add	r3, r4
 8000a60:	3309      	adds	r3, #9
 8000a62:	781b      	ldrb	r3, [r3, #0]
 8000a64:	461a      	mov	r2, r3
 8000a66:	f000 fbfd 	bl	8001264 <HAL_GPIO_WritePin>
}
 8000a6a:	bf00      	nop
 8000a6c:	370c      	adds	r7, #12
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bd90      	pop	{r4, r7, pc}
 8000a72:	bf00      	nop
 8000a74:	20000004 	.word	0x20000004

08000a78 <ledToggle>:
void ledToggle(uint8_t ch)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b082      	sub	sp, #8
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	4603      	mov	r3, r0
 8000a80:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_TogglePin(led_tbl[ch].port, led_tbl[ch].pin);
 8000a82:	79fa      	ldrb	r2, [r7, #7]
 8000a84:	490b      	ldr	r1, [pc, #44]	; (8000ab4 <ledToggle+0x3c>)
 8000a86:	4613      	mov	r3, r2
 8000a88:	005b      	lsls	r3, r3, #1
 8000a8a:	4413      	add	r3, r2
 8000a8c:	009b      	lsls	r3, r3, #2
 8000a8e:	440b      	add	r3, r1
 8000a90:	6818      	ldr	r0, [r3, #0]
 8000a92:	79fa      	ldrb	r2, [r7, #7]
 8000a94:	4907      	ldr	r1, [pc, #28]	; (8000ab4 <ledToggle+0x3c>)
 8000a96:	4613      	mov	r3, r2
 8000a98:	005b      	lsls	r3, r3, #1
 8000a9a:	4413      	add	r3, r2
 8000a9c:	009b      	lsls	r3, r3, #2
 8000a9e:	440b      	add	r3, r1
 8000aa0:	3304      	adds	r3, #4
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	b29b      	uxth	r3, r3
 8000aa6:	4619      	mov	r1, r3
 8000aa8:	f000 fbf5 	bl	8001296 <HAL_GPIO_TogglePin>
}
 8000aac:	bf00      	nop
 8000aae:	3708      	adds	r7, #8
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bd80      	pop	{r7, pc}
 8000ab4:	20000004 	.word	0x20000004

08000ab8 <uartInit>:
#include "cdc.h"

static bool is_open[UART_MAX_CHANNEL];

bool uartInit(void)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	b083      	sub	sp, #12
 8000abc:	af00      	add	r7, sp, #0
	for(int i = 0; i < UART_MAX_CHANNEL; i++)
 8000abe:	2300      	movs	r3, #0
 8000ac0:	607b      	str	r3, [r7, #4]
 8000ac2:	e007      	b.n	8000ad4 <uartInit+0x1c>
	{
		is_open[i] = false;
 8000ac4:	4a08      	ldr	r2, [pc, #32]	; (8000ae8 <uartInit+0x30>)
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	4413      	add	r3, r2
 8000aca:	2200      	movs	r2, #0
 8000acc:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < UART_MAX_CHANNEL; i++)
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	3301      	adds	r3, #1
 8000ad2:	607b      	str	r3, [r7, #4]
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	ddf4      	ble.n	8000ac4 <uartInit+0xc>
	}
	return false;
 8000ada:	2300      	movs	r3, #0
}
 8000adc:	4618      	mov	r0, r3
 8000ade:	370c      	adds	r7, #12
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae6:	4770      	bx	lr
 8000ae8:	20000234 	.word	0x20000234

08000aec <uartAvailable>:
	}

	return ret;
}
uint32_t uartAvailable(uint8_t ch)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b084      	sub	sp, #16
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	4603      	mov	r3, r0
 8000af4:	71fb      	strb	r3, [r7, #7]
	uint32_t ret = 0;
 8000af6:	2300      	movs	r3, #0
 8000af8:	60fb      	str	r3, [r7, #12]

	switch(ch)
 8000afa:	79fb      	ldrb	r3, [r7, #7]
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d103      	bne.n	8000b08 <uartAvailable+0x1c>
	{
		case _DEF_UART1: // 첫번째 채널 uart -> 1. cdc 추
			ret = cdcAvailable();
 8000b00:	f005 f9d0 	bl	8005ea4 <cdcAvailable>
 8000b04:	60f8      	str	r0, [r7, #12]
			break;
 8000b06:	bf00      	nop
	}

	return ret;
 8000b08:	68fb      	ldr	r3, [r7, #12]
}
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	3710      	adds	r7, #16
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bd80      	pop	{r7, pc}

08000b12 <uartRead>:
uint8_t uartRead(uint8_t ch)
{
 8000b12:	b580      	push	{r7, lr}
 8000b14:	b084      	sub	sp, #16
 8000b16:	af00      	add	r7, sp, #0
 8000b18:	4603      	mov	r3, r0
 8000b1a:	71fb      	strb	r3, [r7, #7]
	uint8_t ret;

	switch(ch)
 8000b1c:	79fb      	ldrb	r3, [r7, #7]
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d104      	bne.n	8000b2c <uartRead+0x1a>
	{
		case _DEF_UART1:
			ret = cdcRead();
 8000b22:	f005 f9dd 	bl	8005ee0 <cdcRead>
 8000b26:	4603      	mov	r3, r0
 8000b28:	73fb      	strb	r3, [r7, #15]
			break;
 8000b2a:	bf00      	nop
	}

	return ret;
 8000b2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b2e:	4618      	mov	r0, r3
 8000b30:	3710      	adds	r7, #16
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bd80      	pop	{r7, pc}

08000b36 <uartWrite>:
uint32_t uartWrite(uint8_t ch, uint8_t *pData, uint32_t length)
{
 8000b36:	b580      	push	{r7, lr}
 8000b38:	b086      	sub	sp, #24
 8000b3a:	af00      	add	r7, sp, #0
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	60b9      	str	r1, [r7, #8]
 8000b40:	607a      	str	r2, [r7, #4]
 8000b42:	73fb      	strb	r3, [r7, #15]
	uint32_t ret;

	switch(ch)
 8000b44:	7bfb      	ldrb	r3, [r7, #15]
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d105      	bne.n	8000b56 <uartWrite+0x20>
		{
			case _DEF_UART1:
				ret = cdcWrite(pData, length);
 8000b4a:	6879      	ldr	r1, [r7, #4]
 8000b4c:	68b8      	ldr	r0, [r7, #8]
 8000b4e:	f005 fa1d 	bl	8005f8c <cdcWrite>
 8000b52:	6178      	str	r0, [r7, #20]
				break;
 8000b54:	bf00      	nop
		}

	return ret;
 8000b56:	697b      	ldr	r3, [r7, #20]
}
 8000b58:	4618      	mov	r0, r3
 8000b5a:	3718      	adds	r7, #24
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	bd80      	pop	{r7, pc}

08000b60 <uartPrint>:
/*
 * 복습할 것 가변인자...*/
uint32_t uartPrint(uint8_t ch, char* fmt, ...)
{
 8000b60:	b40e      	push	{r1, r2, r3}
 8000b62:	b580      	push	{r7, lr}
 8000b64:	b0c7      	sub	sp, #284	; 0x11c
 8000b66:	af00      	add	r7, sp, #0
 8000b68:	4602      	mov	r2, r0
 8000b6a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000b6e:	f2a3 1311 	subw	r3, r3, #273	; 0x111
 8000b72:	701a      	strb	r2, [r3, #0]
	va_list args;
	int len;
	uint32_t ret;


	va_start(args, fmt); 									// 가변인자 처리 시작
 8000b74:	f507 7294 	add.w	r2, r7, #296	; 0x128
 8000b78:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000b7c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000b80:	601a      	str	r2, [r3, #0]
	len = vsnprintf(buf, 256, fmt, args); //-> 버퍼에 해당 내용을 write
 8000b82:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000b86:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000b8a:	f107 0010 	add.w	r0, r7, #16
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8000b94:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b98:	f005 ffe4 	bl	8006b64 <vsniprintf>
 8000b9c:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114

	ret = uartWrite(ch, (uint8_t *)buf, len);
 8000ba0:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8000ba4:	f107 0110 	add.w	r1, r7, #16
 8000ba8:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000bac:	f2a3 1311 	subw	r3, r3, #273	; 0x111
 8000bb0:	781b      	ldrb	r3, [r3, #0]
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	f7ff ffbf 	bl	8000b36 <uartWrite>
 8000bb8:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

	va_end(args);

	return ret;
 8000bbc:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
}
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	f507 778e 	add.w	r7, r7, #284	; 0x11c
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000bcc:	b003      	add	sp, #12
 8000bce:	4770      	bx	lr

08000bd0 <uartGetBaud>:
uint32_t uartGetBaud(uint8_t ch)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b084      	sub	sp, #16
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	71fb      	strb	r3, [r7, #7]
	//bridge mode make, real uart need to know baudrate
	uint32_t ret = 0;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	60fb      	str	r3, [r7, #12]
	switch(ch)
 8000bde:	79fb      	ldrb	r3, [r7, #7]
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d103      	bne.n	8000bec <uartGetBaud+0x1c>
	{
		case _DEF_UART1:
			return cdcGetBaud();
 8000be4:	f005 f9fa 	bl	8005fdc <cdcGetBaud>
 8000be8:	4603      	mov	r3, r0
 8000bea:	e000      	b.n	8000bee <uartGetBaud+0x1e>
			break;
	}
	return ret;
 8000bec:	68fb      	ldr	r3, [r7, #12]
}
 8000bee:	4618      	mov	r0, r3
 8000bf0:	3710      	adds	r7, #16
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}

08000bf6 <hwInit>:
 */

#include "hw.h"

void hwInit()
{
 8000bf6:	b580      	push	{r7, lr}
 8000bf8:	af00      	add	r7, sp, #0
  bspInit();
 8000bfa:	f7ff fd0d 	bl	8000618 <bspInit>
  ledInit();
 8000bfe:	f7ff fec3 	bl	8000988 <ledInit>
  uartInit();
 8000c02:	f7ff ff59 	bl	8000ab8 <uartInit>
}
 8000c06:	bf00      	nop
 8000c08:	bd80      	pop	{r7, pc}
	...

08000c0c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c10:	4b0e      	ldr	r3, [pc, #56]	; (8000c4c <HAL_Init+0x40>)
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	4a0d      	ldr	r2, [pc, #52]	; (8000c4c <HAL_Init+0x40>)
 8000c16:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c1a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c1c:	4b0b      	ldr	r3, [pc, #44]	; (8000c4c <HAL_Init+0x40>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	4a0a      	ldr	r2, [pc, #40]	; (8000c4c <HAL_Init+0x40>)
 8000c22:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c26:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c28:	4b08      	ldr	r3, [pc, #32]	; (8000c4c <HAL_Init+0x40>)
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	4a07      	ldr	r2, [pc, #28]	; (8000c4c <HAL_Init+0x40>)
 8000c2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c32:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c34:	2003      	movs	r0, #3
 8000c36:	f000 f94f 	bl	8000ed8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c3a:	200f      	movs	r0, #15
 8000c3c:	f000 f808 	bl	8000c50 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c40:	f7ff fdd4 	bl	80007ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c44:	2300      	movs	r3, #0
}
 8000c46:	4618      	mov	r0, r3
 8000c48:	bd80      	pop	{r7, pc}
 8000c4a:	bf00      	nop
 8000c4c:	40023c00 	.word	0x40023c00

08000c50 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b082      	sub	sp, #8
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c58:	4b12      	ldr	r3, [pc, #72]	; (8000ca4 <HAL_InitTick+0x54>)
 8000c5a:	681a      	ldr	r2, [r3, #0]
 8000c5c:	4b12      	ldr	r3, [pc, #72]	; (8000ca8 <HAL_InitTick+0x58>)
 8000c5e:	781b      	ldrb	r3, [r3, #0]
 8000c60:	4619      	mov	r1, r3
 8000c62:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c66:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c6e:	4618      	mov	r0, r3
 8000c70:	f000 f967 	bl	8000f42 <HAL_SYSTICK_Config>
 8000c74:	4603      	mov	r3, r0
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d001      	beq.n	8000c7e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c7a:	2301      	movs	r3, #1
 8000c7c:	e00e      	b.n	8000c9c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	2b0f      	cmp	r3, #15
 8000c82:	d80a      	bhi.n	8000c9a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c84:	2200      	movs	r2, #0
 8000c86:	6879      	ldr	r1, [r7, #4]
 8000c88:	f04f 30ff 	mov.w	r0, #4294967295
 8000c8c:	f000 f92f 	bl	8000eee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c90:	4a06      	ldr	r2, [pc, #24]	; (8000cac <HAL_InitTick+0x5c>)
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c96:	2300      	movs	r3, #0
 8000c98:	e000      	b.n	8000c9c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c9a:	2301      	movs	r3, #1
}
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	3708      	adds	r7, #8
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	bd80      	pop	{r7, pc}
 8000ca4:	20000000 	.word	0x20000000
 8000ca8:	2000002c 	.word	0x2000002c
 8000cac:	20000028 	.word	0x20000028

08000cb0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cb4:	4b06      	ldr	r3, [pc, #24]	; (8000cd0 <HAL_IncTick+0x20>)
 8000cb6:	781b      	ldrb	r3, [r3, #0]
 8000cb8:	461a      	mov	r2, r3
 8000cba:	4b06      	ldr	r3, [pc, #24]	; (8000cd4 <HAL_IncTick+0x24>)
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	4413      	add	r3, r2
 8000cc0:	4a04      	ldr	r2, [pc, #16]	; (8000cd4 <HAL_IncTick+0x24>)
 8000cc2:	6013      	str	r3, [r2, #0]
}
 8000cc4:	bf00      	nop
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ccc:	4770      	bx	lr
 8000cce:	bf00      	nop
 8000cd0:	2000002c 	.word	0x2000002c
 8000cd4:	20000238 	.word	0x20000238

08000cd8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	af00      	add	r7, sp, #0
  return uwTick;
 8000cdc:	4b03      	ldr	r3, [pc, #12]	; (8000cec <HAL_GetTick+0x14>)
 8000cde:	681b      	ldr	r3, [r3, #0]
}
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce8:	4770      	bx	lr
 8000cea:	bf00      	nop
 8000cec:	20000238 	.word	0x20000238

08000cf0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b084      	sub	sp, #16
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000cf8:	f7ff ffee 	bl	8000cd8 <HAL_GetTick>
 8000cfc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d02:	68fb      	ldr	r3, [r7, #12]
 8000d04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d08:	d005      	beq.n	8000d16 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d0a:	4b0a      	ldr	r3, [pc, #40]	; (8000d34 <HAL_Delay+0x44>)
 8000d0c:	781b      	ldrb	r3, [r3, #0]
 8000d0e:	461a      	mov	r2, r3
 8000d10:	68fb      	ldr	r3, [r7, #12]
 8000d12:	4413      	add	r3, r2
 8000d14:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000d16:	bf00      	nop
 8000d18:	f7ff ffde 	bl	8000cd8 <HAL_GetTick>
 8000d1c:	4602      	mov	r2, r0
 8000d1e:	68bb      	ldr	r3, [r7, #8]
 8000d20:	1ad3      	subs	r3, r2, r3
 8000d22:	68fa      	ldr	r2, [r7, #12]
 8000d24:	429a      	cmp	r2, r3
 8000d26:	d8f7      	bhi.n	8000d18 <HAL_Delay+0x28>
  {
  }
}
 8000d28:	bf00      	nop
 8000d2a:	bf00      	nop
 8000d2c:	3710      	adds	r7, #16
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bd80      	pop	{r7, pc}
 8000d32:	bf00      	nop
 8000d34:	2000002c 	.word	0x2000002c

08000d38 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	b085      	sub	sp, #20
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	f003 0307 	and.w	r3, r3, #7
 8000d46:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d48:	4b0c      	ldr	r3, [pc, #48]	; (8000d7c <__NVIC_SetPriorityGrouping+0x44>)
 8000d4a:	68db      	ldr	r3, [r3, #12]
 8000d4c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d4e:	68ba      	ldr	r2, [r7, #8]
 8000d50:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d54:	4013      	ands	r3, r2
 8000d56:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d58:	68fb      	ldr	r3, [r7, #12]
 8000d5a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d5c:	68bb      	ldr	r3, [r7, #8]
 8000d5e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d60:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d68:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d6a:	4a04      	ldr	r2, [pc, #16]	; (8000d7c <__NVIC_SetPriorityGrouping+0x44>)
 8000d6c:	68bb      	ldr	r3, [r7, #8]
 8000d6e:	60d3      	str	r3, [r2, #12]
}
 8000d70:	bf00      	nop
 8000d72:	3714      	adds	r7, #20
 8000d74:	46bd      	mov	sp, r7
 8000d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7a:	4770      	bx	lr
 8000d7c:	e000ed00 	.word	0xe000ed00

08000d80 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d80:	b480      	push	{r7}
 8000d82:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d84:	4b04      	ldr	r3, [pc, #16]	; (8000d98 <__NVIC_GetPriorityGrouping+0x18>)
 8000d86:	68db      	ldr	r3, [r3, #12]
 8000d88:	0a1b      	lsrs	r3, r3, #8
 8000d8a:	f003 0307 	and.w	r3, r3, #7
}
 8000d8e:	4618      	mov	r0, r3
 8000d90:	46bd      	mov	sp, r7
 8000d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d96:	4770      	bx	lr
 8000d98:	e000ed00 	.word	0xe000ed00

08000d9c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	b083      	sub	sp, #12
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	4603      	mov	r3, r0
 8000da4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000da6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	db0b      	blt.n	8000dc6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000dae:	79fb      	ldrb	r3, [r7, #7]
 8000db0:	f003 021f 	and.w	r2, r3, #31
 8000db4:	4907      	ldr	r1, [pc, #28]	; (8000dd4 <__NVIC_EnableIRQ+0x38>)
 8000db6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dba:	095b      	lsrs	r3, r3, #5
 8000dbc:	2001      	movs	r0, #1
 8000dbe:	fa00 f202 	lsl.w	r2, r0, r2
 8000dc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000dc6:	bf00      	nop
 8000dc8:	370c      	adds	r7, #12
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd0:	4770      	bx	lr
 8000dd2:	bf00      	nop
 8000dd4:	e000e100 	.word	0xe000e100

08000dd8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	b083      	sub	sp, #12
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	4603      	mov	r3, r0
 8000de0:	6039      	str	r1, [r7, #0]
 8000de2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000de4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	db0a      	blt.n	8000e02 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dec:	683b      	ldr	r3, [r7, #0]
 8000dee:	b2da      	uxtb	r2, r3
 8000df0:	490c      	ldr	r1, [pc, #48]	; (8000e24 <__NVIC_SetPriority+0x4c>)
 8000df2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000df6:	0112      	lsls	r2, r2, #4
 8000df8:	b2d2      	uxtb	r2, r2
 8000dfa:	440b      	add	r3, r1
 8000dfc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e00:	e00a      	b.n	8000e18 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e02:	683b      	ldr	r3, [r7, #0]
 8000e04:	b2da      	uxtb	r2, r3
 8000e06:	4908      	ldr	r1, [pc, #32]	; (8000e28 <__NVIC_SetPriority+0x50>)
 8000e08:	79fb      	ldrb	r3, [r7, #7]
 8000e0a:	f003 030f 	and.w	r3, r3, #15
 8000e0e:	3b04      	subs	r3, #4
 8000e10:	0112      	lsls	r2, r2, #4
 8000e12:	b2d2      	uxtb	r2, r2
 8000e14:	440b      	add	r3, r1
 8000e16:	761a      	strb	r2, [r3, #24]
}
 8000e18:	bf00      	nop
 8000e1a:	370c      	adds	r7, #12
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e22:	4770      	bx	lr
 8000e24:	e000e100 	.word	0xe000e100
 8000e28:	e000ed00 	.word	0xe000ed00

08000e2c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	b089      	sub	sp, #36	; 0x24
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	60f8      	str	r0, [r7, #12]
 8000e34:	60b9      	str	r1, [r7, #8]
 8000e36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e38:	68fb      	ldr	r3, [r7, #12]
 8000e3a:	f003 0307 	and.w	r3, r3, #7
 8000e3e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e40:	69fb      	ldr	r3, [r7, #28]
 8000e42:	f1c3 0307 	rsb	r3, r3, #7
 8000e46:	2b04      	cmp	r3, #4
 8000e48:	bf28      	it	cs
 8000e4a:	2304      	movcs	r3, #4
 8000e4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e4e:	69fb      	ldr	r3, [r7, #28]
 8000e50:	3304      	adds	r3, #4
 8000e52:	2b06      	cmp	r3, #6
 8000e54:	d902      	bls.n	8000e5c <NVIC_EncodePriority+0x30>
 8000e56:	69fb      	ldr	r3, [r7, #28]
 8000e58:	3b03      	subs	r3, #3
 8000e5a:	e000      	b.n	8000e5e <NVIC_EncodePriority+0x32>
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e60:	f04f 32ff 	mov.w	r2, #4294967295
 8000e64:	69bb      	ldr	r3, [r7, #24]
 8000e66:	fa02 f303 	lsl.w	r3, r2, r3
 8000e6a:	43da      	mvns	r2, r3
 8000e6c:	68bb      	ldr	r3, [r7, #8]
 8000e6e:	401a      	ands	r2, r3
 8000e70:	697b      	ldr	r3, [r7, #20]
 8000e72:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e74:	f04f 31ff 	mov.w	r1, #4294967295
 8000e78:	697b      	ldr	r3, [r7, #20]
 8000e7a:	fa01 f303 	lsl.w	r3, r1, r3
 8000e7e:	43d9      	mvns	r1, r3
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e84:	4313      	orrs	r3, r2
         );
}
 8000e86:	4618      	mov	r0, r3
 8000e88:	3724      	adds	r7, #36	; 0x24
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e90:	4770      	bx	lr
	...

08000e94 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b082      	sub	sp, #8
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	3b01      	subs	r3, #1
 8000ea0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ea4:	d301      	bcc.n	8000eaa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ea6:	2301      	movs	r3, #1
 8000ea8:	e00f      	b.n	8000eca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000eaa:	4a0a      	ldr	r2, [pc, #40]	; (8000ed4 <SysTick_Config+0x40>)
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	3b01      	subs	r3, #1
 8000eb0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000eb2:	210f      	movs	r1, #15
 8000eb4:	f04f 30ff 	mov.w	r0, #4294967295
 8000eb8:	f7ff ff8e 	bl	8000dd8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ebc:	4b05      	ldr	r3, [pc, #20]	; (8000ed4 <SysTick_Config+0x40>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ec2:	4b04      	ldr	r3, [pc, #16]	; (8000ed4 <SysTick_Config+0x40>)
 8000ec4:	2207      	movs	r2, #7
 8000ec6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ec8:	2300      	movs	r3, #0
}
 8000eca:	4618      	mov	r0, r3
 8000ecc:	3708      	adds	r7, #8
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}
 8000ed2:	bf00      	nop
 8000ed4:	e000e010 	.word	0xe000e010

08000ed8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b082      	sub	sp, #8
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ee0:	6878      	ldr	r0, [r7, #4]
 8000ee2:	f7ff ff29 	bl	8000d38 <__NVIC_SetPriorityGrouping>
}
 8000ee6:	bf00      	nop
 8000ee8:	3708      	adds	r7, #8
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bd80      	pop	{r7, pc}

08000eee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000eee:	b580      	push	{r7, lr}
 8000ef0:	b086      	sub	sp, #24
 8000ef2:	af00      	add	r7, sp, #0
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	60b9      	str	r1, [r7, #8]
 8000ef8:	607a      	str	r2, [r7, #4]
 8000efa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000efc:	2300      	movs	r3, #0
 8000efe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f00:	f7ff ff3e 	bl	8000d80 <__NVIC_GetPriorityGrouping>
 8000f04:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f06:	687a      	ldr	r2, [r7, #4]
 8000f08:	68b9      	ldr	r1, [r7, #8]
 8000f0a:	6978      	ldr	r0, [r7, #20]
 8000f0c:	f7ff ff8e 	bl	8000e2c <NVIC_EncodePriority>
 8000f10:	4602      	mov	r2, r0
 8000f12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f16:	4611      	mov	r1, r2
 8000f18:	4618      	mov	r0, r3
 8000f1a:	f7ff ff5d 	bl	8000dd8 <__NVIC_SetPriority>
}
 8000f1e:	bf00      	nop
 8000f20:	3718      	adds	r7, #24
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}

08000f26 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f26:	b580      	push	{r7, lr}
 8000f28:	b082      	sub	sp, #8
 8000f2a:	af00      	add	r7, sp, #0
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f34:	4618      	mov	r0, r3
 8000f36:	f7ff ff31 	bl	8000d9c <__NVIC_EnableIRQ>
}
 8000f3a:	bf00      	nop
 8000f3c:	3708      	adds	r7, #8
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}

08000f42 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f42:	b580      	push	{r7, lr}
 8000f44:	b082      	sub	sp, #8
 8000f46:	af00      	add	r7, sp, #0
 8000f48:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f4a:	6878      	ldr	r0, [r7, #4]
 8000f4c:	f7ff ffa2 	bl	8000e94 <SysTick_Config>
 8000f50:	4603      	mov	r3, r0
}
 8000f52:	4618      	mov	r0, r3
 8000f54:	3708      	adds	r7, #8
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}
	...

08000f5c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	b089      	sub	sp, #36	; 0x24
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
 8000f64:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000f66:	2300      	movs	r3, #0
 8000f68:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f72:	2300      	movs	r3, #0
 8000f74:	61fb      	str	r3, [r7, #28]
 8000f76:	e159      	b.n	800122c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000f78:	2201      	movs	r2, #1
 8000f7a:	69fb      	ldr	r3, [r7, #28]
 8000f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f80:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f82:	683b      	ldr	r3, [r7, #0]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	697a      	ldr	r2, [r7, #20]
 8000f88:	4013      	ands	r3, r2
 8000f8a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f8c:	693a      	ldr	r2, [r7, #16]
 8000f8e:	697b      	ldr	r3, [r7, #20]
 8000f90:	429a      	cmp	r2, r3
 8000f92:	f040 8148 	bne.w	8001226 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f96:	683b      	ldr	r3, [r7, #0]
 8000f98:	685b      	ldr	r3, [r3, #4]
 8000f9a:	f003 0303 	and.w	r3, r3, #3
 8000f9e:	2b01      	cmp	r3, #1
 8000fa0:	d005      	beq.n	8000fae <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fa2:	683b      	ldr	r3, [r7, #0]
 8000fa4:	685b      	ldr	r3, [r3, #4]
 8000fa6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000faa:	2b02      	cmp	r3, #2
 8000fac:	d130      	bne.n	8001010 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	689b      	ldr	r3, [r3, #8]
 8000fb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000fb4:	69fb      	ldr	r3, [r7, #28]
 8000fb6:	005b      	lsls	r3, r3, #1
 8000fb8:	2203      	movs	r2, #3
 8000fba:	fa02 f303 	lsl.w	r3, r2, r3
 8000fbe:	43db      	mvns	r3, r3
 8000fc0:	69ba      	ldr	r2, [r7, #24]
 8000fc2:	4013      	ands	r3, r2
 8000fc4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000fc6:	683b      	ldr	r3, [r7, #0]
 8000fc8:	68da      	ldr	r2, [r3, #12]
 8000fca:	69fb      	ldr	r3, [r7, #28]
 8000fcc:	005b      	lsls	r3, r3, #1
 8000fce:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd2:	69ba      	ldr	r2, [r7, #24]
 8000fd4:	4313      	orrs	r3, r2
 8000fd6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	69ba      	ldr	r2, [r7, #24]
 8000fdc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	685b      	ldr	r3, [r3, #4]
 8000fe2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000fe4:	2201      	movs	r2, #1
 8000fe6:	69fb      	ldr	r3, [r7, #28]
 8000fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fec:	43db      	mvns	r3, r3
 8000fee:	69ba      	ldr	r2, [r7, #24]
 8000ff0:	4013      	ands	r3, r2
 8000ff2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	685b      	ldr	r3, [r3, #4]
 8000ff8:	091b      	lsrs	r3, r3, #4
 8000ffa:	f003 0201 	and.w	r2, r3, #1
 8000ffe:	69fb      	ldr	r3, [r7, #28]
 8001000:	fa02 f303 	lsl.w	r3, r2, r3
 8001004:	69ba      	ldr	r2, [r7, #24]
 8001006:	4313      	orrs	r3, r2
 8001008:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	69ba      	ldr	r2, [r7, #24]
 800100e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001010:	683b      	ldr	r3, [r7, #0]
 8001012:	685b      	ldr	r3, [r3, #4]
 8001014:	f003 0303 	and.w	r3, r3, #3
 8001018:	2b03      	cmp	r3, #3
 800101a:	d017      	beq.n	800104c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	68db      	ldr	r3, [r3, #12]
 8001020:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001022:	69fb      	ldr	r3, [r7, #28]
 8001024:	005b      	lsls	r3, r3, #1
 8001026:	2203      	movs	r2, #3
 8001028:	fa02 f303 	lsl.w	r3, r2, r3
 800102c:	43db      	mvns	r3, r3
 800102e:	69ba      	ldr	r2, [r7, #24]
 8001030:	4013      	ands	r3, r2
 8001032:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	689a      	ldr	r2, [r3, #8]
 8001038:	69fb      	ldr	r3, [r7, #28]
 800103a:	005b      	lsls	r3, r3, #1
 800103c:	fa02 f303 	lsl.w	r3, r2, r3
 8001040:	69ba      	ldr	r2, [r7, #24]
 8001042:	4313      	orrs	r3, r2
 8001044:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	69ba      	ldr	r2, [r7, #24]
 800104a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	685b      	ldr	r3, [r3, #4]
 8001050:	f003 0303 	and.w	r3, r3, #3
 8001054:	2b02      	cmp	r3, #2
 8001056:	d123      	bne.n	80010a0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001058:	69fb      	ldr	r3, [r7, #28]
 800105a:	08da      	lsrs	r2, r3, #3
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	3208      	adds	r2, #8
 8001060:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001064:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001066:	69fb      	ldr	r3, [r7, #28]
 8001068:	f003 0307 	and.w	r3, r3, #7
 800106c:	009b      	lsls	r3, r3, #2
 800106e:	220f      	movs	r2, #15
 8001070:	fa02 f303 	lsl.w	r3, r2, r3
 8001074:	43db      	mvns	r3, r3
 8001076:	69ba      	ldr	r2, [r7, #24]
 8001078:	4013      	ands	r3, r2
 800107a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800107c:	683b      	ldr	r3, [r7, #0]
 800107e:	691a      	ldr	r2, [r3, #16]
 8001080:	69fb      	ldr	r3, [r7, #28]
 8001082:	f003 0307 	and.w	r3, r3, #7
 8001086:	009b      	lsls	r3, r3, #2
 8001088:	fa02 f303 	lsl.w	r3, r2, r3
 800108c:	69ba      	ldr	r2, [r7, #24]
 800108e:	4313      	orrs	r3, r2
 8001090:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001092:	69fb      	ldr	r3, [r7, #28]
 8001094:	08da      	lsrs	r2, r3, #3
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	3208      	adds	r2, #8
 800109a:	69b9      	ldr	r1, [r7, #24]
 800109c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80010a6:	69fb      	ldr	r3, [r7, #28]
 80010a8:	005b      	lsls	r3, r3, #1
 80010aa:	2203      	movs	r2, #3
 80010ac:	fa02 f303 	lsl.w	r3, r2, r3
 80010b0:	43db      	mvns	r3, r3
 80010b2:	69ba      	ldr	r2, [r7, #24]
 80010b4:	4013      	ands	r3, r2
 80010b6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	685b      	ldr	r3, [r3, #4]
 80010bc:	f003 0203 	and.w	r2, r3, #3
 80010c0:	69fb      	ldr	r3, [r7, #28]
 80010c2:	005b      	lsls	r3, r3, #1
 80010c4:	fa02 f303 	lsl.w	r3, r2, r3
 80010c8:	69ba      	ldr	r2, [r7, #24]
 80010ca:	4313      	orrs	r3, r2
 80010cc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	69ba      	ldr	r2, [r7, #24]
 80010d2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	685b      	ldr	r3, [r3, #4]
 80010d8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80010dc:	2b00      	cmp	r3, #0
 80010de:	f000 80a2 	beq.w	8001226 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010e2:	2300      	movs	r3, #0
 80010e4:	60fb      	str	r3, [r7, #12]
 80010e6:	4b57      	ldr	r3, [pc, #348]	; (8001244 <HAL_GPIO_Init+0x2e8>)
 80010e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010ea:	4a56      	ldr	r2, [pc, #344]	; (8001244 <HAL_GPIO_Init+0x2e8>)
 80010ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010f0:	6453      	str	r3, [r2, #68]	; 0x44
 80010f2:	4b54      	ldr	r3, [pc, #336]	; (8001244 <HAL_GPIO_Init+0x2e8>)
 80010f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010fa:	60fb      	str	r3, [r7, #12]
 80010fc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80010fe:	4a52      	ldr	r2, [pc, #328]	; (8001248 <HAL_GPIO_Init+0x2ec>)
 8001100:	69fb      	ldr	r3, [r7, #28]
 8001102:	089b      	lsrs	r3, r3, #2
 8001104:	3302      	adds	r3, #2
 8001106:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800110a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800110c:	69fb      	ldr	r3, [r7, #28]
 800110e:	f003 0303 	and.w	r3, r3, #3
 8001112:	009b      	lsls	r3, r3, #2
 8001114:	220f      	movs	r2, #15
 8001116:	fa02 f303 	lsl.w	r3, r2, r3
 800111a:	43db      	mvns	r3, r3
 800111c:	69ba      	ldr	r2, [r7, #24]
 800111e:	4013      	ands	r3, r2
 8001120:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	4a49      	ldr	r2, [pc, #292]	; (800124c <HAL_GPIO_Init+0x2f0>)
 8001126:	4293      	cmp	r3, r2
 8001128:	d019      	beq.n	800115e <HAL_GPIO_Init+0x202>
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	4a48      	ldr	r2, [pc, #288]	; (8001250 <HAL_GPIO_Init+0x2f4>)
 800112e:	4293      	cmp	r3, r2
 8001130:	d013      	beq.n	800115a <HAL_GPIO_Init+0x1fe>
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	4a47      	ldr	r2, [pc, #284]	; (8001254 <HAL_GPIO_Init+0x2f8>)
 8001136:	4293      	cmp	r3, r2
 8001138:	d00d      	beq.n	8001156 <HAL_GPIO_Init+0x1fa>
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	4a46      	ldr	r2, [pc, #280]	; (8001258 <HAL_GPIO_Init+0x2fc>)
 800113e:	4293      	cmp	r3, r2
 8001140:	d007      	beq.n	8001152 <HAL_GPIO_Init+0x1f6>
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	4a45      	ldr	r2, [pc, #276]	; (800125c <HAL_GPIO_Init+0x300>)
 8001146:	4293      	cmp	r3, r2
 8001148:	d101      	bne.n	800114e <HAL_GPIO_Init+0x1f2>
 800114a:	2304      	movs	r3, #4
 800114c:	e008      	b.n	8001160 <HAL_GPIO_Init+0x204>
 800114e:	2307      	movs	r3, #7
 8001150:	e006      	b.n	8001160 <HAL_GPIO_Init+0x204>
 8001152:	2303      	movs	r3, #3
 8001154:	e004      	b.n	8001160 <HAL_GPIO_Init+0x204>
 8001156:	2302      	movs	r3, #2
 8001158:	e002      	b.n	8001160 <HAL_GPIO_Init+0x204>
 800115a:	2301      	movs	r3, #1
 800115c:	e000      	b.n	8001160 <HAL_GPIO_Init+0x204>
 800115e:	2300      	movs	r3, #0
 8001160:	69fa      	ldr	r2, [r7, #28]
 8001162:	f002 0203 	and.w	r2, r2, #3
 8001166:	0092      	lsls	r2, r2, #2
 8001168:	4093      	lsls	r3, r2
 800116a:	69ba      	ldr	r2, [r7, #24]
 800116c:	4313      	orrs	r3, r2
 800116e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001170:	4935      	ldr	r1, [pc, #212]	; (8001248 <HAL_GPIO_Init+0x2ec>)
 8001172:	69fb      	ldr	r3, [r7, #28]
 8001174:	089b      	lsrs	r3, r3, #2
 8001176:	3302      	adds	r3, #2
 8001178:	69ba      	ldr	r2, [r7, #24]
 800117a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800117e:	4b38      	ldr	r3, [pc, #224]	; (8001260 <HAL_GPIO_Init+0x304>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001184:	693b      	ldr	r3, [r7, #16]
 8001186:	43db      	mvns	r3, r3
 8001188:	69ba      	ldr	r2, [r7, #24]
 800118a:	4013      	ands	r3, r2
 800118c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800118e:	683b      	ldr	r3, [r7, #0]
 8001190:	685b      	ldr	r3, [r3, #4]
 8001192:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001196:	2b00      	cmp	r3, #0
 8001198:	d003      	beq.n	80011a2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800119a:	69ba      	ldr	r2, [r7, #24]
 800119c:	693b      	ldr	r3, [r7, #16]
 800119e:	4313      	orrs	r3, r2
 80011a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80011a2:	4a2f      	ldr	r2, [pc, #188]	; (8001260 <HAL_GPIO_Init+0x304>)
 80011a4:	69bb      	ldr	r3, [r7, #24]
 80011a6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80011a8:	4b2d      	ldr	r3, [pc, #180]	; (8001260 <HAL_GPIO_Init+0x304>)
 80011aa:	685b      	ldr	r3, [r3, #4]
 80011ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011ae:	693b      	ldr	r3, [r7, #16]
 80011b0:	43db      	mvns	r3, r3
 80011b2:	69ba      	ldr	r2, [r7, #24]
 80011b4:	4013      	ands	r3, r2
 80011b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	685b      	ldr	r3, [r3, #4]
 80011bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d003      	beq.n	80011cc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80011c4:	69ba      	ldr	r2, [r7, #24]
 80011c6:	693b      	ldr	r3, [r7, #16]
 80011c8:	4313      	orrs	r3, r2
 80011ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80011cc:	4a24      	ldr	r2, [pc, #144]	; (8001260 <HAL_GPIO_Init+0x304>)
 80011ce:	69bb      	ldr	r3, [r7, #24]
 80011d0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80011d2:	4b23      	ldr	r3, [pc, #140]	; (8001260 <HAL_GPIO_Init+0x304>)
 80011d4:	689b      	ldr	r3, [r3, #8]
 80011d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011d8:	693b      	ldr	r3, [r7, #16]
 80011da:	43db      	mvns	r3, r3
 80011dc:	69ba      	ldr	r2, [r7, #24]
 80011de:	4013      	ands	r3, r2
 80011e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80011e2:	683b      	ldr	r3, [r7, #0]
 80011e4:	685b      	ldr	r3, [r3, #4]
 80011e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d003      	beq.n	80011f6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80011ee:	69ba      	ldr	r2, [r7, #24]
 80011f0:	693b      	ldr	r3, [r7, #16]
 80011f2:	4313      	orrs	r3, r2
 80011f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80011f6:	4a1a      	ldr	r2, [pc, #104]	; (8001260 <HAL_GPIO_Init+0x304>)
 80011f8:	69bb      	ldr	r3, [r7, #24]
 80011fa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80011fc:	4b18      	ldr	r3, [pc, #96]	; (8001260 <HAL_GPIO_Init+0x304>)
 80011fe:	68db      	ldr	r3, [r3, #12]
 8001200:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001202:	693b      	ldr	r3, [r7, #16]
 8001204:	43db      	mvns	r3, r3
 8001206:	69ba      	ldr	r2, [r7, #24]
 8001208:	4013      	ands	r3, r2
 800120a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	685b      	ldr	r3, [r3, #4]
 8001210:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001214:	2b00      	cmp	r3, #0
 8001216:	d003      	beq.n	8001220 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001218:	69ba      	ldr	r2, [r7, #24]
 800121a:	693b      	ldr	r3, [r7, #16]
 800121c:	4313      	orrs	r3, r2
 800121e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001220:	4a0f      	ldr	r2, [pc, #60]	; (8001260 <HAL_GPIO_Init+0x304>)
 8001222:	69bb      	ldr	r3, [r7, #24]
 8001224:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001226:	69fb      	ldr	r3, [r7, #28]
 8001228:	3301      	adds	r3, #1
 800122a:	61fb      	str	r3, [r7, #28]
 800122c:	69fb      	ldr	r3, [r7, #28]
 800122e:	2b0f      	cmp	r3, #15
 8001230:	f67f aea2 	bls.w	8000f78 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001234:	bf00      	nop
 8001236:	bf00      	nop
 8001238:	3724      	adds	r7, #36	; 0x24
 800123a:	46bd      	mov	sp, r7
 800123c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001240:	4770      	bx	lr
 8001242:	bf00      	nop
 8001244:	40023800 	.word	0x40023800
 8001248:	40013800 	.word	0x40013800
 800124c:	40020000 	.word	0x40020000
 8001250:	40020400 	.word	0x40020400
 8001254:	40020800 	.word	0x40020800
 8001258:	40020c00 	.word	0x40020c00
 800125c:	40021000 	.word	0x40021000
 8001260:	40013c00 	.word	0x40013c00

08001264 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001264:	b480      	push	{r7}
 8001266:	b083      	sub	sp, #12
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
 800126c:	460b      	mov	r3, r1
 800126e:	807b      	strh	r3, [r7, #2]
 8001270:	4613      	mov	r3, r2
 8001272:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001274:	787b      	ldrb	r3, [r7, #1]
 8001276:	2b00      	cmp	r3, #0
 8001278:	d003      	beq.n	8001282 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800127a:	887a      	ldrh	r2, [r7, #2]
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001280:	e003      	b.n	800128a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001282:	887b      	ldrh	r3, [r7, #2]
 8001284:	041a      	lsls	r2, r3, #16
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	619a      	str	r2, [r3, #24]
}
 800128a:	bf00      	nop
 800128c:	370c      	adds	r7, #12
 800128e:	46bd      	mov	sp, r7
 8001290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001294:	4770      	bx	lr

08001296 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001296:	b480      	push	{r7}
 8001298:	b085      	sub	sp, #20
 800129a:	af00      	add	r7, sp, #0
 800129c:	6078      	str	r0, [r7, #4]
 800129e:	460b      	mov	r3, r1
 80012a0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	695b      	ldr	r3, [r3, #20]
 80012a6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80012a8:	887a      	ldrh	r2, [r7, #2]
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	4013      	ands	r3, r2
 80012ae:	041a      	lsls	r2, r3, #16
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	43d9      	mvns	r1, r3
 80012b4:	887b      	ldrh	r3, [r7, #2]
 80012b6:	400b      	ands	r3, r1
 80012b8:	431a      	orrs	r2, r3
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	619a      	str	r2, [r3, #24]
}
 80012be:	bf00      	nop
 80012c0:	3714      	adds	r7, #20
 80012c2:	46bd      	mov	sp, r7
 80012c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c8:	4770      	bx	lr

080012ca <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80012ca:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012cc:	b08f      	sub	sp, #60	; 0x3c
 80012ce:	af0a      	add	r7, sp, #40	; 0x28
 80012d0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d101      	bne.n	80012dc <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80012d8:	2301      	movs	r3, #1
 80012da:	e10f      	b.n	80014fc <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80012e8:	b2db      	uxtb	r3, r3
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d106      	bne.n	80012fc <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	2200      	movs	r2, #0
 80012f2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80012f6:	6878      	ldr	r0, [r7, #4]
 80012f8:	f005 f8c0 	bl	800647c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	2203      	movs	r2, #3
 8001300:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001304:	68bb      	ldr	r3, [r7, #8]
 8001306:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001308:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800130c:	2b00      	cmp	r3, #0
 800130e:	d102      	bne.n	8001316 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	2200      	movs	r2, #0
 8001314:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	4618      	mov	r0, r3
 800131c:	f001 fe9d 	bl	800305a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	603b      	str	r3, [r7, #0]
 8001326:	687e      	ldr	r6, [r7, #4]
 8001328:	466d      	mov	r5, sp
 800132a:	f106 0410 	add.w	r4, r6, #16
 800132e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001330:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001332:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001334:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001336:	e894 0003 	ldmia.w	r4, {r0, r1}
 800133a:	e885 0003 	stmia.w	r5, {r0, r1}
 800133e:	1d33      	adds	r3, r6, #4
 8001340:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001342:	6838      	ldr	r0, [r7, #0]
 8001344:	f001 fd74 	bl	8002e30 <USB_CoreInit>
 8001348:	4603      	mov	r3, r0
 800134a:	2b00      	cmp	r3, #0
 800134c:	d005      	beq.n	800135a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	2202      	movs	r2, #2
 8001352:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001356:	2301      	movs	r3, #1
 8001358:	e0d0      	b.n	80014fc <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	2100      	movs	r1, #0
 8001360:	4618      	mov	r0, r3
 8001362:	f001 fe8b 	bl	800307c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001366:	2300      	movs	r3, #0
 8001368:	73fb      	strb	r3, [r7, #15]
 800136a:	e04a      	b.n	8001402 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800136c:	7bfa      	ldrb	r2, [r7, #15]
 800136e:	6879      	ldr	r1, [r7, #4]
 8001370:	4613      	mov	r3, r2
 8001372:	00db      	lsls	r3, r3, #3
 8001374:	1a9b      	subs	r3, r3, r2
 8001376:	009b      	lsls	r3, r3, #2
 8001378:	440b      	add	r3, r1
 800137a:	333d      	adds	r3, #61	; 0x3d
 800137c:	2201      	movs	r2, #1
 800137e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001380:	7bfa      	ldrb	r2, [r7, #15]
 8001382:	6879      	ldr	r1, [r7, #4]
 8001384:	4613      	mov	r3, r2
 8001386:	00db      	lsls	r3, r3, #3
 8001388:	1a9b      	subs	r3, r3, r2
 800138a:	009b      	lsls	r3, r3, #2
 800138c:	440b      	add	r3, r1
 800138e:	333c      	adds	r3, #60	; 0x3c
 8001390:	7bfa      	ldrb	r2, [r7, #15]
 8001392:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001394:	7bfa      	ldrb	r2, [r7, #15]
 8001396:	7bfb      	ldrb	r3, [r7, #15]
 8001398:	b298      	uxth	r0, r3
 800139a:	6879      	ldr	r1, [r7, #4]
 800139c:	4613      	mov	r3, r2
 800139e:	00db      	lsls	r3, r3, #3
 80013a0:	1a9b      	subs	r3, r3, r2
 80013a2:	009b      	lsls	r3, r3, #2
 80013a4:	440b      	add	r3, r1
 80013a6:	3342      	adds	r3, #66	; 0x42
 80013a8:	4602      	mov	r2, r0
 80013aa:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80013ac:	7bfa      	ldrb	r2, [r7, #15]
 80013ae:	6879      	ldr	r1, [r7, #4]
 80013b0:	4613      	mov	r3, r2
 80013b2:	00db      	lsls	r3, r3, #3
 80013b4:	1a9b      	subs	r3, r3, r2
 80013b6:	009b      	lsls	r3, r3, #2
 80013b8:	440b      	add	r3, r1
 80013ba:	333f      	adds	r3, #63	; 0x3f
 80013bc:	2200      	movs	r2, #0
 80013be:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80013c0:	7bfa      	ldrb	r2, [r7, #15]
 80013c2:	6879      	ldr	r1, [r7, #4]
 80013c4:	4613      	mov	r3, r2
 80013c6:	00db      	lsls	r3, r3, #3
 80013c8:	1a9b      	subs	r3, r3, r2
 80013ca:	009b      	lsls	r3, r3, #2
 80013cc:	440b      	add	r3, r1
 80013ce:	3344      	adds	r3, #68	; 0x44
 80013d0:	2200      	movs	r2, #0
 80013d2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80013d4:	7bfa      	ldrb	r2, [r7, #15]
 80013d6:	6879      	ldr	r1, [r7, #4]
 80013d8:	4613      	mov	r3, r2
 80013da:	00db      	lsls	r3, r3, #3
 80013dc:	1a9b      	subs	r3, r3, r2
 80013de:	009b      	lsls	r3, r3, #2
 80013e0:	440b      	add	r3, r1
 80013e2:	3348      	adds	r3, #72	; 0x48
 80013e4:	2200      	movs	r2, #0
 80013e6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80013e8:	7bfa      	ldrb	r2, [r7, #15]
 80013ea:	6879      	ldr	r1, [r7, #4]
 80013ec:	4613      	mov	r3, r2
 80013ee:	00db      	lsls	r3, r3, #3
 80013f0:	1a9b      	subs	r3, r3, r2
 80013f2:	009b      	lsls	r3, r3, #2
 80013f4:	440b      	add	r3, r1
 80013f6:	3350      	adds	r3, #80	; 0x50
 80013f8:	2200      	movs	r2, #0
 80013fa:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80013fc:	7bfb      	ldrb	r3, [r7, #15]
 80013fe:	3301      	adds	r3, #1
 8001400:	73fb      	strb	r3, [r7, #15]
 8001402:	7bfa      	ldrb	r2, [r7, #15]
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	685b      	ldr	r3, [r3, #4]
 8001408:	429a      	cmp	r2, r3
 800140a:	d3af      	bcc.n	800136c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800140c:	2300      	movs	r3, #0
 800140e:	73fb      	strb	r3, [r7, #15]
 8001410:	e044      	b.n	800149c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001412:	7bfa      	ldrb	r2, [r7, #15]
 8001414:	6879      	ldr	r1, [r7, #4]
 8001416:	4613      	mov	r3, r2
 8001418:	00db      	lsls	r3, r3, #3
 800141a:	1a9b      	subs	r3, r3, r2
 800141c:	009b      	lsls	r3, r3, #2
 800141e:	440b      	add	r3, r1
 8001420:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8001424:	2200      	movs	r2, #0
 8001426:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001428:	7bfa      	ldrb	r2, [r7, #15]
 800142a:	6879      	ldr	r1, [r7, #4]
 800142c:	4613      	mov	r3, r2
 800142e:	00db      	lsls	r3, r3, #3
 8001430:	1a9b      	subs	r3, r3, r2
 8001432:	009b      	lsls	r3, r3, #2
 8001434:	440b      	add	r3, r1
 8001436:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800143a:	7bfa      	ldrb	r2, [r7, #15]
 800143c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800143e:	7bfa      	ldrb	r2, [r7, #15]
 8001440:	6879      	ldr	r1, [r7, #4]
 8001442:	4613      	mov	r3, r2
 8001444:	00db      	lsls	r3, r3, #3
 8001446:	1a9b      	subs	r3, r3, r2
 8001448:	009b      	lsls	r3, r3, #2
 800144a:	440b      	add	r3, r1
 800144c:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8001450:	2200      	movs	r2, #0
 8001452:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001454:	7bfa      	ldrb	r2, [r7, #15]
 8001456:	6879      	ldr	r1, [r7, #4]
 8001458:	4613      	mov	r3, r2
 800145a:	00db      	lsls	r3, r3, #3
 800145c:	1a9b      	subs	r3, r3, r2
 800145e:	009b      	lsls	r3, r3, #2
 8001460:	440b      	add	r3, r1
 8001462:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001466:	2200      	movs	r2, #0
 8001468:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800146a:	7bfa      	ldrb	r2, [r7, #15]
 800146c:	6879      	ldr	r1, [r7, #4]
 800146e:	4613      	mov	r3, r2
 8001470:	00db      	lsls	r3, r3, #3
 8001472:	1a9b      	subs	r3, r3, r2
 8001474:	009b      	lsls	r3, r3, #2
 8001476:	440b      	add	r3, r1
 8001478:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800147c:	2200      	movs	r2, #0
 800147e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001480:	7bfa      	ldrb	r2, [r7, #15]
 8001482:	6879      	ldr	r1, [r7, #4]
 8001484:	4613      	mov	r3, r2
 8001486:	00db      	lsls	r3, r3, #3
 8001488:	1a9b      	subs	r3, r3, r2
 800148a:	009b      	lsls	r3, r3, #2
 800148c:	440b      	add	r3, r1
 800148e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001492:	2200      	movs	r2, #0
 8001494:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001496:	7bfb      	ldrb	r3, [r7, #15]
 8001498:	3301      	adds	r3, #1
 800149a:	73fb      	strb	r3, [r7, #15]
 800149c:	7bfa      	ldrb	r2, [r7, #15]
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	685b      	ldr	r3, [r3, #4]
 80014a2:	429a      	cmp	r2, r3
 80014a4:	d3b5      	bcc.n	8001412 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	603b      	str	r3, [r7, #0]
 80014ac:	687e      	ldr	r6, [r7, #4]
 80014ae:	466d      	mov	r5, sp
 80014b0:	f106 0410 	add.w	r4, r6, #16
 80014b4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014b6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80014b8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014ba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80014bc:	e894 0003 	ldmia.w	r4, {r0, r1}
 80014c0:	e885 0003 	stmia.w	r5, {r0, r1}
 80014c4:	1d33      	adds	r3, r6, #4
 80014c6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80014c8:	6838      	ldr	r0, [r7, #0]
 80014ca:	f001 fe23 	bl	8003114 <USB_DevInit>
 80014ce:	4603      	mov	r3, r0
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d005      	beq.n	80014e0 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	2202      	movs	r2, #2
 80014d8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80014dc:	2301      	movs	r3, #1
 80014de:	e00d      	b.n	80014fc <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	2200      	movs	r2, #0
 80014e4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	2201      	movs	r2, #1
 80014ec:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	4618      	mov	r0, r3
 80014f6:	f002 fe9f 	bl	8004238 <USB_DevDisconnect>

  return HAL_OK;
 80014fa:	2300      	movs	r3, #0
}
 80014fc:	4618      	mov	r0, r3
 80014fe:	3714      	adds	r7, #20
 8001500:	46bd      	mov	sp, r7
 8001502:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001504 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b084      	sub	sp, #16
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001518:	2b01      	cmp	r3, #1
 800151a:	d101      	bne.n	8001520 <HAL_PCD_Start+0x1c>
 800151c:	2302      	movs	r3, #2
 800151e:	e020      	b.n	8001562 <HAL_PCD_Start+0x5e>
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	2201      	movs	r2, #1
 8001524:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800152c:	2b01      	cmp	r3, #1
 800152e:	d109      	bne.n	8001544 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001534:	2b01      	cmp	r3, #1
 8001536:	d005      	beq.n	8001544 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800153c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	4618      	mov	r0, r3
 800154a:	f001 fd75 	bl	8003038 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	4618      	mov	r0, r3
 8001554:	f002 fe4f 	bl	80041f6 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	2200      	movs	r2, #0
 800155c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001560:	2300      	movs	r3, #0
}
 8001562:	4618      	mov	r0, r3
 8001564:	3710      	adds	r7, #16
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}

0800156a <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800156a:	b590      	push	{r4, r7, lr}
 800156c:	b08d      	sub	sp, #52	; 0x34
 800156e:	af00      	add	r7, sp, #0
 8001570:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001578:	6a3b      	ldr	r3, [r7, #32]
 800157a:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	4618      	mov	r0, r3
 8001582:	f002 ff0d 	bl	80043a0 <USB_GetMode>
 8001586:	4603      	mov	r3, r0
 8001588:	2b00      	cmp	r3, #0
 800158a:	f040 839d 	bne.w	8001cc8 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	4618      	mov	r0, r3
 8001594:	f002 fe71 	bl	800427a <USB_ReadInterrupts>
 8001598:	4603      	mov	r3, r0
 800159a:	2b00      	cmp	r3, #0
 800159c:	f000 8393 	beq.w	8001cc6 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	4618      	mov	r0, r3
 80015a6:	f002 fe68 	bl	800427a <USB_ReadInterrupts>
 80015aa:	4603      	mov	r3, r0
 80015ac:	f003 0302 	and.w	r3, r3, #2
 80015b0:	2b02      	cmp	r3, #2
 80015b2:	d107      	bne.n	80015c4 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	695a      	ldr	r2, [r3, #20]
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f002 0202 	and.w	r2, r2, #2
 80015c2:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	4618      	mov	r0, r3
 80015ca:	f002 fe56 	bl	800427a <USB_ReadInterrupts>
 80015ce:	4603      	mov	r3, r0
 80015d0:	f003 0310 	and.w	r3, r3, #16
 80015d4:	2b10      	cmp	r3, #16
 80015d6:	d161      	bne.n	800169c <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	699a      	ldr	r2, [r3, #24]
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f022 0210 	bic.w	r2, r2, #16
 80015e6:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 80015e8:	6a3b      	ldr	r3, [r7, #32]
 80015ea:	6a1b      	ldr	r3, [r3, #32]
 80015ec:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 80015ee:	69bb      	ldr	r3, [r7, #24]
 80015f0:	f003 020f 	and.w	r2, r3, #15
 80015f4:	4613      	mov	r3, r2
 80015f6:	00db      	lsls	r3, r3, #3
 80015f8:	1a9b      	subs	r3, r3, r2
 80015fa:	009b      	lsls	r3, r3, #2
 80015fc:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001600:	687a      	ldr	r2, [r7, #4]
 8001602:	4413      	add	r3, r2
 8001604:	3304      	adds	r3, #4
 8001606:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001608:	69bb      	ldr	r3, [r7, #24]
 800160a:	0c5b      	lsrs	r3, r3, #17
 800160c:	f003 030f 	and.w	r3, r3, #15
 8001610:	2b02      	cmp	r3, #2
 8001612:	d124      	bne.n	800165e <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001614:	69ba      	ldr	r2, [r7, #24]
 8001616:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800161a:	4013      	ands	r3, r2
 800161c:	2b00      	cmp	r3, #0
 800161e:	d035      	beq.n	800168c <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001620:	697b      	ldr	r3, [r7, #20]
 8001622:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001624:	69bb      	ldr	r3, [r7, #24]
 8001626:	091b      	lsrs	r3, r3, #4
 8001628:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800162a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800162e:	b29b      	uxth	r3, r3
 8001630:	461a      	mov	r2, r3
 8001632:	6a38      	ldr	r0, [r7, #32]
 8001634:	f002 fc8d 	bl	8003f52 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001638:	697b      	ldr	r3, [r7, #20]
 800163a:	68da      	ldr	r2, [r3, #12]
 800163c:	69bb      	ldr	r3, [r7, #24]
 800163e:	091b      	lsrs	r3, r3, #4
 8001640:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001644:	441a      	add	r2, r3
 8001646:	697b      	ldr	r3, [r7, #20]
 8001648:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800164a:	697b      	ldr	r3, [r7, #20]
 800164c:	699a      	ldr	r2, [r3, #24]
 800164e:	69bb      	ldr	r3, [r7, #24]
 8001650:	091b      	lsrs	r3, r3, #4
 8001652:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001656:	441a      	add	r2, r3
 8001658:	697b      	ldr	r3, [r7, #20]
 800165a:	619a      	str	r2, [r3, #24]
 800165c:	e016      	b.n	800168c <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 800165e:	69bb      	ldr	r3, [r7, #24]
 8001660:	0c5b      	lsrs	r3, r3, #17
 8001662:	f003 030f 	and.w	r3, r3, #15
 8001666:	2b06      	cmp	r3, #6
 8001668:	d110      	bne.n	800168c <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001670:	2208      	movs	r2, #8
 8001672:	4619      	mov	r1, r3
 8001674:	6a38      	ldr	r0, [r7, #32]
 8001676:	f002 fc6c 	bl	8003f52 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800167a:	697b      	ldr	r3, [r7, #20]
 800167c:	699a      	ldr	r2, [r3, #24]
 800167e:	69bb      	ldr	r3, [r7, #24]
 8001680:	091b      	lsrs	r3, r3, #4
 8001682:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001686:	441a      	add	r2, r3
 8001688:	697b      	ldr	r3, [r7, #20]
 800168a:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	699a      	ldr	r2, [r3, #24]
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f042 0210 	orr.w	r2, r2, #16
 800169a:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	4618      	mov	r0, r3
 80016a2:	f002 fdea 	bl	800427a <USB_ReadInterrupts>
 80016a6:	4603      	mov	r3, r0
 80016a8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80016ac:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80016b0:	d16e      	bne.n	8001790 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 80016b2:	2300      	movs	r3, #0
 80016b4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	4618      	mov	r0, r3
 80016bc:	f002 fdf0 	bl	80042a0 <USB_ReadDevAllOutEpInterrupt>
 80016c0:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80016c2:	e062      	b.n	800178a <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 80016c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016c6:	f003 0301 	and.w	r3, r3, #1
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d057      	beq.n	800177e <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80016d4:	b2d2      	uxtb	r2, r2
 80016d6:	4611      	mov	r1, r2
 80016d8:	4618      	mov	r0, r3
 80016da:	f002 fe15 	bl	8004308 <USB_ReadDevOutEPInterrupt>
 80016de:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80016e0:	693b      	ldr	r3, [r7, #16]
 80016e2:	f003 0301 	and.w	r3, r3, #1
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d00c      	beq.n	8001704 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80016ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ec:	015a      	lsls	r2, r3, #5
 80016ee:	69fb      	ldr	r3, [r7, #28]
 80016f0:	4413      	add	r3, r2
 80016f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80016f6:	461a      	mov	r2, r3
 80016f8:	2301      	movs	r3, #1
 80016fa:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80016fc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80016fe:	6878      	ldr	r0, [r7, #4]
 8001700:	f000 fdb0 	bl	8002264 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001704:	693b      	ldr	r3, [r7, #16]
 8001706:	f003 0308 	and.w	r3, r3, #8
 800170a:	2b00      	cmp	r3, #0
 800170c:	d00c      	beq.n	8001728 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800170e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001710:	015a      	lsls	r2, r3, #5
 8001712:	69fb      	ldr	r3, [r7, #28]
 8001714:	4413      	add	r3, r2
 8001716:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800171a:	461a      	mov	r2, r3
 800171c:	2308      	movs	r3, #8
 800171e:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001720:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001722:	6878      	ldr	r0, [r7, #4]
 8001724:	f000 feaa 	bl	800247c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001728:	693b      	ldr	r3, [r7, #16]
 800172a:	f003 0310 	and.w	r3, r3, #16
 800172e:	2b00      	cmp	r3, #0
 8001730:	d008      	beq.n	8001744 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001734:	015a      	lsls	r2, r3, #5
 8001736:	69fb      	ldr	r3, [r7, #28]
 8001738:	4413      	add	r3, r2
 800173a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800173e:	461a      	mov	r2, r3
 8001740:	2310      	movs	r3, #16
 8001742:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001744:	693b      	ldr	r3, [r7, #16]
 8001746:	f003 0320 	and.w	r3, r3, #32
 800174a:	2b00      	cmp	r3, #0
 800174c:	d008      	beq.n	8001760 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800174e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001750:	015a      	lsls	r2, r3, #5
 8001752:	69fb      	ldr	r3, [r7, #28]
 8001754:	4413      	add	r3, r2
 8001756:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800175a:	461a      	mov	r2, r3
 800175c:	2320      	movs	r3, #32
 800175e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001760:	693b      	ldr	r3, [r7, #16]
 8001762:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001766:	2b00      	cmp	r3, #0
 8001768:	d009      	beq.n	800177e <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800176a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800176c:	015a      	lsls	r2, r3, #5
 800176e:	69fb      	ldr	r3, [r7, #28]
 8001770:	4413      	add	r3, r2
 8001772:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001776:	461a      	mov	r2, r3
 8001778:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800177c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800177e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001780:	3301      	adds	r3, #1
 8001782:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001784:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001786:	085b      	lsrs	r3, r3, #1
 8001788:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800178a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800178c:	2b00      	cmp	r3, #0
 800178e:	d199      	bne.n	80016c4 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	4618      	mov	r0, r3
 8001796:	f002 fd70 	bl	800427a <USB_ReadInterrupts>
 800179a:	4603      	mov	r3, r0
 800179c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80017a0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80017a4:	f040 80c0 	bne.w	8001928 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	4618      	mov	r0, r3
 80017ae:	f002 fd91 	bl	80042d4 <USB_ReadDevAllInEpInterrupt>
 80017b2:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80017b4:	2300      	movs	r3, #0
 80017b6:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80017b8:	e0b2      	b.n	8001920 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80017ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017bc:	f003 0301 	and.w	r3, r3, #1
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	f000 80a7 	beq.w	8001914 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80017cc:	b2d2      	uxtb	r2, r2
 80017ce:	4611      	mov	r1, r2
 80017d0:	4618      	mov	r0, r3
 80017d2:	f002 fdb7 	bl	8004344 <USB_ReadDevInEPInterrupt>
 80017d6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80017d8:	693b      	ldr	r3, [r7, #16]
 80017da:	f003 0301 	and.w	r3, r3, #1
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d057      	beq.n	8001892 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80017e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017e4:	f003 030f 	and.w	r3, r3, #15
 80017e8:	2201      	movs	r2, #1
 80017ea:	fa02 f303 	lsl.w	r3, r2, r3
 80017ee:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80017f0:	69fb      	ldr	r3, [r7, #28]
 80017f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80017f6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	43db      	mvns	r3, r3
 80017fc:	69f9      	ldr	r1, [r7, #28]
 80017fe:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001802:	4013      	ands	r3, r2
 8001804:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001808:	015a      	lsls	r2, r3, #5
 800180a:	69fb      	ldr	r3, [r7, #28]
 800180c:	4413      	add	r3, r2
 800180e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001812:	461a      	mov	r2, r3
 8001814:	2301      	movs	r3, #1
 8001816:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	691b      	ldr	r3, [r3, #16]
 800181c:	2b01      	cmp	r3, #1
 800181e:	d132      	bne.n	8001886 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001820:	6879      	ldr	r1, [r7, #4]
 8001822:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001824:	4613      	mov	r3, r2
 8001826:	00db      	lsls	r3, r3, #3
 8001828:	1a9b      	subs	r3, r3, r2
 800182a:	009b      	lsls	r3, r3, #2
 800182c:	440b      	add	r3, r1
 800182e:	3348      	adds	r3, #72	; 0x48
 8001830:	6819      	ldr	r1, [r3, #0]
 8001832:	6878      	ldr	r0, [r7, #4]
 8001834:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001836:	4613      	mov	r3, r2
 8001838:	00db      	lsls	r3, r3, #3
 800183a:	1a9b      	subs	r3, r3, r2
 800183c:	009b      	lsls	r3, r3, #2
 800183e:	4403      	add	r3, r0
 8001840:	3344      	adds	r3, #68	; 0x44
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	4419      	add	r1, r3
 8001846:	6878      	ldr	r0, [r7, #4]
 8001848:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800184a:	4613      	mov	r3, r2
 800184c:	00db      	lsls	r3, r3, #3
 800184e:	1a9b      	subs	r3, r3, r2
 8001850:	009b      	lsls	r3, r3, #2
 8001852:	4403      	add	r3, r0
 8001854:	3348      	adds	r3, #72	; 0x48
 8001856:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800185a:	2b00      	cmp	r3, #0
 800185c:	d113      	bne.n	8001886 <HAL_PCD_IRQHandler+0x31c>
 800185e:	6879      	ldr	r1, [r7, #4]
 8001860:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001862:	4613      	mov	r3, r2
 8001864:	00db      	lsls	r3, r3, #3
 8001866:	1a9b      	subs	r3, r3, r2
 8001868:	009b      	lsls	r3, r3, #2
 800186a:	440b      	add	r3, r1
 800186c:	3350      	adds	r3, #80	; 0x50
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	2b00      	cmp	r3, #0
 8001872:	d108      	bne.n	8001886 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	6818      	ldr	r0, [r3, #0]
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800187e:	461a      	mov	r2, r3
 8001880:	2101      	movs	r1, #1
 8001882:	f002 fdbf 	bl	8004404 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001888:	b2db      	uxtb	r3, r3
 800188a:	4619      	mov	r1, r3
 800188c:	6878      	ldr	r0, [r7, #4]
 800188e:	f004 fe76 	bl	800657e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001892:	693b      	ldr	r3, [r7, #16]
 8001894:	f003 0308 	and.w	r3, r3, #8
 8001898:	2b00      	cmp	r3, #0
 800189a:	d008      	beq.n	80018ae <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800189c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800189e:	015a      	lsls	r2, r3, #5
 80018a0:	69fb      	ldr	r3, [r7, #28]
 80018a2:	4413      	add	r3, r2
 80018a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80018a8:	461a      	mov	r2, r3
 80018aa:	2308      	movs	r3, #8
 80018ac:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80018ae:	693b      	ldr	r3, [r7, #16]
 80018b0:	f003 0310 	and.w	r3, r3, #16
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d008      	beq.n	80018ca <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80018b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ba:	015a      	lsls	r2, r3, #5
 80018bc:	69fb      	ldr	r3, [r7, #28]
 80018be:	4413      	add	r3, r2
 80018c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80018c4:	461a      	mov	r2, r3
 80018c6:	2310      	movs	r3, #16
 80018c8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80018ca:	693b      	ldr	r3, [r7, #16]
 80018cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d008      	beq.n	80018e6 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80018d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018d6:	015a      	lsls	r2, r3, #5
 80018d8:	69fb      	ldr	r3, [r7, #28]
 80018da:	4413      	add	r3, r2
 80018dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80018e0:	461a      	mov	r2, r3
 80018e2:	2340      	movs	r3, #64	; 0x40
 80018e4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80018e6:	693b      	ldr	r3, [r7, #16]
 80018e8:	f003 0302 	and.w	r3, r3, #2
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d008      	beq.n	8001902 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80018f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018f2:	015a      	lsls	r2, r3, #5
 80018f4:	69fb      	ldr	r3, [r7, #28]
 80018f6:	4413      	add	r3, r2
 80018f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80018fc:	461a      	mov	r2, r3
 80018fe:	2302      	movs	r3, #2
 8001900:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001902:	693b      	ldr	r3, [r7, #16]
 8001904:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001908:	2b00      	cmp	r3, #0
 800190a:	d003      	beq.n	8001914 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800190c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800190e:	6878      	ldr	r0, [r7, #4]
 8001910:	f000 fc1b 	bl	800214a <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001916:	3301      	adds	r3, #1
 8001918:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800191a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800191c:	085b      	lsrs	r3, r3, #1
 800191e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001920:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001922:	2b00      	cmp	r3, #0
 8001924:	f47f af49 	bne.w	80017ba <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	4618      	mov	r0, r3
 800192e:	f002 fca4 	bl	800427a <USB_ReadInterrupts>
 8001932:	4603      	mov	r3, r0
 8001934:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001938:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800193c:	d122      	bne.n	8001984 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800193e:	69fb      	ldr	r3, [r7, #28]
 8001940:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001944:	685b      	ldr	r3, [r3, #4]
 8001946:	69fa      	ldr	r2, [r7, #28]
 8001948:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800194c:	f023 0301 	bic.w	r3, r3, #1
 8001950:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8001958:	2b01      	cmp	r3, #1
 800195a:	d108      	bne.n	800196e <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	2200      	movs	r2, #0
 8001960:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001964:	2100      	movs	r1, #0
 8001966:	6878      	ldr	r0, [r7, #4]
 8001968:	f000 fe26 	bl	80025b8 <HAL_PCDEx_LPM_Callback>
 800196c:	e002      	b.n	8001974 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800196e:	6878      	ldr	r0, [r7, #4]
 8001970:	f004 fe72 	bl	8006658 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	695a      	ldr	r2, [r3, #20]
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8001982:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	4618      	mov	r0, r3
 800198a:	f002 fc76 	bl	800427a <USB_ReadInterrupts>
 800198e:	4603      	mov	r3, r0
 8001990:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001994:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001998:	d112      	bne.n	80019c0 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800199a:	69fb      	ldr	r3, [r7, #28]
 800199c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80019a0:	689b      	ldr	r3, [r3, #8]
 80019a2:	f003 0301 	and.w	r3, r3, #1
 80019a6:	2b01      	cmp	r3, #1
 80019a8:	d102      	bne.n	80019b0 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80019aa:	6878      	ldr	r0, [r7, #4]
 80019ac:	f004 fe2e 	bl	800660c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	695a      	ldr	r2, [r3, #20]
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80019be:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	4618      	mov	r0, r3
 80019c6:	f002 fc58 	bl	800427a <USB_ReadInterrupts>
 80019ca:	4603      	mov	r3, r0
 80019cc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80019d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80019d4:	f040 80c7 	bne.w	8001b66 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80019d8:	69fb      	ldr	r3, [r7, #28]
 80019da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	69fa      	ldr	r2, [r7, #28]
 80019e2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80019e6:	f023 0301 	bic.w	r3, r3, #1
 80019ea:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	2110      	movs	r1, #16
 80019f2:	4618      	mov	r0, r3
 80019f4:	f001 fcf2 	bl	80033dc <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80019f8:	2300      	movs	r3, #0
 80019fa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80019fc:	e056      	b.n	8001aac <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80019fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a00:	015a      	lsls	r2, r3, #5
 8001a02:	69fb      	ldr	r3, [r7, #28]
 8001a04:	4413      	add	r3, r2
 8001a06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001a0a:	461a      	mov	r2, r3
 8001a0c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001a10:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001a12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a14:	015a      	lsls	r2, r3, #5
 8001a16:	69fb      	ldr	r3, [r7, #28]
 8001a18:	4413      	add	r3, r2
 8001a1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001a22:	0151      	lsls	r1, r2, #5
 8001a24:	69fa      	ldr	r2, [r7, #28]
 8001a26:	440a      	add	r2, r1
 8001a28:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001a2c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001a30:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8001a32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a34:	015a      	lsls	r2, r3, #5
 8001a36:	69fb      	ldr	r3, [r7, #28]
 8001a38:	4413      	add	r3, r2
 8001a3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001a42:	0151      	lsls	r1, r2, #5
 8001a44:	69fa      	ldr	r2, [r7, #28]
 8001a46:	440a      	add	r2, r1
 8001a48:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001a4c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001a50:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001a52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a54:	015a      	lsls	r2, r3, #5
 8001a56:	69fb      	ldr	r3, [r7, #28]
 8001a58:	4413      	add	r3, r2
 8001a5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001a5e:	461a      	mov	r2, r3
 8001a60:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001a64:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001a66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a68:	015a      	lsls	r2, r3, #5
 8001a6a:	69fb      	ldr	r3, [r7, #28]
 8001a6c:	4413      	add	r3, r2
 8001a6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001a76:	0151      	lsls	r1, r2, #5
 8001a78:	69fa      	ldr	r2, [r7, #28]
 8001a7a:	440a      	add	r2, r1
 8001a7c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001a80:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001a84:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001a86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a88:	015a      	lsls	r2, r3, #5
 8001a8a:	69fb      	ldr	r3, [r7, #28]
 8001a8c:	4413      	add	r3, r2
 8001a8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001a96:	0151      	lsls	r1, r2, #5
 8001a98:	69fa      	ldr	r2, [r7, #28]
 8001a9a:	440a      	add	r2, r1
 8001a9c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001aa0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001aa4:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001aa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001aa8:	3301      	adds	r3, #1
 8001aaa:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	685b      	ldr	r3, [r3, #4]
 8001ab0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001ab2:	429a      	cmp	r2, r3
 8001ab4:	d3a3      	bcc.n	80019fe <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001ab6:	69fb      	ldr	r3, [r7, #28]
 8001ab8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001abc:	69db      	ldr	r3, [r3, #28]
 8001abe:	69fa      	ldr	r2, [r7, #28]
 8001ac0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001ac4:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8001ac8:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d016      	beq.n	8001b00 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001ad2:	69fb      	ldr	r3, [r7, #28]
 8001ad4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001ad8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001adc:	69fa      	ldr	r2, [r7, #28]
 8001ade:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001ae2:	f043 030b 	orr.w	r3, r3, #11
 8001ae6:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001aea:	69fb      	ldr	r3, [r7, #28]
 8001aec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001af0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001af2:	69fa      	ldr	r2, [r7, #28]
 8001af4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001af8:	f043 030b 	orr.w	r3, r3, #11
 8001afc:	6453      	str	r3, [r2, #68]	; 0x44
 8001afe:	e015      	b.n	8001b2c <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001b00:	69fb      	ldr	r3, [r7, #28]
 8001b02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001b06:	695b      	ldr	r3, [r3, #20]
 8001b08:	69fa      	ldr	r2, [r7, #28]
 8001b0a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001b0e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001b12:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8001b16:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001b18:	69fb      	ldr	r3, [r7, #28]
 8001b1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001b1e:	691b      	ldr	r3, [r3, #16]
 8001b20:	69fa      	ldr	r2, [r7, #28]
 8001b22:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001b26:	f043 030b 	orr.w	r3, r3, #11
 8001b2a:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001b2c:	69fb      	ldr	r3, [r7, #28]
 8001b2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	69fa      	ldr	r2, [r7, #28]
 8001b36:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001b3a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8001b3e:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	6818      	ldr	r0, [r3, #0]
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	691b      	ldr	r3, [r3, #16]
 8001b48:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001b50:	461a      	mov	r2, r3
 8001b52:	f002 fc57 	bl	8004404 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	695a      	ldr	r2, [r3, #20]
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001b64:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	f002 fb85 	bl	800427a <USB_ReadInterrupts>
 8001b70:	4603      	mov	r3, r0
 8001b72:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001b76:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001b7a:	d124      	bne.n	8001bc6 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	4618      	mov	r0, r3
 8001b82:	f002 fc1b 	bl	80043bc <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	f001 fc83 	bl	8003496 <USB_GetDevSpeed>
 8001b90:	4603      	mov	r3, r0
 8001b92:	461a      	mov	r2, r3
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681c      	ldr	r4, [r3, #0]
 8001b9c:	f001 f93c 	bl	8002e18 <HAL_RCC_GetHCLKFreq>
 8001ba0:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001ba6:	b2db      	uxtb	r3, r3
 8001ba8:	461a      	mov	r2, r3
 8001baa:	4620      	mov	r0, r4
 8001bac:	f001 f9a2 	bl	8002ef4 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001bb0:	6878      	ldr	r0, [r7, #4]
 8001bb2:	f004 fd0c 	bl	80065ce <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	695a      	ldr	r2, [r3, #20]
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8001bc4:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	4618      	mov	r0, r3
 8001bcc:	f002 fb55 	bl	800427a <USB_ReadInterrupts>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	f003 0308 	and.w	r3, r3, #8
 8001bd6:	2b08      	cmp	r3, #8
 8001bd8:	d10a      	bne.n	8001bf0 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001bda:	6878      	ldr	r0, [r7, #4]
 8001bdc:	f004 fce9 	bl	80065b2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	695a      	ldr	r2, [r3, #20]
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f002 0208 	and.w	r2, r2, #8
 8001bee:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	f002 fb40 	bl	800427a <USB_ReadInterrupts>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c00:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001c04:	d10f      	bne.n	8001c26 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8001c06:	2300      	movs	r3, #0
 8001c08:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c0c:	b2db      	uxtb	r3, r3
 8001c0e:	4619      	mov	r1, r3
 8001c10:	6878      	ldr	r0, [r7, #4]
 8001c12:	f004 fd41 	bl	8006698 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	695a      	ldr	r2, [r3, #20]
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8001c24:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	f002 fb25 	bl	800427a <USB_ReadInterrupts>
 8001c30:	4603      	mov	r3, r0
 8001c32:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c36:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001c3a:	d10f      	bne.n	8001c5c <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c42:	b2db      	uxtb	r3, r3
 8001c44:	4619      	mov	r1, r3
 8001c46:	6878      	ldr	r0, [r7, #4]
 8001c48:	f004 fd14 	bl	8006674 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	695a      	ldr	r2, [r3, #20]
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8001c5a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	4618      	mov	r0, r3
 8001c62:	f002 fb0a 	bl	800427a <USB_ReadInterrupts>
 8001c66:	4603      	mov	r3, r0
 8001c68:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001c6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c70:	d10a      	bne.n	8001c88 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001c72:	6878      	ldr	r0, [r7, #4]
 8001c74:	f004 fd22 	bl	80066bc <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	695a      	ldr	r2, [r3, #20]
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8001c86:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	f002 faf4 	bl	800427a <USB_ReadInterrupts>
 8001c92:	4603      	mov	r3, r0
 8001c94:	f003 0304 	and.w	r3, r3, #4
 8001c98:	2b04      	cmp	r3, #4
 8001c9a:	d115      	bne.n	8001cc8 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	685b      	ldr	r3, [r3, #4]
 8001ca2:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001ca4:	69bb      	ldr	r3, [r7, #24]
 8001ca6:	f003 0304 	and.w	r3, r3, #4
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d002      	beq.n	8001cb4 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001cae:	6878      	ldr	r0, [r7, #4]
 8001cb0:	f004 fd12 	bl	80066d8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	6859      	ldr	r1, [r3, #4]
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	69ba      	ldr	r2, [r7, #24]
 8001cc0:	430a      	orrs	r2, r1
 8001cc2:	605a      	str	r2, [r3, #4]
 8001cc4:	e000      	b.n	8001cc8 <HAL_PCD_IRQHandler+0x75e>
      return;
 8001cc6:	bf00      	nop
    }
  }
}
 8001cc8:	3734      	adds	r7, #52	; 0x34
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bd90      	pop	{r4, r7, pc}

08001cce <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001cce:	b580      	push	{r7, lr}
 8001cd0:	b082      	sub	sp, #8
 8001cd2:	af00      	add	r7, sp, #0
 8001cd4:	6078      	str	r0, [r7, #4]
 8001cd6:	460b      	mov	r3, r1
 8001cd8:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001ce0:	2b01      	cmp	r3, #1
 8001ce2:	d101      	bne.n	8001ce8 <HAL_PCD_SetAddress+0x1a>
 8001ce4:	2302      	movs	r3, #2
 8001ce6:	e013      	b.n	8001d10 <HAL_PCD_SetAddress+0x42>
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	2201      	movs	r2, #1
 8001cec:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	78fa      	ldrb	r2, [r7, #3]
 8001cf4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	78fa      	ldrb	r2, [r7, #3]
 8001cfe:	4611      	mov	r1, r2
 8001d00:	4618      	mov	r0, r3
 8001d02:	f002 fa52 	bl	80041aa <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	2200      	movs	r2, #0
 8001d0a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001d0e:	2300      	movs	r3, #0
}
 8001d10:	4618      	mov	r0, r3
 8001d12:	3708      	adds	r7, #8
 8001d14:	46bd      	mov	sp, r7
 8001d16:	bd80      	pop	{r7, pc}

08001d18 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b084      	sub	sp, #16
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
 8001d20:	4608      	mov	r0, r1
 8001d22:	4611      	mov	r1, r2
 8001d24:	461a      	mov	r2, r3
 8001d26:	4603      	mov	r3, r0
 8001d28:	70fb      	strb	r3, [r7, #3]
 8001d2a:	460b      	mov	r3, r1
 8001d2c:	803b      	strh	r3, [r7, #0]
 8001d2e:	4613      	mov	r3, r2
 8001d30:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001d32:	2300      	movs	r3, #0
 8001d34:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001d36:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	da0f      	bge.n	8001d5e <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001d3e:	78fb      	ldrb	r3, [r7, #3]
 8001d40:	f003 020f 	and.w	r2, r3, #15
 8001d44:	4613      	mov	r3, r2
 8001d46:	00db      	lsls	r3, r3, #3
 8001d48:	1a9b      	subs	r3, r3, r2
 8001d4a:	009b      	lsls	r3, r3, #2
 8001d4c:	3338      	adds	r3, #56	; 0x38
 8001d4e:	687a      	ldr	r2, [r7, #4]
 8001d50:	4413      	add	r3, r2
 8001d52:	3304      	adds	r3, #4
 8001d54:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	2201      	movs	r2, #1
 8001d5a:	705a      	strb	r2, [r3, #1]
 8001d5c:	e00f      	b.n	8001d7e <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001d5e:	78fb      	ldrb	r3, [r7, #3]
 8001d60:	f003 020f 	and.w	r2, r3, #15
 8001d64:	4613      	mov	r3, r2
 8001d66:	00db      	lsls	r3, r3, #3
 8001d68:	1a9b      	subs	r3, r3, r2
 8001d6a:	009b      	lsls	r3, r3, #2
 8001d6c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001d70:	687a      	ldr	r2, [r7, #4]
 8001d72:	4413      	add	r3, r2
 8001d74:	3304      	adds	r3, #4
 8001d76:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001d7e:	78fb      	ldrb	r3, [r7, #3]
 8001d80:	f003 030f 	and.w	r3, r3, #15
 8001d84:	b2da      	uxtb	r2, r3
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001d8a:	883a      	ldrh	r2, [r7, #0]
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	78ba      	ldrb	r2, [r7, #2]
 8001d94:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	785b      	ldrb	r3, [r3, #1]
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d004      	beq.n	8001da8 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	781b      	ldrb	r3, [r3, #0]
 8001da2:	b29a      	uxth	r2, r3
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001da8:	78bb      	ldrb	r3, [r7, #2]
 8001daa:	2b02      	cmp	r3, #2
 8001dac:	d102      	bne.n	8001db4 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	2200      	movs	r2, #0
 8001db2:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001dba:	2b01      	cmp	r3, #1
 8001dbc:	d101      	bne.n	8001dc2 <HAL_PCD_EP_Open+0xaa>
 8001dbe:	2302      	movs	r3, #2
 8001dc0:	e00e      	b.n	8001de0 <HAL_PCD_EP_Open+0xc8>
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	2201      	movs	r2, #1
 8001dc6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	68f9      	ldr	r1, [r7, #12]
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	f001 fb85 	bl	80034e0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	2200      	movs	r2, #0
 8001dda:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8001dde:	7afb      	ldrb	r3, [r7, #11]
}
 8001de0:	4618      	mov	r0, r3
 8001de2:	3710      	adds	r7, #16
 8001de4:	46bd      	mov	sp, r7
 8001de6:	bd80      	pop	{r7, pc}

08001de8 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b084      	sub	sp, #16
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
 8001df0:	460b      	mov	r3, r1
 8001df2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001df4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	da0f      	bge.n	8001e1c <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001dfc:	78fb      	ldrb	r3, [r7, #3]
 8001dfe:	f003 020f 	and.w	r2, r3, #15
 8001e02:	4613      	mov	r3, r2
 8001e04:	00db      	lsls	r3, r3, #3
 8001e06:	1a9b      	subs	r3, r3, r2
 8001e08:	009b      	lsls	r3, r3, #2
 8001e0a:	3338      	adds	r3, #56	; 0x38
 8001e0c:	687a      	ldr	r2, [r7, #4]
 8001e0e:	4413      	add	r3, r2
 8001e10:	3304      	adds	r3, #4
 8001e12:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	2201      	movs	r2, #1
 8001e18:	705a      	strb	r2, [r3, #1]
 8001e1a:	e00f      	b.n	8001e3c <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001e1c:	78fb      	ldrb	r3, [r7, #3]
 8001e1e:	f003 020f 	and.w	r2, r3, #15
 8001e22:	4613      	mov	r3, r2
 8001e24:	00db      	lsls	r3, r3, #3
 8001e26:	1a9b      	subs	r3, r3, r2
 8001e28:	009b      	lsls	r3, r3, #2
 8001e2a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001e2e:	687a      	ldr	r2, [r7, #4]
 8001e30:	4413      	add	r3, r2
 8001e32:	3304      	adds	r3, #4
 8001e34:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	2200      	movs	r2, #0
 8001e3a:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001e3c:	78fb      	ldrb	r3, [r7, #3]
 8001e3e:	f003 030f 	and.w	r3, r3, #15
 8001e42:	b2da      	uxtb	r2, r3
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001e4e:	2b01      	cmp	r3, #1
 8001e50:	d101      	bne.n	8001e56 <HAL_PCD_EP_Close+0x6e>
 8001e52:	2302      	movs	r3, #2
 8001e54:	e00e      	b.n	8001e74 <HAL_PCD_EP_Close+0x8c>
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	2201      	movs	r2, #1
 8001e5a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	68f9      	ldr	r1, [r7, #12]
 8001e64:	4618      	mov	r0, r3
 8001e66:	f001 fbc3 	bl	80035f0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8001e72:	2300      	movs	r3, #0
}
 8001e74:	4618      	mov	r0, r3
 8001e76:	3710      	adds	r7, #16
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	bd80      	pop	{r7, pc}

08001e7c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b086      	sub	sp, #24
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	60f8      	str	r0, [r7, #12]
 8001e84:	607a      	str	r2, [r7, #4]
 8001e86:	603b      	str	r3, [r7, #0]
 8001e88:	460b      	mov	r3, r1
 8001e8a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001e8c:	7afb      	ldrb	r3, [r7, #11]
 8001e8e:	f003 020f 	and.w	r2, r3, #15
 8001e92:	4613      	mov	r3, r2
 8001e94:	00db      	lsls	r3, r3, #3
 8001e96:	1a9b      	subs	r3, r3, r2
 8001e98:	009b      	lsls	r3, r3, #2
 8001e9a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001e9e:	68fa      	ldr	r2, [r7, #12]
 8001ea0:	4413      	add	r3, r2
 8001ea2:	3304      	adds	r3, #4
 8001ea4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001ea6:	697b      	ldr	r3, [r7, #20]
 8001ea8:	687a      	ldr	r2, [r7, #4]
 8001eaa:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001eac:	697b      	ldr	r3, [r7, #20]
 8001eae:	683a      	ldr	r2, [r7, #0]
 8001eb0:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8001eb2:	697b      	ldr	r3, [r7, #20]
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8001eb8:	697b      	ldr	r3, [r7, #20]
 8001eba:	2200      	movs	r2, #0
 8001ebc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001ebe:	7afb      	ldrb	r3, [r7, #11]
 8001ec0:	f003 030f 	and.w	r3, r3, #15
 8001ec4:	b2da      	uxtb	r2, r3
 8001ec6:	697b      	ldr	r3, [r7, #20]
 8001ec8:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	691b      	ldr	r3, [r3, #16]
 8001ece:	2b01      	cmp	r3, #1
 8001ed0:	d102      	bne.n	8001ed8 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001ed2:	687a      	ldr	r2, [r7, #4]
 8001ed4:	697b      	ldr	r3, [r7, #20]
 8001ed6:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001ed8:	7afb      	ldrb	r3, [r7, #11]
 8001eda:	f003 030f 	and.w	r3, r3, #15
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d109      	bne.n	8001ef6 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	6818      	ldr	r0, [r3, #0]
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	691b      	ldr	r3, [r3, #16]
 8001eea:	b2db      	uxtb	r3, r3
 8001eec:	461a      	mov	r2, r3
 8001eee:	6979      	ldr	r1, [r7, #20]
 8001ef0:	f001 fe9e 	bl	8003c30 <USB_EP0StartXfer>
 8001ef4:	e008      	b.n	8001f08 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	6818      	ldr	r0, [r3, #0]
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	691b      	ldr	r3, [r3, #16]
 8001efe:	b2db      	uxtb	r3, r3
 8001f00:	461a      	mov	r2, r3
 8001f02:	6979      	ldr	r1, [r7, #20]
 8001f04:	f001 fc50 	bl	80037a8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001f08:	2300      	movs	r3, #0
}
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	3718      	adds	r7, #24
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}

08001f12 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001f12:	b480      	push	{r7}
 8001f14:	b083      	sub	sp, #12
 8001f16:	af00      	add	r7, sp, #0
 8001f18:	6078      	str	r0, [r7, #4]
 8001f1a:	460b      	mov	r3, r1
 8001f1c:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001f1e:	78fb      	ldrb	r3, [r7, #3]
 8001f20:	f003 020f 	and.w	r2, r3, #15
 8001f24:	6879      	ldr	r1, [r7, #4]
 8001f26:	4613      	mov	r3, r2
 8001f28:	00db      	lsls	r3, r3, #3
 8001f2a:	1a9b      	subs	r3, r3, r2
 8001f2c:	009b      	lsls	r3, r3, #2
 8001f2e:	440b      	add	r3, r1
 8001f30:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8001f34:	681b      	ldr	r3, [r3, #0]
}
 8001f36:	4618      	mov	r0, r3
 8001f38:	370c      	adds	r7, #12
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f40:	4770      	bx	lr

08001f42 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001f42:	b580      	push	{r7, lr}
 8001f44:	b086      	sub	sp, #24
 8001f46:	af00      	add	r7, sp, #0
 8001f48:	60f8      	str	r0, [r7, #12]
 8001f4a:	607a      	str	r2, [r7, #4]
 8001f4c:	603b      	str	r3, [r7, #0]
 8001f4e:	460b      	mov	r3, r1
 8001f50:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f52:	7afb      	ldrb	r3, [r7, #11]
 8001f54:	f003 020f 	and.w	r2, r3, #15
 8001f58:	4613      	mov	r3, r2
 8001f5a:	00db      	lsls	r3, r3, #3
 8001f5c:	1a9b      	subs	r3, r3, r2
 8001f5e:	009b      	lsls	r3, r3, #2
 8001f60:	3338      	adds	r3, #56	; 0x38
 8001f62:	68fa      	ldr	r2, [r7, #12]
 8001f64:	4413      	add	r3, r2
 8001f66:	3304      	adds	r3, #4
 8001f68:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001f6a:	697b      	ldr	r3, [r7, #20]
 8001f6c:	687a      	ldr	r2, [r7, #4]
 8001f6e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001f70:	697b      	ldr	r3, [r7, #20]
 8001f72:	683a      	ldr	r2, [r7, #0]
 8001f74:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8001f76:	697b      	ldr	r3, [r7, #20]
 8001f78:	2200      	movs	r2, #0
 8001f7a:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8001f7c:	697b      	ldr	r3, [r7, #20]
 8001f7e:	2201      	movs	r2, #1
 8001f80:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001f82:	7afb      	ldrb	r3, [r7, #11]
 8001f84:	f003 030f 	and.w	r3, r3, #15
 8001f88:	b2da      	uxtb	r2, r3
 8001f8a:	697b      	ldr	r3, [r7, #20]
 8001f8c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	691b      	ldr	r3, [r3, #16]
 8001f92:	2b01      	cmp	r3, #1
 8001f94:	d102      	bne.n	8001f9c <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001f96:	687a      	ldr	r2, [r7, #4]
 8001f98:	697b      	ldr	r3, [r7, #20]
 8001f9a:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001f9c:	7afb      	ldrb	r3, [r7, #11]
 8001f9e:	f003 030f 	and.w	r3, r3, #15
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d109      	bne.n	8001fba <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	6818      	ldr	r0, [r3, #0]
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	691b      	ldr	r3, [r3, #16]
 8001fae:	b2db      	uxtb	r3, r3
 8001fb0:	461a      	mov	r2, r3
 8001fb2:	6979      	ldr	r1, [r7, #20]
 8001fb4:	f001 fe3c 	bl	8003c30 <USB_EP0StartXfer>
 8001fb8:	e008      	b.n	8001fcc <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	6818      	ldr	r0, [r3, #0]
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	691b      	ldr	r3, [r3, #16]
 8001fc2:	b2db      	uxtb	r3, r3
 8001fc4:	461a      	mov	r2, r3
 8001fc6:	6979      	ldr	r1, [r7, #20]
 8001fc8:	f001 fbee 	bl	80037a8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001fcc:	2300      	movs	r3, #0
}
 8001fce:	4618      	mov	r0, r3
 8001fd0:	3718      	adds	r7, #24
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bd80      	pop	{r7, pc}

08001fd6 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001fd6:	b580      	push	{r7, lr}
 8001fd8:	b084      	sub	sp, #16
 8001fda:	af00      	add	r7, sp, #0
 8001fdc:	6078      	str	r0, [r7, #4]
 8001fde:	460b      	mov	r3, r1
 8001fe0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001fe2:	78fb      	ldrb	r3, [r7, #3]
 8001fe4:	f003 020f 	and.w	r2, r3, #15
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	685b      	ldr	r3, [r3, #4]
 8001fec:	429a      	cmp	r2, r3
 8001fee:	d901      	bls.n	8001ff4 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001ff0:	2301      	movs	r3, #1
 8001ff2:	e050      	b.n	8002096 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001ff4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	da0f      	bge.n	800201c <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001ffc:	78fb      	ldrb	r3, [r7, #3]
 8001ffe:	f003 020f 	and.w	r2, r3, #15
 8002002:	4613      	mov	r3, r2
 8002004:	00db      	lsls	r3, r3, #3
 8002006:	1a9b      	subs	r3, r3, r2
 8002008:	009b      	lsls	r3, r3, #2
 800200a:	3338      	adds	r3, #56	; 0x38
 800200c:	687a      	ldr	r2, [r7, #4]
 800200e:	4413      	add	r3, r2
 8002010:	3304      	adds	r3, #4
 8002012:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	2201      	movs	r2, #1
 8002018:	705a      	strb	r2, [r3, #1]
 800201a:	e00d      	b.n	8002038 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800201c:	78fa      	ldrb	r2, [r7, #3]
 800201e:	4613      	mov	r3, r2
 8002020:	00db      	lsls	r3, r3, #3
 8002022:	1a9b      	subs	r3, r3, r2
 8002024:	009b      	lsls	r3, r3, #2
 8002026:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800202a:	687a      	ldr	r2, [r7, #4]
 800202c:	4413      	add	r3, r2
 800202e:	3304      	adds	r3, #4
 8002030:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	2200      	movs	r2, #0
 8002036:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	2201      	movs	r2, #1
 800203c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800203e:	78fb      	ldrb	r3, [r7, #3]
 8002040:	f003 030f 	and.w	r3, r3, #15
 8002044:	b2da      	uxtb	r2, r3
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002050:	2b01      	cmp	r3, #1
 8002052:	d101      	bne.n	8002058 <HAL_PCD_EP_SetStall+0x82>
 8002054:	2302      	movs	r3, #2
 8002056:	e01e      	b.n	8002096 <HAL_PCD_EP_SetStall+0xc0>
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	2201      	movs	r2, #1
 800205c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	68f9      	ldr	r1, [r7, #12]
 8002066:	4618      	mov	r0, r3
 8002068:	f001 ffcb 	bl	8004002 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800206c:	78fb      	ldrb	r3, [r7, #3]
 800206e:	f003 030f 	and.w	r3, r3, #15
 8002072:	2b00      	cmp	r3, #0
 8002074:	d10a      	bne.n	800208c <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6818      	ldr	r0, [r3, #0]
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	691b      	ldr	r3, [r3, #16]
 800207e:	b2d9      	uxtb	r1, r3
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002086:	461a      	mov	r2, r3
 8002088:	f002 f9bc 	bl	8004404 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	2200      	movs	r2, #0
 8002090:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002094:	2300      	movs	r3, #0
}
 8002096:	4618      	mov	r0, r3
 8002098:	3710      	adds	r7, #16
 800209a:	46bd      	mov	sp, r7
 800209c:	bd80      	pop	{r7, pc}

0800209e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800209e:	b580      	push	{r7, lr}
 80020a0:	b084      	sub	sp, #16
 80020a2:	af00      	add	r7, sp, #0
 80020a4:	6078      	str	r0, [r7, #4]
 80020a6:	460b      	mov	r3, r1
 80020a8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80020aa:	78fb      	ldrb	r3, [r7, #3]
 80020ac:	f003 020f 	and.w	r2, r3, #15
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	429a      	cmp	r2, r3
 80020b6:	d901      	bls.n	80020bc <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80020b8:	2301      	movs	r3, #1
 80020ba:	e042      	b.n	8002142 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80020bc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	da0f      	bge.n	80020e4 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80020c4:	78fb      	ldrb	r3, [r7, #3]
 80020c6:	f003 020f 	and.w	r2, r3, #15
 80020ca:	4613      	mov	r3, r2
 80020cc:	00db      	lsls	r3, r3, #3
 80020ce:	1a9b      	subs	r3, r3, r2
 80020d0:	009b      	lsls	r3, r3, #2
 80020d2:	3338      	adds	r3, #56	; 0x38
 80020d4:	687a      	ldr	r2, [r7, #4]
 80020d6:	4413      	add	r3, r2
 80020d8:	3304      	adds	r3, #4
 80020da:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	2201      	movs	r2, #1
 80020e0:	705a      	strb	r2, [r3, #1]
 80020e2:	e00f      	b.n	8002104 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80020e4:	78fb      	ldrb	r3, [r7, #3]
 80020e6:	f003 020f 	and.w	r2, r3, #15
 80020ea:	4613      	mov	r3, r2
 80020ec:	00db      	lsls	r3, r3, #3
 80020ee:	1a9b      	subs	r3, r3, r2
 80020f0:	009b      	lsls	r3, r3, #2
 80020f2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80020f6:	687a      	ldr	r2, [r7, #4]
 80020f8:	4413      	add	r3, r2
 80020fa:	3304      	adds	r3, #4
 80020fc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	2200      	movs	r2, #0
 8002102:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	2200      	movs	r2, #0
 8002108:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800210a:	78fb      	ldrb	r3, [r7, #3]
 800210c:	f003 030f 	and.w	r3, r3, #15
 8002110:	b2da      	uxtb	r2, r3
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800211c:	2b01      	cmp	r3, #1
 800211e:	d101      	bne.n	8002124 <HAL_PCD_EP_ClrStall+0x86>
 8002120:	2302      	movs	r3, #2
 8002122:	e00e      	b.n	8002142 <HAL_PCD_EP_ClrStall+0xa4>
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	2201      	movs	r2, #1
 8002128:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	68f9      	ldr	r1, [r7, #12]
 8002132:	4618      	mov	r0, r3
 8002134:	f001 ffd3 	bl	80040de <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2200      	movs	r2, #0
 800213c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002140:	2300      	movs	r3, #0
}
 8002142:	4618      	mov	r0, r3
 8002144:	3710      	adds	r7, #16
 8002146:	46bd      	mov	sp, r7
 8002148:	bd80      	pop	{r7, pc}

0800214a <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800214a:	b580      	push	{r7, lr}
 800214c:	b08a      	sub	sp, #40	; 0x28
 800214e:	af02      	add	r7, sp, #8
 8002150:	6078      	str	r0, [r7, #4]
 8002152:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800215a:	697b      	ldr	r3, [r7, #20]
 800215c:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800215e:	683a      	ldr	r2, [r7, #0]
 8002160:	4613      	mov	r3, r2
 8002162:	00db      	lsls	r3, r3, #3
 8002164:	1a9b      	subs	r3, r3, r2
 8002166:	009b      	lsls	r3, r3, #2
 8002168:	3338      	adds	r3, #56	; 0x38
 800216a:	687a      	ldr	r2, [r7, #4]
 800216c:	4413      	add	r3, r2
 800216e:	3304      	adds	r3, #4
 8002170:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	699a      	ldr	r2, [r3, #24]
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	695b      	ldr	r3, [r3, #20]
 800217a:	429a      	cmp	r2, r3
 800217c:	d901      	bls.n	8002182 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800217e:	2301      	movs	r3, #1
 8002180:	e06c      	b.n	800225c <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	695a      	ldr	r2, [r3, #20]
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	699b      	ldr	r3, [r3, #24]
 800218a:	1ad3      	subs	r3, r2, r3
 800218c:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	689b      	ldr	r3, [r3, #8]
 8002192:	69fa      	ldr	r2, [r7, #28]
 8002194:	429a      	cmp	r2, r3
 8002196:	d902      	bls.n	800219e <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	689b      	ldr	r3, [r3, #8]
 800219c:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800219e:	69fb      	ldr	r3, [r7, #28]
 80021a0:	3303      	adds	r3, #3
 80021a2:	089b      	lsrs	r3, r3, #2
 80021a4:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80021a6:	e02b      	b.n	8002200 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	695a      	ldr	r2, [r3, #20]
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	699b      	ldr	r3, [r3, #24]
 80021b0:	1ad3      	subs	r3, r2, r3
 80021b2:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	689b      	ldr	r3, [r3, #8]
 80021b8:	69fa      	ldr	r2, [r7, #28]
 80021ba:	429a      	cmp	r2, r3
 80021bc:	d902      	bls.n	80021c4 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	689b      	ldr	r3, [r3, #8]
 80021c2:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80021c4:	69fb      	ldr	r3, [r7, #28]
 80021c6:	3303      	adds	r3, #3
 80021c8:	089b      	lsrs	r3, r3, #2
 80021ca:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	68d9      	ldr	r1, [r3, #12]
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	b2da      	uxtb	r2, r3
 80021d4:	69fb      	ldr	r3, [r7, #28]
 80021d6:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80021dc:	b2db      	uxtb	r3, r3
 80021de:	9300      	str	r3, [sp, #0]
 80021e0:	4603      	mov	r3, r0
 80021e2:	6978      	ldr	r0, [r7, #20]
 80021e4:	f001 fe77 	bl	8003ed6 <USB_WritePacket>

    ep->xfer_buff  += len;
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	68da      	ldr	r2, [r3, #12]
 80021ec:	69fb      	ldr	r3, [r7, #28]
 80021ee:	441a      	add	r2, r3
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	699a      	ldr	r2, [r3, #24]
 80021f8:	69fb      	ldr	r3, [r7, #28]
 80021fa:	441a      	add	r2, r3
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	015a      	lsls	r2, r3, #5
 8002204:	693b      	ldr	r3, [r7, #16]
 8002206:	4413      	add	r3, r2
 8002208:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800220c:	699b      	ldr	r3, [r3, #24]
 800220e:	b29b      	uxth	r3, r3
 8002210:	69ba      	ldr	r2, [r7, #24]
 8002212:	429a      	cmp	r2, r3
 8002214:	d809      	bhi.n	800222a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	699a      	ldr	r2, [r3, #24]
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800221e:	429a      	cmp	r2, r3
 8002220:	d203      	bcs.n	800222a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	695b      	ldr	r3, [r3, #20]
 8002226:	2b00      	cmp	r3, #0
 8002228:	d1be      	bne.n	80021a8 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	695a      	ldr	r2, [r3, #20]
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	699b      	ldr	r3, [r3, #24]
 8002232:	429a      	cmp	r2, r3
 8002234:	d811      	bhi.n	800225a <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	f003 030f 	and.w	r3, r3, #15
 800223c:	2201      	movs	r2, #1
 800223e:	fa02 f303 	lsl.w	r3, r2, r3
 8002242:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002244:	693b      	ldr	r3, [r7, #16]
 8002246:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800224a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800224c:	68bb      	ldr	r3, [r7, #8]
 800224e:	43db      	mvns	r3, r3
 8002250:	6939      	ldr	r1, [r7, #16]
 8002252:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002256:	4013      	ands	r3, r2
 8002258:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800225a:	2300      	movs	r3, #0
}
 800225c:	4618      	mov	r0, r3
 800225e:	3720      	adds	r7, #32
 8002260:	46bd      	mov	sp, r7
 8002262:	bd80      	pop	{r7, pc}

08002264 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b086      	sub	sp, #24
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
 800226c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002274:	697b      	ldr	r3, [r7, #20]
 8002276:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002278:	697b      	ldr	r3, [r7, #20]
 800227a:	333c      	adds	r3, #60	; 0x3c
 800227c:	3304      	adds	r3, #4
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	015a      	lsls	r2, r3, #5
 8002286:	693b      	ldr	r3, [r7, #16]
 8002288:	4413      	add	r3, r2
 800228a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800228e:	689b      	ldr	r3, [r3, #8]
 8002290:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	691b      	ldr	r3, [r3, #16]
 8002296:	2b01      	cmp	r3, #1
 8002298:	f040 80a0 	bne.w	80023dc <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800229c:	68bb      	ldr	r3, [r7, #8]
 800229e:	f003 0308 	and.w	r3, r3, #8
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d015      	beq.n	80022d2 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	4a72      	ldr	r2, [pc, #456]	; (8002474 <PCD_EP_OutXfrComplete_int+0x210>)
 80022aa:	4293      	cmp	r3, r2
 80022ac:	f240 80dd 	bls.w	800246a <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80022b0:	68bb      	ldr	r3, [r7, #8]
 80022b2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	f000 80d7 	beq.w	800246a <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	015a      	lsls	r2, r3, #5
 80022c0:	693b      	ldr	r3, [r7, #16]
 80022c2:	4413      	add	r3, r2
 80022c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80022c8:	461a      	mov	r2, r3
 80022ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80022ce:	6093      	str	r3, [r2, #8]
 80022d0:	e0cb      	b.n	800246a <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80022d2:	68bb      	ldr	r3, [r7, #8]
 80022d4:	f003 0320 	and.w	r3, r3, #32
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d009      	beq.n	80022f0 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	015a      	lsls	r2, r3, #5
 80022e0:	693b      	ldr	r3, [r7, #16]
 80022e2:	4413      	add	r3, r2
 80022e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80022e8:	461a      	mov	r2, r3
 80022ea:	2320      	movs	r3, #32
 80022ec:	6093      	str	r3, [r2, #8]
 80022ee:	e0bc      	b.n	800246a <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80022f0:	68bb      	ldr	r3, [r7, #8]
 80022f2:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	f040 80b7 	bne.w	800246a <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	4a5d      	ldr	r2, [pc, #372]	; (8002474 <PCD_EP_OutXfrComplete_int+0x210>)
 8002300:	4293      	cmp	r3, r2
 8002302:	d90f      	bls.n	8002324 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002304:	68bb      	ldr	r3, [r7, #8]
 8002306:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800230a:	2b00      	cmp	r3, #0
 800230c:	d00a      	beq.n	8002324 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	015a      	lsls	r2, r3, #5
 8002312:	693b      	ldr	r3, [r7, #16]
 8002314:	4413      	add	r3, r2
 8002316:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800231a:	461a      	mov	r2, r3
 800231c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002320:	6093      	str	r3, [r2, #8]
 8002322:	e0a2      	b.n	800246a <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8002324:	6879      	ldr	r1, [r7, #4]
 8002326:	683a      	ldr	r2, [r7, #0]
 8002328:	4613      	mov	r3, r2
 800232a:	00db      	lsls	r3, r3, #3
 800232c:	1a9b      	subs	r3, r3, r2
 800232e:	009b      	lsls	r3, r3, #2
 8002330:	440b      	add	r3, r1
 8002332:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002336:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	0159      	lsls	r1, r3, #5
 800233c:	693b      	ldr	r3, [r7, #16]
 800233e:	440b      	add	r3, r1
 8002340:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002344:	691b      	ldr	r3, [r3, #16]
 8002346:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 800234a:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 800234c:	6878      	ldr	r0, [r7, #4]
 800234e:	683a      	ldr	r2, [r7, #0]
 8002350:	4613      	mov	r3, r2
 8002352:	00db      	lsls	r3, r3, #3
 8002354:	1a9b      	subs	r3, r3, r2
 8002356:	009b      	lsls	r3, r3, #2
 8002358:	4403      	add	r3, r0
 800235a:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800235e:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8002360:	6879      	ldr	r1, [r7, #4]
 8002362:	683a      	ldr	r2, [r7, #0]
 8002364:	4613      	mov	r3, r2
 8002366:	00db      	lsls	r3, r3, #3
 8002368:	1a9b      	subs	r3, r3, r2
 800236a:	009b      	lsls	r3, r3, #2
 800236c:	440b      	add	r3, r1
 800236e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002372:	6819      	ldr	r1, [r3, #0]
 8002374:	6878      	ldr	r0, [r7, #4]
 8002376:	683a      	ldr	r2, [r7, #0]
 8002378:	4613      	mov	r3, r2
 800237a:	00db      	lsls	r3, r3, #3
 800237c:	1a9b      	subs	r3, r3, r2
 800237e:	009b      	lsls	r3, r3, #2
 8002380:	4403      	add	r3, r0
 8002382:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	4419      	add	r1, r3
 800238a:	6878      	ldr	r0, [r7, #4]
 800238c:	683a      	ldr	r2, [r7, #0]
 800238e:	4613      	mov	r3, r2
 8002390:	00db      	lsls	r3, r3, #3
 8002392:	1a9b      	subs	r3, r3, r2
 8002394:	009b      	lsls	r3, r3, #2
 8002396:	4403      	add	r3, r0
 8002398:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800239c:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d114      	bne.n	80023ce <PCD_EP_OutXfrComplete_int+0x16a>
 80023a4:	6879      	ldr	r1, [r7, #4]
 80023a6:	683a      	ldr	r2, [r7, #0]
 80023a8:	4613      	mov	r3, r2
 80023aa:	00db      	lsls	r3, r3, #3
 80023ac:	1a9b      	subs	r3, r3, r2
 80023ae:	009b      	lsls	r3, r3, #2
 80023b0:	440b      	add	r3, r1
 80023b2:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d108      	bne.n	80023ce <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6818      	ldr	r0, [r3, #0]
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80023c6:	461a      	mov	r2, r3
 80023c8:	2101      	movs	r1, #1
 80023ca:	f002 f81b 	bl	8004404 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	b2db      	uxtb	r3, r3
 80023d2:	4619      	mov	r1, r3
 80023d4:	6878      	ldr	r0, [r7, #4]
 80023d6:	f004 f8b7 	bl	8006548 <HAL_PCD_DataOutStageCallback>
 80023da:	e046      	b.n	800246a <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	4a26      	ldr	r2, [pc, #152]	; (8002478 <PCD_EP_OutXfrComplete_int+0x214>)
 80023e0:	4293      	cmp	r3, r2
 80023e2:	d124      	bne.n	800242e <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80023e4:	68bb      	ldr	r3, [r7, #8]
 80023e6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d00a      	beq.n	8002404 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	015a      	lsls	r2, r3, #5
 80023f2:	693b      	ldr	r3, [r7, #16]
 80023f4:	4413      	add	r3, r2
 80023f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80023fa:	461a      	mov	r2, r3
 80023fc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002400:	6093      	str	r3, [r2, #8]
 8002402:	e032      	b.n	800246a <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002404:	68bb      	ldr	r3, [r7, #8]
 8002406:	f003 0320 	and.w	r3, r3, #32
 800240a:	2b00      	cmp	r3, #0
 800240c:	d008      	beq.n	8002420 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	015a      	lsls	r2, r3, #5
 8002412:	693b      	ldr	r3, [r7, #16]
 8002414:	4413      	add	r3, r2
 8002416:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800241a:	461a      	mov	r2, r3
 800241c:	2320      	movs	r3, #32
 800241e:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	b2db      	uxtb	r3, r3
 8002424:	4619      	mov	r1, r3
 8002426:	6878      	ldr	r0, [r7, #4]
 8002428:	f004 f88e 	bl	8006548 <HAL_PCD_DataOutStageCallback>
 800242c:	e01d      	b.n	800246a <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	2b00      	cmp	r3, #0
 8002432:	d114      	bne.n	800245e <PCD_EP_OutXfrComplete_int+0x1fa>
 8002434:	6879      	ldr	r1, [r7, #4]
 8002436:	683a      	ldr	r2, [r7, #0]
 8002438:	4613      	mov	r3, r2
 800243a:	00db      	lsls	r3, r3, #3
 800243c:	1a9b      	subs	r3, r3, r2
 800243e:	009b      	lsls	r3, r3, #2
 8002440:	440b      	add	r3, r1
 8002442:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	2b00      	cmp	r3, #0
 800244a:	d108      	bne.n	800245e <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6818      	ldr	r0, [r3, #0]
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002456:	461a      	mov	r2, r3
 8002458:	2100      	movs	r1, #0
 800245a:	f001 ffd3 	bl	8004404 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	b2db      	uxtb	r3, r3
 8002462:	4619      	mov	r1, r3
 8002464:	6878      	ldr	r0, [r7, #4]
 8002466:	f004 f86f 	bl	8006548 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800246a:	2300      	movs	r3, #0
}
 800246c:	4618      	mov	r0, r3
 800246e:	3718      	adds	r7, #24
 8002470:	46bd      	mov	sp, r7
 8002472:	bd80      	pop	{r7, pc}
 8002474:	4f54300a 	.word	0x4f54300a
 8002478:	4f54310a 	.word	0x4f54310a

0800247c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b086      	sub	sp, #24
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
 8002484:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800248c:	697b      	ldr	r3, [r7, #20]
 800248e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002490:	697b      	ldr	r3, [r7, #20]
 8002492:	333c      	adds	r3, #60	; 0x3c
 8002494:	3304      	adds	r3, #4
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	015a      	lsls	r2, r3, #5
 800249e:	693b      	ldr	r3, [r7, #16]
 80024a0:	4413      	add	r3, r2
 80024a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80024a6:	689b      	ldr	r3, [r3, #8]
 80024a8:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	4a15      	ldr	r2, [pc, #84]	; (8002504 <PCD_EP_OutSetupPacket_int+0x88>)
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d90e      	bls.n	80024d0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80024b2:	68bb      	ldr	r3, [r7, #8]
 80024b4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d009      	beq.n	80024d0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	015a      	lsls	r2, r3, #5
 80024c0:	693b      	ldr	r3, [r7, #16]
 80024c2:	4413      	add	r3, r2
 80024c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80024c8:	461a      	mov	r2, r3
 80024ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80024ce:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80024d0:	6878      	ldr	r0, [r7, #4]
 80024d2:	f004 f827 	bl	8006524 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	4a0a      	ldr	r2, [pc, #40]	; (8002504 <PCD_EP_OutSetupPacket_int+0x88>)
 80024da:	4293      	cmp	r3, r2
 80024dc:	d90c      	bls.n	80024f8 <PCD_EP_OutSetupPacket_int+0x7c>
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	691b      	ldr	r3, [r3, #16]
 80024e2:	2b01      	cmp	r3, #1
 80024e4:	d108      	bne.n	80024f8 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6818      	ldr	r0, [r3, #0]
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80024f0:	461a      	mov	r2, r3
 80024f2:	2101      	movs	r1, #1
 80024f4:	f001 ff86 	bl	8004404 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80024f8:	2300      	movs	r3, #0
}
 80024fa:	4618      	mov	r0, r3
 80024fc:	3718      	adds	r7, #24
 80024fe:	46bd      	mov	sp, r7
 8002500:	bd80      	pop	{r7, pc}
 8002502:	bf00      	nop
 8002504:	4f54300a 	.word	0x4f54300a

08002508 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002508:	b480      	push	{r7}
 800250a:	b085      	sub	sp, #20
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
 8002510:	460b      	mov	r3, r1
 8002512:	70fb      	strb	r3, [r7, #3]
 8002514:	4613      	mov	r3, r2
 8002516:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800251e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002520:	78fb      	ldrb	r3, [r7, #3]
 8002522:	2b00      	cmp	r3, #0
 8002524:	d107      	bne.n	8002536 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002526:	883b      	ldrh	r3, [r7, #0]
 8002528:	0419      	lsls	r1, r3, #16
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	68ba      	ldr	r2, [r7, #8]
 8002530:	430a      	orrs	r2, r1
 8002532:	629a      	str	r2, [r3, #40]	; 0x28
 8002534:	e028      	b.n	8002588 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800253c:	0c1b      	lsrs	r3, r3, #16
 800253e:	68ba      	ldr	r2, [r7, #8]
 8002540:	4413      	add	r3, r2
 8002542:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002544:	2300      	movs	r3, #0
 8002546:	73fb      	strb	r3, [r7, #15]
 8002548:	e00d      	b.n	8002566 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681a      	ldr	r2, [r3, #0]
 800254e:	7bfb      	ldrb	r3, [r7, #15]
 8002550:	3340      	adds	r3, #64	; 0x40
 8002552:	009b      	lsls	r3, r3, #2
 8002554:	4413      	add	r3, r2
 8002556:	685b      	ldr	r3, [r3, #4]
 8002558:	0c1b      	lsrs	r3, r3, #16
 800255a:	68ba      	ldr	r2, [r7, #8]
 800255c:	4413      	add	r3, r2
 800255e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002560:	7bfb      	ldrb	r3, [r7, #15]
 8002562:	3301      	adds	r3, #1
 8002564:	73fb      	strb	r3, [r7, #15]
 8002566:	7bfa      	ldrb	r2, [r7, #15]
 8002568:	78fb      	ldrb	r3, [r7, #3]
 800256a:	3b01      	subs	r3, #1
 800256c:	429a      	cmp	r2, r3
 800256e:	d3ec      	bcc.n	800254a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002570:	883b      	ldrh	r3, [r7, #0]
 8002572:	0418      	lsls	r0, r3, #16
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6819      	ldr	r1, [r3, #0]
 8002578:	78fb      	ldrb	r3, [r7, #3]
 800257a:	3b01      	subs	r3, #1
 800257c:	68ba      	ldr	r2, [r7, #8]
 800257e:	4302      	orrs	r2, r0
 8002580:	3340      	adds	r3, #64	; 0x40
 8002582:	009b      	lsls	r3, r3, #2
 8002584:	440b      	add	r3, r1
 8002586:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002588:	2300      	movs	r3, #0
}
 800258a:	4618      	mov	r0, r3
 800258c:	3714      	adds	r7, #20
 800258e:	46bd      	mov	sp, r7
 8002590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002594:	4770      	bx	lr

08002596 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002596:	b480      	push	{r7}
 8002598:	b083      	sub	sp, #12
 800259a:	af00      	add	r7, sp, #0
 800259c:	6078      	str	r0, [r7, #4]
 800259e:	460b      	mov	r3, r1
 80025a0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	887a      	ldrh	r2, [r7, #2]
 80025a8:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80025aa:	2300      	movs	r3, #0
}
 80025ac:	4618      	mov	r0, r3
 80025ae:	370c      	adds	r7, #12
 80025b0:	46bd      	mov	sp, r7
 80025b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b6:	4770      	bx	lr

080025b8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80025b8:	b480      	push	{r7}
 80025ba:	b083      	sub	sp, #12
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
 80025c0:	460b      	mov	r3, r1
 80025c2:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80025c4:	bf00      	nop
 80025c6:	370c      	adds	r7, #12
 80025c8:	46bd      	mov	sp, r7
 80025ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ce:	4770      	bx	lr

080025d0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b086      	sub	sp, #24
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d101      	bne.n	80025e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80025de:	2301      	movs	r3, #1
 80025e0:	e267      	b.n	8002ab2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f003 0301 	and.w	r3, r3, #1
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d075      	beq.n	80026da <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80025ee:	4b88      	ldr	r3, [pc, #544]	; (8002810 <HAL_RCC_OscConfig+0x240>)
 80025f0:	689b      	ldr	r3, [r3, #8]
 80025f2:	f003 030c 	and.w	r3, r3, #12
 80025f6:	2b04      	cmp	r3, #4
 80025f8:	d00c      	beq.n	8002614 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80025fa:	4b85      	ldr	r3, [pc, #532]	; (8002810 <HAL_RCC_OscConfig+0x240>)
 80025fc:	689b      	ldr	r3, [r3, #8]
 80025fe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002602:	2b08      	cmp	r3, #8
 8002604:	d112      	bne.n	800262c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002606:	4b82      	ldr	r3, [pc, #520]	; (8002810 <HAL_RCC_OscConfig+0x240>)
 8002608:	685b      	ldr	r3, [r3, #4]
 800260a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800260e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002612:	d10b      	bne.n	800262c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002614:	4b7e      	ldr	r3, [pc, #504]	; (8002810 <HAL_RCC_OscConfig+0x240>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800261c:	2b00      	cmp	r3, #0
 800261e:	d05b      	beq.n	80026d8 <HAL_RCC_OscConfig+0x108>
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	685b      	ldr	r3, [r3, #4]
 8002624:	2b00      	cmp	r3, #0
 8002626:	d157      	bne.n	80026d8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002628:	2301      	movs	r3, #1
 800262a:	e242      	b.n	8002ab2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002634:	d106      	bne.n	8002644 <HAL_RCC_OscConfig+0x74>
 8002636:	4b76      	ldr	r3, [pc, #472]	; (8002810 <HAL_RCC_OscConfig+0x240>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	4a75      	ldr	r2, [pc, #468]	; (8002810 <HAL_RCC_OscConfig+0x240>)
 800263c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002640:	6013      	str	r3, [r2, #0]
 8002642:	e01d      	b.n	8002680 <HAL_RCC_OscConfig+0xb0>
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	685b      	ldr	r3, [r3, #4]
 8002648:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800264c:	d10c      	bne.n	8002668 <HAL_RCC_OscConfig+0x98>
 800264e:	4b70      	ldr	r3, [pc, #448]	; (8002810 <HAL_RCC_OscConfig+0x240>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	4a6f      	ldr	r2, [pc, #444]	; (8002810 <HAL_RCC_OscConfig+0x240>)
 8002654:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002658:	6013      	str	r3, [r2, #0]
 800265a:	4b6d      	ldr	r3, [pc, #436]	; (8002810 <HAL_RCC_OscConfig+0x240>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	4a6c      	ldr	r2, [pc, #432]	; (8002810 <HAL_RCC_OscConfig+0x240>)
 8002660:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002664:	6013      	str	r3, [r2, #0]
 8002666:	e00b      	b.n	8002680 <HAL_RCC_OscConfig+0xb0>
 8002668:	4b69      	ldr	r3, [pc, #420]	; (8002810 <HAL_RCC_OscConfig+0x240>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4a68      	ldr	r2, [pc, #416]	; (8002810 <HAL_RCC_OscConfig+0x240>)
 800266e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002672:	6013      	str	r3, [r2, #0]
 8002674:	4b66      	ldr	r3, [pc, #408]	; (8002810 <HAL_RCC_OscConfig+0x240>)
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	4a65      	ldr	r2, [pc, #404]	; (8002810 <HAL_RCC_OscConfig+0x240>)
 800267a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800267e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	685b      	ldr	r3, [r3, #4]
 8002684:	2b00      	cmp	r3, #0
 8002686:	d013      	beq.n	80026b0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002688:	f7fe fb26 	bl	8000cd8 <HAL_GetTick>
 800268c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800268e:	e008      	b.n	80026a2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002690:	f7fe fb22 	bl	8000cd8 <HAL_GetTick>
 8002694:	4602      	mov	r2, r0
 8002696:	693b      	ldr	r3, [r7, #16]
 8002698:	1ad3      	subs	r3, r2, r3
 800269a:	2b64      	cmp	r3, #100	; 0x64
 800269c:	d901      	bls.n	80026a2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800269e:	2303      	movs	r3, #3
 80026a0:	e207      	b.n	8002ab2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026a2:	4b5b      	ldr	r3, [pc, #364]	; (8002810 <HAL_RCC_OscConfig+0x240>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d0f0      	beq.n	8002690 <HAL_RCC_OscConfig+0xc0>
 80026ae:	e014      	b.n	80026da <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026b0:	f7fe fb12 	bl	8000cd8 <HAL_GetTick>
 80026b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026b6:	e008      	b.n	80026ca <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80026b8:	f7fe fb0e 	bl	8000cd8 <HAL_GetTick>
 80026bc:	4602      	mov	r2, r0
 80026be:	693b      	ldr	r3, [r7, #16]
 80026c0:	1ad3      	subs	r3, r2, r3
 80026c2:	2b64      	cmp	r3, #100	; 0x64
 80026c4:	d901      	bls.n	80026ca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80026c6:	2303      	movs	r3, #3
 80026c8:	e1f3      	b.n	8002ab2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026ca:	4b51      	ldr	r3, [pc, #324]	; (8002810 <HAL_RCC_OscConfig+0x240>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d1f0      	bne.n	80026b8 <HAL_RCC_OscConfig+0xe8>
 80026d6:	e000      	b.n	80026da <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f003 0302 	and.w	r3, r3, #2
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d063      	beq.n	80027ae <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80026e6:	4b4a      	ldr	r3, [pc, #296]	; (8002810 <HAL_RCC_OscConfig+0x240>)
 80026e8:	689b      	ldr	r3, [r3, #8]
 80026ea:	f003 030c 	and.w	r3, r3, #12
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d00b      	beq.n	800270a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80026f2:	4b47      	ldr	r3, [pc, #284]	; (8002810 <HAL_RCC_OscConfig+0x240>)
 80026f4:	689b      	ldr	r3, [r3, #8]
 80026f6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80026fa:	2b08      	cmp	r3, #8
 80026fc:	d11c      	bne.n	8002738 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80026fe:	4b44      	ldr	r3, [pc, #272]	; (8002810 <HAL_RCC_OscConfig+0x240>)
 8002700:	685b      	ldr	r3, [r3, #4]
 8002702:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002706:	2b00      	cmp	r3, #0
 8002708:	d116      	bne.n	8002738 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800270a:	4b41      	ldr	r3, [pc, #260]	; (8002810 <HAL_RCC_OscConfig+0x240>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f003 0302 	and.w	r3, r3, #2
 8002712:	2b00      	cmp	r3, #0
 8002714:	d005      	beq.n	8002722 <HAL_RCC_OscConfig+0x152>
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	68db      	ldr	r3, [r3, #12]
 800271a:	2b01      	cmp	r3, #1
 800271c:	d001      	beq.n	8002722 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800271e:	2301      	movs	r3, #1
 8002720:	e1c7      	b.n	8002ab2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002722:	4b3b      	ldr	r3, [pc, #236]	; (8002810 <HAL_RCC_OscConfig+0x240>)
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	691b      	ldr	r3, [r3, #16]
 800272e:	00db      	lsls	r3, r3, #3
 8002730:	4937      	ldr	r1, [pc, #220]	; (8002810 <HAL_RCC_OscConfig+0x240>)
 8002732:	4313      	orrs	r3, r2
 8002734:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002736:	e03a      	b.n	80027ae <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	68db      	ldr	r3, [r3, #12]
 800273c:	2b00      	cmp	r3, #0
 800273e:	d020      	beq.n	8002782 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002740:	4b34      	ldr	r3, [pc, #208]	; (8002814 <HAL_RCC_OscConfig+0x244>)
 8002742:	2201      	movs	r2, #1
 8002744:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002746:	f7fe fac7 	bl	8000cd8 <HAL_GetTick>
 800274a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800274c:	e008      	b.n	8002760 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800274e:	f7fe fac3 	bl	8000cd8 <HAL_GetTick>
 8002752:	4602      	mov	r2, r0
 8002754:	693b      	ldr	r3, [r7, #16]
 8002756:	1ad3      	subs	r3, r2, r3
 8002758:	2b02      	cmp	r3, #2
 800275a:	d901      	bls.n	8002760 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800275c:	2303      	movs	r3, #3
 800275e:	e1a8      	b.n	8002ab2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002760:	4b2b      	ldr	r3, [pc, #172]	; (8002810 <HAL_RCC_OscConfig+0x240>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f003 0302 	and.w	r3, r3, #2
 8002768:	2b00      	cmp	r3, #0
 800276a:	d0f0      	beq.n	800274e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800276c:	4b28      	ldr	r3, [pc, #160]	; (8002810 <HAL_RCC_OscConfig+0x240>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	691b      	ldr	r3, [r3, #16]
 8002778:	00db      	lsls	r3, r3, #3
 800277a:	4925      	ldr	r1, [pc, #148]	; (8002810 <HAL_RCC_OscConfig+0x240>)
 800277c:	4313      	orrs	r3, r2
 800277e:	600b      	str	r3, [r1, #0]
 8002780:	e015      	b.n	80027ae <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002782:	4b24      	ldr	r3, [pc, #144]	; (8002814 <HAL_RCC_OscConfig+0x244>)
 8002784:	2200      	movs	r2, #0
 8002786:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002788:	f7fe faa6 	bl	8000cd8 <HAL_GetTick>
 800278c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800278e:	e008      	b.n	80027a2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002790:	f7fe faa2 	bl	8000cd8 <HAL_GetTick>
 8002794:	4602      	mov	r2, r0
 8002796:	693b      	ldr	r3, [r7, #16]
 8002798:	1ad3      	subs	r3, r2, r3
 800279a:	2b02      	cmp	r3, #2
 800279c:	d901      	bls.n	80027a2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800279e:	2303      	movs	r3, #3
 80027a0:	e187      	b.n	8002ab2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027a2:	4b1b      	ldr	r3, [pc, #108]	; (8002810 <HAL_RCC_OscConfig+0x240>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f003 0302 	and.w	r3, r3, #2
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d1f0      	bne.n	8002790 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f003 0308 	and.w	r3, r3, #8
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d036      	beq.n	8002828 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	695b      	ldr	r3, [r3, #20]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d016      	beq.n	80027f0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80027c2:	4b15      	ldr	r3, [pc, #84]	; (8002818 <HAL_RCC_OscConfig+0x248>)
 80027c4:	2201      	movs	r2, #1
 80027c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027c8:	f7fe fa86 	bl	8000cd8 <HAL_GetTick>
 80027cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027ce:	e008      	b.n	80027e2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80027d0:	f7fe fa82 	bl	8000cd8 <HAL_GetTick>
 80027d4:	4602      	mov	r2, r0
 80027d6:	693b      	ldr	r3, [r7, #16]
 80027d8:	1ad3      	subs	r3, r2, r3
 80027da:	2b02      	cmp	r3, #2
 80027dc:	d901      	bls.n	80027e2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80027de:	2303      	movs	r3, #3
 80027e0:	e167      	b.n	8002ab2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027e2:	4b0b      	ldr	r3, [pc, #44]	; (8002810 <HAL_RCC_OscConfig+0x240>)
 80027e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027e6:	f003 0302 	and.w	r3, r3, #2
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d0f0      	beq.n	80027d0 <HAL_RCC_OscConfig+0x200>
 80027ee:	e01b      	b.n	8002828 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80027f0:	4b09      	ldr	r3, [pc, #36]	; (8002818 <HAL_RCC_OscConfig+0x248>)
 80027f2:	2200      	movs	r2, #0
 80027f4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027f6:	f7fe fa6f 	bl	8000cd8 <HAL_GetTick>
 80027fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027fc:	e00e      	b.n	800281c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80027fe:	f7fe fa6b 	bl	8000cd8 <HAL_GetTick>
 8002802:	4602      	mov	r2, r0
 8002804:	693b      	ldr	r3, [r7, #16]
 8002806:	1ad3      	subs	r3, r2, r3
 8002808:	2b02      	cmp	r3, #2
 800280a:	d907      	bls.n	800281c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800280c:	2303      	movs	r3, #3
 800280e:	e150      	b.n	8002ab2 <HAL_RCC_OscConfig+0x4e2>
 8002810:	40023800 	.word	0x40023800
 8002814:	42470000 	.word	0x42470000
 8002818:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800281c:	4b88      	ldr	r3, [pc, #544]	; (8002a40 <HAL_RCC_OscConfig+0x470>)
 800281e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002820:	f003 0302 	and.w	r3, r3, #2
 8002824:	2b00      	cmp	r3, #0
 8002826:	d1ea      	bne.n	80027fe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f003 0304 	and.w	r3, r3, #4
 8002830:	2b00      	cmp	r3, #0
 8002832:	f000 8097 	beq.w	8002964 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002836:	2300      	movs	r3, #0
 8002838:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800283a:	4b81      	ldr	r3, [pc, #516]	; (8002a40 <HAL_RCC_OscConfig+0x470>)
 800283c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800283e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002842:	2b00      	cmp	r3, #0
 8002844:	d10f      	bne.n	8002866 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002846:	2300      	movs	r3, #0
 8002848:	60bb      	str	r3, [r7, #8]
 800284a:	4b7d      	ldr	r3, [pc, #500]	; (8002a40 <HAL_RCC_OscConfig+0x470>)
 800284c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800284e:	4a7c      	ldr	r2, [pc, #496]	; (8002a40 <HAL_RCC_OscConfig+0x470>)
 8002850:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002854:	6413      	str	r3, [r2, #64]	; 0x40
 8002856:	4b7a      	ldr	r3, [pc, #488]	; (8002a40 <HAL_RCC_OscConfig+0x470>)
 8002858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800285a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800285e:	60bb      	str	r3, [r7, #8]
 8002860:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002862:	2301      	movs	r3, #1
 8002864:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002866:	4b77      	ldr	r3, [pc, #476]	; (8002a44 <HAL_RCC_OscConfig+0x474>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800286e:	2b00      	cmp	r3, #0
 8002870:	d118      	bne.n	80028a4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002872:	4b74      	ldr	r3, [pc, #464]	; (8002a44 <HAL_RCC_OscConfig+0x474>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4a73      	ldr	r2, [pc, #460]	; (8002a44 <HAL_RCC_OscConfig+0x474>)
 8002878:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800287c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800287e:	f7fe fa2b 	bl	8000cd8 <HAL_GetTick>
 8002882:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002884:	e008      	b.n	8002898 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002886:	f7fe fa27 	bl	8000cd8 <HAL_GetTick>
 800288a:	4602      	mov	r2, r0
 800288c:	693b      	ldr	r3, [r7, #16]
 800288e:	1ad3      	subs	r3, r2, r3
 8002890:	2b02      	cmp	r3, #2
 8002892:	d901      	bls.n	8002898 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002894:	2303      	movs	r3, #3
 8002896:	e10c      	b.n	8002ab2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002898:	4b6a      	ldr	r3, [pc, #424]	; (8002a44 <HAL_RCC_OscConfig+0x474>)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d0f0      	beq.n	8002886 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	689b      	ldr	r3, [r3, #8]
 80028a8:	2b01      	cmp	r3, #1
 80028aa:	d106      	bne.n	80028ba <HAL_RCC_OscConfig+0x2ea>
 80028ac:	4b64      	ldr	r3, [pc, #400]	; (8002a40 <HAL_RCC_OscConfig+0x470>)
 80028ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028b0:	4a63      	ldr	r2, [pc, #396]	; (8002a40 <HAL_RCC_OscConfig+0x470>)
 80028b2:	f043 0301 	orr.w	r3, r3, #1
 80028b6:	6713      	str	r3, [r2, #112]	; 0x70
 80028b8:	e01c      	b.n	80028f4 <HAL_RCC_OscConfig+0x324>
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	689b      	ldr	r3, [r3, #8]
 80028be:	2b05      	cmp	r3, #5
 80028c0:	d10c      	bne.n	80028dc <HAL_RCC_OscConfig+0x30c>
 80028c2:	4b5f      	ldr	r3, [pc, #380]	; (8002a40 <HAL_RCC_OscConfig+0x470>)
 80028c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028c6:	4a5e      	ldr	r2, [pc, #376]	; (8002a40 <HAL_RCC_OscConfig+0x470>)
 80028c8:	f043 0304 	orr.w	r3, r3, #4
 80028cc:	6713      	str	r3, [r2, #112]	; 0x70
 80028ce:	4b5c      	ldr	r3, [pc, #368]	; (8002a40 <HAL_RCC_OscConfig+0x470>)
 80028d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028d2:	4a5b      	ldr	r2, [pc, #364]	; (8002a40 <HAL_RCC_OscConfig+0x470>)
 80028d4:	f043 0301 	orr.w	r3, r3, #1
 80028d8:	6713      	str	r3, [r2, #112]	; 0x70
 80028da:	e00b      	b.n	80028f4 <HAL_RCC_OscConfig+0x324>
 80028dc:	4b58      	ldr	r3, [pc, #352]	; (8002a40 <HAL_RCC_OscConfig+0x470>)
 80028de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028e0:	4a57      	ldr	r2, [pc, #348]	; (8002a40 <HAL_RCC_OscConfig+0x470>)
 80028e2:	f023 0301 	bic.w	r3, r3, #1
 80028e6:	6713      	str	r3, [r2, #112]	; 0x70
 80028e8:	4b55      	ldr	r3, [pc, #340]	; (8002a40 <HAL_RCC_OscConfig+0x470>)
 80028ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028ec:	4a54      	ldr	r2, [pc, #336]	; (8002a40 <HAL_RCC_OscConfig+0x470>)
 80028ee:	f023 0304 	bic.w	r3, r3, #4
 80028f2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	689b      	ldr	r3, [r3, #8]
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d015      	beq.n	8002928 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028fc:	f7fe f9ec 	bl	8000cd8 <HAL_GetTick>
 8002900:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002902:	e00a      	b.n	800291a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002904:	f7fe f9e8 	bl	8000cd8 <HAL_GetTick>
 8002908:	4602      	mov	r2, r0
 800290a:	693b      	ldr	r3, [r7, #16]
 800290c:	1ad3      	subs	r3, r2, r3
 800290e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002912:	4293      	cmp	r3, r2
 8002914:	d901      	bls.n	800291a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002916:	2303      	movs	r3, #3
 8002918:	e0cb      	b.n	8002ab2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800291a:	4b49      	ldr	r3, [pc, #292]	; (8002a40 <HAL_RCC_OscConfig+0x470>)
 800291c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800291e:	f003 0302 	and.w	r3, r3, #2
 8002922:	2b00      	cmp	r3, #0
 8002924:	d0ee      	beq.n	8002904 <HAL_RCC_OscConfig+0x334>
 8002926:	e014      	b.n	8002952 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002928:	f7fe f9d6 	bl	8000cd8 <HAL_GetTick>
 800292c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800292e:	e00a      	b.n	8002946 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002930:	f7fe f9d2 	bl	8000cd8 <HAL_GetTick>
 8002934:	4602      	mov	r2, r0
 8002936:	693b      	ldr	r3, [r7, #16]
 8002938:	1ad3      	subs	r3, r2, r3
 800293a:	f241 3288 	movw	r2, #5000	; 0x1388
 800293e:	4293      	cmp	r3, r2
 8002940:	d901      	bls.n	8002946 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002942:	2303      	movs	r3, #3
 8002944:	e0b5      	b.n	8002ab2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002946:	4b3e      	ldr	r3, [pc, #248]	; (8002a40 <HAL_RCC_OscConfig+0x470>)
 8002948:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800294a:	f003 0302 	and.w	r3, r3, #2
 800294e:	2b00      	cmp	r3, #0
 8002950:	d1ee      	bne.n	8002930 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002952:	7dfb      	ldrb	r3, [r7, #23]
 8002954:	2b01      	cmp	r3, #1
 8002956:	d105      	bne.n	8002964 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002958:	4b39      	ldr	r3, [pc, #228]	; (8002a40 <HAL_RCC_OscConfig+0x470>)
 800295a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800295c:	4a38      	ldr	r2, [pc, #224]	; (8002a40 <HAL_RCC_OscConfig+0x470>)
 800295e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002962:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	699b      	ldr	r3, [r3, #24]
 8002968:	2b00      	cmp	r3, #0
 800296a:	f000 80a1 	beq.w	8002ab0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800296e:	4b34      	ldr	r3, [pc, #208]	; (8002a40 <HAL_RCC_OscConfig+0x470>)
 8002970:	689b      	ldr	r3, [r3, #8]
 8002972:	f003 030c 	and.w	r3, r3, #12
 8002976:	2b08      	cmp	r3, #8
 8002978:	d05c      	beq.n	8002a34 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	699b      	ldr	r3, [r3, #24]
 800297e:	2b02      	cmp	r3, #2
 8002980:	d141      	bne.n	8002a06 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002982:	4b31      	ldr	r3, [pc, #196]	; (8002a48 <HAL_RCC_OscConfig+0x478>)
 8002984:	2200      	movs	r2, #0
 8002986:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002988:	f7fe f9a6 	bl	8000cd8 <HAL_GetTick>
 800298c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800298e:	e008      	b.n	80029a2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002990:	f7fe f9a2 	bl	8000cd8 <HAL_GetTick>
 8002994:	4602      	mov	r2, r0
 8002996:	693b      	ldr	r3, [r7, #16]
 8002998:	1ad3      	subs	r3, r2, r3
 800299a:	2b02      	cmp	r3, #2
 800299c:	d901      	bls.n	80029a2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800299e:	2303      	movs	r3, #3
 80029a0:	e087      	b.n	8002ab2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029a2:	4b27      	ldr	r3, [pc, #156]	; (8002a40 <HAL_RCC_OscConfig+0x470>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d1f0      	bne.n	8002990 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	69da      	ldr	r2, [r3, #28]
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6a1b      	ldr	r3, [r3, #32]
 80029b6:	431a      	orrs	r2, r3
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029bc:	019b      	lsls	r3, r3, #6
 80029be:	431a      	orrs	r2, r3
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029c4:	085b      	lsrs	r3, r3, #1
 80029c6:	3b01      	subs	r3, #1
 80029c8:	041b      	lsls	r3, r3, #16
 80029ca:	431a      	orrs	r2, r3
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029d0:	061b      	lsls	r3, r3, #24
 80029d2:	491b      	ldr	r1, [pc, #108]	; (8002a40 <HAL_RCC_OscConfig+0x470>)
 80029d4:	4313      	orrs	r3, r2
 80029d6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80029d8:	4b1b      	ldr	r3, [pc, #108]	; (8002a48 <HAL_RCC_OscConfig+0x478>)
 80029da:	2201      	movs	r2, #1
 80029dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029de:	f7fe f97b 	bl	8000cd8 <HAL_GetTick>
 80029e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029e4:	e008      	b.n	80029f8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029e6:	f7fe f977 	bl	8000cd8 <HAL_GetTick>
 80029ea:	4602      	mov	r2, r0
 80029ec:	693b      	ldr	r3, [r7, #16]
 80029ee:	1ad3      	subs	r3, r2, r3
 80029f0:	2b02      	cmp	r3, #2
 80029f2:	d901      	bls.n	80029f8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80029f4:	2303      	movs	r3, #3
 80029f6:	e05c      	b.n	8002ab2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029f8:	4b11      	ldr	r3, [pc, #68]	; (8002a40 <HAL_RCC_OscConfig+0x470>)
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d0f0      	beq.n	80029e6 <HAL_RCC_OscConfig+0x416>
 8002a04:	e054      	b.n	8002ab0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a06:	4b10      	ldr	r3, [pc, #64]	; (8002a48 <HAL_RCC_OscConfig+0x478>)
 8002a08:	2200      	movs	r2, #0
 8002a0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a0c:	f7fe f964 	bl	8000cd8 <HAL_GetTick>
 8002a10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a12:	e008      	b.n	8002a26 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a14:	f7fe f960 	bl	8000cd8 <HAL_GetTick>
 8002a18:	4602      	mov	r2, r0
 8002a1a:	693b      	ldr	r3, [r7, #16]
 8002a1c:	1ad3      	subs	r3, r2, r3
 8002a1e:	2b02      	cmp	r3, #2
 8002a20:	d901      	bls.n	8002a26 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002a22:	2303      	movs	r3, #3
 8002a24:	e045      	b.n	8002ab2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a26:	4b06      	ldr	r3, [pc, #24]	; (8002a40 <HAL_RCC_OscConfig+0x470>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d1f0      	bne.n	8002a14 <HAL_RCC_OscConfig+0x444>
 8002a32:	e03d      	b.n	8002ab0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	699b      	ldr	r3, [r3, #24]
 8002a38:	2b01      	cmp	r3, #1
 8002a3a:	d107      	bne.n	8002a4c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002a3c:	2301      	movs	r3, #1
 8002a3e:	e038      	b.n	8002ab2 <HAL_RCC_OscConfig+0x4e2>
 8002a40:	40023800 	.word	0x40023800
 8002a44:	40007000 	.word	0x40007000
 8002a48:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002a4c:	4b1b      	ldr	r3, [pc, #108]	; (8002abc <HAL_RCC_OscConfig+0x4ec>)
 8002a4e:	685b      	ldr	r3, [r3, #4]
 8002a50:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	699b      	ldr	r3, [r3, #24]
 8002a56:	2b01      	cmp	r3, #1
 8002a58:	d028      	beq.n	8002aac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a64:	429a      	cmp	r2, r3
 8002a66:	d121      	bne.n	8002aac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a72:	429a      	cmp	r2, r3
 8002a74:	d11a      	bne.n	8002aac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002a76:	68fa      	ldr	r2, [r7, #12]
 8002a78:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002a7c:	4013      	ands	r3, r2
 8002a7e:	687a      	ldr	r2, [r7, #4]
 8002a80:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002a82:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002a84:	4293      	cmp	r3, r2
 8002a86:	d111      	bne.n	8002aac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a92:	085b      	lsrs	r3, r3, #1
 8002a94:	3b01      	subs	r3, #1
 8002a96:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002a98:	429a      	cmp	r2, r3
 8002a9a:	d107      	bne.n	8002aac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aa6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002aa8:	429a      	cmp	r2, r3
 8002aaa:	d001      	beq.n	8002ab0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002aac:	2301      	movs	r3, #1
 8002aae:	e000      	b.n	8002ab2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002ab0:	2300      	movs	r3, #0
}
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	3718      	adds	r7, #24
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	bd80      	pop	{r7, pc}
 8002aba:	bf00      	nop
 8002abc:	40023800 	.word	0x40023800

08002ac0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b084      	sub	sp, #16
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
 8002ac8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d101      	bne.n	8002ad4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ad0:	2301      	movs	r3, #1
 8002ad2:	e0cc      	b.n	8002c6e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002ad4:	4b68      	ldr	r3, [pc, #416]	; (8002c78 <HAL_RCC_ClockConfig+0x1b8>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f003 0307 	and.w	r3, r3, #7
 8002adc:	683a      	ldr	r2, [r7, #0]
 8002ade:	429a      	cmp	r2, r3
 8002ae0:	d90c      	bls.n	8002afc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ae2:	4b65      	ldr	r3, [pc, #404]	; (8002c78 <HAL_RCC_ClockConfig+0x1b8>)
 8002ae4:	683a      	ldr	r2, [r7, #0]
 8002ae6:	b2d2      	uxtb	r2, r2
 8002ae8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002aea:	4b63      	ldr	r3, [pc, #396]	; (8002c78 <HAL_RCC_ClockConfig+0x1b8>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f003 0307 	and.w	r3, r3, #7
 8002af2:	683a      	ldr	r2, [r7, #0]
 8002af4:	429a      	cmp	r2, r3
 8002af6:	d001      	beq.n	8002afc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002af8:	2301      	movs	r3, #1
 8002afa:	e0b8      	b.n	8002c6e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f003 0302 	and.w	r3, r3, #2
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d020      	beq.n	8002b4a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f003 0304 	and.w	r3, r3, #4
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d005      	beq.n	8002b20 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002b14:	4b59      	ldr	r3, [pc, #356]	; (8002c7c <HAL_RCC_ClockConfig+0x1bc>)
 8002b16:	689b      	ldr	r3, [r3, #8]
 8002b18:	4a58      	ldr	r2, [pc, #352]	; (8002c7c <HAL_RCC_ClockConfig+0x1bc>)
 8002b1a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002b1e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f003 0308 	and.w	r3, r3, #8
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d005      	beq.n	8002b38 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002b2c:	4b53      	ldr	r3, [pc, #332]	; (8002c7c <HAL_RCC_ClockConfig+0x1bc>)
 8002b2e:	689b      	ldr	r3, [r3, #8]
 8002b30:	4a52      	ldr	r2, [pc, #328]	; (8002c7c <HAL_RCC_ClockConfig+0x1bc>)
 8002b32:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002b36:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b38:	4b50      	ldr	r3, [pc, #320]	; (8002c7c <HAL_RCC_ClockConfig+0x1bc>)
 8002b3a:	689b      	ldr	r3, [r3, #8]
 8002b3c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	689b      	ldr	r3, [r3, #8]
 8002b44:	494d      	ldr	r1, [pc, #308]	; (8002c7c <HAL_RCC_ClockConfig+0x1bc>)
 8002b46:	4313      	orrs	r3, r2
 8002b48:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f003 0301 	and.w	r3, r3, #1
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d044      	beq.n	8002be0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	685b      	ldr	r3, [r3, #4]
 8002b5a:	2b01      	cmp	r3, #1
 8002b5c:	d107      	bne.n	8002b6e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b5e:	4b47      	ldr	r3, [pc, #284]	; (8002c7c <HAL_RCC_ClockConfig+0x1bc>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d119      	bne.n	8002b9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	e07f      	b.n	8002c6e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	685b      	ldr	r3, [r3, #4]
 8002b72:	2b02      	cmp	r3, #2
 8002b74:	d003      	beq.n	8002b7e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b7a:	2b03      	cmp	r3, #3
 8002b7c:	d107      	bne.n	8002b8e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b7e:	4b3f      	ldr	r3, [pc, #252]	; (8002c7c <HAL_RCC_ClockConfig+0x1bc>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d109      	bne.n	8002b9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	e06f      	b.n	8002c6e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b8e:	4b3b      	ldr	r3, [pc, #236]	; (8002c7c <HAL_RCC_ClockConfig+0x1bc>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f003 0302 	and.w	r3, r3, #2
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d101      	bne.n	8002b9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b9a:	2301      	movs	r3, #1
 8002b9c:	e067      	b.n	8002c6e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b9e:	4b37      	ldr	r3, [pc, #220]	; (8002c7c <HAL_RCC_ClockConfig+0x1bc>)
 8002ba0:	689b      	ldr	r3, [r3, #8]
 8002ba2:	f023 0203 	bic.w	r2, r3, #3
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	685b      	ldr	r3, [r3, #4]
 8002baa:	4934      	ldr	r1, [pc, #208]	; (8002c7c <HAL_RCC_ClockConfig+0x1bc>)
 8002bac:	4313      	orrs	r3, r2
 8002bae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002bb0:	f7fe f892 	bl	8000cd8 <HAL_GetTick>
 8002bb4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bb6:	e00a      	b.n	8002bce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002bb8:	f7fe f88e 	bl	8000cd8 <HAL_GetTick>
 8002bbc:	4602      	mov	r2, r0
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	1ad3      	subs	r3, r2, r3
 8002bc2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bc6:	4293      	cmp	r3, r2
 8002bc8:	d901      	bls.n	8002bce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002bca:	2303      	movs	r3, #3
 8002bcc:	e04f      	b.n	8002c6e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bce:	4b2b      	ldr	r3, [pc, #172]	; (8002c7c <HAL_RCC_ClockConfig+0x1bc>)
 8002bd0:	689b      	ldr	r3, [r3, #8]
 8002bd2:	f003 020c 	and.w	r2, r3, #12
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	685b      	ldr	r3, [r3, #4]
 8002bda:	009b      	lsls	r3, r3, #2
 8002bdc:	429a      	cmp	r2, r3
 8002bde:	d1eb      	bne.n	8002bb8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002be0:	4b25      	ldr	r3, [pc, #148]	; (8002c78 <HAL_RCC_ClockConfig+0x1b8>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f003 0307 	and.w	r3, r3, #7
 8002be8:	683a      	ldr	r2, [r7, #0]
 8002bea:	429a      	cmp	r2, r3
 8002bec:	d20c      	bcs.n	8002c08 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bee:	4b22      	ldr	r3, [pc, #136]	; (8002c78 <HAL_RCC_ClockConfig+0x1b8>)
 8002bf0:	683a      	ldr	r2, [r7, #0]
 8002bf2:	b2d2      	uxtb	r2, r2
 8002bf4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bf6:	4b20      	ldr	r3, [pc, #128]	; (8002c78 <HAL_RCC_ClockConfig+0x1b8>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f003 0307 	and.w	r3, r3, #7
 8002bfe:	683a      	ldr	r2, [r7, #0]
 8002c00:	429a      	cmp	r2, r3
 8002c02:	d001      	beq.n	8002c08 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002c04:	2301      	movs	r3, #1
 8002c06:	e032      	b.n	8002c6e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f003 0304 	and.w	r3, r3, #4
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d008      	beq.n	8002c26 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c14:	4b19      	ldr	r3, [pc, #100]	; (8002c7c <HAL_RCC_ClockConfig+0x1bc>)
 8002c16:	689b      	ldr	r3, [r3, #8]
 8002c18:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	68db      	ldr	r3, [r3, #12]
 8002c20:	4916      	ldr	r1, [pc, #88]	; (8002c7c <HAL_RCC_ClockConfig+0x1bc>)
 8002c22:	4313      	orrs	r3, r2
 8002c24:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f003 0308 	and.w	r3, r3, #8
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d009      	beq.n	8002c46 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002c32:	4b12      	ldr	r3, [pc, #72]	; (8002c7c <HAL_RCC_ClockConfig+0x1bc>)
 8002c34:	689b      	ldr	r3, [r3, #8]
 8002c36:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	691b      	ldr	r3, [r3, #16]
 8002c3e:	00db      	lsls	r3, r3, #3
 8002c40:	490e      	ldr	r1, [pc, #56]	; (8002c7c <HAL_RCC_ClockConfig+0x1bc>)
 8002c42:	4313      	orrs	r3, r2
 8002c44:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002c46:	f000 f821 	bl	8002c8c <HAL_RCC_GetSysClockFreq>
 8002c4a:	4602      	mov	r2, r0
 8002c4c:	4b0b      	ldr	r3, [pc, #44]	; (8002c7c <HAL_RCC_ClockConfig+0x1bc>)
 8002c4e:	689b      	ldr	r3, [r3, #8]
 8002c50:	091b      	lsrs	r3, r3, #4
 8002c52:	f003 030f 	and.w	r3, r3, #15
 8002c56:	490a      	ldr	r1, [pc, #40]	; (8002c80 <HAL_RCC_ClockConfig+0x1c0>)
 8002c58:	5ccb      	ldrb	r3, [r1, r3]
 8002c5a:	fa22 f303 	lsr.w	r3, r2, r3
 8002c5e:	4a09      	ldr	r2, [pc, #36]	; (8002c84 <HAL_RCC_ClockConfig+0x1c4>)
 8002c60:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002c62:	4b09      	ldr	r3, [pc, #36]	; (8002c88 <HAL_RCC_ClockConfig+0x1c8>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	4618      	mov	r0, r3
 8002c68:	f7fd fff2 	bl	8000c50 <HAL_InitTick>

  return HAL_OK;
 8002c6c:	2300      	movs	r3, #0
}
 8002c6e:	4618      	mov	r0, r3
 8002c70:	3710      	adds	r7, #16
 8002c72:	46bd      	mov	sp, r7
 8002c74:	bd80      	pop	{r7, pc}
 8002c76:	bf00      	nop
 8002c78:	40023c00 	.word	0x40023c00
 8002c7c:	40023800 	.word	0x40023800
 8002c80:	080074ac 	.word	0x080074ac
 8002c84:	20000000 	.word	0x20000000
 8002c88:	20000028 	.word	0x20000028

08002c8c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c8c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002c90:	b090      	sub	sp, #64	; 0x40
 8002c92:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002c94:	2300      	movs	r3, #0
 8002c96:	637b      	str	r3, [r7, #52]	; 0x34
 8002c98:	2300      	movs	r3, #0
 8002c9a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002ca4:	4b59      	ldr	r3, [pc, #356]	; (8002e0c <HAL_RCC_GetSysClockFreq+0x180>)
 8002ca6:	689b      	ldr	r3, [r3, #8]
 8002ca8:	f003 030c 	and.w	r3, r3, #12
 8002cac:	2b08      	cmp	r3, #8
 8002cae:	d00d      	beq.n	8002ccc <HAL_RCC_GetSysClockFreq+0x40>
 8002cb0:	2b08      	cmp	r3, #8
 8002cb2:	f200 80a1 	bhi.w	8002df8 <HAL_RCC_GetSysClockFreq+0x16c>
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d002      	beq.n	8002cc0 <HAL_RCC_GetSysClockFreq+0x34>
 8002cba:	2b04      	cmp	r3, #4
 8002cbc:	d003      	beq.n	8002cc6 <HAL_RCC_GetSysClockFreq+0x3a>
 8002cbe:	e09b      	b.n	8002df8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002cc0:	4b53      	ldr	r3, [pc, #332]	; (8002e10 <HAL_RCC_GetSysClockFreq+0x184>)
 8002cc2:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8002cc4:	e09b      	b.n	8002dfe <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002cc6:	4b53      	ldr	r3, [pc, #332]	; (8002e14 <HAL_RCC_GetSysClockFreq+0x188>)
 8002cc8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002cca:	e098      	b.n	8002dfe <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002ccc:	4b4f      	ldr	r3, [pc, #316]	; (8002e0c <HAL_RCC_GetSysClockFreq+0x180>)
 8002cce:	685b      	ldr	r3, [r3, #4]
 8002cd0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002cd4:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002cd6:	4b4d      	ldr	r3, [pc, #308]	; (8002e0c <HAL_RCC_GetSysClockFreq+0x180>)
 8002cd8:	685b      	ldr	r3, [r3, #4]
 8002cda:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d028      	beq.n	8002d34 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ce2:	4b4a      	ldr	r3, [pc, #296]	; (8002e0c <HAL_RCC_GetSysClockFreq+0x180>)
 8002ce4:	685b      	ldr	r3, [r3, #4]
 8002ce6:	099b      	lsrs	r3, r3, #6
 8002ce8:	2200      	movs	r2, #0
 8002cea:	623b      	str	r3, [r7, #32]
 8002cec:	627a      	str	r2, [r7, #36]	; 0x24
 8002cee:	6a3b      	ldr	r3, [r7, #32]
 8002cf0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002cf4:	2100      	movs	r1, #0
 8002cf6:	4b47      	ldr	r3, [pc, #284]	; (8002e14 <HAL_RCC_GetSysClockFreq+0x188>)
 8002cf8:	fb03 f201 	mul.w	r2, r3, r1
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	fb00 f303 	mul.w	r3, r0, r3
 8002d02:	4413      	add	r3, r2
 8002d04:	4a43      	ldr	r2, [pc, #268]	; (8002e14 <HAL_RCC_GetSysClockFreq+0x188>)
 8002d06:	fba0 1202 	umull	r1, r2, r0, r2
 8002d0a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002d0c:	460a      	mov	r2, r1
 8002d0e:	62ba      	str	r2, [r7, #40]	; 0x28
 8002d10:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002d12:	4413      	add	r3, r2
 8002d14:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d18:	2200      	movs	r2, #0
 8002d1a:	61bb      	str	r3, [r7, #24]
 8002d1c:	61fa      	str	r2, [r7, #28]
 8002d1e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002d22:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002d26:	f7fd faab 	bl	8000280 <__aeabi_uldivmod>
 8002d2a:	4602      	mov	r2, r0
 8002d2c:	460b      	mov	r3, r1
 8002d2e:	4613      	mov	r3, r2
 8002d30:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002d32:	e053      	b.n	8002ddc <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d34:	4b35      	ldr	r3, [pc, #212]	; (8002e0c <HAL_RCC_GetSysClockFreq+0x180>)
 8002d36:	685b      	ldr	r3, [r3, #4]
 8002d38:	099b      	lsrs	r3, r3, #6
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	613b      	str	r3, [r7, #16]
 8002d3e:	617a      	str	r2, [r7, #20]
 8002d40:	693b      	ldr	r3, [r7, #16]
 8002d42:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002d46:	f04f 0b00 	mov.w	fp, #0
 8002d4a:	4652      	mov	r2, sl
 8002d4c:	465b      	mov	r3, fp
 8002d4e:	f04f 0000 	mov.w	r0, #0
 8002d52:	f04f 0100 	mov.w	r1, #0
 8002d56:	0159      	lsls	r1, r3, #5
 8002d58:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002d5c:	0150      	lsls	r0, r2, #5
 8002d5e:	4602      	mov	r2, r0
 8002d60:	460b      	mov	r3, r1
 8002d62:	ebb2 080a 	subs.w	r8, r2, sl
 8002d66:	eb63 090b 	sbc.w	r9, r3, fp
 8002d6a:	f04f 0200 	mov.w	r2, #0
 8002d6e:	f04f 0300 	mov.w	r3, #0
 8002d72:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002d76:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002d7a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002d7e:	ebb2 0408 	subs.w	r4, r2, r8
 8002d82:	eb63 0509 	sbc.w	r5, r3, r9
 8002d86:	f04f 0200 	mov.w	r2, #0
 8002d8a:	f04f 0300 	mov.w	r3, #0
 8002d8e:	00eb      	lsls	r3, r5, #3
 8002d90:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002d94:	00e2      	lsls	r2, r4, #3
 8002d96:	4614      	mov	r4, r2
 8002d98:	461d      	mov	r5, r3
 8002d9a:	eb14 030a 	adds.w	r3, r4, sl
 8002d9e:	603b      	str	r3, [r7, #0]
 8002da0:	eb45 030b 	adc.w	r3, r5, fp
 8002da4:	607b      	str	r3, [r7, #4]
 8002da6:	f04f 0200 	mov.w	r2, #0
 8002daa:	f04f 0300 	mov.w	r3, #0
 8002dae:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002db2:	4629      	mov	r1, r5
 8002db4:	028b      	lsls	r3, r1, #10
 8002db6:	4621      	mov	r1, r4
 8002db8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002dbc:	4621      	mov	r1, r4
 8002dbe:	028a      	lsls	r2, r1, #10
 8002dc0:	4610      	mov	r0, r2
 8002dc2:	4619      	mov	r1, r3
 8002dc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	60bb      	str	r3, [r7, #8]
 8002dca:	60fa      	str	r2, [r7, #12]
 8002dcc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002dd0:	f7fd fa56 	bl	8000280 <__aeabi_uldivmod>
 8002dd4:	4602      	mov	r2, r0
 8002dd6:	460b      	mov	r3, r1
 8002dd8:	4613      	mov	r3, r2
 8002dda:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002ddc:	4b0b      	ldr	r3, [pc, #44]	; (8002e0c <HAL_RCC_GetSysClockFreq+0x180>)
 8002dde:	685b      	ldr	r3, [r3, #4]
 8002de0:	0c1b      	lsrs	r3, r3, #16
 8002de2:	f003 0303 	and.w	r3, r3, #3
 8002de6:	3301      	adds	r3, #1
 8002de8:	005b      	lsls	r3, r3, #1
 8002dea:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8002dec:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002dee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002df0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002df4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002df6:	e002      	b.n	8002dfe <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002df8:	4b05      	ldr	r3, [pc, #20]	; (8002e10 <HAL_RCC_GetSysClockFreq+0x184>)
 8002dfa:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002dfc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002dfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002e00:	4618      	mov	r0, r3
 8002e02:	3740      	adds	r7, #64	; 0x40
 8002e04:	46bd      	mov	sp, r7
 8002e06:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002e0a:	bf00      	nop
 8002e0c:	40023800 	.word	0x40023800
 8002e10:	00f42400 	.word	0x00f42400
 8002e14:	017d7840 	.word	0x017d7840

08002e18 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e18:	b480      	push	{r7}
 8002e1a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e1c:	4b03      	ldr	r3, [pc, #12]	; (8002e2c <HAL_RCC_GetHCLKFreq+0x14>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
}
 8002e20:	4618      	mov	r0, r3
 8002e22:	46bd      	mov	sp, r7
 8002e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e28:	4770      	bx	lr
 8002e2a:	bf00      	nop
 8002e2c:	20000000 	.word	0x20000000

08002e30 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002e30:	b084      	sub	sp, #16
 8002e32:	b580      	push	{r7, lr}
 8002e34:	b084      	sub	sp, #16
 8002e36:	af00      	add	r7, sp, #0
 8002e38:	6078      	str	r0, [r7, #4]
 8002e3a:	f107 001c 	add.w	r0, r7, #28
 8002e3e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002e42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e44:	2b01      	cmp	r3, #1
 8002e46:	d122      	bne.n	8002e8e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e4c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	68db      	ldr	r3, [r3, #12]
 8002e58:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8002e5c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002e60:	687a      	ldr	r2, [r7, #4]
 8002e62:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	68db      	ldr	r3, [r3, #12]
 8002e68:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8002e70:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e72:	2b01      	cmp	r3, #1
 8002e74:	d105      	bne.n	8002e82 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	68db      	ldr	r3, [r3, #12]
 8002e7a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8002e82:	6878      	ldr	r0, [r7, #4]
 8002e84:	f001 fb1c 	bl	80044c0 <USB_CoreReset>
 8002e88:	4603      	mov	r3, r0
 8002e8a:	73fb      	strb	r3, [r7, #15]
 8002e8c:	e01a      	b.n	8002ec4 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	68db      	ldr	r3, [r3, #12]
 8002e92:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8002e9a:	6878      	ldr	r0, [r7, #4]
 8002e9c:	f001 fb10 	bl	80044c0 <USB_CoreReset>
 8002ea0:	4603      	mov	r3, r0
 8002ea2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8002ea4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d106      	bne.n	8002eb8 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002eae:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	639a      	str	r2, [r3, #56]	; 0x38
 8002eb6:	e005      	b.n	8002ec4 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ebc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8002ec4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ec6:	2b01      	cmp	r3, #1
 8002ec8:	d10b      	bne.n	8002ee2 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	689b      	ldr	r3, [r3, #8]
 8002ece:	f043 0206 	orr.w	r2, r3, #6
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	689b      	ldr	r3, [r3, #8]
 8002eda:	f043 0220 	orr.w	r2, r3, #32
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8002ee2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	3710      	adds	r7, #16
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002eee:	b004      	add	sp, #16
 8002ef0:	4770      	bx	lr
	...

08002ef4 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	b087      	sub	sp, #28
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	60f8      	str	r0, [r7, #12]
 8002efc:	60b9      	str	r1, [r7, #8]
 8002efe:	4613      	mov	r3, r2
 8002f00:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8002f02:	79fb      	ldrb	r3, [r7, #7]
 8002f04:	2b02      	cmp	r3, #2
 8002f06:	d165      	bne.n	8002fd4 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8002f08:	68bb      	ldr	r3, [r7, #8]
 8002f0a:	4a41      	ldr	r2, [pc, #260]	; (8003010 <USB_SetTurnaroundTime+0x11c>)
 8002f0c:	4293      	cmp	r3, r2
 8002f0e:	d906      	bls.n	8002f1e <USB_SetTurnaroundTime+0x2a>
 8002f10:	68bb      	ldr	r3, [r7, #8]
 8002f12:	4a40      	ldr	r2, [pc, #256]	; (8003014 <USB_SetTurnaroundTime+0x120>)
 8002f14:	4293      	cmp	r3, r2
 8002f16:	d202      	bcs.n	8002f1e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8002f18:	230f      	movs	r3, #15
 8002f1a:	617b      	str	r3, [r7, #20]
 8002f1c:	e062      	b.n	8002fe4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8002f1e:	68bb      	ldr	r3, [r7, #8]
 8002f20:	4a3c      	ldr	r2, [pc, #240]	; (8003014 <USB_SetTurnaroundTime+0x120>)
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d306      	bcc.n	8002f34 <USB_SetTurnaroundTime+0x40>
 8002f26:	68bb      	ldr	r3, [r7, #8]
 8002f28:	4a3b      	ldr	r2, [pc, #236]	; (8003018 <USB_SetTurnaroundTime+0x124>)
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d202      	bcs.n	8002f34 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8002f2e:	230e      	movs	r3, #14
 8002f30:	617b      	str	r3, [r7, #20]
 8002f32:	e057      	b.n	8002fe4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8002f34:	68bb      	ldr	r3, [r7, #8]
 8002f36:	4a38      	ldr	r2, [pc, #224]	; (8003018 <USB_SetTurnaroundTime+0x124>)
 8002f38:	4293      	cmp	r3, r2
 8002f3a:	d306      	bcc.n	8002f4a <USB_SetTurnaroundTime+0x56>
 8002f3c:	68bb      	ldr	r3, [r7, #8]
 8002f3e:	4a37      	ldr	r2, [pc, #220]	; (800301c <USB_SetTurnaroundTime+0x128>)
 8002f40:	4293      	cmp	r3, r2
 8002f42:	d202      	bcs.n	8002f4a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8002f44:	230d      	movs	r3, #13
 8002f46:	617b      	str	r3, [r7, #20]
 8002f48:	e04c      	b.n	8002fe4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8002f4a:	68bb      	ldr	r3, [r7, #8]
 8002f4c:	4a33      	ldr	r2, [pc, #204]	; (800301c <USB_SetTurnaroundTime+0x128>)
 8002f4e:	4293      	cmp	r3, r2
 8002f50:	d306      	bcc.n	8002f60 <USB_SetTurnaroundTime+0x6c>
 8002f52:	68bb      	ldr	r3, [r7, #8]
 8002f54:	4a32      	ldr	r2, [pc, #200]	; (8003020 <USB_SetTurnaroundTime+0x12c>)
 8002f56:	4293      	cmp	r3, r2
 8002f58:	d802      	bhi.n	8002f60 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8002f5a:	230c      	movs	r3, #12
 8002f5c:	617b      	str	r3, [r7, #20]
 8002f5e:	e041      	b.n	8002fe4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8002f60:	68bb      	ldr	r3, [r7, #8]
 8002f62:	4a2f      	ldr	r2, [pc, #188]	; (8003020 <USB_SetTurnaroundTime+0x12c>)
 8002f64:	4293      	cmp	r3, r2
 8002f66:	d906      	bls.n	8002f76 <USB_SetTurnaroundTime+0x82>
 8002f68:	68bb      	ldr	r3, [r7, #8]
 8002f6a:	4a2e      	ldr	r2, [pc, #184]	; (8003024 <USB_SetTurnaroundTime+0x130>)
 8002f6c:	4293      	cmp	r3, r2
 8002f6e:	d802      	bhi.n	8002f76 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8002f70:	230b      	movs	r3, #11
 8002f72:	617b      	str	r3, [r7, #20]
 8002f74:	e036      	b.n	8002fe4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8002f76:	68bb      	ldr	r3, [r7, #8]
 8002f78:	4a2a      	ldr	r2, [pc, #168]	; (8003024 <USB_SetTurnaroundTime+0x130>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d906      	bls.n	8002f8c <USB_SetTurnaroundTime+0x98>
 8002f7e:	68bb      	ldr	r3, [r7, #8]
 8002f80:	4a29      	ldr	r2, [pc, #164]	; (8003028 <USB_SetTurnaroundTime+0x134>)
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d802      	bhi.n	8002f8c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8002f86:	230a      	movs	r3, #10
 8002f88:	617b      	str	r3, [r7, #20]
 8002f8a:	e02b      	b.n	8002fe4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8002f8c:	68bb      	ldr	r3, [r7, #8]
 8002f8e:	4a26      	ldr	r2, [pc, #152]	; (8003028 <USB_SetTurnaroundTime+0x134>)
 8002f90:	4293      	cmp	r3, r2
 8002f92:	d906      	bls.n	8002fa2 <USB_SetTurnaroundTime+0xae>
 8002f94:	68bb      	ldr	r3, [r7, #8]
 8002f96:	4a25      	ldr	r2, [pc, #148]	; (800302c <USB_SetTurnaroundTime+0x138>)
 8002f98:	4293      	cmp	r3, r2
 8002f9a:	d202      	bcs.n	8002fa2 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8002f9c:	2309      	movs	r3, #9
 8002f9e:	617b      	str	r3, [r7, #20]
 8002fa0:	e020      	b.n	8002fe4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8002fa2:	68bb      	ldr	r3, [r7, #8]
 8002fa4:	4a21      	ldr	r2, [pc, #132]	; (800302c <USB_SetTurnaroundTime+0x138>)
 8002fa6:	4293      	cmp	r3, r2
 8002fa8:	d306      	bcc.n	8002fb8 <USB_SetTurnaroundTime+0xc4>
 8002faa:	68bb      	ldr	r3, [r7, #8]
 8002fac:	4a20      	ldr	r2, [pc, #128]	; (8003030 <USB_SetTurnaroundTime+0x13c>)
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d802      	bhi.n	8002fb8 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8002fb2:	2308      	movs	r3, #8
 8002fb4:	617b      	str	r3, [r7, #20]
 8002fb6:	e015      	b.n	8002fe4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8002fb8:	68bb      	ldr	r3, [r7, #8]
 8002fba:	4a1d      	ldr	r2, [pc, #116]	; (8003030 <USB_SetTurnaroundTime+0x13c>)
 8002fbc:	4293      	cmp	r3, r2
 8002fbe:	d906      	bls.n	8002fce <USB_SetTurnaroundTime+0xda>
 8002fc0:	68bb      	ldr	r3, [r7, #8]
 8002fc2:	4a1c      	ldr	r2, [pc, #112]	; (8003034 <USB_SetTurnaroundTime+0x140>)
 8002fc4:	4293      	cmp	r3, r2
 8002fc6:	d202      	bcs.n	8002fce <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8002fc8:	2307      	movs	r3, #7
 8002fca:	617b      	str	r3, [r7, #20]
 8002fcc:	e00a      	b.n	8002fe4 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8002fce:	2306      	movs	r3, #6
 8002fd0:	617b      	str	r3, [r7, #20]
 8002fd2:	e007      	b.n	8002fe4 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8002fd4:	79fb      	ldrb	r3, [r7, #7]
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d102      	bne.n	8002fe0 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8002fda:	2309      	movs	r3, #9
 8002fdc:	617b      	str	r3, [r7, #20]
 8002fde:	e001      	b.n	8002fe4 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8002fe0:	2309      	movs	r3, #9
 8002fe2:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	68db      	ldr	r3, [r3, #12]
 8002fe8:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	68da      	ldr	r2, [r3, #12]
 8002ff4:	697b      	ldr	r3, [r7, #20]
 8002ff6:	029b      	lsls	r3, r3, #10
 8002ff8:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8002ffc:	431a      	orrs	r2, r3
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003002:	2300      	movs	r3, #0
}
 8003004:	4618      	mov	r0, r3
 8003006:	371c      	adds	r7, #28
 8003008:	46bd      	mov	sp, r7
 800300a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300e:	4770      	bx	lr
 8003010:	00d8acbf 	.word	0x00d8acbf
 8003014:	00e4e1c0 	.word	0x00e4e1c0
 8003018:	00f42400 	.word	0x00f42400
 800301c:	01067380 	.word	0x01067380
 8003020:	011a499f 	.word	0x011a499f
 8003024:	01312cff 	.word	0x01312cff
 8003028:	014ca43f 	.word	0x014ca43f
 800302c:	016e3600 	.word	0x016e3600
 8003030:	01a6ab1f 	.word	0x01a6ab1f
 8003034:	01e84800 	.word	0x01e84800

08003038 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003038:	b480      	push	{r7}
 800303a:	b083      	sub	sp, #12
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	689b      	ldr	r3, [r3, #8]
 8003044:	f043 0201 	orr.w	r2, r3, #1
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800304c:	2300      	movs	r3, #0
}
 800304e:	4618      	mov	r0, r3
 8003050:	370c      	adds	r7, #12
 8003052:	46bd      	mov	sp, r7
 8003054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003058:	4770      	bx	lr

0800305a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800305a:	b480      	push	{r7}
 800305c:	b083      	sub	sp, #12
 800305e:	af00      	add	r7, sp, #0
 8003060:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	689b      	ldr	r3, [r3, #8]
 8003066:	f023 0201 	bic.w	r2, r3, #1
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800306e:	2300      	movs	r3, #0
}
 8003070:	4618      	mov	r0, r3
 8003072:	370c      	adds	r7, #12
 8003074:	46bd      	mov	sp, r7
 8003076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307a:	4770      	bx	lr

0800307c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800307c:	b580      	push	{r7, lr}
 800307e:	b084      	sub	sp, #16
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
 8003084:	460b      	mov	r3, r1
 8003086:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003088:	2300      	movs	r3, #0
 800308a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	68db      	ldr	r3, [r3, #12]
 8003090:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003098:	78fb      	ldrb	r3, [r7, #3]
 800309a:	2b01      	cmp	r3, #1
 800309c:	d115      	bne.n	80030ca <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	68db      	ldr	r3, [r3, #12]
 80030a2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80030aa:	2001      	movs	r0, #1
 80030ac:	f7fd fe20 	bl	8000cf0 <HAL_Delay>
      ms++;
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	3301      	adds	r3, #1
 80030b4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80030b6:	6878      	ldr	r0, [r7, #4]
 80030b8:	f001 f972 	bl	80043a0 <USB_GetMode>
 80030bc:	4603      	mov	r3, r0
 80030be:	2b01      	cmp	r3, #1
 80030c0:	d01e      	beq.n	8003100 <USB_SetCurrentMode+0x84>
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	2b31      	cmp	r3, #49	; 0x31
 80030c6:	d9f0      	bls.n	80030aa <USB_SetCurrentMode+0x2e>
 80030c8:	e01a      	b.n	8003100 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80030ca:	78fb      	ldrb	r3, [r7, #3]
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d115      	bne.n	80030fc <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	68db      	ldr	r3, [r3, #12]
 80030d4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80030dc:	2001      	movs	r0, #1
 80030de:	f7fd fe07 	bl	8000cf0 <HAL_Delay>
      ms++;
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	3301      	adds	r3, #1
 80030e6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80030e8:	6878      	ldr	r0, [r7, #4]
 80030ea:	f001 f959 	bl	80043a0 <USB_GetMode>
 80030ee:	4603      	mov	r3, r0
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d005      	beq.n	8003100 <USB_SetCurrentMode+0x84>
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	2b31      	cmp	r3, #49	; 0x31
 80030f8:	d9f0      	bls.n	80030dc <USB_SetCurrentMode+0x60>
 80030fa:	e001      	b.n	8003100 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80030fc:	2301      	movs	r3, #1
 80030fe:	e005      	b.n	800310c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	2b32      	cmp	r3, #50	; 0x32
 8003104:	d101      	bne.n	800310a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8003106:	2301      	movs	r3, #1
 8003108:	e000      	b.n	800310c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800310a:	2300      	movs	r3, #0
}
 800310c:	4618      	mov	r0, r3
 800310e:	3710      	adds	r7, #16
 8003110:	46bd      	mov	sp, r7
 8003112:	bd80      	pop	{r7, pc}

08003114 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003114:	b084      	sub	sp, #16
 8003116:	b580      	push	{r7, lr}
 8003118:	b086      	sub	sp, #24
 800311a:	af00      	add	r7, sp, #0
 800311c:	6078      	str	r0, [r7, #4]
 800311e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003122:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003126:	2300      	movs	r3, #0
 8003128:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800312e:	2300      	movs	r3, #0
 8003130:	613b      	str	r3, [r7, #16]
 8003132:	e009      	b.n	8003148 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003134:	687a      	ldr	r2, [r7, #4]
 8003136:	693b      	ldr	r3, [r7, #16]
 8003138:	3340      	adds	r3, #64	; 0x40
 800313a:	009b      	lsls	r3, r3, #2
 800313c:	4413      	add	r3, r2
 800313e:	2200      	movs	r2, #0
 8003140:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003142:	693b      	ldr	r3, [r7, #16]
 8003144:	3301      	adds	r3, #1
 8003146:	613b      	str	r3, [r7, #16]
 8003148:	693b      	ldr	r3, [r7, #16]
 800314a:	2b0e      	cmp	r3, #14
 800314c:	d9f2      	bls.n	8003134 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800314e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003150:	2b00      	cmp	r3, #0
 8003152:	d11c      	bne.n	800318e <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800315a:	685b      	ldr	r3, [r3, #4]
 800315c:	68fa      	ldr	r2, [r7, #12]
 800315e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003162:	f043 0302 	orr.w	r3, r3, #2
 8003166:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800316c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003178:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003184:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	639a      	str	r2, [r3, #56]	; 0x38
 800318c:	e00b      	b.n	80031a6 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003192:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800319e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80031ac:	461a      	mov	r2, r3
 80031ae:	2300      	movs	r3, #0
 80031b0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80031b8:	4619      	mov	r1, r3
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80031c0:	461a      	mov	r2, r3
 80031c2:	680b      	ldr	r3, [r1, #0]
 80031c4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80031c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031c8:	2b01      	cmp	r3, #1
 80031ca:	d10c      	bne.n	80031e6 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80031cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d104      	bne.n	80031dc <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80031d2:	2100      	movs	r1, #0
 80031d4:	6878      	ldr	r0, [r7, #4]
 80031d6:	f000 f945 	bl	8003464 <USB_SetDevSpeed>
 80031da:	e008      	b.n	80031ee <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80031dc:	2101      	movs	r1, #1
 80031de:	6878      	ldr	r0, [r7, #4]
 80031e0:	f000 f940 	bl	8003464 <USB_SetDevSpeed>
 80031e4:	e003      	b.n	80031ee <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80031e6:	2103      	movs	r1, #3
 80031e8:	6878      	ldr	r0, [r7, #4]
 80031ea:	f000 f93b 	bl	8003464 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80031ee:	2110      	movs	r1, #16
 80031f0:	6878      	ldr	r0, [r7, #4]
 80031f2:	f000 f8f3 	bl	80033dc <USB_FlushTxFifo>
 80031f6:	4603      	mov	r3, r0
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d001      	beq.n	8003200 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80031fc:	2301      	movs	r3, #1
 80031fe:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003200:	6878      	ldr	r0, [r7, #4]
 8003202:	f000 f90f 	bl	8003424 <USB_FlushRxFifo>
 8003206:	4603      	mov	r3, r0
 8003208:	2b00      	cmp	r3, #0
 800320a:	d001      	beq.n	8003210 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800320c:	2301      	movs	r3, #1
 800320e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003216:	461a      	mov	r2, r3
 8003218:	2300      	movs	r3, #0
 800321a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003222:	461a      	mov	r2, r3
 8003224:	2300      	movs	r3, #0
 8003226:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800322e:	461a      	mov	r2, r3
 8003230:	2300      	movs	r3, #0
 8003232:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003234:	2300      	movs	r3, #0
 8003236:	613b      	str	r3, [r7, #16]
 8003238:	e043      	b.n	80032c2 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800323a:	693b      	ldr	r3, [r7, #16]
 800323c:	015a      	lsls	r2, r3, #5
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	4413      	add	r3, r2
 8003242:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800324c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003250:	d118      	bne.n	8003284 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8003252:	693b      	ldr	r3, [r7, #16]
 8003254:	2b00      	cmp	r3, #0
 8003256:	d10a      	bne.n	800326e <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003258:	693b      	ldr	r3, [r7, #16]
 800325a:	015a      	lsls	r2, r3, #5
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	4413      	add	r3, r2
 8003260:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003264:	461a      	mov	r2, r3
 8003266:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800326a:	6013      	str	r3, [r2, #0]
 800326c:	e013      	b.n	8003296 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800326e:	693b      	ldr	r3, [r7, #16]
 8003270:	015a      	lsls	r2, r3, #5
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	4413      	add	r3, r2
 8003276:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800327a:	461a      	mov	r2, r3
 800327c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003280:	6013      	str	r3, [r2, #0]
 8003282:	e008      	b.n	8003296 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003284:	693b      	ldr	r3, [r7, #16]
 8003286:	015a      	lsls	r2, r3, #5
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	4413      	add	r3, r2
 800328c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003290:	461a      	mov	r2, r3
 8003292:	2300      	movs	r3, #0
 8003294:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003296:	693b      	ldr	r3, [r7, #16]
 8003298:	015a      	lsls	r2, r3, #5
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	4413      	add	r3, r2
 800329e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80032a2:	461a      	mov	r2, r3
 80032a4:	2300      	movs	r3, #0
 80032a6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80032a8:	693b      	ldr	r3, [r7, #16]
 80032aa:	015a      	lsls	r2, r3, #5
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	4413      	add	r3, r2
 80032b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80032b4:	461a      	mov	r2, r3
 80032b6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80032ba:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80032bc:	693b      	ldr	r3, [r7, #16]
 80032be:	3301      	adds	r3, #1
 80032c0:	613b      	str	r3, [r7, #16]
 80032c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032c4:	693a      	ldr	r2, [r7, #16]
 80032c6:	429a      	cmp	r2, r3
 80032c8:	d3b7      	bcc.n	800323a <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80032ca:	2300      	movs	r3, #0
 80032cc:	613b      	str	r3, [r7, #16]
 80032ce:	e043      	b.n	8003358 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80032d0:	693b      	ldr	r3, [r7, #16]
 80032d2:	015a      	lsls	r2, r3, #5
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	4413      	add	r3, r2
 80032d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80032e2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80032e6:	d118      	bne.n	800331a <USB_DevInit+0x206>
    {
      if (i == 0U)
 80032e8:	693b      	ldr	r3, [r7, #16]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d10a      	bne.n	8003304 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80032ee:	693b      	ldr	r3, [r7, #16]
 80032f0:	015a      	lsls	r2, r3, #5
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	4413      	add	r3, r2
 80032f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032fa:	461a      	mov	r2, r3
 80032fc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003300:	6013      	str	r3, [r2, #0]
 8003302:	e013      	b.n	800332c <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003304:	693b      	ldr	r3, [r7, #16]
 8003306:	015a      	lsls	r2, r3, #5
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	4413      	add	r3, r2
 800330c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003310:	461a      	mov	r2, r3
 8003312:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003316:	6013      	str	r3, [r2, #0]
 8003318:	e008      	b.n	800332c <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800331a:	693b      	ldr	r3, [r7, #16]
 800331c:	015a      	lsls	r2, r3, #5
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	4413      	add	r3, r2
 8003322:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003326:	461a      	mov	r2, r3
 8003328:	2300      	movs	r3, #0
 800332a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800332c:	693b      	ldr	r3, [r7, #16]
 800332e:	015a      	lsls	r2, r3, #5
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	4413      	add	r3, r2
 8003334:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003338:	461a      	mov	r2, r3
 800333a:	2300      	movs	r3, #0
 800333c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800333e:	693b      	ldr	r3, [r7, #16]
 8003340:	015a      	lsls	r2, r3, #5
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	4413      	add	r3, r2
 8003346:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800334a:	461a      	mov	r2, r3
 800334c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003350:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003352:	693b      	ldr	r3, [r7, #16]
 8003354:	3301      	adds	r3, #1
 8003356:	613b      	str	r3, [r7, #16]
 8003358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800335a:	693a      	ldr	r2, [r7, #16]
 800335c:	429a      	cmp	r2, r3
 800335e:	d3b7      	bcc.n	80032d0 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003366:	691b      	ldr	r3, [r3, #16]
 8003368:	68fa      	ldr	r2, [r7, #12]
 800336a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800336e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003372:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2200      	movs	r2, #0
 8003378:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8003380:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003382:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003384:	2b00      	cmp	r3, #0
 8003386:	d105      	bne.n	8003394 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	699b      	ldr	r3, [r3, #24]
 800338c:	f043 0210 	orr.w	r2, r3, #16
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	699a      	ldr	r2, [r3, #24]
 8003398:	4b0f      	ldr	r3, [pc, #60]	; (80033d8 <USB_DevInit+0x2c4>)
 800339a:	4313      	orrs	r3, r2
 800339c:	687a      	ldr	r2, [r7, #4]
 800339e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80033a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d005      	beq.n	80033b2 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	699b      	ldr	r3, [r3, #24]
 80033aa:	f043 0208 	orr.w	r2, r3, #8
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80033b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80033b4:	2b01      	cmp	r3, #1
 80033b6:	d107      	bne.n	80033c8 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	699b      	ldr	r3, [r3, #24]
 80033bc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80033c0:	f043 0304 	orr.w	r3, r3, #4
 80033c4:	687a      	ldr	r2, [r7, #4]
 80033c6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80033c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80033ca:	4618      	mov	r0, r3
 80033cc:	3718      	adds	r7, #24
 80033ce:	46bd      	mov	sp, r7
 80033d0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80033d4:	b004      	add	sp, #16
 80033d6:	4770      	bx	lr
 80033d8:	803c3800 	.word	0x803c3800

080033dc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80033dc:	b480      	push	{r7}
 80033de:	b085      	sub	sp, #20
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
 80033e4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80033e6:	2300      	movs	r3, #0
 80033e8:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	019b      	lsls	r3, r3, #6
 80033ee:	f043 0220 	orr.w	r2, r3, #32
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	3301      	adds	r3, #1
 80033fa:	60fb      	str	r3, [r7, #12]
 80033fc:	4a08      	ldr	r2, [pc, #32]	; (8003420 <USB_FlushTxFifo+0x44>)
 80033fe:	4293      	cmp	r3, r2
 8003400:	d901      	bls.n	8003406 <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 8003402:	2303      	movs	r3, #3
 8003404:	e006      	b.n	8003414 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	691b      	ldr	r3, [r3, #16]
 800340a:	f003 0320 	and.w	r3, r3, #32
 800340e:	2b20      	cmp	r3, #32
 8003410:	d0f1      	beq.n	80033f6 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8003412:	2300      	movs	r3, #0
}
 8003414:	4618      	mov	r0, r3
 8003416:	3714      	adds	r7, #20
 8003418:	46bd      	mov	sp, r7
 800341a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341e:	4770      	bx	lr
 8003420:	00030d40 	.word	0x00030d40

08003424 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003424:	b480      	push	{r7}
 8003426:	b085      	sub	sp, #20
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800342c:	2300      	movs	r3, #0
 800342e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2210      	movs	r2, #16
 8003434:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	3301      	adds	r3, #1
 800343a:	60fb      	str	r3, [r7, #12]
 800343c:	4a08      	ldr	r2, [pc, #32]	; (8003460 <USB_FlushRxFifo+0x3c>)
 800343e:	4293      	cmp	r3, r2
 8003440:	d901      	bls.n	8003446 <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 8003442:	2303      	movs	r3, #3
 8003444:	e006      	b.n	8003454 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	691b      	ldr	r3, [r3, #16]
 800344a:	f003 0310 	and.w	r3, r3, #16
 800344e:	2b10      	cmp	r3, #16
 8003450:	d0f1      	beq.n	8003436 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8003452:	2300      	movs	r3, #0
}
 8003454:	4618      	mov	r0, r3
 8003456:	3714      	adds	r7, #20
 8003458:	46bd      	mov	sp, r7
 800345a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345e:	4770      	bx	lr
 8003460:	00030d40 	.word	0x00030d40

08003464 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003464:	b480      	push	{r7}
 8003466:	b085      	sub	sp, #20
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
 800346c:	460b      	mov	r3, r1
 800346e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800347a:	681a      	ldr	r2, [r3, #0]
 800347c:	78fb      	ldrb	r3, [r7, #3]
 800347e:	68f9      	ldr	r1, [r7, #12]
 8003480:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003484:	4313      	orrs	r3, r2
 8003486:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003488:	2300      	movs	r3, #0
}
 800348a:	4618      	mov	r0, r3
 800348c:	3714      	adds	r7, #20
 800348e:	46bd      	mov	sp, r7
 8003490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003494:	4770      	bx	lr

08003496 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8003496:	b480      	push	{r7}
 8003498:	b087      	sub	sp, #28
 800349a:	af00      	add	r7, sp, #0
 800349c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80034a2:	693b      	ldr	r3, [r7, #16]
 80034a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80034a8:	689b      	ldr	r3, [r3, #8]
 80034aa:	f003 0306 	and.w	r3, r3, #6
 80034ae:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d102      	bne.n	80034bc <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80034b6:	2300      	movs	r3, #0
 80034b8:	75fb      	strb	r3, [r7, #23]
 80034ba:	e00a      	b.n	80034d2 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	2b02      	cmp	r3, #2
 80034c0:	d002      	beq.n	80034c8 <USB_GetDevSpeed+0x32>
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	2b06      	cmp	r3, #6
 80034c6:	d102      	bne.n	80034ce <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80034c8:	2302      	movs	r3, #2
 80034ca:	75fb      	strb	r3, [r7, #23]
 80034cc:	e001      	b.n	80034d2 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80034ce:	230f      	movs	r3, #15
 80034d0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80034d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80034d4:	4618      	mov	r0, r3
 80034d6:	371c      	adds	r7, #28
 80034d8:	46bd      	mov	sp, r7
 80034da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034de:	4770      	bx	lr

080034e0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80034e0:	b480      	push	{r7}
 80034e2:	b085      	sub	sp, #20
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
 80034e8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80034ee:	683b      	ldr	r3, [r7, #0]
 80034f0:	781b      	ldrb	r3, [r3, #0]
 80034f2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	785b      	ldrb	r3, [r3, #1]
 80034f8:	2b01      	cmp	r3, #1
 80034fa:	d13a      	bne.n	8003572 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003502:	69da      	ldr	r2, [r3, #28]
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	781b      	ldrb	r3, [r3, #0]
 8003508:	f003 030f 	and.w	r3, r3, #15
 800350c:	2101      	movs	r1, #1
 800350e:	fa01 f303 	lsl.w	r3, r1, r3
 8003512:	b29b      	uxth	r3, r3
 8003514:	68f9      	ldr	r1, [r7, #12]
 8003516:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800351a:	4313      	orrs	r3, r2
 800351c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800351e:	68bb      	ldr	r3, [r7, #8]
 8003520:	015a      	lsls	r2, r3, #5
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	4413      	add	r3, r2
 8003526:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003530:	2b00      	cmp	r3, #0
 8003532:	d155      	bne.n	80035e0 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003534:	68bb      	ldr	r3, [r7, #8]
 8003536:	015a      	lsls	r2, r3, #5
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	4413      	add	r3, r2
 800353c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003540:	681a      	ldr	r2, [r3, #0]
 8003542:	683b      	ldr	r3, [r7, #0]
 8003544:	689b      	ldr	r3, [r3, #8]
 8003546:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	78db      	ldrb	r3, [r3, #3]
 800354e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003550:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003552:	68bb      	ldr	r3, [r7, #8]
 8003554:	059b      	lsls	r3, r3, #22
 8003556:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003558:	4313      	orrs	r3, r2
 800355a:	68ba      	ldr	r2, [r7, #8]
 800355c:	0151      	lsls	r1, r2, #5
 800355e:	68fa      	ldr	r2, [r7, #12]
 8003560:	440a      	add	r2, r1
 8003562:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003566:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800356a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800356e:	6013      	str	r3, [r2, #0]
 8003570:	e036      	b.n	80035e0 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003578:	69da      	ldr	r2, [r3, #28]
 800357a:	683b      	ldr	r3, [r7, #0]
 800357c:	781b      	ldrb	r3, [r3, #0]
 800357e:	f003 030f 	and.w	r3, r3, #15
 8003582:	2101      	movs	r1, #1
 8003584:	fa01 f303 	lsl.w	r3, r1, r3
 8003588:	041b      	lsls	r3, r3, #16
 800358a:	68f9      	ldr	r1, [r7, #12]
 800358c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003590:	4313      	orrs	r3, r2
 8003592:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8003594:	68bb      	ldr	r3, [r7, #8]
 8003596:	015a      	lsls	r2, r3, #5
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	4413      	add	r3, r2
 800359c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d11a      	bne.n	80035e0 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80035aa:	68bb      	ldr	r3, [r7, #8]
 80035ac:	015a      	lsls	r2, r3, #5
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	4413      	add	r3, r2
 80035b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035b6:	681a      	ldr	r2, [r3, #0]
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	689b      	ldr	r3, [r3, #8]
 80035bc:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	78db      	ldrb	r3, [r3, #3]
 80035c4:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80035c6:	430b      	orrs	r3, r1
 80035c8:	4313      	orrs	r3, r2
 80035ca:	68ba      	ldr	r2, [r7, #8]
 80035cc:	0151      	lsls	r1, r2, #5
 80035ce:	68fa      	ldr	r2, [r7, #12]
 80035d0:	440a      	add	r2, r1
 80035d2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80035d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80035de:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80035e0:	2300      	movs	r3, #0
}
 80035e2:	4618      	mov	r0, r3
 80035e4:	3714      	adds	r7, #20
 80035e6:	46bd      	mov	sp, r7
 80035e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ec:	4770      	bx	lr
	...

080035f0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80035f0:	b480      	push	{r7}
 80035f2:	b085      	sub	sp, #20
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
 80035f8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80035fe:	683b      	ldr	r3, [r7, #0]
 8003600:	781b      	ldrb	r3, [r3, #0]
 8003602:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	785b      	ldrb	r3, [r3, #1]
 8003608:	2b01      	cmp	r3, #1
 800360a:	d161      	bne.n	80036d0 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800360c:	68bb      	ldr	r3, [r7, #8]
 800360e:	015a      	lsls	r2, r3, #5
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	4413      	add	r3, r2
 8003614:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800361e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003622:	d11f      	bne.n	8003664 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003624:	68bb      	ldr	r3, [r7, #8]
 8003626:	015a      	lsls	r2, r3, #5
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	4413      	add	r3, r2
 800362c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	68ba      	ldr	r2, [r7, #8]
 8003634:	0151      	lsls	r1, r2, #5
 8003636:	68fa      	ldr	r2, [r7, #12]
 8003638:	440a      	add	r2, r1
 800363a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800363e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003642:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8003644:	68bb      	ldr	r3, [r7, #8]
 8003646:	015a      	lsls	r2, r3, #5
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	4413      	add	r3, r2
 800364c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	68ba      	ldr	r2, [r7, #8]
 8003654:	0151      	lsls	r1, r2, #5
 8003656:	68fa      	ldr	r2, [r7, #12]
 8003658:	440a      	add	r2, r1
 800365a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800365e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003662:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800366a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	781b      	ldrb	r3, [r3, #0]
 8003670:	f003 030f 	and.w	r3, r3, #15
 8003674:	2101      	movs	r1, #1
 8003676:	fa01 f303 	lsl.w	r3, r1, r3
 800367a:	b29b      	uxth	r3, r3
 800367c:	43db      	mvns	r3, r3
 800367e:	68f9      	ldr	r1, [r7, #12]
 8003680:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003684:	4013      	ands	r3, r2
 8003686:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800368e:	69da      	ldr	r2, [r3, #28]
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	781b      	ldrb	r3, [r3, #0]
 8003694:	f003 030f 	and.w	r3, r3, #15
 8003698:	2101      	movs	r1, #1
 800369a:	fa01 f303 	lsl.w	r3, r1, r3
 800369e:	b29b      	uxth	r3, r3
 80036a0:	43db      	mvns	r3, r3
 80036a2:	68f9      	ldr	r1, [r7, #12]
 80036a4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80036a8:	4013      	ands	r3, r2
 80036aa:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80036ac:	68bb      	ldr	r3, [r7, #8]
 80036ae:	015a      	lsls	r2, r3, #5
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	4413      	add	r3, r2
 80036b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036b8:	681a      	ldr	r2, [r3, #0]
 80036ba:	68bb      	ldr	r3, [r7, #8]
 80036bc:	0159      	lsls	r1, r3, #5
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	440b      	add	r3, r1
 80036c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036c6:	4619      	mov	r1, r3
 80036c8:	4b35      	ldr	r3, [pc, #212]	; (80037a0 <USB_DeactivateEndpoint+0x1b0>)
 80036ca:	4013      	ands	r3, r2
 80036cc:	600b      	str	r3, [r1, #0]
 80036ce:	e060      	b.n	8003792 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80036d0:	68bb      	ldr	r3, [r7, #8]
 80036d2:	015a      	lsls	r2, r3, #5
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	4413      	add	r3, r2
 80036d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80036e2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80036e6:	d11f      	bne.n	8003728 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80036e8:	68bb      	ldr	r3, [r7, #8]
 80036ea:	015a      	lsls	r2, r3, #5
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	4413      	add	r3, r2
 80036f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	68ba      	ldr	r2, [r7, #8]
 80036f8:	0151      	lsls	r1, r2, #5
 80036fa:	68fa      	ldr	r2, [r7, #12]
 80036fc:	440a      	add	r2, r1
 80036fe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003702:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003706:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8003708:	68bb      	ldr	r3, [r7, #8]
 800370a:	015a      	lsls	r2, r3, #5
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	4413      	add	r3, r2
 8003710:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	68ba      	ldr	r2, [r7, #8]
 8003718:	0151      	lsls	r1, r2, #5
 800371a:	68fa      	ldr	r2, [r7, #12]
 800371c:	440a      	add	r2, r1
 800371e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003722:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003726:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800372e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	781b      	ldrb	r3, [r3, #0]
 8003734:	f003 030f 	and.w	r3, r3, #15
 8003738:	2101      	movs	r1, #1
 800373a:	fa01 f303 	lsl.w	r3, r1, r3
 800373e:	041b      	lsls	r3, r3, #16
 8003740:	43db      	mvns	r3, r3
 8003742:	68f9      	ldr	r1, [r7, #12]
 8003744:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003748:	4013      	ands	r3, r2
 800374a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003752:	69da      	ldr	r2, [r3, #28]
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	781b      	ldrb	r3, [r3, #0]
 8003758:	f003 030f 	and.w	r3, r3, #15
 800375c:	2101      	movs	r1, #1
 800375e:	fa01 f303 	lsl.w	r3, r1, r3
 8003762:	041b      	lsls	r3, r3, #16
 8003764:	43db      	mvns	r3, r3
 8003766:	68f9      	ldr	r1, [r7, #12]
 8003768:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800376c:	4013      	ands	r3, r2
 800376e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8003770:	68bb      	ldr	r3, [r7, #8]
 8003772:	015a      	lsls	r2, r3, #5
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	4413      	add	r3, r2
 8003778:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800377c:	681a      	ldr	r2, [r3, #0]
 800377e:	68bb      	ldr	r3, [r7, #8]
 8003780:	0159      	lsls	r1, r3, #5
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	440b      	add	r3, r1
 8003786:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800378a:	4619      	mov	r1, r3
 800378c:	4b05      	ldr	r3, [pc, #20]	; (80037a4 <USB_DeactivateEndpoint+0x1b4>)
 800378e:	4013      	ands	r3, r2
 8003790:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8003792:	2300      	movs	r3, #0
}
 8003794:	4618      	mov	r0, r3
 8003796:	3714      	adds	r7, #20
 8003798:	46bd      	mov	sp, r7
 800379a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379e:	4770      	bx	lr
 80037a0:	ec337800 	.word	0xec337800
 80037a4:	eff37800 	.word	0xeff37800

080037a8 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b08a      	sub	sp, #40	; 0x28
 80037ac:	af02      	add	r7, sp, #8
 80037ae:	60f8      	str	r0, [r7, #12]
 80037b0:	60b9      	str	r1, [r7, #8]
 80037b2:	4613      	mov	r3, r2
 80037b4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80037ba:	68bb      	ldr	r3, [r7, #8]
 80037bc:	781b      	ldrb	r3, [r3, #0]
 80037be:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80037c0:	68bb      	ldr	r3, [r7, #8]
 80037c2:	785b      	ldrb	r3, [r3, #1]
 80037c4:	2b01      	cmp	r3, #1
 80037c6:	f040 815c 	bne.w	8003a82 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80037ca:	68bb      	ldr	r3, [r7, #8]
 80037cc:	695b      	ldr	r3, [r3, #20]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d132      	bne.n	8003838 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80037d2:	69bb      	ldr	r3, [r7, #24]
 80037d4:	015a      	lsls	r2, r3, #5
 80037d6:	69fb      	ldr	r3, [r7, #28]
 80037d8:	4413      	add	r3, r2
 80037da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037de:	691b      	ldr	r3, [r3, #16]
 80037e0:	69ba      	ldr	r2, [r7, #24]
 80037e2:	0151      	lsls	r1, r2, #5
 80037e4:	69fa      	ldr	r2, [r7, #28]
 80037e6:	440a      	add	r2, r1
 80037e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80037ec:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80037f0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80037f4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80037f6:	69bb      	ldr	r3, [r7, #24]
 80037f8:	015a      	lsls	r2, r3, #5
 80037fa:	69fb      	ldr	r3, [r7, #28]
 80037fc:	4413      	add	r3, r2
 80037fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003802:	691b      	ldr	r3, [r3, #16]
 8003804:	69ba      	ldr	r2, [r7, #24]
 8003806:	0151      	lsls	r1, r2, #5
 8003808:	69fa      	ldr	r2, [r7, #28]
 800380a:	440a      	add	r2, r1
 800380c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003810:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003814:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003816:	69bb      	ldr	r3, [r7, #24]
 8003818:	015a      	lsls	r2, r3, #5
 800381a:	69fb      	ldr	r3, [r7, #28]
 800381c:	4413      	add	r3, r2
 800381e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003822:	691b      	ldr	r3, [r3, #16]
 8003824:	69ba      	ldr	r2, [r7, #24]
 8003826:	0151      	lsls	r1, r2, #5
 8003828:	69fa      	ldr	r2, [r7, #28]
 800382a:	440a      	add	r2, r1
 800382c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003830:	0cdb      	lsrs	r3, r3, #19
 8003832:	04db      	lsls	r3, r3, #19
 8003834:	6113      	str	r3, [r2, #16]
 8003836:	e074      	b.n	8003922 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003838:	69bb      	ldr	r3, [r7, #24]
 800383a:	015a      	lsls	r2, r3, #5
 800383c:	69fb      	ldr	r3, [r7, #28]
 800383e:	4413      	add	r3, r2
 8003840:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003844:	691b      	ldr	r3, [r3, #16]
 8003846:	69ba      	ldr	r2, [r7, #24]
 8003848:	0151      	lsls	r1, r2, #5
 800384a:	69fa      	ldr	r2, [r7, #28]
 800384c:	440a      	add	r2, r1
 800384e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003852:	0cdb      	lsrs	r3, r3, #19
 8003854:	04db      	lsls	r3, r3, #19
 8003856:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003858:	69bb      	ldr	r3, [r7, #24]
 800385a:	015a      	lsls	r2, r3, #5
 800385c:	69fb      	ldr	r3, [r7, #28]
 800385e:	4413      	add	r3, r2
 8003860:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003864:	691b      	ldr	r3, [r3, #16]
 8003866:	69ba      	ldr	r2, [r7, #24]
 8003868:	0151      	lsls	r1, r2, #5
 800386a:	69fa      	ldr	r2, [r7, #28]
 800386c:	440a      	add	r2, r1
 800386e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003872:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003876:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800387a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800387c:	69bb      	ldr	r3, [r7, #24]
 800387e:	015a      	lsls	r2, r3, #5
 8003880:	69fb      	ldr	r3, [r7, #28]
 8003882:	4413      	add	r3, r2
 8003884:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003888:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800388a:	68bb      	ldr	r3, [r7, #8]
 800388c:	6959      	ldr	r1, [r3, #20]
 800388e:	68bb      	ldr	r3, [r7, #8]
 8003890:	689b      	ldr	r3, [r3, #8]
 8003892:	440b      	add	r3, r1
 8003894:	1e59      	subs	r1, r3, #1
 8003896:	68bb      	ldr	r3, [r7, #8]
 8003898:	689b      	ldr	r3, [r3, #8]
 800389a:	fbb1 f3f3 	udiv	r3, r1, r3
 800389e:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80038a0:	4b9d      	ldr	r3, [pc, #628]	; (8003b18 <USB_EPStartXfer+0x370>)
 80038a2:	400b      	ands	r3, r1
 80038a4:	69b9      	ldr	r1, [r7, #24]
 80038a6:	0148      	lsls	r0, r1, #5
 80038a8:	69f9      	ldr	r1, [r7, #28]
 80038aa:	4401      	add	r1, r0
 80038ac:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80038b0:	4313      	orrs	r3, r2
 80038b2:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80038b4:	69bb      	ldr	r3, [r7, #24]
 80038b6:	015a      	lsls	r2, r3, #5
 80038b8:	69fb      	ldr	r3, [r7, #28]
 80038ba:	4413      	add	r3, r2
 80038bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80038c0:	691a      	ldr	r2, [r3, #16]
 80038c2:	68bb      	ldr	r3, [r7, #8]
 80038c4:	695b      	ldr	r3, [r3, #20]
 80038c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80038ca:	69b9      	ldr	r1, [r7, #24]
 80038cc:	0148      	lsls	r0, r1, #5
 80038ce:	69f9      	ldr	r1, [r7, #28]
 80038d0:	4401      	add	r1, r0
 80038d2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80038d6:	4313      	orrs	r3, r2
 80038d8:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80038da:	68bb      	ldr	r3, [r7, #8]
 80038dc:	78db      	ldrb	r3, [r3, #3]
 80038de:	2b01      	cmp	r3, #1
 80038e0:	d11f      	bne.n	8003922 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80038e2:	69bb      	ldr	r3, [r7, #24]
 80038e4:	015a      	lsls	r2, r3, #5
 80038e6:	69fb      	ldr	r3, [r7, #28]
 80038e8:	4413      	add	r3, r2
 80038ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80038ee:	691b      	ldr	r3, [r3, #16]
 80038f0:	69ba      	ldr	r2, [r7, #24]
 80038f2:	0151      	lsls	r1, r2, #5
 80038f4:	69fa      	ldr	r2, [r7, #28]
 80038f6:	440a      	add	r2, r1
 80038f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80038fc:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8003900:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8003902:	69bb      	ldr	r3, [r7, #24]
 8003904:	015a      	lsls	r2, r3, #5
 8003906:	69fb      	ldr	r3, [r7, #28]
 8003908:	4413      	add	r3, r2
 800390a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800390e:	691b      	ldr	r3, [r3, #16]
 8003910:	69ba      	ldr	r2, [r7, #24]
 8003912:	0151      	lsls	r1, r2, #5
 8003914:	69fa      	ldr	r2, [r7, #28]
 8003916:	440a      	add	r2, r1
 8003918:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800391c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003920:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8003922:	79fb      	ldrb	r3, [r7, #7]
 8003924:	2b01      	cmp	r3, #1
 8003926:	d14b      	bne.n	80039c0 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8003928:	68bb      	ldr	r3, [r7, #8]
 800392a:	691b      	ldr	r3, [r3, #16]
 800392c:	2b00      	cmp	r3, #0
 800392e:	d009      	beq.n	8003944 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8003930:	69bb      	ldr	r3, [r7, #24]
 8003932:	015a      	lsls	r2, r3, #5
 8003934:	69fb      	ldr	r3, [r7, #28]
 8003936:	4413      	add	r3, r2
 8003938:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800393c:	461a      	mov	r2, r3
 800393e:	68bb      	ldr	r3, [r7, #8]
 8003940:	691b      	ldr	r3, [r3, #16]
 8003942:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8003944:	68bb      	ldr	r3, [r7, #8]
 8003946:	78db      	ldrb	r3, [r3, #3]
 8003948:	2b01      	cmp	r3, #1
 800394a:	d128      	bne.n	800399e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800394c:	69fb      	ldr	r3, [r7, #28]
 800394e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003952:	689b      	ldr	r3, [r3, #8]
 8003954:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003958:	2b00      	cmp	r3, #0
 800395a:	d110      	bne.n	800397e <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800395c:	69bb      	ldr	r3, [r7, #24]
 800395e:	015a      	lsls	r2, r3, #5
 8003960:	69fb      	ldr	r3, [r7, #28]
 8003962:	4413      	add	r3, r2
 8003964:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	69ba      	ldr	r2, [r7, #24]
 800396c:	0151      	lsls	r1, r2, #5
 800396e:	69fa      	ldr	r2, [r7, #28]
 8003970:	440a      	add	r2, r1
 8003972:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003976:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800397a:	6013      	str	r3, [r2, #0]
 800397c:	e00f      	b.n	800399e <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800397e:	69bb      	ldr	r3, [r7, #24]
 8003980:	015a      	lsls	r2, r3, #5
 8003982:	69fb      	ldr	r3, [r7, #28]
 8003984:	4413      	add	r3, r2
 8003986:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	69ba      	ldr	r2, [r7, #24]
 800398e:	0151      	lsls	r1, r2, #5
 8003990:	69fa      	ldr	r2, [r7, #28]
 8003992:	440a      	add	r2, r1
 8003994:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003998:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800399c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800399e:	69bb      	ldr	r3, [r7, #24]
 80039a0:	015a      	lsls	r2, r3, #5
 80039a2:	69fb      	ldr	r3, [r7, #28]
 80039a4:	4413      	add	r3, r2
 80039a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	69ba      	ldr	r2, [r7, #24]
 80039ae:	0151      	lsls	r1, r2, #5
 80039b0:	69fa      	ldr	r2, [r7, #28]
 80039b2:	440a      	add	r2, r1
 80039b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80039b8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80039bc:	6013      	str	r3, [r2, #0]
 80039be:	e12f      	b.n	8003c20 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80039c0:	69bb      	ldr	r3, [r7, #24]
 80039c2:	015a      	lsls	r2, r3, #5
 80039c4:	69fb      	ldr	r3, [r7, #28]
 80039c6:	4413      	add	r3, r2
 80039c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	69ba      	ldr	r2, [r7, #24]
 80039d0:	0151      	lsls	r1, r2, #5
 80039d2:	69fa      	ldr	r2, [r7, #28]
 80039d4:	440a      	add	r2, r1
 80039d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80039da:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80039de:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80039e0:	68bb      	ldr	r3, [r7, #8]
 80039e2:	78db      	ldrb	r3, [r3, #3]
 80039e4:	2b01      	cmp	r3, #1
 80039e6:	d015      	beq.n	8003a14 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80039e8:	68bb      	ldr	r3, [r7, #8]
 80039ea:	695b      	ldr	r3, [r3, #20]
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	f000 8117 	beq.w	8003c20 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80039f2:	69fb      	ldr	r3, [r7, #28]
 80039f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80039fa:	68bb      	ldr	r3, [r7, #8]
 80039fc:	781b      	ldrb	r3, [r3, #0]
 80039fe:	f003 030f 	and.w	r3, r3, #15
 8003a02:	2101      	movs	r1, #1
 8003a04:	fa01 f303 	lsl.w	r3, r1, r3
 8003a08:	69f9      	ldr	r1, [r7, #28]
 8003a0a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003a0e:	4313      	orrs	r3, r2
 8003a10:	634b      	str	r3, [r1, #52]	; 0x34
 8003a12:	e105      	b.n	8003c20 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003a14:	69fb      	ldr	r3, [r7, #28]
 8003a16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a1a:	689b      	ldr	r3, [r3, #8]
 8003a1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d110      	bne.n	8003a46 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8003a24:	69bb      	ldr	r3, [r7, #24]
 8003a26:	015a      	lsls	r2, r3, #5
 8003a28:	69fb      	ldr	r3, [r7, #28]
 8003a2a:	4413      	add	r3, r2
 8003a2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	69ba      	ldr	r2, [r7, #24]
 8003a34:	0151      	lsls	r1, r2, #5
 8003a36:	69fa      	ldr	r2, [r7, #28]
 8003a38:	440a      	add	r2, r1
 8003a3a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003a3e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003a42:	6013      	str	r3, [r2, #0]
 8003a44:	e00f      	b.n	8003a66 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8003a46:	69bb      	ldr	r3, [r7, #24]
 8003a48:	015a      	lsls	r2, r3, #5
 8003a4a:	69fb      	ldr	r3, [r7, #28]
 8003a4c:	4413      	add	r3, r2
 8003a4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	69ba      	ldr	r2, [r7, #24]
 8003a56:	0151      	lsls	r1, r2, #5
 8003a58:	69fa      	ldr	r2, [r7, #28]
 8003a5a:	440a      	add	r2, r1
 8003a5c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003a60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a64:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8003a66:	68bb      	ldr	r3, [r7, #8]
 8003a68:	68d9      	ldr	r1, [r3, #12]
 8003a6a:	68bb      	ldr	r3, [r7, #8]
 8003a6c:	781a      	ldrb	r2, [r3, #0]
 8003a6e:	68bb      	ldr	r3, [r7, #8]
 8003a70:	695b      	ldr	r3, [r3, #20]
 8003a72:	b298      	uxth	r0, r3
 8003a74:	79fb      	ldrb	r3, [r7, #7]
 8003a76:	9300      	str	r3, [sp, #0]
 8003a78:	4603      	mov	r3, r0
 8003a7a:	68f8      	ldr	r0, [r7, #12]
 8003a7c:	f000 fa2b 	bl	8003ed6 <USB_WritePacket>
 8003a80:	e0ce      	b.n	8003c20 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8003a82:	69bb      	ldr	r3, [r7, #24]
 8003a84:	015a      	lsls	r2, r3, #5
 8003a86:	69fb      	ldr	r3, [r7, #28]
 8003a88:	4413      	add	r3, r2
 8003a8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a8e:	691b      	ldr	r3, [r3, #16]
 8003a90:	69ba      	ldr	r2, [r7, #24]
 8003a92:	0151      	lsls	r1, r2, #5
 8003a94:	69fa      	ldr	r2, [r7, #28]
 8003a96:	440a      	add	r2, r1
 8003a98:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003a9c:	0cdb      	lsrs	r3, r3, #19
 8003a9e:	04db      	lsls	r3, r3, #19
 8003aa0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8003aa2:	69bb      	ldr	r3, [r7, #24]
 8003aa4:	015a      	lsls	r2, r3, #5
 8003aa6:	69fb      	ldr	r3, [r7, #28]
 8003aa8:	4413      	add	r3, r2
 8003aaa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003aae:	691b      	ldr	r3, [r3, #16]
 8003ab0:	69ba      	ldr	r2, [r7, #24]
 8003ab2:	0151      	lsls	r1, r2, #5
 8003ab4:	69fa      	ldr	r2, [r7, #28]
 8003ab6:	440a      	add	r2, r1
 8003ab8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003abc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003ac0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003ac4:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8003ac6:	68bb      	ldr	r3, [r7, #8]
 8003ac8:	695b      	ldr	r3, [r3, #20]
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d126      	bne.n	8003b1c <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8003ace:	69bb      	ldr	r3, [r7, #24]
 8003ad0:	015a      	lsls	r2, r3, #5
 8003ad2:	69fb      	ldr	r3, [r7, #28]
 8003ad4:	4413      	add	r3, r2
 8003ad6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ada:	691a      	ldr	r2, [r3, #16]
 8003adc:	68bb      	ldr	r3, [r7, #8]
 8003ade:	689b      	ldr	r3, [r3, #8]
 8003ae0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ae4:	69b9      	ldr	r1, [r7, #24]
 8003ae6:	0148      	lsls	r0, r1, #5
 8003ae8:	69f9      	ldr	r1, [r7, #28]
 8003aea:	4401      	add	r1, r0
 8003aec:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003af0:	4313      	orrs	r3, r2
 8003af2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8003af4:	69bb      	ldr	r3, [r7, #24]
 8003af6:	015a      	lsls	r2, r3, #5
 8003af8:	69fb      	ldr	r3, [r7, #28]
 8003afa:	4413      	add	r3, r2
 8003afc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b00:	691b      	ldr	r3, [r3, #16]
 8003b02:	69ba      	ldr	r2, [r7, #24]
 8003b04:	0151      	lsls	r1, r2, #5
 8003b06:	69fa      	ldr	r2, [r7, #28]
 8003b08:	440a      	add	r2, r1
 8003b0a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003b0e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003b12:	6113      	str	r3, [r2, #16]
 8003b14:	e036      	b.n	8003b84 <USB_EPStartXfer+0x3dc>
 8003b16:	bf00      	nop
 8003b18:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8003b1c:	68bb      	ldr	r3, [r7, #8]
 8003b1e:	695a      	ldr	r2, [r3, #20]
 8003b20:	68bb      	ldr	r3, [r7, #8]
 8003b22:	689b      	ldr	r3, [r3, #8]
 8003b24:	4413      	add	r3, r2
 8003b26:	1e5a      	subs	r2, r3, #1
 8003b28:	68bb      	ldr	r3, [r7, #8]
 8003b2a:	689b      	ldr	r3, [r3, #8]
 8003b2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b30:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8003b32:	69bb      	ldr	r3, [r7, #24]
 8003b34:	015a      	lsls	r2, r3, #5
 8003b36:	69fb      	ldr	r3, [r7, #28]
 8003b38:	4413      	add	r3, r2
 8003b3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b3e:	691a      	ldr	r2, [r3, #16]
 8003b40:	8afb      	ldrh	r3, [r7, #22]
 8003b42:	04d9      	lsls	r1, r3, #19
 8003b44:	4b39      	ldr	r3, [pc, #228]	; (8003c2c <USB_EPStartXfer+0x484>)
 8003b46:	400b      	ands	r3, r1
 8003b48:	69b9      	ldr	r1, [r7, #24]
 8003b4a:	0148      	lsls	r0, r1, #5
 8003b4c:	69f9      	ldr	r1, [r7, #28]
 8003b4e:	4401      	add	r1, r0
 8003b50:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003b54:	4313      	orrs	r3, r2
 8003b56:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8003b58:	69bb      	ldr	r3, [r7, #24]
 8003b5a:	015a      	lsls	r2, r3, #5
 8003b5c:	69fb      	ldr	r3, [r7, #28]
 8003b5e:	4413      	add	r3, r2
 8003b60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b64:	691a      	ldr	r2, [r3, #16]
 8003b66:	68bb      	ldr	r3, [r7, #8]
 8003b68:	689b      	ldr	r3, [r3, #8]
 8003b6a:	8af9      	ldrh	r1, [r7, #22]
 8003b6c:	fb01 f303 	mul.w	r3, r1, r3
 8003b70:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b74:	69b9      	ldr	r1, [r7, #24]
 8003b76:	0148      	lsls	r0, r1, #5
 8003b78:	69f9      	ldr	r1, [r7, #28]
 8003b7a:	4401      	add	r1, r0
 8003b7c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003b80:	4313      	orrs	r3, r2
 8003b82:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8003b84:	79fb      	ldrb	r3, [r7, #7]
 8003b86:	2b01      	cmp	r3, #1
 8003b88:	d10d      	bne.n	8003ba6 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8003b8a:	68bb      	ldr	r3, [r7, #8]
 8003b8c:	68db      	ldr	r3, [r3, #12]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d009      	beq.n	8003ba6 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8003b92:	68bb      	ldr	r3, [r7, #8]
 8003b94:	68d9      	ldr	r1, [r3, #12]
 8003b96:	69bb      	ldr	r3, [r7, #24]
 8003b98:	015a      	lsls	r2, r3, #5
 8003b9a:	69fb      	ldr	r3, [r7, #28]
 8003b9c:	4413      	add	r3, r2
 8003b9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ba2:	460a      	mov	r2, r1
 8003ba4:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8003ba6:	68bb      	ldr	r3, [r7, #8]
 8003ba8:	78db      	ldrb	r3, [r3, #3]
 8003baa:	2b01      	cmp	r3, #1
 8003bac:	d128      	bne.n	8003c00 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003bae:	69fb      	ldr	r3, [r7, #28]
 8003bb0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003bb4:	689b      	ldr	r3, [r3, #8]
 8003bb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d110      	bne.n	8003be0 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8003bbe:	69bb      	ldr	r3, [r7, #24]
 8003bc0:	015a      	lsls	r2, r3, #5
 8003bc2:	69fb      	ldr	r3, [r7, #28]
 8003bc4:	4413      	add	r3, r2
 8003bc6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	69ba      	ldr	r2, [r7, #24]
 8003bce:	0151      	lsls	r1, r2, #5
 8003bd0:	69fa      	ldr	r2, [r7, #28]
 8003bd2:	440a      	add	r2, r1
 8003bd4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003bd8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003bdc:	6013      	str	r3, [r2, #0]
 8003bde:	e00f      	b.n	8003c00 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8003be0:	69bb      	ldr	r3, [r7, #24]
 8003be2:	015a      	lsls	r2, r3, #5
 8003be4:	69fb      	ldr	r3, [r7, #28]
 8003be6:	4413      	add	r3, r2
 8003be8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	69ba      	ldr	r2, [r7, #24]
 8003bf0:	0151      	lsls	r1, r2, #5
 8003bf2:	69fa      	ldr	r2, [r7, #28]
 8003bf4:	440a      	add	r2, r1
 8003bf6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003bfa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003bfe:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8003c00:	69bb      	ldr	r3, [r7, #24]
 8003c02:	015a      	lsls	r2, r3, #5
 8003c04:	69fb      	ldr	r3, [r7, #28]
 8003c06:	4413      	add	r3, r2
 8003c08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	69ba      	ldr	r2, [r7, #24]
 8003c10:	0151      	lsls	r1, r2, #5
 8003c12:	69fa      	ldr	r2, [r7, #28]
 8003c14:	440a      	add	r2, r1
 8003c16:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003c1a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003c1e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8003c20:	2300      	movs	r3, #0
}
 8003c22:	4618      	mov	r0, r3
 8003c24:	3720      	adds	r7, #32
 8003c26:	46bd      	mov	sp, r7
 8003c28:	bd80      	pop	{r7, pc}
 8003c2a:	bf00      	nop
 8003c2c:	1ff80000 	.word	0x1ff80000

08003c30 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8003c30:	b480      	push	{r7}
 8003c32:	b087      	sub	sp, #28
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	60f8      	str	r0, [r7, #12]
 8003c38:	60b9      	str	r1, [r7, #8]
 8003c3a:	4613      	mov	r3, r2
 8003c3c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8003c42:	68bb      	ldr	r3, [r7, #8]
 8003c44:	781b      	ldrb	r3, [r3, #0]
 8003c46:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003c48:	68bb      	ldr	r3, [r7, #8]
 8003c4a:	785b      	ldrb	r3, [r3, #1]
 8003c4c:	2b01      	cmp	r3, #1
 8003c4e:	f040 80cd 	bne.w	8003dec <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8003c52:	68bb      	ldr	r3, [r7, #8]
 8003c54:	695b      	ldr	r3, [r3, #20]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d132      	bne.n	8003cc0 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003c5a:	693b      	ldr	r3, [r7, #16]
 8003c5c:	015a      	lsls	r2, r3, #5
 8003c5e:	697b      	ldr	r3, [r7, #20]
 8003c60:	4413      	add	r3, r2
 8003c62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c66:	691b      	ldr	r3, [r3, #16]
 8003c68:	693a      	ldr	r2, [r7, #16]
 8003c6a:	0151      	lsls	r1, r2, #5
 8003c6c:	697a      	ldr	r2, [r7, #20]
 8003c6e:	440a      	add	r2, r1
 8003c70:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003c74:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003c78:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003c7c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003c7e:	693b      	ldr	r3, [r7, #16]
 8003c80:	015a      	lsls	r2, r3, #5
 8003c82:	697b      	ldr	r3, [r7, #20]
 8003c84:	4413      	add	r3, r2
 8003c86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c8a:	691b      	ldr	r3, [r3, #16]
 8003c8c:	693a      	ldr	r2, [r7, #16]
 8003c8e:	0151      	lsls	r1, r2, #5
 8003c90:	697a      	ldr	r2, [r7, #20]
 8003c92:	440a      	add	r2, r1
 8003c94:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003c98:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003c9c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003c9e:	693b      	ldr	r3, [r7, #16]
 8003ca0:	015a      	lsls	r2, r3, #5
 8003ca2:	697b      	ldr	r3, [r7, #20]
 8003ca4:	4413      	add	r3, r2
 8003ca6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003caa:	691b      	ldr	r3, [r3, #16]
 8003cac:	693a      	ldr	r2, [r7, #16]
 8003cae:	0151      	lsls	r1, r2, #5
 8003cb0:	697a      	ldr	r2, [r7, #20]
 8003cb2:	440a      	add	r2, r1
 8003cb4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003cb8:	0cdb      	lsrs	r3, r3, #19
 8003cba:	04db      	lsls	r3, r3, #19
 8003cbc:	6113      	str	r3, [r2, #16]
 8003cbe:	e04e      	b.n	8003d5e <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003cc0:	693b      	ldr	r3, [r7, #16]
 8003cc2:	015a      	lsls	r2, r3, #5
 8003cc4:	697b      	ldr	r3, [r7, #20]
 8003cc6:	4413      	add	r3, r2
 8003cc8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ccc:	691b      	ldr	r3, [r3, #16]
 8003cce:	693a      	ldr	r2, [r7, #16]
 8003cd0:	0151      	lsls	r1, r2, #5
 8003cd2:	697a      	ldr	r2, [r7, #20]
 8003cd4:	440a      	add	r2, r1
 8003cd6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003cda:	0cdb      	lsrs	r3, r3, #19
 8003cdc:	04db      	lsls	r3, r3, #19
 8003cde:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003ce0:	693b      	ldr	r3, [r7, #16]
 8003ce2:	015a      	lsls	r2, r3, #5
 8003ce4:	697b      	ldr	r3, [r7, #20]
 8003ce6:	4413      	add	r3, r2
 8003ce8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003cec:	691b      	ldr	r3, [r3, #16]
 8003cee:	693a      	ldr	r2, [r7, #16]
 8003cf0:	0151      	lsls	r1, r2, #5
 8003cf2:	697a      	ldr	r2, [r7, #20]
 8003cf4:	440a      	add	r2, r1
 8003cf6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003cfa:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003cfe:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003d02:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8003d04:	68bb      	ldr	r3, [r7, #8]
 8003d06:	695a      	ldr	r2, [r3, #20]
 8003d08:	68bb      	ldr	r3, [r7, #8]
 8003d0a:	689b      	ldr	r3, [r3, #8]
 8003d0c:	429a      	cmp	r2, r3
 8003d0e:	d903      	bls.n	8003d18 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8003d10:	68bb      	ldr	r3, [r7, #8]
 8003d12:	689a      	ldr	r2, [r3, #8]
 8003d14:	68bb      	ldr	r3, [r7, #8]
 8003d16:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003d18:	693b      	ldr	r3, [r7, #16]
 8003d1a:	015a      	lsls	r2, r3, #5
 8003d1c:	697b      	ldr	r3, [r7, #20]
 8003d1e:	4413      	add	r3, r2
 8003d20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d24:	691b      	ldr	r3, [r3, #16]
 8003d26:	693a      	ldr	r2, [r7, #16]
 8003d28:	0151      	lsls	r1, r2, #5
 8003d2a:	697a      	ldr	r2, [r7, #20]
 8003d2c:	440a      	add	r2, r1
 8003d2e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003d32:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003d36:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8003d38:	693b      	ldr	r3, [r7, #16]
 8003d3a:	015a      	lsls	r2, r3, #5
 8003d3c:	697b      	ldr	r3, [r7, #20]
 8003d3e:	4413      	add	r3, r2
 8003d40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d44:	691a      	ldr	r2, [r3, #16]
 8003d46:	68bb      	ldr	r3, [r7, #8]
 8003d48:	695b      	ldr	r3, [r3, #20]
 8003d4a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d4e:	6939      	ldr	r1, [r7, #16]
 8003d50:	0148      	lsls	r0, r1, #5
 8003d52:	6979      	ldr	r1, [r7, #20]
 8003d54:	4401      	add	r1, r0
 8003d56:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003d5a:	4313      	orrs	r3, r2
 8003d5c:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8003d5e:	79fb      	ldrb	r3, [r7, #7]
 8003d60:	2b01      	cmp	r3, #1
 8003d62:	d11e      	bne.n	8003da2 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8003d64:	68bb      	ldr	r3, [r7, #8]
 8003d66:	691b      	ldr	r3, [r3, #16]
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d009      	beq.n	8003d80 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8003d6c:	693b      	ldr	r3, [r7, #16]
 8003d6e:	015a      	lsls	r2, r3, #5
 8003d70:	697b      	ldr	r3, [r7, #20]
 8003d72:	4413      	add	r3, r2
 8003d74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d78:	461a      	mov	r2, r3
 8003d7a:	68bb      	ldr	r3, [r7, #8]
 8003d7c:	691b      	ldr	r3, [r3, #16]
 8003d7e:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003d80:	693b      	ldr	r3, [r7, #16]
 8003d82:	015a      	lsls	r2, r3, #5
 8003d84:	697b      	ldr	r3, [r7, #20]
 8003d86:	4413      	add	r3, r2
 8003d88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	693a      	ldr	r2, [r7, #16]
 8003d90:	0151      	lsls	r1, r2, #5
 8003d92:	697a      	ldr	r2, [r7, #20]
 8003d94:	440a      	add	r2, r1
 8003d96:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003d9a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003d9e:	6013      	str	r3, [r2, #0]
 8003da0:	e092      	b.n	8003ec8 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003da2:	693b      	ldr	r3, [r7, #16]
 8003da4:	015a      	lsls	r2, r3, #5
 8003da6:	697b      	ldr	r3, [r7, #20]
 8003da8:	4413      	add	r3, r2
 8003daa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	693a      	ldr	r2, [r7, #16]
 8003db2:	0151      	lsls	r1, r2, #5
 8003db4:	697a      	ldr	r2, [r7, #20]
 8003db6:	440a      	add	r2, r1
 8003db8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003dbc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003dc0:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8003dc2:	68bb      	ldr	r3, [r7, #8]
 8003dc4:	695b      	ldr	r3, [r3, #20]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d07e      	beq.n	8003ec8 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8003dca:	697b      	ldr	r3, [r7, #20]
 8003dcc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003dd0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003dd2:	68bb      	ldr	r3, [r7, #8]
 8003dd4:	781b      	ldrb	r3, [r3, #0]
 8003dd6:	f003 030f 	and.w	r3, r3, #15
 8003dda:	2101      	movs	r1, #1
 8003ddc:	fa01 f303 	lsl.w	r3, r1, r3
 8003de0:	6979      	ldr	r1, [r7, #20]
 8003de2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003de6:	4313      	orrs	r3, r2
 8003de8:	634b      	str	r3, [r1, #52]	; 0x34
 8003dea:	e06d      	b.n	8003ec8 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8003dec:	693b      	ldr	r3, [r7, #16]
 8003dee:	015a      	lsls	r2, r3, #5
 8003df0:	697b      	ldr	r3, [r7, #20]
 8003df2:	4413      	add	r3, r2
 8003df4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003df8:	691b      	ldr	r3, [r3, #16]
 8003dfa:	693a      	ldr	r2, [r7, #16]
 8003dfc:	0151      	lsls	r1, r2, #5
 8003dfe:	697a      	ldr	r2, [r7, #20]
 8003e00:	440a      	add	r2, r1
 8003e02:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003e06:	0cdb      	lsrs	r3, r3, #19
 8003e08:	04db      	lsls	r3, r3, #19
 8003e0a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8003e0c:	693b      	ldr	r3, [r7, #16]
 8003e0e:	015a      	lsls	r2, r3, #5
 8003e10:	697b      	ldr	r3, [r7, #20]
 8003e12:	4413      	add	r3, r2
 8003e14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e18:	691b      	ldr	r3, [r3, #16]
 8003e1a:	693a      	ldr	r2, [r7, #16]
 8003e1c:	0151      	lsls	r1, r2, #5
 8003e1e:	697a      	ldr	r2, [r7, #20]
 8003e20:	440a      	add	r2, r1
 8003e22:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003e26:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003e2a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003e2e:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8003e30:	68bb      	ldr	r3, [r7, #8]
 8003e32:	695b      	ldr	r3, [r3, #20]
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d003      	beq.n	8003e40 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8003e38:	68bb      	ldr	r3, [r7, #8]
 8003e3a:	689a      	ldr	r2, [r3, #8]
 8003e3c:	68bb      	ldr	r3, [r7, #8]
 8003e3e:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8003e40:	693b      	ldr	r3, [r7, #16]
 8003e42:	015a      	lsls	r2, r3, #5
 8003e44:	697b      	ldr	r3, [r7, #20]
 8003e46:	4413      	add	r3, r2
 8003e48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e4c:	691b      	ldr	r3, [r3, #16]
 8003e4e:	693a      	ldr	r2, [r7, #16]
 8003e50:	0151      	lsls	r1, r2, #5
 8003e52:	697a      	ldr	r2, [r7, #20]
 8003e54:	440a      	add	r2, r1
 8003e56:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003e5a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003e5e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8003e60:	693b      	ldr	r3, [r7, #16]
 8003e62:	015a      	lsls	r2, r3, #5
 8003e64:	697b      	ldr	r3, [r7, #20]
 8003e66:	4413      	add	r3, r2
 8003e68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e6c:	691a      	ldr	r2, [r3, #16]
 8003e6e:	68bb      	ldr	r3, [r7, #8]
 8003e70:	689b      	ldr	r3, [r3, #8]
 8003e72:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e76:	6939      	ldr	r1, [r7, #16]
 8003e78:	0148      	lsls	r0, r1, #5
 8003e7a:	6979      	ldr	r1, [r7, #20]
 8003e7c:	4401      	add	r1, r0
 8003e7e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003e82:	4313      	orrs	r3, r2
 8003e84:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8003e86:	79fb      	ldrb	r3, [r7, #7]
 8003e88:	2b01      	cmp	r3, #1
 8003e8a:	d10d      	bne.n	8003ea8 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8003e8c:	68bb      	ldr	r3, [r7, #8]
 8003e8e:	68db      	ldr	r3, [r3, #12]
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d009      	beq.n	8003ea8 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8003e94:	68bb      	ldr	r3, [r7, #8]
 8003e96:	68d9      	ldr	r1, [r3, #12]
 8003e98:	693b      	ldr	r3, [r7, #16]
 8003e9a:	015a      	lsls	r2, r3, #5
 8003e9c:	697b      	ldr	r3, [r7, #20]
 8003e9e:	4413      	add	r3, r2
 8003ea0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ea4:	460a      	mov	r2, r1
 8003ea6:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8003ea8:	693b      	ldr	r3, [r7, #16]
 8003eaa:	015a      	lsls	r2, r3, #5
 8003eac:	697b      	ldr	r3, [r7, #20]
 8003eae:	4413      	add	r3, r2
 8003eb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	693a      	ldr	r2, [r7, #16]
 8003eb8:	0151      	lsls	r1, r2, #5
 8003eba:	697a      	ldr	r2, [r7, #20]
 8003ebc:	440a      	add	r2, r1
 8003ebe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003ec2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003ec6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8003ec8:	2300      	movs	r3, #0
}
 8003eca:	4618      	mov	r0, r3
 8003ecc:	371c      	adds	r7, #28
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed4:	4770      	bx	lr

08003ed6 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8003ed6:	b480      	push	{r7}
 8003ed8:	b089      	sub	sp, #36	; 0x24
 8003eda:	af00      	add	r7, sp, #0
 8003edc:	60f8      	str	r0, [r7, #12]
 8003ede:	60b9      	str	r1, [r7, #8]
 8003ee0:	4611      	mov	r1, r2
 8003ee2:	461a      	mov	r2, r3
 8003ee4:	460b      	mov	r3, r1
 8003ee6:	71fb      	strb	r3, [r7, #7]
 8003ee8:	4613      	mov	r3, r2
 8003eea:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8003ef0:	68bb      	ldr	r3, [r7, #8]
 8003ef2:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8003ef4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d123      	bne.n	8003f44 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8003efc:	88bb      	ldrh	r3, [r7, #4]
 8003efe:	3303      	adds	r3, #3
 8003f00:	089b      	lsrs	r3, r3, #2
 8003f02:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8003f04:	2300      	movs	r3, #0
 8003f06:	61bb      	str	r3, [r7, #24]
 8003f08:	e018      	b.n	8003f3c <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8003f0a:	79fb      	ldrb	r3, [r7, #7]
 8003f0c:	031a      	lsls	r2, r3, #12
 8003f0e:	697b      	ldr	r3, [r7, #20]
 8003f10:	4413      	add	r3, r2
 8003f12:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f16:	461a      	mov	r2, r3
 8003f18:	69fb      	ldr	r3, [r7, #28]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	6013      	str	r3, [r2, #0]
      pSrc++;
 8003f1e:	69fb      	ldr	r3, [r7, #28]
 8003f20:	3301      	adds	r3, #1
 8003f22:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8003f24:	69fb      	ldr	r3, [r7, #28]
 8003f26:	3301      	adds	r3, #1
 8003f28:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8003f2a:	69fb      	ldr	r3, [r7, #28]
 8003f2c:	3301      	adds	r3, #1
 8003f2e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8003f30:	69fb      	ldr	r3, [r7, #28]
 8003f32:	3301      	adds	r3, #1
 8003f34:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8003f36:	69bb      	ldr	r3, [r7, #24]
 8003f38:	3301      	adds	r3, #1
 8003f3a:	61bb      	str	r3, [r7, #24]
 8003f3c:	69ba      	ldr	r2, [r7, #24]
 8003f3e:	693b      	ldr	r3, [r7, #16]
 8003f40:	429a      	cmp	r2, r3
 8003f42:	d3e2      	bcc.n	8003f0a <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8003f44:	2300      	movs	r3, #0
}
 8003f46:	4618      	mov	r0, r3
 8003f48:	3724      	adds	r7, #36	; 0x24
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f50:	4770      	bx	lr

08003f52 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8003f52:	b480      	push	{r7}
 8003f54:	b08b      	sub	sp, #44	; 0x2c
 8003f56:	af00      	add	r7, sp, #0
 8003f58:	60f8      	str	r0, [r7, #12]
 8003f5a:	60b9      	str	r1, [r7, #8]
 8003f5c:	4613      	mov	r3, r2
 8003f5e:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8003f64:	68bb      	ldr	r3, [r7, #8]
 8003f66:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8003f68:	88fb      	ldrh	r3, [r7, #6]
 8003f6a:	089b      	lsrs	r3, r3, #2
 8003f6c:	b29b      	uxth	r3, r3
 8003f6e:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8003f70:	88fb      	ldrh	r3, [r7, #6]
 8003f72:	f003 0303 	and.w	r3, r3, #3
 8003f76:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8003f78:	2300      	movs	r3, #0
 8003f7a:	623b      	str	r3, [r7, #32]
 8003f7c:	e014      	b.n	8003fa8 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8003f7e:	69bb      	ldr	r3, [r7, #24]
 8003f80:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f84:	681a      	ldr	r2, [r3, #0]
 8003f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f88:	601a      	str	r2, [r3, #0]
    pDest++;
 8003f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f8c:	3301      	adds	r3, #1
 8003f8e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8003f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f92:	3301      	adds	r3, #1
 8003f94:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8003f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f98:	3301      	adds	r3, #1
 8003f9a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8003f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f9e:	3301      	adds	r3, #1
 8003fa0:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8003fa2:	6a3b      	ldr	r3, [r7, #32]
 8003fa4:	3301      	adds	r3, #1
 8003fa6:	623b      	str	r3, [r7, #32]
 8003fa8:	6a3a      	ldr	r2, [r7, #32]
 8003faa:	697b      	ldr	r3, [r7, #20]
 8003fac:	429a      	cmp	r2, r3
 8003fae:	d3e6      	bcc.n	8003f7e <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8003fb0:	8bfb      	ldrh	r3, [r7, #30]
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d01e      	beq.n	8003ff4 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8003fb6:	2300      	movs	r3, #0
 8003fb8:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8003fba:	69bb      	ldr	r3, [r7, #24]
 8003fbc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003fc0:	461a      	mov	r2, r3
 8003fc2:	f107 0310 	add.w	r3, r7, #16
 8003fc6:	6812      	ldr	r2, [r2, #0]
 8003fc8:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8003fca:	693a      	ldr	r2, [r7, #16]
 8003fcc:	6a3b      	ldr	r3, [r7, #32]
 8003fce:	b2db      	uxtb	r3, r3
 8003fd0:	00db      	lsls	r3, r3, #3
 8003fd2:	fa22 f303 	lsr.w	r3, r2, r3
 8003fd6:	b2da      	uxtb	r2, r3
 8003fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fda:	701a      	strb	r2, [r3, #0]
      i++;
 8003fdc:	6a3b      	ldr	r3, [r7, #32]
 8003fde:	3301      	adds	r3, #1
 8003fe0:	623b      	str	r3, [r7, #32]
      pDest++;
 8003fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fe4:	3301      	adds	r3, #1
 8003fe6:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8003fe8:	8bfb      	ldrh	r3, [r7, #30]
 8003fea:	3b01      	subs	r3, #1
 8003fec:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8003fee:	8bfb      	ldrh	r3, [r7, #30]
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d1ea      	bne.n	8003fca <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8003ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	372c      	adds	r7, #44	; 0x2c
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004000:	4770      	bx	lr

08004002 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004002:	b480      	push	{r7}
 8004004:	b085      	sub	sp, #20
 8004006:	af00      	add	r7, sp, #0
 8004008:	6078      	str	r0, [r7, #4]
 800400a:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	781b      	ldrb	r3, [r3, #0]
 8004014:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004016:	683b      	ldr	r3, [r7, #0]
 8004018:	785b      	ldrb	r3, [r3, #1]
 800401a:	2b01      	cmp	r3, #1
 800401c:	d12c      	bne.n	8004078 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800401e:	68bb      	ldr	r3, [r7, #8]
 8004020:	015a      	lsls	r2, r3, #5
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	4413      	add	r3, r2
 8004026:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	2b00      	cmp	r3, #0
 800402e:	db12      	blt.n	8004056 <USB_EPSetStall+0x54>
 8004030:	68bb      	ldr	r3, [r7, #8]
 8004032:	2b00      	cmp	r3, #0
 8004034:	d00f      	beq.n	8004056 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8004036:	68bb      	ldr	r3, [r7, #8]
 8004038:	015a      	lsls	r2, r3, #5
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	4413      	add	r3, r2
 800403e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	68ba      	ldr	r2, [r7, #8]
 8004046:	0151      	lsls	r1, r2, #5
 8004048:	68fa      	ldr	r2, [r7, #12]
 800404a:	440a      	add	r2, r1
 800404c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004050:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004054:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8004056:	68bb      	ldr	r3, [r7, #8]
 8004058:	015a      	lsls	r2, r3, #5
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	4413      	add	r3, r2
 800405e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	68ba      	ldr	r2, [r7, #8]
 8004066:	0151      	lsls	r1, r2, #5
 8004068:	68fa      	ldr	r2, [r7, #12]
 800406a:	440a      	add	r2, r1
 800406c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004070:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004074:	6013      	str	r3, [r2, #0]
 8004076:	e02b      	b.n	80040d0 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004078:	68bb      	ldr	r3, [r7, #8]
 800407a:	015a      	lsls	r2, r3, #5
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	4413      	add	r3, r2
 8004080:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	2b00      	cmp	r3, #0
 8004088:	db12      	blt.n	80040b0 <USB_EPSetStall+0xae>
 800408a:	68bb      	ldr	r3, [r7, #8]
 800408c:	2b00      	cmp	r3, #0
 800408e:	d00f      	beq.n	80040b0 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8004090:	68bb      	ldr	r3, [r7, #8]
 8004092:	015a      	lsls	r2, r3, #5
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	4413      	add	r3, r2
 8004098:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	68ba      	ldr	r2, [r7, #8]
 80040a0:	0151      	lsls	r1, r2, #5
 80040a2:	68fa      	ldr	r2, [r7, #12]
 80040a4:	440a      	add	r2, r1
 80040a6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80040aa:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80040ae:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80040b0:	68bb      	ldr	r3, [r7, #8]
 80040b2:	015a      	lsls	r2, r3, #5
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	4413      	add	r3, r2
 80040b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	68ba      	ldr	r2, [r7, #8]
 80040c0:	0151      	lsls	r1, r2, #5
 80040c2:	68fa      	ldr	r2, [r7, #12]
 80040c4:	440a      	add	r2, r1
 80040c6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80040ca:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80040ce:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80040d0:	2300      	movs	r3, #0
}
 80040d2:	4618      	mov	r0, r3
 80040d4:	3714      	adds	r7, #20
 80040d6:	46bd      	mov	sp, r7
 80040d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040dc:	4770      	bx	lr

080040de <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80040de:	b480      	push	{r7}
 80040e0:	b085      	sub	sp, #20
 80040e2:	af00      	add	r7, sp, #0
 80040e4:	6078      	str	r0, [r7, #4]
 80040e6:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	781b      	ldrb	r3, [r3, #0]
 80040f0:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80040f2:	683b      	ldr	r3, [r7, #0]
 80040f4:	785b      	ldrb	r3, [r3, #1]
 80040f6:	2b01      	cmp	r3, #1
 80040f8:	d128      	bne.n	800414c <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80040fa:	68bb      	ldr	r3, [r7, #8]
 80040fc:	015a      	lsls	r2, r3, #5
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	4413      	add	r3, r2
 8004102:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	68ba      	ldr	r2, [r7, #8]
 800410a:	0151      	lsls	r1, r2, #5
 800410c:	68fa      	ldr	r2, [r7, #12]
 800410e:	440a      	add	r2, r1
 8004110:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004114:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004118:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800411a:	683b      	ldr	r3, [r7, #0]
 800411c:	78db      	ldrb	r3, [r3, #3]
 800411e:	2b03      	cmp	r3, #3
 8004120:	d003      	beq.n	800412a <USB_EPClearStall+0x4c>
 8004122:	683b      	ldr	r3, [r7, #0]
 8004124:	78db      	ldrb	r3, [r3, #3]
 8004126:	2b02      	cmp	r3, #2
 8004128:	d138      	bne.n	800419c <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800412a:	68bb      	ldr	r3, [r7, #8]
 800412c:	015a      	lsls	r2, r3, #5
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	4413      	add	r3, r2
 8004132:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	68ba      	ldr	r2, [r7, #8]
 800413a:	0151      	lsls	r1, r2, #5
 800413c:	68fa      	ldr	r2, [r7, #12]
 800413e:	440a      	add	r2, r1
 8004140:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004144:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004148:	6013      	str	r3, [r2, #0]
 800414a:	e027      	b.n	800419c <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800414c:	68bb      	ldr	r3, [r7, #8]
 800414e:	015a      	lsls	r2, r3, #5
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	4413      	add	r3, r2
 8004154:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	68ba      	ldr	r2, [r7, #8]
 800415c:	0151      	lsls	r1, r2, #5
 800415e:	68fa      	ldr	r2, [r7, #12]
 8004160:	440a      	add	r2, r1
 8004162:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004166:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800416a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	78db      	ldrb	r3, [r3, #3]
 8004170:	2b03      	cmp	r3, #3
 8004172:	d003      	beq.n	800417c <USB_EPClearStall+0x9e>
 8004174:	683b      	ldr	r3, [r7, #0]
 8004176:	78db      	ldrb	r3, [r3, #3]
 8004178:	2b02      	cmp	r3, #2
 800417a:	d10f      	bne.n	800419c <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800417c:	68bb      	ldr	r3, [r7, #8]
 800417e:	015a      	lsls	r2, r3, #5
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	4413      	add	r3, r2
 8004184:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	68ba      	ldr	r2, [r7, #8]
 800418c:	0151      	lsls	r1, r2, #5
 800418e:	68fa      	ldr	r2, [r7, #12]
 8004190:	440a      	add	r2, r1
 8004192:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004196:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800419a:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800419c:	2300      	movs	r3, #0
}
 800419e:	4618      	mov	r0, r3
 80041a0:	3714      	adds	r7, #20
 80041a2:	46bd      	mov	sp, r7
 80041a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a8:	4770      	bx	lr

080041aa <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80041aa:	b480      	push	{r7}
 80041ac:	b085      	sub	sp, #20
 80041ae:	af00      	add	r7, sp, #0
 80041b0:	6078      	str	r0, [r7, #4]
 80041b2:	460b      	mov	r3, r1
 80041b4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	68fa      	ldr	r2, [r7, #12]
 80041c4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80041c8:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80041cc:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041d4:	681a      	ldr	r2, [r3, #0]
 80041d6:	78fb      	ldrb	r3, [r7, #3]
 80041d8:	011b      	lsls	r3, r3, #4
 80041da:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80041de:	68f9      	ldr	r1, [r7, #12]
 80041e0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80041e4:	4313      	orrs	r3, r2
 80041e6:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80041e8:	2300      	movs	r3, #0
}
 80041ea:	4618      	mov	r0, r3
 80041ec:	3714      	adds	r7, #20
 80041ee:	46bd      	mov	sp, r7
 80041f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f4:	4770      	bx	lr

080041f6 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80041f6:	b480      	push	{r7}
 80041f8:	b085      	sub	sp, #20
 80041fa:	af00      	add	r7, sp, #0
 80041fc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	68fa      	ldr	r2, [r7, #12]
 800420c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004210:	f023 0303 	bic.w	r3, r3, #3
 8004214:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800421c:	685b      	ldr	r3, [r3, #4]
 800421e:	68fa      	ldr	r2, [r7, #12]
 8004220:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004224:	f023 0302 	bic.w	r3, r3, #2
 8004228:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800422a:	2300      	movs	r3, #0
}
 800422c:	4618      	mov	r0, r3
 800422e:	3714      	adds	r7, #20
 8004230:	46bd      	mov	sp, r7
 8004232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004236:	4770      	bx	lr

08004238 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004238:	b480      	push	{r7}
 800423a:	b085      	sub	sp, #20
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	68fa      	ldr	r2, [r7, #12]
 800424e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004252:	f023 0303 	bic.w	r3, r3, #3
 8004256:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800425e:	685b      	ldr	r3, [r3, #4]
 8004260:	68fa      	ldr	r2, [r7, #12]
 8004262:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004266:	f043 0302 	orr.w	r3, r3, #2
 800426a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800426c:	2300      	movs	r3, #0
}
 800426e:	4618      	mov	r0, r3
 8004270:	3714      	adds	r7, #20
 8004272:	46bd      	mov	sp, r7
 8004274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004278:	4770      	bx	lr

0800427a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800427a:	b480      	push	{r7}
 800427c:	b085      	sub	sp, #20
 800427e:	af00      	add	r7, sp, #0
 8004280:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	695b      	ldr	r3, [r3, #20]
 8004286:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	699b      	ldr	r3, [r3, #24]
 800428c:	68fa      	ldr	r2, [r7, #12]
 800428e:	4013      	ands	r3, r2
 8004290:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004292:	68fb      	ldr	r3, [r7, #12]
}
 8004294:	4618      	mov	r0, r3
 8004296:	3714      	adds	r7, #20
 8004298:	46bd      	mov	sp, r7
 800429a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429e:	4770      	bx	lr

080042a0 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80042a0:	b480      	push	{r7}
 80042a2:	b085      	sub	sp, #20
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042b2:	699b      	ldr	r3, [r3, #24]
 80042b4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042bc:	69db      	ldr	r3, [r3, #28]
 80042be:	68ba      	ldr	r2, [r7, #8]
 80042c0:	4013      	ands	r3, r2
 80042c2:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80042c4:	68bb      	ldr	r3, [r7, #8]
 80042c6:	0c1b      	lsrs	r3, r3, #16
}
 80042c8:	4618      	mov	r0, r3
 80042ca:	3714      	adds	r7, #20
 80042cc:	46bd      	mov	sp, r7
 80042ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d2:	4770      	bx	lr

080042d4 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80042d4:	b480      	push	{r7}
 80042d6:	b085      	sub	sp, #20
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042e6:	699b      	ldr	r3, [r3, #24]
 80042e8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042f0:	69db      	ldr	r3, [r3, #28]
 80042f2:	68ba      	ldr	r2, [r7, #8]
 80042f4:	4013      	ands	r3, r2
 80042f6:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80042f8:	68bb      	ldr	r3, [r7, #8]
 80042fa:	b29b      	uxth	r3, r3
}
 80042fc:	4618      	mov	r0, r3
 80042fe:	3714      	adds	r7, #20
 8004300:	46bd      	mov	sp, r7
 8004302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004306:	4770      	bx	lr

08004308 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004308:	b480      	push	{r7}
 800430a:	b085      	sub	sp, #20
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]
 8004310:	460b      	mov	r3, r1
 8004312:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8004318:	78fb      	ldrb	r3, [r7, #3]
 800431a:	015a      	lsls	r2, r3, #5
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	4413      	add	r3, r2
 8004320:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004324:	689b      	ldr	r3, [r3, #8]
 8004326:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800432e:	695b      	ldr	r3, [r3, #20]
 8004330:	68ba      	ldr	r2, [r7, #8]
 8004332:	4013      	ands	r3, r2
 8004334:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004336:	68bb      	ldr	r3, [r7, #8]
}
 8004338:	4618      	mov	r0, r3
 800433a:	3714      	adds	r7, #20
 800433c:	46bd      	mov	sp, r7
 800433e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004342:	4770      	bx	lr

08004344 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004344:	b480      	push	{r7}
 8004346:	b087      	sub	sp, #28
 8004348:	af00      	add	r7, sp, #0
 800434a:	6078      	str	r0, [r7, #4]
 800434c:	460b      	mov	r3, r1
 800434e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8004354:	697b      	ldr	r3, [r7, #20]
 8004356:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800435a:	691b      	ldr	r3, [r3, #16]
 800435c:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800435e:	697b      	ldr	r3, [r7, #20]
 8004360:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004364:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004366:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8004368:	78fb      	ldrb	r3, [r7, #3]
 800436a:	f003 030f 	and.w	r3, r3, #15
 800436e:	68fa      	ldr	r2, [r7, #12]
 8004370:	fa22 f303 	lsr.w	r3, r2, r3
 8004374:	01db      	lsls	r3, r3, #7
 8004376:	b2db      	uxtb	r3, r3
 8004378:	693a      	ldr	r2, [r7, #16]
 800437a:	4313      	orrs	r3, r2
 800437c:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800437e:	78fb      	ldrb	r3, [r7, #3]
 8004380:	015a      	lsls	r2, r3, #5
 8004382:	697b      	ldr	r3, [r7, #20]
 8004384:	4413      	add	r3, r2
 8004386:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800438a:	689b      	ldr	r3, [r3, #8]
 800438c:	693a      	ldr	r2, [r7, #16]
 800438e:	4013      	ands	r3, r2
 8004390:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004392:	68bb      	ldr	r3, [r7, #8]
}
 8004394:	4618      	mov	r0, r3
 8004396:	371c      	adds	r7, #28
 8004398:	46bd      	mov	sp, r7
 800439a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439e:	4770      	bx	lr

080043a0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80043a0:	b480      	push	{r7}
 80043a2:	b083      	sub	sp, #12
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	695b      	ldr	r3, [r3, #20]
 80043ac:	f003 0301 	and.w	r3, r3, #1
}
 80043b0:	4618      	mov	r0, r3
 80043b2:	370c      	adds	r7, #12
 80043b4:	46bd      	mov	sp, r7
 80043b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ba:	4770      	bx	lr

080043bc <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80043bc:	b480      	push	{r7}
 80043be:	b085      	sub	sp, #20
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	68fa      	ldr	r2, [r7, #12]
 80043d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80043d6:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80043da:	f023 0307 	bic.w	r3, r3, #7
 80043de:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043e6:	685b      	ldr	r3, [r3, #4]
 80043e8:	68fa      	ldr	r2, [r7, #12]
 80043ea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80043ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043f2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80043f4:	2300      	movs	r3, #0
}
 80043f6:	4618      	mov	r0, r3
 80043f8:	3714      	adds	r7, #20
 80043fa:	46bd      	mov	sp, r7
 80043fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004400:	4770      	bx	lr
	...

08004404 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8004404:	b480      	push	{r7}
 8004406:	b087      	sub	sp, #28
 8004408:	af00      	add	r7, sp, #0
 800440a:	60f8      	str	r0, [r7, #12]
 800440c:	460b      	mov	r3, r1
 800440e:	607a      	str	r2, [r7, #4]
 8004410:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	333c      	adds	r3, #60	; 0x3c
 800441a:	3304      	adds	r3, #4
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8004420:	693b      	ldr	r3, [r7, #16]
 8004422:	4a26      	ldr	r2, [pc, #152]	; (80044bc <USB_EP0_OutStart+0xb8>)
 8004424:	4293      	cmp	r3, r2
 8004426:	d90a      	bls.n	800443e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004428:	697b      	ldr	r3, [r7, #20]
 800442a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004434:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004438:	d101      	bne.n	800443e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800443a:	2300      	movs	r3, #0
 800443c:	e037      	b.n	80044ae <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800443e:	697b      	ldr	r3, [r7, #20]
 8004440:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004444:	461a      	mov	r2, r3
 8004446:	2300      	movs	r3, #0
 8004448:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800444a:	697b      	ldr	r3, [r7, #20]
 800444c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004450:	691b      	ldr	r3, [r3, #16]
 8004452:	697a      	ldr	r2, [r7, #20]
 8004454:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004458:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800445c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800445e:	697b      	ldr	r3, [r7, #20]
 8004460:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004464:	691b      	ldr	r3, [r3, #16]
 8004466:	697a      	ldr	r2, [r7, #20]
 8004468:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800446c:	f043 0318 	orr.w	r3, r3, #24
 8004470:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8004472:	697b      	ldr	r3, [r7, #20]
 8004474:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004478:	691b      	ldr	r3, [r3, #16]
 800447a:	697a      	ldr	r2, [r7, #20]
 800447c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004480:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8004484:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8004486:	7afb      	ldrb	r3, [r7, #11]
 8004488:	2b01      	cmp	r3, #1
 800448a:	d10f      	bne.n	80044ac <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800448c:	697b      	ldr	r3, [r7, #20]
 800448e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004492:	461a      	mov	r2, r3
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8004498:	697b      	ldr	r3, [r7, #20]
 800449a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	697a      	ldr	r2, [r7, #20]
 80044a2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80044a6:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80044aa:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80044ac:	2300      	movs	r3, #0
}
 80044ae:	4618      	mov	r0, r3
 80044b0:	371c      	adds	r7, #28
 80044b2:	46bd      	mov	sp, r7
 80044b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b8:	4770      	bx	lr
 80044ba:	bf00      	nop
 80044bc:	4f54300a 	.word	0x4f54300a

080044c0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80044c0:	b480      	push	{r7}
 80044c2:	b085      	sub	sp, #20
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80044c8:	2300      	movs	r3, #0
 80044ca:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	3301      	adds	r3, #1
 80044d0:	60fb      	str	r3, [r7, #12]
 80044d2:	4a13      	ldr	r2, [pc, #76]	; (8004520 <USB_CoreReset+0x60>)
 80044d4:	4293      	cmp	r3, r2
 80044d6:	d901      	bls.n	80044dc <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 80044d8:	2303      	movs	r3, #3
 80044da:	e01a      	b.n	8004512 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	691b      	ldr	r3, [r3, #16]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	daf3      	bge.n	80044cc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80044e4:	2300      	movs	r3, #0
 80044e6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	691b      	ldr	r3, [r3, #16]
 80044ec:	f043 0201 	orr.w	r2, r3, #1
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	3301      	adds	r3, #1
 80044f8:	60fb      	str	r3, [r7, #12]
 80044fa:	4a09      	ldr	r2, [pc, #36]	; (8004520 <USB_CoreReset+0x60>)
 80044fc:	4293      	cmp	r3, r2
 80044fe:	d901      	bls.n	8004504 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8004500:	2303      	movs	r3, #3
 8004502:	e006      	b.n	8004512 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	691b      	ldr	r3, [r3, #16]
 8004508:	f003 0301 	and.w	r3, r3, #1
 800450c:	2b01      	cmp	r3, #1
 800450e:	d0f1      	beq.n	80044f4 <USB_CoreReset+0x34>

  return HAL_OK;
 8004510:	2300      	movs	r3, #0
}
 8004512:	4618      	mov	r0, r3
 8004514:	3714      	adds	r7, #20
 8004516:	46bd      	mov	sp, r7
 8004518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451c:	4770      	bx	lr
 800451e:	bf00      	nop
 8004520:	00030d40 	.word	0x00030d40

08004524 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004524:	b580      	push	{r7, lr}
 8004526:	b084      	sub	sp, #16
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]
 800452c:	460b      	mov	r3, r1
 800452e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8004530:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8004534:	f002 fa68 	bl	8006a08 <USBD_static_malloc>
 8004538:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	2b00      	cmp	r3, #0
 800453e:	d105      	bne.n	800454c <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2200      	movs	r2, #0
 8004544:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8004548:	2302      	movs	r3, #2
 800454a:	e066      	b.n	800461a <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	68fa      	ldr	r2, [r7, #12]
 8004550:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	7c1b      	ldrb	r3, [r3, #16]
 8004558:	2b00      	cmp	r3, #0
 800455a:	d119      	bne.n	8004590 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800455c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004560:	2202      	movs	r2, #2
 8004562:	2181      	movs	r1, #129	; 0x81
 8004564:	6878      	ldr	r0, [r7, #4]
 8004566:	f002 f92c 	bl	80067c2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	2201      	movs	r2, #1
 800456e:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8004570:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004574:	2202      	movs	r2, #2
 8004576:	2101      	movs	r1, #1
 8004578:	6878      	ldr	r0, [r7, #4]
 800457a:	f002 f922 	bl	80067c2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	2201      	movs	r2, #1
 8004582:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	2210      	movs	r2, #16
 800458a:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800458e:	e016      	b.n	80045be <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8004590:	2340      	movs	r3, #64	; 0x40
 8004592:	2202      	movs	r2, #2
 8004594:	2181      	movs	r1, #129	; 0x81
 8004596:	6878      	ldr	r0, [r7, #4]
 8004598:	f002 f913 	bl	80067c2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2201      	movs	r2, #1
 80045a0:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80045a2:	2340      	movs	r3, #64	; 0x40
 80045a4:	2202      	movs	r2, #2
 80045a6:	2101      	movs	r1, #1
 80045a8:	6878      	ldr	r0, [r7, #4]
 80045aa:	f002 f90a 	bl	80067c2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	2201      	movs	r2, #1
 80045b2:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	2210      	movs	r2, #16
 80045ba:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80045be:	2308      	movs	r3, #8
 80045c0:	2203      	movs	r2, #3
 80045c2:	2182      	movs	r1, #130	; 0x82
 80045c4:	6878      	ldr	r0, [r7, #4]
 80045c6:	f002 f8fc 	bl	80067c2 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	2201      	movs	r2, #1
 80045ce:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	2200      	movs	r2, #0
 80045e0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	2200      	movs	r2, #0
 80045e8:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	7c1b      	ldrb	r3, [r3, #16]
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d109      	bne.n	8004608 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80045fa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80045fe:	2101      	movs	r1, #1
 8004600:	6878      	ldr	r0, [r7, #4]
 8004602:	f002 f9cd 	bl	80069a0 <USBD_LL_PrepareReceive>
 8004606:	e007      	b.n	8004618 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800460e:	2340      	movs	r3, #64	; 0x40
 8004610:	2101      	movs	r1, #1
 8004612:	6878      	ldr	r0, [r7, #4]
 8004614:	f002 f9c4 	bl	80069a0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8004618:	2300      	movs	r3, #0
}
 800461a:	4618      	mov	r0, r3
 800461c:	3710      	adds	r7, #16
 800461e:	46bd      	mov	sp, r7
 8004620:	bd80      	pop	{r7, pc}

08004622 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004622:	b580      	push	{r7, lr}
 8004624:	b082      	sub	sp, #8
 8004626:	af00      	add	r7, sp, #0
 8004628:	6078      	str	r0, [r7, #4]
 800462a:	460b      	mov	r3, r1
 800462c:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800462e:	2181      	movs	r1, #129	; 0x81
 8004630:	6878      	ldr	r0, [r7, #4]
 8004632:	f002 f8ec 	bl	800680e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	2200      	movs	r2, #0
 800463a:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800463c:	2101      	movs	r1, #1
 800463e:	6878      	ldr	r0, [r7, #4]
 8004640:	f002 f8e5 	bl	800680e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2200      	movs	r2, #0
 8004648:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800464c:	2182      	movs	r1, #130	; 0x82
 800464e:	6878      	ldr	r0, [r7, #4]
 8004650:	f002 f8dd 	bl	800680e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2200      	movs	r2, #0
 8004658:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2200      	movs	r2, #0
 8004660:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800466a:	2b00      	cmp	r3, #0
 800466c:	d00e      	beq.n	800468c <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004674:	685b      	ldr	r3, [r3, #4]
 8004676:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800467e:	4618      	mov	r0, r3
 8004680:	f002 f9d0 	bl	8006a24 <USBD_static_free>
    pdev->pClassData = NULL;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2200      	movs	r2, #0
 8004688:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800468c:	2300      	movs	r3, #0
}
 800468e:	4618      	mov	r0, r3
 8004690:	3708      	adds	r7, #8
 8004692:	46bd      	mov	sp, r7
 8004694:	bd80      	pop	{r7, pc}
	...

08004698 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8004698:	b580      	push	{r7, lr}
 800469a:	b086      	sub	sp, #24
 800469c:	af00      	add	r7, sp, #0
 800469e:	6078      	str	r0, [r7, #4]
 80046a0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80046a8:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80046aa:	2300      	movs	r3, #0
 80046ac:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80046ae:	2300      	movs	r3, #0
 80046b0:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80046b2:	2300      	movs	r3, #0
 80046b4:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80046b6:	693b      	ldr	r3, [r7, #16]
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d101      	bne.n	80046c0 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 80046bc:	2303      	movs	r3, #3
 80046be:	e0af      	b.n	8004820 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80046c0:	683b      	ldr	r3, [r7, #0]
 80046c2:	781b      	ldrb	r3, [r3, #0]
 80046c4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d03f      	beq.n	800474c <USBD_CDC_Setup+0xb4>
 80046cc:	2b20      	cmp	r3, #32
 80046ce:	f040 809f 	bne.w	8004810 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80046d2:	683b      	ldr	r3, [r7, #0]
 80046d4:	88db      	ldrh	r3, [r3, #6]
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d02e      	beq.n	8004738 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80046da:	683b      	ldr	r3, [r7, #0]
 80046dc:	781b      	ldrb	r3, [r3, #0]
 80046de:	b25b      	sxtb	r3, r3
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	da16      	bge.n	8004712 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80046ea:	689b      	ldr	r3, [r3, #8]
 80046ec:	683a      	ldr	r2, [r7, #0]
 80046ee:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 80046f0:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80046f2:	683a      	ldr	r2, [r7, #0]
 80046f4:	88d2      	ldrh	r2, [r2, #6]
 80046f6:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	88db      	ldrh	r3, [r3, #6]
 80046fc:	2b07      	cmp	r3, #7
 80046fe:	bf28      	it	cs
 8004700:	2307      	movcs	r3, #7
 8004702:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8004704:	693b      	ldr	r3, [r7, #16]
 8004706:	89fa      	ldrh	r2, [r7, #14]
 8004708:	4619      	mov	r1, r3
 800470a:	6878      	ldr	r0, [r7, #4]
 800470c:	f001 fb19 	bl	8005d42 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8004710:	e085      	b.n	800481e <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 8004712:	683b      	ldr	r3, [r7, #0]
 8004714:	785a      	ldrb	r2, [r3, #1]
 8004716:	693b      	ldr	r3, [r7, #16]
 8004718:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800471c:	683b      	ldr	r3, [r7, #0]
 800471e:	88db      	ldrh	r3, [r3, #6]
 8004720:	b2da      	uxtb	r2, r3
 8004722:	693b      	ldr	r3, [r7, #16]
 8004724:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8004728:	6939      	ldr	r1, [r7, #16]
 800472a:	683b      	ldr	r3, [r7, #0]
 800472c:	88db      	ldrh	r3, [r3, #6]
 800472e:	461a      	mov	r2, r3
 8004730:	6878      	ldr	r0, [r7, #4]
 8004732:	f001 fb32 	bl	8005d9a <USBD_CtlPrepareRx>
      break;
 8004736:	e072      	b.n	800481e <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800473e:	689b      	ldr	r3, [r3, #8]
 8004740:	683a      	ldr	r2, [r7, #0]
 8004742:	7850      	ldrb	r0, [r2, #1]
 8004744:	2200      	movs	r2, #0
 8004746:	6839      	ldr	r1, [r7, #0]
 8004748:	4798      	blx	r3
      break;
 800474a:	e068      	b.n	800481e <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	785b      	ldrb	r3, [r3, #1]
 8004750:	2b0b      	cmp	r3, #11
 8004752:	d852      	bhi.n	80047fa <USBD_CDC_Setup+0x162>
 8004754:	a201      	add	r2, pc, #4	; (adr r2, 800475c <USBD_CDC_Setup+0xc4>)
 8004756:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800475a:	bf00      	nop
 800475c:	0800478d 	.word	0x0800478d
 8004760:	08004809 	.word	0x08004809
 8004764:	080047fb 	.word	0x080047fb
 8004768:	080047fb 	.word	0x080047fb
 800476c:	080047fb 	.word	0x080047fb
 8004770:	080047fb 	.word	0x080047fb
 8004774:	080047fb 	.word	0x080047fb
 8004778:	080047fb 	.word	0x080047fb
 800477c:	080047fb 	.word	0x080047fb
 8004780:	080047fb 	.word	0x080047fb
 8004784:	080047b7 	.word	0x080047b7
 8004788:	080047e1 	.word	0x080047e1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004792:	b2db      	uxtb	r3, r3
 8004794:	2b03      	cmp	r3, #3
 8004796:	d107      	bne.n	80047a8 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8004798:	f107 030a 	add.w	r3, r7, #10
 800479c:	2202      	movs	r2, #2
 800479e:	4619      	mov	r1, r3
 80047a0:	6878      	ldr	r0, [r7, #4]
 80047a2:	f001 face 	bl	8005d42 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80047a6:	e032      	b.n	800480e <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 80047a8:	6839      	ldr	r1, [r7, #0]
 80047aa:	6878      	ldr	r0, [r7, #4]
 80047ac:	f001 fa58 	bl	8005c60 <USBD_CtlError>
            ret = USBD_FAIL;
 80047b0:	2303      	movs	r3, #3
 80047b2:	75fb      	strb	r3, [r7, #23]
          break;
 80047b4:	e02b      	b.n	800480e <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80047bc:	b2db      	uxtb	r3, r3
 80047be:	2b03      	cmp	r3, #3
 80047c0:	d107      	bne.n	80047d2 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80047c2:	f107 030d 	add.w	r3, r7, #13
 80047c6:	2201      	movs	r2, #1
 80047c8:	4619      	mov	r1, r3
 80047ca:	6878      	ldr	r0, [r7, #4]
 80047cc:	f001 fab9 	bl	8005d42 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80047d0:	e01d      	b.n	800480e <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 80047d2:	6839      	ldr	r1, [r7, #0]
 80047d4:	6878      	ldr	r0, [r7, #4]
 80047d6:	f001 fa43 	bl	8005c60 <USBD_CtlError>
            ret = USBD_FAIL;
 80047da:	2303      	movs	r3, #3
 80047dc:	75fb      	strb	r3, [r7, #23]
          break;
 80047de:	e016      	b.n	800480e <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80047e6:	b2db      	uxtb	r3, r3
 80047e8:	2b03      	cmp	r3, #3
 80047ea:	d00f      	beq.n	800480c <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 80047ec:	6839      	ldr	r1, [r7, #0]
 80047ee:	6878      	ldr	r0, [r7, #4]
 80047f0:	f001 fa36 	bl	8005c60 <USBD_CtlError>
            ret = USBD_FAIL;
 80047f4:	2303      	movs	r3, #3
 80047f6:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80047f8:	e008      	b.n	800480c <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80047fa:	6839      	ldr	r1, [r7, #0]
 80047fc:	6878      	ldr	r0, [r7, #4]
 80047fe:	f001 fa2f 	bl	8005c60 <USBD_CtlError>
          ret = USBD_FAIL;
 8004802:	2303      	movs	r3, #3
 8004804:	75fb      	strb	r3, [r7, #23]
          break;
 8004806:	e002      	b.n	800480e <USBD_CDC_Setup+0x176>
          break;
 8004808:	bf00      	nop
 800480a:	e008      	b.n	800481e <USBD_CDC_Setup+0x186>
          break;
 800480c:	bf00      	nop
      }
      break;
 800480e:	e006      	b.n	800481e <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8004810:	6839      	ldr	r1, [r7, #0]
 8004812:	6878      	ldr	r0, [r7, #4]
 8004814:	f001 fa24 	bl	8005c60 <USBD_CtlError>
      ret = USBD_FAIL;
 8004818:	2303      	movs	r3, #3
 800481a:	75fb      	strb	r3, [r7, #23]
      break;
 800481c:	bf00      	nop
  }

  return (uint8_t)ret;
 800481e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004820:	4618      	mov	r0, r3
 8004822:	3718      	adds	r7, #24
 8004824:	46bd      	mov	sp, r7
 8004826:	bd80      	pop	{r7, pc}

08004828 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004828:	b580      	push	{r7, lr}
 800482a:	b084      	sub	sp, #16
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
 8004830:	460b      	mov	r3, r1
 8004832:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800483a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004842:	2b00      	cmp	r3, #0
 8004844:	d101      	bne.n	800484a <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8004846:	2303      	movs	r3, #3
 8004848:	e04f      	b.n	80048ea <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004850:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8004852:	78fa      	ldrb	r2, [r7, #3]
 8004854:	6879      	ldr	r1, [r7, #4]
 8004856:	4613      	mov	r3, r2
 8004858:	009b      	lsls	r3, r3, #2
 800485a:	4413      	add	r3, r2
 800485c:	009b      	lsls	r3, r3, #2
 800485e:	440b      	add	r3, r1
 8004860:	3318      	adds	r3, #24
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	2b00      	cmp	r3, #0
 8004866:	d029      	beq.n	80048bc <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8004868:	78fa      	ldrb	r2, [r7, #3]
 800486a:	6879      	ldr	r1, [r7, #4]
 800486c:	4613      	mov	r3, r2
 800486e:	009b      	lsls	r3, r3, #2
 8004870:	4413      	add	r3, r2
 8004872:	009b      	lsls	r3, r3, #2
 8004874:	440b      	add	r3, r1
 8004876:	3318      	adds	r3, #24
 8004878:	681a      	ldr	r2, [r3, #0]
 800487a:	78f9      	ldrb	r1, [r7, #3]
 800487c:	68f8      	ldr	r0, [r7, #12]
 800487e:	460b      	mov	r3, r1
 8004880:	00db      	lsls	r3, r3, #3
 8004882:	1a5b      	subs	r3, r3, r1
 8004884:	009b      	lsls	r3, r3, #2
 8004886:	4403      	add	r3, r0
 8004888:	3344      	adds	r3, #68	; 0x44
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	fbb2 f1f3 	udiv	r1, r2, r3
 8004890:	fb01 f303 	mul.w	r3, r1, r3
 8004894:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8004896:	2b00      	cmp	r3, #0
 8004898:	d110      	bne.n	80048bc <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800489a:	78fa      	ldrb	r2, [r7, #3]
 800489c:	6879      	ldr	r1, [r7, #4]
 800489e:	4613      	mov	r3, r2
 80048a0:	009b      	lsls	r3, r3, #2
 80048a2:	4413      	add	r3, r2
 80048a4:	009b      	lsls	r3, r3, #2
 80048a6:	440b      	add	r3, r1
 80048a8:	3318      	adds	r3, #24
 80048aa:	2200      	movs	r2, #0
 80048ac:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80048ae:	78f9      	ldrb	r1, [r7, #3]
 80048b0:	2300      	movs	r3, #0
 80048b2:	2200      	movs	r2, #0
 80048b4:	6878      	ldr	r0, [r7, #4]
 80048b6:	f002 f852 	bl	800695e <USBD_LL_Transmit>
 80048ba:	e015      	b.n	80048e8 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 80048bc:	68bb      	ldr	r3, [r7, #8]
 80048be:	2200      	movs	r2, #0
 80048c0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80048ca:	691b      	ldr	r3, [r3, #16]
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d00b      	beq.n	80048e8 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80048d6:	691b      	ldr	r3, [r3, #16]
 80048d8:	68ba      	ldr	r2, [r7, #8]
 80048da:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80048de:	68ba      	ldr	r2, [r7, #8]
 80048e0:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80048e4:	78fa      	ldrb	r2, [r7, #3]
 80048e6:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80048e8:	2300      	movs	r3, #0
}
 80048ea:	4618      	mov	r0, r3
 80048ec:	3710      	adds	r7, #16
 80048ee:	46bd      	mov	sp, r7
 80048f0:	bd80      	pop	{r7, pc}

080048f2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80048f2:	b580      	push	{r7, lr}
 80048f4:	b084      	sub	sp, #16
 80048f6:	af00      	add	r7, sp, #0
 80048f8:	6078      	str	r0, [r7, #4]
 80048fa:	460b      	mov	r3, r1
 80048fc:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004904:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800490c:	2b00      	cmp	r3, #0
 800490e:	d101      	bne.n	8004914 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8004910:	2303      	movs	r3, #3
 8004912:	e015      	b.n	8004940 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8004914:	78fb      	ldrb	r3, [r7, #3]
 8004916:	4619      	mov	r1, r3
 8004918:	6878      	ldr	r0, [r7, #4]
 800491a:	f002 f862 	bl	80069e2 <USBD_LL_GetRxDataSize>
 800491e:	4602      	mov	r2, r0
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800492c:	68db      	ldr	r3, [r3, #12]
 800492e:	68fa      	ldr	r2, [r7, #12]
 8004930:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8004934:	68fa      	ldr	r2, [r7, #12]
 8004936:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800493a:	4611      	mov	r1, r2
 800493c:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800493e:	2300      	movs	r3, #0
}
 8004940:	4618      	mov	r0, r3
 8004942:	3710      	adds	r7, #16
 8004944:	46bd      	mov	sp, r7
 8004946:	bd80      	pop	{r7, pc}

08004948 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8004948:	b580      	push	{r7, lr}
 800494a:	b084      	sub	sp, #16
 800494c:	af00      	add	r7, sp, #0
 800494e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004956:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	2b00      	cmp	r3, #0
 800495c:	d101      	bne.n	8004962 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800495e:	2303      	movs	r3, #3
 8004960:	e01b      	b.n	800499a <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004968:	2b00      	cmp	r3, #0
 800496a:	d015      	beq.n	8004998 <USBD_CDC_EP0_RxReady+0x50>
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8004972:	2bff      	cmp	r3, #255	; 0xff
 8004974:	d010      	beq.n	8004998 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800497c:	689b      	ldr	r3, [r3, #8]
 800497e:	68fa      	ldr	r2, [r7, #12]
 8004980:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8004984:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8004986:	68fa      	ldr	r2, [r7, #12]
 8004988:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800498c:	b292      	uxth	r2, r2
 800498e:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	22ff      	movs	r2, #255	; 0xff
 8004994:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8004998:	2300      	movs	r3, #0
}
 800499a:	4618      	mov	r0, r3
 800499c:	3710      	adds	r7, #16
 800499e:	46bd      	mov	sp, r7
 80049a0:	bd80      	pop	{r7, pc}
	...

080049a4 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80049a4:	b480      	push	{r7}
 80049a6:	b083      	sub	sp, #12
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2243      	movs	r2, #67	; 0x43
 80049b0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 80049b2:	4b03      	ldr	r3, [pc, #12]	; (80049c0 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80049b4:	4618      	mov	r0, r3
 80049b6:	370c      	adds	r7, #12
 80049b8:	46bd      	mov	sp, r7
 80049ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049be:	4770      	bx	lr
 80049c0:	200000b8 	.word	0x200000b8

080049c4 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80049c4:	b480      	push	{r7}
 80049c6:	b083      	sub	sp, #12
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2243      	movs	r2, #67	; 0x43
 80049d0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 80049d2:	4b03      	ldr	r3, [pc, #12]	; (80049e0 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80049d4:	4618      	mov	r0, r3
 80049d6:	370c      	adds	r7, #12
 80049d8:	46bd      	mov	sp, r7
 80049da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049de:	4770      	bx	lr
 80049e0:	20000074 	.word	0x20000074

080049e4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80049e4:	b480      	push	{r7}
 80049e6:	b083      	sub	sp, #12
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	2243      	movs	r2, #67	; 0x43
 80049f0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 80049f2:	4b03      	ldr	r3, [pc, #12]	; (8004a00 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80049f4:	4618      	mov	r0, r3
 80049f6:	370c      	adds	r7, #12
 80049f8:	46bd      	mov	sp, r7
 80049fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fe:	4770      	bx	lr
 8004a00:	200000fc 	.word	0x200000fc

08004a04 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8004a04:	b480      	push	{r7}
 8004a06:	b083      	sub	sp, #12
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	220a      	movs	r2, #10
 8004a10:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8004a12:	4b03      	ldr	r3, [pc, #12]	; (8004a20 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8004a14:	4618      	mov	r0, r3
 8004a16:	370c      	adds	r7, #12
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1e:	4770      	bx	lr
 8004a20:	20000030 	.word	0x20000030

08004a24 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8004a24:	b480      	push	{r7}
 8004a26:	b083      	sub	sp, #12
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	6078      	str	r0, [r7, #4]
 8004a2c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8004a2e:	683b      	ldr	r3, [r7, #0]
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d101      	bne.n	8004a38 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8004a34:	2303      	movs	r3, #3
 8004a36:	e004      	b.n	8004a42 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	683a      	ldr	r2, [r7, #0]
 8004a3c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8004a40:	2300      	movs	r3, #0
}
 8004a42:	4618      	mov	r0, r3
 8004a44:	370c      	adds	r7, #12
 8004a46:	46bd      	mov	sp, r7
 8004a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4c:	4770      	bx	lr

08004a4e <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8004a4e:	b480      	push	{r7}
 8004a50:	b087      	sub	sp, #28
 8004a52:	af00      	add	r7, sp, #0
 8004a54:	60f8      	str	r0, [r7, #12]
 8004a56:	60b9      	str	r1, [r7, #8]
 8004a58:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004a60:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8004a62:	697b      	ldr	r3, [r7, #20]
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d101      	bne.n	8004a6c <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8004a68:	2303      	movs	r3, #3
 8004a6a:	e008      	b.n	8004a7e <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8004a6c:	697b      	ldr	r3, [r7, #20]
 8004a6e:	68ba      	ldr	r2, [r7, #8]
 8004a70:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8004a74:	697b      	ldr	r3, [r7, #20]
 8004a76:	687a      	ldr	r2, [r7, #4]
 8004a78:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8004a7c:	2300      	movs	r3, #0
}
 8004a7e:	4618      	mov	r0, r3
 8004a80:	371c      	adds	r7, #28
 8004a82:	46bd      	mov	sp, r7
 8004a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a88:	4770      	bx	lr

08004a8a <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8004a8a:	b480      	push	{r7}
 8004a8c:	b085      	sub	sp, #20
 8004a8e:	af00      	add	r7, sp, #0
 8004a90:	6078      	str	r0, [r7, #4]
 8004a92:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004a9a:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d101      	bne.n	8004aa6 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 8004aa2:	2303      	movs	r3, #3
 8004aa4:	e004      	b.n	8004ab0 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	683a      	ldr	r2, [r7, #0]
 8004aaa:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8004aae:	2300      	movs	r3, #0
}
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	3714      	adds	r7, #20
 8004ab4:	46bd      	mov	sp, r7
 8004ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aba:	4770      	bx	lr

08004abc <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8004abc:	b580      	push	{r7, lr}
 8004abe:	b084      	sub	sp, #16
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004aca:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8004acc:	2301      	movs	r3, #1
 8004ace:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d101      	bne.n	8004ade <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8004ada:	2303      	movs	r3, #3
 8004adc:	e01a      	b.n	8004b14 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 8004ade:	68bb      	ldr	r3, [r7, #8]
 8004ae0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d114      	bne.n	8004b12 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8004ae8:	68bb      	ldr	r3, [r7, #8]
 8004aea:	2201      	movs	r2, #1
 8004aec:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8004af0:	68bb      	ldr	r3, [r7, #8]
 8004af2:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8004afa:	68bb      	ldr	r3, [r7, #8]
 8004afc:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8004b00:	68bb      	ldr	r3, [r7, #8]
 8004b02:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8004b06:	2181      	movs	r1, #129	; 0x81
 8004b08:	6878      	ldr	r0, [r7, #4]
 8004b0a:	f001 ff28 	bl	800695e <USBD_LL_Transmit>

    ret = USBD_OK;
 8004b0e:	2300      	movs	r3, #0
 8004b10:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8004b12:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b14:	4618      	mov	r0, r3
 8004b16:	3710      	adds	r7, #16
 8004b18:	46bd      	mov	sp, r7
 8004b1a:	bd80      	pop	{r7, pc}

08004b1c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8004b1c:	b580      	push	{r7, lr}
 8004b1e:	b084      	sub	sp, #16
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004b2a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d101      	bne.n	8004b3a <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8004b36:	2303      	movs	r3, #3
 8004b38:	e016      	b.n	8004b68 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	7c1b      	ldrb	r3, [r3, #16]
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d109      	bne.n	8004b56 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004b48:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004b4c:	2101      	movs	r1, #1
 8004b4e:	6878      	ldr	r0, [r7, #4]
 8004b50:	f001 ff26 	bl	80069a0 <USBD_LL_PrepareReceive>
 8004b54:	e007      	b.n	8004b66 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004b5c:	2340      	movs	r3, #64	; 0x40
 8004b5e:	2101      	movs	r1, #1
 8004b60:	6878      	ldr	r0, [r7, #4]
 8004b62:	f001 ff1d 	bl	80069a0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8004b66:	2300      	movs	r3, #0
}
 8004b68:	4618      	mov	r0, r3
 8004b6a:	3710      	adds	r7, #16
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	bd80      	pop	{r7, pc}

08004b70 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8004b70:	b580      	push	{r7, lr}
 8004b72:	b086      	sub	sp, #24
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	60f8      	str	r0, [r7, #12]
 8004b78:	60b9      	str	r1, [r7, #8]
 8004b7a:	4613      	mov	r3, r2
 8004b7c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d101      	bne.n	8004b88 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8004b84:	2303      	movs	r3, #3
 8004b86:	e01f      	b.n	8004bc8 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	2200      	movs	r2, #0
 8004b94:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8004ba0:	68bb      	ldr	r3, [r7, #8]
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d003      	beq.n	8004bae <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	68ba      	ldr	r2, [r7, #8]
 8004baa:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	2201      	movs	r2, #1
 8004bb2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	79fa      	ldrb	r2, [r7, #7]
 8004bba:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8004bbc:	68f8      	ldr	r0, [r7, #12]
 8004bbe:	f001 fd99 	bl	80066f4 <USBD_LL_Init>
 8004bc2:	4603      	mov	r3, r0
 8004bc4:	75fb      	strb	r3, [r7, #23]

  return ret;
 8004bc6:	7dfb      	ldrb	r3, [r7, #23]
}
 8004bc8:	4618      	mov	r0, r3
 8004bca:	3718      	adds	r7, #24
 8004bcc:	46bd      	mov	sp, r7
 8004bce:	bd80      	pop	{r7, pc}

08004bd0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8004bd0:	b580      	push	{r7, lr}
 8004bd2:	b084      	sub	sp, #16
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	6078      	str	r0, [r7, #4]
 8004bd8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8004bda:	2300      	movs	r3, #0
 8004bdc:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8004bde:	683b      	ldr	r3, [r7, #0]
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d101      	bne.n	8004be8 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8004be4:	2303      	movs	r3, #3
 8004be6:	e016      	b.n	8004c16 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	683a      	ldr	r2, [r7, #0]
 8004bec:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004bf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d00b      	beq.n	8004c14 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004c02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c04:	f107 020e 	add.w	r2, r7, #14
 8004c08:	4610      	mov	r0, r2
 8004c0a:	4798      	blx	r3
 8004c0c:	4602      	mov	r2, r0
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8004c14:	2300      	movs	r3, #0
}
 8004c16:	4618      	mov	r0, r3
 8004c18:	3710      	adds	r7, #16
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	bd80      	pop	{r7, pc}

08004c1e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8004c1e:	b580      	push	{r7, lr}
 8004c20:	b082      	sub	sp, #8
 8004c22:	af00      	add	r7, sp, #0
 8004c24:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8004c26:	6878      	ldr	r0, [r7, #4]
 8004c28:	f001 fdb0 	bl	800678c <USBD_LL_Start>
 8004c2c:	4603      	mov	r3, r0
}
 8004c2e:	4618      	mov	r0, r3
 8004c30:	3708      	adds	r7, #8
 8004c32:	46bd      	mov	sp, r7
 8004c34:	bd80      	pop	{r7, pc}

08004c36 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8004c36:	b480      	push	{r7}
 8004c38:	b083      	sub	sp, #12
 8004c3a:	af00      	add	r7, sp, #0
 8004c3c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8004c3e:	2300      	movs	r3, #0
}
 8004c40:	4618      	mov	r0, r3
 8004c42:	370c      	adds	r7, #12
 8004c44:	46bd      	mov	sp, r7
 8004c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4a:	4770      	bx	lr

08004c4c <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004c4c:	b580      	push	{r7, lr}
 8004c4e:	b084      	sub	sp, #16
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	6078      	str	r0, [r7, #4]
 8004c54:	460b      	mov	r3, r1
 8004c56:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8004c58:	2303      	movs	r3, #3
 8004c5a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d009      	beq.n	8004c7a <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	78fa      	ldrb	r2, [r7, #3]
 8004c70:	4611      	mov	r1, r2
 8004c72:	6878      	ldr	r0, [r7, #4]
 8004c74:	4798      	blx	r3
 8004c76:	4603      	mov	r3, r0
 8004c78:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8004c7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c7c:	4618      	mov	r0, r3
 8004c7e:	3710      	adds	r7, #16
 8004c80:	46bd      	mov	sp, r7
 8004c82:	bd80      	pop	{r7, pc}

08004c84 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004c84:	b580      	push	{r7, lr}
 8004c86:	b082      	sub	sp, #8
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	6078      	str	r0, [r7, #4]
 8004c8c:	460b      	mov	r3, r1
 8004c8e:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d007      	beq.n	8004caa <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004ca0:	685b      	ldr	r3, [r3, #4]
 8004ca2:	78fa      	ldrb	r2, [r7, #3]
 8004ca4:	4611      	mov	r1, r2
 8004ca6:	6878      	ldr	r0, [r7, #4]
 8004ca8:	4798      	blx	r3
  }

  return USBD_OK;
 8004caa:	2300      	movs	r3, #0
}
 8004cac:	4618      	mov	r0, r3
 8004cae:	3708      	adds	r7, #8
 8004cb0:	46bd      	mov	sp, r7
 8004cb2:	bd80      	pop	{r7, pc}

08004cb4 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8004cb4:	b580      	push	{r7, lr}
 8004cb6:	b084      	sub	sp, #16
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	6078      	str	r0, [r7, #4]
 8004cbc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8004cc4:	6839      	ldr	r1, [r7, #0]
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	f000 ff90 	bl	8005bec <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2201      	movs	r2, #1
 8004cd0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8004cda:	461a      	mov	r2, r3
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8004ce8:	f003 031f 	and.w	r3, r3, #31
 8004cec:	2b02      	cmp	r3, #2
 8004cee:	d01a      	beq.n	8004d26 <USBD_LL_SetupStage+0x72>
 8004cf0:	2b02      	cmp	r3, #2
 8004cf2:	d822      	bhi.n	8004d3a <USBD_LL_SetupStage+0x86>
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d002      	beq.n	8004cfe <USBD_LL_SetupStage+0x4a>
 8004cf8:	2b01      	cmp	r3, #1
 8004cfa:	d00a      	beq.n	8004d12 <USBD_LL_SetupStage+0x5e>
 8004cfc:	e01d      	b.n	8004d3a <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8004d04:	4619      	mov	r1, r3
 8004d06:	6878      	ldr	r0, [r7, #4]
 8004d08:	f000 fa62 	bl	80051d0 <USBD_StdDevReq>
 8004d0c:	4603      	mov	r3, r0
 8004d0e:	73fb      	strb	r3, [r7, #15]
      break;
 8004d10:	e020      	b.n	8004d54 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8004d18:	4619      	mov	r1, r3
 8004d1a:	6878      	ldr	r0, [r7, #4]
 8004d1c:	f000 fac6 	bl	80052ac <USBD_StdItfReq>
 8004d20:	4603      	mov	r3, r0
 8004d22:	73fb      	strb	r3, [r7, #15]
      break;
 8004d24:	e016      	b.n	8004d54 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8004d2c:	4619      	mov	r1, r3
 8004d2e:	6878      	ldr	r0, [r7, #4]
 8004d30:	f000 fb05 	bl	800533e <USBD_StdEPReq>
 8004d34:	4603      	mov	r3, r0
 8004d36:	73fb      	strb	r3, [r7, #15]
      break;
 8004d38:	e00c      	b.n	8004d54 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8004d40:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004d44:	b2db      	uxtb	r3, r3
 8004d46:	4619      	mov	r1, r3
 8004d48:	6878      	ldr	r0, [r7, #4]
 8004d4a:	f001 fd7f 	bl	800684c <USBD_LL_StallEP>
 8004d4e:	4603      	mov	r3, r0
 8004d50:	73fb      	strb	r3, [r7, #15]
      break;
 8004d52:	bf00      	nop
  }

  return ret;
 8004d54:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d56:	4618      	mov	r0, r3
 8004d58:	3710      	adds	r7, #16
 8004d5a:	46bd      	mov	sp, r7
 8004d5c:	bd80      	pop	{r7, pc}

08004d5e <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8004d5e:	b580      	push	{r7, lr}
 8004d60:	b086      	sub	sp, #24
 8004d62:	af00      	add	r7, sp, #0
 8004d64:	60f8      	str	r0, [r7, #12]
 8004d66:	460b      	mov	r3, r1
 8004d68:	607a      	str	r2, [r7, #4]
 8004d6a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8004d6c:	7afb      	ldrb	r3, [r7, #11]
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d138      	bne.n	8004de4 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8004d78:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8004d80:	2b03      	cmp	r3, #3
 8004d82:	d14a      	bne.n	8004e1a <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8004d84:	693b      	ldr	r3, [r7, #16]
 8004d86:	689a      	ldr	r2, [r3, #8]
 8004d88:	693b      	ldr	r3, [r7, #16]
 8004d8a:	68db      	ldr	r3, [r3, #12]
 8004d8c:	429a      	cmp	r2, r3
 8004d8e:	d913      	bls.n	8004db8 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8004d90:	693b      	ldr	r3, [r7, #16]
 8004d92:	689a      	ldr	r2, [r3, #8]
 8004d94:	693b      	ldr	r3, [r7, #16]
 8004d96:	68db      	ldr	r3, [r3, #12]
 8004d98:	1ad2      	subs	r2, r2, r3
 8004d9a:	693b      	ldr	r3, [r7, #16]
 8004d9c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8004d9e:	693b      	ldr	r3, [r7, #16]
 8004da0:	68da      	ldr	r2, [r3, #12]
 8004da2:	693b      	ldr	r3, [r7, #16]
 8004da4:	689b      	ldr	r3, [r3, #8]
 8004da6:	4293      	cmp	r3, r2
 8004da8:	bf28      	it	cs
 8004daa:	4613      	movcs	r3, r2
 8004dac:	461a      	mov	r2, r3
 8004dae:	6879      	ldr	r1, [r7, #4]
 8004db0:	68f8      	ldr	r0, [r7, #12]
 8004db2:	f001 f80f 	bl	8005dd4 <USBD_CtlContinueRx>
 8004db6:	e030      	b.n	8004e1a <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004dbe:	b2db      	uxtb	r3, r3
 8004dc0:	2b03      	cmp	r3, #3
 8004dc2:	d10b      	bne.n	8004ddc <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004dca:	691b      	ldr	r3, [r3, #16]
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d005      	beq.n	8004ddc <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004dd6:	691b      	ldr	r3, [r3, #16]
 8004dd8:	68f8      	ldr	r0, [r7, #12]
 8004dda:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8004ddc:	68f8      	ldr	r0, [r7, #12]
 8004dde:	f001 f80a 	bl	8005df6 <USBD_CtlSendStatus>
 8004de2:	e01a      	b.n	8004e1a <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004dea:	b2db      	uxtb	r3, r3
 8004dec:	2b03      	cmp	r3, #3
 8004dee:	d114      	bne.n	8004e1a <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004df6:	699b      	ldr	r3, [r3, #24]
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d00e      	beq.n	8004e1a <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004e02:	699b      	ldr	r3, [r3, #24]
 8004e04:	7afa      	ldrb	r2, [r7, #11]
 8004e06:	4611      	mov	r1, r2
 8004e08:	68f8      	ldr	r0, [r7, #12]
 8004e0a:	4798      	blx	r3
 8004e0c:	4603      	mov	r3, r0
 8004e0e:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8004e10:	7dfb      	ldrb	r3, [r7, #23]
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d001      	beq.n	8004e1a <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8004e16:	7dfb      	ldrb	r3, [r7, #23]
 8004e18:	e000      	b.n	8004e1c <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8004e1a:	2300      	movs	r3, #0
}
 8004e1c:	4618      	mov	r0, r3
 8004e1e:	3718      	adds	r7, #24
 8004e20:	46bd      	mov	sp, r7
 8004e22:	bd80      	pop	{r7, pc}

08004e24 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8004e24:	b580      	push	{r7, lr}
 8004e26:	b086      	sub	sp, #24
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	60f8      	str	r0, [r7, #12]
 8004e2c:	460b      	mov	r3, r1
 8004e2e:	607a      	str	r2, [r7, #4]
 8004e30:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8004e32:	7afb      	ldrb	r3, [r7, #11]
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d16b      	bne.n	8004f10 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	3314      	adds	r3, #20
 8004e3c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8004e44:	2b02      	cmp	r3, #2
 8004e46:	d156      	bne.n	8004ef6 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8004e48:	693b      	ldr	r3, [r7, #16]
 8004e4a:	689a      	ldr	r2, [r3, #8]
 8004e4c:	693b      	ldr	r3, [r7, #16]
 8004e4e:	68db      	ldr	r3, [r3, #12]
 8004e50:	429a      	cmp	r2, r3
 8004e52:	d914      	bls.n	8004e7e <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8004e54:	693b      	ldr	r3, [r7, #16]
 8004e56:	689a      	ldr	r2, [r3, #8]
 8004e58:	693b      	ldr	r3, [r7, #16]
 8004e5a:	68db      	ldr	r3, [r3, #12]
 8004e5c:	1ad2      	subs	r2, r2, r3
 8004e5e:	693b      	ldr	r3, [r7, #16]
 8004e60:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8004e62:	693b      	ldr	r3, [r7, #16]
 8004e64:	689b      	ldr	r3, [r3, #8]
 8004e66:	461a      	mov	r2, r3
 8004e68:	6879      	ldr	r1, [r7, #4]
 8004e6a:	68f8      	ldr	r0, [r7, #12]
 8004e6c:	f000 ff84 	bl	8005d78 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8004e70:	2300      	movs	r3, #0
 8004e72:	2200      	movs	r2, #0
 8004e74:	2100      	movs	r1, #0
 8004e76:	68f8      	ldr	r0, [r7, #12]
 8004e78:	f001 fd92 	bl	80069a0 <USBD_LL_PrepareReceive>
 8004e7c:	e03b      	b.n	8004ef6 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8004e7e:	693b      	ldr	r3, [r7, #16]
 8004e80:	68da      	ldr	r2, [r3, #12]
 8004e82:	693b      	ldr	r3, [r7, #16]
 8004e84:	689b      	ldr	r3, [r3, #8]
 8004e86:	429a      	cmp	r2, r3
 8004e88:	d11c      	bne.n	8004ec4 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8004e8a:	693b      	ldr	r3, [r7, #16]
 8004e8c:	685a      	ldr	r2, [r3, #4]
 8004e8e:	693b      	ldr	r3, [r7, #16]
 8004e90:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8004e92:	429a      	cmp	r2, r3
 8004e94:	d316      	bcc.n	8004ec4 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8004e96:	693b      	ldr	r3, [r7, #16]
 8004e98:	685a      	ldr	r2, [r3, #4]
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8004ea0:	429a      	cmp	r2, r3
 8004ea2:	d20f      	bcs.n	8004ec4 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8004ea4:	2200      	movs	r2, #0
 8004ea6:	2100      	movs	r1, #0
 8004ea8:	68f8      	ldr	r0, [r7, #12]
 8004eaa:	f000 ff65 	bl	8005d78 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	2200      	movs	r2, #0
 8004eb2:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8004eb6:	2300      	movs	r3, #0
 8004eb8:	2200      	movs	r2, #0
 8004eba:	2100      	movs	r1, #0
 8004ebc:	68f8      	ldr	r0, [r7, #12]
 8004ebe:	f001 fd6f 	bl	80069a0 <USBD_LL_PrepareReceive>
 8004ec2:	e018      	b.n	8004ef6 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004eca:	b2db      	uxtb	r3, r3
 8004ecc:	2b03      	cmp	r3, #3
 8004ece:	d10b      	bne.n	8004ee8 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004ed6:	68db      	ldr	r3, [r3, #12]
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d005      	beq.n	8004ee8 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004ee2:	68db      	ldr	r3, [r3, #12]
 8004ee4:	68f8      	ldr	r0, [r7, #12]
 8004ee6:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8004ee8:	2180      	movs	r1, #128	; 0x80
 8004eea:	68f8      	ldr	r0, [r7, #12]
 8004eec:	f001 fcae 	bl	800684c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8004ef0:	68f8      	ldr	r0, [r7, #12]
 8004ef2:	f000 ff93 	bl	8005e1c <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8004efc:	2b01      	cmp	r3, #1
 8004efe:	d122      	bne.n	8004f46 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8004f00:	68f8      	ldr	r0, [r7, #12]
 8004f02:	f7ff fe98 	bl	8004c36 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	2200      	movs	r2, #0
 8004f0a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8004f0e:	e01a      	b.n	8004f46 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004f16:	b2db      	uxtb	r3, r3
 8004f18:	2b03      	cmp	r3, #3
 8004f1a:	d114      	bne.n	8004f46 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004f22:	695b      	ldr	r3, [r3, #20]
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d00e      	beq.n	8004f46 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004f2e:	695b      	ldr	r3, [r3, #20]
 8004f30:	7afa      	ldrb	r2, [r7, #11]
 8004f32:	4611      	mov	r1, r2
 8004f34:	68f8      	ldr	r0, [r7, #12]
 8004f36:	4798      	blx	r3
 8004f38:	4603      	mov	r3, r0
 8004f3a:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8004f3c:	7dfb      	ldrb	r3, [r7, #23]
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d001      	beq.n	8004f46 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8004f42:	7dfb      	ldrb	r3, [r7, #23]
 8004f44:	e000      	b.n	8004f48 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8004f46:	2300      	movs	r3, #0
}
 8004f48:	4618      	mov	r0, r3
 8004f4a:	3718      	adds	r7, #24
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	bd80      	pop	{r7, pc}

08004f50 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8004f50:	b580      	push	{r7, lr}
 8004f52:	b082      	sub	sp, #8
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2201      	movs	r2, #1
 8004f5c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2200      	movs	r2, #0
 8004f64:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2200      	movs	r2, #0
 8004f6c:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	2200      	movs	r2, #0
 8004f72:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d101      	bne.n	8004f84 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8004f80:	2303      	movs	r3, #3
 8004f82:	e02f      	b.n	8004fe4 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d00f      	beq.n	8004fae <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004f94:	685b      	ldr	r3, [r3, #4]
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d009      	beq.n	8004fae <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004fa0:	685b      	ldr	r3, [r3, #4]
 8004fa2:	687a      	ldr	r2, [r7, #4]
 8004fa4:	6852      	ldr	r2, [r2, #4]
 8004fa6:	b2d2      	uxtb	r2, r2
 8004fa8:	4611      	mov	r1, r2
 8004faa:	6878      	ldr	r0, [r7, #4]
 8004fac:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8004fae:	2340      	movs	r3, #64	; 0x40
 8004fb0:	2200      	movs	r2, #0
 8004fb2:	2100      	movs	r1, #0
 8004fb4:	6878      	ldr	r0, [r7, #4]
 8004fb6:	f001 fc04 	bl	80067c2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	2201      	movs	r2, #1
 8004fbe:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	2240      	movs	r2, #64	; 0x40
 8004fc6:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8004fca:	2340      	movs	r3, #64	; 0x40
 8004fcc:	2200      	movs	r2, #0
 8004fce:	2180      	movs	r1, #128	; 0x80
 8004fd0:	6878      	ldr	r0, [r7, #4]
 8004fd2:	f001 fbf6 	bl	80067c2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	2201      	movs	r2, #1
 8004fda:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2240      	movs	r2, #64	; 0x40
 8004fe0:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8004fe2:	2300      	movs	r3, #0
}
 8004fe4:	4618      	mov	r0, r3
 8004fe6:	3708      	adds	r7, #8
 8004fe8:	46bd      	mov	sp, r7
 8004fea:	bd80      	pop	{r7, pc}

08004fec <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8004fec:	b480      	push	{r7}
 8004fee:	b083      	sub	sp, #12
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	6078      	str	r0, [r7, #4]
 8004ff4:	460b      	mov	r3, r1
 8004ff6:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	78fa      	ldrb	r2, [r7, #3]
 8004ffc:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8004ffe:	2300      	movs	r3, #0
}
 8005000:	4618      	mov	r0, r3
 8005002:	370c      	adds	r7, #12
 8005004:	46bd      	mov	sp, r7
 8005006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500a:	4770      	bx	lr

0800500c <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800500c:	b480      	push	{r7}
 800500e:	b083      	sub	sp, #12
 8005010:	af00      	add	r7, sp, #0
 8005012:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800501a:	b2da      	uxtb	r2, r3
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	2204      	movs	r2, #4
 8005026:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800502a:	2300      	movs	r3, #0
}
 800502c:	4618      	mov	r0, r3
 800502e:	370c      	adds	r7, #12
 8005030:	46bd      	mov	sp, r7
 8005032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005036:	4770      	bx	lr

08005038 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8005038:	b480      	push	{r7}
 800503a:	b083      	sub	sp, #12
 800503c:	af00      	add	r7, sp, #0
 800503e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005046:	b2db      	uxtb	r3, r3
 8005048:	2b04      	cmp	r3, #4
 800504a:	d106      	bne.n	800505a <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8005052:	b2da      	uxtb	r2, r3
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800505a:	2300      	movs	r3, #0
}
 800505c:	4618      	mov	r0, r3
 800505e:	370c      	adds	r7, #12
 8005060:	46bd      	mov	sp, r7
 8005062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005066:	4770      	bx	lr

08005068 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8005068:	b580      	push	{r7, lr}
 800506a:	b082      	sub	sp, #8
 800506c:	af00      	add	r7, sp, #0
 800506e:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005076:	2b00      	cmp	r3, #0
 8005078:	d101      	bne.n	800507e <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800507a:	2303      	movs	r3, #3
 800507c:	e012      	b.n	80050a4 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005084:	b2db      	uxtb	r3, r3
 8005086:	2b03      	cmp	r3, #3
 8005088:	d10b      	bne.n	80050a2 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005090:	69db      	ldr	r3, [r3, #28]
 8005092:	2b00      	cmp	r3, #0
 8005094:	d005      	beq.n	80050a2 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800509c:	69db      	ldr	r3, [r3, #28]
 800509e:	6878      	ldr	r0, [r7, #4]
 80050a0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80050a2:	2300      	movs	r3, #0
}
 80050a4:	4618      	mov	r0, r3
 80050a6:	3708      	adds	r7, #8
 80050a8:	46bd      	mov	sp, r7
 80050aa:	bd80      	pop	{r7, pc}

080050ac <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80050ac:	b580      	push	{r7, lr}
 80050ae:	b082      	sub	sp, #8
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	6078      	str	r0, [r7, #4]
 80050b4:	460b      	mov	r3, r1
 80050b6:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d101      	bne.n	80050c6 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 80050c2:	2303      	movs	r3, #3
 80050c4:	e014      	b.n	80050f0 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80050cc:	b2db      	uxtb	r3, r3
 80050ce:	2b03      	cmp	r3, #3
 80050d0:	d10d      	bne.n	80050ee <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80050d8:	6a1b      	ldr	r3, [r3, #32]
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d007      	beq.n	80050ee <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80050e4:	6a1b      	ldr	r3, [r3, #32]
 80050e6:	78fa      	ldrb	r2, [r7, #3]
 80050e8:	4611      	mov	r1, r2
 80050ea:	6878      	ldr	r0, [r7, #4]
 80050ec:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80050ee:	2300      	movs	r3, #0
}
 80050f0:	4618      	mov	r0, r3
 80050f2:	3708      	adds	r7, #8
 80050f4:	46bd      	mov	sp, r7
 80050f6:	bd80      	pop	{r7, pc}

080050f8 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80050f8:	b580      	push	{r7, lr}
 80050fa:	b082      	sub	sp, #8
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	6078      	str	r0, [r7, #4]
 8005100:	460b      	mov	r3, r1
 8005102:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800510a:	2b00      	cmp	r3, #0
 800510c:	d101      	bne.n	8005112 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 800510e:	2303      	movs	r3, #3
 8005110:	e014      	b.n	800513c <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005118:	b2db      	uxtb	r3, r3
 800511a:	2b03      	cmp	r3, #3
 800511c:	d10d      	bne.n	800513a <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005126:	2b00      	cmp	r3, #0
 8005128:	d007      	beq.n	800513a <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005130:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005132:	78fa      	ldrb	r2, [r7, #3]
 8005134:	4611      	mov	r1, r2
 8005136:	6878      	ldr	r0, [r7, #4]
 8005138:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800513a:	2300      	movs	r3, #0
}
 800513c:	4618      	mov	r0, r3
 800513e:	3708      	adds	r7, #8
 8005140:	46bd      	mov	sp, r7
 8005142:	bd80      	pop	{r7, pc}

08005144 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8005144:	b480      	push	{r7}
 8005146:	b083      	sub	sp, #12
 8005148:	af00      	add	r7, sp, #0
 800514a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800514c:	2300      	movs	r3, #0
}
 800514e:	4618      	mov	r0, r3
 8005150:	370c      	adds	r7, #12
 8005152:	46bd      	mov	sp, r7
 8005154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005158:	4770      	bx	lr

0800515a <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800515a:	b580      	push	{r7, lr}
 800515c:	b082      	sub	sp, #8
 800515e:	af00      	add	r7, sp, #0
 8005160:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	2201      	movs	r2, #1
 8005166:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005170:	2b00      	cmp	r3, #0
 8005172:	d009      	beq.n	8005188 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800517a:	685b      	ldr	r3, [r3, #4]
 800517c:	687a      	ldr	r2, [r7, #4]
 800517e:	6852      	ldr	r2, [r2, #4]
 8005180:	b2d2      	uxtb	r2, r2
 8005182:	4611      	mov	r1, r2
 8005184:	6878      	ldr	r0, [r7, #4]
 8005186:	4798      	blx	r3
  }

  return USBD_OK;
 8005188:	2300      	movs	r3, #0
}
 800518a:	4618      	mov	r0, r3
 800518c:	3708      	adds	r7, #8
 800518e:	46bd      	mov	sp, r7
 8005190:	bd80      	pop	{r7, pc}

08005192 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8005192:	b480      	push	{r7}
 8005194:	b087      	sub	sp, #28
 8005196:	af00      	add	r7, sp, #0
 8005198:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800519e:	697b      	ldr	r3, [r7, #20]
 80051a0:	781b      	ldrb	r3, [r3, #0]
 80051a2:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80051a4:	697b      	ldr	r3, [r7, #20]
 80051a6:	3301      	adds	r3, #1
 80051a8:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80051aa:	697b      	ldr	r3, [r7, #20]
 80051ac:	781b      	ldrb	r3, [r3, #0]
 80051ae:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80051b0:	8a3b      	ldrh	r3, [r7, #16]
 80051b2:	021b      	lsls	r3, r3, #8
 80051b4:	b21a      	sxth	r2, r3
 80051b6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80051ba:	4313      	orrs	r3, r2
 80051bc:	b21b      	sxth	r3, r3
 80051be:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80051c0:	89fb      	ldrh	r3, [r7, #14]
}
 80051c2:	4618      	mov	r0, r3
 80051c4:	371c      	adds	r7, #28
 80051c6:	46bd      	mov	sp, r7
 80051c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051cc:	4770      	bx	lr
	...

080051d0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80051d0:	b580      	push	{r7, lr}
 80051d2:	b084      	sub	sp, #16
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	6078      	str	r0, [r7, #4]
 80051d8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80051da:	2300      	movs	r3, #0
 80051dc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80051de:	683b      	ldr	r3, [r7, #0]
 80051e0:	781b      	ldrb	r3, [r3, #0]
 80051e2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80051e6:	2b40      	cmp	r3, #64	; 0x40
 80051e8:	d005      	beq.n	80051f6 <USBD_StdDevReq+0x26>
 80051ea:	2b40      	cmp	r3, #64	; 0x40
 80051ec:	d853      	bhi.n	8005296 <USBD_StdDevReq+0xc6>
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d00b      	beq.n	800520a <USBD_StdDevReq+0x3a>
 80051f2:	2b20      	cmp	r3, #32
 80051f4:	d14f      	bne.n	8005296 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80051fc:	689b      	ldr	r3, [r3, #8]
 80051fe:	6839      	ldr	r1, [r7, #0]
 8005200:	6878      	ldr	r0, [r7, #4]
 8005202:	4798      	blx	r3
 8005204:	4603      	mov	r3, r0
 8005206:	73fb      	strb	r3, [r7, #15]
      break;
 8005208:	e04a      	b.n	80052a0 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800520a:	683b      	ldr	r3, [r7, #0]
 800520c:	785b      	ldrb	r3, [r3, #1]
 800520e:	2b09      	cmp	r3, #9
 8005210:	d83b      	bhi.n	800528a <USBD_StdDevReq+0xba>
 8005212:	a201      	add	r2, pc, #4	; (adr r2, 8005218 <USBD_StdDevReq+0x48>)
 8005214:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005218:	0800526d 	.word	0x0800526d
 800521c:	08005281 	.word	0x08005281
 8005220:	0800528b 	.word	0x0800528b
 8005224:	08005277 	.word	0x08005277
 8005228:	0800528b 	.word	0x0800528b
 800522c:	0800524b 	.word	0x0800524b
 8005230:	08005241 	.word	0x08005241
 8005234:	0800528b 	.word	0x0800528b
 8005238:	08005263 	.word	0x08005263
 800523c:	08005255 	.word	0x08005255
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8005240:	6839      	ldr	r1, [r7, #0]
 8005242:	6878      	ldr	r0, [r7, #4]
 8005244:	f000 f9de 	bl	8005604 <USBD_GetDescriptor>
          break;
 8005248:	e024      	b.n	8005294 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800524a:	6839      	ldr	r1, [r7, #0]
 800524c:	6878      	ldr	r0, [r7, #4]
 800524e:	f000 fb43 	bl	80058d8 <USBD_SetAddress>
          break;
 8005252:	e01f      	b.n	8005294 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8005254:	6839      	ldr	r1, [r7, #0]
 8005256:	6878      	ldr	r0, [r7, #4]
 8005258:	f000 fb82 	bl	8005960 <USBD_SetConfig>
 800525c:	4603      	mov	r3, r0
 800525e:	73fb      	strb	r3, [r7, #15]
          break;
 8005260:	e018      	b.n	8005294 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8005262:	6839      	ldr	r1, [r7, #0]
 8005264:	6878      	ldr	r0, [r7, #4]
 8005266:	f000 fc21 	bl	8005aac <USBD_GetConfig>
          break;
 800526a:	e013      	b.n	8005294 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800526c:	6839      	ldr	r1, [r7, #0]
 800526e:	6878      	ldr	r0, [r7, #4]
 8005270:	f000 fc52 	bl	8005b18 <USBD_GetStatus>
          break;
 8005274:	e00e      	b.n	8005294 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8005276:	6839      	ldr	r1, [r7, #0]
 8005278:	6878      	ldr	r0, [r7, #4]
 800527a:	f000 fc81 	bl	8005b80 <USBD_SetFeature>
          break;
 800527e:	e009      	b.n	8005294 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8005280:	6839      	ldr	r1, [r7, #0]
 8005282:	6878      	ldr	r0, [r7, #4]
 8005284:	f000 fc90 	bl	8005ba8 <USBD_ClrFeature>
          break;
 8005288:	e004      	b.n	8005294 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800528a:	6839      	ldr	r1, [r7, #0]
 800528c:	6878      	ldr	r0, [r7, #4]
 800528e:	f000 fce7 	bl	8005c60 <USBD_CtlError>
          break;
 8005292:	bf00      	nop
      }
      break;
 8005294:	e004      	b.n	80052a0 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8005296:	6839      	ldr	r1, [r7, #0]
 8005298:	6878      	ldr	r0, [r7, #4]
 800529a:	f000 fce1 	bl	8005c60 <USBD_CtlError>
      break;
 800529e:	bf00      	nop
  }

  return ret;
 80052a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80052a2:	4618      	mov	r0, r3
 80052a4:	3710      	adds	r7, #16
 80052a6:	46bd      	mov	sp, r7
 80052a8:	bd80      	pop	{r7, pc}
 80052aa:	bf00      	nop

080052ac <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80052ac:	b580      	push	{r7, lr}
 80052ae:	b084      	sub	sp, #16
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	6078      	str	r0, [r7, #4]
 80052b4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80052b6:	2300      	movs	r3, #0
 80052b8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80052ba:	683b      	ldr	r3, [r7, #0]
 80052bc:	781b      	ldrb	r3, [r3, #0]
 80052be:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80052c2:	2b40      	cmp	r3, #64	; 0x40
 80052c4:	d005      	beq.n	80052d2 <USBD_StdItfReq+0x26>
 80052c6:	2b40      	cmp	r3, #64	; 0x40
 80052c8:	d82f      	bhi.n	800532a <USBD_StdItfReq+0x7e>
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d001      	beq.n	80052d2 <USBD_StdItfReq+0x26>
 80052ce:	2b20      	cmp	r3, #32
 80052d0:	d12b      	bne.n	800532a <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80052d8:	b2db      	uxtb	r3, r3
 80052da:	3b01      	subs	r3, #1
 80052dc:	2b02      	cmp	r3, #2
 80052de:	d81d      	bhi.n	800531c <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80052e0:	683b      	ldr	r3, [r7, #0]
 80052e2:	889b      	ldrh	r3, [r3, #4]
 80052e4:	b2db      	uxtb	r3, r3
 80052e6:	2b01      	cmp	r3, #1
 80052e8:	d813      	bhi.n	8005312 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80052f0:	689b      	ldr	r3, [r3, #8]
 80052f2:	6839      	ldr	r1, [r7, #0]
 80052f4:	6878      	ldr	r0, [r7, #4]
 80052f6:	4798      	blx	r3
 80052f8:	4603      	mov	r3, r0
 80052fa:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80052fc:	683b      	ldr	r3, [r7, #0]
 80052fe:	88db      	ldrh	r3, [r3, #6]
 8005300:	2b00      	cmp	r3, #0
 8005302:	d110      	bne.n	8005326 <USBD_StdItfReq+0x7a>
 8005304:	7bfb      	ldrb	r3, [r7, #15]
 8005306:	2b00      	cmp	r3, #0
 8005308:	d10d      	bne.n	8005326 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800530a:	6878      	ldr	r0, [r7, #4]
 800530c:	f000 fd73 	bl	8005df6 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8005310:	e009      	b.n	8005326 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8005312:	6839      	ldr	r1, [r7, #0]
 8005314:	6878      	ldr	r0, [r7, #4]
 8005316:	f000 fca3 	bl	8005c60 <USBD_CtlError>
          break;
 800531a:	e004      	b.n	8005326 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800531c:	6839      	ldr	r1, [r7, #0]
 800531e:	6878      	ldr	r0, [r7, #4]
 8005320:	f000 fc9e 	bl	8005c60 <USBD_CtlError>
          break;
 8005324:	e000      	b.n	8005328 <USBD_StdItfReq+0x7c>
          break;
 8005326:	bf00      	nop
      }
      break;
 8005328:	e004      	b.n	8005334 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800532a:	6839      	ldr	r1, [r7, #0]
 800532c:	6878      	ldr	r0, [r7, #4]
 800532e:	f000 fc97 	bl	8005c60 <USBD_CtlError>
      break;
 8005332:	bf00      	nop
  }

  return ret;
 8005334:	7bfb      	ldrb	r3, [r7, #15]
}
 8005336:	4618      	mov	r0, r3
 8005338:	3710      	adds	r7, #16
 800533a:	46bd      	mov	sp, r7
 800533c:	bd80      	pop	{r7, pc}

0800533e <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800533e:	b580      	push	{r7, lr}
 8005340:	b084      	sub	sp, #16
 8005342:	af00      	add	r7, sp, #0
 8005344:	6078      	str	r0, [r7, #4]
 8005346:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8005348:	2300      	movs	r3, #0
 800534a:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800534c:	683b      	ldr	r3, [r7, #0]
 800534e:	889b      	ldrh	r3, [r3, #4]
 8005350:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005352:	683b      	ldr	r3, [r7, #0]
 8005354:	781b      	ldrb	r3, [r3, #0]
 8005356:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800535a:	2b40      	cmp	r3, #64	; 0x40
 800535c:	d007      	beq.n	800536e <USBD_StdEPReq+0x30>
 800535e:	2b40      	cmp	r3, #64	; 0x40
 8005360:	f200 8145 	bhi.w	80055ee <USBD_StdEPReq+0x2b0>
 8005364:	2b00      	cmp	r3, #0
 8005366:	d00c      	beq.n	8005382 <USBD_StdEPReq+0x44>
 8005368:	2b20      	cmp	r3, #32
 800536a:	f040 8140 	bne.w	80055ee <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005374:	689b      	ldr	r3, [r3, #8]
 8005376:	6839      	ldr	r1, [r7, #0]
 8005378:	6878      	ldr	r0, [r7, #4]
 800537a:	4798      	blx	r3
 800537c:	4603      	mov	r3, r0
 800537e:	73fb      	strb	r3, [r7, #15]
      break;
 8005380:	e13a      	b.n	80055f8 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005382:	683b      	ldr	r3, [r7, #0]
 8005384:	785b      	ldrb	r3, [r3, #1]
 8005386:	2b03      	cmp	r3, #3
 8005388:	d007      	beq.n	800539a <USBD_StdEPReq+0x5c>
 800538a:	2b03      	cmp	r3, #3
 800538c:	f300 8129 	bgt.w	80055e2 <USBD_StdEPReq+0x2a4>
 8005390:	2b00      	cmp	r3, #0
 8005392:	d07f      	beq.n	8005494 <USBD_StdEPReq+0x156>
 8005394:	2b01      	cmp	r3, #1
 8005396:	d03c      	beq.n	8005412 <USBD_StdEPReq+0xd4>
 8005398:	e123      	b.n	80055e2 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80053a0:	b2db      	uxtb	r3, r3
 80053a2:	2b02      	cmp	r3, #2
 80053a4:	d002      	beq.n	80053ac <USBD_StdEPReq+0x6e>
 80053a6:	2b03      	cmp	r3, #3
 80053a8:	d016      	beq.n	80053d8 <USBD_StdEPReq+0x9a>
 80053aa:	e02c      	b.n	8005406 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80053ac:	7bbb      	ldrb	r3, [r7, #14]
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d00d      	beq.n	80053ce <USBD_StdEPReq+0x90>
 80053b2:	7bbb      	ldrb	r3, [r7, #14]
 80053b4:	2b80      	cmp	r3, #128	; 0x80
 80053b6:	d00a      	beq.n	80053ce <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80053b8:	7bbb      	ldrb	r3, [r7, #14]
 80053ba:	4619      	mov	r1, r3
 80053bc:	6878      	ldr	r0, [r7, #4]
 80053be:	f001 fa45 	bl	800684c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80053c2:	2180      	movs	r1, #128	; 0x80
 80053c4:	6878      	ldr	r0, [r7, #4]
 80053c6:	f001 fa41 	bl	800684c <USBD_LL_StallEP>
 80053ca:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80053cc:	e020      	b.n	8005410 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 80053ce:	6839      	ldr	r1, [r7, #0]
 80053d0:	6878      	ldr	r0, [r7, #4]
 80053d2:	f000 fc45 	bl	8005c60 <USBD_CtlError>
              break;
 80053d6:	e01b      	b.n	8005410 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80053d8:	683b      	ldr	r3, [r7, #0]
 80053da:	885b      	ldrh	r3, [r3, #2]
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d10e      	bne.n	80053fe <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80053e0:	7bbb      	ldrb	r3, [r7, #14]
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d00b      	beq.n	80053fe <USBD_StdEPReq+0xc0>
 80053e6:	7bbb      	ldrb	r3, [r7, #14]
 80053e8:	2b80      	cmp	r3, #128	; 0x80
 80053ea:	d008      	beq.n	80053fe <USBD_StdEPReq+0xc0>
 80053ec:	683b      	ldr	r3, [r7, #0]
 80053ee:	88db      	ldrh	r3, [r3, #6]
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d104      	bne.n	80053fe <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80053f4:	7bbb      	ldrb	r3, [r7, #14]
 80053f6:	4619      	mov	r1, r3
 80053f8:	6878      	ldr	r0, [r7, #4]
 80053fa:	f001 fa27 	bl	800684c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80053fe:	6878      	ldr	r0, [r7, #4]
 8005400:	f000 fcf9 	bl	8005df6 <USBD_CtlSendStatus>

              break;
 8005404:	e004      	b.n	8005410 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8005406:	6839      	ldr	r1, [r7, #0]
 8005408:	6878      	ldr	r0, [r7, #4]
 800540a:	f000 fc29 	bl	8005c60 <USBD_CtlError>
              break;
 800540e:	bf00      	nop
          }
          break;
 8005410:	e0ec      	b.n	80055ec <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005418:	b2db      	uxtb	r3, r3
 800541a:	2b02      	cmp	r3, #2
 800541c:	d002      	beq.n	8005424 <USBD_StdEPReq+0xe6>
 800541e:	2b03      	cmp	r3, #3
 8005420:	d016      	beq.n	8005450 <USBD_StdEPReq+0x112>
 8005422:	e030      	b.n	8005486 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005424:	7bbb      	ldrb	r3, [r7, #14]
 8005426:	2b00      	cmp	r3, #0
 8005428:	d00d      	beq.n	8005446 <USBD_StdEPReq+0x108>
 800542a:	7bbb      	ldrb	r3, [r7, #14]
 800542c:	2b80      	cmp	r3, #128	; 0x80
 800542e:	d00a      	beq.n	8005446 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8005430:	7bbb      	ldrb	r3, [r7, #14]
 8005432:	4619      	mov	r1, r3
 8005434:	6878      	ldr	r0, [r7, #4]
 8005436:	f001 fa09 	bl	800684c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800543a:	2180      	movs	r1, #128	; 0x80
 800543c:	6878      	ldr	r0, [r7, #4]
 800543e:	f001 fa05 	bl	800684c <USBD_LL_StallEP>
 8005442:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005444:	e025      	b.n	8005492 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8005446:	6839      	ldr	r1, [r7, #0]
 8005448:	6878      	ldr	r0, [r7, #4]
 800544a:	f000 fc09 	bl	8005c60 <USBD_CtlError>
              break;
 800544e:	e020      	b.n	8005492 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005450:	683b      	ldr	r3, [r7, #0]
 8005452:	885b      	ldrh	r3, [r3, #2]
 8005454:	2b00      	cmp	r3, #0
 8005456:	d11b      	bne.n	8005490 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8005458:	7bbb      	ldrb	r3, [r7, #14]
 800545a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800545e:	2b00      	cmp	r3, #0
 8005460:	d004      	beq.n	800546c <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8005462:	7bbb      	ldrb	r3, [r7, #14]
 8005464:	4619      	mov	r1, r3
 8005466:	6878      	ldr	r0, [r7, #4]
 8005468:	f001 fa0f 	bl	800688a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800546c:	6878      	ldr	r0, [r7, #4]
 800546e:	f000 fcc2 	bl	8005df6 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005478:	689b      	ldr	r3, [r3, #8]
 800547a:	6839      	ldr	r1, [r7, #0]
 800547c:	6878      	ldr	r0, [r7, #4]
 800547e:	4798      	blx	r3
 8005480:	4603      	mov	r3, r0
 8005482:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8005484:	e004      	b.n	8005490 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8005486:	6839      	ldr	r1, [r7, #0]
 8005488:	6878      	ldr	r0, [r7, #4]
 800548a:	f000 fbe9 	bl	8005c60 <USBD_CtlError>
              break;
 800548e:	e000      	b.n	8005492 <USBD_StdEPReq+0x154>
              break;
 8005490:	bf00      	nop
          }
          break;
 8005492:	e0ab      	b.n	80055ec <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800549a:	b2db      	uxtb	r3, r3
 800549c:	2b02      	cmp	r3, #2
 800549e:	d002      	beq.n	80054a6 <USBD_StdEPReq+0x168>
 80054a0:	2b03      	cmp	r3, #3
 80054a2:	d032      	beq.n	800550a <USBD_StdEPReq+0x1cc>
 80054a4:	e097      	b.n	80055d6 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80054a6:	7bbb      	ldrb	r3, [r7, #14]
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d007      	beq.n	80054bc <USBD_StdEPReq+0x17e>
 80054ac:	7bbb      	ldrb	r3, [r7, #14]
 80054ae:	2b80      	cmp	r3, #128	; 0x80
 80054b0:	d004      	beq.n	80054bc <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 80054b2:	6839      	ldr	r1, [r7, #0]
 80054b4:	6878      	ldr	r0, [r7, #4]
 80054b6:	f000 fbd3 	bl	8005c60 <USBD_CtlError>
                break;
 80054ba:	e091      	b.n	80055e0 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80054bc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	da0b      	bge.n	80054dc <USBD_StdEPReq+0x19e>
 80054c4:	7bbb      	ldrb	r3, [r7, #14]
 80054c6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80054ca:	4613      	mov	r3, r2
 80054cc:	009b      	lsls	r3, r3, #2
 80054ce:	4413      	add	r3, r2
 80054d0:	009b      	lsls	r3, r3, #2
 80054d2:	3310      	adds	r3, #16
 80054d4:	687a      	ldr	r2, [r7, #4]
 80054d6:	4413      	add	r3, r2
 80054d8:	3304      	adds	r3, #4
 80054da:	e00b      	b.n	80054f4 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80054dc:	7bbb      	ldrb	r3, [r7, #14]
 80054de:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80054e2:	4613      	mov	r3, r2
 80054e4:	009b      	lsls	r3, r3, #2
 80054e6:	4413      	add	r3, r2
 80054e8:	009b      	lsls	r3, r3, #2
 80054ea:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80054ee:	687a      	ldr	r2, [r7, #4]
 80054f0:	4413      	add	r3, r2
 80054f2:	3304      	adds	r3, #4
 80054f4:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80054f6:	68bb      	ldr	r3, [r7, #8]
 80054f8:	2200      	movs	r2, #0
 80054fa:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80054fc:	68bb      	ldr	r3, [r7, #8]
 80054fe:	2202      	movs	r2, #2
 8005500:	4619      	mov	r1, r3
 8005502:	6878      	ldr	r0, [r7, #4]
 8005504:	f000 fc1d 	bl	8005d42 <USBD_CtlSendData>
              break;
 8005508:	e06a      	b.n	80055e0 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800550a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800550e:	2b00      	cmp	r3, #0
 8005510:	da11      	bge.n	8005536 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8005512:	7bbb      	ldrb	r3, [r7, #14]
 8005514:	f003 020f 	and.w	r2, r3, #15
 8005518:	6879      	ldr	r1, [r7, #4]
 800551a:	4613      	mov	r3, r2
 800551c:	009b      	lsls	r3, r3, #2
 800551e:	4413      	add	r3, r2
 8005520:	009b      	lsls	r3, r3, #2
 8005522:	440b      	add	r3, r1
 8005524:	3324      	adds	r3, #36	; 0x24
 8005526:	881b      	ldrh	r3, [r3, #0]
 8005528:	2b00      	cmp	r3, #0
 800552a:	d117      	bne.n	800555c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800552c:	6839      	ldr	r1, [r7, #0]
 800552e:	6878      	ldr	r0, [r7, #4]
 8005530:	f000 fb96 	bl	8005c60 <USBD_CtlError>
                  break;
 8005534:	e054      	b.n	80055e0 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8005536:	7bbb      	ldrb	r3, [r7, #14]
 8005538:	f003 020f 	and.w	r2, r3, #15
 800553c:	6879      	ldr	r1, [r7, #4]
 800553e:	4613      	mov	r3, r2
 8005540:	009b      	lsls	r3, r3, #2
 8005542:	4413      	add	r3, r2
 8005544:	009b      	lsls	r3, r3, #2
 8005546:	440b      	add	r3, r1
 8005548:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800554c:	881b      	ldrh	r3, [r3, #0]
 800554e:	2b00      	cmp	r3, #0
 8005550:	d104      	bne.n	800555c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8005552:	6839      	ldr	r1, [r7, #0]
 8005554:	6878      	ldr	r0, [r7, #4]
 8005556:	f000 fb83 	bl	8005c60 <USBD_CtlError>
                  break;
 800555a:	e041      	b.n	80055e0 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800555c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005560:	2b00      	cmp	r3, #0
 8005562:	da0b      	bge.n	800557c <USBD_StdEPReq+0x23e>
 8005564:	7bbb      	ldrb	r3, [r7, #14]
 8005566:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800556a:	4613      	mov	r3, r2
 800556c:	009b      	lsls	r3, r3, #2
 800556e:	4413      	add	r3, r2
 8005570:	009b      	lsls	r3, r3, #2
 8005572:	3310      	adds	r3, #16
 8005574:	687a      	ldr	r2, [r7, #4]
 8005576:	4413      	add	r3, r2
 8005578:	3304      	adds	r3, #4
 800557a:	e00b      	b.n	8005594 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800557c:	7bbb      	ldrb	r3, [r7, #14]
 800557e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005582:	4613      	mov	r3, r2
 8005584:	009b      	lsls	r3, r3, #2
 8005586:	4413      	add	r3, r2
 8005588:	009b      	lsls	r3, r3, #2
 800558a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800558e:	687a      	ldr	r2, [r7, #4]
 8005590:	4413      	add	r3, r2
 8005592:	3304      	adds	r3, #4
 8005594:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8005596:	7bbb      	ldrb	r3, [r7, #14]
 8005598:	2b00      	cmp	r3, #0
 800559a:	d002      	beq.n	80055a2 <USBD_StdEPReq+0x264>
 800559c:	7bbb      	ldrb	r3, [r7, #14]
 800559e:	2b80      	cmp	r3, #128	; 0x80
 80055a0:	d103      	bne.n	80055aa <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 80055a2:	68bb      	ldr	r3, [r7, #8]
 80055a4:	2200      	movs	r2, #0
 80055a6:	601a      	str	r2, [r3, #0]
 80055a8:	e00e      	b.n	80055c8 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80055aa:	7bbb      	ldrb	r3, [r7, #14]
 80055ac:	4619      	mov	r1, r3
 80055ae:	6878      	ldr	r0, [r7, #4]
 80055b0:	f001 f98a 	bl	80068c8 <USBD_LL_IsStallEP>
 80055b4:	4603      	mov	r3, r0
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d003      	beq.n	80055c2 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 80055ba:	68bb      	ldr	r3, [r7, #8]
 80055bc:	2201      	movs	r2, #1
 80055be:	601a      	str	r2, [r3, #0]
 80055c0:	e002      	b.n	80055c8 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 80055c2:	68bb      	ldr	r3, [r7, #8]
 80055c4:	2200      	movs	r2, #0
 80055c6:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80055c8:	68bb      	ldr	r3, [r7, #8]
 80055ca:	2202      	movs	r2, #2
 80055cc:	4619      	mov	r1, r3
 80055ce:	6878      	ldr	r0, [r7, #4]
 80055d0:	f000 fbb7 	bl	8005d42 <USBD_CtlSendData>
              break;
 80055d4:	e004      	b.n	80055e0 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 80055d6:	6839      	ldr	r1, [r7, #0]
 80055d8:	6878      	ldr	r0, [r7, #4]
 80055da:	f000 fb41 	bl	8005c60 <USBD_CtlError>
              break;
 80055de:	bf00      	nop
          }
          break;
 80055e0:	e004      	b.n	80055ec <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 80055e2:	6839      	ldr	r1, [r7, #0]
 80055e4:	6878      	ldr	r0, [r7, #4]
 80055e6:	f000 fb3b 	bl	8005c60 <USBD_CtlError>
          break;
 80055ea:	bf00      	nop
      }
      break;
 80055ec:	e004      	b.n	80055f8 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 80055ee:	6839      	ldr	r1, [r7, #0]
 80055f0:	6878      	ldr	r0, [r7, #4]
 80055f2:	f000 fb35 	bl	8005c60 <USBD_CtlError>
      break;
 80055f6:	bf00      	nop
  }

  return ret;
 80055f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80055fa:	4618      	mov	r0, r3
 80055fc:	3710      	adds	r7, #16
 80055fe:	46bd      	mov	sp, r7
 8005600:	bd80      	pop	{r7, pc}
	...

08005604 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005604:	b580      	push	{r7, lr}
 8005606:	b084      	sub	sp, #16
 8005608:	af00      	add	r7, sp, #0
 800560a:	6078      	str	r0, [r7, #4]
 800560c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800560e:	2300      	movs	r3, #0
 8005610:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8005612:	2300      	movs	r3, #0
 8005614:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8005616:	2300      	movs	r3, #0
 8005618:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800561a:	683b      	ldr	r3, [r7, #0]
 800561c:	885b      	ldrh	r3, [r3, #2]
 800561e:	0a1b      	lsrs	r3, r3, #8
 8005620:	b29b      	uxth	r3, r3
 8005622:	3b01      	subs	r3, #1
 8005624:	2b06      	cmp	r3, #6
 8005626:	f200 8128 	bhi.w	800587a <USBD_GetDescriptor+0x276>
 800562a:	a201      	add	r2, pc, #4	; (adr r2, 8005630 <USBD_GetDescriptor+0x2c>)
 800562c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005630:	0800564d 	.word	0x0800564d
 8005634:	08005665 	.word	0x08005665
 8005638:	080056a5 	.word	0x080056a5
 800563c:	0800587b 	.word	0x0800587b
 8005640:	0800587b 	.word	0x0800587b
 8005644:	0800581b 	.word	0x0800581b
 8005648:	08005847 	.word	0x08005847
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	687a      	ldr	r2, [r7, #4]
 8005656:	7c12      	ldrb	r2, [r2, #16]
 8005658:	f107 0108 	add.w	r1, r7, #8
 800565c:	4610      	mov	r0, r2
 800565e:	4798      	blx	r3
 8005660:	60f8      	str	r0, [r7, #12]
      break;
 8005662:	e112      	b.n	800588a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	7c1b      	ldrb	r3, [r3, #16]
 8005668:	2b00      	cmp	r3, #0
 800566a:	d10d      	bne.n	8005688 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005672:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005674:	f107 0208 	add.w	r2, r7, #8
 8005678:	4610      	mov	r0, r2
 800567a:	4798      	blx	r3
 800567c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	3301      	adds	r3, #1
 8005682:	2202      	movs	r2, #2
 8005684:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8005686:	e100      	b.n	800588a <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800568e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005690:	f107 0208 	add.w	r2, r7, #8
 8005694:	4610      	mov	r0, r2
 8005696:	4798      	blx	r3
 8005698:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	3301      	adds	r3, #1
 800569e:	2202      	movs	r2, #2
 80056a0:	701a      	strb	r2, [r3, #0]
      break;
 80056a2:	e0f2      	b.n	800588a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80056a4:	683b      	ldr	r3, [r7, #0]
 80056a6:	885b      	ldrh	r3, [r3, #2]
 80056a8:	b2db      	uxtb	r3, r3
 80056aa:	2b05      	cmp	r3, #5
 80056ac:	f200 80ac 	bhi.w	8005808 <USBD_GetDescriptor+0x204>
 80056b0:	a201      	add	r2, pc, #4	; (adr r2, 80056b8 <USBD_GetDescriptor+0xb4>)
 80056b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056b6:	bf00      	nop
 80056b8:	080056d1 	.word	0x080056d1
 80056bc:	08005705 	.word	0x08005705
 80056c0:	08005739 	.word	0x08005739
 80056c4:	0800576d 	.word	0x0800576d
 80056c8:	080057a1 	.word	0x080057a1
 80056cc:	080057d5 	.word	0x080057d5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80056d6:	685b      	ldr	r3, [r3, #4]
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d00b      	beq.n	80056f4 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80056e2:	685b      	ldr	r3, [r3, #4]
 80056e4:	687a      	ldr	r2, [r7, #4]
 80056e6:	7c12      	ldrb	r2, [r2, #16]
 80056e8:	f107 0108 	add.w	r1, r7, #8
 80056ec:	4610      	mov	r0, r2
 80056ee:	4798      	blx	r3
 80056f0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80056f2:	e091      	b.n	8005818 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80056f4:	6839      	ldr	r1, [r7, #0]
 80056f6:	6878      	ldr	r0, [r7, #4]
 80056f8:	f000 fab2 	bl	8005c60 <USBD_CtlError>
            err++;
 80056fc:	7afb      	ldrb	r3, [r7, #11]
 80056fe:	3301      	adds	r3, #1
 8005700:	72fb      	strb	r3, [r7, #11]
          break;
 8005702:	e089      	b.n	8005818 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800570a:	689b      	ldr	r3, [r3, #8]
 800570c:	2b00      	cmp	r3, #0
 800570e:	d00b      	beq.n	8005728 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005716:	689b      	ldr	r3, [r3, #8]
 8005718:	687a      	ldr	r2, [r7, #4]
 800571a:	7c12      	ldrb	r2, [r2, #16]
 800571c:	f107 0108 	add.w	r1, r7, #8
 8005720:	4610      	mov	r0, r2
 8005722:	4798      	blx	r3
 8005724:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005726:	e077      	b.n	8005818 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005728:	6839      	ldr	r1, [r7, #0]
 800572a:	6878      	ldr	r0, [r7, #4]
 800572c:	f000 fa98 	bl	8005c60 <USBD_CtlError>
            err++;
 8005730:	7afb      	ldrb	r3, [r7, #11]
 8005732:	3301      	adds	r3, #1
 8005734:	72fb      	strb	r3, [r7, #11]
          break;
 8005736:	e06f      	b.n	8005818 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800573e:	68db      	ldr	r3, [r3, #12]
 8005740:	2b00      	cmp	r3, #0
 8005742:	d00b      	beq.n	800575c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800574a:	68db      	ldr	r3, [r3, #12]
 800574c:	687a      	ldr	r2, [r7, #4]
 800574e:	7c12      	ldrb	r2, [r2, #16]
 8005750:	f107 0108 	add.w	r1, r7, #8
 8005754:	4610      	mov	r0, r2
 8005756:	4798      	blx	r3
 8005758:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800575a:	e05d      	b.n	8005818 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800575c:	6839      	ldr	r1, [r7, #0]
 800575e:	6878      	ldr	r0, [r7, #4]
 8005760:	f000 fa7e 	bl	8005c60 <USBD_CtlError>
            err++;
 8005764:	7afb      	ldrb	r3, [r7, #11]
 8005766:	3301      	adds	r3, #1
 8005768:	72fb      	strb	r3, [r7, #11]
          break;
 800576a:	e055      	b.n	8005818 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005772:	691b      	ldr	r3, [r3, #16]
 8005774:	2b00      	cmp	r3, #0
 8005776:	d00b      	beq.n	8005790 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800577e:	691b      	ldr	r3, [r3, #16]
 8005780:	687a      	ldr	r2, [r7, #4]
 8005782:	7c12      	ldrb	r2, [r2, #16]
 8005784:	f107 0108 	add.w	r1, r7, #8
 8005788:	4610      	mov	r0, r2
 800578a:	4798      	blx	r3
 800578c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800578e:	e043      	b.n	8005818 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005790:	6839      	ldr	r1, [r7, #0]
 8005792:	6878      	ldr	r0, [r7, #4]
 8005794:	f000 fa64 	bl	8005c60 <USBD_CtlError>
            err++;
 8005798:	7afb      	ldrb	r3, [r7, #11]
 800579a:	3301      	adds	r3, #1
 800579c:	72fb      	strb	r3, [r7, #11]
          break;
 800579e:	e03b      	b.n	8005818 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80057a6:	695b      	ldr	r3, [r3, #20]
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d00b      	beq.n	80057c4 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80057b2:	695b      	ldr	r3, [r3, #20]
 80057b4:	687a      	ldr	r2, [r7, #4]
 80057b6:	7c12      	ldrb	r2, [r2, #16]
 80057b8:	f107 0108 	add.w	r1, r7, #8
 80057bc:	4610      	mov	r0, r2
 80057be:	4798      	blx	r3
 80057c0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80057c2:	e029      	b.n	8005818 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80057c4:	6839      	ldr	r1, [r7, #0]
 80057c6:	6878      	ldr	r0, [r7, #4]
 80057c8:	f000 fa4a 	bl	8005c60 <USBD_CtlError>
            err++;
 80057cc:	7afb      	ldrb	r3, [r7, #11]
 80057ce:	3301      	adds	r3, #1
 80057d0:	72fb      	strb	r3, [r7, #11]
          break;
 80057d2:	e021      	b.n	8005818 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80057da:	699b      	ldr	r3, [r3, #24]
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d00b      	beq.n	80057f8 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80057e6:	699b      	ldr	r3, [r3, #24]
 80057e8:	687a      	ldr	r2, [r7, #4]
 80057ea:	7c12      	ldrb	r2, [r2, #16]
 80057ec:	f107 0108 	add.w	r1, r7, #8
 80057f0:	4610      	mov	r0, r2
 80057f2:	4798      	blx	r3
 80057f4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80057f6:	e00f      	b.n	8005818 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80057f8:	6839      	ldr	r1, [r7, #0]
 80057fa:	6878      	ldr	r0, [r7, #4]
 80057fc:	f000 fa30 	bl	8005c60 <USBD_CtlError>
            err++;
 8005800:	7afb      	ldrb	r3, [r7, #11]
 8005802:	3301      	adds	r3, #1
 8005804:	72fb      	strb	r3, [r7, #11]
          break;
 8005806:	e007      	b.n	8005818 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8005808:	6839      	ldr	r1, [r7, #0]
 800580a:	6878      	ldr	r0, [r7, #4]
 800580c:	f000 fa28 	bl	8005c60 <USBD_CtlError>
          err++;
 8005810:	7afb      	ldrb	r3, [r7, #11]
 8005812:	3301      	adds	r3, #1
 8005814:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8005816:	bf00      	nop
      }
      break;
 8005818:	e037      	b.n	800588a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	7c1b      	ldrb	r3, [r3, #16]
 800581e:	2b00      	cmp	r3, #0
 8005820:	d109      	bne.n	8005836 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005828:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800582a:	f107 0208 	add.w	r2, r7, #8
 800582e:	4610      	mov	r0, r2
 8005830:	4798      	blx	r3
 8005832:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005834:	e029      	b.n	800588a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8005836:	6839      	ldr	r1, [r7, #0]
 8005838:	6878      	ldr	r0, [r7, #4]
 800583a:	f000 fa11 	bl	8005c60 <USBD_CtlError>
        err++;
 800583e:	7afb      	ldrb	r3, [r7, #11]
 8005840:	3301      	adds	r3, #1
 8005842:	72fb      	strb	r3, [r7, #11]
      break;
 8005844:	e021      	b.n	800588a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	7c1b      	ldrb	r3, [r3, #16]
 800584a:	2b00      	cmp	r3, #0
 800584c:	d10d      	bne.n	800586a <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005856:	f107 0208 	add.w	r2, r7, #8
 800585a:	4610      	mov	r0, r2
 800585c:	4798      	blx	r3
 800585e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	3301      	adds	r3, #1
 8005864:	2207      	movs	r2, #7
 8005866:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005868:	e00f      	b.n	800588a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800586a:	6839      	ldr	r1, [r7, #0]
 800586c:	6878      	ldr	r0, [r7, #4]
 800586e:	f000 f9f7 	bl	8005c60 <USBD_CtlError>
        err++;
 8005872:	7afb      	ldrb	r3, [r7, #11]
 8005874:	3301      	adds	r3, #1
 8005876:	72fb      	strb	r3, [r7, #11]
      break;
 8005878:	e007      	b.n	800588a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800587a:	6839      	ldr	r1, [r7, #0]
 800587c:	6878      	ldr	r0, [r7, #4]
 800587e:	f000 f9ef 	bl	8005c60 <USBD_CtlError>
      err++;
 8005882:	7afb      	ldrb	r3, [r7, #11]
 8005884:	3301      	adds	r3, #1
 8005886:	72fb      	strb	r3, [r7, #11]
      break;
 8005888:	bf00      	nop
  }

  if (err != 0U)
 800588a:	7afb      	ldrb	r3, [r7, #11]
 800588c:	2b00      	cmp	r3, #0
 800588e:	d11e      	bne.n	80058ce <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8005890:	683b      	ldr	r3, [r7, #0]
 8005892:	88db      	ldrh	r3, [r3, #6]
 8005894:	2b00      	cmp	r3, #0
 8005896:	d016      	beq.n	80058c6 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8005898:	893b      	ldrh	r3, [r7, #8]
 800589a:	2b00      	cmp	r3, #0
 800589c:	d00e      	beq.n	80058bc <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800589e:	683b      	ldr	r3, [r7, #0]
 80058a0:	88da      	ldrh	r2, [r3, #6]
 80058a2:	893b      	ldrh	r3, [r7, #8]
 80058a4:	4293      	cmp	r3, r2
 80058a6:	bf28      	it	cs
 80058a8:	4613      	movcs	r3, r2
 80058aa:	b29b      	uxth	r3, r3
 80058ac:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80058ae:	893b      	ldrh	r3, [r7, #8]
 80058b0:	461a      	mov	r2, r3
 80058b2:	68f9      	ldr	r1, [r7, #12]
 80058b4:	6878      	ldr	r0, [r7, #4]
 80058b6:	f000 fa44 	bl	8005d42 <USBD_CtlSendData>
 80058ba:	e009      	b.n	80058d0 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80058bc:	6839      	ldr	r1, [r7, #0]
 80058be:	6878      	ldr	r0, [r7, #4]
 80058c0:	f000 f9ce 	bl	8005c60 <USBD_CtlError>
 80058c4:	e004      	b.n	80058d0 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80058c6:	6878      	ldr	r0, [r7, #4]
 80058c8:	f000 fa95 	bl	8005df6 <USBD_CtlSendStatus>
 80058cc:	e000      	b.n	80058d0 <USBD_GetDescriptor+0x2cc>
    return;
 80058ce:	bf00      	nop
  }
}
 80058d0:	3710      	adds	r7, #16
 80058d2:	46bd      	mov	sp, r7
 80058d4:	bd80      	pop	{r7, pc}
 80058d6:	bf00      	nop

080058d8 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80058d8:	b580      	push	{r7, lr}
 80058da:	b084      	sub	sp, #16
 80058dc:	af00      	add	r7, sp, #0
 80058de:	6078      	str	r0, [r7, #4]
 80058e0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80058e2:	683b      	ldr	r3, [r7, #0]
 80058e4:	889b      	ldrh	r3, [r3, #4]
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d131      	bne.n	800594e <USBD_SetAddress+0x76>
 80058ea:	683b      	ldr	r3, [r7, #0]
 80058ec:	88db      	ldrh	r3, [r3, #6]
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d12d      	bne.n	800594e <USBD_SetAddress+0x76>
 80058f2:	683b      	ldr	r3, [r7, #0]
 80058f4:	885b      	ldrh	r3, [r3, #2]
 80058f6:	2b7f      	cmp	r3, #127	; 0x7f
 80058f8:	d829      	bhi.n	800594e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80058fa:	683b      	ldr	r3, [r7, #0]
 80058fc:	885b      	ldrh	r3, [r3, #2]
 80058fe:	b2db      	uxtb	r3, r3
 8005900:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005904:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800590c:	b2db      	uxtb	r3, r3
 800590e:	2b03      	cmp	r3, #3
 8005910:	d104      	bne.n	800591c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8005912:	6839      	ldr	r1, [r7, #0]
 8005914:	6878      	ldr	r0, [r7, #4]
 8005916:	f000 f9a3 	bl	8005c60 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800591a:	e01d      	b.n	8005958 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	7bfa      	ldrb	r2, [r7, #15]
 8005920:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8005924:	7bfb      	ldrb	r3, [r7, #15]
 8005926:	4619      	mov	r1, r3
 8005928:	6878      	ldr	r0, [r7, #4]
 800592a:	f000 fff9 	bl	8006920 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800592e:	6878      	ldr	r0, [r7, #4]
 8005930:	f000 fa61 	bl	8005df6 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8005934:	7bfb      	ldrb	r3, [r7, #15]
 8005936:	2b00      	cmp	r3, #0
 8005938:	d004      	beq.n	8005944 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	2202      	movs	r2, #2
 800593e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005942:	e009      	b.n	8005958 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	2201      	movs	r2, #1
 8005948:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800594c:	e004      	b.n	8005958 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800594e:	6839      	ldr	r1, [r7, #0]
 8005950:	6878      	ldr	r0, [r7, #4]
 8005952:	f000 f985 	bl	8005c60 <USBD_CtlError>
  }
}
 8005956:	bf00      	nop
 8005958:	bf00      	nop
 800595a:	3710      	adds	r7, #16
 800595c:	46bd      	mov	sp, r7
 800595e:	bd80      	pop	{r7, pc}

08005960 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005960:	b580      	push	{r7, lr}
 8005962:	b084      	sub	sp, #16
 8005964:	af00      	add	r7, sp, #0
 8005966:	6078      	str	r0, [r7, #4]
 8005968:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800596a:	2300      	movs	r3, #0
 800596c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800596e:	683b      	ldr	r3, [r7, #0]
 8005970:	885b      	ldrh	r3, [r3, #2]
 8005972:	b2da      	uxtb	r2, r3
 8005974:	4b4c      	ldr	r3, [pc, #304]	; (8005aa8 <USBD_SetConfig+0x148>)
 8005976:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8005978:	4b4b      	ldr	r3, [pc, #300]	; (8005aa8 <USBD_SetConfig+0x148>)
 800597a:	781b      	ldrb	r3, [r3, #0]
 800597c:	2b01      	cmp	r3, #1
 800597e:	d905      	bls.n	800598c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8005980:	6839      	ldr	r1, [r7, #0]
 8005982:	6878      	ldr	r0, [r7, #4]
 8005984:	f000 f96c 	bl	8005c60 <USBD_CtlError>
    return USBD_FAIL;
 8005988:	2303      	movs	r3, #3
 800598a:	e088      	b.n	8005a9e <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005992:	b2db      	uxtb	r3, r3
 8005994:	2b02      	cmp	r3, #2
 8005996:	d002      	beq.n	800599e <USBD_SetConfig+0x3e>
 8005998:	2b03      	cmp	r3, #3
 800599a:	d025      	beq.n	80059e8 <USBD_SetConfig+0x88>
 800599c:	e071      	b.n	8005a82 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800599e:	4b42      	ldr	r3, [pc, #264]	; (8005aa8 <USBD_SetConfig+0x148>)
 80059a0:	781b      	ldrb	r3, [r3, #0]
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d01c      	beq.n	80059e0 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 80059a6:	4b40      	ldr	r3, [pc, #256]	; (8005aa8 <USBD_SetConfig+0x148>)
 80059a8:	781b      	ldrb	r3, [r3, #0]
 80059aa:	461a      	mov	r2, r3
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80059b0:	4b3d      	ldr	r3, [pc, #244]	; (8005aa8 <USBD_SetConfig+0x148>)
 80059b2:	781b      	ldrb	r3, [r3, #0]
 80059b4:	4619      	mov	r1, r3
 80059b6:	6878      	ldr	r0, [r7, #4]
 80059b8:	f7ff f948 	bl	8004c4c <USBD_SetClassConfig>
 80059bc:	4603      	mov	r3, r0
 80059be:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80059c0:	7bfb      	ldrb	r3, [r7, #15]
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d004      	beq.n	80059d0 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 80059c6:	6839      	ldr	r1, [r7, #0]
 80059c8:	6878      	ldr	r0, [r7, #4]
 80059ca:	f000 f949 	bl	8005c60 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80059ce:	e065      	b.n	8005a9c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 80059d0:	6878      	ldr	r0, [r7, #4]
 80059d2:	f000 fa10 	bl	8005df6 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	2203      	movs	r2, #3
 80059da:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80059de:	e05d      	b.n	8005a9c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80059e0:	6878      	ldr	r0, [r7, #4]
 80059e2:	f000 fa08 	bl	8005df6 <USBD_CtlSendStatus>
      break;
 80059e6:	e059      	b.n	8005a9c <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80059e8:	4b2f      	ldr	r3, [pc, #188]	; (8005aa8 <USBD_SetConfig+0x148>)
 80059ea:	781b      	ldrb	r3, [r3, #0]
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d112      	bne.n	8005a16 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	2202      	movs	r2, #2
 80059f4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80059f8:	4b2b      	ldr	r3, [pc, #172]	; (8005aa8 <USBD_SetConfig+0x148>)
 80059fa:	781b      	ldrb	r3, [r3, #0]
 80059fc:	461a      	mov	r2, r3
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8005a02:	4b29      	ldr	r3, [pc, #164]	; (8005aa8 <USBD_SetConfig+0x148>)
 8005a04:	781b      	ldrb	r3, [r3, #0]
 8005a06:	4619      	mov	r1, r3
 8005a08:	6878      	ldr	r0, [r7, #4]
 8005a0a:	f7ff f93b 	bl	8004c84 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8005a0e:	6878      	ldr	r0, [r7, #4]
 8005a10:	f000 f9f1 	bl	8005df6 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8005a14:	e042      	b.n	8005a9c <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8005a16:	4b24      	ldr	r3, [pc, #144]	; (8005aa8 <USBD_SetConfig+0x148>)
 8005a18:	781b      	ldrb	r3, [r3, #0]
 8005a1a:	461a      	mov	r2, r3
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	685b      	ldr	r3, [r3, #4]
 8005a20:	429a      	cmp	r2, r3
 8005a22:	d02a      	beq.n	8005a7a <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	685b      	ldr	r3, [r3, #4]
 8005a28:	b2db      	uxtb	r3, r3
 8005a2a:	4619      	mov	r1, r3
 8005a2c:	6878      	ldr	r0, [r7, #4]
 8005a2e:	f7ff f929 	bl	8004c84 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8005a32:	4b1d      	ldr	r3, [pc, #116]	; (8005aa8 <USBD_SetConfig+0x148>)
 8005a34:	781b      	ldrb	r3, [r3, #0]
 8005a36:	461a      	mov	r2, r3
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8005a3c:	4b1a      	ldr	r3, [pc, #104]	; (8005aa8 <USBD_SetConfig+0x148>)
 8005a3e:	781b      	ldrb	r3, [r3, #0]
 8005a40:	4619      	mov	r1, r3
 8005a42:	6878      	ldr	r0, [r7, #4]
 8005a44:	f7ff f902 	bl	8004c4c <USBD_SetClassConfig>
 8005a48:	4603      	mov	r3, r0
 8005a4a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8005a4c:	7bfb      	ldrb	r3, [r7, #15]
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d00f      	beq.n	8005a72 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8005a52:	6839      	ldr	r1, [r7, #0]
 8005a54:	6878      	ldr	r0, [r7, #4]
 8005a56:	f000 f903 	bl	8005c60 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	685b      	ldr	r3, [r3, #4]
 8005a5e:	b2db      	uxtb	r3, r3
 8005a60:	4619      	mov	r1, r3
 8005a62:	6878      	ldr	r0, [r7, #4]
 8005a64:	f7ff f90e 	bl	8004c84 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	2202      	movs	r2, #2
 8005a6c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8005a70:	e014      	b.n	8005a9c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8005a72:	6878      	ldr	r0, [r7, #4]
 8005a74:	f000 f9bf 	bl	8005df6 <USBD_CtlSendStatus>
      break;
 8005a78:	e010      	b.n	8005a9c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8005a7a:	6878      	ldr	r0, [r7, #4]
 8005a7c:	f000 f9bb 	bl	8005df6 <USBD_CtlSendStatus>
      break;
 8005a80:	e00c      	b.n	8005a9c <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8005a82:	6839      	ldr	r1, [r7, #0]
 8005a84:	6878      	ldr	r0, [r7, #4]
 8005a86:	f000 f8eb 	bl	8005c60 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8005a8a:	4b07      	ldr	r3, [pc, #28]	; (8005aa8 <USBD_SetConfig+0x148>)
 8005a8c:	781b      	ldrb	r3, [r3, #0]
 8005a8e:	4619      	mov	r1, r3
 8005a90:	6878      	ldr	r0, [r7, #4]
 8005a92:	f7ff f8f7 	bl	8004c84 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8005a96:	2303      	movs	r3, #3
 8005a98:	73fb      	strb	r3, [r7, #15]
      break;
 8005a9a:	bf00      	nop
  }

  return ret;
 8005a9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a9e:	4618      	mov	r0, r3
 8005aa0:	3710      	adds	r7, #16
 8005aa2:	46bd      	mov	sp, r7
 8005aa4:	bd80      	pop	{r7, pc}
 8005aa6:	bf00      	nop
 8005aa8:	2000023c 	.word	0x2000023c

08005aac <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005aac:	b580      	push	{r7, lr}
 8005aae:	b082      	sub	sp, #8
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	6078      	str	r0, [r7, #4]
 8005ab4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8005ab6:	683b      	ldr	r3, [r7, #0]
 8005ab8:	88db      	ldrh	r3, [r3, #6]
 8005aba:	2b01      	cmp	r3, #1
 8005abc:	d004      	beq.n	8005ac8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8005abe:	6839      	ldr	r1, [r7, #0]
 8005ac0:	6878      	ldr	r0, [r7, #4]
 8005ac2:	f000 f8cd 	bl	8005c60 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8005ac6:	e023      	b.n	8005b10 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005ace:	b2db      	uxtb	r3, r3
 8005ad0:	2b02      	cmp	r3, #2
 8005ad2:	dc02      	bgt.n	8005ada <USBD_GetConfig+0x2e>
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	dc03      	bgt.n	8005ae0 <USBD_GetConfig+0x34>
 8005ad8:	e015      	b.n	8005b06 <USBD_GetConfig+0x5a>
 8005ada:	2b03      	cmp	r3, #3
 8005adc:	d00b      	beq.n	8005af6 <USBD_GetConfig+0x4a>
 8005ade:	e012      	b.n	8005b06 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	2200      	movs	r2, #0
 8005ae4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	3308      	adds	r3, #8
 8005aea:	2201      	movs	r2, #1
 8005aec:	4619      	mov	r1, r3
 8005aee:	6878      	ldr	r0, [r7, #4]
 8005af0:	f000 f927 	bl	8005d42 <USBD_CtlSendData>
        break;
 8005af4:	e00c      	b.n	8005b10 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	3304      	adds	r3, #4
 8005afa:	2201      	movs	r2, #1
 8005afc:	4619      	mov	r1, r3
 8005afe:	6878      	ldr	r0, [r7, #4]
 8005b00:	f000 f91f 	bl	8005d42 <USBD_CtlSendData>
        break;
 8005b04:	e004      	b.n	8005b10 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8005b06:	6839      	ldr	r1, [r7, #0]
 8005b08:	6878      	ldr	r0, [r7, #4]
 8005b0a:	f000 f8a9 	bl	8005c60 <USBD_CtlError>
        break;
 8005b0e:	bf00      	nop
}
 8005b10:	bf00      	nop
 8005b12:	3708      	adds	r7, #8
 8005b14:	46bd      	mov	sp, r7
 8005b16:	bd80      	pop	{r7, pc}

08005b18 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005b18:	b580      	push	{r7, lr}
 8005b1a:	b082      	sub	sp, #8
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	6078      	str	r0, [r7, #4]
 8005b20:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005b28:	b2db      	uxtb	r3, r3
 8005b2a:	3b01      	subs	r3, #1
 8005b2c:	2b02      	cmp	r3, #2
 8005b2e:	d81e      	bhi.n	8005b6e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8005b30:	683b      	ldr	r3, [r7, #0]
 8005b32:	88db      	ldrh	r3, [r3, #6]
 8005b34:	2b02      	cmp	r3, #2
 8005b36:	d004      	beq.n	8005b42 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8005b38:	6839      	ldr	r1, [r7, #0]
 8005b3a:	6878      	ldr	r0, [r7, #4]
 8005b3c:	f000 f890 	bl	8005c60 <USBD_CtlError>
        break;
 8005b40:	e01a      	b.n	8005b78 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	2201      	movs	r2, #1
 8005b46:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d005      	beq.n	8005b5e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	68db      	ldr	r3, [r3, #12]
 8005b56:	f043 0202 	orr.w	r2, r3, #2
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	330c      	adds	r3, #12
 8005b62:	2202      	movs	r2, #2
 8005b64:	4619      	mov	r1, r3
 8005b66:	6878      	ldr	r0, [r7, #4]
 8005b68:	f000 f8eb 	bl	8005d42 <USBD_CtlSendData>
      break;
 8005b6c:	e004      	b.n	8005b78 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8005b6e:	6839      	ldr	r1, [r7, #0]
 8005b70:	6878      	ldr	r0, [r7, #4]
 8005b72:	f000 f875 	bl	8005c60 <USBD_CtlError>
      break;
 8005b76:	bf00      	nop
  }
}
 8005b78:	bf00      	nop
 8005b7a:	3708      	adds	r7, #8
 8005b7c:	46bd      	mov	sp, r7
 8005b7e:	bd80      	pop	{r7, pc}

08005b80 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005b80:	b580      	push	{r7, lr}
 8005b82:	b082      	sub	sp, #8
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	6078      	str	r0, [r7, #4]
 8005b88:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005b8a:	683b      	ldr	r3, [r7, #0]
 8005b8c:	885b      	ldrh	r3, [r3, #2]
 8005b8e:	2b01      	cmp	r3, #1
 8005b90:	d106      	bne.n	8005ba0 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	2201      	movs	r2, #1
 8005b96:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8005b9a:	6878      	ldr	r0, [r7, #4]
 8005b9c:	f000 f92b 	bl	8005df6 <USBD_CtlSendStatus>
  }
}
 8005ba0:	bf00      	nop
 8005ba2:	3708      	adds	r7, #8
 8005ba4:	46bd      	mov	sp, r7
 8005ba6:	bd80      	pop	{r7, pc}

08005ba8 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005ba8:	b580      	push	{r7, lr}
 8005baa:	b082      	sub	sp, #8
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	6078      	str	r0, [r7, #4]
 8005bb0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005bb8:	b2db      	uxtb	r3, r3
 8005bba:	3b01      	subs	r3, #1
 8005bbc:	2b02      	cmp	r3, #2
 8005bbe:	d80b      	bhi.n	8005bd8 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005bc0:	683b      	ldr	r3, [r7, #0]
 8005bc2:	885b      	ldrh	r3, [r3, #2]
 8005bc4:	2b01      	cmp	r3, #1
 8005bc6:	d10c      	bne.n	8005be2 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	2200      	movs	r2, #0
 8005bcc:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8005bd0:	6878      	ldr	r0, [r7, #4]
 8005bd2:	f000 f910 	bl	8005df6 <USBD_CtlSendStatus>
      }
      break;
 8005bd6:	e004      	b.n	8005be2 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8005bd8:	6839      	ldr	r1, [r7, #0]
 8005bda:	6878      	ldr	r0, [r7, #4]
 8005bdc:	f000 f840 	bl	8005c60 <USBD_CtlError>
      break;
 8005be0:	e000      	b.n	8005be4 <USBD_ClrFeature+0x3c>
      break;
 8005be2:	bf00      	nop
  }
}
 8005be4:	bf00      	nop
 8005be6:	3708      	adds	r7, #8
 8005be8:	46bd      	mov	sp, r7
 8005bea:	bd80      	pop	{r7, pc}

08005bec <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8005bec:	b580      	push	{r7, lr}
 8005bee:	b084      	sub	sp, #16
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	6078      	str	r0, [r7, #4]
 8005bf4:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8005bf6:	683b      	ldr	r3, [r7, #0]
 8005bf8:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	781a      	ldrb	r2, [r3, #0]
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	3301      	adds	r3, #1
 8005c06:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	781a      	ldrb	r2, [r3, #0]
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	3301      	adds	r3, #1
 8005c14:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8005c16:	68f8      	ldr	r0, [r7, #12]
 8005c18:	f7ff fabb 	bl	8005192 <SWAPBYTE>
 8005c1c:	4603      	mov	r3, r0
 8005c1e:	461a      	mov	r2, r3
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	3301      	adds	r3, #1
 8005c28:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	3301      	adds	r3, #1
 8005c2e:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8005c30:	68f8      	ldr	r0, [r7, #12]
 8005c32:	f7ff faae 	bl	8005192 <SWAPBYTE>
 8005c36:	4603      	mov	r3, r0
 8005c38:	461a      	mov	r2, r3
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	3301      	adds	r3, #1
 8005c42:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	3301      	adds	r3, #1
 8005c48:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8005c4a:	68f8      	ldr	r0, [r7, #12]
 8005c4c:	f7ff faa1 	bl	8005192 <SWAPBYTE>
 8005c50:	4603      	mov	r3, r0
 8005c52:	461a      	mov	r2, r3
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	80da      	strh	r2, [r3, #6]
}
 8005c58:	bf00      	nop
 8005c5a:	3710      	adds	r7, #16
 8005c5c:	46bd      	mov	sp, r7
 8005c5e:	bd80      	pop	{r7, pc}

08005c60 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005c60:	b580      	push	{r7, lr}
 8005c62:	b082      	sub	sp, #8
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	6078      	str	r0, [r7, #4]
 8005c68:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8005c6a:	2180      	movs	r1, #128	; 0x80
 8005c6c:	6878      	ldr	r0, [r7, #4]
 8005c6e:	f000 fded 	bl	800684c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8005c72:	2100      	movs	r1, #0
 8005c74:	6878      	ldr	r0, [r7, #4]
 8005c76:	f000 fde9 	bl	800684c <USBD_LL_StallEP>
}
 8005c7a:	bf00      	nop
 8005c7c:	3708      	adds	r7, #8
 8005c7e:	46bd      	mov	sp, r7
 8005c80:	bd80      	pop	{r7, pc}

08005c82 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8005c82:	b580      	push	{r7, lr}
 8005c84:	b086      	sub	sp, #24
 8005c86:	af00      	add	r7, sp, #0
 8005c88:	60f8      	str	r0, [r7, #12]
 8005c8a:	60b9      	str	r1, [r7, #8]
 8005c8c:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8005c8e:	2300      	movs	r3, #0
 8005c90:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d036      	beq.n	8005d06 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8005c9c:	6938      	ldr	r0, [r7, #16]
 8005c9e:	f000 f836 	bl	8005d0e <USBD_GetLen>
 8005ca2:	4603      	mov	r3, r0
 8005ca4:	3301      	adds	r3, #1
 8005ca6:	b29b      	uxth	r3, r3
 8005ca8:	005b      	lsls	r3, r3, #1
 8005caa:	b29a      	uxth	r2, r3
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8005cb0:	7dfb      	ldrb	r3, [r7, #23]
 8005cb2:	68ba      	ldr	r2, [r7, #8]
 8005cb4:	4413      	add	r3, r2
 8005cb6:	687a      	ldr	r2, [r7, #4]
 8005cb8:	7812      	ldrb	r2, [r2, #0]
 8005cba:	701a      	strb	r2, [r3, #0]
  idx++;
 8005cbc:	7dfb      	ldrb	r3, [r7, #23]
 8005cbe:	3301      	adds	r3, #1
 8005cc0:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8005cc2:	7dfb      	ldrb	r3, [r7, #23]
 8005cc4:	68ba      	ldr	r2, [r7, #8]
 8005cc6:	4413      	add	r3, r2
 8005cc8:	2203      	movs	r2, #3
 8005cca:	701a      	strb	r2, [r3, #0]
  idx++;
 8005ccc:	7dfb      	ldrb	r3, [r7, #23]
 8005cce:	3301      	adds	r3, #1
 8005cd0:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8005cd2:	e013      	b.n	8005cfc <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8005cd4:	7dfb      	ldrb	r3, [r7, #23]
 8005cd6:	68ba      	ldr	r2, [r7, #8]
 8005cd8:	4413      	add	r3, r2
 8005cda:	693a      	ldr	r2, [r7, #16]
 8005cdc:	7812      	ldrb	r2, [r2, #0]
 8005cde:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8005ce0:	693b      	ldr	r3, [r7, #16]
 8005ce2:	3301      	adds	r3, #1
 8005ce4:	613b      	str	r3, [r7, #16]
    idx++;
 8005ce6:	7dfb      	ldrb	r3, [r7, #23]
 8005ce8:	3301      	adds	r3, #1
 8005cea:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8005cec:	7dfb      	ldrb	r3, [r7, #23]
 8005cee:	68ba      	ldr	r2, [r7, #8]
 8005cf0:	4413      	add	r3, r2
 8005cf2:	2200      	movs	r2, #0
 8005cf4:	701a      	strb	r2, [r3, #0]
    idx++;
 8005cf6:	7dfb      	ldrb	r3, [r7, #23]
 8005cf8:	3301      	adds	r3, #1
 8005cfa:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8005cfc:	693b      	ldr	r3, [r7, #16]
 8005cfe:	781b      	ldrb	r3, [r3, #0]
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d1e7      	bne.n	8005cd4 <USBD_GetString+0x52>
 8005d04:	e000      	b.n	8005d08 <USBD_GetString+0x86>
    return;
 8005d06:	bf00      	nop
  }
}
 8005d08:	3718      	adds	r7, #24
 8005d0a:	46bd      	mov	sp, r7
 8005d0c:	bd80      	pop	{r7, pc}

08005d0e <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8005d0e:	b480      	push	{r7}
 8005d10:	b085      	sub	sp, #20
 8005d12:	af00      	add	r7, sp, #0
 8005d14:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8005d16:	2300      	movs	r3, #0
 8005d18:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8005d1e:	e005      	b.n	8005d2c <USBD_GetLen+0x1e>
  {
    len++;
 8005d20:	7bfb      	ldrb	r3, [r7, #15]
 8005d22:	3301      	adds	r3, #1
 8005d24:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8005d26:	68bb      	ldr	r3, [r7, #8]
 8005d28:	3301      	adds	r3, #1
 8005d2a:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8005d2c:	68bb      	ldr	r3, [r7, #8]
 8005d2e:	781b      	ldrb	r3, [r3, #0]
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d1f5      	bne.n	8005d20 <USBD_GetLen+0x12>
  }

  return len;
 8005d34:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d36:	4618      	mov	r0, r3
 8005d38:	3714      	adds	r7, #20
 8005d3a:	46bd      	mov	sp, r7
 8005d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d40:	4770      	bx	lr

08005d42 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8005d42:	b580      	push	{r7, lr}
 8005d44:	b084      	sub	sp, #16
 8005d46:	af00      	add	r7, sp, #0
 8005d48:	60f8      	str	r0, [r7, #12]
 8005d4a:	60b9      	str	r1, [r7, #8]
 8005d4c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	2202      	movs	r2, #2
 8005d52:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	687a      	ldr	r2, [r7, #4]
 8005d5a:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	687a      	ldr	r2, [r7, #4]
 8005d60:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	68ba      	ldr	r2, [r7, #8]
 8005d66:	2100      	movs	r1, #0
 8005d68:	68f8      	ldr	r0, [r7, #12]
 8005d6a:	f000 fdf8 	bl	800695e <USBD_LL_Transmit>

  return USBD_OK;
 8005d6e:	2300      	movs	r3, #0
}
 8005d70:	4618      	mov	r0, r3
 8005d72:	3710      	adds	r7, #16
 8005d74:	46bd      	mov	sp, r7
 8005d76:	bd80      	pop	{r7, pc}

08005d78 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8005d78:	b580      	push	{r7, lr}
 8005d7a:	b084      	sub	sp, #16
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	60f8      	str	r0, [r7, #12]
 8005d80:	60b9      	str	r1, [r7, #8]
 8005d82:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	68ba      	ldr	r2, [r7, #8]
 8005d88:	2100      	movs	r1, #0
 8005d8a:	68f8      	ldr	r0, [r7, #12]
 8005d8c:	f000 fde7 	bl	800695e <USBD_LL_Transmit>

  return USBD_OK;
 8005d90:	2300      	movs	r3, #0
}
 8005d92:	4618      	mov	r0, r3
 8005d94:	3710      	adds	r7, #16
 8005d96:	46bd      	mov	sp, r7
 8005d98:	bd80      	pop	{r7, pc}

08005d9a <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8005d9a:	b580      	push	{r7, lr}
 8005d9c:	b084      	sub	sp, #16
 8005d9e:	af00      	add	r7, sp, #0
 8005da0:	60f8      	str	r0, [r7, #12]
 8005da2:	60b9      	str	r1, [r7, #8]
 8005da4:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	2203      	movs	r2, #3
 8005daa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	687a      	ldr	r2, [r7, #4]
 8005db2:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	687a      	ldr	r2, [r7, #4]
 8005dba:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	68ba      	ldr	r2, [r7, #8]
 8005dc2:	2100      	movs	r1, #0
 8005dc4:	68f8      	ldr	r0, [r7, #12]
 8005dc6:	f000 fdeb 	bl	80069a0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8005dca:	2300      	movs	r3, #0
}
 8005dcc:	4618      	mov	r0, r3
 8005dce:	3710      	adds	r7, #16
 8005dd0:	46bd      	mov	sp, r7
 8005dd2:	bd80      	pop	{r7, pc}

08005dd4 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8005dd4:	b580      	push	{r7, lr}
 8005dd6:	b084      	sub	sp, #16
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	60f8      	str	r0, [r7, #12]
 8005ddc:	60b9      	str	r1, [r7, #8]
 8005dde:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	68ba      	ldr	r2, [r7, #8]
 8005de4:	2100      	movs	r1, #0
 8005de6:	68f8      	ldr	r0, [r7, #12]
 8005de8:	f000 fdda 	bl	80069a0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8005dec:	2300      	movs	r3, #0
}
 8005dee:	4618      	mov	r0, r3
 8005df0:	3710      	adds	r7, #16
 8005df2:	46bd      	mov	sp, r7
 8005df4:	bd80      	pop	{r7, pc}

08005df6 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8005df6:	b580      	push	{r7, lr}
 8005df8:	b082      	sub	sp, #8
 8005dfa:	af00      	add	r7, sp, #0
 8005dfc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	2204      	movs	r2, #4
 8005e02:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8005e06:	2300      	movs	r3, #0
 8005e08:	2200      	movs	r2, #0
 8005e0a:	2100      	movs	r1, #0
 8005e0c:	6878      	ldr	r0, [r7, #4]
 8005e0e:	f000 fda6 	bl	800695e <USBD_LL_Transmit>

  return USBD_OK;
 8005e12:	2300      	movs	r3, #0
}
 8005e14:	4618      	mov	r0, r3
 8005e16:	3708      	adds	r7, #8
 8005e18:	46bd      	mov	sp, r7
 8005e1a:	bd80      	pop	{r7, pc}

08005e1c <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8005e1c:	b580      	push	{r7, lr}
 8005e1e:	b082      	sub	sp, #8
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	2205      	movs	r2, #5
 8005e28:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005e2c:	2300      	movs	r3, #0
 8005e2e:	2200      	movs	r2, #0
 8005e30:	2100      	movs	r1, #0
 8005e32:	6878      	ldr	r0, [r7, #4]
 8005e34:	f000 fdb4 	bl	80069a0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8005e38:	2300      	movs	r3, #0
}
 8005e3a:	4618      	mov	r0, r3
 8005e3c:	3708      	adds	r7, #8
 8005e3e:	46bd      	mov	sp, r7
 8005e40:	bd80      	pop	{r7, pc}
	...

08005e44 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8005e44:	b580      	push	{r7, lr}
 8005e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8005e48:	2200      	movs	r2, #0
 8005e4a:	4912      	ldr	r1, [pc, #72]	; (8005e94 <MX_USB_DEVICE_Init+0x50>)
 8005e4c:	4812      	ldr	r0, [pc, #72]	; (8005e98 <MX_USB_DEVICE_Init+0x54>)
 8005e4e:	f7fe fe8f 	bl	8004b70 <USBD_Init>
 8005e52:	4603      	mov	r3, r0
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d001      	beq.n	8005e5c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8005e58:	f7fa fcc2 	bl	80007e0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8005e5c:	490f      	ldr	r1, [pc, #60]	; (8005e9c <MX_USB_DEVICE_Init+0x58>)
 8005e5e:	480e      	ldr	r0, [pc, #56]	; (8005e98 <MX_USB_DEVICE_Init+0x54>)
 8005e60:	f7fe feb6 	bl	8004bd0 <USBD_RegisterClass>
 8005e64:	4603      	mov	r3, r0
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d001      	beq.n	8005e6e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8005e6a:	f7fa fcb9 	bl	80007e0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8005e6e:	490c      	ldr	r1, [pc, #48]	; (8005ea0 <MX_USB_DEVICE_Init+0x5c>)
 8005e70:	4809      	ldr	r0, [pc, #36]	; (8005e98 <MX_USB_DEVICE_Init+0x54>)
 8005e72:	f7fe fdd7 	bl	8004a24 <USBD_CDC_RegisterInterface>
 8005e76:	4603      	mov	r3, r0
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d001      	beq.n	8005e80 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8005e7c:	f7fa fcb0 	bl	80007e0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8005e80:	4805      	ldr	r0, [pc, #20]	; (8005e98 <MX_USB_DEVICE_Init+0x54>)
 8005e82:	f7fe fecc 	bl	8004c1e <USBD_Start>
 8005e86:	4603      	mov	r3, r0
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d001      	beq.n	8005e90 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8005e8c:	f7fa fca8 	bl	80007e0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8005e90:	bf00      	nop
 8005e92:	bd80      	pop	{r7, pc}
 8005e94:	20000160 	.word	0x20000160
 8005e98:	20000240 	.word	0x20000240
 8005e9c:	2000003c 	.word	0x2000003c
 8005ea0:	2000014c 	.word	0x2000014c

08005ea4 <cdcAvailable>:
uint32_t rx_out;			//read buffer
uint32_t rx_len=512;
uint8_t rx_buf[512];

uint32_t cdcAvailable(void)
{
 8005ea4:	b480      	push	{r7}
 8005ea6:	b083      	sub	sp, #12
 8005ea8:	af00      	add	r7, sp, #0
	uint32_t ret;

	ret = (rx_in - rx_out) % rx_len;
 8005eaa:	4b0a      	ldr	r3, [pc, #40]	; (8005ed4 <cdcAvailable+0x30>)
 8005eac:	681a      	ldr	r2, [r3, #0]
 8005eae:	4b0a      	ldr	r3, [pc, #40]	; (8005ed8 <cdcAvailable+0x34>)
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	1ad3      	subs	r3, r2, r3
 8005eb4:	4a09      	ldr	r2, [pc, #36]	; (8005edc <cdcAvailable+0x38>)
 8005eb6:	6812      	ldr	r2, [r2, #0]
 8005eb8:	fbb3 f1f2 	udiv	r1, r3, r2
 8005ebc:	fb01 f202 	mul.w	r2, r1, r2
 8005ec0:	1a9b      	subs	r3, r3, r2
 8005ec2:	607b      	str	r3, [r7, #4]

	return ret;
 8005ec4:	687b      	ldr	r3, [r7, #4]
}
 8005ec6:	4618      	mov	r0, r3
 8005ec8:	370c      	adds	r7, #12
 8005eca:	46bd      	mov	sp, r7
 8005ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed0:	4770      	bx	lr
 8005ed2:	bf00      	nop
 8005ed4:	20000510 	.word	0x20000510
 8005ed8:	20000514 	.word	0x20000514
 8005edc:	20000148 	.word	0x20000148

08005ee0 <cdcRead>:

uint8_t cdcRead(void)
{
 8005ee0:	b480      	push	{r7}
 8005ee2:	b083      	sub	sp, #12
 8005ee4:	af00      	add	r7, sp, #0
	uint8_t ret;
	ret = rx_buf[rx_out];
 8005ee6:	4b0f      	ldr	r3, [pc, #60]	; (8005f24 <cdcRead+0x44>)
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	4a0f      	ldr	r2, [pc, #60]	; (8005f28 <cdcRead+0x48>)
 8005eec:	5cd3      	ldrb	r3, [r2, r3]
 8005eee:	71fb      	strb	r3, [r7, #7]

	if(rx_out != rx_in)
 8005ef0:	4b0c      	ldr	r3, [pc, #48]	; (8005f24 <cdcRead+0x44>)
 8005ef2:	681a      	ldr	r2, [r3, #0]
 8005ef4:	4b0d      	ldr	r3, [pc, #52]	; (8005f2c <cdcRead+0x4c>)
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	429a      	cmp	r2, r3
 8005efa:	d00b      	beq.n	8005f14 <cdcRead+0x34>
	{
		rx_out = (rx_out + 1) % rx_len;
 8005efc:	4b09      	ldr	r3, [pc, #36]	; (8005f24 <cdcRead+0x44>)
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	3301      	adds	r3, #1
 8005f02:	4a0b      	ldr	r2, [pc, #44]	; (8005f30 <cdcRead+0x50>)
 8005f04:	6812      	ldr	r2, [r2, #0]
 8005f06:	fbb3 f1f2 	udiv	r1, r3, r2
 8005f0a:	fb01 f202 	mul.w	r2, r1, r2
 8005f0e:	1a9b      	subs	r3, r3, r2
 8005f10:	4a04      	ldr	r2, [pc, #16]	; (8005f24 <cdcRead+0x44>)
 8005f12:	6013      	str	r3, [r2, #0]
	}
	return ret;
 8005f14:	79fb      	ldrb	r3, [r7, #7]
}
 8005f16:	4618      	mov	r0, r3
 8005f18:	370c      	adds	r7, #12
 8005f1a:	46bd      	mov	sp, r7
 8005f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f20:	4770      	bx	lr
 8005f22:	bf00      	nop
 8005f24:	20000514 	.word	0x20000514
 8005f28:	20000518 	.word	0x20000518
 8005f2c:	20000510 	.word	0x20000510
 8005f30:	20000148 	.word	0x20000148

08005f34 <cdcDataIn>:

void cdcDataIn(uint8_t rx_data)
{
 8005f34:	b480      	push	{r7}
 8005f36:	b085      	sub	sp, #20
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	4603      	mov	r3, r0
 8005f3c:	71fb      	strb	r3, [r7, #7]
	uint32_t next_rx_in;
	next_rx_in = (rx_in + 1) % rx_len;
 8005f3e:	4b0f      	ldr	r3, [pc, #60]	; (8005f7c <cdcDataIn+0x48>)
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	3301      	adds	r3, #1
 8005f44:	4a0e      	ldr	r2, [pc, #56]	; (8005f80 <cdcDataIn+0x4c>)
 8005f46:	6812      	ldr	r2, [r2, #0]
 8005f48:	fbb3 f1f2 	udiv	r1, r3, r2
 8005f4c:	fb01 f202 	mul.w	r2, r1, r2
 8005f50:	1a9b      	subs	r3, r3, r2
 8005f52:	60fb      	str	r3, [r7, #12]
	rx_buf[rx_in] = rx_data;
 8005f54:	4b09      	ldr	r3, [pc, #36]	; (8005f7c <cdcDataIn+0x48>)
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	490a      	ldr	r1, [pc, #40]	; (8005f84 <cdcDataIn+0x50>)
 8005f5a:	79fa      	ldrb	r2, [r7, #7]
 8005f5c:	54ca      	strb	r2, [r1, r3]
	if(next_rx_in != rx_out)
 8005f5e:	4b0a      	ldr	r3, [pc, #40]	; (8005f88 <cdcDataIn+0x54>)
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	68fa      	ldr	r2, [r7, #12]
 8005f64:	429a      	cmp	r2, r3
 8005f66:	d002      	beq.n	8005f6e <cdcDataIn+0x3a>
	{
		rx_in = next_rx_in;
 8005f68:	4a04      	ldr	r2, [pc, #16]	; (8005f7c <cdcDataIn+0x48>)
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	6013      	str	r3, [r2, #0]
	}
}
 8005f6e:	bf00      	nop
 8005f70:	3714      	adds	r7, #20
 8005f72:	46bd      	mov	sp, r7
 8005f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f78:	4770      	bx	lr
 8005f7a:	bf00      	nop
 8005f7c:	20000510 	.word	0x20000510
 8005f80:	20000148 	.word	0x20000148
 8005f84:	20000518 	.word	0x20000518
 8005f88:	20000514 	.word	0x20000514

08005f8c <cdcWrite>:
uint32_t cdcWrite(uint8_t *pData, uint32_t length)
{
 8005f8c:	b580      	push	{r7, lr}
 8005f8e:	b084      	sub	sp, #16
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	6078      	str	r0, [r7, #4]
 8005f94:	6039      	str	r1, [r7, #0]
	uint32_t pre_time;
	uint8_t ret;

	pre_time = millis();
 8005f96:	f7fa fbb4 	bl	8000702 <millis>
 8005f9a:	60f8      	str	r0, [r7, #12]
	while(1)
	{
		ret = CDC_Transmit_FS(pData, length);
 8005f9c:	683b      	ldr	r3, [r7, #0]
 8005f9e:	b29b      	uxth	r3, r3
 8005fa0:	4619      	mov	r1, r3
 8005fa2:	6878      	ldr	r0, [r7, #4]
 8005fa4:	f000 f922 	bl	80061ec <CDC_Transmit_FS>
 8005fa8:	4603      	mov	r3, r0
 8005faa:	72fb      	strb	r3, [r7, #11]

		if(ret == USBD_OK)
 8005fac:	7afb      	ldrb	r3, [r7, #11]
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d101      	bne.n	8005fb6 <cdcWrite+0x2a>
		{
			return length;
 8005fb2:	683b      	ldr	r3, [r7, #0]
 8005fb4:	e00e      	b.n	8005fd4 <cdcWrite+0x48>
		}
		else if(ret == USBD_FAIL)
 8005fb6:	7afb      	ldrb	r3, [r7, #11]
 8005fb8:	2b03      	cmp	r3, #3
 8005fba:	d101      	bne.n	8005fc0 <cdcWrite+0x34>
		{
			return 0;
 8005fbc:	2300      	movs	r3, #0
 8005fbe:	e009      	b.n	8005fd4 <cdcWrite+0x48>
		}

		if(millis() - pre_time >= 100)
 8005fc0:	f7fa fb9f 	bl	8000702 <millis>
 8005fc4:	4602      	mov	r2, r0
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	1ad3      	subs	r3, r2, r3
 8005fca:	2b63      	cmp	r3, #99	; 0x63
 8005fcc:	d800      	bhi.n	8005fd0 <cdcWrite+0x44>
		ret = CDC_Transmit_FS(pData, length);
 8005fce:	e7e5      	b.n	8005f9c <cdcWrite+0x10>
		{
			break;
 8005fd0:	bf00      	nop
		}

	}
	return 0;
 8005fd2:	2300      	movs	r3, #0
}
 8005fd4:	4618      	mov	r0, r3
 8005fd6:	3710      	adds	r7, #16
 8005fd8:	46bd      	mov	sp, r7
 8005fda:	bd80      	pop	{r7, pc}

08005fdc <cdcGetBaud>:
uint32_t cdcGetBaud(void)
{
 8005fdc:	b480      	push	{r7}
 8005fde:	af00      	add	r7, sp, #0
	return LineCoding.bitrate;
 8005fe0:	4b03      	ldr	r3, [pc, #12]	; (8005ff0 <cdcGetBaud+0x14>)
 8005fe2:	681b      	ldr	r3, [r3, #0]
}
 8005fe4:	4618      	mov	r0, r3
 8005fe6:	46bd      	mov	sp, r7
 8005fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fec:	4770      	bx	lr
 8005fee:	bf00      	nop
 8005ff0:	20000140 	.word	0x20000140

08005ff4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8005ff4:	b580      	push	{r7, lr}
 8005ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8005ff8:	2200      	movs	r2, #0
 8005ffa:	4905      	ldr	r1, [pc, #20]	; (8006010 <CDC_Init_FS+0x1c>)
 8005ffc:	4805      	ldr	r0, [pc, #20]	; (8006014 <CDC_Init_FS+0x20>)
 8005ffe:	f7fe fd26 	bl	8004a4e <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8006002:	4905      	ldr	r1, [pc, #20]	; (8006018 <CDC_Init_FS+0x24>)
 8006004:	4803      	ldr	r0, [pc, #12]	; (8006014 <CDC_Init_FS+0x20>)
 8006006:	f7fe fd40 	bl	8004a8a <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800600a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800600c:	4618      	mov	r0, r3
 800600e:	bd80      	pop	{r7, pc}
 8006010:	20000b18 	.word	0x20000b18
 8006014:	20000240 	.word	0x20000240
 8006018:	20000718 	.word	0x20000718

0800601c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800601c:	b480      	push	{r7}
 800601e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8006020:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8006022:	4618      	mov	r0, r3
 8006024:	46bd      	mov	sp, r7
 8006026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602a:	4770      	bx	lr

0800602c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800602c:	b480      	push	{r7}
 800602e:	b083      	sub	sp, #12
 8006030:	af00      	add	r7, sp, #0
 8006032:	4603      	mov	r3, r0
 8006034:	6039      	str	r1, [r7, #0]
 8006036:	71fb      	strb	r3, [r7, #7]
 8006038:	4613      	mov	r3, r2
 800603a:	80bb      	strh	r3, [r7, #4]
	//...Repository\STM32Cube_FW_F4_V1.26.2\Projects\STM32446E_EVAL\Applications\USB_Device\src\usbd_cdc_interface.c 참고
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800603c:	79fb      	ldrb	r3, [r7, #7]
 800603e:	2b23      	cmp	r3, #35	; 0x23
 8006040:	f200 80a3 	bhi.w	800618a <CDC_Control_FS+0x15e>
 8006044:	a201      	add	r2, pc, #4	; (adr r2, 800604c <CDC_Control_FS+0x20>)
 8006046:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800604a:	bf00      	nop
 800604c:	0800618b 	.word	0x0800618b
 8006050:	0800618b 	.word	0x0800618b
 8006054:	0800618b 	.word	0x0800618b
 8006058:	0800618b 	.word	0x0800618b
 800605c:	0800618b 	.word	0x0800618b
 8006060:	0800618b 	.word	0x0800618b
 8006064:	0800618b 	.word	0x0800618b
 8006068:	0800618b 	.word	0x0800618b
 800606c:	0800618b 	.word	0x0800618b
 8006070:	0800618b 	.word	0x0800618b
 8006074:	0800618b 	.word	0x0800618b
 8006078:	0800618b 	.word	0x0800618b
 800607c:	0800618b 	.word	0x0800618b
 8006080:	0800618b 	.word	0x0800618b
 8006084:	0800618b 	.word	0x0800618b
 8006088:	0800618b 	.word	0x0800618b
 800608c:	0800618b 	.word	0x0800618b
 8006090:	0800618b 	.word	0x0800618b
 8006094:	0800618b 	.word	0x0800618b
 8006098:	0800618b 	.word	0x0800618b
 800609c:	0800618b 	.word	0x0800618b
 80060a0:	0800618b 	.word	0x0800618b
 80060a4:	0800618b 	.word	0x0800618b
 80060a8:	0800618b 	.word	0x0800618b
 80060ac:	0800618b 	.word	0x0800618b
 80060b0:	0800618b 	.word	0x0800618b
 80060b4:	0800618b 	.word	0x0800618b
 80060b8:	0800618b 	.word	0x0800618b
 80060bc:	0800618b 	.word	0x0800618b
 80060c0:	0800618b 	.word	0x0800618b
 80060c4:	0800618b 	.word	0x0800618b
 80060c8:	0800618b 	.word	0x0800618b
 80060cc:	080060dd 	.word	0x080060dd
 80060d0:	08006137 	.word	0x08006137
 80060d4:	0800618b 	.word	0x0800618b
 80060d8:	0800618b 	.word	0x0800618b
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING: // MCU로 데이터를 set
    	LineCoding.bitrate 		 = (uint32_t)(pbuf[0]);
 80060dc:	683b      	ldr	r3, [r7, #0]
 80060de:	781b      	ldrb	r3, [r3, #0]
 80060e0:	461a      	mov	r2, r3
 80060e2:	4b2e      	ldr	r3, [pc, #184]	; (800619c <CDC_Control_FS+0x170>)
 80060e4:	601a      	str	r2, [r3, #0]
    	LineCoding.bitrate 		|= (uint32_t)(pbuf[1]) << 8;
 80060e6:	4b2d      	ldr	r3, [pc, #180]	; (800619c <CDC_Control_FS+0x170>)
 80060e8:	681a      	ldr	r2, [r3, #0]
 80060ea:	683b      	ldr	r3, [r7, #0]
 80060ec:	3301      	adds	r3, #1
 80060ee:	781b      	ldrb	r3, [r3, #0]
 80060f0:	021b      	lsls	r3, r3, #8
 80060f2:	4313      	orrs	r3, r2
 80060f4:	4a29      	ldr	r2, [pc, #164]	; (800619c <CDC_Control_FS+0x170>)
 80060f6:	6013      	str	r3, [r2, #0]
    	LineCoding.bitrate 		|= (uint32_t)(pbuf[2]) << 16;
 80060f8:	4b28      	ldr	r3, [pc, #160]	; (800619c <CDC_Control_FS+0x170>)
 80060fa:	681a      	ldr	r2, [r3, #0]
 80060fc:	683b      	ldr	r3, [r7, #0]
 80060fe:	3302      	adds	r3, #2
 8006100:	781b      	ldrb	r3, [r3, #0]
 8006102:	041b      	lsls	r3, r3, #16
 8006104:	4313      	orrs	r3, r2
 8006106:	4a25      	ldr	r2, [pc, #148]	; (800619c <CDC_Control_FS+0x170>)
 8006108:	6013      	str	r3, [r2, #0]
    	LineCoding.bitrate 		|= (uint32_t)(pbuf[3]) << 24;
 800610a:	4b24      	ldr	r3, [pc, #144]	; (800619c <CDC_Control_FS+0x170>)
 800610c:	681a      	ldr	r2, [r3, #0]
 800610e:	683b      	ldr	r3, [r7, #0]
 8006110:	3303      	adds	r3, #3
 8006112:	781b      	ldrb	r3, [r3, #0]
 8006114:	061b      	lsls	r3, r3, #24
 8006116:	4313      	orrs	r3, r2
 8006118:	4a20      	ldr	r2, [pc, #128]	; (800619c <CDC_Control_FS+0x170>)
 800611a:	6013      	str	r3, [r2, #0]
    	LineCoding.format 		 = pbuf[4];
 800611c:	683b      	ldr	r3, [r7, #0]
 800611e:	791a      	ldrb	r2, [r3, #4]
 8006120:	4b1e      	ldr	r3, [pc, #120]	; (800619c <CDC_Control_FS+0x170>)
 8006122:	711a      	strb	r2, [r3, #4]
    	LineCoding.paritytype  = pbuf[5];
 8006124:	683b      	ldr	r3, [r7, #0]
 8006126:	795a      	ldrb	r2, [r3, #5]
 8006128:	4b1c      	ldr	r3, [pc, #112]	; (800619c <CDC_Control_FS+0x170>)
 800612a:	715a      	strb	r2, [r3, #5]
    	LineCoding.datatype 	 = pbuf[6];
 800612c:	683b      	ldr	r3, [r7, #0]
 800612e:	799a      	ldrb	r2, [r3, #6]
 8006130:	4b1a      	ldr	r3, [pc, #104]	; (800619c <CDC_Control_FS+0x170>)
 8006132:	719a      	strb	r2, [r3, #6]
    break;
 8006134:	e02a      	b.n	800618c <CDC_Control_FS+0x160>

    case CDC_GET_LINE_CODING: // PC로 데이터를 올려줌
    	pbuf[0] = (uint8_t)(LineCoding.bitrate);
 8006136:	4b19      	ldr	r3, [pc, #100]	; (800619c <CDC_Control_FS+0x170>)
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	b2da      	uxtb	r2, r3
 800613c:	683b      	ldr	r3, [r7, #0]
 800613e:	701a      	strb	r2, [r3, #0]
    	pbuf[1] = (uint8_t)(LineCoding.bitrate >> 8);
 8006140:	4b16      	ldr	r3, [pc, #88]	; (800619c <CDC_Control_FS+0x170>)
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	0a1a      	lsrs	r2, r3, #8
 8006146:	683b      	ldr	r3, [r7, #0]
 8006148:	3301      	adds	r3, #1
 800614a:	b2d2      	uxtb	r2, r2
 800614c:	701a      	strb	r2, [r3, #0]
    	pbuf[2] = (uint8_t)(LineCoding.bitrate >> 16);
 800614e:	4b13      	ldr	r3, [pc, #76]	; (800619c <CDC_Control_FS+0x170>)
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	0c1a      	lsrs	r2, r3, #16
 8006154:	683b      	ldr	r3, [r7, #0]
 8006156:	3302      	adds	r3, #2
 8006158:	b2d2      	uxtb	r2, r2
 800615a:	701a      	strb	r2, [r3, #0]
    	pbuf[3] = (uint8_t)(LineCoding.bitrate >> 24);
 800615c:	4b0f      	ldr	r3, [pc, #60]	; (800619c <CDC_Control_FS+0x170>)
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	0e1a      	lsrs	r2, r3, #24
 8006162:	683b      	ldr	r3, [r7, #0]
 8006164:	3303      	adds	r3, #3
 8006166:	b2d2      	uxtb	r2, r2
 8006168:	701a      	strb	r2, [r3, #0]
    	pbuf[4] = LineCoding.format;
 800616a:	683b      	ldr	r3, [r7, #0]
 800616c:	3304      	adds	r3, #4
 800616e:	4a0b      	ldr	r2, [pc, #44]	; (800619c <CDC_Control_FS+0x170>)
 8006170:	7912      	ldrb	r2, [r2, #4]
 8006172:	701a      	strb	r2, [r3, #0]
    	pbuf[5] = LineCoding.paritytype;
 8006174:	683b      	ldr	r3, [r7, #0]
 8006176:	3305      	adds	r3, #5
 8006178:	4a08      	ldr	r2, [pc, #32]	; (800619c <CDC_Control_FS+0x170>)
 800617a:	7952      	ldrb	r2, [r2, #5]
 800617c:	701a      	strb	r2, [r3, #0]
    	pbuf[6] = LineCoding.datatype;
 800617e:	683b      	ldr	r3, [r7, #0]
 8006180:	3306      	adds	r3, #6
 8006182:	4a06      	ldr	r2, [pc, #24]	; (800619c <CDC_Control_FS+0x170>)
 8006184:	7992      	ldrb	r2, [r2, #6]
 8006186:	701a      	strb	r2, [r3, #0]
    break;
 8006188:	e000      	b.n	800618c <CDC_Control_FS+0x160>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800618a:	bf00      	nop
  }

  return (USBD_OK);
 800618c:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800618e:	4618      	mov	r0, r3
 8006190:	370c      	adds	r7, #12
 8006192:	46bd      	mov	sp, r7
 8006194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006198:	4770      	bx	lr
 800619a:	bf00      	nop
 800619c:	20000140 	.word	0x20000140

080061a0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80061a0:	b580      	push	{r7, lr}
 80061a2:	b084      	sub	sp, #16
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	6078      	str	r0, [r7, #4]
 80061a8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80061aa:	6879      	ldr	r1, [r7, #4]
 80061ac:	480e      	ldr	r0, [pc, #56]	; (80061e8 <CDC_Receive_FS+0x48>)
 80061ae:	f7fe fc6c 	bl	8004a8a <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80061b2:	480d      	ldr	r0, [pc, #52]	; (80061e8 <CDC_Receive_FS+0x48>)
 80061b4:	f7fe fcb2 	bl	8004b1c <USBD_CDC_ReceivePacket>

  for(int i = 0 ; i < *Len ; i++)
 80061b8:	2300      	movs	r3, #0
 80061ba:	60fb      	str	r3, [r7, #12]
 80061bc:	e009      	b.n	80061d2 <CDC_Receive_FS+0x32>
  {
  	cdcDataIn(Buf[i]);// ?��?��?��?�� 발생?�� data in
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	687a      	ldr	r2, [r7, #4]
 80061c2:	4413      	add	r3, r2
 80061c4:	781b      	ldrb	r3, [r3, #0]
 80061c6:	4618      	mov	r0, r3
 80061c8:	f7ff feb4 	bl	8005f34 <cdcDataIn>
  for(int i = 0 ; i < *Len ; i++)
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	3301      	adds	r3, #1
 80061d0:	60fb      	str	r3, [r7, #12]
 80061d2:	683b      	ldr	r3, [r7, #0]
 80061d4:	681a      	ldr	r2, [r3, #0]
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	429a      	cmp	r2, r3
 80061da:	d8f0      	bhi.n	80061be <CDC_Receive_FS+0x1e>
  }
  return (USBD_OK);
 80061dc:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80061de:	4618      	mov	r0, r3
 80061e0:	3710      	adds	r7, #16
 80061e2:	46bd      	mov	sp, r7
 80061e4:	bd80      	pop	{r7, pc}
 80061e6:	bf00      	nop
 80061e8:	20000240 	.word	0x20000240

080061ec <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80061ec:	b580      	push	{r7, lr}
 80061ee:	b084      	sub	sp, #16
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	6078      	str	r0, [r7, #4]
 80061f4:	460b      	mov	r3, r1
 80061f6:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80061f8:	2300      	movs	r3, #0
 80061fa:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80061fc:	4b0d      	ldr	r3, [pc, #52]	; (8006234 <CDC_Transmit_FS+0x48>)
 80061fe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006202:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8006204:	68bb      	ldr	r3, [r7, #8]
 8006206:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800620a:	2b00      	cmp	r3, #0
 800620c:	d001      	beq.n	8006212 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800620e:	2301      	movs	r3, #1
 8006210:	e00b      	b.n	800622a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8006212:	887b      	ldrh	r3, [r7, #2]
 8006214:	461a      	mov	r2, r3
 8006216:	6879      	ldr	r1, [r7, #4]
 8006218:	4806      	ldr	r0, [pc, #24]	; (8006234 <CDC_Transmit_FS+0x48>)
 800621a:	f7fe fc18 	bl	8004a4e <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800621e:	4805      	ldr	r0, [pc, #20]	; (8006234 <CDC_Transmit_FS+0x48>)
 8006220:	f7fe fc4c 	bl	8004abc <USBD_CDC_TransmitPacket>
 8006224:	4603      	mov	r3, r0
 8006226:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8006228:	7bfb      	ldrb	r3, [r7, #15]
}
 800622a:	4618      	mov	r0, r3
 800622c:	3710      	adds	r7, #16
 800622e:	46bd      	mov	sp, r7
 8006230:	bd80      	pop	{r7, pc}
 8006232:	bf00      	nop
 8006234:	20000240 	.word	0x20000240

08006238 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8006238:	b480      	push	{r7}
 800623a:	b087      	sub	sp, #28
 800623c:	af00      	add	r7, sp, #0
 800623e:	60f8      	str	r0, [r7, #12]
 8006240:	60b9      	str	r1, [r7, #8]
 8006242:	4613      	mov	r3, r2
 8006244:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8006246:	2300      	movs	r3, #0
 8006248:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800624a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800624e:	4618      	mov	r0, r3
 8006250:	371c      	adds	r7, #28
 8006252:	46bd      	mov	sp, r7
 8006254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006258:	4770      	bx	lr
	...

0800625c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800625c:	b480      	push	{r7}
 800625e:	b083      	sub	sp, #12
 8006260:	af00      	add	r7, sp, #0
 8006262:	4603      	mov	r3, r0
 8006264:	6039      	str	r1, [r7, #0]
 8006266:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8006268:	683b      	ldr	r3, [r7, #0]
 800626a:	2212      	movs	r2, #18
 800626c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800626e:	4b03      	ldr	r3, [pc, #12]	; (800627c <USBD_FS_DeviceDescriptor+0x20>)
}
 8006270:	4618      	mov	r0, r3
 8006272:	370c      	adds	r7, #12
 8006274:	46bd      	mov	sp, r7
 8006276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800627a:	4770      	bx	lr
 800627c:	2000017c 	.word	0x2000017c

08006280 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006280:	b480      	push	{r7}
 8006282:	b083      	sub	sp, #12
 8006284:	af00      	add	r7, sp, #0
 8006286:	4603      	mov	r3, r0
 8006288:	6039      	str	r1, [r7, #0]
 800628a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800628c:	683b      	ldr	r3, [r7, #0]
 800628e:	2204      	movs	r2, #4
 8006290:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8006292:	4b03      	ldr	r3, [pc, #12]	; (80062a0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8006294:	4618      	mov	r0, r3
 8006296:	370c      	adds	r7, #12
 8006298:	46bd      	mov	sp, r7
 800629a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800629e:	4770      	bx	lr
 80062a0:	20000190 	.word	0x20000190

080062a4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80062a4:	b580      	push	{r7, lr}
 80062a6:	b082      	sub	sp, #8
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	4603      	mov	r3, r0
 80062ac:	6039      	str	r1, [r7, #0]
 80062ae:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80062b0:	79fb      	ldrb	r3, [r7, #7]
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d105      	bne.n	80062c2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80062b6:	683a      	ldr	r2, [r7, #0]
 80062b8:	4907      	ldr	r1, [pc, #28]	; (80062d8 <USBD_FS_ProductStrDescriptor+0x34>)
 80062ba:	4808      	ldr	r0, [pc, #32]	; (80062dc <USBD_FS_ProductStrDescriptor+0x38>)
 80062bc:	f7ff fce1 	bl	8005c82 <USBD_GetString>
 80062c0:	e004      	b.n	80062cc <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80062c2:	683a      	ldr	r2, [r7, #0]
 80062c4:	4904      	ldr	r1, [pc, #16]	; (80062d8 <USBD_FS_ProductStrDescriptor+0x34>)
 80062c6:	4805      	ldr	r0, [pc, #20]	; (80062dc <USBD_FS_ProductStrDescriptor+0x38>)
 80062c8:	f7ff fcdb 	bl	8005c82 <USBD_GetString>
  }
  return USBD_StrDesc;
 80062cc:	4b02      	ldr	r3, [pc, #8]	; (80062d8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80062ce:	4618      	mov	r0, r3
 80062d0:	3708      	adds	r7, #8
 80062d2:	46bd      	mov	sp, r7
 80062d4:	bd80      	pop	{r7, pc}
 80062d6:	bf00      	nop
 80062d8:	20000f18 	.word	0x20000f18
 80062dc:	08007464 	.word	0x08007464

080062e0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80062e0:	b580      	push	{r7, lr}
 80062e2:	b082      	sub	sp, #8
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	4603      	mov	r3, r0
 80062e8:	6039      	str	r1, [r7, #0]
 80062ea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80062ec:	683a      	ldr	r2, [r7, #0]
 80062ee:	4904      	ldr	r1, [pc, #16]	; (8006300 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80062f0:	4804      	ldr	r0, [pc, #16]	; (8006304 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80062f2:	f7ff fcc6 	bl	8005c82 <USBD_GetString>
  return USBD_StrDesc;
 80062f6:	4b02      	ldr	r3, [pc, #8]	; (8006300 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80062f8:	4618      	mov	r0, r3
 80062fa:	3708      	adds	r7, #8
 80062fc:	46bd      	mov	sp, r7
 80062fe:	bd80      	pop	{r7, pc}
 8006300:	20000f18 	.word	0x20000f18
 8006304:	0800747c 	.word	0x0800747c

08006308 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006308:	b580      	push	{r7, lr}
 800630a:	b082      	sub	sp, #8
 800630c:	af00      	add	r7, sp, #0
 800630e:	4603      	mov	r3, r0
 8006310:	6039      	str	r1, [r7, #0]
 8006312:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8006314:	683b      	ldr	r3, [r7, #0]
 8006316:	221a      	movs	r2, #26
 8006318:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800631a:	f000 f843 	bl	80063a4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800631e:	4b02      	ldr	r3, [pc, #8]	; (8006328 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8006320:	4618      	mov	r0, r3
 8006322:	3708      	adds	r7, #8
 8006324:	46bd      	mov	sp, r7
 8006326:	bd80      	pop	{r7, pc}
 8006328:	20000194 	.word	0x20000194

0800632c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800632c:	b580      	push	{r7, lr}
 800632e:	b082      	sub	sp, #8
 8006330:	af00      	add	r7, sp, #0
 8006332:	4603      	mov	r3, r0
 8006334:	6039      	str	r1, [r7, #0]
 8006336:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8006338:	79fb      	ldrb	r3, [r7, #7]
 800633a:	2b00      	cmp	r3, #0
 800633c:	d105      	bne.n	800634a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800633e:	683a      	ldr	r2, [r7, #0]
 8006340:	4907      	ldr	r1, [pc, #28]	; (8006360 <USBD_FS_ConfigStrDescriptor+0x34>)
 8006342:	4808      	ldr	r0, [pc, #32]	; (8006364 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006344:	f7ff fc9d 	bl	8005c82 <USBD_GetString>
 8006348:	e004      	b.n	8006354 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800634a:	683a      	ldr	r2, [r7, #0]
 800634c:	4904      	ldr	r1, [pc, #16]	; (8006360 <USBD_FS_ConfigStrDescriptor+0x34>)
 800634e:	4805      	ldr	r0, [pc, #20]	; (8006364 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006350:	f7ff fc97 	bl	8005c82 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006354:	4b02      	ldr	r3, [pc, #8]	; (8006360 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8006356:	4618      	mov	r0, r3
 8006358:	3708      	adds	r7, #8
 800635a:	46bd      	mov	sp, r7
 800635c:	bd80      	pop	{r7, pc}
 800635e:	bf00      	nop
 8006360:	20000f18 	.word	0x20000f18
 8006364:	08007490 	.word	0x08007490

08006368 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006368:	b580      	push	{r7, lr}
 800636a:	b082      	sub	sp, #8
 800636c:	af00      	add	r7, sp, #0
 800636e:	4603      	mov	r3, r0
 8006370:	6039      	str	r1, [r7, #0]
 8006372:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006374:	79fb      	ldrb	r3, [r7, #7]
 8006376:	2b00      	cmp	r3, #0
 8006378:	d105      	bne.n	8006386 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800637a:	683a      	ldr	r2, [r7, #0]
 800637c:	4907      	ldr	r1, [pc, #28]	; (800639c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800637e:	4808      	ldr	r0, [pc, #32]	; (80063a0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006380:	f7ff fc7f 	bl	8005c82 <USBD_GetString>
 8006384:	e004      	b.n	8006390 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006386:	683a      	ldr	r2, [r7, #0]
 8006388:	4904      	ldr	r1, [pc, #16]	; (800639c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800638a:	4805      	ldr	r0, [pc, #20]	; (80063a0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800638c:	f7ff fc79 	bl	8005c82 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006390:	4b02      	ldr	r3, [pc, #8]	; (800639c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8006392:	4618      	mov	r0, r3
 8006394:	3708      	adds	r7, #8
 8006396:	46bd      	mov	sp, r7
 8006398:	bd80      	pop	{r7, pc}
 800639a:	bf00      	nop
 800639c:	20000f18 	.word	0x20000f18
 80063a0:	0800749c 	.word	0x0800749c

080063a4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80063a4:	b580      	push	{r7, lr}
 80063a6:	b084      	sub	sp, #16
 80063a8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80063aa:	4b0f      	ldr	r3, [pc, #60]	; (80063e8 <Get_SerialNum+0x44>)
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80063b0:	4b0e      	ldr	r3, [pc, #56]	; (80063ec <Get_SerialNum+0x48>)
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80063b6:	4b0e      	ldr	r3, [pc, #56]	; (80063f0 <Get_SerialNum+0x4c>)
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80063bc:	68fa      	ldr	r2, [r7, #12]
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	4413      	add	r3, r2
 80063c2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d009      	beq.n	80063de <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80063ca:	2208      	movs	r2, #8
 80063cc:	4909      	ldr	r1, [pc, #36]	; (80063f4 <Get_SerialNum+0x50>)
 80063ce:	68f8      	ldr	r0, [r7, #12]
 80063d0:	f000 f814 	bl	80063fc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80063d4:	2204      	movs	r2, #4
 80063d6:	4908      	ldr	r1, [pc, #32]	; (80063f8 <Get_SerialNum+0x54>)
 80063d8:	68b8      	ldr	r0, [r7, #8]
 80063da:	f000 f80f 	bl	80063fc <IntToUnicode>
  }
}
 80063de:	bf00      	nop
 80063e0:	3710      	adds	r7, #16
 80063e2:	46bd      	mov	sp, r7
 80063e4:	bd80      	pop	{r7, pc}
 80063e6:	bf00      	nop
 80063e8:	1fff7a10 	.word	0x1fff7a10
 80063ec:	1fff7a14 	.word	0x1fff7a14
 80063f0:	1fff7a18 	.word	0x1fff7a18
 80063f4:	20000196 	.word	0x20000196
 80063f8:	200001a6 	.word	0x200001a6

080063fc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80063fc:	b480      	push	{r7}
 80063fe:	b087      	sub	sp, #28
 8006400:	af00      	add	r7, sp, #0
 8006402:	60f8      	str	r0, [r7, #12]
 8006404:	60b9      	str	r1, [r7, #8]
 8006406:	4613      	mov	r3, r2
 8006408:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800640a:	2300      	movs	r3, #0
 800640c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800640e:	2300      	movs	r3, #0
 8006410:	75fb      	strb	r3, [r7, #23]
 8006412:	e027      	b.n	8006464 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	0f1b      	lsrs	r3, r3, #28
 8006418:	2b09      	cmp	r3, #9
 800641a:	d80b      	bhi.n	8006434 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	0f1b      	lsrs	r3, r3, #28
 8006420:	b2da      	uxtb	r2, r3
 8006422:	7dfb      	ldrb	r3, [r7, #23]
 8006424:	005b      	lsls	r3, r3, #1
 8006426:	4619      	mov	r1, r3
 8006428:	68bb      	ldr	r3, [r7, #8]
 800642a:	440b      	add	r3, r1
 800642c:	3230      	adds	r2, #48	; 0x30
 800642e:	b2d2      	uxtb	r2, r2
 8006430:	701a      	strb	r2, [r3, #0]
 8006432:	e00a      	b.n	800644a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	0f1b      	lsrs	r3, r3, #28
 8006438:	b2da      	uxtb	r2, r3
 800643a:	7dfb      	ldrb	r3, [r7, #23]
 800643c:	005b      	lsls	r3, r3, #1
 800643e:	4619      	mov	r1, r3
 8006440:	68bb      	ldr	r3, [r7, #8]
 8006442:	440b      	add	r3, r1
 8006444:	3237      	adds	r2, #55	; 0x37
 8006446:	b2d2      	uxtb	r2, r2
 8006448:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	011b      	lsls	r3, r3, #4
 800644e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8006450:	7dfb      	ldrb	r3, [r7, #23]
 8006452:	005b      	lsls	r3, r3, #1
 8006454:	3301      	adds	r3, #1
 8006456:	68ba      	ldr	r2, [r7, #8]
 8006458:	4413      	add	r3, r2
 800645a:	2200      	movs	r2, #0
 800645c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800645e:	7dfb      	ldrb	r3, [r7, #23]
 8006460:	3301      	adds	r3, #1
 8006462:	75fb      	strb	r3, [r7, #23]
 8006464:	7dfa      	ldrb	r2, [r7, #23]
 8006466:	79fb      	ldrb	r3, [r7, #7]
 8006468:	429a      	cmp	r2, r3
 800646a:	d3d3      	bcc.n	8006414 <IntToUnicode+0x18>
  }
}
 800646c:	bf00      	nop
 800646e:	bf00      	nop
 8006470:	371c      	adds	r7, #28
 8006472:	46bd      	mov	sp, r7
 8006474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006478:	4770      	bx	lr
	...

0800647c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800647c:	b580      	push	{r7, lr}
 800647e:	b08a      	sub	sp, #40	; 0x28
 8006480:	af00      	add	r7, sp, #0
 8006482:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006484:	f107 0314 	add.w	r3, r7, #20
 8006488:	2200      	movs	r2, #0
 800648a:	601a      	str	r2, [r3, #0]
 800648c:	605a      	str	r2, [r3, #4]
 800648e:	609a      	str	r2, [r3, #8]
 8006490:	60da      	str	r2, [r3, #12]
 8006492:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800649c:	d13a      	bne.n	8006514 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800649e:	2300      	movs	r3, #0
 80064a0:	613b      	str	r3, [r7, #16]
 80064a2:	4b1e      	ldr	r3, [pc, #120]	; (800651c <HAL_PCD_MspInit+0xa0>)
 80064a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064a6:	4a1d      	ldr	r2, [pc, #116]	; (800651c <HAL_PCD_MspInit+0xa0>)
 80064a8:	f043 0301 	orr.w	r3, r3, #1
 80064ac:	6313      	str	r3, [r2, #48]	; 0x30
 80064ae:	4b1b      	ldr	r3, [pc, #108]	; (800651c <HAL_PCD_MspInit+0xa0>)
 80064b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064b2:	f003 0301 	and.w	r3, r3, #1
 80064b6:	613b      	str	r3, [r7, #16]
 80064b8:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80064ba:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80064be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80064c0:	2302      	movs	r3, #2
 80064c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80064c4:	2300      	movs	r3, #0
 80064c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80064c8:	2303      	movs	r3, #3
 80064ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80064cc:	230a      	movs	r3, #10
 80064ce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80064d0:	f107 0314 	add.w	r3, r7, #20
 80064d4:	4619      	mov	r1, r3
 80064d6:	4812      	ldr	r0, [pc, #72]	; (8006520 <HAL_PCD_MspInit+0xa4>)
 80064d8:	f7fa fd40 	bl	8000f5c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80064dc:	4b0f      	ldr	r3, [pc, #60]	; (800651c <HAL_PCD_MspInit+0xa0>)
 80064de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064e0:	4a0e      	ldr	r2, [pc, #56]	; (800651c <HAL_PCD_MspInit+0xa0>)
 80064e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80064e6:	6353      	str	r3, [r2, #52]	; 0x34
 80064e8:	2300      	movs	r3, #0
 80064ea:	60fb      	str	r3, [r7, #12]
 80064ec:	4b0b      	ldr	r3, [pc, #44]	; (800651c <HAL_PCD_MspInit+0xa0>)
 80064ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064f0:	4a0a      	ldr	r2, [pc, #40]	; (800651c <HAL_PCD_MspInit+0xa0>)
 80064f2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80064f6:	6453      	str	r3, [r2, #68]	; 0x44
 80064f8:	4b08      	ldr	r3, [pc, #32]	; (800651c <HAL_PCD_MspInit+0xa0>)
 80064fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006500:	60fb      	str	r3, [r7, #12]
 8006502:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8006504:	2200      	movs	r2, #0
 8006506:	2100      	movs	r1, #0
 8006508:	2043      	movs	r0, #67	; 0x43
 800650a:	f7fa fcf0 	bl	8000eee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800650e:	2043      	movs	r0, #67	; 0x43
 8006510:	f7fa fd09 	bl	8000f26 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8006514:	bf00      	nop
 8006516:	3728      	adds	r7, #40	; 0x28
 8006518:	46bd      	mov	sp, r7
 800651a:	bd80      	pop	{r7, pc}
 800651c:	40023800 	.word	0x40023800
 8006520:	40020000 	.word	0x40020000

08006524 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006524:	b580      	push	{r7, lr}
 8006526:	b082      	sub	sp, #8
 8006528:	af00      	add	r7, sp, #0
 800652a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8006538:	4619      	mov	r1, r3
 800653a:	4610      	mov	r0, r2
 800653c:	f7fe fbba 	bl	8004cb4 <USBD_LL_SetupStage>
}
 8006540:	bf00      	nop
 8006542:	3708      	adds	r7, #8
 8006544:	46bd      	mov	sp, r7
 8006546:	bd80      	pop	{r7, pc}

08006548 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006548:	b580      	push	{r7, lr}
 800654a:	b082      	sub	sp, #8
 800654c:	af00      	add	r7, sp, #0
 800654e:	6078      	str	r0, [r7, #4]
 8006550:	460b      	mov	r3, r1
 8006552:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800655a:	78fa      	ldrb	r2, [r7, #3]
 800655c:	6879      	ldr	r1, [r7, #4]
 800655e:	4613      	mov	r3, r2
 8006560:	00db      	lsls	r3, r3, #3
 8006562:	1a9b      	subs	r3, r3, r2
 8006564:	009b      	lsls	r3, r3, #2
 8006566:	440b      	add	r3, r1
 8006568:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800656c:	681a      	ldr	r2, [r3, #0]
 800656e:	78fb      	ldrb	r3, [r7, #3]
 8006570:	4619      	mov	r1, r3
 8006572:	f7fe fbf4 	bl	8004d5e <USBD_LL_DataOutStage>
}
 8006576:	bf00      	nop
 8006578:	3708      	adds	r7, #8
 800657a:	46bd      	mov	sp, r7
 800657c:	bd80      	pop	{r7, pc}

0800657e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800657e:	b580      	push	{r7, lr}
 8006580:	b082      	sub	sp, #8
 8006582:	af00      	add	r7, sp, #0
 8006584:	6078      	str	r0, [r7, #4]
 8006586:	460b      	mov	r3, r1
 8006588:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8006590:	78fa      	ldrb	r2, [r7, #3]
 8006592:	6879      	ldr	r1, [r7, #4]
 8006594:	4613      	mov	r3, r2
 8006596:	00db      	lsls	r3, r3, #3
 8006598:	1a9b      	subs	r3, r3, r2
 800659a:	009b      	lsls	r3, r3, #2
 800659c:	440b      	add	r3, r1
 800659e:	3348      	adds	r3, #72	; 0x48
 80065a0:	681a      	ldr	r2, [r3, #0]
 80065a2:	78fb      	ldrb	r3, [r7, #3]
 80065a4:	4619      	mov	r1, r3
 80065a6:	f7fe fc3d 	bl	8004e24 <USBD_LL_DataInStage>
}
 80065aa:	bf00      	nop
 80065ac:	3708      	adds	r7, #8
 80065ae:	46bd      	mov	sp, r7
 80065b0:	bd80      	pop	{r7, pc}

080065b2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80065b2:	b580      	push	{r7, lr}
 80065b4:	b082      	sub	sp, #8
 80065b6:	af00      	add	r7, sp, #0
 80065b8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80065c0:	4618      	mov	r0, r3
 80065c2:	f7fe fd51 	bl	8005068 <USBD_LL_SOF>
}
 80065c6:	bf00      	nop
 80065c8:	3708      	adds	r7, #8
 80065ca:	46bd      	mov	sp, r7
 80065cc:	bd80      	pop	{r7, pc}

080065ce <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80065ce:	b580      	push	{r7, lr}
 80065d0:	b084      	sub	sp, #16
 80065d2:	af00      	add	r7, sp, #0
 80065d4:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80065d6:	2301      	movs	r3, #1
 80065d8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	68db      	ldr	r3, [r3, #12]
 80065de:	2b02      	cmp	r3, #2
 80065e0:	d001      	beq.n	80065e6 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80065e2:	f7fa f8fd 	bl	80007e0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80065ec:	7bfa      	ldrb	r2, [r7, #15]
 80065ee:	4611      	mov	r1, r2
 80065f0:	4618      	mov	r0, r3
 80065f2:	f7fe fcfb 	bl	8004fec <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80065fc:	4618      	mov	r0, r3
 80065fe:	f7fe fca7 	bl	8004f50 <USBD_LL_Reset>
}
 8006602:	bf00      	nop
 8006604:	3710      	adds	r7, #16
 8006606:	46bd      	mov	sp, r7
 8006608:	bd80      	pop	{r7, pc}
	...

0800660c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800660c:	b580      	push	{r7, lr}
 800660e:	b082      	sub	sp, #8
 8006610:	af00      	add	r7, sp, #0
 8006612:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800661a:	4618      	mov	r0, r3
 800661c:	f7fe fcf6 	bl	800500c <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	687a      	ldr	r2, [r7, #4]
 800662c:	6812      	ldr	r2, [r2, #0]
 800662e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006632:	f043 0301 	orr.w	r3, r3, #1
 8006636:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	6a1b      	ldr	r3, [r3, #32]
 800663c:	2b00      	cmp	r3, #0
 800663e:	d005      	beq.n	800664c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8006640:	4b04      	ldr	r3, [pc, #16]	; (8006654 <HAL_PCD_SuspendCallback+0x48>)
 8006642:	691b      	ldr	r3, [r3, #16]
 8006644:	4a03      	ldr	r2, [pc, #12]	; (8006654 <HAL_PCD_SuspendCallback+0x48>)
 8006646:	f043 0306 	orr.w	r3, r3, #6
 800664a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800664c:	bf00      	nop
 800664e:	3708      	adds	r7, #8
 8006650:	46bd      	mov	sp, r7
 8006652:	bd80      	pop	{r7, pc}
 8006654:	e000ed00 	.word	0xe000ed00

08006658 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006658:	b580      	push	{r7, lr}
 800665a:	b082      	sub	sp, #8
 800665c:	af00      	add	r7, sp, #0
 800665e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006666:	4618      	mov	r0, r3
 8006668:	f7fe fce6 	bl	8005038 <USBD_LL_Resume>
}
 800666c:	bf00      	nop
 800666e:	3708      	adds	r7, #8
 8006670:	46bd      	mov	sp, r7
 8006672:	bd80      	pop	{r7, pc}

08006674 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006674:	b580      	push	{r7, lr}
 8006676:	b082      	sub	sp, #8
 8006678:	af00      	add	r7, sp, #0
 800667a:	6078      	str	r0, [r7, #4]
 800667c:	460b      	mov	r3, r1
 800667e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006686:	78fa      	ldrb	r2, [r7, #3]
 8006688:	4611      	mov	r1, r2
 800668a:	4618      	mov	r0, r3
 800668c:	f7fe fd34 	bl	80050f8 <USBD_LL_IsoOUTIncomplete>
}
 8006690:	bf00      	nop
 8006692:	3708      	adds	r7, #8
 8006694:	46bd      	mov	sp, r7
 8006696:	bd80      	pop	{r7, pc}

08006698 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006698:	b580      	push	{r7, lr}
 800669a:	b082      	sub	sp, #8
 800669c:	af00      	add	r7, sp, #0
 800669e:	6078      	str	r0, [r7, #4]
 80066a0:	460b      	mov	r3, r1
 80066a2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80066aa:	78fa      	ldrb	r2, [r7, #3]
 80066ac:	4611      	mov	r1, r2
 80066ae:	4618      	mov	r0, r3
 80066b0:	f7fe fcfc 	bl	80050ac <USBD_LL_IsoINIncomplete>
}
 80066b4:	bf00      	nop
 80066b6:	3708      	adds	r7, #8
 80066b8:	46bd      	mov	sp, r7
 80066ba:	bd80      	pop	{r7, pc}

080066bc <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80066bc:	b580      	push	{r7, lr}
 80066be:	b082      	sub	sp, #8
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80066ca:	4618      	mov	r0, r3
 80066cc:	f7fe fd3a 	bl	8005144 <USBD_LL_DevConnected>
}
 80066d0:	bf00      	nop
 80066d2:	3708      	adds	r7, #8
 80066d4:	46bd      	mov	sp, r7
 80066d6:	bd80      	pop	{r7, pc}

080066d8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80066d8:	b580      	push	{r7, lr}
 80066da:	b082      	sub	sp, #8
 80066dc:	af00      	add	r7, sp, #0
 80066de:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80066e6:	4618      	mov	r0, r3
 80066e8:	f7fe fd37 	bl	800515a <USBD_LL_DevDisconnected>
}
 80066ec:	bf00      	nop
 80066ee:	3708      	adds	r7, #8
 80066f0:	46bd      	mov	sp, r7
 80066f2:	bd80      	pop	{r7, pc}

080066f4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80066f4:	b580      	push	{r7, lr}
 80066f6:	b082      	sub	sp, #8
 80066f8:	af00      	add	r7, sp, #0
 80066fa:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	781b      	ldrb	r3, [r3, #0]
 8006700:	2b00      	cmp	r3, #0
 8006702:	d13c      	bne.n	800677e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8006704:	4a20      	ldr	r2, [pc, #128]	; (8006788 <USBD_LL_Init+0x94>)
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	4a1e      	ldr	r2, [pc, #120]	; (8006788 <USBD_LL_Init+0x94>)
 8006710:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8006714:	4b1c      	ldr	r3, [pc, #112]	; (8006788 <USBD_LL_Init+0x94>)
 8006716:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800671a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800671c:	4b1a      	ldr	r3, [pc, #104]	; (8006788 <USBD_LL_Init+0x94>)
 800671e:	2204      	movs	r2, #4
 8006720:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8006722:	4b19      	ldr	r3, [pc, #100]	; (8006788 <USBD_LL_Init+0x94>)
 8006724:	2202      	movs	r2, #2
 8006726:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8006728:	4b17      	ldr	r3, [pc, #92]	; (8006788 <USBD_LL_Init+0x94>)
 800672a:	2200      	movs	r2, #0
 800672c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800672e:	4b16      	ldr	r3, [pc, #88]	; (8006788 <USBD_LL_Init+0x94>)
 8006730:	2202      	movs	r2, #2
 8006732:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8006734:	4b14      	ldr	r3, [pc, #80]	; (8006788 <USBD_LL_Init+0x94>)
 8006736:	2200      	movs	r2, #0
 8006738:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800673a:	4b13      	ldr	r3, [pc, #76]	; (8006788 <USBD_LL_Init+0x94>)
 800673c:	2200      	movs	r2, #0
 800673e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8006740:	4b11      	ldr	r3, [pc, #68]	; (8006788 <USBD_LL_Init+0x94>)
 8006742:	2200      	movs	r2, #0
 8006744:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8006746:	4b10      	ldr	r3, [pc, #64]	; (8006788 <USBD_LL_Init+0x94>)
 8006748:	2200      	movs	r2, #0
 800674a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800674c:	4b0e      	ldr	r3, [pc, #56]	; (8006788 <USBD_LL_Init+0x94>)
 800674e:	2200      	movs	r2, #0
 8006750:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8006752:	480d      	ldr	r0, [pc, #52]	; (8006788 <USBD_LL_Init+0x94>)
 8006754:	f7fa fdb9 	bl	80012ca <HAL_PCD_Init>
 8006758:	4603      	mov	r3, r0
 800675a:	2b00      	cmp	r3, #0
 800675c:	d001      	beq.n	8006762 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800675e:	f7fa f83f 	bl	80007e0 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8006762:	2180      	movs	r1, #128	; 0x80
 8006764:	4808      	ldr	r0, [pc, #32]	; (8006788 <USBD_LL_Init+0x94>)
 8006766:	f7fb ff16 	bl	8002596 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800676a:	2240      	movs	r2, #64	; 0x40
 800676c:	2100      	movs	r1, #0
 800676e:	4806      	ldr	r0, [pc, #24]	; (8006788 <USBD_LL_Init+0x94>)
 8006770:	f7fb feca 	bl	8002508 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8006774:	2280      	movs	r2, #128	; 0x80
 8006776:	2101      	movs	r1, #1
 8006778:	4803      	ldr	r0, [pc, #12]	; (8006788 <USBD_LL_Init+0x94>)
 800677a:	f7fb fec5 	bl	8002508 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800677e:	2300      	movs	r3, #0
}
 8006780:	4618      	mov	r0, r3
 8006782:	3708      	adds	r7, #8
 8006784:	46bd      	mov	sp, r7
 8006786:	bd80      	pop	{r7, pc}
 8006788:	20001118 	.word	0x20001118

0800678c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800678c:	b580      	push	{r7, lr}
 800678e:	b084      	sub	sp, #16
 8006790:	af00      	add	r7, sp, #0
 8006792:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006794:	2300      	movs	r3, #0
 8006796:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006798:	2300      	movs	r3, #0
 800679a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80067a2:	4618      	mov	r0, r3
 80067a4:	f7fa feae 	bl	8001504 <HAL_PCD_Start>
 80067a8:	4603      	mov	r3, r0
 80067aa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80067ac:	7bfb      	ldrb	r3, [r7, #15]
 80067ae:	4618      	mov	r0, r3
 80067b0:	f000 f942 	bl	8006a38 <USBD_Get_USB_Status>
 80067b4:	4603      	mov	r3, r0
 80067b6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80067b8:	7bbb      	ldrb	r3, [r7, #14]
}
 80067ba:	4618      	mov	r0, r3
 80067bc:	3710      	adds	r7, #16
 80067be:	46bd      	mov	sp, r7
 80067c0:	bd80      	pop	{r7, pc}

080067c2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80067c2:	b580      	push	{r7, lr}
 80067c4:	b084      	sub	sp, #16
 80067c6:	af00      	add	r7, sp, #0
 80067c8:	6078      	str	r0, [r7, #4]
 80067ca:	4608      	mov	r0, r1
 80067cc:	4611      	mov	r1, r2
 80067ce:	461a      	mov	r2, r3
 80067d0:	4603      	mov	r3, r0
 80067d2:	70fb      	strb	r3, [r7, #3]
 80067d4:	460b      	mov	r3, r1
 80067d6:	70bb      	strb	r3, [r7, #2]
 80067d8:	4613      	mov	r3, r2
 80067da:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80067dc:	2300      	movs	r3, #0
 80067de:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80067e0:	2300      	movs	r3, #0
 80067e2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80067ea:	78bb      	ldrb	r3, [r7, #2]
 80067ec:	883a      	ldrh	r2, [r7, #0]
 80067ee:	78f9      	ldrb	r1, [r7, #3]
 80067f0:	f7fb fa92 	bl	8001d18 <HAL_PCD_EP_Open>
 80067f4:	4603      	mov	r3, r0
 80067f6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80067f8:	7bfb      	ldrb	r3, [r7, #15]
 80067fa:	4618      	mov	r0, r3
 80067fc:	f000 f91c 	bl	8006a38 <USBD_Get_USB_Status>
 8006800:	4603      	mov	r3, r0
 8006802:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006804:	7bbb      	ldrb	r3, [r7, #14]
}
 8006806:	4618      	mov	r0, r3
 8006808:	3710      	adds	r7, #16
 800680a:	46bd      	mov	sp, r7
 800680c:	bd80      	pop	{r7, pc}

0800680e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800680e:	b580      	push	{r7, lr}
 8006810:	b084      	sub	sp, #16
 8006812:	af00      	add	r7, sp, #0
 8006814:	6078      	str	r0, [r7, #4]
 8006816:	460b      	mov	r3, r1
 8006818:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800681a:	2300      	movs	r3, #0
 800681c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800681e:	2300      	movs	r3, #0
 8006820:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006828:	78fa      	ldrb	r2, [r7, #3]
 800682a:	4611      	mov	r1, r2
 800682c:	4618      	mov	r0, r3
 800682e:	f7fb fadb 	bl	8001de8 <HAL_PCD_EP_Close>
 8006832:	4603      	mov	r3, r0
 8006834:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006836:	7bfb      	ldrb	r3, [r7, #15]
 8006838:	4618      	mov	r0, r3
 800683a:	f000 f8fd 	bl	8006a38 <USBD_Get_USB_Status>
 800683e:	4603      	mov	r3, r0
 8006840:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006842:	7bbb      	ldrb	r3, [r7, #14]
}
 8006844:	4618      	mov	r0, r3
 8006846:	3710      	adds	r7, #16
 8006848:	46bd      	mov	sp, r7
 800684a:	bd80      	pop	{r7, pc}

0800684c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800684c:	b580      	push	{r7, lr}
 800684e:	b084      	sub	sp, #16
 8006850:	af00      	add	r7, sp, #0
 8006852:	6078      	str	r0, [r7, #4]
 8006854:	460b      	mov	r3, r1
 8006856:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006858:	2300      	movs	r3, #0
 800685a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800685c:	2300      	movs	r3, #0
 800685e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006866:	78fa      	ldrb	r2, [r7, #3]
 8006868:	4611      	mov	r1, r2
 800686a:	4618      	mov	r0, r3
 800686c:	f7fb fbb3 	bl	8001fd6 <HAL_PCD_EP_SetStall>
 8006870:	4603      	mov	r3, r0
 8006872:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006874:	7bfb      	ldrb	r3, [r7, #15]
 8006876:	4618      	mov	r0, r3
 8006878:	f000 f8de 	bl	8006a38 <USBD_Get_USB_Status>
 800687c:	4603      	mov	r3, r0
 800687e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006880:	7bbb      	ldrb	r3, [r7, #14]
}
 8006882:	4618      	mov	r0, r3
 8006884:	3710      	adds	r7, #16
 8006886:	46bd      	mov	sp, r7
 8006888:	bd80      	pop	{r7, pc}

0800688a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800688a:	b580      	push	{r7, lr}
 800688c:	b084      	sub	sp, #16
 800688e:	af00      	add	r7, sp, #0
 8006890:	6078      	str	r0, [r7, #4]
 8006892:	460b      	mov	r3, r1
 8006894:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006896:	2300      	movs	r3, #0
 8006898:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800689a:	2300      	movs	r3, #0
 800689c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80068a4:	78fa      	ldrb	r2, [r7, #3]
 80068a6:	4611      	mov	r1, r2
 80068a8:	4618      	mov	r0, r3
 80068aa:	f7fb fbf8 	bl	800209e <HAL_PCD_EP_ClrStall>
 80068ae:	4603      	mov	r3, r0
 80068b0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80068b2:	7bfb      	ldrb	r3, [r7, #15]
 80068b4:	4618      	mov	r0, r3
 80068b6:	f000 f8bf 	bl	8006a38 <USBD_Get_USB_Status>
 80068ba:	4603      	mov	r3, r0
 80068bc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80068be:	7bbb      	ldrb	r3, [r7, #14]
}
 80068c0:	4618      	mov	r0, r3
 80068c2:	3710      	adds	r7, #16
 80068c4:	46bd      	mov	sp, r7
 80068c6:	bd80      	pop	{r7, pc}

080068c8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80068c8:	b480      	push	{r7}
 80068ca:	b085      	sub	sp, #20
 80068cc:	af00      	add	r7, sp, #0
 80068ce:	6078      	str	r0, [r7, #4]
 80068d0:	460b      	mov	r3, r1
 80068d2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80068da:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80068dc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	da0b      	bge.n	80068fc <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80068e4:	78fb      	ldrb	r3, [r7, #3]
 80068e6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80068ea:	68f9      	ldr	r1, [r7, #12]
 80068ec:	4613      	mov	r3, r2
 80068ee:	00db      	lsls	r3, r3, #3
 80068f0:	1a9b      	subs	r3, r3, r2
 80068f2:	009b      	lsls	r3, r3, #2
 80068f4:	440b      	add	r3, r1
 80068f6:	333e      	adds	r3, #62	; 0x3e
 80068f8:	781b      	ldrb	r3, [r3, #0]
 80068fa:	e00b      	b.n	8006914 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80068fc:	78fb      	ldrb	r3, [r7, #3]
 80068fe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006902:	68f9      	ldr	r1, [r7, #12]
 8006904:	4613      	mov	r3, r2
 8006906:	00db      	lsls	r3, r3, #3
 8006908:	1a9b      	subs	r3, r3, r2
 800690a:	009b      	lsls	r3, r3, #2
 800690c:	440b      	add	r3, r1
 800690e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8006912:	781b      	ldrb	r3, [r3, #0]
  }
}
 8006914:	4618      	mov	r0, r3
 8006916:	3714      	adds	r7, #20
 8006918:	46bd      	mov	sp, r7
 800691a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800691e:	4770      	bx	lr

08006920 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8006920:	b580      	push	{r7, lr}
 8006922:	b084      	sub	sp, #16
 8006924:	af00      	add	r7, sp, #0
 8006926:	6078      	str	r0, [r7, #4]
 8006928:	460b      	mov	r3, r1
 800692a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800692c:	2300      	movs	r3, #0
 800692e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006930:	2300      	movs	r3, #0
 8006932:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800693a:	78fa      	ldrb	r2, [r7, #3]
 800693c:	4611      	mov	r1, r2
 800693e:	4618      	mov	r0, r3
 8006940:	f7fb f9c5 	bl	8001cce <HAL_PCD_SetAddress>
 8006944:	4603      	mov	r3, r0
 8006946:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006948:	7bfb      	ldrb	r3, [r7, #15]
 800694a:	4618      	mov	r0, r3
 800694c:	f000 f874 	bl	8006a38 <USBD_Get_USB_Status>
 8006950:	4603      	mov	r3, r0
 8006952:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006954:	7bbb      	ldrb	r3, [r7, #14]
}
 8006956:	4618      	mov	r0, r3
 8006958:	3710      	adds	r7, #16
 800695a:	46bd      	mov	sp, r7
 800695c:	bd80      	pop	{r7, pc}

0800695e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800695e:	b580      	push	{r7, lr}
 8006960:	b086      	sub	sp, #24
 8006962:	af00      	add	r7, sp, #0
 8006964:	60f8      	str	r0, [r7, #12]
 8006966:	607a      	str	r2, [r7, #4]
 8006968:	603b      	str	r3, [r7, #0]
 800696a:	460b      	mov	r3, r1
 800696c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800696e:	2300      	movs	r3, #0
 8006970:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006972:	2300      	movs	r3, #0
 8006974:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800697c:	7af9      	ldrb	r1, [r7, #11]
 800697e:	683b      	ldr	r3, [r7, #0]
 8006980:	687a      	ldr	r2, [r7, #4]
 8006982:	f7fb fade 	bl	8001f42 <HAL_PCD_EP_Transmit>
 8006986:	4603      	mov	r3, r0
 8006988:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800698a:	7dfb      	ldrb	r3, [r7, #23]
 800698c:	4618      	mov	r0, r3
 800698e:	f000 f853 	bl	8006a38 <USBD_Get_USB_Status>
 8006992:	4603      	mov	r3, r0
 8006994:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8006996:	7dbb      	ldrb	r3, [r7, #22]
}
 8006998:	4618      	mov	r0, r3
 800699a:	3718      	adds	r7, #24
 800699c:	46bd      	mov	sp, r7
 800699e:	bd80      	pop	{r7, pc}

080069a0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80069a0:	b580      	push	{r7, lr}
 80069a2:	b086      	sub	sp, #24
 80069a4:	af00      	add	r7, sp, #0
 80069a6:	60f8      	str	r0, [r7, #12]
 80069a8:	607a      	str	r2, [r7, #4]
 80069aa:	603b      	str	r3, [r7, #0]
 80069ac:	460b      	mov	r3, r1
 80069ae:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80069b0:	2300      	movs	r3, #0
 80069b2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80069b4:	2300      	movs	r3, #0
 80069b6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80069be:	7af9      	ldrb	r1, [r7, #11]
 80069c0:	683b      	ldr	r3, [r7, #0]
 80069c2:	687a      	ldr	r2, [r7, #4]
 80069c4:	f7fb fa5a 	bl	8001e7c <HAL_PCD_EP_Receive>
 80069c8:	4603      	mov	r3, r0
 80069ca:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80069cc:	7dfb      	ldrb	r3, [r7, #23]
 80069ce:	4618      	mov	r0, r3
 80069d0:	f000 f832 	bl	8006a38 <USBD_Get_USB_Status>
 80069d4:	4603      	mov	r3, r0
 80069d6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80069d8:	7dbb      	ldrb	r3, [r7, #22]
}
 80069da:	4618      	mov	r0, r3
 80069dc:	3718      	adds	r7, #24
 80069de:	46bd      	mov	sp, r7
 80069e0:	bd80      	pop	{r7, pc}

080069e2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80069e2:	b580      	push	{r7, lr}
 80069e4:	b082      	sub	sp, #8
 80069e6:	af00      	add	r7, sp, #0
 80069e8:	6078      	str	r0, [r7, #4]
 80069ea:	460b      	mov	r3, r1
 80069ec:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80069f4:	78fa      	ldrb	r2, [r7, #3]
 80069f6:	4611      	mov	r1, r2
 80069f8:	4618      	mov	r0, r3
 80069fa:	f7fb fa8a 	bl	8001f12 <HAL_PCD_EP_GetRxCount>
 80069fe:	4603      	mov	r3, r0
}
 8006a00:	4618      	mov	r0, r3
 8006a02:	3708      	adds	r7, #8
 8006a04:	46bd      	mov	sp, r7
 8006a06:	bd80      	pop	{r7, pc}

08006a08 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8006a08:	b480      	push	{r7}
 8006a0a:	b083      	sub	sp, #12
 8006a0c:	af00      	add	r7, sp, #0
 8006a0e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8006a10:	4b03      	ldr	r3, [pc, #12]	; (8006a20 <USBD_static_malloc+0x18>)
}
 8006a12:	4618      	mov	r0, r3
 8006a14:	370c      	adds	r7, #12
 8006a16:	46bd      	mov	sp, r7
 8006a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a1c:	4770      	bx	lr
 8006a1e:	bf00      	nop
 8006a20:	20001520 	.word	0x20001520

08006a24 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8006a24:	b480      	push	{r7}
 8006a26:	b083      	sub	sp, #12
 8006a28:	af00      	add	r7, sp, #0
 8006a2a:	6078      	str	r0, [r7, #4]

}
 8006a2c:	bf00      	nop
 8006a2e:	370c      	adds	r7, #12
 8006a30:	46bd      	mov	sp, r7
 8006a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a36:	4770      	bx	lr

08006a38 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8006a38:	b480      	push	{r7}
 8006a3a:	b085      	sub	sp, #20
 8006a3c:	af00      	add	r7, sp, #0
 8006a3e:	4603      	mov	r3, r0
 8006a40:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006a42:	2300      	movs	r3, #0
 8006a44:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8006a46:	79fb      	ldrb	r3, [r7, #7]
 8006a48:	2b03      	cmp	r3, #3
 8006a4a:	d817      	bhi.n	8006a7c <USBD_Get_USB_Status+0x44>
 8006a4c:	a201      	add	r2, pc, #4	; (adr r2, 8006a54 <USBD_Get_USB_Status+0x1c>)
 8006a4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a52:	bf00      	nop
 8006a54:	08006a65 	.word	0x08006a65
 8006a58:	08006a6b 	.word	0x08006a6b
 8006a5c:	08006a71 	.word	0x08006a71
 8006a60:	08006a77 	.word	0x08006a77
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8006a64:	2300      	movs	r3, #0
 8006a66:	73fb      	strb	r3, [r7, #15]
    break;
 8006a68:	e00b      	b.n	8006a82 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8006a6a:	2303      	movs	r3, #3
 8006a6c:	73fb      	strb	r3, [r7, #15]
    break;
 8006a6e:	e008      	b.n	8006a82 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8006a70:	2301      	movs	r3, #1
 8006a72:	73fb      	strb	r3, [r7, #15]
    break;
 8006a74:	e005      	b.n	8006a82 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8006a76:	2303      	movs	r3, #3
 8006a78:	73fb      	strb	r3, [r7, #15]
    break;
 8006a7a:	e002      	b.n	8006a82 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8006a7c:	2303      	movs	r3, #3
 8006a7e:	73fb      	strb	r3, [r7, #15]
    break;
 8006a80:	bf00      	nop
  }
  return usb_status;
 8006a82:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a84:	4618      	mov	r0, r3
 8006a86:	3714      	adds	r7, #20
 8006a88:	46bd      	mov	sp, r7
 8006a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a8e:	4770      	bx	lr

08006a90 <main>:
 */

#include "main.h"

int main(void)
{
 8006a90:	b580      	push	{r7, lr}
 8006a92:	af00      	add	r7, sp, #0

	hwInit();
 8006a94:	f7fa f8af 	bl	8000bf6 <hwInit>
	apInit();
 8006a98:	f7f9 fd74 	bl	8000584 <apInit>

	apMain();
 8006a9c:	f7f9 fd7a 	bl	8000594 <apMain>
	return 0;
 8006aa0:	2300      	movs	r3, #0
}
 8006aa2:	4618      	mov	r0, r3
 8006aa4:	bd80      	pop	{r7, pc}
	...

08006aa8 <__errno>:
 8006aa8:	4b01      	ldr	r3, [pc, #4]	; (8006ab0 <__errno+0x8>)
 8006aaa:	6818      	ldr	r0, [r3, #0]
 8006aac:	4770      	bx	lr
 8006aae:	bf00      	nop
 8006ab0:	200001b0 	.word	0x200001b0

08006ab4 <__libc_init_array>:
 8006ab4:	b570      	push	{r4, r5, r6, lr}
 8006ab6:	4d0d      	ldr	r5, [pc, #52]	; (8006aec <__libc_init_array+0x38>)
 8006ab8:	4c0d      	ldr	r4, [pc, #52]	; (8006af0 <__libc_init_array+0x3c>)
 8006aba:	1b64      	subs	r4, r4, r5
 8006abc:	10a4      	asrs	r4, r4, #2
 8006abe:	2600      	movs	r6, #0
 8006ac0:	42a6      	cmp	r6, r4
 8006ac2:	d109      	bne.n	8006ad8 <__libc_init_array+0x24>
 8006ac4:	4d0b      	ldr	r5, [pc, #44]	; (8006af4 <__libc_init_array+0x40>)
 8006ac6:	4c0c      	ldr	r4, [pc, #48]	; (8006af8 <__libc_init_array+0x44>)
 8006ac8:	f000 fca8 	bl	800741c <_init>
 8006acc:	1b64      	subs	r4, r4, r5
 8006ace:	10a4      	asrs	r4, r4, #2
 8006ad0:	2600      	movs	r6, #0
 8006ad2:	42a6      	cmp	r6, r4
 8006ad4:	d105      	bne.n	8006ae2 <__libc_init_array+0x2e>
 8006ad6:	bd70      	pop	{r4, r5, r6, pc}
 8006ad8:	f855 3b04 	ldr.w	r3, [r5], #4
 8006adc:	4798      	blx	r3
 8006ade:	3601      	adds	r6, #1
 8006ae0:	e7ee      	b.n	8006ac0 <__libc_init_array+0xc>
 8006ae2:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ae6:	4798      	blx	r3
 8006ae8:	3601      	adds	r6, #1
 8006aea:	e7f2      	b.n	8006ad2 <__libc_init_array+0x1e>
 8006aec:	080074f8 	.word	0x080074f8
 8006af0:	080074f8 	.word	0x080074f8
 8006af4:	080074f8 	.word	0x080074f8
 8006af8:	080074fc 	.word	0x080074fc

08006afc <memset>:
 8006afc:	4402      	add	r2, r0
 8006afe:	4603      	mov	r3, r0
 8006b00:	4293      	cmp	r3, r2
 8006b02:	d100      	bne.n	8006b06 <memset+0xa>
 8006b04:	4770      	bx	lr
 8006b06:	f803 1b01 	strb.w	r1, [r3], #1
 8006b0a:	e7f9      	b.n	8006b00 <memset+0x4>

08006b0c <_vsniprintf_r>:
 8006b0c:	b530      	push	{r4, r5, lr}
 8006b0e:	4614      	mov	r4, r2
 8006b10:	2c00      	cmp	r4, #0
 8006b12:	b09b      	sub	sp, #108	; 0x6c
 8006b14:	4605      	mov	r5, r0
 8006b16:	461a      	mov	r2, r3
 8006b18:	da05      	bge.n	8006b26 <_vsniprintf_r+0x1a>
 8006b1a:	238b      	movs	r3, #139	; 0x8b
 8006b1c:	6003      	str	r3, [r0, #0]
 8006b1e:	f04f 30ff 	mov.w	r0, #4294967295
 8006b22:	b01b      	add	sp, #108	; 0x6c
 8006b24:	bd30      	pop	{r4, r5, pc}
 8006b26:	f44f 7302 	mov.w	r3, #520	; 0x208
 8006b2a:	f8ad 300c 	strh.w	r3, [sp, #12]
 8006b2e:	bf14      	ite	ne
 8006b30:	f104 33ff 	addne.w	r3, r4, #4294967295
 8006b34:	4623      	moveq	r3, r4
 8006b36:	9302      	str	r3, [sp, #8]
 8006b38:	9305      	str	r3, [sp, #20]
 8006b3a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006b3e:	9100      	str	r1, [sp, #0]
 8006b40:	9104      	str	r1, [sp, #16]
 8006b42:	f8ad 300e 	strh.w	r3, [sp, #14]
 8006b46:	4669      	mov	r1, sp
 8006b48:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8006b4a:	f000 f875 	bl	8006c38 <_svfiprintf_r>
 8006b4e:	1c43      	adds	r3, r0, #1
 8006b50:	bfbc      	itt	lt
 8006b52:	238b      	movlt	r3, #139	; 0x8b
 8006b54:	602b      	strlt	r3, [r5, #0]
 8006b56:	2c00      	cmp	r4, #0
 8006b58:	d0e3      	beq.n	8006b22 <_vsniprintf_r+0x16>
 8006b5a:	9b00      	ldr	r3, [sp, #0]
 8006b5c:	2200      	movs	r2, #0
 8006b5e:	701a      	strb	r2, [r3, #0]
 8006b60:	e7df      	b.n	8006b22 <_vsniprintf_r+0x16>
	...

08006b64 <vsniprintf>:
 8006b64:	b507      	push	{r0, r1, r2, lr}
 8006b66:	9300      	str	r3, [sp, #0]
 8006b68:	4613      	mov	r3, r2
 8006b6a:	460a      	mov	r2, r1
 8006b6c:	4601      	mov	r1, r0
 8006b6e:	4803      	ldr	r0, [pc, #12]	; (8006b7c <vsniprintf+0x18>)
 8006b70:	6800      	ldr	r0, [r0, #0]
 8006b72:	f7ff ffcb 	bl	8006b0c <_vsniprintf_r>
 8006b76:	b003      	add	sp, #12
 8006b78:	f85d fb04 	ldr.w	pc, [sp], #4
 8006b7c:	200001b0 	.word	0x200001b0

08006b80 <__ssputs_r>:
 8006b80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006b84:	688e      	ldr	r6, [r1, #8]
 8006b86:	429e      	cmp	r6, r3
 8006b88:	4682      	mov	sl, r0
 8006b8a:	460c      	mov	r4, r1
 8006b8c:	4690      	mov	r8, r2
 8006b8e:	461f      	mov	r7, r3
 8006b90:	d838      	bhi.n	8006c04 <__ssputs_r+0x84>
 8006b92:	898a      	ldrh	r2, [r1, #12]
 8006b94:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006b98:	d032      	beq.n	8006c00 <__ssputs_r+0x80>
 8006b9a:	6825      	ldr	r5, [r4, #0]
 8006b9c:	6909      	ldr	r1, [r1, #16]
 8006b9e:	eba5 0901 	sub.w	r9, r5, r1
 8006ba2:	6965      	ldr	r5, [r4, #20]
 8006ba4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006ba8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006bac:	3301      	adds	r3, #1
 8006bae:	444b      	add	r3, r9
 8006bb0:	106d      	asrs	r5, r5, #1
 8006bb2:	429d      	cmp	r5, r3
 8006bb4:	bf38      	it	cc
 8006bb6:	461d      	movcc	r5, r3
 8006bb8:	0553      	lsls	r3, r2, #21
 8006bba:	d531      	bpl.n	8006c20 <__ssputs_r+0xa0>
 8006bbc:	4629      	mov	r1, r5
 8006bbe:	f000 fb63 	bl	8007288 <_malloc_r>
 8006bc2:	4606      	mov	r6, r0
 8006bc4:	b950      	cbnz	r0, 8006bdc <__ssputs_r+0x5c>
 8006bc6:	230c      	movs	r3, #12
 8006bc8:	f8ca 3000 	str.w	r3, [sl]
 8006bcc:	89a3      	ldrh	r3, [r4, #12]
 8006bce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006bd2:	81a3      	strh	r3, [r4, #12]
 8006bd4:	f04f 30ff 	mov.w	r0, #4294967295
 8006bd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006bdc:	6921      	ldr	r1, [r4, #16]
 8006bde:	464a      	mov	r2, r9
 8006be0:	f000 fabe 	bl	8007160 <memcpy>
 8006be4:	89a3      	ldrh	r3, [r4, #12]
 8006be6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006bea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006bee:	81a3      	strh	r3, [r4, #12]
 8006bf0:	6126      	str	r6, [r4, #16]
 8006bf2:	6165      	str	r5, [r4, #20]
 8006bf4:	444e      	add	r6, r9
 8006bf6:	eba5 0509 	sub.w	r5, r5, r9
 8006bfa:	6026      	str	r6, [r4, #0]
 8006bfc:	60a5      	str	r5, [r4, #8]
 8006bfe:	463e      	mov	r6, r7
 8006c00:	42be      	cmp	r6, r7
 8006c02:	d900      	bls.n	8006c06 <__ssputs_r+0x86>
 8006c04:	463e      	mov	r6, r7
 8006c06:	6820      	ldr	r0, [r4, #0]
 8006c08:	4632      	mov	r2, r6
 8006c0a:	4641      	mov	r1, r8
 8006c0c:	f000 fab6 	bl	800717c <memmove>
 8006c10:	68a3      	ldr	r3, [r4, #8]
 8006c12:	1b9b      	subs	r3, r3, r6
 8006c14:	60a3      	str	r3, [r4, #8]
 8006c16:	6823      	ldr	r3, [r4, #0]
 8006c18:	4433      	add	r3, r6
 8006c1a:	6023      	str	r3, [r4, #0]
 8006c1c:	2000      	movs	r0, #0
 8006c1e:	e7db      	b.n	8006bd8 <__ssputs_r+0x58>
 8006c20:	462a      	mov	r2, r5
 8006c22:	f000 fba5 	bl	8007370 <_realloc_r>
 8006c26:	4606      	mov	r6, r0
 8006c28:	2800      	cmp	r0, #0
 8006c2a:	d1e1      	bne.n	8006bf0 <__ssputs_r+0x70>
 8006c2c:	6921      	ldr	r1, [r4, #16]
 8006c2e:	4650      	mov	r0, sl
 8006c30:	f000 fabe 	bl	80071b0 <_free_r>
 8006c34:	e7c7      	b.n	8006bc6 <__ssputs_r+0x46>
	...

08006c38 <_svfiprintf_r>:
 8006c38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c3c:	4698      	mov	r8, r3
 8006c3e:	898b      	ldrh	r3, [r1, #12]
 8006c40:	061b      	lsls	r3, r3, #24
 8006c42:	b09d      	sub	sp, #116	; 0x74
 8006c44:	4607      	mov	r7, r0
 8006c46:	460d      	mov	r5, r1
 8006c48:	4614      	mov	r4, r2
 8006c4a:	d50e      	bpl.n	8006c6a <_svfiprintf_r+0x32>
 8006c4c:	690b      	ldr	r3, [r1, #16]
 8006c4e:	b963      	cbnz	r3, 8006c6a <_svfiprintf_r+0x32>
 8006c50:	2140      	movs	r1, #64	; 0x40
 8006c52:	f000 fb19 	bl	8007288 <_malloc_r>
 8006c56:	6028      	str	r0, [r5, #0]
 8006c58:	6128      	str	r0, [r5, #16]
 8006c5a:	b920      	cbnz	r0, 8006c66 <_svfiprintf_r+0x2e>
 8006c5c:	230c      	movs	r3, #12
 8006c5e:	603b      	str	r3, [r7, #0]
 8006c60:	f04f 30ff 	mov.w	r0, #4294967295
 8006c64:	e0d1      	b.n	8006e0a <_svfiprintf_r+0x1d2>
 8006c66:	2340      	movs	r3, #64	; 0x40
 8006c68:	616b      	str	r3, [r5, #20]
 8006c6a:	2300      	movs	r3, #0
 8006c6c:	9309      	str	r3, [sp, #36]	; 0x24
 8006c6e:	2320      	movs	r3, #32
 8006c70:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006c74:	f8cd 800c 	str.w	r8, [sp, #12]
 8006c78:	2330      	movs	r3, #48	; 0x30
 8006c7a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006e24 <_svfiprintf_r+0x1ec>
 8006c7e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006c82:	f04f 0901 	mov.w	r9, #1
 8006c86:	4623      	mov	r3, r4
 8006c88:	469a      	mov	sl, r3
 8006c8a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006c8e:	b10a      	cbz	r2, 8006c94 <_svfiprintf_r+0x5c>
 8006c90:	2a25      	cmp	r2, #37	; 0x25
 8006c92:	d1f9      	bne.n	8006c88 <_svfiprintf_r+0x50>
 8006c94:	ebba 0b04 	subs.w	fp, sl, r4
 8006c98:	d00b      	beq.n	8006cb2 <_svfiprintf_r+0x7a>
 8006c9a:	465b      	mov	r3, fp
 8006c9c:	4622      	mov	r2, r4
 8006c9e:	4629      	mov	r1, r5
 8006ca0:	4638      	mov	r0, r7
 8006ca2:	f7ff ff6d 	bl	8006b80 <__ssputs_r>
 8006ca6:	3001      	adds	r0, #1
 8006ca8:	f000 80aa 	beq.w	8006e00 <_svfiprintf_r+0x1c8>
 8006cac:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006cae:	445a      	add	r2, fp
 8006cb0:	9209      	str	r2, [sp, #36]	; 0x24
 8006cb2:	f89a 3000 	ldrb.w	r3, [sl]
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	f000 80a2 	beq.w	8006e00 <_svfiprintf_r+0x1c8>
 8006cbc:	2300      	movs	r3, #0
 8006cbe:	f04f 32ff 	mov.w	r2, #4294967295
 8006cc2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006cc6:	f10a 0a01 	add.w	sl, sl, #1
 8006cca:	9304      	str	r3, [sp, #16]
 8006ccc:	9307      	str	r3, [sp, #28]
 8006cce:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006cd2:	931a      	str	r3, [sp, #104]	; 0x68
 8006cd4:	4654      	mov	r4, sl
 8006cd6:	2205      	movs	r2, #5
 8006cd8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006cdc:	4851      	ldr	r0, [pc, #324]	; (8006e24 <_svfiprintf_r+0x1ec>)
 8006cde:	f7f9 fa7f 	bl	80001e0 <memchr>
 8006ce2:	9a04      	ldr	r2, [sp, #16]
 8006ce4:	b9d8      	cbnz	r0, 8006d1e <_svfiprintf_r+0xe6>
 8006ce6:	06d0      	lsls	r0, r2, #27
 8006ce8:	bf44      	itt	mi
 8006cea:	2320      	movmi	r3, #32
 8006cec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006cf0:	0711      	lsls	r1, r2, #28
 8006cf2:	bf44      	itt	mi
 8006cf4:	232b      	movmi	r3, #43	; 0x2b
 8006cf6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006cfa:	f89a 3000 	ldrb.w	r3, [sl]
 8006cfe:	2b2a      	cmp	r3, #42	; 0x2a
 8006d00:	d015      	beq.n	8006d2e <_svfiprintf_r+0xf6>
 8006d02:	9a07      	ldr	r2, [sp, #28]
 8006d04:	4654      	mov	r4, sl
 8006d06:	2000      	movs	r0, #0
 8006d08:	f04f 0c0a 	mov.w	ip, #10
 8006d0c:	4621      	mov	r1, r4
 8006d0e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006d12:	3b30      	subs	r3, #48	; 0x30
 8006d14:	2b09      	cmp	r3, #9
 8006d16:	d94e      	bls.n	8006db6 <_svfiprintf_r+0x17e>
 8006d18:	b1b0      	cbz	r0, 8006d48 <_svfiprintf_r+0x110>
 8006d1a:	9207      	str	r2, [sp, #28]
 8006d1c:	e014      	b.n	8006d48 <_svfiprintf_r+0x110>
 8006d1e:	eba0 0308 	sub.w	r3, r0, r8
 8006d22:	fa09 f303 	lsl.w	r3, r9, r3
 8006d26:	4313      	orrs	r3, r2
 8006d28:	9304      	str	r3, [sp, #16]
 8006d2a:	46a2      	mov	sl, r4
 8006d2c:	e7d2      	b.n	8006cd4 <_svfiprintf_r+0x9c>
 8006d2e:	9b03      	ldr	r3, [sp, #12]
 8006d30:	1d19      	adds	r1, r3, #4
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	9103      	str	r1, [sp, #12]
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	bfbb      	ittet	lt
 8006d3a:	425b      	neglt	r3, r3
 8006d3c:	f042 0202 	orrlt.w	r2, r2, #2
 8006d40:	9307      	strge	r3, [sp, #28]
 8006d42:	9307      	strlt	r3, [sp, #28]
 8006d44:	bfb8      	it	lt
 8006d46:	9204      	strlt	r2, [sp, #16]
 8006d48:	7823      	ldrb	r3, [r4, #0]
 8006d4a:	2b2e      	cmp	r3, #46	; 0x2e
 8006d4c:	d10c      	bne.n	8006d68 <_svfiprintf_r+0x130>
 8006d4e:	7863      	ldrb	r3, [r4, #1]
 8006d50:	2b2a      	cmp	r3, #42	; 0x2a
 8006d52:	d135      	bne.n	8006dc0 <_svfiprintf_r+0x188>
 8006d54:	9b03      	ldr	r3, [sp, #12]
 8006d56:	1d1a      	adds	r2, r3, #4
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	9203      	str	r2, [sp, #12]
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	bfb8      	it	lt
 8006d60:	f04f 33ff 	movlt.w	r3, #4294967295
 8006d64:	3402      	adds	r4, #2
 8006d66:	9305      	str	r3, [sp, #20]
 8006d68:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006e34 <_svfiprintf_r+0x1fc>
 8006d6c:	7821      	ldrb	r1, [r4, #0]
 8006d6e:	2203      	movs	r2, #3
 8006d70:	4650      	mov	r0, sl
 8006d72:	f7f9 fa35 	bl	80001e0 <memchr>
 8006d76:	b140      	cbz	r0, 8006d8a <_svfiprintf_r+0x152>
 8006d78:	2340      	movs	r3, #64	; 0x40
 8006d7a:	eba0 000a 	sub.w	r0, r0, sl
 8006d7e:	fa03 f000 	lsl.w	r0, r3, r0
 8006d82:	9b04      	ldr	r3, [sp, #16]
 8006d84:	4303      	orrs	r3, r0
 8006d86:	3401      	adds	r4, #1
 8006d88:	9304      	str	r3, [sp, #16]
 8006d8a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006d8e:	4826      	ldr	r0, [pc, #152]	; (8006e28 <_svfiprintf_r+0x1f0>)
 8006d90:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006d94:	2206      	movs	r2, #6
 8006d96:	f7f9 fa23 	bl	80001e0 <memchr>
 8006d9a:	2800      	cmp	r0, #0
 8006d9c:	d038      	beq.n	8006e10 <_svfiprintf_r+0x1d8>
 8006d9e:	4b23      	ldr	r3, [pc, #140]	; (8006e2c <_svfiprintf_r+0x1f4>)
 8006da0:	bb1b      	cbnz	r3, 8006dea <_svfiprintf_r+0x1b2>
 8006da2:	9b03      	ldr	r3, [sp, #12]
 8006da4:	3307      	adds	r3, #7
 8006da6:	f023 0307 	bic.w	r3, r3, #7
 8006daa:	3308      	adds	r3, #8
 8006dac:	9303      	str	r3, [sp, #12]
 8006dae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006db0:	4433      	add	r3, r6
 8006db2:	9309      	str	r3, [sp, #36]	; 0x24
 8006db4:	e767      	b.n	8006c86 <_svfiprintf_r+0x4e>
 8006db6:	fb0c 3202 	mla	r2, ip, r2, r3
 8006dba:	460c      	mov	r4, r1
 8006dbc:	2001      	movs	r0, #1
 8006dbe:	e7a5      	b.n	8006d0c <_svfiprintf_r+0xd4>
 8006dc0:	2300      	movs	r3, #0
 8006dc2:	3401      	adds	r4, #1
 8006dc4:	9305      	str	r3, [sp, #20]
 8006dc6:	4619      	mov	r1, r3
 8006dc8:	f04f 0c0a 	mov.w	ip, #10
 8006dcc:	4620      	mov	r0, r4
 8006dce:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006dd2:	3a30      	subs	r2, #48	; 0x30
 8006dd4:	2a09      	cmp	r2, #9
 8006dd6:	d903      	bls.n	8006de0 <_svfiprintf_r+0x1a8>
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d0c5      	beq.n	8006d68 <_svfiprintf_r+0x130>
 8006ddc:	9105      	str	r1, [sp, #20]
 8006dde:	e7c3      	b.n	8006d68 <_svfiprintf_r+0x130>
 8006de0:	fb0c 2101 	mla	r1, ip, r1, r2
 8006de4:	4604      	mov	r4, r0
 8006de6:	2301      	movs	r3, #1
 8006de8:	e7f0      	b.n	8006dcc <_svfiprintf_r+0x194>
 8006dea:	ab03      	add	r3, sp, #12
 8006dec:	9300      	str	r3, [sp, #0]
 8006dee:	462a      	mov	r2, r5
 8006df0:	4b0f      	ldr	r3, [pc, #60]	; (8006e30 <_svfiprintf_r+0x1f8>)
 8006df2:	a904      	add	r1, sp, #16
 8006df4:	4638      	mov	r0, r7
 8006df6:	f3af 8000 	nop.w
 8006dfa:	1c42      	adds	r2, r0, #1
 8006dfc:	4606      	mov	r6, r0
 8006dfe:	d1d6      	bne.n	8006dae <_svfiprintf_r+0x176>
 8006e00:	89ab      	ldrh	r3, [r5, #12]
 8006e02:	065b      	lsls	r3, r3, #25
 8006e04:	f53f af2c 	bmi.w	8006c60 <_svfiprintf_r+0x28>
 8006e08:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006e0a:	b01d      	add	sp, #116	; 0x74
 8006e0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e10:	ab03      	add	r3, sp, #12
 8006e12:	9300      	str	r3, [sp, #0]
 8006e14:	462a      	mov	r2, r5
 8006e16:	4b06      	ldr	r3, [pc, #24]	; (8006e30 <_svfiprintf_r+0x1f8>)
 8006e18:	a904      	add	r1, sp, #16
 8006e1a:	4638      	mov	r0, r7
 8006e1c:	f000 f87a 	bl	8006f14 <_printf_i>
 8006e20:	e7eb      	b.n	8006dfa <_svfiprintf_r+0x1c2>
 8006e22:	bf00      	nop
 8006e24:	080074bc 	.word	0x080074bc
 8006e28:	080074c6 	.word	0x080074c6
 8006e2c:	00000000 	.word	0x00000000
 8006e30:	08006b81 	.word	0x08006b81
 8006e34:	080074c2 	.word	0x080074c2

08006e38 <_printf_common>:
 8006e38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006e3c:	4616      	mov	r6, r2
 8006e3e:	4699      	mov	r9, r3
 8006e40:	688a      	ldr	r2, [r1, #8]
 8006e42:	690b      	ldr	r3, [r1, #16]
 8006e44:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006e48:	4293      	cmp	r3, r2
 8006e4a:	bfb8      	it	lt
 8006e4c:	4613      	movlt	r3, r2
 8006e4e:	6033      	str	r3, [r6, #0]
 8006e50:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006e54:	4607      	mov	r7, r0
 8006e56:	460c      	mov	r4, r1
 8006e58:	b10a      	cbz	r2, 8006e5e <_printf_common+0x26>
 8006e5a:	3301      	adds	r3, #1
 8006e5c:	6033      	str	r3, [r6, #0]
 8006e5e:	6823      	ldr	r3, [r4, #0]
 8006e60:	0699      	lsls	r1, r3, #26
 8006e62:	bf42      	ittt	mi
 8006e64:	6833      	ldrmi	r3, [r6, #0]
 8006e66:	3302      	addmi	r3, #2
 8006e68:	6033      	strmi	r3, [r6, #0]
 8006e6a:	6825      	ldr	r5, [r4, #0]
 8006e6c:	f015 0506 	ands.w	r5, r5, #6
 8006e70:	d106      	bne.n	8006e80 <_printf_common+0x48>
 8006e72:	f104 0a19 	add.w	sl, r4, #25
 8006e76:	68e3      	ldr	r3, [r4, #12]
 8006e78:	6832      	ldr	r2, [r6, #0]
 8006e7a:	1a9b      	subs	r3, r3, r2
 8006e7c:	42ab      	cmp	r3, r5
 8006e7e:	dc26      	bgt.n	8006ece <_printf_common+0x96>
 8006e80:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006e84:	1e13      	subs	r3, r2, #0
 8006e86:	6822      	ldr	r2, [r4, #0]
 8006e88:	bf18      	it	ne
 8006e8a:	2301      	movne	r3, #1
 8006e8c:	0692      	lsls	r2, r2, #26
 8006e8e:	d42b      	bmi.n	8006ee8 <_printf_common+0xb0>
 8006e90:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006e94:	4649      	mov	r1, r9
 8006e96:	4638      	mov	r0, r7
 8006e98:	47c0      	blx	r8
 8006e9a:	3001      	adds	r0, #1
 8006e9c:	d01e      	beq.n	8006edc <_printf_common+0xa4>
 8006e9e:	6823      	ldr	r3, [r4, #0]
 8006ea0:	68e5      	ldr	r5, [r4, #12]
 8006ea2:	6832      	ldr	r2, [r6, #0]
 8006ea4:	f003 0306 	and.w	r3, r3, #6
 8006ea8:	2b04      	cmp	r3, #4
 8006eaa:	bf08      	it	eq
 8006eac:	1aad      	subeq	r5, r5, r2
 8006eae:	68a3      	ldr	r3, [r4, #8]
 8006eb0:	6922      	ldr	r2, [r4, #16]
 8006eb2:	bf0c      	ite	eq
 8006eb4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006eb8:	2500      	movne	r5, #0
 8006eba:	4293      	cmp	r3, r2
 8006ebc:	bfc4      	itt	gt
 8006ebe:	1a9b      	subgt	r3, r3, r2
 8006ec0:	18ed      	addgt	r5, r5, r3
 8006ec2:	2600      	movs	r6, #0
 8006ec4:	341a      	adds	r4, #26
 8006ec6:	42b5      	cmp	r5, r6
 8006ec8:	d11a      	bne.n	8006f00 <_printf_common+0xc8>
 8006eca:	2000      	movs	r0, #0
 8006ecc:	e008      	b.n	8006ee0 <_printf_common+0xa8>
 8006ece:	2301      	movs	r3, #1
 8006ed0:	4652      	mov	r2, sl
 8006ed2:	4649      	mov	r1, r9
 8006ed4:	4638      	mov	r0, r7
 8006ed6:	47c0      	blx	r8
 8006ed8:	3001      	adds	r0, #1
 8006eda:	d103      	bne.n	8006ee4 <_printf_common+0xac>
 8006edc:	f04f 30ff 	mov.w	r0, #4294967295
 8006ee0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ee4:	3501      	adds	r5, #1
 8006ee6:	e7c6      	b.n	8006e76 <_printf_common+0x3e>
 8006ee8:	18e1      	adds	r1, r4, r3
 8006eea:	1c5a      	adds	r2, r3, #1
 8006eec:	2030      	movs	r0, #48	; 0x30
 8006eee:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006ef2:	4422      	add	r2, r4
 8006ef4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006ef8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006efc:	3302      	adds	r3, #2
 8006efe:	e7c7      	b.n	8006e90 <_printf_common+0x58>
 8006f00:	2301      	movs	r3, #1
 8006f02:	4622      	mov	r2, r4
 8006f04:	4649      	mov	r1, r9
 8006f06:	4638      	mov	r0, r7
 8006f08:	47c0      	blx	r8
 8006f0a:	3001      	adds	r0, #1
 8006f0c:	d0e6      	beq.n	8006edc <_printf_common+0xa4>
 8006f0e:	3601      	adds	r6, #1
 8006f10:	e7d9      	b.n	8006ec6 <_printf_common+0x8e>
	...

08006f14 <_printf_i>:
 8006f14:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006f18:	7e0f      	ldrb	r7, [r1, #24]
 8006f1a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006f1c:	2f78      	cmp	r7, #120	; 0x78
 8006f1e:	4691      	mov	r9, r2
 8006f20:	4680      	mov	r8, r0
 8006f22:	460c      	mov	r4, r1
 8006f24:	469a      	mov	sl, r3
 8006f26:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006f2a:	d807      	bhi.n	8006f3c <_printf_i+0x28>
 8006f2c:	2f62      	cmp	r7, #98	; 0x62
 8006f2e:	d80a      	bhi.n	8006f46 <_printf_i+0x32>
 8006f30:	2f00      	cmp	r7, #0
 8006f32:	f000 80d8 	beq.w	80070e6 <_printf_i+0x1d2>
 8006f36:	2f58      	cmp	r7, #88	; 0x58
 8006f38:	f000 80a3 	beq.w	8007082 <_printf_i+0x16e>
 8006f3c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006f40:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006f44:	e03a      	b.n	8006fbc <_printf_i+0xa8>
 8006f46:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006f4a:	2b15      	cmp	r3, #21
 8006f4c:	d8f6      	bhi.n	8006f3c <_printf_i+0x28>
 8006f4e:	a101      	add	r1, pc, #4	; (adr r1, 8006f54 <_printf_i+0x40>)
 8006f50:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006f54:	08006fad 	.word	0x08006fad
 8006f58:	08006fc1 	.word	0x08006fc1
 8006f5c:	08006f3d 	.word	0x08006f3d
 8006f60:	08006f3d 	.word	0x08006f3d
 8006f64:	08006f3d 	.word	0x08006f3d
 8006f68:	08006f3d 	.word	0x08006f3d
 8006f6c:	08006fc1 	.word	0x08006fc1
 8006f70:	08006f3d 	.word	0x08006f3d
 8006f74:	08006f3d 	.word	0x08006f3d
 8006f78:	08006f3d 	.word	0x08006f3d
 8006f7c:	08006f3d 	.word	0x08006f3d
 8006f80:	080070cd 	.word	0x080070cd
 8006f84:	08006ff1 	.word	0x08006ff1
 8006f88:	080070af 	.word	0x080070af
 8006f8c:	08006f3d 	.word	0x08006f3d
 8006f90:	08006f3d 	.word	0x08006f3d
 8006f94:	080070ef 	.word	0x080070ef
 8006f98:	08006f3d 	.word	0x08006f3d
 8006f9c:	08006ff1 	.word	0x08006ff1
 8006fa0:	08006f3d 	.word	0x08006f3d
 8006fa4:	08006f3d 	.word	0x08006f3d
 8006fa8:	080070b7 	.word	0x080070b7
 8006fac:	682b      	ldr	r3, [r5, #0]
 8006fae:	1d1a      	adds	r2, r3, #4
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	602a      	str	r2, [r5, #0]
 8006fb4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006fb8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006fbc:	2301      	movs	r3, #1
 8006fbe:	e0a3      	b.n	8007108 <_printf_i+0x1f4>
 8006fc0:	6820      	ldr	r0, [r4, #0]
 8006fc2:	6829      	ldr	r1, [r5, #0]
 8006fc4:	0606      	lsls	r6, r0, #24
 8006fc6:	f101 0304 	add.w	r3, r1, #4
 8006fca:	d50a      	bpl.n	8006fe2 <_printf_i+0xce>
 8006fcc:	680e      	ldr	r6, [r1, #0]
 8006fce:	602b      	str	r3, [r5, #0]
 8006fd0:	2e00      	cmp	r6, #0
 8006fd2:	da03      	bge.n	8006fdc <_printf_i+0xc8>
 8006fd4:	232d      	movs	r3, #45	; 0x2d
 8006fd6:	4276      	negs	r6, r6
 8006fd8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006fdc:	485e      	ldr	r0, [pc, #376]	; (8007158 <_printf_i+0x244>)
 8006fde:	230a      	movs	r3, #10
 8006fe0:	e019      	b.n	8007016 <_printf_i+0x102>
 8006fe2:	680e      	ldr	r6, [r1, #0]
 8006fe4:	602b      	str	r3, [r5, #0]
 8006fe6:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006fea:	bf18      	it	ne
 8006fec:	b236      	sxthne	r6, r6
 8006fee:	e7ef      	b.n	8006fd0 <_printf_i+0xbc>
 8006ff0:	682b      	ldr	r3, [r5, #0]
 8006ff2:	6820      	ldr	r0, [r4, #0]
 8006ff4:	1d19      	adds	r1, r3, #4
 8006ff6:	6029      	str	r1, [r5, #0]
 8006ff8:	0601      	lsls	r1, r0, #24
 8006ffa:	d501      	bpl.n	8007000 <_printf_i+0xec>
 8006ffc:	681e      	ldr	r6, [r3, #0]
 8006ffe:	e002      	b.n	8007006 <_printf_i+0xf2>
 8007000:	0646      	lsls	r6, r0, #25
 8007002:	d5fb      	bpl.n	8006ffc <_printf_i+0xe8>
 8007004:	881e      	ldrh	r6, [r3, #0]
 8007006:	4854      	ldr	r0, [pc, #336]	; (8007158 <_printf_i+0x244>)
 8007008:	2f6f      	cmp	r7, #111	; 0x6f
 800700a:	bf0c      	ite	eq
 800700c:	2308      	moveq	r3, #8
 800700e:	230a      	movne	r3, #10
 8007010:	2100      	movs	r1, #0
 8007012:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007016:	6865      	ldr	r5, [r4, #4]
 8007018:	60a5      	str	r5, [r4, #8]
 800701a:	2d00      	cmp	r5, #0
 800701c:	bfa2      	ittt	ge
 800701e:	6821      	ldrge	r1, [r4, #0]
 8007020:	f021 0104 	bicge.w	r1, r1, #4
 8007024:	6021      	strge	r1, [r4, #0]
 8007026:	b90e      	cbnz	r6, 800702c <_printf_i+0x118>
 8007028:	2d00      	cmp	r5, #0
 800702a:	d04d      	beq.n	80070c8 <_printf_i+0x1b4>
 800702c:	4615      	mov	r5, r2
 800702e:	fbb6 f1f3 	udiv	r1, r6, r3
 8007032:	fb03 6711 	mls	r7, r3, r1, r6
 8007036:	5dc7      	ldrb	r7, [r0, r7]
 8007038:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800703c:	4637      	mov	r7, r6
 800703e:	42bb      	cmp	r3, r7
 8007040:	460e      	mov	r6, r1
 8007042:	d9f4      	bls.n	800702e <_printf_i+0x11a>
 8007044:	2b08      	cmp	r3, #8
 8007046:	d10b      	bne.n	8007060 <_printf_i+0x14c>
 8007048:	6823      	ldr	r3, [r4, #0]
 800704a:	07de      	lsls	r6, r3, #31
 800704c:	d508      	bpl.n	8007060 <_printf_i+0x14c>
 800704e:	6923      	ldr	r3, [r4, #16]
 8007050:	6861      	ldr	r1, [r4, #4]
 8007052:	4299      	cmp	r1, r3
 8007054:	bfde      	ittt	le
 8007056:	2330      	movle	r3, #48	; 0x30
 8007058:	f805 3c01 	strble.w	r3, [r5, #-1]
 800705c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007060:	1b52      	subs	r2, r2, r5
 8007062:	6122      	str	r2, [r4, #16]
 8007064:	f8cd a000 	str.w	sl, [sp]
 8007068:	464b      	mov	r3, r9
 800706a:	aa03      	add	r2, sp, #12
 800706c:	4621      	mov	r1, r4
 800706e:	4640      	mov	r0, r8
 8007070:	f7ff fee2 	bl	8006e38 <_printf_common>
 8007074:	3001      	adds	r0, #1
 8007076:	d14c      	bne.n	8007112 <_printf_i+0x1fe>
 8007078:	f04f 30ff 	mov.w	r0, #4294967295
 800707c:	b004      	add	sp, #16
 800707e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007082:	4835      	ldr	r0, [pc, #212]	; (8007158 <_printf_i+0x244>)
 8007084:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007088:	6829      	ldr	r1, [r5, #0]
 800708a:	6823      	ldr	r3, [r4, #0]
 800708c:	f851 6b04 	ldr.w	r6, [r1], #4
 8007090:	6029      	str	r1, [r5, #0]
 8007092:	061d      	lsls	r5, r3, #24
 8007094:	d514      	bpl.n	80070c0 <_printf_i+0x1ac>
 8007096:	07df      	lsls	r7, r3, #31
 8007098:	bf44      	itt	mi
 800709a:	f043 0320 	orrmi.w	r3, r3, #32
 800709e:	6023      	strmi	r3, [r4, #0]
 80070a0:	b91e      	cbnz	r6, 80070aa <_printf_i+0x196>
 80070a2:	6823      	ldr	r3, [r4, #0]
 80070a4:	f023 0320 	bic.w	r3, r3, #32
 80070a8:	6023      	str	r3, [r4, #0]
 80070aa:	2310      	movs	r3, #16
 80070ac:	e7b0      	b.n	8007010 <_printf_i+0xfc>
 80070ae:	6823      	ldr	r3, [r4, #0]
 80070b0:	f043 0320 	orr.w	r3, r3, #32
 80070b4:	6023      	str	r3, [r4, #0]
 80070b6:	2378      	movs	r3, #120	; 0x78
 80070b8:	4828      	ldr	r0, [pc, #160]	; (800715c <_printf_i+0x248>)
 80070ba:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80070be:	e7e3      	b.n	8007088 <_printf_i+0x174>
 80070c0:	0659      	lsls	r1, r3, #25
 80070c2:	bf48      	it	mi
 80070c4:	b2b6      	uxthmi	r6, r6
 80070c6:	e7e6      	b.n	8007096 <_printf_i+0x182>
 80070c8:	4615      	mov	r5, r2
 80070ca:	e7bb      	b.n	8007044 <_printf_i+0x130>
 80070cc:	682b      	ldr	r3, [r5, #0]
 80070ce:	6826      	ldr	r6, [r4, #0]
 80070d0:	6961      	ldr	r1, [r4, #20]
 80070d2:	1d18      	adds	r0, r3, #4
 80070d4:	6028      	str	r0, [r5, #0]
 80070d6:	0635      	lsls	r5, r6, #24
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	d501      	bpl.n	80070e0 <_printf_i+0x1cc>
 80070dc:	6019      	str	r1, [r3, #0]
 80070de:	e002      	b.n	80070e6 <_printf_i+0x1d2>
 80070e0:	0670      	lsls	r0, r6, #25
 80070e2:	d5fb      	bpl.n	80070dc <_printf_i+0x1c8>
 80070e4:	8019      	strh	r1, [r3, #0]
 80070e6:	2300      	movs	r3, #0
 80070e8:	6123      	str	r3, [r4, #16]
 80070ea:	4615      	mov	r5, r2
 80070ec:	e7ba      	b.n	8007064 <_printf_i+0x150>
 80070ee:	682b      	ldr	r3, [r5, #0]
 80070f0:	1d1a      	adds	r2, r3, #4
 80070f2:	602a      	str	r2, [r5, #0]
 80070f4:	681d      	ldr	r5, [r3, #0]
 80070f6:	6862      	ldr	r2, [r4, #4]
 80070f8:	2100      	movs	r1, #0
 80070fa:	4628      	mov	r0, r5
 80070fc:	f7f9 f870 	bl	80001e0 <memchr>
 8007100:	b108      	cbz	r0, 8007106 <_printf_i+0x1f2>
 8007102:	1b40      	subs	r0, r0, r5
 8007104:	6060      	str	r0, [r4, #4]
 8007106:	6863      	ldr	r3, [r4, #4]
 8007108:	6123      	str	r3, [r4, #16]
 800710a:	2300      	movs	r3, #0
 800710c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007110:	e7a8      	b.n	8007064 <_printf_i+0x150>
 8007112:	6923      	ldr	r3, [r4, #16]
 8007114:	462a      	mov	r2, r5
 8007116:	4649      	mov	r1, r9
 8007118:	4640      	mov	r0, r8
 800711a:	47d0      	blx	sl
 800711c:	3001      	adds	r0, #1
 800711e:	d0ab      	beq.n	8007078 <_printf_i+0x164>
 8007120:	6823      	ldr	r3, [r4, #0]
 8007122:	079b      	lsls	r3, r3, #30
 8007124:	d413      	bmi.n	800714e <_printf_i+0x23a>
 8007126:	68e0      	ldr	r0, [r4, #12]
 8007128:	9b03      	ldr	r3, [sp, #12]
 800712a:	4298      	cmp	r0, r3
 800712c:	bfb8      	it	lt
 800712e:	4618      	movlt	r0, r3
 8007130:	e7a4      	b.n	800707c <_printf_i+0x168>
 8007132:	2301      	movs	r3, #1
 8007134:	4632      	mov	r2, r6
 8007136:	4649      	mov	r1, r9
 8007138:	4640      	mov	r0, r8
 800713a:	47d0      	blx	sl
 800713c:	3001      	adds	r0, #1
 800713e:	d09b      	beq.n	8007078 <_printf_i+0x164>
 8007140:	3501      	adds	r5, #1
 8007142:	68e3      	ldr	r3, [r4, #12]
 8007144:	9903      	ldr	r1, [sp, #12]
 8007146:	1a5b      	subs	r3, r3, r1
 8007148:	42ab      	cmp	r3, r5
 800714a:	dcf2      	bgt.n	8007132 <_printf_i+0x21e>
 800714c:	e7eb      	b.n	8007126 <_printf_i+0x212>
 800714e:	2500      	movs	r5, #0
 8007150:	f104 0619 	add.w	r6, r4, #25
 8007154:	e7f5      	b.n	8007142 <_printf_i+0x22e>
 8007156:	bf00      	nop
 8007158:	080074cd 	.word	0x080074cd
 800715c:	080074de 	.word	0x080074de

08007160 <memcpy>:
 8007160:	440a      	add	r2, r1
 8007162:	4291      	cmp	r1, r2
 8007164:	f100 33ff 	add.w	r3, r0, #4294967295
 8007168:	d100      	bne.n	800716c <memcpy+0xc>
 800716a:	4770      	bx	lr
 800716c:	b510      	push	{r4, lr}
 800716e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007172:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007176:	4291      	cmp	r1, r2
 8007178:	d1f9      	bne.n	800716e <memcpy+0xe>
 800717a:	bd10      	pop	{r4, pc}

0800717c <memmove>:
 800717c:	4288      	cmp	r0, r1
 800717e:	b510      	push	{r4, lr}
 8007180:	eb01 0402 	add.w	r4, r1, r2
 8007184:	d902      	bls.n	800718c <memmove+0x10>
 8007186:	4284      	cmp	r4, r0
 8007188:	4623      	mov	r3, r4
 800718a:	d807      	bhi.n	800719c <memmove+0x20>
 800718c:	1e43      	subs	r3, r0, #1
 800718e:	42a1      	cmp	r1, r4
 8007190:	d008      	beq.n	80071a4 <memmove+0x28>
 8007192:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007196:	f803 2f01 	strb.w	r2, [r3, #1]!
 800719a:	e7f8      	b.n	800718e <memmove+0x12>
 800719c:	4402      	add	r2, r0
 800719e:	4601      	mov	r1, r0
 80071a0:	428a      	cmp	r2, r1
 80071a2:	d100      	bne.n	80071a6 <memmove+0x2a>
 80071a4:	bd10      	pop	{r4, pc}
 80071a6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80071aa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80071ae:	e7f7      	b.n	80071a0 <memmove+0x24>

080071b0 <_free_r>:
 80071b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80071b2:	2900      	cmp	r1, #0
 80071b4:	d044      	beq.n	8007240 <_free_r+0x90>
 80071b6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80071ba:	9001      	str	r0, [sp, #4]
 80071bc:	2b00      	cmp	r3, #0
 80071be:	f1a1 0404 	sub.w	r4, r1, #4
 80071c2:	bfb8      	it	lt
 80071c4:	18e4      	addlt	r4, r4, r3
 80071c6:	f000 f913 	bl	80073f0 <__malloc_lock>
 80071ca:	4a1e      	ldr	r2, [pc, #120]	; (8007244 <_free_r+0x94>)
 80071cc:	9801      	ldr	r0, [sp, #4]
 80071ce:	6813      	ldr	r3, [r2, #0]
 80071d0:	b933      	cbnz	r3, 80071e0 <_free_r+0x30>
 80071d2:	6063      	str	r3, [r4, #4]
 80071d4:	6014      	str	r4, [r2, #0]
 80071d6:	b003      	add	sp, #12
 80071d8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80071dc:	f000 b90e 	b.w	80073fc <__malloc_unlock>
 80071e0:	42a3      	cmp	r3, r4
 80071e2:	d908      	bls.n	80071f6 <_free_r+0x46>
 80071e4:	6825      	ldr	r5, [r4, #0]
 80071e6:	1961      	adds	r1, r4, r5
 80071e8:	428b      	cmp	r3, r1
 80071ea:	bf01      	itttt	eq
 80071ec:	6819      	ldreq	r1, [r3, #0]
 80071ee:	685b      	ldreq	r3, [r3, #4]
 80071f0:	1949      	addeq	r1, r1, r5
 80071f2:	6021      	streq	r1, [r4, #0]
 80071f4:	e7ed      	b.n	80071d2 <_free_r+0x22>
 80071f6:	461a      	mov	r2, r3
 80071f8:	685b      	ldr	r3, [r3, #4]
 80071fa:	b10b      	cbz	r3, 8007200 <_free_r+0x50>
 80071fc:	42a3      	cmp	r3, r4
 80071fe:	d9fa      	bls.n	80071f6 <_free_r+0x46>
 8007200:	6811      	ldr	r1, [r2, #0]
 8007202:	1855      	adds	r5, r2, r1
 8007204:	42a5      	cmp	r5, r4
 8007206:	d10b      	bne.n	8007220 <_free_r+0x70>
 8007208:	6824      	ldr	r4, [r4, #0]
 800720a:	4421      	add	r1, r4
 800720c:	1854      	adds	r4, r2, r1
 800720e:	42a3      	cmp	r3, r4
 8007210:	6011      	str	r1, [r2, #0]
 8007212:	d1e0      	bne.n	80071d6 <_free_r+0x26>
 8007214:	681c      	ldr	r4, [r3, #0]
 8007216:	685b      	ldr	r3, [r3, #4]
 8007218:	6053      	str	r3, [r2, #4]
 800721a:	4421      	add	r1, r4
 800721c:	6011      	str	r1, [r2, #0]
 800721e:	e7da      	b.n	80071d6 <_free_r+0x26>
 8007220:	d902      	bls.n	8007228 <_free_r+0x78>
 8007222:	230c      	movs	r3, #12
 8007224:	6003      	str	r3, [r0, #0]
 8007226:	e7d6      	b.n	80071d6 <_free_r+0x26>
 8007228:	6825      	ldr	r5, [r4, #0]
 800722a:	1961      	adds	r1, r4, r5
 800722c:	428b      	cmp	r3, r1
 800722e:	bf04      	itt	eq
 8007230:	6819      	ldreq	r1, [r3, #0]
 8007232:	685b      	ldreq	r3, [r3, #4]
 8007234:	6063      	str	r3, [r4, #4]
 8007236:	bf04      	itt	eq
 8007238:	1949      	addeq	r1, r1, r5
 800723a:	6021      	streq	r1, [r4, #0]
 800723c:	6054      	str	r4, [r2, #4]
 800723e:	e7ca      	b.n	80071d6 <_free_r+0x26>
 8007240:	b003      	add	sp, #12
 8007242:	bd30      	pop	{r4, r5, pc}
 8007244:	20001740 	.word	0x20001740

08007248 <sbrk_aligned>:
 8007248:	b570      	push	{r4, r5, r6, lr}
 800724a:	4e0e      	ldr	r6, [pc, #56]	; (8007284 <sbrk_aligned+0x3c>)
 800724c:	460c      	mov	r4, r1
 800724e:	6831      	ldr	r1, [r6, #0]
 8007250:	4605      	mov	r5, r0
 8007252:	b911      	cbnz	r1, 800725a <sbrk_aligned+0x12>
 8007254:	f000 f8bc 	bl	80073d0 <_sbrk_r>
 8007258:	6030      	str	r0, [r6, #0]
 800725a:	4621      	mov	r1, r4
 800725c:	4628      	mov	r0, r5
 800725e:	f000 f8b7 	bl	80073d0 <_sbrk_r>
 8007262:	1c43      	adds	r3, r0, #1
 8007264:	d00a      	beq.n	800727c <sbrk_aligned+0x34>
 8007266:	1cc4      	adds	r4, r0, #3
 8007268:	f024 0403 	bic.w	r4, r4, #3
 800726c:	42a0      	cmp	r0, r4
 800726e:	d007      	beq.n	8007280 <sbrk_aligned+0x38>
 8007270:	1a21      	subs	r1, r4, r0
 8007272:	4628      	mov	r0, r5
 8007274:	f000 f8ac 	bl	80073d0 <_sbrk_r>
 8007278:	3001      	adds	r0, #1
 800727a:	d101      	bne.n	8007280 <sbrk_aligned+0x38>
 800727c:	f04f 34ff 	mov.w	r4, #4294967295
 8007280:	4620      	mov	r0, r4
 8007282:	bd70      	pop	{r4, r5, r6, pc}
 8007284:	20001744 	.word	0x20001744

08007288 <_malloc_r>:
 8007288:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800728c:	1ccd      	adds	r5, r1, #3
 800728e:	f025 0503 	bic.w	r5, r5, #3
 8007292:	3508      	adds	r5, #8
 8007294:	2d0c      	cmp	r5, #12
 8007296:	bf38      	it	cc
 8007298:	250c      	movcc	r5, #12
 800729a:	2d00      	cmp	r5, #0
 800729c:	4607      	mov	r7, r0
 800729e:	db01      	blt.n	80072a4 <_malloc_r+0x1c>
 80072a0:	42a9      	cmp	r1, r5
 80072a2:	d905      	bls.n	80072b0 <_malloc_r+0x28>
 80072a4:	230c      	movs	r3, #12
 80072a6:	603b      	str	r3, [r7, #0]
 80072a8:	2600      	movs	r6, #0
 80072aa:	4630      	mov	r0, r6
 80072ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80072b0:	4e2e      	ldr	r6, [pc, #184]	; (800736c <_malloc_r+0xe4>)
 80072b2:	f000 f89d 	bl	80073f0 <__malloc_lock>
 80072b6:	6833      	ldr	r3, [r6, #0]
 80072b8:	461c      	mov	r4, r3
 80072ba:	bb34      	cbnz	r4, 800730a <_malloc_r+0x82>
 80072bc:	4629      	mov	r1, r5
 80072be:	4638      	mov	r0, r7
 80072c0:	f7ff ffc2 	bl	8007248 <sbrk_aligned>
 80072c4:	1c43      	adds	r3, r0, #1
 80072c6:	4604      	mov	r4, r0
 80072c8:	d14d      	bne.n	8007366 <_malloc_r+0xde>
 80072ca:	6834      	ldr	r4, [r6, #0]
 80072cc:	4626      	mov	r6, r4
 80072ce:	2e00      	cmp	r6, #0
 80072d0:	d140      	bne.n	8007354 <_malloc_r+0xcc>
 80072d2:	6823      	ldr	r3, [r4, #0]
 80072d4:	4631      	mov	r1, r6
 80072d6:	4638      	mov	r0, r7
 80072d8:	eb04 0803 	add.w	r8, r4, r3
 80072dc:	f000 f878 	bl	80073d0 <_sbrk_r>
 80072e0:	4580      	cmp	r8, r0
 80072e2:	d13a      	bne.n	800735a <_malloc_r+0xd2>
 80072e4:	6821      	ldr	r1, [r4, #0]
 80072e6:	3503      	adds	r5, #3
 80072e8:	1a6d      	subs	r5, r5, r1
 80072ea:	f025 0503 	bic.w	r5, r5, #3
 80072ee:	3508      	adds	r5, #8
 80072f0:	2d0c      	cmp	r5, #12
 80072f2:	bf38      	it	cc
 80072f4:	250c      	movcc	r5, #12
 80072f6:	4629      	mov	r1, r5
 80072f8:	4638      	mov	r0, r7
 80072fa:	f7ff ffa5 	bl	8007248 <sbrk_aligned>
 80072fe:	3001      	adds	r0, #1
 8007300:	d02b      	beq.n	800735a <_malloc_r+0xd2>
 8007302:	6823      	ldr	r3, [r4, #0]
 8007304:	442b      	add	r3, r5
 8007306:	6023      	str	r3, [r4, #0]
 8007308:	e00e      	b.n	8007328 <_malloc_r+0xa0>
 800730a:	6822      	ldr	r2, [r4, #0]
 800730c:	1b52      	subs	r2, r2, r5
 800730e:	d41e      	bmi.n	800734e <_malloc_r+0xc6>
 8007310:	2a0b      	cmp	r2, #11
 8007312:	d916      	bls.n	8007342 <_malloc_r+0xba>
 8007314:	1961      	adds	r1, r4, r5
 8007316:	42a3      	cmp	r3, r4
 8007318:	6025      	str	r5, [r4, #0]
 800731a:	bf18      	it	ne
 800731c:	6059      	strne	r1, [r3, #4]
 800731e:	6863      	ldr	r3, [r4, #4]
 8007320:	bf08      	it	eq
 8007322:	6031      	streq	r1, [r6, #0]
 8007324:	5162      	str	r2, [r4, r5]
 8007326:	604b      	str	r3, [r1, #4]
 8007328:	4638      	mov	r0, r7
 800732a:	f104 060b 	add.w	r6, r4, #11
 800732e:	f000 f865 	bl	80073fc <__malloc_unlock>
 8007332:	f026 0607 	bic.w	r6, r6, #7
 8007336:	1d23      	adds	r3, r4, #4
 8007338:	1af2      	subs	r2, r6, r3
 800733a:	d0b6      	beq.n	80072aa <_malloc_r+0x22>
 800733c:	1b9b      	subs	r3, r3, r6
 800733e:	50a3      	str	r3, [r4, r2]
 8007340:	e7b3      	b.n	80072aa <_malloc_r+0x22>
 8007342:	6862      	ldr	r2, [r4, #4]
 8007344:	42a3      	cmp	r3, r4
 8007346:	bf0c      	ite	eq
 8007348:	6032      	streq	r2, [r6, #0]
 800734a:	605a      	strne	r2, [r3, #4]
 800734c:	e7ec      	b.n	8007328 <_malloc_r+0xa0>
 800734e:	4623      	mov	r3, r4
 8007350:	6864      	ldr	r4, [r4, #4]
 8007352:	e7b2      	b.n	80072ba <_malloc_r+0x32>
 8007354:	4634      	mov	r4, r6
 8007356:	6876      	ldr	r6, [r6, #4]
 8007358:	e7b9      	b.n	80072ce <_malloc_r+0x46>
 800735a:	230c      	movs	r3, #12
 800735c:	603b      	str	r3, [r7, #0]
 800735e:	4638      	mov	r0, r7
 8007360:	f000 f84c 	bl	80073fc <__malloc_unlock>
 8007364:	e7a1      	b.n	80072aa <_malloc_r+0x22>
 8007366:	6025      	str	r5, [r4, #0]
 8007368:	e7de      	b.n	8007328 <_malloc_r+0xa0>
 800736a:	bf00      	nop
 800736c:	20001740 	.word	0x20001740

08007370 <_realloc_r>:
 8007370:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007374:	4680      	mov	r8, r0
 8007376:	4614      	mov	r4, r2
 8007378:	460e      	mov	r6, r1
 800737a:	b921      	cbnz	r1, 8007386 <_realloc_r+0x16>
 800737c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007380:	4611      	mov	r1, r2
 8007382:	f7ff bf81 	b.w	8007288 <_malloc_r>
 8007386:	b92a      	cbnz	r2, 8007394 <_realloc_r+0x24>
 8007388:	f7ff ff12 	bl	80071b0 <_free_r>
 800738c:	4625      	mov	r5, r4
 800738e:	4628      	mov	r0, r5
 8007390:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007394:	f000 f838 	bl	8007408 <_malloc_usable_size_r>
 8007398:	4284      	cmp	r4, r0
 800739a:	4607      	mov	r7, r0
 800739c:	d802      	bhi.n	80073a4 <_realloc_r+0x34>
 800739e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80073a2:	d812      	bhi.n	80073ca <_realloc_r+0x5a>
 80073a4:	4621      	mov	r1, r4
 80073a6:	4640      	mov	r0, r8
 80073a8:	f7ff ff6e 	bl	8007288 <_malloc_r>
 80073ac:	4605      	mov	r5, r0
 80073ae:	2800      	cmp	r0, #0
 80073b0:	d0ed      	beq.n	800738e <_realloc_r+0x1e>
 80073b2:	42bc      	cmp	r4, r7
 80073b4:	4622      	mov	r2, r4
 80073b6:	4631      	mov	r1, r6
 80073b8:	bf28      	it	cs
 80073ba:	463a      	movcs	r2, r7
 80073bc:	f7ff fed0 	bl	8007160 <memcpy>
 80073c0:	4631      	mov	r1, r6
 80073c2:	4640      	mov	r0, r8
 80073c4:	f7ff fef4 	bl	80071b0 <_free_r>
 80073c8:	e7e1      	b.n	800738e <_realloc_r+0x1e>
 80073ca:	4635      	mov	r5, r6
 80073cc:	e7df      	b.n	800738e <_realloc_r+0x1e>
	...

080073d0 <_sbrk_r>:
 80073d0:	b538      	push	{r3, r4, r5, lr}
 80073d2:	4d06      	ldr	r5, [pc, #24]	; (80073ec <_sbrk_r+0x1c>)
 80073d4:	2300      	movs	r3, #0
 80073d6:	4604      	mov	r4, r0
 80073d8:	4608      	mov	r0, r1
 80073da:	602b      	str	r3, [r5, #0]
 80073dc:	f7f9 fa62 	bl	80008a4 <_sbrk>
 80073e0:	1c43      	adds	r3, r0, #1
 80073e2:	d102      	bne.n	80073ea <_sbrk_r+0x1a>
 80073e4:	682b      	ldr	r3, [r5, #0]
 80073e6:	b103      	cbz	r3, 80073ea <_sbrk_r+0x1a>
 80073e8:	6023      	str	r3, [r4, #0]
 80073ea:	bd38      	pop	{r3, r4, r5, pc}
 80073ec:	20001748 	.word	0x20001748

080073f0 <__malloc_lock>:
 80073f0:	4801      	ldr	r0, [pc, #4]	; (80073f8 <__malloc_lock+0x8>)
 80073f2:	f000 b811 	b.w	8007418 <__retarget_lock_acquire_recursive>
 80073f6:	bf00      	nop
 80073f8:	2000174c 	.word	0x2000174c

080073fc <__malloc_unlock>:
 80073fc:	4801      	ldr	r0, [pc, #4]	; (8007404 <__malloc_unlock+0x8>)
 80073fe:	f000 b80c 	b.w	800741a <__retarget_lock_release_recursive>
 8007402:	bf00      	nop
 8007404:	2000174c 	.word	0x2000174c

08007408 <_malloc_usable_size_r>:
 8007408:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800740c:	1f18      	subs	r0, r3, #4
 800740e:	2b00      	cmp	r3, #0
 8007410:	bfbc      	itt	lt
 8007412:	580b      	ldrlt	r3, [r1, r0]
 8007414:	18c0      	addlt	r0, r0, r3
 8007416:	4770      	bx	lr

08007418 <__retarget_lock_acquire_recursive>:
 8007418:	4770      	bx	lr

0800741a <__retarget_lock_release_recursive>:
 800741a:	4770      	bx	lr

0800741c <_init>:
 800741c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800741e:	bf00      	nop
 8007420:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007422:	bc08      	pop	{r3}
 8007424:	469e      	mov	lr, r3
 8007426:	4770      	bx	lr

08007428 <_fini>:
 8007428:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800742a:	bf00      	nop
 800742c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800742e:	bc08      	pop	{r3}
 8007430:	469e      	mov	lr, r3
 8007432:	4770      	bx	lr
