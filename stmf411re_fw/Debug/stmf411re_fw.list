
stmf411re_fw.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006460  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  080065f8  080065f8  000165f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006658  08006658  000201a4  2**0
                  CONTENTS
  4 .ARM          00000008  08006658  08006658  00016658  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006660  08006660  000201a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006660  08006660  00016660  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006664  08006664  00016664  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001a4  20000000  08006668  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000131c  200001a4  0800680c  000201a4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200014c0  0800680c  000214c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201a4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000161e1  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000035c0  00000000  00000000  000363b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ba8  00000000  00000000  00039978  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a30  00000000  00000000  0003a520  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019abd  00000000  00000000  0003af50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014692  00000000  00000000  00054a0d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00087287  00000000  00000000  0006909f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f0326  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002cc8  00000000  00000000  000f037c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	200001a4 	.word	0x200001a4
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080065e0 	.word	0x080065e0

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	200001a8 	.word	0x200001a8
 80001d4:	080065e0 	.word	0x080065e0

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b96e 	b.w	80004cc <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468c      	mov	ip, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	f040 8083 	bne.w	800031e <__udivmoddi4+0x116>
 8000218:	428a      	cmp	r2, r1
 800021a:	4617      	mov	r7, r2
 800021c:	d947      	bls.n	80002ae <__udivmoddi4+0xa6>
 800021e:	fab2 f282 	clz	r2, r2
 8000222:	b142      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000224:	f1c2 0020 	rsb	r0, r2, #32
 8000228:	fa24 f000 	lsr.w	r0, r4, r0
 800022c:	4091      	lsls	r1, r2
 800022e:	4097      	lsls	r7, r2
 8000230:	ea40 0c01 	orr.w	ip, r0, r1
 8000234:	4094      	lsls	r4, r2
 8000236:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800023a:	0c23      	lsrs	r3, r4, #16
 800023c:	fbbc f6f8 	udiv	r6, ip, r8
 8000240:	fa1f fe87 	uxth.w	lr, r7
 8000244:	fb08 c116 	mls	r1, r8, r6, ip
 8000248:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024c:	fb06 f10e 	mul.w	r1, r6, lr
 8000250:	4299      	cmp	r1, r3
 8000252:	d909      	bls.n	8000268 <__udivmoddi4+0x60>
 8000254:	18fb      	adds	r3, r7, r3
 8000256:	f106 30ff 	add.w	r0, r6, #4294967295
 800025a:	f080 8119 	bcs.w	8000490 <__udivmoddi4+0x288>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 8116 	bls.w	8000490 <__udivmoddi4+0x288>
 8000264:	3e02      	subs	r6, #2
 8000266:	443b      	add	r3, r7
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000270:	fb08 3310 	mls	r3, r8, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 fe0e 	mul.w	lr, r0, lr
 800027c:	45a6      	cmp	lr, r4
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x8c>
 8000280:	193c      	adds	r4, r7, r4
 8000282:	f100 33ff 	add.w	r3, r0, #4294967295
 8000286:	f080 8105 	bcs.w	8000494 <__udivmoddi4+0x28c>
 800028a:	45a6      	cmp	lr, r4
 800028c:	f240 8102 	bls.w	8000494 <__udivmoddi4+0x28c>
 8000290:	3802      	subs	r0, #2
 8000292:	443c      	add	r4, r7
 8000294:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000298:	eba4 040e 	sub.w	r4, r4, lr
 800029c:	2600      	movs	r6, #0
 800029e:	b11d      	cbz	r5, 80002a8 <__udivmoddi4+0xa0>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c5 4300 	strd	r4, r3, [r5]
 80002a8:	4631      	mov	r1, r6
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	b902      	cbnz	r2, 80002b2 <__udivmoddi4+0xaa>
 80002b0:	deff      	udf	#255	; 0xff
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d150      	bne.n	800035c <__udivmoddi4+0x154>
 80002ba:	1bcb      	subs	r3, r1, r7
 80002bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002c0:	fa1f f887 	uxth.w	r8, r7
 80002c4:	2601      	movs	r6, #1
 80002c6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ca:	0c21      	lsrs	r1, r4, #16
 80002cc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002d4:	fb08 f30c 	mul.w	r3, r8, ip
 80002d8:	428b      	cmp	r3, r1
 80002da:	d907      	bls.n	80002ec <__udivmoddi4+0xe4>
 80002dc:	1879      	adds	r1, r7, r1
 80002de:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002e2:	d202      	bcs.n	80002ea <__udivmoddi4+0xe2>
 80002e4:	428b      	cmp	r3, r1
 80002e6:	f200 80e9 	bhi.w	80004bc <__udivmoddi4+0x2b4>
 80002ea:	4684      	mov	ip, r0
 80002ec:	1ac9      	subs	r1, r1, r3
 80002ee:	b2a3      	uxth	r3, r4
 80002f0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002f4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002f8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002fc:	fb08 f800 	mul.w	r8, r8, r0
 8000300:	45a0      	cmp	r8, r4
 8000302:	d907      	bls.n	8000314 <__udivmoddi4+0x10c>
 8000304:	193c      	adds	r4, r7, r4
 8000306:	f100 33ff 	add.w	r3, r0, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x10a>
 800030c:	45a0      	cmp	r8, r4
 800030e:	f200 80d9 	bhi.w	80004c4 <__udivmoddi4+0x2bc>
 8000312:	4618      	mov	r0, r3
 8000314:	eba4 0408 	sub.w	r4, r4, r8
 8000318:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800031c:	e7bf      	b.n	800029e <__udivmoddi4+0x96>
 800031e:	428b      	cmp	r3, r1
 8000320:	d909      	bls.n	8000336 <__udivmoddi4+0x12e>
 8000322:	2d00      	cmp	r5, #0
 8000324:	f000 80b1 	beq.w	800048a <__udivmoddi4+0x282>
 8000328:	2600      	movs	r6, #0
 800032a:	e9c5 0100 	strd	r0, r1, [r5]
 800032e:	4630      	mov	r0, r6
 8000330:	4631      	mov	r1, r6
 8000332:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000336:	fab3 f683 	clz	r6, r3
 800033a:	2e00      	cmp	r6, #0
 800033c:	d14a      	bne.n	80003d4 <__udivmoddi4+0x1cc>
 800033e:	428b      	cmp	r3, r1
 8000340:	d302      	bcc.n	8000348 <__udivmoddi4+0x140>
 8000342:	4282      	cmp	r2, r0
 8000344:	f200 80b8 	bhi.w	80004b8 <__udivmoddi4+0x2b0>
 8000348:	1a84      	subs	r4, r0, r2
 800034a:	eb61 0103 	sbc.w	r1, r1, r3
 800034e:	2001      	movs	r0, #1
 8000350:	468c      	mov	ip, r1
 8000352:	2d00      	cmp	r5, #0
 8000354:	d0a8      	beq.n	80002a8 <__udivmoddi4+0xa0>
 8000356:	e9c5 4c00 	strd	r4, ip, [r5]
 800035a:	e7a5      	b.n	80002a8 <__udivmoddi4+0xa0>
 800035c:	f1c2 0320 	rsb	r3, r2, #32
 8000360:	fa20 f603 	lsr.w	r6, r0, r3
 8000364:	4097      	lsls	r7, r2
 8000366:	fa01 f002 	lsl.w	r0, r1, r2
 800036a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800036e:	40d9      	lsrs	r1, r3
 8000370:	4330      	orrs	r0, r6
 8000372:	0c03      	lsrs	r3, r0, #16
 8000374:	fbb1 f6fe 	udiv	r6, r1, lr
 8000378:	fa1f f887 	uxth.w	r8, r7
 800037c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000380:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000384:	fb06 f108 	mul.w	r1, r6, r8
 8000388:	4299      	cmp	r1, r3
 800038a:	fa04 f402 	lsl.w	r4, r4, r2
 800038e:	d909      	bls.n	80003a4 <__udivmoddi4+0x19c>
 8000390:	18fb      	adds	r3, r7, r3
 8000392:	f106 3cff 	add.w	ip, r6, #4294967295
 8000396:	f080 808d 	bcs.w	80004b4 <__udivmoddi4+0x2ac>
 800039a:	4299      	cmp	r1, r3
 800039c:	f240 808a 	bls.w	80004b4 <__udivmoddi4+0x2ac>
 80003a0:	3e02      	subs	r6, #2
 80003a2:	443b      	add	r3, r7
 80003a4:	1a5b      	subs	r3, r3, r1
 80003a6:	b281      	uxth	r1, r0
 80003a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80003ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80003b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003b4:	fb00 f308 	mul.w	r3, r0, r8
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d907      	bls.n	80003cc <__udivmoddi4+0x1c4>
 80003bc:	1879      	adds	r1, r7, r1
 80003be:	f100 3cff 	add.w	ip, r0, #4294967295
 80003c2:	d273      	bcs.n	80004ac <__udivmoddi4+0x2a4>
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d971      	bls.n	80004ac <__udivmoddi4+0x2a4>
 80003c8:	3802      	subs	r0, #2
 80003ca:	4439      	add	r1, r7
 80003cc:	1acb      	subs	r3, r1, r3
 80003ce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003d2:	e778      	b.n	80002c6 <__udivmoddi4+0xbe>
 80003d4:	f1c6 0c20 	rsb	ip, r6, #32
 80003d8:	fa03 f406 	lsl.w	r4, r3, r6
 80003dc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003e0:	431c      	orrs	r4, r3
 80003e2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003e6:	fa01 f306 	lsl.w	r3, r1, r6
 80003ea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003ee:	fa21 f10c 	lsr.w	r1, r1, ip
 80003f2:	431f      	orrs	r7, r3
 80003f4:	0c3b      	lsrs	r3, r7, #16
 80003f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003fa:	fa1f f884 	uxth.w	r8, r4
 80003fe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000402:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000406:	fb09 fa08 	mul.w	sl, r9, r8
 800040a:	458a      	cmp	sl, r1
 800040c:	fa02 f206 	lsl.w	r2, r2, r6
 8000410:	fa00 f306 	lsl.w	r3, r0, r6
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x220>
 8000416:	1861      	adds	r1, r4, r1
 8000418:	f109 30ff 	add.w	r0, r9, #4294967295
 800041c:	d248      	bcs.n	80004b0 <__udivmoddi4+0x2a8>
 800041e:	458a      	cmp	sl, r1
 8000420:	d946      	bls.n	80004b0 <__udivmoddi4+0x2a8>
 8000422:	f1a9 0902 	sub.w	r9, r9, #2
 8000426:	4421      	add	r1, r4
 8000428:	eba1 010a 	sub.w	r1, r1, sl
 800042c:	b2bf      	uxth	r7, r7
 800042e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000432:	fb0e 1110 	mls	r1, lr, r0, r1
 8000436:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800043a:	fb00 f808 	mul.w	r8, r0, r8
 800043e:	45b8      	cmp	r8, r7
 8000440:	d907      	bls.n	8000452 <__udivmoddi4+0x24a>
 8000442:	19e7      	adds	r7, r4, r7
 8000444:	f100 31ff 	add.w	r1, r0, #4294967295
 8000448:	d22e      	bcs.n	80004a8 <__udivmoddi4+0x2a0>
 800044a:	45b8      	cmp	r8, r7
 800044c:	d92c      	bls.n	80004a8 <__udivmoddi4+0x2a0>
 800044e:	3802      	subs	r0, #2
 8000450:	4427      	add	r7, r4
 8000452:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000456:	eba7 0708 	sub.w	r7, r7, r8
 800045a:	fba0 8902 	umull	r8, r9, r0, r2
 800045e:	454f      	cmp	r7, r9
 8000460:	46c6      	mov	lr, r8
 8000462:	4649      	mov	r1, r9
 8000464:	d31a      	bcc.n	800049c <__udivmoddi4+0x294>
 8000466:	d017      	beq.n	8000498 <__udivmoddi4+0x290>
 8000468:	b15d      	cbz	r5, 8000482 <__udivmoddi4+0x27a>
 800046a:	ebb3 020e 	subs.w	r2, r3, lr
 800046e:	eb67 0701 	sbc.w	r7, r7, r1
 8000472:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000476:	40f2      	lsrs	r2, r6
 8000478:	ea4c 0202 	orr.w	r2, ip, r2
 800047c:	40f7      	lsrs	r7, r6
 800047e:	e9c5 2700 	strd	r2, r7, [r5]
 8000482:	2600      	movs	r6, #0
 8000484:	4631      	mov	r1, r6
 8000486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e70b      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e9      	b.n	8000268 <__udivmoddi4+0x60>
 8000494:	4618      	mov	r0, r3
 8000496:	e6fd      	b.n	8000294 <__udivmoddi4+0x8c>
 8000498:	4543      	cmp	r3, r8
 800049a:	d2e5      	bcs.n	8000468 <__udivmoddi4+0x260>
 800049c:	ebb8 0e02 	subs.w	lr, r8, r2
 80004a0:	eb69 0104 	sbc.w	r1, r9, r4
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7df      	b.n	8000468 <__udivmoddi4+0x260>
 80004a8:	4608      	mov	r0, r1
 80004aa:	e7d2      	b.n	8000452 <__udivmoddi4+0x24a>
 80004ac:	4660      	mov	r0, ip
 80004ae:	e78d      	b.n	80003cc <__udivmoddi4+0x1c4>
 80004b0:	4681      	mov	r9, r0
 80004b2:	e7b9      	b.n	8000428 <__udivmoddi4+0x220>
 80004b4:	4666      	mov	r6, ip
 80004b6:	e775      	b.n	80003a4 <__udivmoddi4+0x19c>
 80004b8:	4630      	mov	r0, r6
 80004ba:	e74a      	b.n	8000352 <__udivmoddi4+0x14a>
 80004bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c0:	4439      	add	r1, r7
 80004c2:	e713      	b.n	80002ec <__udivmoddi4+0xe4>
 80004c4:	3802      	subs	r0, #2
 80004c6:	443c      	add	r4, r7
 80004c8:	e724      	b.n	8000314 <__udivmoddi4+0x10c>
 80004ca:	bf00      	nop

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <apInit>:


#include "ap.h"
extern uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len);
void apInit(void) {
 80004d0:	b480      	push	{r7}
 80004d2:	af00      	add	r7, sp, #0

}
 80004d4:	bf00      	nop
 80004d6:	46bd      	mov	sp, r7
 80004d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004dc:	4770      	bx	lr
	...

080004e0 <apMain>:

void apMain(void) {
 80004e0:	b580      	push	{r7, lr}
 80004e2:	af00      	add	r7, sp, #0
	while (1) {
		ledToggle(_DEF_LED1);
 80004e4:	2000      	movs	r0, #0
 80004e6:	f000 f9ff 	bl	80008e8 <ledToggle>
		delay(500);
 80004ea:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80004ee:	f000 f871 	bl	80005d4 <delay>
		CDC_Transmit_FS("test\n", 6);
 80004f2:	2106      	movs	r1, #6
 80004f4:	4801      	ldr	r0, [pc, #4]	; (80004fc <apMain+0x1c>)
 80004f6:	f005 fbe9 	bl	8005ccc <CDC_Transmit_FS>
		ledToggle(_DEF_LED1);
 80004fa:	e7f3      	b.n	80004e4 <apMain+0x4>
 80004fc:	080065f8 	.word	0x080065f8

08000500 <bspInit>:

#include "bsp.h"
void SystemClock_Config(void);

void bspInit(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b088      	sub	sp, #32
 8000504:	af00      	add	r7, sp, #0
  HAL_Init();
 8000506:	f000 fa17 	bl	8000938 <HAL_Init>
  SystemClock_Config();
 800050a:	f000 f86f 	bl	80005ec <SystemClock_Config>

  __HAL_RCC_GPIOC_CLK_ENABLE();
 800050e:	2300      	movs	r3, #0
 8000510:	60bb      	str	r3, [r7, #8]
 8000512:	4b2e      	ldr	r3, [pc, #184]	; (80005cc <bspInit+0xcc>)
 8000514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000516:	4a2d      	ldr	r2, [pc, #180]	; (80005cc <bspInit+0xcc>)
 8000518:	f043 0304 	orr.w	r3, r3, #4
 800051c:	6313      	str	r3, [r2, #48]	; 0x30
 800051e:	4b2b      	ldr	r3, [pc, #172]	; (80005cc <bspInit+0xcc>)
 8000520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000522:	f003 0304 	and.w	r3, r3, #4
 8000526:	60bb      	str	r3, [r7, #8]
 8000528:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800052a:	2300      	movs	r3, #0
 800052c:	607b      	str	r3, [r7, #4]
 800052e:	4b27      	ldr	r3, [pc, #156]	; (80005cc <bspInit+0xcc>)
 8000530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000532:	4a26      	ldr	r2, [pc, #152]	; (80005cc <bspInit+0xcc>)
 8000534:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000538:	6313      	str	r3, [r2, #48]	; 0x30
 800053a:	4b24      	ldr	r3, [pc, #144]	; (80005cc <bspInit+0xcc>)
 800053c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800053e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000542:	607b      	str	r3, [r7, #4]
 8000544:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000546:	2300      	movs	r3, #0
 8000548:	603b      	str	r3, [r7, #0]
 800054a:	4b20      	ldr	r3, [pc, #128]	; (80005cc <bspInit+0xcc>)
 800054c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800054e:	4a1f      	ldr	r2, [pc, #124]	; (80005cc <bspInit+0xcc>)
 8000550:	f043 0301 	orr.w	r3, r3, #1
 8000554:	6313      	str	r3, [r2, #48]	; 0x30
 8000556:	4b1d      	ldr	r3, [pc, #116]	; (80005cc <bspInit+0xcc>)
 8000558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800055a:	f003 0301 	and.w	r3, r3, #1
 800055e:	603b      	str	r3, [r7, #0]
 8000560:	683b      	ldr	r3, [r7, #0]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000562:	f107 030c 	add.w	r3, r7, #12
 8000566:	2200      	movs	r2, #0
 8000568:	601a      	str	r2, [r3, #0]
 800056a:	605a      	str	r2, [r3, #4]
 800056c:	609a      	str	r2, [r3, #8]
 800056e:	60da      	str	r2, [r3, #12]
 8000570:	611a      	str	r2, [r3, #16]

	GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000572:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000576:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000578:	2311      	movs	r3, #17
 800057a:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800057c:	2300      	movs	r3, #0
 800057e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000580:	2300      	movs	r3, #0
 8000582:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000584:	f107 030c 	add.w	r3, r7, #12
 8000588:	4619      	mov	r1, r3
 800058a:	4811      	ldr	r0, [pc, #68]	; (80005d0 <bspInit+0xd0>)
 800058c:	f000 fb7c 	bl	8000c88 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8000590:	2200      	movs	r2, #0
 8000592:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000596:	480e      	ldr	r0, [pc, #56]	; (80005d0 <bspInit+0xd0>)
 8000598:	f000 fcfa 	bl	8000f90 <HAL_GPIO_WritePin>
	delay(100);
 800059c:	2064      	movs	r0, #100	; 0x64
 800059e:	f000 f819 	bl	80005d4 <delay>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 80005a2:	2201      	movs	r2, #1
 80005a4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005a8:	4809      	ldr	r0, [pc, #36]	; (80005d0 <bspInit+0xd0>)
 80005aa:	f000 fcf1 	bl	8000f90 <HAL_GPIO_WritePin>

	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005ae:	2300      	movs	r3, #0
 80005b0:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005b2:	f107 030c 	add.w	r3, r7, #12
 80005b6:	4619      	mov	r1, r3
 80005b8:	4805      	ldr	r0, [pc, #20]	; (80005d0 <bspInit+0xd0>)
 80005ba:	f000 fb65 	bl	8000c88 <HAL_GPIO_Init>

  MX_USB_DEVICE_Init();
 80005be:	f005 fac7 	bl	8005b50 <MX_USB_DEVICE_Init>

}
 80005c2:	bf00      	nop
 80005c4:	3720      	adds	r7, #32
 80005c6:	46bd      	mov	sp, r7
 80005c8:	bd80      	pop	{r7, pc}
 80005ca:	bf00      	nop
 80005cc:	40023800 	.word	0x40023800
 80005d0:	40020000 	.word	0x40020000

080005d4 <delay>:
void delay(uint32_t ms)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b082      	sub	sp, #8
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]
  HAL_Delay(ms);
 80005dc:	6878      	ldr	r0, [r7, #4]
 80005de:	f000 fa1d 	bl	8000a1c <HAL_Delay>
}
 80005e2:	bf00      	nop
 80005e4:	3708      	adds	r7, #8
 80005e6:	46bd      	mov	sp, r7
 80005e8:	bd80      	pop	{r7, pc}
	...

080005ec <SystemClock_Config>:




void SystemClock_Config(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b094      	sub	sp, #80	; 0x50
 80005f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005f2:	f107 0320 	add.w	r3, r7, #32
 80005f6:	2230      	movs	r2, #48	; 0x30
 80005f8:	2100      	movs	r1, #0
 80005fa:	4618      	mov	r0, r3
 80005fc:	f005 ffe8 	bl	80065d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000600:	f107 030c 	add.w	r3, r7, #12
 8000604:	2200      	movs	r2, #0
 8000606:	601a      	str	r2, [r3, #0]
 8000608:	605a      	str	r2, [r3, #4]
 800060a:	609a      	str	r2, [r3, #8]
 800060c:	60da      	str	r2, [r3, #12]
 800060e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000610:	2300      	movs	r3, #0
 8000612:	60bb      	str	r3, [r7, #8]
 8000614:	4b27      	ldr	r3, [pc, #156]	; (80006b4 <SystemClock_Config+0xc8>)
 8000616:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000618:	4a26      	ldr	r2, [pc, #152]	; (80006b4 <SystemClock_Config+0xc8>)
 800061a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800061e:	6413      	str	r3, [r2, #64]	; 0x40
 8000620:	4b24      	ldr	r3, [pc, #144]	; (80006b4 <SystemClock_Config+0xc8>)
 8000622:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000624:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000628:	60bb      	str	r3, [r7, #8]
 800062a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800062c:	2300      	movs	r3, #0
 800062e:	607b      	str	r3, [r7, #4]
 8000630:	4b21      	ldr	r3, [pc, #132]	; (80006b8 <SystemClock_Config+0xcc>)
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	4a20      	ldr	r2, [pc, #128]	; (80006b8 <SystemClock_Config+0xcc>)
 8000636:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800063a:	6013      	str	r3, [r2, #0]
 800063c:	4b1e      	ldr	r3, [pc, #120]	; (80006b8 <SystemClock_Config+0xcc>)
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000644:	607b      	str	r3, [r7, #4]
 8000646:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000648:	2301      	movs	r3, #1
 800064a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800064c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000650:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000652:	2302      	movs	r3, #2
 8000654:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000656:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800065a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 800065c:	2319      	movs	r3, #25
 800065e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000660:	23c0      	movs	r3, #192	; 0xc0
 8000662:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000664:	2302      	movs	r3, #2
 8000666:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000668:	2304      	movs	r3, #4
 800066a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800066c:	f107 0320 	add.w	r3, r7, #32
 8000670:	4618      	mov	r0, r3
 8000672:	f001 fe43 	bl	80022fc <HAL_RCC_OscConfig>
 8000676:	4603      	mov	r3, r0
 8000678:	2b00      	cmp	r3, #0
 800067a:	d001      	beq.n	8000680 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800067c:	f000 f81e 	bl	80006bc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000680:	230f      	movs	r3, #15
 8000682:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000684:	2302      	movs	r3, #2
 8000686:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000688:	2300      	movs	r3, #0
 800068a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800068c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000690:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000692:	2300      	movs	r3, #0
 8000694:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000696:	f107 030c 	add.w	r3, r7, #12
 800069a:	2103      	movs	r1, #3
 800069c:	4618      	mov	r0, r3
 800069e:	f002 f8a5 	bl	80027ec <HAL_RCC_ClockConfig>
 80006a2:	4603      	mov	r3, r0
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d001      	beq.n	80006ac <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80006a8:	f000 f808 	bl	80006bc <Error_Handler>
  }
}
 80006ac:	bf00      	nop
 80006ae:	3750      	adds	r7, #80	; 0x50
 80006b0:	46bd      	mov	sp, r7
 80006b2:	bd80      	pop	{r7, pc}
 80006b4:	40023800 	.word	0x40023800
 80006b8:	40007000 	.word	0x40007000

080006bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006bc:	b480      	push	{r7}
 80006be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006c0:	b672      	cpsid	i
}
 80006c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006c4:	e7fe      	b.n	80006c4 <Error_Handler+0x8>
	...

080006c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006c8:	b480      	push	{r7}
 80006ca:	b083      	sub	sp, #12
 80006cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006ce:	2300      	movs	r3, #0
 80006d0:	607b      	str	r3, [r7, #4]
 80006d2:	4b10      	ldr	r3, [pc, #64]	; (8000714 <HAL_MspInit+0x4c>)
 80006d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006d6:	4a0f      	ldr	r2, [pc, #60]	; (8000714 <HAL_MspInit+0x4c>)
 80006d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006dc:	6453      	str	r3, [r2, #68]	; 0x44
 80006de:	4b0d      	ldr	r3, [pc, #52]	; (8000714 <HAL_MspInit+0x4c>)
 80006e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006e6:	607b      	str	r3, [r7, #4]
 80006e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006ea:	2300      	movs	r3, #0
 80006ec:	603b      	str	r3, [r7, #0]
 80006ee:	4b09      	ldr	r3, [pc, #36]	; (8000714 <HAL_MspInit+0x4c>)
 80006f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006f2:	4a08      	ldr	r2, [pc, #32]	; (8000714 <HAL_MspInit+0x4c>)
 80006f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006f8:	6413      	str	r3, [r2, #64]	; 0x40
 80006fa:	4b06      	ldr	r3, [pc, #24]	; (8000714 <HAL_MspInit+0x4c>)
 80006fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000702:	603b      	str	r3, [r7, #0]
 8000704:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000706:	bf00      	nop
 8000708:	370c      	adds	r7, #12
 800070a:	46bd      	mov	sp, r7
 800070c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000710:	4770      	bx	lr
 8000712:	bf00      	nop
 8000714:	40023800 	.word	0x40023800

08000718 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000718:	b480      	push	{r7}
 800071a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800071c:	e7fe      	b.n	800071c <NMI_Handler+0x4>

0800071e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800071e:	b480      	push	{r7}
 8000720:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000722:	e7fe      	b.n	8000722 <HardFault_Handler+0x4>

08000724 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000724:	b480      	push	{r7}
 8000726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000728:	e7fe      	b.n	8000728 <MemManage_Handler+0x4>

0800072a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800072a:	b480      	push	{r7}
 800072c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800072e:	e7fe      	b.n	800072e <BusFault_Handler+0x4>

08000730 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000730:	b480      	push	{r7}
 8000732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000734:	e7fe      	b.n	8000734 <UsageFault_Handler+0x4>

08000736 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000736:	b480      	push	{r7}
 8000738:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800073a:	bf00      	nop
 800073c:	46bd      	mov	sp, r7
 800073e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000742:	4770      	bx	lr

08000744 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000744:	b480      	push	{r7}
 8000746:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000748:	bf00      	nop
 800074a:	46bd      	mov	sp, r7
 800074c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000750:	4770      	bx	lr

08000752 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000752:	b480      	push	{r7}
 8000754:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000756:	bf00      	nop
 8000758:	46bd      	mov	sp, r7
 800075a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800075e:	4770      	bx	lr

08000760 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000764:	f000 f93a 	bl	80009dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000768:	bf00      	nop
 800076a:	bd80      	pop	{r7, pc}

0800076c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000770:	4802      	ldr	r0, [pc, #8]	; (800077c <OTG_FS_IRQHandler+0x10>)
 8000772:	f000 fd90 	bl	8001296 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000776:	bf00      	nop
 8000778:	bd80      	pop	{r7, pc}
 800077a:	bf00      	nop
 800077c:	200010b8 	.word	0x200010b8

08000780 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000780:	b480      	push	{r7}
 8000782:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000784:	4b06      	ldr	r3, [pc, #24]	; (80007a0 <SystemInit+0x20>)
 8000786:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800078a:	4a05      	ldr	r2, [pc, #20]	; (80007a0 <SystemInit+0x20>)
 800078c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000790:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000794:	bf00      	nop
 8000796:	46bd      	mov	sp, r7
 8000798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800079c:	4770      	bx	lr
 800079e:	bf00      	nop
 80007a0:	e000ed00 	.word	0xe000ed00

080007a4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80007a4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80007dc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80007a8:	480d      	ldr	r0, [pc, #52]	; (80007e0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80007aa:	490e      	ldr	r1, [pc, #56]	; (80007e4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80007ac:	4a0e      	ldr	r2, [pc, #56]	; (80007e8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80007ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007b0:	e002      	b.n	80007b8 <LoopCopyDataInit>

080007b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007b6:	3304      	adds	r3, #4

080007b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007bc:	d3f9      	bcc.n	80007b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007be:	4a0b      	ldr	r2, [pc, #44]	; (80007ec <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80007c0:	4c0b      	ldr	r4, [pc, #44]	; (80007f0 <LoopFillZerobss+0x26>)
  movs r3, #0
 80007c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007c4:	e001      	b.n	80007ca <LoopFillZerobss>

080007c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007c8:	3204      	adds	r2, #4

080007ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007cc:	d3fb      	bcc.n	80007c6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80007ce:	f7ff ffd7 	bl	8000780 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80007d2:	f005 fed9 	bl	8006588 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80007d6:	f005 fecb 	bl	8006570 <main>
  bx  lr    
 80007da:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80007dc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80007e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007e4:	200001a4 	.word	0x200001a4
  ldr r2, =_sidata
 80007e8:	08006668 	.word	0x08006668
  ldr r2, =_sbss
 80007ec:	200001a4 	.word	0x200001a4
  ldr r4, =_ebss
 80007f0:	200014c0 	.word	0x200014c0

080007f4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80007f4:	e7fe      	b.n	80007f4 <ADC_IRQHandler>
	...

080007f8 <ledInit>:
{
	{GPIOC, GPIO_PIN_13, GPIO_PIN_SET, GPIO_PIN_RESET}
};

bool ledInit(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b088      	sub	sp, #32
 80007fc:	af00      	add	r7, sp, #0
	bool ret = true;
 80007fe:	2301      	movs	r3, #1
 8000800:	76fb      	strb	r3, [r7, #27]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000802:	1d3b      	adds	r3, r7, #4
 8000804:	2200      	movs	r2, #0
 8000806:	601a      	str	r2, [r3, #0]
 8000808:	605a      	str	r2, [r3, #4]
 800080a:	609a      	str	r2, [r3, #8]
 800080c:	60da      	str	r2, [r3, #12]
 800080e:	611a      	str	r2, [r3, #16]

	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000810:	2300      	movs	r3, #0
 8000812:	603b      	str	r3, [r7, #0]
 8000814:	4b1d      	ldr	r3, [pc, #116]	; (800088c <ledInit+0x94>)
 8000816:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000818:	4a1c      	ldr	r2, [pc, #112]	; (800088c <ledInit+0x94>)
 800081a:	f043 0301 	orr.w	r3, r3, #1
 800081e:	6313      	str	r3, [r2, #48]	; 0x30
 8000820:	4b1a      	ldr	r3, [pc, #104]	; (800088c <ledInit+0x94>)
 8000822:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000824:	f003 0301 	and.w	r3, r3, #1
 8000828:	603b      	str	r3, [r7, #0]
 800082a:	683b      	ldr	r3, [r7, #0]

	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800082c:	2301      	movs	r3, #1
 800082e:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000830:	2300      	movs	r3, #0
 8000832:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000834:	2300      	movs	r3, #0
 8000836:	613b      	str	r3, [r7, #16]

	for(int i = 0; i < LED_MAX_CHANNEL; i++)
 8000838:	2300      	movs	r3, #0
 800083a:	61fb      	str	r3, [r7, #28]
 800083c:	e01e      	b.n	800087c <ledInit+0x84>
	{
		ledOff(i);
 800083e:	69fb      	ldr	r3, [r7, #28]
 8000840:	b2db      	uxtb	r3, r3
 8000842:	4618      	mov	r0, r3
 8000844:	f000 f826 	bl	8000894 <ledOff>
		GPIO_InitStruct.Pin = led_tbl[i].pin;
 8000848:	4911      	ldr	r1, [pc, #68]	; (8000890 <ledInit+0x98>)
 800084a:	69fa      	ldr	r2, [r7, #28]
 800084c:	4613      	mov	r3, r2
 800084e:	005b      	lsls	r3, r3, #1
 8000850:	4413      	add	r3, r2
 8000852:	009b      	lsls	r3, r3, #2
 8000854:	440b      	add	r3, r1
 8000856:	3304      	adds	r3, #4
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	607b      	str	r3, [r7, #4]
		HAL_GPIO_Init(led_tbl[i].port, &GPIO_InitStruct);
 800085c:	490c      	ldr	r1, [pc, #48]	; (8000890 <ledInit+0x98>)
 800085e:	69fa      	ldr	r2, [r7, #28]
 8000860:	4613      	mov	r3, r2
 8000862:	005b      	lsls	r3, r3, #1
 8000864:	4413      	add	r3, r2
 8000866:	009b      	lsls	r3, r3, #2
 8000868:	440b      	add	r3, r1
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	1d3a      	adds	r2, r7, #4
 800086e:	4611      	mov	r1, r2
 8000870:	4618      	mov	r0, r3
 8000872:	f000 fa09 	bl	8000c88 <HAL_GPIO_Init>
	for(int i = 0; i < LED_MAX_CHANNEL; i++)
 8000876:	69fb      	ldr	r3, [r7, #28]
 8000878:	3301      	adds	r3, #1
 800087a:	61fb      	str	r3, [r7, #28]
 800087c:	69fb      	ldr	r3, [r7, #28]
 800087e:	2b00      	cmp	r3, #0
 8000880:	dddd      	ble.n	800083e <ledInit+0x46>
	}
	return ret;
 8000882:	7efb      	ldrb	r3, [r7, #27]
}
 8000884:	4618      	mov	r0, r3
 8000886:	3720      	adds	r7, #32
 8000888:	46bd      	mov	sp, r7
 800088a:	bd80      	pop	{r7, pc}
 800088c:	40023800 	.word	0x40023800
 8000890:	20000004 	.word	0x20000004

08000894 <ledOff>:
void ledOn(uint8_t ch)
{
	HAL_GPIO_WritePin(led_tbl[ch].port, led_tbl[ch].pin, led_tbl[ch].on_state);
}
void ledOff(uint8_t ch)
{
 8000894:	b590      	push	{r4, r7, lr}
 8000896:	b083      	sub	sp, #12
 8000898:	af00      	add	r7, sp, #0
 800089a:	4603      	mov	r3, r0
 800089c:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(led_tbl[ch].port, led_tbl[ch].pin, led_tbl[ch].off_state);
 800089e:	79fa      	ldrb	r2, [r7, #7]
 80008a0:	4910      	ldr	r1, [pc, #64]	; (80008e4 <ledOff+0x50>)
 80008a2:	4613      	mov	r3, r2
 80008a4:	005b      	lsls	r3, r3, #1
 80008a6:	4413      	add	r3, r2
 80008a8:	009b      	lsls	r3, r3, #2
 80008aa:	440b      	add	r3, r1
 80008ac:	6818      	ldr	r0, [r3, #0]
 80008ae:	79fa      	ldrb	r2, [r7, #7]
 80008b0:	490c      	ldr	r1, [pc, #48]	; (80008e4 <ledOff+0x50>)
 80008b2:	4613      	mov	r3, r2
 80008b4:	005b      	lsls	r3, r3, #1
 80008b6:	4413      	add	r3, r2
 80008b8:	009b      	lsls	r3, r3, #2
 80008ba:	440b      	add	r3, r1
 80008bc:	3304      	adds	r3, #4
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	b299      	uxth	r1, r3
 80008c2:	79fa      	ldrb	r2, [r7, #7]
 80008c4:	4c07      	ldr	r4, [pc, #28]	; (80008e4 <ledOff+0x50>)
 80008c6:	4613      	mov	r3, r2
 80008c8:	005b      	lsls	r3, r3, #1
 80008ca:	4413      	add	r3, r2
 80008cc:	009b      	lsls	r3, r3, #2
 80008ce:	4423      	add	r3, r4
 80008d0:	3309      	adds	r3, #9
 80008d2:	781b      	ldrb	r3, [r3, #0]
 80008d4:	461a      	mov	r2, r3
 80008d6:	f000 fb5b 	bl	8000f90 <HAL_GPIO_WritePin>
}
 80008da:	bf00      	nop
 80008dc:	370c      	adds	r7, #12
 80008de:	46bd      	mov	sp, r7
 80008e0:	bd90      	pop	{r4, r7, pc}
 80008e2:	bf00      	nop
 80008e4:	20000004 	.word	0x20000004

080008e8 <ledToggle>:
void ledToggle(uint8_t ch)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b082      	sub	sp, #8
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	4603      	mov	r3, r0
 80008f0:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_TogglePin(led_tbl[ch].port, led_tbl[ch].pin);
 80008f2:	79fa      	ldrb	r2, [r7, #7]
 80008f4:	490b      	ldr	r1, [pc, #44]	; (8000924 <ledToggle+0x3c>)
 80008f6:	4613      	mov	r3, r2
 80008f8:	005b      	lsls	r3, r3, #1
 80008fa:	4413      	add	r3, r2
 80008fc:	009b      	lsls	r3, r3, #2
 80008fe:	440b      	add	r3, r1
 8000900:	6818      	ldr	r0, [r3, #0]
 8000902:	79fa      	ldrb	r2, [r7, #7]
 8000904:	4907      	ldr	r1, [pc, #28]	; (8000924 <ledToggle+0x3c>)
 8000906:	4613      	mov	r3, r2
 8000908:	005b      	lsls	r3, r3, #1
 800090a:	4413      	add	r3, r2
 800090c:	009b      	lsls	r3, r3, #2
 800090e:	440b      	add	r3, r1
 8000910:	3304      	adds	r3, #4
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	b29b      	uxth	r3, r3
 8000916:	4619      	mov	r1, r3
 8000918:	f000 fb53 	bl	8000fc2 <HAL_GPIO_TogglePin>
}
 800091c:	bf00      	nop
 800091e:	3708      	adds	r7, #8
 8000920:	46bd      	mov	sp, r7
 8000922:	bd80      	pop	{r7, pc}
 8000924:	20000004 	.word	0x20000004

08000928 <hwInit>:
 */

#include "hw.h"

void hwInit()
{
 8000928:	b580      	push	{r7, lr}
 800092a:	af00      	add	r7, sp, #0
  bspInit();
 800092c:	f7ff fde8 	bl	8000500 <bspInit>
  ledInit();
 8000930:	f7ff ff62 	bl	80007f8 <ledInit>
}
 8000934:	bf00      	nop
 8000936:	bd80      	pop	{r7, pc}

08000938 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800093c:	4b0e      	ldr	r3, [pc, #56]	; (8000978 <HAL_Init+0x40>)
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	4a0d      	ldr	r2, [pc, #52]	; (8000978 <HAL_Init+0x40>)
 8000942:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000946:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000948:	4b0b      	ldr	r3, [pc, #44]	; (8000978 <HAL_Init+0x40>)
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	4a0a      	ldr	r2, [pc, #40]	; (8000978 <HAL_Init+0x40>)
 800094e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000952:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000954:	4b08      	ldr	r3, [pc, #32]	; (8000978 <HAL_Init+0x40>)
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	4a07      	ldr	r2, [pc, #28]	; (8000978 <HAL_Init+0x40>)
 800095a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800095e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000960:	2003      	movs	r0, #3
 8000962:	f000 f94f 	bl	8000c04 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000966:	200f      	movs	r0, #15
 8000968:	f000 f808 	bl	800097c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800096c:	f7ff feac 	bl	80006c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000970:	2300      	movs	r3, #0
}
 8000972:	4618      	mov	r0, r3
 8000974:	bd80      	pop	{r7, pc}
 8000976:	bf00      	nop
 8000978:	40023c00 	.word	0x40023c00

0800097c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b082      	sub	sp, #8
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000984:	4b12      	ldr	r3, [pc, #72]	; (80009d0 <HAL_InitTick+0x54>)
 8000986:	681a      	ldr	r2, [r3, #0]
 8000988:	4b12      	ldr	r3, [pc, #72]	; (80009d4 <HAL_InitTick+0x58>)
 800098a:	781b      	ldrb	r3, [r3, #0]
 800098c:	4619      	mov	r1, r3
 800098e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000992:	fbb3 f3f1 	udiv	r3, r3, r1
 8000996:	fbb2 f3f3 	udiv	r3, r2, r3
 800099a:	4618      	mov	r0, r3
 800099c:	f000 f967 	bl	8000c6e <HAL_SYSTICK_Config>
 80009a0:	4603      	mov	r3, r0
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d001      	beq.n	80009aa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80009a6:	2301      	movs	r3, #1
 80009a8:	e00e      	b.n	80009c8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	2b0f      	cmp	r3, #15
 80009ae:	d80a      	bhi.n	80009c6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009b0:	2200      	movs	r2, #0
 80009b2:	6879      	ldr	r1, [r7, #4]
 80009b4:	f04f 30ff 	mov.w	r0, #4294967295
 80009b8:	f000 f92f 	bl	8000c1a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009bc:	4a06      	ldr	r2, [pc, #24]	; (80009d8 <HAL_InitTick+0x5c>)
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80009c2:	2300      	movs	r3, #0
 80009c4:	e000      	b.n	80009c8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80009c6:	2301      	movs	r3, #1
}
 80009c8:	4618      	mov	r0, r3
 80009ca:	3708      	adds	r7, #8
 80009cc:	46bd      	mov	sp, r7
 80009ce:	bd80      	pop	{r7, pc}
 80009d0:	20000000 	.word	0x20000000
 80009d4:	2000002c 	.word	0x2000002c
 80009d8:	20000028 	.word	0x20000028

080009dc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009dc:	b480      	push	{r7}
 80009de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009e0:	4b06      	ldr	r3, [pc, #24]	; (80009fc <HAL_IncTick+0x20>)
 80009e2:	781b      	ldrb	r3, [r3, #0]
 80009e4:	461a      	mov	r2, r3
 80009e6:	4b06      	ldr	r3, [pc, #24]	; (8000a00 <HAL_IncTick+0x24>)
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	4413      	add	r3, r2
 80009ec:	4a04      	ldr	r2, [pc, #16]	; (8000a00 <HAL_IncTick+0x24>)
 80009ee:	6013      	str	r3, [r2, #0]
}
 80009f0:	bf00      	nop
 80009f2:	46bd      	mov	sp, r7
 80009f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f8:	4770      	bx	lr
 80009fa:	bf00      	nop
 80009fc:	2000002c 	.word	0x2000002c
 8000a00:	200003e4 	.word	0x200003e4

08000a04 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a04:	b480      	push	{r7}
 8000a06:	af00      	add	r7, sp, #0
  return uwTick;
 8000a08:	4b03      	ldr	r3, [pc, #12]	; (8000a18 <HAL_GetTick+0x14>)
 8000a0a:	681b      	ldr	r3, [r3, #0]
}
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a14:	4770      	bx	lr
 8000a16:	bf00      	nop
 8000a18:	200003e4 	.word	0x200003e4

08000a1c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b084      	sub	sp, #16
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a24:	f7ff ffee 	bl	8000a04 <HAL_GetTick>
 8000a28:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a2e:	68fb      	ldr	r3, [r7, #12]
 8000a30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a34:	d005      	beq.n	8000a42 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a36:	4b0a      	ldr	r3, [pc, #40]	; (8000a60 <HAL_Delay+0x44>)
 8000a38:	781b      	ldrb	r3, [r3, #0]
 8000a3a:	461a      	mov	r2, r3
 8000a3c:	68fb      	ldr	r3, [r7, #12]
 8000a3e:	4413      	add	r3, r2
 8000a40:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000a42:	bf00      	nop
 8000a44:	f7ff ffde 	bl	8000a04 <HAL_GetTick>
 8000a48:	4602      	mov	r2, r0
 8000a4a:	68bb      	ldr	r3, [r7, #8]
 8000a4c:	1ad3      	subs	r3, r2, r3
 8000a4e:	68fa      	ldr	r2, [r7, #12]
 8000a50:	429a      	cmp	r2, r3
 8000a52:	d8f7      	bhi.n	8000a44 <HAL_Delay+0x28>
  {
  }
}
 8000a54:	bf00      	nop
 8000a56:	bf00      	nop
 8000a58:	3710      	adds	r7, #16
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bd80      	pop	{r7, pc}
 8000a5e:	bf00      	nop
 8000a60:	2000002c 	.word	0x2000002c

08000a64 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a64:	b480      	push	{r7}
 8000a66:	b085      	sub	sp, #20
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	f003 0307 	and.w	r3, r3, #7
 8000a72:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a74:	4b0c      	ldr	r3, [pc, #48]	; (8000aa8 <__NVIC_SetPriorityGrouping+0x44>)
 8000a76:	68db      	ldr	r3, [r3, #12]
 8000a78:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a7a:	68ba      	ldr	r2, [r7, #8]
 8000a7c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a80:	4013      	ands	r3, r2
 8000a82:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a84:	68fb      	ldr	r3, [r7, #12]
 8000a86:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a88:	68bb      	ldr	r3, [r7, #8]
 8000a8a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a8c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a94:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a96:	4a04      	ldr	r2, [pc, #16]	; (8000aa8 <__NVIC_SetPriorityGrouping+0x44>)
 8000a98:	68bb      	ldr	r3, [r7, #8]
 8000a9a:	60d3      	str	r3, [r2, #12]
}
 8000a9c:	bf00      	nop
 8000a9e:	3714      	adds	r7, #20
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa6:	4770      	bx	lr
 8000aa8:	e000ed00 	.word	0xe000ed00

08000aac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000aac:	b480      	push	{r7}
 8000aae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ab0:	4b04      	ldr	r3, [pc, #16]	; (8000ac4 <__NVIC_GetPriorityGrouping+0x18>)
 8000ab2:	68db      	ldr	r3, [r3, #12]
 8000ab4:	0a1b      	lsrs	r3, r3, #8
 8000ab6:	f003 0307 	and.w	r3, r3, #7
}
 8000aba:	4618      	mov	r0, r3
 8000abc:	46bd      	mov	sp, r7
 8000abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac2:	4770      	bx	lr
 8000ac4:	e000ed00 	.word	0xe000ed00

08000ac8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	b083      	sub	sp, #12
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	4603      	mov	r3, r0
 8000ad0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ad2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	db0b      	blt.n	8000af2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ada:	79fb      	ldrb	r3, [r7, #7]
 8000adc:	f003 021f 	and.w	r2, r3, #31
 8000ae0:	4907      	ldr	r1, [pc, #28]	; (8000b00 <__NVIC_EnableIRQ+0x38>)
 8000ae2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ae6:	095b      	lsrs	r3, r3, #5
 8000ae8:	2001      	movs	r0, #1
 8000aea:	fa00 f202 	lsl.w	r2, r0, r2
 8000aee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000af2:	bf00      	nop
 8000af4:	370c      	adds	r7, #12
 8000af6:	46bd      	mov	sp, r7
 8000af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop
 8000b00:	e000e100 	.word	0xe000e100

08000b04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b04:	b480      	push	{r7}
 8000b06:	b083      	sub	sp, #12
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	6039      	str	r1, [r7, #0]
 8000b0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	db0a      	blt.n	8000b2e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b18:	683b      	ldr	r3, [r7, #0]
 8000b1a:	b2da      	uxtb	r2, r3
 8000b1c:	490c      	ldr	r1, [pc, #48]	; (8000b50 <__NVIC_SetPriority+0x4c>)
 8000b1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b22:	0112      	lsls	r2, r2, #4
 8000b24:	b2d2      	uxtb	r2, r2
 8000b26:	440b      	add	r3, r1
 8000b28:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b2c:	e00a      	b.n	8000b44 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b2e:	683b      	ldr	r3, [r7, #0]
 8000b30:	b2da      	uxtb	r2, r3
 8000b32:	4908      	ldr	r1, [pc, #32]	; (8000b54 <__NVIC_SetPriority+0x50>)
 8000b34:	79fb      	ldrb	r3, [r7, #7]
 8000b36:	f003 030f 	and.w	r3, r3, #15
 8000b3a:	3b04      	subs	r3, #4
 8000b3c:	0112      	lsls	r2, r2, #4
 8000b3e:	b2d2      	uxtb	r2, r2
 8000b40:	440b      	add	r3, r1
 8000b42:	761a      	strb	r2, [r3, #24]
}
 8000b44:	bf00      	nop
 8000b46:	370c      	adds	r7, #12
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4e:	4770      	bx	lr
 8000b50:	e000e100 	.word	0xe000e100
 8000b54:	e000ed00 	.word	0xe000ed00

08000b58 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	b089      	sub	sp, #36	; 0x24
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	60f8      	str	r0, [r7, #12]
 8000b60:	60b9      	str	r1, [r7, #8]
 8000b62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b64:	68fb      	ldr	r3, [r7, #12]
 8000b66:	f003 0307 	and.w	r3, r3, #7
 8000b6a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b6c:	69fb      	ldr	r3, [r7, #28]
 8000b6e:	f1c3 0307 	rsb	r3, r3, #7
 8000b72:	2b04      	cmp	r3, #4
 8000b74:	bf28      	it	cs
 8000b76:	2304      	movcs	r3, #4
 8000b78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b7a:	69fb      	ldr	r3, [r7, #28]
 8000b7c:	3304      	adds	r3, #4
 8000b7e:	2b06      	cmp	r3, #6
 8000b80:	d902      	bls.n	8000b88 <NVIC_EncodePriority+0x30>
 8000b82:	69fb      	ldr	r3, [r7, #28]
 8000b84:	3b03      	subs	r3, #3
 8000b86:	e000      	b.n	8000b8a <NVIC_EncodePriority+0x32>
 8000b88:	2300      	movs	r3, #0
 8000b8a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b8c:	f04f 32ff 	mov.w	r2, #4294967295
 8000b90:	69bb      	ldr	r3, [r7, #24]
 8000b92:	fa02 f303 	lsl.w	r3, r2, r3
 8000b96:	43da      	mvns	r2, r3
 8000b98:	68bb      	ldr	r3, [r7, #8]
 8000b9a:	401a      	ands	r2, r3
 8000b9c:	697b      	ldr	r3, [r7, #20]
 8000b9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ba0:	f04f 31ff 	mov.w	r1, #4294967295
 8000ba4:	697b      	ldr	r3, [r7, #20]
 8000ba6:	fa01 f303 	lsl.w	r3, r1, r3
 8000baa:	43d9      	mvns	r1, r3
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bb0:	4313      	orrs	r3, r2
         );
}
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	3724      	adds	r7, #36	; 0x24
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbc:	4770      	bx	lr
	...

08000bc0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b082      	sub	sp, #8
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	3b01      	subs	r3, #1
 8000bcc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000bd0:	d301      	bcc.n	8000bd6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000bd2:	2301      	movs	r3, #1
 8000bd4:	e00f      	b.n	8000bf6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000bd6:	4a0a      	ldr	r2, [pc, #40]	; (8000c00 <SysTick_Config+0x40>)
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	3b01      	subs	r3, #1
 8000bdc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000bde:	210f      	movs	r1, #15
 8000be0:	f04f 30ff 	mov.w	r0, #4294967295
 8000be4:	f7ff ff8e 	bl	8000b04 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000be8:	4b05      	ldr	r3, [pc, #20]	; (8000c00 <SysTick_Config+0x40>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000bee:	4b04      	ldr	r3, [pc, #16]	; (8000c00 <SysTick_Config+0x40>)
 8000bf0:	2207      	movs	r2, #7
 8000bf2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000bf4:	2300      	movs	r3, #0
}
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	3708      	adds	r7, #8
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bd80      	pop	{r7, pc}
 8000bfe:	bf00      	nop
 8000c00:	e000e010 	.word	0xe000e010

08000c04 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b082      	sub	sp, #8
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c0c:	6878      	ldr	r0, [r7, #4]
 8000c0e:	f7ff ff29 	bl	8000a64 <__NVIC_SetPriorityGrouping>
}
 8000c12:	bf00      	nop
 8000c14:	3708      	adds	r7, #8
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd80      	pop	{r7, pc}

08000c1a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c1a:	b580      	push	{r7, lr}
 8000c1c:	b086      	sub	sp, #24
 8000c1e:	af00      	add	r7, sp, #0
 8000c20:	4603      	mov	r3, r0
 8000c22:	60b9      	str	r1, [r7, #8]
 8000c24:	607a      	str	r2, [r7, #4]
 8000c26:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c2c:	f7ff ff3e 	bl	8000aac <__NVIC_GetPriorityGrouping>
 8000c30:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c32:	687a      	ldr	r2, [r7, #4]
 8000c34:	68b9      	ldr	r1, [r7, #8]
 8000c36:	6978      	ldr	r0, [r7, #20]
 8000c38:	f7ff ff8e 	bl	8000b58 <NVIC_EncodePriority>
 8000c3c:	4602      	mov	r2, r0
 8000c3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c42:	4611      	mov	r1, r2
 8000c44:	4618      	mov	r0, r3
 8000c46:	f7ff ff5d 	bl	8000b04 <__NVIC_SetPriority>
}
 8000c4a:	bf00      	nop
 8000c4c:	3718      	adds	r7, #24
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bd80      	pop	{r7, pc}

08000c52 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c52:	b580      	push	{r7, lr}
 8000c54:	b082      	sub	sp, #8
 8000c56:	af00      	add	r7, sp, #0
 8000c58:	4603      	mov	r3, r0
 8000c5a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c60:	4618      	mov	r0, r3
 8000c62:	f7ff ff31 	bl	8000ac8 <__NVIC_EnableIRQ>
}
 8000c66:	bf00      	nop
 8000c68:	3708      	adds	r7, #8
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}

08000c6e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c6e:	b580      	push	{r7, lr}
 8000c70:	b082      	sub	sp, #8
 8000c72:	af00      	add	r7, sp, #0
 8000c74:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c76:	6878      	ldr	r0, [r7, #4]
 8000c78:	f7ff ffa2 	bl	8000bc0 <SysTick_Config>
 8000c7c:	4603      	mov	r3, r0
}
 8000c7e:	4618      	mov	r0, r3
 8000c80:	3708      	adds	r7, #8
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}
	...

08000c88 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	b089      	sub	sp, #36	; 0x24
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
 8000c90:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000c92:	2300      	movs	r3, #0
 8000c94:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000c96:	2300      	movs	r3, #0
 8000c98:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	61fb      	str	r3, [r7, #28]
 8000ca2:	e159      	b.n	8000f58 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000ca4:	2201      	movs	r2, #1
 8000ca6:	69fb      	ldr	r3, [r7, #28]
 8000ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000cae:	683b      	ldr	r3, [r7, #0]
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	697a      	ldr	r2, [r7, #20]
 8000cb4:	4013      	ands	r3, r2
 8000cb6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000cb8:	693a      	ldr	r2, [r7, #16]
 8000cba:	697b      	ldr	r3, [r7, #20]
 8000cbc:	429a      	cmp	r2, r3
 8000cbe:	f040 8148 	bne.w	8000f52 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000cc2:	683b      	ldr	r3, [r7, #0]
 8000cc4:	685b      	ldr	r3, [r3, #4]
 8000cc6:	f003 0303 	and.w	r3, r3, #3
 8000cca:	2b01      	cmp	r3, #1
 8000ccc:	d005      	beq.n	8000cda <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000cce:	683b      	ldr	r3, [r7, #0]
 8000cd0:	685b      	ldr	r3, [r3, #4]
 8000cd2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000cd6:	2b02      	cmp	r3, #2
 8000cd8:	d130      	bne.n	8000d3c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	689b      	ldr	r3, [r3, #8]
 8000cde:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000ce0:	69fb      	ldr	r3, [r7, #28]
 8000ce2:	005b      	lsls	r3, r3, #1
 8000ce4:	2203      	movs	r2, #3
 8000ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cea:	43db      	mvns	r3, r3
 8000cec:	69ba      	ldr	r2, [r7, #24]
 8000cee:	4013      	ands	r3, r2
 8000cf0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000cf2:	683b      	ldr	r3, [r7, #0]
 8000cf4:	68da      	ldr	r2, [r3, #12]
 8000cf6:	69fb      	ldr	r3, [r7, #28]
 8000cf8:	005b      	lsls	r3, r3, #1
 8000cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8000cfe:	69ba      	ldr	r2, [r7, #24]
 8000d00:	4313      	orrs	r3, r2
 8000d02:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	69ba      	ldr	r2, [r7, #24]
 8000d08:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	685b      	ldr	r3, [r3, #4]
 8000d0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d10:	2201      	movs	r2, #1
 8000d12:	69fb      	ldr	r3, [r7, #28]
 8000d14:	fa02 f303 	lsl.w	r3, r2, r3
 8000d18:	43db      	mvns	r3, r3
 8000d1a:	69ba      	ldr	r2, [r7, #24]
 8000d1c:	4013      	ands	r3, r2
 8000d1e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d20:	683b      	ldr	r3, [r7, #0]
 8000d22:	685b      	ldr	r3, [r3, #4]
 8000d24:	091b      	lsrs	r3, r3, #4
 8000d26:	f003 0201 	and.w	r2, r3, #1
 8000d2a:	69fb      	ldr	r3, [r7, #28]
 8000d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d30:	69ba      	ldr	r2, [r7, #24]
 8000d32:	4313      	orrs	r3, r2
 8000d34:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	69ba      	ldr	r2, [r7, #24]
 8000d3a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d3c:	683b      	ldr	r3, [r7, #0]
 8000d3e:	685b      	ldr	r3, [r3, #4]
 8000d40:	f003 0303 	and.w	r3, r3, #3
 8000d44:	2b03      	cmp	r3, #3
 8000d46:	d017      	beq.n	8000d78 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	68db      	ldr	r3, [r3, #12]
 8000d4c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000d4e:	69fb      	ldr	r3, [r7, #28]
 8000d50:	005b      	lsls	r3, r3, #1
 8000d52:	2203      	movs	r2, #3
 8000d54:	fa02 f303 	lsl.w	r3, r2, r3
 8000d58:	43db      	mvns	r3, r3
 8000d5a:	69ba      	ldr	r2, [r7, #24]
 8000d5c:	4013      	ands	r3, r2
 8000d5e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d60:	683b      	ldr	r3, [r7, #0]
 8000d62:	689a      	ldr	r2, [r3, #8]
 8000d64:	69fb      	ldr	r3, [r7, #28]
 8000d66:	005b      	lsls	r3, r3, #1
 8000d68:	fa02 f303 	lsl.w	r3, r2, r3
 8000d6c:	69ba      	ldr	r2, [r7, #24]
 8000d6e:	4313      	orrs	r3, r2
 8000d70:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	69ba      	ldr	r2, [r7, #24]
 8000d76:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d78:	683b      	ldr	r3, [r7, #0]
 8000d7a:	685b      	ldr	r3, [r3, #4]
 8000d7c:	f003 0303 	and.w	r3, r3, #3
 8000d80:	2b02      	cmp	r3, #2
 8000d82:	d123      	bne.n	8000dcc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000d84:	69fb      	ldr	r3, [r7, #28]
 8000d86:	08da      	lsrs	r2, r3, #3
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	3208      	adds	r2, #8
 8000d8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d90:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000d92:	69fb      	ldr	r3, [r7, #28]
 8000d94:	f003 0307 	and.w	r3, r3, #7
 8000d98:	009b      	lsls	r3, r3, #2
 8000d9a:	220f      	movs	r2, #15
 8000d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000da0:	43db      	mvns	r3, r3
 8000da2:	69ba      	ldr	r2, [r7, #24]
 8000da4:	4013      	ands	r3, r2
 8000da6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000da8:	683b      	ldr	r3, [r7, #0]
 8000daa:	691a      	ldr	r2, [r3, #16]
 8000dac:	69fb      	ldr	r3, [r7, #28]
 8000dae:	f003 0307 	and.w	r3, r3, #7
 8000db2:	009b      	lsls	r3, r3, #2
 8000db4:	fa02 f303 	lsl.w	r3, r2, r3
 8000db8:	69ba      	ldr	r2, [r7, #24]
 8000dba:	4313      	orrs	r3, r2
 8000dbc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000dbe:	69fb      	ldr	r3, [r7, #28]
 8000dc0:	08da      	lsrs	r2, r3, #3
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	3208      	adds	r2, #8
 8000dc6:	69b9      	ldr	r1, [r7, #24]
 8000dc8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000dd2:	69fb      	ldr	r3, [r7, #28]
 8000dd4:	005b      	lsls	r3, r3, #1
 8000dd6:	2203      	movs	r2, #3
 8000dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ddc:	43db      	mvns	r3, r3
 8000dde:	69ba      	ldr	r2, [r7, #24]
 8000de0:	4013      	ands	r3, r2
 8000de2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000de4:	683b      	ldr	r3, [r7, #0]
 8000de6:	685b      	ldr	r3, [r3, #4]
 8000de8:	f003 0203 	and.w	r2, r3, #3
 8000dec:	69fb      	ldr	r3, [r7, #28]
 8000dee:	005b      	lsls	r3, r3, #1
 8000df0:	fa02 f303 	lsl.w	r3, r2, r3
 8000df4:	69ba      	ldr	r2, [r7, #24]
 8000df6:	4313      	orrs	r3, r2
 8000df8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	69ba      	ldr	r2, [r7, #24]
 8000dfe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000e00:	683b      	ldr	r3, [r7, #0]
 8000e02:	685b      	ldr	r3, [r3, #4]
 8000e04:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	f000 80a2 	beq.w	8000f52 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e0e:	2300      	movs	r3, #0
 8000e10:	60fb      	str	r3, [r7, #12]
 8000e12:	4b57      	ldr	r3, [pc, #348]	; (8000f70 <HAL_GPIO_Init+0x2e8>)
 8000e14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e16:	4a56      	ldr	r2, [pc, #344]	; (8000f70 <HAL_GPIO_Init+0x2e8>)
 8000e18:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e1c:	6453      	str	r3, [r2, #68]	; 0x44
 8000e1e:	4b54      	ldr	r3, [pc, #336]	; (8000f70 <HAL_GPIO_Init+0x2e8>)
 8000e20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e26:	60fb      	str	r3, [r7, #12]
 8000e28:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000e2a:	4a52      	ldr	r2, [pc, #328]	; (8000f74 <HAL_GPIO_Init+0x2ec>)
 8000e2c:	69fb      	ldr	r3, [r7, #28]
 8000e2e:	089b      	lsrs	r3, r3, #2
 8000e30:	3302      	adds	r3, #2
 8000e32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e36:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000e38:	69fb      	ldr	r3, [r7, #28]
 8000e3a:	f003 0303 	and.w	r3, r3, #3
 8000e3e:	009b      	lsls	r3, r3, #2
 8000e40:	220f      	movs	r2, #15
 8000e42:	fa02 f303 	lsl.w	r3, r2, r3
 8000e46:	43db      	mvns	r3, r3
 8000e48:	69ba      	ldr	r2, [r7, #24]
 8000e4a:	4013      	ands	r3, r2
 8000e4c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	4a49      	ldr	r2, [pc, #292]	; (8000f78 <HAL_GPIO_Init+0x2f0>)
 8000e52:	4293      	cmp	r3, r2
 8000e54:	d019      	beq.n	8000e8a <HAL_GPIO_Init+0x202>
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	4a48      	ldr	r2, [pc, #288]	; (8000f7c <HAL_GPIO_Init+0x2f4>)
 8000e5a:	4293      	cmp	r3, r2
 8000e5c:	d013      	beq.n	8000e86 <HAL_GPIO_Init+0x1fe>
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	4a47      	ldr	r2, [pc, #284]	; (8000f80 <HAL_GPIO_Init+0x2f8>)
 8000e62:	4293      	cmp	r3, r2
 8000e64:	d00d      	beq.n	8000e82 <HAL_GPIO_Init+0x1fa>
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	4a46      	ldr	r2, [pc, #280]	; (8000f84 <HAL_GPIO_Init+0x2fc>)
 8000e6a:	4293      	cmp	r3, r2
 8000e6c:	d007      	beq.n	8000e7e <HAL_GPIO_Init+0x1f6>
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	4a45      	ldr	r2, [pc, #276]	; (8000f88 <HAL_GPIO_Init+0x300>)
 8000e72:	4293      	cmp	r3, r2
 8000e74:	d101      	bne.n	8000e7a <HAL_GPIO_Init+0x1f2>
 8000e76:	2304      	movs	r3, #4
 8000e78:	e008      	b.n	8000e8c <HAL_GPIO_Init+0x204>
 8000e7a:	2307      	movs	r3, #7
 8000e7c:	e006      	b.n	8000e8c <HAL_GPIO_Init+0x204>
 8000e7e:	2303      	movs	r3, #3
 8000e80:	e004      	b.n	8000e8c <HAL_GPIO_Init+0x204>
 8000e82:	2302      	movs	r3, #2
 8000e84:	e002      	b.n	8000e8c <HAL_GPIO_Init+0x204>
 8000e86:	2301      	movs	r3, #1
 8000e88:	e000      	b.n	8000e8c <HAL_GPIO_Init+0x204>
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	69fa      	ldr	r2, [r7, #28]
 8000e8e:	f002 0203 	and.w	r2, r2, #3
 8000e92:	0092      	lsls	r2, r2, #2
 8000e94:	4093      	lsls	r3, r2
 8000e96:	69ba      	ldr	r2, [r7, #24]
 8000e98:	4313      	orrs	r3, r2
 8000e9a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000e9c:	4935      	ldr	r1, [pc, #212]	; (8000f74 <HAL_GPIO_Init+0x2ec>)
 8000e9e:	69fb      	ldr	r3, [r7, #28]
 8000ea0:	089b      	lsrs	r3, r3, #2
 8000ea2:	3302      	adds	r3, #2
 8000ea4:	69ba      	ldr	r2, [r7, #24]
 8000ea6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000eaa:	4b38      	ldr	r3, [pc, #224]	; (8000f8c <HAL_GPIO_Init+0x304>)
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000eb0:	693b      	ldr	r3, [r7, #16]
 8000eb2:	43db      	mvns	r3, r3
 8000eb4:	69ba      	ldr	r2, [r7, #24]
 8000eb6:	4013      	ands	r3, r2
 8000eb8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000eba:	683b      	ldr	r3, [r7, #0]
 8000ebc:	685b      	ldr	r3, [r3, #4]
 8000ebe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d003      	beq.n	8000ece <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000ec6:	69ba      	ldr	r2, [r7, #24]
 8000ec8:	693b      	ldr	r3, [r7, #16]
 8000eca:	4313      	orrs	r3, r2
 8000ecc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000ece:	4a2f      	ldr	r2, [pc, #188]	; (8000f8c <HAL_GPIO_Init+0x304>)
 8000ed0:	69bb      	ldr	r3, [r7, #24]
 8000ed2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000ed4:	4b2d      	ldr	r3, [pc, #180]	; (8000f8c <HAL_GPIO_Init+0x304>)
 8000ed6:	685b      	ldr	r3, [r3, #4]
 8000ed8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000eda:	693b      	ldr	r3, [r7, #16]
 8000edc:	43db      	mvns	r3, r3
 8000ede:	69ba      	ldr	r2, [r7, #24]
 8000ee0:	4013      	ands	r3, r2
 8000ee2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000ee4:	683b      	ldr	r3, [r7, #0]
 8000ee6:	685b      	ldr	r3, [r3, #4]
 8000ee8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d003      	beq.n	8000ef8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000ef0:	69ba      	ldr	r2, [r7, #24]
 8000ef2:	693b      	ldr	r3, [r7, #16]
 8000ef4:	4313      	orrs	r3, r2
 8000ef6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000ef8:	4a24      	ldr	r2, [pc, #144]	; (8000f8c <HAL_GPIO_Init+0x304>)
 8000efa:	69bb      	ldr	r3, [r7, #24]
 8000efc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000efe:	4b23      	ldr	r3, [pc, #140]	; (8000f8c <HAL_GPIO_Init+0x304>)
 8000f00:	689b      	ldr	r3, [r3, #8]
 8000f02:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f04:	693b      	ldr	r3, [r7, #16]
 8000f06:	43db      	mvns	r3, r3
 8000f08:	69ba      	ldr	r2, [r7, #24]
 8000f0a:	4013      	ands	r3, r2
 8000f0c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000f0e:	683b      	ldr	r3, [r7, #0]
 8000f10:	685b      	ldr	r3, [r3, #4]
 8000f12:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d003      	beq.n	8000f22 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8000f1a:	69ba      	ldr	r2, [r7, #24]
 8000f1c:	693b      	ldr	r3, [r7, #16]
 8000f1e:	4313      	orrs	r3, r2
 8000f20:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000f22:	4a1a      	ldr	r2, [pc, #104]	; (8000f8c <HAL_GPIO_Init+0x304>)
 8000f24:	69bb      	ldr	r3, [r7, #24]
 8000f26:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000f28:	4b18      	ldr	r3, [pc, #96]	; (8000f8c <HAL_GPIO_Init+0x304>)
 8000f2a:	68db      	ldr	r3, [r3, #12]
 8000f2c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f2e:	693b      	ldr	r3, [r7, #16]
 8000f30:	43db      	mvns	r3, r3
 8000f32:	69ba      	ldr	r2, [r7, #24]
 8000f34:	4013      	ands	r3, r2
 8000f36:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000f38:	683b      	ldr	r3, [r7, #0]
 8000f3a:	685b      	ldr	r3, [r3, #4]
 8000f3c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d003      	beq.n	8000f4c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8000f44:	69ba      	ldr	r2, [r7, #24]
 8000f46:	693b      	ldr	r3, [r7, #16]
 8000f48:	4313      	orrs	r3, r2
 8000f4a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000f4c:	4a0f      	ldr	r2, [pc, #60]	; (8000f8c <HAL_GPIO_Init+0x304>)
 8000f4e:	69bb      	ldr	r3, [r7, #24]
 8000f50:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f52:	69fb      	ldr	r3, [r7, #28]
 8000f54:	3301      	adds	r3, #1
 8000f56:	61fb      	str	r3, [r7, #28]
 8000f58:	69fb      	ldr	r3, [r7, #28]
 8000f5a:	2b0f      	cmp	r3, #15
 8000f5c:	f67f aea2 	bls.w	8000ca4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000f60:	bf00      	nop
 8000f62:	bf00      	nop
 8000f64:	3724      	adds	r7, #36	; 0x24
 8000f66:	46bd      	mov	sp, r7
 8000f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6c:	4770      	bx	lr
 8000f6e:	bf00      	nop
 8000f70:	40023800 	.word	0x40023800
 8000f74:	40013800 	.word	0x40013800
 8000f78:	40020000 	.word	0x40020000
 8000f7c:	40020400 	.word	0x40020400
 8000f80:	40020800 	.word	0x40020800
 8000f84:	40020c00 	.word	0x40020c00
 8000f88:	40021000 	.word	0x40021000
 8000f8c:	40013c00 	.word	0x40013c00

08000f90 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f90:	b480      	push	{r7}
 8000f92:	b083      	sub	sp, #12
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
 8000f98:	460b      	mov	r3, r1
 8000f9a:	807b      	strh	r3, [r7, #2]
 8000f9c:	4613      	mov	r3, r2
 8000f9e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000fa0:	787b      	ldrb	r3, [r7, #1]
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d003      	beq.n	8000fae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000fa6:	887a      	ldrh	r2, [r7, #2]
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000fac:	e003      	b.n	8000fb6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000fae:	887b      	ldrh	r3, [r7, #2]
 8000fb0:	041a      	lsls	r2, r3, #16
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	619a      	str	r2, [r3, #24]
}
 8000fb6:	bf00      	nop
 8000fb8:	370c      	adds	r7, #12
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc0:	4770      	bx	lr

08000fc2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000fc2:	b480      	push	{r7}
 8000fc4:	b085      	sub	sp, #20
 8000fc6:	af00      	add	r7, sp, #0
 8000fc8:	6078      	str	r0, [r7, #4]
 8000fca:	460b      	mov	r3, r1
 8000fcc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	695b      	ldr	r3, [r3, #20]
 8000fd2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000fd4:	887a      	ldrh	r2, [r7, #2]
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	4013      	ands	r3, r2
 8000fda:	041a      	lsls	r2, r3, #16
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	43d9      	mvns	r1, r3
 8000fe0:	887b      	ldrh	r3, [r7, #2]
 8000fe2:	400b      	ands	r3, r1
 8000fe4:	431a      	orrs	r2, r3
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	619a      	str	r2, [r3, #24]
}
 8000fea:	bf00      	nop
 8000fec:	3714      	adds	r7, #20
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff4:	4770      	bx	lr

08000ff6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000ff6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ff8:	b08f      	sub	sp, #60	; 0x3c
 8000ffa:	af0a      	add	r7, sp, #40	; 0x28
 8000ffc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	2b00      	cmp	r3, #0
 8001002:	d101      	bne.n	8001008 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001004:	2301      	movs	r3, #1
 8001006:	e10f      	b.n	8001228 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8001014:	b2db      	uxtb	r3, r3
 8001016:	2b00      	cmp	r3, #0
 8001018:	d106      	bne.n	8001028 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	2200      	movs	r2, #0
 800101e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001022:	6878      	ldr	r0, [r7, #4]
 8001024:	f004 ff9a 	bl	8005f5c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	2203      	movs	r2, #3
 800102c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001030:	68bb      	ldr	r3, [r7, #8]
 8001032:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001034:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001038:	2b00      	cmp	r3, #0
 800103a:	d102      	bne.n	8001042 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	2200      	movs	r2, #0
 8001040:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	4618      	mov	r0, r3
 8001048:	f001 fe8d 	bl	8002d66 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	603b      	str	r3, [r7, #0]
 8001052:	687e      	ldr	r6, [r7, #4]
 8001054:	466d      	mov	r5, sp
 8001056:	f106 0410 	add.w	r4, r6, #16
 800105a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800105c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800105e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001060:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001062:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001066:	e885 0003 	stmia.w	r5, {r0, r1}
 800106a:	1d33      	adds	r3, r6, #4
 800106c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800106e:	6838      	ldr	r0, [r7, #0]
 8001070:	f001 fd64 	bl	8002b3c <USB_CoreInit>
 8001074:	4603      	mov	r3, r0
 8001076:	2b00      	cmp	r3, #0
 8001078:	d005      	beq.n	8001086 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	2202      	movs	r2, #2
 800107e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001082:	2301      	movs	r3, #1
 8001084:	e0d0      	b.n	8001228 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	2100      	movs	r1, #0
 800108c:	4618      	mov	r0, r3
 800108e:	f001 fe7b 	bl	8002d88 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001092:	2300      	movs	r3, #0
 8001094:	73fb      	strb	r3, [r7, #15]
 8001096:	e04a      	b.n	800112e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001098:	7bfa      	ldrb	r2, [r7, #15]
 800109a:	6879      	ldr	r1, [r7, #4]
 800109c:	4613      	mov	r3, r2
 800109e:	00db      	lsls	r3, r3, #3
 80010a0:	1a9b      	subs	r3, r3, r2
 80010a2:	009b      	lsls	r3, r3, #2
 80010a4:	440b      	add	r3, r1
 80010a6:	333d      	adds	r3, #61	; 0x3d
 80010a8:	2201      	movs	r2, #1
 80010aa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80010ac:	7bfa      	ldrb	r2, [r7, #15]
 80010ae:	6879      	ldr	r1, [r7, #4]
 80010b0:	4613      	mov	r3, r2
 80010b2:	00db      	lsls	r3, r3, #3
 80010b4:	1a9b      	subs	r3, r3, r2
 80010b6:	009b      	lsls	r3, r3, #2
 80010b8:	440b      	add	r3, r1
 80010ba:	333c      	adds	r3, #60	; 0x3c
 80010bc:	7bfa      	ldrb	r2, [r7, #15]
 80010be:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80010c0:	7bfa      	ldrb	r2, [r7, #15]
 80010c2:	7bfb      	ldrb	r3, [r7, #15]
 80010c4:	b298      	uxth	r0, r3
 80010c6:	6879      	ldr	r1, [r7, #4]
 80010c8:	4613      	mov	r3, r2
 80010ca:	00db      	lsls	r3, r3, #3
 80010cc:	1a9b      	subs	r3, r3, r2
 80010ce:	009b      	lsls	r3, r3, #2
 80010d0:	440b      	add	r3, r1
 80010d2:	3342      	adds	r3, #66	; 0x42
 80010d4:	4602      	mov	r2, r0
 80010d6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80010d8:	7bfa      	ldrb	r2, [r7, #15]
 80010da:	6879      	ldr	r1, [r7, #4]
 80010dc:	4613      	mov	r3, r2
 80010de:	00db      	lsls	r3, r3, #3
 80010e0:	1a9b      	subs	r3, r3, r2
 80010e2:	009b      	lsls	r3, r3, #2
 80010e4:	440b      	add	r3, r1
 80010e6:	333f      	adds	r3, #63	; 0x3f
 80010e8:	2200      	movs	r2, #0
 80010ea:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80010ec:	7bfa      	ldrb	r2, [r7, #15]
 80010ee:	6879      	ldr	r1, [r7, #4]
 80010f0:	4613      	mov	r3, r2
 80010f2:	00db      	lsls	r3, r3, #3
 80010f4:	1a9b      	subs	r3, r3, r2
 80010f6:	009b      	lsls	r3, r3, #2
 80010f8:	440b      	add	r3, r1
 80010fa:	3344      	adds	r3, #68	; 0x44
 80010fc:	2200      	movs	r2, #0
 80010fe:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001100:	7bfa      	ldrb	r2, [r7, #15]
 8001102:	6879      	ldr	r1, [r7, #4]
 8001104:	4613      	mov	r3, r2
 8001106:	00db      	lsls	r3, r3, #3
 8001108:	1a9b      	subs	r3, r3, r2
 800110a:	009b      	lsls	r3, r3, #2
 800110c:	440b      	add	r3, r1
 800110e:	3348      	adds	r3, #72	; 0x48
 8001110:	2200      	movs	r2, #0
 8001112:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001114:	7bfa      	ldrb	r2, [r7, #15]
 8001116:	6879      	ldr	r1, [r7, #4]
 8001118:	4613      	mov	r3, r2
 800111a:	00db      	lsls	r3, r3, #3
 800111c:	1a9b      	subs	r3, r3, r2
 800111e:	009b      	lsls	r3, r3, #2
 8001120:	440b      	add	r3, r1
 8001122:	3350      	adds	r3, #80	; 0x50
 8001124:	2200      	movs	r2, #0
 8001126:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001128:	7bfb      	ldrb	r3, [r7, #15]
 800112a:	3301      	adds	r3, #1
 800112c:	73fb      	strb	r3, [r7, #15]
 800112e:	7bfa      	ldrb	r2, [r7, #15]
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	685b      	ldr	r3, [r3, #4]
 8001134:	429a      	cmp	r2, r3
 8001136:	d3af      	bcc.n	8001098 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001138:	2300      	movs	r3, #0
 800113a:	73fb      	strb	r3, [r7, #15]
 800113c:	e044      	b.n	80011c8 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800113e:	7bfa      	ldrb	r2, [r7, #15]
 8001140:	6879      	ldr	r1, [r7, #4]
 8001142:	4613      	mov	r3, r2
 8001144:	00db      	lsls	r3, r3, #3
 8001146:	1a9b      	subs	r3, r3, r2
 8001148:	009b      	lsls	r3, r3, #2
 800114a:	440b      	add	r3, r1
 800114c:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8001150:	2200      	movs	r2, #0
 8001152:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001154:	7bfa      	ldrb	r2, [r7, #15]
 8001156:	6879      	ldr	r1, [r7, #4]
 8001158:	4613      	mov	r3, r2
 800115a:	00db      	lsls	r3, r3, #3
 800115c:	1a9b      	subs	r3, r3, r2
 800115e:	009b      	lsls	r3, r3, #2
 8001160:	440b      	add	r3, r1
 8001162:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8001166:	7bfa      	ldrb	r2, [r7, #15]
 8001168:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800116a:	7bfa      	ldrb	r2, [r7, #15]
 800116c:	6879      	ldr	r1, [r7, #4]
 800116e:	4613      	mov	r3, r2
 8001170:	00db      	lsls	r3, r3, #3
 8001172:	1a9b      	subs	r3, r3, r2
 8001174:	009b      	lsls	r3, r3, #2
 8001176:	440b      	add	r3, r1
 8001178:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800117c:	2200      	movs	r2, #0
 800117e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001180:	7bfa      	ldrb	r2, [r7, #15]
 8001182:	6879      	ldr	r1, [r7, #4]
 8001184:	4613      	mov	r3, r2
 8001186:	00db      	lsls	r3, r3, #3
 8001188:	1a9b      	subs	r3, r3, r2
 800118a:	009b      	lsls	r3, r3, #2
 800118c:	440b      	add	r3, r1
 800118e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001192:	2200      	movs	r2, #0
 8001194:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001196:	7bfa      	ldrb	r2, [r7, #15]
 8001198:	6879      	ldr	r1, [r7, #4]
 800119a:	4613      	mov	r3, r2
 800119c:	00db      	lsls	r3, r3, #3
 800119e:	1a9b      	subs	r3, r3, r2
 80011a0:	009b      	lsls	r3, r3, #2
 80011a2:	440b      	add	r3, r1
 80011a4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80011a8:	2200      	movs	r2, #0
 80011aa:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80011ac:	7bfa      	ldrb	r2, [r7, #15]
 80011ae:	6879      	ldr	r1, [r7, #4]
 80011b0:	4613      	mov	r3, r2
 80011b2:	00db      	lsls	r3, r3, #3
 80011b4:	1a9b      	subs	r3, r3, r2
 80011b6:	009b      	lsls	r3, r3, #2
 80011b8:	440b      	add	r3, r1
 80011ba:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80011be:	2200      	movs	r2, #0
 80011c0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80011c2:	7bfb      	ldrb	r3, [r7, #15]
 80011c4:	3301      	adds	r3, #1
 80011c6:	73fb      	strb	r3, [r7, #15]
 80011c8:	7bfa      	ldrb	r2, [r7, #15]
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	685b      	ldr	r3, [r3, #4]
 80011ce:	429a      	cmp	r2, r3
 80011d0:	d3b5      	bcc.n	800113e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	603b      	str	r3, [r7, #0]
 80011d8:	687e      	ldr	r6, [r7, #4]
 80011da:	466d      	mov	r5, sp
 80011dc:	f106 0410 	add.w	r4, r6, #16
 80011e0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80011e2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80011e4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80011e6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80011e8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80011ec:	e885 0003 	stmia.w	r5, {r0, r1}
 80011f0:	1d33      	adds	r3, r6, #4
 80011f2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80011f4:	6838      	ldr	r0, [r7, #0]
 80011f6:	f001 fe13 	bl	8002e20 <USB_DevInit>
 80011fa:	4603      	mov	r3, r0
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d005      	beq.n	800120c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	2202      	movs	r2, #2
 8001204:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001208:	2301      	movs	r3, #1
 800120a:	e00d      	b.n	8001228 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	2200      	movs	r2, #0
 8001210:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	2201      	movs	r2, #1
 8001218:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	4618      	mov	r0, r3
 8001222:	f002 fe8f 	bl	8003f44 <USB_DevDisconnect>

  return HAL_OK;
 8001226:	2300      	movs	r3, #0
}
 8001228:	4618      	mov	r0, r3
 800122a:	3714      	adds	r7, #20
 800122c:	46bd      	mov	sp, r7
 800122e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001230 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b084      	sub	sp, #16
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001244:	2b01      	cmp	r3, #1
 8001246:	d101      	bne.n	800124c <HAL_PCD_Start+0x1c>
 8001248:	2302      	movs	r3, #2
 800124a:	e020      	b.n	800128e <HAL_PCD_Start+0x5e>
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	2201      	movs	r2, #1
 8001250:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001258:	2b01      	cmp	r3, #1
 800125a:	d109      	bne.n	8001270 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001260:	2b01      	cmp	r3, #1
 8001262:	d005      	beq.n	8001270 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001268:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	4618      	mov	r0, r3
 8001276:	f001 fd65 	bl	8002d44 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	4618      	mov	r0, r3
 8001280:	f002 fe3f 	bl	8003f02 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	2200      	movs	r2, #0
 8001288:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800128c:	2300      	movs	r3, #0
}
 800128e:	4618      	mov	r0, r3
 8001290:	3710      	adds	r7, #16
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}

08001296 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001296:	b590      	push	{r4, r7, lr}
 8001298:	b08d      	sub	sp, #52	; 0x34
 800129a:	af00      	add	r7, sp, #0
 800129c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80012a4:	6a3b      	ldr	r3, [r7, #32]
 80012a6:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	4618      	mov	r0, r3
 80012ae:	f002 fefd 	bl	80040ac <USB_GetMode>
 80012b2:	4603      	mov	r3, r0
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	f040 839d 	bne.w	80019f4 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	4618      	mov	r0, r3
 80012c0:	f002 fe61 	bl	8003f86 <USB_ReadInterrupts>
 80012c4:	4603      	mov	r3, r0
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	f000 8393 	beq.w	80019f2 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	4618      	mov	r0, r3
 80012d2:	f002 fe58 	bl	8003f86 <USB_ReadInterrupts>
 80012d6:	4603      	mov	r3, r0
 80012d8:	f003 0302 	and.w	r3, r3, #2
 80012dc:	2b02      	cmp	r3, #2
 80012de:	d107      	bne.n	80012f0 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	695a      	ldr	r2, [r3, #20]
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	f002 0202 	and.w	r2, r2, #2
 80012ee:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	4618      	mov	r0, r3
 80012f6:	f002 fe46 	bl	8003f86 <USB_ReadInterrupts>
 80012fa:	4603      	mov	r3, r0
 80012fc:	f003 0310 	and.w	r3, r3, #16
 8001300:	2b10      	cmp	r3, #16
 8001302:	d161      	bne.n	80013c8 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	699a      	ldr	r2, [r3, #24]
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	f022 0210 	bic.w	r2, r2, #16
 8001312:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8001314:	6a3b      	ldr	r3, [r7, #32]
 8001316:	6a1b      	ldr	r3, [r3, #32]
 8001318:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 800131a:	69bb      	ldr	r3, [r7, #24]
 800131c:	f003 020f 	and.w	r2, r3, #15
 8001320:	4613      	mov	r3, r2
 8001322:	00db      	lsls	r3, r3, #3
 8001324:	1a9b      	subs	r3, r3, r2
 8001326:	009b      	lsls	r3, r3, #2
 8001328:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800132c:	687a      	ldr	r2, [r7, #4]
 800132e:	4413      	add	r3, r2
 8001330:	3304      	adds	r3, #4
 8001332:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001334:	69bb      	ldr	r3, [r7, #24]
 8001336:	0c5b      	lsrs	r3, r3, #17
 8001338:	f003 030f 	and.w	r3, r3, #15
 800133c:	2b02      	cmp	r3, #2
 800133e:	d124      	bne.n	800138a <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001340:	69ba      	ldr	r2, [r7, #24]
 8001342:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001346:	4013      	ands	r3, r2
 8001348:	2b00      	cmp	r3, #0
 800134a:	d035      	beq.n	80013b8 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800134c:	697b      	ldr	r3, [r7, #20]
 800134e:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001350:	69bb      	ldr	r3, [r7, #24]
 8001352:	091b      	lsrs	r3, r3, #4
 8001354:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001356:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800135a:	b29b      	uxth	r3, r3
 800135c:	461a      	mov	r2, r3
 800135e:	6a38      	ldr	r0, [r7, #32]
 8001360:	f002 fc7d 	bl	8003c5e <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001364:	697b      	ldr	r3, [r7, #20]
 8001366:	68da      	ldr	r2, [r3, #12]
 8001368:	69bb      	ldr	r3, [r7, #24]
 800136a:	091b      	lsrs	r3, r3, #4
 800136c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001370:	441a      	add	r2, r3
 8001372:	697b      	ldr	r3, [r7, #20]
 8001374:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001376:	697b      	ldr	r3, [r7, #20]
 8001378:	699a      	ldr	r2, [r3, #24]
 800137a:	69bb      	ldr	r3, [r7, #24]
 800137c:	091b      	lsrs	r3, r3, #4
 800137e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001382:	441a      	add	r2, r3
 8001384:	697b      	ldr	r3, [r7, #20]
 8001386:	619a      	str	r2, [r3, #24]
 8001388:	e016      	b.n	80013b8 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 800138a:	69bb      	ldr	r3, [r7, #24]
 800138c:	0c5b      	lsrs	r3, r3, #17
 800138e:	f003 030f 	and.w	r3, r3, #15
 8001392:	2b06      	cmp	r3, #6
 8001394:	d110      	bne.n	80013b8 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800139c:	2208      	movs	r2, #8
 800139e:	4619      	mov	r1, r3
 80013a0:	6a38      	ldr	r0, [r7, #32]
 80013a2:	f002 fc5c 	bl	8003c5e <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80013a6:	697b      	ldr	r3, [r7, #20]
 80013a8:	699a      	ldr	r2, [r3, #24]
 80013aa:	69bb      	ldr	r3, [r7, #24]
 80013ac:	091b      	lsrs	r3, r3, #4
 80013ae:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80013b2:	441a      	add	r2, r3
 80013b4:	697b      	ldr	r3, [r7, #20]
 80013b6:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	699a      	ldr	r2, [r3, #24]
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	f042 0210 	orr.w	r2, r2, #16
 80013c6:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	4618      	mov	r0, r3
 80013ce:	f002 fdda 	bl	8003f86 <USB_ReadInterrupts>
 80013d2:	4603      	mov	r3, r0
 80013d4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80013d8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80013dc:	d16e      	bne.n	80014bc <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 80013de:	2300      	movs	r3, #0
 80013e0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	4618      	mov	r0, r3
 80013e8:	f002 fde0 	bl	8003fac <USB_ReadDevAllOutEpInterrupt>
 80013ec:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80013ee:	e062      	b.n	80014b6 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 80013f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013f2:	f003 0301 	and.w	r3, r3, #1
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d057      	beq.n	80014aa <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001400:	b2d2      	uxtb	r2, r2
 8001402:	4611      	mov	r1, r2
 8001404:	4618      	mov	r0, r3
 8001406:	f002 fe05 	bl	8004014 <USB_ReadDevOutEPInterrupt>
 800140a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800140c:	693b      	ldr	r3, [r7, #16]
 800140e:	f003 0301 	and.w	r3, r3, #1
 8001412:	2b00      	cmp	r3, #0
 8001414:	d00c      	beq.n	8001430 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001418:	015a      	lsls	r2, r3, #5
 800141a:	69fb      	ldr	r3, [r7, #28]
 800141c:	4413      	add	r3, r2
 800141e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001422:	461a      	mov	r2, r3
 8001424:	2301      	movs	r3, #1
 8001426:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001428:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800142a:	6878      	ldr	r0, [r7, #4]
 800142c:	f000 fdb0 	bl	8001f90 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001430:	693b      	ldr	r3, [r7, #16]
 8001432:	f003 0308 	and.w	r3, r3, #8
 8001436:	2b00      	cmp	r3, #0
 8001438:	d00c      	beq.n	8001454 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800143a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800143c:	015a      	lsls	r2, r3, #5
 800143e:	69fb      	ldr	r3, [r7, #28]
 8001440:	4413      	add	r3, r2
 8001442:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001446:	461a      	mov	r2, r3
 8001448:	2308      	movs	r3, #8
 800144a:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800144c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800144e:	6878      	ldr	r0, [r7, #4]
 8001450:	f000 feaa 	bl	80021a8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001454:	693b      	ldr	r3, [r7, #16]
 8001456:	f003 0310 	and.w	r3, r3, #16
 800145a:	2b00      	cmp	r3, #0
 800145c:	d008      	beq.n	8001470 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800145e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001460:	015a      	lsls	r2, r3, #5
 8001462:	69fb      	ldr	r3, [r7, #28]
 8001464:	4413      	add	r3, r2
 8001466:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800146a:	461a      	mov	r2, r3
 800146c:	2310      	movs	r3, #16
 800146e:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001470:	693b      	ldr	r3, [r7, #16]
 8001472:	f003 0320 	and.w	r3, r3, #32
 8001476:	2b00      	cmp	r3, #0
 8001478:	d008      	beq.n	800148c <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800147a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800147c:	015a      	lsls	r2, r3, #5
 800147e:	69fb      	ldr	r3, [r7, #28]
 8001480:	4413      	add	r3, r2
 8001482:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001486:	461a      	mov	r2, r3
 8001488:	2320      	movs	r3, #32
 800148a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800148c:	693b      	ldr	r3, [r7, #16]
 800148e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001492:	2b00      	cmp	r3, #0
 8001494:	d009      	beq.n	80014aa <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001498:	015a      	lsls	r2, r3, #5
 800149a:	69fb      	ldr	r3, [r7, #28]
 800149c:	4413      	add	r3, r2
 800149e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80014a2:	461a      	mov	r2, r3
 80014a4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80014a8:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80014aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014ac:	3301      	adds	r3, #1
 80014ae:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80014b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014b2:	085b      	lsrs	r3, r3, #1
 80014b4:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80014b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d199      	bne.n	80013f0 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	4618      	mov	r0, r3
 80014c2:	f002 fd60 	bl	8003f86 <USB_ReadInterrupts>
 80014c6:	4603      	mov	r3, r0
 80014c8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80014cc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80014d0:	f040 80c0 	bne.w	8001654 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	4618      	mov	r0, r3
 80014da:	f002 fd81 	bl	8003fe0 <USB_ReadDevAllInEpInterrupt>
 80014de:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80014e0:	2300      	movs	r3, #0
 80014e2:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80014e4:	e0b2      	b.n	800164c <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80014e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014e8:	f003 0301 	and.w	r3, r3, #1
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	f000 80a7 	beq.w	8001640 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014f8:	b2d2      	uxtb	r2, r2
 80014fa:	4611      	mov	r1, r2
 80014fc:	4618      	mov	r0, r3
 80014fe:	f002 fda7 	bl	8004050 <USB_ReadDevInEPInterrupt>
 8001502:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001504:	693b      	ldr	r3, [r7, #16]
 8001506:	f003 0301 	and.w	r3, r3, #1
 800150a:	2b00      	cmp	r3, #0
 800150c:	d057      	beq.n	80015be <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800150e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001510:	f003 030f 	and.w	r3, r3, #15
 8001514:	2201      	movs	r2, #1
 8001516:	fa02 f303 	lsl.w	r3, r2, r3
 800151a:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800151c:	69fb      	ldr	r3, [r7, #28]
 800151e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001522:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	43db      	mvns	r3, r3
 8001528:	69f9      	ldr	r1, [r7, #28]
 800152a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800152e:	4013      	ands	r3, r2
 8001530:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001534:	015a      	lsls	r2, r3, #5
 8001536:	69fb      	ldr	r3, [r7, #28]
 8001538:	4413      	add	r3, r2
 800153a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800153e:	461a      	mov	r2, r3
 8001540:	2301      	movs	r3, #1
 8001542:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	691b      	ldr	r3, [r3, #16]
 8001548:	2b01      	cmp	r3, #1
 800154a:	d132      	bne.n	80015b2 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800154c:	6879      	ldr	r1, [r7, #4]
 800154e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001550:	4613      	mov	r3, r2
 8001552:	00db      	lsls	r3, r3, #3
 8001554:	1a9b      	subs	r3, r3, r2
 8001556:	009b      	lsls	r3, r3, #2
 8001558:	440b      	add	r3, r1
 800155a:	3348      	adds	r3, #72	; 0x48
 800155c:	6819      	ldr	r1, [r3, #0]
 800155e:	6878      	ldr	r0, [r7, #4]
 8001560:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001562:	4613      	mov	r3, r2
 8001564:	00db      	lsls	r3, r3, #3
 8001566:	1a9b      	subs	r3, r3, r2
 8001568:	009b      	lsls	r3, r3, #2
 800156a:	4403      	add	r3, r0
 800156c:	3344      	adds	r3, #68	; 0x44
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	4419      	add	r1, r3
 8001572:	6878      	ldr	r0, [r7, #4]
 8001574:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001576:	4613      	mov	r3, r2
 8001578:	00db      	lsls	r3, r3, #3
 800157a:	1a9b      	subs	r3, r3, r2
 800157c:	009b      	lsls	r3, r3, #2
 800157e:	4403      	add	r3, r0
 8001580:	3348      	adds	r3, #72	; 0x48
 8001582:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001586:	2b00      	cmp	r3, #0
 8001588:	d113      	bne.n	80015b2 <HAL_PCD_IRQHandler+0x31c>
 800158a:	6879      	ldr	r1, [r7, #4]
 800158c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800158e:	4613      	mov	r3, r2
 8001590:	00db      	lsls	r3, r3, #3
 8001592:	1a9b      	subs	r3, r3, r2
 8001594:	009b      	lsls	r3, r3, #2
 8001596:	440b      	add	r3, r1
 8001598:	3350      	adds	r3, #80	; 0x50
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	2b00      	cmp	r3, #0
 800159e:	d108      	bne.n	80015b2 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	6818      	ldr	r0, [r3, #0]
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80015aa:	461a      	mov	r2, r3
 80015ac:	2101      	movs	r1, #1
 80015ae:	f002 fdaf 	bl	8004110 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80015b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015b4:	b2db      	uxtb	r3, r3
 80015b6:	4619      	mov	r1, r3
 80015b8:	6878      	ldr	r0, [r7, #4]
 80015ba:	f004 fd50 	bl	800605e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80015be:	693b      	ldr	r3, [r7, #16]
 80015c0:	f003 0308 	and.w	r3, r3, #8
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d008      	beq.n	80015da <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80015c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015ca:	015a      	lsls	r2, r3, #5
 80015cc:	69fb      	ldr	r3, [r7, #28]
 80015ce:	4413      	add	r3, r2
 80015d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80015d4:	461a      	mov	r2, r3
 80015d6:	2308      	movs	r3, #8
 80015d8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80015da:	693b      	ldr	r3, [r7, #16]
 80015dc:	f003 0310 	and.w	r3, r3, #16
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d008      	beq.n	80015f6 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80015e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015e6:	015a      	lsls	r2, r3, #5
 80015e8:	69fb      	ldr	r3, [r7, #28]
 80015ea:	4413      	add	r3, r2
 80015ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80015f0:	461a      	mov	r2, r3
 80015f2:	2310      	movs	r3, #16
 80015f4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80015f6:	693b      	ldr	r3, [r7, #16]
 80015f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d008      	beq.n	8001612 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001602:	015a      	lsls	r2, r3, #5
 8001604:	69fb      	ldr	r3, [r7, #28]
 8001606:	4413      	add	r3, r2
 8001608:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800160c:	461a      	mov	r2, r3
 800160e:	2340      	movs	r3, #64	; 0x40
 8001610:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001612:	693b      	ldr	r3, [r7, #16]
 8001614:	f003 0302 	and.w	r3, r3, #2
 8001618:	2b00      	cmp	r3, #0
 800161a:	d008      	beq.n	800162e <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800161c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800161e:	015a      	lsls	r2, r3, #5
 8001620:	69fb      	ldr	r3, [r7, #28]
 8001622:	4413      	add	r3, r2
 8001624:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001628:	461a      	mov	r2, r3
 800162a:	2302      	movs	r3, #2
 800162c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800162e:	693b      	ldr	r3, [r7, #16]
 8001630:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001634:	2b00      	cmp	r3, #0
 8001636:	d003      	beq.n	8001640 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001638:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800163a:	6878      	ldr	r0, [r7, #4]
 800163c:	f000 fc1b 	bl	8001e76 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001642:	3301      	adds	r3, #1
 8001644:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001646:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001648:	085b      	lsrs	r3, r3, #1
 800164a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800164c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800164e:	2b00      	cmp	r3, #0
 8001650:	f47f af49 	bne.w	80014e6 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	4618      	mov	r0, r3
 800165a:	f002 fc94 	bl	8003f86 <USB_ReadInterrupts>
 800165e:	4603      	mov	r3, r0
 8001660:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001664:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001668:	d122      	bne.n	80016b0 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800166a:	69fb      	ldr	r3, [r7, #28]
 800166c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001670:	685b      	ldr	r3, [r3, #4]
 8001672:	69fa      	ldr	r2, [r7, #28]
 8001674:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001678:	f023 0301 	bic.w	r3, r3, #1
 800167c:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8001684:	2b01      	cmp	r3, #1
 8001686:	d108      	bne.n	800169a <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	2200      	movs	r2, #0
 800168c:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001690:	2100      	movs	r1, #0
 8001692:	6878      	ldr	r0, [r7, #4]
 8001694:	f000 fe26 	bl	80022e4 <HAL_PCDEx_LPM_Callback>
 8001698:	e002      	b.n	80016a0 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800169a:	6878      	ldr	r0, [r7, #4]
 800169c:	f004 fd4c 	bl	8006138 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	695a      	ldr	r2, [r3, #20]
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80016ae:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	4618      	mov	r0, r3
 80016b6:	f002 fc66 	bl	8003f86 <USB_ReadInterrupts>
 80016ba:	4603      	mov	r3, r0
 80016bc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80016c0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80016c4:	d112      	bne.n	80016ec <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80016c6:	69fb      	ldr	r3, [r7, #28]
 80016c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80016cc:	689b      	ldr	r3, [r3, #8]
 80016ce:	f003 0301 	and.w	r3, r3, #1
 80016d2:	2b01      	cmp	r3, #1
 80016d4:	d102      	bne.n	80016dc <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80016d6:	6878      	ldr	r0, [r7, #4]
 80016d8:	f004 fd08 	bl	80060ec <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	695a      	ldr	r2, [r3, #20]
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80016ea:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	4618      	mov	r0, r3
 80016f2:	f002 fc48 	bl	8003f86 <USB_ReadInterrupts>
 80016f6:	4603      	mov	r3, r0
 80016f8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80016fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001700:	f040 80c7 	bne.w	8001892 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001704:	69fb      	ldr	r3, [r7, #28]
 8001706:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800170a:	685b      	ldr	r3, [r3, #4]
 800170c:	69fa      	ldr	r2, [r7, #28]
 800170e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001712:	f023 0301 	bic.w	r3, r3, #1
 8001716:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	2110      	movs	r1, #16
 800171e:	4618      	mov	r0, r3
 8001720:	f001 fce2 	bl	80030e8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001724:	2300      	movs	r3, #0
 8001726:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001728:	e056      	b.n	80017d8 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800172a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800172c:	015a      	lsls	r2, r3, #5
 800172e:	69fb      	ldr	r3, [r7, #28]
 8001730:	4413      	add	r3, r2
 8001732:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001736:	461a      	mov	r2, r3
 8001738:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800173c:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800173e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001740:	015a      	lsls	r2, r3, #5
 8001742:	69fb      	ldr	r3, [r7, #28]
 8001744:	4413      	add	r3, r2
 8001746:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800174e:	0151      	lsls	r1, r2, #5
 8001750:	69fa      	ldr	r2, [r7, #28]
 8001752:	440a      	add	r2, r1
 8001754:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001758:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800175c:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800175e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001760:	015a      	lsls	r2, r3, #5
 8001762:	69fb      	ldr	r3, [r7, #28]
 8001764:	4413      	add	r3, r2
 8001766:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800176e:	0151      	lsls	r1, r2, #5
 8001770:	69fa      	ldr	r2, [r7, #28]
 8001772:	440a      	add	r2, r1
 8001774:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001778:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800177c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800177e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001780:	015a      	lsls	r2, r3, #5
 8001782:	69fb      	ldr	r3, [r7, #28]
 8001784:	4413      	add	r3, r2
 8001786:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800178a:	461a      	mov	r2, r3
 800178c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001790:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001792:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001794:	015a      	lsls	r2, r3, #5
 8001796:	69fb      	ldr	r3, [r7, #28]
 8001798:	4413      	add	r3, r2
 800179a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80017a2:	0151      	lsls	r1, r2, #5
 80017a4:	69fa      	ldr	r2, [r7, #28]
 80017a6:	440a      	add	r2, r1
 80017a8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80017ac:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80017b0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80017b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017b4:	015a      	lsls	r2, r3, #5
 80017b6:	69fb      	ldr	r3, [r7, #28]
 80017b8:	4413      	add	r3, r2
 80017ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80017c2:	0151      	lsls	r1, r2, #5
 80017c4:	69fa      	ldr	r2, [r7, #28]
 80017c6:	440a      	add	r2, r1
 80017c8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80017cc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80017d0:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80017d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017d4:	3301      	adds	r3, #1
 80017d6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	685b      	ldr	r3, [r3, #4]
 80017dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80017de:	429a      	cmp	r2, r3
 80017e0:	d3a3      	bcc.n	800172a <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80017e2:	69fb      	ldr	r3, [r7, #28]
 80017e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80017e8:	69db      	ldr	r3, [r3, #28]
 80017ea:	69fa      	ldr	r2, [r7, #28]
 80017ec:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80017f0:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80017f4:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d016      	beq.n	800182c <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80017fe:	69fb      	ldr	r3, [r7, #28]
 8001800:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001804:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001808:	69fa      	ldr	r2, [r7, #28]
 800180a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800180e:	f043 030b 	orr.w	r3, r3, #11
 8001812:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001816:	69fb      	ldr	r3, [r7, #28]
 8001818:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800181c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800181e:	69fa      	ldr	r2, [r7, #28]
 8001820:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001824:	f043 030b 	orr.w	r3, r3, #11
 8001828:	6453      	str	r3, [r2, #68]	; 0x44
 800182a:	e015      	b.n	8001858 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800182c:	69fb      	ldr	r3, [r7, #28]
 800182e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001832:	695b      	ldr	r3, [r3, #20]
 8001834:	69fa      	ldr	r2, [r7, #28]
 8001836:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800183a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800183e:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8001842:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001844:	69fb      	ldr	r3, [r7, #28]
 8001846:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800184a:	691b      	ldr	r3, [r3, #16]
 800184c:	69fa      	ldr	r2, [r7, #28]
 800184e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001852:	f043 030b 	orr.w	r3, r3, #11
 8001856:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001858:	69fb      	ldr	r3, [r7, #28]
 800185a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	69fa      	ldr	r2, [r7, #28]
 8001862:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001866:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800186a:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	6818      	ldr	r0, [r3, #0]
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	691b      	ldr	r3, [r3, #16]
 8001874:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800187c:	461a      	mov	r2, r3
 800187e:	f002 fc47 	bl	8004110 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	695a      	ldr	r2, [r3, #20]
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001890:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	4618      	mov	r0, r3
 8001898:	f002 fb75 	bl	8003f86 <USB_ReadInterrupts>
 800189c:	4603      	mov	r3, r0
 800189e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80018a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80018a6:	d124      	bne.n	80018f2 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	4618      	mov	r0, r3
 80018ae:	f002 fc0b 	bl	80040c8 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	4618      	mov	r0, r3
 80018b8:	f001 fc73 	bl	80031a2 <USB_GetDevSpeed>
 80018bc:	4603      	mov	r3, r0
 80018be:	461a      	mov	r2, r3
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681c      	ldr	r4, [r3, #0]
 80018c8:	f001 f92c 	bl	8002b24 <HAL_RCC_GetHCLKFreq>
 80018cc:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80018d2:	b2db      	uxtb	r3, r3
 80018d4:	461a      	mov	r2, r3
 80018d6:	4620      	mov	r0, r4
 80018d8:	f001 f992 	bl	8002c00 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80018dc:	6878      	ldr	r0, [r7, #4]
 80018de:	f004 fbe6 	bl	80060ae <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	695a      	ldr	r2, [r3, #20]
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80018f0:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	4618      	mov	r0, r3
 80018f8:	f002 fb45 	bl	8003f86 <USB_ReadInterrupts>
 80018fc:	4603      	mov	r3, r0
 80018fe:	f003 0308 	and.w	r3, r3, #8
 8001902:	2b08      	cmp	r3, #8
 8001904:	d10a      	bne.n	800191c <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001906:	6878      	ldr	r0, [r7, #4]
 8001908:	f004 fbc3 	bl	8006092 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	695a      	ldr	r2, [r3, #20]
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f002 0208 	and.w	r2, r2, #8
 800191a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	4618      	mov	r0, r3
 8001922:	f002 fb30 	bl	8003f86 <USB_ReadInterrupts>
 8001926:	4603      	mov	r3, r0
 8001928:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800192c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001930:	d10f      	bne.n	8001952 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8001932:	2300      	movs	r3, #0
 8001934:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001938:	b2db      	uxtb	r3, r3
 800193a:	4619      	mov	r1, r3
 800193c:	6878      	ldr	r0, [r7, #4]
 800193e:	f004 fc1b 	bl	8006178 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	695a      	ldr	r2, [r3, #20]
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8001950:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	4618      	mov	r0, r3
 8001958:	f002 fb15 	bl	8003f86 <USB_ReadInterrupts>
 800195c:	4603      	mov	r3, r0
 800195e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001962:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001966:	d10f      	bne.n	8001988 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8001968:	2300      	movs	r3, #0
 800196a:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800196c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800196e:	b2db      	uxtb	r3, r3
 8001970:	4619      	mov	r1, r3
 8001972:	6878      	ldr	r0, [r7, #4]
 8001974:	f004 fbee 	bl	8006154 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	695a      	ldr	r2, [r3, #20]
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8001986:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	4618      	mov	r0, r3
 800198e:	f002 fafa 	bl	8003f86 <USB_ReadInterrupts>
 8001992:	4603      	mov	r3, r0
 8001994:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001998:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800199c:	d10a      	bne.n	80019b4 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800199e:	6878      	ldr	r0, [r7, #4]
 80019a0:	f004 fbfc 	bl	800619c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	695a      	ldr	r2, [r3, #20]
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80019b2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	4618      	mov	r0, r3
 80019ba:	f002 fae4 	bl	8003f86 <USB_ReadInterrupts>
 80019be:	4603      	mov	r3, r0
 80019c0:	f003 0304 	and.w	r3, r3, #4
 80019c4:	2b04      	cmp	r3, #4
 80019c6:	d115      	bne.n	80019f4 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	685b      	ldr	r3, [r3, #4]
 80019ce:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80019d0:	69bb      	ldr	r3, [r7, #24]
 80019d2:	f003 0304 	and.w	r3, r3, #4
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d002      	beq.n	80019e0 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80019da:	6878      	ldr	r0, [r7, #4]
 80019dc:	f004 fbec 	bl	80061b8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	6859      	ldr	r1, [r3, #4]
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	69ba      	ldr	r2, [r7, #24]
 80019ec:	430a      	orrs	r2, r1
 80019ee:	605a      	str	r2, [r3, #4]
 80019f0:	e000      	b.n	80019f4 <HAL_PCD_IRQHandler+0x75e>
      return;
 80019f2:	bf00      	nop
    }
  }
}
 80019f4:	3734      	adds	r7, #52	; 0x34
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bd90      	pop	{r4, r7, pc}

080019fa <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80019fa:	b580      	push	{r7, lr}
 80019fc:	b082      	sub	sp, #8
 80019fe:	af00      	add	r7, sp, #0
 8001a00:	6078      	str	r0, [r7, #4]
 8001a02:	460b      	mov	r3, r1
 8001a04:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001a0c:	2b01      	cmp	r3, #1
 8001a0e:	d101      	bne.n	8001a14 <HAL_PCD_SetAddress+0x1a>
 8001a10:	2302      	movs	r3, #2
 8001a12:	e013      	b.n	8001a3c <HAL_PCD_SetAddress+0x42>
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	2201      	movs	r2, #1
 8001a18:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	78fa      	ldrb	r2, [r7, #3]
 8001a20:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	78fa      	ldrb	r2, [r7, #3]
 8001a2a:	4611      	mov	r1, r2
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	f002 fa42 	bl	8003eb6 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	2200      	movs	r2, #0
 8001a36:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001a3a:	2300      	movs	r3, #0
}
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	3708      	adds	r7, #8
 8001a40:	46bd      	mov	sp, r7
 8001a42:	bd80      	pop	{r7, pc}

08001a44 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b084      	sub	sp, #16
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
 8001a4c:	4608      	mov	r0, r1
 8001a4e:	4611      	mov	r1, r2
 8001a50:	461a      	mov	r2, r3
 8001a52:	4603      	mov	r3, r0
 8001a54:	70fb      	strb	r3, [r7, #3]
 8001a56:	460b      	mov	r3, r1
 8001a58:	803b      	strh	r3, [r7, #0]
 8001a5a:	4613      	mov	r3, r2
 8001a5c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001a62:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	da0f      	bge.n	8001a8a <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001a6a:	78fb      	ldrb	r3, [r7, #3]
 8001a6c:	f003 020f 	and.w	r2, r3, #15
 8001a70:	4613      	mov	r3, r2
 8001a72:	00db      	lsls	r3, r3, #3
 8001a74:	1a9b      	subs	r3, r3, r2
 8001a76:	009b      	lsls	r3, r3, #2
 8001a78:	3338      	adds	r3, #56	; 0x38
 8001a7a:	687a      	ldr	r2, [r7, #4]
 8001a7c:	4413      	add	r3, r2
 8001a7e:	3304      	adds	r3, #4
 8001a80:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	2201      	movs	r2, #1
 8001a86:	705a      	strb	r2, [r3, #1]
 8001a88:	e00f      	b.n	8001aaa <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001a8a:	78fb      	ldrb	r3, [r7, #3]
 8001a8c:	f003 020f 	and.w	r2, r3, #15
 8001a90:	4613      	mov	r3, r2
 8001a92:	00db      	lsls	r3, r3, #3
 8001a94:	1a9b      	subs	r3, r3, r2
 8001a96:	009b      	lsls	r3, r3, #2
 8001a98:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001a9c:	687a      	ldr	r2, [r7, #4]
 8001a9e:	4413      	add	r3, r2
 8001aa0:	3304      	adds	r3, #4
 8001aa2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001aaa:	78fb      	ldrb	r3, [r7, #3]
 8001aac:	f003 030f 	and.w	r3, r3, #15
 8001ab0:	b2da      	uxtb	r2, r3
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001ab6:	883a      	ldrh	r2, [r7, #0]
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	78ba      	ldrb	r2, [r7, #2]
 8001ac0:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	785b      	ldrb	r3, [r3, #1]
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d004      	beq.n	8001ad4 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	781b      	ldrb	r3, [r3, #0]
 8001ace:	b29a      	uxth	r2, r3
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001ad4:	78bb      	ldrb	r3, [r7, #2]
 8001ad6:	2b02      	cmp	r3, #2
 8001ad8:	d102      	bne.n	8001ae0 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	2200      	movs	r2, #0
 8001ade:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001ae6:	2b01      	cmp	r3, #1
 8001ae8:	d101      	bne.n	8001aee <HAL_PCD_EP_Open+0xaa>
 8001aea:	2302      	movs	r3, #2
 8001aec:	e00e      	b.n	8001b0c <HAL_PCD_EP_Open+0xc8>
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	2201      	movs	r2, #1
 8001af2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	68f9      	ldr	r1, [r7, #12]
 8001afc:	4618      	mov	r0, r3
 8001afe:	f001 fb75 	bl	80031ec <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	2200      	movs	r2, #0
 8001b06:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8001b0a:	7afb      	ldrb	r3, [r7, #11]
}
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	3710      	adds	r7, #16
 8001b10:	46bd      	mov	sp, r7
 8001b12:	bd80      	pop	{r7, pc}

08001b14 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b084      	sub	sp, #16
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
 8001b1c:	460b      	mov	r3, r1
 8001b1e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001b20:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	da0f      	bge.n	8001b48 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001b28:	78fb      	ldrb	r3, [r7, #3]
 8001b2a:	f003 020f 	and.w	r2, r3, #15
 8001b2e:	4613      	mov	r3, r2
 8001b30:	00db      	lsls	r3, r3, #3
 8001b32:	1a9b      	subs	r3, r3, r2
 8001b34:	009b      	lsls	r3, r3, #2
 8001b36:	3338      	adds	r3, #56	; 0x38
 8001b38:	687a      	ldr	r2, [r7, #4]
 8001b3a:	4413      	add	r3, r2
 8001b3c:	3304      	adds	r3, #4
 8001b3e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	2201      	movs	r2, #1
 8001b44:	705a      	strb	r2, [r3, #1]
 8001b46:	e00f      	b.n	8001b68 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001b48:	78fb      	ldrb	r3, [r7, #3]
 8001b4a:	f003 020f 	and.w	r2, r3, #15
 8001b4e:	4613      	mov	r3, r2
 8001b50:	00db      	lsls	r3, r3, #3
 8001b52:	1a9b      	subs	r3, r3, r2
 8001b54:	009b      	lsls	r3, r3, #2
 8001b56:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001b5a:	687a      	ldr	r2, [r7, #4]
 8001b5c:	4413      	add	r3, r2
 8001b5e:	3304      	adds	r3, #4
 8001b60:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	2200      	movs	r2, #0
 8001b66:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001b68:	78fb      	ldrb	r3, [r7, #3]
 8001b6a:	f003 030f 	and.w	r3, r3, #15
 8001b6e:	b2da      	uxtb	r2, r3
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001b7a:	2b01      	cmp	r3, #1
 8001b7c:	d101      	bne.n	8001b82 <HAL_PCD_EP_Close+0x6e>
 8001b7e:	2302      	movs	r3, #2
 8001b80:	e00e      	b.n	8001ba0 <HAL_PCD_EP_Close+0x8c>
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	2201      	movs	r2, #1
 8001b86:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	68f9      	ldr	r1, [r7, #12]
 8001b90:	4618      	mov	r0, r3
 8001b92:	f001 fbb3 	bl	80032fc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	2200      	movs	r2, #0
 8001b9a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8001b9e:	2300      	movs	r3, #0
}
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	3710      	adds	r7, #16
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	bd80      	pop	{r7, pc}

08001ba8 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b086      	sub	sp, #24
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	60f8      	str	r0, [r7, #12]
 8001bb0:	607a      	str	r2, [r7, #4]
 8001bb2:	603b      	str	r3, [r7, #0]
 8001bb4:	460b      	mov	r3, r1
 8001bb6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001bb8:	7afb      	ldrb	r3, [r7, #11]
 8001bba:	f003 020f 	and.w	r2, r3, #15
 8001bbe:	4613      	mov	r3, r2
 8001bc0:	00db      	lsls	r3, r3, #3
 8001bc2:	1a9b      	subs	r3, r3, r2
 8001bc4:	009b      	lsls	r3, r3, #2
 8001bc6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001bca:	68fa      	ldr	r2, [r7, #12]
 8001bcc:	4413      	add	r3, r2
 8001bce:	3304      	adds	r3, #4
 8001bd0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001bd2:	697b      	ldr	r3, [r7, #20]
 8001bd4:	687a      	ldr	r2, [r7, #4]
 8001bd6:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001bd8:	697b      	ldr	r3, [r7, #20]
 8001bda:	683a      	ldr	r2, [r7, #0]
 8001bdc:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8001bde:	697b      	ldr	r3, [r7, #20]
 8001be0:	2200      	movs	r2, #0
 8001be2:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8001be4:	697b      	ldr	r3, [r7, #20]
 8001be6:	2200      	movs	r2, #0
 8001be8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001bea:	7afb      	ldrb	r3, [r7, #11]
 8001bec:	f003 030f 	and.w	r3, r3, #15
 8001bf0:	b2da      	uxtb	r2, r3
 8001bf2:	697b      	ldr	r3, [r7, #20]
 8001bf4:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	691b      	ldr	r3, [r3, #16]
 8001bfa:	2b01      	cmp	r3, #1
 8001bfc:	d102      	bne.n	8001c04 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001bfe:	687a      	ldr	r2, [r7, #4]
 8001c00:	697b      	ldr	r3, [r7, #20]
 8001c02:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001c04:	7afb      	ldrb	r3, [r7, #11]
 8001c06:	f003 030f 	and.w	r3, r3, #15
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d109      	bne.n	8001c22 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	6818      	ldr	r0, [r3, #0]
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	691b      	ldr	r3, [r3, #16]
 8001c16:	b2db      	uxtb	r3, r3
 8001c18:	461a      	mov	r2, r3
 8001c1a:	6979      	ldr	r1, [r7, #20]
 8001c1c:	f001 fe8e 	bl	800393c <USB_EP0StartXfer>
 8001c20:	e008      	b.n	8001c34 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	6818      	ldr	r0, [r3, #0]
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	691b      	ldr	r3, [r3, #16]
 8001c2a:	b2db      	uxtb	r3, r3
 8001c2c:	461a      	mov	r2, r3
 8001c2e:	6979      	ldr	r1, [r7, #20]
 8001c30:	f001 fc40 	bl	80034b4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001c34:	2300      	movs	r3, #0
}
 8001c36:	4618      	mov	r0, r3
 8001c38:	3718      	adds	r7, #24
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd80      	pop	{r7, pc}

08001c3e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001c3e:	b480      	push	{r7}
 8001c40:	b083      	sub	sp, #12
 8001c42:	af00      	add	r7, sp, #0
 8001c44:	6078      	str	r0, [r7, #4]
 8001c46:	460b      	mov	r3, r1
 8001c48:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001c4a:	78fb      	ldrb	r3, [r7, #3]
 8001c4c:	f003 020f 	and.w	r2, r3, #15
 8001c50:	6879      	ldr	r1, [r7, #4]
 8001c52:	4613      	mov	r3, r2
 8001c54:	00db      	lsls	r3, r3, #3
 8001c56:	1a9b      	subs	r3, r3, r2
 8001c58:	009b      	lsls	r3, r3, #2
 8001c5a:	440b      	add	r3, r1
 8001c5c:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8001c60:	681b      	ldr	r3, [r3, #0]
}
 8001c62:	4618      	mov	r0, r3
 8001c64:	370c      	adds	r7, #12
 8001c66:	46bd      	mov	sp, r7
 8001c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6c:	4770      	bx	lr

08001c6e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001c6e:	b580      	push	{r7, lr}
 8001c70:	b086      	sub	sp, #24
 8001c72:	af00      	add	r7, sp, #0
 8001c74:	60f8      	str	r0, [r7, #12]
 8001c76:	607a      	str	r2, [r7, #4]
 8001c78:	603b      	str	r3, [r7, #0]
 8001c7a:	460b      	mov	r3, r1
 8001c7c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001c7e:	7afb      	ldrb	r3, [r7, #11]
 8001c80:	f003 020f 	and.w	r2, r3, #15
 8001c84:	4613      	mov	r3, r2
 8001c86:	00db      	lsls	r3, r3, #3
 8001c88:	1a9b      	subs	r3, r3, r2
 8001c8a:	009b      	lsls	r3, r3, #2
 8001c8c:	3338      	adds	r3, #56	; 0x38
 8001c8e:	68fa      	ldr	r2, [r7, #12]
 8001c90:	4413      	add	r3, r2
 8001c92:	3304      	adds	r3, #4
 8001c94:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001c96:	697b      	ldr	r3, [r7, #20]
 8001c98:	687a      	ldr	r2, [r7, #4]
 8001c9a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001c9c:	697b      	ldr	r3, [r7, #20]
 8001c9e:	683a      	ldr	r2, [r7, #0]
 8001ca0:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8001ca2:	697b      	ldr	r3, [r7, #20]
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8001ca8:	697b      	ldr	r3, [r7, #20]
 8001caa:	2201      	movs	r2, #1
 8001cac:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001cae:	7afb      	ldrb	r3, [r7, #11]
 8001cb0:	f003 030f 	and.w	r3, r3, #15
 8001cb4:	b2da      	uxtb	r2, r3
 8001cb6:	697b      	ldr	r3, [r7, #20]
 8001cb8:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	691b      	ldr	r3, [r3, #16]
 8001cbe:	2b01      	cmp	r3, #1
 8001cc0:	d102      	bne.n	8001cc8 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001cc2:	687a      	ldr	r2, [r7, #4]
 8001cc4:	697b      	ldr	r3, [r7, #20]
 8001cc6:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001cc8:	7afb      	ldrb	r3, [r7, #11]
 8001cca:	f003 030f 	and.w	r3, r3, #15
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d109      	bne.n	8001ce6 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	6818      	ldr	r0, [r3, #0]
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	691b      	ldr	r3, [r3, #16]
 8001cda:	b2db      	uxtb	r3, r3
 8001cdc:	461a      	mov	r2, r3
 8001cde:	6979      	ldr	r1, [r7, #20]
 8001ce0:	f001 fe2c 	bl	800393c <USB_EP0StartXfer>
 8001ce4:	e008      	b.n	8001cf8 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	6818      	ldr	r0, [r3, #0]
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	691b      	ldr	r3, [r3, #16]
 8001cee:	b2db      	uxtb	r3, r3
 8001cf0:	461a      	mov	r2, r3
 8001cf2:	6979      	ldr	r1, [r7, #20]
 8001cf4:	f001 fbde 	bl	80034b4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001cf8:	2300      	movs	r3, #0
}
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	3718      	adds	r7, #24
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bd80      	pop	{r7, pc}

08001d02 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001d02:	b580      	push	{r7, lr}
 8001d04:	b084      	sub	sp, #16
 8001d06:	af00      	add	r7, sp, #0
 8001d08:	6078      	str	r0, [r7, #4]
 8001d0a:	460b      	mov	r3, r1
 8001d0c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001d0e:	78fb      	ldrb	r3, [r7, #3]
 8001d10:	f003 020f 	and.w	r2, r3, #15
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	685b      	ldr	r3, [r3, #4]
 8001d18:	429a      	cmp	r2, r3
 8001d1a:	d901      	bls.n	8001d20 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001d1c:	2301      	movs	r3, #1
 8001d1e:	e050      	b.n	8001dc2 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001d20:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	da0f      	bge.n	8001d48 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001d28:	78fb      	ldrb	r3, [r7, #3]
 8001d2a:	f003 020f 	and.w	r2, r3, #15
 8001d2e:	4613      	mov	r3, r2
 8001d30:	00db      	lsls	r3, r3, #3
 8001d32:	1a9b      	subs	r3, r3, r2
 8001d34:	009b      	lsls	r3, r3, #2
 8001d36:	3338      	adds	r3, #56	; 0x38
 8001d38:	687a      	ldr	r2, [r7, #4]
 8001d3a:	4413      	add	r3, r2
 8001d3c:	3304      	adds	r3, #4
 8001d3e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	2201      	movs	r2, #1
 8001d44:	705a      	strb	r2, [r3, #1]
 8001d46:	e00d      	b.n	8001d64 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001d48:	78fa      	ldrb	r2, [r7, #3]
 8001d4a:	4613      	mov	r3, r2
 8001d4c:	00db      	lsls	r3, r3, #3
 8001d4e:	1a9b      	subs	r3, r3, r2
 8001d50:	009b      	lsls	r3, r3, #2
 8001d52:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001d56:	687a      	ldr	r2, [r7, #4]
 8001d58:	4413      	add	r3, r2
 8001d5a:	3304      	adds	r3, #4
 8001d5c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	2200      	movs	r2, #0
 8001d62:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	2201      	movs	r2, #1
 8001d68:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001d6a:	78fb      	ldrb	r3, [r7, #3]
 8001d6c:	f003 030f 	and.w	r3, r3, #15
 8001d70:	b2da      	uxtb	r2, r3
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001d7c:	2b01      	cmp	r3, #1
 8001d7e:	d101      	bne.n	8001d84 <HAL_PCD_EP_SetStall+0x82>
 8001d80:	2302      	movs	r3, #2
 8001d82:	e01e      	b.n	8001dc2 <HAL_PCD_EP_SetStall+0xc0>
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2201      	movs	r2, #1
 8001d88:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	68f9      	ldr	r1, [r7, #12]
 8001d92:	4618      	mov	r0, r3
 8001d94:	f001 ffbb 	bl	8003d0e <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001d98:	78fb      	ldrb	r3, [r7, #3]
 8001d9a:	f003 030f 	and.w	r3, r3, #15
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d10a      	bne.n	8001db8 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	6818      	ldr	r0, [r3, #0]
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	691b      	ldr	r3, [r3, #16]
 8001daa:	b2d9      	uxtb	r1, r3
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001db2:	461a      	mov	r2, r3
 8001db4:	f002 f9ac 	bl	8004110 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	2200      	movs	r2, #0
 8001dbc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001dc0:	2300      	movs	r3, #0
}
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	3710      	adds	r7, #16
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bd80      	pop	{r7, pc}

08001dca <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001dca:	b580      	push	{r7, lr}
 8001dcc:	b084      	sub	sp, #16
 8001dce:	af00      	add	r7, sp, #0
 8001dd0:	6078      	str	r0, [r7, #4]
 8001dd2:	460b      	mov	r3, r1
 8001dd4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001dd6:	78fb      	ldrb	r3, [r7, #3]
 8001dd8:	f003 020f 	and.w	r2, r3, #15
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	685b      	ldr	r3, [r3, #4]
 8001de0:	429a      	cmp	r2, r3
 8001de2:	d901      	bls.n	8001de8 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001de4:	2301      	movs	r3, #1
 8001de6:	e042      	b.n	8001e6e <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001de8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	da0f      	bge.n	8001e10 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001df0:	78fb      	ldrb	r3, [r7, #3]
 8001df2:	f003 020f 	and.w	r2, r3, #15
 8001df6:	4613      	mov	r3, r2
 8001df8:	00db      	lsls	r3, r3, #3
 8001dfa:	1a9b      	subs	r3, r3, r2
 8001dfc:	009b      	lsls	r3, r3, #2
 8001dfe:	3338      	adds	r3, #56	; 0x38
 8001e00:	687a      	ldr	r2, [r7, #4]
 8001e02:	4413      	add	r3, r2
 8001e04:	3304      	adds	r3, #4
 8001e06:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	2201      	movs	r2, #1
 8001e0c:	705a      	strb	r2, [r3, #1]
 8001e0e:	e00f      	b.n	8001e30 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001e10:	78fb      	ldrb	r3, [r7, #3]
 8001e12:	f003 020f 	and.w	r2, r3, #15
 8001e16:	4613      	mov	r3, r2
 8001e18:	00db      	lsls	r3, r3, #3
 8001e1a:	1a9b      	subs	r3, r3, r2
 8001e1c:	009b      	lsls	r3, r3, #2
 8001e1e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001e22:	687a      	ldr	r2, [r7, #4]
 8001e24:	4413      	add	r3, r2
 8001e26:	3304      	adds	r3, #4
 8001e28:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	2200      	movs	r2, #0
 8001e34:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001e36:	78fb      	ldrb	r3, [r7, #3]
 8001e38:	f003 030f 	and.w	r3, r3, #15
 8001e3c:	b2da      	uxtb	r2, r3
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001e48:	2b01      	cmp	r3, #1
 8001e4a:	d101      	bne.n	8001e50 <HAL_PCD_EP_ClrStall+0x86>
 8001e4c:	2302      	movs	r3, #2
 8001e4e:	e00e      	b.n	8001e6e <HAL_PCD_EP_ClrStall+0xa4>
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2201      	movs	r2, #1
 8001e54:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	68f9      	ldr	r1, [r7, #12]
 8001e5e:	4618      	mov	r0, r3
 8001e60:	f001 ffc3 	bl	8003dea <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	2200      	movs	r2, #0
 8001e68:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001e6c:	2300      	movs	r3, #0
}
 8001e6e:	4618      	mov	r0, r3
 8001e70:	3710      	adds	r7, #16
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bd80      	pop	{r7, pc}

08001e76 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001e76:	b580      	push	{r7, lr}
 8001e78:	b08a      	sub	sp, #40	; 0x28
 8001e7a:	af02      	add	r7, sp, #8
 8001e7c:	6078      	str	r0, [r7, #4]
 8001e7e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001e86:	697b      	ldr	r3, [r7, #20]
 8001e88:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8001e8a:	683a      	ldr	r2, [r7, #0]
 8001e8c:	4613      	mov	r3, r2
 8001e8e:	00db      	lsls	r3, r3, #3
 8001e90:	1a9b      	subs	r3, r3, r2
 8001e92:	009b      	lsls	r3, r3, #2
 8001e94:	3338      	adds	r3, #56	; 0x38
 8001e96:	687a      	ldr	r2, [r7, #4]
 8001e98:	4413      	add	r3, r2
 8001e9a:	3304      	adds	r3, #4
 8001e9c:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	699a      	ldr	r2, [r3, #24]
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	695b      	ldr	r3, [r3, #20]
 8001ea6:	429a      	cmp	r2, r3
 8001ea8:	d901      	bls.n	8001eae <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8001eaa:	2301      	movs	r3, #1
 8001eac:	e06c      	b.n	8001f88 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	695a      	ldr	r2, [r3, #20]
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	699b      	ldr	r3, [r3, #24]
 8001eb6:	1ad3      	subs	r3, r2, r3
 8001eb8:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	689b      	ldr	r3, [r3, #8]
 8001ebe:	69fa      	ldr	r2, [r7, #28]
 8001ec0:	429a      	cmp	r2, r3
 8001ec2:	d902      	bls.n	8001eca <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	689b      	ldr	r3, [r3, #8]
 8001ec8:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8001eca:	69fb      	ldr	r3, [r7, #28]
 8001ecc:	3303      	adds	r3, #3
 8001ece:	089b      	lsrs	r3, r3, #2
 8001ed0:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001ed2:	e02b      	b.n	8001f2c <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	695a      	ldr	r2, [r3, #20]
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	699b      	ldr	r3, [r3, #24]
 8001edc:	1ad3      	subs	r3, r2, r3
 8001ede:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	689b      	ldr	r3, [r3, #8]
 8001ee4:	69fa      	ldr	r2, [r7, #28]
 8001ee6:	429a      	cmp	r2, r3
 8001ee8:	d902      	bls.n	8001ef0 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	689b      	ldr	r3, [r3, #8]
 8001eee:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8001ef0:	69fb      	ldr	r3, [r7, #28]
 8001ef2:	3303      	adds	r3, #3
 8001ef4:	089b      	lsrs	r3, r3, #2
 8001ef6:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	68d9      	ldr	r1, [r3, #12]
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	b2da      	uxtb	r2, r3
 8001f00:	69fb      	ldr	r3, [r7, #28]
 8001f02:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8001f08:	b2db      	uxtb	r3, r3
 8001f0a:	9300      	str	r3, [sp, #0]
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	6978      	ldr	r0, [r7, #20]
 8001f10:	f001 fe67 	bl	8003be2 <USB_WritePacket>

    ep->xfer_buff  += len;
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	68da      	ldr	r2, [r3, #12]
 8001f18:	69fb      	ldr	r3, [r7, #28]
 8001f1a:	441a      	add	r2, r3
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	699a      	ldr	r2, [r3, #24]
 8001f24:	69fb      	ldr	r3, [r7, #28]
 8001f26:	441a      	add	r2, r3
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	015a      	lsls	r2, r3, #5
 8001f30:	693b      	ldr	r3, [r7, #16]
 8001f32:	4413      	add	r3, r2
 8001f34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001f38:	699b      	ldr	r3, [r3, #24]
 8001f3a:	b29b      	uxth	r3, r3
 8001f3c:	69ba      	ldr	r2, [r7, #24]
 8001f3e:	429a      	cmp	r2, r3
 8001f40:	d809      	bhi.n	8001f56 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	699a      	ldr	r2, [r3, #24]
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001f4a:	429a      	cmp	r2, r3
 8001f4c:	d203      	bcs.n	8001f56 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	695b      	ldr	r3, [r3, #20]
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d1be      	bne.n	8001ed4 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	695a      	ldr	r2, [r3, #20]
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	699b      	ldr	r3, [r3, #24]
 8001f5e:	429a      	cmp	r2, r3
 8001f60:	d811      	bhi.n	8001f86 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	f003 030f 	and.w	r3, r3, #15
 8001f68:	2201      	movs	r2, #1
 8001f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f6e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001f70:	693b      	ldr	r3, [r7, #16]
 8001f72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001f76:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001f78:	68bb      	ldr	r3, [r7, #8]
 8001f7a:	43db      	mvns	r3, r3
 8001f7c:	6939      	ldr	r1, [r7, #16]
 8001f7e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001f82:	4013      	ands	r3, r2
 8001f84:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8001f86:	2300      	movs	r3, #0
}
 8001f88:	4618      	mov	r0, r3
 8001f8a:	3720      	adds	r7, #32
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	bd80      	pop	{r7, pc}

08001f90 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b086      	sub	sp, #24
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
 8001f98:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001fa0:	697b      	ldr	r3, [r7, #20]
 8001fa2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8001fa4:	697b      	ldr	r3, [r7, #20]
 8001fa6:	333c      	adds	r3, #60	; 0x3c
 8001fa8:	3304      	adds	r3, #4
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	015a      	lsls	r2, r3, #5
 8001fb2:	693b      	ldr	r3, [r7, #16]
 8001fb4:	4413      	add	r3, r2
 8001fb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001fba:	689b      	ldr	r3, [r3, #8]
 8001fbc:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	691b      	ldr	r3, [r3, #16]
 8001fc2:	2b01      	cmp	r3, #1
 8001fc4:	f040 80a0 	bne.w	8002108 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8001fc8:	68bb      	ldr	r3, [r7, #8]
 8001fca:	f003 0308 	and.w	r3, r3, #8
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d015      	beq.n	8001ffe <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	4a72      	ldr	r2, [pc, #456]	; (80021a0 <PCD_EP_OutXfrComplete_int+0x210>)
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	f240 80dd 	bls.w	8002196 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8001fdc:	68bb      	ldr	r3, [r7, #8]
 8001fde:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	f000 80d7 	beq.w	8002196 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	015a      	lsls	r2, r3, #5
 8001fec:	693b      	ldr	r3, [r7, #16]
 8001fee:	4413      	add	r3, r2
 8001ff0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001ff4:	461a      	mov	r2, r3
 8001ff6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001ffa:	6093      	str	r3, [r2, #8]
 8001ffc:	e0cb      	b.n	8002196 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8001ffe:	68bb      	ldr	r3, [r7, #8]
 8002000:	f003 0320 	and.w	r3, r3, #32
 8002004:	2b00      	cmp	r3, #0
 8002006:	d009      	beq.n	800201c <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	015a      	lsls	r2, r3, #5
 800200c:	693b      	ldr	r3, [r7, #16]
 800200e:	4413      	add	r3, r2
 8002010:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002014:	461a      	mov	r2, r3
 8002016:	2320      	movs	r3, #32
 8002018:	6093      	str	r3, [r2, #8]
 800201a:	e0bc      	b.n	8002196 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800201c:	68bb      	ldr	r3, [r7, #8]
 800201e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002022:	2b00      	cmp	r3, #0
 8002024:	f040 80b7 	bne.w	8002196 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	4a5d      	ldr	r2, [pc, #372]	; (80021a0 <PCD_EP_OutXfrComplete_int+0x210>)
 800202c:	4293      	cmp	r3, r2
 800202e:	d90f      	bls.n	8002050 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002030:	68bb      	ldr	r3, [r7, #8]
 8002032:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002036:	2b00      	cmp	r3, #0
 8002038:	d00a      	beq.n	8002050 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	015a      	lsls	r2, r3, #5
 800203e:	693b      	ldr	r3, [r7, #16]
 8002040:	4413      	add	r3, r2
 8002042:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002046:	461a      	mov	r2, r3
 8002048:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800204c:	6093      	str	r3, [r2, #8]
 800204e:	e0a2      	b.n	8002196 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8002050:	6879      	ldr	r1, [r7, #4]
 8002052:	683a      	ldr	r2, [r7, #0]
 8002054:	4613      	mov	r3, r2
 8002056:	00db      	lsls	r3, r3, #3
 8002058:	1a9b      	subs	r3, r3, r2
 800205a:	009b      	lsls	r3, r3, #2
 800205c:	440b      	add	r3, r1
 800205e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002062:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	0159      	lsls	r1, r3, #5
 8002068:	693b      	ldr	r3, [r7, #16]
 800206a:	440b      	add	r3, r1
 800206c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002070:	691b      	ldr	r3, [r3, #16]
 8002072:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8002076:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8002078:	6878      	ldr	r0, [r7, #4]
 800207a:	683a      	ldr	r2, [r7, #0]
 800207c:	4613      	mov	r3, r2
 800207e:	00db      	lsls	r3, r3, #3
 8002080:	1a9b      	subs	r3, r3, r2
 8002082:	009b      	lsls	r3, r3, #2
 8002084:	4403      	add	r3, r0
 8002086:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800208a:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 800208c:	6879      	ldr	r1, [r7, #4]
 800208e:	683a      	ldr	r2, [r7, #0]
 8002090:	4613      	mov	r3, r2
 8002092:	00db      	lsls	r3, r3, #3
 8002094:	1a9b      	subs	r3, r3, r2
 8002096:	009b      	lsls	r3, r3, #2
 8002098:	440b      	add	r3, r1
 800209a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800209e:	6819      	ldr	r1, [r3, #0]
 80020a0:	6878      	ldr	r0, [r7, #4]
 80020a2:	683a      	ldr	r2, [r7, #0]
 80020a4:	4613      	mov	r3, r2
 80020a6:	00db      	lsls	r3, r3, #3
 80020a8:	1a9b      	subs	r3, r3, r2
 80020aa:	009b      	lsls	r3, r3, #2
 80020ac:	4403      	add	r3, r0
 80020ae:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	4419      	add	r1, r3
 80020b6:	6878      	ldr	r0, [r7, #4]
 80020b8:	683a      	ldr	r2, [r7, #0]
 80020ba:	4613      	mov	r3, r2
 80020bc:	00db      	lsls	r3, r3, #3
 80020be:	1a9b      	subs	r3, r3, r2
 80020c0:	009b      	lsls	r3, r3, #2
 80020c2:	4403      	add	r3, r0
 80020c4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80020c8:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d114      	bne.n	80020fa <PCD_EP_OutXfrComplete_int+0x16a>
 80020d0:	6879      	ldr	r1, [r7, #4]
 80020d2:	683a      	ldr	r2, [r7, #0]
 80020d4:	4613      	mov	r3, r2
 80020d6:	00db      	lsls	r3, r3, #3
 80020d8:	1a9b      	subs	r3, r3, r2
 80020da:	009b      	lsls	r3, r3, #2
 80020dc:	440b      	add	r3, r1
 80020de:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d108      	bne.n	80020fa <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6818      	ldr	r0, [r3, #0]
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80020f2:	461a      	mov	r2, r3
 80020f4:	2101      	movs	r1, #1
 80020f6:	f002 f80b 	bl	8004110 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	b2db      	uxtb	r3, r3
 80020fe:	4619      	mov	r1, r3
 8002100:	6878      	ldr	r0, [r7, #4]
 8002102:	f003 ff91 	bl	8006028 <HAL_PCD_DataOutStageCallback>
 8002106:	e046      	b.n	8002196 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	4a26      	ldr	r2, [pc, #152]	; (80021a4 <PCD_EP_OutXfrComplete_int+0x214>)
 800210c:	4293      	cmp	r3, r2
 800210e:	d124      	bne.n	800215a <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002110:	68bb      	ldr	r3, [r7, #8]
 8002112:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002116:	2b00      	cmp	r3, #0
 8002118:	d00a      	beq.n	8002130 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	015a      	lsls	r2, r3, #5
 800211e:	693b      	ldr	r3, [r7, #16]
 8002120:	4413      	add	r3, r2
 8002122:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002126:	461a      	mov	r2, r3
 8002128:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800212c:	6093      	str	r3, [r2, #8]
 800212e:	e032      	b.n	8002196 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002130:	68bb      	ldr	r3, [r7, #8]
 8002132:	f003 0320 	and.w	r3, r3, #32
 8002136:	2b00      	cmp	r3, #0
 8002138:	d008      	beq.n	800214c <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	015a      	lsls	r2, r3, #5
 800213e:	693b      	ldr	r3, [r7, #16]
 8002140:	4413      	add	r3, r2
 8002142:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002146:	461a      	mov	r2, r3
 8002148:	2320      	movs	r3, #32
 800214a:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	b2db      	uxtb	r3, r3
 8002150:	4619      	mov	r1, r3
 8002152:	6878      	ldr	r0, [r7, #4]
 8002154:	f003 ff68 	bl	8006028 <HAL_PCD_DataOutStageCallback>
 8002158:	e01d      	b.n	8002196 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	2b00      	cmp	r3, #0
 800215e:	d114      	bne.n	800218a <PCD_EP_OutXfrComplete_int+0x1fa>
 8002160:	6879      	ldr	r1, [r7, #4]
 8002162:	683a      	ldr	r2, [r7, #0]
 8002164:	4613      	mov	r3, r2
 8002166:	00db      	lsls	r3, r3, #3
 8002168:	1a9b      	subs	r3, r3, r2
 800216a:	009b      	lsls	r3, r3, #2
 800216c:	440b      	add	r3, r1
 800216e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	2b00      	cmp	r3, #0
 8002176:	d108      	bne.n	800218a <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6818      	ldr	r0, [r3, #0]
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002182:	461a      	mov	r2, r3
 8002184:	2100      	movs	r1, #0
 8002186:	f001 ffc3 	bl	8004110 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	b2db      	uxtb	r3, r3
 800218e:	4619      	mov	r1, r3
 8002190:	6878      	ldr	r0, [r7, #4]
 8002192:	f003 ff49 	bl	8006028 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002196:	2300      	movs	r3, #0
}
 8002198:	4618      	mov	r0, r3
 800219a:	3718      	adds	r7, #24
 800219c:	46bd      	mov	sp, r7
 800219e:	bd80      	pop	{r7, pc}
 80021a0:	4f54300a 	.word	0x4f54300a
 80021a4:	4f54310a 	.word	0x4f54310a

080021a8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b086      	sub	sp, #24
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
 80021b0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80021b8:	697b      	ldr	r3, [r7, #20]
 80021ba:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80021bc:	697b      	ldr	r3, [r7, #20]
 80021be:	333c      	adds	r3, #60	; 0x3c
 80021c0:	3304      	adds	r3, #4
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	015a      	lsls	r2, r3, #5
 80021ca:	693b      	ldr	r3, [r7, #16]
 80021cc:	4413      	add	r3, r2
 80021ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80021d2:	689b      	ldr	r3, [r3, #8]
 80021d4:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	4a15      	ldr	r2, [pc, #84]	; (8002230 <PCD_EP_OutSetupPacket_int+0x88>)
 80021da:	4293      	cmp	r3, r2
 80021dc:	d90e      	bls.n	80021fc <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80021de:	68bb      	ldr	r3, [r7, #8]
 80021e0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d009      	beq.n	80021fc <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	015a      	lsls	r2, r3, #5
 80021ec:	693b      	ldr	r3, [r7, #16]
 80021ee:	4413      	add	r3, r2
 80021f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80021f4:	461a      	mov	r2, r3
 80021f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80021fa:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80021fc:	6878      	ldr	r0, [r7, #4]
 80021fe:	f003 ff01 	bl	8006004 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	4a0a      	ldr	r2, [pc, #40]	; (8002230 <PCD_EP_OutSetupPacket_int+0x88>)
 8002206:	4293      	cmp	r3, r2
 8002208:	d90c      	bls.n	8002224 <PCD_EP_OutSetupPacket_int+0x7c>
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	691b      	ldr	r3, [r3, #16]
 800220e:	2b01      	cmp	r3, #1
 8002210:	d108      	bne.n	8002224 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6818      	ldr	r0, [r3, #0]
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800221c:	461a      	mov	r2, r3
 800221e:	2101      	movs	r1, #1
 8002220:	f001 ff76 	bl	8004110 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002224:	2300      	movs	r3, #0
}
 8002226:	4618      	mov	r0, r3
 8002228:	3718      	adds	r7, #24
 800222a:	46bd      	mov	sp, r7
 800222c:	bd80      	pop	{r7, pc}
 800222e:	bf00      	nop
 8002230:	4f54300a 	.word	0x4f54300a

08002234 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002234:	b480      	push	{r7}
 8002236:	b085      	sub	sp, #20
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
 800223c:	460b      	mov	r3, r1
 800223e:	70fb      	strb	r3, [r7, #3]
 8002240:	4613      	mov	r3, r2
 8002242:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800224a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800224c:	78fb      	ldrb	r3, [r7, #3]
 800224e:	2b00      	cmp	r3, #0
 8002250:	d107      	bne.n	8002262 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002252:	883b      	ldrh	r3, [r7, #0]
 8002254:	0419      	lsls	r1, r3, #16
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	68ba      	ldr	r2, [r7, #8]
 800225c:	430a      	orrs	r2, r1
 800225e:	629a      	str	r2, [r3, #40]	; 0x28
 8002260:	e028      	b.n	80022b4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002268:	0c1b      	lsrs	r3, r3, #16
 800226a:	68ba      	ldr	r2, [r7, #8]
 800226c:	4413      	add	r3, r2
 800226e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002270:	2300      	movs	r3, #0
 8002272:	73fb      	strb	r3, [r7, #15]
 8002274:	e00d      	b.n	8002292 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681a      	ldr	r2, [r3, #0]
 800227a:	7bfb      	ldrb	r3, [r7, #15]
 800227c:	3340      	adds	r3, #64	; 0x40
 800227e:	009b      	lsls	r3, r3, #2
 8002280:	4413      	add	r3, r2
 8002282:	685b      	ldr	r3, [r3, #4]
 8002284:	0c1b      	lsrs	r3, r3, #16
 8002286:	68ba      	ldr	r2, [r7, #8]
 8002288:	4413      	add	r3, r2
 800228a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800228c:	7bfb      	ldrb	r3, [r7, #15]
 800228e:	3301      	adds	r3, #1
 8002290:	73fb      	strb	r3, [r7, #15]
 8002292:	7bfa      	ldrb	r2, [r7, #15]
 8002294:	78fb      	ldrb	r3, [r7, #3]
 8002296:	3b01      	subs	r3, #1
 8002298:	429a      	cmp	r2, r3
 800229a:	d3ec      	bcc.n	8002276 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800229c:	883b      	ldrh	r3, [r7, #0]
 800229e:	0418      	lsls	r0, r3, #16
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6819      	ldr	r1, [r3, #0]
 80022a4:	78fb      	ldrb	r3, [r7, #3]
 80022a6:	3b01      	subs	r3, #1
 80022a8:	68ba      	ldr	r2, [r7, #8]
 80022aa:	4302      	orrs	r2, r0
 80022ac:	3340      	adds	r3, #64	; 0x40
 80022ae:	009b      	lsls	r3, r3, #2
 80022b0:	440b      	add	r3, r1
 80022b2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80022b4:	2300      	movs	r3, #0
}
 80022b6:	4618      	mov	r0, r3
 80022b8:	3714      	adds	r7, #20
 80022ba:	46bd      	mov	sp, r7
 80022bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c0:	4770      	bx	lr

080022c2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80022c2:	b480      	push	{r7}
 80022c4:	b083      	sub	sp, #12
 80022c6:	af00      	add	r7, sp, #0
 80022c8:	6078      	str	r0, [r7, #4]
 80022ca:	460b      	mov	r3, r1
 80022cc:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	887a      	ldrh	r2, [r7, #2]
 80022d4:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80022d6:	2300      	movs	r3, #0
}
 80022d8:	4618      	mov	r0, r3
 80022da:	370c      	adds	r7, #12
 80022dc:	46bd      	mov	sp, r7
 80022de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e2:	4770      	bx	lr

080022e4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80022e4:	b480      	push	{r7}
 80022e6:	b083      	sub	sp, #12
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
 80022ec:	460b      	mov	r3, r1
 80022ee:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80022f0:	bf00      	nop
 80022f2:	370c      	adds	r7, #12
 80022f4:	46bd      	mov	sp, r7
 80022f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fa:	4770      	bx	lr

080022fc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b086      	sub	sp, #24
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2b00      	cmp	r3, #0
 8002308:	d101      	bne.n	800230e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800230a:	2301      	movs	r3, #1
 800230c:	e264      	b.n	80027d8 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f003 0301 	and.w	r3, r3, #1
 8002316:	2b00      	cmp	r3, #0
 8002318:	d075      	beq.n	8002406 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800231a:	4ba3      	ldr	r3, [pc, #652]	; (80025a8 <HAL_RCC_OscConfig+0x2ac>)
 800231c:	689b      	ldr	r3, [r3, #8]
 800231e:	f003 030c 	and.w	r3, r3, #12
 8002322:	2b04      	cmp	r3, #4
 8002324:	d00c      	beq.n	8002340 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002326:	4ba0      	ldr	r3, [pc, #640]	; (80025a8 <HAL_RCC_OscConfig+0x2ac>)
 8002328:	689b      	ldr	r3, [r3, #8]
 800232a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800232e:	2b08      	cmp	r3, #8
 8002330:	d112      	bne.n	8002358 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002332:	4b9d      	ldr	r3, [pc, #628]	; (80025a8 <HAL_RCC_OscConfig+0x2ac>)
 8002334:	685b      	ldr	r3, [r3, #4]
 8002336:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800233a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800233e:	d10b      	bne.n	8002358 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002340:	4b99      	ldr	r3, [pc, #612]	; (80025a8 <HAL_RCC_OscConfig+0x2ac>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002348:	2b00      	cmp	r3, #0
 800234a:	d05b      	beq.n	8002404 <HAL_RCC_OscConfig+0x108>
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	685b      	ldr	r3, [r3, #4]
 8002350:	2b00      	cmp	r3, #0
 8002352:	d157      	bne.n	8002404 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002354:	2301      	movs	r3, #1
 8002356:	e23f      	b.n	80027d8 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	685b      	ldr	r3, [r3, #4]
 800235c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002360:	d106      	bne.n	8002370 <HAL_RCC_OscConfig+0x74>
 8002362:	4b91      	ldr	r3, [pc, #580]	; (80025a8 <HAL_RCC_OscConfig+0x2ac>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	4a90      	ldr	r2, [pc, #576]	; (80025a8 <HAL_RCC_OscConfig+0x2ac>)
 8002368:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800236c:	6013      	str	r3, [r2, #0]
 800236e:	e01d      	b.n	80023ac <HAL_RCC_OscConfig+0xb0>
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	685b      	ldr	r3, [r3, #4]
 8002374:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002378:	d10c      	bne.n	8002394 <HAL_RCC_OscConfig+0x98>
 800237a:	4b8b      	ldr	r3, [pc, #556]	; (80025a8 <HAL_RCC_OscConfig+0x2ac>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	4a8a      	ldr	r2, [pc, #552]	; (80025a8 <HAL_RCC_OscConfig+0x2ac>)
 8002380:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002384:	6013      	str	r3, [r2, #0]
 8002386:	4b88      	ldr	r3, [pc, #544]	; (80025a8 <HAL_RCC_OscConfig+0x2ac>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	4a87      	ldr	r2, [pc, #540]	; (80025a8 <HAL_RCC_OscConfig+0x2ac>)
 800238c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002390:	6013      	str	r3, [r2, #0]
 8002392:	e00b      	b.n	80023ac <HAL_RCC_OscConfig+0xb0>
 8002394:	4b84      	ldr	r3, [pc, #528]	; (80025a8 <HAL_RCC_OscConfig+0x2ac>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	4a83      	ldr	r2, [pc, #524]	; (80025a8 <HAL_RCC_OscConfig+0x2ac>)
 800239a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800239e:	6013      	str	r3, [r2, #0]
 80023a0:	4b81      	ldr	r3, [pc, #516]	; (80025a8 <HAL_RCC_OscConfig+0x2ac>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4a80      	ldr	r2, [pc, #512]	; (80025a8 <HAL_RCC_OscConfig+0x2ac>)
 80023a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80023aa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d013      	beq.n	80023dc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023b4:	f7fe fb26 	bl	8000a04 <HAL_GetTick>
 80023b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023ba:	e008      	b.n	80023ce <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80023bc:	f7fe fb22 	bl	8000a04 <HAL_GetTick>
 80023c0:	4602      	mov	r2, r0
 80023c2:	693b      	ldr	r3, [r7, #16]
 80023c4:	1ad3      	subs	r3, r2, r3
 80023c6:	2b64      	cmp	r3, #100	; 0x64
 80023c8:	d901      	bls.n	80023ce <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80023ca:	2303      	movs	r3, #3
 80023cc:	e204      	b.n	80027d8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023ce:	4b76      	ldr	r3, [pc, #472]	; (80025a8 <HAL_RCC_OscConfig+0x2ac>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d0f0      	beq.n	80023bc <HAL_RCC_OscConfig+0xc0>
 80023da:	e014      	b.n	8002406 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023dc:	f7fe fb12 	bl	8000a04 <HAL_GetTick>
 80023e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023e2:	e008      	b.n	80023f6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80023e4:	f7fe fb0e 	bl	8000a04 <HAL_GetTick>
 80023e8:	4602      	mov	r2, r0
 80023ea:	693b      	ldr	r3, [r7, #16]
 80023ec:	1ad3      	subs	r3, r2, r3
 80023ee:	2b64      	cmp	r3, #100	; 0x64
 80023f0:	d901      	bls.n	80023f6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80023f2:	2303      	movs	r3, #3
 80023f4:	e1f0      	b.n	80027d8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023f6:	4b6c      	ldr	r3, [pc, #432]	; (80025a8 <HAL_RCC_OscConfig+0x2ac>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d1f0      	bne.n	80023e4 <HAL_RCC_OscConfig+0xe8>
 8002402:	e000      	b.n	8002406 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002404:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f003 0302 	and.w	r3, r3, #2
 800240e:	2b00      	cmp	r3, #0
 8002410:	d063      	beq.n	80024da <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002412:	4b65      	ldr	r3, [pc, #404]	; (80025a8 <HAL_RCC_OscConfig+0x2ac>)
 8002414:	689b      	ldr	r3, [r3, #8]
 8002416:	f003 030c 	and.w	r3, r3, #12
 800241a:	2b00      	cmp	r3, #0
 800241c:	d00b      	beq.n	8002436 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800241e:	4b62      	ldr	r3, [pc, #392]	; (80025a8 <HAL_RCC_OscConfig+0x2ac>)
 8002420:	689b      	ldr	r3, [r3, #8]
 8002422:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002426:	2b08      	cmp	r3, #8
 8002428:	d11c      	bne.n	8002464 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800242a:	4b5f      	ldr	r3, [pc, #380]	; (80025a8 <HAL_RCC_OscConfig+0x2ac>)
 800242c:	685b      	ldr	r3, [r3, #4]
 800242e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002432:	2b00      	cmp	r3, #0
 8002434:	d116      	bne.n	8002464 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002436:	4b5c      	ldr	r3, [pc, #368]	; (80025a8 <HAL_RCC_OscConfig+0x2ac>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f003 0302 	and.w	r3, r3, #2
 800243e:	2b00      	cmp	r3, #0
 8002440:	d005      	beq.n	800244e <HAL_RCC_OscConfig+0x152>
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	68db      	ldr	r3, [r3, #12]
 8002446:	2b01      	cmp	r3, #1
 8002448:	d001      	beq.n	800244e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800244a:	2301      	movs	r3, #1
 800244c:	e1c4      	b.n	80027d8 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800244e:	4b56      	ldr	r3, [pc, #344]	; (80025a8 <HAL_RCC_OscConfig+0x2ac>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	691b      	ldr	r3, [r3, #16]
 800245a:	00db      	lsls	r3, r3, #3
 800245c:	4952      	ldr	r1, [pc, #328]	; (80025a8 <HAL_RCC_OscConfig+0x2ac>)
 800245e:	4313      	orrs	r3, r2
 8002460:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002462:	e03a      	b.n	80024da <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	68db      	ldr	r3, [r3, #12]
 8002468:	2b00      	cmp	r3, #0
 800246a:	d020      	beq.n	80024ae <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800246c:	4b4f      	ldr	r3, [pc, #316]	; (80025ac <HAL_RCC_OscConfig+0x2b0>)
 800246e:	2201      	movs	r2, #1
 8002470:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002472:	f7fe fac7 	bl	8000a04 <HAL_GetTick>
 8002476:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002478:	e008      	b.n	800248c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800247a:	f7fe fac3 	bl	8000a04 <HAL_GetTick>
 800247e:	4602      	mov	r2, r0
 8002480:	693b      	ldr	r3, [r7, #16]
 8002482:	1ad3      	subs	r3, r2, r3
 8002484:	2b02      	cmp	r3, #2
 8002486:	d901      	bls.n	800248c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002488:	2303      	movs	r3, #3
 800248a:	e1a5      	b.n	80027d8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800248c:	4b46      	ldr	r3, [pc, #280]	; (80025a8 <HAL_RCC_OscConfig+0x2ac>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f003 0302 	and.w	r3, r3, #2
 8002494:	2b00      	cmp	r3, #0
 8002496:	d0f0      	beq.n	800247a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002498:	4b43      	ldr	r3, [pc, #268]	; (80025a8 <HAL_RCC_OscConfig+0x2ac>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	691b      	ldr	r3, [r3, #16]
 80024a4:	00db      	lsls	r3, r3, #3
 80024a6:	4940      	ldr	r1, [pc, #256]	; (80025a8 <HAL_RCC_OscConfig+0x2ac>)
 80024a8:	4313      	orrs	r3, r2
 80024aa:	600b      	str	r3, [r1, #0]
 80024ac:	e015      	b.n	80024da <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80024ae:	4b3f      	ldr	r3, [pc, #252]	; (80025ac <HAL_RCC_OscConfig+0x2b0>)
 80024b0:	2200      	movs	r2, #0
 80024b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024b4:	f7fe faa6 	bl	8000a04 <HAL_GetTick>
 80024b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024ba:	e008      	b.n	80024ce <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80024bc:	f7fe faa2 	bl	8000a04 <HAL_GetTick>
 80024c0:	4602      	mov	r2, r0
 80024c2:	693b      	ldr	r3, [r7, #16]
 80024c4:	1ad3      	subs	r3, r2, r3
 80024c6:	2b02      	cmp	r3, #2
 80024c8:	d901      	bls.n	80024ce <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80024ca:	2303      	movs	r3, #3
 80024cc:	e184      	b.n	80027d8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024ce:	4b36      	ldr	r3, [pc, #216]	; (80025a8 <HAL_RCC_OscConfig+0x2ac>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f003 0302 	and.w	r3, r3, #2
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d1f0      	bne.n	80024bc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f003 0308 	and.w	r3, r3, #8
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d030      	beq.n	8002548 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	695b      	ldr	r3, [r3, #20]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d016      	beq.n	800251c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80024ee:	4b30      	ldr	r3, [pc, #192]	; (80025b0 <HAL_RCC_OscConfig+0x2b4>)
 80024f0:	2201      	movs	r2, #1
 80024f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024f4:	f7fe fa86 	bl	8000a04 <HAL_GetTick>
 80024f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024fa:	e008      	b.n	800250e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80024fc:	f7fe fa82 	bl	8000a04 <HAL_GetTick>
 8002500:	4602      	mov	r2, r0
 8002502:	693b      	ldr	r3, [r7, #16]
 8002504:	1ad3      	subs	r3, r2, r3
 8002506:	2b02      	cmp	r3, #2
 8002508:	d901      	bls.n	800250e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800250a:	2303      	movs	r3, #3
 800250c:	e164      	b.n	80027d8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800250e:	4b26      	ldr	r3, [pc, #152]	; (80025a8 <HAL_RCC_OscConfig+0x2ac>)
 8002510:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002512:	f003 0302 	and.w	r3, r3, #2
 8002516:	2b00      	cmp	r3, #0
 8002518:	d0f0      	beq.n	80024fc <HAL_RCC_OscConfig+0x200>
 800251a:	e015      	b.n	8002548 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800251c:	4b24      	ldr	r3, [pc, #144]	; (80025b0 <HAL_RCC_OscConfig+0x2b4>)
 800251e:	2200      	movs	r2, #0
 8002520:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002522:	f7fe fa6f 	bl	8000a04 <HAL_GetTick>
 8002526:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002528:	e008      	b.n	800253c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800252a:	f7fe fa6b 	bl	8000a04 <HAL_GetTick>
 800252e:	4602      	mov	r2, r0
 8002530:	693b      	ldr	r3, [r7, #16]
 8002532:	1ad3      	subs	r3, r2, r3
 8002534:	2b02      	cmp	r3, #2
 8002536:	d901      	bls.n	800253c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002538:	2303      	movs	r3, #3
 800253a:	e14d      	b.n	80027d8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800253c:	4b1a      	ldr	r3, [pc, #104]	; (80025a8 <HAL_RCC_OscConfig+0x2ac>)
 800253e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002540:	f003 0302 	and.w	r3, r3, #2
 8002544:	2b00      	cmp	r3, #0
 8002546:	d1f0      	bne.n	800252a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f003 0304 	and.w	r3, r3, #4
 8002550:	2b00      	cmp	r3, #0
 8002552:	f000 80a0 	beq.w	8002696 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002556:	2300      	movs	r3, #0
 8002558:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800255a:	4b13      	ldr	r3, [pc, #76]	; (80025a8 <HAL_RCC_OscConfig+0x2ac>)
 800255c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800255e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002562:	2b00      	cmp	r3, #0
 8002564:	d10f      	bne.n	8002586 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002566:	2300      	movs	r3, #0
 8002568:	60bb      	str	r3, [r7, #8]
 800256a:	4b0f      	ldr	r3, [pc, #60]	; (80025a8 <HAL_RCC_OscConfig+0x2ac>)
 800256c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800256e:	4a0e      	ldr	r2, [pc, #56]	; (80025a8 <HAL_RCC_OscConfig+0x2ac>)
 8002570:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002574:	6413      	str	r3, [r2, #64]	; 0x40
 8002576:	4b0c      	ldr	r3, [pc, #48]	; (80025a8 <HAL_RCC_OscConfig+0x2ac>)
 8002578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800257a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800257e:	60bb      	str	r3, [r7, #8]
 8002580:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002582:	2301      	movs	r3, #1
 8002584:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002586:	4b0b      	ldr	r3, [pc, #44]	; (80025b4 <HAL_RCC_OscConfig+0x2b8>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800258e:	2b00      	cmp	r3, #0
 8002590:	d121      	bne.n	80025d6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002592:	4b08      	ldr	r3, [pc, #32]	; (80025b4 <HAL_RCC_OscConfig+0x2b8>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	4a07      	ldr	r2, [pc, #28]	; (80025b4 <HAL_RCC_OscConfig+0x2b8>)
 8002598:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800259c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800259e:	f7fe fa31 	bl	8000a04 <HAL_GetTick>
 80025a2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025a4:	e011      	b.n	80025ca <HAL_RCC_OscConfig+0x2ce>
 80025a6:	bf00      	nop
 80025a8:	40023800 	.word	0x40023800
 80025ac:	42470000 	.word	0x42470000
 80025b0:	42470e80 	.word	0x42470e80
 80025b4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025b8:	f7fe fa24 	bl	8000a04 <HAL_GetTick>
 80025bc:	4602      	mov	r2, r0
 80025be:	693b      	ldr	r3, [r7, #16]
 80025c0:	1ad3      	subs	r3, r2, r3
 80025c2:	2b02      	cmp	r3, #2
 80025c4:	d901      	bls.n	80025ca <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80025c6:	2303      	movs	r3, #3
 80025c8:	e106      	b.n	80027d8 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025ca:	4b85      	ldr	r3, [pc, #532]	; (80027e0 <HAL_RCC_OscConfig+0x4e4>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d0f0      	beq.n	80025b8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	689b      	ldr	r3, [r3, #8]
 80025da:	2b01      	cmp	r3, #1
 80025dc:	d106      	bne.n	80025ec <HAL_RCC_OscConfig+0x2f0>
 80025de:	4b81      	ldr	r3, [pc, #516]	; (80027e4 <HAL_RCC_OscConfig+0x4e8>)
 80025e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025e2:	4a80      	ldr	r2, [pc, #512]	; (80027e4 <HAL_RCC_OscConfig+0x4e8>)
 80025e4:	f043 0301 	orr.w	r3, r3, #1
 80025e8:	6713      	str	r3, [r2, #112]	; 0x70
 80025ea:	e01c      	b.n	8002626 <HAL_RCC_OscConfig+0x32a>
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	689b      	ldr	r3, [r3, #8]
 80025f0:	2b05      	cmp	r3, #5
 80025f2:	d10c      	bne.n	800260e <HAL_RCC_OscConfig+0x312>
 80025f4:	4b7b      	ldr	r3, [pc, #492]	; (80027e4 <HAL_RCC_OscConfig+0x4e8>)
 80025f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025f8:	4a7a      	ldr	r2, [pc, #488]	; (80027e4 <HAL_RCC_OscConfig+0x4e8>)
 80025fa:	f043 0304 	orr.w	r3, r3, #4
 80025fe:	6713      	str	r3, [r2, #112]	; 0x70
 8002600:	4b78      	ldr	r3, [pc, #480]	; (80027e4 <HAL_RCC_OscConfig+0x4e8>)
 8002602:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002604:	4a77      	ldr	r2, [pc, #476]	; (80027e4 <HAL_RCC_OscConfig+0x4e8>)
 8002606:	f043 0301 	orr.w	r3, r3, #1
 800260a:	6713      	str	r3, [r2, #112]	; 0x70
 800260c:	e00b      	b.n	8002626 <HAL_RCC_OscConfig+0x32a>
 800260e:	4b75      	ldr	r3, [pc, #468]	; (80027e4 <HAL_RCC_OscConfig+0x4e8>)
 8002610:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002612:	4a74      	ldr	r2, [pc, #464]	; (80027e4 <HAL_RCC_OscConfig+0x4e8>)
 8002614:	f023 0301 	bic.w	r3, r3, #1
 8002618:	6713      	str	r3, [r2, #112]	; 0x70
 800261a:	4b72      	ldr	r3, [pc, #456]	; (80027e4 <HAL_RCC_OscConfig+0x4e8>)
 800261c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800261e:	4a71      	ldr	r2, [pc, #452]	; (80027e4 <HAL_RCC_OscConfig+0x4e8>)
 8002620:	f023 0304 	bic.w	r3, r3, #4
 8002624:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	689b      	ldr	r3, [r3, #8]
 800262a:	2b00      	cmp	r3, #0
 800262c:	d015      	beq.n	800265a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800262e:	f7fe f9e9 	bl	8000a04 <HAL_GetTick>
 8002632:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002634:	e00a      	b.n	800264c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002636:	f7fe f9e5 	bl	8000a04 <HAL_GetTick>
 800263a:	4602      	mov	r2, r0
 800263c:	693b      	ldr	r3, [r7, #16]
 800263e:	1ad3      	subs	r3, r2, r3
 8002640:	f241 3288 	movw	r2, #5000	; 0x1388
 8002644:	4293      	cmp	r3, r2
 8002646:	d901      	bls.n	800264c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002648:	2303      	movs	r3, #3
 800264a:	e0c5      	b.n	80027d8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800264c:	4b65      	ldr	r3, [pc, #404]	; (80027e4 <HAL_RCC_OscConfig+0x4e8>)
 800264e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002650:	f003 0302 	and.w	r3, r3, #2
 8002654:	2b00      	cmp	r3, #0
 8002656:	d0ee      	beq.n	8002636 <HAL_RCC_OscConfig+0x33a>
 8002658:	e014      	b.n	8002684 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800265a:	f7fe f9d3 	bl	8000a04 <HAL_GetTick>
 800265e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002660:	e00a      	b.n	8002678 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002662:	f7fe f9cf 	bl	8000a04 <HAL_GetTick>
 8002666:	4602      	mov	r2, r0
 8002668:	693b      	ldr	r3, [r7, #16]
 800266a:	1ad3      	subs	r3, r2, r3
 800266c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002670:	4293      	cmp	r3, r2
 8002672:	d901      	bls.n	8002678 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002674:	2303      	movs	r3, #3
 8002676:	e0af      	b.n	80027d8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002678:	4b5a      	ldr	r3, [pc, #360]	; (80027e4 <HAL_RCC_OscConfig+0x4e8>)
 800267a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800267c:	f003 0302 	and.w	r3, r3, #2
 8002680:	2b00      	cmp	r3, #0
 8002682:	d1ee      	bne.n	8002662 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002684:	7dfb      	ldrb	r3, [r7, #23]
 8002686:	2b01      	cmp	r3, #1
 8002688:	d105      	bne.n	8002696 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800268a:	4b56      	ldr	r3, [pc, #344]	; (80027e4 <HAL_RCC_OscConfig+0x4e8>)
 800268c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800268e:	4a55      	ldr	r2, [pc, #340]	; (80027e4 <HAL_RCC_OscConfig+0x4e8>)
 8002690:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002694:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	699b      	ldr	r3, [r3, #24]
 800269a:	2b00      	cmp	r3, #0
 800269c:	f000 809b 	beq.w	80027d6 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80026a0:	4b50      	ldr	r3, [pc, #320]	; (80027e4 <HAL_RCC_OscConfig+0x4e8>)
 80026a2:	689b      	ldr	r3, [r3, #8]
 80026a4:	f003 030c 	and.w	r3, r3, #12
 80026a8:	2b08      	cmp	r3, #8
 80026aa:	d05c      	beq.n	8002766 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	699b      	ldr	r3, [r3, #24]
 80026b0:	2b02      	cmp	r3, #2
 80026b2:	d141      	bne.n	8002738 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026b4:	4b4c      	ldr	r3, [pc, #304]	; (80027e8 <HAL_RCC_OscConfig+0x4ec>)
 80026b6:	2200      	movs	r2, #0
 80026b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026ba:	f7fe f9a3 	bl	8000a04 <HAL_GetTick>
 80026be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026c0:	e008      	b.n	80026d4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026c2:	f7fe f99f 	bl	8000a04 <HAL_GetTick>
 80026c6:	4602      	mov	r2, r0
 80026c8:	693b      	ldr	r3, [r7, #16]
 80026ca:	1ad3      	subs	r3, r2, r3
 80026cc:	2b02      	cmp	r3, #2
 80026ce:	d901      	bls.n	80026d4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80026d0:	2303      	movs	r3, #3
 80026d2:	e081      	b.n	80027d8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026d4:	4b43      	ldr	r3, [pc, #268]	; (80027e4 <HAL_RCC_OscConfig+0x4e8>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d1f0      	bne.n	80026c2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	69da      	ldr	r2, [r3, #28]
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6a1b      	ldr	r3, [r3, #32]
 80026e8:	431a      	orrs	r2, r3
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026ee:	019b      	lsls	r3, r3, #6
 80026f0:	431a      	orrs	r2, r3
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026f6:	085b      	lsrs	r3, r3, #1
 80026f8:	3b01      	subs	r3, #1
 80026fa:	041b      	lsls	r3, r3, #16
 80026fc:	431a      	orrs	r2, r3
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002702:	061b      	lsls	r3, r3, #24
 8002704:	4937      	ldr	r1, [pc, #220]	; (80027e4 <HAL_RCC_OscConfig+0x4e8>)
 8002706:	4313      	orrs	r3, r2
 8002708:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800270a:	4b37      	ldr	r3, [pc, #220]	; (80027e8 <HAL_RCC_OscConfig+0x4ec>)
 800270c:	2201      	movs	r2, #1
 800270e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002710:	f7fe f978 	bl	8000a04 <HAL_GetTick>
 8002714:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002716:	e008      	b.n	800272a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002718:	f7fe f974 	bl	8000a04 <HAL_GetTick>
 800271c:	4602      	mov	r2, r0
 800271e:	693b      	ldr	r3, [r7, #16]
 8002720:	1ad3      	subs	r3, r2, r3
 8002722:	2b02      	cmp	r3, #2
 8002724:	d901      	bls.n	800272a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002726:	2303      	movs	r3, #3
 8002728:	e056      	b.n	80027d8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800272a:	4b2e      	ldr	r3, [pc, #184]	; (80027e4 <HAL_RCC_OscConfig+0x4e8>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002732:	2b00      	cmp	r3, #0
 8002734:	d0f0      	beq.n	8002718 <HAL_RCC_OscConfig+0x41c>
 8002736:	e04e      	b.n	80027d6 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002738:	4b2b      	ldr	r3, [pc, #172]	; (80027e8 <HAL_RCC_OscConfig+0x4ec>)
 800273a:	2200      	movs	r2, #0
 800273c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800273e:	f7fe f961 	bl	8000a04 <HAL_GetTick>
 8002742:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002744:	e008      	b.n	8002758 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002746:	f7fe f95d 	bl	8000a04 <HAL_GetTick>
 800274a:	4602      	mov	r2, r0
 800274c:	693b      	ldr	r3, [r7, #16]
 800274e:	1ad3      	subs	r3, r2, r3
 8002750:	2b02      	cmp	r3, #2
 8002752:	d901      	bls.n	8002758 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002754:	2303      	movs	r3, #3
 8002756:	e03f      	b.n	80027d8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002758:	4b22      	ldr	r3, [pc, #136]	; (80027e4 <HAL_RCC_OscConfig+0x4e8>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002760:	2b00      	cmp	r3, #0
 8002762:	d1f0      	bne.n	8002746 <HAL_RCC_OscConfig+0x44a>
 8002764:	e037      	b.n	80027d6 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	699b      	ldr	r3, [r3, #24]
 800276a:	2b01      	cmp	r3, #1
 800276c:	d101      	bne.n	8002772 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800276e:	2301      	movs	r3, #1
 8002770:	e032      	b.n	80027d8 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002772:	4b1c      	ldr	r3, [pc, #112]	; (80027e4 <HAL_RCC_OscConfig+0x4e8>)
 8002774:	685b      	ldr	r3, [r3, #4]
 8002776:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	699b      	ldr	r3, [r3, #24]
 800277c:	2b01      	cmp	r3, #1
 800277e:	d028      	beq.n	80027d2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800278a:	429a      	cmp	r2, r3
 800278c:	d121      	bne.n	80027d2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002798:	429a      	cmp	r2, r3
 800279a:	d11a      	bne.n	80027d2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800279c:	68fa      	ldr	r2, [r7, #12]
 800279e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80027a2:	4013      	ands	r3, r2
 80027a4:	687a      	ldr	r2, [r7, #4]
 80027a6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80027a8:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80027aa:	4293      	cmp	r3, r2
 80027ac:	d111      	bne.n	80027d2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027b8:	085b      	lsrs	r3, r3, #1
 80027ba:	3b01      	subs	r3, #1
 80027bc:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80027be:	429a      	cmp	r2, r3
 80027c0:	d107      	bne.n	80027d2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027cc:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80027ce:	429a      	cmp	r2, r3
 80027d0:	d001      	beq.n	80027d6 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80027d2:	2301      	movs	r3, #1
 80027d4:	e000      	b.n	80027d8 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80027d6:	2300      	movs	r3, #0
}
 80027d8:	4618      	mov	r0, r3
 80027da:	3718      	adds	r7, #24
 80027dc:	46bd      	mov	sp, r7
 80027de:	bd80      	pop	{r7, pc}
 80027e0:	40007000 	.word	0x40007000
 80027e4:	40023800 	.word	0x40023800
 80027e8:	42470060 	.word	0x42470060

080027ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b084      	sub	sp, #16
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
 80027f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d101      	bne.n	8002800 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80027fc:	2301      	movs	r3, #1
 80027fe:	e0cc      	b.n	800299a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002800:	4b68      	ldr	r3, [pc, #416]	; (80029a4 <HAL_RCC_ClockConfig+0x1b8>)
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f003 0307 	and.w	r3, r3, #7
 8002808:	683a      	ldr	r2, [r7, #0]
 800280a:	429a      	cmp	r2, r3
 800280c:	d90c      	bls.n	8002828 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800280e:	4b65      	ldr	r3, [pc, #404]	; (80029a4 <HAL_RCC_ClockConfig+0x1b8>)
 8002810:	683a      	ldr	r2, [r7, #0]
 8002812:	b2d2      	uxtb	r2, r2
 8002814:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002816:	4b63      	ldr	r3, [pc, #396]	; (80029a4 <HAL_RCC_ClockConfig+0x1b8>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f003 0307 	and.w	r3, r3, #7
 800281e:	683a      	ldr	r2, [r7, #0]
 8002820:	429a      	cmp	r2, r3
 8002822:	d001      	beq.n	8002828 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002824:	2301      	movs	r3, #1
 8002826:	e0b8      	b.n	800299a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f003 0302 	and.w	r3, r3, #2
 8002830:	2b00      	cmp	r3, #0
 8002832:	d020      	beq.n	8002876 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f003 0304 	and.w	r3, r3, #4
 800283c:	2b00      	cmp	r3, #0
 800283e:	d005      	beq.n	800284c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002840:	4b59      	ldr	r3, [pc, #356]	; (80029a8 <HAL_RCC_ClockConfig+0x1bc>)
 8002842:	689b      	ldr	r3, [r3, #8]
 8002844:	4a58      	ldr	r2, [pc, #352]	; (80029a8 <HAL_RCC_ClockConfig+0x1bc>)
 8002846:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800284a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f003 0308 	and.w	r3, r3, #8
 8002854:	2b00      	cmp	r3, #0
 8002856:	d005      	beq.n	8002864 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002858:	4b53      	ldr	r3, [pc, #332]	; (80029a8 <HAL_RCC_ClockConfig+0x1bc>)
 800285a:	689b      	ldr	r3, [r3, #8]
 800285c:	4a52      	ldr	r2, [pc, #328]	; (80029a8 <HAL_RCC_ClockConfig+0x1bc>)
 800285e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002862:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002864:	4b50      	ldr	r3, [pc, #320]	; (80029a8 <HAL_RCC_ClockConfig+0x1bc>)
 8002866:	689b      	ldr	r3, [r3, #8]
 8002868:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	689b      	ldr	r3, [r3, #8]
 8002870:	494d      	ldr	r1, [pc, #308]	; (80029a8 <HAL_RCC_ClockConfig+0x1bc>)
 8002872:	4313      	orrs	r3, r2
 8002874:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f003 0301 	and.w	r3, r3, #1
 800287e:	2b00      	cmp	r3, #0
 8002880:	d044      	beq.n	800290c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	685b      	ldr	r3, [r3, #4]
 8002886:	2b01      	cmp	r3, #1
 8002888:	d107      	bne.n	800289a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800288a:	4b47      	ldr	r3, [pc, #284]	; (80029a8 <HAL_RCC_ClockConfig+0x1bc>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002892:	2b00      	cmp	r3, #0
 8002894:	d119      	bne.n	80028ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002896:	2301      	movs	r3, #1
 8002898:	e07f      	b.n	800299a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	685b      	ldr	r3, [r3, #4]
 800289e:	2b02      	cmp	r3, #2
 80028a0:	d003      	beq.n	80028aa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80028a6:	2b03      	cmp	r3, #3
 80028a8:	d107      	bne.n	80028ba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028aa:	4b3f      	ldr	r3, [pc, #252]	; (80029a8 <HAL_RCC_ClockConfig+0x1bc>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d109      	bne.n	80028ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028b6:	2301      	movs	r3, #1
 80028b8:	e06f      	b.n	800299a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028ba:	4b3b      	ldr	r3, [pc, #236]	; (80029a8 <HAL_RCC_ClockConfig+0x1bc>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f003 0302 	and.w	r3, r3, #2
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d101      	bne.n	80028ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028c6:	2301      	movs	r3, #1
 80028c8:	e067      	b.n	800299a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80028ca:	4b37      	ldr	r3, [pc, #220]	; (80029a8 <HAL_RCC_ClockConfig+0x1bc>)
 80028cc:	689b      	ldr	r3, [r3, #8]
 80028ce:	f023 0203 	bic.w	r2, r3, #3
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	685b      	ldr	r3, [r3, #4]
 80028d6:	4934      	ldr	r1, [pc, #208]	; (80029a8 <HAL_RCC_ClockConfig+0x1bc>)
 80028d8:	4313      	orrs	r3, r2
 80028da:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80028dc:	f7fe f892 	bl	8000a04 <HAL_GetTick>
 80028e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028e2:	e00a      	b.n	80028fa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028e4:	f7fe f88e 	bl	8000a04 <HAL_GetTick>
 80028e8:	4602      	mov	r2, r0
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	1ad3      	subs	r3, r2, r3
 80028ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d901      	bls.n	80028fa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80028f6:	2303      	movs	r3, #3
 80028f8:	e04f      	b.n	800299a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028fa:	4b2b      	ldr	r3, [pc, #172]	; (80029a8 <HAL_RCC_ClockConfig+0x1bc>)
 80028fc:	689b      	ldr	r3, [r3, #8]
 80028fe:	f003 020c 	and.w	r2, r3, #12
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	685b      	ldr	r3, [r3, #4]
 8002906:	009b      	lsls	r3, r3, #2
 8002908:	429a      	cmp	r2, r3
 800290a:	d1eb      	bne.n	80028e4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800290c:	4b25      	ldr	r3, [pc, #148]	; (80029a4 <HAL_RCC_ClockConfig+0x1b8>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f003 0307 	and.w	r3, r3, #7
 8002914:	683a      	ldr	r2, [r7, #0]
 8002916:	429a      	cmp	r2, r3
 8002918:	d20c      	bcs.n	8002934 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800291a:	4b22      	ldr	r3, [pc, #136]	; (80029a4 <HAL_RCC_ClockConfig+0x1b8>)
 800291c:	683a      	ldr	r2, [r7, #0]
 800291e:	b2d2      	uxtb	r2, r2
 8002920:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002922:	4b20      	ldr	r3, [pc, #128]	; (80029a4 <HAL_RCC_ClockConfig+0x1b8>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f003 0307 	and.w	r3, r3, #7
 800292a:	683a      	ldr	r2, [r7, #0]
 800292c:	429a      	cmp	r2, r3
 800292e:	d001      	beq.n	8002934 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002930:	2301      	movs	r3, #1
 8002932:	e032      	b.n	800299a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f003 0304 	and.w	r3, r3, #4
 800293c:	2b00      	cmp	r3, #0
 800293e:	d008      	beq.n	8002952 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002940:	4b19      	ldr	r3, [pc, #100]	; (80029a8 <HAL_RCC_ClockConfig+0x1bc>)
 8002942:	689b      	ldr	r3, [r3, #8]
 8002944:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	68db      	ldr	r3, [r3, #12]
 800294c:	4916      	ldr	r1, [pc, #88]	; (80029a8 <HAL_RCC_ClockConfig+0x1bc>)
 800294e:	4313      	orrs	r3, r2
 8002950:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f003 0308 	and.w	r3, r3, #8
 800295a:	2b00      	cmp	r3, #0
 800295c:	d009      	beq.n	8002972 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800295e:	4b12      	ldr	r3, [pc, #72]	; (80029a8 <HAL_RCC_ClockConfig+0x1bc>)
 8002960:	689b      	ldr	r3, [r3, #8]
 8002962:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	691b      	ldr	r3, [r3, #16]
 800296a:	00db      	lsls	r3, r3, #3
 800296c:	490e      	ldr	r1, [pc, #56]	; (80029a8 <HAL_RCC_ClockConfig+0x1bc>)
 800296e:	4313      	orrs	r3, r2
 8002970:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002972:	f000 f821 	bl	80029b8 <HAL_RCC_GetSysClockFreq>
 8002976:	4602      	mov	r2, r0
 8002978:	4b0b      	ldr	r3, [pc, #44]	; (80029a8 <HAL_RCC_ClockConfig+0x1bc>)
 800297a:	689b      	ldr	r3, [r3, #8]
 800297c:	091b      	lsrs	r3, r3, #4
 800297e:	f003 030f 	and.w	r3, r3, #15
 8002982:	490a      	ldr	r1, [pc, #40]	; (80029ac <HAL_RCC_ClockConfig+0x1c0>)
 8002984:	5ccb      	ldrb	r3, [r1, r3]
 8002986:	fa22 f303 	lsr.w	r3, r2, r3
 800298a:	4a09      	ldr	r2, [pc, #36]	; (80029b0 <HAL_RCC_ClockConfig+0x1c4>)
 800298c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800298e:	4b09      	ldr	r3, [pc, #36]	; (80029b4 <HAL_RCC_ClockConfig+0x1c8>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	4618      	mov	r0, r3
 8002994:	f7fd fff2 	bl	800097c <HAL_InitTick>

  return HAL_OK;
 8002998:	2300      	movs	r3, #0
}
 800299a:	4618      	mov	r0, r3
 800299c:	3710      	adds	r7, #16
 800299e:	46bd      	mov	sp, r7
 80029a0:	bd80      	pop	{r7, pc}
 80029a2:	bf00      	nop
 80029a4:	40023c00 	.word	0x40023c00
 80029a8:	40023800 	.word	0x40023800
 80029ac:	08006648 	.word	0x08006648
 80029b0:	20000000 	.word	0x20000000
 80029b4:	20000028 	.word	0x20000028

080029b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80029b8:	b5b0      	push	{r4, r5, r7, lr}
 80029ba:	b084      	sub	sp, #16
 80029bc:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80029be:	2100      	movs	r1, #0
 80029c0:	6079      	str	r1, [r7, #4]
 80029c2:	2100      	movs	r1, #0
 80029c4:	60f9      	str	r1, [r7, #12]
 80029c6:	2100      	movs	r1, #0
 80029c8:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80029ca:	2100      	movs	r1, #0
 80029cc:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80029ce:	4952      	ldr	r1, [pc, #328]	; (8002b18 <HAL_RCC_GetSysClockFreq+0x160>)
 80029d0:	6889      	ldr	r1, [r1, #8]
 80029d2:	f001 010c 	and.w	r1, r1, #12
 80029d6:	2908      	cmp	r1, #8
 80029d8:	d00d      	beq.n	80029f6 <HAL_RCC_GetSysClockFreq+0x3e>
 80029da:	2908      	cmp	r1, #8
 80029dc:	f200 8094 	bhi.w	8002b08 <HAL_RCC_GetSysClockFreq+0x150>
 80029e0:	2900      	cmp	r1, #0
 80029e2:	d002      	beq.n	80029ea <HAL_RCC_GetSysClockFreq+0x32>
 80029e4:	2904      	cmp	r1, #4
 80029e6:	d003      	beq.n	80029f0 <HAL_RCC_GetSysClockFreq+0x38>
 80029e8:	e08e      	b.n	8002b08 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80029ea:	4b4c      	ldr	r3, [pc, #304]	; (8002b1c <HAL_RCC_GetSysClockFreq+0x164>)
 80029ec:	60bb      	str	r3, [r7, #8]
       break;
 80029ee:	e08e      	b.n	8002b0e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80029f0:	4b4b      	ldr	r3, [pc, #300]	; (8002b20 <HAL_RCC_GetSysClockFreq+0x168>)
 80029f2:	60bb      	str	r3, [r7, #8]
      break;
 80029f4:	e08b      	b.n	8002b0e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80029f6:	4948      	ldr	r1, [pc, #288]	; (8002b18 <HAL_RCC_GetSysClockFreq+0x160>)
 80029f8:	6849      	ldr	r1, [r1, #4]
 80029fa:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 80029fe:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002a00:	4945      	ldr	r1, [pc, #276]	; (8002b18 <HAL_RCC_GetSysClockFreq+0x160>)
 8002a02:	6849      	ldr	r1, [r1, #4]
 8002a04:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8002a08:	2900      	cmp	r1, #0
 8002a0a:	d024      	beq.n	8002a56 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a0c:	4942      	ldr	r1, [pc, #264]	; (8002b18 <HAL_RCC_GetSysClockFreq+0x160>)
 8002a0e:	6849      	ldr	r1, [r1, #4]
 8002a10:	0989      	lsrs	r1, r1, #6
 8002a12:	4608      	mov	r0, r1
 8002a14:	f04f 0100 	mov.w	r1, #0
 8002a18:	f240 14ff 	movw	r4, #511	; 0x1ff
 8002a1c:	f04f 0500 	mov.w	r5, #0
 8002a20:	ea00 0204 	and.w	r2, r0, r4
 8002a24:	ea01 0305 	and.w	r3, r1, r5
 8002a28:	493d      	ldr	r1, [pc, #244]	; (8002b20 <HAL_RCC_GetSysClockFreq+0x168>)
 8002a2a:	fb01 f003 	mul.w	r0, r1, r3
 8002a2e:	2100      	movs	r1, #0
 8002a30:	fb01 f102 	mul.w	r1, r1, r2
 8002a34:	1844      	adds	r4, r0, r1
 8002a36:	493a      	ldr	r1, [pc, #232]	; (8002b20 <HAL_RCC_GetSysClockFreq+0x168>)
 8002a38:	fba2 0101 	umull	r0, r1, r2, r1
 8002a3c:	1863      	adds	r3, r4, r1
 8002a3e:	4619      	mov	r1, r3
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	461a      	mov	r2, r3
 8002a44:	f04f 0300 	mov.w	r3, #0
 8002a48:	f7fd fbc6 	bl	80001d8 <__aeabi_uldivmod>
 8002a4c:	4602      	mov	r2, r0
 8002a4e:	460b      	mov	r3, r1
 8002a50:	4613      	mov	r3, r2
 8002a52:	60fb      	str	r3, [r7, #12]
 8002a54:	e04a      	b.n	8002aec <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a56:	4b30      	ldr	r3, [pc, #192]	; (8002b18 <HAL_RCC_GetSysClockFreq+0x160>)
 8002a58:	685b      	ldr	r3, [r3, #4]
 8002a5a:	099b      	lsrs	r3, r3, #6
 8002a5c:	461a      	mov	r2, r3
 8002a5e:	f04f 0300 	mov.w	r3, #0
 8002a62:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002a66:	f04f 0100 	mov.w	r1, #0
 8002a6a:	ea02 0400 	and.w	r4, r2, r0
 8002a6e:	ea03 0501 	and.w	r5, r3, r1
 8002a72:	4620      	mov	r0, r4
 8002a74:	4629      	mov	r1, r5
 8002a76:	f04f 0200 	mov.w	r2, #0
 8002a7a:	f04f 0300 	mov.w	r3, #0
 8002a7e:	014b      	lsls	r3, r1, #5
 8002a80:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002a84:	0142      	lsls	r2, r0, #5
 8002a86:	4610      	mov	r0, r2
 8002a88:	4619      	mov	r1, r3
 8002a8a:	1b00      	subs	r0, r0, r4
 8002a8c:	eb61 0105 	sbc.w	r1, r1, r5
 8002a90:	f04f 0200 	mov.w	r2, #0
 8002a94:	f04f 0300 	mov.w	r3, #0
 8002a98:	018b      	lsls	r3, r1, #6
 8002a9a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002a9e:	0182      	lsls	r2, r0, #6
 8002aa0:	1a12      	subs	r2, r2, r0
 8002aa2:	eb63 0301 	sbc.w	r3, r3, r1
 8002aa6:	f04f 0000 	mov.w	r0, #0
 8002aaa:	f04f 0100 	mov.w	r1, #0
 8002aae:	00d9      	lsls	r1, r3, #3
 8002ab0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002ab4:	00d0      	lsls	r0, r2, #3
 8002ab6:	4602      	mov	r2, r0
 8002ab8:	460b      	mov	r3, r1
 8002aba:	1912      	adds	r2, r2, r4
 8002abc:	eb45 0303 	adc.w	r3, r5, r3
 8002ac0:	f04f 0000 	mov.w	r0, #0
 8002ac4:	f04f 0100 	mov.w	r1, #0
 8002ac8:	0299      	lsls	r1, r3, #10
 8002aca:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002ace:	0290      	lsls	r0, r2, #10
 8002ad0:	4602      	mov	r2, r0
 8002ad2:	460b      	mov	r3, r1
 8002ad4:	4610      	mov	r0, r2
 8002ad6:	4619      	mov	r1, r3
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	461a      	mov	r2, r3
 8002adc:	f04f 0300 	mov.w	r3, #0
 8002ae0:	f7fd fb7a 	bl	80001d8 <__aeabi_uldivmod>
 8002ae4:	4602      	mov	r2, r0
 8002ae6:	460b      	mov	r3, r1
 8002ae8:	4613      	mov	r3, r2
 8002aea:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002aec:	4b0a      	ldr	r3, [pc, #40]	; (8002b18 <HAL_RCC_GetSysClockFreq+0x160>)
 8002aee:	685b      	ldr	r3, [r3, #4]
 8002af0:	0c1b      	lsrs	r3, r3, #16
 8002af2:	f003 0303 	and.w	r3, r3, #3
 8002af6:	3301      	adds	r3, #1
 8002af8:	005b      	lsls	r3, r3, #1
 8002afa:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002afc:	68fa      	ldr	r2, [r7, #12]
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b04:	60bb      	str	r3, [r7, #8]
      break;
 8002b06:	e002      	b.n	8002b0e <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002b08:	4b04      	ldr	r3, [pc, #16]	; (8002b1c <HAL_RCC_GetSysClockFreq+0x164>)
 8002b0a:	60bb      	str	r3, [r7, #8]
      break;
 8002b0c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b0e:	68bb      	ldr	r3, [r7, #8]
}
 8002b10:	4618      	mov	r0, r3
 8002b12:	3710      	adds	r7, #16
 8002b14:	46bd      	mov	sp, r7
 8002b16:	bdb0      	pop	{r4, r5, r7, pc}
 8002b18:	40023800 	.word	0x40023800
 8002b1c:	00f42400 	.word	0x00f42400
 8002b20:	017d7840 	.word	0x017d7840

08002b24 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b24:	b480      	push	{r7}
 8002b26:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b28:	4b03      	ldr	r3, [pc, #12]	; (8002b38 <HAL_RCC_GetHCLKFreq+0x14>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
}
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b34:	4770      	bx	lr
 8002b36:	bf00      	nop
 8002b38:	20000000 	.word	0x20000000

08002b3c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002b3c:	b084      	sub	sp, #16
 8002b3e:	b580      	push	{r7, lr}
 8002b40:	b084      	sub	sp, #16
 8002b42:	af00      	add	r7, sp, #0
 8002b44:	6078      	str	r0, [r7, #4]
 8002b46:	f107 001c 	add.w	r0, r7, #28
 8002b4a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002b4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b50:	2b01      	cmp	r3, #1
 8002b52:	d122      	bne.n	8002b9a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b58:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	68db      	ldr	r3, [r3, #12]
 8002b64:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8002b68:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002b6c:	687a      	ldr	r2, [r7, #4]
 8002b6e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	68db      	ldr	r3, [r3, #12]
 8002b74:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8002b7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b7e:	2b01      	cmp	r3, #1
 8002b80:	d105      	bne.n	8002b8e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	68db      	ldr	r3, [r3, #12]
 8002b86:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8002b8e:	6878      	ldr	r0, [r7, #4]
 8002b90:	f001 fb1c 	bl	80041cc <USB_CoreReset>
 8002b94:	4603      	mov	r3, r0
 8002b96:	73fb      	strb	r3, [r7, #15]
 8002b98:	e01a      	b.n	8002bd0 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	68db      	ldr	r3, [r3, #12]
 8002b9e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8002ba6:	6878      	ldr	r0, [r7, #4]
 8002ba8:	f001 fb10 	bl	80041cc <USB_CoreReset>
 8002bac:	4603      	mov	r3, r0
 8002bae:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8002bb0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d106      	bne.n	8002bc4 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bba:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	639a      	str	r2, [r3, #56]	; 0x38
 8002bc2:	e005      	b.n	8002bd0 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bc8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8002bd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bd2:	2b01      	cmp	r3, #1
 8002bd4:	d10b      	bne.n	8002bee <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	689b      	ldr	r3, [r3, #8]
 8002bda:	f043 0206 	orr.w	r2, r3, #6
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	689b      	ldr	r3, [r3, #8]
 8002be6:	f043 0220 	orr.w	r2, r3, #32
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8002bee:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	3710      	adds	r7, #16
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002bfa:	b004      	add	sp, #16
 8002bfc:	4770      	bx	lr
	...

08002c00 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8002c00:	b480      	push	{r7}
 8002c02:	b087      	sub	sp, #28
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	60f8      	str	r0, [r7, #12]
 8002c08:	60b9      	str	r1, [r7, #8]
 8002c0a:	4613      	mov	r3, r2
 8002c0c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8002c0e:	79fb      	ldrb	r3, [r7, #7]
 8002c10:	2b02      	cmp	r3, #2
 8002c12:	d165      	bne.n	8002ce0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8002c14:	68bb      	ldr	r3, [r7, #8]
 8002c16:	4a41      	ldr	r2, [pc, #260]	; (8002d1c <USB_SetTurnaroundTime+0x11c>)
 8002c18:	4293      	cmp	r3, r2
 8002c1a:	d906      	bls.n	8002c2a <USB_SetTurnaroundTime+0x2a>
 8002c1c:	68bb      	ldr	r3, [r7, #8]
 8002c1e:	4a40      	ldr	r2, [pc, #256]	; (8002d20 <USB_SetTurnaroundTime+0x120>)
 8002c20:	4293      	cmp	r3, r2
 8002c22:	d202      	bcs.n	8002c2a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8002c24:	230f      	movs	r3, #15
 8002c26:	617b      	str	r3, [r7, #20]
 8002c28:	e062      	b.n	8002cf0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8002c2a:	68bb      	ldr	r3, [r7, #8]
 8002c2c:	4a3c      	ldr	r2, [pc, #240]	; (8002d20 <USB_SetTurnaroundTime+0x120>)
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d306      	bcc.n	8002c40 <USB_SetTurnaroundTime+0x40>
 8002c32:	68bb      	ldr	r3, [r7, #8]
 8002c34:	4a3b      	ldr	r2, [pc, #236]	; (8002d24 <USB_SetTurnaroundTime+0x124>)
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d202      	bcs.n	8002c40 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8002c3a:	230e      	movs	r3, #14
 8002c3c:	617b      	str	r3, [r7, #20]
 8002c3e:	e057      	b.n	8002cf0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8002c40:	68bb      	ldr	r3, [r7, #8]
 8002c42:	4a38      	ldr	r2, [pc, #224]	; (8002d24 <USB_SetTurnaroundTime+0x124>)
 8002c44:	4293      	cmp	r3, r2
 8002c46:	d306      	bcc.n	8002c56 <USB_SetTurnaroundTime+0x56>
 8002c48:	68bb      	ldr	r3, [r7, #8]
 8002c4a:	4a37      	ldr	r2, [pc, #220]	; (8002d28 <USB_SetTurnaroundTime+0x128>)
 8002c4c:	4293      	cmp	r3, r2
 8002c4e:	d202      	bcs.n	8002c56 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8002c50:	230d      	movs	r3, #13
 8002c52:	617b      	str	r3, [r7, #20]
 8002c54:	e04c      	b.n	8002cf0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8002c56:	68bb      	ldr	r3, [r7, #8]
 8002c58:	4a33      	ldr	r2, [pc, #204]	; (8002d28 <USB_SetTurnaroundTime+0x128>)
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d306      	bcc.n	8002c6c <USB_SetTurnaroundTime+0x6c>
 8002c5e:	68bb      	ldr	r3, [r7, #8]
 8002c60:	4a32      	ldr	r2, [pc, #200]	; (8002d2c <USB_SetTurnaroundTime+0x12c>)
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d802      	bhi.n	8002c6c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8002c66:	230c      	movs	r3, #12
 8002c68:	617b      	str	r3, [r7, #20]
 8002c6a:	e041      	b.n	8002cf0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8002c6c:	68bb      	ldr	r3, [r7, #8]
 8002c6e:	4a2f      	ldr	r2, [pc, #188]	; (8002d2c <USB_SetTurnaroundTime+0x12c>)
 8002c70:	4293      	cmp	r3, r2
 8002c72:	d906      	bls.n	8002c82 <USB_SetTurnaroundTime+0x82>
 8002c74:	68bb      	ldr	r3, [r7, #8]
 8002c76:	4a2e      	ldr	r2, [pc, #184]	; (8002d30 <USB_SetTurnaroundTime+0x130>)
 8002c78:	4293      	cmp	r3, r2
 8002c7a:	d802      	bhi.n	8002c82 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8002c7c:	230b      	movs	r3, #11
 8002c7e:	617b      	str	r3, [r7, #20]
 8002c80:	e036      	b.n	8002cf0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8002c82:	68bb      	ldr	r3, [r7, #8]
 8002c84:	4a2a      	ldr	r2, [pc, #168]	; (8002d30 <USB_SetTurnaroundTime+0x130>)
 8002c86:	4293      	cmp	r3, r2
 8002c88:	d906      	bls.n	8002c98 <USB_SetTurnaroundTime+0x98>
 8002c8a:	68bb      	ldr	r3, [r7, #8]
 8002c8c:	4a29      	ldr	r2, [pc, #164]	; (8002d34 <USB_SetTurnaroundTime+0x134>)
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	d802      	bhi.n	8002c98 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8002c92:	230a      	movs	r3, #10
 8002c94:	617b      	str	r3, [r7, #20]
 8002c96:	e02b      	b.n	8002cf0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8002c98:	68bb      	ldr	r3, [r7, #8]
 8002c9a:	4a26      	ldr	r2, [pc, #152]	; (8002d34 <USB_SetTurnaroundTime+0x134>)
 8002c9c:	4293      	cmp	r3, r2
 8002c9e:	d906      	bls.n	8002cae <USB_SetTurnaroundTime+0xae>
 8002ca0:	68bb      	ldr	r3, [r7, #8]
 8002ca2:	4a25      	ldr	r2, [pc, #148]	; (8002d38 <USB_SetTurnaroundTime+0x138>)
 8002ca4:	4293      	cmp	r3, r2
 8002ca6:	d202      	bcs.n	8002cae <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8002ca8:	2309      	movs	r3, #9
 8002caa:	617b      	str	r3, [r7, #20]
 8002cac:	e020      	b.n	8002cf0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8002cae:	68bb      	ldr	r3, [r7, #8]
 8002cb0:	4a21      	ldr	r2, [pc, #132]	; (8002d38 <USB_SetTurnaroundTime+0x138>)
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d306      	bcc.n	8002cc4 <USB_SetTurnaroundTime+0xc4>
 8002cb6:	68bb      	ldr	r3, [r7, #8]
 8002cb8:	4a20      	ldr	r2, [pc, #128]	; (8002d3c <USB_SetTurnaroundTime+0x13c>)
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d802      	bhi.n	8002cc4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8002cbe:	2308      	movs	r3, #8
 8002cc0:	617b      	str	r3, [r7, #20]
 8002cc2:	e015      	b.n	8002cf0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8002cc4:	68bb      	ldr	r3, [r7, #8]
 8002cc6:	4a1d      	ldr	r2, [pc, #116]	; (8002d3c <USB_SetTurnaroundTime+0x13c>)
 8002cc8:	4293      	cmp	r3, r2
 8002cca:	d906      	bls.n	8002cda <USB_SetTurnaroundTime+0xda>
 8002ccc:	68bb      	ldr	r3, [r7, #8]
 8002cce:	4a1c      	ldr	r2, [pc, #112]	; (8002d40 <USB_SetTurnaroundTime+0x140>)
 8002cd0:	4293      	cmp	r3, r2
 8002cd2:	d202      	bcs.n	8002cda <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8002cd4:	2307      	movs	r3, #7
 8002cd6:	617b      	str	r3, [r7, #20]
 8002cd8:	e00a      	b.n	8002cf0 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8002cda:	2306      	movs	r3, #6
 8002cdc:	617b      	str	r3, [r7, #20]
 8002cde:	e007      	b.n	8002cf0 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8002ce0:	79fb      	ldrb	r3, [r7, #7]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d102      	bne.n	8002cec <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8002ce6:	2309      	movs	r3, #9
 8002ce8:	617b      	str	r3, [r7, #20]
 8002cea:	e001      	b.n	8002cf0 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8002cec:	2309      	movs	r3, #9
 8002cee:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	68db      	ldr	r3, [r3, #12]
 8002cf4:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	68da      	ldr	r2, [r3, #12]
 8002d00:	697b      	ldr	r3, [r7, #20]
 8002d02:	029b      	lsls	r3, r3, #10
 8002d04:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8002d08:	431a      	orrs	r2, r3
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002d0e:	2300      	movs	r3, #0
}
 8002d10:	4618      	mov	r0, r3
 8002d12:	371c      	adds	r7, #28
 8002d14:	46bd      	mov	sp, r7
 8002d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1a:	4770      	bx	lr
 8002d1c:	00d8acbf 	.word	0x00d8acbf
 8002d20:	00e4e1c0 	.word	0x00e4e1c0
 8002d24:	00f42400 	.word	0x00f42400
 8002d28:	01067380 	.word	0x01067380
 8002d2c:	011a499f 	.word	0x011a499f
 8002d30:	01312cff 	.word	0x01312cff
 8002d34:	014ca43f 	.word	0x014ca43f
 8002d38:	016e3600 	.word	0x016e3600
 8002d3c:	01a6ab1f 	.word	0x01a6ab1f
 8002d40:	01e84800 	.word	0x01e84800

08002d44 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8002d44:	b480      	push	{r7}
 8002d46:	b083      	sub	sp, #12
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	689b      	ldr	r3, [r3, #8]
 8002d50:	f043 0201 	orr.w	r2, r3, #1
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8002d58:	2300      	movs	r3, #0
}
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	370c      	adds	r7, #12
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d64:	4770      	bx	lr

08002d66 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8002d66:	b480      	push	{r7}
 8002d68:	b083      	sub	sp, #12
 8002d6a:	af00      	add	r7, sp, #0
 8002d6c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	689b      	ldr	r3, [r3, #8]
 8002d72:	f023 0201 	bic.w	r2, r3, #1
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8002d7a:	2300      	movs	r3, #0
}
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	370c      	adds	r7, #12
 8002d80:	46bd      	mov	sp, r7
 8002d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d86:	4770      	bx	lr

08002d88 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b084      	sub	sp, #16
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
 8002d90:	460b      	mov	r3, r1
 8002d92:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8002d94:	2300      	movs	r3, #0
 8002d96:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	68db      	ldr	r3, [r3, #12]
 8002d9c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8002da4:	78fb      	ldrb	r3, [r7, #3]
 8002da6:	2b01      	cmp	r3, #1
 8002da8:	d115      	bne.n	8002dd6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	68db      	ldr	r3, [r3, #12]
 8002dae:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8002db6:	2001      	movs	r0, #1
 8002db8:	f7fd fe30 	bl	8000a1c <HAL_Delay>
      ms++;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	3301      	adds	r3, #1
 8002dc0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8002dc2:	6878      	ldr	r0, [r7, #4]
 8002dc4:	f001 f972 	bl	80040ac <USB_GetMode>
 8002dc8:	4603      	mov	r3, r0
 8002dca:	2b01      	cmp	r3, #1
 8002dcc:	d01e      	beq.n	8002e0c <USB_SetCurrentMode+0x84>
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	2b31      	cmp	r3, #49	; 0x31
 8002dd2:	d9f0      	bls.n	8002db6 <USB_SetCurrentMode+0x2e>
 8002dd4:	e01a      	b.n	8002e0c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8002dd6:	78fb      	ldrb	r3, [r7, #3]
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d115      	bne.n	8002e08 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	68db      	ldr	r3, [r3, #12]
 8002de0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8002de8:	2001      	movs	r0, #1
 8002dea:	f7fd fe17 	bl	8000a1c <HAL_Delay>
      ms++;
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	3301      	adds	r3, #1
 8002df2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8002df4:	6878      	ldr	r0, [r7, #4]
 8002df6:	f001 f959 	bl	80040ac <USB_GetMode>
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d005      	beq.n	8002e0c <USB_SetCurrentMode+0x84>
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	2b31      	cmp	r3, #49	; 0x31
 8002e04:	d9f0      	bls.n	8002de8 <USB_SetCurrentMode+0x60>
 8002e06:	e001      	b.n	8002e0c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8002e08:	2301      	movs	r3, #1
 8002e0a:	e005      	b.n	8002e18 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	2b32      	cmp	r3, #50	; 0x32
 8002e10:	d101      	bne.n	8002e16 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8002e12:	2301      	movs	r3, #1
 8002e14:	e000      	b.n	8002e18 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8002e16:	2300      	movs	r3, #0
}
 8002e18:	4618      	mov	r0, r3
 8002e1a:	3710      	adds	r7, #16
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	bd80      	pop	{r7, pc}

08002e20 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002e20:	b084      	sub	sp, #16
 8002e22:	b580      	push	{r7, lr}
 8002e24:	b086      	sub	sp, #24
 8002e26:	af00      	add	r7, sp, #0
 8002e28:	6078      	str	r0, [r7, #4]
 8002e2a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8002e2e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8002e32:	2300      	movs	r3, #0
 8002e34:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	613b      	str	r3, [r7, #16]
 8002e3e:	e009      	b.n	8002e54 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8002e40:	687a      	ldr	r2, [r7, #4]
 8002e42:	693b      	ldr	r3, [r7, #16]
 8002e44:	3340      	adds	r3, #64	; 0x40
 8002e46:	009b      	lsls	r3, r3, #2
 8002e48:	4413      	add	r3, r2
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8002e4e:	693b      	ldr	r3, [r7, #16]
 8002e50:	3301      	adds	r3, #1
 8002e52:	613b      	str	r3, [r7, #16]
 8002e54:	693b      	ldr	r3, [r7, #16]
 8002e56:	2b0e      	cmp	r3, #14
 8002e58:	d9f2      	bls.n	8002e40 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8002e5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d11c      	bne.n	8002e9a <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e66:	685b      	ldr	r3, [r3, #4]
 8002e68:	68fa      	ldr	r2, [r7, #12]
 8002e6a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002e6e:	f043 0302 	orr.w	r3, r3, #2
 8002e72:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e78:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e84:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e90:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	639a      	str	r2, [r3, #56]	; 0x38
 8002e98:	e00b      	b.n	8002eb2 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e9e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002eaa:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8002eb8:	461a      	mov	r2, r3
 8002eba:	2300      	movs	r3, #0
 8002ebc:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ec4:	4619      	mov	r1, r3
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ecc:	461a      	mov	r2, r3
 8002ece:	680b      	ldr	r3, [r1, #0]
 8002ed0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002ed2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ed4:	2b01      	cmp	r3, #1
 8002ed6:	d10c      	bne.n	8002ef2 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8002ed8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d104      	bne.n	8002ee8 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8002ede:	2100      	movs	r1, #0
 8002ee0:	6878      	ldr	r0, [r7, #4]
 8002ee2:	f000 f945 	bl	8003170 <USB_SetDevSpeed>
 8002ee6:	e008      	b.n	8002efa <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8002ee8:	2101      	movs	r1, #1
 8002eea:	6878      	ldr	r0, [r7, #4]
 8002eec:	f000 f940 	bl	8003170 <USB_SetDevSpeed>
 8002ef0:	e003      	b.n	8002efa <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8002ef2:	2103      	movs	r1, #3
 8002ef4:	6878      	ldr	r0, [r7, #4]
 8002ef6:	f000 f93b 	bl	8003170 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8002efa:	2110      	movs	r1, #16
 8002efc:	6878      	ldr	r0, [r7, #4]
 8002efe:	f000 f8f3 	bl	80030e8 <USB_FlushTxFifo>
 8002f02:	4603      	mov	r3, r0
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d001      	beq.n	8002f0c <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8002f08:	2301      	movs	r3, #1
 8002f0a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8002f0c:	6878      	ldr	r0, [r7, #4]
 8002f0e:	f000 f90f 	bl	8003130 <USB_FlushRxFifo>
 8002f12:	4603      	mov	r3, r0
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d001      	beq.n	8002f1c <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8002f18:	2301      	movs	r3, #1
 8002f1a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f22:	461a      	mov	r2, r3
 8002f24:	2300      	movs	r3, #0
 8002f26:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f2e:	461a      	mov	r2, r3
 8002f30:	2300      	movs	r3, #0
 8002f32:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f3a:	461a      	mov	r2, r3
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002f40:	2300      	movs	r3, #0
 8002f42:	613b      	str	r3, [r7, #16]
 8002f44:	e043      	b.n	8002fce <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8002f46:	693b      	ldr	r3, [r7, #16]
 8002f48:	015a      	lsls	r2, r3, #5
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	4413      	add	r3, r2
 8002f4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002f58:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002f5c:	d118      	bne.n	8002f90 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8002f5e:	693b      	ldr	r3, [r7, #16]
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d10a      	bne.n	8002f7a <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8002f64:	693b      	ldr	r3, [r7, #16]
 8002f66:	015a      	lsls	r2, r3, #5
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	4413      	add	r3, r2
 8002f6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002f70:	461a      	mov	r2, r3
 8002f72:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002f76:	6013      	str	r3, [r2, #0]
 8002f78:	e013      	b.n	8002fa2 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8002f7a:	693b      	ldr	r3, [r7, #16]
 8002f7c:	015a      	lsls	r2, r3, #5
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	4413      	add	r3, r2
 8002f82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002f86:	461a      	mov	r2, r3
 8002f88:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002f8c:	6013      	str	r3, [r2, #0]
 8002f8e:	e008      	b.n	8002fa2 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8002f90:	693b      	ldr	r3, [r7, #16]
 8002f92:	015a      	lsls	r2, r3, #5
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	4413      	add	r3, r2
 8002f98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002f9c:	461a      	mov	r2, r3
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8002fa2:	693b      	ldr	r3, [r7, #16]
 8002fa4:	015a      	lsls	r2, r3, #5
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	4413      	add	r3, r2
 8002faa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002fae:	461a      	mov	r2, r3
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8002fb4:	693b      	ldr	r3, [r7, #16]
 8002fb6:	015a      	lsls	r2, r3, #5
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	4413      	add	r3, r2
 8002fbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002fc0:	461a      	mov	r2, r3
 8002fc2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002fc6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002fc8:	693b      	ldr	r3, [r7, #16]
 8002fca:	3301      	adds	r3, #1
 8002fcc:	613b      	str	r3, [r7, #16]
 8002fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fd0:	693a      	ldr	r2, [r7, #16]
 8002fd2:	429a      	cmp	r2, r3
 8002fd4:	d3b7      	bcc.n	8002f46 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	613b      	str	r3, [r7, #16]
 8002fda:	e043      	b.n	8003064 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8002fdc:	693b      	ldr	r3, [r7, #16]
 8002fde:	015a      	lsls	r2, r3, #5
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	4413      	add	r3, r2
 8002fe4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002fee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002ff2:	d118      	bne.n	8003026 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8002ff4:	693b      	ldr	r3, [r7, #16]
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d10a      	bne.n	8003010 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8002ffa:	693b      	ldr	r3, [r7, #16]
 8002ffc:	015a      	lsls	r2, r3, #5
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	4413      	add	r3, r2
 8003002:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003006:	461a      	mov	r2, r3
 8003008:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800300c:	6013      	str	r3, [r2, #0]
 800300e:	e013      	b.n	8003038 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003010:	693b      	ldr	r3, [r7, #16]
 8003012:	015a      	lsls	r2, r3, #5
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	4413      	add	r3, r2
 8003018:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800301c:	461a      	mov	r2, r3
 800301e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003022:	6013      	str	r3, [r2, #0]
 8003024:	e008      	b.n	8003038 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003026:	693b      	ldr	r3, [r7, #16]
 8003028:	015a      	lsls	r2, r3, #5
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	4413      	add	r3, r2
 800302e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003032:	461a      	mov	r2, r3
 8003034:	2300      	movs	r3, #0
 8003036:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003038:	693b      	ldr	r3, [r7, #16]
 800303a:	015a      	lsls	r2, r3, #5
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	4413      	add	r3, r2
 8003040:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003044:	461a      	mov	r2, r3
 8003046:	2300      	movs	r3, #0
 8003048:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800304a:	693b      	ldr	r3, [r7, #16]
 800304c:	015a      	lsls	r2, r3, #5
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	4413      	add	r3, r2
 8003052:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003056:	461a      	mov	r2, r3
 8003058:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800305c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800305e:	693b      	ldr	r3, [r7, #16]
 8003060:	3301      	adds	r3, #1
 8003062:	613b      	str	r3, [r7, #16]
 8003064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003066:	693a      	ldr	r2, [r7, #16]
 8003068:	429a      	cmp	r2, r3
 800306a:	d3b7      	bcc.n	8002fdc <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003072:	691b      	ldr	r3, [r3, #16]
 8003074:	68fa      	ldr	r2, [r7, #12]
 8003076:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800307a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800307e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2200      	movs	r2, #0
 8003084:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800308c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800308e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003090:	2b00      	cmp	r3, #0
 8003092:	d105      	bne.n	80030a0 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	699b      	ldr	r3, [r3, #24]
 8003098:	f043 0210 	orr.w	r2, r3, #16
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	699a      	ldr	r2, [r3, #24]
 80030a4:	4b0f      	ldr	r3, [pc, #60]	; (80030e4 <USB_DevInit+0x2c4>)
 80030a6:	4313      	orrs	r3, r2
 80030a8:	687a      	ldr	r2, [r7, #4]
 80030aa:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80030ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d005      	beq.n	80030be <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	699b      	ldr	r3, [r3, #24]
 80030b6:	f043 0208 	orr.w	r2, r3, #8
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80030be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80030c0:	2b01      	cmp	r3, #1
 80030c2:	d107      	bne.n	80030d4 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	699b      	ldr	r3, [r3, #24]
 80030c8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80030cc:	f043 0304 	orr.w	r3, r3, #4
 80030d0:	687a      	ldr	r2, [r7, #4]
 80030d2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80030d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80030d6:	4618      	mov	r0, r3
 80030d8:	3718      	adds	r7, #24
 80030da:	46bd      	mov	sp, r7
 80030dc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80030e0:	b004      	add	sp, #16
 80030e2:	4770      	bx	lr
 80030e4:	803c3800 	.word	0x803c3800

080030e8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80030e8:	b480      	push	{r7}
 80030ea:	b085      	sub	sp, #20
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
 80030f0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80030f2:	2300      	movs	r3, #0
 80030f4:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	019b      	lsls	r3, r3, #6
 80030fa:	f043 0220 	orr.w	r2, r3, #32
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	3301      	adds	r3, #1
 8003106:	60fb      	str	r3, [r7, #12]
 8003108:	4a08      	ldr	r2, [pc, #32]	; (800312c <USB_FlushTxFifo+0x44>)
 800310a:	4293      	cmp	r3, r2
 800310c:	d901      	bls.n	8003112 <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 800310e:	2303      	movs	r3, #3
 8003110:	e006      	b.n	8003120 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	691b      	ldr	r3, [r3, #16]
 8003116:	f003 0320 	and.w	r3, r3, #32
 800311a:	2b20      	cmp	r3, #32
 800311c:	d0f1      	beq.n	8003102 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800311e:	2300      	movs	r3, #0
}
 8003120:	4618      	mov	r0, r3
 8003122:	3714      	adds	r7, #20
 8003124:	46bd      	mov	sp, r7
 8003126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312a:	4770      	bx	lr
 800312c:	00030d40 	.word	0x00030d40

08003130 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003130:	b480      	push	{r7}
 8003132:	b085      	sub	sp, #20
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003138:	2300      	movs	r3, #0
 800313a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2210      	movs	r2, #16
 8003140:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	3301      	adds	r3, #1
 8003146:	60fb      	str	r3, [r7, #12]
 8003148:	4a08      	ldr	r2, [pc, #32]	; (800316c <USB_FlushRxFifo+0x3c>)
 800314a:	4293      	cmp	r3, r2
 800314c:	d901      	bls.n	8003152 <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 800314e:	2303      	movs	r3, #3
 8003150:	e006      	b.n	8003160 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	691b      	ldr	r3, [r3, #16]
 8003156:	f003 0310 	and.w	r3, r3, #16
 800315a:	2b10      	cmp	r3, #16
 800315c:	d0f1      	beq.n	8003142 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800315e:	2300      	movs	r3, #0
}
 8003160:	4618      	mov	r0, r3
 8003162:	3714      	adds	r7, #20
 8003164:	46bd      	mov	sp, r7
 8003166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316a:	4770      	bx	lr
 800316c:	00030d40 	.word	0x00030d40

08003170 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003170:	b480      	push	{r7}
 8003172:	b085      	sub	sp, #20
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
 8003178:	460b      	mov	r3, r1
 800317a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003186:	681a      	ldr	r2, [r3, #0]
 8003188:	78fb      	ldrb	r3, [r7, #3]
 800318a:	68f9      	ldr	r1, [r7, #12]
 800318c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003190:	4313      	orrs	r3, r2
 8003192:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003194:	2300      	movs	r3, #0
}
 8003196:	4618      	mov	r0, r3
 8003198:	3714      	adds	r7, #20
 800319a:	46bd      	mov	sp, r7
 800319c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a0:	4770      	bx	lr

080031a2 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80031a2:	b480      	push	{r7}
 80031a4:	b087      	sub	sp, #28
 80031a6:	af00      	add	r7, sp, #0
 80031a8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80031ae:	693b      	ldr	r3, [r7, #16]
 80031b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80031b4:	689b      	ldr	r3, [r3, #8]
 80031b6:	f003 0306 	and.w	r3, r3, #6
 80031ba:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d102      	bne.n	80031c8 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80031c2:	2300      	movs	r3, #0
 80031c4:	75fb      	strb	r3, [r7, #23]
 80031c6:	e00a      	b.n	80031de <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	2b02      	cmp	r3, #2
 80031cc:	d002      	beq.n	80031d4 <USB_GetDevSpeed+0x32>
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	2b06      	cmp	r3, #6
 80031d2:	d102      	bne.n	80031da <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80031d4:	2302      	movs	r3, #2
 80031d6:	75fb      	strb	r3, [r7, #23]
 80031d8:	e001      	b.n	80031de <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80031da:	230f      	movs	r3, #15
 80031dc:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80031de:	7dfb      	ldrb	r3, [r7, #23]
}
 80031e0:	4618      	mov	r0, r3
 80031e2:	371c      	adds	r7, #28
 80031e4:	46bd      	mov	sp, r7
 80031e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ea:	4770      	bx	lr

080031ec <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80031ec:	b480      	push	{r7}
 80031ee:	b085      	sub	sp, #20
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
 80031f4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	781b      	ldrb	r3, [r3, #0]
 80031fe:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	785b      	ldrb	r3, [r3, #1]
 8003204:	2b01      	cmp	r3, #1
 8003206:	d13a      	bne.n	800327e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800320e:	69da      	ldr	r2, [r3, #28]
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	781b      	ldrb	r3, [r3, #0]
 8003214:	f003 030f 	and.w	r3, r3, #15
 8003218:	2101      	movs	r1, #1
 800321a:	fa01 f303 	lsl.w	r3, r1, r3
 800321e:	b29b      	uxth	r3, r3
 8003220:	68f9      	ldr	r1, [r7, #12]
 8003222:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003226:	4313      	orrs	r3, r2
 8003228:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800322a:	68bb      	ldr	r3, [r7, #8]
 800322c:	015a      	lsls	r2, r3, #5
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	4413      	add	r3, r2
 8003232:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800323c:	2b00      	cmp	r3, #0
 800323e:	d155      	bne.n	80032ec <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003240:	68bb      	ldr	r3, [r7, #8]
 8003242:	015a      	lsls	r2, r3, #5
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	4413      	add	r3, r2
 8003248:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800324c:	681a      	ldr	r2, [r3, #0]
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	689b      	ldr	r3, [r3, #8]
 8003252:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003256:	683b      	ldr	r3, [r7, #0]
 8003258:	78db      	ldrb	r3, [r3, #3]
 800325a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800325c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800325e:	68bb      	ldr	r3, [r7, #8]
 8003260:	059b      	lsls	r3, r3, #22
 8003262:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003264:	4313      	orrs	r3, r2
 8003266:	68ba      	ldr	r2, [r7, #8]
 8003268:	0151      	lsls	r1, r2, #5
 800326a:	68fa      	ldr	r2, [r7, #12]
 800326c:	440a      	add	r2, r1
 800326e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003272:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003276:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800327a:	6013      	str	r3, [r2, #0]
 800327c:	e036      	b.n	80032ec <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003284:	69da      	ldr	r2, [r3, #28]
 8003286:	683b      	ldr	r3, [r7, #0]
 8003288:	781b      	ldrb	r3, [r3, #0]
 800328a:	f003 030f 	and.w	r3, r3, #15
 800328e:	2101      	movs	r1, #1
 8003290:	fa01 f303 	lsl.w	r3, r1, r3
 8003294:	041b      	lsls	r3, r3, #16
 8003296:	68f9      	ldr	r1, [r7, #12]
 8003298:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800329c:	4313      	orrs	r3, r2
 800329e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80032a0:	68bb      	ldr	r3, [r7, #8]
 80032a2:	015a      	lsls	r2, r3, #5
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	4413      	add	r3, r2
 80032a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d11a      	bne.n	80032ec <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80032b6:	68bb      	ldr	r3, [r7, #8]
 80032b8:	015a      	lsls	r2, r3, #5
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	4413      	add	r3, r2
 80032be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032c2:	681a      	ldr	r2, [r3, #0]
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	689b      	ldr	r3, [r3, #8]
 80032c8:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	78db      	ldrb	r3, [r3, #3]
 80032d0:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80032d2:	430b      	orrs	r3, r1
 80032d4:	4313      	orrs	r3, r2
 80032d6:	68ba      	ldr	r2, [r7, #8]
 80032d8:	0151      	lsls	r1, r2, #5
 80032da:	68fa      	ldr	r2, [r7, #12]
 80032dc:	440a      	add	r2, r1
 80032de:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80032e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80032ea:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80032ec:	2300      	movs	r3, #0
}
 80032ee:	4618      	mov	r0, r3
 80032f0:	3714      	adds	r7, #20
 80032f2:	46bd      	mov	sp, r7
 80032f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f8:	4770      	bx	lr
	...

080032fc <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80032fc:	b480      	push	{r7}
 80032fe:	b085      	sub	sp, #20
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
 8003304:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	781b      	ldrb	r3, [r3, #0]
 800330e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	785b      	ldrb	r3, [r3, #1]
 8003314:	2b01      	cmp	r3, #1
 8003316:	d161      	bne.n	80033dc <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003318:	68bb      	ldr	r3, [r7, #8]
 800331a:	015a      	lsls	r2, r3, #5
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	4413      	add	r3, r2
 8003320:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800332a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800332e:	d11f      	bne.n	8003370 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003330:	68bb      	ldr	r3, [r7, #8]
 8003332:	015a      	lsls	r2, r3, #5
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	4413      	add	r3, r2
 8003338:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	68ba      	ldr	r2, [r7, #8]
 8003340:	0151      	lsls	r1, r2, #5
 8003342:	68fa      	ldr	r2, [r7, #12]
 8003344:	440a      	add	r2, r1
 8003346:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800334a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800334e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8003350:	68bb      	ldr	r3, [r7, #8]
 8003352:	015a      	lsls	r2, r3, #5
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	4413      	add	r3, r2
 8003358:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	68ba      	ldr	r2, [r7, #8]
 8003360:	0151      	lsls	r1, r2, #5
 8003362:	68fa      	ldr	r2, [r7, #12]
 8003364:	440a      	add	r2, r1
 8003366:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800336a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800336e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003376:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	781b      	ldrb	r3, [r3, #0]
 800337c:	f003 030f 	and.w	r3, r3, #15
 8003380:	2101      	movs	r1, #1
 8003382:	fa01 f303 	lsl.w	r3, r1, r3
 8003386:	b29b      	uxth	r3, r3
 8003388:	43db      	mvns	r3, r3
 800338a:	68f9      	ldr	r1, [r7, #12]
 800338c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003390:	4013      	ands	r3, r2
 8003392:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800339a:	69da      	ldr	r2, [r3, #28]
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	781b      	ldrb	r3, [r3, #0]
 80033a0:	f003 030f 	and.w	r3, r3, #15
 80033a4:	2101      	movs	r1, #1
 80033a6:	fa01 f303 	lsl.w	r3, r1, r3
 80033aa:	b29b      	uxth	r3, r3
 80033ac:	43db      	mvns	r3, r3
 80033ae:	68f9      	ldr	r1, [r7, #12]
 80033b0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80033b4:	4013      	ands	r3, r2
 80033b6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80033b8:	68bb      	ldr	r3, [r7, #8]
 80033ba:	015a      	lsls	r2, r3, #5
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	4413      	add	r3, r2
 80033c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80033c4:	681a      	ldr	r2, [r3, #0]
 80033c6:	68bb      	ldr	r3, [r7, #8]
 80033c8:	0159      	lsls	r1, r3, #5
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	440b      	add	r3, r1
 80033ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80033d2:	4619      	mov	r1, r3
 80033d4:	4b35      	ldr	r3, [pc, #212]	; (80034ac <USB_DeactivateEndpoint+0x1b0>)
 80033d6:	4013      	ands	r3, r2
 80033d8:	600b      	str	r3, [r1, #0]
 80033da:	e060      	b.n	800349e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80033dc:	68bb      	ldr	r3, [r7, #8]
 80033de:	015a      	lsls	r2, r3, #5
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	4413      	add	r3, r2
 80033e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80033ee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80033f2:	d11f      	bne.n	8003434 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80033f4:	68bb      	ldr	r3, [r7, #8]
 80033f6:	015a      	lsls	r2, r3, #5
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	4413      	add	r3, r2
 80033fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	68ba      	ldr	r2, [r7, #8]
 8003404:	0151      	lsls	r1, r2, #5
 8003406:	68fa      	ldr	r2, [r7, #12]
 8003408:	440a      	add	r2, r1
 800340a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800340e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003412:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8003414:	68bb      	ldr	r3, [r7, #8]
 8003416:	015a      	lsls	r2, r3, #5
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	4413      	add	r3, r2
 800341c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	68ba      	ldr	r2, [r7, #8]
 8003424:	0151      	lsls	r1, r2, #5
 8003426:	68fa      	ldr	r2, [r7, #12]
 8003428:	440a      	add	r2, r1
 800342a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800342e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003432:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800343a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	781b      	ldrb	r3, [r3, #0]
 8003440:	f003 030f 	and.w	r3, r3, #15
 8003444:	2101      	movs	r1, #1
 8003446:	fa01 f303 	lsl.w	r3, r1, r3
 800344a:	041b      	lsls	r3, r3, #16
 800344c:	43db      	mvns	r3, r3
 800344e:	68f9      	ldr	r1, [r7, #12]
 8003450:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003454:	4013      	ands	r3, r2
 8003456:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800345e:	69da      	ldr	r2, [r3, #28]
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	781b      	ldrb	r3, [r3, #0]
 8003464:	f003 030f 	and.w	r3, r3, #15
 8003468:	2101      	movs	r1, #1
 800346a:	fa01 f303 	lsl.w	r3, r1, r3
 800346e:	041b      	lsls	r3, r3, #16
 8003470:	43db      	mvns	r3, r3
 8003472:	68f9      	ldr	r1, [r7, #12]
 8003474:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003478:	4013      	ands	r3, r2
 800347a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800347c:	68bb      	ldr	r3, [r7, #8]
 800347e:	015a      	lsls	r2, r3, #5
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	4413      	add	r3, r2
 8003484:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003488:	681a      	ldr	r2, [r3, #0]
 800348a:	68bb      	ldr	r3, [r7, #8]
 800348c:	0159      	lsls	r1, r3, #5
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	440b      	add	r3, r1
 8003492:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003496:	4619      	mov	r1, r3
 8003498:	4b05      	ldr	r3, [pc, #20]	; (80034b0 <USB_DeactivateEndpoint+0x1b4>)
 800349a:	4013      	ands	r3, r2
 800349c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800349e:	2300      	movs	r3, #0
}
 80034a0:	4618      	mov	r0, r3
 80034a2:	3714      	adds	r7, #20
 80034a4:	46bd      	mov	sp, r7
 80034a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034aa:	4770      	bx	lr
 80034ac:	ec337800 	.word	0xec337800
 80034b0:	eff37800 	.word	0xeff37800

080034b4 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b08a      	sub	sp, #40	; 0x28
 80034b8:	af02      	add	r7, sp, #8
 80034ba:	60f8      	str	r0, [r7, #12]
 80034bc:	60b9      	str	r1, [r7, #8]
 80034be:	4613      	mov	r3, r2
 80034c0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80034c6:	68bb      	ldr	r3, [r7, #8]
 80034c8:	781b      	ldrb	r3, [r3, #0]
 80034ca:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80034cc:	68bb      	ldr	r3, [r7, #8]
 80034ce:	785b      	ldrb	r3, [r3, #1]
 80034d0:	2b01      	cmp	r3, #1
 80034d2:	f040 815c 	bne.w	800378e <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80034d6:	68bb      	ldr	r3, [r7, #8]
 80034d8:	695b      	ldr	r3, [r3, #20]
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d132      	bne.n	8003544 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80034de:	69bb      	ldr	r3, [r7, #24]
 80034e0:	015a      	lsls	r2, r3, #5
 80034e2:	69fb      	ldr	r3, [r7, #28]
 80034e4:	4413      	add	r3, r2
 80034e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80034ea:	691b      	ldr	r3, [r3, #16]
 80034ec:	69ba      	ldr	r2, [r7, #24]
 80034ee:	0151      	lsls	r1, r2, #5
 80034f0:	69fa      	ldr	r2, [r7, #28]
 80034f2:	440a      	add	r2, r1
 80034f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80034f8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80034fc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003500:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003502:	69bb      	ldr	r3, [r7, #24]
 8003504:	015a      	lsls	r2, r3, #5
 8003506:	69fb      	ldr	r3, [r7, #28]
 8003508:	4413      	add	r3, r2
 800350a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800350e:	691b      	ldr	r3, [r3, #16]
 8003510:	69ba      	ldr	r2, [r7, #24]
 8003512:	0151      	lsls	r1, r2, #5
 8003514:	69fa      	ldr	r2, [r7, #28]
 8003516:	440a      	add	r2, r1
 8003518:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800351c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003520:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003522:	69bb      	ldr	r3, [r7, #24]
 8003524:	015a      	lsls	r2, r3, #5
 8003526:	69fb      	ldr	r3, [r7, #28]
 8003528:	4413      	add	r3, r2
 800352a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800352e:	691b      	ldr	r3, [r3, #16]
 8003530:	69ba      	ldr	r2, [r7, #24]
 8003532:	0151      	lsls	r1, r2, #5
 8003534:	69fa      	ldr	r2, [r7, #28]
 8003536:	440a      	add	r2, r1
 8003538:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800353c:	0cdb      	lsrs	r3, r3, #19
 800353e:	04db      	lsls	r3, r3, #19
 8003540:	6113      	str	r3, [r2, #16]
 8003542:	e074      	b.n	800362e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003544:	69bb      	ldr	r3, [r7, #24]
 8003546:	015a      	lsls	r2, r3, #5
 8003548:	69fb      	ldr	r3, [r7, #28]
 800354a:	4413      	add	r3, r2
 800354c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003550:	691b      	ldr	r3, [r3, #16]
 8003552:	69ba      	ldr	r2, [r7, #24]
 8003554:	0151      	lsls	r1, r2, #5
 8003556:	69fa      	ldr	r2, [r7, #28]
 8003558:	440a      	add	r2, r1
 800355a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800355e:	0cdb      	lsrs	r3, r3, #19
 8003560:	04db      	lsls	r3, r3, #19
 8003562:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003564:	69bb      	ldr	r3, [r7, #24]
 8003566:	015a      	lsls	r2, r3, #5
 8003568:	69fb      	ldr	r3, [r7, #28]
 800356a:	4413      	add	r3, r2
 800356c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003570:	691b      	ldr	r3, [r3, #16]
 8003572:	69ba      	ldr	r2, [r7, #24]
 8003574:	0151      	lsls	r1, r2, #5
 8003576:	69fa      	ldr	r2, [r7, #28]
 8003578:	440a      	add	r2, r1
 800357a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800357e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003582:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003586:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8003588:	69bb      	ldr	r3, [r7, #24]
 800358a:	015a      	lsls	r2, r3, #5
 800358c:	69fb      	ldr	r3, [r7, #28]
 800358e:	4413      	add	r3, r2
 8003590:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003594:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8003596:	68bb      	ldr	r3, [r7, #8]
 8003598:	6959      	ldr	r1, [r3, #20]
 800359a:	68bb      	ldr	r3, [r7, #8]
 800359c:	689b      	ldr	r3, [r3, #8]
 800359e:	440b      	add	r3, r1
 80035a0:	1e59      	subs	r1, r3, #1
 80035a2:	68bb      	ldr	r3, [r7, #8]
 80035a4:	689b      	ldr	r3, [r3, #8]
 80035a6:	fbb1 f3f3 	udiv	r3, r1, r3
 80035aa:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80035ac:	4b9d      	ldr	r3, [pc, #628]	; (8003824 <USB_EPStartXfer+0x370>)
 80035ae:	400b      	ands	r3, r1
 80035b0:	69b9      	ldr	r1, [r7, #24]
 80035b2:	0148      	lsls	r0, r1, #5
 80035b4:	69f9      	ldr	r1, [r7, #28]
 80035b6:	4401      	add	r1, r0
 80035b8:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80035bc:	4313      	orrs	r3, r2
 80035be:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80035c0:	69bb      	ldr	r3, [r7, #24]
 80035c2:	015a      	lsls	r2, r3, #5
 80035c4:	69fb      	ldr	r3, [r7, #28]
 80035c6:	4413      	add	r3, r2
 80035c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80035cc:	691a      	ldr	r2, [r3, #16]
 80035ce:	68bb      	ldr	r3, [r7, #8]
 80035d0:	695b      	ldr	r3, [r3, #20]
 80035d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80035d6:	69b9      	ldr	r1, [r7, #24]
 80035d8:	0148      	lsls	r0, r1, #5
 80035da:	69f9      	ldr	r1, [r7, #28]
 80035dc:	4401      	add	r1, r0
 80035de:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80035e2:	4313      	orrs	r3, r2
 80035e4:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80035e6:	68bb      	ldr	r3, [r7, #8]
 80035e8:	78db      	ldrb	r3, [r3, #3]
 80035ea:	2b01      	cmp	r3, #1
 80035ec:	d11f      	bne.n	800362e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80035ee:	69bb      	ldr	r3, [r7, #24]
 80035f0:	015a      	lsls	r2, r3, #5
 80035f2:	69fb      	ldr	r3, [r7, #28]
 80035f4:	4413      	add	r3, r2
 80035f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80035fa:	691b      	ldr	r3, [r3, #16]
 80035fc:	69ba      	ldr	r2, [r7, #24]
 80035fe:	0151      	lsls	r1, r2, #5
 8003600:	69fa      	ldr	r2, [r7, #28]
 8003602:	440a      	add	r2, r1
 8003604:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003608:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800360c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800360e:	69bb      	ldr	r3, [r7, #24]
 8003610:	015a      	lsls	r2, r3, #5
 8003612:	69fb      	ldr	r3, [r7, #28]
 8003614:	4413      	add	r3, r2
 8003616:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800361a:	691b      	ldr	r3, [r3, #16]
 800361c:	69ba      	ldr	r2, [r7, #24]
 800361e:	0151      	lsls	r1, r2, #5
 8003620:	69fa      	ldr	r2, [r7, #28]
 8003622:	440a      	add	r2, r1
 8003624:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003628:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800362c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800362e:	79fb      	ldrb	r3, [r7, #7]
 8003630:	2b01      	cmp	r3, #1
 8003632:	d14b      	bne.n	80036cc <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8003634:	68bb      	ldr	r3, [r7, #8]
 8003636:	691b      	ldr	r3, [r3, #16]
 8003638:	2b00      	cmp	r3, #0
 800363a:	d009      	beq.n	8003650 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800363c:	69bb      	ldr	r3, [r7, #24]
 800363e:	015a      	lsls	r2, r3, #5
 8003640:	69fb      	ldr	r3, [r7, #28]
 8003642:	4413      	add	r3, r2
 8003644:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003648:	461a      	mov	r2, r3
 800364a:	68bb      	ldr	r3, [r7, #8]
 800364c:	691b      	ldr	r3, [r3, #16]
 800364e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8003650:	68bb      	ldr	r3, [r7, #8]
 8003652:	78db      	ldrb	r3, [r3, #3]
 8003654:	2b01      	cmp	r3, #1
 8003656:	d128      	bne.n	80036aa <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003658:	69fb      	ldr	r3, [r7, #28]
 800365a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800365e:	689b      	ldr	r3, [r3, #8]
 8003660:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003664:	2b00      	cmp	r3, #0
 8003666:	d110      	bne.n	800368a <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8003668:	69bb      	ldr	r3, [r7, #24]
 800366a:	015a      	lsls	r2, r3, #5
 800366c:	69fb      	ldr	r3, [r7, #28]
 800366e:	4413      	add	r3, r2
 8003670:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	69ba      	ldr	r2, [r7, #24]
 8003678:	0151      	lsls	r1, r2, #5
 800367a:	69fa      	ldr	r2, [r7, #28]
 800367c:	440a      	add	r2, r1
 800367e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003682:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003686:	6013      	str	r3, [r2, #0]
 8003688:	e00f      	b.n	80036aa <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800368a:	69bb      	ldr	r3, [r7, #24]
 800368c:	015a      	lsls	r2, r3, #5
 800368e:	69fb      	ldr	r3, [r7, #28]
 8003690:	4413      	add	r3, r2
 8003692:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	69ba      	ldr	r2, [r7, #24]
 800369a:	0151      	lsls	r1, r2, #5
 800369c:	69fa      	ldr	r2, [r7, #28]
 800369e:	440a      	add	r2, r1
 80036a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80036a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036a8:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80036aa:	69bb      	ldr	r3, [r7, #24]
 80036ac:	015a      	lsls	r2, r3, #5
 80036ae:	69fb      	ldr	r3, [r7, #28]
 80036b0:	4413      	add	r3, r2
 80036b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	69ba      	ldr	r2, [r7, #24]
 80036ba:	0151      	lsls	r1, r2, #5
 80036bc:	69fa      	ldr	r2, [r7, #28]
 80036be:	440a      	add	r2, r1
 80036c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80036c4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80036c8:	6013      	str	r3, [r2, #0]
 80036ca:	e12f      	b.n	800392c <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80036cc:	69bb      	ldr	r3, [r7, #24]
 80036ce:	015a      	lsls	r2, r3, #5
 80036d0:	69fb      	ldr	r3, [r7, #28]
 80036d2:	4413      	add	r3, r2
 80036d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	69ba      	ldr	r2, [r7, #24]
 80036dc:	0151      	lsls	r1, r2, #5
 80036de:	69fa      	ldr	r2, [r7, #28]
 80036e0:	440a      	add	r2, r1
 80036e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80036e6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80036ea:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80036ec:	68bb      	ldr	r3, [r7, #8]
 80036ee:	78db      	ldrb	r3, [r3, #3]
 80036f0:	2b01      	cmp	r3, #1
 80036f2:	d015      	beq.n	8003720 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80036f4:	68bb      	ldr	r3, [r7, #8]
 80036f6:	695b      	ldr	r3, [r3, #20]
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	f000 8117 	beq.w	800392c <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80036fe:	69fb      	ldr	r3, [r7, #28]
 8003700:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003704:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003706:	68bb      	ldr	r3, [r7, #8]
 8003708:	781b      	ldrb	r3, [r3, #0]
 800370a:	f003 030f 	and.w	r3, r3, #15
 800370e:	2101      	movs	r1, #1
 8003710:	fa01 f303 	lsl.w	r3, r1, r3
 8003714:	69f9      	ldr	r1, [r7, #28]
 8003716:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800371a:	4313      	orrs	r3, r2
 800371c:	634b      	str	r3, [r1, #52]	; 0x34
 800371e:	e105      	b.n	800392c <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003720:	69fb      	ldr	r3, [r7, #28]
 8003722:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003726:	689b      	ldr	r3, [r3, #8]
 8003728:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800372c:	2b00      	cmp	r3, #0
 800372e:	d110      	bne.n	8003752 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8003730:	69bb      	ldr	r3, [r7, #24]
 8003732:	015a      	lsls	r2, r3, #5
 8003734:	69fb      	ldr	r3, [r7, #28]
 8003736:	4413      	add	r3, r2
 8003738:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	69ba      	ldr	r2, [r7, #24]
 8003740:	0151      	lsls	r1, r2, #5
 8003742:	69fa      	ldr	r2, [r7, #28]
 8003744:	440a      	add	r2, r1
 8003746:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800374a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800374e:	6013      	str	r3, [r2, #0]
 8003750:	e00f      	b.n	8003772 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8003752:	69bb      	ldr	r3, [r7, #24]
 8003754:	015a      	lsls	r2, r3, #5
 8003756:	69fb      	ldr	r3, [r7, #28]
 8003758:	4413      	add	r3, r2
 800375a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	69ba      	ldr	r2, [r7, #24]
 8003762:	0151      	lsls	r1, r2, #5
 8003764:	69fa      	ldr	r2, [r7, #28]
 8003766:	440a      	add	r2, r1
 8003768:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800376c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003770:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8003772:	68bb      	ldr	r3, [r7, #8]
 8003774:	68d9      	ldr	r1, [r3, #12]
 8003776:	68bb      	ldr	r3, [r7, #8]
 8003778:	781a      	ldrb	r2, [r3, #0]
 800377a:	68bb      	ldr	r3, [r7, #8]
 800377c:	695b      	ldr	r3, [r3, #20]
 800377e:	b298      	uxth	r0, r3
 8003780:	79fb      	ldrb	r3, [r7, #7]
 8003782:	9300      	str	r3, [sp, #0]
 8003784:	4603      	mov	r3, r0
 8003786:	68f8      	ldr	r0, [r7, #12]
 8003788:	f000 fa2b 	bl	8003be2 <USB_WritePacket>
 800378c:	e0ce      	b.n	800392c <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800378e:	69bb      	ldr	r3, [r7, #24]
 8003790:	015a      	lsls	r2, r3, #5
 8003792:	69fb      	ldr	r3, [r7, #28]
 8003794:	4413      	add	r3, r2
 8003796:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800379a:	691b      	ldr	r3, [r3, #16]
 800379c:	69ba      	ldr	r2, [r7, #24]
 800379e:	0151      	lsls	r1, r2, #5
 80037a0:	69fa      	ldr	r2, [r7, #28]
 80037a2:	440a      	add	r2, r1
 80037a4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80037a8:	0cdb      	lsrs	r3, r3, #19
 80037aa:	04db      	lsls	r3, r3, #19
 80037ac:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80037ae:	69bb      	ldr	r3, [r7, #24]
 80037b0:	015a      	lsls	r2, r3, #5
 80037b2:	69fb      	ldr	r3, [r7, #28]
 80037b4:	4413      	add	r3, r2
 80037b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037ba:	691b      	ldr	r3, [r3, #16]
 80037bc:	69ba      	ldr	r2, [r7, #24]
 80037be:	0151      	lsls	r1, r2, #5
 80037c0:	69fa      	ldr	r2, [r7, #28]
 80037c2:	440a      	add	r2, r1
 80037c4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80037c8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80037cc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80037d0:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80037d2:	68bb      	ldr	r3, [r7, #8]
 80037d4:	695b      	ldr	r3, [r3, #20]
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d126      	bne.n	8003828 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80037da:	69bb      	ldr	r3, [r7, #24]
 80037dc:	015a      	lsls	r2, r3, #5
 80037de:	69fb      	ldr	r3, [r7, #28]
 80037e0:	4413      	add	r3, r2
 80037e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037e6:	691a      	ldr	r2, [r3, #16]
 80037e8:	68bb      	ldr	r3, [r7, #8]
 80037ea:	689b      	ldr	r3, [r3, #8]
 80037ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80037f0:	69b9      	ldr	r1, [r7, #24]
 80037f2:	0148      	lsls	r0, r1, #5
 80037f4:	69f9      	ldr	r1, [r7, #28]
 80037f6:	4401      	add	r1, r0
 80037f8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80037fc:	4313      	orrs	r3, r2
 80037fe:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8003800:	69bb      	ldr	r3, [r7, #24]
 8003802:	015a      	lsls	r2, r3, #5
 8003804:	69fb      	ldr	r3, [r7, #28]
 8003806:	4413      	add	r3, r2
 8003808:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800380c:	691b      	ldr	r3, [r3, #16]
 800380e:	69ba      	ldr	r2, [r7, #24]
 8003810:	0151      	lsls	r1, r2, #5
 8003812:	69fa      	ldr	r2, [r7, #28]
 8003814:	440a      	add	r2, r1
 8003816:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800381a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800381e:	6113      	str	r3, [r2, #16]
 8003820:	e036      	b.n	8003890 <USB_EPStartXfer+0x3dc>
 8003822:	bf00      	nop
 8003824:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8003828:	68bb      	ldr	r3, [r7, #8]
 800382a:	695a      	ldr	r2, [r3, #20]
 800382c:	68bb      	ldr	r3, [r7, #8]
 800382e:	689b      	ldr	r3, [r3, #8]
 8003830:	4413      	add	r3, r2
 8003832:	1e5a      	subs	r2, r3, #1
 8003834:	68bb      	ldr	r3, [r7, #8]
 8003836:	689b      	ldr	r3, [r3, #8]
 8003838:	fbb2 f3f3 	udiv	r3, r2, r3
 800383c:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800383e:	69bb      	ldr	r3, [r7, #24]
 8003840:	015a      	lsls	r2, r3, #5
 8003842:	69fb      	ldr	r3, [r7, #28]
 8003844:	4413      	add	r3, r2
 8003846:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800384a:	691a      	ldr	r2, [r3, #16]
 800384c:	8afb      	ldrh	r3, [r7, #22]
 800384e:	04d9      	lsls	r1, r3, #19
 8003850:	4b39      	ldr	r3, [pc, #228]	; (8003938 <USB_EPStartXfer+0x484>)
 8003852:	400b      	ands	r3, r1
 8003854:	69b9      	ldr	r1, [r7, #24]
 8003856:	0148      	lsls	r0, r1, #5
 8003858:	69f9      	ldr	r1, [r7, #28]
 800385a:	4401      	add	r1, r0
 800385c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003860:	4313      	orrs	r3, r2
 8003862:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8003864:	69bb      	ldr	r3, [r7, #24]
 8003866:	015a      	lsls	r2, r3, #5
 8003868:	69fb      	ldr	r3, [r7, #28]
 800386a:	4413      	add	r3, r2
 800386c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003870:	691a      	ldr	r2, [r3, #16]
 8003872:	68bb      	ldr	r3, [r7, #8]
 8003874:	689b      	ldr	r3, [r3, #8]
 8003876:	8af9      	ldrh	r1, [r7, #22]
 8003878:	fb01 f303 	mul.w	r3, r1, r3
 800387c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003880:	69b9      	ldr	r1, [r7, #24]
 8003882:	0148      	lsls	r0, r1, #5
 8003884:	69f9      	ldr	r1, [r7, #28]
 8003886:	4401      	add	r1, r0
 8003888:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800388c:	4313      	orrs	r3, r2
 800388e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8003890:	79fb      	ldrb	r3, [r7, #7]
 8003892:	2b01      	cmp	r3, #1
 8003894:	d10d      	bne.n	80038b2 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8003896:	68bb      	ldr	r3, [r7, #8]
 8003898:	68db      	ldr	r3, [r3, #12]
 800389a:	2b00      	cmp	r3, #0
 800389c:	d009      	beq.n	80038b2 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800389e:	68bb      	ldr	r3, [r7, #8]
 80038a0:	68d9      	ldr	r1, [r3, #12]
 80038a2:	69bb      	ldr	r3, [r7, #24]
 80038a4:	015a      	lsls	r2, r3, #5
 80038a6:	69fb      	ldr	r3, [r7, #28]
 80038a8:	4413      	add	r3, r2
 80038aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038ae:	460a      	mov	r2, r1
 80038b0:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80038b2:	68bb      	ldr	r3, [r7, #8]
 80038b4:	78db      	ldrb	r3, [r3, #3]
 80038b6:	2b01      	cmp	r3, #1
 80038b8:	d128      	bne.n	800390c <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80038ba:	69fb      	ldr	r3, [r7, #28]
 80038bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038c0:	689b      	ldr	r3, [r3, #8]
 80038c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d110      	bne.n	80038ec <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80038ca:	69bb      	ldr	r3, [r7, #24]
 80038cc:	015a      	lsls	r2, r3, #5
 80038ce:	69fb      	ldr	r3, [r7, #28]
 80038d0:	4413      	add	r3, r2
 80038d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	69ba      	ldr	r2, [r7, #24]
 80038da:	0151      	lsls	r1, r2, #5
 80038dc:	69fa      	ldr	r2, [r7, #28]
 80038de:	440a      	add	r2, r1
 80038e0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80038e4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80038e8:	6013      	str	r3, [r2, #0]
 80038ea:	e00f      	b.n	800390c <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80038ec:	69bb      	ldr	r3, [r7, #24]
 80038ee:	015a      	lsls	r2, r3, #5
 80038f0:	69fb      	ldr	r3, [r7, #28]
 80038f2:	4413      	add	r3, r2
 80038f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	69ba      	ldr	r2, [r7, #24]
 80038fc:	0151      	lsls	r1, r2, #5
 80038fe:	69fa      	ldr	r2, [r7, #28]
 8003900:	440a      	add	r2, r1
 8003902:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003906:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800390a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800390c:	69bb      	ldr	r3, [r7, #24]
 800390e:	015a      	lsls	r2, r3, #5
 8003910:	69fb      	ldr	r3, [r7, #28]
 8003912:	4413      	add	r3, r2
 8003914:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	69ba      	ldr	r2, [r7, #24]
 800391c:	0151      	lsls	r1, r2, #5
 800391e:	69fa      	ldr	r2, [r7, #28]
 8003920:	440a      	add	r2, r1
 8003922:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003926:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800392a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800392c:	2300      	movs	r3, #0
}
 800392e:	4618      	mov	r0, r3
 8003930:	3720      	adds	r7, #32
 8003932:	46bd      	mov	sp, r7
 8003934:	bd80      	pop	{r7, pc}
 8003936:	bf00      	nop
 8003938:	1ff80000 	.word	0x1ff80000

0800393c <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800393c:	b480      	push	{r7}
 800393e:	b087      	sub	sp, #28
 8003940:	af00      	add	r7, sp, #0
 8003942:	60f8      	str	r0, [r7, #12]
 8003944:	60b9      	str	r1, [r7, #8]
 8003946:	4613      	mov	r3, r2
 8003948:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800394e:	68bb      	ldr	r3, [r7, #8]
 8003950:	781b      	ldrb	r3, [r3, #0]
 8003952:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003954:	68bb      	ldr	r3, [r7, #8]
 8003956:	785b      	ldrb	r3, [r3, #1]
 8003958:	2b01      	cmp	r3, #1
 800395a:	f040 80cd 	bne.w	8003af8 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800395e:	68bb      	ldr	r3, [r7, #8]
 8003960:	695b      	ldr	r3, [r3, #20]
 8003962:	2b00      	cmp	r3, #0
 8003964:	d132      	bne.n	80039cc <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003966:	693b      	ldr	r3, [r7, #16]
 8003968:	015a      	lsls	r2, r3, #5
 800396a:	697b      	ldr	r3, [r7, #20]
 800396c:	4413      	add	r3, r2
 800396e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003972:	691b      	ldr	r3, [r3, #16]
 8003974:	693a      	ldr	r2, [r7, #16]
 8003976:	0151      	lsls	r1, r2, #5
 8003978:	697a      	ldr	r2, [r7, #20]
 800397a:	440a      	add	r2, r1
 800397c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003980:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003984:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003988:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800398a:	693b      	ldr	r3, [r7, #16]
 800398c:	015a      	lsls	r2, r3, #5
 800398e:	697b      	ldr	r3, [r7, #20]
 8003990:	4413      	add	r3, r2
 8003992:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003996:	691b      	ldr	r3, [r3, #16]
 8003998:	693a      	ldr	r2, [r7, #16]
 800399a:	0151      	lsls	r1, r2, #5
 800399c:	697a      	ldr	r2, [r7, #20]
 800399e:	440a      	add	r2, r1
 80039a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80039a4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80039a8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80039aa:	693b      	ldr	r3, [r7, #16]
 80039ac:	015a      	lsls	r2, r3, #5
 80039ae:	697b      	ldr	r3, [r7, #20]
 80039b0:	4413      	add	r3, r2
 80039b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039b6:	691b      	ldr	r3, [r3, #16]
 80039b8:	693a      	ldr	r2, [r7, #16]
 80039ba:	0151      	lsls	r1, r2, #5
 80039bc:	697a      	ldr	r2, [r7, #20]
 80039be:	440a      	add	r2, r1
 80039c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80039c4:	0cdb      	lsrs	r3, r3, #19
 80039c6:	04db      	lsls	r3, r3, #19
 80039c8:	6113      	str	r3, [r2, #16]
 80039ca:	e04e      	b.n	8003a6a <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80039cc:	693b      	ldr	r3, [r7, #16]
 80039ce:	015a      	lsls	r2, r3, #5
 80039d0:	697b      	ldr	r3, [r7, #20]
 80039d2:	4413      	add	r3, r2
 80039d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039d8:	691b      	ldr	r3, [r3, #16]
 80039da:	693a      	ldr	r2, [r7, #16]
 80039dc:	0151      	lsls	r1, r2, #5
 80039de:	697a      	ldr	r2, [r7, #20]
 80039e0:	440a      	add	r2, r1
 80039e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80039e6:	0cdb      	lsrs	r3, r3, #19
 80039e8:	04db      	lsls	r3, r3, #19
 80039ea:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80039ec:	693b      	ldr	r3, [r7, #16]
 80039ee:	015a      	lsls	r2, r3, #5
 80039f0:	697b      	ldr	r3, [r7, #20]
 80039f2:	4413      	add	r3, r2
 80039f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039f8:	691b      	ldr	r3, [r3, #16]
 80039fa:	693a      	ldr	r2, [r7, #16]
 80039fc:	0151      	lsls	r1, r2, #5
 80039fe:	697a      	ldr	r2, [r7, #20]
 8003a00:	440a      	add	r2, r1
 8003a02:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003a06:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003a0a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003a0e:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8003a10:	68bb      	ldr	r3, [r7, #8]
 8003a12:	695a      	ldr	r2, [r3, #20]
 8003a14:	68bb      	ldr	r3, [r7, #8]
 8003a16:	689b      	ldr	r3, [r3, #8]
 8003a18:	429a      	cmp	r2, r3
 8003a1a:	d903      	bls.n	8003a24 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8003a1c:	68bb      	ldr	r3, [r7, #8]
 8003a1e:	689a      	ldr	r2, [r3, #8]
 8003a20:	68bb      	ldr	r3, [r7, #8]
 8003a22:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003a24:	693b      	ldr	r3, [r7, #16]
 8003a26:	015a      	lsls	r2, r3, #5
 8003a28:	697b      	ldr	r3, [r7, #20]
 8003a2a:	4413      	add	r3, r2
 8003a2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a30:	691b      	ldr	r3, [r3, #16]
 8003a32:	693a      	ldr	r2, [r7, #16]
 8003a34:	0151      	lsls	r1, r2, #5
 8003a36:	697a      	ldr	r2, [r7, #20]
 8003a38:	440a      	add	r2, r1
 8003a3a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003a3e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003a42:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8003a44:	693b      	ldr	r3, [r7, #16]
 8003a46:	015a      	lsls	r2, r3, #5
 8003a48:	697b      	ldr	r3, [r7, #20]
 8003a4a:	4413      	add	r3, r2
 8003a4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a50:	691a      	ldr	r2, [r3, #16]
 8003a52:	68bb      	ldr	r3, [r7, #8]
 8003a54:	695b      	ldr	r3, [r3, #20]
 8003a56:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a5a:	6939      	ldr	r1, [r7, #16]
 8003a5c:	0148      	lsls	r0, r1, #5
 8003a5e:	6979      	ldr	r1, [r7, #20]
 8003a60:	4401      	add	r1, r0
 8003a62:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003a66:	4313      	orrs	r3, r2
 8003a68:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8003a6a:	79fb      	ldrb	r3, [r7, #7]
 8003a6c:	2b01      	cmp	r3, #1
 8003a6e:	d11e      	bne.n	8003aae <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8003a70:	68bb      	ldr	r3, [r7, #8]
 8003a72:	691b      	ldr	r3, [r3, #16]
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d009      	beq.n	8003a8c <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8003a78:	693b      	ldr	r3, [r7, #16]
 8003a7a:	015a      	lsls	r2, r3, #5
 8003a7c:	697b      	ldr	r3, [r7, #20]
 8003a7e:	4413      	add	r3, r2
 8003a80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a84:	461a      	mov	r2, r3
 8003a86:	68bb      	ldr	r3, [r7, #8]
 8003a88:	691b      	ldr	r3, [r3, #16]
 8003a8a:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003a8c:	693b      	ldr	r3, [r7, #16]
 8003a8e:	015a      	lsls	r2, r3, #5
 8003a90:	697b      	ldr	r3, [r7, #20]
 8003a92:	4413      	add	r3, r2
 8003a94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	693a      	ldr	r2, [r7, #16]
 8003a9c:	0151      	lsls	r1, r2, #5
 8003a9e:	697a      	ldr	r2, [r7, #20]
 8003aa0:	440a      	add	r2, r1
 8003aa2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003aa6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003aaa:	6013      	str	r3, [r2, #0]
 8003aac:	e092      	b.n	8003bd4 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003aae:	693b      	ldr	r3, [r7, #16]
 8003ab0:	015a      	lsls	r2, r3, #5
 8003ab2:	697b      	ldr	r3, [r7, #20]
 8003ab4:	4413      	add	r3, r2
 8003ab6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	693a      	ldr	r2, [r7, #16]
 8003abe:	0151      	lsls	r1, r2, #5
 8003ac0:	697a      	ldr	r2, [r7, #20]
 8003ac2:	440a      	add	r2, r1
 8003ac4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003ac8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003acc:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8003ace:	68bb      	ldr	r3, [r7, #8]
 8003ad0:	695b      	ldr	r3, [r3, #20]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d07e      	beq.n	8003bd4 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8003ad6:	697b      	ldr	r3, [r7, #20]
 8003ad8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003adc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003ade:	68bb      	ldr	r3, [r7, #8]
 8003ae0:	781b      	ldrb	r3, [r3, #0]
 8003ae2:	f003 030f 	and.w	r3, r3, #15
 8003ae6:	2101      	movs	r1, #1
 8003ae8:	fa01 f303 	lsl.w	r3, r1, r3
 8003aec:	6979      	ldr	r1, [r7, #20]
 8003aee:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003af2:	4313      	orrs	r3, r2
 8003af4:	634b      	str	r3, [r1, #52]	; 0x34
 8003af6:	e06d      	b.n	8003bd4 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8003af8:	693b      	ldr	r3, [r7, #16]
 8003afa:	015a      	lsls	r2, r3, #5
 8003afc:	697b      	ldr	r3, [r7, #20]
 8003afe:	4413      	add	r3, r2
 8003b00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b04:	691b      	ldr	r3, [r3, #16]
 8003b06:	693a      	ldr	r2, [r7, #16]
 8003b08:	0151      	lsls	r1, r2, #5
 8003b0a:	697a      	ldr	r2, [r7, #20]
 8003b0c:	440a      	add	r2, r1
 8003b0e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003b12:	0cdb      	lsrs	r3, r3, #19
 8003b14:	04db      	lsls	r3, r3, #19
 8003b16:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8003b18:	693b      	ldr	r3, [r7, #16]
 8003b1a:	015a      	lsls	r2, r3, #5
 8003b1c:	697b      	ldr	r3, [r7, #20]
 8003b1e:	4413      	add	r3, r2
 8003b20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b24:	691b      	ldr	r3, [r3, #16]
 8003b26:	693a      	ldr	r2, [r7, #16]
 8003b28:	0151      	lsls	r1, r2, #5
 8003b2a:	697a      	ldr	r2, [r7, #20]
 8003b2c:	440a      	add	r2, r1
 8003b2e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003b32:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003b36:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003b3a:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8003b3c:	68bb      	ldr	r3, [r7, #8]
 8003b3e:	695b      	ldr	r3, [r3, #20]
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d003      	beq.n	8003b4c <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8003b44:	68bb      	ldr	r3, [r7, #8]
 8003b46:	689a      	ldr	r2, [r3, #8]
 8003b48:	68bb      	ldr	r3, [r7, #8]
 8003b4a:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8003b4c:	693b      	ldr	r3, [r7, #16]
 8003b4e:	015a      	lsls	r2, r3, #5
 8003b50:	697b      	ldr	r3, [r7, #20]
 8003b52:	4413      	add	r3, r2
 8003b54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b58:	691b      	ldr	r3, [r3, #16]
 8003b5a:	693a      	ldr	r2, [r7, #16]
 8003b5c:	0151      	lsls	r1, r2, #5
 8003b5e:	697a      	ldr	r2, [r7, #20]
 8003b60:	440a      	add	r2, r1
 8003b62:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003b66:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003b6a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8003b6c:	693b      	ldr	r3, [r7, #16]
 8003b6e:	015a      	lsls	r2, r3, #5
 8003b70:	697b      	ldr	r3, [r7, #20]
 8003b72:	4413      	add	r3, r2
 8003b74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b78:	691a      	ldr	r2, [r3, #16]
 8003b7a:	68bb      	ldr	r3, [r7, #8]
 8003b7c:	689b      	ldr	r3, [r3, #8]
 8003b7e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b82:	6939      	ldr	r1, [r7, #16]
 8003b84:	0148      	lsls	r0, r1, #5
 8003b86:	6979      	ldr	r1, [r7, #20]
 8003b88:	4401      	add	r1, r0
 8003b8a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003b8e:	4313      	orrs	r3, r2
 8003b90:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8003b92:	79fb      	ldrb	r3, [r7, #7]
 8003b94:	2b01      	cmp	r3, #1
 8003b96:	d10d      	bne.n	8003bb4 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8003b98:	68bb      	ldr	r3, [r7, #8]
 8003b9a:	68db      	ldr	r3, [r3, #12]
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d009      	beq.n	8003bb4 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8003ba0:	68bb      	ldr	r3, [r7, #8]
 8003ba2:	68d9      	ldr	r1, [r3, #12]
 8003ba4:	693b      	ldr	r3, [r7, #16]
 8003ba6:	015a      	lsls	r2, r3, #5
 8003ba8:	697b      	ldr	r3, [r7, #20]
 8003baa:	4413      	add	r3, r2
 8003bac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bb0:	460a      	mov	r2, r1
 8003bb2:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8003bb4:	693b      	ldr	r3, [r7, #16]
 8003bb6:	015a      	lsls	r2, r3, #5
 8003bb8:	697b      	ldr	r3, [r7, #20]
 8003bba:	4413      	add	r3, r2
 8003bbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	693a      	ldr	r2, [r7, #16]
 8003bc4:	0151      	lsls	r1, r2, #5
 8003bc6:	697a      	ldr	r2, [r7, #20]
 8003bc8:	440a      	add	r2, r1
 8003bca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003bce:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003bd2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8003bd4:	2300      	movs	r3, #0
}
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	371c      	adds	r7, #28
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be0:	4770      	bx	lr

08003be2 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8003be2:	b480      	push	{r7}
 8003be4:	b089      	sub	sp, #36	; 0x24
 8003be6:	af00      	add	r7, sp, #0
 8003be8:	60f8      	str	r0, [r7, #12]
 8003bea:	60b9      	str	r1, [r7, #8]
 8003bec:	4611      	mov	r1, r2
 8003bee:	461a      	mov	r2, r3
 8003bf0:	460b      	mov	r3, r1
 8003bf2:	71fb      	strb	r3, [r7, #7]
 8003bf4:	4613      	mov	r3, r2
 8003bf6:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8003bfc:	68bb      	ldr	r3, [r7, #8]
 8003bfe:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8003c00:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d123      	bne.n	8003c50 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8003c08:	88bb      	ldrh	r3, [r7, #4]
 8003c0a:	3303      	adds	r3, #3
 8003c0c:	089b      	lsrs	r3, r3, #2
 8003c0e:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8003c10:	2300      	movs	r3, #0
 8003c12:	61bb      	str	r3, [r7, #24]
 8003c14:	e018      	b.n	8003c48 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8003c16:	79fb      	ldrb	r3, [r7, #7]
 8003c18:	031a      	lsls	r2, r3, #12
 8003c1a:	697b      	ldr	r3, [r7, #20]
 8003c1c:	4413      	add	r3, r2
 8003c1e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003c22:	461a      	mov	r2, r3
 8003c24:	69fb      	ldr	r3, [r7, #28]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	6013      	str	r3, [r2, #0]
      pSrc++;
 8003c2a:	69fb      	ldr	r3, [r7, #28]
 8003c2c:	3301      	adds	r3, #1
 8003c2e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8003c30:	69fb      	ldr	r3, [r7, #28]
 8003c32:	3301      	adds	r3, #1
 8003c34:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8003c36:	69fb      	ldr	r3, [r7, #28]
 8003c38:	3301      	adds	r3, #1
 8003c3a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8003c3c:	69fb      	ldr	r3, [r7, #28]
 8003c3e:	3301      	adds	r3, #1
 8003c40:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8003c42:	69bb      	ldr	r3, [r7, #24]
 8003c44:	3301      	adds	r3, #1
 8003c46:	61bb      	str	r3, [r7, #24]
 8003c48:	69ba      	ldr	r2, [r7, #24]
 8003c4a:	693b      	ldr	r3, [r7, #16]
 8003c4c:	429a      	cmp	r2, r3
 8003c4e:	d3e2      	bcc.n	8003c16 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8003c50:	2300      	movs	r3, #0
}
 8003c52:	4618      	mov	r0, r3
 8003c54:	3724      	adds	r7, #36	; 0x24
 8003c56:	46bd      	mov	sp, r7
 8003c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5c:	4770      	bx	lr

08003c5e <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8003c5e:	b480      	push	{r7}
 8003c60:	b08b      	sub	sp, #44	; 0x2c
 8003c62:	af00      	add	r7, sp, #0
 8003c64:	60f8      	str	r0, [r7, #12]
 8003c66:	60b9      	str	r1, [r7, #8]
 8003c68:	4613      	mov	r3, r2
 8003c6a:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8003c70:	68bb      	ldr	r3, [r7, #8]
 8003c72:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8003c74:	88fb      	ldrh	r3, [r7, #6]
 8003c76:	089b      	lsrs	r3, r3, #2
 8003c78:	b29b      	uxth	r3, r3
 8003c7a:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8003c7c:	88fb      	ldrh	r3, [r7, #6]
 8003c7e:	f003 0303 	and.w	r3, r3, #3
 8003c82:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8003c84:	2300      	movs	r3, #0
 8003c86:	623b      	str	r3, [r7, #32]
 8003c88:	e014      	b.n	8003cb4 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8003c8a:	69bb      	ldr	r3, [r7, #24]
 8003c8c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003c90:	681a      	ldr	r2, [r3, #0]
 8003c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c94:	601a      	str	r2, [r3, #0]
    pDest++;
 8003c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c98:	3301      	adds	r3, #1
 8003c9a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8003c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c9e:	3301      	adds	r3, #1
 8003ca0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8003ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ca4:	3301      	adds	r3, #1
 8003ca6:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8003ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003caa:	3301      	adds	r3, #1
 8003cac:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8003cae:	6a3b      	ldr	r3, [r7, #32]
 8003cb0:	3301      	adds	r3, #1
 8003cb2:	623b      	str	r3, [r7, #32]
 8003cb4:	6a3a      	ldr	r2, [r7, #32]
 8003cb6:	697b      	ldr	r3, [r7, #20]
 8003cb8:	429a      	cmp	r2, r3
 8003cba:	d3e6      	bcc.n	8003c8a <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8003cbc:	8bfb      	ldrh	r3, [r7, #30]
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d01e      	beq.n	8003d00 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8003cc6:	69bb      	ldr	r3, [r7, #24]
 8003cc8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ccc:	461a      	mov	r2, r3
 8003cce:	f107 0310 	add.w	r3, r7, #16
 8003cd2:	6812      	ldr	r2, [r2, #0]
 8003cd4:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8003cd6:	693a      	ldr	r2, [r7, #16]
 8003cd8:	6a3b      	ldr	r3, [r7, #32]
 8003cda:	b2db      	uxtb	r3, r3
 8003cdc:	00db      	lsls	r3, r3, #3
 8003cde:	fa22 f303 	lsr.w	r3, r2, r3
 8003ce2:	b2da      	uxtb	r2, r3
 8003ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ce6:	701a      	strb	r2, [r3, #0]
      i++;
 8003ce8:	6a3b      	ldr	r3, [r7, #32]
 8003cea:	3301      	adds	r3, #1
 8003cec:	623b      	str	r3, [r7, #32]
      pDest++;
 8003cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cf0:	3301      	adds	r3, #1
 8003cf2:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8003cf4:	8bfb      	ldrh	r3, [r7, #30]
 8003cf6:	3b01      	subs	r3, #1
 8003cf8:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8003cfa:	8bfb      	ldrh	r3, [r7, #30]
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d1ea      	bne.n	8003cd6 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8003d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003d02:	4618      	mov	r0, r3
 8003d04:	372c      	adds	r7, #44	; 0x2c
 8003d06:	46bd      	mov	sp, r7
 8003d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0c:	4770      	bx	lr

08003d0e <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003d0e:	b480      	push	{r7}
 8003d10:	b085      	sub	sp, #20
 8003d12:	af00      	add	r7, sp, #0
 8003d14:	6078      	str	r0, [r7, #4]
 8003d16:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	781b      	ldrb	r3, [r3, #0]
 8003d20:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003d22:	683b      	ldr	r3, [r7, #0]
 8003d24:	785b      	ldrb	r3, [r3, #1]
 8003d26:	2b01      	cmp	r3, #1
 8003d28:	d12c      	bne.n	8003d84 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8003d2a:	68bb      	ldr	r3, [r7, #8]
 8003d2c:	015a      	lsls	r2, r3, #5
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	4413      	add	r3, r2
 8003d32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	db12      	blt.n	8003d62 <USB_EPSetStall+0x54>
 8003d3c:	68bb      	ldr	r3, [r7, #8]
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d00f      	beq.n	8003d62 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8003d42:	68bb      	ldr	r3, [r7, #8]
 8003d44:	015a      	lsls	r2, r3, #5
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	4413      	add	r3, r2
 8003d4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	68ba      	ldr	r2, [r7, #8]
 8003d52:	0151      	lsls	r1, r2, #5
 8003d54:	68fa      	ldr	r2, [r7, #12]
 8003d56:	440a      	add	r2, r1
 8003d58:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003d5c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003d60:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8003d62:	68bb      	ldr	r3, [r7, #8]
 8003d64:	015a      	lsls	r2, r3, #5
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	4413      	add	r3, r2
 8003d6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	68ba      	ldr	r2, [r7, #8]
 8003d72:	0151      	lsls	r1, r2, #5
 8003d74:	68fa      	ldr	r2, [r7, #12]
 8003d76:	440a      	add	r2, r1
 8003d78:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003d7c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003d80:	6013      	str	r3, [r2, #0]
 8003d82:	e02b      	b.n	8003ddc <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8003d84:	68bb      	ldr	r3, [r7, #8]
 8003d86:	015a      	lsls	r2, r3, #5
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	4413      	add	r3, r2
 8003d8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	db12      	blt.n	8003dbc <USB_EPSetStall+0xae>
 8003d96:	68bb      	ldr	r3, [r7, #8]
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d00f      	beq.n	8003dbc <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8003d9c:	68bb      	ldr	r3, [r7, #8]
 8003d9e:	015a      	lsls	r2, r3, #5
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	4413      	add	r3, r2
 8003da4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	68ba      	ldr	r2, [r7, #8]
 8003dac:	0151      	lsls	r1, r2, #5
 8003dae:	68fa      	ldr	r2, [r7, #12]
 8003db0:	440a      	add	r2, r1
 8003db2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003db6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003dba:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8003dbc:	68bb      	ldr	r3, [r7, #8]
 8003dbe:	015a      	lsls	r2, r3, #5
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	4413      	add	r3, r2
 8003dc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	68ba      	ldr	r2, [r7, #8]
 8003dcc:	0151      	lsls	r1, r2, #5
 8003dce:	68fa      	ldr	r2, [r7, #12]
 8003dd0:	440a      	add	r2, r1
 8003dd2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003dd6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003dda:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8003ddc:	2300      	movs	r3, #0
}
 8003dde:	4618      	mov	r0, r3
 8003de0:	3714      	adds	r7, #20
 8003de2:	46bd      	mov	sp, r7
 8003de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de8:	4770      	bx	lr

08003dea <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003dea:	b480      	push	{r7}
 8003dec:	b085      	sub	sp, #20
 8003dee:	af00      	add	r7, sp, #0
 8003df0:	6078      	str	r0, [r7, #4]
 8003df2:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003df8:	683b      	ldr	r3, [r7, #0]
 8003dfa:	781b      	ldrb	r3, [r3, #0]
 8003dfc:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003dfe:	683b      	ldr	r3, [r7, #0]
 8003e00:	785b      	ldrb	r3, [r3, #1]
 8003e02:	2b01      	cmp	r3, #1
 8003e04:	d128      	bne.n	8003e58 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003e06:	68bb      	ldr	r3, [r7, #8]
 8003e08:	015a      	lsls	r2, r3, #5
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	4413      	add	r3, r2
 8003e0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	68ba      	ldr	r2, [r7, #8]
 8003e16:	0151      	lsls	r1, r2, #5
 8003e18:	68fa      	ldr	r2, [r7, #12]
 8003e1a:	440a      	add	r2, r1
 8003e1c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003e20:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003e24:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	78db      	ldrb	r3, [r3, #3]
 8003e2a:	2b03      	cmp	r3, #3
 8003e2c:	d003      	beq.n	8003e36 <USB_EPClearStall+0x4c>
 8003e2e:	683b      	ldr	r3, [r7, #0]
 8003e30:	78db      	ldrb	r3, [r3, #3]
 8003e32:	2b02      	cmp	r3, #2
 8003e34:	d138      	bne.n	8003ea8 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8003e36:	68bb      	ldr	r3, [r7, #8]
 8003e38:	015a      	lsls	r2, r3, #5
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	4413      	add	r3, r2
 8003e3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	68ba      	ldr	r2, [r7, #8]
 8003e46:	0151      	lsls	r1, r2, #5
 8003e48:	68fa      	ldr	r2, [r7, #12]
 8003e4a:	440a      	add	r2, r1
 8003e4c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003e50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e54:	6013      	str	r3, [r2, #0]
 8003e56:	e027      	b.n	8003ea8 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003e58:	68bb      	ldr	r3, [r7, #8]
 8003e5a:	015a      	lsls	r2, r3, #5
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	4413      	add	r3, r2
 8003e60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	68ba      	ldr	r2, [r7, #8]
 8003e68:	0151      	lsls	r1, r2, #5
 8003e6a:	68fa      	ldr	r2, [r7, #12]
 8003e6c:	440a      	add	r2, r1
 8003e6e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003e72:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003e76:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	78db      	ldrb	r3, [r3, #3]
 8003e7c:	2b03      	cmp	r3, #3
 8003e7e:	d003      	beq.n	8003e88 <USB_EPClearStall+0x9e>
 8003e80:	683b      	ldr	r3, [r7, #0]
 8003e82:	78db      	ldrb	r3, [r3, #3]
 8003e84:	2b02      	cmp	r3, #2
 8003e86:	d10f      	bne.n	8003ea8 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8003e88:	68bb      	ldr	r3, [r7, #8]
 8003e8a:	015a      	lsls	r2, r3, #5
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	4413      	add	r3, r2
 8003e90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	68ba      	ldr	r2, [r7, #8]
 8003e98:	0151      	lsls	r1, r2, #5
 8003e9a:	68fa      	ldr	r2, [r7, #12]
 8003e9c:	440a      	add	r2, r1
 8003e9e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003ea2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ea6:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8003ea8:	2300      	movs	r3, #0
}
 8003eaa:	4618      	mov	r0, r3
 8003eac:	3714      	adds	r7, #20
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb4:	4770      	bx	lr

08003eb6 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8003eb6:	b480      	push	{r7}
 8003eb8:	b085      	sub	sp, #20
 8003eba:	af00      	add	r7, sp, #0
 8003ebc:	6078      	str	r0, [r7, #4]
 8003ebe:	460b      	mov	r3, r1
 8003ec0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	68fa      	ldr	r2, [r7, #12]
 8003ed0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003ed4:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003ed8:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ee0:	681a      	ldr	r2, [r3, #0]
 8003ee2:	78fb      	ldrb	r3, [r7, #3]
 8003ee4:	011b      	lsls	r3, r3, #4
 8003ee6:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8003eea:	68f9      	ldr	r1, [r7, #12]
 8003eec:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003ef0:	4313      	orrs	r3, r2
 8003ef2:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8003ef4:	2300      	movs	r3, #0
}
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	3714      	adds	r7, #20
 8003efa:	46bd      	mov	sp, r7
 8003efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f00:	4770      	bx	lr

08003f02 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8003f02:	b480      	push	{r7}
 8003f04:	b085      	sub	sp, #20
 8003f06:	af00      	add	r7, sp, #0
 8003f08:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	68fa      	ldr	r2, [r7, #12]
 8003f18:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8003f1c:	f023 0303 	bic.w	r3, r3, #3
 8003f20:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f28:	685b      	ldr	r3, [r3, #4]
 8003f2a:	68fa      	ldr	r2, [r7, #12]
 8003f2c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003f30:	f023 0302 	bic.w	r3, r3, #2
 8003f34:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8003f36:	2300      	movs	r3, #0
}
 8003f38:	4618      	mov	r0, r3
 8003f3a:	3714      	adds	r7, #20
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f42:	4770      	bx	lr

08003f44 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8003f44:	b480      	push	{r7}
 8003f46:	b085      	sub	sp, #20
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	68fa      	ldr	r2, [r7, #12]
 8003f5a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8003f5e:	f023 0303 	bic.w	r3, r3, #3
 8003f62:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f6a:	685b      	ldr	r3, [r3, #4]
 8003f6c:	68fa      	ldr	r2, [r7, #12]
 8003f6e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003f72:	f043 0302 	orr.w	r3, r3, #2
 8003f76:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8003f78:	2300      	movs	r3, #0
}
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	3714      	adds	r7, #20
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f84:	4770      	bx	lr

08003f86 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8003f86:	b480      	push	{r7}
 8003f88:	b085      	sub	sp, #20
 8003f8a:	af00      	add	r7, sp, #0
 8003f8c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	695b      	ldr	r3, [r3, #20]
 8003f92:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	699b      	ldr	r3, [r3, #24]
 8003f98:	68fa      	ldr	r2, [r7, #12]
 8003f9a:	4013      	ands	r3, r2
 8003f9c:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8003f9e:	68fb      	ldr	r3, [r7, #12]
}
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	3714      	adds	r7, #20
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003faa:	4770      	bx	lr

08003fac <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8003fac:	b480      	push	{r7}
 8003fae:	b085      	sub	sp, #20
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003fbe:	699b      	ldr	r3, [r3, #24]
 8003fc0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003fc8:	69db      	ldr	r3, [r3, #28]
 8003fca:	68ba      	ldr	r2, [r7, #8]
 8003fcc:	4013      	ands	r3, r2
 8003fce:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8003fd0:	68bb      	ldr	r3, [r7, #8]
 8003fd2:	0c1b      	lsrs	r3, r3, #16
}
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	3714      	adds	r7, #20
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fde:	4770      	bx	lr

08003fe0 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8003fe0:	b480      	push	{r7}
 8003fe2:	b085      	sub	sp, #20
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ff2:	699b      	ldr	r3, [r3, #24]
 8003ff4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ffc:	69db      	ldr	r3, [r3, #28]
 8003ffe:	68ba      	ldr	r2, [r7, #8]
 8004000:	4013      	ands	r3, r2
 8004002:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8004004:	68bb      	ldr	r3, [r7, #8]
 8004006:	b29b      	uxth	r3, r3
}
 8004008:	4618      	mov	r0, r3
 800400a:	3714      	adds	r7, #20
 800400c:	46bd      	mov	sp, r7
 800400e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004012:	4770      	bx	lr

08004014 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004014:	b480      	push	{r7}
 8004016:	b085      	sub	sp, #20
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
 800401c:	460b      	mov	r3, r1
 800401e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8004024:	78fb      	ldrb	r3, [r7, #3]
 8004026:	015a      	lsls	r2, r3, #5
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	4413      	add	r3, r2
 800402c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004030:	689b      	ldr	r3, [r3, #8]
 8004032:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800403a:	695b      	ldr	r3, [r3, #20]
 800403c:	68ba      	ldr	r2, [r7, #8]
 800403e:	4013      	ands	r3, r2
 8004040:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004042:	68bb      	ldr	r3, [r7, #8]
}
 8004044:	4618      	mov	r0, r3
 8004046:	3714      	adds	r7, #20
 8004048:	46bd      	mov	sp, r7
 800404a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404e:	4770      	bx	lr

08004050 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004050:	b480      	push	{r7}
 8004052:	b087      	sub	sp, #28
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]
 8004058:	460b      	mov	r3, r1
 800405a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8004060:	697b      	ldr	r3, [r7, #20]
 8004062:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004066:	691b      	ldr	r3, [r3, #16]
 8004068:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800406a:	697b      	ldr	r3, [r7, #20]
 800406c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004070:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004072:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8004074:	78fb      	ldrb	r3, [r7, #3]
 8004076:	f003 030f 	and.w	r3, r3, #15
 800407a:	68fa      	ldr	r2, [r7, #12]
 800407c:	fa22 f303 	lsr.w	r3, r2, r3
 8004080:	01db      	lsls	r3, r3, #7
 8004082:	b2db      	uxtb	r3, r3
 8004084:	693a      	ldr	r2, [r7, #16]
 8004086:	4313      	orrs	r3, r2
 8004088:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800408a:	78fb      	ldrb	r3, [r7, #3]
 800408c:	015a      	lsls	r2, r3, #5
 800408e:	697b      	ldr	r3, [r7, #20]
 8004090:	4413      	add	r3, r2
 8004092:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004096:	689b      	ldr	r3, [r3, #8]
 8004098:	693a      	ldr	r2, [r7, #16]
 800409a:	4013      	ands	r3, r2
 800409c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800409e:	68bb      	ldr	r3, [r7, #8]
}
 80040a0:	4618      	mov	r0, r3
 80040a2:	371c      	adds	r7, #28
 80040a4:	46bd      	mov	sp, r7
 80040a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040aa:	4770      	bx	lr

080040ac <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80040ac:	b480      	push	{r7}
 80040ae:	b083      	sub	sp, #12
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	695b      	ldr	r3, [r3, #20]
 80040b8:	f003 0301 	and.w	r3, r3, #1
}
 80040bc:	4618      	mov	r0, r3
 80040be:	370c      	adds	r7, #12
 80040c0:	46bd      	mov	sp, r7
 80040c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c6:	4770      	bx	lr

080040c8 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80040c8:	b480      	push	{r7}
 80040ca:	b085      	sub	sp, #20
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	68fa      	ldr	r2, [r7, #12]
 80040de:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80040e2:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80040e6:	f023 0307 	bic.w	r3, r3, #7
 80040ea:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040f2:	685b      	ldr	r3, [r3, #4]
 80040f4:	68fa      	ldr	r2, [r7, #12]
 80040f6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80040fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80040fe:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004100:	2300      	movs	r3, #0
}
 8004102:	4618      	mov	r0, r3
 8004104:	3714      	adds	r7, #20
 8004106:	46bd      	mov	sp, r7
 8004108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410c:	4770      	bx	lr
	...

08004110 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8004110:	b480      	push	{r7}
 8004112:	b087      	sub	sp, #28
 8004114:	af00      	add	r7, sp, #0
 8004116:	60f8      	str	r0, [r7, #12]
 8004118:	460b      	mov	r3, r1
 800411a:	607a      	str	r2, [r7, #4]
 800411c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	333c      	adds	r3, #60	; 0x3c
 8004126:	3304      	adds	r3, #4
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800412c:	693b      	ldr	r3, [r7, #16]
 800412e:	4a26      	ldr	r2, [pc, #152]	; (80041c8 <USB_EP0_OutStart+0xb8>)
 8004130:	4293      	cmp	r3, r2
 8004132:	d90a      	bls.n	800414a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004134:	697b      	ldr	r3, [r7, #20]
 8004136:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004140:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004144:	d101      	bne.n	800414a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8004146:	2300      	movs	r3, #0
 8004148:	e037      	b.n	80041ba <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800414a:	697b      	ldr	r3, [r7, #20]
 800414c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004150:	461a      	mov	r2, r3
 8004152:	2300      	movs	r3, #0
 8004154:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004156:	697b      	ldr	r3, [r7, #20]
 8004158:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800415c:	691b      	ldr	r3, [r3, #16]
 800415e:	697a      	ldr	r2, [r7, #20]
 8004160:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004164:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004168:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800416a:	697b      	ldr	r3, [r7, #20]
 800416c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004170:	691b      	ldr	r3, [r3, #16]
 8004172:	697a      	ldr	r2, [r7, #20]
 8004174:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004178:	f043 0318 	orr.w	r3, r3, #24
 800417c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800417e:	697b      	ldr	r3, [r7, #20]
 8004180:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004184:	691b      	ldr	r3, [r3, #16]
 8004186:	697a      	ldr	r2, [r7, #20]
 8004188:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800418c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8004190:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8004192:	7afb      	ldrb	r3, [r7, #11]
 8004194:	2b01      	cmp	r3, #1
 8004196:	d10f      	bne.n	80041b8 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8004198:	697b      	ldr	r3, [r7, #20]
 800419a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800419e:	461a      	mov	r2, r3
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80041a4:	697b      	ldr	r3, [r7, #20]
 80041a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	697a      	ldr	r2, [r7, #20]
 80041ae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80041b2:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80041b6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80041b8:	2300      	movs	r3, #0
}
 80041ba:	4618      	mov	r0, r3
 80041bc:	371c      	adds	r7, #28
 80041be:	46bd      	mov	sp, r7
 80041c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c4:	4770      	bx	lr
 80041c6:	bf00      	nop
 80041c8:	4f54300a 	.word	0x4f54300a

080041cc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80041cc:	b480      	push	{r7}
 80041ce:	b085      	sub	sp, #20
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80041d4:	2300      	movs	r3, #0
 80041d6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	3301      	adds	r3, #1
 80041dc:	60fb      	str	r3, [r7, #12]
 80041de:	4a13      	ldr	r2, [pc, #76]	; (800422c <USB_CoreReset+0x60>)
 80041e0:	4293      	cmp	r3, r2
 80041e2:	d901      	bls.n	80041e8 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 80041e4:	2303      	movs	r3, #3
 80041e6:	e01a      	b.n	800421e <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	691b      	ldr	r3, [r3, #16]
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	daf3      	bge.n	80041d8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80041f0:	2300      	movs	r3, #0
 80041f2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	691b      	ldr	r3, [r3, #16]
 80041f8:	f043 0201 	orr.w	r2, r3, #1
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	3301      	adds	r3, #1
 8004204:	60fb      	str	r3, [r7, #12]
 8004206:	4a09      	ldr	r2, [pc, #36]	; (800422c <USB_CoreReset+0x60>)
 8004208:	4293      	cmp	r3, r2
 800420a:	d901      	bls.n	8004210 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 800420c:	2303      	movs	r3, #3
 800420e:	e006      	b.n	800421e <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	691b      	ldr	r3, [r3, #16]
 8004214:	f003 0301 	and.w	r3, r3, #1
 8004218:	2b01      	cmp	r3, #1
 800421a:	d0f1      	beq.n	8004200 <USB_CoreReset+0x34>

  return HAL_OK;
 800421c:	2300      	movs	r3, #0
}
 800421e:	4618      	mov	r0, r3
 8004220:	3714      	adds	r7, #20
 8004222:	46bd      	mov	sp, r7
 8004224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004228:	4770      	bx	lr
 800422a:	bf00      	nop
 800422c:	00030d40 	.word	0x00030d40

08004230 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004230:	b580      	push	{r7, lr}
 8004232:	b084      	sub	sp, #16
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
 8004238:	460b      	mov	r3, r1
 800423a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800423c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8004240:	f002 f952 	bl	80064e8 <USBD_static_malloc>
 8004244:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	2b00      	cmp	r3, #0
 800424a:	d105      	bne.n	8004258 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2200      	movs	r2, #0
 8004250:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8004254:	2302      	movs	r3, #2
 8004256:	e066      	b.n	8004326 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	68fa      	ldr	r2, [r7, #12]
 800425c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	7c1b      	ldrb	r3, [r3, #16]
 8004264:	2b00      	cmp	r3, #0
 8004266:	d119      	bne.n	800429c <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8004268:	f44f 7300 	mov.w	r3, #512	; 0x200
 800426c:	2202      	movs	r2, #2
 800426e:	2181      	movs	r1, #129	; 0x81
 8004270:	6878      	ldr	r0, [r7, #4]
 8004272:	f002 f816 	bl	80062a2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	2201      	movs	r2, #1
 800427a:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800427c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004280:	2202      	movs	r2, #2
 8004282:	2101      	movs	r1, #1
 8004284:	6878      	ldr	r0, [r7, #4]
 8004286:	f002 f80c 	bl	80062a2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	2201      	movs	r2, #1
 800428e:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	2210      	movs	r2, #16
 8004296:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800429a:	e016      	b.n	80042ca <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800429c:	2340      	movs	r3, #64	; 0x40
 800429e:	2202      	movs	r2, #2
 80042a0:	2181      	movs	r1, #129	; 0x81
 80042a2:	6878      	ldr	r0, [r7, #4]
 80042a4:	f001 fffd 	bl	80062a2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2201      	movs	r2, #1
 80042ac:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80042ae:	2340      	movs	r3, #64	; 0x40
 80042b0:	2202      	movs	r2, #2
 80042b2:	2101      	movs	r1, #1
 80042b4:	6878      	ldr	r0, [r7, #4]
 80042b6:	f001 fff4 	bl	80062a2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	2201      	movs	r2, #1
 80042be:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	2210      	movs	r2, #16
 80042c6:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80042ca:	2308      	movs	r3, #8
 80042cc:	2203      	movs	r2, #3
 80042ce:	2182      	movs	r1, #130	; 0x82
 80042d0:	6878      	ldr	r0, [r7, #4]
 80042d2:	f001 ffe6 	bl	80062a2 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	2201      	movs	r2, #1
 80042da:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	2200      	movs	r2, #0
 80042ec:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	2200      	movs	r2, #0
 80042f4:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	7c1b      	ldrb	r3, [r3, #16]
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d109      	bne.n	8004314 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004306:	f44f 7300 	mov.w	r3, #512	; 0x200
 800430a:	2101      	movs	r1, #1
 800430c:	6878      	ldr	r0, [r7, #4]
 800430e:	f002 f8b7 	bl	8006480 <USBD_LL_PrepareReceive>
 8004312:	e007      	b.n	8004324 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800431a:	2340      	movs	r3, #64	; 0x40
 800431c:	2101      	movs	r1, #1
 800431e:	6878      	ldr	r0, [r7, #4]
 8004320:	f002 f8ae 	bl	8006480 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8004324:	2300      	movs	r3, #0
}
 8004326:	4618      	mov	r0, r3
 8004328:	3710      	adds	r7, #16
 800432a:	46bd      	mov	sp, r7
 800432c:	bd80      	pop	{r7, pc}

0800432e <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800432e:	b580      	push	{r7, lr}
 8004330:	b082      	sub	sp, #8
 8004332:	af00      	add	r7, sp, #0
 8004334:	6078      	str	r0, [r7, #4]
 8004336:	460b      	mov	r3, r1
 8004338:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800433a:	2181      	movs	r1, #129	; 0x81
 800433c:	6878      	ldr	r0, [r7, #4]
 800433e:	f001 ffd6 	bl	80062ee <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	2200      	movs	r2, #0
 8004346:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8004348:	2101      	movs	r1, #1
 800434a:	6878      	ldr	r0, [r7, #4]
 800434c:	f001 ffcf 	bl	80062ee <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2200      	movs	r2, #0
 8004354:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8004358:	2182      	movs	r1, #130	; 0x82
 800435a:	6878      	ldr	r0, [r7, #4]
 800435c:	f001 ffc7 	bl	80062ee <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2200      	movs	r2, #0
 8004364:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2200      	movs	r2, #0
 800436c:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004376:	2b00      	cmp	r3, #0
 8004378:	d00e      	beq.n	8004398 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004380:	685b      	ldr	r3, [r3, #4]
 8004382:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800438a:	4618      	mov	r0, r3
 800438c:	f002 f8ba 	bl	8006504 <USBD_static_free>
    pdev->pClassData = NULL;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2200      	movs	r2, #0
 8004394:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8004398:	2300      	movs	r3, #0
}
 800439a:	4618      	mov	r0, r3
 800439c:	3708      	adds	r7, #8
 800439e:	46bd      	mov	sp, r7
 80043a0:	bd80      	pop	{r7, pc}
	...

080043a4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80043a4:	b580      	push	{r7, lr}
 80043a6:	b086      	sub	sp, #24
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
 80043ac:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80043b4:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80043b6:	2300      	movs	r3, #0
 80043b8:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80043ba:	2300      	movs	r3, #0
 80043bc:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80043be:	2300      	movs	r3, #0
 80043c0:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80043c2:	693b      	ldr	r3, [r7, #16]
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d101      	bne.n	80043cc <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 80043c8:	2303      	movs	r3, #3
 80043ca:	e0af      	b.n	800452c <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	781b      	ldrb	r3, [r3, #0]
 80043d0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d03f      	beq.n	8004458 <USBD_CDC_Setup+0xb4>
 80043d8:	2b20      	cmp	r3, #32
 80043da:	f040 809f 	bne.w	800451c <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80043de:	683b      	ldr	r3, [r7, #0]
 80043e0:	88db      	ldrh	r3, [r3, #6]
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d02e      	beq.n	8004444 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80043e6:	683b      	ldr	r3, [r7, #0]
 80043e8:	781b      	ldrb	r3, [r3, #0]
 80043ea:	b25b      	sxtb	r3, r3
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	da16      	bge.n	800441e <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80043f6:	689b      	ldr	r3, [r3, #8]
 80043f8:	683a      	ldr	r2, [r7, #0]
 80043fa:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 80043fc:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80043fe:	683a      	ldr	r2, [r7, #0]
 8004400:	88d2      	ldrh	r2, [r2, #6]
 8004402:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8004404:	683b      	ldr	r3, [r7, #0]
 8004406:	88db      	ldrh	r3, [r3, #6]
 8004408:	2b07      	cmp	r3, #7
 800440a:	bf28      	it	cs
 800440c:	2307      	movcs	r3, #7
 800440e:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8004410:	693b      	ldr	r3, [r7, #16]
 8004412:	89fa      	ldrh	r2, [r7, #14]
 8004414:	4619      	mov	r1, r3
 8004416:	6878      	ldr	r0, [r7, #4]
 8004418:	f001 fb19 	bl	8005a4e <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800441c:	e085      	b.n	800452a <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800441e:	683b      	ldr	r3, [r7, #0]
 8004420:	785a      	ldrb	r2, [r3, #1]
 8004422:	693b      	ldr	r3, [r7, #16]
 8004424:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8004428:	683b      	ldr	r3, [r7, #0]
 800442a:	88db      	ldrh	r3, [r3, #6]
 800442c:	b2da      	uxtb	r2, r3
 800442e:	693b      	ldr	r3, [r7, #16]
 8004430:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8004434:	6939      	ldr	r1, [r7, #16]
 8004436:	683b      	ldr	r3, [r7, #0]
 8004438:	88db      	ldrh	r3, [r3, #6]
 800443a:	461a      	mov	r2, r3
 800443c:	6878      	ldr	r0, [r7, #4]
 800443e:	f001 fb32 	bl	8005aa6 <USBD_CtlPrepareRx>
      break;
 8004442:	e072      	b.n	800452a <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800444a:	689b      	ldr	r3, [r3, #8]
 800444c:	683a      	ldr	r2, [r7, #0]
 800444e:	7850      	ldrb	r0, [r2, #1]
 8004450:	2200      	movs	r2, #0
 8004452:	6839      	ldr	r1, [r7, #0]
 8004454:	4798      	blx	r3
      break;
 8004456:	e068      	b.n	800452a <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8004458:	683b      	ldr	r3, [r7, #0]
 800445a:	785b      	ldrb	r3, [r3, #1]
 800445c:	2b0b      	cmp	r3, #11
 800445e:	d852      	bhi.n	8004506 <USBD_CDC_Setup+0x162>
 8004460:	a201      	add	r2, pc, #4	; (adr r2, 8004468 <USBD_CDC_Setup+0xc4>)
 8004462:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004466:	bf00      	nop
 8004468:	08004499 	.word	0x08004499
 800446c:	08004515 	.word	0x08004515
 8004470:	08004507 	.word	0x08004507
 8004474:	08004507 	.word	0x08004507
 8004478:	08004507 	.word	0x08004507
 800447c:	08004507 	.word	0x08004507
 8004480:	08004507 	.word	0x08004507
 8004484:	08004507 	.word	0x08004507
 8004488:	08004507 	.word	0x08004507
 800448c:	08004507 	.word	0x08004507
 8004490:	080044c3 	.word	0x080044c3
 8004494:	080044ed 	.word	0x080044ed
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800449e:	b2db      	uxtb	r3, r3
 80044a0:	2b03      	cmp	r3, #3
 80044a2:	d107      	bne.n	80044b4 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80044a4:	f107 030a 	add.w	r3, r7, #10
 80044a8:	2202      	movs	r2, #2
 80044aa:	4619      	mov	r1, r3
 80044ac:	6878      	ldr	r0, [r7, #4]
 80044ae:	f001 face 	bl	8005a4e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80044b2:	e032      	b.n	800451a <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 80044b4:	6839      	ldr	r1, [r7, #0]
 80044b6:	6878      	ldr	r0, [r7, #4]
 80044b8:	f001 fa58 	bl	800596c <USBD_CtlError>
            ret = USBD_FAIL;
 80044bc:	2303      	movs	r3, #3
 80044be:	75fb      	strb	r3, [r7, #23]
          break;
 80044c0:	e02b      	b.n	800451a <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80044c8:	b2db      	uxtb	r3, r3
 80044ca:	2b03      	cmp	r3, #3
 80044cc:	d107      	bne.n	80044de <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80044ce:	f107 030d 	add.w	r3, r7, #13
 80044d2:	2201      	movs	r2, #1
 80044d4:	4619      	mov	r1, r3
 80044d6:	6878      	ldr	r0, [r7, #4]
 80044d8:	f001 fab9 	bl	8005a4e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80044dc:	e01d      	b.n	800451a <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 80044de:	6839      	ldr	r1, [r7, #0]
 80044e0:	6878      	ldr	r0, [r7, #4]
 80044e2:	f001 fa43 	bl	800596c <USBD_CtlError>
            ret = USBD_FAIL;
 80044e6:	2303      	movs	r3, #3
 80044e8:	75fb      	strb	r3, [r7, #23]
          break;
 80044ea:	e016      	b.n	800451a <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80044f2:	b2db      	uxtb	r3, r3
 80044f4:	2b03      	cmp	r3, #3
 80044f6:	d00f      	beq.n	8004518 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 80044f8:	6839      	ldr	r1, [r7, #0]
 80044fa:	6878      	ldr	r0, [r7, #4]
 80044fc:	f001 fa36 	bl	800596c <USBD_CtlError>
            ret = USBD_FAIL;
 8004500:	2303      	movs	r3, #3
 8004502:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8004504:	e008      	b.n	8004518 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8004506:	6839      	ldr	r1, [r7, #0]
 8004508:	6878      	ldr	r0, [r7, #4]
 800450a:	f001 fa2f 	bl	800596c <USBD_CtlError>
          ret = USBD_FAIL;
 800450e:	2303      	movs	r3, #3
 8004510:	75fb      	strb	r3, [r7, #23]
          break;
 8004512:	e002      	b.n	800451a <USBD_CDC_Setup+0x176>
          break;
 8004514:	bf00      	nop
 8004516:	e008      	b.n	800452a <USBD_CDC_Setup+0x186>
          break;
 8004518:	bf00      	nop
      }
      break;
 800451a:	e006      	b.n	800452a <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 800451c:	6839      	ldr	r1, [r7, #0]
 800451e:	6878      	ldr	r0, [r7, #4]
 8004520:	f001 fa24 	bl	800596c <USBD_CtlError>
      ret = USBD_FAIL;
 8004524:	2303      	movs	r3, #3
 8004526:	75fb      	strb	r3, [r7, #23]
      break;
 8004528:	bf00      	nop
  }

  return (uint8_t)ret;
 800452a:	7dfb      	ldrb	r3, [r7, #23]
}
 800452c:	4618      	mov	r0, r3
 800452e:	3718      	adds	r7, #24
 8004530:	46bd      	mov	sp, r7
 8004532:	bd80      	pop	{r7, pc}

08004534 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004534:	b580      	push	{r7, lr}
 8004536:	b084      	sub	sp, #16
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]
 800453c:	460b      	mov	r3, r1
 800453e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8004546:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800454e:	2b00      	cmp	r3, #0
 8004550:	d101      	bne.n	8004556 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8004552:	2303      	movs	r3, #3
 8004554:	e04f      	b.n	80045f6 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800455c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800455e:	78fa      	ldrb	r2, [r7, #3]
 8004560:	6879      	ldr	r1, [r7, #4]
 8004562:	4613      	mov	r3, r2
 8004564:	009b      	lsls	r3, r3, #2
 8004566:	4413      	add	r3, r2
 8004568:	009b      	lsls	r3, r3, #2
 800456a:	440b      	add	r3, r1
 800456c:	3318      	adds	r3, #24
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	2b00      	cmp	r3, #0
 8004572:	d029      	beq.n	80045c8 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8004574:	78fa      	ldrb	r2, [r7, #3]
 8004576:	6879      	ldr	r1, [r7, #4]
 8004578:	4613      	mov	r3, r2
 800457a:	009b      	lsls	r3, r3, #2
 800457c:	4413      	add	r3, r2
 800457e:	009b      	lsls	r3, r3, #2
 8004580:	440b      	add	r3, r1
 8004582:	3318      	adds	r3, #24
 8004584:	681a      	ldr	r2, [r3, #0]
 8004586:	78f9      	ldrb	r1, [r7, #3]
 8004588:	68f8      	ldr	r0, [r7, #12]
 800458a:	460b      	mov	r3, r1
 800458c:	00db      	lsls	r3, r3, #3
 800458e:	1a5b      	subs	r3, r3, r1
 8004590:	009b      	lsls	r3, r3, #2
 8004592:	4403      	add	r3, r0
 8004594:	3344      	adds	r3, #68	; 0x44
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	fbb2 f1f3 	udiv	r1, r2, r3
 800459c:	fb03 f301 	mul.w	r3, r3, r1
 80045a0:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d110      	bne.n	80045c8 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 80045a6:	78fa      	ldrb	r2, [r7, #3]
 80045a8:	6879      	ldr	r1, [r7, #4]
 80045aa:	4613      	mov	r3, r2
 80045ac:	009b      	lsls	r3, r3, #2
 80045ae:	4413      	add	r3, r2
 80045b0:	009b      	lsls	r3, r3, #2
 80045b2:	440b      	add	r3, r1
 80045b4:	3318      	adds	r3, #24
 80045b6:	2200      	movs	r2, #0
 80045b8:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80045ba:	78f9      	ldrb	r1, [r7, #3]
 80045bc:	2300      	movs	r3, #0
 80045be:	2200      	movs	r2, #0
 80045c0:	6878      	ldr	r0, [r7, #4]
 80045c2:	f001 ff3c 	bl	800643e <USBD_LL_Transmit>
 80045c6:	e015      	b.n	80045f4 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 80045c8:	68bb      	ldr	r3, [r7, #8]
 80045ca:	2200      	movs	r2, #0
 80045cc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80045d6:	691b      	ldr	r3, [r3, #16]
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d00b      	beq.n	80045f4 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80045e2:	691b      	ldr	r3, [r3, #16]
 80045e4:	68ba      	ldr	r2, [r7, #8]
 80045e6:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80045ea:	68ba      	ldr	r2, [r7, #8]
 80045ec:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80045f0:	78fa      	ldrb	r2, [r7, #3]
 80045f2:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80045f4:	2300      	movs	r3, #0
}
 80045f6:	4618      	mov	r0, r3
 80045f8:	3710      	adds	r7, #16
 80045fa:	46bd      	mov	sp, r7
 80045fc:	bd80      	pop	{r7, pc}

080045fe <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80045fe:	b580      	push	{r7, lr}
 8004600:	b084      	sub	sp, #16
 8004602:	af00      	add	r7, sp, #0
 8004604:	6078      	str	r0, [r7, #4]
 8004606:	460b      	mov	r3, r1
 8004608:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004610:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004618:	2b00      	cmp	r3, #0
 800461a:	d101      	bne.n	8004620 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800461c:	2303      	movs	r3, #3
 800461e:	e015      	b.n	800464c <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8004620:	78fb      	ldrb	r3, [r7, #3]
 8004622:	4619      	mov	r1, r3
 8004624:	6878      	ldr	r0, [r7, #4]
 8004626:	f001 ff4c 	bl	80064c2 <USBD_LL_GetRxDataSize>
 800462a:	4602      	mov	r2, r0
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004638:	68db      	ldr	r3, [r3, #12]
 800463a:	68fa      	ldr	r2, [r7, #12]
 800463c:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8004640:	68fa      	ldr	r2, [r7, #12]
 8004642:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8004646:	4611      	mov	r1, r2
 8004648:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800464a:	2300      	movs	r3, #0
}
 800464c:	4618      	mov	r0, r3
 800464e:	3710      	adds	r7, #16
 8004650:	46bd      	mov	sp, r7
 8004652:	bd80      	pop	{r7, pc}

08004654 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8004654:	b580      	push	{r7, lr}
 8004656:	b084      	sub	sp, #16
 8004658:	af00      	add	r7, sp, #0
 800465a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004662:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	2b00      	cmp	r3, #0
 8004668:	d101      	bne.n	800466e <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800466a:	2303      	movs	r3, #3
 800466c:	e01b      	b.n	80046a6 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004674:	2b00      	cmp	r3, #0
 8004676:	d015      	beq.n	80046a4 <USBD_CDC_EP0_RxReady+0x50>
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800467e:	2bff      	cmp	r3, #255	; 0xff
 8004680:	d010      	beq.n	80046a4 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004688:	689b      	ldr	r3, [r3, #8]
 800468a:	68fa      	ldr	r2, [r7, #12]
 800468c:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8004690:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8004692:	68fa      	ldr	r2, [r7, #12]
 8004694:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8004698:	b292      	uxth	r2, r2
 800469a:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	22ff      	movs	r2, #255	; 0xff
 80046a0:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 80046a4:	2300      	movs	r3, #0
}
 80046a6:	4618      	mov	r0, r3
 80046a8:	3710      	adds	r7, #16
 80046aa:	46bd      	mov	sp, r7
 80046ac:	bd80      	pop	{r7, pc}
	...

080046b0 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80046b0:	b480      	push	{r7}
 80046b2:	b083      	sub	sp, #12
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2243      	movs	r2, #67	; 0x43
 80046bc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 80046be:	4b03      	ldr	r3, [pc, #12]	; (80046cc <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80046c0:	4618      	mov	r0, r3
 80046c2:	370c      	adds	r7, #12
 80046c4:	46bd      	mov	sp, r7
 80046c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ca:	4770      	bx	lr
 80046cc:	200000b8 	.word	0x200000b8

080046d0 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80046d0:	b480      	push	{r7}
 80046d2:	b083      	sub	sp, #12
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2243      	movs	r2, #67	; 0x43
 80046dc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 80046de:	4b03      	ldr	r3, [pc, #12]	; (80046ec <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80046e0:	4618      	mov	r0, r3
 80046e2:	370c      	adds	r7, #12
 80046e4:	46bd      	mov	sp, r7
 80046e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ea:	4770      	bx	lr
 80046ec:	20000074 	.word	0x20000074

080046f0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80046f0:	b480      	push	{r7}
 80046f2:	b083      	sub	sp, #12
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2243      	movs	r2, #67	; 0x43
 80046fc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 80046fe:	4b03      	ldr	r3, [pc, #12]	; (800470c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8004700:	4618      	mov	r0, r3
 8004702:	370c      	adds	r7, #12
 8004704:	46bd      	mov	sp, r7
 8004706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470a:	4770      	bx	lr
 800470c:	200000fc 	.word	0x200000fc

08004710 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8004710:	b480      	push	{r7}
 8004712:	b083      	sub	sp, #12
 8004714:	af00      	add	r7, sp, #0
 8004716:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	220a      	movs	r2, #10
 800471c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800471e:	4b03      	ldr	r3, [pc, #12]	; (800472c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8004720:	4618      	mov	r0, r3
 8004722:	370c      	adds	r7, #12
 8004724:	46bd      	mov	sp, r7
 8004726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472a:	4770      	bx	lr
 800472c:	20000030 	.word	0x20000030

08004730 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8004730:	b480      	push	{r7}
 8004732:	b083      	sub	sp, #12
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
 8004738:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	2b00      	cmp	r3, #0
 800473e:	d101      	bne.n	8004744 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8004740:	2303      	movs	r3, #3
 8004742:	e004      	b.n	800474e <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	683a      	ldr	r2, [r7, #0]
 8004748:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800474c:	2300      	movs	r3, #0
}
 800474e:	4618      	mov	r0, r3
 8004750:	370c      	adds	r7, #12
 8004752:	46bd      	mov	sp, r7
 8004754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004758:	4770      	bx	lr

0800475a <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800475a:	b480      	push	{r7}
 800475c:	b087      	sub	sp, #28
 800475e:	af00      	add	r7, sp, #0
 8004760:	60f8      	str	r0, [r7, #12]
 8004762:	60b9      	str	r1, [r7, #8]
 8004764:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800476c:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800476e:	697b      	ldr	r3, [r7, #20]
 8004770:	2b00      	cmp	r3, #0
 8004772:	d101      	bne.n	8004778 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8004774:	2303      	movs	r3, #3
 8004776:	e008      	b.n	800478a <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8004778:	697b      	ldr	r3, [r7, #20]
 800477a:	68ba      	ldr	r2, [r7, #8]
 800477c:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8004780:	697b      	ldr	r3, [r7, #20]
 8004782:	687a      	ldr	r2, [r7, #4]
 8004784:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8004788:	2300      	movs	r3, #0
}
 800478a:	4618      	mov	r0, r3
 800478c:	371c      	adds	r7, #28
 800478e:	46bd      	mov	sp, r7
 8004790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004794:	4770      	bx	lr

08004796 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8004796:	b480      	push	{r7}
 8004798:	b085      	sub	sp, #20
 800479a:	af00      	add	r7, sp, #0
 800479c:	6078      	str	r0, [r7, #4]
 800479e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80047a6:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d101      	bne.n	80047b2 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 80047ae:	2303      	movs	r3, #3
 80047b0:	e004      	b.n	80047bc <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	683a      	ldr	r2, [r7, #0]
 80047b6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80047ba:	2300      	movs	r3, #0
}
 80047bc:	4618      	mov	r0, r3
 80047be:	3714      	adds	r7, #20
 80047c0:	46bd      	mov	sp, r7
 80047c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c6:	4770      	bx	lr

080047c8 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80047c8:	b580      	push	{r7, lr}
 80047ca:	b084      	sub	sp, #16
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80047d6:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 80047d8:	2301      	movs	r3, #1
 80047da:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d101      	bne.n	80047ea <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80047e6:	2303      	movs	r3, #3
 80047e8:	e01a      	b.n	8004820 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 80047ea:	68bb      	ldr	r3, [r7, #8]
 80047ec:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d114      	bne.n	800481e <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80047f4:	68bb      	ldr	r3, [r7, #8]
 80047f6:	2201      	movs	r2, #1
 80047f8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80047fc:	68bb      	ldr	r3, [r7, #8]
 80047fe:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8004806:	68bb      	ldr	r3, [r7, #8]
 8004808:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800480c:	68bb      	ldr	r3, [r7, #8]
 800480e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8004812:	2181      	movs	r1, #129	; 0x81
 8004814:	6878      	ldr	r0, [r7, #4]
 8004816:	f001 fe12 	bl	800643e <USBD_LL_Transmit>

    ret = USBD_OK;
 800481a:	2300      	movs	r3, #0
 800481c:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800481e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004820:	4618      	mov	r0, r3
 8004822:	3710      	adds	r7, #16
 8004824:	46bd      	mov	sp, r7
 8004826:	bd80      	pop	{r7, pc}

08004828 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8004828:	b580      	push	{r7, lr}
 800482a:	b084      	sub	sp, #16
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004836:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800483e:	2b00      	cmp	r3, #0
 8004840:	d101      	bne.n	8004846 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8004842:	2303      	movs	r3, #3
 8004844:	e016      	b.n	8004874 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	7c1b      	ldrb	r3, [r3, #16]
 800484a:	2b00      	cmp	r3, #0
 800484c:	d109      	bne.n	8004862 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004854:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004858:	2101      	movs	r1, #1
 800485a:	6878      	ldr	r0, [r7, #4]
 800485c:	f001 fe10 	bl	8006480 <USBD_LL_PrepareReceive>
 8004860:	e007      	b.n	8004872 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004868:	2340      	movs	r3, #64	; 0x40
 800486a:	2101      	movs	r1, #1
 800486c:	6878      	ldr	r0, [r7, #4]
 800486e:	f001 fe07 	bl	8006480 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8004872:	2300      	movs	r3, #0
}
 8004874:	4618      	mov	r0, r3
 8004876:	3710      	adds	r7, #16
 8004878:	46bd      	mov	sp, r7
 800487a:	bd80      	pop	{r7, pc}

0800487c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800487c:	b580      	push	{r7, lr}
 800487e:	b086      	sub	sp, #24
 8004880:	af00      	add	r7, sp, #0
 8004882:	60f8      	str	r0, [r7, #12]
 8004884:	60b9      	str	r1, [r7, #8]
 8004886:	4613      	mov	r3, r2
 8004888:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	2b00      	cmp	r3, #0
 800488e:	d101      	bne.n	8004894 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8004890:	2303      	movs	r3, #3
 8004892:	e01f      	b.n	80048d4 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	2200      	movs	r2, #0
 8004898:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	2200      	movs	r2, #0
 80048a0:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	2200      	movs	r2, #0
 80048a8:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80048ac:	68bb      	ldr	r3, [r7, #8]
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d003      	beq.n	80048ba <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	68ba      	ldr	r2, [r7, #8]
 80048b6:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	2201      	movs	r2, #1
 80048be:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	79fa      	ldrb	r2, [r7, #7]
 80048c6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80048c8:	68f8      	ldr	r0, [r7, #12]
 80048ca:	f001 fc83 	bl	80061d4 <USBD_LL_Init>
 80048ce:	4603      	mov	r3, r0
 80048d0:	75fb      	strb	r3, [r7, #23]

  return ret;
 80048d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80048d4:	4618      	mov	r0, r3
 80048d6:	3718      	adds	r7, #24
 80048d8:	46bd      	mov	sp, r7
 80048da:	bd80      	pop	{r7, pc}

080048dc <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80048dc:	b580      	push	{r7, lr}
 80048de:	b084      	sub	sp, #16
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]
 80048e4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80048e6:	2300      	movs	r3, #0
 80048e8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80048ea:	683b      	ldr	r3, [r7, #0]
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d101      	bne.n	80048f4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 80048f0:	2303      	movs	r3, #3
 80048f2:	e016      	b.n	8004922 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	683a      	ldr	r2, [r7, #0]
 80048f8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004902:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004904:	2b00      	cmp	r3, #0
 8004906:	d00b      	beq.n	8004920 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800490e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004910:	f107 020e 	add.w	r2, r7, #14
 8004914:	4610      	mov	r0, r2
 8004916:	4798      	blx	r3
 8004918:	4602      	mov	r2, r0
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8004920:	2300      	movs	r3, #0
}
 8004922:	4618      	mov	r0, r3
 8004924:	3710      	adds	r7, #16
 8004926:	46bd      	mov	sp, r7
 8004928:	bd80      	pop	{r7, pc}

0800492a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800492a:	b580      	push	{r7, lr}
 800492c:	b082      	sub	sp, #8
 800492e:	af00      	add	r7, sp, #0
 8004930:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8004932:	6878      	ldr	r0, [r7, #4]
 8004934:	f001 fc9a 	bl	800626c <USBD_LL_Start>
 8004938:	4603      	mov	r3, r0
}
 800493a:	4618      	mov	r0, r3
 800493c:	3708      	adds	r7, #8
 800493e:	46bd      	mov	sp, r7
 8004940:	bd80      	pop	{r7, pc}

08004942 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8004942:	b480      	push	{r7}
 8004944:	b083      	sub	sp, #12
 8004946:	af00      	add	r7, sp, #0
 8004948:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800494a:	2300      	movs	r3, #0
}
 800494c:	4618      	mov	r0, r3
 800494e:	370c      	adds	r7, #12
 8004950:	46bd      	mov	sp, r7
 8004952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004956:	4770      	bx	lr

08004958 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004958:	b580      	push	{r7, lr}
 800495a:	b084      	sub	sp, #16
 800495c:	af00      	add	r7, sp, #0
 800495e:	6078      	str	r0, [r7, #4]
 8004960:	460b      	mov	r3, r1
 8004962:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8004964:	2303      	movs	r3, #3
 8004966:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800496e:	2b00      	cmp	r3, #0
 8004970:	d009      	beq.n	8004986 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	78fa      	ldrb	r2, [r7, #3]
 800497c:	4611      	mov	r1, r2
 800497e:	6878      	ldr	r0, [r7, #4]
 8004980:	4798      	blx	r3
 8004982:	4603      	mov	r3, r0
 8004984:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8004986:	7bfb      	ldrb	r3, [r7, #15]
}
 8004988:	4618      	mov	r0, r3
 800498a:	3710      	adds	r7, #16
 800498c:	46bd      	mov	sp, r7
 800498e:	bd80      	pop	{r7, pc}

08004990 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004990:	b580      	push	{r7, lr}
 8004992:	b082      	sub	sp, #8
 8004994:	af00      	add	r7, sp, #0
 8004996:	6078      	str	r0, [r7, #4]
 8004998:	460b      	mov	r3, r1
 800499a:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d007      	beq.n	80049b6 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80049ac:	685b      	ldr	r3, [r3, #4]
 80049ae:	78fa      	ldrb	r2, [r7, #3]
 80049b0:	4611      	mov	r1, r2
 80049b2:	6878      	ldr	r0, [r7, #4]
 80049b4:	4798      	blx	r3
  }

  return USBD_OK;
 80049b6:	2300      	movs	r3, #0
}
 80049b8:	4618      	mov	r0, r3
 80049ba:	3708      	adds	r7, #8
 80049bc:	46bd      	mov	sp, r7
 80049be:	bd80      	pop	{r7, pc}

080049c0 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80049c0:	b580      	push	{r7, lr}
 80049c2:	b084      	sub	sp, #16
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	6078      	str	r0, [r7, #4]
 80049c8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80049d0:	6839      	ldr	r1, [r7, #0]
 80049d2:	4618      	mov	r0, r3
 80049d4:	f000 ff90 	bl	80058f8 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	2201      	movs	r2, #1
 80049dc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80049e6:	461a      	mov	r2, r3
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80049f4:	f003 031f 	and.w	r3, r3, #31
 80049f8:	2b02      	cmp	r3, #2
 80049fa:	d01a      	beq.n	8004a32 <USBD_LL_SetupStage+0x72>
 80049fc:	2b02      	cmp	r3, #2
 80049fe:	d822      	bhi.n	8004a46 <USBD_LL_SetupStage+0x86>
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d002      	beq.n	8004a0a <USBD_LL_SetupStage+0x4a>
 8004a04:	2b01      	cmp	r3, #1
 8004a06:	d00a      	beq.n	8004a1e <USBD_LL_SetupStage+0x5e>
 8004a08:	e01d      	b.n	8004a46 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8004a10:	4619      	mov	r1, r3
 8004a12:	6878      	ldr	r0, [r7, #4]
 8004a14:	f000 fa62 	bl	8004edc <USBD_StdDevReq>
 8004a18:	4603      	mov	r3, r0
 8004a1a:	73fb      	strb	r3, [r7, #15]
      break;
 8004a1c:	e020      	b.n	8004a60 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8004a24:	4619      	mov	r1, r3
 8004a26:	6878      	ldr	r0, [r7, #4]
 8004a28:	f000 fac6 	bl	8004fb8 <USBD_StdItfReq>
 8004a2c:	4603      	mov	r3, r0
 8004a2e:	73fb      	strb	r3, [r7, #15]
      break;
 8004a30:	e016      	b.n	8004a60 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8004a38:	4619      	mov	r1, r3
 8004a3a:	6878      	ldr	r0, [r7, #4]
 8004a3c:	f000 fb05 	bl	800504a <USBD_StdEPReq>
 8004a40:	4603      	mov	r3, r0
 8004a42:	73fb      	strb	r3, [r7, #15]
      break;
 8004a44:	e00c      	b.n	8004a60 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8004a4c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004a50:	b2db      	uxtb	r3, r3
 8004a52:	4619      	mov	r1, r3
 8004a54:	6878      	ldr	r0, [r7, #4]
 8004a56:	f001 fc69 	bl	800632c <USBD_LL_StallEP>
 8004a5a:	4603      	mov	r3, r0
 8004a5c:	73fb      	strb	r3, [r7, #15]
      break;
 8004a5e:	bf00      	nop
  }

  return ret;
 8004a60:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a62:	4618      	mov	r0, r3
 8004a64:	3710      	adds	r7, #16
 8004a66:	46bd      	mov	sp, r7
 8004a68:	bd80      	pop	{r7, pc}

08004a6a <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8004a6a:	b580      	push	{r7, lr}
 8004a6c:	b086      	sub	sp, #24
 8004a6e:	af00      	add	r7, sp, #0
 8004a70:	60f8      	str	r0, [r7, #12]
 8004a72:	460b      	mov	r3, r1
 8004a74:	607a      	str	r2, [r7, #4]
 8004a76:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8004a78:	7afb      	ldrb	r3, [r7, #11]
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d138      	bne.n	8004af0 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8004a84:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8004a8c:	2b03      	cmp	r3, #3
 8004a8e:	d14a      	bne.n	8004b26 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8004a90:	693b      	ldr	r3, [r7, #16]
 8004a92:	689a      	ldr	r2, [r3, #8]
 8004a94:	693b      	ldr	r3, [r7, #16]
 8004a96:	68db      	ldr	r3, [r3, #12]
 8004a98:	429a      	cmp	r2, r3
 8004a9a:	d913      	bls.n	8004ac4 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8004a9c:	693b      	ldr	r3, [r7, #16]
 8004a9e:	689a      	ldr	r2, [r3, #8]
 8004aa0:	693b      	ldr	r3, [r7, #16]
 8004aa2:	68db      	ldr	r3, [r3, #12]
 8004aa4:	1ad2      	subs	r2, r2, r3
 8004aa6:	693b      	ldr	r3, [r7, #16]
 8004aa8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8004aaa:	693b      	ldr	r3, [r7, #16]
 8004aac:	68da      	ldr	r2, [r3, #12]
 8004aae:	693b      	ldr	r3, [r7, #16]
 8004ab0:	689b      	ldr	r3, [r3, #8]
 8004ab2:	4293      	cmp	r3, r2
 8004ab4:	bf28      	it	cs
 8004ab6:	4613      	movcs	r3, r2
 8004ab8:	461a      	mov	r2, r3
 8004aba:	6879      	ldr	r1, [r7, #4]
 8004abc:	68f8      	ldr	r0, [r7, #12]
 8004abe:	f001 f80f 	bl	8005ae0 <USBD_CtlContinueRx>
 8004ac2:	e030      	b.n	8004b26 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004aca:	b2db      	uxtb	r3, r3
 8004acc:	2b03      	cmp	r3, #3
 8004ace:	d10b      	bne.n	8004ae8 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004ad6:	691b      	ldr	r3, [r3, #16]
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d005      	beq.n	8004ae8 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004ae2:	691b      	ldr	r3, [r3, #16]
 8004ae4:	68f8      	ldr	r0, [r7, #12]
 8004ae6:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8004ae8:	68f8      	ldr	r0, [r7, #12]
 8004aea:	f001 f80a 	bl	8005b02 <USBD_CtlSendStatus>
 8004aee:	e01a      	b.n	8004b26 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004af6:	b2db      	uxtb	r3, r3
 8004af8:	2b03      	cmp	r3, #3
 8004afa:	d114      	bne.n	8004b26 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004b02:	699b      	ldr	r3, [r3, #24]
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d00e      	beq.n	8004b26 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004b0e:	699b      	ldr	r3, [r3, #24]
 8004b10:	7afa      	ldrb	r2, [r7, #11]
 8004b12:	4611      	mov	r1, r2
 8004b14:	68f8      	ldr	r0, [r7, #12]
 8004b16:	4798      	blx	r3
 8004b18:	4603      	mov	r3, r0
 8004b1a:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8004b1c:	7dfb      	ldrb	r3, [r7, #23]
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d001      	beq.n	8004b26 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8004b22:	7dfb      	ldrb	r3, [r7, #23]
 8004b24:	e000      	b.n	8004b28 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8004b26:	2300      	movs	r3, #0
}
 8004b28:	4618      	mov	r0, r3
 8004b2a:	3718      	adds	r7, #24
 8004b2c:	46bd      	mov	sp, r7
 8004b2e:	bd80      	pop	{r7, pc}

08004b30 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8004b30:	b580      	push	{r7, lr}
 8004b32:	b086      	sub	sp, #24
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	60f8      	str	r0, [r7, #12]
 8004b38:	460b      	mov	r3, r1
 8004b3a:	607a      	str	r2, [r7, #4]
 8004b3c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8004b3e:	7afb      	ldrb	r3, [r7, #11]
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d16b      	bne.n	8004c1c <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	3314      	adds	r3, #20
 8004b48:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8004b50:	2b02      	cmp	r3, #2
 8004b52:	d156      	bne.n	8004c02 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8004b54:	693b      	ldr	r3, [r7, #16]
 8004b56:	689a      	ldr	r2, [r3, #8]
 8004b58:	693b      	ldr	r3, [r7, #16]
 8004b5a:	68db      	ldr	r3, [r3, #12]
 8004b5c:	429a      	cmp	r2, r3
 8004b5e:	d914      	bls.n	8004b8a <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8004b60:	693b      	ldr	r3, [r7, #16]
 8004b62:	689a      	ldr	r2, [r3, #8]
 8004b64:	693b      	ldr	r3, [r7, #16]
 8004b66:	68db      	ldr	r3, [r3, #12]
 8004b68:	1ad2      	subs	r2, r2, r3
 8004b6a:	693b      	ldr	r3, [r7, #16]
 8004b6c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8004b6e:	693b      	ldr	r3, [r7, #16]
 8004b70:	689b      	ldr	r3, [r3, #8]
 8004b72:	461a      	mov	r2, r3
 8004b74:	6879      	ldr	r1, [r7, #4]
 8004b76:	68f8      	ldr	r0, [r7, #12]
 8004b78:	f000 ff84 	bl	8005a84 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8004b7c:	2300      	movs	r3, #0
 8004b7e:	2200      	movs	r2, #0
 8004b80:	2100      	movs	r1, #0
 8004b82:	68f8      	ldr	r0, [r7, #12]
 8004b84:	f001 fc7c 	bl	8006480 <USBD_LL_PrepareReceive>
 8004b88:	e03b      	b.n	8004c02 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8004b8a:	693b      	ldr	r3, [r7, #16]
 8004b8c:	68da      	ldr	r2, [r3, #12]
 8004b8e:	693b      	ldr	r3, [r7, #16]
 8004b90:	689b      	ldr	r3, [r3, #8]
 8004b92:	429a      	cmp	r2, r3
 8004b94:	d11c      	bne.n	8004bd0 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8004b96:	693b      	ldr	r3, [r7, #16]
 8004b98:	685a      	ldr	r2, [r3, #4]
 8004b9a:	693b      	ldr	r3, [r7, #16]
 8004b9c:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8004b9e:	429a      	cmp	r2, r3
 8004ba0:	d316      	bcc.n	8004bd0 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8004ba2:	693b      	ldr	r3, [r7, #16]
 8004ba4:	685a      	ldr	r2, [r3, #4]
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8004bac:	429a      	cmp	r2, r3
 8004bae:	d20f      	bcs.n	8004bd0 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8004bb0:	2200      	movs	r2, #0
 8004bb2:	2100      	movs	r1, #0
 8004bb4:	68f8      	ldr	r0, [r7, #12]
 8004bb6:	f000 ff65 	bl	8005a84 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	2200      	movs	r2, #0
 8004bbe:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8004bc2:	2300      	movs	r3, #0
 8004bc4:	2200      	movs	r2, #0
 8004bc6:	2100      	movs	r1, #0
 8004bc8:	68f8      	ldr	r0, [r7, #12]
 8004bca:	f001 fc59 	bl	8006480 <USBD_LL_PrepareReceive>
 8004bce:	e018      	b.n	8004c02 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004bd6:	b2db      	uxtb	r3, r3
 8004bd8:	2b03      	cmp	r3, #3
 8004bda:	d10b      	bne.n	8004bf4 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004be2:	68db      	ldr	r3, [r3, #12]
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d005      	beq.n	8004bf4 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004bee:	68db      	ldr	r3, [r3, #12]
 8004bf0:	68f8      	ldr	r0, [r7, #12]
 8004bf2:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8004bf4:	2180      	movs	r1, #128	; 0x80
 8004bf6:	68f8      	ldr	r0, [r7, #12]
 8004bf8:	f001 fb98 	bl	800632c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8004bfc:	68f8      	ldr	r0, [r7, #12]
 8004bfe:	f000 ff93 	bl	8005b28 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8004c08:	2b01      	cmp	r3, #1
 8004c0a:	d122      	bne.n	8004c52 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8004c0c:	68f8      	ldr	r0, [r7, #12]
 8004c0e:	f7ff fe98 	bl	8004942 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	2200      	movs	r2, #0
 8004c16:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8004c1a:	e01a      	b.n	8004c52 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004c22:	b2db      	uxtb	r3, r3
 8004c24:	2b03      	cmp	r3, #3
 8004c26:	d114      	bne.n	8004c52 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004c2e:	695b      	ldr	r3, [r3, #20]
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d00e      	beq.n	8004c52 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004c3a:	695b      	ldr	r3, [r3, #20]
 8004c3c:	7afa      	ldrb	r2, [r7, #11]
 8004c3e:	4611      	mov	r1, r2
 8004c40:	68f8      	ldr	r0, [r7, #12]
 8004c42:	4798      	blx	r3
 8004c44:	4603      	mov	r3, r0
 8004c46:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8004c48:	7dfb      	ldrb	r3, [r7, #23]
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d001      	beq.n	8004c52 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8004c4e:	7dfb      	ldrb	r3, [r7, #23]
 8004c50:	e000      	b.n	8004c54 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8004c52:	2300      	movs	r3, #0
}
 8004c54:	4618      	mov	r0, r3
 8004c56:	3718      	adds	r7, #24
 8004c58:	46bd      	mov	sp, r7
 8004c5a:	bd80      	pop	{r7, pc}

08004c5c <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8004c5c:	b580      	push	{r7, lr}
 8004c5e:	b082      	sub	sp, #8
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2201      	movs	r2, #1
 8004c68:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2200      	movs	r2, #0
 8004c70:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	2200      	movs	r2, #0
 8004c78:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d101      	bne.n	8004c90 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8004c8c:	2303      	movs	r3, #3
 8004c8e:	e02f      	b.n	8004cf0 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d00f      	beq.n	8004cba <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004ca0:	685b      	ldr	r3, [r3, #4]
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d009      	beq.n	8004cba <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004cac:	685b      	ldr	r3, [r3, #4]
 8004cae:	687a      	ldr	r2, [r7, #4]
 8004cb0:	6852      	ldr	r2, [r2, #4]
 8004cb2:	b2d2      	uxtb	r2, r2
 8004cb4:	4611      	mov	r1, r2
 8004cb6:	6878      	ldr	r0, [r7, #4]
 8004cb8:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8004cba:	2340      	movs	r3, #64	; 0x40
 8004cbc:	2200      	movs	r2, #0
 8004cbe:	2100      	movs	r1, #0
 8004cc0:	6878      	ldr	r0, [r7, #4]
 8004cc2:	f001 faee 	bl	80062a2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	2201      	movs	r2, #1
 8004cca:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	2240      	movs	r2, #64	; 0x40
 8004cd2:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8004cd6:	2340      	movs	r3, #64	; 0x40
 8004cd8:	2200      	movs	r2, #0
 8004cda:	2180      	movs	r1, #128	; 0x80
 8004cdc:	6878      	ldr	r0, [r7, #4]
 8004cde:	f001 fae0 	bl	80062a2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	2201      	movs	r2, #1
 8004ce6:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	2240      	movs	r2, #64	; 0x40
 8004cec:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8004cee:	2300      	movs	r3, #0
}
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	3708      	adds	r7, #8
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	bd80      	pop	{r7, pc}

08004cf8 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8004cf8:	b480      	push	{r7}
 8004cfa:	b083      	sub	sp, #12
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	6078      	str	r0, [r7, #4]
 8004d00:	460b      	mov	r3, r1
 8004d02:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	78fa      	ldrb	r2, [r7, #3]
 8004d08:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8004d0a:	2300      	movs	r3, #0
}
 8004d0c:	4618      	mov	r0, r3
 8004d0e:	370c      	adds	r7, #12
 8004d10:	46bd      	mov	sp, r7
 8004d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d16:	4770      	bx	lr

08004d18 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8004d18:	b480      	push	{r7}
 8004d1a:	b083      	sub	sp, #12
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004d26:	b2da      	uxtb	r2, r3
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	2204      	movs	r2, #4
 8004d32:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8004d36:	2300      	movs	r3, #0
}
 8004d38:	4618      	mov	r0, r3
 8004d3a:	370c      	adds	r7, #12
 8004d3c:	46bd      	mov	sp, r7
 8004d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d42:	4770      	bx	lr

08004d44 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8004d44:	b480      	push	{r7}
 8004d46:	b083      	sub	sp, #12
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004d52:	b2db      	uxtb	r3, r3
 8004d54:	2b04      	cmp	r3, #4
 8004d56:	d106      	bne.n	8004d66 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8004d5e:	b2da      	uxtb	r2, r3
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8004d66:	2300      	movs	r3, #0
}
 8004d68:	4618      	mov	r0, r3
 8004d6a:	370c      	adds	r7, #12
 8004d6c:	46bd      	mov	sp, r7
 8004d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d72:	4770      	bx	lr

08004d74 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8004d74:	b580      	push	{r7, lr}
 8004d76:	b082      	sub	sp, #8
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d101      	bne.n	8004d8a <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8004d86:	2303      	movs	r3, #3
 8004d88:	e012      	b.n	8004db0 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004d90:	b2db      	uxtb	r3, r3
 8004d92:	2b03      	cmp	r3, #3
 8004d94:	d10b      	bne.n	8004dae <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004d9c:	69db      	ldr	r3, [r3, #28]
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d005      	beq.n	8004dae <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004da8:	69db      	ldr	r3, [r3, #28]
 8004daa:	6878      	ldr	r0, [r7, #4]
 8004dac:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8004dae:	2300      	movs	r3, #0
}
 8004db0:	4618      	mov	r0, r3
 8004db2:	3708      	adds	r7, #8
 8004db4:	46bd      	mov	sp, r7
 8004db6:	bd80      	pop	{r7, pc}

08004db8 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8004db8:	b580      	push	{r7, lr}
 8004dba:	b082      	sub	sp, #8
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	6078      	str	r0, [r7, #4]
 8004dc0:	460b      	mov	r3, r1
 8004dc2:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d101      	bne.n	8004dd2 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 8004dce:	2303      	movs	r3, #3
 8004dd0:	e014      	b.n	8004dfc <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004dd8:	b2db      	uxtb	r3, r3
 8004dda:	2b03      	cmp	r3, #3
 8004ddc:	d10d      	bne.n	8004dfa <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004de4:	6a1b      	ldr	r3, [r3, #32]
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d007      	beq.n	8004dfa <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004df0:	6a1b      	ldr	r3, [r3, #32]
 8004df2:	78fa      	ldrb	r2, [r7, #3]
 8004df4:	4611      	mov	r1, r2
 8004df6:	6878      	ldr	r0, [r7, #4]
 8004df8:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8004dfa:	2300      	movs	r3, #0
}
 8004dfc:	4618      	mov	r0, r3
 8004dfe:	3708      	adds	r7, #8
 8004e00:	46bd      	mov	sp, r7
 8004e02:	bd80      	pop	{r7, pc}

08004e04 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8004e04:	b580      	push	{r7, lr}
 8004e06:	b082      	sub	sp, #8
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	6078      	str	r0, [r7, #4]
 8004e0c:	460b      	mov	r3, r1
 8004e0e:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d101      	bne.n	8004e1e <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 8004e1a:	2303      	movs	r3, #3
 8004e1c:	e014      	b.n	8004e48 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004e24:	b2db      	uxtb	r3, r3
 8004e26:	2b03      	cmp	r3, #3
 8004e28:	d10d      	bne.n	8004e46 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004e30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d007      	beq.n	8004e46 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004e3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e3e:	78fa      	ldrb	r2, [r7, #3]
 8004e40:	4611      	mov	r1, r2
 8004e42:	6878      	ldr	r0, [r7, #4]
 8004e44:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8004e46:	2300      	movs	r3, #0
}
 8004e48:	4618      	mov	r0, r3
 8004e4a:	3708      	adds	r7, #8
 8004e4c:	46bd      	mov	sp, r7
 8004e4e:	bd80      	pop	{r7, pc}

08004e50 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8004e50:	b480      	push	{r7}
 8004e52:	b083      	sub	sp, #12
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8004e58:	2300      	movs	r3, #0
}
 8004e5a:	4618      	mov	r0, r3
 8004e5c:	370c      	adds	r7, #12
 8004e5e:	46bd      	mov	sp, r7
 8004e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e64:	4770      	bx	lr

08004e66 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8004e66:	b580      	push	{r7, lr}
 8004e68:	b082      	sub	sp, #8
 8004e6a:	af00      	add	r7, sp, #0
 8004e6c:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	2201      	movs	r2, #1
 8004e72:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d009      	beq.n	8004e94 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004e86:	685b      	ldr	r3, [r3, #4]
 8004e88:	687a      	ldr	r2, [r7, #4]
 8004e8a:	6852      	ldr	r2, [r2, #4]
 8004e8c:	b2d2      	uxtb	r2, r2
 8004e8e:	4611      	mov	r1, r2
 8004e90:	6878      	ldr	r0, [r7, #4]
 8004e92:	4798      	blx	r3
  }

  return USBD_OK;
 8004e94:	2300      	movs	r3, #0
}
 8004e96:	4618      	mov	r0, r3
 8004e98:	3708      	adds	r7, #8
 8004e9a:	46bd      	mov	sp, r7
 8004e9c:	bd80      	pop	{r7, pc}

08004e9e <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8004e9e:	b480      	push	{r7}
 8004ea0:	b087      	sub	sp, #28
 8004ea2:	af00      	add	r7, sp, #0
 8004ea4:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8004eaa:	697b      	ldr	r3, [r7, #20]
 8004eac:	781b      	ldrb	r3, [r3, #0]
 8004eae:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8004eb0:	697b      	ldr	r3, [r7, #20]
 8004eb2:	3301      	adds	r3, #1
 8004eb4:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8004eb6:	697b      	ldr	r3, [r7, #20]
 8004eb8:	781b      	ldrb	r3, [r3, #0]
 8004eba:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8004ebc:	8a3b      	ldrh	r3, [r7, #16]
 8004ebe:	021b      	lsls	r3, r3, #8
 8004ec0:	b21a      	sxth	r2, r3
 8004ec2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8004ec6:	4313      	orrs	r3, r2
 8004ec8:	b21b      	sxth	r3, r3
 8004eca:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8004ecc:	89fb      	ldrh	r3, [r7, #14]
}
 8004ece:	4618      	mov	r0, r3
 8004ed0:	371c      	adds	r7, #28
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed8:	4770      	bx	lr
	...

08004edc <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8004edc:	b580      	push	{r7, lr}
 8004ede:	b084      	sub	sp, #16
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	6078      	str	r0, [r7, #4]
 8004ee4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8004ee6:	2300      	movs	r3, #0
 8004ee8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004eea:	683b      	ldr	r3, [r7, #0]
 8004eec:	781b      	ldrb	r3, [r3, #0]
 8004eee:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004ef2:	2b40      	cmp	r3, #64	; 0x40
 8004ef4:	d005      	beq.n	8004f02 <USBD_StdDevReq+0x26>
 8004ef6:	2b40      	cmp	r3, #64	; 0x40
 8004ef8:	d853      	bhi.n	8004fa2 <USBD_StdDevReq+0xc6>
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d00b      	beq.n	8004f16 <USBD_StdDevReq+0x3a>
 8004efe:	2b20      	cmp	r3, #32
 8004f00:	d14f      	bne.n	8004fa2 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004f08:	689b      	ldr	r3, [r3, #8]
 8004f0a:	6839      	ldr	r1, [r7, #0]
 8004f0c:	6878      	ldr	r0, [r7, #4]
 8004f0e:	4798      	blx	r3
 8004f10:	4603      	mov	r3, r0
 8004f12:	73fb      	strb	r3, [r7, #15]
      break;
 8004f14:	e04a      	b.n	8004fac <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8004f16:	683b      	ldr	r3, [r7, #0]
 8004f18:	785b      	ldrb	r3, [r3, #1]
 8004f1a:	2b09      	cmp	r3, #9
 8004f1c:	d83b      	bhi.n	8004f96 <USBD_StdDevReq+0xba>
 8004f1e:	a201      	add	r2, pc, #4	; (adr r2, 8004f24 <USBD_StdDevReq+0x48>)
 8004f20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f24:	08004f79 	.word	0x08004f79
 8004f28:	08004f8d 	.word	0x08004f8d
 8004f2c:	08004f97 	.word	0x08004f97
 8004f30:	08004f83 	.word	0x08004f83
 8004f34:	08004f97 	.word	0x08004f97
 8004f38:	08004f57 	.word	0x08004f57
 8004f3c:	08004f4d 	.word	0x08004f4d
 8004f40:	08004f97 	.word	0x08004f97
 8004f44:	08004f6f 	.word	0x08004f6f
 8004f48:	08004f61 	.word	0x08004f61
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8004f4c:	6839      	ldr	r1, [r7, #0]
 8004f4e:	6878      	ldr	r0, [r7, #4]
 8004f50:	f000 f9de 	bl	8005310 <USBD_GetDescriptor>
          break;
 8004f54:	e024      	b.n	8004fa0 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8004f56:	6839      	ldr	r1, [r7, #0]
 8004f58:	6878      	ldr	r0, [r7, #4]
 8004f5a:	f000 fb43 	bl	80055e4 <USBD_SetAddress>
          break;
 8004f5e:	e01f      	b.n	8004fa0 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8004f60:	6839      	ldr	r1, [r7, #0]
 8004f62:	6878      	ldr	r0, [r7, #4]
 8004f64:	f000 fb82 	bl	800566c <USBD_SetConfig>
 8004f68:	4603      	mov	r3, r0
 8004f6a:	73fb      	strb	r3, [r7, #15]
          break;
 8004f6c:	e018      	b.n	8004fa0 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8004f6e:	6839      	ldr	r1, [r7, #0]
 8004f70:	6878      	ldr	r0, [r7, #4]
 8004f72:	f000 fc21 	bl	80057b8 <USBD_GetConfig>
          break;
 8004f76:	e013      	b.n	8004fa0 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8004f78:	6839      	ldr	r1, [r7, #0]
 8004f7a:	6878      	ldr	r0, [r7, #4]
 8004f7c:	f000 fc52 	bl	8005824 <USBD_GetStatus>
          break;
 8004f80:	e00e      	b.n	8004fa0 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8004f82:	6839      	ldr	r1, [r7, #0]
 8004f84:	6878      	ldr	r0, [r7, #4]
 8004f86:	f000 fc81 	bl	800588c <USBD_SetFeature>
          break;
 8004f8a:	e009      	b.n	8004fa0 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8004f8c:	6839      	ldr	r1, [r7, #0]
 8004f8e:	6878      	ldr	r0, [r7, #4]
 8004f90:	f000 fc90 	bl	80058b4 <USBD_ClrFeature>
          break;
 8004f94:	e004      	b.n	8004fa0 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8004f96:	6839      	ldr	r1, [r7, #0]
 8004f98:	6878      	ldr	r0, [r7, #4]
 8004f9a:	f000 fce7 	bl	800596c <USBD_CtlError>
          break;
 8004f9e:	bf00      	nop
      }
      break;
 8004fa0:	e004      	b.n	8004fac <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8004fa2:	6839      	ldr	r1, [r7, #0]
 8004fa4:	6878      	ldr	r0, [r7, #4]
 8004fa6:	f000 fce1 	bl	800596c <USBD_CtlError>
      break;
 8004faa:	bf00      	nop
  }

  return ret;
 8004fac:	7bfb      	ldrb	r3, [r7, #15]
}
 8004fae:	4618      	mov	r0, r3
 8004fb0:	3710      	adds	r7, #16
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	bd80      	pop	{r7, pc}
 8004fb6:	bf00      	nop

08004fb8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8004fb8:	b580      	push	{r7, lr}
 8004fba:	b084      	sub	sp, #16
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	6078      	str	r0, [r7, #4]
 8004fc0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8004fc2:	2300      	movs	r3, #0
 8004fc4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004fc6:	683b      	ldr	r3, [r7, #0]
 8004fc8:	781b      	ldrb	r3, [r3, #0]
 8004fca:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004fce:	2b40      	cmp	r3, #64	; 0x40
 8004fd0:	d005      	beq.n	8004fde <USBD_StdItfReq+0x26>
 8004fd2:	2b40      	cmp	r3, #64	; 0x40
 8004fd4:	d82f      	bhi.n	8005036 <USBD_StdItfReq+0x7e>
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d001      	beq.n	8004fde <USBD_StdItfReq+0x26>
 8004fda:	2b20      	cmp	r3, #32
 8004fdc:	d12b      	bne.n	8005036 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004fe4:	b2db      	uxtb	r3, r3
 8004fe6:	3b01      	subs	r3, #1
 8004fe8:	2b02      	cmp	r3, #2
 8004fea:	d81d      	bhi.n	8005028 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8004fec:	683b      	ldr	r3, [r7, #0]
 8004fee:	889b      	ldrh	r3, [r3, #4]
 8004ff0:	b2db      	uxtb	r3, r3
 8004ff2:	2b01      	cmp	r3, #1
 8004ff4:	d813      	bhi.n	800501e <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004ffc:	689b      	ldr	r3, [r3, #8]
 8004ffe:	6839      	ldr	r1, [r7, #0]
 8005000:	6878      	ldr	r0, [r7, #4]
 8005002:	4798      	blx	r3
 8005004:	4603      	mov	r3, r0
 8005006:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8005008:	683b      	ldr	r3, [r7, #0]
 800500a:	88db      	ldrh	r3, [r3, #6]
 800500c:	2b00      	cmp	r3, #0
 800500e:	d110      	bne.n	8005032 <USBD_StdItfReq+0x7a>
 8005010:	7bfb      	ldrb	r3, [r7, #15]
 8005012:	2b00      	cmp	r3, #0
 8005014:	d10d      	bne.n	8005032 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8005016:	6878      	ldr	r0, [r7, #4]
 8005018:	f000 fd73 	bl	8005b02 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800501c:	e009      	b.n	8005032 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800501e:	6839      	ldr	r1, [r7, #0]
 8005020:	6878      	ldr	r0, [r7, #4]
 8005022:	f000 fca3 	bl	800596c <USBD_CtlError>
          break;
 8005026:	e004      	b.n	8005032 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8005028:	6839      	ldr	r1, [r7, #0]
 800502a:	6878      	ldr	r0, [r7, #4]
 800502c:	f000 fc9e 	bl	800596c <USBD_CtlError>
          break;
 8005030:	e000      	b.n	8005034 <USBD_StdItfReq+0x7c>
          break;
 8005032:	bf00      	nop
      }
      break;
 8005034:	e004      	b.n	8005040 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8005036:	6839      	ldr	r1, [r7, #0]
 8005038:	6878      	ldr	r0, [r7, #4]
 800503a:	f000 fc97 	bl	800596c <USBD_CtlError>
      break;
 800503e:	bf00      	nop
  }

  return ret;
 8005040:	7bfb      	ldrb	r3, [r7, #15]
}
 8005042:	4618      	mov	r0, r3
 8005044:	3710      	adds	r7, #16
 8005046:	46bd      	mov	sp, r7
 8005048:	bd80      	pop	{r7, pc}

0800504a <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800504a:	b580      	push	{r7, lr}
 800504c:	b084      	sub	sp, #16
 800504e:	af00      	add	r7, sp, #0
 8005050:	6078      	str	r0, [r7, #4]
 8005052:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8005054:	2300      	movs	r3, #0
 8005056:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8005058:	683b      	ldr	r3, [r7, #0]
 800505a:	889b      	ldrh	r3, [r3, #4]
 800505c:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800505e:	683b      	ldr	r3, [r7, #0]
 8005060:	781b      	ldrb	r3, [r3, #0]
 8005062:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005066:	2b40      	cmp	r3, #64	; 0x40
 8005068:	d007      	beq.n	800507a <USBD_StdEPReq+0x30>
 800506a:	2b40      	cmp	r3, #64	; 0x40
 800506c:	f200 8145 	bhi.w	80052fa <USBD_StdEPReq+0x2b0>
 8005070:	2b00      	cmp	r3, #0
 8005072:	d00c      	beq.n	800508e <USBD_StdEPReq+0x44>
 8005074:	2b20      	cmp	r3, #32
 8005076:	f040 8140 	bne.w	80052fa <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005080:	689b      	ldr	r3, [r3, #8]
 8005082:	6839      	ldr	r1, [r7, #0]
 8005084:	6878      	ldr	r0, [r7, #4]
 8005086:	4798      	blx	r3
 8005088:	4603      	mov	r3, r0
 800508a:	73fb      	strb	r3, [r7, #15]
      break;
 800508c:	e13a      	b.n	8005304 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800508e:	683b      	ldr	r3, [r7, #0]
 8005090:	785b      	ldrb	r3, [r3, #1]
 8005092:	2b03      	cmp	r3, #3
 8005094:	d007      	beq.n	80050a6 <USBD_StdEPReq+0x5c>
 8005096:	2b03      	cmp	r3, #3
 8005098:	f300 8129 	bgt.w	80052ee <USBD_StdEPReq+0x2a4>
 800509c:	2b00      	cmp	r3, #0
 800509e:	d07f      	beq.n	80051a0 <USBD_StdEPReq+0x156>
 80050a0:	2b01      	cmp	r3, #1
 80050a2:	d03c      	beq.n	800511e <USBD_StdEPReq+0xd4>
 80050a4:	e123      	b.n	80052ee <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80050ac:	b2db      	uxtb	r3, r3
 80050ae:	2b02      	cmp	r3, #2
 80050b0:	d002      	beq.n	80050b8 <USBD_StdEPReq+0x6e>
 80050b2:	2b03      	cmp	r3, #3
 80050b4:	d016      	beq.n	80050e4 <USBD_StdEPReq+0x9a>
 80050b6:	e02c      	b.n	8005112 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80050b8:	7bbb      	ldrb	r3, [r7, #14]
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d00d      	beq.n	80050da <USBD_StdEPReq+0x90>
 80050be:	7bbb      	ldrb	r3, [r7, #14]
 80050c0:	2b80      	cmp	r3, #128	; 0x80
 80050c2:	d00a      	beq.n	80050da <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80050c4:	7bbb      	ldrb	r3, [r7, #14]
 80050c6:	4619      	mov	r1, r3
 80050c8:	6878      	ldr	r0, [r7, #4]
 80050ca:	f001 f92f 	bl	800632c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80050ce:	2180      	movs	r1, #128	; 0x80
 80050d0:	6878      	ldr	r0, [r7, #4]
 80050d2:	f001 f92b 	bl	800632c <USBD_LL_StallEP>
 80050d6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80050d8:	e020      	b.n	800511c <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 80050da:	6839      	ldr	r1, [r7, #0]
 80050dc:	6878      	ldr	r0, [r7, #4]
 80050de:	f000 fc45 	bl	800596c <USBD_CtlError>
              break;
 80050e2:	e01b      	b.n	800511c <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80050e4:	683b      	ldr	r3, [r7, #0]
 80050e6:	885b      	ldrh	r3, [r3, #2]
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d10e      	bne.n	800510a <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80050ec:	7bbb      	ldrb	r3, [r7, #14]
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d00b      	beq.n	800510a <USBD_StdEPReq+0xc0>
 80050f2:	7bbb      	ldrb	r3, [r7, #14]
 80050f4:	2b80      	cmp	r3, #128	; 0x80
 80050f6:	d008      	beq.n	800510a <USBD_StdEPReq+0xc0>
 80050f8:	683b      	ldr	r3, [r7, #0]
 80050fa:	88db      	ldrh	r3, [r3, #6]
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d104      	bne.n	800510a <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8005100:	7bbb      	ldrb	r3, [r7, #14]
 8005102:	4619      	mov	r1, r3
 8005104:	6878      	ldr	r0, [r7, #4]
 8005106:	f001 f911 	bl	800632c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800510a:	6878      	ldr	r0, [r7, #4]
 800510c:	f000 fcf9 	bl	8005b02 <USBD_CtlSendStatus>

              break;
 8005110:	e004      	b.n	800511c <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8005112:	6839      	ldr	r1, [r7, #0]
 8005114:	6878      	ldr	r0, [r7, #4]
 8005116:	f000 fc29 	bl	800596c <USBD_CtlError>
              break;
 800511a:	bf00      	nop
          }
          break;
 800511c:	e0ec      	b.n	80052f8 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005124:	b2db      	uxtb	r3, r3
 8005126:	2b02      	cmp	r3, #2
 8005128:	d002      	beq.n	8005130 <USBD_StdEPReq+0xe6>
 800512a:	2b03      	cmp	r3, #3
 800512c:	d016      	beq.n	800515c <USBD_StdEPReq+0x112>
 800512e:	e030      	b.n	8005192 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005130:	7bbb      	ldrb	r3, [r7, #14]
 8005132:	2b00      	cmp	r3, #0
 8005134:	d00d      	beq.n	8005152 <USBD_StdEPReq+0x108>
 8005136:	7bbb      	ldrb	r3, [r7, #14]
 8005138:	2b80      	cmp	r3, #128	; 0x80
 800513a:	d00a      	beq.n	8005152 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800513c:	7bbb      	ldrb	r3, [r7, #14]
 800513e:	4619      	mov	r1, r3
 8005140:	6878      	ldr	r0, [r7, #4]
 8005142:	f001 f8f3 	bl	800632c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8005146:	2180      	movs	r1, #128	; 0x80
 8005148:	6878      	ldr	r0, [r7, #4]
 800514a:	f001 f8ef 	bl	800632c <USBD_LL_StallEP>
 800514e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005150:	e025      	b.n	800519e <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8005152:	6839      	ldr	r1, [r7, #0]
 8005154:	6878      	ldr	r0, [r7, #4]
 8005156:	f000 fc09 	bl	800596c <USBD_CtlError>
              break;
 800515a:	e020      	b.n	800519e <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800515c:	683b      	ldr	r3, [r7, #0]
 800515e:	885b      	ldrh	r3, [r3, #2]
 8005160:	2b00      	cmp	r3, #0
 8005162:	d11b      	bne.n	800519c <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8005164:	7bbb      	ldrb	r3, [r7, #14]
 8005166:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800516a:	2b00      	cmp	r3, #0
 800516c:	d004      	beq.n	8005178 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800516e:	7bbb      	ldrb	r3, [r7, #14]
 8005170:	4619      	mov	r1, r3
 8005172:	6878      	ldr	r0, [r7, #4]
 8005174:	f001 f8f9 	bl	800636a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8005178:	6878      	ldr	r0, [r7, #4]
 800517a:	f000 fcc2 	bl	8005b02 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005184:	689b      	ldr	r3, [r3, #8]
 8005186:	6839      	ldr	r1, [r7, #0]
 8005188:	6878      	ldr	r0, [r7, #4]
 800518a:	4798      	blx	r3
 800518c:	4603      	mov	r3, r0
 800518e:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8005190:	e004      	b.n	800519c <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8005192:	6839      	ldr	r1, [r7, #0]
 8005194:	6878      	ldr	r0, [r7, #4]
 8005196:	f000 fbe9 	bl	800596c <USBD_CtlError>
              break;
 800519a:	e000      	b.n	800519e <USBD_StdEPReq+0x154>
              break;
 800519c:	bf00      	nop
          }
          break;
 800519e:	e0ab      	b.n	80052f8 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80051a6:	b2db      	uxtb	r3, r3
 80051a8:	2b02      	cmp	r3, #2
 80051aa:	d002      	beq.n	80051b2 <USBD_StdEPReq+0x168>
 80051ac:	2b03      	cmp	r3, #3
 80051ae:	d032      	beq.n	8005216 <USBD_StdEPReq+0x1cc>
 80051b0:	e097      	b.n	80052e2 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80051b2:	7bbb      	ldrb	r3, [r7, #14]
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d007      	beq.n	80051c8 <USBD_StdEPReq+0x17e>
 80051b8:	7bbb      	ldrb	r3, [r7, #14]
 80051ba:	2b80      	cmp	r3, #128	; 0x80
 80051bc:	d004      	beq.n	80051c8 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 80051be:	6839      	ldr	r1, [r7, #0]
 80051c0:	6878      	ldr	r0, [r7, #4]
 80051c2:	f000 fbd3 	bl	800596c <USBD_CtlError>
                break;
 80051c6:	e091      	b.n	80052ec <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80051c8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	da0b      	bge.n	80051e8 <USBD_StdEPReq+0x19e>
 80051d0:	7bbb      	ldrb	r3, [r7, #14]
 80051d2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80051d6:	4613      	mov	r3, r2
 80051d8:	009b      	lsls	r3, r3, #2
 80051da:	4413      	add	r3, r2
 80051dc:	009b      	lsls	r3, r3, #2
 80051de:	3310      	adds	r3, #16
 80051e0:	687a      	ldr	r2, [r7, #4]
 80051e2:	4413      	add	r3, r2
 80051e4:	3304      	adds	r3, #4
 80051e6:	e00b      	b.n	8005200 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80051e8:	7bbb      	ldrb	r3, [r7, #14]
 80051ea:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80051ee:	4613      	mov	r3, r2
 80051f0:	009b      	lsls	r3, r3, #2
 80051f2:	4413      	add	r3, r2
 80051f4:	009b      	lsls	r3, r3, #2
 80051f6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80051fa:	687a      	ldr	r2, [r7, #4]
 80051fc:	4413      	add	r3, r2
 80051fe:	3304      	adds	r3, #4
 8005200:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8005202:	68bb      	ldr	r3, [r7, #8]
 8005204:	2200      	movs	r2, #0
 8005206:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8005208:	68bb      	ldr	r3, [r7, #8]
 800520a:	2202      	movs	r2, #2
 800520c:	4619      	mov	r1, r3
 800520e:	6878      	ldr	r0, [r7, #4]
 8005210:	f000 fc1d 	bl	8005a4e <USBD_CtlSendData>
              break;
 8005214:	e06a      	b.n	80052ec <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8005216:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800521a:	2b00      	cmp	r3, #0
 800521c:	da11      	bge.n	8005242 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800521e:	7bbb      	ldrb	r3, [r7, #14]
 8005220:	f003 020f 	and.w	r2, r3, #15
 8005224:	6879      	ldr	r1, [r7, #4]
 8005226:	4613      	mov	r3, r2
 8005228:	009b      	lsls	r3, r3, #2
 800522a:	4413      	add	r3, r2
 800522c:	009b      	lsls	r3, r3, #2
 800522e:	440b      	add	r3, r1
 8005230:	3324      	adds	r3, #36	; 0x24
 8005232:	881b      	ldrh	r3, [r3, #0]
 8005234:	2b00      	cmp	r3, #0
 8005236:	d117      	bne.n	8005268 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8005238:	6839      	ldr	r1, [r7, #0]
 800523a:	6878      	ldr	r0, [r7, #4]
 800523c:	f000 fb96 	bl	800596c <USBD_CtlError>
                  break;
 8005240:	e054      	b.n	80052ec <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8005242:	7bbb      	ldrb	r3, [r7, #14]
 8005244:	f003 020f 	and.w	r2, r3, #15
 8005248:	6879      	ldr	r1, [r7, #4]
 800524a:	4613      	mov	r3, r2
 800524c:	009b      	lsls	r3, r3, #2
 800524e:	4413      	add	r3, r2
 8005250:	009b      	lsls	r3, r3, #2
 8005252:	440b      	add	r3, r1
 8005254:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005258:	881b      	ldrh	r3, [r3, #0]
 800525a:	2b00      	cmp	r3, #0
 800525c:	d104      	bne.n	8005268 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800525e:	6839      	ldr	r1, [r7, #0]
 8005260:	6878      	ldr	r0, [r7, #4]
 8005262:	f000 fb83 	bl	800596c <USBD_CtlError>
                  break;
 8005266:	e041      	b.n	80052ec <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005268:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800526c:	2b00      	cmp	r3, #0
 800526e:	da0b      	bge.n	8005288 <USBD_StdEPReq+0x23e>
 8005270:	7bbb      	ldrb	r3, [r7, #14]
 8005272:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005276:	4613      	mov	r3, r2
 8005278:	009b      	lsls	r3, r3, #2
 800527a:	4413      	add	r3, r2
 800527c:	009b      	lsls	r3, r3, #2
 800527e:	3310      	adds	r3, #16
 8005280:	687a      	ldr	r2, [r7, #4]
 8005282:	4413      	add	r3, r2
 8005284:	3304      	adds	r3, #4
 8005286:	e00b      	b.n	80052a0 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005288:	7bbb      	ldrb	r3, [r7, #14]
 800528a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800528e:	4613      	mov	r3, r2
 8005290:	009b      	lsls	r3, r3, #2
 8005292:	4413      	add	r3, r2
 8005294:	009b      	lsls	r3, r3, #2
 8005296:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800529a:	687a      	ldr	r2, [r7, #4]
 800529c:	4413      	add	r3, r2
 800529e:	3304      	adds	r3, #4
 80052a0:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80052a2:	7bbb      	ldrb	r3, [r7, #14]
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d002      	beq.n	80052ae <USBD_StdEPReq+0x264>
 80052a8:	7bbb      	ldrb	r3, [r7, #14]
 80052aa:	2b80      	cmp	r3, #128	; 0x80
 80052ac:	d103      	bne.n	80052b6 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 80052ae:	68bb      	ldr	r3, [r7, #8]
 80052b0:	2200      	movs	r2, #0
 80052b2:	601a      	str	r2, [r3, #0]
 80052b4:	e00e      	b.n	80052d4 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80052b6:	7bbb      	ldrb	r3, [r7, #14]
 80052b8:	4619      	mov	r1, r3
 80052ba:	6878      	ldr	r0, [r7, #4]
 80052bc:	f001 f874 	bl	80063a8 <USBD_LL_IsStallEP>
 80052c0:	4603      	mov	r3, r0
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d003      	beq.n	80052ce <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 80052c6:	68bb      	ldr	r3, [r7, #8]
 80052c8:	2201      	movs	r2, #1
 80052ca:	601a      	str	r2, [r3, #0]
 80052cc:	e002      	b.n	80052d4 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 80052ce:	68bb      	ldr	r3, [r7, #8]
 80052d0:	2200      	movs	r2, #0
 80052d2:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80052d4:	68bb      	ldr	r3, [r7, #8]
 80052d6:	2202      	movs	r2, #2
 80052d8:	4619      	mov	r1, r3
 80052da:	6878      	ldr	r0, [r7, #4]
 80052dc:	f000 fbb7 	bl	8005a4e <USBD_CtlSendData>
              break;
 80052e0:	e004      	b.n	80052ec <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 80052e2:	6839      	ldr	r1, [r7, #0]
 80052e4:	6878      	ldr	r0, [r7, #4]
 80052e6:	f000 fb41 	bl	800596c <USBD_CtlError>
              break;
 80052ea:	bf00      	nop
          }
          break;
 80052ec:	e004      	b.n	80052f8 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 80052ee:	6839      	ldr	r1, [r7, #0]
 80052f0:	6878      	ldr	r0, [r7, #4]
 80052f2:	f000 fb3b 	bl	800596c <USBD_CtlError>
          break;
 80052f6:	bf00      	nop
      }
      break;
 80052f8:	e004      	b.n	8005304 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 80052fa:	6839      	ldr	r1, [r7, #0]
 80052fc:	6878      	ldr	r0, [r7, #4]
 80052fe:	f000 fb35 	bl	800596c <USBD_CtlError>
      break;
 8005302:	bf00      	nop
  }

  return ret;
 8005304:	7bfb      	ldrb	r3, [r7, #15]
}
 8005306:	4618      	mov	r0, r3
 8005308:	3710      	adds	r7, #16
 800530a:	46bd      	mov	sp, r7
 800530c:	bd80      	pop	{r7, pc}
	...

08005310 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005310:	b580      	push	{r7, lr}
 8005312:	b084      	sub	sp, #16
 8005314:	af00      	add	r7, sp, #0
 8005316:	6078      	str	r0, [r7, #4]
 8005318:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800531a:	2300      	movs	r3, #0
 800531c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800531e:	2300      	movs	r3, #0
 8005320:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8005322:	2300      	movs	r3, #0
 8005324:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8005326:	683b      	ldr	r3, [r7, #0]
 8005328:	885b      	ldrh	r3, [r3, #2]
 800532a:	0a1b      	lsrs	r3, r3, #8
 800532c:	b29b      	uxth	r3, r3
 800532e:	3b01      	subs	r3, #1
 8005330:	2b06      	cmp	r3, #6
 8005332:	f200 8128 	bhi.w	8005586 <USBD_GetDescriptor+0x276>
 8005336:	a201      	add	r2, pc, #4	; (adr r2, 800533c <USBD_GetDescriptor+0x2c>)
 8005338:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800533c:	08005359 	.word	0x08005359
 8005340:	08005371 	.word	0x08005371
 8005344:	080053b1 	.word	0x080053b1
 8005348:	08005587 	.word	0x08005587
 800534c:	08005587 	.word	0x08005587
 8005350:	08005527 	.word	0x08005527
 8005354:	08005553 	.word	0x08005553
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	687a      	ldr	r2, [r7, #4]
 8005362:	7c12      	ldrb	r2, [r2, #16]
 8005364:	f107 0108 	add.w	r1, r7, #8
 8005368:	4610      	mov	r0, r2
 800536a:	4798      	blx	r3
 800536c:	60f8      	str	r0, [r7, #12]
      break;
 800536e:	e112      	b.n	8005596 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	7c1b      	ldrb	r3, [r3, #16]
 8005374:	2b00      	cmp	r3, #0
 8005376:	d10d      	bne.n	8005394 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800537e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005380:	f107 0208 	add.w	r2, r7, #8
 8005384:	4610      	mov	r0, r2
 8005386:	4798      	blx	r3
 8005388:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	3301      	adds	r3, #1
 800538e:	2202      	movs	r2, #2
 8005390:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8005392:	e100      	b.n	8005596 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800539a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800539c:	f107 0208 	add.w	r2, r7, #8
 80053a0:	4610      	mov	r0, r2
 80053a2:	4798      	blx	r3
 80053a4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	3301      	adds	r3, #1
 80053aa:	2202      	movs	r2, #2
 80053ac:	701a      	strb	r2, [r3, #0]
      break;
 80053ae:	e0f2      	b.n	8005596 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80053b0:	683b      	ldr	r3, [r7, #0]
 80053b2:	885b      	ldrh	r3, [r3, #2]
 80053b4:	b2db      	uxtb	r3, r3
 80053b6:	2b05      	cmp	r3, #5
 80053b8:	f200 80ac 	bhi.w	8005514 <USBD_GetDescriptor+0x204>
 80053bc:	a201      	add	r2, pc, #4	; (adr r2, 80053c4 <USBD_GetDescriptor+0xb4>)
 80053be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053c2:	bf00      	nop
 80053c4:	080053dd 	.word	0x080053dd
 80053c8:	08005411 	.word	0x08005411
 80053cc:	08005445 	.word	0x08005445
 80053d0:	08005479 	.word	0x08005479
 80053d4:	080054ad 	.word	0x080054ad
 80053d8:	080054e1 	.word	0x080054e1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80053e2:	685b      	ldr	r3, [r3, #4]
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d00b      	beq.n	8005400 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80053ee:	685b      	ldr	r3, [r3, #4]
 80053f0:	687a      	ldr	r2, [r7, #4]
 80053f2:	7c12      	ldrb	r2, [r2, #16]
 80053f4:	f107 0108 	add.w	r1, r7, #8
 80053f8:	4610      	mov	r0, r2
 80053fa:	4798      	blx	r3
 80053fc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80053fe:	e091      	b.n	8005524 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005400:	6839      	ldr	r1, [r7, #0]
 8005402:	6878      	ldr	r0, [r7, #4]
 8005404:	f000 fab2 	bl	800596c <USBD_CtlError>
            err++;
 8005408:	7afb      	ldrb	r3, [r7, #11]
 800540a:	3301      	adds	r3, #1
 800540c:	72fb      	strb	r3, [r7, #11]
          break;
 800540e:	e089      	b.n	8005524 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005416:	689b      	ldr	r3, [r3, #8]
 8005418:	2b00      	cmp	r3, #0
 800541a:	d00b      	beq.n	8005434 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005422:	689b      	ldr	r3, [r3, #8]
 8005424:	687a      	ldr	r2, [r7, #4]
 8005426:	7c12      	ldrb	r2, [r2, #16]
 8005428:	f107 0108 	add.w	r1, r7, #8
 800542c:	4610      	mov	r0, r2
 800542e:	4798      	blx	r3
 8005430:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005432:	e077      	b.n	8005524 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005434:	6839      	ldr	r1, [r7, #0]
 8005436:	6878      	ldr	r0, [r7, #4]
 8005438:	f000 fa98 	bl	800596c <USBD_CtlError>
            err++;
 800543c:	7afb      	ldrb	r3, [r7, #11]
 800543e:	3301      	adds	r3, #1
 8005440:	72fb      	strb	r3, [r7, #11]
          break;
 8005442:	e06f      	b.n	8005524 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800544a:	68db      	ldr	r3, [r3, #12]
 800544c:	2b00      	cmp	r3, #0
 800544e:	d00b      	beq.n	8005468 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005456:	68db      	ldr	r3, [r3, #12]
 8005458:	687a      	ldr	r2, [r7, #4]
 800545a:	7c12      	ldrb	r2, [r2, #16]
 800545c:	f107 0108 	add.w	r1, r7, #8
 8005460:	4610      	mov	r0, r2
 8005462:	4798      	blx	r3
 8005464:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005466:	e05d      	b.n	8005524 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005468:	6839      	ldr	r1, [r7, #0]
 800546a:	6878      	ldr	r0, [r7, #4]
 800546c:	f000 fa7e 	bl	800596c <USBD_CtlError>
            err++;
 8005470:	7afb      	ldrb	r3, [r7, #11]
 8005472:	3301      	adds	r3, #1
 8005474:	72fb      	strb	r3, [r7, #11]
          break;
 8005476:	e055      	b.n	8005524 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800547e:	691b      	ldr	r3, [r3, #16]
 8005480:	2b00      	cmp	r3, #0
 8005482:	d00b      	beq.n	800549c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800548a:	691b      	ldr	r3, [r3, #16]
 800548c:	687a      	ldr	r2, [r7, #4]
 800548e:	7c12      	ldrb	r2, [r2, #16]
 8005490:	f107 0108 	add.w	r1, r7, #8
 8005494:	4610      	mov	r0, r2
 8005496:	4798      	blx	r3
 8005498:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800549a:	e043      	b.n	8005524 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800549c:	6839      	ldr	r1, [r7, #0]
 800549e:	6878      	ldr	r0, [r7, #4]
 80054a0:	f000 fa64 	bl	800596c <USBD_CtlError>
            err++;
 80054a4:	7afb      	ldrb	r3, [r7, #11]
 80054a6:	3301      	adds	r3, #1
 80054a8:	72fb      	strb	r3, [r7, #11]
          break;
 80054aa:	e03b      	b.n	8005524 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80054b2:	695b      	ldr	r3, [r3, #20]
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d00b      	beq.n	80054d0 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80054be:	695b      	ldr	r3, [r3, #20]
 80054c0:	687a      	ldr	r2, [r7, #4]
 80054c2:	7c12      	ldrb	r2, [r2, #16]
 80054c4:	f107 0108 	add.w	r1, r7, #8
 80054c8:	4610      	mov	r0, r2
 80054ca:	4798      	blx	r3
 80054cc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80054ce:	e029      	b.n	8005524 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80054d0:	6839      	ldr	r1, [r7, #0]
 80054d2:	6878      	ldr	r0, [r7, #4]
 80054d4:	f000 fa4a 	bl	800596c <USBD_CtlError>
            err++;
 80054d8:	7afb      	ldrb	r3, [r7, #11]
 80054da:	3301      	adds	r3, #1
 80054dc:	72fb      	strb	r3, [r7, #11]
          break;
 80054de:	e021      	b.n	8005524 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80054e6:	699b      	ldr	r3, [r3, #24]
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d00b      	beq.n	8005504 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80054f2:	699b      	ldr	r3, [r3, #24]
 80054f4:	687a      	ldr	r2, [r7, #4]
 80054f6:	7c12      	ldrb	r2, [r2, #16]
 80054f8:	f107 0108 	add.w	r1, r7, #8
 80054fc:	4610      	mov	r0, r2
 80054fe:	4798      	blx	r3
 8005500:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005502:	e00f      	b.n	8005524 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005504:	6839      	ldr	r1, [r7, #0]
 8005506:	6878      	ldr	r0, [r7, #4]
 8005508:	f000 fa30 	bl	800596c <USBD_CtlError>
            err++;
 800550c:	7afb      	ldrb	r3, [r7, #11]
 800550e:	3301      	adds	r3, #1
 8005510:	72fb      	strb	r3, [r7, #11]
          break;
 8005512:	e007      	b.n	8005524 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8005514:	6839      	ldr	r1, [r7, #0]
 8005516:	6878      	ldr	r0, [r7, #4]
 8005518:	f000 fa28 	bl	800596c <USBD_CtlError>
          err++;
 800551c:	7afb      	ldrb	r3, [r7, #11]
 800551e:	3301      	adds	r3, #1
 8005520:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8005522:	bf00      	nop
      }
      break;
 8005524:	e037      	b.n	8005596 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	7c1b      	ldrb	r3, [r3, #16]
 800552a:	2b00      	cmp	r3, #0
 800552c:	d109      	bne.n	8005542 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005534:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005536:	f107 0208 	add.w	r2, r7, #8
 800553a:	4610      	mov	r0, r2
 800553c:	4798      	blx	r3
 800553e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005540:	e029      	b.n	8005596 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8005542:	6839      	ldr	r1, [r7, #0]
 8005544:	6878      	ldr	r0, [r7, #4]
 8005546:	f000 fa11 	bl	800596c <USBD_CtlError>
        err++;
 800554a:	7afb      	ldrb	r3, [r7, #11]
 800554c:	3301      	adds	r3, #1
 800554e:	72fb      	strb	r3, [r7, #11]
      break;
 8005550:	e021      	b.n	8005596 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	7c1b      	ldrb	r3, [r3, #16]
 8005556:	2b00      	cmp	r3, #0
 8005558:	d10d      	bne.n	8005576 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005562:	f107 0208 	add.w	r2, r7, #8
 8005566:	4610      	mov	r0, r2
 8005568:	4798      	blx	r3
 800556a:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	3301      	adds	r3, #1
 8005570:	2207      	movs	r2, #7
 8005572:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005574:	e00f      	b.n	8005596 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8005576:	6839      	ldr	r1, [r7, #0]
 8005578:	6878      	ldr	r0, [r7, #4]
 800557a:	f000 f9f7 	bl	800596c <USBD_CtlError>
        err++;
 800557e:	7afb      	ldrb	r3, [r7, #11]
 8005580:	3301      	adds	r3, #1
 8005582:	72fb      	strb	r3, [r7, #11]
      break;
 8005584:	e007      	b.n	8005596 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8005586:	6839      	ldr	r1, [r7, #0]
 8005588:	6878      	ldr	r0, [r7, #4]
 800558a:	f000 f9ef 	bl	800596c <USBD_CtlError>
      err++;
 800558e:	7afb      	ldrb	r3, [r7, #11]
 8005590:	3301      	adds	r3, #1
 8005592:	72fb      	strb	r3, [r7, #11]
      break;
 8005594:	bf00      	nop
  }

  if (err != 0U)
 8005596:	7afb      	ldrb	r3, [r7, #11]
 8005598:	2b00      	cmp	r3, #0
 800559a:	d11e      	bne.n	80055da <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800559c:	683b      	ldr	r3, [r7, #0]
 800559e:	88db      	ldrh	r3, [r3, #6]
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d016      	beq.n	80055d2 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 80055a4:	893b      	ldrh	r3, [r7, #8]
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d00e      	beq.n	80055c8 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 80055aa:	683b      	ldr	r3, [r7, #0]
 80055ac:	88da      	ldrh	r2, [r3, #6]
 80055ae:	893b      	ldrh	r3, [r7, #8]
 80055b0:	4293      	cmp	r3, r2
 80055b2:	bf28      	it	cs
 80055b4:	4613      	movcs	r3, r2
 80055b6:	b29b      	uxth	r3, r3
 80055b8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80055ba:	893b      	ldrh	r3, [r7, #8]
 80055bc:	461a      	mov	r2, r3
 80055be:	68f9      	ldr	r1, [r7, #12]
 80055c0:	6878      	ldr	r0, [r7, #4]
 80055c2:	f000 fa44 	bl	8005a4e <USBD_CtlSendData>
 80055c6:	e009      	b.n	80055dc <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80055c8:	6839      	ldr	r1, [r7, #0]
 80055ca:	6878      	ldr	r0, [r7, #4]
 80055cc:	f000 f9ce 	bl	800596c <USBD_CtlError>
 80055d0:	e004      	b.n	80055dc <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80055d2:	6878      	ldr	r0, [r7, #4]
 80055d4:	f000 fa95 	bl	8005b02 <USBD_CtlSendStatus>
 80055d8:	e000      	b.n	80055dc <USBD_GetDescriptor+0x2cc>
    return;
 80055da:	bf00      	nop
  }
}
 80055dc:	3710      	adds	r7, #16
 80055de:	46bd      	mov	sp, r7
 80055e0:	bd80      	pop	{r7, pc}
 80055e2:	bf00      	nop

080055e4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80055e4:	b580      	push	{r7, lr}
 80055e6:	b084      	sub	sp, #16
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	6078      	str	r0, [r7, #4]
 80055ec:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80055ee:	683b      	ldr	r3, [r7, #0]
 80055f0:	889b      	ldrh	r3, [r3, #4]
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d131      	bne.n	800565a <USBD_SetAddress+0x76>
 80055f6:	683b      	ldr	r3, [r7, #0]
 80055f8:	88db      	ldrh	r3, [r3, #6]
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d12d      	bne.n	800565a <USBD_SetAddress+0x76>
 80055fe:	683b      	ldr	r3, [r7, #0]
 8005600:	885b      	ldrh	r3, [r3, #2]
 8005602:	2b7f      	cmp	r3, #127	; 0x7f
 8005604:	d829      	bhi.n	800565a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8005606:	683b      	ldr	r3, [r7, #0]
 8005608:	885b      	ldrh	r3, [r3, #2]
 800560a:	b2db      	uxtb	r3, r3
 800560c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005610:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005618:	b2db      	uxtb	r3, r3
 800561a:	2b03      	cmp	r3, #3
 800561c:	d104      	bne.n	8005628 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800561e:	6839      	ldr	r1, [r7, #0]
 8005620:	6878      	ldr	r0, [r7, #4]
 8005622:	f000 f9a3 	bl	800596c <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005626:	e01d      	b.n	8005664 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	7bfa      	ldrb	r2, [r7, #15]
 800562c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8005630:	7bfb      	ldrb	r3, [r7, #15]
 8005632:	4619      	mov	r1, r3
 8005634:	6878      	ldr	r0, [r7, #4]
 8005636:	f000 fee3 	bl	8006400 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800563a:	6878      	ldr	r0, [r7, #4]
 800563c:	f000 fa61 	bl	8005b02 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8005640:	7bfb      	ldrb	r3, [r7, #15]
 8005642:	2b00      	cmp	r3, #0
 8005644:	d004      	beq.n	8005650 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	2202      	movs	r2, #2
 800564a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800564e:	e009      	b.n	8005664 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	2201      	movs	r2, #1
 8005654:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005658:	e004      	b.n	8005664 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800565a:	6839      	ldr	r1, [r7, #0]
 800565c:	6878      	ldr	r0, [r7, #4]
 800565e:	f000 f985 	bl	800596c <USBD_CtlError>
  }
}
 8005662:	bf00      	nop
 8005664:	bf00      	nop
 8005666:	3710      	adds	r7, #16
 8005668:	46bd      	mov	sp, r7
 800566a:	bd80      	pop	{r7, pc}

0800566c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800566c:	b580      	push	{r7, lr}
 800566e:	b084      	sub	sp, #16
 8005670:	af00      	add	r7, sp, #0
 8005672:	6078      	str	r0, [r7, #4]
 8005674:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005676:	2300      	movs	r3, #0
 8005678:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800567a:	683b      	ldr	r3, [r7, #0]
 800567c:	885b      	ldrh	r3, [r3, #2]
 800567e:	b2da      	uxtb	r2, r3
 8005680:	4b4c      	ldr	r3, [pc, #304]	; (80057b4 <USBD_SetConfig+0x148>)
 8005682:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8005684:	4b4b      	ldr	r3, [pc, #300]	; (80057b4 <USBD_SetConfig+0x148>)
 8005686:	781b      	ldrb	r3, [r3, #0]
 8005688:	2b01      	cmp	r3, #1
 800568a:	d905      	bls.n	8005698 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800568c:	6839      	ldr	r1, [r7, #0]
 800568e:	6878      	ldr	r0, [r7, #4]
 8005690:	f000 f96c 	bl	800596c <USBD_CtlError>
    return USBD_FAIL;
 8005694:	2303      	movs	r3, #3
 8005696:	e088      	b.n	80057aa <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800569e:	b2db      	uxtb	r3, r3
 80056a0:	2b02      	cmp	r3, #2
 80056a2:	d002      	beq.n	80056aa <USBD_SetConfig+0x3e>
 80056a4:	2b03      	cmp	r3, #3
 80056a6:	d025      	beq.n	80056f4 <USBD_SetConfig+0x88>
 80056a8:	e071      	b.n	800578e <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80056aa:	4b42      	ldr	r3, [pc, #264]	; (80057b4 <USBD_SetConfig+0x148>)
 80056ac:	781b      	ldrb	r3, [r3, #0]
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d01c      	beq.n	80056ec <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 80056b2:	4b40      	ldr	r3, [pc, #256]	; (80057b4 <USBD_SetConfig+0x148>)
 80056b4:	781b      	ldrb	r3, [r3, #0]
 80056b6:	461a      	mov	r2, r3
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80056bc:	4b3d      	ldr	r3, [pc, #244]	; (80057b4 <USBD_SetConfig+0x148>)
 80056be:	781b      	ldrb	r3, [r3, #0]
 80056c0:	4619      	mov	r1, r3
 80056c2:	6878      	ldr	r0, [r7, #4]
 80056c4:	f7ff f948 	bl	8004958 <USBD_SetClassConfig>
 80056c8:	4603      	mov	r3, r0
 80056ca:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80056cc:	7bfb      	ldrb	r3, [r7, #15]
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d004      	beq.n	80056dc <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 80056d2:	6839      	ldr	r1, [r7, #0]
 80056d4:	6878      	ldr	r0, [r7, #4]
 80056d6:	f000 f949 	bl	800596c <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80056da:	e065      	b.n	80057a8 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 80056dc:	6878      	ldr	r0, [r7, #4]
 80056de:	f000 fa10 	bl	8005b02 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	2203      	movs	r2, #3
 80056e6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80056ea:	e05d      	b.n	80057a8 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80056ec:	6878      	ldr	r0, [r7, #4]
 80056ee:	f000 fa08 	bl	8005b02 <USBD_CtlSendStatus>
      break;
 80056f2:	e059      	b.n	80057a8 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80056f4:	4b2f      	ldr	r3, [pc, #188]	; (80057b4 <USBD_SetConfig+0x148>)
 80056f6:	781b      	ldrb	r3, [r3, #0]
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d112      	bne.n	8005722 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	2202      	movs	r2, #2
 8005700:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8005704:	4b2b      	ldr	r3, [pc, #172]	; (80057b4 <USBD_SetConfig+0x148>)
 8005706:	781b      	ldrb	r3, [r3, #0]
 8005708:	461a      	mov	r2, r3
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800570e:	4b29      	ldr	r3, [pc, #164]	; (80057b4 <USBD_SetConfig+0x148>)
 8005710:	781b      	ldrb	r3, [r3, #0]
 8005712:	4619      	mov	r1, r3
 8005714:	6878      	ldr	r0, [r7, #4]
 8005716:	f7ff f93b 	bl	8004990 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800571a:	6878      	ldr	r0, [r7, #4]
 800571c:	f000 f9f1 	bl	8005b02 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8005720:	e042      	b.n	80057a8 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8005722:	4b24      	ldr	r3, [pc, #144]	; (80057b4 <USBD_SetConfig+0x148>)
 8005724:	781b      	ldrb	r3, [r3, #0]
 8005726:	461a      	mov	r2, r3
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	685b      	ldr	r3, [r3, #4]
 800572c:	429a      	cmp	r2, r3
 800572e:	d02a      	beq.n	8005786 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	685b      	ldr	r3, [r3, #4]
 8005734:	b2db      	uxtb	r3, r3
 8005736:	4619      	mov	r1, r3
 8005738:	6878      	ldr	r0, [r7, #4]
 800573a:	f7ff f929 	bl	8004990 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800573e:	4b1d      	ldr	r3, [pc, #116]	; (80057b4 <USBD_SetConfig+0x148>)
 8005740:	781b      	ldrb	r3, [r3, #0]
 8005742:	461a      	mov	r2, r3
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8005748:	4b1a      	ldr	r3, [pc, #104]	; (80057b4 <USBD_SetConfig+0x148>)
 800574a:	781b      	ldrb	r3, [r3, #0]
 800574c:	4619      	mov	r1, r3
 800574e:	6878      	ldr	r0, [r7, #4]
 8005750:	f7ff f902 	bl	8004958 <USBD_SetClassConfig>
 8005754:	4603      	mov	r3, r0
 8005756:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8005758:	7bfb      	ldrb	r3, [r7, #15]
 800575a:	2b00      	cmp	r3, #0
 800575c:	d00f      	beq.n	800577e <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800575e:	6839      	ldr	r1, [r7, #0]
 8005760:	6878      	ldr	r0, [r7, #4]
 8005762:	f000 f903 	bl	800596c <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	685b      	ldr	r3, [r3, #4]
 800576a:	b2db      	uxtb	r3, r3
 800576c:	4619      	mov	r1, r3
 800576e:	6878      	ldr	r0, [r7, #4]
 8005770:	f7ff f90e 	bl	8004990 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	2202      	movs	r2, #2
 8005778:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800577c:	e014      	b.n	80057a8 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800577e:	6878      	ldr	r0, [r7, #4]
 8005780:	f000 f9bf 	bl	8005b02 <USBD_CtlSendStatus>
      break;
 8005784:	e010      	b.n	80057a8 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8005786:	6878      	ldr	r0, [r7, #4]
 8005788:	f000 f9bb 	bl	8005b02 <USBD_CtlSendStatus>
      break;
 800578c:	e00c      	b.n	80057a8 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800578e:	6839      	ldr	r1, [r7, #0]
 8005790:	6878      	ldr	r0, [r7, #4]
 8005792:	f000 f8eb 	bl	800596c <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8005796:	4b07      	ldr	r3, [pc, #28]	; (80057b4 <USBD_SetConfig+0x148>)
 8005798:	781b      	ldrb	r3, [r3, #0]
 800579a:	4619      	mov	r1, r3
 800579c:	6878      	ldr	r0, [r7, #4]
 800579e:	f7ff f8f7 	bl	8004990 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80057a2:	2303      	movs	r3, #3
 80057a4:	73fb      	strb	r3, [r7, #15]
      break;
 80057a6:	bf00      	nop
  }

  return ret;
 80057a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80057aa:	4618      	mov	r0, r3
 80057ac:	3710      	adds	r7, #16
 80057ae:	46bd      	mov	sp, r7
 80057b0:	bd80      	pop	{r7, pc}
 80057b2:	bf00      	nop
 80057b4:	200001c0 	.word	0x200001c0

080057b8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80057b8:	b580      	push	{r7, lr}
 80057ba:	b082      	sub	sp, #8
 80057bc:	af00      	add	r7, sp, #0
 80057be:	6078      	str	r0, [r7, #4]
 80057c0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80057c2:	683b      	ldr	r3, [r7, #0]
 80057c4:	88db      	ldrh	r3, [r3, #6]
 80057c6:	2b01      	cmp	r3, #1
 80057c8:	d004      	beq.n	80057d4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80057ca:	6839      	ldr	r1, [r7, #0]
 80057cc:	6878      	ldr	r0, [r7, #4]
 80057ce:	f000 f8cd 	bl	800596c <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80057d2:	e023      	b.n	800581c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80057da:	b2db      	uxtb	r3, r3
 80057dc:	2b02      	cmp	r3, #2
 80057de:	dc02      	bgt.n	80057e6 <USBD_GetConfig+0x2e>
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	dc03      	bgt.n	80057ec <USBD_GetConfig+0x34>
 80057e4:	e015      	b.n	8005812 <USBD_GetConfig+0x5a>
 80057e6:	2b03      	cmp	r3, #3
 80057e8:	d00b      	beq.n	8005802 <USBD_GetConfig+0x4a>
 80057ea:	e012      	b.n	8005812 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	2200      	movs	r2, #0
 80057f0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	3308      	adds	r3, #8
 80057f6:	2201      	movs	r2, #1
 80057f8:	4619      	mov	r1, r3
 80057fa:	6878      	ldr	r0, [r7, #4]
 80057fc:	f000 f927 	bl	8005a4e <USBD_CtlSendData>
        break;
 8005800:	e00c      	b.n	800581c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	3304      	adds	r3, #4
 8005806:	2201      	movs	r2, #1
 8005808:	4619      	mov	r1, r3
 800580a:	6878      	ldr	r0, [r7, #4]
 800580c:	f000 f91f 	bl	8005a4e <USBD_CtlSendData>
        break;
 8005810:	e004      	b.n	800581c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8005812:	6839      	ldr	r1, [r7, #0]
 8005814:	6878      	ldr	r0, [r7, #4]
 8005816:	f000 f8a9 	bl	800596c <USBD_CtlError>
        break;
 800581a:	bf00      	nop
}
 800581c:	bf00      	nop
 800581e:	3708      	adds	r7, #8
 8005820:	46bd      	mov	sp, r7
 8005822:	bd80      	pop	{r7, pc}

08005824 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005824:	b580      	push	{r7, lr}
 8005826:	b082      	sub	sp, #8
 8005828:	af00      	add	r7, sp, #0
 800582a:	6078      	str	r0, [r7, #4]
 800582c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005834:	b2db      	uxtb	r3, r3
 8005836:	3b01      	subs	r3, #1
 8005838:	2b02      	cmp	r3, #2
 800583a:	d81e      	bhi.n	800587a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800583c:	683b      	ldr	r3, [r7, #0]
 800583e:	88db      	ldrh	r3, [r3, #6]
 8005840:	2b02      	cmp	r3, #2
 8005842:	d004      	beq.n	800584e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8005844:	6839      	ldr	r1, [r7, #0]
 8005846:	6878      	ldr	r0, [r7, #4]
 8005848:	f000 f890 	bl	800596c <USBD_CtlError>
        break;
 800584c:	e01a      	b.n	8005884 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	2201      	movs	r2, #1
 8005852:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800585a:	2b00      	cmp	r3, #0
 800585c:	d005      	beq.n	800586a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	68db      	ldr	r3, [r3, #12]
 8005862:	f043 0202 	orr.w	r2, r3, #2
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	330c      	adds	r3, #12
 800586e:	2202      	movs	r2, #2
 8005870:	4619      	mov	r1, r3
 8005872:	6878      	ldr	r0, [r7, #4]
 8005874:	f000 f8eb 	bl	8005a4e <USBD_CtlSendData>
      break;
 8005878:	e004      	b.n	8005884 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800587a:	6839      	ldr	r1, [r7, #0]
 800587c:	6878      	ldr	r0, [r7, #4]
 800587e:	f000 f875 	bl	800596c <USBD_CtlError>
      break;
 8005882:	bf00      	nop
  }
}
 8005884:	bf00      	nop
 8005886:	3708      	adds	r7, #8
 8005888:	46bd      	mov	sp, r7
 800588a:	bd80      	pop	{r7, pc}

0800588c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800588c:	b580      	push	{r7, lr}
 800588e:	b082      	sub	sp, #8
 8005890:	af00      	add	r7, sp, #0
 8005892:	6078      	str	r0, [r7, #4]
 8005894:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005896:	683b      	ldr	r3, [r7, #0]
 8005898:	885b      	ldrh	r3, [r3, #2]
 800589a:	2b01      	cmp	r3, #1
 800589c:	d106      	bne.n	80058ac <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	2201      	movs	r2, #1
 80058a2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80058a6:	6878      	ldr	r0, [r7, #4]
 80058a8:	f000 f92b 	bl	8005b02 <USBD_CtlSendStatus>
  }
}
 80058ac:	bf00      	nop
 80058ae:	3708      	adds	r7, #8
 80058b0:	46bd      	mov	sp, r7
 80058b2:	bd80      	pop	{r7, pc}

080058b4 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80058b4:	b580      	push	{r7, lr}
 80058b6:	b082      	sub	sp, #8
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	6078      	str	r0, [r7, #4]
 80058bc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80058c4:	b2db      	uxtb	r3, r3
 80058c6:	3b01      	subs	r3, #1
 80058c8:	2b02      	cmp	r3, #2
 80058ca:	d80b      	bhi.n	80058e4 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80058cc:	683b      	ldr	r3, [r7, #0]
 80058ce:	885b      	ldrh	r3, [r3, #2]
 80058d0:	2b01      	cmp	r3, #1
 80058d2:	d10c      	bne.n	80058ee <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2200      	movs	r2, #0
 80058d8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80058dc:	6878      	ldr	r0, [r7, #4]
 80058de:	f000 f910 	bl	8005b02 <USBD_CtlSendStatus>
      }
      break;
 80058e2:	e004      	b.n	80058ee <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80058e4:	6839      	ldr	r1, [r7, #0]
 80058e6:	6878      	ldr	r0, [r7, #4]
 80058e8:	f000 f840 	bl	800596c <USBD_CtlError>
      break;
 80058ec:	e000      	b.n	80058f0 <USBD_ClrFeature+0x3c>
      break;
 80058ee:	bf00      	nop
  }
}
 80058f0:	bf00      	nop
 80058f2:	3708      	adds	r7, #8
 80058f4:	46bd      	mov	sp, r7
 80058f6:	bd80      	pop	{r7, pc}

080058f8 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80058f8:	b580      	push	{r7, lr}
 80058fa:	b084      	sub	sp, #16
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	6078      	str	r0, [r7, #4]
 8005900:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8005902:	683b      	ldr	r3, [r7, #0]
 8005904:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	781a      	ldrb	r2, [r3, #0]
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	3301      	adds	r3, #1
 8005912:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	781a      	ldrb	r2, [r3, #0]
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	3301      	adds	r3, #1
 8005920:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8005922:	68f8      	ldr	r0, [r7, #12]
 8005924:	f7ff fabb 	bl	8004e9e <SWAPBYTE>
 8005928:	4603      	mov	r3, r0
 800592a:	461a      	mov	r2, r3
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	3301      	adds	r3, #1
 8005934:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	3301      	adds	r3, #1
 800593a:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800593c:	68f8      	ldr	r0, [r7, #12]
 800593e:	f7ff faae 	bl	8004e9e <SWAPBYTE>
 8005942:	4603      	mov	r3, r0
 8005944:	461a      	mov	r2, r3
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	3301      	adds	r3, #1
 800594e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	3301      	adds	r3, #1
 8005954:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8005956:	68f8      	ldr	r0, [r7, #12]
 8005958:	f7ff faa1 	bl	8004e9e <SWAPBYTE>
 800595c:	4603      	mov	r3, r0
 800595e:	461a      	mov	r2, r3
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	80da      	strh	r2, [r3, #6]
}
 8005964:	bf00      	nop
 8005966:	3710      	adds	r7, #16
 8005968:	46bd      	mov	sp, r7
 800596a:	bd80      	pop	{r7, pc}

0800596c <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800596c:	b580      	push	{r7, lr}
 800596e:	b082      	sub	sp, #8
 8005970:	af00      	add	r7, sp, #0
 8005972:	6078      	str	r0, [r7, #4]
 8005974:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8005976:	2180      	movs	r1, #128	; 0x80
 8005978:	6878      	ldr	r0, [r7, #4]
 800597a:	f000 fcd7 	bl	800632c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800597e:	2100      	movs	r1, #0
 8005980:	6878      	ldr	r0, [r7, #4]
 8005982:	f000 fcd3 	bl	800632c <USBD_LL_StallEP>
}
 8005986:	bf00      	nop
 8005988:	3708      	adds	r7, #8
 800598a:	46bd      	mov	sp, r7
 800598c:	bd80      	pop	{r7, pc}

0800598e <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800598e:	b580      	push	{r7, lr}
 8005990:	b086      	sub	sp, #24
 8005992:	af00      	add	r7, sp, #0
 8005994:	60f8      	str	r0, [r7, #12]
 8005996:	60b9      	str	r1, [r7, #8]
 8005998:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800599a:	2300      	movs	r3, #0
 800599c:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d036      	beq.n	8005a12 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80059a8:	6938      	ldr	r0, [r7, #16]
 80059aa:	f000 f836 	bl	8005a1a <USBD_GetLen>
 80059ae:	4603      	mov	r3, r0
 80059b0:	3301      	adds	r3, #1
 80059b2:	b29b      	uxth	r3, r3
 80059b4:	005b      	lsls	r3, r3, #1
 80059b6:	b29a      	uxth	r2, r3
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80059bc:	7dfb      	ldrb	r3, [r7, #23]
 80059be:	68ba      	ldr	r2, [r7, #8]
 80059c0:	4413      	add	r3, r2
 80059c2:	687a      	ldr	r2, [r7, #4]
 80059c4:	7812      	ldrb	r2, [r2, #0]
 80059c6:	701a      	strb	r2, [r3, #0]
  idx++;
 80059c8:	7dfb      	ldrb	r3, [r7, #23]
 80059ca:	3301      	adds	r3, #1
 80059cc:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80059ce:	7dfb      	ldrb	r3, [r7, #23]
 80059d0:	68ba      	ldr	r2, [r7, #8]
 80059d2:	4413      	add	r3, r2
 80059d4:	2203      	movs	r2, #3
 80059d6:	701a      	strb	r2, [r3, #0]
  idx++;
 80059d8:	7dfb      	ldrb	r3, [r7, #23]
 80059da:	3301      	adds	r3, #1
 80059dc:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80059de:	e013      	b.n	8005a08 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80059e0:	7dfb      	ldrb	r3, [r7, #23]
 80059e2:	68ba      	ldr	r2, [r7, #8]
 80059e4:	4413      	add	r3, r2
 80059e6:	693a      	ldr	r2, [r7, #16]
 80059e8:	7812      	ldrb	r2, [r2, #0]
 80059ea:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80059ec:	693b      	ldr	r3, [r7, #16]
 80059ee:	3301      	adds	r3, #1
 80059f0:	613b      	str	r3, [r7, #16]
    idx++;
 80059f2:	7dfb      	ldrb	r3, [r7, #23]
 80059f4:	3301      	adds	r3, #1
 80059f6:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80059f8:	7dfb      	ldrb	r3, [r7, #23]
 80059fa:	68ba      	ldr	r2, [r7, #8]
 80059fc:	4413      	add	r3, r2
 80059fe:	2200      	movs	r2, #0
 8005a00:	701a      	strb	r2, [r3, #0]
    idx++;
 8005a02:	7dfb      	ldrb	r3, [r7, #23]
 8005a04:	3301      	adds	r3, #1
 8005a06:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8005a08:	693b      	ldr	r3, [r7, #16]
 8005a0a:	781b      	ldrb	r3, [r3, #0]
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d1e7      	bne.n	80059e0 <USBD_GetString+0x52>
 8005a10:	e000      	b.n	8005a14 <USBD_GetString+0x86>
    return;
 8005a12:	bf00      	nop
  }
}
 8005a14:	3718      	adds	r7, #24
 8005a16:	46bd      	mov	sp, r7
 8005a18:	bd80      	pop	{r7, pc}

08005a1a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8005a1a:	b480      	push	{r7}
 8005a1c:	b085      	sub	sp, #20
 8005a1e:	af00      	add	r7, sp, #0
 8005a20:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8005a22:	2300      	movs	r3, #0
 8005a24:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8005a2a:	e005      	b.n	8005a38 <USBD_GetLen+0x1e>
  {
    len++;
 8005a2c:	7bfb      	ldrb	r3, [r7, #15]
 8005a2e:	3301      	adds	r3, #1
 8005a30:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8005a32:	68bb      	ldr	r3, [r7, #8]
 8005a34:	3301      	adds	r3, #1
 8005a36:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8005a38:	68bb      	ldr	r3, [r7, #8]
 8005a3a:	781b      	ldrb	r3, [r3, #0]
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d1f5      	bne.n	8005a2c <USBD_GetLen+0x12>
  }

  return len;
 8005a40:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a42:	4618      	mov	r0, r3
 8005a44:	3714      	adds	r7, #20
 8005a46:	46bd      	mov	sp, r7
 8005a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4c:	4770      	bx	lr

08005a4e <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8005a4e:	b580      	push	{r7, lr}
 8005a50:	b084      	sub	sp, #16
 8005a52:	af00      	add	r7, sp, #0
 8005a54:	60f8      	str	r0, [r7, #12]
 8005a56:	60b9      	str	r1, [r7, #8]
 8005a58:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	2202      	movs	r2, #2
 8005a5e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	687a      	ldr	r2, [r7, #4]
 8005a66:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	687a      	ldr	r2, [r7, #4]
 8005a6c:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	68ba      	ldr	r2, [r7, #8]
 8005a72:	2100      	movs	r1, #0
 8005a74:	68f8      	ldr	r0, [r7, #12]
 8005a76:	f000 fce2 	bl	800643e <USBD_LL_Transmit>

  return USBD_OK;
 8005a7a:	2300      	movs	r3, #0
}
 8005a7c:	4618      	mov	r0, r3
 8005a7e:	3710      	adds	r7, #16
 8005a80:	46bd      	mov	sp, r7
 8005a82:	bd80      	pop	{r7, pc}

08005a84 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8005a84:	b580      	push	{r7, lr}
 8005a86:	b084      	sub	sp, #16
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	60f8      	str	r0, [r7, #12]
 8005a8c:	60b9      	str	r1, [r7, #8]
 8005a8e:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	68ba      	ldr	r2, [r7, #8]
 8005a94:	2100      	movs	r1, #0
 8005a96:	68f8      	ldr	r0, [r7, #12]
 8005a98:	f000 fcd1 	bl	800643e <USBD_LL_Transmit>

  return USBD_OK;
 8005a9c:	2300      	movs	r3, #0
}
 8005a9e:	4618      	mov	r0, r3
 8005aa0:	3710      	adds	r7, #16
 8005aa2:	46bd      	mov	sp, r7
 8005aa4:	bd80      	pop	{r7, pc}

08005aa6 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8005aa6:	b580      	push	{r7, lr}
 8005aa8:	b084      	sub	sp, #16
 8005aaa:	af00      	add	r7, sp, #0
 8005aac:	60f8      	str	r0, [r7, #12]
 8005aae:	60b9      	str	r1, [r7, #8]
 8005ab0:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	2203      	movs	r2, #3
 8005ab6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	687a      	ldr	r2, [r7, #4]
 8005abe:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	687a      	ldr	r2, [r7, #4]
 8005ac6:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	68ba      	ldr	r2, [r7, #8]
 8005ace:	2100      	movs	r1, #0
 8005ad0:	68f8      	ldr	r0, [r7, #12]
 8005ad2:	f000 fcd5 	bl	8006480 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8005ad6:	2300      	movs	r3, #0
}
 8005ad8:	4618      	mov	r0, r3
 8005ada:	3710      	adds	r7, #16
 8005adc:	46bd      	mov	sp, r7
 8005ade:	bd80      	pop	{r7, pc}

08005ae0 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8005ae0:	b580      	push	{r7, lr}
 8005ae2:	b084      	sub	sp, #16
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	60f8      	str	r0, [r7, #12]
 8005ae8:	60b9      	str	r1, [r7, #8]
 8005aea:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	68ba      	ldr	r2, [r7, #8]
 8005af0:	2100      	movs	r1, #0
 8005af2:	68f8      	ldr	r0, [r7, #12]
 8005af4:	f000 fcc4 	bl	8006480 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8005af8:	2300      	movs	r3, #0
}
 8005afa:	4618      	mov	r0, r3
 8005afc:	3710      	adds	r7, #16
 8005afe:	46bd      	mov	sp, r7
 8005b00:	bd80      	pop	{r7, pc}

08005b02 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8005b02:	b580      	push	{r7, lr}
 8005b04:	b082      	sub	sp, #8
 8005b06:	af00      	add	r7, sp, #0
 8005b08:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	2204      	movs	r2, #4
 8005b0e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8005b12:	2300      	movs	r3, #0
 8005b14:	2200      	movs	r2, #0
 8005b16:	2100      	movs	r1, #0
 8005b18:	6878      	ldr	r0, [r7, #4]
 8005b1a:	f000 fc90 	bl	800643e <USBD_LL_Transmit>

  return USBD_OK;
 8005b1e:	2300      	movs	r3, #0
}
 8005b20:	4618      	mov	r0, r3
 8005b22:	3708      	adds	r7, #8
 8005b24:	46bd      	mov	sp, r7
 8005b26:	bd80      	pop	{r7, pc}

08005b28 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8005b28:	b580      	push	{r7, lr}
 8005b2a:	b082      	sub	sp, #8
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	2205      	movs	r2, #5
 8005b34:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005b38:	2300      	movs	r3, #0
 8005b3a:	2200      	movs	r2, #0
 8005b3c:	2100      	movs	r1, #0
 8005b3e:	6878      	ldr	r0, [r7, #4]
 8005b40:	f000 fc9e 	bl	8006480 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8005b44:	2300      	movs	r3, #0
}
 8005b46:	4618      	mov	r0, r3
 8005b48:	3708      	adds	r7, #8
 8005b4a:	46bd      	mov	sp, r7
 8005b4c:	bd80      	pop	{r7, pc}
	...

08005b50 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8005b50:	b580      	push	{r7, lr}
 8005b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8005b54:	2200      	movs	r2, #0
 8005b56:	4912      	ldr	r1, [pc, #72]	; (8005ba0 <MX_USB_DEVICE_Init+0x50>)
 8005b58:	4812      	ldr	r0, [pc, #72]	; (8005ba4 <MX_USB_DEVICE_Init+0x54>)
 8005b5a:	f7fe fe8f 	bl	800487c <USBD_Init>
 8005b5e:	4603      	mov	r3, r0
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d001      	beq.n	8005b68 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8005b64:	f7fa fdaa 	bl	80006bc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8005b68:	490f      	ldr	r1, [pc, #60]	; (8005ba8 <MX_USB_DEVICE_Init+0x58>)
 8005b6a:	480e      	ldr	r0, [pc, #56]	; (8005ba4 <MX_USB_DEVICE_Init+0x54>)
 8005b6c:	f7fe feb6 	bl	80048dc <USBD_RegisterClass>
 8005b70:	4603      	mov	r3, r0
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d001      	beq.n	8005b7a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8005b76:	f7fa fda1 	bl	80006bc <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8005b7a:	490c      	ldr	r1, [pc, #48]	; (8005bac <MX_USB_DEVICE_Init+0x5c>)
 8005b7c:	4809      	ldr	r0, [pc, #36]	; (8005ba4 <MX_USB_DEVICE_Init+0x54>)
 8005b7e:	f7fe fdd7 	bl	8004730 <USBD_CDC_RegisterInterface>
 8005b82:	4603      	mov	r3, r0
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d001      	beq.n	8005b8c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8005b88:	f7fa fd98 	bl	80006bc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8005b8c:	4805      	ldr	r0, [pc, #20]	; (8005ba4 <MX_USB_DEVICE_Init+0x54>)
 8005b8e:	f7fe fecc 	bl	800492a <USBD_Start>
 8005b92:	4603      	mov	r3, r0
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d001      	beq.n	8005b9c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8005b98:	f7fa fd90 	bl	80006bc <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8005b9c:	bf00      	nop
 8005b9e:	bd80      	pop	{r7, pc}
 8005ba0:	20000154 	.word	0x20000154
 8005ba4:	200003e8 	.word	0x200003e8
 8005ba8:	2000003c 	.word	0x2000003c
 8005bac:	20000140 	.word	0x20000140

08005bb0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8005bb0:	b580      	push	{r7, lr}
 8005bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8005bb4:	2200      	movs	r2, #0
 8005bb6:	4905      	ldr	r1, [pc, #20]	; (8005bcc <CDC_Init_FS+0x1c>)
 8005bb8:	4805      	ldr	r0, [pc, #20]	; (8005bd0 <CDC_Init_FS+0x20>)
 8005bba:	f7fe fdce 	bl	800475a <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8005bbe:	4905      	ldr	r1, [pc, #20]	; (8005bd4 <CDC_Init_FS+0x24>)
 8005bc0:	4803      	ldr	r0, [pc, #12]	; (8005bd0 <CDC_Init_FS+0x20>)
 8005bc2:	f7fe fde8 	bl	8004796 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8005bc6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8005bc8:	4618      	mov	r0, r3
 8005bca:	bd80      	pop	{r7, pc}
 8005bcc:	20000ab8 	.word	0x20000ab8
 8005bd0:	200003e8 	.word	0x200003e8
 8005bd4:	200006b8 	.word	0x200006b8

08005bd8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8005bd8:	b480      	push	{r7}
 8005bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8005bdc:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8005bde:	4618      	mov	r0, r3
 8005be0:	46bd      	mov	sp, r7
 8005be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be6:	4770      	bx	lr

08005be8 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8005be8:	b480      	push	{r7}
 8005bea:	b083      	sub	sp, #12
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	4603      	mov	r3, r0
 8005bf0:	6039      	str	r1, [r7, #0]
 8005bf2:	71fb      	strb	r3, [r7, #7]
 8005bf4:	4613      	mov	r3, r2
 8005bf6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8005bf8:	79fb      	ldrb	r3, [r7, #7]
 8005bfa:	2b23      	cmp	r3, #35	; 0x23
 8005bfc:	d84a      	bhi.n	8005c94 <CDC_Control_FS+0xac>
 8005bfe:	a201      	add	r2, pc, #4	; (adr r2, 8005c04 <CDC_Control_FS+0x1c>)
 8005c00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c04:	08005c95 	.word	0x08005c95
 8005c08:	08005c95 	.word	0x08005c95
 8005c0c:	08005c95 	.word	0x08005c95
 8005c10:	08005c95 	.word	0x08005c95
 8005c14:	08005c95 	.word	0x08005c95
 8005c18:	08005c95 	.word	0x08005c95
 8005c1c:	08005c95 	.word	0x08005c95
 8005c20:	08005c95 	.word	0x08005c95
 8005c24:	08005c95 	.word	0x08005c95
 8005c28:	08005c95 	.word	0x08005c95
 8005c2c:	08005c95 	.word	0x08005c95
 8005c30:	08005c95 	.word	0x08005c95
 8005c34:	08005c95 	.word	0x08005c95
 8005c38:	08005c95 	.word	0x08005c95
 8005c3c:	08005c95 	.word	0x08005c95
 8005c40:	08005c95 	.word	0x08005c95
 8005c44:	08005c95 	.word	0x08005c95
 8005c48:	08005c95 	.word	0x08005c95
 8005c4c:	08005c95 	.word	0x08005c95
 8005c50:	08005c95 	.word	0x08005c95
 8005c54:	08005c95 	.word	0x08005c95
 8005c58:	08005c95 	.word	0x08005c95
 8005c5c:	08005c95 	.word	0x08005c95
 8005c60:	08005c95 	.word	0x08005c95
 8005c64:	08005c95 	.word	0x08005c95
 8005c68:	08005c95 	.word	0x08005c95
 8005c6c:	08005c95 	.word	0x08005c95
 8005c70:	08005c95 	.word	0x08005c95
 8005c74:	08005c95 	.word	0x08005c95
 8005c78:	08005c95 	.word	0x08005c95
 8005c7c:	08005c95 	.word	0x08005c95
 8005c80:	08005c95 	.word	0x08005c95
 8005c84:	08005c95 	.word	0x08005c95
 8005c88:	08005c95 	.word	0x08005c95
 8005c8c:	08005c95 	.word	0x08005c95
 8005c90:	08005c95 	.word	0x08005c95
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8005c94:	bf00      	nop
  }

  return (USBD_OK);
 8005c96:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8005c98:	4618      	mov	r0, r3
 8005c9a:	370c      	adds	r7, #12
 8005c9c:	46bd      	mov	sp, r7
 8005c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca2:	4770      	bx	lr

08005ca4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8005ca4:	b580      	push	{r7, lr}
 8005ca6:	b082      	sub	sp, #8
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	6078      	str	r0, [r7, #4]
 8005cac:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8005cae:	6879      	ldr	r1, [r7, #4]
 8005cb0:	4805      	ldr	r0, [pc, #20]	; (8005cc8 <CDC_Receive_FS+0x24>)
 8005cb2:	f7fe fd70 	bl	8004796 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8005cb6:	4804      	ldr	r0, [pc, #16]	; (8005cc8 <CDC_Receive_FS+0x24>)
 8005cb8:	f7fe fdb6 	bl	8004828 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8005cbc:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8005cbe:	4618      	mov	r0, r3
 8005cc0:	3708      	adds	r7, #8
 8005cc2:	46bd      	mov	sp, r7
 8005cc4:	bd80      	pop	{r7, pc}
 8005cc6:	bf00      	nop
 8005cc8:	200003e8 	.word	0x200003e8

08005ccc <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8005ccc:	b580      	push	{r7, lr}
 8005cce:	b084      	sub	sp, #16
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	6078      	str	r0, [r7, #4]
 8005cd4:	460b      	mov	r3, r1
 8005cd6:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8005cd8:	2300      	movs	r3, #0
 8005cda:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8005cdc:	4b0d      	ldr	r3, [pc, #52]	; (8005d14 <CDC_Transmit_FS+0x48>)
 8005cde:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005ce2:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8005ce4:	68bb      	ldr	r3, [r7, #8]
 8005ce6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d001      	beq.n	8005cf2 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8005cee:	2301      	movs	r3, #1
 8005cf0:	e00b      	b.n	8005d0a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8005cf2:	887b      	ldrh	r3, [r7, #2]
 8005cf4:	461a      	mov	r2, r3
 8005cf6:	6879      	ldr	r1, [r7, #4]
 8005cf8:	4806      	ldr	r0, [pc, #24]	; (8005d14 <CDC_Transmit_FS+0x48>)
 8005cfa:	f7fe fd2e 	bl	800475a <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8005cfe:	4805      	ldr	r0, [pc, #20]	; (8005d14 <CDC_Transmit_FS+0x48>)
 8005d00:	f7fe fd62 	bl	80047c8 <USBD_CDC_TransmitPacket>
 8005d04:	4603      	mov	r3, r0
 8005d06:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8005d08:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d0a:	4618      	mov	r0, r3
 8005d0c:	3710      	adds	r7, #16
 8005d0e:	46bd      	mov	sp, r7
 8005d10:	bd80      	pop	{r7, pc}
 8005d12:	bf00      	nop
 8005d14:	200003e8 	.word	0x200003e8

08005d18 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8005d18:	b480      	push	{r7}
 8005d1a:	b087      	sub	sp, #28
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	60f8      	str	r0, [r7, #12]
 8005d20:	60b9      	str	r1, [r7, #8]
 8005d22:	4613      	mov	r3, r2
 8005d24:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8005d26:	2300      	movs	r3, #0
 8005d28:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8005d2a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005d2e:	4618      	mov	r0, r3
 8005d30:	371c      	adds	r7, #28
 8005d32:	46bd      	mov	sp, r7
 8005d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d38:	4770      	bx	lr
	...

08005d3c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005d3c:	b480      	push	{r7}
 8005d3e:	b083      	sub	sp, #12
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	4603      	mov	r3, r0
 8005d44:	6039      	str	r1, [r7, #0]
 8005d46:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8005d48:	683b      	ldr	r3, [r7, #0]
 8005d4a:	2212      	movs	r2, #18
 8005d4c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8005d4e:	4b03      	ldr	r3, [pc, #12]	; (8005d5c <USBD_FS_DeviceDescriptor+0x20>)
}
 8005d50:	4618      	mov	r0, r3
 8005d52:	370c      	adds	r7, #12
 8005d54:	46bd      	mov	sp, r7
 8005d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d5a:	4770      	bx	lr
 8005d5c:	20000170 	.word	0x20000170

08005d60 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005d60:	b480      	push	{r7}
 8005d62:	b083      	sub	sp, #12
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	4603      	mov	r3, r0
 8005d68:	6039      	str	r1, [r7, #0]
 8005d6a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8005d6c:	683b      	ldr	r3, [r7, #0]
 8005d6e:	2204      	movs	r2, #4
 8005d70:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8005d72:	4b03      	ldr	r3, [pc, #12]	; (8005d80 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8005d74:	4618      	mov	r0, r3
 8005d76:	370c      	adds	r7, #12
 8005d78:	46bd      	mov	sp, r7
 8005d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d7e:	4770      	bx	lr
 8005d80:	20000184 	.word	0x20000184

08005d84 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005d84:	b580      	push	{r7, lr}
 8005d86:	b082      	sub	sp, #8
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	4603      	mov	r3, r0
 8005d8c:	6039      	str	r1, [r7, #0]
 8005d8e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8005d90:	79fb      	ldrb	r3, [r7, #7]
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d105      	bne.n	8005da2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8005d96:	683a      	ldr	r2, [r7, #0]
 8005d98:	4907      	ldr	r1, [pc, #28]	; (8005db8 <USBD_FS_ProductStrDescriptor+0x34>)
 8005d9a:	4808      	ldr	r0, [pc, #32]	; (8005dbc <USBD_FS_ProductStrDescriptor+0x38>)
 8005d9c:	f7ff fdf7 	bl	800598e <USBD_GetString>
 8005da0:	e004      	b.n	8005dac <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8005da2:	683a      	ldr	r2, [r7, #0]
 8005da4:	4904      	ldr	r1, [pc, #16]	; (8005db8 <USBD_FS_ProductStrDescriptor+0x34>)
 8005da6:	4805      	ldr	r0, [pc, #20]	; (8005dbc <USBD_FS_ProductStrDescriptor+0x38>)
 8005da8:	f7ff fdf1 	bl	800598e <USBD_GetString>
  }
  return USBD_StrDesc;
 8005dac:	4b02      	ldr	r3, [pc, #8]	; (8005db8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8005dae:	4618      	mov	r0, r3
 8005db0:	3708      	adds	r7, #8
 8005db2:	46bd      	mov	sp, r7
 8005db4:	bd80      	pop	{r7, pc}
 8005db6:	bf00      	nop
 8005db8:	20000eb8 	.word	0x20000eb8
 8005dbc:	08006600 	.word	0x08006600

08005dc0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005dc0:	b580      	push	{r7, lr}
 8005dc2:	b082      	sub	sp, #8
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	4603      	mov	r3, r0
 8005dc8:	6039      	str	r1, [r7, #0]
 8005dca:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8005dcc:	683a      	ldr	r2, [r7, #0]
 8005dce:	4904      	ldr	r1, [pc, #16]	; (8005de0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8005dd0:	4804      	ldr	r0, [pc, #16]	; (8005de4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8005dd2:	f7ff fddc 	bl	800598e <USBD_GetString>
  return USBD_StrDesc;
 8005dd6:	4b02      	ldr	r3, [pc, #8]	; (8005de0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8005dd8:	4618      	mov	r0, r3
 8005dda:	3708      	adds	r7, #8
 8005ddc:	46bd      	mov	sp, r7
 8005dde:	bd80      	pop	{r7, pc}
 8005de0:	20000eb8 	.word	0x20000eb8
 8005de4:	08006618 	.word	0x08006618

08005de8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005de8:	b580      	push	{r7, lr}
 8005dea:	b082      	sub	sp, #8
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	4603      	mov	r3, r0
 8005df0:	6039      	str	r1, [r7, #0]
 8005df2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8005df4:	683b      	ldr	r3, [r7, #0]
 8005df6:	221a      	movs	r2, #26
 8005df8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8005dfa:	f000 f843 	bl	8005e84 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8005dfe:	4b02      	ldr	r3, [pc, #8]	; (8005e08 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8005e00:	4618      	mov	r0, r3
 8005e02:	3708      	adds	r7, #8
 8005e04:	46bd      	mov	sp, r7
 8005e06:	bd80      	pop	{r7, pc}
 8005e08:	20000188 	.word	0x20000188

08005e0c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005e0c:	b580      	push	{r7, lr}
 8005e0e:	b082      	sub	sp, #8
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	4603      	mov	r3, r0
 8005e14:	6039      	str	r1, [r7, #0]
 8005e16:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8005e18:	79fb      	ldrb	r3, [r7, #7]
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d105      	bne.n	8005e2a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8005e1e:	683a      	ldr	r2, [r7, #0]
 8005e20:	4907      	ldr	r1, [pc, #28]	; (8005e40 <USBD_FS_ConfigStrDescriptor+0x34>)
 8005e22:	4808      	ldr	r0, [pc, #32]	; (8005e44 <USBD_FS_ConfigStrDescriptor+0x38>)
 8005e24:	f7ff fdb3 	bl	800598e <USBD_GetString>
 8005e28:	e004      	b.n	8005e34 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8005e2a:	683a      	ldr	r2, [r7, #0]
 8005e2c:	4904      	ldr	r1, [pc, #16]	; (8005e40 <USBD_FS_ConfigStrDescriptor+0x34>)
 8005e2e:	4805      	ldr	r0, [pc, #20]	; (8005e44 <USBD_FS_ConfigStrDescriptor+0x38>)
 8005e30:	f7ff fdad 	bl	800598e <USBD_GetString>
  }
  return USBD_StrDesc;
 8005e34:	4b02      	ldr	r3, [pc, #8]	; (8005e40 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8005e36:	4618      	mov	r0, r3
 8005e38:	3708      	adds	r7, #8
 8005e3a:	46bd      	mov	sp, r7
 8005e3c:	bd80      	pop	{r7, pc}
 8005e3e:	bf00      	nop
 8005e40:	20000eb8 	.word	0x20000eb8
 8005e44:	0800662c 	.word	0x0800662c

08005e48 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005e48:	b580      	push	{r7, lr}
 8005e4a:	b082      	sub	sp, #8
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	4603      	mov	r3, r0
 8005e50:	6039      	str	r1, [r7, #0]
 8005e52:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8005e54:	79fb      	ldrb	r3, [r7, #7]
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d105      	bne.n	8005e66 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8005e5a:	683a      	ldr	r2, [r7, #0]
 8005e5c:	4907      	ldr	r1, [pc, #28]	; (8005e7c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8005e5e:	4808      	ldr	r0, [pc, #32]	; (8005e80 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8005e60:	f7ff fd95 	bl	800598e <USBD_GetString>
 8005e64:	e004      	b.n	8005e70 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8005e66:	683a      	ldr	r2, [r7, #0]
 8005e68:	4904      	ldr	r1, [pc, #16]	; (8005e7c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8005e6a:	4805      	ldr	r0, [pc, #20]	; (8005e80 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8005e6c:	f7ff fd8f 	bl	800598e <USBD_GetString>
  }
  return USBD_StrDesc;
 8005e70:	4b02      	ldr	r3, [pc, #8]	; (8005e7c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8005e72:	4618      	mov	r0, r3
 8005e74:	3708      	adds	r7, #8
 8005e76:	46bd      	mov	sp, r7
 8005e78:	bd80      	pop	{r7, pc}
 8005e7a:	bf00      	nop
 8005e7c:	20000eb8 	.word	0x20000eb8
 8005e80:	08006638 	.word	0x08006638

08005e84 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8005e84:	b580      	push	{r7, lr}
 8005e86:	b084      	sub	sp, #16
 8005e88:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8005e8a:	4b0f      	ldr	r3, [pc, #60]	; (8005ec8 <Get_SerialNum+0x44>)
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8005e90:	4b0e      	ldr	r3, [pc, #56]	; (8005ecc <Get_SerialNum+0x48>)
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8005e96:	4b0e      	ldr	r3, [pc, #56]	; (8005ed0 <Get_SerialNum+0x4c>)
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8005e9c:	68fa      	ldr	r2, [r7, #12]
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	4413      	add	r3, r2
 8005ea2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d009      	beq.n	8005ebe <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8005eaa:	2208      	movs	r2, #8
 8005eac:	4909      	ldr	r1, [pc, #36]	; (8005ed4 <Get_SerialNum+0x50>)
 8005eae:	68f8      	ldr	r0, [r7, #12]
 8005eb0:	f000 f814 	bl	8005edc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8005eb4:	2204      	movs	r2, #4
 8005eb6:	4908      	ldr	r1, [pc, #32]	; (8005ed8 <Get_SerialNum+0x54>)
 8005eb8:	68b8      	ldr	r0, [r7, #8]
 8005eba:	f000 f80f 	bl	8005edc <IntToUnicode>
  }
}
 8005ebe:	bf00      	nop
 8005ec0:	3710      	adds	r7, #16
 8005ec2:	46bd      	mov	sp, r7
 8005ec4:	bd80      	pop	{r7, pc}
 8005ec6:	bf00      	nop
 8005ec8:	1fff7a10 	.word	0x1fff7a10
 8005ecc:	1fff7a14 	.word	0x1fff7a14
 8005ed0:	1fff7a18 	.word	0x1fff7a18
 8005ed4:	2000018a 	.word	0x2000018a
 8005ed8:	2000019a 	.word	0x2000019a

08005edc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8005edc:	b480      	push	{r7}
 8005ede:	b087      	sub	sp, #28
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	60f8      	str	r0, [r7, #12]
 8005ee4:	60b9      	str	r1, [r7, #8]
 8005ee6:	4613      	mov	r3, r2
 8005ee8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8005eea:	2300      	movs	r3, #0
 8005eec:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8005eee:	2300      	movs	r3, #0
 8005ef0:	75fb      	strb	r3, [r7, #23]
 8005ef2:	e027      	b.n	8005f44 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	0f1b      	lsrs	r3, r3, #28
 8005ef8:	2b09      	cmp	r3, #9
 8005efa:	d80b      	bhi.n	8005f14 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	0f1b      	lsrs	r3, r3, #28
 8005f00:	b2da      	uxtb	r2, r3
 8005f02:	7dfb      	ldrb	r3, [r7, #23]
 8005f04:	005b      	lsls	r3, r3, #1
 8005f06:	4619      	mov	r1, r3
 8005f08:	68bb      	ldr	r3, [r7, #8]
 8005f0a:	440b      	add	r3, r1
 8005f0c:	3230      	adds	r2, #48	; 0x30
 8005f0e:	b2d2      	uxtb	r2, r2
 8005f10:	701a      	strb	r2, [r3, #0]
 8005f12:	e00a      	b.n	8005f2a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	0f1b      	lsrs	r3, r3, #28
 8005f18:	b2da      	uxtb	r2, r3
 8005f1a:	7dfb      	ldrb	r3, [r7, #23]
 8005f1c:	005b      	lsls	r3, r3, #1
 8005f1e:	4619      	mov	r1, r3
 8005f20:	68bb      	ldr	r3, [r7, #8]
 8005f22:	440b      	add	r3, r1
 8005f24:	3237      	adds	r2, #55	; 0x37
 8005f26:	b2d2      	uxtb	r2, r2
 8005f28:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	011b      	lsls	r3, r3, #4
 8005f2e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8005f30:	7dfb      	ldrb	r3, [r7, #23]
 8005f32:	005b      	lsls	r3, r3, #1
 8005f34:	3301      	adds	r3, #1
 8005f36:	68ba      	ldr	r2, [r7, #8]
 8005f38:	4413      	add	r3, r2
 8005f3a:	2200      	movs	r2, #0
 8005f3c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8005f3e:	7dfb      	ldrb	r3, [r7, #23]
 8005f40:	3301      	adds	r3, #1
 8005f42:	75fb      	strb	r3, [r7, #23]
 8005f44:	7dfa      	ldrb	r2, [r7, #23]
 8005f46:	79fb      	ldrb	r3, [r7, #7]
 8005f48:	429a      	cmp	r2, r3
 8005f4a:	d3d3      	bcc.n	8005ef4 <IntToUnicode+0x18>
  }
}
 8005f4c:	bf00      	nop
 8005f4e:	bf00      	nop
 8005f50:	371c      	adds	r7, #28
 8005f52:	46bd      	mov	sp, r7
 8005f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f58:	4770      	bx	lr
	...

08005f5c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8005f5c:	b580      	push	{r7, lr}
 8005f5e:	b08a      	sub	sp, #40	; 0x28
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005f64:	f107 0314 	add.w	r3, r7, #20
 8005f68:	2200      	movs	r2, #0
 8005f6a:	601a      	str	r2, [r3, #0]
 8005f6c:	605a      	str	r2, [r3, #4]
 8005f6e:	609a      	str	r2, [r3, #8]
 8005f70:	60da      	str	r2, [r3, #12]
 8005f72:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005f7c:	d13a      	bne.n	8005ff4 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005f7e:	2300      	movs	r3, #0
 8005f80:	613b      	str	r3, [r7, #16]
 8005f82:	4b1e      	ldr	r3, [pc, #120]	; (8005ffc <HAL_PCD_MspInit+0xa0>)
 8005f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f86:	4a1d      	ldr	r2, [pc, #116]	; (8005ffc <HAL_PCD_MspInit+0xa0>)
 8005f88:	f043 0301 	orr.w	r3, r3, #1
 8005f8c:	6313      	str	r3, [r2, #48]	; 0x30
 8005f8e:	4b1b      	ldr	r3, [pc, #108]	; (8005ffc <HAL_PCD_MspInit+0xa0>)
 8005f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f92:	f003 0301 	and.w	r3, r3, #1
 8005f96:	613b      	str	r3, [r7, #16]
 8005f98:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8005f9a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8005f9e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005fa0:	2302      	movs	r3, #2
 8005fa2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005fa4:	2300      	movs	r3, #0
 8005fa6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005fa8:	2303      	movs	r3, #3
 8005faa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8005fac:	230a      	movs	r3, #10
 8005fae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005fb0:	f107 0314 	add.w	r3, r7, #20
 8005fb4:	4619      	mov	r1, r3
 8005fb6:	4812      	ldr	r0, [pc, #72]	; (8006000 <HAL_PCD_MspInit+0xa4>)
 8005fb8:	f7fa fe66 	bl	8000c88 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8005fbc:	4b0f      	ldr	r3, [pc, #60]	; (8005ffc <HAL_PCD_MspInit+0xa0>)
 8005fbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fc0:	4a0e      	ldr	r2, [pc, #56]	; (8005ffc <HAL_PCD_MspInit+0xa0>)
 8005fc2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005fc6:	6353      	str	r3, [r2, #52]	; 0x34
 8005fc8:	2300      	movs	r3, #0
 8005fca:	60fb      	str	r3, [r7, #12]
 8005fcc:	4b0b      	ldr	r3, [pc, #44]	; (8005ffc <HAL_PCD_MspInit+0xa0>)
 8005fce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fd0:	4a0a      	ldr	r2, [pc, #40]	; (8005ffc <HAL_PCD_MspInit+0xa0>)
 8005fd2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005fd6:	6453      	str	r3, [r2, #68]	; 0x44
 8005fd8:	4b08      	ldr	r3, [pc, #32]	; (8005ffc <HAL_PCD_MspInit+0xa0>)
 8005fda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fdc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005fe0:	60fb      	str	r3, [r7, #12]
 8005fe2:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8005fe4:	2200      	movs	r2, #0
 8005fe6:	2100      	movs	r1, #0
 8005fe8:	2043      	movs	r0, #67	; 0x43
 8005fea:	f7fa fe16 	bl	8000c1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8005fee:	2043      	movs	r0, #67	; 0x43
 8005ff0:	f7fa fe2f 	bl	8000c52 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8005ff4:	bf00      	nop
 8005ff6:	3728      	adds	r7, #40	; 0x28
 8005ff8:	46bd      	mov	sp, r7
 8005ffa:	bd80      	pop	{r7, pc}
 8005ffc:	40023800 	.word	0x40023800
 8006000:	40020000 	.word	0x40020000

08006004 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006004:	b580      	push	{r7, lr}
 8006006:	b082      	sub	sp, #8
 8006008:	af00      	add	r7, sp, #0
 800600a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8006018:	4619      	mov	r1, r3
 800601a:	4610      	mov	r0, r2
 800601c:	f7fe fcd0 	bl	80049c0 <USBD_LL_SetupStage>
}
 8006020:	bf00      	nop
 8006022:	3708      	adds	r7, #8
 8006024:	46bd      	mov	sp, r7
 8006026:	bd80      	pop	{r7, pc}

08006028 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006028:	b580      	push	{r7, lr}
 800602a:	b082      	sub	sp, #8
 800602c:	af00      	add	r7, sp, #0
 800602e:	6078      	str	r0, [r7, #4]
 8006030:	460b      	mov	r3, r1
 8006032:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800603a:	78fa      	ldrb	r2, [r7, #3]
 800603c:	6879      	ldr	r1, [r7, #4]
 800603e:	4613      	mov	r3, r2
 8006040:	00db      	lsls	r3, r3, #3
 8006042:	1a9b      	subs	r3, r3, r2
 8006044:	009b      	lsls	r3, r3, #2
 8006046:	440b      	add	r3, r1
 8006048:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800604c:	681a      	ldr	r2, [r3, #0]
 800604e:	78fb      	ldrb	r3, [r7, #3]
 8006050:	4619      	mov	r1, r3
 8006052:	f7fe fd0a 	bl	8004a6a <USBD_LL_DataOutStage>
}
 8006056:	bf00      	nop
 8006058:	3708      	adds	r7, #8
 800605a:	46bd      	mov	sp, r7
 800605c:	bd80      	pop	{r7, pc}

0800605e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800605e:	b580      	push	{r7, lr}
 8006060:	b082      	sub	sp, #8
 8006062:	af00      	add	r7, sp, #0
 8006064:	6078      	str	r0, [r7, #4]
 8006066:	460b      	mov	r3, r1
 8006068:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8006070:	78fa      	ldrb	r2, [r7, #3]
 8006072:	6879      	ldr	r1, [r7, #4]
 8006074:	4613      	mov	r3, r2
 8006076:	00db      	lsls	r3, r3, #3
 8006078:	1a9b      	subs	r3, r3, r2
 800607a:	009b      	lsls	r3, r3, #2
 800607c:	440b      	add	r3, r1
 800607e:	3348      	adds	r3, #72	; 0x48
 8006080:	681a      	ldr	r2, [r3, #0]
 8006082:	78fb      	ldrb	r3, [r7, #3]
 8006084:	4619      	mov	r1, r3
 8006086:	f7fe fd53 	bl	8004b30 <USBD_LL_DataInStage>
}
 800608a:	bf00      	nop
 800608c:	3708      	adds	r7, #8
 800608e:	46bd      	mov	sp, r7
 8006090:	bd80      	pop	{r7, pc}

08006092 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006092:	b580      	push	{r7, lr}
 8006094:	b082      	sub	sp, #8
 8006096:	af00      	add	r7, sp, #0
 8006098:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80060a0:	4618      	mov	r0, r3
 80060a2:	f7fe fe67 	bl	8004d74 <USBD_LL_SOF>
}
 80060a6:	bf00      	nop
 80060a8:	3708      	adds	r7, #8
 80060aa:	46bd      	mov	sp, r7
 80060ac:	bd80      	pop	{r7, pc}

080060ae <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80060ae:	b580      	push	{r7, lr}
 80060b0:	b084      	sub	sp, #16
 80060b2:	af00      	add	r7, sp, #0
 80060b4:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80060b6:	2301      	movs	r3, #1
 80060b8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	68db      	ldr	r3, [r3, #12]
 80060be:	2b02      	cmp	r3, #2
 80060c0:	d001      	beq.n	80060c6 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80060c2:	f7fa fafb 	bl	80006bc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80060cc:	7bfa      	ldrb	r2, [r7, #15]
 80060ce:	4611      	mov	r1, r2
 80060d0:	4618      	mov	r0, r3
 80060d2:	f7fe fe11 	bl	8004cf8 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80060dc:	4618      	mov	r0, r3
 80060de:	f7fe fdbd 	bl	8004c5c <USBD_LL_Reset>
}
 80060e2:	bf00      	nop
 80060e4:	3710      	adds	r7, #16
 80060e6:	46bd      	mov	sp, r7
 80060e8:	bd80      	pop	{r7, pc}
	...

080060ec <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80060ec:	b580      	push	{r7, lr}
 80060ee:	b082      	sub	sp, #8
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80060fa:	4618      	mov	r0, r3
 80060fc:	f7fe fe0c 	bl	8004d18 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	687a      	ldr	r2, [r7, #4]
 800610c:	6812      	ldr	r2, [r2, #0]
 800610e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006112:	f043 0301 	orr.w	r3, r3, #1
 8006116:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	6a1b      	ldr	r3, [r3, #32]
 800611c:	2b00      	cmp	r3, #0
 800611e:	d005      	beq.n	800612c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8006120:	4b04      	ldr	r3, [pc, #16]	; (8006134 <HAL_PCD_SuspendCallback+0x48>)
 8006122:	691b      	ldr	r3, [r3, #16]
 8006124:	4a03      	ldr	r2, [pc, #12]	; (8006134 <HAL_PCD_SuspendCallback+0x48>)
 8006126:	f043 0306 	orr.w	r3, r3, #6
 800612a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800612c:	bf00      	nop
 800612e:	3708      	adds	r7, #8
 8006130:	46bd      	mov	sp, r7
 8006132:	bd80      	pop	{r7, pc}
 8006134:	e000ed00 	.word	0xe000ed00

08006138 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006138:	b580      	push	{r7, lr}
 800613a:	b082      	sub	sp, #8
 800613c:	af00      	add	r7, sp, #0
 800613e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006146:	4618      	mov	r0, r3
 8006148:	f7fe fdfc 	bl	8004d44 <USBD_LL_Resume>
}
 800614c:	bf00      	nop
 800614e:	3708      	adds	r7, #8
 8006150:	46bd      	mov	sp, r7
 8006152:	bd80      	pop	{r7, pc}

08006154 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006154:	b580      	push	{r7, lr}
 8006156:	b082      	sub	sp, #8
 8006158:	af00      	add	r7, sp, #0
 800615a:	6078      	str	r0, [r7, #4]
 800615c:	460b      	mov	r3, r1
 800615e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006166:	78fa      	ldrb	r2, [r7, #3]
 8006168:	4611      	mov	r1, r2
 800616a:	4618      	mov	r0, r3
 800616c:	f7fe fe4a 	bl	8004e04 <USBD_LL_IsoOUTIncomplete>
}
 8006170:	bf00      	nop
 8006172:	3708      	adds	r7, #8
 8006174:	46bd      	mov	sp, r7
 8006176:	bd80      	pop	{r7, pc}

08006178 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006178:	b580      	push	{r7, lr}
 800617a:	b082      	sub	sp, #8
 800617c:	af00      	add	r7, sp, #0
 800617e:	6078      	str	r0, [r7, #4]
 8006180:	460b      	mov	r3, r1
 8006182:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800618a:	78fa      	ldrb	r2, [r7, #3]
 800618c:	4611      	mov	r1, r2
 800618e:	4618      	mov	r0, r3
 8006190:	f7fe fe12 	bl	8004db8 <USBD_LL_IsoINIncomplete>
}
 8006194:	bf00      	nop
 8006196:	3708      	adds	r7, #8
 8006198:	46bd      	mov	sp, r7
 800619a:	bd80      	pop	{r7, pc}

0800619c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800619c:	b580      	push	{r7, lr}
 800619e:	b082      	sub	sp, #8
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80061aa:	4618      	mov	r0, r3
 80061ac:	f7fe fe50 	bl	8004e50 <USBD_LL_DevConnected>
}
 80061b0:	bf00      	nop
 80061b2:	3708      	adds	r7, #8
 80061b4:	46bd      	mov	sp, r7
 80061b6:	bd80      	pop	{r7, pc}

080061b8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80061b8:	b580      	push	{r7, lr}
 80061ba:	b082      	sub	sp, #8
 80061bc:	af00      	add	r7, sp, #0
 80061be:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80061c6:	4618      	mov	r0, r3
 80061c8:	f7fe fe4d 	bl	8004e66 <USBD_LL_DevDisconnected>
}
 80061cc:	bf00      	nop
 80061ce:	3708      	adds	r7, #8
 80061d0:	46bd      	mov	sp, r7
 80061d2:	bd80      	pop	{r7, pc}

080061d4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80061d4:	b580      	push	{r7, lr}
 80061d6:	b082      	sub	sp, #8
 80061d8:	af00      	add	r7, sp, #0
 80061da:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	781b      	ldrb	r3, [r3, #0]
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d13c      	bne.n	800625e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80061e4:	4a20      	ldr	r2, [pc, #128]	; (8006268 <USBD_LL_Init+0x94>)
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	4a1e      	ldr	r2, [pc, #120]	; (8006268 <USBD_LL_Init+0x94>)
 80061f0:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80061f4:	4b1c      	ldr	r3, [pc, #112]	; (8006268 <USBD_LL_Init+0x94>)
 80061f6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80061fa:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80061fc:	4b1a      	ldr	r3, [pc, #104]	; (8006268 <USBD_LL_Init+0x94>)
 80061fe:	2204      	movs	r2, #4
 8006200:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8006202:	4b19      	ldr	r3, [pc, #100]	; (8006268 <USBD_LL_Init+0x94>)
 8006204:	2202      	movs	r2, #2
 8006206:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8006208:	4b17      	ldr	r3, [pc, #92]	; (8006268 <USBD_LL_Init+0x94>)
 800620a:	2200      	movs	r2, #0
 800620c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800620e:	4b16      	ldr	r3, [pc, #88]	; (8006268 <USBD_LL_Init+0x94>)
 8006210:	2202      	movs	r2, #2
 8006212:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8006214:	4b14      	ldr	r3, [pc, #80]	; (8006268 <USBD_LL_Init+0x94>)
 8006216:	2200      	movs	r2, #0
 8006218:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800621a:	4b13      	ldr	r3, [pc, #76]	; (8006268 <USBD_LL_Init+0x94>)
 800621c:	2200      	movs	r2, #0
 800621e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8006220:	4b11      	ldr	r3, [pc, #68]	; (8006268 <USBD_LL_Init+0x94>)
 8006222:	2200      	movs	r2, #0
 8006224:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8006226:	4b10      	ldr	r3, [pc, #64]	; (8006268 <USBD_LL_Init+0x94>)
 8006228:	2200      	movs	r2, #0
 800622a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800622c:	4b0e      	ldr	r3, [pc, #56]	; (8006268 <USBD_LL_Init+0x94>)
 800622e:	2200      	movs	r2, #0
 8006230:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8006232:	480d      	ldr	r0, [pc, #52]	; (8006268 <USBD_LL_Init+0x94>)
 8006234:	f7fa fedf 	bl	8000ff6 <HAL_PCD_Init>
 8006238:	4603      	mov	r3, r0
 800623a:	2b00      	cmp	r3, #0
 800623c:	d001      	beq.n	8006242 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800623e:	f7fa fa3d 	bl	80006bc <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8006242:	2180      	movs	r1, #128	; 0x80
 8006244:	4808      	ldr	r0, [pc, #32]	; (8006268 <USBD_LL_Init+0x94>)
 8006246:	f7fc f83c 	bl	80022c2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800624a:	2240      	movs	r2, #64	; 0x40
 800624c:	2100      	movs	r1, #0
 800624e:	4806      	ldr	r0, [pc, #24]	; (8006268 <USBD_LL_Init+0x94>)
 8006250:	f7fb fff0 	bl	8002234 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8006254:	2280      	movs	r2, #128	; 0x80
 8006256:	2101      	movs	r1, #1
 8006258:	4803      	ldr	r0, [pc, #12]	; (8006268 <USBD_LL_Init+0x94>)
 800625a:	f7fb ffeb 	bl	8002234 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800625e:	2300      	movs	r3, #0
}
 8006260:	4618      	mov	r0, r3
 8006262:	3708      	adds	r7, #8
 8006264:	46bd      	mov	sp, r7
 8006266:	bd80      	pop	{r7, pc}
 8006268:	200010b8 	.word	0x200010b8

0800626c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800626c:	b580      	push	{r7, lr}
 800626e:	b084      	sub	sp, #16
 8006270:	af00      	add	r7, sp, #0
 8006272:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006274:	2300      	movs	r3, #0
 8006276:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006278:	2300      	movs	r3, #0
 800627a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006282:	4618      	mov	r0, r3
 8006284:	f7fa ffd4 	bl	8001230 <HAL_PCD_Start>
 8006288:	4603      	mov	r3, r0
 800628a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800628c:	7bfb      	ldrb	r3, [r7, #15]
 800628e:	4618      	mov	r0, r3
 8006290:	f000 f942 	bl	8006518 <USBD_Get_USB_Status>
 8006294:	4603      	mov	r3, r0
 8006296:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006298:	7bbb      	ldrb	r3, [r7, #14]
}
 800629a:	4618      	mov	r0, r3
 800629c:	3710      	adds	r7, #16
 800629e:	46bd      	mov	sp, r7
 80062a0:	bd80      	pop	{r7, pc}

080062a2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80062a2:	b580      	push	{r7, lr}
 80062a4:	b084      	sub	sp, #16
 80062a6:	af00      	add	r7, sp, #0
 80062a8:	6078      	str	r0, [r7, #4]
 80062aa:	4608      	mov	r0, r1
 80062ac:	4611      	mov	r1, r2
 80062ae:	461a      	mov	r2, r3
 80062b0:	4603      	mov	r3, r0
 80062b2:	70fb      	strb	r3, [r7, #3]
 80062b4:	460b      	mov	r3, r1
 80062b6:	70bb      	strb	r3, [r7, #2]
 80062b8:	4613      	mov	r3, r2
 80062ba:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80062bc:	2300      	movs	r3, #0
 80062be:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80062c0:	2300      	movs	r3, #0
 80062c2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80062ca:	78bb      	ldrb	r3, [r7, #2]
 80062cc:	883a      	ldrh	r2, [r7, #0]
 80062ce:	78f9      	ldrb	r1, [r7, #3]
 80062d0:	f7fb fbb8 	bl	8001a44 <HAL_PCD_EP_Open>
 80062d4:	4603      	mov	r3, r0
 80062d6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80062d8:	7bfb      	ldrb	r3, [r7, #15]
 80062da:	4618      	mov	r0, r3
 80062dc:	f000 f91c 	bl	8006518 <USBD_Get_USB_Status>
 80062e0:	4603      	mov	r3, r0
 80062e2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80062e4:	7bbb      	ldrb	r3, [r7, #14]
}
 80062e6:	4618      	mov	r0, r3
 80062e8:	3710      	adds	r7, #16
 80062ea:	46bd      	mov	sp, r7
 80062ec:	bd80      	pop	{r7, pc}

080062ee <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80062ee:	b580      	push	{r7, lr}
 80062f0:	b084      	sub	sp, #16
 80062f2:	af00      	add	r7, sp, #0
 80062f4:	6078      	str	r0, [r7, #4]
 80062f6:	460b      	mov	r3, r1
 80062f8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80062fa:	2300      	movs	r3, #0
 80062fc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80062fe:	2300      	movs	r3, #0
 8006300:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006308:	78fa      	ldrb	r2, [r7, #3]
 800630a:	4611      	mov	r1, r2
 800630c:	4618      	mov	r0, r3
 800630e:	f7fb fc01 	bl	8001b14 <HAL_PCD_EP_Close>
 8006312:	4603      	mov	r3, r0
 8006314:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006316:	7bfb      	ldrb	r3, [r7, #15]
 8006318:	4618      	mov	r0, r3
 800631a:	f000 f8fd 	bl	8006518 <USBD_Get_USB_Status>
 800631e:	4603      	mov	r3, r0
 8006320:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006322:	7bbb      	ldrb	r3, [r7, #14]
}
 8006324:	4618      	mov	r0, r3
 8006326:	3710      	adds	r7, #16
 8006328:	46bd      	mov	sp, r7
 800632a:	bd80      	pop	{r7, pc}

0800632c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800632c:	b580      	push	{r7, lr}
 800632e:	b084      	sub	sp, #16
 8006330:	af00      	add	r7, sp, #0
 8006332:	6078      	str	r0, [r7, #4]
 8006334:	460b      	mov	r3, r1
 8006336:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006338:	2300      	movs	r3, #0
 800633a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800633c:	2300      	movs	r3, #0
 800633e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006346:	78fa      	ldrb	r2, [r7, #3]
 8006348:	4611      	mov	r1, r2
 800634a:	4618      	mov	r0, r3
 800634c:	f7fb fcd9 	bl	8001d02 <HAL_PCD_EP_SetStall>
 8006350:	4603      	mov	r3, r0
 8006352:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006354:	7bfb      	ldrb	r3, [r7, #15]
 8006356:	4618      	mov	r0, r3
 8006358:	f000 f8de 	bl	8006518 <USBD_Get_USB_Status>
 800635c:	4603      	mov	r3, r0
 800635e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006360:	7bbb      	ldrb	r3, [r7, #14]
}
 8006362:	4618      	mov	r0, r3
 8006364:	3710      	adds	r7, #16
 8006366:	46bd      	mov	sp, r7
 8006368:	bd80      	pop	{r7, pc}

0800636a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800636a:	b580      	push	{r7, lr}
 800636c:	b084      	sub	sp, #16
 800636e:	af00      	add	r7, sp, #0
 8006370:	6078      	str	r0, [r7, #4]
 8006372:	460b      	mov	r3, r1
 8006374:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006376:	2300      	movs	r3, #0
 8006378:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800637a:	2300      	movs	r3, #0
 800637c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006384:	78fa      	ldrb	r2, [r7, #3]
 8006386:	4611      	mov	r1, r2
 8006388:	4618      	mov	r0, r3
 800638a:	f7fb fd1e 	bl	8001dca <HAL_PCD_EP_ClrStall>
 800638e:	4603      	mov	r3, r0
 8006390:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006392:	7bfb      	ldrb	r3, [r7, #15]
 8006394:	4618      	mov	r0, r3
 8006396:	f000 f8bf 	bl	8006518 <USBD_Get_USB_Status>
 800639a:	4603      	mov	r3, r0
 800639c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800639e:	7bbb      	ldrb	r3, [r7, #14]
}
 80063a0:	4618      	mov	r0, r3
 80063a2:	3710      	adds	r7, #16
 80063a4:	46bd      	mov	sp, r7
 80063a6:	bd80      	pop	{r7, pc}

080063a8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80063a8:	b480      	push	{r7}
 80063aa:	b085      	sub	sp, #20
 80063ac:	af00      	add	r7, sp, #0
 80063ae:	6078      	str	r0, [r7, #4]
 80063b0:	460b      	mov	r3, r1
 80063b2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80063ba:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80063bc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	da0b      	bge.n	80063dc <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80063c4:	78fb      	ldrb	r3, [r7, #3]
 80063c6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80063ca:	68f9      	ldr	r1, [r7, #12]
 80063cc:	4613      	mov	r3, r2
 80063ce:	00db      	lsls	r3, r3, #3
 80063d0:	1a9b      	subs	r3, r3, r2
 80063d2:	009b      	lsls	r3, r3, #2
 80063d4:	440b      	add	r3, r1
 80063d6:	333e      	adds	r3, #62	; 0x3e
 80063d8:	781b      	ldrb	r3, [r3, #0]
 80063da:	e00b      	b.n	80063f4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80063dc:	78fb      	ldrb	r3, [r7, #3]
 80063de:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80063e2:	68f9      	ldr	r1, [r7, #12]
 80063e4:	4613      	mov	r3, r2
 80063e6:	00db      	lsls	r3, r3, #3
 80063e8:	1a9b      	subs	r3, r3, r2
 80063ea:	009b      	lsls	r3, r3, #2
 80063ec:	440b      	add	r3, r1
 80063ee:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80063f2:	781b      	ldrb	r3, [r3, #0]
  }
}
 80063f4:	4618      	mov	r0, r3
 80063f6:	3714      	adds	r7, #20
 80063f8:	46bd      	mov	sp, r7
 80063fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063fe:	4770      	bx	lr

08006400 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8006400:	b580      	push	{r7, lr}
 8006402:	b084      	sub	sp, #16
 8006404:	af00      	add	r7, sp, #0
 8006406:	6078      	str	r0, [r7, #4]
 8006408:	460b      	mov	r3, r1
 800640a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800640c:	2300      	movs	r3, #0
 800640e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006410:	2300      	movs	r3, #0
 8006412:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800641a:	78fa      	ldrb	r2, [r7, #3]
 800641c:	4611      	mov	r1, r2
 800641e:	4618      	mov	r0, r3
 8006420:	f7fb faeb 	bl	80019fa <HAL_PCD_SetAddress>
 8006424:	4603      	mov	r3, r0
 8006426:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006428:	7bfb      	ldrb	r3, [r7, #15]
 800642a:	4618      	mov	r0, r3
 800642c:	f000 f874 	bl	8006518 <USBD_Get_USB_Status>
 8006430:	4603      	mov	r3, r0
 8006432:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006434:	7bbb      	ldrb	r3, [r7, #14]
}
 8006436:	4618      	mov	r0, r3
 8006438:	3710      	adds	r7, #16
 800643a:	46bd      	mov	sp, r7
 800643c:	bd80      	pop	{r7, pc}

0800643e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800643e:	b580      	push	{r7, lr}
 8006440:	b086      	sub	sp, #24
 8006442:	af00      	add	r7, sp, #0
 8006444:	60f8      	str	r0, [r7, #12]
 8006446:	607a      	str	r2, [r7, #4]
 8006448:	603b      	str	r3, [r7, #0]
 800644a:	460b      	mov	r3, r1
 800644c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800644e:	2300      	movs	r3, #0
 8006450:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006452:	2300      	movs	r3, #0
 8006454:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800645c:	7af9      	ldrb	r1, [r7, #11]
 800645e:	683b      	ldr	r3, [r7, #0]
 8006460:	687a      	ldr	r2, [r7, #4]
 8006462:	f7fb fc04 	bl	8001c6e <HAL_PCD_EP_Transmit>
 8006466:	4603      	mov	r3, r0
 8006468:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800646a:	7dfb      	ldrb	r3, [r7, #23]
 800646c:	4618      	mov	r0, r3
 800646e:	f000 f853 	bl	8006518 <USBD_Get_USB_Status>
 8006472:	4603      	mov	r3, r0
 8006474:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8006476:	7dbb      	ldrb	r3, [r7, #22]
}
 8006478:	4618      	mov	r0, r3
 800647a:	3718      	adds	r7, #24
 800647c:	46bd      	mov	sp, r7
 800647e:	bd80      	pop	{r7, pc}

08006480 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8006480:	b580      	push	{r7, lr}
 8006482:	b086      	sub	sp, #24
 8006484:	af00      	add	r7, sp, #0
 8006486:	60f8      	str	r0, [r7, #12]
 8006488:	607a      	str	r2, [r7, #4]
 800648a:	603b      	str	r3, [r7, #0]
 800648c:	460b      	mov	r3, r1
 800648e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006490:	2300      	movs	r3, #0
 8006492:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006494:	2300      	movs	r3, #0
 8006496:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800649e:	7af9      	ldrb	r1, [r7, #11]
 80064a0:	683b      	ldr	r3, [r7, #0]
 80064a2:	687a      	ldr	r2, [r7, #4]
 80064a4:	f7fb fb80 	bl	8001ba8 <HAL_PCD_EP_Receive>
 80064a8:	4603      	mov	r3, r0
 80064aa:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80064ac:	7dfb      	ldrb	r3, [r7, #23]
 80064ae:	4618      	mov	r0, r3
 80064b0:	f000 f832 	bl	8006518 <USBD_Get_USB_Status>
 80064b4:	4603      	mov	r3, r0
 80064b6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80064b8:	7dbb      	ldrb	r3, [r7, #22]
}
 80064ba:	4618      	mov	r0, r3
 80064bc:	3718      	adds	r7, #24
 80064be:	46bd      	mov	sp, r7
 80064c0:	bd80      	pop	{r7, pc}

080064c2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80064c2:	b580      	push	{r7, lr}
 80064c4:	b082      	sub	sp, #8
 80064c6:	af00      	add	r7, sp, #0
 80064c8:	6078      	str	r0, [r7, #4]
 80064ca:	460b      	mov	r3, r1
 80064cc:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80064d4:	78fa      	ldrb	r2, [r7, #3]
 80064d6:	4611      	mov	r1, r2
 80064d8:	4618      	mov	r0, r3
 80064da:	f7fb fbb0 	bl	8001c3e <HAL_PCD_EP_GetRxCount>
 80064de:	4603      	mov	r3, r0
}
 80064e0:	4618      	mov	r0, r3
 80064e2:	3708      	adds	r7, #8
 80064e4:	46bd      	mov	sp, r7
 80064e6:	bd80      	pop	{r7, pc}

080064e8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80064e8:	b480      	push	{r7}
 80064ea:	b083      	sub	sp, #12
 80064ec:	af00      	add	r7, sp, #0
 80064ee:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80064f0:	4b03      	ldr	r3, [pc, #12]	; (8006500 <USBD_static_malloc+0x18>)
}
 80064f2:	4618      	mov	r0, r3
 80064f4:	370c      	adds	r7, #12
 80064f6:	46bd      	mov	sp, r7
 80064f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064fc:	4770      	bx	lr
 80064fe:	bf00      	nop
 8006500:	200001c4 	.word	0x200001c4

08006504 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8006504:	b480      	push	{r7}
 8006506:	b083      	sub	sp, #12
 8006508:	af00      	add	r7, sp, #0
 800650a:	6078      	str	r0, [r7, #4]

}
 800650c:	bf00      	nop
 800650e:	370c      	adds	r7, #12
 8006510:	46bd      	mov	sp, r7
 8006512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006516:	4770      	bx	lr

08006518 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8006518:	b480      	push	{r7}
 800651a:	b085      	sub	sp, #20
 800651c:	af00      	add	r7, sp, #0
 800651e:	4603      	mov	r3, r0
 8006520:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006522:	2300      	movs	r3, #0
 8006524:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8006526:	79fb      	ldrb	r3, [r7, #7]
 8006528:	2b03      	cmp	r3, #3
 800652a:	d817      	bhi.n	800655c <USBD_Get_USB_Status+0x44>
 800652c:	a201      	add	r2, pc, #4	; (adr r2, 8006534 <USBD_Get_USB_Status+0x1c>)
 800652e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006532:	bf00      	nop
 8006534:	08006545 	.word	0x08006545
 8006538:	0800654b 	.word	0x0800654b
 800653c:	08006551 	.word	0x08006551
 8006540:	08006557 	.word	0x08006557
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8006544:	2300      	movs	r3, #0
 8006546:	73fb      	strb	r3, [r7, #15]
    break;
 8006548:	e00b      	b.n	8006562 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800654a:	2303      	movs	r3, #3
 800654c:	73fb      	strb	r3, [r7, #15]
    break;
 800654e:	e008      	b.n	8006562 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8006550:	2301      	movs	r3, #1
 8006552:	73fb      	strb	r3, [r7, #15]
    break;
 8006554:	e005      	b.n	8006562 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8006556:	2303      	movs	r3, #3
 8006558:	73fb      	strb	r3, [r7, #15]
    break;
 800655a:	e002      	b.n	8006562 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800655c:	2303      	movs	r3, #3
 800655e:	73fb      	strb	r3, [r7, #15]
    break;
 8006560:	bf00      	nop
  }
  return usb_status;
 8006562:	7bfb      	ldrb	r3, [r7, #15]
}
 8006564:	4618      	mov	r0, r3
 8006566:	3714      	adds	r7, #20
 8006568:	46bd      	mov	sp, r7
 800656a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800656e:	4770      	bx	lr

08006570 <main>:
 */

#include "main.h"

int main(void)
{
 8006570:	b580      	push	{r7, lr}
 8006572:	af00      	add	r7, sp, #0
    hwInit();
 8006574:	f7fa f9d8 	bl	8000928 <hwInit>
    apInit();
 8006578:	f7f9 ffaa 	bl	80004d0 <apInit>

    apMain();
 800657c:	f7f9 ffb0 	bl	80004e0 <apMain>
    return 0;
 8006580:	2300      	movs	r3, #0
}
 8006582:	4618      	mov	r0, r3
 8006584:	bd80      	pop	{r7, pc}
	...

08006588 <__libc_init_array>:
 8006588:	b570      	push	{r4, r5, r6, lr}
 800658a:	4d0d      	ldr	r5, [pc, #52]	; (80065c0 <__libc_init_array+0x38>)
 800658c:	4c0d      	ldr	r4, [pc, #52]	; (80065c4 <__libc_init_array+0x3c>)
 800658e:	1b64      	subs	r4, r4, r5
 8006590:	10a4      	asrs	r4, r4, #2
 8006592:	2600      	movs	r6, #0
 8006594:	42a6      	cmp	r6, r4
 8006596:	d109      	bne.n	80065ac <__libc_init_array+0x24>
 8006598:	4d0b      	ldr	r5, [pc, #44]	; (80065c8 <__libc_init_array+0x40>)
 800659a:	4c0c      	ldr	r4, [pc, #48]	; (80065cc <__libc_init_array+0x44>)
 800659c:	f000 f820 	bl	80065e0 <_init>
 80065a0:	1b64      	subs	r4, r4, r5
 80065a2:	10a4      	asrs	r4, r4, #2
 80065a4:	2600      	movs	r6, #0
 80065a6:	42a6      	cmp	r6, r4
 80065a8:	d105      	bne.n	80065b6 <__libc_init_array+0x2e>
 80065aa:	bd70      	pop	{r4, r5, r6, pc}
 80065ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80065b0:	4798      	blx	r3
 80065b2:	3601      	adds	r6, #1
 80065b4:	e7ee      	b.n	8006594 <__libc_init_array+0xc>
 80065b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80065ba:	4798      	blx	r3
 80065bc:	3601      	adds	r6, #1
 80065be:	e7f2      	b.n	80065a6 <__libc_init_array+0x1e>
 80065c0:	08006660 	.word	0x08006660
 80065c4:	08006660 	.word	0x08006660
 80065c8:	08006660 	.word	0x08006660
 80065cc:	08006664 	.word	0x08006664

080065d0 <memset>:
 80065d0:	4402      	add	r2, r0
 80065d2:	4603      	mov	r3, r0
 80065d4:	4293      	cmp	r3, r2
 80065d6:	d100      	bne.n	80065da <memset+0xa>
 80065d8:	4770      	bx	lr
 80065da:	f803 1b01 	strb.w	r1, [r3], #1
 80065de:	e7f9      	b.n	80065d4 <memset+0x4>

080065e0 <_init>:
 80065e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065e2:	bf00      	nop
 80065e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80065e6:	bc08      	pop	{r3}
 80065e8:	469e      	mov	lr, r3
 80065ea:	4770      	bx	lr

080065ec <_fini>:
 80065ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065ee:	bf00      	nop
 80065f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80065f2:	bc08      	pop	{r3}
 80065f4:	469e      	mov	lr, r3
 80065f6:	4770      	bx	lr
