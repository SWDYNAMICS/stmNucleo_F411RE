
stmf411re_fw.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ac5c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001cc  0800adfc  0800adfc  0001adfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800afc8  0800afc8  0002020c  2**0
                  CONTENTS
  4 .ARM          00000008  0800afc8  0800afc8  0001afc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800afd0  0800afd0  0002020c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800afd0  0800afd0  0001afd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800afd4  0800afd4  0001afd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000020c  20000000  0800afd8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001750  2000020c  0800b1e4  0002020c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000195c  0800b1e4  0002195c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017ad0  00000000  00000000  0002023c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000048bf  00000000  00000000  00037d0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001490  00000000  00000000  0003c5d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001258  00000000  00000000  0003da60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001dd4d  00000000  00000000  0003ecb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000239c1  00000000  00000000  0005ca05  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00091c94  00000000  00000000  000803c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0011205a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005930  00000000  00000000  001120ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000020c 	.word	0x2000020c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800ade4 	.word	0x0800ade4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000210 	.word	0x20000210
 80001dc:	0800ade4 	.word	0x0800ade4

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <apInit>:
#include "qbuffer.h"



void apInit(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	af00      	add	r7, sp, #0
	uartOpen(_DEF_UART1, 57600);
 8000588:	f44f 4161 	mov.w	r1, #57600	; 0xe100
 800058c:	2000      	movs	r0, #0
 800058e:	f000 fdaf 	bl	80010f0 <uartOpen>
	uartOpen(_DEF_UART2, 57600);
 8000592:	f44f 4161 	mov.w	r1, #57600	; 0xe100
 8000596:	2001      	movs	r0, #1
 8000598:	f000 fdaa 	bl	80010f0 <uartOpen>
}
 800059c:	bf00      	nop
 800059e:	bd80      	pop	{r7, pc}

080005a0 <apMain>:

void apMain(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b08c      	sub	sp, #48	; 0x30
 80005a4:	af00      	add	r7, sp, #0
	uint32_t pre_time;

	pre_time = millis();
 80005a6:	f000 f8d0 	bl	800074a <millis>
 80005aa:	62f8      	str	r0, [r7, #44]	; 0x2c
	while (1)
	{
		if(millis() - pre_time >= 500)
 80005ac:	f000 f8cd 	bl	800074a <millis>
 80005b0:	4602      	mov	r2, r0
 80005b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80005b4:	1ad3      	subs	r3, r2, r3
 80005b6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80005ba:	d305      	bcc.n	80005c8 <apMain+0x28>
		{
			pre_time = millis();
 80005bc:	f000 f8c5 	bl	800074a <millis>
 80005c0:	62f8      	str	r0, [r7, #44]	; 0x2c
			ledToggle(_DEF_LED1);
 80005c2:	2000      	movs	r0, #0
 80005c4:	f000 fcb6 	bl	8000f34 <ledToggle>
		}

		if(uartAvailable(_DEF_UART1) > 0)
 80005c8:	2000      	movs	r0, #0
 80005ca:	f000 fe29 	bl	8001220 <uartAvailable>
 80005ce:	4603      	mov	r3, r0
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d0eb      	beq.n	80005ac <apMain+0xc>
		{
		  uint8_t rx_data;
		  rx_data = uartRead(_DEF_UART1);
 80005d4:	2000      	movs	r0, #0
 80005d6:	f000 fe55 	bl	8001284 <uartRead>
 80005da:	4603      	mov	r3, r0
 80005dc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

		  if(rx_data == '1')
 80005e0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80005e4:	2b31      	cmp	r3, #49	; 0x31
 80005e6:	d11e      	bne.n	8000626 <apMain+0x86>
		  {
		    uint8_t buf[32];

		    logPrintf("READ... \n");
 80005e8:	482d      	ldr	r0, [pc, #180]	; (80006a0 <apMain+0x100>)
 80005ea:	f009 fc7d 	bl	8009ee8 <puts>

		    flashRead(0x8000000 + (60*1024), buf, 32);
 80005ee:	463b      	mov	r3, r7
 80005f0:	2220      	movs	r2, #32
 80005f2:	4619      	mov	r1, r3
 80005f4:	482b      	ldr	r0, [pc, #172]	; (80006a4 <apMain+0x104>)
 80005f6:	f000 fb9c 	bl	8000d32 <flashRead>

		    for(int i=0; i<32; i++)
 80005fa:	2300      	movs	r3, #0
 80005fc:	62bb      	str	r3, [r7, #40]	; 0x28
 80005fe:	e00f      	b.n	8000620 <apMain+0x80>
		    {
		      logPrintf("0x%X : 0x%X\n", 0x8000000 + (60*1024)+ i ,buf[i]);
 8000600:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000602:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8000606:	f503 4370 	add.w	r3, r3, #61440	; 0xf000
 800060a:	4639      	mov	r1, r7
 800060c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800060e:	440a      	add	r2, r1
 8000610:	7812      	ldrb	r2, [r2, #0]
 8000612:	4619      	mov	r1, r3
 8000614:	4824      	ldr	r0, [pc, #144]	; (80006a8 <apMain+0x108>)
 8000616:	f009 fbe1 	bl	8009ddc <iprintf>
		    for(int i=0; i<32; i++)
 800061a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800061c:	3301      	adds	r3, #1
 800061e:	62bb      	str	r3, [r7, #40]	; 0x28
 8000620:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000622:	2b1f      	cmp	r3, #31
 8000624:	ddec      	ble.n	8000600 <apMain+0x60>
		    }
		  }
		  if(rx_data == '2')
 8000626:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800062a:	2b32      	cmp	r3, #50	; 0x32
 800062c:	d110      	bne.n	8000650 <apMain+0xb0>
		  {
		    logPrintf("ERASE... \n");
 800062e:	481f      	ldr	r0, [pc, #124]	; (80006ac <apMain+0x10c>)
 8000630:	f009 fc5a 	bl	8009ee8 <puts>
		    if(flashErase(0x8000000 + (60*1024), 32) == true)
 8000634:	2120      	movs	r1, #32
 8000636:	481b      	ldr	r0, [pc, #108]	; (80006a4 <apMain+0x104>)
 8000638:	f000 fad8 	bl	8000bec <flashErase>
 800063c:	4603      	mov	r3, r0
 800063e:	2b00      	cmp	r3, #0
 8000640:	d003      	beq.n	800064a <apMain+0xaa>
		    {
		      logPrintf("ERASE OK! \n");
 8000642:	481b      	ldr	r0, [pc, #108]	; (80006b0 <apMain+0x110>)
 8000644:	f009 fc50 	bl	8009ee8 <puts>
 8000648:	e002      	b.n	8000650 <apMain+0xb0>
		    }
		    else
		    {
		      logPrintf("ERASE FAIL..\n");
 800064a:	481a      	ldr	r0, [pc, #104]	; (80006b4 <apMain+0x114>)
 800064c:	f009 fc4c 	bl	8009ee8 <puts>
		    }
		  }
		  if(rx_data == '3')
 8000650:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000654:	2b33      	cmp	r3, #51	; 0x33
 8000656:	d1a9      	bne.n	80005ac <apMain+0xc>
		  {
		    uint8_t buf[32];

		    for(int i=0; i<32; i++)
 8000658:	2300      	movs	r3, #0
 800065a:	627b      	str	r3, [r7, #36]	; 0x24
 800065c:	e009      	b.n	8000672 <apMain+0xd2>
		    {
		      buf[i] = i;
 800065e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000660:	b2d9      	uxtb	r1, r3
 8000662:	463a      	mov	r2, r7
 8000664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000666:	4413      	add	r3, r2
 8000668:	460a      	mov	r2, r1
 800066a:	701a      	strb	r2, [r3, #0]
		    for(int i=0; i<32; i++)
 800066c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800066e:	3301      	adds	r3, #1
 8000670:	627b      	str	r3, [r7, #36]	; 0x24
 8000672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000674:	2b1f      	cmp	r3, #31
 8000676:	ddf2      	ble.n	800065e <apMain+0xbe>
		    }
		    logPrintf("WRITE...\n");
 8000678:	480f      	ldr	r0, [pc, #60]	; (80006b8 <apMain+0x118>)
 800067a:	f009 fc35 	bl	8009ee8 <puts>
		    if(flashWrite(0x8000000 + (60*1024), buf, 32) == true)
 800067e:	463b      	mov	r3, r7
 8000680:	2220      	movs	r2, #32
 8000682:	4619      	mov	r1, r3
 8000684:	4807      	ldr	r0, [pc, #28]	; (80006a4 <apMain+0x104>)
 8000686:	f000 fb0d 	bl	8000ca4 <flashWrite>
 800068a:	4603      	mov	r3, r0
 800068c:	2b00      	cmp	r3, #0
 800068e:	d003      	beq.n	8000698 <apMain+0xf8>
        {
          logPrintf("WRITE OK! \n");
 8000690:	480a      	ldr	r0, [pc, #40]	; (80006bc <apMain+0x11c>)
 8000692:	f009 fc29 	bl	8009ee8 <puts>
 8000696:	e789      	b.n	80005ac <apMain+0xc>
        }
		    else
		    {
		      logPrintf("WRITE FAIL..\n");
 8000698:	4809      	ldr	r0, [pc, #36]	; (80006c0 <apMain+0x120>)
 800069a:	f009 fc25 	bl	8009ee8 <puts>
		if(millis() - pre_time >= 500)
 800069e:	e785      	b.n	80005ac <apMain+0xc>
 80006a0:	0800adfc 	.word	0x0800adfc
 80006a4:	0800f000 	.word	0x0800f000
 80006a8:	0800ae08 	.word	0x0800ae08
 80006ac:	0800ae18 	.word	0x0800ae18
 80006b0:	0800ae24 	.word	0x0800ae24
 80006b4:	0800ae30 	.word	0x0800ae30
 80006b8:	0800ae40 	.word	0x0800ae40
 80006bc:	0800ae4c 	.word	0x0800ae4c
 80006c0:	0800ae58 	.word	0x0800ae58

080006c4 <bspInit>:
#include "uart.h"

void SystemClock_Config(void);

void bspInit(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b084      	sub	sp, #16
 80006c8:	af00      	add	r7, sp, #0
  HAL_Init();
 80006ca:	f000 ff2f 	bl	800152c <HAL_Init>
  SystemClock_Config();
 80006ce:	f000 f853 	bl	8000778 <SystemClock_Config>

  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006d2:	2300      	movs	r3, #0
 80006d4:	60fb      	str	r3, [r7, #12]
 80006d6:	4b16      	ldr	r3, [pc, #88]	; (8000730 <bspInit+0x6c>)
 80006d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006da:	4a15      	ldr	r2, [pc, #84]	; (8000730 <bspInit+0x6c>)
 80006dc:	f043 0304 	orr.w	r3, r3, #4
 80006e0:	6313      	str	r3, [r2, #48]	; 0x30
 80006e2:	4b13      	ldr	r3, [pc, #76]	; (8000730 <bspInit+0x6c>)
 80006e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006e6:	f003 0304 	and.w	r3, r3, #4
 80006ea:	60fb      	str	r3, [r7, #12]
 80006ec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006ee:	2300      	movs	r3, #0
 80006f0:	60bb      	str	r3, [r7, #8]
 80006f2:	4b0f      	ldr	r3, [pc, #60]	; (8000730 <bspInit+0x6c>)
 80006f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f6:	4a0e      	ldr	r2, [pc, #56]	; (8000730 <bspInit+0x6c>)
 80006f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006fc:	6313      	str	r3, [r2, #48]	; 0x30
 80006fe:	4b0c      	ldr	r3, [pc, #48]	; (8000730 <bspInit+0x6c>)
 8000700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000702:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000706:	60bb      	str	r3, [r7, #8]
 8000708:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800070a:	2300      	movs	r3, #0
 800070c:	607b      	str	r3, [r7, #4]
 800070e:	4b08      	ldr	r3, [pc, #32]	; (8000730 <bspInit+0x6c>)
 8000710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000712:	4a07      	ldr	r2, [pc, #28]	; (8000730 <bspInit+0x6c>)
 8000714:	f043 0301 	orr.w	r3, r3, #1
 8000718:	6313      	str	r3, [r2, #48]	; 0x30
 800071a:	4b05      	ldr	r3, [pc, #20]	; (8000730 <bspInit+0x6c>)
 800071c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071e:	f003 0301 	and.w	r3, r3, #1
 8000722:	607b      	str	r3, [r7, #4]
 8000724:	687b      	ldr	r3, [r7, #4]

}
 8000726:	bf00      	nop
 8000728:	3710      	adds	r7, #16
 800072a:	46bd      	mov	sp, r7
 800072c:	bd80      	pop	{r7, pc}
 800072e:	bf00      	nop
 8000730:	40023800 	.word	0x40023800

08000734 <delay>:
void delay(uint32_t ms)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b082      	sub	sp, #8
 8000738:	af00      	add	r7, sp, #0
 800073a:	6078      	str	r0, [r7, #4]
  HAL_Delay(ms);
 800073c:	6878      	ldr	r0, [r7, #4]
 800073e:	f000 ff67 	bl	8001610 <HAL_Delay>
}
 8000742:	bf00      	nop
 8000744:	3708      	adds	r7, #8
 8000746:	46bd      	mov	sp, r7
 8000748:	bd80      	pop	{r7, pc}

0800074a <millis>:
uint32_t millis(void)
{
 800074a:	b580      	push	{r7, lr}
 800074c:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800074e:	f000 ff53 	bl	80015f8 <HAL_GetTick>
 8000752:	4603      	mov	r3, r0
}
 8000754:	4618      	mov	r0, r3
 8000756:	bd80      	pop	{r7, pc}

08000758 <__io_putchar>:

int __io_putchar(int ch)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b082      	sub	sp, #8
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]
  uartWrite(_DEF_UART1, (uint8_t *)&ch, 1);
 8000760:	1d3b      	adds	r3, r7, #4
 8000762:	2201      	movs	r2, #1
 8000764:	4619      	mov	r1, r3
 8000766:	2000      	movs	r0, #0
 8000768:	f000 fdac 	bl	80012c4 <uartWrite>

  return 1;
 800076c:	2301      	movs	r3, #1
}
 800076e:	4618      	mov	r0, r3
 8000770:	3708      	adds	r7, #8
 8000772:	46bd      	mov	sp, r7
 8000774:	bd80      	pop	{r7, pc}
	...

08000778 <SystemClock_Config>:


void SystemClock_Config(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b094      	sub	sp, #80	; 0x50
 800077c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800077e:	f107 0320 	add.w	r3, r7, #32
 8000782:	2230      	movs	r2, #48	; 0x30
 8000784:	2100      	movs	r1, #0
 8000786:	4618      	mov	r0, r3
 8000788:	f009 fb20 	bl	8009dcc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800078c:	f107 030c 	add.w	r3, r7, #12
 8000790:	2200      	movs	r2, #0
 8000792:	601a      	str	r2, [r3, #0]
 8000794:	605a      	str	r2, [r3, #4]
 8000796:	609a      	str	r2, [r3, #8]
 8000798:	60da      	str	r2, [r3, #12]
 800079a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800079c:	2300      	movs	r3, #0
 800079e:	60bb      	str	r3, [r7, #8]
 80007a0:	4b28      	ldr	r3, [pc, #160]	; (8000844 <SystemClock_Config+0xcc>)
 80007a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007a4:	4a27      	ldr	r2, [pc, #156]	; (8000844 <SystemClock_Config+0xcc>)
 80007a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007aa:	6413      	str	r3, [r2, #64]	; 0x40
 80007ac:	4b25      	ldr	r3, [pc, #148]	; (8000844 <SystemClock_Config+0xcc>)
 80007ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007b4:	60bb      	str	r3, [r7, #8]
 80007b6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007b8:	2300      	movs	r3, #0
 80007ba:	607b      	str	r3, [r7, #4]
 80007bc:	4b22      	ldr	r3, [pc, #136]	; (8000848 <SystemClock_Config+0xd0>)
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	4a21      	ldr	r2, [pc, #132]	; (8000848 <SystemClock_Config+0xd0>)
 80007c2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80007c6:	6013      	str	r3, [r2, #0]
 80007c8:	4b1f      	ldr	r3, [pc, #124]	; (8000848 <SystemClock_Config+0xd0>)
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80007d0:	607b      	str	r3, [r7, #4]
 80007d2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 80007d4:	2305      	movs	r3, #5
 80007d6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007d8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80007dc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80007de:	2301      	movs	r3, #1
 80007e0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007e2:	2302      	movs	r3, #2
 80007e4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007e6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80007ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80007ec:	2319      	movs	r3, #25
 80007ee:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 80007f0:	23c0      	movs	r3, #192	; 0xc0
 80007f2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007f4:	2302      	movs	r3, #2
 80007f6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80007f8:	2304      	movs	r3, #4
 80007fa:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007fc:	f107 0320 	add.w	r3, r7, #32
 8000800:	4618      	mov	r0, r3
 8000802:	f003 fbd3 	bl	8003fac <HAL_RCC_OscConfig>
 8000806:	4603      	mov	r3, r0
 8000808:	2b00      	cmp	r3, #0
 800080a:	d001      	beq.n	8000810 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800080c:	f000 f81e 	bl	800084c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000810:	230f      	movs	r3, #15
 8000812:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000814:	2302      	movs	r3, #2
 8000816:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000818:	2300      	movs	r3, #0
 800081a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800081c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000820:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000822:	2300      	movs	r3, #0
 8000824:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000826:	f107 030c 	add.w	r3, r7, #12
 800082a:	2103      	movs	r1, #3
 800082c:	4618      	mov	r0, r3
 800082e:	f003 fe35 	bl	800449c <HAL_RCC_ClockConfig>
 8000832:	4603      	mov	r3, r0
 8000834:	2b00      	cmp	r3, #0
 8000836:	d001      	beq.n	800083c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000838:	f000 f808 	bl	800084c <Error_Handler>
  }
}
 800083c:	bf00      	nop
 800083e:	3750      	adds	r7, #80	; 0x50
 8000840:	46bd      	mov	sp, r7
 8000842:	bd80      	pop	{r7, pc}
 8000844:	40023800 	.word	0x40023800
 8000848:	40007000 	.word	0x40007000

0800084c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800084c:	b480      	push	{r7}
 800084e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000850:	b672      	cpsid	i
}
 8000852:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000854:	e7fe      	b.n	8000854 <Error_Handler+0x8>
	...

08000858 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000858:	b480      	push	{r7}
 800085a:	b083      	sub	sp, #12
 800085c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800085e:	2300      	movs	r3, #0
 8000860:	607b      	str	r3, [r7, #4]
 8000862:	4b10      	ldr	r3, [pc, #64]	; (80008a4 <HAL_MspInit+0x4c>)
 8000864:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000866:	4a0f      	ldr	r2, [pc, #60]	; (80008a4 <HAL_MspInit+0x4c>)
 8000868:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800086c:	6453      	str	r3, [r2, #68]	; 0x44
 800086e:	4b0d      	ldr	r3, [pc, #52]	; (80008a4 <HAL_MspInit+0x4c>)
 8000870:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000872:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000876:	607b      	str	r3, [r7, #4]
 8000878:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800087a:	2300      	movs	r3, #0
 800087c:	603b      	str	r3, [r7, #0]
 800087e:	4b09      	ldr	r3, [pc, #36]	; (80008a4 <HAL_MspInit+0x4c>)
 8000880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000882:	4a08      	ldr	r2, [pc, #32]	; (80008a4 <HAL_MspInit+0x4c>)
 8000884:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000888:	6413      	str	r3, [r2, #64]	; 0x40
 800088a:	4b06      	ldr	r3, [pc, #24]	; (80008a4 <HAL_MspInit+0x4c>)
 800088c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800088e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000892:	603b      	str	r3, [r7, #0]
 8000894:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000896:	bf00      	nop
 8000898:	370c      	adds	r7, #12
 800089a:	46bd      	mov	sp, r7
 800089c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a0:	4770      	bx	lr
 80008a2:	bf00      	nop
 80008a4:	40023800 	.word	0x40023800

080008a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008a8:	b480      	push	{r7}
 80008aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008ac:	e7fe      	b.n	80008ac <NMI_Handler+0x4>

080008ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008ae:	b480      	push	{r7}
 80008b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008b2:	e7fe      	b.n	80008b2 <HardFault_Handler+0x4>

080008b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008b4:	b480      	push	{r7}
 80008b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008b8:	e7fe      	b.n	80008b8 <MemManage_Handler+0x4>

080008ba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008ba:	b480      	push	{r7}
 80008bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008be:	e7fe      	b.n	80008be <BusFault_Handler+0x4>

080008c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008c0:	b480      	push	{r7}
 80008c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008c4:	e7fe      	b.n	80008c4 <UsageFault_Handler+0x4>

080008c6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008c6:	b480      	push	{r7}
 80008c8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008ca:	bf00      	nop
 80008cc:	46bd      	mov	sp, r7
 80008ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d2:	4770      	bx	lr

080008d4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008d4:	b480      	push	{r7}
 80008d6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008d8:	bf00      	nop
 80008da:	46bd      	mov	sp, r7
 80008dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e0:	4770      	bx	lr

080008e2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008e2:	b480      	push	{r7}
 80008e4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008e6:	bf00      	nop
 80008e8:	46bd      	mov	sp, r7
 80008ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ee:	4770      	bx	lr

080008f0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008f4:	f000 fe6c 	bl	80015d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008f8:	bf00      	nop
 80008fa:	bd80      	pop	{r7, pc}

080008fc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000900:	4802      	ldr	r0, [pc, #8]	; (800090c <USART1_IRQHandler+0x10>)
 8000902:	f004 faf1 	bl	8004ee8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000906:	bf00      	nop
 8000908:	bd80      	pop	{r7, pc}
 800090a:	bf00      	nop
 800090c:	20000250 	.word	0x20000250

08000910 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000914:	4802      	ldr	r0, [pc, #8]	; (8000920 <DMA2_Stream2_IRQHandler+0x10>)
 8000916:	f001 f9d9 	bl	8001ccc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800091a:	bf00      	nop
 800091c:	bd80      	pop	{r7, pc}
 800091e:	bf00      	nop
 8000920:	20000294 	.word	0x20000294

08000924 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000928:	4802      	ldr	r0, [pc, #8]	; (8000934 <OTG_FS_IRQHandler+0x10>)
 800092a:	f002 fb0c 	bl	8002f46 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800092e:	bf00      	nop
 8000930:	bd80      	pop	{r7, pc}
 8000932:	bf00      	nop
 8000934:	20001324 	.word	0x20001324

08000938 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b086      	sub	sp, #24
 800093c:	af00      	add	r7, sp, #0
 800093e:	60f8      	str	r0, [r7, #12]
 8000940:	60b9      	str	r1, [r7, #8]
 8000942:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000944:	2300      	movs	r3, #0
 8000946:	617b      	str	r3, [r7, #20]
 8000948:	e00a      	b.n	8000960 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800094a:	f3af 8000 	nop.w
 800094e:	4601      	mov	r1, r0
 8000950:	68bb      	ldr	r3, [r7, #8]
 8000952:	1c5a      	adds	r2, r3, #1
 8000954:	60ba      	str	r2, [r7, #8]
 8000956:	b2ca      	uxtb	r2, r1
 8000958:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800095a:	697b      	ldr	r3, [r7, #20]
 800095c:	3301      	adds	r3, #1
 800095e:	617b      	str	r3, [r7, #20]
 8000960:	697a      	ldr	r2, [r7, #20]
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	429a      	cmp	r2, r3
 8000966:	dbf0      	blt.n	800094a <_read+0x12>
	}

return len;
 8000968:	687b      	ldr	r3, [r7, #4]
}
 800096a:	4618      	mov	r0, r3
 800096c:	3718      	adds	r7, #24
 800096e:	46bd      	mov	sp, r7
 8000970:	bd80      	pop	{r7, pc}

08000972 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000972:	b580      	push	{r7, lr}
 8000974:	b086      	sub	sp, #24
 8000976:	af00      	add	r7, sp, #0
 8000978:	60f8      	str	r0, [r7, #12]
 800097a:	60b9      	str	r1, [r7, #8]
 800097c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800097e:	2300      	movs	r3, #0
 8000980:	617b      	str	r3, [r7, #20]
 8000982:	e009      	b.n	8000998 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000984:	68bb      	ldr	r3, [r7, #8]
 8000986:	1c5a      	adds	r2, r3, #1
 8000988:	60ba      	str	r2, [r7, #8]
 800098a:	781b      	ldrb	r3, [r3, #0]
 800098c:	4618      	mov	r0, r3
 800098e:	f7ff fee3 	bl	8000758 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000992:	697b      	ldr	r3, [r7, #20]
 8000994:	3301      	adds	r3, #1
 8000996:	617b      	str	r3, [r7, #20]
 8000998:	697a      	ldr	r2, [r7, #20]
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	429a      	cmp	r2, r3
 800099e:	dbf1      	blt.n	8000984 <_write+0x12>
	}
	return len;
 80009a0:	687b      	ldr	r3, [r7, #4]
}
 80009a2:	4618      	mov	r0, r3
 80009a4:	3718      	adds	r7, #24
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bd80      	pop	{r7, pc}

080009aa <_close>:

int _close(int file)
{
 80009aa:	b480      	push	{r7}
 80009ac:	b083      	sub	sp, #12
 80009ae:	af00      	add	r7, sp, #0
 80009b0:	6078      	str	r0, [r7, #4]
	return -1;
 80009b2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80009b6:	4618      	mov	r0, r3
 80009b8:	370c      	adds	r7, #12
 80009ba:	46bd      	mov	sp, r7
 80009bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c0:	4770      	bx	lr

080009c2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80009c2:	b480      	push	{r7}
 80009c4:	b083      	sub	sp, #12
 80009c6:	af00      	add	r7, sp, #0
 80009c8:	6078      	str	r0, [r7, #4]
 80009ca:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80009cc:	683b      	ldr	r3, [r7, #0]
 80009ce:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80009d2:	605a      	str	r2, [r3, #4]
	return 0;
 80009d4:	2300      	movs	r3, #0
}
 80009d6:	4618      	mov	r0, r3
 80009d8:	370c      	adds	r7, #12
 80009da:	46bd      	mov	sp, r7
 80009dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e0:	4770      	bx	lr

080009e2 <_isatty>:

int _isatty(int file)
{
 80009e2:	b480      	push	{r7}
 80009e4:	b083      	sub	sp, #12
 80009e6:	af00      	add	r7, sp, #0
 80009e8:	6078      	str	r0, [r7, #4]
	return 1;
 80009ea:	2301      	movs	r3, #1
}
 80009ec:	4618      	mov	r0, r3
 80009ee:	370c      	adds	r7, #12
 80009f0:	46bd      	mov	sp, r7
 80009f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f6:	4770      	bx	lr

080009f8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80009f8:	b480      	push	{r7}
 80009fa:	b085      	sub	sp, #20
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	60f8      	str	r0, [r7, #12]
 8000a00:	60b9      	str	r1, [r7, #8]
 8000a02:	607a      	str	r2, [r7, #4]
	return 0;
 8000a04:	2300      	movs	r3, #0
}
 8000a06:	4618      	mov	r0, r3
 8000a08:	3714      	adds	r7, #20
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a10:	4770      	bx	lr
	...

08000a14 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b086      	sub	sp, #24
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a1c:	4a14      	ldr	r2, [pc, #80]	; (8000a70 <_sbrk+0x5c>)
 8000a1e:	4b15      	ldr	r3, [pc, #84]	; (8000a74 <_sbrk+0x60>)
 8000a20:	1ad3      	subs	r3, r2, r3
 8000a22:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a24:	697b      	ldr	r3, [r7, #20]
 8000a26:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a28:	4b13      	ldr	r3, [pc, #76]	; (8000a78 <_sbrk+0x64>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d102      	bne.n	8000a36 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a30:	4b11      	ldr	r3, [pc, #68]	; (8000a78 <_sbrk+0x64>)
 8000a32:	4a12      	ldr	r2, [pc, #72]	; (8000a7c <_sbrk+0x68>)
 8000a34:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a36:	4b10      	ldr	r3, [pc, #64]	; (8000a78 <_sbrk+0x64>)
 8000a38:	681a      	ldr	r2, [r3, #0]
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	4413      	add	r3, r2
 8000a3e:	693a      	ldr	r2, [r7, #16]
 8000a40:	429a      	cmp	r2, r3
 8000a42:	d207      	bcs.n	8000a54 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a44:	f009 f998 	bl	8009d78 <__errno>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	220c      	movs	r2, #12
 8000a4c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a4e:	f04f 33ff 	mov.w	r3, #4294967295
 8000a52:	e009      	b.n	8000a68 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a54:	4b08      	ldr	r3, [pc, #32]	; (8000a78 <_sbrk+0x64>)
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a5a:	4b07      	ldr	r3, [pc, #28]	; (8000a78 <_sbrk+0x64>)
 8000a5c:	681a      	ldr	r2, [r3, #0]
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	4413      	add	r3, r2
 8000a62:	4a05      	ldr	r2, [pc, #20]	; (8000a78 <_sbrk+0x64>)
 8000a64:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a66:	68fb      	ldr	r3, [r7, #12]
}
 8000a68:	4618      	mov	r0, r3
 8000a6a:	3718      	adds	r7, #24
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	bd80      	pop	{r7, pc}
 8000a70:	20020000 	.word	0x20020000
 8000a74:	00000400 	.word	0x00000400
 8000a78:	20000228 	.word	0x20000228
 8000a7c:	20001960 	.word	0x20001960

08000a80 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a80:	b480      	push	{r7}
 8000a82:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a84:	4b06      	ldr	r3, [pc, #24]	; (8000aa0 <SystemInit+0x20>)
 8000a86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a8a:	4a05      	ldr	r2, [pc, #20]	; (8000aa0 <SystemInit+0x20>)
 8000a8c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a90:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a94:	bf00      	nop
 8000a96:	46bd      	mov	sp, r7
 8000a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9c:	4770      	bx	lr
 8000a9e:	bf00      	nop
 8000aa0:	e000ed00 	.word	0xe000ed00

08000aa4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000aa4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000adc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000aa8:	480d      	ldr	r0, [pc, #52]	; (8000ae0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000aaa:	490e      	ldr	r1, [pc, #56]	; (8000ae4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000aac:	4a0e      	ldr	r2, [pc, #56]	; (8000ae8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000aae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ab0:	e002      	b.n	8000ab8 <LoopCopyDataInit>

08000ab2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ab2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ab4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ab6:	3304      	adds	r3, #4

08000ab8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ab8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000aba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000abc:	d3f9      	bcc.n	8000ab2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000abe:	4a0b      	ldr	r2, [pc, #44]	; (8000aec <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000ac0:	4c0b      	ldr	r4, [pc, #44]	; (8000af0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000ac2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ac4:	e001      	b.n	8000aca <LoopFillZerobss>

08000ac6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ac6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ac8:	3204      	adds	r2, #4

08000aca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000aca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000acc:	d3fb      	bcc.n	8000ac6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000ace:	f7ff ffd7 	bl	8000a80 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ad2:	f009 f957 	bl	8009d84 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ad6:	f009 f943 	bl	8009d60 <main>
  bx  lr    
 8000ada:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000adc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ae0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ae4:	2000020c 	.word	0x2000020c
  ldr r2, =_sidata
 8000ae8:	0800afd8 	.word	0x0800afd8
  ldr r2, =_sbss
 8000aec:	2000020c 	.word	0x2000020c
  ldr r4, =_ebss
 8000af0:	2000195c 	.word	0x2000195c

08000af4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000af4:	e7fe      	b.n	8000af4 <ADC_IRQHandler>

08000af6 <qbufferCreate>:
{

}

bool qbufferCreate(qbuffer_t *p_node, uint8_t *p_buf, uint32_t length)
{
 8000af6:	b480      	push	{r7}
 8000af8:	b087      	sub	sp, #28
 8000afa:	af00      	add	r7, sp, #0
 8000afc:	60f8      	str	r0, [r7, #12]
 8000afe:	60b9      	str	r1, [r7, #8]
 8000b00:	607a      	str	r2, [r7, #4]
	/*Making buffer is index initializing */
	bool ret = true;
 8000b02:	2301      	movs	r3, #1
 8000b04:	75fb      	strb	r3, [r7, #23]

	p_node->in 		= 0;
 8000b06:	68fb      	ldr	r3, [r7, #12]
 8000b08:	2200      	movs	r2, #0
 8000b0a:	601a      	str	r2, [r3, #0]
	p_node->out	  = 0;
 8000b0c:	68fb      	ldr	r3, [r7, #12]
 8000b0e:	2200      	movs	r2, #0
 8000b10:	605a      	str	r2, [r3, #4]
	p_node->len   = length;
 8000b12:	68fb      	ldr	r3, [r7, #12]
 8000b14:	687a      	ldr	r2, [r7, #4]
 8000b16:	609a      	str	r2, [r3, #8]
	p_node->p_buf = p_buf;
 8000b18:	68fb      	ldr	r3, [r7, #12]
 8000b1a:	68ba      	ldr	r2, [r7, #8]
 8000b1c:	60da      	str	r2, [r3, #12]

	return ret;
 8000b1e:	7dfb      	ldrb	r3, [r7, #23]
}
 8000b20:	4618      	mov	r0, r3
 8000b22:	371c      	adds	r7, #28
 8000b24:	46bd      	mov	sp, r7
 8000b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2a:	4770      	bx	lr

08000b2c <qbufferRead>:
	return ret;
}

/* Read qbuffer and input to p_data. */
bool qbufferRead(qbuffer_t *p_node, uint8_t *p_data, uint32_t length)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	b087      	sub	sp, #28
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	60f8      	str	r0, [r7, #12]
 8000b34:	60b9      	str	r1, [r7, #8]
 8000b36:	607a      	str	r2, [r7, #4]
	bool ret = true;
 8000b38:	2301      	movs	r3, #1
 8000b3a:	75fb      	strb	r3, [r7, #23]
	for(int i = 0; i < length; i++)
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	613b      	str	r3, [r7, #16]
 8000b40:	e026      	b.n	8000b90 <qbufferRead+0x64>
	{
		if(p_node->p_buf != NULL)
 8000b42:	68fb      	ldr	r3, [r7, #12]
 8000b44:	68db      	ldr	r3, [r3, #12]
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d009      	beq.n	8000b5e <qbufferRead+0x32>
		{
			p_data[i] = p_node->p_buf[p_node->out];
 8000b4a:	68fb      	ldr	r3, [r7, #12]
 8000b4c:	68da      	ldr	r2, [r3, #12]
 8000b4e:	68fb      	ldr	r3, [r7, #12]
 8000b50:	685b      	ldr	r3, [r3, #4]
 8000b52:	441a      	add	r2, r3
 8000b54:	693b      	ldr	r3, [r7, #16]
 8000b56:	68b9      	ldr	r1, [r7, #8]
 8000b58:	440b      	add	r3, r1
 8000b5a:	7812      	ldrb	r2, [r2, #0]
 8000b5c:	701a      	strb	r2, [r3, #0]
		}
		if(p_node->out != p_node->in)
 8000b5e:	68fb      	ldr	r3, [r7, #12]
 8000b60:	685a      	ldr	r2, [r3, #4]
 8000b62:	68fb      	ldr	r3, [r7, #12]
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	429a      	cmp	r2, r3
 8000b68:	d00c      	beq.n	8000b84 <qbufferRead+0x58>
		{
			/* index update */
			p_node->out = (p_node->out + 1) % p_node->len;
 8000b6a:	68fb      	ldr	r3, [r7, #12]
 8000b6c:	685b      	ldr	r3, [r3, #4]
 8000b6e:	3301      	adds	r3, #1
 8000b70:	68fa      	ldr	r2, [r7, #12]
 8000b72:	6892      	ldr	r2, [r2, #8]
 8000b74:	fbb3 f1f2 	udiv	r1, r3, r2
 8000b78:	fb01 f202 	mul.w	r2, r1, r2
 8000b7c:	1a9a      	subs	r2, r3, r2
 8000b7e:	68fb      	ldr	r3, [r7, #12]
 8000b80:	605a      	str	r2, [r3, #4]
 8000b82:	e002      	b.n	8000b8a <qbufferRead+0x5e>
		}
		else /*when in idx = out idx*/
		{
			ret = false;
 8000b84:	2300      	movs	r3, #0
 8000b86:	75fb      	strb	r3, [r7, #23]
			break;
 8000b88:	e006      	b.n	8000b98 <qbufferRead+0x6c>
	for(int i = 0; i < length; i++)
 8000b8a:	693b      	ldr	r3, [r7, #16]
 8000b8c:	3301      	adds	r3, #1
 8000b8e:	613b      	str	r3, [r7, #16]
 8000b90:	693b      	ldr	r3, [r7, #16]
 8000b92:	687a      	ldr	r2, [r7, #4]
 8000b94:	429a      	cmp	r2, r3
 8000b96:	d8d4      	bhi.n	8000b42 <qbufferRead+0x16>
		}
	}
	return ret;
 8000b98:	7dfb      	ldrb	r3, [r7, #23]
}
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	371c      	adds	r7, #28
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba4:	4770      	bx	lr

08000ba6 <qbufferAvailable>:

/*transmit struct pointer, receive current buffer's data number*/
uint32_t qbufferAvailable(qbuffer_t *p_node)
{
 8000ba6:	b480      	push	{r7}
 8000ba8:	b085      	sub	sp, #20
 8000baa:	af00      	add	r7, sp, #0
 8000bac:	6078      	str	r0, [r7, #4]
	uint32_t ret;

	ret = (p_node->len + p_node->in - p_node->out) % p_node->len;
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	689a      	ldr	r2, [r3, #8]
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	441a      	add	r2, r3
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	685b      	ldr	r3, [r3, #4]
 8000bbc:	1ad3      	subs	r3, r2, r3
 8000bbe:	687a      	ldr	r2, [r7, #4]
 8000bc0:	6892      	ldr	r2, [r2, #8]
 8000bc2:	fbb3 f1f2 	udiv	r1, r3, r2
 8000bc6:	fb01 f202 	mul.w	r2, r1, r2
 8000bca:	1a9b      	subs	r3, r3, r2
 8000bcc:	60fb      	str	r3, [r7, #12]

	return ret;
 8000bce:	68fb      	ldr	r3, [r7, #12]
}
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	3714      	adds	r7, #20
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bda:	4770      	bx	lr

08000bdc <flashInit>:
  {FLASH_SECTOR_6, 0x08040000, 131072},
  {FLASH_SECTOR_7, 0x08060000, 131072}
};

bool flashInit(void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	af00      	add	r7, sp, #0
  return true;
 8000be0:	2301      	movs	r3, #1
}
 8000be2:	4618      	mov	r0, r3
 8000be4:	46bd      	mov	sp, r7
 8000be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bea:	4770      	bx	lr

08000bec <flashErase>:
bool flashErase(uint32_t addr, uint32_t length)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b08c      	sub	sp, #48	; 0x30
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
 8000bf4:	6039      	str	r1, [r7, #0]
  bool ret = false;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  HAL_StatusTypeDef status;
  FLASH_EraseInitTypeDef init;
  uint32_t sector_error;

  int16_t start_sector_num = -1;
 8000bfc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000c00:	85bb      	strh	r3, [r7, #44]	; 0x2c
  uint32_t sector_count    = 0;
 8000c02:	2300      	movs	r3, #0
 8000c04:	62bb      	str	r3, [r7, #40]	; 0x28

  for(int i=0; i<FLASH_SECTOR_MAX; i++)
 8000c06:	2300      	movs	r3, #0
 8000c08:	627b      	str	r3, [r7, #36]	; 0x24
 8000c0a:	e015      	b.n	8000c38 <flashErase+0x4c>
  {
    if(flashInSector(i, addr, length) == true)
 8000c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c0e:	b29b      	uxth	r3, r3
 8000c10:	683a      	ldr	r2, [r7, #0]
 8000c12:	6879      	ldr	r1, [r7, #4]
 8000c14:	4618      	mov	r0, r3
 8000c16:	f000 f8af 	bl	8000d78 <flashInSector>
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d008      	beq.n	8000c32 <flashErase+0x46>
    {
      if(start_sector_num < 0)
 8000c20:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	da01      	bge.n	8000c2c <flashErase+0x40>
      {
        start_sector_num = i;
 8000c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c2a:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }
      sector_count++;
 8000c2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c2e:	3301      	adds	r3, #1
 8000c30:	62bb      	str	r3, [r7, #40]	; 0x28
  for(int i=0; i<FLASH_SECTOR_MAX; i++)
 8000c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c34:	3301      	adds	r3, #1
 8000c36:	627b      	str	r3, [r7, #36]	; 0x24
 8000c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c3a:	2b07      	cmp	r3, #7
 8000c3c:	dde6      	ble.n	8000c0c <flashErase+0x20>
    }
  }

  if(sector_count > 0 )
 8000c3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d027      	beq.n	8000c94 <flashErase+0xa8>
  {
    HAL_FLASH_Unlock();
 8000c44:	f001 fb00 	bl	8002248 <HAL_FLASH_Unlock>
    init.TypeErase    = FLASH_TYPEERASE_SECTORS;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	60fb      	str	r3, [r7, #12]
    init.Banks        = FLASH_BANK_1;
 8000c4c:	2301      	movs	r3, #1
 8000c4e:	613b      	str	r3, [r7, #16]
    init.Sector       = flash_tbl[start_sector_num].sector;
 8000c50:	f9b7 202c 	ldrsh.w	r2, [r7, #44]	; 0x2c
 8000c54:	4912      	ldr	r1, [pc, #72]	; (8000ca0 <flashErase+0xb4>)
 8000c56:	4613      	mov	r3, r2
 8000c58:	005b      	lsls	r3, r3, #1
 8000c5a:	4413      	add	r3, r2
 8000c5c:	009b      	lsls	r3, r3, #2
 8000c5e:	440b      	add	r3, r1
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	617b      	str	r3, [r7, #20]
    init.NbSectors    = sector_count;
 8000c64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c66:	61bb      	str	r3, [r7, #24]
    init.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 8000c68:	2302      	movs	r3, #2
 8000c6a:	61fb      	str	r3, [r7, #28]

    status = HAL_FLASHEx_Erase(&init, &sector_error);
 8000c6c:	f107 0208 	add.w	r2, r7, #8
 8000c70:	f107 030c 	add.w	r3, r7, #12
 8000c74:	4611      	mov	r1, r2
 8000c76:	4618      	mov	r0, r3
 8000c78:	f001 fc58 	bl	800252c <HAL_FLASHEx_Erase>
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    if(status == HAL_OK)
 8000c82:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d102      	bne.n	8000c90 <flashErase+0xa4>
    {
      ret = true;
 8000c8a:	2301      	movs	r3, #1
 8000c8c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }
    HAL_FLASH_Lock();
 8000c90:	f001 fafc 	bl	800228c <HAL_FLASH_Lock>
  }

  return ret;
 8000c94:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000c98:	4618      	mov	r0, r3
 8000c9a:	3730      	adds	r7, #48	; 0x30
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	bd80      	pop	{r7, pc}
 8000ca0:	0800aec8 	.word	0x0800aec8

08000ca4 <flashWrite>:
bool flashWrite(uint32_t addr, uint8_t *p_data, uint32_t length)
{
 8000ca4:	b5b0      	push	{r4, r5, r7, lr}
 8000ca6:	b088      	sub	sp, #32
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	60f8      	str	r0, [r7, #12]
 8000cac:	60b9      	str	r1, [r7, #8]
 8000cae:	607a      	str	r2, [r7, #4]
  bool ret = true;
 8000cb0:	2301      	movs	r3, #1
 8000cb2:	77fb      	strb	r3, [r7, #31]

  HAL_StatusTypeDef status;

  if(addr%2 != 0)
 8000cb4:	68fb      	ldr	r3, [r7, #12]
 8000cb6:	f003 0301 	and.w	r3, r3, #1
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d001      	beq.n	8000cc2 <flashWrite+0x1e>
  {
    return false;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	e033      	b.n	8000d2a <flashWrite+0x86>
  }
  HAL_FLASH_Unlock();
 8000cc2:	f001 fac1 	bl	8002248 <HAL_FLASH_Unlock>
  for(int i=0; i<length; i+=2)
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	61bb      	str	r3, [r7, #24]
 8000cca:	e027      	b.n	8000d1c <flashWrite+0x78>
  {//per HALFWORD 16bit
    uint16_t data;

    data  = p_data[i+0] << 0; // is equal = *(p_data + i);???
 8000ccc:	69bb      	ldr	r3, [r7, #24]
 8000cce:	68ba      	ldr	r2, [r7, #8]
 8000cd0:	4413      	add	r3, r2
 8000cd2:	781b      	ldrb	r3, [r3, #0]
 8000cd4:	82fb      	strh	r3, [r7, #22]
    data |= p_data[i+1] << 8;
 8000cd6:	69bb      	ldr	r3, [r7, #24]
 8000cd8:	3301      	adds	r3, #1
 8000cda:	68ba      	ldr	r2, [r7, #8]
 8000cdc:	4413      	add	r3, r2
 8000cde:	781b      	ldrb	r3, [r3, #0]
 8000ce0:	021b      	lsls	r3, r3, #8
 8000ce2:	b21a      	sxth	r2, r3
 8000ce4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000ce8:	4313      	orrs	r3, r2
 8000cea:	b21b      	sxth	r3, r3
 8000cec:	82fb      	strh	r3, [r7, #22]

    status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, addr + i, (uint64_t)data);// 16bit write
 8000cee:	69ba      	ldr	r2, [r7, #24]
 8000cf0:	68fb      	ldr	r3, [r7, #12]
 8000cf2:	18d1      	adds	r1, r2, r3
 8000cf4:	8afb      	ldrh	r3, [r7, #22]
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	461c      	mov	r4, r3
 8000cfa:	4615      	mov	r5, r2
 8000cfc:	4622      	mov	r2, r4
 8000cfe:	462b      	mov	r3, r5
 8000d00:	2001      	movs	r0, #1
 8000d02:	f001 fa4d 	bl	80021a0 <HAL_FLASH_Program>
 8000d06:	4603      	mov	r3, r0
 8000d08:	757b      	strb	r3, [r7, #21]
    if(status != HAL_OK)
 8000d0a:	7d7b      	ldrb	r3, [r7, #21]
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d002      	beq.n	8000d16 <flashWrite+0x72>
    {
      ret = false;
 8000d10:	2300      	movs	r3, #0
 8000d12:	77fb      	strb	r3, [r7, #31]
      break;
 8000d14:	e006      	b.n	8000d24 <flashWrite+0x80>
  for(int i=0; i<length; i+=2)
 8000d16:	69bb      	ldr	r3, [r7, #24]
 8000d18:	3302      	adds	r3, #2
 8000d1a:	61bb      	str	r3, [r7, #24]
 8000d1c:	69bb      	ldr	r3, [r7, #24]
 8000d1e:	687a      	ldr	r2, [r7, #4]
 8000d20:	429a      	cmp	r2, r3
 8000d22:	d8d3      	bhi.n	8000ccc <flashWrite+0x28>
    }
  }

  HAL_FLASH_Lock();
 8000d24:	f001 fab2 	bl	800228c <HAL_FLASH_Lock>

  return ret;
 8000d28:	7ffb      	ldrb	r3, [r7, #31]
}
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	3720      	adds	r7, #32
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bdb0      	pop	{r4, r5, r7, pc}

08000d32 <flashRead>:
bool flashRead(uint32_t addr, uint8_t *p_data, uint32_t length)
{
 8000d32:	b480      	push	{r7}
 8000d34:	b089      	sub	sp, #36	; 0x24
 8000d36:	af00      	add	r7, sp, #0
 8000d38:	60f8      	str	r0, [r7, #12]
 8000d3a:	60b9      	str	r1, [r7, #8]
 8000d3c:	607a      	str	r2, [r7, #4]
  bool ret = true;
 8000d3e:	2301      	movs	r3, #1
 8000d40:	76fb      	strb	r3, [r7, #27]

  uint8_t *p_byte = (uint8_t *)addr;//-> changing address meaning value
 8000d42:	68fb      	ldr	r3, [r7, #12]
 8000d44:	617b      	str	r3, [r7, #20]

  for(int i=0; i<length; i++)
 8000d46:	2300      	movs	r3, #0
 8000d48:	61fb      	str	r3, [r7, #28]
 8000d4a:	e00a      	b.n	8000d62 <flashRead+0x30>
  {
    p_data[i] = p_byte[i];
 8000d4c:	69fb      	ldr	r3, [r7, #28]
 8000d4e:	697a      	ldr	r2, [r7, #20]
 8000d50:	441a      	add	r2, r3
 8000d52:	69fb      	ldr	r3, [r7, #28]
 8000d54:	68b9      	ldr	r1, [r7, #8]
 8000d56:	440b      	add	r3, r1
 8000d58:	7812      	ldrb	r2, [r2, #0]
 8000d5a:	701a      	strb	r2, [r3, #0]
  for(int i=0; i<length; i++)
 8000d5c:	69fb      	ldr	r3, [r7, #28]
 8000d5e:	3301      	adds	r3, #1
 8000d60:	61fb      	str	r3, [r7, #28]
 8000d62:	69fb      	ldr	r3, [r7, #28]
 8000d64:	687a      	ldr	r2, [r7, #4]
 8000d66:	429a      	cmp	r2, r3
 8000d68:	d8f0      	bhi.n	8000d4c <flashRead+0x1a>
  }

  return ret;
 8000d6a:	7efb      	ldrb	r3, [r7, #27]
}
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	3724      	adds	r7, #36	; 0x24
 8000d70:	46bd      	mov	sp, r7
 8000d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d76:	4770      	bx	lr

08000d78 <flashInSector>:
bool flashInSector(uint16_t sector_num, uint32_t addr, uint32_t length)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	b08b      	sub	sp, #44	; 0x2c
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	4603      	mov	r3, r0
 8000d80:	60b9      	str	r1, [r7, #8]
 8000d82:	607a      	str	r2, [r7, #4]
 8000d84:	81fb      	strh	r3, [r7, #14]
  bool ret = false;
 8000d86:	2300      	movs	r3, #0
 8000d88:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t sector_start;
  uint32_t sector_end;
  uint32_t flash_start;
  uint32_t flash_end;

  sector_start = flash_tbl[sector_num].addr;
 8000d8c:	89fa      	ldrh	r2, [r7, #14]
 8000d8e:	492c      	ldr	r1, [pc, #176]	; (8000e40 <flashInSector+0xc8>)
 8000d90:	4613      	mov	r3, r2
 8000d92:	005b      	lsls	r3, r3, #1
 8000d94:	4413      	add	r3, r2
 8000d96:	009b      	lsls	r3, r3, #2
 8000d98:	440b      	add	r3, r1
 8000d9a:	3304      	adds	r3, #4
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	623b      	str	r3, [r7, #32]
  sector_end   = flash_tbl[sector_num].addr + flash_tbl[sector_num].length - 1;
 8000da0:	89fa      	ldrh	r2, [r7, #14]
 8000da2:	4927      	ldr	r1, [pc, #156]	; (8000e40 <flashInSector+0xc8>)
 8000da4:	4613      	mov	r3, r2
 8000da6:	005b      	lsls	r3, r3, #1
 8000da8:	4413      	add	r3, r2
 8000daa:	009b      	lsls	r3, r3, #2
 8000dac:	440b      	add	r3, r1
 8000dae:	3304      	adds	r3, #4
 8000db0:	6819      	ldr	r1, [r3, #0]
 8000db2:	89fa      	ldrh	r2, [r7, #14]
 8000db4:	4822      	ldr	r0, [pc, #136]	; (8000e40 <flashInSector+0xc8>)
 8000db6:	4613      	mov	r3, r2
 8000db8:	005b      	lsls	r3, r3, #1
 8000dba:	4413      	add	r3, r2
 8000dbc:	009b      	lsls	r3, r3, #2
 8000dbe:	4403      	add	r3, r0
 8000dc0:	3308      	adds	r3, #8
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	440b      	add	r3, r1
 8000dc6:	3b01      	subs	r3, #1
 8000dc8:	61fb      	str	r3, [r7, #28]
  flash_start  = addr;
 8000dca:	68bb      	ldr	r3, [r7, #8]
 8000dcc:	61bb      	str	r3, [r7, #24]
  flash_end    = addr + length - 1;
 8000dce:	68ba      	ldr	r2, [r7, #8]
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	4413      	add	r3, r2
 8000dd4:	3b01      	subs	r3, #1
 8000dd6:	617b      	str	r3, [r7, #20]

  if(sector_start >= flash_start && sector_start <= flash_end)
 8000dd8:	6a3a      	ldr	r2, [r7, #32]
 8000dda:	69bb      	ldr	r3, [r7, #24]
 8000ddc:	429a      	cmp	r2, r3
 8000dde:	d306      	bcc.n	8000dee <flashInSector+0x76>
 8000de0:	6a3a      	ldr	r2, [r7, #32]
 8000de2:	697b      	ldr	r3, [r7, #20]
 8000de4:	429a      	cmp	r2, r3
 8000de6:	d802      	bhi.n	8000dee <flashInSector+0x76>
  {
    ret = true;
 8000de8:	2301      	movs	r3, #1
 8000dea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  if(sector_end >= flash_start && sector_end <= flash_end)
 8000dee:	69fa      	ldr	r2, [r7, #28]
 8000df0:	69bb      	ldr	r3, [r7, #24]
 8000df2:	429a      	cmp	r2, r3
 8000df4:	d306      	bcc.n	8000e04 <flashInSector+0x8c>
 8000df6:	69fa      	ldr	r2, [r7, #28]
 8000df8:	697b      	ldr	r3, [r7, #20]
 8000dfa:	429a      	cmp	r2, r3
 8000dfc:	d802      	bhi.n	8000e04 <flashInSector+0x8c>
  {
    ret = true;
 8000dfe:	2301      	movs	r3, #1
 8000e00:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  if(flash_start >= sector_start && flash_start <= sector_end)
 8000e04:	69ba      	ldr	r2, [r7, #24]
 8000e06:	6a3b      	ldr	r3, [r7, #32]
 8000e08:	429a      	cmp	r2, r3
 8000e0a:	d306      	bcc.n	8000e1a <flashInSector+0xa2>
 8000e0c:	69ba      	ldr	r2, [r7, #24]
 8000e0e:	69fb      	ldr	r3, [r7, #28]
 8000e10:	429a      	cmp	r2, r3
 8000e12:	d802      	bhi.n	8000e1a <flashInSector+0xa2>
  {
    ret = true;
 8000e14:	2301      	movs	r3, #1
 8000e16:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  if(flash_end >= sector_start && flash_end <= sector_end)
 8000e1a:	697a      	ldr	r2, [r7, #20]
 8000e1c:	6a3b      	ldr	r3, [r7, #32]
 8000e1e:	429a      	cmp	r2, r3
 8000e20:	d306      	bcc.n	8000e30 <flashInSector+0xb8>
 8000e22:	697a      	ldr	r2, [r7, #20]
 8000e24:	69fb      	ldr	r3, [r7, #28]
 8000e26:	429a      	cmp	r2, r3
 8000e28:	d802      	bhi.n	8000e30 <flashInSector+0xb8>
  {
    ret = true;
 8000e2a:	2301      	movs	r3, #1
 8000e2c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  return ret;
 8000e30:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8000e34:	4618      	mov	r0, r3
 8000e36:	372c      	adds	r7, #44	; 0x2c
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3e:	4770      	bx	lr
 8000e40:	0800aec8 	.word	0x0800aec8

08000e44 <ledInit>:
{
	{GPIOC, GPIO_PIN_13, GPIO_PIN_SET, GPIO_PIN_RESET}
};

bool ledInit(void)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b088      	sub	sp, #32
 8000e48:	af00      	add	r7, sp, #0
	bool ret = true;
 8000e4a:	2301      	movs	r3, #1
 8000e4c:	76fb      	strb	r3, [r7, #27]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e4e:	1d3b      	adds	r3, r7, #4
 8000e50:	2200      	movs	r2, #0
 8000e52:	601a      	str	r2, [r3, #0]
 8000e54:	605a      	str	r2, [r3, #4]
 8000e56:	609a      	str	r2, [r3, #8]
 8000e58:	60da      	str	r2, [r3, #12]
 8000e5a:	611a      	str	r2, [r3, #16]

	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	603b      	str	r3, [r7, #0]
 8000e60:	4b1d      	ldr	r3, [pc, #116]	; (8000ed8 <ledInit+0x94>)
 8000e62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e64:	4a1c      	ldr	r2, [pc, #112]	; (8000ed8 <ledInit+0x94>)
 8000e66:	f043 0301 	orr.w	r3, r3, #1
 8000e6a:	6313      	str	r3, [r2, #48]	; 0x30
 8000e6c:	4b1a      	ldr	r3, [pc, #104]	; (8000ed8 <ledInit+0x94>)
 8000e6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e70:	f003 0301 	and.w	r3, r3, #1
 8000e74:	603b      	str	r3, [r7, #0]
 8000e76:	683b      	ldr	r3, [r7, #0]

	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e78:	2301      	movs	r3, #1
 8000e7a:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e80:	2300      	movs	r3, #0
 8000e82:	613b      	str	r3, [r7, #16]

	for(int i = 0; i < LED_MAX_CHANNEL; i++)
 8000e84:	2300      	movs	r3, #0
 8000e86:	61fb      	str	r3, [r7, #28]
 8000e88:	e01e      	b.n	8000ec8 <ledInit+0x84>
	{
		ledOff(i);
 8000e8a:	69fb      	ldr	r3, [r7, #28]
 8000e8c:	b2db      	uxtb	r3, r3
 8000e8e:	4618      	mov	r0, r3
 8000e90:	f000 f826 	bl	8000ee0 <ledOff>
		GPIO_InitStruct.Pin = led_tbl[i].pin;
 8000e94:	4911      	ldr	r1, [pc, #68]	; (8000edc <ledInit+0x98>)
 8000e96:	69fa      	ldr	r2, [r7, #28]
 8000e98:	4613      	mov	r3, r2
 8000e9a:	005b      	lsls	r3, r3, #1
 8000e9c:	4413      	add	r3, r2
 8000e9e:	009b      	lsls	r3, r3, #2
 8000ea0:	440b      	add	r3, r1
 8000ea2:	3304      	adds	r3, #4
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	607b      	str	r3, [r7, #4]
		HAL_GPIO_Init(led_tbl[i].port, &GPIO_InitStruct);
 8000ea8:	490c      	ldr	r1, [pc, #48]	; (8000edc <ledInit+0x98>)
 8000eaa:	69fa      	ldr	r2, [r7, #28]
 8000eac:	4613      	mov	r3, r2
 8000eae:	005b      	lsls	r3, r3, #1
 8000eb0:	4413      	add	r3, r2
 8000eb2:	009b      	lsls	r3, r3, #2
 8000eb4:	440b      	add	r3, r1
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	1d3a      	adds	r2, r7, #4
 8000eba:	4611      	mov	r1, r2
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	f001 fc57 	bl	8002770 <HAL_GPIO_Init>
	for(int i = 0; i < LED_MAX_CHANNEL; i++)
 8000ec2:	69fb      	ldr	r3, [r7, #28]
 8000ec4:	3301      	adds	r3, #1
 8000ec6:	61fb      	str	r3, [r7, #28]
 8000ec8:	69fb      	ldr	r3, [r7, #28]
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	dddd      	ble.n	8000e8a <ledInit+0x46>
	}
	return ret;
 8000ece:	7efb      	ldrb	r3, [r7, #27]
}
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	3720      	adds	r7, #32
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	bd80      	pop	{r7, pc}
 8000ed8:	40023800 	.word	0x40023800
 8000edc:	20000004 	.word	0x20000004

08000ee0 <ledOff>:
void ledOn(uint8_t ch)
{
	HAL_GPIO_WritePin(led_tbl[ch].port, led_tbl[ch].pin, led_tbl[ch].on_state);
}
void ledOff(uint8_t ch)
{
 8000ee0:	b590      	push	{r4, r7, lr}
 8000ee2:	b083      	sub	sp, #12
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(led_tbl[ch].port, led_tbl[ch].pin, led_tbl[ch].off_state);
 8000eea:	79fa      	ldrb	r2, [r7, #7]
 8000eec:	4910      	ldr	r1, [pc, #64]	; (8000f30 <ledOff+0x50>)
 8000eee:	4613      	mov	r3, r2
 8000ef0:	005b      	lsls	r3, r3, #1
 8000ef2:	4413      	add	r3, r2
 8000ef4:	009b      	lsls	r3, r3, #2
 8000ef6:	440b      	add	r3, r1
 8000ef8:	6818      	ldr	r0, [r3, #0]
 8000efa:	79fa      	ldrb	r2, [r7, #7]
 8000efc:	490c      	ldr	r1, [pc, #48]	; (8000f30 <ledOff+0x50>)
 8000efe:	4613      	mov	r3, r2
 8000f00:	005b      	lsls	r3, r3, #1
 8000f02:	4413      	add	r3, r2
 8000f04:	009b      	lsls	r3, r3, #2
 8000f06:	440b      	add	r3, r1
 8000f08:	3304      	adds	r3, #4
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	b299      	uxth	r1, r3
 8000f0e:	79fa      	ldrb	r2, [r7, #7]
 8000f10:	4c07      	ldr	r4, [pc, #28]	; (8000f30 <ledOff+0x50>)
 8000f12:	4613      	mov	r3, r2
 8000f14:	005b      	lsls	r3, r3, #1
 8000f16:	4413      	add	r3, r2
 8000f18:	009b      	lsls	r3, r3, #2
 8000f1a:	4423      	add	r3, r4
 8000f1c:	3309      	adds	r3, #9
 8000f1e:	781b      	ldrb	r3, [r3, #0]
 8000f20:	461a      	mov	r2, r3
 8000f22:	f001 fe8d 	bl	8002c40 <HAL_GPIO_WritePin>
}
 8000f26:	bf00      	nop
 8000f28:	370c      	adds	r7, #12
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd90      	pop	{r4, r7, pc}
 8000f2e:	bf00      	nop
 8000f30:	20000004 	.word	0x20000004

08000f34 <ledToggle>:
void ledToggle(uint8_t ch)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b082      	sub	sp, #8
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_TogglePin(led_tbl[ch].port, led_tbl[ch].pin);
 8000f3e:	79fa      	ldrb	r2, [r7, #7]
 8000f40:	490b      	ldr	r1, [pc, #44]	; (8000f70 <ledToggle+0x3c>)
 8000f42:	4613      	mov	r3, r2
 8000f44:	005b      	lsls	r3, r3, #1
 8000f46:	4413      	add	r3, r2
 8000f48:	009b      	lsls	r3, r3, #2
 8000f4a:	440b      	add	r3, r1
 8000f4c:	6818      	ldr	r0, [r3, #0]
 8000f4e:	79fa      	ldrb	r2, [r7, #7]
 8000f50:	4907      	ldr	r1, [pc, #28]	; (8000f70 <ledToggle+0x3c>)
 8000f52:	4613      	mov	r3, r2
 8000f54:	005b      	lsls	r3, r3, #1
 8000f56:	4413      	add	r3, r2
 8000f58:	009b      	lsls	r3, r3, #2
 8000f5a:	440b      	add	r3, r1
 8000f5c:	3304      	adds	r3, #4
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	b29b      	uxth	r3, r3
 8000f62:	4619      	mov	r1, r3
 8000f64:	f001 fe85 	bl	8002c72 <HAL_GPIO_TogglePin>
}
 8000f68:	bf00      	nop
 8000f6a:	3708      	adds	r7, #8
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bd80      	pop	{r7, pc}
 8000f70:	20000004 	.word	0x20000004

08000f74 <resetInit>:
#include "rtc.h"

static uint32_t reset_count = 0;

bool resetInit(void)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b082      	sub	sp, #8
 8000f78:	af00      	add	r7, sp, #0
	bool ret = true;
 8000f7a:	2301      	movs	r3, #1
 8000f7c:	71fb      	strb	r3, [r7, #7]

	if(RCC->CSR & (1<<26))
 8000f7e:	4b11      	ldr	r3, [pc, #68]	; (8000fc4 <resetInit+0x50>)
 8000f80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000f82:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d013      	beq.n	8000fb2 <resetInit+0x3e>
	{
		rtcBackupRegWrite(0, rtcBackupRegRead(0) + 1);
 8000f8a:	2000      	movs	r0, #0
 8000f8c:	f000 f85a 	bl	8001044 <rtcBackupRegRead>
 8000f90:	4603      	mov	r3, r0
 8000f92:	3301      	adds	r3, #1
 8000f94:	4619      	mov	r1, r3
 8000f96:	2000      	movs	r0, #0
 8000f98:	f000 f844 	bl	8001024 <rtcBackupRegWrite>
		delay(500);
 8000f9c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000fa0:	f7ff fbc8 	bl	8000734 <delay>
		/* due to multiple input */
		reset_count = rtcBackupRegRead(0);
 8000fa4:	2000      	movs	r0, #0
 8000fa6:	f000 f84d 	bl	8001044 <rtcBackupRegRead>
 8000faa:	4603      	mov	r3, r0
 8000fac:	461a      	mov	r2, r3
 8000fae:	4b06      	ldr	r3, [pc, #24]	; (8000fc8 <resetInit+0x54>)
 8000fb0:	601a      	str	r2, [r3, #0]
		/* one count increase itself */
	}
	rtcBackupRegWrite(0, 0);
 8000fb2:	2100      	movs	r1, #0
 8000fb4:	2000      	movs	r0, #0
 8000fb6:	f000 f835 	bl	8001024 <rtcBackupRegWrite>
	return ret;
 8000fba:	79fb      	ldrb	r3, [r7, #7]
}
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	3708      	adds	r7, #8
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bd80      	pop	{r7, pc}
 8000fc4:	40023800 	.word	0x40023800
 8000fc8:	2000022c 	.word	0x2000022c

08000fcc <rtcInit>:
#include "rtc.h"

static RTC_HandleTypeDef hrtc;

bool rtcInit(void)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b082      	sub	sp, #8
 8000fd0:	af00      	add	r7, sp, #0
	bool ret = true;
 8000fd2:	2301      	movs	r3, #1
 8000fd4:	71fb      	strb	r3, [r7, #7]
	// also need to enable GPIOC -> already declared on "bsp.c"
	hrtc.Instance 						= RTC;
 8000fd6:	4b11      	ldr	r3, [pc, #68]	; (800101c <rtcInit+0x50>)
 8000fd8:	4a11      	ldr	r2, [pc, #68]	; (8001020 <rtcInit+0x54>)
 8000fda:	601a      	str	r2, [r3, #0]
	hrtc.Init.HourFormat 			= RTC_HOURFORMAT_24;
 8000fdc:	4b0f      	ldr	r3, [pc, #60]	; (800101c <rtcInit+0x50>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	605a      	str	r2, [r3, #4]
	hrtc.Init.AsynchPrediv 		= 127;
 8000fe2:	4b0e      	ldr	r3, [pc, #56]	; (800101c <rtcInit+0x50>)
 8000fe4:	227f      	movs	r2, #127	; 0x7f
 8000fe6:	609a      	str	r2, [r3, #8]
	hrtc.Init.SynchPrediv 		= 255;
 8000fe8:	4b0c      	ldr	r3, [pc, #48]	; (800101c <rtcInit+0x50>)
 8000fea:	22ff      	movs	r2, #255	; 0xff
 8000fec:	60da      	str	r2, [r3, #12]
	hrtc.Init.OutPut 					= RTC_OUTPUT_DISABLE;
 8000fee:	4b0b      	ldr	r3, [pc, #44]	; (800101c <rtcInit+0x50>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	611a      	str	r2, [r3, #16]
	hrtc.Init.OutPutPolarity 	= RTC_OUTPUT_POLARITY_HIGH;
 8000ff4:	4b09      	ldr	r3, [pc, #36]	; (800101c <rtcInit+0x50>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	615a      	str	r2, [r3, #20]
	hrtc.Init.OutPutType	    = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000ffa:	4b08      	ldr	r3, [pc, #32]	; (800101c <rtcInit+0x50>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	619a      	str	r2, [r3, #24]
	if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001000:	4806      	ldr	r0, [pc, #24]	; (800101c <rtcInit+0x50>)
 8001002:	f003 fd1b 	bl	8004a3c <HAL_RTC_Init>
 8001006:	4603      	mov	r3, r0
 8001008:	2b00      	cmp	r3, #0
 800100a:	d001      	beq.n	8001010 <rtcInit+0x44>
	{
	Error_Handler();
 800100c:	f7ff fc1e 	bl	800084c <Error_Handler>
	}
	return ret;
 8001010:	79fb      	ldrb	r3, [r7, #7]
}
 8001012:	4618      	mov	r0, r3
 8001014:	3708      	adds	r7, #8
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	20000230 	.word	0x20000230
 8001020:	40002800 	.word	0x40002800

08001024 <rtcBackupRegWrite>:

void rtcBackupRegWrite(uint32_t index, uint32_t data)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b082      	sub	sp, #8
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
 800102c:	6039      	str	r1, [r7, #0]
	HAL_RTCEx_BKUPWrite(&hrtc, index, data);
 800102e:	683a      	ldr	r2, [r7, #0]
 8001030:	6879      	ldr	r1, [r7, #4]
 8001032:	4803      	ldr	r0, [pc, #12]	; (8001040 <rtcBackupRegWrite+0x1c>)
 8001034:	f003 fde7 	bl	8004c06 <HAL_RTCEx_BKUPWrite>
}
 8001038:	bf00      	nop
 800103a:	3708      	adds	r7, #8
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}
 8001040:	20000230 	.word	0x20000230

08001044 <rtcBackupRegRead>:
uint32_t rtcBackupRegRead(uint32_t index)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b082      	sub	sp, #8
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
	return HAL_RTCEx_BKUPRead(&hrtc, index);
 800104c:	6879      	ldr	r1, [r7, #4]
 800104e:	4804      	ldr	r0, [pc, #16]	; (8001060 <rtcBackupRegRead+0x1c>)
 8001050:	f003 fdf3 	bl	8004c3a <HAL_RTCEx_BKUPRead>
 8001054:	4603      	mov	r3, r0
}
 8001056:	4618      	mov	r0, r3
 8001058:	3708      	adds	r7, #8
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}
 800105e:	bf00      	nop
 8001060:	20000230 	.word	0x20000230

08001064 <HAL_RTC_MspInit>:


void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b088      	sub	sp, #32
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800106c:	f107 0308 	add.w	r3, r7, #8
 8001070:	2200      	movs	r2, #0
 8001072:	601a      	str	r2, [r3, #0]
 8001074:	605a      	str	r2, [r3, #4]
 8001076:	609a      	str	r2, [r3, #8]
 8001078:	60da      	str	r2, [r3, #12]
 800107a:	611a      	str	r2, [r3, #16]
 800107c:	615a      	str	r2, [r3, #20]
  if(rtcHandle->Instance==RTC)
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	4a0c      	ldr	r2, [pc, #48]	; (80010b4 <HAL_RTC_MspInit+0x50>)
 8001084:	4293      	cmp	r3, r2
 8001086:	d111      	bne.n	80010ac <HAL_RTC_MspInit+0x48>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001088:	2302      	movs	r3, #2
 800108a:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800108c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001090:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001092:	f107 0308 	add.w	r3, r7, #8
 8001096:	4618      	mov	r0, r3
 8001098:	f003 fbe0 	bl	800485c <HAL_RCCEx_PeriphCLKConfig>
 800109c:	4603      	mov	r3, r0
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d001      	beq.n	80010a6 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 80010a2:	f7ff fbd3 	bl	800084c <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 80010a6:	4b04      	ldr	r3, [pc, #16]	; (80010b8 <HAL_RTC_MspInit+0x54>)
 80010a8:	2201      	movs	r2, #1
 80010aa:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80010ac:	bf00      	nop
 80010ae:	3720      	adds	r7, #32
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}
 80010b4:	40002800 	.word	0x40002800
 80010b8:	42470e3c 	.word	0x42470e3c

080010bc <uartInit>:
static qbuffer_t qbuffer[UART_MAX_CHANNEL];
static uint8_t rx_buf[256];
//static uint8_t rx_data[UART_MAX_CHANNEL];

bool uartInit(void)
{
 80010bc:	b480      	push	{r7}
 80010be:	b083      	sub	sp, #12
 80010c0:	af00      	add	r7, sp, #0
	for(int i = 0; i < UART_MAX_CHANNEL; i++)
 80010c2:	2300      	movs	r3, #0
 80010c4:	607b      	str	r3, [r7, #4]
 80010c6:	e007      	b.n	80010d8 <uartInit+0x1c>
	{
		is_open[i] = false;
 80010c8:	4a08      	ldr	r2, [pc, #32]	; (80010ec <uartInit+0x30>)
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	4413      	add	r3, r2
 80010ce:	2200      	movs	r2, #0
 80010d0:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < UART_MAX_CHANNEL; i++)
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	3301      	adds	r3, #1
 80010d6:	607b      	str	r3, [r7, #4]
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	2b01      	cmp	r3, #1
 80010dc:	ddf4      	ble.n	80010c8 <uartInit+0xc>
	}
	return false;
 80010de:	2300      	movs	r3, #0
}
 80010e0:	4618      	mov	r0, r3
 80010e2:	370c      	adds	r7, #12
 80010e4:	46bd      	mov	sp, r7
 80010e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ea:	4770      	bx	lr
 80010ec:	200002f4 	.word	0x200002f4

080010f0 <uartOpen>:

bool uartOpen(uint8_t ch, uint32_t baud)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b084      	sub	sp, #16
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	4603      	mov	r3, r0
 80010f8:	6039      	str	r1, [r7, #0]
 80010fa:	71fb      	strb	r3, [r7, #7]
	bool ret = false;
 80010fc:	2300      	movs	r3, #0
 80010fe:	73fb      	strb	r3, [r7, #15]

	switch(ch)
 8001100:	79fb      	ldrb	r3, [r7, #7]
 8001102:	2b00      	cmp	r3, #0
 8001104:	d002      	beq.n	800110c <uartOpen+0x1c>
 8001106:	2b01      	cmp	r3, #1
 8001108:	d007      	beq.n	800111a <uartOpen+0x2a>
 800110a:	e076      	b.n	80011fa <uartOpen+0x10a>
	{
		case _DEF_UART1:
			is_open[ch] = true;
 800110c:	79fb      	ldrb	r3, [r7, #7]
 800110e:	4a3d      	ldr	r2, [pc, #244]	; (8001204 <uartOpen+0x114>)
 8001110:	2101      	movs	r1, #1
 8001112:	54d1      	strb	r1, [r2, r3]
			ret = true;
 8001114:	2301      	movs	r3, #1
 8001116:	73fb      	strb	r3, [r7, #15]
			break;
 8001118:	e06f      	b.n	80011fa <uartOpen+0x10a>

		case _DEF_UART2:
			huart1.Instance 					= USART1;
 800111a:	4b3b      	ldr	r3, [pc, #236]	; (8001208 <uartOpen+0x118>)
 800111c:	4a3b      	ldr	r2, [pc, #236]	; (800120c <uartOpen+0x11c>)
 800111e:	601a      	str	r2, [r3, #0]
			huart1.Init.BaudRate 			= baud;
 8001120:	4a39      	ldr	r2, [pc, #228]	; (8001208 <uartOpen+0x118>)
 8001122:	683b      	ldr	r3, [r7, #0]
 8001124:	6053      	str	r3, [r2, #4]
			huart1.Init.WordLength		= UART_WORDLENGTH_8B;
 8001126:	4b38      	ldr	r3, [pc, #224]	; (8001208 <uartOpen+0x118>)
 8001128:	2200      	movs	r2, #0
 800112a:	609a      	str	r2, [r3, #8]
			huart1.Init.StopBits 			= UART_STOPBITS_1;
 800112c:	4b36      	ldr	r3, [pc, #216]	; (8001208 <uartOpen+0x118>)
 800112e:	2200      	movs	r2, #0
 8001130:	60da      	str	r2, [r3, #12]
			huart1.Init.Parity 				= UART_PARITY_NONE;
 8001132:	4b35      	ldr	r3, [pc, #212]	; (8001208 <uartOpen+0x118>)
 8001134:	2200      	movs	r2, #0
 8001136:	611a      	str	r2, [r3, #16]
			huart1.Init.Mode 					= UART_MODE_TX_RX;
 8001138:	4b33      	ldr	r3, [pc, #204]	; (8001208 <uartOpen+0x118>)
 800113a:	220c      	movs	r2, #12
 800113c:	615a      	str	r2, [r3, #20]
			huart1.Init.HwFlowCtl 		= UART_HWCONTROL_NONE;
 800113e:	4b32      	ldr	r3, [pc, #200]	; (8001208 <uartOpen+0x118>)
 8001140:	2200      	movs	r2, #0
 8001142:	619a      	str	r2, [r3, #24]
			huart1.Init.OverSampling 	= UART_OVERSAMPLING_16;
 8001144:	4b30      	ldr	r3, [pc, #192]	; (8001208 <uartOpen+0x118>)
 8001146:	2200      	movs	r2, #0
 8001148:	61da      	str	r2, [r3, #28]

			HAL_UART_DeInit(&huart1);
 800114a:	482f      	ldr	r0, [pc, #188]	; (8001208 <uartOpen+0x118>)
 800114c:	f003 fdda 	bl	8004d04 <HAL_UART_DeInit>

			qbufferCreate(&qbuffer[ch], &rx_buf[0], 256);
 8001150:	79fb      	ldrb	r3, [r7, #7]
 8001152:	011b      	lsls	r3, r3, #4
 8001154:	4a2e      	ldr	r2, [pc, #184]	; (8001210 <uartOpen+0x120>)
 8001156:	4413      	add	r3, r2
 8001158:	f44f 7280 	mov.w	r2, #256	; 0x100
 800115c:	492d      	ldr	r1, [pc, #180]	; (8001214 <uartOpen+0x124>)
 800115e:	4618      	mov	r0, r3
 8001160:	f7ff fcc9 	bl	8000af6 <qbufferCreate>

      __HAL_RCC_DMA2_CLK_ENABLE();
 8001164:	2300      	movs	r3, #0
 8001166:	60bb      	str	r3, [r7, #8]
 8001168:	4b2b      	ldr	r3, [pc, #172]	; (8001218 <uartOpen+0x128>)
 800116a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800116c:	4a2a      	ldr	r2, [pc, #168]	; (8001218 <uartOpen+0x128>)
 800116e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001172:	6313      	str	r3, [r2, #48]	; 0x30
 8001174:	4b28      	ldr	r3, [pc, #160]	; (8001218 <uartOpen+0x128>)
 8001176:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001178:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800117c:	60bb      	str	r3, [r7, #8]
 800117e:	68bb      	ldr	r3, [r7, #8]
      HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8001180:	2200      	movs	r2, #0
 8001182:	2100      	movs	r1, #0
 8001184:	203a      	movs	r0, #58	; 0x3a
 8001186:	f000 fb66 	bl	8001856 <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 800118a:	203a      	movs	r0, #58	; 0x3a
 800118c:	f000 fb7f 	bl	800188e <HAL_NVIC_EnableIRQ>

			if (HAL_UART_Init(&huart1) != HAL_OK)
 8001190:	481d      	ldr	r0, [pc, #116]	; (8001208 <uartOpen+0x118>)
 8001192:	f003 fd6a 	bl	8004c6a <HAL_UART_Init>
 8001196:	4603      	mov	r3, r0
 8001198:	2b00      	cmp	r3, #0
 800119a:	d002      	beq.n	80011a2 <uartOpen+0xb2>
			{
				ret = false;
 800119c:	2300      	movs	r3, #0
 800119e:	73fb      	strb	r3, [r7, #15]
				}
				/* FLUSH */
				qbuffer[ch].in  = qbuffer[ch].len - hdma_usart1_rx.Instance->NDTR;
				qbuffer[ch].out = qbuffer[ch].in;
			}
			break;
 80011a0:	e02a      	b.n	80011f8 <uartOpen+0x108>
				ret = true;
 80011a2:	2301      	movs	r3, #1
 80011a4:	73fb      	strb	r3, [r7, #15]
				is_open[ch] = true;
 80011a6:	79fb      	ldrb	r3, [r7, #7]
 80011a8:	4a16      	ldr	r2, [pc, #88]	; (8001204 <uartOpen+0x114>)
 80011aa:	2101      	movs	r1, #1
 80011ac:	54d1      	strb	r1, [r2, r3]
				if(HAL_UART_Receive_DMA(&huart1, (uint8_t *)&rx_buf[0], 256) != HAL_OK)
 80011ae:	f44f 7280 	mov.w	r2, #256	; 0x100
 80011b2:	4918      	ldr	r1, [pc, #96]	; (8001214 <uartOpen+0x124>)
 80011b4:	4814      	ldr	r0, [pc, #80]	; (8001208 <uartOpen+0x118>)
 80011b6:	f003 fe66 	bl	8004e86 <HAL_UART_Receive_DMA>
 80011ba:	4603      	mov	r3, r0
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d001      	beq.n	80011c4 <uartOpen+0xd4>
				  ret = false;
 80011c0:	2300      	movs	r3, #0
 80011c2:	73fb      	strb	r3, [r7, #15]
				qbuffer[ch].in  = qbuffer[ch].len - hdma_usart1_rx.Instance->NDTR;
 80011c4:	79fb      	ldrb	r3, [r7, #7]
 80011c6:	4a12      	ldr	r2, [pc, #72]	; (8001210 <uartOpen+0x120>)
 80011c8:	011b      	lsls	r3, r3, #4
 80011ca:	4413      	add	r3, r2
 80011cc:	3308      	adds	r3, #8
 80011ce:	6819      	ldr	r1, [r3, #0]
 80011d0:	4b12      	ldr	r3, [pc, #72]	; (800121c <uartOpen+0x12c>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	685a      	ldr	r2, [r3, #4]
 80011d6:	79fb      	ldrb	r3, [r7, #7]
 80011d8:	1a8a      	subs	r2, r1, r2
 80011da:	490d      	ldr	r1, [pc, #52]	; (8001210 <uartOpen+0x120>)
 80011dc:	011b      	lsls	r3, r3, #4
 80011de:	440b      	add	r3, r1
 80011e0:	601a      	str	r2, [r3, #0]
				qbuffer[ch].out = qbuffer[ch].in;
 80011e2:	79fa      	ldrb	r2, [r7, #7]
 80011e4:	79fb      	ldrb	r3, [r7, #7]
 80011e6:	490a      	ldr	r1, [pc, #40]	; (8001210 <uartOpen+0x120>)
 80011e8:	0112      	lsls	r2, r2, #4
 80011ea:	440a      	add	r2, r1
 80011ec:	6812      	ldr	r2, [r2, #0]
 80011ee:	4908      	ldr	r1, [pc, #32]	; (8001210 <uartOpen+0x120>)
 80011f0:	011b      	lsls	r3, r3, #4
 80011f2:	440b      	add	r3, r1
 80011f4:	3304      	adds	r3, #4
 80011f6:	601a      	str	r2, [r3, #0]
			break;
 80011f8:	bf00      	nop
	}

	return ret;
 80011fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80011fc:	4618      	mov	r0, r3
 80011fe:	3710      	adds	r7, #16
 8001200:	46bd      	mov	sp, r7
 8001202:	bd80      	pop	{r7, pc}
 8001204:	200002f4 	.word	0x200002f4
 8001208:	20000250 	.word	0x20000250
 800120c:	40011000 	.word	0x40011000
 8001210:	200002f8 	.word	0x200002f8
 8001214:	20000318 	.word	0x20000318
 8001218:	40023800 	.word	0x40023800
 800121c:	20000294 	.word	0x20000294

08001220 <uartAvailable>:
uint32_t uartAvailable(uint8_t ch)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b084      	sub	sp, #16
 8001224:	af00      	add	r7, sp, #0
 8001226:	4603      	mov	r3, r0
 8001228:	71fb      	strb	r3, [r7, #7]
	uint32_t ret = 0;
 800122a:	2300      	movs	r3, #0
 800122c:	60fb      	str	r3, [r7, #12]


	switch(ch)
 800122e:	79fb      	ldrb	r3, [r7, #7]
 8001230:	2b00      	cmp	r3, #0
 8001232:	d002      	beq.n	800123a <uartAvailable+0x1a>
 8001234:	2b01      	cmp	r3, #1
 8001236:	d004      	beq.n	8001242 <uartAvailable+0x22>
 8001238:	e01b      	b.n	8001272 <uartAvailable+0x52>
	{
		case _DEF_UART1: // 첫번째 채널 uart -> 1. cdc 추
			ret = cdcAvailable();
 800123a:	f007 ff73 	bl	8009124 <cdcAvailable>
 800123e:	60f8      	str	r0, [r7, #12]
			break;
 8001240:	e017      	b.n	8001272 <uartAvailable+0x52>
		case _DEF_UART2:
		  qbuffer[ch].in = qbuffer[ch].len - hdma_usart1_rx.Instance->NDTR;
 8001242:	79fb      	ldrb	r3, [r7, #7]
 8001244:	4a0d      	ldr	r2, [pc, #52]	; (800127c <uartAvailable+0x5c>)
 8001246:	011b      	lsls	r3, r3, #4
 8001248:	4413      	add	r3, r2
 800124a:	3308      	adds	r3, #8
 800124c:	6819      	ldr	r1, [r3, #0]
 800124e:	4b0c      	ldr	r3, [pc, #48]	; (8001280 <uartAvailable+0x60>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	685a      	ldr	r2, [r3, #4]
 8001254:	79fb      	ldrb	r3, [r7, #7]
 8001256:	1a8a      	subs	r2, r1, r2
 8001258:	4908      	ldr	r1, [pc, #32]	; (800127c <uartAvailable+0x5c>)
 800125a:	011b      	lsls	r3, r3, #4
 800125c:	440b      	add	r3, r1
 800125e:	601a      	str	r2, [r3, #0]
		  ret = qbufferAvailable(&qbuffer[ch]);
 8001260:	79fb      	ldrb	r3, [r7, #7]
 8001262:	011b      	lsls	r3, r3, #4
 8001264:	4a05      	ldr	r2, [pc, #20]	; (800127c <uartAvailable+0x5c>)
 8001266:	4413      	add	r3, r2
 8001268:	4618      	mov	r0, r3
 800126a:	f7ff fc9c 	bl	8000ba6 <qbufferAvailable>
 800126e:	60f8      	str	r0, [r7, #12]
		  break;
 8001270:	bf00      	nop
	}

	return ret;
 8001272:	68fb      	ldr	r3, [r7, #12]
}
 8001274:	4618      	mov	r0, r3
 8001276:	3710      	adds	r7, #16
 8001278:	46bd      	mov	sp, r7
 800127a:	bd80      	pop	{r7, pc}
 800127c:	200002f8 	.word	0x200002f8
 8001280:	20000294 	.word	0x20000294

08001284 <uartRead>:
uint8_t uartRead(uint8_t ch)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b084      	sub	sp, #16
 8001288:	af00      	add	r7, sp, #0
 800128a:	4603      	mov	r3, r0
 800128c:	71fb      	strb	r3, [r7, #7]
	uint8_t ret;

	switch(ch)
 800128e:	79fb      	ldrb	r3, [r7, #7]
 8001290:	2b00      	cmp	r3, #0
 8001292:	d002      	beq.n	800129a <uartRead+0x16>
 8001294:	2b01      	cmp	r3, #1
 8001296:	d005      	beq.n	80012a4 <uartRead+0x20>
 8001298:	e00c      	b.n	80012b4 <uartRead+0x30>
	{
		case _DEF_UART1:
			ret = cdcRead();
 800129a:	f007 ff61 	bl	8009160 <cdcRead>
 800129e:	4603      	mov	r3, r0
 80012a0:	73fb      	strb	r3, [r7, #15]
			break;
 80012a2:	e007      	b.n	80012b4 <uartRead+0x30>
		case _DEF_UART2:
		  qbufferRead(&qbuffer[_DEF_UART2], &ret, 1);
 80012a4:	f107 030f 	add.w	r3, r7, #15
 80012a8:	2201      	movs	r2, #1
 80012aa:	4619      	mov	r1, r3
 80012ac:	4804      	ldr	r0, [pc, #16]	; (80012c0 <uartRead+0x3c>)
 80012ae:	f7ff fc3d 	bl	8000b2c <qbufferRead>
		  break;
 80012b2:	bf00      	nop
	}

	return ret;
 80012b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80012b6:	4618      	mov	r0, r3
 80012b8:	3710      	adds	r7, #16
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	bf00      	nop
 80012c0:	20000308 	.word	0x20000308

080012c4 <uartWrite>:
uint32_t uartWrite(uint8_t ch, uint8_t *pData, uint32_t length)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b086      	sub	sp, #24
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	4603      	mov	r3, r0
 80012cc:	60b9      	str	r1, [r7, #8]
 80012ce:	607a      	str	r2, [r7, #4]
 80012d0:	73fb      	strb	r3, [r7, #15]
	uint32_t ret;
	HAL_StatusTypeDef status;

	switch(ch)
 80012d2:	7bfb      	ldrb	r3, [r7, #15]
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d002      	beq.n	80012de <uartWrite+0x1a>
 80012d8:	2b01      	cmp	r3, #1
 80012da:	d006      	beq.n	80012ea <uartWrite+0x26>
 80012dc:	e014      	b.n	8001308 <uartWrite+0x44>
		{
			case _DEF_UART1:
				ret = cdcWrite(pData, length);
 80012de:	6879      	ldr	r1, [r7, #4]
 80012e0:	68b8      	ldr	r0, [r7, #8]
 80012e2:	f007 ff93 	bl	800920c <cdcWrite>
 80012e6:	6178      	str	r0, [r7, #20]
				break;
 80012e8:	e00e      	b.n	8001308 <uartWrite+0x44>

			case _DEF_UART2:
				status = HAL_UART_Transmit(&huart1, pData, length, 100);
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	b29a      	uxth	r2, r3
 80012ee:	2364      	movs	r3, #100	; 0x64
 80012f0:	68b9      	ldr	r1, [r7, #8]
 80012f2:	4808      	ldr	r0, [pc, #32]	; (8001314 <uartWrite+0x50>)
 80012f4:	f003 fd35 	bl	8004d62 <HAL_UART_Transmit>
 80012f8:	4603      	mov	r3, r0
 80012fa:	74fb      	strb	r3, [r7, #19]
				if(status == HAL_OK)
 80012fc:	7cfb      	ldrb	r3, [r7, #19]
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d101      	bne.n	8001306 <uartWrite+0x42>
				{
					ret = length;
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	617b      	str	r3, [r7, #20]
				}
				break;
 8001306:	bf00      	nop
		}

	return ret;
 8001308:	697b      	ldr	r3, [r7, #20]
}
 800130a:	4618      	mov	r0, r3
 800130c:	3718      	adds	r7, #24
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}
 8001312:	bf00      	nop
 8001314:	20000250 	.word	0x20000250

08001318 <HAL_UART_ErrorCallback>:




void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8001318:	b480      	push	{r7}
 800131a:	b083      	sub	sp, #12
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
  if(huart1.Instance == USART1)
  {

  }
}
 8001320:	bf00      	nop
 8001322:	370c      	adds	r7, #12
 8001324:	46bd      	mov	sp, r7
 8001326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132a:	4770      	bx	lr

0800132c <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800132c:	b480      	push	{r7}
 800132e:	b083      	sub	sp, #12
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
    /* received 1 byte data will be sent to our buffer
     * and to receive 1byte again, recall HAL_UART_Receive_IT*/
    HAL_UART_Receive_IT(&huart1, (uint8_t *)&rx_data[_DEF_UART2], 1);
  }
#endif
}
 8001334:	bf00      	nop
 8001336:	370c      	adds	r7, #12
 8001338:	46bd      	mov	sp, r7
 800133a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133e:	4770      	bx	lr

08001340 <HAL_UART_MspInit>:




void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b08a      	sub	sp, #40	; 0x28
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001348:	f107 0314 	add.w	r3, r7, #20
 800134c:	2200      	movs	r2, #0
 800134e:	601a      	str	r2, [r3, #0]
 8001350:	605a      	str	r2, [r3, #4]
 8001352:	609a      	str	r2, [r3, #8]
 8001354:	60da      	str	r2, [r3, #12]
 8001356:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	4a35      	ldr	r2, [pc, #212]	; (8001434 <HAL_UART_MspInit+0xf4>)
 800135e:	4293      	cmp	r3, r2
 8001360:	d163      	bne.n	800142a <HAL_UART_MspInit+0xea>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001362:	2300      	movs	r3, #0
 8001364:	613b      	str	r3, [r7, #16]
 8001366:	4b34      	ldr	r3, [pc, #208]	; (8001438 <HAL_UART_MspInit+0xf8>)
 8001368:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800136a:	4a33      	ldr	r2, [pc, #204]	; (8001438 <HAL_UART_MspInit+0xf8>)
 800136c:	f043 0310 	orr.w	r3, r3, #16
 8001370:	6453      	str	r3, [r2, #68]	; 0x44
 8001372:	4b31      	ldr	r3, [pc, #196]	; (8001438 <HAL_UART_MspInit+0xf8>)
 8001374:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001376:	f003 0310 	and.w	r3, r3, #16
 800137a:	613b      	str	r3, [r7, #16]
 800137c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800137e:	2300      	movs	r3, #0
 8001380:	60fb      	str	r3, [r7, #12]
 8001382:	4b2d      	ldr	r3, [pc, #180]	; (8001438 <HAL_UART_MspInit+0xf8>)
 8001384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001386:	4a2c      	ldr	r2, [pc, #176]	; (8001438 <HAL_UART_MspInit+0xf8>)
 8001388:	f043 0301 	orr.w	r3, r3, #1
 800138c:	6313      	str	r3, [r2, #48]	; 0x30
 800138e:	4b2a      	ldr	r3, [pc, #168]	; (8001438 <HAL_UART_MspInit+0xf8>)
 8001390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001392:	f003 0301 	and.w	r3, r3, #1
 8001396:	60fb      	str	r3, [r7, #12]
 8001398:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800139a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800139e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013a0:	2302      	movs	r3, #2
 80013a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a4:	2300      	movs	r3, #0
 80013a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013a8:	2303      	movs	r3, #3
 80013aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80013ac:	2307      	movs	r3, #7
 80013ae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013b0:	f107 0314 	add.w	r3, r7, #20
 80013b4:	4619      	mov	r1, r3
 80013b6:	4821      	ldr	r0, [pc, #132]	; (800143c <HAL_UART_MspInit+0xfc>)
 80013b8:	f001 f9da 	bl	8002770 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 80013bc:	4b20      	ldr	r3, [pc, #128]	; (8001440 <HAL_UART_MspInit+0x100>)
 80013be:	4a21      	ldr	r2, [pc, #132]	; (8001444 <HAL_UART_MspInit+0x104>)
 80013c0:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 80013c2:	4b1f      	ldr	r3, [pc, #124]	; (8001440 <HAL_UART_MspInit+0x100>)
 80013c4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80013c8:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80013ca:	4b1d      	ldr	r3, [pc, #116]	; (8001440 <HAL_UART_MspInit+0x100>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80013d0:	4b1b      	ldr	r3, [pc, #108]	; (8001440 <HAL_UART_MspInit+0x100>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80013d6:	4b1a      	ldr	r3, [pc, #104]	; (8001440 <HAL_UART_MspInit+0x100>)
 80013d8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80013dc:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80013de:	4b18      	ldr	r3, [pc, #96]	; (8001440 <HAL_UART_MspInit+0x100>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80013e4:	4b16      	ldr	r3, [pc, #88]	; (8001440 <HAL_UART_MspInit+0x100>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 80013ea:	4b15      	ldr	r3, [pc, #84]	; (8001440 <HAL_UART_MspInit+0x100>)
 80013ec:	f44f 7280 	mov.w	r2, #256	; 0x100
 80013f0:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80013f2:	4b13      	ldr	r3, [pc, #76]	; (8001440 <HAL_UART_MspInit+0x100>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80013f8:	4b11      	ldr	r3, [pc, #68]	; (8001440 <HAL_UART_MspInit+0x100>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80013fe:	4810      	ldr	r0, [pc, #64]	; (8001440 <HAL_UART_MspInit+0x100>)
 8001400:	f000 fa6e 	bl	80018e0 <HAL_DMA_Init>
 8001404:	4603      	mov	r3, r0
 8001406:	2b00      	cmp	r3, #0
 8001408:	d001      	beq.n	800140e <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 800140a:	f7ff fa1f 	bl	800084c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	4a0b      	ldr	r2, [pc, #44]	; (8001440 <HAL_UART_MspInit+0x100>)
 8001412:	639a      	str	r2, [r3, #56]	; 0x38
 8001414:	4a0a      	ldr	r2, [pc, #40]	; (8001440 <HAL_UART_MspInit+0x100>)
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800141a:	2200      	movs	r2, #0
 800141c:	2100      	movs	r1, #0
 800141e:	2025      	movs	r0, #37	; 0x25
 8001420:	f000 fa19 	bl	8001856 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001424:	2025      	movs	r0, #37	; 0x25
 8001426:	f000 fa32 	bl	800188e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800142a:	bf00      	nop
 800142c:	3728      	adds	r7, #40	; 0x28
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}
 8001432:	bf00      	nop
 8001434:	40011000 	.word	0x40011000
 8001438:	40023800 	.word	0x40023800
 800143c:	40020000 	.word	0x40020000
 8001440:	20000294 	.word	0x20000294
 8001444:	40026440 	.word	0x40026440

08001448 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b082      	sub	sp, #8
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]

  if(uartHandle->Instance==USART1)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	4a0c      	ldr	r2, [pc, #48]	; (8001488 <HAL_UART_MspDeInit+0x40>)
 8001456:	4293      	cmp	r3, r2
 8001458:	d112      	bne.n	8001480 <HAL_UART_MspDeInit+0x38>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 800145a:	4b0c      	ldr	r3, [pc, #48]	; (800148c <HAL_UART_MspDeInit+0x44>)
 800145c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800145e:	4a0b      	ldr	r2, [pc, #44]	; (800148c <HAL_UART_MspDeInit+0x44>)
 8001460:	f023 0310 	bic.w	r3, r3, #16
 8001464:	6453      	str	r3, [r2, #68]	; 0x44

    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9|GPIO_PIN_10);
 8001466:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800146a:	4809      	ldr	r0, [pc, #36]	; (8001490 <HAL_UART_MspDeInit+0x48>)
 800146c:	f001 fb04 	bl	8002a78 <HAL_GPIO_DeInit>

    /* USART1 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmarx);
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001474:	4618      	mov	r0, r3
 8001476:	f000 fae1 	bl	8001a3c <HAL_DMA_DeInit>

    /* USART1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 800147a:	2025      	movs	r0, #37	; 0x25
 800147c:	f000 fa15 	bl	80018aa <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART1_MspDeInit 1 */

  /* USER CODE END USART1_MspDeInit 1 */
  }
}
 8001480:	bf00      	nop
 8001482:	3708      	adds	r7, #8
 8001484:	46bd      	mov	sp, r7
 8001486:	bd80      	pop	{r7, pc}
 8001488:	40011000 	.word	0x40011000
 800148c:	40023800 	.word	0x40023800
 8001490:	40020000 	.word	0x40020000

08001494 <usbInit>:


#include "usb.h"

bool usbInit(void)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b086      	sub	sp, #24
 8001498:	af00      	add	r7, sp, #0
	bool ret = true;
 800149a:	2301      	movs	r3, #1
 800149c:	75fb      	strb	r3, [r7, #23]

	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800149e:	463b      	mov	r3, r7
 80014a0:	2200      	movs	r2, #0
 80014a2:	601a      	str	r2, [r3, #0]
 80014a4:	605a      	str	r2, [r3, #4]
 80014a6:	609a      	str	r2, [r3, #8]
 80014a8:	60da      	str	r2, [r3, #12]
 80014aa:	611a      	str	r2, [r3, #16]

	GPIO_InitStruct.Pin = GPIO_PIN_12;
 80014ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014b0:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80014b2:	2311      	movs	r3, #17
 80014b4:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b6:	2300      	movs	r3, #0
 80014b8:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014ba:	2300      	movs	r3, #0
 80014bc:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014be:	463b      	mov	r3, r7
 80014c0:	4619      	mov	r1, r3
 80014c2:	4810      	ldr	r0, [pc, #64]	; (8001504 <usbInit+0x70>)
 80014c4:	f001 f954 	bl	8002770 <HAL_GPIO_Init>

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 80014c8:	2200      	movs	r2, #0
 80014ca:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80014ce:	480d      	ldr	r0, [pc, #52]	; (8001504 <usbInit+0x70>)
 80014d0:	f001 fbb6 	bl	8002c40 <HAL_GPIO_WritePin>
	delay(100);
 80014d4:	2064      	movs	r0, #100	; 0x64
 80014d6:	f7ff f92d 	bl	8000734 <delay>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 80014da:	2201      	movs	r2, #1
 80014dc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80014e0:	4808      	ldr	r0, [pc, #32]	; (8001504 <usbInit+0x70>)
 80014e2:	f001 fbad 	bl	8002c40 <HAL_GPIO_WritePin>

	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014e6:	2300      	movs	r3, #0
 80014e8:	607b      	str	r3, [r7, #4]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014ea:	463b      	mov	r3, r7
 80014ec:	4619      	mov	r1, r3
 80014ee:	4805      	ldr	r0, [pc, #20]	; (8001504 <usbInit+0x70>)
 80014f0:	f001 f93e 	bl	8002770 <HAL_GPIO_Init>

	MX_USB_DEVICE_Init();
 80014f4:	f007 fde6 	bl	80090c4 <MX_USB_DEVICE_Init>
	return ret;
 80014f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80014fa:	4618      	mov	r0, r3
 80014fc:	3718      	adds	r7, #24
 80014fe:	46bd      	mov	sp, r7
 8001500:	bd80      	pop	{r7, pc}
 8001502:	bf00      	nop
 8001504:	40020000 	.word	0x40020000

08001508 <hwInit>:
 */

#include "hw.h"

void hwInit()
{
 8001508:	b580      	push	{r7, lr}
 800150a:	af00      	add	r7, sp, #0
  bspInit();
 800150c:	f7ff f8da 	bl	80006c4 <bspInit>
  rtcInit();
 8001510:	f7ff fd5c 	bl	8000fcc <rtcInit>

  resetInit();
 8001514:	f7ff fd2e 	bl	8000f74 <resetInit>
  ledInit();
 8001518:	f7ff fc94 	bl	8000e44 <ledInit>
  usbInit();
 800151c:	f7ff ffba 	bl	8001494 <usbInit>
  uartInit();
 8001520:	f7ff fdcc 	bl	80010bc <uartInit>
  flashInit();
 8001524:	f7ff fb5a 	bl	8000bdc <flashInit>
}
 8001528:	bf00      	nop
 800152a:	bd80      	pop	{r7, pc}

0800152c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001530:	4b0e      	ldr	r3, [pc, #56]	; (800156c <HAL_Init+0x40>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	4a0d      	ldr	r2, [pc, #52]	; (800156c <HAL_Init+0x40>)
 8001536:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800153a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800153c:	4b0b      	ldr	r3, [pc, #44]	; (800156c <HAL_Init+0x40>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	4a0a      	ldr	r2, [pc, #40]	; (800156c <HAL_Init+0x40>)
 8001542:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001546:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001548:	4b08      	ldr	r3, [pc, #32]	; (800156c <HAL_Init+0x40>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	4a07      	ldr	r2, [pc, #28]	; (800156c <HAL_Init+0x40>)
 800154e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001552:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001554:	2003      	movs	r0, #3
 8001556:	f000 f973 	bl	8001840 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800155a:	200f      	movs	r0, #15
 800155c:	f000 f808 	bl	8001570 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001560:	f7ff f97a 	bl	8000858 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001564:	2300      	movs	r3, #0
}
 8001566:	4618      	mov	r0, r3
 8001568:	bd80      	pop	{r7, pc}
 800156a:	bf00      	nop
 800156c:	40023c00 	.word	0x40023c00

08001570 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b082      	sub	sp, #8
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001578:	4b12      	ldr	r3, [pc, #72]	; (80015c4 <HAL_InitTick+0x54>)
 800157a:	681a      	ldr	r2, [r3, #0]
 800157c:	4b12      	ldr	r3, [pc, #72]	; (80015c8 <HAL_InitTick+0x58>)
 800157e:	781b      	ldrb	r3, [r3, #0]
 8001580:	4619      	mov	r1, r3
 8001582:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001586:	fbb3 f3f1 	udiv	r3, r3, r1
 800158a:	fbb2 f3f3 	udiv	r3, r2, r3
 800158e:	4618      	mov	r0, r3
 8001590:	f000 f999 	bl	80018c6 <HAL_SYSTICK_Config>
 8001594:	4603      	mov	r3, r0
 8001596:	2b00      	cmp	r3, #0
 8001598:	d001      	beq.n	800159e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800159a:	2301      	movs	r3, #1
 800159c:	e00e      	b.n	80015bc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	2b0f      	cmp	r3, #15
 80015a2:	d80a      	bhi.n	80015ba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015a4:	2200      	movs	r2, #0
 80015a6:	6879      	ldr	r1, [r7, #4]
 80015a8:	f04f 30ff 	mov.w	r0, #4294967295
 80015ac:	f000 f953 	bl	8001856 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80015b0:	4a06      	ldr	r2, [pc, #24]	; (80015cc <HAL_InitTick+0x5c>)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80015b6:	2300      	movs	r3, #0
 80015b8:	e000      	b.n	80015bc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80015ba:	2301      	movs	r3, #1
}
 80015bc:	4618      	mov	r0, r3
 80015be:	3708      	adds	r7, #8
 80015c0:	46bd      	mov	sp, r7
 80015c2:	bd80      	pop	{r7, pc}
 80015c4:	20000000 	.word	0x20000000
 80015c8:	2000002c 	.word	0x2000002c
 80015cc:	20000028 	.word	0x20000028

080015d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015d0:	b480      	push	{r7}
 80015d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015d4:	4b06      	ldr	r3, [pc, #24]	; (80015f0 <HAL_IncTick+0x20>)
 80015d6:	781b      	ldrb	r3, [r3, #0]
 80015d8:	461a      	mov	r2, r3
 80015da:	4b06      	ldr	r3, [pc, #24]	; (80015f4 <HAL_IncTick+0x24>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	4413      	add	r3, r2
 80015e0:	4a04      	ldr	r2, [pc, #16]	; (80015f4 <HAL_IncTick+0x24>)
 80015e2:	6013      	str	r3, [r2, #0]
}
 80015e4:	bf00      	nop
 80015e6:	46bd      	mov	sp, r7
 80015e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ec:	4770      	bx	lr
 80015ee:	bf00      	nop
 80015f0:	2000002c 	.word	0x2000002c
 80015f4:	20000418 	.word	0x20000418

080015f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015f8:	b480      	push	{r7}
 80015fa:	af00      	add	r7, sp, #0
  return uwTick;
 80015fc:	4b03      	ldr	r3, [pc, #12]	; (800160c <HAL_GetTick+0x14>)
 80015fe:	681b      	ldr	r3, [r3, #0]
}
 8001600:	4618      	mov	r0, r3
 8001602:	46bd      	mov	sp, r7
 8001604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001608:	4770      	bx	lr
 800160a:	bf00      	nop
 800160c:	20000418 	.word	0x20000418

08001610 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b084      	sub	sp, #16
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001618:	f7ff ffee 	bl	80015f8 <HAL_GetTick>
 800161c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001628:	d005      	beq.n	8001636 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800162a:	4b0a      	ldr	r3, [pc, #40]	; (8001654 <HAL_Delay+0x44>)
 800162c:	781b      	ldrb	r3, [r3, #0]
 800162e:	461a      	mov	r2, r3
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	4413      	add	r3, r2
 8001634:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001636:	bf00      	nop
 8001638:	f7ff ffde 	bl	80015f8 <HAL_GetTick>
 800163c:	4602      	mov	r2, r0
 800163e:	68bb      	ldr	r3, [r7, #8]
 8001640:	1ad3      	subs	r3, r2, r3
 8001642:	68fa      	ldr	r2, [r7, #12]
 8001644:	429a      	cmp	r2, r3
 8001646:	d8f7      	bhi.n	8001638 <HAL_Delay+0x28>
  {
  }
}
 8001648:	bf00      	nop
 800164a:	bf00      	nop
 800164c:	3710      	adds	r7, #16
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}
 8001652:	bf00      	nop
 8001654:	2000002c 	.word	0x2000002c

08001658 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001658:	b480      	push	{r7}
 800165a:	b085      	sub	sp, #20
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	f003 0307 	and.w	r3, r3, #7
 8001666:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001668:	4b0c      	ldr	r3, [pc, #48]	; (800169c <__NVIC_SetPriorityGrouping+0x44>)
 800166a:	68db      	ldr	r3, [r3, #12]
 800166c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800166e:	68ba      	ldr	r2, [r7, #8]
 8001670:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001674:	4013      	ands	r3, r2
 8001676:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800167c:	68bb      	ldr	r3, [r7, #8]
 800167e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001680:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001684:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001688:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800168a:	4a04      	ldr	r2, [pc, #16]	; (800169c <__NVIC_SetPriorityGrouping+0x44>)
 800168c:	68bb      	ldr	r3, [r7, #8]
 800168e:	60d3      	str	r3, [r2, #12]
}
 8001690:	bf00      	nop
 8001692:	3714      	adds	r7, #20
 8001694:	46bd      	mov	sp, r7
 8001696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169a:	4770      	bx	lr
 800169c:	e000ed00 	.word	0xe000ed00

080016a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016a0:	b480      	push	{r7}
 80016a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016a4:	4b04      	ldr	r3, [pc, #16]	; (80016b8 <__NVIC_GetPriorityGrouping+0x18>)
 80016a6:	68db      	ldr	r3, [r3, #12]
 80016a8:	0a1b      	lsrs	r3, r3, #8
 80016aa:	f003 0307 	and.w	r3, r3, #7
}
 80016ae:	4618      	mov	r0, r3
 80016b0:	46bd      	mov	sp, r7
 80016b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b6:	4770      	bx	lr
 80016b8:	e000ed00 	.word	0xe000ed00

080016bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016bc:	b480      	push	{r7}
 80016be:	b083      	sub	sp, #12
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	4603      	mov	r3, r0
 80016c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	db0b      	blt.n	80016e6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016ce:	79fb      	ldrb	r3, [r7, #7]
 80016d0:	f003 021f 	and.w	r2, r3, #31
 80016d4:	4907      	ldr	r1, [pc, #28]	; (80016f4 <__NVIC_EnableIRQ+0x38>)
 80016d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016da:	095b      	lsrs	r3, r3, #5
 80016dc:	2001      	movs	r0, #1
 80016de:	fa00 f202 	lsl.w	r2, r0, r2
 80016e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80016e6:	bf00      	nop
 80016e8:	370c      	adds	r7, #12
 80016ea:	46bd      	mov	sp, r7
 80016ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f0:	4770      	bx	lr
 80016f2:	bf00      	nop
 80016f4:	e000e100 	.word	0xe000e100

080016f8 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80016f8:	b480      	push	{r7}
 80016fa:	b083      	sub	sp, #12
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	4603      	mov	r3, r0
 8001700:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001702:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001706:	2b00      	cmp	r3, #0
 8001708:	db12      	blt.n	8001730 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800170a:	79fb      	ldrb	r3, [r7, #7]
 800170c:	f003 021f 	and.w	r2, r3, #31
 8001710:	490a      	ldr	r1, [pc, #40]	; (800173c <__NVIC_DisableIRQ+0x44>)
 8001712:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001716:	095b      	lsrs	r3, r3, #5
 8001718:	2001      	movs	r0, #1
 800171a:	fa00 f202 	lsl.w	r2, r0, r2
 800171e:	3320      	adds	r3, #32
 8001720:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001724:	f3bf 8f4f 	dsb	sy
}
 8001728:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800172a:	f3bf 8f6f 	isb	sy
}
 800172e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8001730:	bf00      	nop
 8001732:	370c      	adds	r7, #12
 8001734:	46bd      	mov	sp, r7
 8001736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173a:	4770      	bx	lr
 800173c:	e000e100 	.word	0xe000e100

08001740 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001740:	b480      	push	{r7}
 8001742:	b083      	sub	sp, #12
 8001744:	af00      	add	r7, sp, #0
 8001746:	4603      	mov	r3, r0
 8001748:	6039      	str	r1, [r7, #0]
 800174a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800174c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001750:	2b00      	cmp	r3, #0
 8001752:	db0a      	blt.n	800176a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	b2da      	uxtb	r2, r3
 8001758:	490c      	ldr	r1, [pc, #48]	; (800178c <__NVIC_SetPriority+0x4c>)
 800175a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800175e:	0112      	lsls	r2, r2, #4
 8001760:	b2d2      	uxtb	r2, r2
 8001762:	440b      	add	r3, r1
 8001764:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001768:	e00a      	b.n	8001780 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800176a:	683b      	ldr	r3, [r7, #0]
 800176c:	b2da      	uxtb	r2, r3
 800176e:	4908      	ldr	r1, [pc, #32]	; (8001790 <__NVIC_SetPriority+0x50>)
 8001770:	79fb      	ldrb	r3, [r7, #7]
 8001772:	f003 030f 	and.w	r3, r3, #15
 8001776:	3b04      	subs	r3, #4
 8001778:	0112      	lsls	r2, r2, #4
 800177a:	b2d2      	uxtb	r2, r2
 800177c:	440b      	add	r3, r1
 800177e:	761a      	strb	r2, [r3, #24]
}
 8001780:	bf00      	nop
 8001782:	370c      	adds	r7, #12
 8001784:	46bd      	mov	sp, r7
 8001786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178a:	4770      	bx	lr
 800178c:	e000e100 	.word	0xe000e100
 8001790:	e000ed00 	.word	0xe000ed00

08001794 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001794:	b480      	push	{r7}
 8001796:	b089      	sub	sp, #36	; 0x24
 8001798:	af00      	add	r7, sp, #0
 800179a:	60f8      	str	r0, [r7, #12]
 800179c:	60b9      	str	r1, [r7, #8]
 800179e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	f003 0307 	and.w	r3, r3, #7
 80017a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017a8:	69fb      	ldr	r3, [r7, #28]
 80017aa:	f1c3 0307 	rsb	r3, r3, #7
 80017ae:	2b04      	cmp	r3, #4
 80017b0:	bf28      	it	cs
 80017b2:	2304      	movcs	r3, #4
 80017b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017b6:	69fb      	ldr	r3, [r7, #28]
 80017b8:	3304      	adds	r3, #4
 80017ba:	2b06      	cmp	r3, #6
 80017bc:	d902      	bls.n	80017c4 <NVIC_EncodePriority+0x30>
 80017be:	69fb      	ldr	r3, [r7, #28]
 80017c0:	3b03      	subs	r3, #3
 80017c2:	e000      	b.n	80017c6 <NVIC_EncodePriority+0x32>
 80017c4:	2300      	movs	r3, #0
 80017c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017c8:	f04f 32ff 	mov.w	r2, #4294967295
 80017cc:	69bb      	ldr	r3, [r7, #24]
 80017ce:	fa02 f303 	lsl.w	r3, r2, r3
 80017d2:	43da      	mvns	r2, r3
 80017d4:	68bb      	ldr	r3, [r7, #8]
 80017d6:	401a      	ands	r2, r3
 80017d8:	697b      	ldr	r3, [r7, #20]
 80017da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017dc:	f04f 31ff 	mov.w	r1, #4294967295
 80017e0:	697b      	ldr	r3, [r7, #20]
 80017e2:	fa01 f303 	lsl.w	r3, r1, r3
 80017e6:	43d9      	mvns	r1, r3
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017ec:	4313      	orrs	r3, r2
         );
}
 80017ee:	4618      	mov	r0, r3
 80017f0:	3724      	adds	r7, #36	; 0x24
 80017f2:	46bd      	mov	sp, r7
 80017f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f8:	4770      	bx	lr
	...

080017fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b082      	sub	sp, #8
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	3b01      	subs	r3, #1
 8001808:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800180c:	d301      	bcc.n	8001812 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800180e:	2301      	movs	r3, #1
 8001810:	e00f      	b.n	8001832 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001812:	4a0a      	ldr	r2, [pc, #40]	; (800183c <SysTick_Config+0x40>)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	3b01      	subs	r3, #1
 8001818:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800181a:	210f      	movs	r1, #15
 800181c:	f04f 30ff 	mov.w	r0, #4294967295
 8001820:	f7ff ff8e 	bl	8001740 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001824:	4b05      	ldr	r3, [pc, #20]	; (800183c <SysTick_Config+0x40>)
 8001826:	2200      	movs	r2, #0
 8001828:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800182a:	4b04      	ldr	r3, [pc, #16]	; (800183c <SysTick_Config+0x40>)
 800182c:	2207      	movs	r2, #7
 800182e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001830:	2300      	movs	r3, #0
}
 8001832:	4618      	mov	r0, r3
 8001834:	3708      	adds	r7, #8
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}
 800183a:	bf00      	nop
 800183c:	e000e010 	.word	0xe000e010

08001840 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b082      	sub	sp, #8
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001848:	6878      	ldr	r0, [r7, #4]
 800184a:	f7ff ff05 	bl	8001658 <__NVIC_SetPriorityGrouping>
}
 800184e:	bf00      	nop
 8001850:	3708      	adds	r7, #8
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}

08001856 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001856:	b580      	push	{r7, lr}
 8001858:	b086      	sub	sp, #24
 800185a:	af00      	add	r7, sp, #0
 800185c:	4603      	mov	r3, r0
 800185e:	60b9      	str	r1, [r7, #8]
 8001860:	607a      	str	r2, [r7, #4]
 8001862:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001864:	2300      	movs	r3, #0
 8001866:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001868:	f7ff ff1a 	bl	80016a0 <__NVIC_GetPriorityGrouping>
 800186c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800186e:	687a      	ldr	r2, [r7, #4]
 8001870:	68b9      	ldr	r1, [r7, #8]
 8001872:	6978      	ldr	r0, [r7, #20]
 8001874:	f7ff ff8e 	bl	8001794 <NVIC_EncodePriority>
 8001878:	4602      	mov	r2, r0
 800187a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800187e:	4611      	mov	r1, r2
 8001880:	4618      	mov	r0, r3
 8001882:	f7ff ff5d 	bl	8001740 <__NVIC_SetPriority>
}
 8001886:	bf00      	nop
 8001888:	3718      	adds	r7, #24
 800188a:	46bd      	mov	sp, r7
 800188c:	bd80      	pop	{r7, pc}

0800188e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800188e:	b580      	push	{r7, lr}
 8001890:	b082      	sub	sp, #8
 8001892:	af00      	add	r7, sp, #0
 8001894:	4603      	mov	r3, r0
 8001896:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001898:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800189c:	4618      	mov	r0, r3
 800189e:	f7ff ff0d 	bl	80016bc <__NVIC_EnableIRQ>
}
 80018a2:	bf00      	nop
 80018a4:	3708      	adds	r7, #8
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bd80      	pop	{r7, pc}

080018aa <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80018aa:	b580      	push	{r7, lr}
 80018ac:	b082      	sub	sp, #8
 80018ae:	af00      	add	r7, sp, #0
 80018b0:	4603      	mov	r3, r0
 80018b2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80018b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018b8:	4618      	mov	r0, r3
 80018ba:	f7ff ff1d 	bl	80016f8 <__NVIC_DisableIRQ>
}
 80018be:	bf00      	nop
 80018c0:	3708      	adds	r7, #8
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bd80      	pop	{r7, pc}

080018c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018c6:	b580      	push	{r7, lr}
 80018c8:	b082      	sub	sp, #8
 80018ca:	af00      	add	r7, sp, #0
 80018cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018ce:	6878      	ldr	r0, [r7, #4]
 80018d0:	f7ff ff94 	bl	80017fc <SysTick_Config>
 80018d4:	4603      	mov	r3, r0
}
 80018d6:	4618      	mov	r0, r3
 80018d8:	3708      	adds	r7, #8
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}
	...

080018e0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b086      	sub	sp, #24
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80018e8:	2300      	movs	r3, #0
 80018ea:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80018ec:	f7ff fe84 	bl	80015f8 <HAL_GetTick>
 80018f0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d101      	bne.n	80018fc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80018f8:	2301      	movs	r3, #1
 80018fa:	e099      	b.n	8001a30 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	2202      	movs	r2, #2
 8001900:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	2200      	movs	r2, #0
 8001908:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	681a      	ldr	r2, [r3, #0]
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f022 0201 	bic.w	r2, r2, #1
 800191a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800191c:	e00f      	b.n	800193e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800191e:	f7ff fe6b 	bl	80015f8 <HAL_GetTick>
 8001922:	4602      	mov	r2, r0
 8001924:	693b      	ldr	r3, [r7, #16]
 8001926:	1ad3      	subs	r3, r2, r3
 8001928:	2b05      	cmp	r3, #5
 800192a:	d908      	bls.n	800193e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	2220      	movs	r2, #32
 8001930:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	2203      	movs	r2, #3
 8001936:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800193a:	2303      	movs	r3, #3
 800193c:	e078      	b.n	8001a30 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f003 0301 	and.w	r3, r3, #1
 8001948:	2b00      	cmp	r3, #0
 800194a:	d1e8      	bne.n	800191e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001954:	697a      	ldr	r2, [r7, #20]
 8001956:	4b38      	ldr	r3, [pc, #224]	; (8001a38 <HAL_DMA_Init+0x158>)
 8001958:	4013      	ands	r3, r2
 800195a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	685a      	ldr	r2, [r3, #4]
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	689b      	ldr	r3, [r3, #8]
 8001964:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800196a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	691b      	ldr	r3, [r3, #16]
 8001970:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001976:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	699b      	ldr	r3, [r3, #24]
 800197c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001982:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	6a1b      	ldr	r3, [r3, #32]
 8001988:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800198a:	697a      	ldr	r2, [r7, #20]
 800198c:	4313      	orrs	r3, r2
 800198e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001994:	2b04      	cmp	r3, #4
 8001996:	d107      	bne.n	80019a8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019a0:	4313      	orrs	r3, r2
 80019a2:	697a      	ldr	r2, [r7, #20]
 80019a4:	4313      	orrs	r3, r2
 80019a6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	697a      	ldr	r2, [r7, #20]
 80019ae:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	695b      	ldr	r3, [r3, #20]
 80019b6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80019b8:	697b      	ldr	r3, [r7, #20]
 80019ba:	f023 0307 	bic.w	r3, r3, #7
 80019be:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019c4:	697a      	ldr	r2, [r7, #20]
 80019c6:	4313      	orrs	r3, r2
 80019c8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019ce:	2b04      	cmp	r3, #4
 80019d0:	d117      	bne.n	8001a02 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019d6:	697a      	ldr	r2, [r7, #20]
 80019d8:	4313      	orrs	r3, r2
 80019da:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d00e      	beq.n	8001a02 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80019e4:	6878      	ldr	r0, [r7, #4]
 80019e6:	f000 fb5f 	bl	80020a8 <DMA_CheckFifoParam>
 80019ea:	4603      	mov	r3, r0
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d008      	beq.n	8001a02 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	2240      	movs	r2, #64	; 0x40
 80019f4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	2201      	movs	r2, #1
 80019fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80019fe:	2301      	movs	r3, #1
 8001a00:	e016      	b.n	8001a30 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	697a      	ldr	r2, [r7, #20]
 8001a08:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001a0a:	6878      	ldr	r0, [r7, #4]
 8001a0c:	f000 fb16 	bl	800203c <DMA_CalcBaseAndBitshift>
 8001a10:	4603      	mov	r3, r0
 8001a12:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a18:	223f      	movs	r2, #63	; 0x3f
 8001a1a:	409a      	lsls	r2, r3
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	2200      	movs	r2, #0
 8001a24:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	2201      	movs	r2, #1
 8001a2a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001a2e:	2300      	movs	r3, #0
}
 8001a30:	4618      	mov	r0, r3
 8001a32:	3718      	adds	r7, #24
 8001a34:	46bd      	mov	sp, r7
 8001a36:	bd80      	pop	{r7, pc}
 8001a38:	f010803f 	.word	0xf010803f

08001a3c <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b084      	sub	sp, #16
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d101      	bne.n	8001a4e <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	e050      	b.n	8001af0 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001a54:	b2db      	uxtb	r3, r3
 8001a56:	2b02      	cmp	r3, #2
 8001a58:	d101      	bne.n	8001a5e <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8001a5a:	2302      	movs	r3, #2
 8001a5c:	e048      	b.n	8001af0 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	681a      	ldr	r2, [r3, #0]
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f022 0201 	bic.w	r2, r2, #1
 8001a6c:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	2200      	movs	r2, #0
 8001a74:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	2200      	movs	r2, #0
 8001a84:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	2200      	movs	r2, #0
 8001a94:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	2221      	movs	r2, #33	; 0x21
 8001a9c:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001a9e:	6878      	ldr	r0, [r7, #4]
 8001aa0:	f000 facc 	bl	800203c <DMA_CalcBaseAndBitshift>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	2200      	movs	r2, #0
 8001aac:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	2200      	movs	r2, #0
 8001abe:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	2200      	movs	r2, #0
 8001aca:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ad0:	223f      	movs	r2, #63	; 0x3f
 8001ad2:	409a      	lsls	r2, r3
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	2200      	movs	r2, #0
 8001adc:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	2200      	movs	r2, #0
 8001aea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8001aee:	2300      	movs	r3, #0
}
 8001af0:	4618      	mov	r0, r3
 8001af2:	3710      	adds	r7, #16
 8001af4:	46bd      	mov	sp, r7
 8001af6:	bd80      	pop	{r7, pc}

08001af8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b086      	sub	sp, #24
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	60f8      	str	r0, [r7, #12]
 8001b00:	60b9      	str	r1, [r7, #8]
 8001b02:	607a      	str	r2, [r7, #4]
 8001b04:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001b06:	2300      	movs	r3, #0
 8001b08:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b0e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001b16:	2b01      	cmp	r3, #1
 8001b18:	d101      	bne.n	8001b1e <HAL_DMA_Start_IT+0x26>
 8001b1a:	2302      	movs	r3, #2
 8001b1c:	e040      	b.n	8001ba0 <HAL_DMA_Start_IT+0xa8>
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	2201      	movs	r2, #1
 8001b22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001b2c:	b2db      	uxtb	r3, r3
 8001b2e:	2b01      	cmp	r3, #1
 8001b30:	d12f      	bne.n	8001b92 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	2202      	movs	r2, #2
 8001b36:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	687a      	ldr	r2, [r7, #4]
 8001b44:	68b9      	ldr	r1, [r7, #8]
 8001b46:	68f8      	ldr	r0, [r7, #12]
 8001b48:	f000 fa4a 	bl	8001fe0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b50:	223f      	movs	r2, #63	; 0x3f
 8001b52:	409a      	lsls	r2, r3
 8001b54:	693b      	ldr	r3, [r7, #16]
 8001b56:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	681a      	ldr	r2, [r3, #0]
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f042 0216 	orr.w	r2, r2, #22
 8001b66:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d007      	beq.n	8001b80 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	681a      	ldr	r2, [r3, #0]
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f042 0208 	orr.w	r2, r2, #8
 8001b7e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	681a      	ldr	r2, [r3, #0]
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f042 0201 	orr.w	r2, r2, #1
 8001b8e:	601a      	str	r2, [r3, #0]
 8001b90:	e005      	b.n	8001b9e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	2200      	movs	r2, #0
 8001b96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001b9a:	2302      	movs	r3, #2
 8001b9c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001b9e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	3718      	adds	r7, #24
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	bd80      	pop	{r7, pc}

08001ba8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b084      	sub	sp, #16
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bb4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001bb6:	f7ff fd1f 	bl	80015f8 <HAL_GetTick>
 8001bba:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001bc2:	b2db      	uxtb	r3, r3
 8001bc4:	2b02      	cmp	r3, #2
 8001bc6:	d008      	beq.n	8001bda <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	2280      	movs	r2, #128	; 0x80
 8001bcc:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	e052      	b.n	8001c80 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	681a      	ldr	r2, [r3, #0]
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f022 0216 	bic.w	r2, r2, #22
 8001be8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	695a      	ldr	r2, [r3, #20]
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001bf8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d103      	bne.n	8001c0a <HAL_DMA_Abort+0x62>
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d007      	beq.n	8001c1a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	681a      	ldr	r2, [r3, #0]
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f022 0208 	bic.w	r2, r2, #8
 8001c18:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	681a      	ldr	r2, [r3, #0]
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f022 0201 	bic.w	r2, r2, #1
 8001c28:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c2a:	e013      	b.n	8001c54 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001c2c:	f7ff fce4 	bl	80015f8 <HAL_GetTick>
 8001c30:	4602      	mov	r2, r0
 8001c32:	68bb      	ldr	r3, [r7, #8]
 8001c34:	1ad3      	subs	r3, r2, r3
 8001c36:	2b05      	cmp	r3, #5
 8001c38:	d90c      	bls.n	8001c54 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	2220      	movs	r2, #32
 8001c3e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	2203      	movs	r2, #3
 8001c44:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001c50:	2303      	movs	r3, #3
 8001c52:	e015      	b.n	8001c80 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f003 0301 	and.w	r3, r3, #1
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d1e4      	bne.n	8001c2c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c66:	223f      	movs	r2, #63	; 0x3f
 8001c68:	409a      	lsls	r2, r3
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	2201      	movs	r2, #1
 8001c72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	2200      	movs	r2, #0
 8001c7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001c7e:	2300      	movs	r3, #0
}
 8001c80:	4618      	mov	r0, r3
 8001c82:	3710      	adds	r7, #16
 8001c84:	46bd      	mov	sp, r7
 8001c86:	bd80      	pop	{r7, pc}

08001c88 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	b083      	sub	sp, #12
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001c96:	b2db      	uxtb	r3, r3
 8001c98:	2b02      	cmp	r3, #2
 8001c9a:	d004      	beq.n	8001ca6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	2280      	movs	r2, #128	; 0x80
 8001ca0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001ca2:	2301      	movs	r3, #1
 8001ca4:	e00c      	b.n	8001cc0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	2205      	movs	r2, #5
 8001caa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	681a      	ldr	r2, [r3, #0]
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f022 0201 	bic.w	r2, r2, #1
 8001cbc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001cbe:	2300      	movs	r3, #0
}
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	370c      	adds	r7, #12
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cca:	4770      	bx	lr

08001ccc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b086      	sub	sp, #24
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001cd8:	4b8e      	ldr	r3, [pc, #568]	; (8001f14 <HAL_DMA_IRQHandler+0x248>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	4a8e      	ldr	r2, [pc, #568]	; (8001f18 <HAL_DMA_IRQHandler+0x24c>)
 8001cde:	fba2 2303 	umull	r2, r3, r2, r3
 8001ce2:	0a9b      	lsrs	r3, r3, #10
 8001ce4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cea:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001cec:	693b      	ldr	r3, [r7, #16]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cf6:	2208      	movs	r2, #8
 8001cf8:	409a      	lsls	r2, r3
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	4013      	ands	r3, r2
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d01a      	beq.n	8001d38 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f003 0304 	and.w	r3, r3, #4
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d013      	beq.n	8001d38 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	681a      	ldr	r2, [r3, #0]
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f022 0204 	bic.w	r2, r2, #4
 8001d1e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d24:	2208      	movs	r2, #8
 8001d26:	409a      	lsls	r2, r3
 8001d28:	693b      	ldr	r3, [r7, #16]
 8001d2a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d30:	f043 0201 	orr.w	r2, r3, #1
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d3c:	2201      	movs	r2, #1
 8001d3e:	409a      	lsls	r2, r3
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	4013      	ands	r3, r2
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d012      	beq.n	8001d6e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	695b      	ldr	r3, [r3, #20]
 8001d4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d00b      	beq.n	8001d6e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d5a:	2201      	movs	r2, #1
 8001d5c:	409a      	lsls	r2, r3
 8001d5e:	693b      	ldr	r3, [r7, #16]
 8001d60:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d66:	f043 0202 	orr.w	r2, r3, #2
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d72:	2204      	movs	r2, #4
 8001d74:	409a      	lsls	r2, r3
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	4013      	ands	r3, r2
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d012      	beq.n	8001da4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f003 0302 	and.w	r3, r3, #2
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d00b      	beq.n	8001da4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d90:	2204      	movs	r2, #4
 8001d92:	409a      	lsls	r2, r3
 8001d94:	693b      	ldr	r3, [r7, #16]
 8001d96:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d9c:	f043 0204 	orr.w	r2, r3, #4
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001da8:	2210      	movs	r2, #16
 8001daa:	409a      	lsls	r2, r3
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	4013      	ands	r3, r2
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d043      	beq.n	8001e3c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f003 0308 	and.w	r3, r3, #8
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d03c      	beq.n	8001e3c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dc6:	2210      	movs	r2, #16
 8001dc8:	409a      	lsls	r2, r3
 8001dca:	693b      	ldr	r3, [r7, #16]
 8001dcc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d018      	beq.n	8001e0e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d108      	bne.n	8001dfc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d024      	beq.n	8001e3c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001df6:	6878      	ldr	r0, [r7, #4]
 8001df8:	4798      	blx	r3
 8001dfa:	e01f      	b.n	8001e3c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d01b      	beq.n	8001e3c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e08:	6878      	ldr	r0, [r7, #4]
 8001e0a:	4798      	blx	r3
 8001e0c:	e016      	b.n	8001e3c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d107      	bne.n	8001e2c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	681a      	ldr	r2, [r3, #0]
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f022 0208 	bic.w	r2, r2, #8
 8001e2a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d003      	beq.n	8001e3c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e38:	6878      	ldr	r0, [r7, #4]
 8001e3a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e40:	2220      	movs	r2, #32
 8001e42:	409a      	lsls	r2, r3
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	4013      	ands	r3, r2
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	f000 808f 	beq.w	8001f6c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f003 0310 	and.w	r3, r3, #16
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	f000 8087 	beq.w	8001f6c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e62:	2220      	movs	r2, #32
 8001e64:	409a      	lsls	r2, r3
 8001e66:	693b      	ldr	r3, [r7, #16]
 8001e68:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001e70:	b2db      	uxtb	r3, r3
 8001e72:	2b05      	cmp	r3, #5
 8001e74:	d136      	bne.n	8001ee4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	681a      	ldr	r2, [r3, #0]
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f022 0216 	bic.w	r2, r2, #22
 8001e84:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	695a      	ldr	r2, [r3, #20]
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001e94:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d103      	bne.n	8001ea6 <HAL_DMA_IRQHandler+0x1da>
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d007      	beq.n	8001eb6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	681a      	ldr	r2, [r3, #0]
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f022 0208 	bic.w	r2, r2, #8
 8001eb4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001eba:	223f      	movs	r2, #63	; 0x3f
 8001ebc:	409a      	lsls	r2, r3
 8001ebe:	693b      	ldr	r3, [r7, #16]
 8001ec0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	2201      	movs	r2, #1
 8001ec6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	2200      	movs	r2, #0
 8001ece:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d07e      	beq.n	8001fd8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ede:	6878      	ldr	r0, [r7, #4]
 8001ee0:	4798      	blx	r3
        }
        return;
 8001ee2:	e079      	b.n	8001fd8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d01d      	beq.n	8001f2e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d10d      	bne.n	8001f1c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d031      	beq.n	8001f6c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f0c:	6878      	ldr	r0, [r7, #4]
 8001f0e:	4798      	blx	r3
 8001f10:	e02c      	b.n	8001f6c <HAL_DMA_IRQHandler+0x2a0>
 8001f12:	bf00      	nop
 8001f14:	20000000 	.word	0x20000000
 8001f18:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d023      	beq.n	8001f6c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f28:	6878      	ldr	r0, [r7, #4]
 8001f2a:	4798      	blx	r3
 8001f2c:	e01e      	b.n	8001f6c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d10f      	bne.n	8001f5c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	681a      	ldr	r2, [r3, #0]
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f022 0210 	bic.w	r2, r2, #16
 8001f4a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	2201      	movs	r2, #1
 8001f50:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	2200      	movs	r2, #0
 8001f58:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d003      	beq.n	8001f6c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f68:	6878      	ldr	r0, [r7, #4]
 8001f6a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d032      	beq.n	8001fda <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f78:	f003 0301 	and.w	r3, r3, #1
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d022      	beq.n	8001fc6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	2205      	movs	r2, #5
 8001f84:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	681a      	ldr	r2, [r3, #0]
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f022 0201 	bic.w	r2, r2, #1
 8001f96:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001f98:	68bb      	ldr	r3, [r7, #8]
 8001f9a:	3301      	adds	r3, #1
 8001f9c:	60bb      	str	r3, [r7, #8]
 8001f9e:	697a      	ldr	r2, [r7, #20]
 8001fa0:	429a      	cmp	r2, r3
 8001fa2:	d307      	bcc.n	8001fb4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f003 0301 	and.w	r3, r3, #1
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d1f2      	bne.n	8001f98 <HAL_DMA_IRQHandler+0x2cc>
 8001fb2:	e000      	b.n	8001fb6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001fb4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	2201      	movs	r2, #1
 8001fba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d005      	beq.n	8001fda <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fd2:	6878      	ldr	r0, [r7, #4]
 8001fd4:	4798      	blx	r3
 8001fd6:	e000      	b.n	8001fda <HAL_DMA_IRQHandler+0x30e>
        return;
 8001fd8:	bf00      	nop
    }
  }
}
 8001fda:	3718      	adds	r7, #24
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	bd80      	pop	{r7, pc}

08001fe0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	b085      	sub	sp, #20
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	60f8      	str	r0, [r7, #12]
 8001fe8:	60b9      	str	r1, [r7, #8]
 8001fea:	607a      	str	r2, [r7, #4]
 8001fec:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	681a      	ldr	r2, [r3, #0]
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001ffc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	683a      	ldr	r2, [r7, #0]
 8002004:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	689b      	ldr	r3, [r3, #8]
 800200a:	2b40      	cmp	r3, #64	; 0x40
 800200c:	d108      	bne.n	8002020 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	687a      	ldr	r2, [r7, #4]
 8002014:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	68ba      	ldr	r2, [r7, #8]
 800201c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800201e:	e007      	b.n	8002030 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	68ba      	ldr	r2, [r7, #8]
 8002026:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	687a      	ldr	r2, [r7, #4]
 800202e:	60da      	str	r2, [r3, #12]
}
 8002030:	bf00      	nop
 8002032:	3714      	adds	r7, #20
 8002034:	46bd      	mov	sp, r7
 8002036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203a:	4770      	bx	lr

0800203c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800203c:	b480      	push	{r7}
 800203e:	b085      	sub	sp, #20
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	b2db      	uxtb	r3, r3
 800204a:	3b10      	subs	r3, #16
 800204c:	4a14      	ldr	r2, [pc, #80]	; (80020a0 <DMA_CalcBaseAndBitshift+0x64>)
 800204e:	fba2 2303 	umull	r2, r3, r2, r3
 8002052:	091b      	lsrs	r3, r3, #4
 8002054:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002056:	4a13      	ldr	r2, [pc, #76]	; (80020a4 <DMA_CalcBaseAndBitshift+0x68>)
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	4413      	add	r3, r2
 800205c:	781b      	ldrb	r3, [r3, #0]
 800205e:	461a      	mov	r2, r3
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	2b03      	cmp	r3, #3
 8002068:	d909      	bls.n	800207e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002072:	f023 0303 	bic.w	r3, r3, #3
 8002076:	1d1a      	adds	r2, r3, #4
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	659a      	str	r2, [r3, #88]	; 0x58
 800207c:	e007      	b.n	800208e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002086:	f023 0303 	bic.w	r3, r3, #3
 800208a:	687a      	ldr	r2, [r7, #4]
 800208c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002092:	4618      	mov	r0, r3
 8002094:	3714      	adds	r7, #20
 8002096:	46bd      	mov	sp, r7
 8002098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209c:	4770      	bx	lr
 800209e:	bf00      	nop
 80020a0:	aaaaaaab 	.word	0xaaaaaaab
 80020a4:	0800af28 	.word	0x0800af28

080020a8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80020a8:	b480      	push	{r7}
 80020aa:	b085      	sub	sp, #20
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80020b0:	2300      	movs	r3, #0
 80020b2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020b8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	699b      	ldr	r3, [r3, #24]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d11f      	bne.n	8002102 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80020c2:	68bb      	ldr	r3, [r7, #8]
 80020c4:	2b03      	cmp	r3, #3
 80020c6:	d856      	bhi.n	8002176 <DMA_CheckFifoParam+0xce>
 80020c8:	a201      	add	r2, pc, #4	; (adr r2, 80020d0 <DMA_CheckFifoParam+0x28>)
 80020ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020ce:	bf00      	nop
 80020d0:	080020e1 	.word	0x080020e1
 80020d4:	080020f3 	.word	0x080020f3
 80020d8:	080020e1 	.word	0x080020e1
 80020dc:	08002177 	.word	0x08002177
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020e4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d046      	beq.n	800217a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80020ec:	2301      	movs	r3, #1
 80020ee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80020f0:	e043      	b.n	800217a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020f6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80020fa:	d140      	bne.n	800217e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80020fc:	2301      	movs	r3, #1
 80020fe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002100:	e03d      	b.n	800217e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	699b      	ldr	r3, [r3, #24]
 8002106:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800210a:	d121      	bne.n	8002150 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800210c:	68bb      	ldr	r3, [r7, #8]
 800210e:	2b03      	cmp	r3, #3
 8002110:	d837      	bhi.n	8002182 <DMA_CheckFifoParam+0xda>
 8002112:	a201      	add	r2, pc, #4	; (adr r2, 8002118 <DMA_CheckFifoParam+0x70>)
 8002114:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002118:	08002129 	.word	0x08002129
 800211c:	0800212f 	.word	0x0800212f
 8002120:	08002129 	.word	0x08002129
 8002124:	08002141 	.word	0x08002141
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002128:	2301      	movs	r3, #1
 800212a:	73fb      	strb	r3, [r7, #15]
      break;
 800212c:	e030      	b.n	8002190 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002132:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002136:	2b00      	cmp	r3, #0
 8002138:	d025      	beq.n	8002186 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800213a:	2301      	movs	r3, #1
 800213c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800213e:	e022      	b.n	8002186 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002144:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002148:	d11f      	bne.n	800218a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800214a:	2301      	movs	r3, #1
 800214c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800214e:	e01c      	b.n	800218a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002150:	68bb      	ldr	r3, [r7, #8]
 8002152:	2b02      	cmp	r3, #2
 8002154:	d903      	bls.n	800215e <DMA_CheckFifoParam+0xb6>
 8002156:	68bb      	ldr	r3, [r7, #8]
 8002158:	2b03      	cmp	r3, #3
 800215a:	d003      	beq.n	8002164 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800215c:	e018      	b.n	8002190 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800215e:	2301      	movs	r3, #1
 8002160:	73fb      	strb	r3, [r7, #15]
      break;
 8002162:	e015      	b.n	8002190 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002168:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800216c:	2b00      	cmp	r3, #0
 800216e:	d00e      	beq.n	800218e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002170:	2301      	movs	r3, #1
 8002172:	73fb      	strb	r3, [r7, #15]
      break;
 8002174:	e00b      	b.n	800218e <DMA_CheckFifoParam+0xe6>
      break;
 8002176:	bf00      	nop
 8002178:	e00a      	b.n	8002190 <DMA_CheckFifoParam+0xe8>
      break;
 800217a:	bf00      	nop
 800217c:	e008      	b.n	8002190 <DMA_CheckFifoParam+0xe8>
      break;
 800217e:	bf00      	nop
 8002180:	e006      	b.n	8002190 <DMA_CheckFifoParam+0xe8>
      break;
 8002182:	bf00      	nop
 8002184:	e004      	b.n	8002190 <DMA_CheckFifoParam+0xe8>
      break;
 8002186:	bf00      	nop
 8002188:	e002      	b.n	8002190 <DMA_CheckFifoParam+0xe8>
      break;   
 800218a:	bf00      	nop
 800218c:	e000      	b.n	8002190 <DMA_CheckFifoParam+0xe8>
      break;
 800218e:	bf00      	nop
    }
  } 
  
  return status; 
 8002190:	7bfb      	ldrb	r3, [r7, #15]
}
 8002192:	4618      	mov	r0, r3
 8002194:	3714      	adds	r7, #20
 8002196:	46bd      	mov	sp, r7
 8002198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219c:	4770      	bx	lr
 800219e:	bf00      	nop

080021a0 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b086      	sub	sp, #24
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	60f8      	str	r0, [r7, #12]
 80021a8:	60b9      	str	r1, [r7, #8]
 80021aa:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 80021ae:	2301      	movs	r3, #1
 80021b0:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80021b2:	4b23      	ldr	r3, [pc, #140]	; (8002240 <HAL_FLASH_Program+0xa0>)
 80021b4:	7e1b      	ldrb	r3, [r3, #24]
 80021b6:	2b01      	cmp	r3, #1
 80021b8:	d101      	bne.n	80021be <HAL_FLASH_Program+0x1e>
 80021ba:	2302      	movs	r3, #2
 80021bc:	e03b      	b.n	8002236 <HAL_FLASH_Program+0x96>
 80021be:	4b20      	ldr	r3, [pc, #128]	; (8002240 <HAL_FLASH_Program+0xa0>)
 80021c0:	2201      	movs	r2, #1
 80021c2:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80021c4:	f24c 3050 	movw	r0, #50000	; 0xc350
 80021c8:	f000 f870 	bl	80022ac <FLASH_WaitForLastOperation>
 80021cc:	4603      	mov	r3, r0
 80021ce:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 80021d0:	7dfb      	ldrb	r3, [r7, #23]
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d12b      	bne.n	800222e <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d105      	bne.n	80021e8 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 80021dc:	783b      	ldrb	r3, [r7, #0]
 80021de:	4619      	mov	r1, r3
 80021e0:	68b8      	ldr	r0, [r7, #8]
 80021e2:	f000 f91b 	bl	800241c <FLASH_Program_Byte>
 80021e6:	e016      	b.n	8002216 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	2b01      	cmp	r3, #1
 80021ec:	d105      	bne.n	80021fa <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 80021ee:	883b      	ldrh	r3, [r7, #0]
 80021f0:	4619      	mov	r1, r3
 80021f2:	68b8      	ldr	r0, [r7, #8]
 80021f4:	f000 f8ee 	bl	80023d4 <FLASH_Program_HalfWord>
 80021f8:	e00d      	b.n	8002216 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	2b02      	cmp	r3, #2
 80021fe:	d105      	bne.n	800220c <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	4619      	mov	r1, r3
 8002204:	68b8      	ldr	r0, [r7, #8]
 8002206:	f000 f8c3 	bl	8002390 <FLASH_Program_Word>
 800220a:	e004      	b.n	8002216 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 800220c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002210:	68b8      	ldr	r0, [r7, #8]
 8002212:	f000 f88b 	bl	800232c <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002216:	f24c 3050 	movw	r0, #50000	; 0xc350
 800221a:	f000 f847 	bl	80022ac <FLASH_WaitForLastOperation>
 800221e:	4603      	mov	r3, r0
 8002220:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8002222:	4b08      	ldr	r3, [pc, #32]	; (8002244 <HAL_FLASH_Program+0xa4>)
 8002224:	691b      	ldr	r3, [r3, #16]
 8002226:	4a07      	ldr	r2, [pc, #28]	; (8002244 <HAL_FLASH_Program+0xa4>)
 8002228:	f023 0301 	bic.w	r3, r3, #1
 800222c:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800222e:	4b04      	ldr	r3, [pc, #16]	; (8002240 <HAL_FLASH_Program+0xa0>)
 8002230:	2200      	movs	r2, #0
 8002232:	761a      	strb	r2, [r3, #24]
  
  return status;
 8002234:	7dfb      	ldrb	r3, [r7, #23]
}
 8002236:	4618      	mov	r0, r3
 8002238:	3718      	adds	r7, #24
 800223a:	46bd      	mov	sp, r7
 800223c:	bd80      	pop	{r7, pc}
 800223e:	bf00      	nop
 8002240:	2000041c 	.word	0x2000041c
 8002244:	40023c00 	.word	0x40023c00

08002248 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8002248:	b480      	push	{r7}
 800224a:	b083      	sub	sp, #12
 800224c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800224e:	2300      	movs	r3, #0
 8002250:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8002252:	4b0b      	ldr	r3, [pc, #44]	; (8002280 <HAL_FLASH_Unlock+0x38>)
 8002254:	691b      	ldr	r3, [r3, #16]
 8002256:	2b00      	cmp	r3, #0
 8002258:	da0b      	bge.n	8002272 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800225a:	4b09      	ldr	r3, [pc, #36]	; (8002280 <HAL_FLASH_Unlock+0x38>)
 800225c:	4a09      	ldr	r2, [pc, #36]	; (8002284 <HAL_FLASH_Unlock+0x3c>)
 800225e:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8002260:	4b07      	ldr	r3, [pc, #28]	; (8002280 <HAL_FLASH_Unlock+0x38>)
 8002262:	4a09      	ldr	r2, [pc, #36]	; (8002288 <HAL_FLASH_Unlock+0x40>)
 8002264:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8002266:	4b06      	ldr	r3, [pc, #24]	; (8002280 <HAL_FLASH_Unlock+0x38>)
 8002268:	691b      	ldr	r3, [r3, #16]
 800226a:	2b00      	cmp	r3, #0
 800226c:	da01      	bge.n	8002272 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 800226e:	2301      	movs	r3, #1
 8002270:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8002272:	79fb      	ldrb	r3, [r7, #7]
}
 8002274:	4618      	mov	r0, r3
 8002276:	370c      	adds	r7, #12
 8002278:	46bd      	mov	sp, r7
 800227a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227e:	4770      	bx	lr
 8002280:	40023c00 	.word	0x40023c00
 8002284:	45670123 	.word	0x45670123
 8002288:	cdef89ab 	.word	0xcdef89ab

0800228c <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 800228c:	b480      	push	{r7}
 800228e:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8002290:	4b05      	ldr	r3, [pc, #20]	; (80022a8 <HAL_FLASH_Lock+0x1c>)
 8002292:	691b      	ldr	r3, [r3, #16]
 8002294:	4a04      	ldr	r2, [pc, #16]	; (80022a8 <HAL_FLASH_Lock+0x1c>)
 8002296:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800229a:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 800229c:	2300      	movs	r3, #0
}
 800229e:	4618      	mov	r0, r3
 80022a0:	46bd      	mov	sp, r7
 80022a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a6:	4770      	bx	lr
 80022a8:	40023c00 	.word	0x40023c00

080022ac <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b084      	sub	sp, #16
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80022b4:	2300      	movs	r3, #0
 80022b6:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80022b8:	4b1a      	ldr	r3, [pc, #104]	; (8002324 <FLASH_WaitForLastOperation+0x78>)
 80022ba:	2200      	movs	r2, #0
 80022bc:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 80022be:	f7ff f99b 	bl	80015f8 <HAL_GetTick>
 80022c2:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 80022c4:	e010      	b.n	80022e8 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022cc:	d00c      	beq.n	80022e8 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d007      	beq.n	80022e4 <FLASH_WaitForLastOperation+0x38>
 80022d4:	f7ff f990 	bl	80015f8 <HAL_GetTick>
 80022d8:	4602      	mov	r2, r0
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	1ad3      	subs	r3, r2, r3
 80022de:	687a      	ldr	r2, [r7, #4]
 80022e0:	429a      	cmp	r2, r3
 80022e2:	d201      	bcs.n	80022e8 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 80022e4:	2303      	movs	r3, #3
 80022e6:	e019      	b.n	800231c <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 80022e8:	4b0f      	ldr	r3, [pc, #60]	; (8002328 <FLASH_WaitForLastOperation+0x7c>)
 80022ea:	68db      	ldr	r3, [r3, #12]
 80022ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d1e8      	bne.n	80022c6 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 80022f4:	4b0c      	ldr	r3, [pc, #48]	; (8002328 <FLASH_WaitForLastOperation+0x7c>)
 80022f6:	68db      	ldr	r3, [r3, #12]
 80022f8:	f003 0301 	and.w	r3, r3, #1
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d002      	beq.n	8002306 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8002300:	4b09      	ldr	r3, [pc, #36]	; (8002328 <FLASH_WaitForLastOperation+0x7c>)
 8002302:	2201      	movs	r2, #1
 8002304:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8002306:	4b08      	ldr	r3, [pc, #32]	; (8002328 <FLASH_WaitForLastOperation+0x7c>)
 8002308:	68db      	ldr	r3, [r3, #12]
 800230a:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 800230e:	2b00      	cmp	r3, #0
 8002310:	d003      	beq.n	800231a <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8002312:	f000 f8a5 	bl	8002460 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8002316:	2301      	movs	r3, #1
 8002318:	e000      	b.n	800231c <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 800231a:	2300      	movs	r3, #0
  
}  
 800231c:	4618      	mov	r0, r3
 800231e:	3710      	adds	r7, #16
 8002320:	46bd      	mov	sp, r7
 8002322:	bd80      	pop	{r7, pc}
 8002324:	2000041c 	.word	0x2000041c
 8002328:	40023c00 	.word	0x40023c00

0800232c <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 800232c:	b480      	push	{r7}
 800232e:	b085      	sub	sp, #20
 8002330:	af00      	add	r7, sp, #0
 8002332:	60f8      	str	r0, [r7, #12]
 8002334:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002338:	4b14      	ldr	r3, [pc, #80]	; (800238c <FLASH_Program_DoubleWord+0x60>)
 800233a:	691b      	ldr	r3, [r3, #16]
 800233c:	4a13      	ldr	r2, [pc, #76]	; (800238c <FLASH_Program_DoubleWord+0x60>)
 800233e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002342:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8002344:	4b11      	ldr	r3, [pc, #68]	; (800238c <FLASH_Program_DoubleWord+0x60>)
 8002346:	691b      	ldr	r3, [r3, #16]
 8002348:	4a10      	ldr	r2, [pc, #64]	; (800238c <FLASH_Program_DoubleWord+0x60>)
 800234a:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800234e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8002350:	4b0e      	ldr	r3, [pc, #56]	; (800238c <FLASH_Program_DoubleWord+0x60>)
 8002352:	691b      	ldr	r3, [r3, #16]
 8002354:	4a0d      	ldr	r2, [pc, #52]	; (800238c <FLASH_Program_DoubleWord+0x60>)
 8002356:	f043 0301 	orr.w	r3, r3, #1
 800235a:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	683a      	ldr	r2, [r7, #0]
 8002360:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8002362:	f3bf 8f6f 	isb	sy
}
 8002366:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8002368:	e9d7 0100 	ldrd	r0, r1, [r7]
 800236c:	f04f 0200 	mov.w	r2, #0
 8002370:	f04f 0300 	mov.w	r3, #0
 8002374:	000a      	movs	r2, r1
 8002376:	2300      	movs	r3, #0
 8002378:	68f9      	ldr	r1, [r7, #12]
 800237a:	3104      	adds	r1, #4
 800237c:	4613      	mov	r3, r2
 800237e:	600b      	str	r3, [r1, #0]
}
 8002380:	bf00      	nop
 8002382:	3714      	adds	r7, #20
 8002384:	46bd      	mov	sp, r7
 8002386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238a:	4770      	bx	lr
 800238c:	40023c00 	.word	0x40023c00

08002390 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8002390:	b480      	push	{r7}
 8002392:	b083      	sub	sp, #12
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
 8002398:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800239a:	4b0d      	ldr	r3, [pc, #52]	; (80023d0 <FLASH_Program_Word+0x40>)
 800239c:	691b      	ldr	r3, [r3, #16]
 800239e:	4a0c      	ldr	r2, [pc, #48]	; (80023d0 <FLASH_Program_Word+0x40>)
 80023a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80023a4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 80023a6:	4b0a      	ldr	r3, [pc, #40]	; (80023d0 <FLASH_Program_Word+0x40>)
 80023a8:	691b      	ldr	r3, [r3, #16]
 80023aa:	4a09      	ldr	r2, [pc, #36]	; (80023d0 <FLASH_Program_Word+0x40>)
 80023ac:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80023b0:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80023b2:	4b07      	ldr	r3, [pc, #28]	; (80023d0 <FLASH_Program_Word+0x40>)
 80023b4:	691b      	ldr	r3, [r3, #16]
 80023b6:	4a06      	ldr	r2, [pc, #24]	; (80023d0 <FLASH_Program_Word+0x40>)
 80023b8:	f043 0301 	orr.w	r3, r3, #1
 80023bc:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	683a      	ldr	r2, [r7, #0]
 80023c2:	601a      	str	r2, [r3, #0]
}
 80023c4:	bf00      	nop
 80023c6:	370c      	adds	r7, #12
 80023c8:	46bd      	mov	sp, r7
 80023ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ce:	4770      	bx	lr
 80023d0:	40023c00 	.word	0x40023c00

080023d4 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 80023d4:	b480      	push	{r7}
 80023d6:	b083      	sub	sp, #12
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
 80023dc:	460b      	mov	r3, r1
 80023de:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80023e0:	4b0d      	ldr	r3, [pc, #52]	; (8002418 <FLASH_Program_HalfWord+0x44>)
 80023e2:	691b      	ldr	r3, [r3, #16]
 80023e4:	4a0c      	ldr	r2, [pc, #48]	; (8002418 <FLASH_Program_HalfWord+0x44>)
 80023e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80023ea:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 80023ec:	4b0a      	ldr	r3, [pc, #40]	; (8002418 <FLASH_Program_HalfWord+0x44>)
 80023ee:	691b      	ldr	r3, [r3, #16]
 80023f0:	4a09      	ldr	r2, [pc, #36]	; (8002418 <FLASH_Program_HalfWord+0x44>)
 80023f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023f6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80023f8:	4b07      	ldr	r3, [pc, #28]	; (8002418 <FLASH_Program_HalfWord+0x44>)
 80023fa:	691b      	ldr	r3, [r3, #16]
 80023fc:	4a06      	ldr	r2, [pc, #24]	; (8002418 <FLASH_Program_HalfWord+0x44>)
 80023fe:	f043 0301 	orr.w	r3, r3, #1
 8002402:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	887a      	ldrh	r2, [r7, #2]
 8002408:	801a      	strh	r2, [r3, #0]
}
 800240a:	bf00      	nop
 800240c:	370c      	adds	r7, #12
 800240e:	46bd      	mov	sp, r7
 8002410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002414:	4770      	bx	lr
 8002416:	bf00      	nop
 8002418:	40023c00 	.word	0x40023c00

0800241c <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 800241c:	b480      	push	{r7}
 800241e:	b083      	sub	sp, #12
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
 8002424:	460b      	mov	r3, r1
 8002426:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002428:	4b0c      	ldr	r3, [pc, #48]	; (800245c <FLASH_Program_Byte+0x40>)
 800242a:	691b      	ldr	r3, [r3, #16]
 800242c:	4a0b      	ldr	r2, [pc, #44]	; (800245c <FLASH_Program_Byte+0x40>)
 800242e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002432:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8002434:	4b09      	ldr	r3, [pc, #36]	; (800245c <FLASH_Program_Byte+0x40>)
 8002436:	4a09      	ldr	r2, [pc, #36]	; (800245c <FLASH_Program_Byte+0x40>)
 8002438:	691b      	ldr	r3, [r3, #16]
 800243a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800243c:	4b07      	ldr	r3, [pc, #28]	; (800245c <FLASH_Program_Byte+0x40>)
 800243e:	691b      	ldr	r3, [r3, #16]
 8002440:	4a06      	ldr	r2, [pc, #24]	; (800245c <FLASH_Program_Byte+0x40>)
 8002442:	f043 0301 	orr.w	r3, r3, #1
 8002446:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	78fa      	ldrb	r2, [r7, #3]
 800244c:	701a      	strb	r2, [r3, #0]
}
 800244e:	bf00      	nop
 8002450:	370c      	adds	r7, #12
 8002452:	46bd      	mov	sp, r7
 8002454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002458:	4770      	bx	lr
 800245a:	bf00      	nop
 800245c:	40023c00 	.word	0x40023c00

08002460 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8002460:	b480      	push	{r7}
 8002462:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8002464:	4b2f      	ldr	r3, [pc, #188]	; (8002524 <FLASH_SetErrorCode+0xc4>)
 8002466:	68db      	ldr	r3, [r3, #12]
 8002468:	f003 0310 	and.w	r3, r3, #16
 800246c:	2b00      	cmp	r3, #0
 800246e:	d008      	beq.n	8002482 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8002470:	4b2d      	ldr	r3, [pc, #180]	; (8002528 <FLASH_SetErrorCode+0xc8>)
 8002472:	69db      	ldr	r3, [r3, #28]
 8002474:	f043 0310 	orr.w	r3, r3, #16
 8002478:	4a2b      	ldr	r2, [pc, #172]	; (8002528 <FLASH_SetErrorCode+0xc8>)
 800247a:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 800247c:	4b29      	ldr	r3, [pc, #164]	; (8002524 <FLASH_SetErrorCode+0xc4>)
 800247e:	2210      	movs	r2, #16
 8002480:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8002482:	4b28      	ldr	r3, [pc, #160]	; (8002524 <FLASH_SetErrorCode+0xc4>)
 8002484:	68db      	ldr	r3, [r3, #12]
 8002486:	f003 0320 	and.w	r3, r3, #32
 800248a:	2b00      	cmp	r3, #0
 800248c:	d008      	beq.n	80024a0 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 800248e:	4b26      	ldr	r3, [pc, #152]	; (8002528 <FLASH_SetErrorCode+0xc8>)
 8002490:	69db      	ldr	r3, [r3, #28]
 8002492:	f043 0308 	orr.w	r3, r3, #8
 8002496:	4a24      	ldr	r2, [pc, #144]	; (8002528 <FLASH_SetErrorCode+0xc8>)
 8002498:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 800249a:	4b22      	ldr	r3, [pc, #136]	; (8002524 <FLASH_SetErrorCode+0xc4>)
 800249c:	2220      	movs	r2, #32
 800249e:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 80024a0:	4b20      	ldr	r3, [pc, #128]	; (8002524 <FLASH_SetErrorCode+0xc4>)
 80024a2:	68db      	ldr	r3, [r3, #12]
 80024a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d008      	beq.n	80024be <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 80024ac:	4b1e      	ldr	r3, [pc, #120]	; (8002528 <FLASH_SetErrorCode+0xc8>)
 80024ae:	69db      	ldr	r3, [r3, #28]
 80024b0:	f043 0304 	orr.w	r3, r3, #4
 80024b4:	4a1c      	ldr	r2, [pc, #112]	; (8002528 <FLASH_SetErrorCode+0xc8>)
 80024b6:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 80024b8:	4b1a      	ldr	r3, [pc, #104]	; (8002524 <FLASH_SetErrorCode+0xc4>)
 80024ba:	2240      	movs	r2, #64	; 0x40
 80024bc:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 80024be:	4b19      	ldr	r3, [pc, #100]	; (8002524 <FLASH_SetErrorCode+0xc4>)
 80024c0:	68db      	ldr	r3, [r3, #12]
 80024c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d008      	beq.n	80024dc <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 80024ca:	4b17      	ldr	r3, [pc, #92]	; (8002528 <FLASH_SetErrorCode+0xc8>)
 80024cc:	69db      	ldr	r3, [r3, #28]
 80024ce:	f043 0302 	orr.w	r3, r3, #2
 80024d2:	4a15      	ldr	r2, [pc, #84]	; (8002528 <FLASH_SetErrorCode+0xc8>)
 80024d4:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 80024d6:	4b13      	ldr	r3, [pc, #76]	; (8002524 <FLASH_SetErrorCode+0xc4>)
 80024d8:	2280      	movs	r2, #128	; 0x80
 80024da:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 80024dc:	4b11      	ldr	r3, [pc, #68]	; (8002524 <FLASH_SetErrorCode+0xc4>)
 80024de:	68db      	ldr	r3, [r3, #12]
 80024e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d009      	beq.n	80024fc <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 80024e8:	4b0f      	ldr	r3, [pc, #60]	; (8002528 <FLASH_SetErrorCode+0xc8>)
 80024ea:	69db      	ldr	r3, [r3, #28]
 80024ec:	f043 0301 	orr.w	r3, r3, #1
 80024f0:	4a0d      	ldr	r2, [pc, #52]	; (8002528 <FLASH_SetErrorCode+0xc8>)
 80024f2:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 80024f4:	4b0b      	ldr	r3, [pc, #44]	; (8002524 <FLASH_SetErrorCode+0xc4>)
 80024f6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80024fa:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 80024fc:	4b09      	ldr	r3, [pc, #36]	; (8002524 <FLASH_SetErrorCode+0xc4>)
 80024fe:	68db      	ldr	r3, [r3, #12]
 8002500:	f003 0302 	and.w	r3, r3, #2
 8002504:	2b00      	cmp	r3, #0
 8002506:	d008      	beq.n	800251a <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8002508:	4b07      	ldr	r3, [pc, #28]	; (8002528 <FLASH_SetErrorCode+0xc8>)
 800250a:	69db      	ldr	r3, [r3, #28]
 800250c:	f043 0320 	orr.w	r3, r3, #32
 8002510:	4a05      	ldr	r2, [pc, #20]	; (8002528 <FLASH_SetErrorCode+0xc8>)
 8002512:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8002514:	4b03      	ldr	r3, [pc, #12]	; (8002524 <FLASH_SetErrorCode+0xc4>)
 8002516:	2202      	movs	r2, #2
 8002518:	60da      	str	r2, [r3, #12]
  }
}
 800251a:	bf00      	nop
 800251c:	46bd      	mov	sp, r7
 800251e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002522:	4770      	bx	lr
 8002524:	40023c00 	.word	0x40023c00
 8002528:	2000041c 	.word	0x2000041c

0800252c <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b084      	sub	sp, #16
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
 8002534:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002536:	2301      	movs	r3, #1
 8002538:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 800253a:	2300      	movs	r3, #0
 800253c:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800253e:	4b31      	ldr	r3, [pc, #196]	; (8002604 <HAL_FLASHEx_Erase+0xd8>)
 8002540:	7e1b      	ldrb	r3, [r3, #24]
 8002542:	2b01      	cmp	r3, #1
 8002544:	d101      	bne.n	800254a <HAL_FLASHEx_Erase+0x1e>
 8002546:	2302      	movs	r3, #2
 8002548:	e058      	b.n	80025fc <HAL_FLASHEx_Erase+0xd0>
 800254a:	4b2e      	ldr	r3, [pc, #184]	; (8002604 <HAL_FLASHEx_Erase+0xd8>)
 800254c:	2201      	movs	r2, #1
 800254e:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002550:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002554:	f7ff feaa 	bl	80022ac <FLASH_WaitForLastOperation>
 8002558:	4603      	mov	r3, r0
 800255a:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 800255c:	7bfb      	ldrb	r3, [r7, #15]
 800255e:	2b00      	cmp	r3, #0
 8002560:	d148      	bne.n	80025f4 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	f04f 32ff 	mov.w	r2, #4294967295
 8002568:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	2b01      	cmp	r3, #1
 8002570:	d115      	bne.n	800259e <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	691b      	ldr	r3, [r3, #16]
 8002576:	b2da      	uxtb	r2, r3
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	4619      	mov	r1, r3
 800257e:	4610      	mov	r0, r2
 8002580:	f000 f844 	bl	800260c <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002584:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002588:	f7ff fe90 	bl	80022ac <FLASH_WaitForLastOperation>
 800258c:	4603      	mov	r3, r0
 800258e:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8002590:	4b1d      	ldr	r3, [pc, #116]	; (8002608 <HAL_FLASHEx_Erase+0xdc>)
 8002592:	691b      	ldr	r3, [r3, #16]
 8002594:	4a1c      	ldr	r2, [pc, #112]	; (8002608 <HAL_FLASHEx_Erase+0xdc>)
 8002596:	f023 0304 	bic.w	r3, r3, #4
 800259a:	6113      	str	r3, [r2, #16]
 800259c:	e028      	b.n	80025f0 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	689b      	ldr	r3, [r3, #8]
 80025a2:	60bb      	str	r3, [r7, #8]
 80025a4:	e01c      	b.n	80025e0 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	691b      	ldr	r3, [r3, #16]
 80025aa:	b2db      	uxtb	r3, r3
 80025ac:	4619      	mov	r1, r3
 80025ae:	68b8      	ldr	r0, [r7, #8]
 80025b0:	f000 f850 	bl	8002654 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80025b4:	f24c 3050 	movw	r0, #50000	; 0xc350
 80025b8:	f7ff fe78 	bl	80022ac <FLASH_WaitForLastOperation>
 80025bc:	4603      	mov	r3, r0
 80025be:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 80025c0:	4b11      	ldr	r3, [pc, #68]	; (8002608 <HAL_FLASHEx_Erase+0xdc>)
 80025c2:	691b      	ldr	r3, [r3, #16]
 80025c4:	4a10      	ldr	r2, [pc, #64]	; (8002608 <HAL_FLASHEx_Erase+0xdc>)
 80025c6:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 80025ca:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 80025cc:	7bfb      	ldrb	r3, [r7, #15]
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d003      	beq.n	80025da <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	68ba      	ldr	r2, [r7, #8]
 80025d6:	601a      	str	r2, [r3, #0]
          break;
 80025d8:	e00a      	b.n	80025f0 <HAL_FLASHEx_Erase+0xc4>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 80025da:	68bb      	ldr	r3, [r7, #8]
 80025dc:	3301      	adds	r3, #1
 80025de:	60bb      	str	r3, [r7, #8]
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	68da      	ldr	r2, [r3, #12]
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	689b      	ldr	r3, [r3, #8]
 80025e8:	4413      	add	r3, r2
 80025ea:	68ba      	ldr	r2, [r7, #8]
 80025ec:	429a      	cmp	r2, r3
 80025ee:	d3da      	bcc.n	80025a6 <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 80025f0:	f000 f878 	bl	80026e4 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80025f4:	4b03      	ldr	r3, [pc, #12]	; (8002604 <HAL_FLASHEx_Erase+0xd8>)
 80025f6:	2200      	movs	r2, #0
 80025f8:	761a      	strb	r2, [r3, #24]

  return status;
 80025fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80025fc:	4618      	mov	r0, r3
 80025fe:	3710      	adds	r7, #16
 8002600:	46bd      	mov	sp, r7
 8002602:	bd80      	pop	{r7, pc}
 8002604:	2000041c 	.word	0x2000041c
 8002608:	40023c00 	.word	0x40023c00

0800260c <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 800260c:	b480      	push	{r7}
 800260e:	b083      	sub	sp, #12
 8002610:	af00      	add	r7, sp, #0
 8002612:	4603      	mov	r3, r0
 8002614:	6039      	str	r1, [r7, #0]
 8002616:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002618:	4b0d      	ldr	r3, [pc, #52]	; (8002650 <FLASH_MassErase+0x44>)
 800261a:	691b      	ldr	r3, [r3, #16]
 800261c:	4a0c      	ldr	r2, [pc, #48]	; (8002650 <FLASH_MassErase+0x44>)
 800261e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002622:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 8002624:	4b0a      	ldr	r3, [pc, #40]	; (8002650 <FLASH_MassErase+0x44>)
 8002626:	691b      	ldr	r3, [r3, #16]
 8002628:	4a09      	ldr	r2, [pc, #36]	; (8002650 <FLASH_MassErase+0x44>)
 800262a:	f043 0304 	orr.w	r3, r3, #4
 800262e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 8002630:	4b07      	ldr	r3, [pc, #28]	; (8002650 <FLASH_MassErase+0x44>)
 8002632:	691a      	ldr	r2, [r3, #16]
 8002634:	79fb      	ldrb	r3, [r7, #7]
 8002636:	021b      	lsls	r3, r3, #8
 8002638:	4313      	orrs	r3, r2
 800263a:	4a05      	ldr	r2, [pc, #20]	; (8002650 <FLASH_MassErase+0x44>)
 800263c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002640:	6113      	str	r3, [r2, #16]
}
 8002642:	bf00      	nop
 8002644:	370c      	adds	r7, #12
 8002646:	46bd      	mov	sp, r7
 8002648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264c:	4770      	bx	lr
 800264e:	bf00      	nop
 8002650:	40023c00 	.word	0x40023c00

08002654 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8002654:	b480      	push	{r7}
 8002656:	b085      	sub	sp, #20
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
 800265c:	460b      	mov	r3, r1
 800265e:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8002660:	2300      	movs	r3, #0
 8002662:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8002664:	78fb      	ldrb	r3, [r7, #3]
 8002666:	2b00      	cmp	r3, #0
 8002668:	d102      	bne.n	8002670 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 800266a:	2300      	movs	r3, #0
 800266c:	60fb      	str	r3, [r7, #12]
 800266e:	e010      	b.n	8002692 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8002670:	78fb      	ldrb	r3, [r7, #3]
 8002672:	2b01      	cmp	r3, #1
 8002674:	d103      	bne.n	800267e <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8002676:	f44f 7380 	mov.w	r3, #256	; 0x100
 800267a:	60fb      	str	r3, [r7, #12]
 800267c:	e009      	b.n	8002692 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 800267e:	78fb      	ldrb	r3, [r7, #3]
 8002680:	2b02      	cmp	r3, #2
 8002682:	d103      	bne.n	800268c <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8002684:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002688:	60fb      	str	r3, [r7, #12]
 800268a:	e002      	b.n	8002692 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 800268c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002690:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002692:	4b13      	ldr	r3, [pc, #76]	; (80026e0 <FLASH_Erase_Sector+0x8c>)
 8002694:	691b      	ldr	r3, [r3, #16]
 8002696:	4a12      	ldr	r2, [pc, #72]	; (80026e0 <FLASH_Erase_Sector+0x8c>)
 8002698:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800269c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 800269e:	4b10      	ldr	r3, [pc, #64]	; (80026e0 <FLASH_Erase_Sector+0x8c>)
 80026a0:	691a      	ldr	r2, [r3, #16]
 80026a2:	490f      	ldr	r1, [pc, #60]	; (80026e0 <FLASH_Erase_Sector+0x8c>)
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	4313      	orrs	r3, r2
 80026a8:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 80026aa:	4b0d      	ldr	r3, [pc, #52]	; (80026e0 <FLASH_Erase_Sector+0x8c>)
 80026ac:	691b      	ldr	r3, [r3, #16]
 80026ae:	4a0c      	ldr	r2, [pc, #48]	; (80026e0 <FLASH_Erase_Sector+0x8c>)
 80026b0:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80026b4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 80026b6:	4b0a      	ldr	r3, [pc, #40]	; (80026e0 <FLASH_Erase_Sector+0x8c>)
 80026b8:	691a      	ldr	r2, [r3, #16]
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	00db      	lsls	r3, r3, #3
 80026be:	4313      	orrs	r3, r2
 80026c0:	4a07      	ldr	r2, [pc, #28]	; (80026e0 <FLASH_Erase_Sector+0x8c>)
 80026c2:	f043 0302 	orr.w	r3, r3, #2
 80026c6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 80026c8:	4b05      	ldr	r3, [pc, #20]	; (80026e0 <FLASH_Erase_Sector+0x8c>)
 80026ca:	691b      	ldr	r3, [r3, #16]
 80026cc:	4a04      	ldr	r2, [pc, #16]	; (80026e0 <FLASH_Erase_Sector+0x8c>)
 80026ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026d2:	6113      	str	r3, [r2, #16]
}
 80026d4:	bf00      	nop
 80026d6:	3714      	adds	r7, #20
 80026d8:	46bd      	mov	sp, r7
 80026da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026de:	4770      	bx	lr
 80026e0:	40023c00 	.word	0x40023c00

080026e4 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 80026e4:	b480      	push	{r7}
 80026e6:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 80026e8:	4b20      	ldr	r3, [pc, #128]	; (800276c <FLASH_FlushCaches+0x88>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d017      	beq.n	8002724 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 80026f4:	4b1d      	ldr	r3, [pc, #116]	; (800276c <FLASH_FlushCaches+0x88>)
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	4a1c      	ldr	r2, [pc, #112]	; (800276c <FLASH_FlushCaches+0x88>)
 80026fa:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80026fe:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8002700:	4b1a      	ldr	r3, [pc, #104]	; (800276c <FLASH_FlushCaches+0x88>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	4a19      	ldr	r2, [pc, #100]	; (800276c <FLASH_FlushCaches+0x88>)
 8002706:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800270a:	6013      	str	r3, [r2, #0]
 800270c:	4b17      	ldr	r3, [pc, #92]	; (800276c <FLASH_FlushCaches+0x88>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	4a16      	ldr	r2, [pc, #88]	; (800276c <FLASH_FlushCaches+0x88>)
 8002712:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002716:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002718:	4b14      	ldr	r3, [pc, #80]	; (800276c <FLASH_FlushCaches+0x88>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	4a13      	ldr	r2, [pc, #76]	; (800276c <FLASH_FlushCaches+0x88>)
 800271e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002722:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8002724:	4b11      	ldr	r3, [pc, #68]	; (800276c <FLASH_FlushCaches+0x88>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800272c:	2b00      	cmp	r3, #0
 800272e:	d017      	beq.n	8002760 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8002730:	4b0e      	ldr	r3, [pc, #56]	; (800276c <FLASH_FlushCaches+0x88>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	4a0d      	ldr	r2, [pc, #52]	; (800276c <FLASH_FlushCaches+0x88>)
 8002736:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800273a:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 800273c:	4b0b      	ldr	r3, [pc, #44]	; (800276c <FLASH_FlushCaches+0x88>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	4a0a      	ldr	r2, [pc, #40]	; (800276c <FLASH_FlushCaches+0x88>)
 8002742:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002746:	6013      	str	r3, [r2, #0]
 8002748:	4b08      	ldr	r3, [pc, #32]	; (800276c <FLASH_FlushCaches+0x88>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	4a07      	ldr	r2, [pc, #28]	; (800276c <FLASH_FlushCaches+0x88>)
 800274e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002752:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8002754:	4b05      	ldr	r3, [pc, #20]	; (800276c <FLASH_FlushCaches+0x88>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	4a04      	ldr	r2, [pc, #16]	; (800276c <FLASH_FlushCaches+0x88>)
 800275a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800275e:	6013      	str	r3, [r2, #0]
  }
}
 8002760:	bf00      	nop
 8002762:	46bd      	mov	sp, r7
 8002764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002768:	4770      	bx	lr
 800276a:	bf00      	nop
 800276c:	40023c00 	.word	0x40023c00

08002770 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002770:	b480      	push	{r7}
 8002772:	b089      	sub	sp, #36	; 0x24
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
 8002778:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800277a:	2300      	movs	r3, #0
 800277c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800277e:	2300      	movs	r3, #0
 8002780:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002782:	2300      	movs	r3, #0
 8002784:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002786:	2300      	movs	r3, #0
 8002788:	61fb      	str	r3, [r7, #28]
 800278a:	e159      	b.n	8002a40 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800278c:	2201      	movs	r2, #1
 800278e:	69fb      	ldr	r3, [r7, #28]
 8002790:	fa02 f303 	lsl.w	r3, r2, r3
 8002794:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	697a      	ldr	r2, [r7, #20]
 800279c:	4013      	ands	r3, r2
 800279e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80027a0:	693a      	ldr	r2, [r7, #16]
 80027a2:	697b      	ldr	r3, [r7, #20]
 80027a4:	429a      	cmp	r2, r3
 80027a6:	f040 8148 	bne.w	8002a3a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	685b      	ldr	r3, [r3, #4]
 80027ae:	f003 0303 	and.w	r3, r3, #3
 80027b2:	2b01      	cmp	r3, #1
 80027b4:	d005      	beq.n	80027c2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	685b      	ldr	r3, [r3, #4]
 80027ba:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80027be:	2b02      	cmp	r3, #2
 80027c0:	d130      	bne.n	8002824 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	689b      	ldr	r3, [r3, #8]
 80027c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80027c8:	69fb      	ldr	r3, [r7, #28]
 80027ca:	005b      	lsls	r3, r3, #1
 80027cc:	2203      	movs	r2, #3
 80027ce:	fa02 f303 	lsl.w	r3, r2, r3
 80027d2:	43db      	mvns	r3, r3
 80027d4:	69ba      	ldr	r2, [r7, #24]
 80027d6:	4013      	ands	r3, r2
 80027d8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	68da      	ldr	r2, [r3, #12]
 80027de:	69fb      	ldr	r3, [r7, #28]
 80027e0:	005b      	lsls	r3, r3, #1
 80027e2:	fa02 f303 	lsl.w	r3, r2, r3
 80027e6:	69ba      	ldr	r2, [r7, #24]
 80027e8:	4313      	orrs	r3, r2
 80027ea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	69ba      	ldr	r2, [r7, #24]
 80027f0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	685b      	ldr	r3, [r3, #4]
 80027f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80027f8:	2201      	movs	r2, #1
 80027fa:	69fb      	ldr	r3, [r7, #28]
 80027fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002800:	43db      	mvns	r3, r3
 8002802:	69ba      	ldr	r2, [r7, #24]
 8002804:	4013      	ands	r3, r2
 8002806:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	685b      	ldr	r3, [r3, #4]
 800280c:	091b      	lsrs	r3, r3, #4
 800280e:	f003 0201 	and.w	r2, r3, #1
 8002812:	69fb      	ldr	r3, [r7, #28]
 8002814:	fa02 f303 	lsl.w	r3, r2, r3
 8002818:	69ba      	ldr	r2, [r7, #24]
 800281a:	4313      	orrs	r3, r2
 800281c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	69ba      	ldr	r2, [r7, #24]
 8002822:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	685b      	ldr	r3, [r3, #4]
 8002828:	f003 0303 	and.w	r3, r3, #3
 800282c:	2b03      	cmp	r3, #3
 800282e:	d017      	beq.n	8002860 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	68db      	ldr	r3, [r3, #12]
 8002834:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002836:	69fb      	ldr	r3, [r7, #28]
 8002838:	005b      	lsls	r3, r3, #1
 800283a:	2203      	movs	r2, #3
 800283c:	fa02 f303 	lsl.w	r3, r2, r3
 8002840:	43db      	mvns	r3, r3
 8002842:	69ba      	ldr	r2, [r7, #24]
 8002844:	4013      	ands	r3, r2
 8002846:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	689a      	ldr	r2, [r3, #8]
 800284c:	69fb      	ldr	r3, [r7, #28]
 800284e:	005b      	lsls	r3, r3, #1
 8002850:	fa02 f303 	lsl.w	r3, r2, r3
 8002854:	69ba      	ldr	r2, [r7, #24]
 8002856:	4313      	orrs	r3, r2
 8002858:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	69ba      	ldr	r2, [r7, #24]
 800285e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	685b      	ldr	r3, [r3, #4]
 8002864:	f003 0303 	and.w	r3, r3, #3
 8002868:	2b02      	cmp	r3, #2
 800286a:	d123      	bne.n	80028b4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800286c:	69fb      	ldr	r3, [r7, #28]
 800286e:	08da      	lsrs	r2, r3, #3
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	3208      	adds	r2, #8
 8002874:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002878:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800287a:	69fb      	ldr	r3, [r7, #28]
 800287c:	f003 0307 	and.w	r3, r3, #7
 8002880:	009b      	lsls	r3, r3, #2
 8002882:	220f      	movs	r2, #15
 8002884:	fa02 f303 	lsl.w	r3, r2, r3
 8002888:	43db      	mvns	r3, r3
 800288a:	69ba      	ldr	r2, [r7, #24]
 800288c:	4013      	ands	r3, r2
 800288e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	691a      	ldr	r2, [r3, #16]
 8002894:	69fb      	ldr	r3, [r7, #28]
 8002896:	f003 0307 	and.w	r3, r3, #7
 800289a:	009b      	lsls	r3, r3, #2
 800289c:	fa02 f303 	lsl.w	r3, r2, r3
 80028a0:	69ba      	ldr	r2, [r7, #24]
 80028a2:	4313      	orrs	r3, r2
 80028a4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80028a6:	69fb      	ldr	r3, [r7, #28]
 80028a8:	08da      	lsrs	r2, r3, #3
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	3208      	adds	r2, #8
 80028ae:	69b9      	ldr	r1, [r7, #24]
 80028b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80028ba:	69fb      	ldr	r3, [r7, #28]
 80028bc:	005b      	lsls	r3, r3, #1
 80028be:	2203      	movs	r2, #3
 80028c0:	fa02 f303 	lsl.w	r3, r2, r3
 80028c4:	43db      	mvns	r3, r3
 80028c6:	69ba      	ldr	r2, [r7, #24]
 80028c8:	4013      	ands	r3, r2
 80028ca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	685b      	ldr	r3, [r3, #4]
 80028d0:	f003 0203 	and.w	r2, r3, #3
 80028d4:	69fb      	ldr	r3, [r7, #28]
 80028d6:	005b      	lsls	r3, r3, #1
 80028d8:	fa02 f303 	lsl.w	r3, r2, r3
 80028dc:	69ba      	ldr	r2, [r7, #24]
 80028de:	4313      	orrs	r3, r2
 80028e0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	69ba      	ldr	r2, [r7, #24]
 80028e6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	685b      	ldr	r3, [r3, #4]
 80028ec:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	f000 80a2 	beq.w	8002a3a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028f6:	2300      	movs	r3, #0
 80028f8:	60fb      	str	r3, [r7, #12]
 80028fa:	4b57      	ldr	r3, [pc, #348]	; (8002a58 <HAL_GPIO_Init+0x2e8>)
 80028fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028fe:	4a56      	ldr	r2, [pc, #344]	; (8002a58 <HAL_GPIO_Init+0x2e8>)
 8002900:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002904:	6453      	str	r3, [r2, #68]	; 0x44
 8002906:	4b54      	ldr	r3, [pc, #336]	; (8002a58 <HAL_GPIO_Init+0x2e8>)
 8002908:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800290a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800290e:	60fb      	str	r3, [r7, #12]
 8002910:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002912:	4a52      	ldr	r2, [pc, #328]	; (8002a5c <HAL_GPIO_Init+0x2ec>)
 8002914:	69fb      	ldr	r3, [r7, #28]
 8002916:	089b      	lsrs	r3, r3, #2
 8002918:	3302      	adds	r3, #2
 800291a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800291e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002920:	69fb      	ldr	r3, [r7, #28]
 8002922:	f003 0303 	and.w	r3, r3, #3
 8002926:	009b      	lsls	r3, r3, #2
 8002928:	220f      	movs	r2, #15
 800292a:	fa02 f303 	lsl.w	r3, r2, r3
 800292e:	43db      	mvns	r3, r3
 8002930:	69ba      	ldr	r2, [r7, #24]
 8002932:	4013      	ands	r3, r2
 8002934:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	4a49      	ldr	r2, [pc, #292]	; (8002a60 <HAL_GPIO_Init+0x2f0>)
 800293a:	4293      	cmp	r3, r2
 800293c:	d019      	beq.n	8002972 <HAL_GPIO_Init+0x202>
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	4a48      	ldr	r2, [pc, #288]	; (8002a64 <HAL_GPIO_Init+0x2f4>)
 8002942:	4293      	cmp	r3, r2
 8002944:	d013      	beq.n	800296e <HAL_GPIO_Init+0x1fe>
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	4a47      	ldr	r2, [pc, #284]	; (8002a68 <HAL_GPIO_Init+0x2f8>)
 800294a:	4293      	cmp	r3, r2
 800294c:	d00d      	beq.n	800296a <HAL_GPIO_Init+0x1fa>
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	4a46      	ldr	r2, [pc, #280]	; (8002a6c <HAL_GPIO_Init+0x2fc>)
 8002952:	4293      	cmp	r3, r2
 8002954:	d007      	beq.n	8002966 <HAL_GPIO_Init+0x1f6>
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	4a45      	ldr	r2, [pc, #276]	; (8002a70 <HAL_GPIO_Init+0x300>)
 800295a:	4293      	cmp	r3, r2
 800295c:	d101      	bne.n	8002962 <HAL_GPIO_Init+0x1f2>
 800295e:	2304      	movs	r3, #4
 8002960:	e008      	b.n	8002974 <HAL_GPIO_Init+0x204>
 8002962:	2307      	movs	r3, #7
 8002964:	e006      	b.n	8002974 <HAL_GPIO_Init+0x204>
 8002966:	2303      	movs	r3, #3
 8002968:	e004      	b.n	8002974 <HAL_GPIO_Init+0x204>
 800296a:	2302      	movs	r3, #2
 800296c:	e002      	b.n	8002974 <HAL_GPIO_Init+0x204>
 800296e:	2301      	movs	r3, #1
 8002970:	e000      	b.n	8002974 <HAL_GPIO_Init+0x204>
 8002972:	2300      	movs	r3, #0
 8002974:	69fa      	ldr	r2, [r7, #28]
 8002976:	f002 0203 	and.w	r2, r2, #3
 800297a:	0092      	lsls	r2, r2, #2
 800297c:	4093      	lsls	r3, r2
 800297e:	69ba      	ldr	r2, [r7, #24]
 8002980:	4313      	orrs	r3, r2
 8002982:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002984:	4935      	ldr	r1, [pc, #212]	; (8002a5c <HAL_GPIO_Init+0x2ec>)
 8002986:	69fb      	ldr	r3, [r7, #28]
 8002988:	089b      	lsrs	r3, r3, #2
 800298a:	3302      	adds	r3, #2
 800298c:	69ba      	ldr	r2, [r7, #24]
 800298e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002992:	4b38      	ldr	r3, [pc, #224]	; (8002a74 <HAL_GPIO_Init+0x304>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002998:	693b      	ldr	r3, [r7, #16]
 800299a:	43db      	mvns	r3, r3
 800299c:	69ba      	ldr	r2, [r7, #24]
 800299e:	4013      	ands	r3, r2
 80029a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	685b      	ldr	r3, [r3, #4]
 80029a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d003      	beq.n	80029b6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80029ae:	69ba      	ldr	r2, [r7, #24]
 80029b0:	693b      	ldr	r3, [r7, #16]
 80029b2:	4313      	orrs	r3, r2
 80029b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80029b6:	4a2f      	ldr	r2, [pc, #188]	; (8002a74 <HAL_GPIO_Init+0x304>)
 80029b8:	69bb      	ldr	r3, [r7, #24]
 80029ba:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80029bc:	4b2d      	ldr	r3, [pc, #180]	; (8002a74 <HAL_GPIO_Init+0x304>)
 80029be:	685b      	ldr	r3, [r3, #4]
 80029c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029c2:	693b      	ldr	r3, [r7, #16]
 80029c4:	43db      	mvns	r3, r3
 80029c6:	69ba      	ldr	r2, [r7, #24]
 80029c8:	4013      	ands	r3, r2
 80029ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	685b      	ldr	r3, [r3, #4]
 80029d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d003      	beq.n	80029e0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80029d8:	69ba      	ldr	r2, [r7, #24]
 80029da:	693b      	ldr	r3, [r7, #16]
 80029dc:	4313      	orrs	r3, r2
 80029de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80029e0:	4a24      	ldr	r2, [pc, #144]	; (8002a74 <HAL_GPIO_Init+0x304>)
 80029e2:	69bb      	ldr	r3, [r7, #24]
 80029e4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80029e6:	4b23      	ldr	r3, [pc, #140]	; (8002a74 <HAL_GPIO_Init+0x304>)
 80029e8:	689b      	ldr	r3, [r3, #8]
 80029ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029ec:	693b      	ldr	r3, [r7, #16]
 80029ee:	43db      	mvns	r3, r3
 80029f0:	69ba      	ldr	r2, [r7, #24]
 80029f2:	4013      	ands	r3, r2
 80029f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	685b      	ldr	r3, [r3, #4]
 80029fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d003      	beq.n	8002a0a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002a02:	69ba      	ldr	r2, [r7, #24]
 8002a04:	693b      	ldr	r3, [r7, #16]
 8002a06:	4313      	orrs	r3, r2
 8002a08:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002a0a:	4a1a      	ldr	r2, [pc, #104]	; (8002a74 <HAL_GPIO_Init+0x304>)
 8002a0c:	69bb      	ldr	r3, [r7, #24]
 8002a0e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002a10:	4b18      	ldr	r3, [pc, #96]	; (8002a74 <HAL_GPIO_Init+0x304>)
 8002a12:	68db      	ldr	r3, [r3, #12]
 8002a14:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a16:	693b      	ldr	r3, [r7, #16]
 8002a18:	43db      	mvns	r3, r3
 8002a1a:	69ba      	ldr	r2, [r7, #24]
 8002a1c:	4013      	ands	r3, r2
 8002a1e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	685b      	ldr	r3, [r3, #4]
 8002a24:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d003      	beq.n	8002a34 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002a2c:	69ba      	ldr	r2, [r7, #24]
 8002a2e:	693b      	ldr	r3, [r7, #16]
 8002a30:	4313      	orrs	r3, r2
 8002a32:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002a34:	4a0f      	ldr	r2, [pc, #60]	; (8002a74 <HAL_GPIO_Init+0x304>)
 8002a36:	69bb      	ldr	r3, [r7, #24]
 8002a38:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a3a:	69fb      	ldr	r3, [r7, #28]
 8002a3c:	3301      	adds	r3, #1
 8002a3e:	61fb      	str	r3, [r7, #28]
 8002a40:	69fb      	ldr	r3, [r7, #28]
 8002a42:	2b0f      	cmp	r3, #15
 8002a44:	f67f aea2 	bls.w	800278c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002a48:	bf00      	nop
 8002a4a:	bf00      	nop
 8002a4c:	3724      	adds	r7, #36	; 0x24
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a54:	4770      	bx	lr
 8002a56:	bf00      	nop
 8002a58:	40023800 	.word	0x40023800
 8002a5c:	40013800 	.word	0x40013800
 8002a60:	40020000 	.word	0x40020000
 8002a64:	40020400 	.word	0x40020400
 8002a68:	40020800 	.word	0x40020800
 8002a6c:	40020c00 	.word	0x40020c00
 8002a70:	40021000 	.word	0x40021000
 8002a74:	40013c00 	.word	0x40013c00

08002a78 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002a78:	b480      	push	{r7}
 8002a7a:	b087      	sub	sp, #28
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
 8002a80:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002a82:	2300      	movs	r3, #0
 8002a84:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8002a86:	2300      	movs	r3, #0
 8002a88:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a8e:	2300      	movs	r3, #0
 8002a90:	617b      	str	r3, [r7, #20]
 8002a92:	e0bb      	b.n	8002c0c <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002a94:	2201      	movs	r2, #1
 8002a96:	697b      	ldr	r3, [r7, #20]
 8002a98:	fa02 f303 	lsl.w	r3, r2, r3
 8002a9c:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8002a9e:	683a      	ldr	r2, [r7, #0]
 8002aa0:	693b      	ldr	r3, [r7, #16]
 8002aa2:	4013      	ands	r3, r2
 8002aa4:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8002aa6:	68fa      	ldr	r2, [r7, #12]
 8002aa8:	693b      	ldr	r3, [r7, #16]
 8002aaa:	429a      	cmp	r2, r3
 8002aac:	f040 80ab 	bne.w	8002c06 <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8002ab0:	4a5c      	ldr	r2, [pc, #368]	; (8002c24 <HAL_GPIO_DeInit+0x1ac>)
 8002ab2:	697b      	ldr	r3, [r7, #20]
 8002ab4:	089b      	lsrs	r3, r3, #2
 8002ab6:	3302      	adds	r3, #2
 8002ab8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002abc:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8002abe:	697b      	ldr	r3, [r7, #20]
 8002ac0:	f003 0303 	and.w	r3, r3, #3
 8002ac4:	009b      	lsls	r3, r3, #2
 8002ac6:	220f      	movs	r2, #15
 8002ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8002acc:	68ba      	ldr	r2, [r7, #8]
 8002ace:	4013      	ands	r3, r2
 8002ad0:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	4a54      	ldr	r2, [pc, #336]	; (8002c28 <HAL_GPIO_DeInit+0x1b0>)
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	d019      	beq.n	8002b0e <HAL_GPIO_DeInit+0x96>
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	4a53      	ldr	r2, [pc, #332]	; (8002c2c <HAL_GPIO_DeInit+0x1b4>)
 8002ade:	4293      	cmp	r3, r2
 8002ae0:	d013      	beq.n	8002b0a <HAL_GPIO_DeInit+0x92>
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	4a52      	ldr	r2, [pc, #328]	; (8002c30 <HAL_GPIO_DeInit+0x1b8>)
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	d00d      	beq.n	8002b06 <HAL_GPIO_DeInit+0x8e>
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	4a51      	ldr	r2, [pc, #324]	; (8002c34 <HAL_GPIO_DeInit+0x1bc>)
 8002aee:	4293      	cmp	r3, r2
 8002af0:	d007      	beq.n	8002b02 <HAL_GPIO_DeInit+0x8a>
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	4a50      	ldr	r2, [pc, #320]	; (8002c38 <HAL_GPIO_DeInit+0x1c0>)
 8002af6:	4293      	cmp	r3, r2
 8002af8:	d101      	bne.n	8002afe <HAL_GPIO_DeInit+0x86>
 8002afa:	2304      	movs	r3, #4
 8002afc:	e008      	b.n	8002b10 <HAL_GPIO_DeInit+0x98>
 8002afe:	2307      	movs	r3, #7
 8002b00:	e006      	b.n	8002b10 <HAL_GPIO_DeInit+0x98>
 8002b02:	2303      	movs	r3, #3
 8002b04:	e004      	b.n	8002b10 <HAL_GPIO_DeInit+0x98>
 8002b06:	2302      	movs	r3, #2
 8002b08:	e002      	b.n	8002b10 <HAL_GPIO_DeInit+0x98>
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	e000      	b.n	8002b10 <HAL_GPIO_DeInit+0x98>
 8002b0e:	2300      	movs	r3, #0
 8002b10:	697a      	ldr	r2, [r7, #20]
 8002b12:	f002 0203 	and.w	r2, r2, #3
 8002b16:	0092      	lsls	r2, r2, #2
 8002b18:	4093      	lsls	r3, r2
 8002b1a:	68ba      	ldr	r2, [r7, #8]
 8002b1c:	429a      	cmp	r2, r3
 8002b1e:	d132      	bne.n	8002b86 <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8002b20:	4b46      	ldr	r3, [pc, #280]	; (8002c3c <HAL_GPIO_DeInit+0x1c4>)
 8002b22:	681a      	ldr	r2, [r3, #0]
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	43db      	mvns	r3, r3
 8002b28:	4944      	ldr	r1, [pc, #272]	; (8002c3c <HAL_GPIO_DeInit+0x1c4>)
 8002b2a:	4013      	ands	r3, r2
 8002b2c:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8002b2e:	4b43      	ldr	r3, [pc, #268]	; (8002c3c <HAL_GPIO_DeInit+0x1c4>)
 8002b30:	685a      	ldr	r2, [r3, #4]
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	43db      	mvns	r3, r3
 8002b36:	4941      	ldr	r1, [pc, #260]	; (8002c3c <HAL_GPIO_DeInit+0x1c4>)
 8002b38:	4013      	ands	r3, r2
 8002b3a:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8002b3c:	4b3f      	ldr	r3, [pc, #252]	; (8002c3c <HAL_GPIO_DeInit+0x1c4>)
 8002b3e:	689a      	ldr	r2, [r3, #8]
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	43db      	mvns	r3, r3
 8002b44:	493d      	ldr	r1, [pc, #244]	; (8002c3c <HAL_GPIO_DeInit+0x1c4>)
 8002b46:	4013      	ands	r3, r2
 8002b48:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8002b4a:	4b3c      	ldr	r3, [pc, #240]	; (8002c3c <HAL_GPIO_DeInit+0x1c4>)
 8002b4c:	68da      	ldr	r2, [r3, #12]
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	43db      	mvns	r3, r3
 8002b52:	493a      	ldr	r1, [pc, #232]	; (8002c3c <HAL_GPIO_DeInit+0x1c4>)
 8002b54:	4013      	ands	r3, r2
 8002b56:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8002b58:	697b      	ldr	r3, [r7, #20]
 8002b5a:	f003 0303 	and.w	r3, r3, #3
 8002b5e:	009b      	lsls	r3, r3, #2
 8002b60:	220f      	movs	r2, #15
 8002b62:	fa02 f303 	lsl.w	r3, r2, r3
 8002b66:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8002b68:	4a2e      	ldr	r2, [pc, #184]	; (8002c24 <HAL_GPIO_DeInit+0x1ac>)
 8002b6a:	697b      	ldr	r3, [r7, #20]
 8002b6c:	089b      	lsrs	r3, r3, #2
 8002b6e:	3302      	adds	r3, #2
 8002b70:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002b74:	68bb      	ldr	r3, [r7, #8]
 8002b76:	43da      	mvns	r2, r3
 8002b78:	482a      	ldr	r0, [pc, #168]	; (8002c24 <HAL_GPIO_DeInit+0x1ac>)
 8002b7a:	697b      	ldr	r3, [r7, #20]
 8002b7c:	089b      	lsrs	r3, r3, #2
 8002b7e:	400a      	ands	r2, r1
 8002b80:	3302      	adds	r3, #2
 8002b82:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681a      	ldr	r2, [r3, #0]
 8002b8a:	697b      	ldr	r3, [r7, #20]
 8002b8c:	005b      	lsls	r3, r3, #1
 8002b8e:	2103      	movs	r1, #3
 8002b90:	fa01 f303 	lsl.w	r3, r1, r3
 8002b94:	43db      	mvns	r3, r3
 8002b96:	401a      	ands	r2, r3
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002b9c:	697b      	ldr	r3, [r7, #20]
 8002b9e:	08da      	lsrs	r2, r3, #3
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	3208      	adds	r2, #8
 8002ba4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002ba8:	697b      	ldr	r3, [r7, #20]
 8002baa:	f003 0307 	and.w	r3, r3, #7
 8002bae:	009b      	lsls	r3, r3, #2
 8002bb0:	220f      	movs	r2, #15
 8002bb2:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb6:	43db      	mvns	r3, r3
 8002bb8:	697a      	ldr	r2, [r7, #20]
 8002bba:	08d2      	lsrs	r2, r2, #3
 8002bbc:	4019      	ands	r1, r3
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	3208      	adds	r2, #8
 8002bc2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	68da      	ldr	r2, [r3, #12]
 8002bca:	697b      	ldr	r3, [r7, #20]
 8002bcc:	005b      	lsls	r3, r3, #1
 8002bce:	2103      	movs	r1, #3
 8002bd0:	fa01 f303 	lsl.w	r3, r1, r3
 8002bd4:	43db      	mvns	r3, r3
 8002bd6:	401a      	ands	r2, r3
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	685a      	ldr	r2, [r3, #4]
 8002be0:	2101      	movs	r1, #1
 8002be2:	697b      	ldr	r3, [r7, #20]
 8002be4:	fa01 f303 	lsl.w	r3, r1, r3
 8002be8:	43db      	mvns	r3, r3
 8002bea:	401a      	ands	r2, r3
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	689a      	ldr	r2, [r3, #8]
 8002bf4:	697b      	ldr	r3, [r7, #20]
 8002bf6:	005b      	lsls	r3, r3, #1
 8002bf8:	2103      	movs	r1, #3
 8002bfa:	fa01 f303 	lsl.w	r3, r1, r3
 8002bfe:	43db      	mvns	r3, r3
 8002c00:	401a      	ands	r2, r3
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c06:	697b      	ldr	r3, [r7, #20]
 8002c08:	3301      	adds	r3, #1
 8002c0a:	617b      	str	r3, [r7, #20]
 8002c0c:	697b      	ldr	r3, [r7, #20]
 8002c0e:	2b0f      	cmp	r3, #15
 8002c10:	f67f af40 	bls.w	8002a94 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8002c14:	bf00      	nop
 8002c16:	bf00      	nop
 8002c18:	371c      	adds	r7, #28
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c20:	4770      	bx	lr
 8002c22:	bf00      	nop
 8002c24:	40013800 	.word	0x40013800
 8002c28:	40020000 	.word	0x40020000
 8002c2c:	40020400 	.word	0x40020400
 8002c30:	40020800 	.word	0x40020800
 8002c34:	40020c00 	.word	0x40020c00
 8002c38:	40021000 	.word	0x40021000
 8002c3c:	40013c00 	.word	0x40013c00

08002c40 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c40:	b480      	push	{r7}
 8002c42:	b083      	sub	sp, #12
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
 8002c48:	460b      	mov	r3, r1
 8002c4a:	807b      	strh	r3, [r7, #2]
 8002c4c:	4613      	mov	r3, r2
 8002c4e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002c50:	787b      	ldrb	r3, [r7, #1]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d003      	beq.n	8002c5e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002c56:	887a      	ldrh	r2, [r7, #2]
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002c5c:	e003      	b.n	8002c66 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002c5e:	887b      	ldrh	r3, [r7, #2]
 8002c60:	041a      	lsls	r2, r3, #16
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	619a      	str	r2, [r3, #24]
}
 8002c66:	bf00      	nop
 8002c68:	370c      	adds	r7, #12
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c70:	4770      	bx	lr

08002c72 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002c72:	b480      	push	{r7}
 8002c74:	b085      	sub	sp, #20
 8002c76:	af00      	add	r7, sp, #0
 8002c78:	6078      	str	r0, [r7, #4]
 8002c7a:	460b      	mov	r3, r1
 8002c7c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	695b      	ldr	r3, [r3, #20]
 8002c82:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002c84:	887a      	ldrh	r2, [r7, #2]
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	4013      	ands	r3, r2
 8002c8a:	041a      	lsls	r2, r3, #16
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	43d9      	mvns	r1, r3
 8002c90:	887b      	ldrh	r3, [r7, #2]
 8002c92:	400b      	ands	r3, r1
 8002c94:	431a      	orrs	r2, r3
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	619a      	str	r2, [r3, #24]
}
 8002c9a:	bf00      	nop
 8002c9c:	3714      	adds	r7, #20
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca4:	4770      	bx	lr

08002ca6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002ca6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ca8:	b08f      	sub	sp, #60	; 0x3c
 8002caa:	af0a      	add	r7, sp, #40	; 0x28
 8002cac:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d101      	bne.n	8002cb8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002cb4:	2301      	movs	r3, #1
 8002cb6:	e10f      	b.n	8002ed8 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8002cc4:	b2db      	uxtb	r3, r3
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d106      	bne.n	8002cd8 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	2200      	movs	r2, #0
 8002cce:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002cd2:	6878      	ldr	r0, [r7, #4]
 8002cd4:	f006 fd3a 	bl	800974c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2203      	movs	r2, #3
 8002cdc:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002ce0:	68bb      	ldr	r3, [r7, #8]
 8002ce2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ce4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d102      	bne.n	8002cf2 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2200      	movs	r2, #0
 8002cf0:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	f003 faef 	bl	80062da <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	603b      	str	r3, [r7, #0]
 8002d02:	687e      	ldr	r6, [r7, #4]
 8002d04:	466d      	mov	r5, sp
 8002d06:	f106 0410 	add.w	r4, r6, #16
 8002d0a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002d0c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002d0e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002d10:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002d12:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002d16:	e885 0003 	stmia.w	r5, {r0, r1}
 8002d1a:	1d33      	adds	r3, r6, #4
 8002d1c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002d1e:	6838      	ldr	r0, [r7, #0]
 8002d20:	f003 f9c6 	bl	80060b0 <USB_CoreInit>
 8002d24:	4603      	mov	r3, r0
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d005      	beq.n	8002d36 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	2202      	movs	r2, #2
 8002d2e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002d32:	2301      	movs	r3, #1
 8002d34:	e0d0      	b.n	8002ed8 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	2100      	movs	r1, #0
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	f003 fadd 	bl	80062fc <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d42:	2300      	movs	r3, #0
 8002d44:	73fb      	strb	r3, [r7, #15]
 8002d46:	e04a      	b.n	8002dde <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002d48:	7bfa      	ldrb	r2, [r7, #15]
 8002d4a:	6879      	ldr	r1, [r7, #4]
 8002d4c:	4613      	mov	r3, r2
 8002d4e:	00db      	lsls	r3, r3, #3
 8002d50:	1a9b      	subs	r3, r3, r2
 8002d52:	009b      	lsls	r3, r3, #2
 8002d54:	440b      	add	r3, r1
 8002d56:	333d      	adds	r3, #61	; 0x3d
 8002d58:	2201      	movs	r2, #1
 8002d5a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002d5c:	7bfa      	ldrb	r2, [r7, #15]
 8002d5e:	6879      	ldr	r1, [r7, #4]
 8002d60:	4613      	mov	r3, r2
 8002d62:	00db      	lsls	r3, r3, #3
 8002d64:	1a9b      	subs	r3, r3, r2
 8002d66:	009b      	lsls	r3, r3, #2
 8002d68:	440b      	add	r3, r1
 8002d6a:	333c      	adds	r3, #60	; 0x3c
 8002d6c:	7bfa      	ldrb	r2, [r7, #15]
 8002d6e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002d70:	7bfa      	ldrb	r2, [r7, #15]
 8002d72:	7bfb      	ldrb	r3, [r7, #15]
 8002d74:	b298      	uxth	r0, r3
 8002d76:	6879      	ldr	r1, [r7, #4]
 8002d78:	4613      	mov	r3, r2
 8002d7a:	00db      	lsls	r3, r3, #3
 8002d7c:	1a9b      	subs	r3, r3, r2
 8002d7e:	009b      	lsls	r3, r3, #2
 8002d80:	440b      	add	r3, r1
 8002d82:	3342      	adds	r3, #66	; 0x42
 8002d84:	4602      	mov	r2, r0
 8002d86:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002d88:	7bfa      	ldrb	r2, [r7, #15]
 8002d8a:	6879      	ldr	r1, [r7, #4]
 8002d8c:	4613      	mov	r3, r2
 8002d8e:	00db      	lsls	r3, r3, #3
 8002d90:	1a9b      	subs	r3, r3, r2
 8002d92:	009b      	lsls	r3, r3, #2
 8002d94:	440b      	add	r3, r1
 8002d96:	333f      	adds	r3, #63	; 0x3f
 8002d98:	2200      	movs	r2, #0
 8002d9a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002d9c:	7bfa      	ldrb	r2, [r7, #15]
 8002d9e:	6879      	ldr	r1, [r7, #4]
 8002da0:	4613      	mov	r3, r2
 8002da2:	00db      	lsls	r3, r3, #3
 8002da4:	1a9b      	subs	r3, r3, r2
 8002da6:	009b      	lsls	r3, r3, #2
 8002da8:	440b      	add	r3, r1
 8002daa:	3344      	adds	r3, #68	; 0x44
 8002dac:	2200      	movs	r2, #0
 8002dae:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002db0:	7bfa      	ldrb	r2, [r7, #15]
 8002db2:	6879      	ldr	r1, [r7, #4]
 8002db4:	4613      	mov	r3, r2
 8002db6:	00db      	lsls	r3, r3, #3
 8002db8:	1a9b      	subs	r3, r3, r2
 8002dba:	009b      	lsls	r3, r3, #2
 8002dbc:	440b      	add	r3, r1
 8002dbe:	3348      	adds	r3, #72	; 0x48
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002dc4:	7bfa      	ldrb	r2, [r7, #15]
 8002dc6:	6879      	ldr	r1, [r7, #4]
 8002dc8:	4613      	mov	r3, r2
 8002dca:	00db      	lsls	r3, r3, #3
 8002dcc:	1a9b      	subs	r3, r3, r2
 8002dce:	009b      	lsls	r3, r3, #2
 8002dd0:	440b      	add	r3, r1
 8002dd2:	3350      	adds	r3, #80	; 0x50
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002dd8:	7bfb      	ldrb	r3, [r7, #15]
 8002dda:	3301      	adds	r3, #1
 8002ddc:	73fb      	strb	r3, [r7, #15]
 8002dde:	7bfa      	ldrb	r2, [r7, #15]
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	685b      	ldr	r3, [r3, #4]
 8002de4:	429a      	cmp	r2, r3
 8002de6:	d3af      	bcc.n	8002d48 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002de8:	2300      	movs	r3, #0
 8002dea:	73fb      	strb	r3, [r7, #15]
 8002dec:	e044      	b.n	8002e78 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002dee:	7bfa      	ldrb	r2, [r7, #15]
 8002df0:	6879      	ldr	r1, [r7, #4]
 8002df2:	4613      	mov	r3, r2
 8002df4:	00db      	lsls	r3, r3, #3
 8002df6:	1a9b      	subs	r3, r3, r2
 8002df8:	009b      	lsls	r3, r3, #2
 8002dfa:	440b      	add	r3, r1
 8002dfc:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8002e00:	2200      	movs	r2, #0
 8002e02:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002e04:	7bfa      	ldrb	r2, [r7, #15]
 8002e06:	6879      	ldr	r1, [r7, #4]
 8002e08:	4613      	mov	r3, r2
 8002e0a:	00db      	lsls	r3, r3, #3
 8002e0c:	1a9b      	subs	r3, r3, r2
 8002e0e:	009b      	lsls	r3, r3, #2
 8002e10:	440b      	add	r3, r1
 8002e12:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8002e16:	7bfa      	ldrb	r2, [r7, #15]
 8002e18:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002e1a:	7bfa      	ldrb	r2, [r7, #15]
 8002e1c:	6879      	ldr	r1, [r7, #4]
 8002e1e:	4613      	mov	r3, r2
 8002e20:	00db      	lsls	r3, r3, #3
 8002e22:	1a9b      	subs	r3, r3, r2
 8002e24:	009b      	lsls	r3, r3, #2
 8002e26:	440b      	add	r3, r1
 8002e28:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002e30:	7bfa      	ldrb	r2, [r7, #15]
 8002e32:	6879      	ldr	r1, [r7, #4]
 8002e34:	4613      	mov	r3, r2
 8002e36:	00db      	lsls	r3, r3, #3
 8002e38:	1a9b      	subs	r3, r3, r2
 8002e3a:	009b      	lsls	r3, r3, #2
 8002e3c:	440b      	add	r3, r1
 8002e3e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002e42:	2200      	movs	r2, #0
 8002e44:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002e46:	7bfa      	ldrb	r2, [r7, #15]
 8002e48:	6879      	ldr	r1, [r7, #4]
 8002e4a:	4613      	mov	r3, r2
 8002e4c:	00db      	lsls	r3, r3, #3
 8002e4e:	1a9b      	subs	r3, r3, r2
 8002e50:	009b      	lsls	r3, r3, #2
 8002e52:	440b      	add	r3, r1
 8002e54:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002e58:	2200      	movs	r2, #0
 8002e5a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002e5c:	7bfa      	ldrb	r2, [r7, #15]
 8002e5e:	6879      	ldr	r1, [r7, #4]
 8002e60:	4613      	mov	r3, r2
 8002e62:	00db      	lsls	r3, r3, #3
 8002e64:	1a9b      	subs	r3, r3, r2
 8002e66:	009b      	lsls	r3, r3, #2
 8002e68:	440b      	add	r3, r1
 8002e6a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002e6e:	2200      	movs	r2, #0
 8002e70:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e72:	7bfb      	ldrb	r3, [r7, #15]
 8002e74:	3301      	adds	r3, #1
 8002e76:	73fb      	strb	r3, [r7, #15]
 8002e78:	7bfa      	ldrb	r2, [r7, #15]
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	685b      	ldr	r3, [r3, #4]
 8002e7e:	429a      	cmp	r2, r3
 8002e80:	d3b5      	bcc.n	8002dee <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	603b      	str	r3, [r7, #0]
 8002e88:	687e      	ldr	r6, [r7, #4]
 8002e8a:	466d      	mov	r5, sp
 8002e8c:	f106 0410 	add.w	r4, r6, #16
 8002e90:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002e92:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002e94:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002e96:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002e98:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002e9c:	e885 0003 	stmia.w	r5, {r0, r1}
 8002ea0:	1d33      	adds	r3, r6, #4
 8002ea2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002ea4:	6838      	ldr	r0, [r7, #0]
 8002ea6:	f003 fa75 	bl	8006394 <USB_DevInit>
 8002eaa:	4603      	mov	r3, r0
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d005      	beq.n	8002ebc <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2202      	movs	r2, #2
 8002eb4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002eb8:	2301      	movs	r3, #1
 8002eba:	e00d      	b.n	8002ed8 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2201      	movs	r2, #1
 8002ec8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	f004 faf1 	bl	80074b8 <USB_DevDisconnect>

  return HAL_OK;
 8002ed6:	2300      	movs	r3, #0
}
 8002ed8:	4618      	mov	r0, r3
 8002eda:	3714      	adds	r7, #20
 8002edc:	46bd      	mov	sp, r7
 8002ede:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002ee0 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b084      	sub	sp, #16
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002ef4:	2b01      	cmp	r3, #1
 8002ef6:	d101      	bne.n	8002efc <HAL_PCD_Start+0x1c>
 8002ef8:	2302      	movs	r3, #2
 8002efa:	e020      	b.n	8002f3e <HAL_PCD_Start+0x5e>
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2201      	movs	r2, #1
 8002f00:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f08:	2b01      	cmp	r3, #1
 8002f0a:	d109      	bne.n	8002f20 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002f10:	2b01      	cmp	r3, #1
 8002f12:	d005      	beq.n	8002f20 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f18:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	4618      	mov	r0, r3
 8002f26:	f003 f9c7 	bl	80062b8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	4618      	mov	r0, r3
 8002f30:	f004 faa1 	bl	8007476 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2200      	movs	r2, #0
 8002f38:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002f3c:	2300      	movs	r3, #0
}
 8002f3e:	4618      	mov	r0, r3
 8002f40:	3710      	adds	r7, #16
 8002f42:	46bd      	mov	sp, r7
 8002f44:	bd80      	pop	{r7, pc}

08002f46 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002f46:	b590      	push	{r4, r7, lr}
 8002f48:	b08d      	sub	sp, #52	; 0x34
 8002f4a:	af00      	add	r7, sp, #0
 8002f4c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002f54:	6a3b      	ldr	r3, [r7, #32]
 8002f56:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	f004 fb5f 	bl	8007620 <USB_GetMode>
 8002f62:	4603      	mov	r3, r0
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	f040 839d 	bne.w	80036a4 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4618      	mov	r0, r3
 8002f70:	f004 fac3 	bl	80074fa <USB_ReadInterrupts>
 8002f74:	4603      	mov	r3, r0
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	f000 8393 	beq.w	80036a2 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	4618      	mov	r0, r3
 8002f82:	f004 faba 	bl	80074fa <USB_ReadInterrupts>
 8002f86:	4603      	mov	r3, r0
 8002f88:	f003 0302 	and.w	r3, r3, #2
 8002f8c:	2b02      	cmp	r3, #2
 8002f8e:	d107      	bne.n	8002fa0 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	695a      	ldr	r2, [r3, #20]
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f002 0202 	and.w	r2, r2, #2
 8002f9e:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	f004 faa8 	bl	80074fa <USB_ReadInterrupts>
 8002faa:	4603      	mov	r3, r0
 8002fac:	f003 0310 	and.w	r3, r3, #16
 8002fb0:	2b10      	cmp	r3, #16
 8002fb2:	d161      	bne.n	8003078 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	699a      	ldr	r2, [r3, #24]
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f022 0210 	bic.w	r2, r2, #16
 8002fc2:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8002fc4:	6a3b      	ldr	r3, [r7, #32]
 8002fc6:	6a1b      	ldr	r3, [r3, #32]
 8002fc8:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8002fca:	69bb      	ldr	r3, [r7, #24]
 8002fcc:	f003 020f 	and.w	r2, r3, #15
 8002fd0:	4613      	mov	r3, r2
 8002fd2:	00db      	lsls	r3, r3, #3
 8002fd4:	1a9b      	subs	r3, r3, r2
 8002fd6:	009b      	lsls	r3, r3, #2
 8002fd8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002fdc:	687a      	ldr	r2, [r7, #4]
 8002fde:	4413      	add	r3, r2
 8002fe0:	3304      	adds	r3, #4
 8002fe2:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002fe4:	69bb      	ldr	r3, [r7, #24]
 8002fe6:	0c5b      	lsrs	r3, r3, #17
 8002fe8:	f003 030f 	and.w	r3, r3, #15
 8002fec:	2b02      	cmp	r3, #2
 8002fee:	d124      	bne.n	800303a <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002ff0:	69ba      	ldr	r2, [r7, #24]
 8002ff2:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002ff6:	4013      	ands	r3, r2
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d035      	beq.n	8003068 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002ffc:	697b      	ldr	r3, [r7, #20]
 8002ffe:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003000:	69bb      	ldr	r3, [r7, #24]
 8003002:	091b      	lsrs	r3, r3, #4
 8003004:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003006:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800300a:	b29b      	uxth	r3, r3
 800300c:	461a      	mov	r2, r3
 800300e:	6a38      	ldr	r0, [r7, #32]
 8003010:	f004 f8df 	bl	80071d2 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003014:	697b      	ldr	r3, [r7, #20]
 8003016:	68da      	ldr	r2, [r3, #12]
 8003018:	69bb      	ldr	r3, [r7, #24]
 800301a:	091b      	lsrs	r3, r3, #4
 800301c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003020:	441a      	add	r2, r3
 8003022:	697b      	ldr	r3, [r7, #20]
 8003024:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003026:	697b      	ldr	r3, [r7, #20]
 8003028:	699a      	ldr	r2, [r3, #24]
 800302a:	69bb      	ldr	r3, [r7, #24]
 800302c:	091b      	lsrs	r3, r3, #4
 800302e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003032:	441a      	add	r2, r3
 8003034:	697b      	ldr	r3, [r7, #20]
 8003036:	619a      	str	r2, [r3, #24]
 8003038:	e016      	b.n	8003068 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 800303a:	69bb      	ldr	r3, [r7, #24]
 800303c:	0c5b      	lsrs	r3, r3, #17
 800303e:	f003 030f 	and.w	r3, r3, #15
 8003042:	2b06      	cmp	r3, #6
 8003044:	d110      	bne.n	8003068 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800304c:	2208      	movs	r2, #8
 800304e:	4619      	mov	r1, r3
 8003050:	6a38      	ldr	r0, [r7, #32]
 8003052:	f004 f8be 	bl	80071d2 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003056:	697b      	ldr	r3, [r7, #20]
 8003058:	699a      	ldr	r2, [r3, #24]
 800305a:	69bb      	ldr	r3, [r7, #24]
 800305c:	091b      	lsrs	r3, r3, #4
 800305e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003062:	441a      	add	r2, r3
 8003064:	697b      	ldr	r3, [r7, #20]
 8003066:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	699a      	ldr	r2, [r3, #24]
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f042 0210 	orr.w	r2, r2, #16
 8003076:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	4618      	mov	r0, r3
 800307e:	f004 fa3c 	bl	80074fa <USB_ReadInterrupts>
 8003082:	4603      	mov	r3, r0
 8003084:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003088:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800308c:	d16e      	bne.n	800316c <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 800308e:	2300      	movs	r3, #0
 8003090:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	4618      	mov	r0, r3
 8003098:	f004 fa42 	bl	8007520 <USB_ReadDevAllOutEpInterrupt>
 800309c:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800309e:	e062      	b.n	8003166 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 80030a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030a2:	f003 0301 	and.w	r3, r3, #1
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d057      	beq.n	800315a <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030b0:	b2d2      	uxtb	r2, r2
 80030b2:	4611      	mov	r1, r2
 80030b4:	4618      	mov	r0, r3
 80030b6:	f004 fa67 	bl	8007588 <USB_ReadDevOutEPInterrupt>
 80030ba:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80030bc:	693b      	ldr	r3, [r7, #16]
 80030be:	f003 0301 	and.w	r3, r3, #1
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d00c      	beq.n	80030e0 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80030c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030c8:	015a      	lsls	r2, r3, #5
 80030ca:	69fb      	ldr	r3, [r7, #28]
 80030cc:	4413      	add	r3, r2
 80030ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030d2:	461a      	mov	r2, r3
 80030d4:	2301      	movs	r3, #1
 80030d6:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80030d8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80030da:	6878      	ldr	r0, [r7, #4]
 80030dc:	f000 fdb0 	bl	8003c40 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80030e0:	693b      	ldr	r3, [r7, #16]
 80030e2:	f003 0308 	and.w	r3, r3, #8
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d00c      	beq.n	8003104 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80030ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ec:	015a      	lsls	r2, r3, #5
 80030ee:	69fb      	ldr	r3, [r7, #28]
 80030f0:	4413      	add	r3, r2
 80030f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030f6:	461a      	mov	r2, r3
 80030f8:	2308      	movs	r3, #8
 80030fa:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80030fc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80030fe:	6878      	ldr	r0, [r7, #4]
 8003100:	f000 feaa 	bl	8003e58 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003104:	693b      	ldr	r3, [r7, #16]
 8003106:	f003 0310 	and.w	r3, r3, #16
 800310a:	2b00      	cmp	r3, #0
 800310c:	d008      	beq.n	8003120 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800310e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003110:	015a      	lsls	r2, r3, #5
 8003112:	69fb      	ldr	r3, [r7, #28]
 8003114:	4413      	add	r3, r2
 8003116:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800311a:	461a      	mov	r2, r3
 800311c:	2310      	movs	r3, #16
 800311e:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003120:	693b      	ldr	r3, [r7, #16]
 8003122:	f003 0320 	and.w	r3, r3, #32
 8003126:	2b00      	cmp	r3, #0
 8003128:	d008      	beq.n	800313c <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800312a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800312c:	015a      	lsls	r2, r3, #5
 800312e:	69fb      	ldr	r3, [r7, #28]
 8003130:	4413      	add	r3, r2
 8003132:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003136:	461a      	mov	r2, r3
 8003138:	2320      	movs	r3, #32
 800313a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800313c:	693b      	ldr	r3, [r7, #16]
 800313e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003142:	2b00      	cmp	r3, #0
 8003144:	d009      	beq.n	800315a <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003148:	015a      	lsls	r2, r3, #5
 800314a:	69fb      	ldr	r3, [r7, #28]
 800314c:	4413      	add	r3, r2
 800314e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003152:	461a      	mov	r2, r3
 8003154:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003158:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800315a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800315c:	3301      	adds	r3, #1
 800315e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003160:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003162:	085b      	lsrs	r3, r3, #1
 8003164:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003166:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003168:	2b00      	cmp	r3, #0
 800316a:	d199      	bne.n	80030a0 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	4618      	mov	r0, r3
 8003172:	f004 f9c2 	bl	80074fa <USB_ReadInterrupts>
 8003176:	4603      	mov	r3, r0
 8003178:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800317c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003180:	f040 80c0 	bne.w	8003304 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	4618      	mov	r0, r3
 800318a:	f004 f9e3 	bl	8007554 <USB_ReadDevAllInEpInterrupt>
 800318e:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8003190:	2300      	movs	r3, #0
 8003192:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8003194:	e0b2      	b.n	80032fc <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003196:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003198:	f003 0301 	and.w	r3, r3, #1
 800319c:	2b00      	cmp	r3, #0
 800319e:	f000 80a7 	beq.w	80032f0 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031a8:	b2d2      	uxtb	r2, r2
 80031aa:	4611      	mov	r1, r2
 80031ac:	4618      	mov	r0, r3
 80031ae:	f004 fa09 	bl	80075c4 <USB_ReadDevInEPInterrupt>
 80031b2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80031b4:	693b      	ldr	r3, [r7, #16]
 80031b6:	f003 0301 	and.w	r3, r3, #1
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d057      	beq.n	800326e <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80031be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031c0:	f003 030f 	and.w	r3, r3, #15
 80031c4:	2201      	movs	r2, #1
 80031c6:	fa02 f303 	lsl.w	r3, r2, r3
 80031ca:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80031cc:	69fb      	ldr	r3, [r7, #28]
 80031ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80031d2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	43db      	mvns	r3, r3
 80031d8:	69f9      	ldr	r1, [r7, #28]
 80031da:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80031de:	4013      	ands	r3, r2
 80031e0:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80031e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031e4:	015a      	lsls	r2, r3, #5
 80031e6:	69fb      	ldr	r3, [r7, #28]
 80031e8:	4413      	add	r3, r2
 80031ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80031ee:	461a      	mov	r2, r3
 80031f0:	2301      	movs	r3, #1
 80031f2:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	691b      	ldr	r3, [r3, #16]
 80031f8:	2b01      	cmp	r3, #1
 80031fa:	d132      	bne.n	8003262 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80031fc:	6879      	ldr	r1, [r7, #4]
 80031fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003200:	4613      	mov	r3, r2
 8003202:	00db      	lsls	r3, r3, #3
 8003204:	1a9b      	subs	r3, r3, r2
 8003206:	009b      	lsls	r3, r3, #2
 8003208:	440b      	add	r3, r1
 800320a:	3348      	adds	r3, #72	; 0x48
 800320c:	6819      	ldr	r1, [r3, #0]
 800320e:	6878      	ldr	r0, [r7, #4]
 8003210:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003212:	4613      	mov	r3, r2
 8003214:	00db      	lsls	r3, r3, #3
 8003216:	1a9b      	subs	r3, r3, r2
 8003218:	009b      	lsls	r3, r3, #2
 800321a:	4403      	add	r3, r0
 800321c:	3344      	adds	r3, #68	; 0x44
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	4419      	add	r1, r3
 8003222:	6878      	ldr	r0, [r7, #4]
 8003224:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003226:	4613      	mov	r3, r2
 8003228:	00db      	lsls	r3, r3, #3
 800322a:	1a9b      	subs	r3, r3, r2
 800322c:	009b      	lsls	r3, r3, #2
 800322e:	4403      	add	r3, r0
 8003230:	3348      	adds	r3, #72	; 0x48
 8003232:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003236:	2b00      	cmp	r3, #0
 8003238:	d113      	bne.n	8003262 <HAL_PCD_IRQHandler+0x31c>
 800323a:	6879      	ldr	r1, [r7, #4]
 800323c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800323e:	4613      	mov	r3, r2
 8003240:	00db      	lsls	r3, r3, #3
 8003242:	1a9b      	subs	r3, r3, r2
 8003244:	009b      	lsls	r3, r3, #2
 8003246:	440b      	add	r3, r1
 8003248:	3350      	adds	r3, #80	; 0x50
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	2b00      	cmp	r3, #0
 800324e:	d108      	bne.n	8003262 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6818      	ldr	r0, [r3, #0]
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800325a:	461a      	mov	r2, r3
 800325c:	2101      	movs	r1, #1
 800325e:	f004 fa11 	bl	8007684 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003264:	b2db      	uxtb	r3, r3
 8003266:	4619      	mov	r1, r3
 8003268:	6878      	ldr	r0, [r7, #4]
 800326a:	f006 faf0 	bl	800984e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800326e:	693b      	ldr	r3, [r7, #16]
 8003270:	f003 0308 	and.w	r3, r3, #8
 8003274:	2b00      	cmp	r3, #0
 8003276:	d008      	beq.n	800328a <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800327a:	015a      	lsls	r2, r3, #5
 800327c:	69fb      	ldr	r3, [r7, #28]
 800327e:	4413      	add	r3, r2
 8003280:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003284:	461a      	mov	r2, r3
 8003286:	2308      	movs	r3, #8
 8003288:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800328a:	693b      	ldr	r3, [r7, #16]
 800328c:	f003 0310 	and.w	r3, r3, #16
 8003290:	2b00      	cmp	r3, #0
 8003292:	d008      	beq.n	80032a6 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003296:	015a      	lsls	r2, r3, #5
 8003298:	69fb      	ldr	r3, [r7, #28]
 800329a:	4413      	add	r3, r2
 800329c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80032a0:	461a      	mov	r2, r3
 80032a2:	2310      	movs	r3, #16
 80032a4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80032a6:	693b      	ldr	r3, [r7, #16]
 80032a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d008      	beq.n	80032c2 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80032b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032b2:	015a      	lsls	r2, r3, #5
 80032b4:	69fb      	ldr	r3, [r7, #28]
 80032b6:	4413      	add	r3, r2
 80032b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80032bc:	461a      	mov	r2, r3
 80032be:	2340      	movs	r3, #64	; 0x40
 80032c0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80032c2:	693b      	ldr	r3, [r7, #16]
 80032c4:	f003 0302 	and.w	r3, r3, #2
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d008      	beq.n	80032de <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80032cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ce:	015a      	lsls	r2, r3, #5
 80032d0:	69fb      	ldr	r3, [r7, #28]
 80032d2:	4413      	add	r3, r2
 80032d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80032d8:	461a      	mov	r2, r3
 80032da:	2302      	movs	r3, #2
 80032dc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80032de:	693b      	ldr	r3, [r7, #16]
 80032e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d003      	beq.n	80032f0 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80032e8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80032ea:	6878      	ldr	r0, [r7, #4]
 80032ec:	f000 fc1b 	bl	8003b26 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80032f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032f2:	3301      	adds	r3, #1
 80032f4:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80032f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032f8:	085b      	lsrs	r3, r3, #1
 80032fa:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80032fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032fe:	2b00      	cmp	r3, #0
 8003300:	f47f af49 	bne.w	8003196 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	4618      	mov	r0, r3
 800330a:	f004 f8f6 	bl	80074fa <USB_ReadInterrupts>
 800330e:	4603      	mov	r3, r0
 8003310:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003314:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003318:	d122      	bne.n	8003360 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800331a:	69fb      	ldr	r3, [r7, #28]
 800331c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003320:	685b      	ldr	r3, [r3, #4]
 8003322:	69fa      	ldr	r2, [r7, #28]
 8003324:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003328:	f023 0301 	bic.w	r3, r3, #1
 800332c:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8003334:	2b01      	cmp	r3, #1
 8003336:	d108      	bne.n	800334a <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2200      	movs	r2, #0
 800333c:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003340:	2100      	movs	r1, #0
 8003342:	6878      	ldr	r0, [r7, #4]
 8003344:	f000 fe26 	bl	8003f94 <HAL_PCDEx_LPM_Callback>
 8003348:	e002      	b.n	8003350 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800334a:	6878      	ldr	r0, [r7, #4]
 800334c:	f006 faec 	bl	8009928 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	695a      	ldr	r2, [r3, #20]
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800335e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	4618      	mov	r0, r3
 8003366:	f004 f8c8 	bl	80074fa <USB_ReadInterrupts>
 800336a:	4603      	mov	r3, r0
 800336c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003370:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003374:	d112      	bne.n	800339c <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003376:	69fb      	ldr	r3, [r7, #28]
 8003378:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800337c:	689b      	ldr	r3, [r3, #8]
 800337e:	f003 0301 	and.w	r3, r3, #1
 8003382:	2b01      	cmp	r3, #1
 8003384:	d102      	bne.n	800338c <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003386:	6878      	ldr	r0, [r7, #4]
 8003388:	f006 faa8 	bl	80098dc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	695a      	ldr	r2, [r3, #20]
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800339a:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	4618      	mov	r0, r3
 80033a2:	f004 f8aa 	bl	80074fa <USB_ReadInterrupts>
 80033a6:	4603      	mov	r3, r0
 80033a8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80033ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033b0:	f040 80c7 	bne.w	8003542 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80033b4:	69fb      	ldr	r3, [r7, #28]
 80033b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80033ba:	685b      	ldr	r3, [r3, #4]
 80033bc:	69fa      	ldr	r2, [r7, #28]
 80033be:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80033c2:	f023 0301 	bic.w	r3, r3, #1
 80033c6:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	2110      	movs	r1, #16
 80033ce:	4618      	mov	r0, r3
 80033d0:	f003 f944 	bl	800665c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80033d4:	2300      	movs	r3, #0
 80033d6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80033d8:	e056      	b.n	8003488 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80033da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033dc:	015a      	lsls	r2, r3, #5
 80033de:	69fb      	ldr	r3, [r7, #28]
 80033e0:	4413      	add	r3, r2
 80033e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80033e6:	461a      	mov	r2, r3
 80033e8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80033ec:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80033ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033f0:	015a      	lsls	r2, r3, #5
 80033f2:	69fb      	ldr	r3, [r7, #28]
 80033f4:	4413      	add	r3, r2
 80033f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80033fe:	0151      	lsls	r1, r2, #5
 8003400:	69fa      	ldr	r2, [r7, #28]
 8003402:	440a      	add	r2, r1
 8003404:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003408:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800340c:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800340e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003410:	015a      	lsls	r2, r3, #5
 8003412:	69fb      	ldr	r3, [r7, #28]
 8003414:	4413      	add	r3, r2
 8003416:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800341e:	0151      	lsls	r1, r2, #5
 8003420:	69fa      	ldr	r2, [r7, #28]
 8003422:	440a      	add	r2, r1
 8003424:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003428:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800342c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800342e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003430:	015a      	lsls	r2, r3, #5
 8003432:	69fb      	ldr	r3, [r7, #28]
 8003434:	4413      	add	r3, r2
 8003436:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800343a:	461a      	mov	r2, r3
 800343c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003440:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003442:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003444:	015a      	lsls	r2, r3, #5
 8003446:	69fb      	ldr	r3, [r7, #28]
 8003448:	4413      	add	r3, r2
 800344a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003452:	0151      	lsls	r1, r2, #5
 8003454:	69fa      	ldr	r2, [r7, #28]
 8003456:	440a      	add	r2, r1
 8003458:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800345c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003460:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003462:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003464:	015a      	lsls	r2, r3, #5
 8003466:	69fb      	ldr	r3, [r7, #28]
 8003468:	4413      	add	r3, r2
 800346a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003472:	0151      	lsls	r1, r2, #5
 8003474:	69fa      	ldr	r2, [r7, #28]
 8003476:	440a      	add	r2, r1
 8003478:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800347c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003480:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003482:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003484:	3301      	adds	r3, #1
 8003486:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	685b      	ldr	r3, [r3, #4]
 800348c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800348e:	429a      	cmp	r2, r3
 8003490:	d3a3      	bcc.n	80033da <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003492:	69fb      	ldr	r3, [r7, #28]
 8003494:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003498:	69db      	ldr	r3, [r3, #28]
 800349a:	69fa      	ldr	r2, [r7, #28]
 800349c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80034a0:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80034a4:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d016      	beq.n	80034dc <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80034ae:	69fb      	ldr	r3, [r7, #28]
 80034b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80034b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80034b8:	69fa      	ldr	r2, [r7, #28]
 80034ba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80034be:	f043 030b 	orr.w	r3, r3, #11
 80034c2:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80034c6:	69fb      	ldr	r3, [r7, #28]
 80034c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80034cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034ce:	69fa      	ldr	r2, [r7, #28]
 80034d0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80034d4:	f043 030b 	orr.w	r3, r3, #11
 80034d8:	6453      	str	r3, [r2, #68]	; 0x44
 80034da:	e015      	b.n	8003508 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80034dc:	69fb      	ldr	r3, [r7, #28]
 80034de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80034e2:	695b      	ldr	r3, [r3, #20]
 80034e4:	69fa      	ldr	r2, [r7, #28]
 80034e6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80034ea:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80034ee:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80034f2:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80034f4:	69fb      	ldr	r3, [r7, #28]
 80034f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80034fa:	691b      	ldr	r3, [r3, #16]
 80034fc:	69fa      	ldr	r2, [r7, #28]
 80034fe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003502:	f043 030b 	orr.w	r3, r3, #11
 8003506:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003508:	69fb      	ldr	r3, [r7, #28]
 800350a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	69fa      	ldr	r2, [r7, #28]
 8003512:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003516:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800351a:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6818      	ldr	r0, [r3, #0]
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	691b      	ldr	r3, [r3, #16]
 8003524:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800352c:	461a      	mov	r2, r3
 800352e:	f004 f8a9 	bl	8007684 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	695a      	ldr	r2, [r3, #20]
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003540:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	4618      	mov	r0, r3
 8003548:	f003 ffd7 	bl	80074fa <USB_ReadInterrupts>
 800354c:	4603      	mov	r3, r0
 800354e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003552:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003556:	d124      	bne.n	80035a2 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	4618      	mov	r0, r3
 800355e:	f004 f86d 	bl	800763c <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	4618      	mov	r0, r3
 8003568:	f003 f8d5 	bl	8006716 <USB_GetDevSpeed>
 800356c:	4603      	mov	r3, r0
 800356e:	461a      	mov	r2, r3
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681c      	ldr	r4, [r3, #0]
 8003578:	f001 f93c 	bl	80047f4 <HAL_RCC_GetHCLKFreq>
 800357c:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003582:	b2db      	uxtb	r3, r3
 8003584:	461a      	mov	r2, r3
 8003586:	4620      	mov	r0, r4
 8003588:	f002 fdf4 	bl	8006174 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800358c:	6878      	ldr	r0, [r7, #4]
 800358e:	f006 f986 	bl	800989e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	695a      	ldr	r2, [r3, #20]
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80035a0:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	4618      	mov	r0, r3
 80035a8:	f003 ffa7 	bl	80074fa <USB_ReadInterrupts>
 80035ac:	4603      	mov	r3, r0
 80035ae:	f003 0308 	and.w	r3, r3, #8
 80035b2:	2b08      	cmp	r3, #8
 80035b4:	d10a      	bne.n	80035cc <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80035b6:	6878      	ldr	r0, [r7, #4]
 80035b8:	f006 f963 	bl	8009882 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	695a      	ldr	r2, [r3, #20]
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f002 0208 	and.w	r2, r2, #8
 80035ca:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	4618      	mov	r0, r3
 80035d2:	f003 ff92 	bl	80074fa <USB_ReadInterrupts>
 80035d6:	4603      	mov	r3, r0
 80035d8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80035dc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80035e0:	d10f      	bne.n	8003602 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80035e2:	2300      	movs	r3, #0
 80035e4:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80035e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035e8:	b2db      	uxtb	r3, r3
 80035ea:	4619      	mov	r1, r3
 80035ec:	6878      	ldr	r0, [r7, #4]
 80035ee:	f006 f9bb 	bl	8009968 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	695a      	ldr	r2, [r3, #20]
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8003600:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	4618      	mov	r0, r3
 8003608:	f003 ff77 	bl	80074fa <USB_ReadInterrupts>
 800360c:	4603      	mov	r3, r0
 800360e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003612:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003616:	d10f      	bne.n	8003638 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8003618:	2300      	movs	r3, #0
 800361a:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800361c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800361e:	b2db      	uxtb	r3, r3
 8003620:	4619      	mov	r1, r3
 8003622:	6878      	ldr	r0, [r7, #4]
 8003624:	f006 f98e 	bl	8009944 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	695a      	ldr	r2, [r3, #20]
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003636:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	4618      	mov	r0, r3
 800363e:	f003 ff5c 	bl	80074fa <USB_ReadInterrupts>
 8003642:	4603      	mov	r3, r0
 8003644:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003648:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800364c:	d10a      	bne.n	8003664 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800364e:	6878      	ldr	r0, [r7, #4]
 8003650:	f006 f99c 	bl	800998c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	695a      	ldr	r2, [r3, #20]
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003662:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	4618      	mov	r0, r3
 800366a:	f003 ff46 	bl	80074fa <USB_ReadInterrupts>
 800366e:	4603      	mov	r3, r0
 8003670:	f003 0304 	and.w	r3, r3, #4
 8003674:	2b04      	cmp	r3, #4
 8003676:	d115      	bne.n	80036a4 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	685b      	ldr	r3, [r3, #4]
 800367e:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003680:	69bb      	ldr	r3, [r7, #24]
 8003682:	f003 0304 	and.w	r3, r3, #4
 8003686:	2b00      	cmp	r3, #0
 8003688:	d002      	beq.n	8003690 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800368a:	6878      	ldr	r0, [r7, #4]
 800368c:	f006 f98c 	bl	80099a8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	6859      	ldr	r1, [r3, #4]
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	69ba      	ldr	r2, [r7, #24]
 800369c:	430a      	orrs	r2, r1
 800369e:	605a      	str	r2, [r3, #4]
 80036a0:	e000      	b.n	80036a4 <HAL_PCD_IRQHandler+0x75e>
      return;
 80036a2:	bf00      	nop
    }
  }
}
 80036a4:	3734      	adds	r7, #52	; 0x34
 80036a6:	46bd      	mov	sp, r7
 80036a8:	bd90      	pop	{r4, r7, pc}

080036aa <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80036aa:	b580      	push	{r7, lr}
 80036ac:	b082      	sub	sp, #8
 80036ae:	af00      	add	r7, sp, #0
 80036b0:	6078      	str	r0, [r7, #4]
 80036b2:	460b      	mov	r3, r1
 80036b4:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80036bc:	2b01      	cmp	r3, #1
 80036be:	d101      	bne.n	80036c4 <HAL_PCD_SetAddress+0x1a>
 80036c0:	2302      	movs	r3, #2
 80036c2:	e013      	b.n	80036ec <HAL_PCD_SetAddress+0x42>
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2201      	movs	r2, #1
 80036c8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	78fa      	ldrb	r2, [r7, #3]
 80036d0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	78fa      	ldrb	r2, [r7, #3]
 80036da:	4611      	mov	r1, r2
 80036dc:	4618      	mov	r0, r3
 80036de:	f003 fea4 	bl	800742a <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	2200      	movs	r2, #0
 80036e6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80036ea:	2300      	movs	r3, #0
}
 80036ec:	4618      	mov	r0, r3
 80036ee:	3708      	adds	r7, #8
 80036f0:	46bd      	mov	sp, r7
 80036f2:	bd80      	pop	{r7, pc}

080036f4 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b084      	sub	sp, #16
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
 80036fc:	4608      	mov	r0, r1
 80036fe:	4611      	mov	r1, r2
 8003700:	461a      	mov	r2, r3
 8003702:	4603      	mov	r3, r0
 8003704:	70fb      	strb	r3, [r7, #3]
 8003706:	460b      	mov	r3, r1
 8003708:	803b      	strh	r3, [r7, #0]
 800370a:	4613      	mov	r3, r2
 800370c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800370e:	2300      	movs	r3, #0
 8003710:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003712:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003716:	2b00      	cmp	r3, #0
 8003718:	da0f      	bge.n	800373a <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800371a:	78fb      	ldrb	r3, [r7, #3]
 800371c:	f003 020f 	and.w	r2, r3, #15
 8003720:	4613      	mov	r3, r2
 8003722:	00db      	lsls	r3, r3, #3
 8003724:	1a9b      	subs	r3, r3, r2
 8003726:	009b      	lsls	r3, r3, #2
 8003728:	3338      	adds	r3, #56	; 0x38
 800372a:	687a      	ldr	r2, [r7, #4]
 800372c:	4413      	add	r3, r2
 800372e:	3304      	adds	r3, #4
 8003730:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	2201      	movs	r2, #1
 8003736:	705a      	strb	r2, [r3, #1]
 8003738:	e00f      	b.n	800375a <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800373a:	78fb      	ldrb	r3, [r7, #3]
 800373c:	f003 020f 	and.w	r2, r3, #15
 8003740:	4613      	mov	r3, r2
 8003742:	00db      	lsls	r3, r3, #3
 8003744:	1a9b      	subs	r3, r3, r2
 8003746:	009b      	lsls	r3, r3, #2
 8003748:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800374c:	687a      	ldr	r2, [r7, #4]
 800374e:	4413      	add	r3, r2
 8003750:	3304      	adds	r3, #4
 8003752:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	2200      	movs	r2, #0
 8003758:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800375a:	78fb      	ldrb	r3, [r7, #3]
 800375c:	f003 030f 	and.w	r3, r3, #15
 8003760:	b2da      	uxtb	r2, r3
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003766:	883a      	ldrh	r2, [r7, #0]
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	78ba      	ldrb	r2, [r7, #2]
 8003770:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	785b      	ldrb	r3, [r3, #1]
 8003776:	2b00      	cmp	r3, #0
 8003778:	d004      	beq.n	8003784 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	781b      	ldrb	r3, [r3, #0]
 800377e:	b29a      	uxth	r2, r3
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003784:	78bb      	ldrb	r3, [r7, #2]
 8003786:	2b02      	cmp	r3, #2
 8003788:	d102      	bne.n	8003790 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	2200      	movs	r2, #0
 800378e:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003796:	2b01      	cmp	r3, #1
 8003798:	d101      	bne.n	800379e <HAL_PCD_EP_Open+0xaa>
 800379a:	2302      	movs	r3, #2
 800379c:	e00e      	b.n	80037bc <HAL_PCD_EP_Open+0xc8>
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	2201      	movs	r2, #1
 80037a2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	68f9      	ldr	r1, [r7, #12]
 80037ac:	4618      	mov	r0, r3
 80037ae:	f002 ffd7 	bl	8006760 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	2200      	movs	r2, #0
 80037b6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 80037ba:	7afb      	ldrb	r3, [r7, #11]
}
 80037bc:	4618      	mov	r0, r3
 80037be:	3710      	adds	r7, #16
 80037c0:	46bd      	mov	sp, r7
 80037c2:	bd80      	pop	{r7, pc}

080037c4 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b084      	sub	sp, #16
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
 80037cc:	460b      	mov	r3, r1
 80037ce:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80037d0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	da0f      	bge.n	80037f8 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80037d8:	78fb      	ldrb	r3, [r7, #3]
 80037da:	f003 020f 	and.w	r2, r3, #15
 80037de:	4613      	mov	r3, r2
 80037e0:	00db      	lsls	r3, r3, #3
 80037e2:	1a9b      	subs	r3, r3, r2
 80037e4:	009b      	lsls	r3, r3, #2
 80037e6:	3338      	adds	r3, #56	; 0x38
 80037e8:	687a      	ldr	r2, [r7, #4]
 80037ea:	4413      	add	r3, r2
 80037ec:	3304      	adds	r3, #4
 80037ee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	2201      	movs	r2, #1
 80037f4:	705a      	strb	r2, [r3, #1]
 80037f6:	e00f      	b.n	8003818 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80037f8:	78fb      	ldrb	r3, [r7, #3]
 80037fa:	f003 020f 	and.w	r2, r3, #15
 80037fe:	4613      	mov	r3, r2
 8003800:	00db      	lsls	r3, r3, #3
 8003802:	1a9b      	subs	r3, r3, r2
 8003804:	009b      	lsls	r3, r3, #2
 8003806:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800380a:	687a      	ldr	r2, [r7, #4]
 800380c:	4413      	add	r3, r2
 800380e:	3304      	adds	r3, #4
 8003810:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	2200      	movs	r2, #0
 8003816:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003818:	78fb      	ldrb	r3, [r7, #3]
 800381a:	f003 030f 	and.w	r3, r3, #15
 800381e:	b2da      	uxtb	r2, r3
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800382a:	2b01      	cmp	r3, #1
 800382c:	d101      	bne.n	8003832 <HAL_PCD_EP_Close+0x6e>
 800382e:	2302      	movs	r3, #2
 8003830:	e00e      	b.n	8003850 <HAL_PCD_EP_Close+0x8c>
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	2201      	movs	r2, #1
 8003836:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	68f9      	ldr	r1, [r7, #12]
 8003840:	4618      	mov	r0, r3
 8003842:	f003 f815 	bl	8006870 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	2200      	movs	r2, #0
 800384a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800384e:	2300      	movs	r3, #0
}
 8003850:	4618      	mov	r0, r3
 8003852:	3710      	adds	r7, #16
 8003854:	46bd      	mov	sp, r7
 8003856:	bd80      	pop	{r7, pc}

08003858 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003858:	b580      	push	{r7, lr}
 800385a:	b086      	sub	sp, #24
 800385c:	af00      	add	r7, sp, #0
 800385e:	60f8      	str	r0, [r7, #12]
 8003860:	607a      	str	r2, [r7, #4]
 8003862:	603b      	str	r3, [r7, #0]
 8003864:	460b      	mov	r3, r1
 8003866:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003868:	7afb      	ldrb	r3, [r7, #11]
 800386a:	f003 020f 	and.w	r2, r3, #15
 800386e:	4613      	mov	r3, r2
 8003870:	00db      	lsls	r3, r3, #3
 8003872:	1a9b      	subs	r3, r3, r2
 8003874:	009b      	lsls	r3, r3, #2
 8003876:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800387a:	68fa      	ldr	r2, [r7, #12]
 800387c:	4413      	add	r3, r2
 800387e:	3304      	adds	r3, #4
 8003880:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003882:	697b      	ldr	r3, [r7, #20]
 8003884:	687a      	ldr	r2, [r7, #4]
 8003886:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003888:	697b      	ldr	r3, [r7, #20]
 800388a:	683a      	ldr	r2, [r7, #0]
 800388c:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800388e:	697b      	ldr	r3, [r7, #20]
 8003890:	2200      	movs	r2, #0
 8003892:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8003894:	697b      	ldr	r3, [r7, #20]
 8003896:	2200      	movs	r2, #0
 8003898:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800389a:	7afb      	ldrb	r3, [r7, #11]
 800389c:	f003 030f 	and.w	r3, r3, #15
 80038a0:	b2da      	uxtb	r2, r3
 80038a2:	697b      	ldr	r3, [r7, #20]
 80038a4:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	691b      	ldr	r3, [r3, #16]
 80038aa:	2b01      	cmp	r3, #1
 80038ac:	d102      	bne.n	80038b4 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80038ae:	687a      	ldr	r2, [r7, #4]
 80038b0:	697b      	ldr	r3, [r7, #20]
 80038b2:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80038b4:	7afb      	ldrb	r3, [r7, #11]
 80038b6:	f003 030f 	and.w	r3, r3, #15
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d109      	bne.n	80038d2 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	6818      	ldr	r0, [r3, #0]
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	691b      	ldr	r3, [r3, #16]
 80038c6:	b2db      	uxtb	r3, r3
 80038c8:	461a      	mov	r2, r3
 80038ca:	6979      	ldr	r1, [r7, #20]
 80038cc:	f003 faf0 	bl	8006eb0 <USB_EP0StartXfer>
 80038d0:	e008      	b.n	80038e4 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	6818      	ldr	r0, [r3, #0]
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	691b      	ldr	r3, [r3, #16]
 80038da:	b2db      	uxtb	r3, r3
 80038dc:	461a      	mov	r2, r3
 80038de:	6979      	ldr	r1, [r7, #20]
 80038e0:	f003 f8a2 	bl	8006a28 <USB_EPStartXfer>
  }

  return HAL_OK;
 80038e4:	2300      	movs	r3, #0
}
 80038e6:	4618      	mov	r0, r3
 80038e8:	3718      	adds	r7, #24
 80038ea:	46bd      	mov	sp, r7
 80038ec:	bd80      	pop	{r7, pc}

080038ee <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80038ee:	b480      	push	{r7}
 80038f0:	b083      	sub	sp, #12
 80038f2:	af00      	add	r7, sp, #0
 80038f4:	6078      	str	r0, [r7, #4]
 80038f6:	460b      	mov	r3, r1
 80038f8:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80038fa:	78fb      	ldrb	r3, [r7, #3]
 80038fc:	f003 020f 	and.w	r2, r3, #15
 8003900:	6879      	ldr	r1, [r7, #4]
 8003902:	4613      	mov	r3, r2
 8003904:	00db      	lsls	r3, r3, #3
 8003906:	1a9b      	subs	r3, r3, r2
 8003908:	009b      	lsls	r3, r3, #2
 800390a:	440b      	add	r3, r1
 800390c:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8003910:	681b      	ldr	r3, [r3, #0]
}
 8003912:	4618      	mov	r0, r3
 8003914:	370c      	adds	r7, #12
 8003916:	46bd      	mov	sp, r7
 8003918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391c:	4770      	bx	lr

0800391e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800391e:	b580      	push	{r7, lr}
 8003920:	b086      	sub	sp, #24
 8003922:	af00      	add	r7, sp, #0
 8003924:	60f8      	str	r0, [r7, #12]
 8003926:	607a      	str	r2, [r7, #4]
 8003928:	603b      	str	r3, [r7, #0]
 800392a:	460b      	mov	r3, r1
 800392c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800392e:	7afb      	ldrb	r3, [r7, #11]
 8003930:	f003 020f 	and.w	r2, r3, #15
 8003934:	4613      	mov	r3, r2
 8003936:	00db      	lsls	r3, r3, #3
 8003938:	1a9b      	subs	r3, r3, r2
 800393a:	009b      	lsls	r3, r3, #2
 800393c:	3338      	adds	r3, #56	; 0x38
 800393e:	68fa      	ldr	r2, [r7, #12]
 8003940:	4413      	add	r3, r2
 8003942:	3304      	adds	r3, #4
 8003944:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003946:	697b      	ldr	r3, [r7, #20]
 8003948:	687a      	ldr	r2, [r7, #4]
 800394a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800394c:	697b      	ldr	r3, [r7, #20]
 800394e:	683a      	ldr	r2, [r7, #0]
 8003950:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8003952:	697b      	ldr	r3, [r7, #20]
 8003954:	2200      	movs	r2, #0
 8003956:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8003958:	697b      	ldr	r3, [r7, #20]
 800395a:	2201      	movs	r2, #1
 800395c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800395e:	7afb      	ldrb	r3, [r7, #11]
 8003960:	f003 030f 	and.w	r3, r3, #15
 8003964:	b2da      	uxtb	r2, r3
 8003966:	697b      	ldr	r3, [r7, #20]
 8003968:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	691b      	ldr	r3, [r3, #16]
 800396e:	2b01      	cmp	r3, #1
 8003970:	d102      	bne.n	8003978 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003972:	687a      	ldr	r2, [r7, #4]
 8003974:	697b      	ldr	r3, [r7, #20]
 8003976:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003978:	7afb      	ldrb	r3, [r7, #11]
 800397a:	f003 030f 	and.w	r3, r3, #15
 800397e:	2b00      	cmp	r3, #0
 8003980:	d109      	bne.n	8003996 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	6818      	ldr	r0, [r3, #0]
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	691b      	ldr	r3, [r3, #16]
 800398a:	b2db      	uxtb	r3, r3
 800398c:	461a      	mov	r2, r3
 800398e:	6979      	ldr	r1, [r7, #20]
 8003990:	f003 fa8e 	bl	8006eb0 <USB_EP0StartXfer>
 8003994:	e008      	b.n	80039a8 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	6818      	ldr	r0, [r3, #0]
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	691b      	ldr	r3, [r3, #16]
 800399e:	b2db      	uxtb	r3, r3
 80039a0:	461a      	mov	r2, r3
 80039a2:	6979      	ldr	r1, [r7, #20]
 80039a4:	f003 f840 	bl	8006a28 <USB_EPStartXfer>
  }

  return HAL_OK;
 80039a8:	2300      	movs	r3, #0
}
 80039aa:	4618      	mov	r0, r3
 80039ac:	3718      	adds	r7, #24
 80039ae:	46bd      	mov	sp, r7
 80039b0:	bd80      	pop	{r7, pc}

080039b2 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80039b2:	b580      	push	{r7, lr}
 80039b4:	b084      	sub	sp, #16
 80039b6:	af00      	add	r7, sp, #0
 80039b8:	6078      	str	r0, [r7, #4]
 80039ba:	460b      	mov	r3, r1
 80039bc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80039be:	78fb      	ldrb	r3, [r7, #3]
 80039c0:	f003 020f 	and.w	r2, r3, #15
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	685b      	ldr	r3, [r3, #4]
 80039c8:	429a      	cmp	r2, r3
 80039ca:	d901      	bls.n	80039d0 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80039cc:	2301      	movs	r3, #1
 80039ce:	e050      	b.n	8003a72 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80039d0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	da0f      	bge.n	80039f8 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80039d8:	78fb      	ldrb	r3, [r7, #3]
 80039da:	f003 020f 	and.w	r2, r3, #15
 80039de:	4613      	mov	r3, r2
 80039e0:	00db      	lsls	r3, r3, #3
 80039e2:	1a9b      	subs	r3, r3, r2
 80039e4:	009b      	lsls	r3, r3, #2
 80039e6:	3338      	adds	r3, #56	; 0x38
 80039e8:	687a      	ldr	r2, [r7, #4]
 80039ea:	4413      	add	r3, r2
 80039ec:	3304      	adds	r3, #4
 80039ee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	2201      	movs	r2, #1
 80039f4:	705a      	strb	r2, [r3, #1]
 80039f6:	e00d      	b.n	8003a14 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80039f8:	78fa      	ldrb	r2, [r7, #3]
 80039fa:	4613      	mov	r3, r2
 80039fc:	00db      	lsls	r3, r3, #3
 80039fe:	1a9b      	subs	r3, r3, r2
 8003a00:	009b      	lsls	r3, r3, #2
 8003a02:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003a06:	687a      	ldr	r2, [r7, #4]
 8003a08:	4413      	add	r3, r2
 8003a0a:	3304      	adds	r3, #4
 8003a0c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	2200      	movs	r2, #0
 8003a12:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	2201      	movs	r2, #1
 8003a18:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003a1a:	78fb      	ldrb	r3, [r7, #3]
 8003a1c:	f003 030f 	and.w	r3, r3, #15
 8003a20:	b2da      	uxtb	r2, r3
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003a2c:	2b01      	cmp	r3, #1
 8003a2e:	d101      	bne.n	8003a34 <HAL_PCD_EP_SetStall+0x82>
 8003a30:	2302      	movs	r3, #2
 8003a32:	e01e      	b.n	8003a72 <HAL_PCD_EP_SetStall+0xc0>
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2201      	movs	r2, #1
 8003a38:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	68f9      	ldr	r1, [r7, #12]
 8003a42:	4618      	mov	r0, r3
 8003a44:	f003 fc1d 	bl	8007282 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003a48:	78fb      	ldrb	r3, [r7, #3]
 8003a4a:	f003 030f 	and.w	r3, r3, #15
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d10a      	bne.n	8003a68 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6818      	ldr	r0, [r3, #0]
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	691b      	ldr	r3, [r3, #16]
 8003a5a:	b2d9      	uxtb	r1, r3
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003a62:	461a      	mov	r2, r3
 8003a64:	f003 fe0e 	bl	8007684 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003a70:	2300      	movs	r3, #0
}
 8003a72:	4618      	mov	r0, r3
 8003a74:	3710      	adds	r7, #16
 8003a76:	46bd      	mov	sp, r7
 8003a78:	bd80      	pop	{r7, pc}

08003a7a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003a7a:	b580      	push	{r7, lr}
 8003a7c:	b084      	sub	sp, #16
 8003a7e:	af00      	add	r7, sp, #0
 8003a80:	6078      	str	r0, [r7, #4]
 8003a82:	460b      	mov	r3, r1
 8003a84:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003a86:	78fb      	ldrb	r3, [r7, #3]
 8003a88:	f003 020f 	and.w	r2, r3, #15
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	685b      	ldr	r3, [r3, #4]
 8003a90:	429a      	cmp	r2, r3
 8003a92:	d901      	bls.n	8003a98 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003a94:	2301      	movs	r3, #1
 8003a96:	e042      	b.n	8003b1e <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003a98:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	da0f      	bge.n	8003ac0 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003aa0:	78fb      	ldrb	r3, [r7, #3]
 8003aa2:	f003 020f 	and.w	r2, r3, #15
 8003aa6:	4613      	mov	r3, r2
 8003aa8:	00db      	lsls	r3, r3, #3
 8003aaa:	1a9b      	subs	r3, r3, r2
 8003aac:	009b      	lsls	r3, r3, #2
 8003aae:	3338      	adds	r3, #56	; 0x38
 8003ab0:	687a      	ldr	r2, [r7, #4]
 8003ab2:	4413      	add	r3, r2
 8003ab4:	3304      	adds	r3, #4
 8003ab6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	2201      	movs	r2, #1
 8003abc:	705a      	strb	r2, [r3, #1]
 8003abe:	e00f      	b.n	8003ae0 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003ac0:	78fb      	ldrb	r3, [r7, #3]
 8003ac2:	f003 020f 	and.w	r2, r3, #15
 8003ac6:	4613      	mov	r3, r2
 8003ac8:	00db      	lsls	r3, r3, #3
 8003aca:	1a9b      	subs	r3, r3, r2
 8003acc:	009b      	lsls	r3, r3, #2
 8003ace:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003ad2:	687a      	ldr	r2, [r7, #4]
 8003ad4:	4413      	add	r3, r2
 8003ad6:	3304      	adds	r3, #4
 8003ad8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	2200      	movs	r2, #0
 8003ade:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003ae6:	78fb      	ldrb	r3, [r7, #3]
 8003ae8:	f003 030f 	and.w	r3, r3, #15
 8003aec:	b2da      	uxtb	r2, r3
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003af8:	2b01      	cmp	r3, #1
 8003afa:	d101      	bne.n	8003b00 <HAL_PCD_EP_ClrStall+0x86>
 8003afc:	2302      	movs	r3, #2
 8003afe:	e00e      	b.n	8003b1e <HAL_PCD_EP_ClrStall+0xa4>
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2201      	movs	r2, #1
 8003b04:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	68f9      	ldr	r1, [r7, #12]
 8003b0e:	4618      	mov	r0, r3
 8003b10:	f003 fc25 	bl	800735e <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2200      	movs	r2, #0
 8003b18:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003b1c:	2300      	movs	r3, #0
}
 8003b1e:	4618      	mov	r0, r3
 8003b20:	3710      	adds	r7, #16
 8003b22:	46bd      	mov	sp, r7
 8003b24:	bd80      	pop	{r7, pc}

08003b26 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003b26:	b580      	push	{r7, lr}
 8003b28:	b08a      	sub	sp, #40	; 0x28
 8003b2a:	af02      	add	r7, sp, #8
 8003b2c:	6078      	str	r0, [r7, #4]
 8003b2e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b36:	697b      	ldr	r3, [r7, #20]
 8003b38:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003b3a:	683a      	ldr	r2, [r7, #0]
 8003b3c:	4613      	mov	r3, r2
 8003b3e:	00db      	lsls	r3, r3, #3
 8003b40:	1a9b      	subs	r3, r3, r2
 8003b42:	009b      	lsls	r3, r3, #2
 8003b44:	3338      	adds	r3, #56	; 0x38
 8003b46:	687a      	ldr	r2, [r7, #4]
 8003b48:	4413      	add	r3, r2
 8003b4a:	3304      	adds	r3, #4
 8003b4c:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	699a      	ldr	r2, [r3, #24]
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	695b      	ldr	r3, [r3, #20]
 8003b56:	429a      	cmp	r2, r3
 8003b58:	d901      	bls.n	8003b5e <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003b5a:	2301      	movs	r3, #1
 8003b5c:	e06c      	b.n	8003c38 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	695a      	ldr	r2, [r3, #20]
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	699b      	ldr	r3, [r3, #24]
 8003b66:	1ad3      	subs	r3, r2, r3
 8003b68:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	689b      	ldr	r3, [r3, #8]
 8003b6e:	69fa      	ldr	r2, [r7, #28]
 8003b70:	429a      	cmp	r2, r3
 8003b72:	d902      	bls.n	8003b7a <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	689b      	ldr	r3, [r3, #8]
 8003b78:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003b7a:	69fb      	ldr	r3, [r7, #28]
 8003b7c:	3303      	adds	r3, #3
 8003b7e:	089b      	lsrs	r3, r3, #2
 8003b80:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003b82:	e02b      	b.n	8003bdc <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	695a      	ldr	r2, [r3, #20]
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	699b      	ldr	r3, [r3, #24]
 8003b8c:	1ad3      	subs	r3, r2, r3
 8003b8e:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	689b      	ldr	r3, [r3, #8]
 8003b94:	69fa      	ldr	r2, [r7, #28]
 8003b96:	429a      	cmp	r2, r3
 8003b98:	d902      	bls.n	8003ba0 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	689b      	ldr	r3, [r3, #8]
 8003b9e:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003ba0:	69fb      	ldr	r3, [r7, #28]
 8003ba2:	3303      	adds	r3, #3
 8003ba4:	089b      	lsrs	r3, r3, #2
 8003ba6:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	68d9      	ldr	r1, [r3, #12]
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	b2da      	uxtb	r2, r3
 8003bb0:	69fb      	ldr	r3, [r7, #28]
 8003bb2:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003bb8:	b2db      	uxtb	r3, r3
 8003bba:	9300      	str	r3, [sp, #0]
 8003bbc:	4603      	mov	r3, r0
 8003bbe:	6978      	ldr	r0, [r7, #20]
 8003bc0:	f003 fac9 	bl	8007156 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	68da      	ldr	r2, [r3, #12]
 8003bc8:	69fb      	ldr	r3, [r7, #28]
 8003bca:	441a      	add	r2, r3
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	699a      	ldr	r2, [r3, #24]
 8003bd4:	69fb      	ldr	r3, [r7, #28]
 8003bd6:	441a      	add	r2, r3
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	015a      	lsls	r2, r3, #5
 8003be0:	693b      	ldr	r3, [r7, #16]
 8003be2:	4413      	add	r3, r2
 8003be4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003be8:	699b      	ldr	r3, [r3, #24]
 8003bea:	b29b      	uxth	r3, r3
 8003bec:	69ba      	ldr	r2, [r7, #24]
 8003bee:	429a      	cmp	r2, r3
 8003bf0:	d809      	bhi.n	8003c06 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	699a      	ldr	r2, [r3, #24]
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003bfa:	429a      	cmp	r2, r3
 8003bfc:	d203      	bcs.n	8003c06 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	695b      	ldr	r3, [r3, #20]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d1be      	bne.n	8003b84 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	695a      	ldr	r2, [r3, #20]
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	699b      	ldr	r3, [r3, #24]
 8003c0e:	429a      	cmp	r2, r3
 8003c10:	d811      	bhi.n	8003c36 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003c12:	683b      	ldr	r3, [r7, #0]
 8003c14:	f003 030f 	and.w	r3, r3, #15
 8003c18:	2201      	movs	r2, #1
 8003c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c1e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003c20:	693b      	ldr	r3, [r7, #16]
 8003c22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c26:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003c28:	68bb      	ldr	r3, [r7, #8]
 8003c2a:	43db      	mvns	r3, r3
 8003c2c:	6939      	ldr	r1, [r7, #16]
 8003c2e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003c32:	4013      	ands	r3, r2
 8003c34:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003c36:	2300      	movs	r3, #0
}
 8003c38:	4618      	mov	r0, r3
 8003c3a:	3720      	adds	r7, #32
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	bd80      	pop	{r7, pc}

08003c40 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003c40:	b580      	push	{r7, lr}
 8003c42:	b086      	sub	sp, #24
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
 8003c48:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c50:	697b      	ldr	r3, [r7, #20]
 8003c52:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003c54:	697b      	ldr	r3, [r7, #20]
 8003c56:	333c      	adds	r3, #60	; 0x3c
 8003c58:	3304      	adds	r3, #4
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003c5e:	683b      	ldr	r3, [r7, #0]
 8003c60:	015a      	lsls	r2, r3, #5
 8003c62:	693b      	ldr	r3, [r7, #16]
 8003c64:	4413      	add	r3, r2
 8003c66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c6a:	689b      	ldr	r3, [r3, #8]
 8003c6c:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	691b      	ldr	r3, [r3, #16]
 8003c72:	2b01      	cmp	r3, #1
 8003c74:	f040 80a0 	bne.w	8003db8 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003c78:	68bb      	ldr	r3, [r7, #8]
 8003c7a:	f003 0308 	and.w	r3, r3, #8
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d015      	beq.n	8003cae <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	4a72      	ldr	r2, [pc, #456]	; (8003e50 <PCD_EP_OutXfrComplete_int+0x210>)
 8003c86:	4293      	cmp	r3, r2
 8003c88:	f240 80dd 	bls.w	8003e46 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003c8c:	68bb      	ldr	r3, [r7, #8]
 8003c8e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	f000 80d7 	beq.w	8003e46 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003c98:	683b      	ldr	r3, [r7, #0]
 8003c9a:	015a      	lsls	r2, r3, #5
 8003c9c:	693b      	ldr	r3, [r7, #16]
 8003c9e:	4413      	add	r3, r2
 8003ca0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ca4:	461a      	mov	r2, r3
 8003ca6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003caa:	6093      	str	r3, [r2, #8]
 8003cac:	e0cb      	b.n	8003e46 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003cae:	68bb      	ldr	r3, [r7, #8]
 8003cb0:	f003 0320 	and.w	r3, r3, #32
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d009      	beq.n	8003ccc <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	015a      	lsls	r2, r3, #5
 8003cbc:	693b      	ldr	r3, [r7, #16]
 8003cbe:	4413      	add	r3, r2
 8003cc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cc4:	461a      	mov	r2, r3
 8003cc6:	2320      	movs	r3, #32
 8003cc8:	6093      	str	r3, [r2, #8]
 8003cca:	e0bc      	b.n	8003e46 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003ccc:	68bb      	ldr	r3, [r7, #8]
 8003cce:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	f040 80b7 	bne.w	8003e46 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	4a5d      	ldr	r2, [pc, #372]	; (8003e50 <PCD_EP_OutXfrComplete_int+0x210>)
 8003cdc:	4293      	cmp	r3, r2
 8003cde:	d90f      	bls.n	8003d00 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003ce0:	68bb      	ldr	r3, [r7, #8]
 8003ce2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d00a      	beq.n	8003d00 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003cea:	683b      	ldr	r3, [r7, #0]
 8003cec:	015a      	lsls	r2, r3, #5
 8003cee:	693b      	ldr	r3, [r7, #16]
 8003cf0:	4413      	add	r3, r2
 8003cf2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cf6:	461a      	mov	r2, r3
 8003cf8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003cfc:	6093      	str	r3, [r2, #8]
 8003cfe:	e0a2      	b.n	8003e46 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8003d00:	6879      	ldr	r1, [r7, #4]
 8003d02:	683a      	ldr	r2, [r7, #0]
 8003d04:	4613      	mov	r3, r2
 8003d06:	00db      	lsls	r3, r3, #3
 8003d08:	1a9b      	subs	r3, r3, r2
 8003d0a:	009b      	lsls	r3, r3, #2
 8003d0c:	440b      	add	r3, r1
 8003d0e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003d12:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	0159      	lsls	r1, r3, #5
 8003d18:	693b      	ldr	r3, [r7, #16]
 8003d1a:	440b      	add	r3, r1
 8003d1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d20:	691b      	ldr	r3, [r3, #16]
 8003d22:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8003d26:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8003d28:	6878      	ldr	r0, [r7, #4]
 8003d2a:	683a      	ldr	r2, [r7, #0]
 8003d2c:	4613      	mov	r3, r2
 8003d2e:	00db      	lsls	r3, r3, #3
 8003d30:	1a9b      	subs	r3, r3, r2
 8003d32:	009b      	lsls	r3, r3, #2
 8003d34:	4403      	add	r3, r0
 8003d36:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8003d3a:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8003d3c:	6879      	ldr	r1, [r7, #4]
 8003d3e:	683a      	ldr	r2, [r7, #0]
 8003d40:	4613      	mov	r3, r2
 8003d42:	00db      	lsls	r3, r3, #3
 8003d44:	1a9b      	subs	r3, r3, r2
 8003d46:	009b      	lsls	r3, r3, #2
 8003d48:	440b      	add	r3, r1
 8003d4a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003d4e:	6819      	ldr	r1, [r3, #0]
 8003d50:	6878      	ldr	r0, [r7, #4]
 8003d52:	683a      	ldr	r2, [r7, #0]
 8003d54:	4613      	mov	r3, r2
 8003d56:	00db      	lsls	r3, r3, #3
 8003d58:	1a9b      	subs	r3, r3, r2
 8003d5a:	009b      	lsls	r3, r3, #2
 8003d5c:	4403      	add	r3, r0
 8003d5e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	4419      	add	r1, r3
 8003d66:	6878      	ldr	r0, [r7, #4]
 8003d68:	683a      	ldr	r2, [r7, #0]
 8003d6a:	4613      	mov	r3, r2
 8003d6c:	00db      	lsls	r3, r3, #3
 8003d6e:	1a9b      	subs	r3, r3, r2
 8003d70:	009b      	lsls	r3, r3, #2
 8003d72:	4403      	add	r3, r0
 8003d74:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003d78:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003d7a:	683b      	ldr	r3, [r7, #0]
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d114      	bne.n	8003daa <PCD_EP_OutXfrComplete_int+0x16a>
 8003d80:	6879      	ldr	r1, [r7, #4]
 8003d82:	683a      	ldr	r2, [r7, #0]
 8003d84:	4613      	mov	r3, r2
 8003d86:	00db      	lsls	r3, r3, #3
 8003d88:	1a9b      	subs	r3, r3, r2
 8003d8a:	009b      	lsls	r3, r3, #2
 8003d8c:	440b      	add	r3, r1
 8003d8e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d108      	bne.n	8003daa <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6818      	ldr	r0, [r3, #0]
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003da2:	461a      	mov	r2, r3
 8003da4:	2101      	movs	r1, #1
 8003da6:	f003 fc6d 	bl	8007684 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003daa:	683b      	ldr	r3, [r7, #0]
 8003dac:	b2db      	uxtb	r3, r3
 8003dae:	4619      	mov	r1, r3
 8003db0:	6878      	ldr	r0, [r7, #4]
 8003db2:	f005 fd31 	bl	8009818 <HAL_PCD_DataOutStageCallback>
 8003db6:	e046      	b.n	8003e46 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	4a26      	ldr	r2, [pc, #152]	; (8003e54 <PCD_EP_OutXfrComplete_int+0x214>)
 8003dbc:	4293      	cmp	r3, r2
 8003dbe:	d124      	bne.n	8003e0a <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003dc0:	68bb      	ldr	r3, [r7, #8]
 8003dc2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d00a      	beq.n	8003de0 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003dca:	683b      	ldr	r3, [r7, #0]
 8003dcc:	015a      	lsls	r2, r3, #5
 8003dce:	693b      	ldr	r3, [r7, #16]
 8003dd0:	4413      	add	r3, r2
 8003dd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003dd6:	461a      	mov	r2, r3
 8003dd8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003ddc:	6093      	str	r3, [r2, #8]
 8003dde:	e032      	b.n	8003e46 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003de0:	68bb      	ldr	r3, [r7, #8]
 8003de2:	f003 0320 	and.w	r3, r3, #32
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d008      	beq.n	8003dfc <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003dea:	683b      	ldr	r3, [r7, #0]
 8003dec:	015a      	lsls	r2, r3, #5
 8003dee:	693b      	ldr	r3, [r7, #16]
 8003df0:	4413      	add	r3, r2
 8003df2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003df6:	461a      	mov	r2, r3
 8003df8:	2320      	movs	r3, #32
 8003dfa:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003dfc:	683b      	ldr	r3, [r7, #0]
 8003dfe:	b2db      	uxtb	r3, r3
 8003e00:	4619      	mov	r1, r3
 8003e02:	6878      	ldr	r0, [r7, #4]
 8003e04:	f005 fd08 	bl	8009818 <HAL_PCD_DataOutStageCallback>
 8003e08:	e01d      	b.n	8003e46 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003e0a:	683b      	ldr	r3, [r7, #0]
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d114      	bne.n	8003e3a <PCD_EP_OutXfrComplete_int+0x1fa>
 8003e10:	6879      	ldr	r1, [r7, #4]
 8003e12:	683a      	ldr	r2, [r7, #0]
 8003e14:	4613      	mov	r3, r2
 8003e16:	00db      	lsls	r3, r3, #3
 8003e18:	1a9b      	subs	r3, r3, r2
 8003e1a:	009b      	lsls	r3, r3, #2
 8003e1c:	440b      	add	r3, r1
 8003e1e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d108      	bne.n	8003e3a <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6818      	ldr	r0, [r3, #0]
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003e32:	461a      	mov	r2, r3
 8003e34:	2100      	movs	r1, #0
 8003e36:	f003 fc25 	bl	8007684 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003e3a:	683b      	ldr	r3, [r7, #0]
 8003e3c:	b2db      	uxtb	r3, r3
 8003e3e:	4619      	mov	r1, r3
 8003e40:	6878      	ldr	r0, [r7, #4]
 8003e42:	f005 fce9 	bl	8009818 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003e46:	2300      	movs	r3, #0
}
 8003e48:	4618      	mov	r0, r3
 8003e4a:	3718      	adds	r7, #24
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	bd80      	pop	{r7, pc}
 8003e50:	4f54300a 	.word	0x4f54300a
 8003e54:	4f54310a 	.word	0x4f54310a

08003e58 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	b086      	sub	sp, #24
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
 8003e60:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e68:	697b      	ldr	r3, [r7, #20]
 8003e6a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003e6c:	697b      	ldr	r3, [r7, #20]
 8003e6e:	333c      	adds	r3, #60	; 0x3c
 8003e70:	3304      	adds	r3, #4
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	015a      	lsls	r2, r3, #5
 8003e7a:	693b      	ldr	r3, [r7, #16]
 8003e7c:	4413      	add	r3, r2
 8003e7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e82:	689b      	ldr	r3, [r3, #8]
 8003e84:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	4a15      	ldr	r2, [pc, #84]	; (8003ee0 <PCD_EP_OutSetupPacket_int+0x88>)
 8003e8a:	4293      	cmp	r3, r2
 8003e8c:	d90e      	bls.n	8003eac <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003e8e:	68bb      	ldr	r3, [r7, #8]
 8003e90:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d009      	beq.n	8003eac <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	015a      	lsls	r2, r3, #5
 8003e9c:	693b      	ldr	r3, [r7, #16]
 8003e9e:	4413      	add	r3, r2
 8003ea0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ea4:	461a      	mov	r2, r3
 8003ea6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003eaa:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003eac:	6878      	ldr	r0, [r7, #4]
 8003eae:	f005 fca1 	bl	80097f4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	4a0a      	ldr	r2, [pc, #40]	; (8003ee0 <PCD_EP_OutSetupPacket_int+0x88>)
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	d90c      	bls.n	8003ed4 <PCD_EP_OutSetupPacket_int+0x7c>
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	691b      	ldr	r3, [r3, #16]
 8003ebe:	2b01      	cmp	r3, #1
 8003ec0:	d108      	bne.n	8003ed4 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6818      	ldr	r0, [r3, #0]
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003ecc:	461a      	mov	r2, r3
 8003ece:	2101      	movs	r1, #1
 8003ed0:	f003 fbd8 	bl	8007684 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003ed4:	2300      	movs	r3, #0
}
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	3718      	adds	r7, #24
 8003eda:	46bd      	mov	sp, r7
 8003edc:	bd80      	pop	{r7, pc}
 8003ede:	bf00      	nop
 8003ee0:	4f54300a 	.word	0x4f54300a

08003ee4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003ee4:	b480      	push	{r7}
 8003ee6:	b085      	sub	sp, #20
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
 8003eec:	460b      	mov	r3, r1
 8003eee:	70fb      	strb	r3, [r7, #3]
 8003ef0:	4613      	mov	r3, r2
 8003ef2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003efa:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003efc:	78fb      	ldrb	r3, [r7, #3]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d107      	bne.n	8003f12 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003f02:	883b      	ldrh	r3, [r7, #0]
 8003f04:	0419      	lsls	r1, r3, #16
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	68ba      	ldr	r2, [r7, #8]
 8003f0c:	430a      	orrs	r2, r1
 8003f0e:	629a      	str	r2, [r3, #40]	; 0x28
 8003f10:	e028      	b.n	8003f64 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f18:	0c1b      	lsrs	r3, r3, #16
 8003f1a:	68ba      	ldr	r2, [r7, #8]
 8003f1c:	4413      	add	r3, r2
 8003f1e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003f20:	2300      	movs	r3, #0
 8003f22:	73fb      	strb	r3, [r7, #15]
 8003f24:	e00d      	b.n	8003f42 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681a      	ldr	r2, [r3, #0]
 8003f2a:	7bfb      	ldrb	r3, [r7, #15]
 8003f2c:	3340      	adds	r3, #64	; 0x40
 8003f2e:	009b      	lsls	r3, r3, #2
 8003f30:	4413      	add	r3, r2
 8003f32:	685b      	ldr	r3, [r3, #4]
 8003f34:	0c1b      	lsrs	r3, r3, #16
 8003f36:	68ba      	ldr	r2, [r7, #8]
 8003f38:	4413      	add	r3, r2
 8003f3a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003f3c:	7bfb      	ldrb	r3, [r7, #15]
 8003f3e:	3301      	adds	r3, #1
 8003f40:	73fb      	strb	r3, [r7, #15]
 8003f42:	7bfa      	ldrb	r2, [r7, #15]
 8003f44:	78fb      	ldrb	r3, [r7, #3]
 8003f46:	3b01      	subs	r3, #1
 8003f48:	429a      	cmp	r2, r3
 8003f4a:	d3ec      	bcc.n	8003f26 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003f4c:	883b      	ldrh	r3, [r7, #0]
 8003f4e:	0418      	lsls	r0, r3, #16
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	6819      	ldr	r1, [r3, #0]
 8003f54:	78fb      	ldrb	r3, [r7, #3]
 8003f56:	3b01      	subs	r3, #1
 8003f58:	68ba      	ldr	r2, [r7, #8]
 8003f5a:	4302      	orrs	r2, r0
 8003f5c:	3340      	adds	r3, #64	; 0x40
 8003f5e:	009b      	lsls	r3, r3, #2
 8003f60:	440b      	add	r3, r1
 8003f62:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003f64:	2300      	movs	r3, #0
}
 8003f66:	4618      	mov	r0, r3
 8003f68:	3714      	adds	r7, #20
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f70:	4770      	bx	lr

08003f72 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003f72:	b480      	push	{r7}
 8003f74:	b083      	sub	sp, #12
 8003f76:	af00      	add	r7, sp, #0
 8003f78:	6078      	str	r0, [r7, #4]
 8003f7a:	460b      	mov	r3, r1
 8003f7c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	887a      	ldrh	r2, [r7, #2]
 8003f84:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003f86:	2300      	movs	r3, #0
}
 8003f88:	4618      	mov	r0, r3
 8003f8a:	370c      	adds	r7, #12
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f92:	4770      	bx	lr

08003f94 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003f94:	b480      	push	{r7}
 8003f96:	b083      	sub	sp, #12
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
 8003f9c:	460b      	mov	r3, r1
 8003f9e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003fa0:	bf00      	nop
 8003fa2:	370c      	adds	r7, #12
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003faa:	4770      	bx	lr

08003fac <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	b086      	sub	sp, #24
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d101      	bne.n	8003fbe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003fba:	2301      	movs	r3, #1
 8003fbc:	e267      	b.n	800448e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f003 0301 	and.w	r3, r3, #1
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d075      	beq.n	80040b6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003fca:	4b88      	ldr	r3, [pc, #544]	; (80041ec <HAL_RCC_OscConfig+0x240>)
 8003fcc:	689b      	ldr	r3, [r3, #8]
 8003fce:	f003 030c 	and.w	r3, r3, #12
 8003fd2:	2b04      	cmp	r3, #4
 8003fd4:	d00c      	beq.n	8003ff0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003fd6:	4b85      	ldr	r3, [pc, #532]	; (80041ec <HAL_RCC_OscConfig+0x240>)
 8003fd8:	689b      	ldr	r3, [r3, #8]
 8003fda:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003fde:	2b08      	cmp	r3, #8
 8003fe0:	d112      	bne.n	8004008 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003fe2:	4b82      	ldr	r3, [pc, #520]	; (80041ec <HAL_RCC_OscConfig+0x240>)
 8003fe4:	685b      	ldr	r3, [r3, #4]
 8003fe6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003fea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003fee:	d10b      	bne.n	8004008 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ff0:	4b7e      	ldr	r3, [pc, #504]	; (80041ec <HAL_RCC_OscConfig+0x240>)
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d05b      	beq.n	80040b4 <HAL_RCC_OscConfig+0x108>
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	685b      	ldr	r3, [r3, #4]
 8004000:	2b00      	cmp	r3, #0
 8004002:	d157      	bne.n	80040b4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004004:	2301      	movs	r3, #1
 8004006:	e242      	b.n	800448e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	685b      	ldr	r3, [r3, #4]
 800400c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004010:	d106      	bne.n	8004020 <HAL_RCC_OscConfig+0x74>
 8004012:	4b76      	ldr	r3, [pc, #472]	; (80041ec <HAL_RCC_OscConfig+0x240>)
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	4a75      	ldr	r2, [pc, #468]	; (80041ec <HAL_RCC_OscConfig+0x240>)
 8004018:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800401c:	6013      	str	r3, [r2, #0]
 800401e:	e01d      	b.n	800405c <HAL_RCC_OscConfig+0xb0>
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	685b      	ldr	r3, [r3, #4]
 8004024:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004028:	d10c      	bne.n	8004044 <HAL_RCC_OscConfig+0x98>
 800402a:	4b70      	ldr	r3, [pc, #448]	; (80041ec <HAL_RCC_OscConfig+0x240>)
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	4a6f      	ldr	r2, [pc, #444]	; (80041ec <HAL_RCC_OscConfig+0x240>)
 8004030:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004034:	6013      	str	r3, [r2, #0]
 8004036:	4b6d      	ldr	r3, [pc, #436]	; (80041ec <HAL_RCC_OscConfig+0x240>)
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	4a6c      	ldr	r2, [pc, #432]	; (80041ec <HAL_RCC_OscConfig+0x240>)
 800403c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004040:	6013      	str	r3, [r2, #0]
 8004042:	e00b      	b.n	800405c <HAL_RCC_OscConfig+0xb0>
 8004044:	4b69      	ldr	r3, [pc, #420]	; (80041ec <HAL_RCC_OscConfig+0x240>)
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	4a68      	ldr	r2, [pc, #416]	; (80041ec <HAL_RCC_OscConfig+0x240>)
 800404a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800404e:	6013      	str	r3, [r2, #0]
 8004050:	4b66      	ldr	r3, [pc, #408]	; (80041ec <HAL_RCC_OscConfig+0x240>)
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	4a65      	ldr	r2, [pc, #404]	; (80041ec <HAL_RCC_OscConfig+0x240>)
 8004056:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800405a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	685b      	ldr	r3, [r3, #4]
 8004060:	2b00      	cmp	r3, #0
 8004062:	d013      	beq.n	800408c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004064:	f7fd fac8 	bl	80015f8 <HAL_GetTick>
 8004068:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800406a:	e008      	b.n	800407e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800406c:	f7fd fac4 	bl	80015f8 <HAL_GetTick>
 8004070:	4602      	mov	r2, r0
 8004072:	693b      	ldr	r3, [r7, #16]
 8004074:	1ad3      	subs	r3, r2, r3
 8004076:	2b64      	cmp	r3, #100	; 0x64
 8004078:	d901      	bls.n	800407e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800407a:	2303      	movs	r3, #3
 800407c:	e207      	b.n	800448e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800407e:	4b5b      	ldr	r3, [pc, #364]	; (80041ec <HAL_RCC_OscConfig+0x240>)
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004086:	2b00      	cmp	r3, #0
 8004088:	d0f0      	beq.n	800406c <HAL_RCC_OscConfig+0xc0>
 800408a:	e014      	b.n	80040b6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800408c:	f7fd fab4 	bl	80015f8 <HAL_GetTick>
 8004090:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004092:	e008      	b.n	80040a6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004094:	f7fd fab0 	bl	80015f8 <HAL_GetTick>
 8004098:	4602      	mov	r2, r0
 800409a:	693b      	ldr	r3, [r7, #16]
 800409c:	1ad3      	subs	r3, r2, r3
 800409e:	2b64      	cmp	r3, #100	; 0x64
 80040a0:	d901      	bls.n	80040a6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80040a2:	2303      	movs	r3, #3
 80040a4:	e1f3      	b.n	800448e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80040a6:	4b51      	ldr	r3, [pc, #324]	; (80041ec <HAL_RCC_OscConfig+0x240>)
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d1f0      	bne.n	8004094 <HAL_RCC_OscConfig+0xe8>
 80040b2:	e000      	b.n	80040b6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f003 0302 	and.w	r3, r3, #2
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d063      	beq.n	800418a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80040c2:	4b4a      	ldr	r3, [pc, #296]	; (80041ec <HAL_RCC_OscConfig+0x240>)
 80040c4:	689b      	ldr	r3, [r3, #8]
 80040c6:	f003 030c 	and.w	r3, r3, #12
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d00b      	beq.n	80040e6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80040ce:	4b47      	ldr	r3, [pc, #284]	; (80041ec <HAL_RCC_OscConfig+0x240>)
 80040d0:	689b      	ldr	r3, [r3, #8]
 80040d2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80040d6:	2b08      	cmp	r3, #8
 80040d8:	d11c      	bne.n	8004114 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80040da:	4b44      	ldr	r3, [pc, #272]	; (80041ec <HAL_RCC_OscConfig+0x240>)
 80040dc:	685b      	ldr	r3, [r3, #4]
 80040de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d116      	bne.n	8004114 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80040e6:	4b41      	ldr	r3, [pc, #260]	; (80041ec <HAL_RCC_OscConfig+0x240>)
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f003 0302 	and.w	r3, r3, #2
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d005      	beq.n	80040fe <HAL_RCC_OscConfig+0x152>
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	68db      	ldr	r3, [r3, #12]
 80040f6:	2b01      	cmp	r3, #1
 80040f8:	d001      	beq.n	80040fe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80040fa:	2301      	movs	r3, #1
 80040fc:	e1c7      	b.n	800448e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040fe:	4b3b      	ldr	r3, [pc, #236]	; (80041ec <HAL_RCC_OscConfig+0x240>)
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	691b      	ldr	r3, [r3, #16]
 800410a:	00db      	lsls	r3, r3, #3
 800410c:	4937      	ldr	r1, [pc, #220]	; (80041ec <HAL_RCC_OscConfig+0x240>)
 800410e:	4313      	orrs	r3, r2
 8004110:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004112:	e03a      	b.n	800418a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	68db      	ldr	r3, [r3, #12]
 8004118:	2b00      	cmp	r3, #0
 800411a:	d020      	beq.n	800415e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800411c:	4b34      	ldr	r3, [pc, #208]	; (80041f0 <HAL_RCC_OscConfig+0x244>)
 800411e:	2201      	movs	r2, #1
 8004120:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004122:	f7fd fa69 	bl	80015f8 <HAL_GetTick>
 8004126:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004128:	e008      	b.n	800413c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800412a:	f7fd fa65 	bl	80015f8 <HAL_GetTick>
 800412e:	4602      	mov	r2, r0
 8004130:	693b      	ldr	r3, [r7, #16]
 8004132:	1ad3      	subs	r3, r2, r3
 8004134:	2b02      	cmp	r3, #2
 8004136:	d901      	bls.n	800413c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004138:	2303      	movs	r3, #3
 800413a:	e1a8      	b.n	800448e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800413c:	4b2b      	ldr	r3, [pc, #172]	; (80041ec <HAL_RCC_OscConfig+0x240>)
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f003 0302 	and.w	r3, r3, #2
 8004144:	2b00      	cmp	r3, #0
 8004146:	d0f0      	beq.n	800412a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004148:	4b28      	ldr	r3, [pc, #160]	; (80041ec <HAL_RCC_OscConfig+0x240>)
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	691b      	ldr	r3, [r3, #16]
 8004154:	00db      	lsls	r3, r3, #3
 8004156:	4925      	ldr	r1, [pc, #148]	; (80041ec <HAL_RCC_OscConfig+0x240>)
 8004158:	4313      	orrs	r3, r2
 800415a:	600b      	str	r3, [r1, #0]
 800415c:	e015      	b.n	800418a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800415e:	4b24      	ldr	r3, [pc, #144]	; (80041f0 <HAL_RCC_OscConfig+0x244>)
 8004160:	2200      	movs	r2, #0
 8004162:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004164:	f7fd fa48 	bl	80015f8 <HAL_GetTick>
 8004168:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800416a:	e008      	b.n	800417e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800416c:	f7fd fa44 	bl	80015f8 <HAL_GetTick>
 8004170:	4602      	mov	r2, r0
 8004172:	693b      	ldr	r3, [r7, #16]
 8004174:	1ad3      	subs	r3, r2, r3
 8004176:	2b02      	cmp	r3, #2
 8004178:	d901      	bls.n	800417e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800417a:	2303      	movs	r3, #3
 800417c:	e187      	b.n	800448e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800417e:	4b1b      	ldr	r3, [pc, #108]	; (80041ec <HAL_RCC_OscConfig+0x240>)
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f003 0302 	and.w	r3, r3, #2
 8004186:	2b00      	cmp	r3, #0
 8004188:	d1f0      	bne.n	800416c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f003 0308 	and.w	r3, r3, #8
 8004192:	2b00      	cmp	r3, #0
 8004194:	d036      	beq.n	8004204 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	695b      	ldr	r3, [r3, #20]
 800419a:	2b00      	cmp	r3, #0
 800419c:	d016      	beq.n	80041cc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800419e:	4b15      	ldr	r3, [pc, #84]	; (80041f4 <HAL_RCC_OscConfig+0x248>)
 80041a0:	2201      	movs	r2, #1
 80041a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041a4:	f7fd fa28 	bl	80015f8 <HAL_GetTick>
 80041a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80041aa:	e008      	b.n	80041be <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80041ac:	f7fd fa24 	bl	80015f8 <HAL_GetTick>
 80041b0:	4602      	mov	r2, r0
 80041b2:	693b      	ldr	r3, [r7, #16]
 80041b4:	1ad3      	subs	r3, r2, r3
 80041b6:	2b02      	cmp	r3, #2
 80041b8:	d901      	bls.n	80041be <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80041ba:	2303      	movs	r3, #3
 80041bc:	e167      	b.n	800448e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80041be:	4b0b      	ldr	r3, [pc, #44]	; (80041ec <HAL_RCC_OscConfig+0x240>)
 80041c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80041c2:	f003 0302 	and.w	r3, r3, #2
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d0f0      	beq.n	80041ac <HAL_RCC_OscConfig+0x200>
 80041ca:	e01b      	b.n	8004204 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80041cc:	4b09      	ldr	r3, [pc, #36]	; (80041f4 <HAL_RCC_OscConfig+0x248>)
 80041ce:	2200      	movs	r2, #0
 80041d0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80041d2:	f7fd fa11 	bl	80015f8 <HAL_GetTick>
 80041d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80041d8:	e00e      	b.n	80041f8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80041da:	f7fd fa0d 	bl	80015f8 <HAL_GetTick>
 80041de:	4602      	mov	r2, r0
 80041e0:	693b      	ldr	r3, [r7, #16]
 80041e2:	1ad3      	subs	r3, r2, r3
 80041e4:	2b02      	cmp	r3, #2
 80041e6:	d907      	bls.n	80041f8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80041e8:	2303      	movs	r3, #3
 80041ea:	e150      	b.n	800448e <HAL_RCC_OscConfig+0x4e2>
 80041ec:	40023800 	.word	0x40023800
 80041f0:	42470000 	.word	0x42470000
 80041f4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80041f8:	4b88      	ldr	r3, [pc, #544]	; (800441c <HAL_RCC_OscConfig+0x470>)
 80041fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80041fc:	f003 0302 	and.w	r3, r3, #2
 8004200:	2b00      	cmp	r3, #0
 8004202:	d1ea      	bne.n	80041da <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f003 0304 	and.w	r3, r3, #4
 800420c:	2b00      	cmp	r3, #0
 800420e:	f000 8097 	beq.w	8004340 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004212:	2300      	movs	r3, #0
 8004214:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004216:	4b81      	ldr	r3, [pc, #516]	; (800441c <HAL_RCC_OscConfig+0x470>)
 8004218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800421a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800421e:	2b00      	cmp	r3, #0
 8004220:	d10f      	bne.n	8004242 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004222:	2300      	movs	r3, #0
 8004224:	60bb      	str	r3, [r7, #8]
 8004226:	4b7d      	ldr	r3, [pc, #500]	; (800441c <HAL_RCC_OscConfig+0x470>)
 8004228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800422a:	4a7c      	ldr	r2, [pc, #496]	; (800441c <HAL_RCC_OscConfig+0x470>)
 800422c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004230:	6413      	str	r3, [r2, #64]	; 0x40
 8004232:	4b7a      	ldr	r3, [pc, #488]	; (800441c <HAL_RCC_OscConfig+0x470>)
 8004234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004236:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800423a:	60bb      	str	r3, [r7, #8]
 800423c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800423e:	2301      	movs	r3, #1
 8004240:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004242:	4b77      	ldr	r3, [pc, #476]	; (8004420 <HAL_RCC_OscConfig+0x474>)
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800424a:	2b00      	cmp	r3, #0
 800424c:	d118      	bne.n	8004280 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800424e:	4b74      	ldr	r3, [pc, #464]	; (8004420 <HAL_RCC_OscConfig+0x474>)
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	4a73      	ldr	r2, [pc, #460]	; (8004420 <HAL_RCC_OscConfig+0x474>)
 8004254:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004258:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800425a:	f7fd f9cd 	bl	80015f8 <HAL_GetTick>
 800425e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004260:	e008      	b.n	8004274 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004262:	f7fd f9c9 	bl	80015f8 <HAL_GetTick>
 8004266:	4602      	mov	r2, r0
 8004268:	693b      	ldr	r3, [r7, #16]
 800426a:	1ad3      	subs	r3, r2, r3
 800426c:	2b02      	cmp	r3, #2
 800426e:	d901      	bls.n	8004274 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004270:	2303      	movs	r3, #3
 8004272:	e10c      	b.n	800448e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004274:	4b6a      	ldr	r3, [pc, #424]	; (8004420 <HAL_RCC_OscConfig+0x474>)
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800427c:	2b00      	cmp	r3, #0
 800427e:	d0f0      	beq.n	8004262 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	689b      	ldr	r3, [r3, #8]
 8004284:	2b01      	cmp	r3, #1
 8004286:	d106      	bne.n	8004296 <HAL_RCC_OscConfig+0x2ea>
 8004288:	4b64      	ldr	r3, [pc, #400]	; (800441c <HAL_RCC_OscConfig+0x470>)
 800428a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800428c:	4a63      	ldr	r2, [pc, #396]	; (800441c <HAL_RCC_OscConfig+0x470>)
 800428e:	f043 0301 	orr.w	r3, r3, #1
 8004292:	6713      	str	r3, [r2, #112]	; 0x70
 8004294:	e01c      	b.n	80042d0 <HAL_RCC_OscConfig+0x324>
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	689b      	ldr	r3, [r3, #8]
 800429a:	2b05      	cmp	r3, #5
 800429c:	d10c      	bne.n	80042b8 <HAL_RCC_OscConfig+0x30c>
 800429e:	4b5f      	ldr	r3, [pc, #380]	; (800441c <HAL_RCC_OscConfig+0x470>)
 80042a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042a2:	4a5e      	ldr	r2, [pc, #376]	; (800441c <HAL_RCC_OscConfig+0x470>)
 80042a4:	f043 0304 	orr.w	r3, r3, #4
 80042a8:	6713      	str	r3, [r2, #112]	; 0x70
 80042aa:	4b5c      	ldr	r3, [pc, #368]	; (800441c <HAL_RCC_OscConfig+0x470>)
 80042ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042ae:	4a5b      	ldr	r2, [pc, #364]	; (800441c <HAL_RCC_OscConfig+0x470>)
 80042b0:	f043 0301 	orr.w	r3, r3, #1
 80042b4:	6713      	str	r3, [r2, #112]	; 0x70
 80042b6:	e00b      	b.n	80042d0 <HAL_RCC_OscConfig+0x324>
 80042b8:	4b58      	ldr	r3, [pc, #352]	; (800441c <HAL_RCC_OscConfig+0x470>)
 80042ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042bc:	4a57      	ldr	r2, [pc, #348]	; (800441c <HAL_RCC_OscConfig+0x470>)
 80042be:	f023 0301 	bic.w	r3, r3, #1
 80042c2:	6713      	str	r3, [r2, #112]	; 0x70
 80042c4:	4b55      	ldr	r3, [pc, #340]	; (800441c <HAL_RCC_OscConfig+0x470>)
 80042c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042c8:	4a54      	ldr	r2, [pc, #336]	; (800441c <HAL_RCC_OscConfig+0x470>)
 80042ca:	f023 0304 	bic.w	r3, r3, #4
 80042ce:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	689b      	ldr	r3, [r3, #8]
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d015      	beq.n	8004304 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042d8:	f7fd f98e 	bl	80015f8 <HAL_GetTick>
 80042dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042de:	e00a      	b.n	80042f6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80042e0:	f7fd f98a 	bl	80015f8 <HAL_GetTick>
 80042e4:	4602      	mov	r2, r0
 80042e6:	693b      	ldr	r3, [r7, #16]
 80042e8:	1ad3      	subs	r3, r2, r3
 80042ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80042ee:	4293      	cmp	r3, r2
 80042f0:	d901      	bls.n	80042f6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80042f2:	2303      	movs	r3, #3
 80042f4:	e0cb      	b.n	800448e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042f6:	4b49      	ldr	r3, [pc, #292]	; (800441c <HAL_RCC_OscConfig+0x470>)
 80042f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042fa:	f003 0302 	and.w	r3, r3, #2
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d0ee      	beq.n	80042e0 <HAL_RCC_OscConfig+0x334>
 8004302:	e014      	b.n	800432e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004304:	f7fd f978 	bl	80015f8 <HAL_GetTick>
 8004308:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800430a:	e00a      	b.n	8004322 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800430c:	f7fd f974 	bl	80015f8 <HAL_GetTick>
 8004310:	4602      	mov	r2, r0
 8004312:	693b      	ldr	r3, [r7, #16]
 8004314:	1ad3      	subs	r3, r2, r3
 8004316:	f241 3288 	movw	r2, #5000	; 0x1388
 800431a:	4293      	cmp	r3, r2
 800431c:	d901      	bls.n	8004322 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800431e:	2303      	movs	r3, #3
 8004320:	e0b5      	b.n	800448e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004322:	4b3e      	ldr	r3, [pc, #248]	; (800441c <HAL_RCC_OscConfig+0x470>)
 8004324:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004326:	f003 0302 	and.w	r3, r3, #2
 800432a:	2b00      	cmp	r3, #0
 800432c:	d1ee      	bne.n	800430c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800432e:	7dfb      	ldrb	r3, [r7, #23]
 8004330:	2b01      	cmp	r3, #1
 8004332:	d105      	bne.n	8004340 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004334:	4b39      	ldr	r3, [pc, #228]	; (800441c <HAL_RCC_OscConfig+0x470>)
 8004336:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004338:	4a38      	ldr	r2, [pc, #224]	; (800441c <HAL_RCC_OscConfig+0x470>)
 800433a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800433e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	699b      	ldr	r3, [r3, #24]
 8004344:	2b00      	cmp	r3, #0
 8004346:	f000 80a1 	beq.w	800448c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800434a:	4b34      	ldr	r3, [pc, #208]	; (800441c <HAL_RCC_OscConfig+0x470>)
 800434c:	689b      	ldr	r3, [r3, #8]
 800434e:	f003 030c 	and.w	r3, r3, #12
 8004352:	2b08      	cmp	r3, #8
 8004354:	d05c      	beq.n	8004410 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	699b      	ldr	r3, [r3, #24]
 800435a:	2b02      	cmp	r3, #2
 800435c:	d141      	bne.n	80043e2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800435e:	4b31      	ldr	r3, [pc, #196]	; (8004424 <HAL_RCC_OscConfig+0x478>)
 8004360:	2200      	movs	r2, #0
 8004362:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004364:	f7fd f948 	bl	80015f8 <HAL_GetTick>
 8004368:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800436a:	e008      	b.n	800437e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800436c:	f7fd f944 	bl	80015f8 <HAL_GetTick>
 8004370:	4602      	mov	r2, r0
 8004372:	693b      	ldr	r3, [r7, #16]
 8004374:	1ad3      	subs	r3, r2, r3
 8004376:	2b02      	cmp	r3, #2
 8004378:	d901      	bls.n	800437e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800437a:	2303      	movs	r3, #3
 800437c:	e087      	b.n	800448e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800437e:	4b27      	ldr	r3, [pc, #156]	; (800441c <HAL_RCC_OscConfig+0x470>)
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004386:	2b00      	cmp	r3, #0
 8004388:	d1f0      	bne.n	800436c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	69da      	ldr	r2, [r3, #28]
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6a1b      	ldr	r3, [r3, #32]
 8004392:	431a      	orrs	r2, r3
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004398:	019b      	lsls	r3, r3, #6
 800439a:	431a      	orrs	r2, r3
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043a0:	085b      	lsrs	r3, r3, #1
 80043a2:	3b01      	subs	r3, #1
 80043a4:	041b      	lsls	r3, r3, #16
 80043a6:	431a      	orrs	r2, r3
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043ac:	061b      	lsls	r3, r3, #24
 80043ae:	491b      	ldr	r1, [pc, #108]	; (800441c <HAL_RCC_OscConfig+0x470>)
 80043b0:	4313      	orrs	r3, r2
 80043b2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80043b4:	4b1b      	ldr	r3, [pc, #108]	; (8004424 <HAL_RCC_OscConfig+0x478>)
 80043b6:	2201      	movs	r2, #1
 80043b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043ba:	f7fd f91d 	bl	80015f8 <HAL_GetTick>
 80043be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80043c0:	e008      	b.n	80043d4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80043c2:	f7fd f919 	bl	80015f8 <HAL_GetTick>
 80043c6:	4602      	mov	r2, r0
 80043c8:	693b      	ldr	r3, [r7, #16]
 80043ca:	1ad3      	subs	r3, r2, r3
 80043cc:	2b02      	cmp	r3, #2
 80043ce:	d901      	bls.n	80043d4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80043d0:	2303      	movs	r3, #3
 80043d2:	e05c      	b.n	800448e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80043d4:	4b11      	ldr	r3, [pc, #68]	; (800441c <HAL_RCC_OscConfig+0x470>)
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d0f0      	beq.n	80043c2 <HAL_RCC_OscConfig+0x416>
 80043e0:	e054      	b.n	800448c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043e2:	4b10      	ldr	r3, [pc, #64]	; (8004424 <HAL_RCC_OscConfig+0x478>)
 80043e4:	2200      	movs	r2, #0
 80043e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043e8:	f7fd f906 	bl	80015f8 <HAL_GetTick>
 80043ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043ee:	e008      	b.n	8004402 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80043f0:	f7fd f902 	bl	80015f8 <HAL_GetTick>
 80043f4:	4602      	mov	r2, r0
 80043f6:	693b      	ldr	r3, [r7, #16]
 80043f8:	1ad3      	subs	r3, r2, r3
 80043fa:	2b02      	cmp	r3, #2
 80043fc:	d901      	bls.n	8004402 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80043fe:	2303      	movs	r3, #3
 8004400:	e045      	b.n	800448e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004402:	4b06      	ldr	r3, [pc, #24]	; (800441c <HAL_RCC_OscConfig+0x470>)
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800440a:	2b00      	cmp	r3, #0
 800440c:	d1f0      	bne.n	80043f0 <HAL_RCC_OscConfig+0x444>
 800440e:	e03d      	b.n	800448c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	699b      	ldr	r3, [r3, #24]
 8004414:	2b01      	cmp	r3, #1
 8004416:	d107      	bne.n	8004428 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004418:	2301      	movs	r3, #1
 800441a:	e038      	b.n	800448e <HAL_RCC_OscConfig+0x4e2>
 800441c:	40023800 	.word	0x40023800
 8004420:	40007000 	.word	0x40007000
 8004424:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004428:	4b1b      	ldr	r3, [pc, #108]	; (8004498 <HAL_RCC_OscConfig+0x4ec>)
 800442a:	685b      	ldr	r3, [r3, #4]
 800442c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	699b      	ldr	r3, [r3, #24]
 8004432:	2b01      	cmp	r3, #1
 8004434:	d028      	beq.n	8004488 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004440:	429a      	cmp	r2, r3
 8004442:	d121      	bne.n	8004488 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800444e:	429a      	cmp	r2, r3
 8004450:	d11a      	bne.n	8004488 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004452:	68fa      	ldr	r2, [r7, #12]
 8004454:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004458:	4013      	ands	r3, r2
 800445a:	687a      	ldr	r2, [r7, #4]
 800445c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800445e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004460:	4293      	cmp	r3, r2
 8004462:	d111      	bne.n	8004488 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800446e:	085b      	lsrs	r3, r3, #1
 8004470:	3b01      	subs	r3, #1
 8004472:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004474:	429a      	cmp	r2, r3
 8004476:	d107      	bne.n	8004488 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004482:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004484:	429a      	cmp	r2, r3
 8004486:	d001      	beq.n	800448c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004488:	2301      	movs	r3, #1
 800448a:	e000      	b.n	800448e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800448c:	2300      	movs	r3, #0
}
 800448e:	4618      	mov	r0, r3
 8004490:	3718      	adds	r7, #24
 8004492:	46bd      	mov	sp, r7
 8004494:	bd80      	pop	{r7, pc}
 8004496:	bf00      	nop
 8004498:	40023800 	.word	0x40023800

0800449c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800449c:	b580      	push	{r7, lr}
 800449e:	b084      	sub	sp, #16
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
 80044a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d101      	bne.n	80044b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80044ac:	2301      	movs	r3, #1
 80044ae:	e0cc      	b.n	800464a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80044b0:	4b68      	ldr	r3, [pc, #416]	; (8004654 <HAL_RCC_ClockConfig+0x1b8>)
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f003 0307 	and.w	r3, r3, #7
 80044b8:	683a      	ldr	r2, [r7, #0]
 80044ba:	429a      	cmp	r2, r3
 80044bc:	d90c      	bls.n	80044d8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044be:	4b65      	ldr	r3, [pc, #404]	; (8004654 <HAL_RCC_ClockConfig+0x1b8>)
 80044c0:	683a      	ldr	r2, [r7, #0]
 80044c2:	b2d2      	uxtb	r2, r2
 80044c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80044c6:	4b63      	ldr	r3, [pc, #396]	; (8004654 <HAL_RCC_ClockConfig+0x1b8>)
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f003 0307 	and.w	r3, r3, #7
 80044ce:	683a      	ldr	r2, [r7, #0]
 80044d0:	429a      	cmp	r2, r3
 80044d2:	d001      	beq.n	80044d8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80044d4:	2301      	movs	r3, #1
 80044d6:	e0b8      	b.n	800464a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f003 0302 	and.w	r3, r3, #2
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d020      	beq.n	8004526 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f003 0304 	and.w	r3, r3, #4
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d005      	beq.n	80044fc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80044f0:	4b59      	ldr	r3, [pc, #356]	; (8004658 <HAL_RCC_ClockConfig+0x1bc>)
 80044f2:	689b      	ldr	r3, [r3, #8]
 80044f4:	4a58      	ldr	r2, [pc, #352]	; (8004658 <HAL_RCC_ClockConfig+0x1bc>)
 80044f6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80044fa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f003 0308 	and.w	r3, r3, #8
 8004504:	2b00      	cmp	r3, #0
 8004506:	d005      	beq.n	8004514 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004508:	4b53      	ldr	r3, [pc, #332]	; (8004658 <HAL_RCC_ClockConfig+0x1bc>)
 800450a:	689b      	ldr	r3, [r3, #8]
 800450c:	4a52      	ldr	r2, [pc, #328]	; (8004658 <HAL_RCC_ClockConfig+0x1bc>)
 800450e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004512:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004514:	4b50      	ldr	r3, [pc, #320]	; (8004658 <HAL_RCC_ClockConfig+0x1bc>)
 8004516:	689b      	ldr	r3, [r3, #8]
 8004518:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	689b      	ldr	r3, [r3, #8]
 8004520:	494d      	ldr	r1, [pc, #308]	; (8004658 <HAL_RCC_ClockConfig+0x1bc>)
 8004522:	4313      	orrs	r3, r2
 8004524:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f003 0301 	and.w	r3, r3, #1
 800452e:	2b00      	cmp	r3, #0
 8004530:	d044      	beq.n	80045bc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	685b      	ldr	r3, [r3, #4]
 8004536:	2b01      	cmp	r3, #1
 8004538:	d107      	bne.n	800454a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800453a:	4b47      	ldr	r3, [pc, #284]	; (8004658 <HAL_RCC_ClockConfig+0x1bc>)
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004542:	2b00      	cmp	r3, #0
 8004544:	d119      	bne.n	800457a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004546:	2301      	movs	r3, #1
 8004548:	e07f      	b.n	800464a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	685b      	ldr	r3, [r3, #4]
 800454e:	2b02      	cmp	r3, #2
 8004550:	d003      	beq.n	800455a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004556:	2b03      	cmp	r3, #3
 8004558:	d107      	bne.n	800456a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800455a:	4b3f      	ldr	r3, [pc, #252]	; (8004658 <HAL_RCC_ClockConfig+0x1bc>)
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004562:	2b00      	cmp	r3, #0
 8004564:	d109      	bne.n	800457a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004566:	2301      	movs	r3, #1
 8004568:	e06f      	b.n	800464a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800456a:	4b3b      	ldr	r3, [pc, #236]	; (8004658 <HAL_RCC_ClockConfig+0x1bc>)
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f003 0302 	and.w	r3, r3, #2
 8004572:	2b00      	cmp	r3, #0
 8004574:	d101      	bne.n	800457a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004576:	2301      	movs	r3, #1
 8004578:	e067      	b.n	800464a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800457a:	4b37      	ldr	r3, [pc, #220]	; (8004658 <HAL_RCC_ClockConfig+0x1bc>)
 800457c:	689b      	ldr	r3, [r3, #8]
 800457e:	f023 0203 	bic.w	r2, r3, #3
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	685b      	ldr	r3, [r3, #4]
 8004586:	4934      	ldr	r1, [pc, #208]	; (8004658 <HAL_RCC_ClockConfig+0x1bc>)
 8004588:	4313      	orrs	r3, r2
 800458a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800458c:	f7fd f834 	bl	80015f8 <HAL_GetTick>
 8004590:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004592:	e00a      	b.n	80045aa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004594:	f7fd f830 	bl	80015f8 <HAL_GetTick>
 8004598:	4602      	mov	r2, r0
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	1ad3      	subs	r3, r2, r3
 800459e:	f241 3288 	movw	r2, #5000	; 0x1388
 80045a2:	4293      	cmp	r3, r2
 80045a4:	d901      	bls.n	80045aa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80045a6:	2303      	movs	r3, #3
 80045a8:	e04f      	b.n	800464a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045aa:	4b2b      	ldr	r3, [pc, #172]	; (8004658 <HAL_RCC_ClockConfig+0x1bc>)
 80045ac:	689b      	ldr	r3, [r3, #8]
 80045ae:	f003 020c 	and.w	r2, r3, #12
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	685b      	ldr	r3, [r3, #4]
 80045b6:	009b      	lsls	r3, r3, #2
 80045b8:	429a      	cmp	r2, r3
 80045ba:	d1eb      	bne.n	8004594 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80045bc:	4b25      	ldr	r3, [pc, #148]	; (8004654 <HAL_RCC_ClockConfig+0x1b8>)
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f003 0307 	and.w	r3, r3, #7
 80045c4:	683a      	ldr	r2, [r7, #0]
 80045c6:	429a      	cmp	r2, r3
 80045c8:	d20c      	bcs.n	80045e4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045ca:	4b22      	ldr	r3, [pc, #136]	; (8004654 <HAL_RCC_ClockConfig+0x1b8>)
 80045cc:	683a      	ldr	r2, [r7, #0]
 80045ce:	b2d2      	uxtb	r2, r2
 80045d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80045d2:	4b20      	ldr	r3, [pc, #128]	; (8004654 <HAL_RCC_ClockConfig+0x1b8>)
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f003 0307 	and.w	r3, r3, #7
 80045da:	683a      	ldr	r2, [r7, #0]
 80045dc:	429a      	cmp	r2, r3
 80045de:	d001      	beq.n	80045e4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80045e0:	2301      	movs	r3, #1
 80045e2:	e032      	b.n	800464a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f003 0304 	and.w	r3, r3, #4
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d008      	beq.n	8004602 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80045f0:	4b19      	ldr	r3, [pc, #100]	; (8004658 <HAL_RCC_ClockConfig+0x1bc>)
 80045f2:	689b      	ldr	r3, [r3, #8]
 80045f4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	68db      	ldr	r3, [r3, #12]
 80045fc:	4916      	ldr	r1, [pc, #88]	; (8004658 <HAL_RCC_ClockConfig+0x1bc>)
 80045fe:	4313      	orrs	r3, r2
 8004600:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f003 0308 	and.w	r3, r3, #8
 800460a:	2b00      	cmp	r3, #0
 800460c:	d009      	beq.n	8004622 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800460e:	4b12      	ldr	r3, [pc, #72]	; (8004658 <HAL_RCC_ClockConfig+0x1bc>)
 8004610:	689b      	ldr	r3, [r3, #8]
 8004612:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	691b      	ldr	r3, [r3, #16]
 800461a:	00db      	lsls	r3, r3, #3
 800461c:	490e      	ldr	r1, [pc, #56]	; (8004658 <HAL_RCC_ClockConfig+0x1bc>)
 800461e:	4313      	orrs	r3, r2
 8004620:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004622:	f000 f821 	bl	8004668 <HAL_RCC_GetSysClockFreq>
 8004626:	4602      	mov	r2, r0
 8004628:	4b0b      	ldr	r3, [pc, #44]	; (8004658 <HAL_RCC_ClockConfig+0x1bc>)
 800462a:	689b      	ldr	r3, [r3, #8]
 800462c:	091b      	lsrs	r3, r3, #4
 800462e:	f003 030f 	and.w	r3, r3, #15
 8004632:	490a      	ldr	r1, [pc, #40]	; (800465c <HAL_RCC_ClockConfig+0x1c0>)
 8004634:	5ccb      	ldrb	r3, [r1, r3]
 8004636:	fa22 f303 	lsr.w	r3, r2, r3
 800463a:	4a09      	ldr	r2, [pc, #36]	; (8004660 <HAL_RCC_ClockConfig+0x1c4>)
 800463c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800463e:	4b09      	ldr	r3, [pc, #36]	; (8004664 <HAL_RCC_ClockConfig+0x1c8>)
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	4618      	mov	r0, r3
 8004644:	f7fc ff94 	bl	8001570 <HAL_InitTick>

  return HAL_OK;
 8004648:	2300      	movs	r3, #0
}
 800464a:	4618      	mov	r0, r3
 800464c:	3710      	adds	r7, #16
 800464e:	46bd      	mov	sp, r7
 8004650:	bd80      	pop	{r7, pc}
 8004652:	bf00      	nop
 8004654:	40023c00 	.word	0x40023c00
 8004658:	40023800 	.word	0x40023800
 800465c:	0800aeb0 	.word	0x0800aeb0
 8004660:	20000000 	.word	0x20000000
 8004664:	20000028 	.word	0x20000028

08004668 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004668:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800466c:	b090      	sub	sp, #64	; 0x40
 800466e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004670:	2300      	movs	r3, #0
 8004672:	637b      	str	r3, [r7, #52]	; 0x34
 8004674:	2300      	movs	r3, #0
 8004676:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004678:	2300      	movs	r3, #0
 800467a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 800467c:	2300      	movs	r3, #0
 800467e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004680:	4b59      	ldr	r3, [pc, #356]	; (80047e8 <HAL_RCC_GetSysClockFreq+0x180>)
 8004682:	689b      	ldr	r3, [r3, #8]
 8004684:	f003 030c 	and.w	r3, r3, #12
 8004688:	2b08      	cmp	r3, #8
 800468a:	d00d      	beq.n	80046a8 <HAL_RCC_GetSysClockFreq+0x40>
 800468c:	2b08      	cmp	r3, #8
 800468e:	f200 80a1 	bhi.w	80047d4 <HAL_RCC_GetSysClockFreq+0x16c>
 8004692:	2b00      	cmp	r3, #0
 8004694:	d002      	beq.n	800469c <HAL_RCC_GetSysClockFreq+0x34>
 8004696:	2b04      	cmp	r3, #4
 8004698:	d003      	beq.n	80046a2 <HAL_RCC_GetSysClockFreq+0x3a>
 800469a:	e09b      	b.n	80047d4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800469c:	4b53      	ldr	r3, [pc, #332]	; (80047ec <HAL_RCC_GetSysClockFreq+0x184>)
 800469e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80046a0:	e09b      	b.n	80047da <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80046a2:	4b53      	ldr	r3, [pc, #332]	; (80047f0 <HAL_RCC_GetSysClockFreq+0x188>)
 80046a4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80046a6:	e098      	b.n	80047da <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80046a8:	4b4f      	ldr	r3, [pc, #316]	; (80047e8 <HAL_RCC_GetSysClockFreq+0x180>)
 80046aa:	685b      	ldr	r3, [r3, #4]
 80046ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80046b0:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80046b2:	4b4d      	ldr	r3, [pc, #308]	; (80047e8 <HAL_RCC_GetSysClockFreq+0x180>)
 80046b4:	685b      	ldr	r3, [r3, #4]
 80046b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d028      	beq.n	8004710 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80046be:	4b4a      	ldr	r3, [pc, #296]	; (80047e8 <HAL_RCC_GetSysClockFreq+0x180>)
 80046c0:	685b      	ldr	r3, [r3, #4]
 80046c2:	099b      	lsrs	r3, r3, #6
 80046c4:	2200      	movs	r2, #0
 80046c6:	623b      	str	r3, [r7, #32]
 80046c8:	627a      	str	r2, [r7, #36]	; 0x24
 80046ca:	6a3b      	ldr	r3, [r7, #32]
 80046cc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80046d0:	2100      	movs	r1, #0
 80046d2:	4b47      	ldr	r3, [pc, #284]	; (80047f0 <HAL_RCC_GetSysClockFreq+0x188>)
 80046d4:	fb03 f201 	mul.w	r2, r3, r1
 80046d8:	2300      	movs	r3, #0
 80046da:	fb00 f303 	mul.w	r3, r0, r3
 80046de:	4413      	add	r3, r2
 80046e0:	4a43      	ldr	r2, [pc, #268]	; (80047f0 <HAL_RCC_GetSysClockFreq+0x188>)
 80046e2:	fba0 1202 	umull	r1, r2, r0, r2
 80046e6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80046e8:	460a      	mov	r2, r1
 80046ea:	62ba      	str	r2, [r7, #40]	; 0x28
 80046ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80046ee:	4413      	add	r3, r2
 80046f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80046f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046f4:	2200      	movs	r2, #0
 80046f6:	61bb      	str	r3, [r7, #24]
 80046f8:	61fa      	str	r2, [r7, #28]
 80046fa:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80046fe:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8004702:	f7fb fdbd 	bl	8000280 <__aeabi_uldivmod>
 8004706:	4602      	mov	r2, r0
 8004708:	460b      	mov	r3, r1
 800470a:	4613      	mov	r3, r2
 800470c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800470e:	e053      	b.n	80047b8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004710:	4b35      	ldr	r3, [pc, #212]	; (80047e8 <HAL_RCC_GetSysClockFreq+0x180>)
 8004712:	685b      	ldr	r3, [r3, #4]
 8004714:	099b      	lsrs	r3, r3, #6
 8004716:	2200      	movs	r2, #0
 8004718:	613b      	str	r3, [r7, #16]
 800471a:	617a      	str	r2, [r7, #20]
 800471c:	693b      	ldr	r3, [r7, #16]
 800471e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004722:	f04f 0b00 	mov.w	fp, #0
 8004726:	4652      	mov	r2, sl
 8004728:	465b      	mov	r3, fp
 800472a:	f04f 0000 	mov.w	r0, #0
 800472e:	f04f 0100 	mov.w	r1, #0
 8004732:	0159      	lsls	r1, r3, #5
 8004734:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004738:	0150      	lsls	r0, r2, #5
 800473a:	4602      	mov	r2, r0
 800473c:	460b      	mov	r3, r1
 800473e:	ebb2 080a 	subs.w	r8, r2, sl
 8004742:	eb63 090b 	sbc.w	r9, r3, fp
 8004746:	f04f 0200 	mov.w	r2, #0
 800474a:	f04f 0300 	mov.w	r3, #0
 800474e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004752:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004756:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800475a:	ebb2 0408 	subs.w	r4, r2, r8
 800475e:	eb63 0509 	sbc.w	r5, r3, r9
 8004762:	f04f 0200 	mov.w	r2, #0
 8004766:	f04f 0300 	mov.w	r3, #0
 800476a:	00eb      	lsls	r3, r5, #3
 800476c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004770:	00e2      	lsls	r2, r4, #3
 8004772:	4614      	mov	r4, r2
 8004774:	461d      	mov	r5, r3
 8004776:	eb14 030a 	adds.w	r3, r4, sl
 800477a:	603b      	str	r3, [r7, #0]
 800477c:	eb45 030b 	adc.w	r3, r5, fp
 8004780:	607b      	str	r3, [r7, #4]
 8004782:	f04f 0200 	mov.w	r2, #0
 8004786:	f04f 0300 	mov.w	r3, #0
 800478a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800478e:	4629      	mov	r1, r5
 8004790:	028b      	lsls	r3, r1, #10
 8004792:	4621      	mov	r1, r4
 8004794:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004798:	4621      	mov	r1, r4
 800479a:	028a      	lsls	r2, r1, #10
 800479c:	4610      	mov	r0, r2
 800479e:	4619      	mov	r1, r3
 80047a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047a2:	2200      	movs	r2, #0
 80047a4:	60bb      	str	r3, [r7, #8]
 80047a6:	60fa      	str	r2, [r7, #12]
 80047a8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80047ac:	f7fb fd68 	bl	8000280 <__aeabi_uldivmod>
 80047b0:	4602      	mov	r2, r0
 80047b2:	460b      	mov	r3, r1
 80047b4:	4613      	mov	r3, r2
 80047b6:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80047b8:	4b0b      	ldr	r3, [pc, #44]	; (80047e8 <HAL_RCC_GetSysClockFreq+0x180>)
 80047ba:	685b      	ldr	r3, [r3, #4]
 80047bc:	0c1b      	lsrs	r3, r3, #16
 80047be:	f003 0303 	and.w	r3, r3, #3
 80047c2:	3301      	adds	r3, #1
 80047c4:	005b      	lsls	r3, r3, #1
 80047c6:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80047c8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80047ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80047d0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80047d2:	e002      	b.n	80047da <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80047d4:	4b05      	ldr	r3, [pc, #20]	; (80047ec <HAL_RCC_GetSysClockFreq+0x184>)
 80047d6:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80047d8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80047da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80047dc:	4618      	mov	r0, r3
 80047de:	3740      	adds	r7, #64	; 0x40
 80047e0:	46bd      	mov	sp, r7
 80047e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80047e6:	bf00      	nop
 80047e8:	40023800 	.word	0x40023800
 80047ec:	00f42400 	.word	0x00f42400
 80047f0:	017d7840 	.word	0x017d7840

080047f4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80047f4:	b480      	push	{r7}
 80047f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80047f8:	4b03      	ldr	r3, [pc, #12]	; (8004808 <HAL_RCC_GetHCLKFreq+0x14>)
 80047fa:	681b      	ldr	r3, [r3, #0]
}
 80047fc:	4618      	mov	r0, r3
 80047fe:	46bd      	mov	sp, r7
 8004800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004804:	4770      	bx	lr
 8004806:	bf00      	nop
 8004808:	20000000 	.word	0x20000000

0800480c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800480c:	b580      	push	{r7, lr}
 800480e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004810:	f7ff fff0 	bl	80047f4 <HAL_RCC_GetHCLKFreq>
 8004814:	4602      	mov	r2, r0
 8004816:	4b05      	ldr	r3, [pc, #20]	; (800482c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004818:	689b      	ldr	r3, [r3, #8]
 800481a:	0a9b      	lsrs	r3, r3, #10
 800481c:	f003 0307 	and.w	r3, r3, #7
 8004820:	4903      	ldr	r1, [pc, #12]	; (8004830 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004822:	5ccb      	ldrb	r3, [r1, r3]
 8004824:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004828:	4618      	mov	r0, r3
 800482a:	bd80      	pop	{r7, pc}
 800482c:	40023800 	.word	0x40023800
 8004830:	0800aec0 	.word	0x0800aec0

08004834 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004834:	b580      	push	{r7, lr}
 8004836:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004838:	f7ff ffdc 	bl	80047f4 <HAL_RCC_GetHCLKFreq>
 800483c:	4602      	mov	r2, r0
 800483e:	4b05      	ldr	r3, [pc, #20]	; (8004854 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004840:	689b      	ldr	r3, [r3, #8]
 8004842:	0b5b      	lsrs	r3, r3, #13
 8004844:	f003 0307 	and.w	r3, r3, #7
 8004848:	4903      	ldr	r1, [pc, #12]	; (8004858 <HAL_RCC_GetPCLK2Freq+0x24>)
 800484a:	5ccb      	ldrb	r3, [r1, r3]
 800484c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004850:	4618      	mov	r0, r3
 8004852:	bd80      	pop	{r7, pc}
 8004854:	40023800 	.word	0x40023800
 8004858:	0800aec0 	.word	0x0800aec0

0800485c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800485c:	b580      	push	{r7, lr}
 800485e:	b086      	sub	sp, #24
 8004860:	af00      	add	r7, sp, #0
 8004862:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004864:	2300      	movs	r3, #0
 8004866:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004868:	2300      	movs	r3, #0
 800486a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f003 0301 	and.w	r3, r3, #1
 8004874:	2b00      	cmp	r3, #0
 8004876:	d105      	bne.n	8004884 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004880:	2b00      	cmp	r3, #0
 8004882:	d038      	beq.n	80048f6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004884:	4b68      	ldr	r3, [pc, #416]	; (8004a28 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004886:	2200      	movs	r2, #0
 8004888:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800488a:	f7fc feb5 	bl	80015f8 <HAL_GetTick>
 800488e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004890:	e008      	b.n	80048a4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004892:	f7fc feb1 	bl	80015f8 <HAL_GetTick>
 8004896:	4602      	mov	r2, r0
 8004898:	697b      	ldr	r3, [r7, #20]
 800489a:	1ad3      	subs	r3, r2, r3
 800489c:	2b02      	cmp	r3, #2
 800489e:	d901      	bls.n	80048a4 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80048a0:	2303      	movs	r3, #3
 80048a2:	e0bd      	b.n	8004a20 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80048a4:	4b61      	ldr	r3, [pc, #388]	; (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d1f0      	bne.n	8004892 <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	685a      	ldr	r2, [r3, #4]
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	689b      	ldr	r3, [r3, #8]
 80048b8:	019b      	lsls	r3, r3, #6
 80048ba:	431a      	orrs	r2, r3
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	68db      	ldr	r3, [r3, #12]
 80048c0:	071b      	lsls	r3, r3, #28
 80048c2:	495a      	ldr	r1, [pc, #360]	; (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80048c4:	4313      	orrs	r3, r2
 80048c6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80048ca:	4b57      	ldr	r3, [pc, #348]	; (8004a28 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80048cc:	2201      	movs	r2, #1
 80048ce:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80048d0:	f7fc fe92 	bl	80015f8 <HAL_GetTick>
 80048d4:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80048d6:	e008      	b.n	80048ea <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80048d8:	f7fc fe8e 	bl	80015f8 <HAL_GetTick>
 80048dc:	4602      	mov	r2, r0
 80048de:	697b      	ldr	r3, [r7, #20]
 80048e0:	1ad3      	subs	r3, r2, r3
 80048e2:	2b02      	cmp	r3, #2
 80048e4:	d901      	bls.n	80048ea <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80048e6:	2303      	movs	r3, #3
 80048e8:	e09a      	b.n	8004a20 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80048ea:	4b50      	ldr	r3, [pc, #320]	; (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d0f0      	beq.n	80048d8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f003 0302 	and.w	r3, r3, #2
 80048fe:	2b00      	cmp	r3, #0
 8004900:	f000 8083 	beq.w	8004a0a <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004904:	2300      	movs	r3, #0
 8004906:	60fb      	str	r3, [r7, #12]
 8004908:	4b48      	ldr	r3, [pc, #288]	; (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800490a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800490c:	4a47      	ldr	r2, [pc, #284]	; (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800490e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004912:	6413      	str	r3, [r2, #64]	; 0x40
 8004914:	4b45      	ldr	r3, [pc, #276]	; (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004916:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004918:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800491c:	60fb      	str	r3, [r7, #12]
 800491e:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004920:	4b43      	ldr	r3, [pc, #268]	; (8004a30 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	4a42      	ldr	r2, [pc, #264]	; (8004a30 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004926:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800492a:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800492c:	f7fc fe64 	bl	80015f8 <HAL_GetTick>
 8004930:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004932:	e008      	b.n	8004946 <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004934:	f7fc fe60 	bl	80015f8 <HAL_GetTick>
 8004938:	4602      	mov	r2, r0
 800493a:	697b      	ldr	r3, [r7, #20]
 800493c:	1ad3      	subs	r3, r2, r3
 800493e:	2b02      	cmp	r3, #2
 8004940:	d901      	bls.n	8004946 <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 8004942:	2303      	movs	r3, #3
 8004944:	e06c      	b.n	8004a20 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004946:	4b3a      	ldr	r3, [pc, #232]	; (8004a30 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800494e:	2b00      	cmp	r3, #0
 8004950:	d0f0      	beq.n	8004934 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004952:	4b36      	ldr	r3, [pc, #216]	; (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004954:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004956:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800495a:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800495c:	693b      	ldr	r3, [r7, #16]
 800495e:	2b00      	cmp	r3, #0
 8004960:	d02f      	beq.n	80049c2 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	691b      	ldr	r3, [r3, #16]
 8004966:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800496a:	693a      	ldr	r2, [r7, #16]
 800496c:	429a      	cmp	r2, r3
 800496e:	d028      	beq.n	80049c2 <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004970:	4b2e      	ldr	r3, [pc, #184]	; (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004972:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004974:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004978:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800497a:	4b2e      	ldr	r3, [pc, #184]	; (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800497c:	2201      	movs	r2, #1
 800497e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004980:	4b2c      	ldr	r3, [pc, #176]	; (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004982:	2200      	movs	r2, #0
 8004984:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004986:	4a29      	ldr	r2, [pc, #164]	; (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004988:	693b      	ldr	r3, [r7, #16]
 800498a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800498c:	4b27      	ldr	r3, [pc, #156]	; (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800498e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004990:	f003 0301 	and.w	r3, r3, #1
 8004994:	2b01      	cmp	r3, #1
 8004996:	d114      	bne.n	80049c2 <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004998:	f7fc fe2e 	bl	80015f8 <HAL_GetTick>
 800499c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800499e:	e00a      	b.n	80049b6 <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80049a0:	f7fc fe2a 	bl	80015f8 <HAL_GetTick>
 80049a4:	4602      	mov	r2, r0
 80049a6:	697b      	ldr	r3, [r7, #20]
 80049a8:	1ad3      	subs	r3, r2, r3
 80049aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80049ae:	4293      	cmp	r3, r2
 80049b0:	d901      	bls.n	80049b6 <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 80049b2:	2303      	movs	r3, #3
 80049b4:	e034      	b.n	8004a20 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80049b6:	4b1d      	ldr	r3, [pc, #116]	; (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80049b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049ba:	f003 0302 	and.w	r3, r3, #2
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d0ee      	beq.n	80049a0 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	691b      	ldr	r3, [r3, #16]
 80049c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80049ca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80049ce:	d10d      	bne.n	80049ec <HAL_RCCEx_PeriphCLKConfig+0x190>
 80049d0:	4b16      	ldr	r3, [pc, #88]	; (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80049d2:	689b      	ldr	r3, [r3, #8]
 80049d4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	691b      	ldr	r3, [r3, #16]
 80049dc:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80049e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80049e4:	4911      	ldr	r1, [pc, #68]	; (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80049e6:	4313      	orrs	r3, r2
 80049e8:	608b      	str	r3, [r1, #8]
 80049ea:	e005      	b.n	80049f8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 80049ec:	4b0f      	ldr	r3, [pc, #60]	; (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80049ee:	689b      	ldr	r3, [r3, #8]
 80049f0:	4a0e      	ldr	r2, [pc, #56]	; (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80049f2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80049f6:	6093      	str	r3, [r2, #8]
 80049f8:	4b0c      	ldr	r3, [pc, #48]	; (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80049fa:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	691b      	ldr	r3, [r3, #16]
 8004a00:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a04:	4909      	ldr	r1, [pc, #36]	; (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a06:	4313      	orrs	r3, r2
 8004a08:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f003 0308 	and.w	r3, r3, #8
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d003      	beq.n	8004a1e <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	7d1a      	ldrb	r2, [r3, #20]
 8004a1a:	4b07      	ldr	r3, [pc, #28]	; (8004a38 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8004a1c:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004a1e:	2300      	movs	r3, #0
}
 8004a20:	4618      	mov	r0, r3
 8004a22:	3718      	adds	r7, #24
 8004a24:	46bd      	mov	sp, r7
 8004a26:	bd80      	pop	{r7, pc}
 8004a28:	42470068 	.word	0x42470068
 8004a2c:	40023800 	.word	0x40023800
 8004a30:	40007000 	.word	0x40007000
 8004a34:	42470e40 	.word	0x42470e40
 8004a38:	424711e0 	.word	0x424711e0

08004a3c <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	b082      	sub	sp, #8
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d101      	bne.n	8004a4e <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8004a4a:	2301      	movs	r3, #1
 8004a4c:	e083      	b.n	8004b56 <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	7f5b      	ldrb	r3, [r3, #29]
 8004a52:	b2db      	uxtb	r3, r3
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d105      	bne.n	8004a64 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2200      	movs	r2, #0
 8004a5c:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8004a5e:	6878      	ldr	r0, [r7, #4]
 8004a60:	f7fc fb00 	bl	8001064 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2202      	movs	r2, #2
 8004a68:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	22ca      	movs	r2, #202	; 0xca
 8004a70:	625a      	str	r2, [r3, #36]	; 0x24
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	2253      	movs	r2, #83	; 0x53
 8004a78:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8004a7a:	6878      	ldr	r0, [r7, #4]
 8004a7c:	f000 f897 	bl	8004bae <RTC_EnterInitMode>
 8004a80:	4603      	mov	r3, r0
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d008      	beq.n	8004a98 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	22ff      	movs	r2, #255	; 0xff
 8004a8c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	2204      	movs	r2, #4
 8004a92:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8004a94:	2301      	movs	r3, #1
 8004a96:	e05e      	b.n	8004b56 <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	689b      	ldr	r3, [r3, #8]
 8004a9e:	687a      	ldr	r2, [r7, #4]
 8004aa0:	6812      	ldr	r2, [r2, #0]
 8004aa2:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8004aa6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004aaa:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	6899      	ldr	r1, [r3, #8]
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	685a      	ldr	r2, [r3, #4]
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	691b      	ldr	r3, [r3, #16]
 8004aba:	431a      	orrs	r2, r3
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	695b      	ldr	r3, [r3, #20]
 8004ac0:	431a      	orrs	r2, r3
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	430a      	orrs	r2, r1
 8004ac8:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	687a      	ldr	r2, [r7, #4]
 8004ad0:	68d2      	ldr	r2, [r2, #12]
 8004ad2:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	6919      	ldr	r1, [r3, #16]
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	689b      	ldr	r3, [r3, #8]
 8004ade:	041a      	lsls	r2, r3, #16
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	430a      	orrs	r2, r1
 8004ae6:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	68da      	ldr	r2, [r3, #12]
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004af6:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	689b      	ldr	r3, [r3, #8]
 8004afe:	f003 0320 	and.w	r3, r3, #32
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d10e      	bne.n	8004b24 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004b06:	6878      	ldr	r0, [r7, #4]
 8004b08:	f000 f829 	bl	8004b5e <HAL_RTC_WaitForSynchro>
 8004b0c:	4603      	mov	r3, r0
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d008      	beq.n	8004b24 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	22ff      	movs	r2, #255	; 0xff
 8004b18:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	2204      	movs	r2, #4
 8004b1e:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8004b20:	2301      	movs	r3, #1
 8004b22:	e018      	b.n	8004b56 <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004b32:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	699a      	ldr	r2, [r3, #24]
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	430a      	orrs	r2, r1
 8004b44:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	22ff      	movs	r2, #255	; 0xff
 8004b4c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	2201      	movs	r2, #1
 8004b52:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8004b54:	2300      	movs	r3, #0
  }
}
 8004b56:	4618      	mov	r0, r3
 8004b58:	3708      	adds	r7, #8
 8004b5a:	46bd      	mov	sp, r7
 8004b5c:	bd80      	pop	{r7, pc}

08004b5e <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8004b5e:	b580      	push	{r7, lr}
 8004b60:	b084      	sub	sp, #16
 8004b62:	af00      	add	r7, sp, #0
 8004b64:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004b66:	2300      	movs	r3, #0
 8004b68:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	68da      	ldr	r2, [r3, #12]
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004b78:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004b7a:	f7fc fd3d 	bl	80015f8 <HAL_GetTick>
 8004b7e:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8004b80:	e009      	b.n	8004b96 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8004b82:	f7fc fd39 	bl	80015f8 <HAL_GetTick>
 8004b86:	4602      	mov	r2, r0
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	1ad3      	subs	r3, r2, r3
 8004b8c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004b90:	d901      	bls.n	8004b96 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8004b92:	2303      	movs	r3, #3
 8004b94:	e007      	b.n	8004ba6 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	68db      	ldr	r3, [r3, #12]
 8004b9c:	f003 0320 	and.w	r3, r3, #32
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d0ee      	beq.n	8004b82 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8004ba4:	2300      	movs	r3, #0
}
 8004ba6:	4618      	mov	r0, r3
 8004ba8:	3710      	adds	r7, #16
 8004baa:	46bd      	mov	sp, r7
 8004bac:	bd80      	pop	{r7, pc}

08004bae <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8004bae:	b580      	push	{r7, lr}
 8004bb0:	b084      	sub	sp, #16
 8004bb2:	af00      	add	r7, sp, #0
 8004bb4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004bb6:	2300      	movs	r3, #0
 8004bb8:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	68db      	ldr	r3, [r3, #12]
 8004bc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d119      	bne.n	8004bfc <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f04f 32ff 	mov.w	r2, #4294967295
 8004bd0:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004bd2:	f7fc fd11 	bl	80015f8 <HAL_GetTick>
 8004bd6:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8004bd8:	e009      	b.n	8004bee <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8004bda:	f7fc fd0d 	bl	80015f8 <HAL_GetTick>
 8004bde:	4602      	mov	r2, r0
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	1ad3      	subs	r3, r2, r3
 8004be4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004be8:	d901      	bls.n	8004bee <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8004bea:	2303      	movs	r3, #3
 8004bec:	e007      	b.n	8004bfe <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	68db      	ldr	r3, [r3, #12]
 8004bf4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d0ee      	beq.n	8004bda <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8004bfc:	2300      	movs	r3, #0
}
 8004bfe:	4618      	mov	r0, r3
 8004c00:	3710      	adds	r7, #16
 8004c02:	46bd      	mov	sp, r7
 8004c04:	bd80      	pop	{r7, pc}

08004c06 <HAL_RTCEx_BKUPWrite>:
  *                                 specify the register.
  * @param  Data Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8004c06:	b480      	push	{r7}
 8004c08:	b087      	sub	sp, #28
 8004c0a:	af00      	add	r7, sp, #0
 8004c0c:	60f8      	str	r0, [r7, #12]
 8004c0e:	60b9      	str	r1, [r7, #8]
 8004c10:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 8004c12:	2300      	movs	r3, #0
 8004c14:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	3350      	adds	r3, #80	; 0x50
 8004c1c:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 8004c1e:	68bb      	ldr	r3, [r7, #8]
 8004c20:	009b      	lsls	r3, r3, #2
 8004c22:	697a      	ldr	r2, [r7, #20]
 8004c24:	4413      	add	r3, r2
 8004c26:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8004c28:	697b      	ldr	r3, [r7, #20]
 8004c2a:	687a      	ldr	r2, [r7, #4]
 8004c2c:	601a      	str	r2, [r3, #0]
}
 8004c2e:	bf00      	nop
 8004c30:	371c      	adds	r7, #28
 8004c32:	46bd      	mov	sp, r7
 8004c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c38:	4770      	bx	lr

08004c3a <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx where x can be from 0 to 19 to
  *                                 specify the register.
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 8004c3a:	b480      	push	{r7}
 8004c3c:	b085      	sub	sp, #20
 8004c3e:	af00      	add	r7, sp, #0
 8004c40:	6078      	str	r0, [r7, #4]
 8004c42:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0U;
 8004c44:	2300      	movs	r3, #0
 8004c46:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	3350      	adds	r3, #80	; 0x50
 8004c4e:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 8004c50:	683b      	ldr	r3, [r7, #0]
 8004c52:	009b      	lsls	r3, r3, #2
 8004c54:	68fa      	ldr	r2, [r7, #12]
 8004c56:	4413      	add	r3, r2
 8004c58:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	681b      	ldr	r3, [r3, #0]
}
 8004c5e:	4618      	mov	r0, r3
 8004c60:	3714      	adds	r7, #20
 8004c62:	46bd      	mov	sp, r7
 8004c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c68:	4770      	bx	lr

08004c6a <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004c6a:	b580      	push	{r7, lr}
 8004c6c:	b082      	sub	sp, #8
 8004c6e:	af00      	add	r7, sp, #0
 8004c70:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d101      	bne.n	8004c7c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004c78:	2301      	movs	r3, #1
 8004c7a:	e03f      	b.n	8004cfc <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c82:	b2db      	uxtb	r3, r3
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d106      	bne.n	8004c96 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004c90:	6878      	ldr	r0, [r7, #4]
 8004c92:	f7fc fb55 	bl	8001340 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	2224      	movs	r2, #36	; 0x24
 8004c9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	68da      	ldr	r2, [r3, #12]
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004cac:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004cae:	6878      	ldr	r0, [r7, #4]
 8004cb0:	f000 ff8a 	bl	8005bc8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	691a      	ldr	r2, [r3, #16]
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004cc2:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	695a      	ldr	r2, [r3, #20]
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004cd2:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	68da      	ldr	r2, [r3, #12]
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004ce2:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	2220      	movs	r2, #32
 8004cee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	2220      	movs	r2, #32
 8004cf6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004cfa:	2300      	movs	r3, #0
}
 8004cfc:	4618      	mov	r0, r3
 8004cfe:	3708      	adds	r7, #8
 8004d00:	46bd      	mov	sp, r7
 8004d02:	bd80      	pop	{r7, pc}

08004d04 <HAL_UART_DeInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8004d04:	b580      	push	{r7, lr}
 8004d06:	b082      	sub	sp, #8
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d101      	bne.n	8004d16 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8004d12:	2301      	movs	r3, #1
 8004d14:	e021      	b.n	8004d5a <HAL_UART_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	2224      	movs	r2, #36	; 0x24
 8004d1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	68da      	ldr	r2, [r3, #12]
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004d2c:	60da      	str	r2, [r3, #12]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8004d2e:	6878      	ldr	r0, [r7, #4]
 8004d30:	f7fc fb8a 	bl	8001448 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	2200      	movs	r2, #0
 8004d38:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_RESET;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	2200      	movs	r2, #0
 8004d3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_RESET;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	2200      	movs	r2, #0
 8004d46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	2200      	movs	r2, #0
 8004d4e:	631a      	str	r2, [r3, #48]	; 0x30

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2200      	movs	r2, #0
 8004d54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004d58:	2300      	movs	r3, #0
}
 8004d5a:	4618      	mov	r0, r3
 8004d5c:	3708      	adds	r7, #8
 8004d5e:	46bd      	mov	sp, r7
 8004d60:	bd80      	pop	{r7, pc}

08004d62 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d62:	b580      	push	{r7, lr}
 8004d64:	b08a      	sub	sp, #40	; 0x28
 8004d66:	af02      	add	r7, sp, #8
 8004d68:	60f8      	str	r0, [r7, #12]
 8004d6a:	60b9      	str	r1, [r7, #8]
 8004d6c:	603b      	str	r3, [r7, #0]
 8004d6e:	4613      	mov	r3, r2
 8004d70:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004d72:	2300      	movs	r3, #0
 8004d74:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d7c:	b2db      	uxtb	r3, r3
 8004d7e:	2b20      	cmp	r3, #32
 8004d80:	d17c      	bne.n	8004e7c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004d82:	68bb      	ldr	r3, [r7, #8]
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d002      	beq.n	8004d8e <HAL_UART_Transmit+0x2c>
 8004d88:	88fb      	ldrh	r3, [r7, #6]
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d101      	bne.n	8004d92 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004d8e:	2301      	movs	r3, #1
 8004d90:	e075      	b.n	8004e7e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d98:	2b01      	cmp	r3, #1
 8004d9a:	d101      	bne.n	8004da0 <HAL_UART_Transmit+0x3e>
 8004d9c:	2302      	movs	r3, #2
 8004d9e:	e06e      	b.n	8004e7e <HAL_UART_Transmit+0x11c>
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	2201      	movs	r2, #1
 8004da4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	2200      	movs	r2, #0
 8004dac:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	2221      	movs	r2, #33	; 0x21
 8004db2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004db6:	f7fc fc1f 	bl	80015f8 <HAL_GetTick>
 8004dba:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	88fa      	ldrh	r2, [r7, #6]
 8004dc0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	88fa      	ldrh	r2, [r7, #6]
 8004dc6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	689b      	ldr	r3, [r3, #8]
 8004dcc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004dd0:	d108      	bne.n	8004de4 <HAL_UART_Transmit+0x82>
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	691b      	ldr	r3, [r3, #16]
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d104      	bne.n	8004de4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004dda:	2300      	movs	r3, #0
 8004ddc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004dde:	68bb      	ldr	r3, [r7, #8]
 8004de0:	61bb      	str	r3, [r7, #24]
 8004de2:	e003      	b.n	8004dec <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004de4:	68bb      	ldr	r3, [r7, #8]
 8004de6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004de8:	2300      	movs	r3, #0
 8004dea:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	2200      	movs	r2, #0
 8004df0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004df4:	e02a      	b.n	8004e4c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004df6:	683b      	ldr	r3, [r7, #0]
 8004df8:	9300      	str	r3, [sp, #0]
 8004dfa:	697b      	ldr	r3, [r7, #20]
 8004dfc:	2200      	movs	r2, #0
 8004dfe:	2180      	movs	r1, #128	; 0x80
 8004e00:	68f8      	ldr	r0, [r7, #12]
 8004e02:	f000 fc17 	bl	8005634 <UART_WaitOnFlagUntilTimeout>
 8004e06:	4603      	mov	r3, r0
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d001      	beq.n	8004e10 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004e0c:	2303      	movs	r3, #3
 8004e0e:	e036      	b.n	8004e7e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004e10:	69fb      	ldr	r3, [r7, #28]
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d10b      	bne.n	8004e2e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004e16:	69bb      	ldr	r3, [r7, #24]
 8004e18:	881b      	ldrh	r3, [r3, #0]
 8004e1a:	461a      	mov	r2, r3
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004e24:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004e26:	69bb      	ldr	r3, [r7, #24]
 8004e28:	3302      	adds	r3, #2
 8004e2a:	61bb      	str	r3, [r7, #24]
 8004e2c:	e007      	b.n	8004e3e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004e2e:	69fb      	ldr	r3, [r7, #28]
 8004e30:	781a      	ldrb	r2, [r3, #0]
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004e38:	69fb      	ldr	r3, [r7, #28]
 8004e3a:	3301      	adds	r3, #1
 8004e3c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004e42:	b29b      	uxth	r3, r3
 8004e44:	3b01      	subs	r3, #1
 8004e46:	b29a      	uxth	r2, r3
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004e50:	b29b      	uxth	r3, r3
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d1cf      	bne.n	8004df6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004e56:	683b      	ldr	r3, [r7, #0]
 8004e58:	9300      	str	r3, [sp, #0]
 8004e5a:	697b      	ldr	r3, [r7, #20]
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	2140      	movs	r1, #64	; 0x40
 8004e60:	68f8      	ldr	r0, [r7, #12]
 8004e62:	f000 fbe7 	bl	8005634 <UART_WaitOnFlagUntilTimeout>
 8004e66:	4603      	mov	r3, r0
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d001      	beq.n	8004e70 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004e6c:	2303      	movs	r3, #3
 8004e6e:	e006      	b.n	8004e7e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	2220      	movs	r2, #32
 8004e74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004e78:	2300      	movs	r3, #0
 8004e7a:	e000      	b.n	8004e7e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004e7c:	2302      	movs	r3, #2
  }
}
 8004e7e:	4618      	mov	r0, r3
 8004e80:	3720      	adds	r7, #32
 8004e82:	46bd      	mov	sp, r7
 8004e84:	bd80      	pop	{r7, pc}

08004e86 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004e86:	b580      	push	{r7, lr}
 8004e88:	b084      	sub	sp, #16
 8004e8a:	af00      	add	r7, sp, #0
 8004e8c:	60f8      	str	r0, [r7, #12]
 8004e8e:	60b9      	str	r1, [r7, #8]
 8004e90:	4613      	mov	r3, r2
 8004e92:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004e9a:	b2db      	uxtb	r3, r3
 8004e9c:	2b20      	cmp	r3, #32
 8004e9e:	d11d      	bne.n	8004edc <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8004ea0:	68bb      	ldr	r3, [r7, #8]
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d002      	beq.n	8004eac <HAL_UART_Receive_DMA+0x26>
 8004ea6:	88fb      	ldrh	r3, [r7, #6]
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d101      	bne.n	8004eb0 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8004eac:	2301      	movs	r3, #1
 8004eae:	e016      	b.n	8004ede <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004eb6:	2b01      	cmp	r3, #1
 8004eb8:	d101      	bne.n	8004ebe <HAL_UART_Receive_DMA+0x38>
 8004eba:	2302      	movs	r3, #2
 8004ebc:	e00f      	b.n	8004ede <HAL_UART_Receive_DMA+0x58>
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	2201      	movs	r2, #1
 8004ec2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	2200      	movs	r2, #0
 8004eca:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8004ecc:	88fb      	ldrh	r3, [r7, #6]
 8004ece:	461a      	mov	r2, r3
 8004ed0:	68b9      	ldr	r1, [r7, #8]
 8004ed2:	68f8      	ldr	r0, [r7, #12]
 8004ed4:	f000 fc1c 	bl	8005710 <UART_Start_Receive_DMA>
 8004ed8:	4603      	mov	r3, r0
 8004eda:	e000      	b.n	8004ede <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8004edc:	2302      	movs	r3, #2
  }
}
 8004ede:	4618      	mov	r0, r3
 8004ee0:	3710      	adds	r7, #16
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	bd80      	pop	{r7, pc}
	...

08004ee8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004ee8:	b580      	push	{r7, lr}
 8004eea:	b0ba      	sub	sp, #232	; 0xe8
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	68db      	ldr	r3, [r3, #12]
 8004f00:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	695b      	ldr	r3, [r3, #20]
 8004f0a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8004f0e:	2300      	movs	r3, #0
 8004f10:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004f14:	2300      	movs	r3, #0
 8004f16:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004f1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f1e:	f003 030f 	and.w	r3, r3, #15
 8004f22:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004f26:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d10f      	bne.n	8004f4e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004f2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f32:	f003 0320 	and.w	r3, r3, #32
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d009      	beq.n	8004f4e <HAL_UART_IRQHandler+0x66>
 8004f3a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f3e:	f003 0320 	and.w	r3, r3, #32
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d003      	beq.n	8004f4e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004f46:	6878      	ldr	r0, [r7, #4]
 8004f48:	f000 fd83 	bl	8005a52 <UART_Receive_IT>
      return;
 8004f4c:	e256      	b.n	80053fc <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004f4e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	f000 80de 	beq.w	8005114 <HAL_UART_IRQHandler+0x22c>
 8004f58:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004f5c:	f003 0301 	and.w	r3, r3, #1
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d106      	bne.n	8004f72 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004f64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f68:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	f000 80d1 	beq.w	8005114 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004f72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f76:	f003 0301 	and.w	r3, r3, #1
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d00b      	beq.n	8004f96 <HAL_UART_IRQHandler+0xae>
 8004f7e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d005      	beq.n	8004f96 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f8e:	f043 0201 	orr.w	r2, r3, #1
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004f96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f9a:	f003 0304 	and.w	r3, r3, #4
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d00b      	beq.n	8004fba <HAL_UART_IRQHandler+0xd2>
 8004fa2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004fa6:	f003 0301 	and.w	r3, r3, #1
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d005      	beq.n	8004fba <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fb2:	f043 0202 	orr.w	r2, r3, #2
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004fba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004fbe:	f003 0302 	and.w	r3, r3, #2
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d00b      	beq.n	8004fde <HAL_UART_IRQHandler+0xf6>
 8004fc6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004fca:	f003 0301 	and.w	r3, r3, #1
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d005      	beq.n	8004fde <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fd6:	f043 0204 	orr.w	r2, r3, #4
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004fde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004fe2:	f003 0308 	and.w	r3, r3, #8
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d011      	beq.n	800500e <HAL_UART_IRQHandler+0x126>
 8004fea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004fee:	f003 0320 	and.w	r3, r3, #32
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d105      	bne.n	8005002 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004ff6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004ffa:	f003 0301 	and.w	r3, r3, #1
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d005      	beq.n	800500e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005006:	f043 0208 	orr.w	r2, r3, #8
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005012:	2b00      	cmp	r3, #0
 8005014:	f000 81ed 	beq.w	80053f2 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005018:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800501c:	f003 0320 	and.w	r3, r3, #32
 8005020:	2b00      	cmp	r3, #0
 8005022:	d008      	beq.n	8005036 <HAL_UART_IRQHandler+0x14e>
 8005024:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005028:	f003 0320 	and.w	r3, r3, #32
 800502c:	2b00      	cmp	r3, #0
 800502e:	d002      	beq.n	8005036 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005030:	6878      	ldr	r0, [r7, #4]
 8005032:	f000 fd0e 	bl	8005a52 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	695b      	ldr	r3, [r3, #20]
 800503c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005040:	2b40      	cmp	r3, #64	; 0x40
 8005042:	bf0c      	ite	eq
 8005044:	2301      	moveq	r3, #1
 8005046:	2300      	movne	r3, #0
 8005048:	b2db      	uxtb	r3, r3
 800504a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005052:	f003 0308 	and.w	r3, r3, #8
 8005056:	2b00      	cmp	r3, #0
 8005058:	d103      	bne.n	8005062 <HAL_UART_IRQHandler+0x17a>
 800505a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800505e:	2b00      	cmp	r3, #0
 8005060:	d04f      	beq.n	8005102 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005062:	6878      	ldr	r0, [r7, #4]
 8005064:	f000 fc16 	bl	8005894 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	695b      	ldr	r3, [r3, #20]
 800506e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005072:	2b40      	cmp	r3, #64	; 0x40
 8005074:	d141      	bne.n	80050fa <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	3314      	adds	r3, #20
 800507c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005080:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005084:	e853 3f00 	ldrex	r3, [r3]
 8005088:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800508c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005090:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005094:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	3314      	adds	r3, #20
 800509e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80050a2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80050a6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050aa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80050ae:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80050b2:	e841 2300 	strex	r3, r2, [r1]
 80050b6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80050ba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d1d9      	bne.n	8005076 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d013      	beq.n	80050f2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050ce:	4a7d      	ldr	r2, [pc, #500]	; (80052c4 <HAL_UART_IRQHandler+0x3dc>)
 80050d0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050d6:	4618      	mov	r0, r3
 80050d8:	f7fc fdd6 	bl	8001c88 <HAL_DMA_Abort_IT>
 80050dc:	4603      	mov	r3, r0
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d016      	beq.n	8005110 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80050e8:	687a      	ldr	r2, [r7, #4]
 80050ea:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80050ec:	4610      	mov	r0, r2
 80050ee:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80050f0:	e00e      	b.n	8005110 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80050f2:	6878      	ldr	r0, [r7, #4]
 80050f4:	f7fc f910 	bl	8001318 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80050f8:	e00a      	b.n	8005110 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80050fa:	6878      	ldr	r0, [r7, #4]
 80050fc:	f7fc f90c 	bl	8001318 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005100:	e006      	b.n	8005110 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005102:	6878      	ldr	r0, [r7, #4]
 8005104:	f7fc f908 	bl	8001318 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2200      	movs	r2, #0
 800510c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800510e:	e170      	b.n	80053f2 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005110:	bf00      	nop
    return;
 8005112:	e16e      	b.n	80053f2 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005118:	2b01      	cmp	r3, #1
 800511a:	f040 814a 	bne.w	80053b2 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800511e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005122:	f003 0310 	and.w	r3, r3, #16
 8005126:	2b00      	cmp	r3, #0
 8005128:	f000 8143 	beq.w	80053b2 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800512c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005130:	f003 0310 	and.w	r3, r3, #16
 8005134:	2b00      	cmp	r3, #0
 8005136:	f000 813c 	beq.w	80053b2 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800513a:	2300      	movs	r3, #0
 800513c:	60bb      	str	r3, [r7, #8]
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	60bb      	str	r3, [r7, #8]
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	685b      	ldr	r3, [r3, #4]
 800514c:	60bb      	str	r3, [r7, #8]
 800514e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	695b      	ldr	r3, [r3, #20]
 8005156:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800515a:	2b40      	cmp	r3, #64	; 0x40
 800515c:	f040 80b4 	bne.w	80052c8 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	685b      	ldr	r3, [r3, #4]
 8005168:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800516c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005170:	2b00      	cmp	r3, #0
 8005172:	f000 8140 	beq.w	80053f6 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800517a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800517e:	429a      	cmp	r2, r3
 8005180:	f080 8139 	bcs.w	80053f6 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800518a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005190:	69db      	ldr	r3, [r3, #28]
 8005192:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005196:	f000 8088 	beq.w	80052aa <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	330c      	adds	r3, #12
 80051a0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051a4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80051a8:	e853 3f00 	ldrex	r3, [r3]
 80051ac:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80051b0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80051b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80051b8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	330c      	adds	r3, #12
 80051c2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80051c6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80051ca:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051ce:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80051d2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80051d6:	e841 2300 	strex	r3, r2, [r1]
 80051da:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80051de:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d1d9      	bne.n	800519a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	3314      	adds	r3, #20
 80051ec:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051ee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80051f0:	e853 3f00 	ldrex	r3, [r3]
 80051f4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80051f6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80051f8:	f023 0301 	bic.w	r3, r3, #1
 80051fc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	3314      	adds	r3, #20
 8005206:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800520a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800520e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005210:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005212:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005216:	e841 2300 	strex	r3, r2, [r1]
 800521a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800521c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800521e:	2b00      	cmp	r3, #0
 8005220:	d1e1      	bne.n	80051e6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	3314      	adds	r3, #20
 8005228:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800522a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800522c:	e853 3f00 	ldrex	r3, [r3]
 8005230:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005232:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005234:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005238:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	3314      	adds	r3, #20
 8005242:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005246:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005248:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800524a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800524c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800524e:	e841 2300 	strex	r3, r2, [r1]
 8005252:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005254:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005256:	2b00      	cmp	r3, #0
 8005258:	d1e3      	bne.n	8005222 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	2220      	movs	r2, #32
 800525e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	2200      	movs	r2, #0
 8005266:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	330c      	adds	r3, #12
 800526e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005270:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005272:	e853 3f00 	ldrex	r3, [r3]
 8005276:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005278:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800527a:	f023 0310 	bic.w	r3, r3, #16
 800527e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	330c      	adds	r3, #12
 8005288:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800528c:	65ba      	str	r2, [r7, #88]	; 0x58
 800528e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005290:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005292:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005294:	e841 2300 	strex	r3, r2, [r1]
 8005298:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800529a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800529c:	2b00      	cmp	r3, #0
 800529e:	d1e3      	bne.n	8005268 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052a4:	4618      	mov	r0, r3
 80052a6:	f7fc fc7f 	bl	8001ba8 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80052b2:	b29b      	uxth	r3, r3
 80052b4:	1ad3      	subs	r3, r2, r3
 80052b6:	b29b      	uxth	r3, r3
 80052b8:	4619      	mov	r1, r3
 80052ba:	6878      	ldr	r0, [r7, #4]
 80052bc:	f000 f8b6 	bl	800542c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80052c0:	e099      	b.n	80053f6 <HAL_UART_IRQHandler+0x50e>
 80052c2:	bf00      	nop
 80052c4:	0800595b 	.word	0x0800595b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80052d0:	b29b      	uxth	r3, r3
 80052d2:	1ad3      	subs	r3, r2, r3
 80052d4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80052dc:	b29b      	uxth	r3, r3
 80052de:	2b00      	cmp	r3, #0
 80052e0:	f000 808b 	beq.w	80053fa <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80052e4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	f000 8086 	beq.w	80053fa <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	330c      	adds	r3, #12
 80052f4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052f8:	e853 3f00 	ldrex	r3, [r3]
 80052fc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80052fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005300:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005304:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	330c      	adds	r3, #12
 800530e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005312:	647a      	str	r2, [r7, #68]	; 0x44
 8005314:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005316:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005318:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800531a:	e841 2300 	strex	r3, r2, [r1]
 800531e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005320:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005322:	2b00      	cmp	r3, #0
 8005324:	d1e3      	bne.n	80052ee <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	3314      	adds	r3, #20
 800532c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800532e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005330:	e853 3f00 	ldrex	r3, [r3]
 8005334:	623b      	str	r3, [r7, #32]
   return(result);
 8005336:	6a3b      	ldr	r3, [r7, #32]
 8005338:	f023 0301 	bic.w	r3, r3, #1
 800533c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	3314      	adds	r3, #20
 8005346:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800534a:	633a      	str	r2, [r7, #48]	; 0x30
 800534c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800534e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005350:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005352:	e841 2300 	strex	r3, r2, [r1]
 8005356:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005358:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800535a:	2b00      	cmp	r3, #0
 800535c:	d1e3      	bne.n	8005326 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	2220      	movs	r2, #32
 8005362:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	2200      	movs	r2, #0
 800536a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	330c      	adds	r3, #12
 8005372:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005374:	693b      	ldr	r3, [r7, #16]
 8005376:	e853 3f00 	ldrex	r3, [r3]
 800537a:	60fb      	str	r3, [r7, #12]
   return(result);
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	f023 0310 	bic.w	r3, r3, #16
 8005382:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	330c      	adds	r3, #12
 800538c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005390:	61fa      	str	r2, [r7, #28]
 8005392:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005394:	69b9      	ldr	r1, [r7, #24]
 8005396:	69fa      	ldr	r2, [r7, #28]
 8005398:	e841 2300 	strex	r3, r2, [r1]
 800539c:	617b      	str	r3, [r7, #20]
   return(result);
 800539e:	697b      	ldr	r3, [r7, #20]
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d1e3      	bne.n	800536c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80053a4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80053a8:	4619      	mov	r1, r3
 80053aa:	6878      	ldr	r0, [r7, #4]
 80053ac:	f000 f83e 	bl	800542c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80053b0:	e023      	b.n	80053fa <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80053b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80053b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d009      	beq.n	80053d2 <HAL_UART_IRQHandler+0x4ea>
 80053be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80053c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d003      	beq.n	80053d2 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80053ca:	6878      	ldr	r0, [r7, #4]
 80053cc:	f000 fad9 	bl	8005982 <UART_Transmit_IT>
    return;
 80053d0:	e014      	b.n	80053fc <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80053d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80053d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d00e      	beq.n	80053fc <HAL_UART_IRQHandler+0x514>
 80053de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80053e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d008      	beq.n	80053fc <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80053ea:	6878      	ldr	r0, [r7, #4]
 80053ec:	f000 fb19 	bl	8005a22 <UART_EndTransmit_IT>
    return;
 80053f0:	e004      	b.n	80053fc <HAL_UART_IRQHandler+0x514>
    return;
 80053f2:	bf00      	nop
 80053f4:	e002      	b.n	80053fc <HAL_UART_IRQHandler+0x514>
      return;
 80053f6:	bf00      	nop
 80053f8:	e000      	b.n	80053fc <HAL_UART_IRQHandler+0x514>
      return;
 80053fa:	bf00      	nop
  }
}
 80053fc:	37e8      	adds	r7, #232	; 0xe8
 80053fe:	46bd      	mov	sp, r7
 8005400:	bd80      	pop	{r7, pc}
 8005402:	bf00      	nop

08005404 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005404:	b480      	push	{r7}
 8005406:	b083      	sub	sp, #12
 8005408:	af00      	add	r7, sp, #0
 800540a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800540c:	bf00      	nop
 800540e:	370c      	adds	r7, #12
 8005410:	46bd      	mov	sp, r7
 8005412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005416:	4770      	bx	lr

08005418 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005418:	b480      	push	{r7}
 800541a:	b083      	sub	sp, #12
 800541c:	af00      	add	r7, sp, #0
 800541e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8005420:	bf00      	nop
 8005422:	370c      	adds	r7, #12
 8005424:	46bd      	mov	sp, r7
 8005426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542a:	4770      	bx	lr

0800542c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800542c:	b480      	push	{r7}
 800542e:	b083      	sub	sp, #12
 8005430:	af00      	add	r7, sp, #0
 8005432:	6078      	str	r0, [r7, #4]
 8005434:	460b      	mov	r3, r1
 8005436:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005438:	bf00      	nop
 800543a:	370c      	adds	r7, #12
 800543c:	46bd      	mov	sp, r7
 800543e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005442:	4770      	bx	lr

08005444 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005444:	b580      	push	{r7, lr}
 8005446:	b09c      	sub	sp, #112	; 0x70
 8005448:	af00      	add	r7, sp, #0
 800544a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005450:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800545c:	2b00      	cmp	r3, #0
 800545e:	d172      	bne.n	8005546 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8005460:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005462:	2200      	movs	r2, #0
 8005464:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005466:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	330c      	adds	r3, #12
 800546c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800546e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005470:	e853 3f00 	ldrex	r3, [r3]
 8005474:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005476:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005478:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800547c:	66bb      	str	r3, [r7, #104]	; 0x68
 800547e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	330c      	adds	r3, #12
 8005484:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005486:	65ba      	str	r2, [r7, #88]	; 0x58
 8005488:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800548a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800548c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800548e:	e841 2300 	strex	r3, r2, [r1]
 8005492:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005494:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005496:	2b00      	cmp	r3, #0
 8005498:	d1e5      	bne.n	8005466 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800549a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	3314      	adds	r3, #20
 80054a0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054a4:	e853 3f00 	ldrex	r3, [r3]
 80054a8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80054aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054ac:	f023 0301 	bic.w	r3, r3, #1
 80054b0:	667b      	str	r3, [r7, #100]	; 0x64
 80054b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	3314      	adds	r3, #20
 80054b8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80054ba:	647a      	str	r2, [r7, #68]	; 0x44
 80054bc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054be:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80054c0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80054c2:	e841 2300 	strex	r3, r2, [r1]
 80054c6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80054c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d1e5      	bne.n	800549a <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80054ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	3314      	adds	r3, #20
 80054d4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054d8:	e853 3f00 	ldrex	r3, [r3]
 80054dc:	623b      	str	r3, [r7, #32]
   return(result);
 80054de:	6a3b      	ldr	r3, [r7, #32]
 80054e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80054e4:	663b      	str	r3, [r7, #96]	; 0x60
 80054e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	3314      	adds	r3, #20
 80054ec:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80054ee:	633a      	str	r2, [r7, #48]	; 0x30
 80054f0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054f2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80054f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80054f6:	e841 2300 	strex	r3, r2, [r1]
 80054fa:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80054fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d1e5      	bne.n	80054ce <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005502:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005504:	2220      	movs	r2, #32
 8005506:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800550a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800550c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800550e:	2b01      	cmp	r3, #1
 8005510:	d119      	bne.n	8005546 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005512:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	330c      	adds	r3, #12
 8005518:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800551a:	693b      	ldr	r3, [r7, #16]
 800551c:	e853 3f00 	ldrex	r3, [r3]
 8005520:	60fb      	str	r3, [r7, #12]
   return(result);
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	f023 0310 	bic.w	r3, r3, #16
 8005528:	65fb      	str	r3, [r7, #92]	; 0x5c
 800552a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	330c      	adds	r3, #12
 8005530:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005532:	61fa      	str	r2, [r7, #28]
 8005534:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005536:	69b9      	ldr	r1, [r7, #24]
 8005538:	69fa      	ldr	r2, [r7, #28]
 800553a:	e841 2300 	strex	r3, r2, [r1]
 800553e:	617b      	str	r3, [r7, #20]
   return(result);
 8005540:	697b      	ldr	r3, [r7, #20]
 8005542:	2b00      	cmp	r3, #0
 8005544:	d1e5      	bne.n	8005512 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005546:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800554a:	2b01      	cmp	r3, #1
 800554c:	d106      	bne.n	800555c <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800554e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005550:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005552:	4619      	mov	r1, r3
 8005554:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005556:	f7ff ff69 	bl	800542c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800555a:	e002      	b.n	8005562 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 800555c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800555e:	f7fb fee5 	bl	800132c <HAL_UART_RxCpltCallback>
}
 8005562:	bf00      	nop
 8005564:	3770      	adds	r7, #112	; 0x70
 8005566:	46bd      	mov	sp, r7
 8005568:	bd80      	pop	{r7, pc}

0800556a <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800556a:	b580      	push	{r7, lr}
 800556c:	b084      	sub	sp, #16
 800556e:	af00      	add	r7, sp, #0
 8005570:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005576:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800557c:	2b01      	cmp	r3, #1
 800557e:	d108      	bne.n	8005592 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005584:	085b      	lsrs	r3, r3, #1
 8005586:	b29b      	uxth	r3, r3
 8005588:	4619      	mov	r1, r3
 800558a:	68f8      	ldr	r0, [r7, #12]
 800558c:	f7ff ff4e 	bl	800542c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005590:	e002      	b.n	8005598 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8005592:	68f8      	ldr	r0, [r7, #12]
 8005594:	f7ff ff40 	bl	8005418 <HAL_UART_RxHalfCpltCallback>
}
 8005598:	bf00      	nop
 800559a:	3710      	adds	r7, #16
 800559c:	46bd      	mov	sp, r7
 800559e:	bd80      	pop	{r7, pc}

080055a0 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80055a0:	b580      	push	{r7, lr}
 80055a2:	b084      	sub	sp, #16
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80055a8:	2300      	movs	r3, #0
 80055aa:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055b0:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80055b2:	68bb      	ldr	r3, [r7, #8]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	695b      	ldr	r3, [r3, #20]
 80055b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055bc:	2b80      	cmp	r3, #128	; 0x80
 80055be:	bf0c      	ite	eq
 80055c0:	2301      	moveq	r3, #1
 80055c2:	2300      	movne	r3, #0
 80055c4:	b2db      	uxtb	r3, r3
 80055c6:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80055c8:	68bb      	ldr	r3, [r7, #8]
 80055ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055ce:	b2db      	uxtb	r3, r3
 80055d0:	2b21      	cmp	r3, #33	; 0x21
 80055d2:	d108      	bne.n	80055e6 <UART_DMAError+0x46>
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d005      	beq.n	80055e6 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80055da:	68bb      	ldr	r3, [r7, #8]
 80055dc:	2200      	movs	r2, #0
 80055de:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80055e0:	68b8      	ldr	r0, [r7, #8]
 80055e2:	f000 f92f 	bl	8005844 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80055e6:	68bb      	ldr	r3, [r7, #8]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	695b      	ldr	r3, [r3, #20]
 80055ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055f0:	2b40      	cmp	r3, #64	; 0x40
 80055f2:	bf0c      	ite	eq
 80055f4:	2301      	moveq	r3, #1
 80055f6:	2300      	movne	r3, #0
 80055f8:	b2db      	uxtb	r3, r3
 80055fa:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80055fc:	68bb      	ldr	r3, [r7, #8]
 80055fe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005602:	b2db      	uxtb	r3, r3
 8005604:	2b22      	cmp	r3, #34	; 0x22
 8005606:	d108      	bne.n	800561a <UART_DMAError+0x7a>
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	2b00      	cmp	r3, #0
 800560c:	d005      	beq.n	800561a <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800560e:	68bb      	ldr	r3, [r7, #8]
 8005610:	2200      	movs	r2, #0
 8005612:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8005614:	68b8      	ldr	r0, [r7, #8]
 8005616:	f000 f93d 	bl	8005894 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800561a:	68bb      	ldr	r3, [r7, #8]
 800561c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800561e:	f043 0210 	orr.w	r2, r3, #16
 8005622:	68bb      	ldr	r3, [r7, #8]
 8005624:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005626:	68b8      	ldr	r0, [r7, #8]
 8005628:	f7fb fe76 	bl	8001318 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800562c:	bf00      	nop
 800562e:	3710      	adds	r7, #16
 8005630:	46bd      	mov	sp, r7
 8005632:	bd80      	pop	{r7, pc}

08005634 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005634:	b580      	push	{r7, lr}
 8005636:	b090      	sub	sp, #64	; 0x40
 8005638:	af00      	add	r7, sp, #0
 800563a:	60f8      	str	r0, [r7, #12]
 800563c:	60b9      	str	r1, [r7, #8]
 800563e:	603b      	str	r3, [r7, #0]
 8005640:	4613      	mov	r3, r2
 8005642:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005644:	e050      	b.n	80056e8 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005646:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005648:	f1b3 3fff 	cmp.w	r3, #4294967295
 800564c:	d04c      	beq.n	80056e8 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800564e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005650:	2b00      	cmp	r3, #0
 8005652:	d007      	beq.n	8005664 <UART_WaitOnFlagUntilTimeout+0x30>
 8005654:	f7fb ffd0 	bl	80015f8 <HAL_GetTick>
 8005658:	4602      	mov	r2, r0
 800565a:	683b      	ldr	r3, [r7, #0]
 800565c:	1ad3      	subs	r3, r2, r3
 800565e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005660:	429a      	cmp	r2, r3
 8005662:	d241      	bcs.n	80056e8 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	330c      	adds	r3, #12
 800566a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800566c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800566e:	e853 3f00 	ldrex	r3, [r3]
 8005672:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005676:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800567a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	330c      	adds	r3, #12
 8005682:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005684:	637a      	str	r2, [r7, #52]	; 0x34
 8005686:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005688:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800568a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800568c:	e841 2300 	strex	r3, r2, [r1]
 8005690:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005692:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005694:	2b00      	cmp	r3, #0
 8005696:	d1e5      	bne.n	8005664 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	3314      	adds	r3, #20
 800569e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056a0:	697b      	ldr	r3, [r7, #20]
 80056a2:	e853 3f00 	ldrex	r3, [r3]
 80056a6:	613b      	str	r3, [r7, #16]
   return(result);
 80056a8:	693b      	ldr	r3, [r7, #16]
 80056aa:	f023 0301 	bic.w	r3, r3, #1
 80056ae:	63bb      	str	r3, [r7, #56]	; 0x38
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	3314      	adds	r3, #20
 80056b6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80056b8:	623a      	str	r2, [r7, #32]
 80056ba:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056bc:	69f9      	ldr	r1, [r7, #28]
 80056be:	6a3a      	ldr	r2, [r7, #32]
 80056c0:	e841 2300 	strex	r3, r2, [r1]
 80056c4:	61bb      	str	r3, [r7, #24]
   return(result);
 80056c6:	69bb      	ldr	r3, [r7, #24]
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d1e5      	bne.n	8005698 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	2220      	movs	r2, #32
 80056d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	2220      	movs	r2, #32
 80056d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	2200      	movs	r2, #0
 80056e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80056e4:	2303      	movs	r3, #3
 80056e6:	e00f      	b.n	8005708 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	681a      	ldr	r2, [r3, #0]
 80056ee:	68bb      	ldr	r3, [r7, #8]
 80056f0:	4013      	ands	r3, r2
 80056f2:	68ba      	ldr	r2, [r7, #8]
 80056f4:	429a      	cmp	r2, r3
 80056f6:	bf0c      	ite	eq
 80056f8:	2301      	moveq	r3, #1
 80056fa:	2300      	movne	r3, #0
 80056fc:	b2db      	uxtb	r3, r3
 80056fe:	461a      	mov	r2, r3
 8005700:	79fb      	ldrb	r3, [r7, #7]
 8005702:	429a      	cmp	r2, r3
 8005704:	d09f      	beq.n	8005646 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005706:	2300      	movs	r3, #0
}
 8005708:	4618      	mov	r0, r3
 800570a:	3740      	adds	r7, #64	; 0x40
 800570c:	46bd      	mov	sp, r7
 800570e:	bd80      	pop	{r7, pc}

08005710 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005710:	b580      	push	{r7, lr}
 8005712:	b098      	sub	sp, #96	; 0x60
 8005714:	af00      	add	r7, sp, #0
 8005716:	60f8      	str	r0, [r7, #12]
 8005718:	60b9      	str	r1, [r7, #8]
 800571a:	4613      	mov	r3, r2
 800571c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800571e:	68ba      	ldr	r2, [r7, #8]
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	88fa      	ldrh	r2, [r7, #6]
 8005728:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	2200      	movs	r2, #0
 800572e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	2222      	movs	r2, #34	; 0x22
 8005734:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800573c:	4a3e      	ldr	r2, [pc, #248]	; (8005838 <UART_Start_Receive_DMA+0x128>)
 800573e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005744:	4a3d      	ldr	r2, [pc, #244]	; (800583c <UART_Start_Receive_DMA+0x12c>)
 8005746:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800574c:	4a3c      	ldr	r2, [pc, #240]	; (8005840 <UART_Start_Receive_DMA+0x130>)
 800574e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005754:	2200      	movs	r2, #0
 8005756:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8005758:	f107 0308 	add.w	r3, r7, #8
 800575c:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	3304      	adds	r3, #4
 8005768:	4619      	mov	r1, r3
 800576a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800576c:	681a      	ldr	r2, [r3, #0]
 800576e:	88fb      	ldrh	r3, [r7, #6]
 8005770:	f7fc f9c2 	bl	8001af8 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8005774:	2300      	movs	r3, #0
 8005776:	613b      	str	r3, [r7, #16]
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	613b      	str	r3, [r7, #16]
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	685b      	ldr	r3, [r3, #4]
 8005786:	613b      	str	r3, [r7, #16]
 8005788:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	2200      	movs	r2, #0
 800578e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	330c      	adds	r3, #12
 8005798:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800579a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800579c:	e853 3f00 	ldrex	r3, [r3]
 80057a0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80057a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80057a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80057a8:	65bb      	str	r3, [r7, #88]	; 0x58
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	330c      	adds	r3, #12
 80057b0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80057b2:	64fa      	str	r2, [r7, #76]	; 0x4c
 80057b4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057b6:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80057b8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80057ba:	e841 2300 	strex	r3, r2, [r1]
 80057be:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80057c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d1e5      	bne.n	8005792 <UART_Start_Receive_DMA+0x82>

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	3314      	adds	r3, #20
 80057cc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057d0:	e853 3f00 	ldrex	r3, [r3]
 80057d4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80057d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057d8:	f043 0301 	orr.w	r3, r3, #1
 80057dc:	657b      	str	r3, [r7, #84]	; 0x54
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	3314      	adds	r3, #20
 80057e4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80057e6:	63ba      	str	r2, [r7, #56]	; 0x38
 80057e8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057ea:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80057ec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80057ee:	e841 2300 	strex	r3, r2, [r1]
 80057f2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80057f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d1e5      	bne.n	80057c6 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	3314      	adds	r3, #20
 8005800:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005802:	69bb      	ldr	r3, [r7, #24]
 8005804:	e853 3f00 	ldrex	r3, [r3]
 8005808:	617b      	str	r3, [r7, #20]
   return(result);
 800580a:	697b      	ldr	r3, [r7, #20]
 800580c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005810:	653b      	str	r3, [r7, #80]	; 0x50
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	3314      	adds	r3, #20
 8005818:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800581a:	627a      	str	r2, [r7, #36]	; 0x24
 800581c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800581e:	6a39      	ldr	r1, [r7, #32]
 8005820:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005822:	e841 2300 	strex	r3, r2, [r1]
 8005826:	61fb      	str	r3, [r7, #28]
   return(result);
 8005828:	69fb      	ldr	r3, [r7, #28]
 800582a:	2b00      	cmp	r3, #0
 800582c:	d1e5      	bne.n	80057fa <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 800582e:	2300      	movs	r3, #0
}
 8005830:	4618      	mov	r0, r3
 8005832:	3760      	adds	r7, #96	; 0x60
 8005834:	46bd      	mov	sp, r7
 8005836:	bd80      	pop	{r7, pc}
 8005838:	08005445 	.word	0x08005445
 800583c:	0800556b 	.word	0x0800556b
 8005840:	080055a1 	.word	0x080055a1

08005844 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005844:	b480      	push	{r7}
 8005846:	b089      	sub	sp, #36	; 0x24
 8005848:	af00      	add	r7, sp, #0
 800584a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	330c      	adds	r3, #12
 8005852:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	e853 3f00 	ldrex	r3, [r3]
 800585a:	60bb      	str	r3, [r7, #8]
   return(result);
 800585c:	68bb      	ldr	r3, [r7, #8]
 800585e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005862:	61fb      	str	r3, [r7, #28]
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	330c      	adds	r3, #12
 800586a:	69fa      	ldr	r2, [r7, #28]
 800586c:	61ba      	str	r2, [r7, #24]
 800586e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005870:	6979      	ldr	r1, [r7, #20]
 8005872:	69ba      	ldr	r2, [r7, #24]
 8005874:	e841 2300 	strex	r3, r2, [r1]
 8005878:	613b      	str	r3, [r7, #16]
   return(result);
 800587a:	693b      	ldr	r3, [r7, #16]
 800587c:	2b00      	cmp	r3, #0
 800587e:	d1e5      	bne.n	800584c <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	2220      	movs	r2, #32
 8005884:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8005888:	bf00      	nop
 800588a:	3724      	adds	r7, #36	; 0x24
 800588c:	46bd      	mov	sp, r7
 800588e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005892:	4770      	bx	lr

08005894 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005894:	b480      	push	{r7}
 8005896:	b095      	sub	sp, #84	; 0x54
 8005898:	af00      	add	r7, sp, #0
 800589a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	330c      	adds	r3, #12
 80058a2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058a6:	e853 3f00 	ldrex	r3, [r3]
 80058aa:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80058ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058ae:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80058b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	330c      	adds	r3, #12
 80058ba:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80058bc:	643a      	str	r2, [r7, #64]	; 0x40
 80058be:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058c0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80058c2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80058c4:	e841 2300 	strex	r3, r2, [r1]
 80058c8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80058ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d1e5      	bne.n	800589c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	3314      	adds	r3, #20
 80058d6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058d8:	6a3b      	ldr	r3, [r7, #32]
 80058da:	e853 3f00 	ldrex	r3, [r3]
 80058de:	61fb      	str	r3, [r7, #28]
   return(result);
 80058e0:	69fb      	ldr	r3, [r7, #28]
 80058e2:	f023 0301 	bic.w	r3, r3, #1
 80058e6:	64bb      	str	r3, [r7, #72]	; 0x48
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	3314      	adds	r3, #20
 80058ee:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80058f0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80058f2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058f4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80058f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80058f8:	e841 2300 	strex	r3, r2, [r1]
 80058fc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80058fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005900:	2b00      	cmp	r3, #0
 8005902:	d1e5      	bne.n	80058d0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005908:	2b01      	cmp	r3, #1
 800590a:	d119      	bne.n	8005940 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	330c      	adds	r3, #12
 8005912:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	e853 3f00 	ldrex	r3, [r3]
 800591a:	60bb      	str	r3, [r7, #8]
   return(result);
 800591c:	68bb      	ldr	r3, [r7, #8]
 800591e:	f023 0310 	bic.w	r3, r3, #16
 8005922:	647b      	str	r3, [r7, #68]	; 0x44
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	330c      	adds	r3, #12
 800592a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800592c:	61ba      	str	r2, [r7, #24]
 800592e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005930:	6979      	ldr	r1, [r7, #20]
 8005932:	69ba      	ldr	r2, [r7, #24]
 8005934:	e841 2300 	strex	r3, r2, [r1]
 8005938:	613b      	str	r3, [r7, #16]
   return(result);
 800593a:	693b      	ldr	r3, [r7, #16]
 800593c:	2b00      	cmp	r3, #0
 800593e:	d1e5      	bne.n	800590c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	2220      	movs	r2, #32
 8005944:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	2200      	movs	r2, #0
 800594c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800594e:	bf00      	nop
 8005950:	3754      	adds	r7, #84	; 0x54
 8005952:	46bd      	mov	sp, r7
 8005954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005958:	4770      	bx	lr

0800595a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800595a:	b580      	push	{r7, lr}
 800595c:	b084      	sub	sp, #16
 800595e:	af00      	add	r7, sp, #0
 8005960:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005966:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	2200      	movs	r2, #0
 800596c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	2200      	movs	r2, #0
 8005972:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005974:	68f8      	ldr	r0, [r7, #12]
 8005976:	f7fb fccf 	bl	8001318 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800597a:	bf00      	nop
 800597c:	3710      	adds	r7, #16
 800597e:	46bd      	mov	sp, r7
 8005980:	bd80      	pop	{r7, pc}

08005982 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005982:	b480      	push	{r7}
 8005984:	b085      	sub	sp, #20
 8005986:	af00      	add	r7, sp, #0
 8005988:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005990:	b2db      	uxtb	r3, r3
 8005992:	2b21      	cmp	r3, #33	; 0x21
 8005994:	d13e      	bne.n	8005a14 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	689b      	ldr	r3, [r3, #8]
 800599a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800599e:	d114      	bne.n	80059ca <UART_Transmit_IT+0x48>
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	691b      	ldr	r3, [r3, #16]
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d110      	bne.n	80059ca <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	6a1b      	ldr	r3, [r3, #32]
 80059ac:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	881b      	ldrh	r3, [r3, #0]
 80059b2:	461a      	mov	r2, r3
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80059bc:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	6a1b      	ldr	r3, [r3, #32]
 80059c2:	1c9a      	adds	r2, r3, #2
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	621a      	str	r2, [r3, #32]
 80059c8:	e008      	b.n	80059dc <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	6a1b      	ldr	r3, [r3, #32]
 80059ce:	1c59      	adds	r1, r3, #1
 80059d0:	687a      	ldr	r2, [r7, #4]
 80059d2:	6211      	str	r1, [r2, #32]
 80059d4:	781a      	ldrb	r2, [r3, #0]
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80059e0:	b29b      	uxth	r3, r3
 80059e2:	3b01      	subs	r3, #1
 80059e4:	b29b      	uxth	r3, r3
 80059e6:	687a      	ldr	r2, [r7, #4]
 80059e8:	4619      	mov	r1, r3
 80059ea:	84d1      	strh	r1, [r2, #38]	; 0x26
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d10f      	bne.n	8005a10 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	68da      	ldr	r2, [r3, #12]
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80059fe:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	68da      	ldr	r2, [r3, #12]
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005a0e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005a10:	2300      	movs	r3, #0
 8005a12:	e000      	b.n	8005a16 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005a14:	2302      	movs	r3, #2
  }
}
 8005a16:	4618      	mov	r0, r3
 8005a18:	3714      	adds	r7, #20
 8005a1a:	46bd      	mov	sp, r7
 8005a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a20:	4770      	bx	lr

08005a22 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005a22:	b580      	push	{r7, lr}
 8005a24:	b082      	sub	sp, #8
 8005a26:	af00      	add	r7, sp, #0
 8005a28:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	68da      	ldr	r2, [r3, #12]
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005a38:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	2220      	movs	r2, #32
 8005a3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005a42:	6878      	ldr	r0, [r7, #4]
 8005a44:	f7ff fcde 	bl	8005404 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005a48:	2300      	movs	r3, #0
}
 8005a4a:	4618      	mov	r0, r3
 8005a4c:	3708      	adds	r7, #8
 8005a4e:	46bd      	mov	sp, r7
 8005a50:	bd80      	pop	{r7, pc}

08005a52 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005a52:	b580      	push	{r7, lr}
 8005a54:	b08c      	sub	sp, #48	; 0x30
 8005a56:	af00      	add	r7, sp, #0
 8005a58:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005a60:	b2db      	uxtb	r3, r3
 8005a62:	2b22      	cmp	r3, #34	; 0x22
 8005a64:	f040 80ab 	bne.w	8005bbe <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	689b      	ldr	r3, [r3, #8]
 8005a6c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a70:	d117      	bne.n	8005aa2 <UART_Receive_IT+0x50>
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	691b      	ldr	r3, [r3, #16]
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d113      	bne.n	8005aa2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005a7a:	2300      	movs	r3, #0
 8005a7c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a82:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	685b      	ldr	r3, [r3, #4]
 8005a8a:	b29b      	uxth	r3, r3
 8005a8c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a90:	b29a      	uxth	r2, r3
 8005a92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a94:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a9a:	1c9a      	adds	r2, r3, #2
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	629a      	str	r2, [r3, #40]	; 0x28
 8005aa0:	e026      	b.n	8005af0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005aa6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005aa8:	2300      	movs	r3, #0
 8005aaa:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	689b      	ldr	r3, [r3, #8]
 8005ab0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ab4:	d007      	beq.n	8005ac6 <UART_Receive_IT+0x74>
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	689b      	ldr	r3, [r3, #8]
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d10a      	bne.n	8005ad4 <UART_Receive_IT+0x82>
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	691b      	ldr	r3, [r3, #16]
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d106      	bne.n	8005ad4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	685b      	ldr	r3, [r3, #4]
 8005acc:	b2da      	uxtb	r2, r3
 8005ace:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ad0:	701a      	strb	r2, [r3, #0]
 8005ad2:	e008      	b.n	8005ae6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	685b      	ldr	r3, [r3, #4]
 8005ada:	b2db      	uxtb	r3, r3
 8005adc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005ae0:	b2da      	uxtb	r2, r3
 8005ae2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ae4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005aea:	1c5a      	adds	r2, r3, #1
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005af4:	b29b      	uxth	r3, r3
 8005af6:	3b01      	subs	r3, #1
 8005af8:	b29b      	uxth	r3, r3
 8005afa:	687a      	ldr	r2, [r7, #4]
 8005afc:	4619      	mov	r1, r3
 8005afe:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d15a      	bne.n	8005bba <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	68da      	ldr	r2, [r3, #12]
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	f022 0220 	bic.w	r2, r2, #32
 8005b12:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	68da      	ldr	r2, [r3, #12]
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005b22:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	695a      	ldr	r2, [r3, #20]
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	f022 0201 	bic.w	r2, r2, #1
 8005b32:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	2220      	movs	r2, #32
 8005b38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b40:	2b01      	cmp	r3, #1
 8005b42:	d135      	bne.n	8005bb0 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	2200      	movs	r2, #0
 8005b48:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	330c      	adds	r3, #12
 8005b50:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b52:	697b      	ldr	r3, [r7, #20]
 8005b54:	e853 3f00 	ldrex	r3, [r3]
 8005b58:	613b      	str	r3, [r7, #16]
   return(result);
 8005b5a:	693b      	ldr	r3, [r7, #16]
 8005b5c:	f023 0310 	bic.w	r3, r3, #16
 8005b60:	627b      	str	r3, [r7, #36]	; 0x24
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	330c      	adds	r3, #12
 8005b68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b6a:	623a      	str	r2, [r7, #32]
 8005b6c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b6e:	69f9      	ldr	r1, [r7, #28]
 8005b70:	6a3a      	ldr	r2, [r7, #32]
 8005b72:	e841 2300 	strex	r3, r2, [r1]
 8005b76:	61bb      	str	r3, [r7, #24]
   return(result);
 8005b78:	69bb      	ldr	r3, [r7, #24]
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d1e5      	bne.n	8005b4a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	f003 0310 	and.w	r3, r3, #16
 8005b88:	2b10      	cmp	r3, #16
 8005b8a:	d10a      	bne.n	8005ba2 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005b8c:	2300      	movs	r3, #0
 8005b8e:	60fb      	str	r3, [r7, #12]
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	60fb      	str	r3, [r7, #12]
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	685b      	ldr	r3, [r3, #4]
 8005b9e:	60fb      	str	r3, [r7, #12]
 8005ba0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005ba6:	4619      	mov	r1, r3
 8005ba8:	6878      	ldr	r0, [r7, #4]
 8005baa:	f7ff fc3f 	bl	800542c <HAL_UARTEx_RxEventCallback>
 8005bae:	e002      	b.n	8005bb6 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005bb0:	6878      	ldr	r0, [r7, #4]
 8005bb2:	f7fb fbbb 	bl	800132c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005bb6:	2300      	movs	r3, #0
 8005bb8:	e002      	b.n	8005bc0 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8005bba:	2300      	movs	r3, #0
 8005bbc:	e000      	b.n	8005bc0 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8005bbe:	2302      	movs	r3, #2
  }
}
 8005bc0:	4618      	mov	r0, r3
 8005bc2:	3730      	adds	r7, #48	; 0x30
 8005bc4:	46bd      	mov	sp, r7
 8005bc6:	bd80      	pop	{r7, pc}

08005bc8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005bc8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005bcc:	b0c0      	sub	sp, #256	; 0x100
 8005bce:	af00      	add	r7, sp, #0
 8005bd0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005bd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	691b      	ldr	r3, [r3, #16]
 8005bdc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005be0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005be4:	68d9      	ldr	r1, [r3, #12]
 8005be6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005bea:	681a      	ldr	r2, [r3, #0]
 8005bec:	ea40 0301 	orr.w	r3, r0, r1
 8005bf0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005bf2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005bf6:	689a      	ldr	r2, [r3, #8]
 8005bf8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005bfc:	691b      	ldr	r3, [r3, #16]
 8005bfe:	431a      	orrs	r2, r3
 8005c00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c04:	695b      	ldr	r3, [r3, #20]
 8005c06:	431a      	orrs	r2, r3
 8005c08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c0c:	69db      	ldr	r3, [r3, #28]
 8005c0e:	4313      	orrs	r3, r2
 8005c10:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005c14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	68db      	ldr	r3, [r3, #12]
 8005c1c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005c20:	f021 010c 	bic.w	r1, r1, #12
 8005c24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c28:	681a      	ldr	r2, [r3, #0]
 8005c2a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005c2e:	430b      	orrs	r3, r1
 8005c30:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005c32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	695b      	ldr	r3, [r3, #20]
 8005c3a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005c3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c42:	6999      	ldr	r1, [r3, #24]
 8005c44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c48:	681a      	ldr	r2, [r3, #0]
 8005c4a:	ea40 0301 	orr.w	r3, r0, r1
 8005c4e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005c50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c54:	681a      	ldr	r2, [r3, #0]
 8005c56:	4b8f      	ldr	r3, [pc, #572]	; (8005e94 <UART_SetConfig+0x2cc>)
 8005c58:	429a      	cmp	r2, r3
 8005c5a:	d005      	beq.n	8005c68 <UART_SetConfig+0xa0>
 8005c5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c60:	681a      	ldr	r2, [r3, #0]
 8005c62:	4b8d      	ldr	r3, [pc, #564]	; (8005e98 <UART_SetConfig+0x2d0>)
 8005c64:	429a      	cmp	r2, r3
 8005c66:	d104      	bne.n	8005c72 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005c68:	f7fe fde4 	bl	8004834 <HAL_RCC_GetPCLK2Freq>
 8005c6c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005c70:	e003      	b.n	8005c7a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005c72:	f7fe fdcb 	bl	800480c <HAL_RCC_GetPCLK1Freq>
 8005c76:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005c7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c7e:	69db      	ldr	r3, [r3, #28]
 8005c80:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005c84:	f040 810c 	bne.w	8005ea0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005c88:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005c8c:	2200      	movs	r2, #0
 8005c8e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005c92:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005c96:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005c9a:	4622      	mov	r2, r4
 8005c9c:	462b      	mov	r3, r5
 8005c9e:	1891      	adds	r1, r2, r2
 8005ca0:	65b9      	str	r1, [r7, #88]	; 0x58
 8005ca2:	415b      	adcs	r3, r3
 8005ca4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005ca6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005caa:	4621      	mov	r1, r4
 8005cac:	eb12 0801 	adds.w	r8, r2, r1
 8005cb0:	4629      	mov	r1, r5
 8005cb2:	eb43 0901 	adc.w	r9, r3, r1
 8005cb6:	f04f 0200 	mov.w	r2, #0
 8005cba:	f04f 0300 	mov.w	r3, #0
 8005cbe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005cc2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005cc6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005cca:	4690      	mov	r8, r2
 8005ccc:	4699      	mov	r9, r3
 8005cce:	4623      	mov	r3, r4
 8005cd0:	eb18 0303 	adds.w	r3, r8, r3
 8005cd4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005cd8:	462b      	mov	r3, r5
 8005cda:	eb49 0303 	adc.w	r3, r9, r3
 8005cde:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005ce2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ce6:	685b      	ldr	r3, [r3, #4]
 8005ce8:	2200      	movs	r2, #0
 8005cea:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005cee:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005cf2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005cf6:	460b      	mov	r3, r1
 8005cf8:	18db      	adds	r3, r3, r3
 8005cfa:	653b      	str	r3, [r7, #80]	; 0x50
 8005cfc:	4613      	mov	r3, r2
 8005cfe:	eb42 0303 	adc.w	r3, r2, r3
 8005d02:	657b      	str	r3, [r7, #84]	; 0x54
 8005d04:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005d08:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005d0c:	f7fa fab8 	bl	8000280 <__aeabi_uldivmod>
 8005d10:	4602      	mov	r2, r0
 8005d12:	460b      	mov	r3, r1
 8005d14:	4b61      	ldr	r3, [pc, #388]	; (8005e9c <UART_SetConfig+0x2d4>)
 8005d16:	fba3 2302 	umull	r2, r3, r3, r2
 8005d1a:	095b      	lsrs	r3, r3, #5
 8005d1c:	011c      	lsls	r4, r3, #4
 8005d1e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005d22:	2200      	movs	r2, #0
 8005d24:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005d28:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005d2c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005d30:	4642      	mov	r2, r8
 8005d32:	464b      	mov	r3, r9
 8005d34:	1891      	adds	r1, r2, r2
 8005d36:	64b9      	str	r1, [r7, #72]	; 0x48
 8005d38:	415b      	adcs	r3, r3
 8005d3a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005d3c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005d40:	4641      	mov	r1, r8
 8005d42:	eb12 0a01 	adds.w	sl, r2, r1
 8005d46:	4649      	mov	r1, r9
 8005d48:	eb43 0b01 	adc.w	fp, r3, r1
 8005d4c:	f04f 0200 	mov.w	r2, #0
 8005d50:	f04f 0300 	mov.w	r3, #0
 8005d54:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005d58:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005d5c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005d60:	4692      	mov	sl, r2
 8005d62:	469b      	mov	fp, r3
 8005d64:	4643      	mov	r3, r8
 8005d66:	eb1a 0303 	adds.w	r3, sl, r3
 8005d6a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005d6e:	464b      	mov	r3, r9
 8005d70:	eb4b 0303 	adc.w	r3, fp, r3
 8005d74:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005d78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d7c:	685b      	ldr	r3, [r3, #4]
 8005d7e:	2200      	movs	r2, #0
 8005d80:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005d84:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005d88:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005d8c:	460b      	mov	r3, r1
 8005d8e:	18db      	adds	r3, r3, r3
 8005d90:	643b      	str	r3, [r7, #64]	; 0x40
 8005d92:	4613      	mov	r3, r2
 8005d94:	eb42 0303 	adc.w	r3, r2, r3
 8005d98:	647b      	str	r3, [r7, #68]	; 0x44
 8005d9a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005d9e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005da2:	f7fa fa6d 	bl	8000280 <__aeabi_uldivmod>
 8005da6:	4602      	mov	r2, r0
 8005da8:	460b      	mov	r3, r1
 8005daa:	4611      	mov	r1, r2
 8005dac:	4b3b      	ldr	r3, [pc, #236]	; (8005e9c <UART_SetConfig+0x2d4>)
 8005dae:	fba3 2301 	umull	r2, r3, r3, r1
 8005db2:	095b      	lsrs	r3, r3, #5
 8005db4:	2264      	movs	r2, #100	; 0x64
 8005db6:	fb02 f303 	mul.w	r3, r2, r3
 8005dba:	1acb      	subs	r3, r1, r3
 8005dbc:	00db      	lsls	r3, r3, #3
 8005dbe:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005dc2:	4b36      	ldr	r3, [pc, #216]	; (8005e9c <UART_SetConfig+0x2d4>)
 8005dc4:	fba3 2302 	umull	r2, r3, r3, r2
 8005dc8:	095b      	lsrs	r3, r3, #5
 8005dca:	005b      	lsls	r3, r3, #1
 8005dcc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005dd0:	441c      	add	r4, r3
 8005dd2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005dd6:	2200      	movs	r2, #0
 8005dd8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005ddc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005de0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005de4:	4642      	mov	r2, r8
 8005de6:	464b      	mov	r3, r9
 8005de8:	1891      	adds	r1, r2, r2
 8005dea:	63b9      	str	r1, [r7, #56]	; 0x38
 8005dec:	415b      	adcs	r3, r3
 8005dee:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005df0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005df4:	4641      	mov	r1, r8
 8005df6:	1851      	adds	r1, r2, r1
 8005df8:	6339      	str	r1, [r7, #48]	; 0x30
 8005dfa:	4649      	mov	r1, r9
 8005dfc:	414b      	adcs	r3, r1
 8005dfe:	637b      	str	r3, [r7, #52]	; 0x34
 8005e00:	f04f 0200 	mov.w	r2, #0
 8005e04:	f04f 0300 	mov.w	r3, #0
 8005e08:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005e0c:	4659      	mov	r1, fp
 8005e0e:	00cb      	lsls	r3, r1, #3
 8005e10:	4651      	mov	r1, sl
 8005e12:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005e16:	4651      	mov	r1, sl
 8005e18:	00ca      	lsls	r2, r1, #3
 8005e1a:	4610      	mov	r0, r2
 8005e1c:	4619      	mov	r1, r3
 8005e1e:	4603      	mov	r3, r0
 8005e20:	4642      	mov	r2, r8
 8005e22:	189b      	adds	r3, r3, r2
 8005e24:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005e28:	464b      	mov	r3, r9
 8005e2a:	460a      	mov	r2, r1
 8005e2c:	eb42 0303 	adc.w	r3, r2, r3
 8005e30:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005e34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e38:	685b      	ldr	r3, [r3, #4]
 8005e3a:	2200      	movs	r2, #0
 8005e3c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005e40:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005e44:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005e48:	460b      	mov	r3, r1
 8005e4a:	18db      	adds	r3, r3, r3
 8005e4c:	62bb      	str	r3, [r7, #40]	; 0x28
 8005e4e:	4613      	mov	r3, r2
 8005e50:	eb42 0303 	adc.w	r3, r2, r3
 8005e54:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005e56:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005e5a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005e5e:	f7fa fa0f 	bl	8000280 <__aeabi_uldivmod>
 8005e62:	4602      	mov	r2, r0
 8005e64:	460b      	mov	r3, r1
 8005e66:	4b0d      	ldr	r3, [pc, #52]	; (8005e9c <UART_SetConfig+0x2d4>)
 8005e68:	fba3 1302 	umull	r1, r3, r3, r2
 8005e6c:	095b      	lsrs	r3, r3, #5
 8005e6e:	2164      	movs	r1, #100	; 0x64
 8005e70:	fb01 f303 	mul.w	r3, r1, r3
 8005e74:	1ad3      	subs	r3, r2, r3
 8005e76:	00db      	lsls	r3, r3, #3
 8005e78:	3332      	adds	r3, #50	; 0x32
 8005e7a:	4a08      	ldr	r2, [pc, #32]	; (8005e9c <UART_SetConfig+0x2d4>)
 8005e7c:	fba2 2303 	umull	r2, r3, r2, r3
 8005e80:	095b      	lsrs	r3, r3, #5
 8005e82:	f003 0207 	and.w	r2, r3, #7
 8005e86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	4422      	add	r2, r4
 8005e8e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005e90:	e105      	b.n	800609e <UART_SetConfig+0x4d6>
 8005e92:	bf00      	nop
 8005e94:	40011000 	.word	0x40011000
 8005e98:	40011400 	.word	0x40011400
 8005e9c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005ea0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005ea4:	2200      	movs	r2, #0
 8005ea6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005eaa:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005eae:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005eb2:	4642      	mov	r2, r8
 8005eb4:	464b      	mov	r3, r9
 8005eb6:	1891      	adds	r1, r2, r2
 8005eb8:	6239      	str	r1, [r7, #32]
 8005eba:	415b      	adcs	r3, r3
 8005ebc:	627b      	str	r3, [r7, #36]	; 0x24
 8005ebe:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005ec2:	4641      	mov	r1, r8
 8005ec4:	1854      	adds	r4, r2, r1
 8005ec6:	4649      	mov	r1, r9
 8005ec8:	eb43 0501 	adc.w	r5, r3, r1
 8005ecc:	f04f 0200 	mov.w	r2, #0
 8005ed0:	f04f 0300 	mov.w	r3, #0
 8005ed4:	00eb      	lsls	r3, r5, #3
 8005ed6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005eda:	00e2      	lsls	r2, r4, #3
 8005edc:	4614      	mov	r4, r2
 8005ede:	461d      	mov	r5, r3
 8005ee0:	4643      	mov	r3, r8
 8005ee2:	18e3      	adds	r3, r4, r3
 8005ee4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005ee8:	464b      	mov	r3, r9
 8005eea:	eb45 0303 	adc.w	r3, r5, r3
 8005eee:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005ef2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ef6:	685b      	ldr	r3, [r3, #4]
 8005ef8:	2200      	movs	r2, #0
 8005efa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005efe:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005f02:	f04f 0200 	mov.w	r2, #0
 8005f06:	f04f 0300 	mov.w	r3, #0
 8005f0a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005f0e:	4629      	mov	r1, r5
 8005f10:	008b      	lsls	r3, r1, #2
 8005f12:	4621      	mov	r1, r4
 8005f14:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005f18:	4621      	mov	r1, r4
 8005f1a:	008a      	lsls	r2, r1, #2
 8005f1c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005f20:	f7fa f9ae 	bl	8000280 <__aeabi_uldivmod>
 8005f24:	4602      	mov	r2, r0
 8005f26:	460b      	mov	r3, r1
 8005f28:	4b60      	ldr	r3, [pc, #384]	; (80060ac <UART_SetConfig+0x4e4>)
 8005f2a:	fba3 2302 	umull	r2, r3, r3, r2
 8005f2e:	095b      	lsrs	r3, r3, #5
 8005f30:	011c      	lsls	r4, r3, #4
 8005f32:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005f36:	2200      	movs	r2, #0
 8005f38:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005f3c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005f40:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005f44:	4642      	mov	r2, r8
 8005f46:	464b      	mov	r3, r9
 8005f48:	1891      	adds	r1, r2, r2
 8005f4a:	61b9      	str	r1, [r7, #24]
 8005f4c:	415b      	adcs	r3, r3
 8005f4e:	61fb      	str	r3, [r7, #28]
 8005f50:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005f54:	4641      	mov	r1, r8
 8005f56:	1851      	adds	r1, r2, r1
 8005f58:	6139      	str	r1, [r7, #16]
 8005f5a:	4649      	mov	r1, r9
 8005f5c:	414b      	adcs	r3, r1
 8005f5e:	617b      	str	r3, [r7, #20]
 8005f60:	f04f 0200 	mov.w	r2, #0
 8005f64:	f04f 0300 	mov.w	r3, #0
 8005f68:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005f6c:	4659      	mov	r1, fp
 8005f6e:	00cb      	lsls	r3, r1, #3
 8005f70:	4651      	mov	r1, sl
 8005f72:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005f76:	4651      	mov	r1, sl
 8005f78:	00ca      	lsls	r2, r1, #3
 8005f7a:	4610      	mov	r0, r2
 8005f7c:	4619      	mov	r1, r3
 8005f7e:	4603      	mov	r3, r0
 8005f80:	4642      	mov	r2, r8
 8005f82:	189b      	adds	r3, r3, r2
 8005f84:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005f88:	464b      	mov	r3, r9
 8005f8a:	460a      	mov	r2, r1
 8005f8c:	eb42 0303 	adc.w	r3, r2, r3
 8005f90:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005f94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f98:	685b      	ldr	r3, [r3, #4]
 8005f9a:	2200      	movs	r2, #0
 8005f9c:	67bb      	str	r3, [r7, #120]	; 0x78
 8005f9e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005fa0:	f04f 0200 	mov.w	r2, #0
 8005fa4:	f04f 0300 	mov.w	r3, #0
 8005fa8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005fac:	4649      	mov	r1, r9
 8005fae:	008b      	lsls	r3, r1, #2
 8005fb0:	4641      	mov	r1, r8
 8005fb2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005fb6:	4641      	mov	r1, r8
 8005fb8:	008a      	lsls	r2, r1, #2
 8005fba:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005fbe:	f7fa f95f 	bl	8000280 <__aeabi_uldivmod>
 8005fc2:	4602      	mov	r2, r0
 8005fc4:	460b      	mov	r3, r1
 8005fc6:	4b39      	ldr	r3, [pc, #228]	; (80060ac <UART_SetConfig+0x4e4>)
 8005fc8:	fba3 1302 	umull	r1, r3, r3, r2
 8005fcc:	095b      	lsrs	r3, r3, #5
 8005fce:	2164      	movs	r1, #100	; 0x64
 8005fd0:	fb01 f303 	mul.w	r3, r1, r3
 8005fd4:	1ad3      	subs	r3, r2, r3
 8005fd6:	011b      	lsls	r3, r3, #4
 8005fd8:	3332      	adds	r3, #50	; 0x32
 8005fda:	4a34      	ldr	r2, [pc, #208]	; (80060ac <UART_SetConfig+0x4e4>)
 8005fdc:	fba2 2303 	umull	r2, r3, r2, r3
 8005fe0:	095b      	lsrs	r3, r3, #5
 8005fe2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005fe6:	441c      	add	r4, r3
 8005fe8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005fec:	2200      	movs	r2, #0
 8005fee:	673b      	str	r3, [r7, #112]	; 0x70
 8005ff0:	677a      	str	r2, [r7, #116]	; 0x74
 8005ff2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005ff6:	4642      	mov	r2, r8
 8005ff8:	464b      	mov	r3, r9
 8005ffa:	1891      	adds	r1, r2, r2
 8005ffc:	60b9      	str	r1, [r7, #8]
 8005ffe:	415b      	adcs	r3, r3
 8006000:	60fb      	str	r3, [r7, #12]
 8006002:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006006:	4641      	mov	r1, r8
 8006008:	1851      	adds	r1, r2, r1
 800600a:	6039      	str	r1, [r7, #0]
 800600c:	4649      	mov	r1, r9
 800600e:	414b      	adcs	r3, r1
 8006010:	607b      	str	r3, [r7, #4]
 8006012:	f04f 0200 	mov.w	r2, #0
 8006016:	f04f 0300 	mov.w	r3, #0
 800601a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800601e:	4659      	mov	r1, fp
 8006020:	00cb      	lsls	r3, r1, #3
 8006022:	4651      	mov	r1, sl
 8006024:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006028:	4651      	mov	r1, sl
 800602a:	00ca      	lsls	r2, r1, #3
 800602c:	4610      	mov	r0, r2
 800602e:	4619      	mov	r1, r3
 8006030:	4603      	mov	r3, r0
 8006032:	4642      	mov	r2, r8
 8006034:	189b      	adds	r3, r3, r2
 8006036:	66bb      	str	r3, [r7, #104]	; 0x68
 8006038:	464b      	mov	r3, r9
 800603a:	460a      	mov	r2, r1
 800603c:	eb42 0303 	adc.w	r3, r2, r3
 8006040:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006042:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006046:	685b      	ldr	r3, [r3, #4]
 8006048:	2200      	movs	r2, #0
 800604a:	663b      	str	r3, [r7, #96]	; 0x60
 800604c:	667a      	str	r2, [r7, #100]	; 0x64
 800604e:	f04f 0200 	mov.w	r2, #0
 8006052:	f04f 0300 	mov.w	r3, #0
 8006056:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800605a:	4649      	mov	r1, r9
 800605c:	008b      	lsls	r3, r1, #2
 800605e:	4641      	mov	r1, r8
 8006060:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006064:	4641      	mov	r1, r8
 8006066:	008a      	lsls	r2, r1, #2
 8006068:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800606c:	f7fa f908 	bl	8000280 <__aeabi_uldivmod>
 8006070:	4602      	mov	r2, r0
 8006072:	460b      	mov	r3, r1
 8006074:	4b0d      	ldr	r3, [pc, #52]	; (80060ac <UART_SetConfig+0x4e4>)
 8006076:	fba3 1302 	umull	r1, r3, r3, r2
 800607a:	095b      	lsrs	r3, r3, #5
 800607c:	2164      	movs	r1, #100	; 0x64
 800607e:	fb01 f303 	mul.w	r3, r1, r3
 8006082:	1ad3      	subs	r3, r2, r3
 8006084:	011b      	lsls	r3, r3, #4
 8006086:	3332      	adds	r3, #50	; 0x32
 8006088:	4a08      	ldr	r2, [pc, #32]	; (80060ac <UART_SetConfig+0x4e4>)
 800608a:	fba2 2303 	umull	r2, r3, r2, r3
 800608e:	095b      	lsrs	r3, r3, #5
 8006090:	f003 020f 	and.w	r2, r3, #15
 8006094:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	4422      	add	r2, r4
 800609c:	609a      	str	r2, [r3, #8]
}
 800609e:	bf00      	nop
 80060a0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80060a4:	46bd      	mov	sp, r7
 80060a6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80060aa:	bf00      	nop
 80060ac:	51eb851f 	.word	0x51eb851f

080060b0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80060b0:	b084      	sub	sp, #16
 80060b2:	b580      	push	{r7, lr}
 80060b4:	b084      	sub	sp, #16
 80060b6:	af00      	add	r7, sp, #0
 80060b8:	6078      	str	r0, [r7, #4]
 80060ba:	f107 001c 	add.w	r0, r7, #28
 80060be:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80060c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060c4:	2b01      	cmp	r3, #1
 80060c6:	d122      	bne.n	800610e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060cc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	68db      	ldr	r3, [r3, #12]
 80060d8:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80060dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80060e0:	687a      	ldr	r2, [r7, #4]
 80060e2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	68db      	ldr	r3, [r3, #12]
 80060e8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80060f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80060f2:	2b01      	cmp	r3, #1
 80060f4:	d105      	bne.n	8006102 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	68db      	ldr	r3, [r3, #12]
 80060fa:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006102:	6878      	ldr	r0, [r7, #4]
 8006104:	f001 fb1c 	bl	8007740 <USB_CoreReset>
 8006108:	4603      	mov	r3, r0
 800610a:	73fb      	strb	r3, [r7, #15]
 800610c:	e01a      	b.n	8006144 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	68db      	ldr	r3, [r3, #12]
 8006112:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800611a:	6878      	ldr	r0, [r7, #4]
 800611c:	f001 fb10 	bl	8007740 <USB_CoreReset>
 8006120:	4603      	mov	r3, r0
 8006122:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006124:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006126:	2b00      	cmp	r3, #0
 8006128:	d106      	bne.n	8006138 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800612e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	639a      	str	r2, [r3, #56]	; 0x38
 8006136:	e005      	b.n	8006144 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800613c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006144:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006146:	2b01      	cmp	r3, #1
 8006148:	d10b      	bne.n	8006162 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	689b      	ldr	r3, [r3, #8]
 800614e:	f043 0206 	orr.w	r2, r3, #6
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	689b      	ldr	r3, [r3, #8]
 800615a:	f043 0220 	orr.w	r2, r3, #32
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006162:	7bfb      	ldrb	r3, [r7, #15]
}
 8006164:	4618      	mov	r0, r3
 8006166:	3710      	adds	r7, #16
 8006168:	46bd      	mov	sp, r7
 800616a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800616e:	b004      	add	sp, #16
 8006170:	4770      	bx	lr
	...

08006174 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8006174:	b480      	push	{r7}
 8006176:	b087      	sub	sp, #28
 8006178:	af00      	add	r7, sp, #0
 800617a:	60f8      	str	r0, [r7, #12]
 800617c:	60b9      	str	r1, [r7, #8]
 800617e:	4613      	mov	r3, r2
 8006180:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8006182:	79fb      	ldrb	r3, [r7, #7]
 8006184:	2b02      	cmp	r3, #2
 8006186:	d165      	bne.n	8006254 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8006188:	68bb      	ldr	r3, [r7, #8]
 800618a:	4a41      	ldr	r2, [pc, #260]	; (8006290 <USB_SetTurnaroundTime+0x11c>)
 800618c:	4293      	cmp	r3, r2
 800618e:	d906      	bls.n	800619e <USB_SetTurnaroundTime+0x2a>
 8006190:	68bb      	ldr	r3, [r7, #8]
 8006192:	4a40      	ldr	r2, [pc, #256]	; (8006294 <USB_SetTurnaroundTime+0x120>)
 8006194:	4293      	cmp	r3, r2
 8006196:	d202      	bcs.n	800619e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8006198:	230f      	movs	r3, #15
 800619a:	617b      	str	r3, [r7, #20]
 800619c:	e062      	b.n	8006264 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800619e:	68bb      	ldr	r3, [r7, #8]
 80061a0:	4a3c      	ldr	r2, [pc, #240]	; (8006294 <USB_SetTurnaroundTime+0x120>)
 80061a2:	4293      	cmp	r3, r2
 80061a4:	d306      	bcc.n	80061b4 <USB_SetTurnaroundTime+0x40>
 80061a6:	68bb      	ldr	r3, [r7, #8]
 80061a8:	4a3b      	ldr	r2, [pc, #236]	; (8006298 <USB_SetTurnaroundTime+0x124>)
 80061aa:	4293      	cmp	r3, r2
 80061ac:	d202      	bcs.n	80061b4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80061ae:	230e      	movs	r3, #14
 80061b0:	617b      	str	r3, [r7, #20]
 80061b2:	e057      	b.n	8006264 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80061b4:	68bb      	ldr	r3, [r7, #8]
 80061b6:	4a38      	ldr	r2, [pc, #224]	; (8006298 <USB_SetTurnaroundTime+0x124>)
 80061b8:	4293      	cmp	r3, r2
 80061ba:	d306      	bcc.n	80061ca <USB_SetTurnaroundTime+0x56>
 80061bc:	68bb      	ldr	r3, [r7, #8]
 80061be:	4a37      	ldr	r2, [pc, #220]	; (800629c <USB_SetTurnaroundTime+0x128>)
 80061c0:	4293      	cmp	r3, r2
 80061c2:	d202      	bcs.n	80061ca <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80061c4:	230d      	movs	r3, #13
 80061c6:	617b      	str	r3, [r7, #20]
 80061c8:	e04c      	b.n	8006264 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80061ca:	68bb      	ldr	r3, [r7, #8]
 80061cc:	4a33      	ldr	r2, [pc, #204]	; (800629c <USB_SetTurnaroundTime+0x128>)
 80061ce:	4293      	cmp	r3, r2
 80061d0:	d306      	bcc.n	80061e0 <USB_SetTurnaroundTime+0x6c>
 80061d2:	68bb      	ldr	r3, [r7, #8]
 80061d4:	4a32      	ldr	r2, [pc, #200]	; (80062a0 <USB_SetTurnaroundTime+0x12c>)
 80061d6:	4293      	cmp	r3, r2
 80061d8:	d802      	bhi.n	80061e0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80061da:	230c      	movs	r3, #12
 80061dc:	617b      	str	r3, [r7, #20]
 80061de:	e041      	b.n	8006264 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80061e0:	68bb      	ldr	r3, [r7, #8]
 80061e2:	4a2f      	ldr	r2, [pc, #188]	; (80062a0 <USB_SetTurnaroundTime+0x12c>)
 80061e4:	4293      	cmp	r3, r2
 80061e6:	d906      	bls.n	80061f6 <USB_SetTurnaroundTime+0x82>
 80061e8:	68bb      	ldr	r3, [r7, #8]
 80061ea:	4a2e      	ldr	r2, [pc, #184]	; (80062a4 <USB_SetTurnaroundTime+0x130>)
 80061ec:	4293      	cmp	r3, r2
 80061ee:	d802      	bhi.n	80061f6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80061f0:	230b      	movs	r3, #11
 80061f2:	617b      	str	r3, [r7, #20]
 80061f4:	e036      	b.n	8006264 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80061f6:	68bb      	ldr	r3, [r7, #8]
 80061f8:	4a2a      	ldr	r2, [pc, #168]	; (80062a4 <USB_SetTurnaroundTime+0x130>)
 80061fa:	4293      	cmp	r3, r2
 80061fc:	d906      	bls.n	800620c <USB_SetTurnaroundTime+0x98>
 80061fe:	68bb      	ldr	r3, [r7, #8]
 8006200:	4a29      	ldr	r2, [pc, #164]	; (80062a8 <USB_SetTurnaroundTime+0x134>)
 8006202:	4293      	cmp	r3, r2
 8006204:	d802      	bhi.n	800620c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8006206:	230a      	movs	r3, #10
 8006208:	617b      	str	r3, [r7, #20]
 800620a:	e02b      	b.n	8006264 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800620c:	68bb      	ldr	r3, [r7, #8]
 800620e:	4a26      	ldr	r2, [pc, #152]	; (80062a8 <USB_SetTurnaroundTime+0x134>)
 8006210:	4293      	cmp	r3, r2
 8006212:	d906      	bls.n	8006222 <USB_SetTurnaroundTime+0xae>
 8006214:	68bb      	ldr	r3, [r7, #8]
 8006216:	4a25      	ldr	r2, [pc, #148]	; (80062ac <USB_SetTurnaroundTime+0x138>)
 8006218:	4293      	cmp	r3, r2
 800621a:	d202      	bcs.n	8006222 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800621c:	2309      	movs	r3, #9
 800621e:	617b      	str	r3, [r7, #20]
 8006220:	e020      	b.n	8006264 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8006222:	68bb      	ldr	r3, [r7, #8]
 8006224:	4a21      	ldr	r2, [pc, #132]	; (80062ac <USB_SetTurnaroundTime+0x138>)
 8006226:	4293      	cmp	r3, r2
 8006228:	d306      	bcc.n	8006238 <USB_SetTurnaroundTime+0xc4>
 800622a:	68bb      	ldr	r3, [r7, #8]
 800622c:	4a20      	ldr	r2, [pc, #128]	; (80062b0 <USB_SetTurnaroundTime+0x13c>)
 800622e:	4293      	cmp	r3, r2
 8006230:	d802      	bhi.n	8006238 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8006232:	2308      	movs	r3, #8
 8006234:	617b      	str	r3, [r7, #20]
 8006236:	e015      	b.n	8006264 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8006238:	68bb      	ldr	r3, [r7, #8]
 800623a:	4a1d      	ldr	r2, [pc, #116]	; (80062b0 <USB_SetTurnaroundTime+0x13c>)
 800623c:	4293      	cmp	r3, r2
 800623e:	d906      	bls.n	800624e <USB_SetTurnaroundTime+0xda>
 8006240:	68bb      	ldr	r3, [r7, #8]
 8006242:	4a1c      	ldr	r2, [pc, #112]	; (80062b4 <USB_SetTurnaroundTime+0x140>)
 8006244:	4293      	cmp	r3, r2
 8006246:	d202      	bcs.n	800624e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8006248:	2307      	movs	r3, #7
 800624a:	617b      	str	r3, [r7, #20]
 800624c:	e00a      	b.n	8006264 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800624e:	2306      	movs	r3, #6
 8006250:	617b      	str	r3, [r7, #20]
 8006252:	e007      	b.n	8006264 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8006254:	79fb      	ldrb	r3, [r7, #7]
 8006256:	2b00      	cmp	r3, #0
 8006258:	d102      	bne.n	8006260 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800625a:	2309      	movs	r3, #9
 800625c:	617b      	str	r3, [r7, #20]
 800625e:	e001      	b.n	8006264 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8006260:	2309      	movs	r3, #9
 8006262:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	68db      	ldr	r3, [r3, #12]
 8006268:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	68da      	ldr	r2, [r3, #12]
 8006274:	697b      	ldr	r3, [r7, #20]
 8006276:	029b      	lsls	r3, r3, #10
 8006278:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800627c:	431a      	orrs	r2, r3
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006282:	2300      	movs	r3, #0
}
 8006284:	4618      	mov	r0, r3
 8006286:	371c      	adds	r7, #28
 8006288:	46bd      	mov	sp, r7
 800628a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800628e:	4770      	bx	lr
 8006290:	00d8acbf 	.word	0x00d8acbf
 8006294:	00e4e1c0 	.word	0x00e4e1c0
 8006298:	00f42400 	.word	0x00f42400
 800629c:	01067380 	.word	0x01067380
 80062a0:	011a499f 	.word	0x011a499f
 80062a4:	01312cff 	.word	0x01312cff
 80062a8:	014ca43f 	.word	0x014ca43f
 80062ac:	016e3600 	.word	0x016e3600
 80062b0:	01a6ab1f 	.word	0x01a6ab1f
 80062b4:	01e84800 	.word	0x01e84800

080062b8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80062b8:	b480      	push	{r7}
 80062ba:	b083      	sub	sp, #12
 80062bc:	af00      	add	r7, sp, #0
 80062be:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	689b      	ldr	r3, [r3, #8]
 80062c4:	f043 0201 	orr.w	r2, r3, #1
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80062cc:	2300      	movs	r3, #0
}
 80062ce:	4618      	mov	r0, r3
 80062d0:	370c      	adds	r7, #12
 80062d2:	46bd      	mov	sp, r7
 80062d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d8:	4770      	bx	lr

080062da <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80062da:	b480      	push	{r7}
 80062dc:	b083      	sub	sp, #12
 80062de:	af00      	add	r7, sp, #0
 80062e0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	689b      	ldr	r3, [r3, #8]
 80062e6:	f023 0201 	bic.w	r2, r3, #1
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80062ee:	2300      	movs	r3, #0
}
 80062f0:	4618      	mov	r0, r3
 80062f2:	370c      	adds	r7, #12
 80062f4:	46bd      	mov	sp, r7
 80062f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062fa:	4770      	bx	lr

080062fc <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80062fc:	b580      	push	{r7, lr}
 80062fe:	b084      	sub	sp, #16
 8006300:	af00      	add	r7, sp, #0
 8006302:	6078      	str	r0, [r7, #4]
 8006304:	460b      	mov	r3, r1
 8006306:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006308:	2300      	movs	r3, #0
 800630a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	68db      	ldr	r3, [r3, #12]
 8006310:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006318:	78fb      	ldrb	r3, [r7, #3]
 800631a:	2b01      	cmp	r3, #1
 800631c:	d115      	bne.n	800634a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	68db      	ldr	r3, [r3, #12]
 8006322:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800632a:	2001      	movs	r0, #1
 800632c:	f7fb f970 	bl	8001610 <HAL_Delay>
      ms++;
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	3301      	adds	r3, #1
 8006334:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8006336:	6878      	ldr	r0, [r7, #4]
 8006338:	f001 f972 	bl	8007620 <USB_GetMode>
 800633c:	4603      	mov	r3, r0
 800633e:	2b01      	cmp	r3, #1
 8006340:	d01e      	beq.n	8006380 <USB_SetCurrentMode+0x84>
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	2b31      	cmp	r3, #49	; 0x31
 8006346:	d9f0      	bls.n	800632a <USB_SetCurrentMode+0x2e>
 8006348:	e01a      	b.n	8006380 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800634a:	78fb      	ldrb	r3, [r7, #3]
 800634c:	2b00      	cmp	r3, #0
 800634e:	d115      	bne.n	800637c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	68db      	ldr	r3, [r3, #12]
 8006354:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800635c:	2001      	movs	r0, #1
 800635e:	f7fb f957 	bl	8001610 <HAL_Delay>
      ms++;
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	3301      	adds	r3, #1
 8006366:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8006368:	6878      	ldr	r0, [r7, #4]
 800636a:	f001 f959 	bl	8007620 <USB_GetMode>
 800636e:	4603      	mov	r3, r0
 8006370:	2b00      	cmp	r3, #0
 8006372:	d005      	beq.n	8006380 <USB_SetCurrentMode+0x84>
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	2b31      	cmp	r3, #49	; 0x31
 8006378:	d9f0      	bls.n	800635c <USB_SetCurrentMode+0x60>
 800637a:	e001      	b.n	8006380 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800637c:	2301      	movs	r3, #1
 800637e:	e005      	b.n	800638c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	2b32      	cmp	r3, #50	; 0x32
 8006384:	d101      	bne.n	800638a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006386:	2301      	movs	r3, #1
 8006388:	e000      	b.n	800638c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800638a:	2300      	movs	r3, #0
}
 800638c:	4618      	mov	r0, r3
 800638e:	3710      	adds	r7, #16
 8006390:	46bd      	mov	sp, r7
 8006392:	bd80      	pop	{r7, pc}

08006394 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006394:	b084      	sub	sp, #16
 8006396:	b580      	push	{r7, lr}
 8006398:	b086      	sub	sp, #24
 800639a:	af00      	add	r7, sp, #0
 800639c:	6078      	str	r0, [r7, #4]
 800639e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80063a2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80063a6:	2300      	movs	r3, #0
 80063a8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80063ae:	2300      	movs	r3, #0
 80063b0:	613b      	str	r3, [r7, #16]
 80063b2:	e009      	b.n	80063c8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80063b4:	687a      	ldr	r2, [r7, #4]
 80063b6:	693b      	ldr	r3, [r7, #16]
 80063b8:	3340      	adds	r3, #64	; 0x40
 80063ba:	009b      	lsls	r3, r3, #2
 80063bc:	4413      	add	r3, r2
 80063be:	2200      	movs	r2, #0
 80063c0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80063c2:	693b      	ldr	r3, [r7, #16]
 80063c4:	3301      	adds	r3, #1
 80063c6:	613b      	str	r3, [r7, #16]
 80063c8:	693b      	ldr	r3, [r7, #16]
 80063ca:	2b0e      	cmp	r3, #14
 80063cc:	d9f2      	bls.n	80063b4 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80063ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d11c      	bne.n	800640e <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80063da:	685b      	ldr	r3, [r3, #4]
 80063dc:	68fa      	ldr	r2, [r7, #12]
 80063de:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80063e2:	f043 0302 	orr.w	r3, r3, #2
 80063e6:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063ec:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063f8:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006404:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	639a      	str	r2, [r3, #56]	; 0x38
 800640c:	e00b      	b.n	8006426 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006412:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800641e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800642c:	461a      	mov	r2, r3
 800642e:	2300      	movs	r3, #0
 8006430:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006438:	4619      	mov	r1, r3
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006440:	461a      	mov	r2, r3
 8006442:	680b      	ldr	r3, [r1, #0]
 8006444:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006446:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006448:	2b01      	cmp	r3, #1
 800644a:	d10c      	bne.n	8006466 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800644c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800644e:	2b00      	cmp	r3, #0
 8006450:	d104      	bne.n	800645c <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006452:	2100      	movs	r1, #0
 8006454:	6878      	ldr	r0, [r7, #4]
 8006456:	f000 f945 	bl	80066e4 <USB_SetDevSpeed>
 800645a:	e008      	b.n	800646e <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800645c:	2101      	movs	r1, #1
 800645e:	6878      	ldr	r0, [r7, #4]
 8006460:	f000 f940 	bl	80066e4 <USB_SetDevSpeed>
 8006464:	e003      	b.n	800646e <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006466:	2103      	movs	r1, #3
 8006468:	6878      	ldr	r0, [r7, #4]
 800646a:	f000 f93b 	bl	80066e4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800646e:	2110      	movs	r1, #16
 8006470:	6878      	ldr	r0, [r7, #4]
 8006472:	f000 f8f3 	bl	800665c <USB_FlushTxFifo>
 8006476:	4603      	mov	r3, r0
 8006478:	2b00      	cmp	r3, #0
 800647a:	d001      	beq.n	8006480 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800647c:	2301      	movs	r3, #1
 800647e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006480:	6878      	ldr	r0, [r7, #4]
 8006482:	f000 f90f 	bl	80066a4 <USB_FlushRxFifo>
 8006486:	4603      	mov	r3, r0
 8006488:	2b00      	cmp	r3, #0
 800648a:	d001      	beq.n	8006490 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800648c:	2301      	movs	r3, #1
 800648e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006496:	461a      	mov	r2, r3
 8006498:	2300      	movs	r3, #0
 800649a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064a2:	461a      	mov	r2, r3
 80064a4:	2300      	movs	r3, #0
 80064a6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064ae:	461a      	mov	r2, r3
 80064b0:	2300      	movs	r3, #0
 80064b2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80064b4:	2300      	movs	r3, #0
 80064b6:	613b      	str	r3, [r7, #16]
 80064b8:	e043      	b.n	8006542 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80064ba:	693b      	ldr	r3, [r7, #16]
 80064bc:	015a      	lsls	r2, r3, #5
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	4413      	add	r3, r2
 80064c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80064cc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80064d0:	d118      	bne.n	8006504 <USB_DevInit+0x170>
    {
      if (i == 0U)
 80064d2:	693b      	ldr	r3, [r7, #16]
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d10a      	bne.n	80064ee <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80064d8:	693b      	ldr	r3, [r7, #16]
 80064da:	015a      	lsls	r2, r3, #5
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	4413      	add	r3, r2
 80064e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064e4:	461a      	mov	r2, r3
 80064e6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80064ea:	6013      	str	r3, [r2, #0]
 80064ec:	e013      	b.n	8006516 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80064ee:	693b      	ldr	r3, [r7, #16]
 80064f0:	015a      	lsls	r2, r3, #5
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	4413      	add	r3, r2
 80064f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064fa:	461a      	mov	r2, r3
 80064fc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006500:	6013      	str	r3, [r2, #0]
 8006502:	e008      	b.n	8006516 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006504:	693b      	ldr	r3, [r7, #16]
 8006506:	015a      	lsls	r2, r3, #5
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	4413      	add	r3, r2
 800650c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006510:	461a      	mov	r2, r3
 8006512:	2300      	movs	r3, #0
 8006514:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006516:	693b      	ldr	r3, [r7, #16]
 8006518:	015a      	lsls	r2, r3, #5
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	4413      	add	r3, r2
 800651e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006522:	461a      	mov	r2, r3
 8006524:	2300      	movs	r3, #0
 8006526:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006528:	693b      	ldr	r3, [r7, #16]
 800652a:	015a      	lsls	r2, r3, #5
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	4413      	add	r3, r2
 8006530:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006534:	461a      	mov	r2, r3
 8006536:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800653a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800653c:	693b      	ldr	r3, [r7, #16]
 800653e:	3301      	adds	r3, #1
 8006540:	613b      	str	r3, [r7, #16]
 8006542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006544:	693a      	ldr	r2, [r7, #16]
 8006546:	429a      	cmp	r2, r3
 8006548:	d3b7      	bcc.n	80064ba <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800654a:	2300      	movs	r3, #0
 800654c:	613b      	str	r3, [r7, #16]
 800654e:	e043      	b.n	80065d8 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006550:	693b      	ldr	r3, [r7, #16]
 8006552:	015a      	lsls	r2, r3, #5
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	4413      	add	r3, r2
 8006558:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006562:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006566:	d118      	bne.n	800659a <USB_DevInit+0x206>
    {
      if (i == 0U)
 8006568:	693b      	ldr	r3, [r7, #16]
 800656a:	2b00      	cmp	r3, #0
 800656c:	d10a      	bne.n	8006584 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800656e:	693b      	ldr	r3, [r7, #16]
 8006570:	015a      	lsls	r2, r3, #5
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	4413      	add	r3, r2
 8006576:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800657a:	461a      	mov	r2, r3
 800657c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006580:	6013      	str	r3, [r2, #0]
 8006582:	e013      	b.n	80065ac <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006584:	693b      	ldr	r3, [r7, #16]
 8006586:	015a      	lsls	r2, r3, #5
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	4413      	add	r3, r2
 800658c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006590:	461a      	mov	r2, r3
 8006592:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006596:	6013      	str	r3, [r2, #0]
 8006598:	e008      	b.n	80065ac <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800659a:	693b      	ldr	r3, [r7, #16]
 800659c:	015a      	lsls	r2, r3, #5
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	4413      	add	r3, r2
 80065a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065a6:	461a      	mov	r2, r3
 80065a8:	2300      	movs	r3, #0
 80065aa:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80065ac:	693b      	ldr	r3, [r7, #16]
 80065ae:	015a      	lsls	r2, r3, #5
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	4413      	add	r3, r2
 80065b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065b8:	461a      	mov	r2, r3
 80065ba:	2300      	movs	r3, #0
 80065bc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80065be:	693b      	ldr	r3, [r7, #16]
 80065c0:	015a      	lsls	r2, r3, #5
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	4413      	add	r3, r2
 80065c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065ca:	461a      	mov	r2, r3
 80065cc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80065d0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80065d2:	693b      	ldr	r3, [r7, #16]
 80065d4:	3301      	adds	r3, #1
 80065d6:	613b      	str	r3, [r7, #16]
 80065d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065da:	693a      	ldr	r2, [r7, #16]
 80065dc:	429a      	cmp	r2, r3
 80065de:	d3b7      	bcc.n	8006550 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065e6:	691b      	ldr	r3, [r3, #16]
 80065e8:	68fa      	ldr	r2, [r7, #12]
 80065ea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80065ee:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80065f2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	2200      	movs	r2, #0
 80065f8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006600:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006602:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006604:	2b00      	cmp	r3, #0
 8006606:	d105      	bne.n	8006614 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	699b      	ldr	r3, [r3, #24]
 800660c:	f043 0210 	orr.w	r2, r3, #16
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	699a      	ldr	r2, [r3, #24]
 8006618:	4b0f      	ldr	r3, [pc, #60]	; (8006658 <USB_DevInit+0x2c4>)
 800661a:	4313      	orrs	r3, r2
 800661c:	687a      	ldr	r2, [r7, #4]
 800661e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006620:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006622:	2b00      	cmp	r3, #0
 8006624:	d005      	beq.n	8006632 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	699b      	ldr	r3, [r3, #24]
 800662a:	f043 0208 	orr.w	r2, r3, #8
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006632:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006634:	2b01      	cmp	r3, #1
 8006636:	d107      	bne.n	8006648 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	699b      	ldr	r3, [r3, #24]
 800663c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006640:	f043 0304 	orr.w	r3, r3, #4
 8006644:	687a      	ldr	r2, [r7, #4]
 8006646:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006648:	7dfb      	ldrb	r3, [r7, #23]
}
 800664a:	4618      	mov	r0, r3
 800664c:	3718      	adds	r7, #24
 800664e:	46bd      	mov	sp, r7
 8006650:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006654:	b004      	add	sp, #16
 8006656:	4770      	bx	lr
 8006658:	803c3800 	.word	0x803c3800

0800665c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800665c:	b480      	push	{r7}
 800665e:	b085      	sub	sp, #20
 8006660:	af00      	add	r7, sp, #0
 8006662:	6078      	str	r0, [r7, #4]
 8006664:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006666:	2300      	movs	r3, #0
 8006668:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800666a:	683b      	ldr	r3, [r7, #0]
 800666c:	019b      	lsls	r3, r3, #6
 800666e:	f043 0220 	orr.w	r2, r3, #32
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	3301      	adds	r3, #1
 800667a:	60fb      	str	r3, [r7, #12]
 800667c:	4a08      	ldr	r2, [pc, #32]	; (80066a0 <USB_FlushTxFifo+0x44>)
 800667e:	4293      	cmp	r3, r2
 8006680:	d901      	bls.n	8006686 <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 8006682:	2303      	movs	r3, #3
 8006684:	e006      	b.n	8006694 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	691b      	ldr	r3, [r3, #16]
 800668a:	f003 0320 	and.w	r3, r3, #32
 800668e:	2b20      	cmp	r3, #32
 8006690:	d0f1      	beq.n	8006676 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8006692:	2300      	movs	r3, #0
}
 8006694:	4618      	mov	r0, r3
 8006696:	3714      	adds	r7, #20
 8006698:	46bd      	mov	sp, r7
 800669a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800669e:	4770      	bx	lr
 80066a0:	00030d40 	.word	0x00030d40

080066a4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80066a4:	b480      	push	{r7}
 80066a6:	b085      	sub	sp, #20
 80066a8:	af00      	add	r7, sp, #0
 80066aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80066ac:	2300      	movs	r3, #0
 80066ae:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	2210      	movs	r2, #16
 80066b4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	3301      	adds	r3, #1
 80066ba:	60fb      	str	r3, [r7, #12]
 80066bc:	4a08      	ldr	r2, [pc, #32]	; (80066e0 <USB_FlushRxFifo+0x3c>)
 80066be:	4293      	cmp	r3, r2
 80066c0:	d901      	bls.n	80066c6 <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 80066c2:	2303      	movs	r3, #3
 80066c4:	e006      	b.n	80066d4 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	691b      	ldr	r3, [r3, #16]
 80066ca:	f003 0310 	and.w	r3, r3, #16
 80066ce:	2b10      	cmp	r3, #16
 80066d0:	d0f1      	beq.n	80066b6 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80066d2:	2300      	movs	r3, #0
}
 80066d4:	4618      	mov	r0, r3
 80066d6:	3714      	adds	r7, #20
 80066d8:	46bd      	mov	sp, r7
 80066da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066de:	4770      	bx	lr
 80066e0:	00030d40 	.word	0x00030d40

080066e4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80066e4:	b480      	push	{r7}
 80066e6:	b085      	sub	sp, #20
 80066e8:	af00      	add	r7, sp, #0
 80066ea:	6078      	str	r0, [r7, #4]
 80066ec:	460b      	mov	r3, r1
 80066ee:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066fa:	681a      	ldr	r2, [r3, #0]
 80066fc:	78fb      	ldrb	r3, [r7, #3]
 80066fe:	68f9      	ldr	r1, [r7, #12]
 8006700:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006704:	4313      	orrs	r3, r2
 8006706:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006708:	2300      	movs	r3, #0
}
 800670a:	4618      	mov	r0, r3
 800670c:	3714      	adds	r7, #20
 800670e:	46bd      	mov	sp, r7
 8006710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006714:	4770      	bx	lr

08006716 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8006716:	b480      	push	{r7}
 8006718:	b087      	sub	sp, #28
 800671a:	af00      	add	r7, sp, #0
 800671c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8006722:	693b      	ldr	r3, [r7, #16]
 8006724:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006728:	689b      	ldr	r3, [r3, #8]
 800672a:	f003 0306 	and.w	r3, r3, #6
 800672e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	2b00      	cmp	r3, #0
 8006734:	d102      	bne.n	800673c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8006736:	2300      	movs	r3, #0
 8006738:	75fb      	strb	r3, [r7, #23]
 800673a:	e00a      	b.n	8006752 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	2b02      	cmp	r3, #2
 8006740:	d002      	beq.n	8006748 <USB_GetDevSpeed+0x32>
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	2b06      	cmp	r3, #6
 8006746:	d102      	bne.n	800674e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8006748:	2302      	movs	r3, #2
 800674a:	75fb      	strb	r3, [r7, #23]
 800674c:	e001      	b.n	8006752 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800674e:	230f      	movs	r3, #15
 8006750:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8006752:	7dfb      	ldrb	r3, [r7, #23]
}
 8006754:	4618      	mov	r0, r3
 8006756:	371c      	adds	r7, #28
 8006758:	46bd      	mov	sp, r7
 800675a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800675e:	4770      	bx	lr

08006760 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006760:	b480      	push	{r7}
 8006762:	b085      	sub	sp, #20
 8006764:	af00      	add	r7, sp, #0
 8006766:	6078      	str	r0, [r7, #4]
 8006768:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800676e:	683b      	ldr	r3, [r7, #0]
 8006770:	781b      	ldrb	r3, [r3, #0]
 8006772:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006774:	683b      	ldr	r3, [r7, #0]
 8006776:	785b      	ldrb	r3, [r3, #1]
 8006778:	2b01      	cmp	r3, #1
 800677a:	d13a      	bne.n	80067f2 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006782:	69da      	ldr	r2, [r3, #28]
 8006784:	683b      	ldr	r3, [r7, #0]
 8006786:	781b      	ldrb	r3, [r3, #0]
 8006788:	f003 030f 	and.w	r3, r3, #15
 800678c:	2101      	movs	r1, #1
 800678e:	fa01 f303 	lsl.w	r3, r1, r3
 8006792:	b29b      	uxth	r3, r3
 8006794:	68f9      	ldr	r1, [r7, #12]
 8006796:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800679a:	4313      	orrs	r3, r2
 800679c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800679e:	68bb      	ldr	r3, [r7, #8]
 80067a0:	015a      	lsls	r2, r3, #5
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	4413      	add	r3, r2
 80067a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d155      	bne.n	8006860 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80067b4:	68bb      	ldr	r3, [r7, #8]
 80067b6:	015a      	lsls	r2, r3, #5
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	4413      	add	r3, r2
 80067bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067c0:	681a      	ldr	r2, [r3, #0]
 80067c2:	683b      	ldr	r3, [r7, #0]
 80067c4:	689b      	ldr	r3, [r3, #8]
 80067c6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80067ca:	683b      	ldr	r3, [r7, #0]
 80067cc:	78db      	ldrb	r3, [r3, #3]
 80067ce:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80067d0:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80067d2:	68bb      	ldr	r3, [r7, #8]
 80067d4:	059b      	lsls	r3, r3, #22
 80067d6:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80067d8:	4313      	orrs	r3, r2
 80067da:	68ba      	ldr	r2, [r7, #8]
 80067dc:	0151      	lsls	r1, r2, #5
 80067de:	68fa      	ldr	r2, [r7, #12]
 80067e0:	440a      	add	r2, r1
 80067e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80067e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80067ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80067ee:	6013      	str	r3, [r2, #0]
 80067f0:	e036      	b.n	8006860 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067f8:	69da      	ldr	r2, [r3, #28]
 80067fa:	683b      	ldr	r3, [r7, #0]
 80067fc:	781b      	ldrb	r3, [r3, #0]
 80067fe:	f003 030f 	and.w	r3, r3, #15
 8006802:	2101      	movs	r1, #1
 8006804:	fa01 f303 	lsl.w	r3, r1, r3
 8006808:	041b      	lsls	r3, r3, #16
 800680a:	68f9      	ldr	r1, [r7, #12]
 800680c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006810:	4313      	orrs	r3, r2
 8006812:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8006814:	68bb      	ldr	r3, [r7, #8]
 8006816:	015a      	lsls	r2, r3, #5
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	4413      	add	r3, r2
 800681c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006826:	2b00      	cmp	r3, #0
 8006828:	d11a      	bne.n	8006860 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800682a:	68bb      	ldr	r3, [r7, #8]
 800682c:	015a      	lsls	r2, r3, #5
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	4413      	add	r3, r2
 8006832:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006836:	681a      	ldr	r2, [r3, #0]
 8006838:	683b      	ldr	r3, [r7, #0]
 800683a:	689b      	ldr	r3, [r3, #8]
 800683c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8006840:	683b      	ldr	r3, [r7, #0]
 8006842:	78db      	ldrb	r3, [r3, #3]
 8006844:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006846:	430b      	orrs	r3, r1
 8006848:	4313      	orrs	r3, r2
 800684a:	68ba      	ldr	r2, [r7, #8]
 800684c:	0151      	lsls	r1, r2, #5
 800684e:	68fa      	ldr	r2, [r7, #12]
 8006850:	440a      	add	r2, r1
 8006852:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006856:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800685a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800685e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8006860:	2300      	movs	r3, #0
}
 8006862:	4618      	mov	r0, r3
 8006864:	3714      	adds	r7, #20
 8006866:	46bd      	mov	sp, r7
 8006868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800686c:	4770      	bx	lr
	...

08006870 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006870:	b480      	push	{r7}
 8006872:	b085      	sub	sp, #20
 8006874:	af00      	add	r7, sp, #0
 8006876:	6078      	str	r0, [r7, #4]
 8006878:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800687e:	683b      	ldr	r3, [r7, #0]
 8006880:	781b      	ldrb	r3, [r3, #0]
 8006882:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8006884:	683b      	ldr	r3, [r7, #0]
 8006886:	785b      	ldrb	r3, [r3, #1]
 8006888:	2b01      	cmp	r3, #1
 800688a:	d161      	bne.n	8006950 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800688c:	68bb      	ldr	r3, [r7, #8]
 800688e:	015a      	lsls	r2, r3, #5
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	4413      	add	r3, r2
 8006894:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800689e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80068a2:	d11f      	bne.n	80068e4 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80068a4:	68bb      	ldr	r3, [r7, #8]
 80068a6:	015a      	lsls	r2, r3, #5
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	4413      	add	r3, r2
 80068ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	68ba      	ldr	r2, [r7, #8]
 80068b4:	0151      	lsls	r1, r2, #5
 80068b6:	68fa      	ldr	r2, [r7, #12]
 80068b8:	440a      	add	r2, r1
 80068ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80068be:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80068c2:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80068c4:	68bb      	ldr	r3, [r7, #8]
 80068c6:	015a      	lsls	r2, r3, #5
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	4413      	add	r3, r2
 80068cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	68ba      	ldr	r2, [r7, #8]
 80068d4:	0151      	lsls	r1, r2, #5
 80068d6:	68fa      	ldr	r2, [r7, #12]
 80068d8:	440a      	add	r2, r1
 80068da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80068de:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80068e2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068ea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80068ec:	683b      	ldr	r3, [r7, #0]
 80068ee:	781b      	ldrb	r3, [r3, #0]
 80068f0:	f003 030f 	and.w	r3, r3, #15
 80068f4:	2101      	movs	r1, #1
 80068f6:	fa01 f303 	lsl.w	r3, r1, r3
 80068fa:	b29b      	uxth	r3, r3
 80068fc:	43db      	mvns	r3, r3
 80068fe:	68f9      	ldr	r1, [r7, #12]
 8006900:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006904:	4013      	ands	r3, r2
 8006906:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800690e:	69da      	ldr	r2, [r3, #28]
 8006910:	683b      	ldr	r3, [r7, #0]
 8006912:	781b      	ldrb	r3, [r3, #0]
 8006914:	f003 030f 	and.w	r3, r3, #15
 8006918:	2101      	movs	r1, #1
 800691a:	fa01 f303 	lsl.w	r3, r1, r3
 800691e:	b29b      	uxth	r3, r3
 8006920:	43db      	mvns	r3, r3
 8006922:	68f9      	ldr	r1, [r7, #12]
 8006924:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006928:	4013      	ands	r3, r2
 800692a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800692c:	68bb      	ldr	r3, [r7, #8]
 800692e:	015a      	lsls	r2, r3, #5
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	4413      	add	r3, r2
 8006934:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006938:	681a      	ldr	r2, [r3, #0]
 800693a:	68bb      	ldr	r3, [r7, #8]
 800693c:	0159      	lsls	r1, r3, #5
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	440b      	add	r3, r1
 8006942:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006946:	4619      	mov	r1, r3
 8006948:	4b35      	ldr	r3, [pc, #212]	; (8006a20 <USB_DeactivateEndpoint+0x1b0>)
 800694a:	4013      	ands	r3, r2
 800694c:	600b      	str	r3, [r1, #0]
 800694e:	e060      	b.n	8006a12 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006950:	68bb      	ldr	r3, [r7, #8]
 8006952:	015a      	lsls	r2, r3, #5
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	4413      	add	r3, r2
 8006958:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006962:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006966:	d11f      	bne.n	80069a8 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006968:	68bb      	ldr	r3, [r7, #8]
 800696a:	015a      	lsls	r2, r3, #5
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	4413      	add	r3, r2
 8006970:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	68ba      	ldr	r2, [r7, #8]
 8006978:	0151      	lsls	r1, r2, #5
 800697a:	68fa      	ldr	r2, [r7, #12]
 800697c:	440a      	add	r2, r1
 800697e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006982:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006986:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8006988:	68bb      	ldr	r3, [r7, #8]
 800698a:	015a      	lsls	r2, r3, #5
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	4413      	add	r3, r2
 8006990:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	68ba      	ldr	r2, [r7, #8]
 8006998:	0151      	lsls	r1, r2, #5
 800699a:	68fa      	ldr	r2, [r7, #12]
 800699c:	440a      	add	r2, r1
 800699e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80069a2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80069a6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80069ae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80069b0:	683b      	ldr	r3, [r7, #0]
 80069b2:	781b      	ldrb	r3, [r3, #0]
 80069b4:	f003 030f 	and.w	r3, r3, #15
 80069b8:	2101      	movs	r1, #1
 80069ba:	fa01 f303 	lsl.w	r3, r1, r3
 80069be:	041b      	lsls	r3, r3, #16
 80069c0:	43db      	mvns	r3, r3
 80069c2:	68f9      	ldr	r1, [r7, #12]
 80069c4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80069c8:	4013      	ands	r3, r2
 80069ca:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80069d2:	69da      	ldr	r2, [r3, #28]
 80069d4:	683b      	ldr	r3, [r7, #0]
 80069d6:	781b      	ldrb	r3, [r3, #0]
 80069d8:	f003 030f 	and.w	r3, r3, #15
 80069dc:	2101      	movs	r1, #1
 80069de:	fa01 f303 	lsl.w	r3, r1, r3
 80069e2:	041b      	lsls	r3, r3, #16
 80069e4:	43db      	mvns	r3, r3
 80069e6:	68f9      	ldr	r1, [r7, #12]
 80069e8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80069ec:	4013      	ands	r3, r2
 80069ee:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80069f0:	68bb      	ldr	r3, [r7, #8]
 80069f2:	015a      	lsls	r2, r3, #5
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	4413      	add	r3, r2
 80069f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069fc:	681a      	ldr	r2, [r3, #0]
 80069fe:	68bb      	ldr	r3, [r7, #8]
 8006a00:	0159      	lsls	r1, r3, #5
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	440b      	add	r3, r1
 8006a06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a0a:	4619      	mov	r1, r3
 8006a0c:	4b05      	ldr	r3, [pc, #20]	; (8006a24 <USB_DeactivateEndpoint+0x1b4>)
 8006a0e:	4013      	ands	r3, r2
 8006a10:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8006a12:	2300      	movs	r3, #0
}
 8006a14:	4618      	mov	r0, r3
 8006a16:	3714      	adds	r7, #20
 8006a18:	46bd      	mov	sp, r7
 8006a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a1e:	4770      	bx	lr
 8006a20:	ec337800 	.word	0xec337800
 8006a24:	eff37800 	.word	0xeff37800

08006a28 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006a28:	b580      	push	{r7, lr}
 8006a2a:	b08a      	sub	sp, #40	; 0x28
 8006a2c:	af02      	add	r7, sp, #8
 8006a2e:	60f8      	str	r0, [r7, #12]
 8006a30:	60b9      	str	r1, [r7, #8]
 8006a32:	4613      	mov	r3, r2
 8006a34:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8006a3a:	68bb      	ldr	r3, [r7, #8]
 8006a3c:	781b      	ldrb	r3, [r3, #0]
 8006a3e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006a40:	68bb      	ldr	r3, [r7, #8]
 8006a42:	785b      	ldrb	r3, [r3, #1]
 8006a44:	2b01      	cmp	r3, #1
 8006a46:	f040 815c 	bne.w	8006d02 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006a4a:	68bb      	ldr	r3, [r7, #8]
 8006a4c:	695b      	ldr	r3, [r3, #20]
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d132      	bne.n	8006ab8 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006a52:	69bb      	ldr	r3, [r7, #24]
 8006a54:	015a      	lsls	r2, r3, #5
 8006a56:	69fb      	ldr	r3, [r7, #28]
 8006a58:	4413      	add	r3, r2
 8006a5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a5e:	691b      	ldr	r3, [r3, #16]
 8006a60:	69ba      	ldr	r2, [r7, #24]
 8006a62:	0151      	lsls	r1, r2, #5
 8006a64:	69fa      	ldr	r2, [r7, #28]
 8006a66:	440a      	add	r2, r1
 8006a68:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006a6c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006a70:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006a74:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006a76:	69bb      	ldr	r3, [r7, #24]
 8006a78:	015a      	lsls	r2, r3, #5
 8006a7a:	69fb      	ldr	r3, [r7, #28]
 8006a7c:	4413      	add	r3, r2
 8006a7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a82:	691b      	ldr	r3, [r3, #16]
 8006a84:	69ba      	ldr	r2, [r7, #24]
 8006a86:	0151      	lsls	r1, r2, #5
 8006a88:	69fa      	ldr	r2, [r7, #28]
 8006a8a:	440a      	add	r2, r1
 8006a8c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006a90:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006a94:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006a96:	69bb      	ldr	r3, [r7, #24]
 8006a98:	015a      	lsls	r2, r3, #5
 8006a9a:	69fb      	ldr	r3, [r7, #28]
 8006a9c:	4413      	add	r3, r2
 8006a9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006aa2:	691b      	ldr	r3, [r3, #16]
 8006aa4:	69ba      	ldr	r2, [r7, #24]
 8006aa6:	0151      	lsls	r1, r2, #5
 8006aa8:	69fa      	ldr	r2, [r7, #28]
 8006aaa:	440a      	add	r2, r1
 8006aac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006ab0:	0cdb      	lsrs	r3, r3, #19
 8006ab2:	04db      	lsls	r3, r3, #19
 8006ab4:	6113      	str	r3, [r2, #16]
 8006ab6:	e074      	b.n	8006ba2 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006ab8:	69bb      	ldr	r3, [r7, #24]
 8006aba:	015a      	lsls	r2, r3, #5
 8006abc:	69fb      	ldr	r3, [r7, #28]
 8006abe:	4413      	add	r3, r2
 8006ac0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ac4:	691b      	ldr	r3, [r3, #16]
 8006ac6:	69ba      	ldr	r2, [r7, #24]
 8006ac8:	0151      	lsls	r1, r2, #5
 8006aca:	69fa      	ldr	r2, [r7, #28]
 8006acc:	440a      	add	r2, r1
 8006ace:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006ad2:	0cdb      	lsrs	r3, r3, #19
 8006ad4:	04db      	lsls	r3, r3, #19
 8006ad6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006ad8:	69bb      	ldr	r3, [r7, #24]
 8006ada:	015a      	lsls	r2, r3, #5
 8006adc:	69fb      	ldr	r3, [r7, #28]
 8006ade:	4413      	add	r3, r2
 8006ae0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ae4:	691b      	ldr	r3, [r3, #16]
 8006ae6:	69ba      	ldr	r2, [r7, #24]
 8006ae8:	0151      	lsls	r1, r2, #5
 8006aea:	69fa      	ldr	r2, [r7, #28]
 8006aec:	440a      	add	r2, r1
 8006aee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006af2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006af6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006afa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8006afc:	69bb      	ldr	r3, [r7, #24]
 8006afe:	015a      	lsls	r2, r3, #5
 8006b00:	69fb      	ldr	r3, [r7, #28]
 8006b02:	4413      	add	r3, r2
 8006b04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b08:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8006b0a:	68bb      	ldr	r3, [r7, #8]
 8006b0c:	6959      	ldr	r1, [r3, #20]
 8006b0e:	68bb      	ldr	r3, [r7, #8]
 8006b10:	689b      	ldr	r3, [r3, #8]
 8006b12:	440b      	add	r3, r1
 8006b14:	1e59      	subs	r1, r3, #1
 8006b16:	68bb      	ldr	r3, [r7, #8]
 8006b18:	689b      	ldr	r3, [r3, #8]
 8006b1a:	fbb1 f3f3 	udiv	r3, r1, r3
 8006b1e:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8006b20:	4b9d      	ldr	r3, [pc, #628]	; (8006d98 <USB_EPStartXfer+0x370>)
 8006b22:	400b      	ands	r3, r1
 8006b24:	69b9      	ldr	r1, [r7, #24]
 8006b26:	0148      	lsls	r0, r1, #5
 8006b28:	69f9      	ldr	r1, [r7, #28]
 8006b2a:	4401      	add	r1, r0
 8006b2c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006b30:	4313      	orrs	r3, r2
 8006b32:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006b34:	69bb      	ldr	r3, [r7, #24]
 8006b36:	015a      	lsls	r2, r3, #5
 8006b38:	69fb      	ldr	r3, [r7, #28]
 8006b3a:	4413      	add	r3, r2
 8006b3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b40:	691a      	ldr	r2, [r3, #16]
 8006b42:	68bb      	ldr	r3, [r7, #8]
 8006b44:	695b      	ldr	r3, [r3, #20]
 8006b46:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006b4a:	69b9      	ldr	r1, [r7, #24]
 8006b4c:	0148      	lsls	r0, r1, #5
 8006b4e:	69f9      	ldr	r1, [r7, #28]
 8006b50:	4401      	add	r1, r0
 8006b52:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006b56:	4313      	orrs	r3, r2
 8006b58:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8006b5a:	68bb      	ldr	r3, [r7, #8]
 8006b5c:	78db      	ldrb	r3, [r3, #3]
 8006b5e:	2b01      	cmp	r3, #1
 8006b60:	d11f      	bne.n	8006ba2 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8006b62:	69bb      	ldr	r3, [r7, #24]
 8006b64:	015a      	lsls	r2, r3, #5
 8006b66:	69fb      	ldr	r3, [r7, #28]
 8006b68:	4413      	add	r3, r2
 8006b6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b6e:	691b      	ldr	r3, [r3, #16]
 8006b70:	69ba      	ldr	r2, [r7, #24]
 8006b72:	0151      	lsls	r1, r2, #5
 8006b74:	69fa      	ldr	r2, [r7, #28]
 8006b76:	440a      	add	r2, r1
 8006b78:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006b7c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8006b80:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8006b82:	69bb      	ldr	r3, [r7, #24]
 8006b84:	015a      	lsls	r2, r3, #5
 8006b86:	69fb      	ldr	r3, [r7, #28]
 8006b88:	4413      	add	r3, r2
 8006b8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b8e:	691b      	ldr	r3, [r3, #16]
 8006b90:	69ba      	ldr	r2, [r7, #24]
 8006b92:	0151      	lsls	r1, r2, #5
 8006b94:	69fa      	ldr	r2, [r7, #28]
 8006b96:	440a      	add	r2, r1
 8006b98:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006b9c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006ba0:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8006ba2:	79fb      	ldrb	r3, [r7, #7]
 8006ba4:	2b01      	cmp	r3, #1
 8006ba6:	d14b      	bne.n	8006c40 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006ba8:	68bb      	ldr	r3, [r7, #8]
 8006baa:	691b      	ldr	r3, [r3, #16]
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d009      	beq.n	8006bc4 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006bb0:	69bb      	ldr	r3, [r7, #24]
 8006bb2:	015a      	lsls	r2, r3, #5
 8006bb4:	69fb      	ldr	r3, [r7, #28]
 8006bb6:	4413      	add	r3, r2
 8006bb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006bbc:	461a      	mov	r2, r3
 8006bbe:	68bb      	ldr	r3, [r7, #8]
 8006bc0:	691b      	ldr	r3, [r3, #16]
 8006bc2:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8006bc4:	68bb      	ldr	r3, [r7, #8]
 8006bc6:	78db      	ldrb	r3, [r3, #3]
 8006bc8:	2b01      	cmp	r3, #1
 8006bca:	d128      	bne.n	8006c1e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006bcc:	69fb      	ldr	r3, [r7, #28]
 8006bce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006bd2:	689b      	ldr	r3, [r3, #8]
 8006bd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d110      	bne.n	8006bfe <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006bdc:	69bb      	ldr	r3, [r7, #24]
 8006bde:	015a      	lsls	r2, r3, #5
 8006be0:	69fb      	ldr	r3, [r7, #28]
 8006be2:	4413      	add	r3, r2
 8006be4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	69ba      	ldr	r2, [r7, #24]
 8006bec:	0151      	lsls	r1, r2, #5
 8006bee:	69fa      	ldr	r2, [r7, #28]
 8006bf0:	440a      	add	r2, r1
 8006bf2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006bf6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006bfa:	6013      	str	r3, [r2, #0]
 8006bfc:	e00f      	b.n	8006c1e <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006bfe:	69bb      	ldr	r3, [r7, #24]
 8006c00:	015a      	lsls	r2, r3, #5
 8006c02:	69fb      	ldr	r3, [r7, #28]
 8006c04:	4413      	add	r3, r2
 8006c06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	69ba      	ldr	r2, [r7, #24]
 8006c0e:	0151      	lsls	r1, r2, #5
 8006c10:	69fa      	ldr	r2, [r7, #28]
 8006c12:	440a      	add	r2, r1
 8006c14:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006c1c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006c1e:	69bb      	ldr	r3, [r7, #24]
 8006c20:	015a      	lsls	r2, r3, #5
 8006c22:	69fb      	ldr	r3, [r7, #28]
 8006c24:	4413      	add	r3, r2
 8006c26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	69ba      	ldr	r2, [r7, #24]
 8006c2e:	0151      	lsls	r1, r2, #5
 8006c30:	69fa      	ldr	r2, [r7, #28]
 8006c32:	440a      	add	r2, r1
 8006c34:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c38:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006c3c:	6013      	str	r3, [r2, #0]
 8006c3e:	e12f      	b.n	8006ea0 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006c40:	69bb      	ldr	r3, [r7, #24]
 8006c42:	015a      	lsls	r2, r3, #5
 8006c44:	69fb      	ldr	r3, [r7, #28]
 8006c46:	4413      	add	r3, r2
 8006c48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	69ba      	ldr	r2, [r7, #24]
 8006c50:	0151      	lsls	r1, r2, #5
 8006c52:	69fa      	ldr	r2, [r7, #28]
 8006c54:	440a      	add	r2, r1
 8006c56:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c5a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006c5e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006c60:	68bb      	ldr	r3, [r7, #8]
 8006c62:	78db      	ldrb	r3, [r3, #3]
 8006c64:	2b01      	cmp	r3, #1
 8006c66:	d015      	beq.n	8006c94 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8006c68:	68bb      	ldr	r3, [r7, #8]
 8006c6a:	695b      	ldr	r3, [r3, #20]
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	f000 8117 	beq.w	8006ea0 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006c72:	69fb      	ldr	r3, [r7, #28]
 8006c74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c78:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006c7a:	68bb      	ldr	r3, [r7, #8]
 8006c7c:	781b      	ldrb	r3, [r3, #0]
 8006c7e:	f003 030f 	and.w	r3, r3, #15
 8006c82:	2101      	movs	r1, #1
 8006c84:	fa01 f303 	lsl.w	r3, r1, r3
 8006c88:	69f9      	ldr	r1, [r7, #28]
 8006c8a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006c8e:	4313      	orrs	r3, r2
 8006c90:	634b      	str	r3, [r1, #52]	; 0x34
 8006c92:	e105      	b.n	8006ea0 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006c94:	69fb      	ldr	r3, [r7, #28]
 8006c96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c9a:	689b      	ldr	r3, [r3, #8]
 8006c9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d110      	bne.n	8006cc6 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006ca4:	69bb      	ldr	r3, [r7, #24]
 8006ca6:	015a      	lsls	r2, r3, #5
 8006ca8:	69fb      	ldr	r3, [r7, #28]
 8006caa:	4413      	add	r3, r2
 8006cac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	69ba      	ldr	r2, [r7, #24]
 8006cb4:	0151      	lsls	r1, r2, #5
 8006cb6:	69fa      	ldr	r2, [r7, #28]
 8006cb8:	440a      	add	r2, r1
 8006cba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006cbe:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006cc2:	6013      	str	r3, [r2, #0]
 8006cc4:	e00f      	b.n	8006ce6 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006cc6:	69bb      	ldr	r3, [r7, #24]
 8006cc8:	015a      	lsls	r2, r3, #5
 8006cca:	69fb      	ldr	r3, [r7, #28]
 8006ccc:	4413      	add	r3, r2
 8006cce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	69ba      	ldr	r2, [r7, #24]
 8006cd6:	0151      	lsls	r1, r2, #5
 8006cd8:	69fa      	ldr	r2, [r7, #28]
 8006cda:	440a      	add	r2, r1
 8006cdc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006ce0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006ce4:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8006ce6:	68bb      	ldr	r3, [r7, #8]
 8006ce8:	68d9      	ldr	r1, [r3, #12]
 8006cea:	68bb      	ldr	r3, [r7, #8]
 8006cec:	781a      	ldrb	r2, [r3, #0]
 8006cee:	68bb      	ldr	r3, [r7, #8]
 8006cf0:	695b      	ldr	r3, [r3, #20]
 8006cf2:	b298      	uxth	r0, r3
 8006cf4:	79fb      	ldrb	r3, [r7, #7]
 8006cf6:	9300      	str	r3, [sp, #0]
 8006cf8:	4603      	mov	r3, r0
 8006cfa:	68f8      	ldr	r0, [r7, #12]
 8006cfc:	f000 fa2b 	bl	8007156 <USB_WritePacket>
 8006d00:	e0ce      	b.n	8006ea0 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006d02:	69bb      	ldr	r3, [r7, #24]
 8006d04:	015a      	lsls	r2, r3, #5
 8006d06:	69fb      	ldr	r3, [r7, #28]
 8006d08:	4413      	add	r3, r2
 8006d0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d0e:	691b      	ldr	r3, [r3, #16]
 8006d10:	69ba      	ldr	r2, [r7, #24]
 8006d12:	0151      	lsls	r1, r2, #5
 8006d14:	69fa      	ldr	r2, [r7, #28]
 8006d16:	440a      	add	r2, r1
 8006d18:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006d1c:	0cdb      	lsrs	r3, r3, #19
 8006d1e:	04db      	lsls	r3, r3, #19
 8006d20:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006d22:	69bb      	ldr	r3, [r7, #24]
 8006d24:	015a      	lsls	r2, r3, #5
 8006d26:	69fb      	ldr	r3, [r7, #28]
 8006d28:	4413      	add	r3, r2
 8006d2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d2e:	691b      	ldr	r3, [r3, #16]
 8006d30:	69ba      	ldr	r2, [r7, #24]
 8006d32:	0151      	lsls	r1, r2, #5
 8006d34:	69fa      	ldr	r2, [r7, #28]
 8006d36:	440a      	add	r2, r1
 8006d38:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006d3c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006d40:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006d44:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8006d46:	68bb      	ldr	r3, [r7, #8]
 8006d48:	695b      	ldr	r3, [r3, #20]
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d126      	bne.n	8006d9c <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8006d4e:	69bb      	ldr	r3, [r7, #24]
 8006d50:	015a      	lsls	r2, r3, #5
 8006d52:	69fb      	ldr	r3, [r7, #28]
 8006d54:	4413      	add	r3, r2
 8006d56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d5a:	691a      	ldr	r2, [r3, #16]
 8006d5c:	68bb      	ldr	r3, [r7, #8]
 8006d5e:	689b      	ldr	r3, [r3, #8]
 8006d60:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006d64:	69b9      	ldr	r1, [r7, #24]
 8006d66:	0148      	lsls	r0, r1, #5
 8006d68:	69f9      	ldr	r1, [r7, #28]
 8006d6a:	4401      	add	r1, r0
 8006d6c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006d70:	4313      	orrs	r3, r2
 8006d72:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006d74:	69bb      	ldr	r3, [r7, #24]
 8006d76:	015a      	lsls	r2, r3, #5
 8006d78:	69fb      	ldr	r3, [r7, #28]
 8006d7a:	4413      	add	r3, r2
 8006d7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d80:	691b      	ldr	r3, [r3, #16]
 8006d82:	69ba      	ldr	r2, [r7, #24]
 8006d84:	0151      	lsls	r1, r2, #5
 8006d86:	69fa      	ldr	r2, [r7, #28]
 8006d88:	440a      	add	r2, r1
 8006d8a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006d8e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006d92:	6113      	str	r3, [r2, #16]
 8006d94:	e036      	b.n	8006e04 <USB_EPStartXfer+0x3dc>
 8006d96:	bf00      	nop
 8006d98:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006d9c:	68bb      	ldr	r3, [r7, #8]
 8006d9e:	695a      	ldr	r2, [r3, #20]
 8006da0:	68bb      	ldr	r3, [r7, #8]
 8006da2:	689b      	ldr	r3, [r3, #8]
 8006da4:	4413      	add	r3, r2
 8006da6:	1e5a      	subs	r2, r3, #1
 8006da8:	68bb      	ldr	r3, [r7, #8]
 8006daa:	689b      	ldr	r3, [r3, #8]
 8006dac:	fbb2 f3f3 	udiv	r3, r2, r3
 8006db0:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8006db2:	69bb      	ldr	r3, [r7, #24]
 8006db4:	015a      	lsls	r2, r3, #5
 8006db6:	69fb      	ldr	r3, [r7, #28]
 8006db8:	4413      	add	r3, r2
 8006dba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006dbe:	691a      	ldr	r2, [r3, #16]
 8006dc0:	8afb      	ldrh	r3, [r7, #22]
 8006dc2:	04d9      	lsls	r1, r3, #19
 8006dc4:	4b39      	ldr	r3, [pc, #228]	; (8006eac <USB_EPStartXfer+0x484>)
 8006dc6:	400b      	ands	r3, r1
 8006dc8:	69b9      	ldr	r1, [r7, #24]
 8006dca:	0148      	lsls	r0, r1, #5
 8006dcc:	69f9      	ldr	r1, [r7, #28]
 8006dce:	4401      	add	r1, r0
 8006dd0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006dd4:	4313      	orrs	r3, r2
 8006dd6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8006dd8:	69bb      	ldr	r3, [r7, #24]
 8006dda:	015a      	lsls	r2, r3, #5
 8006ddc:	69fb      	ldr	r3, [r7, #28]
 8006dde:	4413      	add	r3, r2
 8006de0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006de4:	691a      	ldr	r2, [r3, #16]
 8006de6:	68bb      	ldr	r3, [r7, #8]
 8006de8:	689b      	ldr	r3, [r3, #8]
 8006dea:	8af9      	ldrh	r1, [r7, #22]
 8006dec:	fb01 f303 	mul.w	r3, r1, r3
 8006df0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006df4:	69b9      	ldr	r1, [r7, #24]
 8006df6:	0148      	lsls	r0, r1, #5
 8006df8:	69f9      	ldr	r1, [r7, #28]
 8006dfa:	4401      	add	r1, r0
 8006dfc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006e00:	4313      	orrs	r3, r2
 8006e02:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006e04:	79fb      	ldrb	r3, [r7, #7]
 8006e06:	2b01      	cmp	r3, #1
 8006e08:	d10d      	bne.n	8006e26 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006e0a:	68bb      	ldr	r3, [r7, #8]
 8006e0c:	68db      	ldr	r3, [r3, #12]
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d009      	beq.n	8006e26 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006e12:	68bb      	ldr	r3, [r7, #8]
 8006e14:	68d9      	ldr	r1, [r3, #12]
 8006e16:	69bb      	ldr	r3, [r7, #24]
 8006e18:	015a      	lsls	r2, r3, #5
 8006e1a:	69fb      	ldr	r3, [r7, #28]
 8006e1c:	4413      	add	r3, r2
 8006e1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e22:	460a      	mov	r2, r1
 8006e24:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8006e26:	68bb      	ldr	r3, [r7, #8]
 8006e28:	78db      	ldrb	r3, [r3, #3]
 8006e2a:	2b01      	cmp	r3, #1
 8006e2c:	d128      	bne.n	8006e80 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006e2e:	69fb      	ldr	r3, [r7, #28]
 8006e30:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e34:	689b      	ldr	r3, [r3, #8]
 8006e36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d110      	bne.n	8006e60 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8006e3e:	69bb      	ldr	r3, [r7, #24]
 8006e40:	015a      	lsls	r2, r3, #5
 8006e42:	69fb      	ldr	r3, [r7, #28]
 8006e44:	4413      	add	r3, r2
 8006e46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	69ba      	ldr	r2, [r7, #24]
 8006e4e:	0151      	lsls	r1, r2, #5
 8006e50:	69fa      	ldr	r2, [r7, #28]
 8006e52:	440a      	add	r2, r1
 8006e54:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006e58:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006e5c:	6013      	str	r3, [r2, #0]
 8006e5e:	e00f      	b.n	8006e80 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8006e60:	69bb      	ldr	r3, [r7, #24]
 8006e62:	015a      	lsls	r2, r3, #5
 8006e64:	69fb      	ldr	r3, [r7, #28]
 8006e66:	4413      	add	r3, r2
 8006e68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	69ba      	ldr	r2, [r7, #24]
 8006e70:	0151      	lsls	r1, r2, #5
 8006e72:	69fa      	ldr	r2, [r7, #28]
 8006e74:	440a      	add	r2, r1
 8006e76:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006e7a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006e7e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006e80:	69bb      	ldr	r3, [r7, #24]
 8006e82:	015a      	lsls	r2, r3, #5
 8006e84:	69fb      	ldr	r3, [r7, #28]
 8006e86:	4413      	add	r3, r2
 8006e88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	69ba      	ldr	r2, [r7, #24]
 8006e90:	0151      	lsls	r1, r2, #5
 8006e92:	69fa      	ldr	r2, [r7, #28]
 8006e94:	440a      	add	r2, r1
 8006e96:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006e9a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006e9e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006ea0:	2300      	movs	r3, #0
}
 8006ea2:	4618      	mov	r0, r3
 8006ea4:	3720      	adds	r7, #32
 8006ea6:	46bd      	mov	sp, r7
 8006ea8:	bd80      	pop	{r7, pc}
 8006eaa:	bf00      	nop
 8006eac:	1ff80000 	.word	0x1ff80000

08006eb0 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006eb0:	b480      	push	{r7}
 8006eb2:	b087      	sub	sp, #28
 8006eb4:	af00      	add	r7, sp, #0
 8006eb6:	60f8      	str	r0, [r7, #12]
 8006eb8:	60b9      	str	r1, [r7, #8]
 8006eba:	4613      	mov	r3, r2
 8006ebc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8006ec2:	68bb      	ldr	r3, [r7, #8]
 8006ec4:	781b      	ldrb	r3, [r3, #0]
 8006ec6:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006ec8:	68bb      	ldr	r3, [r7, #8]
 8006eca:	785b      	ldrb	r3, [r3, #1]
 8006ecc:	2b01      	cmp	r3, #1
 8006ece:	f040 80cd 	bne.w	800706c <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006ed2:	68bb      	ldr	r3, [r7, #8]
 8006ed4:	695b      	ldr	r3, [r3, #20]
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d132      	bne.n	8006f40 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006eda:	693b      	ldr	r3, [r7, #16]
 8006edc:	015a      	lsls	r2, r3, #5
 8006ede:	697b      	ldr	r3, [r7, #20]
 8006ee0:	4413      	add	r3, r2
 8006ee2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ee6:	691b      	ldr	r3, [r3, #16]
 8006ee8:	693a      	ldr	r2, [r7, #16]
 8006eea:	0151      	lsls	r1, r2, #5
 8006eec:	697a      	ldr	r2, [r7, #20]
 8006eee:	440a      	add	r2, r1
 8006ef0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006ef4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006ef8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006efc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006efe:	693b      	ldr	r3, [r7, #16]
 8006f00:	015a      	lsls	r2, r3, #5
 8006f02:	697b      	ldr	r3, [r7, #20]
 8006f04:	4413      	add	r3, r2
 8006f06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f0a:	691b      	ldr	r3, [r3, #16]
 8006f0c:	693a      	ldr	r2, [r7, #16]
 8006f0e:	0151      	lsls	r1, r2, #5
 8006f10:	697a      	ldr	r2, [r7, #20]
 8006f12:	440a      	add	r2, r1
 8006f14:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006f18:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006f1c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006f1e:	693b      	ldr	r3, [r7, #16]
 8006f20:	015a      	lsls	r2, r3, #5
 8006f22:	697b      	ldr	r3, [r7, #20]
 8006f24:	4413      	add	r3, r2
 8006f26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f2a:	691b      	ldr	r3, [r3, #16]
 8006f2c:	693a      	ldr	r2, [r7, #16]
 8006f2e:	0151      	lsls	r1, r2, #5
 8006f30:	697a      	ldr	r2, [r7, #20]
 8006f32:	440a      	add	r2, r1
 8006f34:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006f38:	0cdb      	lsrs	r3, r3, #19
 8006f3a:	04db      	lsls	r3, r3, #19
 8006f3c:	6113      	str	r3, [r2, #16]
 8006f3e:	e04e      	b.n	8006fde <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006f40:	693b      	ldr	r3, [r7, #16]
 8006f42:	015a      	lsls	r2, r3, #5
 8006f44:	697b      	ldr	r3, [r7, #20]
 8006f46:	4413      	add	r3, r2
 8006f48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f4c:	691b      	ldr	r3, [r3, #16]
 8006f4e:	693a      	ldr	r2, [r7, #16]
 8006f50:	0151      	lsls	r1, r2, #5
 8006f52:	697a      	ldr	r2, [r7, #20]
 8006f54:	440a      	add	r2, r1
 8006f56:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006f5a:	0cdb      	lsrs	r3, r3, #19
 8006f5c:	04db      	lsls	r3, r3, #19
 8006f5e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006f60:	693b      	ldr	r3, [r7, #16]
 8006f62:	015a      	lsls	r2, r3, #5
 8006f64:	697b      	ldr	r3, [r7, #20]
 8006f66:	4413      	add	r3, r2
 8006f68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f6c:	691b      	ldr	r3, [r3, #16]
 8006f6e:	693a      	ldr	r2, [r7, #16]
 8006f70:	0151      	lsls	r1, r2, #5
 8006f72:	697a      	ldr	r2, [r7, #20]
 8006f74:	440a      	add	r2, r1
 8006f76:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006f7a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006f7e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006f82:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8006f84:	68bb      	ldr	r3, [r7, #8]
 8006f86:	695a      	ldr	r2, [r3, #20]
 8006f88:	68bb      	ldr	r3, [r7, #8]
 8006f8a:	689b      	ldr	r3, [r3, #8]
 8006f8c:	429a      	cmp	r2, r3
 8006f8e:	d903      	bls.n	8006f98 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8006f90:	68bb      	ldr	r3, [r7, #8]
 8006f92:	689a      	ldr	r2, [r3, #8]
 8006f94:	68bb      	ldr	r3, [r7, #8]
 8006f96:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006f98:	693b      	ldr	r3, [r7, #16]
 8006f9a:	015a      	lsls	r2, r3, #5
 8006f9c:	697b      	ldr	r3, [r7, #20]
 8006f9e:	4413      	add	r3, r2
 8006fa0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fa4:	691b      	ldr	r3, [r3, #16]
 8006fa6:	693a      	ldr	r2, [r7, #16]
 8006fa8:	0151      	lsls	r1, r2, #5
 8006faa:	697a      	ldr	r2, [r7, #20]
 8006fac:	440a      	add	r2, r1
 8006fae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006fb2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006fb6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006fb8:	693b      	ldr	r3, [r7, #16]
 8006fba:	015a      	lsls	r2, r3, #5
 8006fbc:	697b      	ldr	r3, [r7, #20]
 8006fbe:	4413      	add	r3, r2
 8006fc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fc4:	691a      	ldr	r2, [r3, #16]
 8006fc6:	68bb      	ldr	r3, [r7, #8]
 8006fc8:	695b      	ldr	r3, [r3, #20]
 8006fca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006fce:	6939      	ldr	r1, [r7, #16]
 8006fd0:	0148      	lsls	r0, r1, #5
 8006fd2:	6979      	ldr	r1, [r7, #20]
 8006fd4:	4401      	add	r1, r0
 8006fd6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006fda:	4313      	orrs	r3, r2
 8006fdc:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006fde:	79fb      	ldrb	r3, [r7, #7]
 8006fe0:	2b01      	cmp	r3, #1
 8006fe2:	d11e      	bne.n	8007022 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006fe4:	68bb      	ldr	r3, [r7, #8]
 8006fe6:	691b      	ldr	r3, [r3, #16]
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d009      	beq.n	8007000 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006fec:	693b      	ldr	r3, [r7, #16]
 8006fee:	015a      	lsls	r2, r3, #5
 8006ff0:	697b      	ldr	r3, [r7, #20]
 8006ff2:	4413      	add	r3, r2
 8006ff4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ff8:	461a      	mov	r2, r3
 8006ffa:	68bb      	ldr	r3, [r7, #8]
 8006ffc:	691b      	ldr	r3, [r3, #16]
 8006ffe:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007000:	693b      	ldr	r3, [r7, #16]
 8007002:	015a      	lsls	r2, r3, #5
 8007004:	697b      	ldr	r3, [r7, #20]
 8007006:	4413      	add	r3, r2
 8007008:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	693a      	ldr	r2, [r7, #16]
 8007010:	0151      	lsls	r1, r2, #5
 8007012:	697a      	ldr	r2, [r7, #20]
 8007014:	440a      	add	r2, r1
 8007016:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800701a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800701e:	6013      	str	r3, [r2, #0]
 8007020:	e092      	b.n	8007148 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007022:	693b      	ldr	r3, [r7, #16]
 8007024:	015a      	lsls	r2, r3, #5
 8007026:	697b      	ldr	r3, [r7, #20]
 8007028:	4413      	add	r3, r2
 800702a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	693a      	ldr	r2, [r7, #16]
 8007032:	0151      	lsls	r1, r2, #5
 8007034:	697a      	ldr	r2, [r7, #20]
 8007036:	440a      	add	r2, r1
 8007038:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800703c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007040:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8007042:	68bb      	ldr	r3, [r7, #8]
 8007044:	695b      	ldr	r3, [r3, #20]
 8007046:	2b00      	cmp	r3, #0
 8007048:	d07e      	beq.n	8007148 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800704a:	697b      	ldr	r3, [r7, #20]
 800704c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007050:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007052:	68bb      	ldr	r3, [r7, #8]
 8007054:	781b      	ldrb	r3, [r3, #0]
 8007056:	f003 030f 	and.w	r3, r3, #15
 800705a:	2101      	movs	r1, #1
 800705c:	fa01 f303 	lsl.w	r3, r1, r3
 8007060:	6979      	ldr	r1, [r7, #20]
 8007062:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007066:	4313      	orrs	r3, r2
 8007068:	634b      	str	r3, [r1, #52]	; 0x34
 800706a:	e06d      	b.n	8007148 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800706c:	693b      	ldr	r3, [r7, #16]
 800706e:	015a      	lsls	r2, r3, #5
 8007070:	697b      	ldr	r3, [r7, #20]
 8007072:	4413      	add	r3, r2
 8007074:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007078:	691b      	ldr	r3, [r3, #16]
 800707a:	693a      	ldr	r2, [r7, #16]
 800707c:	0151      	lsls	r1, r2, #5
 800707e:	697a      	ldr	r2, [r7, #20]
 8007080:	440a      	add	r2, r1
 8007082:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007086:	0cdb      	lsrs	r3, r3, #19
 8007088:	04db      	lsls	r3, r3, #19
 800708a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800708c:	693b      	ldr	r3, [r7, #16]
 800708e:	015a      	lsls	r2, r3, #5
 8007090:	697b      	ldr	r3, [r7, #20]
 8007092:	4413      	add	r3, r2
 8007094:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007098:	691b      	ldr	r3, [r3, #16]
 800709a:	693a      	ldr	r2, [r7, #16]
 800709c:	0151      	lsls	r1, r2, #5
 800709e:	697a      	ldr	r2, [r7, #20]
 80070a0:	440a      	add	r2, r1
 80070a2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80070a6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80070aa:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80070ae:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80070b0:	68bb      	ldr	r3, [r7, #8]
 80070b2:	695b      	ldr	r3, [r3, #20]
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d003      	beq.n	80070c0 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 80070b8:	68bb      	ldr	r3, [r7, #8]
 80070ba:	689a      	ldr	r2, [r3, #8]
 80070bc:	68bb      	ldr	r3, [r7, #8]
 80070be:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80070c0:	693b      	ldr	r3, [r7, #16]
 80070c2:	015a      	lsls	r2, r3, #5
 80070c4:	697b      	ldr	r3, [r7, #20]
 80070c6:	4413      	add	r3, r2
 80070c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070cc:	691b      	ldr	r3, [r3, #16]
 80070ce:	693a      	ldr	r2, [r7, #16]
 80070d0:	0151      	lsls	r1, r2, #5
 80070d2:	697a      	ldr	r2, [r7, #20]
 80070d4:	440a      	add	r2, r1
 80070d6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80070da:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80070de:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 80070e0:	693b      	ldr	r3, [r7, #16]
 80070e2:	015a      	lsls	r2, r3, #5
 80070e4:	697b      	ldr	r3, [r7, #20]
 80070e6:	4413      	add	r3, r2
 80070e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070ec:	691a      	ldr	r2, [r3, #16]
 80070ee:	68bb      	ldr	r3, [r7, #8]
 80070f0:	689b      	ldr	r3, [r3, #8]
 80070f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80070f6:	6939      	ldr	r1, [r7, #16]
 80070f8:	0148      	lsls	r0, r1, #5
 80070fa:	6979      	ldr	r1, [r7, #20]
 80070fc:	4401      	add	r1, r0
 80070fe:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007102:	4313      	orrs	r3, r2
 8007104:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8007106:	79fb      	ldrb	r3, [r7, #7]
 8007108:	2b01      	cmp	r3, #1
 800710a:	d10d      	bne.n	8007128 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800710c:	68bb      	ldr	r3, [r7, #8]
 800710e:	68db      	ldr	r3, [r3, #12]
 8007110:	2b00      	cmp	r3, #0
 8007112:	d009      	beq.n	8007128 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8007114:	68bb      	ldr	r3, [r7, #8]
 8007116:	68d9      	ldr	r1, [r3, #12]
 8007118:	693b      	ldr	r3, [r7, #16]
 800711a:	015a      	lsls	r2, r3, #5
 800711c:	697b      	ldr	r3, [r7, #20]
 800711e:	4413      	add	r3, r2
 8007120:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007124:	460a      	mov	r2, r1
 8007126:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007128:	693b      	ldr	r3, [r7, #16]
 800712a:	015a      	lsls	r2, r3, #5
 800712c:	697b      	ldr	r3, [r7, #20]
 800712e:	4413      	add	r3, r2
 8007130:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	693a      	ldr	r2, [r7, #16]
 8007138:	0151      	lsls	r1, r2, #5
 800713a:	697a      	ldr	r2, [r7, #20]
 800713c:	440a      	add	r2, r1
 800713e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007142:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007146:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007148:	2300      	movs	r3, #0
}
 800714a:	4618      	mov	r0, r3
 800714c:	371c      	adds	r7, #28
 800714e:	46bd      	mov	sp, r7
 8007150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007154:	4770      	bx	lr

08007156 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007156:	b480      	push	{r7}
 8007158:	b089      	sub	sp, #36	; 0x24
 800715a:	af00      	add	r7, sp, #0
 800715c:	60f8      	str	r0, [r7, #12]
 800715e:	60b9      	str	r1, [r7, #8]
 8007160:	4611      	mov	r1, r2
 8007162:	461a      	mov	r2, r3
 8007164:	460b      	mov	r3, r1
 8007166:	71fb      	strb	r3, [r7, #7]
 8007168:	4613      	mov	r3, r2
 800716a:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8007170:	68bb      	ldr	r3, [r7, #8]
 8007172:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8007174:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007178:	2b00      	cmp	r3, #0
 800717a:	d123      	bne.n	80071c4 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800717c:	88bb      	ldrh	r3, [r7, #4]
 800717e:	3303      	adds	r3, #3
 8007180:	089b      	lsrs	r3, r3, #2
 8007182:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8007184:	2300      	movs	r3, #0
 8007186:	61bb      	str	r3, [r7, #24]
 8007188:	e018      	b.n	80071bc <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800718a:	79fb      	ldrb	r3, [r7, #7]
 800718c:	031a      	lsls	r2, r3, #12
 800718e:	697b      	ldr	r3, [r7, #20]
 8007190:	4413      	add	r3, r2
 8007192:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007196:	461a      	mov	r2, r3
 8007198:	69fb      	ldr	r3, [r7, #28]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	6013      	str	r3, [r2, #0]
      pSrc++;
 800719e:	69fb      	ldr	r3, [r7, #28]
 80071a0:	3301      	adds	r3, #1
 80071a2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80071a4:	69fb      	ldr	r3, [r7, #28]
 80071a6:	3301      	adds	r3, #1
 80071a8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80071aa:	69fb      	ldr	r3, [r7, #28]
 80071ac:	3301      	adds	r3, #1
 80071ae:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80071b0:	69fb      	ldr	r3, [r7, #28]
 80071b2:	3301      	adds	r3, #1
 80071b4:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80071b6:	69bb      	ldr	r3, [r7, #24]
 80071b8:	3301      	adds	r3, #1
 80071ba:	61bb      	str	r3, [r7, #24]
 80071bc:	69ba      	ldr	r2, [r7, #24]
 80071be:	693b      	ldr	r3, [r7, #16]
 80071c0:	429a      	cmp	r2, r3
 80071c2:	d3e2      	bcc.n	800718a <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80071c4:	2300      	movs	r3, #0
}
 80071c6:	4618      	mov	r0, r3
 80071c8:	3724      	adds	r7, #36	; 0x24
 80071ca:	46bd      	mov	sp, r7
 80071cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d0:	4770      	bx	lr

080071d2 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80071d2:	b480      	push	{r7}
 80071d4:	b08b      	sub	sp, #44	; 0x2c
 80071d6:	af00      	add	r7, sp, #0
 80071d8:	60f8      	str	r0, [r7, #12]
 80071da:	60b9      	str	r1, [r7, #8]
 80071dc:	4613      	mov	r3, r2
 80071de:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80071e4:	68bb      	ldr	r3, [r7, #8]
 80071e6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80071e8:	88fb      	ldrh	r3, [r7, #6]
 80071ea:	089b      	lsrs	r3, r3, #2
 80071ec:	b29b      	uxth	r3, r3
 80071ee:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80071f0:	88fb      	ldrh	r3, [r7, #6]
 80071f2:	f003 0303 	and.w	r3, r3, #3
 80071f6:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80071f8:	2300      	movs	r3, #0
 80071fa:	623b      	str	r3, [r7, #32]
 80071fc:	e014      	b.n	8007228 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80071fe:	69bb      	ldr	r3, [r7, #24]
 8007200:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007204:	681a      	ldr	r2, [r3, #0]
 8007206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007208:	601a      	str	r2, [r3, #0]
    pDest++;
 800720a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800720c:	3301      	adds	r3, #1
 800720e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007212:	3301      	adds	r3, #1
 8007214:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007218:	3301      	adds	r3, #1
 800721a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800721c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800721e:	3301      	adds	r3, #1
 8007220:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8007222:	6a3b      	ldr	r3, [r7, #32]
 8007224:	3301      	adds	r3, #1
 8007226:	623b      	str	r3, [r7, #32]
 8007228:	6a3a      	ldr	r2, [r7, #32]
 800722a:	697b      	ldr	r3, [r7, #20]
 800722c:	429a      	cmp	r2, r3
 800722e:	d3e6      	bcc.n	80071fe <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8007230:	8bfb      	ldrh	r3, [r7, #30]
 8007232:	2b00      	cmp	r3, #0
 8007234:	d01e      	beq.n	8007274 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8007236:	2300      	movs	r3, #0
 8007238:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800723a:	69bb      	ldr	r3, [r7, #24]
 800723c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007240:	461a      	mov	r2, r3
 8007242:	f107 0310 	add.w	r3, r7, #16
 8007246:	6812      	ldr	r2, [r2, #0]
 8007248:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800724a:	693a      	ldr	r2, [r7, #16]
 800724c:	6a3b      	ldr	r3, [r7, #32]
 800724e:	b2db      	uxtb	r3, r3
 8007250:	00db      	lsls	r3, r3, #3
 8007252:	fa22 f303 	lsr.w	r3, r2, r3
 8007256:	b2da      	uxtb	r2, r3
 8007258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800725a:	701a      	strb	r2, [r3, #0]
      i++;
 800725c:	6a3b      	ldr	r3, [r7, #32]
 800725e:	3301      	adds	r3, #1
 8007260:	623b      	str	r3, [r7, #32]
      pDest++;
 8007262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007264:	3301      	adds	r3, #1
 8007266:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8007268:	8bfb      	ldrh	r3, [r7, #30]
 800726a:	3b01      	subs	r3, #1
 800726c:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800726e:	8bfb      	ldrh	r3, [r7, #30]
 8007270:	2b00      	cmp	r3, #0
 8007272:	d1ea      	bne.n	800724a <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8007274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007276:	4618      	mov	r0, r3
 8007278:	372c      	adds	r7, #44	; 0x2c
 800727a:	46bd      	mov	sp, r7
 800727c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007280:	4770      	bx	lr

08007282 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007282:	b480      	push	{r7}
 8007284:	b085      	sub	sp, #20
 8007286:	af00      	add	r7, sp, #0
 8007288:	6078      	str	r0, [r7, #4]
 800728a:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007290:	683b      	ldr	r3, [r7, #0]
 8007292:	781b      	ldrb	r3, [r3, #0]
 8007294:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007296:	683b      	ldr	r3, [r7, #0]
 8007298:	785b      	ldrb	r3, [r3, #1]
 800729a:	2b01      	cmp	r3, #1
 800729c:	d12c      	bne.n	80072f8 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800729e:	68bb      	ldr	r3, [r7, #8]
 80072a0:	015a      	lsls	r2, r3, #5
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	4413      	add	r3, r2
 80072a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	db12      	blt.n	80072d6 <USB_EPSetStall+0x54>
 80072b0:	68bb      	ldr	r3, [r7, #8]
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d00f      	beq.n	80072d6 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80072b6:	68bb      	ldr	r3, [r7, #8]
 80072b8:	015a      	lsls	r2, r3, #5
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	4413      	add	r3, r2
 80072be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	68ba      	ldr	r2, [r7, #8]
 80072c6:	0151      	lsls	r1, r2, #5
 80072c8:	68fa      	ldr	r2, [r7, #12]
 80072ca:	440a      	add	r2, r1
 80072cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80072d0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80072d4:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80072d6:	68bb      	ldr	r3, [r7, #8]
 80072d8:	015a      	lsls	r2, r3, #5
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	4413      	add	r3, r2
 80072de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	68ba      	ldr	r2, [r7, #8]
 80072e6:	0151      	lsls	r1, r2, #5
 80072e8:	68fa      	ldr	r2, [r7, #12]
 80072ea:	440a      	add	r2, r1
 80072ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80072f0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80072f4:	6013      	str	r3, [r2, #0]
 80072f6:	e02b      	b.n	8007350 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80072f8:	68bb      	ldr	r3, [r7, #8]
 80072fa:	015a      	lsls	r2, r3, #5
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	4413      	add	r3, r2
 8007300:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	2b00      	cmp	r3, #0
 8007308:	db12      	blt.n	8007330 <USB_EPSetStall+0xae>
 800730a:	68bb      	ldr	r3, [r7, #8]
 800730c:	2b00      	cmp	r3, #0
 800730e:	d00f      	beq.n	8007330 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8007310:	68bb      	ldr	r3, [r7, #8]
 8007312:	015a      	lsls	r2, r3, #5
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	4413      	add	r3, r2
 8007318:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	68ba      	ldr	r2, [r7, #8]
 8007320:	0151      	lsls	r1, r2, #5
 8007322:	68fa      	ldr	r2, [r7, #12]
 8007324:	440a      	add	r2, r1
 8007326:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800732a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800732e:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8007330:	68bb      	ldr	r3, [r7, #8]
 8007332:	015a      	lsls	r2, r3, #5
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	4413      	add	r3, r2
 8007338:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	68ba      	ldr	r2, [r7, #8]
 8007340:	0151      	lsls	r1, r2, #5
 8007342:	68fa      	ldr	r2, [r7, #12]
 8007344:	440a      	add	r2, r1
 8007346:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800734a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800734e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007350:	2300      	movs	r3, #0
}
 8007352:	4618      	mov	r0, r3
 8007354:	3714      	adds	r7, #20
 8007356:	46bd      	mov	sp, r7
 8007358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800735c:	4770      	bx	lr

0800735e <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800735e:	b480      	push	{r7}
 8007360:	b085      	sub	sp, #20
 8007362:	af00      	add	r7, sp, #0
 8007364:	6078      	str	r0, [r7, #4]
 8007366:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800736c:	683b      	ldr	r3, [r7, #0]
 800736e:	781b      	ldrb	r3, [r3, #0]
 8007370:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007372:	683b      	ldr	r3, [r7, #0]
 8007374:	785b      	ldrb	r3, [r3, #1]
 8007376:	2b01      	cmp	r3, #1
 8007378:	d128      	bne.n	80073cc <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800737a:	68bb      	ldr	r3, [r7, #8]
 800737c:	015a      	lsls	r2, r3, #5
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	4413      	add	r3, r2
 8007382:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	68ba      	ldr	r2, [r7, #8]
 800738a:	0151      	lsls	r1, r2, #5
 800738c:	68fa      	ldr	r2, [r7, #12]
 800738e:	440a      	add	r2, r1
 8007390:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007394:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007398:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800739a:	683b      	ldr	r3, [r7, #0]
 800739c:	78db      	ldrb	r3, [r3, #3]
 800739e:	2b03      	cmp	r3, #3
 80073a0:	d003      	beq.n	80073aa <USB_EPClearStall+0x4c>
 80073a2:	683b      	ldr	r3, [r7, #0]
 80073a4:	78db      	ldrb	r3, [r3, #3]
 80073a6:	2b02      	cmp	r3, #2
 80073a8:	d138      	bne.n	800741c <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80073aa:	68bb      	ldr	r3, [r7, #8]
 80073ac:	015a      	lsls	r2, r3, #5
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	4413      	add	r3, r2
 80073b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	68ba      	ldr	r2, [r7, #8]
 80073ba:	0151      	lsls	r1, r2, #5
 80073bc:	68fa      	ldr	r2, [r7, #12]
 80073be:	440a      	add	r2, r1
 80073c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80073c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80073c8:	6013      	str	r3, [r2, #0]
 80073ca:	e027      	b.n	800741c <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80073cc:	68bb      	ldr	r3, [r7, #8]
 80073ce:	015a      	lsls	r2, r3, #5
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	4413      	add	r3, r2
 80073d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	68ba      	ldr	r2, [r7, #8]
 80073dc:	0151      	lsls	r1, r2, #5
 80073de:	68fa      	ldr	r2, [r7, #12]
 80073e0:	440a      	add	r2, r1
 80073e2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80073e6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80073ea:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80073ec:	683b      	ldr	r3, [r7, #0]
 80073ee:	78db      	ldrb	r3, [r3, #3]
 80073f0:	2b03      	cmp	r3, #3
 80073f2:	d003      	beq.n	80073fc <USB_EPClearStall+0x9e>
 80073f4:	683b      	ldr	r3, [r7, #0]
 80073f6:	78db      	ldrb	r3, [r3, #3]
 80073f8:	2b02      	cmp	r3, #2
 80073fa:	d10f      	bne.n	800741c <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80073fc:	68bb      	ldr	r3, [r7, #8]
 80073fe:	015a      	lsls	r2, r3, #5
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	4413      	add	r3, r2
 8007404:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	68ba      	ldr	r2, [r7, #8]
 800740c:	0151      	lsls	r1, r2, #5
 800740e:	68fa      	ldr	r2, [r7, #12]
 8007410:	440a      	add	r2, r1
 8007412:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007416:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800741a:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800741c:	2300      	movs	r3, #0
}
 800741e:	4618      	mov	r0, r3
 8007420:	3714      	adds	r7, #20
 8007422:	46bd      	mov	sp, r7
 8007424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007428:	4770      	bx	lr

0800742a <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800742a:	b480      	push	{r7}
 800742c:	b085      	sub	sp, #20
 800742e:	af00      	add	r7, sp, #0
 8007430:	6078      	str	r0, [r7, #4]
 8007432:	460b      	mov	r3, r1
 8007434:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	68fa      	ldr	r2, [r7, #12]
 8007444:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007448:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800744c:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007454:	681a      	ldr	r2, [r3, #0]
 8007456:	78fb      	ldrb	r3, [r7, #3]
 8007458:	011b      	lsls	r3, r3, #4
 800745a:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800745e:	68f9      	ldr	r1, [r7, #12]
 8007460:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007464:	4313      	orrs	r3, r2
 8007466:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8007468:	2300      	movs	r3, #0
}
 800746a:	4618      	mov	r0, r3
 800746c:	3714      	adds	r7, #20
 800746e:	46bd      	mov	sp, r7
 8007470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007474:	4770      	bx	lr

08007476 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007476:	b480      	push	{r7}
 8007478:	b085      	sub	sp, #20
 800747a:	af00      	add	r7, sp, #0
 800747c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	68fa      	ldr	r2, [r7, #12]
 800748c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007490:	f023 0303 	bic.w	r3, r3, #3
 8007494:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800749c:	685b      	ldr	r3, [r3, #4]
 800749e:	68fa      	ldr	r2, [r7, #12]
 80074a0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80074a4:	f023 0302 	bic.w	r3, r3, #2
 80074a8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80074aa:	2300      	movs	r3, #0
}
 80074ac:	4618      	mov	r0, r3
 80074ae:	3714      	adds	r7, #20
 80074b0:	46bd      	mov	sp, r7
 80074b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b6:	4770      	bx	lr

080074b8 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80074b8:	b480      	push	{r7}
 80074ba:	b085      	sub	sp, #20
 80074bc:	af00      	add	r7, sp, #0
 80074be:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	68fa      	ldr	r2, [r7, #12]
 80074ce:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80074d2:	f023 0303 	bic.w	r3, r3, #3
 80074d6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80074de:	685b      	ldr	r3, [r3, #4]
 80074e0:	68fa      	ldr	r2, [r7, #12]
 80074e2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80074e6:	f043 0302 	orr.w	r3, r3, #2
 80074ea:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80074ec:	2300      	movs	r3, #0
}
 80074ee:	4618      	mov	r0, r3
 80074f0:	3714      	adds	r7, #20
 80074f2:	46bd      	mov	sp, r7
 80074f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f8:	4770      	bx	lr

080074fa <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80074fa:	b480      	push	{r7}
 80074fc:	b085      	sub	sp, #20
 80074fe:	af00      	add	r7, sp, #0
 8007500:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	695b      	ldr	r3, [r3, #20]
 8007506:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	699b      	ldr	r3, [r3, #24]
 800750c:	68fa      	ldr	r2, [r7, #12]
 800750e:	4013      	ands	r3, r2
 8007510:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007512:	68fb      	ldr	r3, [r7, #12]
}
 8007514:	4618      	mov	r0, r3
 8007516:	3714      	adds	r7, #20
 8007518:	46bd      	mov	sp, r7
 800751a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800751e:	4770      	bx	lr

08007520 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007520:	b480      	push	{r7}
 8007522:	b085      	sub	sp, #20
 8007524:	af00      	add	r7, sp, #0
 8007526:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007532:	699b      	ldr	r3, [r3, #24]
 8007534:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800753c:	69db      	ldr	r3, [r3, #28]
 800753e:	68ba      	ldr	r2, [r7, #8]
 8007540:	4013      	ands	r3, r2
 8007542:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8007544:	68bb      	ldr	r3, [r7, #8]
 8007546:	0c1b      	lsrs	r3, r3, #16
}
 8007548:	4618      	mov	r0, r3
 800754a:	3714      	adds	r7, #20
 800754c:	46bd      	mov	sp, r7
 800754e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007552:	4770      	bx	lr

08007554 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007554:	b480      	push	{r7}
 8007556:	b085      	sub	sp, #20
 8007558:	af00      	add	r7, sp, #0
 800755a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007566:	699b      	ldr	r3, [r3, #24]
 8007568:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007570:	69db      	ldr	r3, [r3, #28]
 8007572:	68ba      	ldr	r2, [r7, #8]
 8007574:	4013      	ands	r3, r2
 8007576:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8007578:	68bb      	ldr	r3, [r7, #8]
 800757a:	b29b      	uxth	r3, r3
}
 800757c:	4618      	mov	r0, r3
 800757e:	3714      	adds	r7, #20
 8007580:	46bd      	mov	sp, r7
 8007582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007586:	4770      	bx	lr

08007588 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007588:	b480      	push	{r7}
 800758a:	b085      	sub	sp, #20
 800758c:	af00      	add	r7, sp, #0
 800758e:	6078      	str	r0, [r7, #4]
 8007590:	460b      	mov	r3, r1
 8007592:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8007598:	78fb      	ldrb	r3, [r7, #3]
 800759a:	015a      	lsls	r2, r3, #5
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	4413      	add	r3, r2
 80075a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075a4:	689b      	ldr	r3, [r3, #8]
 80075a6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80075ae:	695b      	ldr	r3, [r3, #20]
 80075b0:	68ba      	ldr	r2, [r7, #8]
 80075b2:	4013      	ands	r3, r2
 80075b4:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80075b6:	68bb      	ldr	r3, [r7, #8]
}
 80075b8:	4618      	mov	r0, r3
 80075ba:	3714      	adds	r7, #20
 80075bc:	46bd      	mov	sp, r7
 80075be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c2:	4770      	bx	lr

080075c4 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80075c4:	b480      	push	{r7}
 80075c6:	b087      	sub	sp, #28
 80075c8:	af00      	add	r7, sp, #0
 80075ca:	6078      	str	r0, [r7, #4]
 80075cc:	460b      	mov	r3, r1
 80075ce:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80075d4:	697b      	ldr	r3, [r7, #20]
 80075d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80075da:	691b      	ldr	r3, [r3, #16]
 80075dc:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80075de:	697b      	ldr	r3, [r7, #20]
 80075e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80075e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80075e6:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80075e8:	78fb      	ldrb	r3, [r7, #3]
 80075ea:	f003 030f 	and.w	r3, r3, #15
 80075ee:	68fa      	ldr	r2, [r7, #12]
 80075f0:	fa22 f303 	lsr.w	r3, r2, r3
 80075f4:	01db      	lsls	r3, r3, #7
 80075f6:	b2db      	uxtb	r3, r3
 80075f8:	693a      	ldr	r2, [r7, #16]
 80075fa:	4313      	orrs	r3, r2
 80075fc:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80075fe:	78fb      	ldrb	r3, [r7, #3]
 8007600:	015a      	lsls	r2, r3, #5
 8007602:	697b      	ldr	r3, [r7, #20]
 8007604:	4413      	add	r3, r2
 8007606:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800760a:	689b      	ldr	r3, [r3, #8]
 800760c:	693a      	ldr	r2, [r7, #16]
 800760e:	4013      	ands	r3, r2
 8007610:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007612:	68bb      	ldr	r3, [r7, #8]
}
 8007614:	4618      	mov	r0, r3
 8007616:	371c      	adds	r7, #28
 8007618:	46bd      	mov	sp, r7
 800761a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800761e:	4770      	bx	lr

08007620 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007620:	b480      	push	{r7}
 8007622:	b083      	sub	sp, #12
 8007624:	af00      	add	r7, sp, #0
 8007626:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	695b      	ldr	r3, [r3, #20]
 800762c:	f003 0301 	and.w	r3, r3, #1
}
 8007630:	4618      	mov	r0, r3
 8007632:	370c      	adds	r7, #12
 8007634:	46bd      	mov	sp, r7
 8007636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800763a:	4770      	bx	lr

0800763c <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800763c:	b480      	push	{r7}
 800763e:	b085      	sub	sp, #20
 8007640:	af00      	add	r7, sp, #0
 8007642:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	68fa      	ldr	r2, [r7, #12]
 8007652:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007656:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800765a:	f023 0307 	bic.w	r3, r3, #7
 800765e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007666:	685b      	ldr	r3, [r3, #4]
 8007668:	68fa      	ldr	r2, [r7, #12]
 800766a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800766e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007672:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007674:	2300      	movs	r3, #0
}
 8007676:	4618      	mov	r0, r3
 8007678:	3714      	adds	r7, #20
 800767a:	46bd      	mov	sp, r7
 800767c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007680:	4770      	bx	lr
	...

08007684 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8007684:	b480      	push	{r7}
 8007686:	b087      	sub	sp, #28
 8007688:	af00      	add	r7, sp, #0
 800768a:	60f8      	str	r0, [r7, #12]
 800768c:	460b      	mov	r3, r1
 800768e:	607a      	str	r2, [r7, #4]
 8007690:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	333c      	adds	r3, #60	; 0x3c
 800769a:	3304      	adds	r3, #4
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80076a0:	693b      	ldr	r3, [r7, #16]
 80076a2:	4a26      	ldr	r2, [pc, #152]	; (800773c <USB_EP0_OutStart+0xb8>)
 80076a4:	4293      	cmp	r3, r2
 80076a6:	d90a      	bls.n	80076be <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80076a8:	697b      	ldr	r3, [r7, #20]
 80076aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80076b4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80076b8:	d101      	bne.n	80076be <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80076ba:	2300      	movs	r3, #0
 80076bc:	e037      	b.n	800772e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80076be:	697b      	ldr	r3, [r7, #20]
 80076c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076c4:	461a      	mov	r2, r3
 80076c6:	2300      	movs	r3, #0
 80076c8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80076ca:	697b      	ldr	r3, [r7, #20]
 80076cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076d0:	691b      	ldr	r3, [r3, #16]
 80076d2:	697a      	ldr	r2, [r7, #20]
 80076d4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80076d8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80076dc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80076de:	697b      	ldr	r3, [r7, #20]
 80076e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076e4:	691b      	ldr	r3, [r3, #16]
 80076e6:	697a      	ldr	r2, [r7, #20]
 80076e8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80076ec:	f043 0318 	orr.w	r3, r3, #24
 80076f0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80076f2:	697b      	ldr	r3, [r7, #20]
 80076f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076f8:	691b      	ldr	r3, [r3, #16]
 80076fa:	697a      	ldr	r2, [r7, #20]
 80076fc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007700:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8007704:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8007706:	7afb      	ldrb	r3, [r7, #11]
 8007708:	2b01      	cmp	r3, #1
 800770a:	d10f      	bne.n	800772c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800770c:	697b      	ldr	r3, [r7, #20]
 800770e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007712:	461a      	mov	r2, r3
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8007718:	697b      	ldr	r3, [r7, #20]
 800771a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	697a      	ldr	r2, [r7, #20]
 8007722:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007726:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800772a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800772c:	2300      	movs	r3, #0
}
 800772e:	4618      	mov	r0, r3
 8007730:	371c      	adds	r7, #28
 8007732:	46bd      	mov	sp, r7
 8007734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007738:	4770      	bx	lr
 800773a:	bf00      	nop
 800773c:	4f54300a 	.word	0x4f54300a

08007740 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007740:	b480      	push	{r7}
 8007742:	b085      	sub	sp, #20
 8007744:	af00      	add	r7, sp, #0
 8007746:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007748:	2300      	movs	r3, #0
 800774a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	3301      	adds	r3, #1
 8007750:	60fb      	str	r3, [r7, #12]
 8007752:	4a13      	ldr	r2, [pc, #76]	; (80077a0 <USB_CoreReset+0x60>)
 8007754:	4293      	cmp	r3, r2
 8007756:	d901      	bls.n	800775c <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8007758:	2303      	movs	r3, #3
 800775a:	e01a      	b.n	8007792 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	691b      	ldr	r3, [r3, #16]
 8007760:	2b00      	cmp	r3, #0
 8007762:	daf3      	bge.n	800774c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007764:	2300      	movs	r3, #0
 8007766:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	691b      	ldr	r3, [r3, #16]
 800776c:	f043 0201 	orr.w	r2, r3, #1
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	3301      	adds	r3, #1
 8007778:	60fb      	str	r3, [r7, #12]
 800777a:	4a09      	ldr	r2, [pc, #36]	; (80077a0 <USB_CoreReset+0x60>)
 800777c:	4293      	cmp	r3, r2
 800777e:	d901      	bls.n	8007784 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8007780:	2303      	movs	r3, #3
 8007782:	e006      	b.n	8007792 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	691b      	ldr	r3, [r3, #16]
 8007788:	f003 0301 	and.w	r3, r3, #1
 800778c:	2b01      	cmp	r3, #1
 800778e:	d0f1      	beq.n	8007774 <USB_CoreReset+0x34>

  return HAL_OK;
 8007790:	2300      	movs	r3, #0
}
 8007792:	4618      	mov	r0, r3
 8007794:	3714      	adds	r7, #20
 8007796:	46bd      	mov	sp, r7
 8007798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800779c:	4770      	bx	lr
 800779e:	bf00      	nop
 80077a0:	00030d40 	.word	0x00030d40

080077a4 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80077a4:	b580      	push	{r7, lr}
 80077a6:	b084      	sub	sp, #16
 80077a8:	af00      	add	r7, sp, #0
 80077aa:	6078      	str	r0, [r7, #4]
 80077ac:	460b      	mov	r3, r1
 80077ae:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80077b0:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80077b4:	f002 fa90 	bl	8009cd8 <USBD_static_malloc>
 80077b8:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d105      	bne.n	80077cc <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	2200      	movs	r2, #0
 80077c4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 80077c8:	2302      	movs	r3, #2
 80077ca:	e066      	b.n	800789a <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	68fa      	ldr	r2, [r7, #12]
 80077d0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	7c1b      	ldrb	r3, [r3, #16]
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d119      	bne.n	8007810 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80077dc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80077e0:	2202      	movs	r2, #2
 80077e2:	2181      	movs	r1, #129	; 0x81
 80077e4:	6878      	ldr	r0, [r7, #4]
 80077e6:	f002 f954 	bl	8009a92 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	2201      	movs	r2, #1
 80077ee:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80077f0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80077f4:	2202      	movs	r2, #2
 80077f6:	2101      	movs	r1, #1
 80077f8:	6878      	ldr	r0, [r7, #4]
 80077fa:	f002 f94a 	bl	8009a92 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	2201      	movs	r2, #1
 8007802:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	2210      	movs	r2, #16
 800780a:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800780e:	e016      	b.n	800783e <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007810:	2340      	movs	r3, #64	; 0x40
 8007812:	2202      	movs	r2, #2
 8007814:	2181      	movs	r1, #129	; 0x81
 8007816:	6878      	ldr	r0, [r7, #4]
 8007818:	f002 f93b 	bl	8009a92 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	2201      	movs	r2, #1
 8007820:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007822:	2340      	movs	r3, #64	; 0x40
 8007824:	2202      	movs	r2, #2
 8007826:	2101      	movs	r1, #1
 8007828:	6878      	ldr	r0, [r7, #4]
 800782a:	f002 f932 	bl	8009a92 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	2201      	movs	r2, #1
 8007832:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	2210      	movs	r2, #16
 800783a:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800783e:	2308      	movs	r3, #8
 8007840:	2203      	movs	r2, #3
 8007842:	2182      	movs	r1, #130	; 0x82
 8007844:	6878      	ldr	r0, [r7, #4]
 8007846:	f002 f924 	bl	8009a92 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	2201      	movs	r2, #1
 800784e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	2200      	movs	r2, #0
 8007860:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	2200      	movs	r2, #0
 8007868:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	7c1b      	ldrb	r3, [r3, #16]
 8007870:	2b00      	cmp	r3, #0
 8007872:	d109      	bne.n	8007888 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800787a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800787e:	2101      	movs	r1, #1
 8007880:	6878      	ldr	r0, [r7, #4]
 8007882:	f002 f9f5 	bl	8009c70 <USBD_LL_PrepareReceive>
 8007886:	e007      	b.n	8007898 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800788e:	2340      	movs	r3, #64	; 0x40
 8007890:	2101      	movs	r1, #1
 8007892:	6878      	ldr	r0, [r7, #4]
 8007894:	f002 f9ec 	bl	8009c70 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007898:	2300      	movs	r3, #0
}
 800789a:	4618      	mov	r0, r3
 800789c:	3710      	adds	r7, #16
 800789e:	46bd      	mov	sp, r7
 80078a0:	bd80      	pop	{r7, pc}

080078a2 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80078a2:	b580      	push	{r7, lr}
 80078a4:	b082      	sub	sp, #8
 80078a6:	af00      	add	r7, sp, #0
 80078a8:	6078      	str	r0, [r7, #4]
 80078aa:	460b      	mov	r3, r1
 80078ac:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80078ae:	2181      	movs	r1, #129	; 0x81
 80078b0:	6878      	ldr	r0, [r7, #4]
 80078b2:	f002 f914 	bl	8009ade <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	2200      	movs	r2, #0
 80078ba:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80078bc:	2101      	movs	r1, #1
 80078be:	6878      	ldr	r0, [r7, #4]
 80078c0:	f002 f90d 	bl	8009ade <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	2200      	movs	r2, #0
 80078c8:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80078cc:	2182      	movs	r1, #130	; 0x82
 80078ce:	6878      	ldr	r0, [r7, #4]
 80078d0:	f002 f905 	bl	8009ade <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	2200      	movs	r2, #0
 80078d8:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	2200      	movs	r2, #0
 80078e0:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d00e      	beq.n	800790c <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80078f4:	685b      	ldr	r3, [r3, #4]
 80078f6:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80078fe:	4618      	mov	r0, r3
 8007900:	f002 f9f8 	bl	8009cf4 <USBD_static_free>
    pdev->pClassData = NULL;
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	2200      	movs	r2, #0
 8007908:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800790c:	2300      	movs	r3, #0
}
 800790e:	4618      	mov	r0, r3
 8007910:	3708      	adds	r7, #8
 8007912:	46bd      	mov	sp, r7
 8007914:	bd80      	pop	{r7, pc}
	...

08007918 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8007918:	b580      	push	{r7, lr}
 800791a:	b086      	sub	sp, #24
 800791c:	af00      	add	r7, sp, #0
 800791e:	6078      	str	r0, [r7, #4]
 8007920:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007928:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800792a:	2300      	movs	r3, #0
 800792c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800792e:	2300      	movs	r3, #0
 8007930:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8007932:	2300      	movs	r3, #0
 8007934:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8007936:	693b      	ldr	r3, [r7, #16]
 8007938:	2b00      	cmp	r3, #0
 800793a:	d101      	bne.n	8007940 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800793c:	2303      	movs	r3, #3
 800793e:	e0af      	b.n	8007aa0 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007940:	683b      	ldr	r3, [r7, #0]
 8007942:	781b      	ldrb	r3, [r3, #0]
 8007944:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007948:	2b00      	cmp	r3, #0
 800794a:	d03f      	beq.n	80079cc <USBD_CDC_Setup+0xb4>
 800794c:	2b20      	cmp	r3, #32
 800794e:	f040 809f 	bne.w	8007a90 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8007952:	683b      	ldr	r3, [r7, #0]
 8007954:	88db      	ldrh	r3, [r3, #6]
 8007956:	2b00      	cmp	r3, #0
 8007958:	d02e      	beq.n	80079b8 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800795a:	683b      	ldr	r3, [r7, #0]
 800795c:	781b      	ldrb	r3, [r3, #0]
 800795e:	b25b      	sxtb	r3, r3
 8007960:	2b00      	cmp	r3, #0
 8007962:	da16      	bge.n	8007992 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800796a:	689b      	ldr	r3, [r3, #8]
 800796c:	683a      	ldr	r2, [r7, #0]
 800796e:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8007970:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007972:	683a      	ldr	r2, [r7, #0]
 8007974:	88d2      	ldrh	r2, [r2, #6]
 8007976:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8007978:	683b      	ldr	r3, [r7, #0]
 800797a:	88db      	ldrh	r3, [r3, #6]
 800797c:	2b07      	cmp	r3, #7
 800797e:	bf28      	it	cs
 8007980:	2307      	movcs	r3, #7
 8007982:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8007984:	693b      	ldr	r3, [r7, #16]
 8007986:	89fa      	ldrh	r2, [r7, #14]
 8007988:	4619      	mov	r1, r3
 800798a:	6878      	ldr	r0, [r7, #4]
 800798c:	f001 fb19 	bl	8008fc2 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8007990:	e085      	b.n	8007a9e <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 8007992:	683b      	ldr	r3, [r7, #0]
 8007994:	785a      	ldrb	r2, [r3, #1]
 8007996:	693b      	ldr	r3, [r7, #16]
 8007998:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800799c:	683b      	ldr	r3, [r7, #0]
 800799e:	88db      	ldrh	r3, [r3, #6]
 80079a0:	b2da      	uxtb	r2, r3
 80079a2:	693b      	ldr	r3, [r7, #16]
 80079a4:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 80079a8:	6939      	ldr	r1, [r7, #16]
 80079aa:	683b      	ldr	r3, [r7, #0]
 80079ac:	88db      	ldrh	r3, [r3, #6]
 80079ae:	461a      	mov	r2, r3
 80079b0:	6878      	ldr	r0, [r7, #4]
 80079b2:	f001 fb32 	bl	800901a <USBD_CtlPrepareRx>
      break;
 80079b6:	e072      	b.n	8007a9e <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80079be:	689b      	ldr	r3, [r3, #8]
 80079c0:	683a      	ldr	r2, [r7, #0]
 80079c2:	7850      	ldrb	r0, [r2, #1]
 80079c4:	2200      	movs	r2, #0
 80079c6:	6839      	ldr	r1, [r7, #0]
 80079c8:	4798      	blx	r3
      break;
 80079ca:	e068      	b.n	8007a9e <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80079cc:	683b      	ldr	r3, [r7, #0]
 80079ce:	785b      	ldrb	r3, [r3, #1]
 80079d0:	2b0b      	cmp	r3, #11
 80079d2:	d852      	bhi.n	8007a7a <USBD_CDC_Setup+0x162>
 80079d4:	a201      	add	r2, pc, #4	; (adr r2, 80079dc <USBD_CDC_Setup+0xc4>)
 80079d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079da:	bf00      	nop
 80079dc:	08007a0d 	.word	0x08007a0d
 80079e0:	08007a89 	.word	0x08007a89
 80079e4:	08007a7b 	.word	0x08007a7b
 80079e8:	08007a7b 	.word	0x08007a7b
 80079ec:	08007a7b 	.word	0x08007a7b
 80079f0:	08007a7b 	.word	0x08007a7b
 80079f4:	08007a7b 	.word	0x08007a7b
 80079f8:	08007a7b 	.word	0x08007a7b
 80079fc:	08007a7b 	.word	0x08007a7b
 8007a00:	08007a7b 	.word	0x08007a7b
 8007a04:	08007a37 	.word	0x08007a37
 8007a08:	08007a61 	.word	0x08007a61
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a12:	b2db      	uxtb	r3, r3
 8007a14:	2b03      	cmp	r3, #3
 8007a16:	d107      	bne.n	8007a28 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007a18:	f107 030a 	add.w	r3, r7, #10
 8007a1c:	2202      	movs	r2, #2
 8007a1e:	4619      	mov	r1, r3
 8007a20:	6878      	ldr	r0, [r7, #4]
 8007a22:	f001 face 	bl	8008fc2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007a26:	e032      	b.n	8007a8e <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8007a28:	6839      	ldr	r1, [r7, #0]
 8007a2a:	6878      	ldr	r0, [r7, #4]
 8007a2c:	f001 fa58 	bl	8008ee0 <USBD_CtlError>
            ret = USBD_FAIL;
 8007a30:	2303      	movs	r3, #3
 8007a32:	75fb      	strb	r3, [r7, #23]
          break;
 8007a34:	e02b      	b.n	8007a8e <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a3c:	b2db      	uxtb	r3, r3
 8007a3e:	2b03      	cmp	r3, #3
 8007a40:	d107      	bne.n	8007a52 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8007a42:	f107 030d 	add.w	r3, r7, #13
 8007a46:	2201      	movs	r2, #1
 8007a48:	4619      	mov	r1, r3
 8007a4a:	6878      	ldr	r0, [r7, #4]
 8007a4c:	f001 fab9 	bl	8008fc2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007a50:	e01d      	b.n	8007a8e <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8007a52:	6839      	ldr	r1, [r7, #0]
 8007a54:	6878      	ldr	r0, [r7, #4]
 8007a56:	f001 fa43 	bl	8008ee0 <USBD_CtlError>
            ret = USBD_FAIL;
 8007a5a:	2303      	movs	r3, #3
 8007a5c:	75fb      	strb	r3, [r7, #23]
          break;
 8007a5e:	e016      	b.n	8007a8e <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a66:	b2db      	uxtb	r3, r3
 8007a68:	2b03      	cmp	r3, #3
 8007a6a:	d00f      	beq.n	8007a8c <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8007a6c:	6839      	ldr	r1, [r7, #0]
 8007a6e:	6878      	ldr	r0, [r7, #4]
 8007a70:	f001 fa36 	bl	8008ee0 <USBD_CtlError>
            ret = USBD_FAIL;
 8007a74:	2303      	movs	r3, #3
 8007a76:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007a78:	e008      	b.n	8007a8c <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8007a7a:	6839      	ldr	r1, [r7, #0]
 8007a7c:	6878      	ldr	r0, [r7, #4]
 8007a7e:	f001 fa2f 	bl	8008ee0 <USBD_CtlError>
          ret = USBD_FAIL;
 8007a82:	2303      	movs	r3, #3
 8007a84:	75fb      	strb	r3, [r7, #23]
          break;
 8007a86:	e002      	b.n	8007a8e <USBD_CDC_Setup+0x176>
          break;
 8007a88:	bf00      	nop
 8007a8a:	e008      	b.n	8007a9e <USBD_CDC_Setup+0x186>
          break;
 8007a8c:	bf00      	nop
      }
      break;
 8007a8e:	e006      	b.n	8007a9e <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8007a90:	6839      	ldr	r1, [r7, #0]
 8007a92:	6878      	ldr	r0, [r7, #4]
 8007a94:	f001 fa24 	bl	8008ee0 <USBD_CtlError>
      ret = USBD_FAIL;
 8007a98:	2303      	movs	r3, #3
 8007a9a:	75fb      	strb	r3, [r7, #23]
      break;
 8007a9c:	bf00      	nop
  }

  return (uint8_t)ret;
 8007a9e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007aa0:	4618      	mov	r0, r3
 8007aa2:	3718      	adds	r7, #24
 8007aa4:	46bd      	mov	sp, r7
 8007aa6:	bd80      	pop	{r7, pc}

08007aa8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007aa8:	b580      	push	{r7, lr}
 8007aaa:	b084      	sub	sp, #16
 8007aac:	af00      	add	r7, sp, #0
 8007aae:	6078      	str	r0, [r7, #4]
 8007ab0:	460b      	mov	r3, r1
 8007ab2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007aba:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d101      	bne.n	8007aca <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007ac6:	2303      	movs	r3, #3
 8007ac8:	e04f      	b.n	8007b6a <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007ad0:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8007ad2:	78fa      	ldrb	r2, [r7, #3]
 8007ad4:	6879      	ldr	r1, [r7, #4]
 8007ad6:	4613      	mov	r3, r2
 8007ad8:	009b      	lsls	r3, r3, #2
 8007ada:	4413      	add	r3, r2
 8007adc:	009b      	lsls	r3, r3, #2
 8007ade:	440b      	add	r3, r1
 8007ae0:	3318      	adds	r3, #24
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d029      	beq.n	8007b3c <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8007ae8:	78fa      	ldrb	r2, [r7, #3]
 8007aea:	6879      	ldr	r1, [r7, #4]
 8007aec:	4613      	mov	r3, r2
 8007aee:	009b      	lsls	r3, r3, #2
 8007af0:	4413      	add	r3, r2
 8007af2:	009b      	lsls	r3, r3, #2
 8007af4:	440b      	add	r3, r1
 8007af6:	3318      	adds	r3, #24
 8007af8:	681a      	ldr	r2, [r3, #0]
 8007afa:	78f9      	ldrb	r1, [r7, #3]
 8007afc:	68f8      	ldr	r0, [r7, #12]
 8007afe:	460b      	mov	r3, r1
 8007b00:	00db      	lsls	r3, r3, #3
 8007b02:	1a5b      	subs	r3, r3, r1
 8007b04:	009b      	lsls	r3, r3, #2
 8007b06:	4403      	add	r3, r0
 8007b08:	3344      	adds	r3, #68	; 0x44
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	fbb2 f1f3 	udiv	r1, r2, r3
 8007b10:	fb01 f303 	mul.w	r3, r1, r3
 8007b14:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d110      	bne.n	8007b3c <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8007b1a:	78fa      	ldrb	r2, [r7, #3]
 8007b1c:	6879      	ldr	r1, [r7, #4]
 8007b1e:	4613      	mov	r3, r2
 8007b20:	009b      	lsls	r3, r3, #2
 8007b22:	4413      	add	r3, r2
 8007b24:	009b      	lsls	r3, r3, #2
 8007b26:	440b      	add	r3, r1
 8007b28:	3318      	adds	r3, #24
 8007b2a:	2200      	movs	r2, #0
 8007b2c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007b2e:	78f9      	ldrb	r1, [r7, #3]
 8007b30:	2300      	movs	r3, #0
 8007b32:	2200      	movs	r2, #0
 8007b34:	6878      	ldr	r0, [r7, #4]
 8007b36:	f002 f87a 	bl	8009c2e <USBD_LL_Transmit>
 8007b3a:	e015      	b.n	8007b68 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8007b3c:	68bb      	ldr	r3, [r7, #8]
 8007b3e:	2200      	movs	r2, #0
 8007b40:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007b4a:	691b      	ldr	r3, [r3, #16]
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d00b      	beq.n	8007b68 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007b56:	691b      	ldr	r3, [r3, #16]
 8007b58:	68ba      	ldr	r2, [r7, #8]
 8007b5a:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8007b5e:	68ba      	ldr	r2, [r7, #8]
 8007b60:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8007b64:	78fa      	ldrb	r2, [r7, #3]
 8007b66:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8007b68:	2300      	movs	r3, #0
}
 8007b6a:	4618      	mov	r0, r3
 8007b6c:	3710      	adds	r7, #16
 8007b6e:	46bd      	mov	sp, r7
 8007b70:	bd80      	pop	{r7, pc}

08007b72 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007b72:	b580      	push	{r7, lr}
 8007b74:	b084      	sub	sp, #16
 8007b76:	af00      	add	r7, sp, #0
 8007b78:	6078      	str	r0, [r7, #4]
 8007b7a:	460b      	mov	r3, r1
 8007b7c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007b84:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d101      	bne.n	8007b94 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007b90:	2303      	movs	r3, #3
 8007b92:	e015      	b.n	8007bc0 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007b94:	78fb      	ldrb	r3, [r7, #3]
 8007b96:	4619      	mov	r1, r3
 8007b98:	6878      	ldr	r0, [r7, #4]
 8007b9a:	f002 f88a 	bl	8009cb2 <USBD_LL_GetRxDataSize>
 8007b9e:	4602      	mov	r2, r0
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007bac:	68db      	ldr	r3, [r3, #12]
 8007bae:	68fa      	ldr	r2, [r7, #12]
 8007bb0:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8007bb4:	68fa      	ldr	r2, [r7, #12]
 8007bb6:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8007bba:	4611      	mov	r1, r2
 8007bbc:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8007bbe:	2300      	movs	r3, #0
}
 8007bc0:	4618      	mov	r0, r3
 8007bc2:	3710      	adds	r7, #16
 8007bc4:	46bd      	mov	sp, r7
 8007bc6:	bd80      	pop	{r7, pc}

08007bc8 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007bc8:	b580      	push	{r7, lr}
 8007bca:	b084      	sub	sp, #16
 8007bcc:	af00      	add	r7, sp, #0
 8007bce:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007bd6:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d101      	bne.n	8007be2 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8007bde:	2303      	movs	r3, #3
 8007be0:	e01b      	b.n	8007c1a <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d015      	beq.n	8007c18 <USBD_CDC_EP0_RxReady+0x50>
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8007bf2:	2bff      	cmp	r3, #255	; 0xff
 8007bf4:	d010      	beq.n	8007c18 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007bfc:	689b      	ldr	r3, [r3, #8]
 8007bfe:	68fa      	ldr	r2, [r7, #12]
 8007c00:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8007c04:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8007c06:	68fa      	ldr	r2, [r7, #12]
 8007c08:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007c0c:	b292      	uxth	r2, r2
 8007c0e:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	22ff      	movs	r2, #255	; 0xff
 8007c14:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8007c18:	2300      	movs	r3, #0
}
 8007c1a:	4618      	mov	r0, r3
 8007c1c:	3710      	adds	r7, #16
 8007c1e:	46bd      	mov	sp, r7
 8007c20:	bd80      	pop	{r7, pc}
	...

08007c24 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007c24:	b480      	push	{r7}
 8007c26:	b083      	sub	sp, #12
 8007c28:	af00      	add	r7, sp, #0
 8007c2a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	2243      	movs	r2, #67	; 0x43
 8007c30:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8007c32:	4b03      	ldr	r3, [pc, #12]	; (8007c40 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8007c34:	4618      	mov	r0, r3
 8007c36:	370c      	adds	r7, #12
 8007c38:	46bd      	mov	sp, r7
 8007c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c3e:	4770      	bx	lr
 8007c40:	200000b8 	.word	0x200000b8

08007c44 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007c44:	b480      	push	{r7}
 8007c46:	b083      	sub	sp, #12
 8007c48:	af00      	add	r7, sp, #0
 8007c4a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	2243      	movs	r2, #67	; 0x43
 8007c50:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8007c52:	4b03      	ldr	r3, [pc, #12]	; (8007c60 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8007c54:	4618      	mov	r0, r3
 8007c56:	370c      	adds	r7, #12
 8007c58:	46bd      	mov	sp, r7
 8007c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c5e:	4770      	bx	lr
 8007c60:	20000074 	.word	0x20000074

08007c64 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007c64:	b480      	push	{r7}
 8007c66:	b083      	sub	sp, #12
 8007c68:	af00      	add	r7, sp, #0
 8007c6a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	2243      	movs	r2, #67	; 0x43
 8007c70:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8007c72:	4b03      	ldr	r3, [pc, #12]	; (8007c80 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8007c74:	4618      	mov	r0, r3
 8007c76:	370c      	adds	r7, #12
 8007c78:	46bd      	mov	sp, r7
 8007c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c7e:	4770      	bx	lr
 8007c80:	200000fc 	.word	0x200000fc

08007c84 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007c84:	b480      	push	{r7}
 8007c86:	b083      	sub	sp, #12
 8007c88:	af00      	add	r7, sp, #0
 8007c8a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	220a      	movs	r2, #10
 8007c90:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8007c92:	4b03      	ldr	r3, [pc, #12]	; (8007ca0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007c94:	4618      	mov	r0, r3
 8007c96:	370c      	adds	r7, #12
 8007c98:	46bd      	mov	sp, r7
 8007c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c9e:	4770      	bx	lr
 8007ca0:	20000030 	.word	0x20000030

08007ca4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8007ca4:	b480      	push	{r7}
 8007ca6:	b083      	sub	sp, #12
 8007ca8:	af00      	add	r7, sp, #0
 8007caa:	6078      	str	r0, [r7, #4]
 8007cac:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8007cae:	683b      	ldr	r3, [r7, #0]
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d101      	bne.n	8007cb8 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8007cb4:	2303      	movs	r3, #3
 8007cb6:	e004      	b.n	8007cc2 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	683a      	ldr	r2, [r7, #0]
 8007cbc:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8007cc0:	2300      	movs	r3, #0
}
 8007cc2:	4618      	mov	r0, r3
 8007cc4:	370c      	adds	r7, #12
 8007cc6:	46bd      	mov	sp, r7
 8007cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ccc:	4770      	bx	lr

08007cce <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8007cce:	b480      	push	{r7}
 8007cd0:	b087      	sub	sp, #28
 8007cd2:	af00      	add	r7, sp, #0
 8007cd4:	60f8      	str	r0, [r7, #12]
 8007cd6:	60b9      	str	r1, [r7, #8]
 8007cd8:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007ce0:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8007ce2:	697b      	ldr	r3, [r7, #20]
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d101      	bne.n	8007cec <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8007ce8:	2303      	movs	r3, #3
 8007cea:	e008      	b.n	8007cfe <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8007cec:	697b      	ldr	r3, [r7, #20]
 8007cee:	68ba      	ldr	r2, [r7, #8]
 8007cf0:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8007cf4:	697b      	ldr	r3, [r7, #20]
 8007cf6:	687a      	ldr	r2, [r7, #4]
 8007cf8:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8007cfc:	2300      	movs	r3, #0
}
 8007cfe:	4618      	mov	r0, r3
 8007d00:	371c      	adds	r7, #28
 8007d02:	46bd      	mov	sp, r7
 8007d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d08:	4770      	bx	lr

08007d0a <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8007d0a:	b480      	push	{r7}
 8007d0c:	b085      	sub	sp, #20
 8007d0e:	af00      	add	r7, sp, #0
 8007d10:	6078      	str	r0, [r7, #4]
 8007d12:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007d1a:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d101      	bne.n	8007d26 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 8007d22:	2303      	movs	r3, #3
 8007d24:	e004      	b.n	8007d30 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	683a      	ldr	r2, [r7, #0]
 8007d2a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8007d2e:	2300      	movs	r3, #0
}
 8007d30:	4618      	mov	r0, r3
 8007d32:	3714      	adds	r7, #20
 8007d34:	46bd      	mov	sp, r7
 8007d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d3a:	4770      	bx	lr

08007d3c <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8007d3c:	b580      	push	{r7, lr}
 8007d3e:	b084      	sub	sp, #16
 8007d40:	af00      	add	r7, sp, #0
 8007d42:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007d4a:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8007d4c:	2301      	movs	r3, #1
 8007d4e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d101      	bne.n	8007d5e <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007d5a:	2303      	movs	r3, #3
 8007d5c:	e01a      	b.n	8007d94 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 8007d5e:	68bb      	ldr	r3, [r7, #8]
 8007d60:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d114      	bne.n	8007d92 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8007d68:	68bb      	ldr	r3, [r7, #8]
 8007d6a:	2201      	movs	r2, #1
 8007d6c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8007d70:	68bb      	ldr	r3, [r7, #8]
 8007d72:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8007d7a:	68bb      	ldr	r3, [r7, #8]
 8007d7c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8007d80:	68bb      	ldr	r3, [r7, #8]
 8007d82:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8007d86:	2181      	movs	r1, #129	; 0x81
 8007d88:	6878      	ldr	r0, [r7, #4]
 8007d8a:	f001 ff50 	bl	8009c2e <USBD_LL_Transmit>

    ret = USBD_OK;
 8007d8e:	2300      	movs	r3, #0
 8007d90:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8007d92:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d94:	4618      	mov	r0, r3
 8007d96:	3710      	adds	r7, #16
 8007d98:	46bd      	mov	sp, r7
 8007d9a:	bd80      	pop	{r7, pc}

08007d9c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007d9c:	b580      	push	{r7, lr}
 8007d9e:	b084      	sub	sp, #16
 8007da0:	af00      	add	r7, sp, #0
 8007da2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007daa:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d101      	bne.n	8007dba <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8007db6:	2303      	movs	r3, #3
 8007db8:	e016      	b.n	8007de8 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	7c1b      	ldrb	r3, [r3, #16]
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d109      	bne.n	8007dd6 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007dc8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007dcc:	2101      	movs	r1, #1
 8007dce:	6878      	ldr	r0, [r7, #4]
 8007dd0:	f001 ff4e 	bl	8009c70 <USBD_LL_PrepareReceive>
 8007dd4:	e007      	b.n	8007de6 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007ddc:	2340      	movs	r3, #64	; 0x40
 8007dde:	2101      	movs	r1, #1
 8007de0:	6878      	ldr	r0, [r7, #4]
 8007de2:	f001 ff45 	bl	8009c70 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007de6:	2300      	movs	r3, #0
}
 8007de8:	4618      	mov	r0, r3
 8007dea:	3710      	adds	r7, #16
 8007dec:	46bd      	mov	sp, r7
 8007dee:	bd80      	pop	{r7, pc}

08007df0 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007df0:	b580      	push	{r7, lr}
 8007df2:	b086      	sub	sp, #24
 8007df4:	af00      	add	r7, sp, #0
 8007df6:	60f8      	str	r0, [r7, #12]
 8007df8:	60b9      	str	r1, [r7, #8]
 8007dfa:	4613      	mov	r3, r2
 8007dfc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d101      	bne.n	8007e08 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8007e04:	2303      	movs	r3, #3
 8007e06:	e01f      	b.n	8007e48 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	2200      	movs	r2, #0
 8007e0c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	2200      	movs	r2, #0
 8007e14:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	2200      	movs	r2, #0
 8007e1c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007e20:	68bb      	ldr	r3, [r7, #8]
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d003      	beq.n	8007e2e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	68ba      	ldr	r2, [r7, #8]
 8007e2a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	2201      	movs	r2, #1
 8007e32:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	79fa      	ldrb	r2, [r7, #7]
 8007e3a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007e3c:	68f8      	ldr	r0, [r7, #12]
 8007e3e:	f001 fdc1 	bl	80099c4 <USBD_LL_Init>
 8007e42:	4603      	mov	r3, r0
 8007e44:	75fb      	strb	r3, [r7, #23]

  return ret;
 8007e46:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e48:	4618      	mov	r0, r3
 8007e4a:	3718      	adds	r7, #24
 8007e4c:	46bd      	mov	sp, r7
 8007e4e:	bd80      	pop	{r7, pc}

08007e50 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007e50:	b580      	push	{r7, lr}
 8007e52:	b084      	sub	sp, #16
 8007e54:	af00      	add	r7, sp, #0
 8007e56:	6078      	str	r0, [r7, #4]
 8007e58:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007e5a:	2300      	movs	r3, #0
 8007e5c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8007e5e:	683b      	ldr	r3, [r7, #0]
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d101      	bne.n	8007e68 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8007e64:	2303      	movs	r3, #3
 8007e66:	e016      	b.n	8007e96 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	683a      	ldr	r2, [r7, #0]
 8007e6c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d00b      	beq.n	8007e94 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e84:	f107 020e 	add.w	r2, r7, #14
 8007e88:	4610      	mov	r0, r2
 8007e8a:	4798      	blx	r3
 8007e8c:	4602      	mov	r2, r0
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8007e94:	2300      	movs	r3, #0
}
 8007e96:	4618      	mov	r0, r3
 8007e98:	3710      	adds	r7, #16
 8007e9a:	46bd      	mov	sp, r7
 8007e9c:	bd80      	pop	{r7, pc}

08007e9e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007e9e:	b580      	push	{r7, lr}
 8007ea0:	b082      	sub	sp, #8
 8007ea2:	af00      	add	r7, sp, #0
 8007ea4:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007ea6:	6878      	ldr	r0, [r7, #4]
 8007ea8:	f001 fdd8 	bl	8009a5c <USBD_LL_Start>
 8007eac:	4603      	mov	r3, r0
}
 8007eae:	4618      	mov	r0, r3
 8007eb0:	3708      	adds	r7, #8
 8007eb2:	46bd      	mov	sp, r7
 8007eb4:	bd80      	pop	{r7, pc}

08007eb6 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8007eb6:	b480      	push	{r7}
 8007eb8:	b083      	sub	sp, #12
 8007eba:	af00      	add	r7, sp, #0
 8007ebc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007ebe:	2300      	movs	r3, #0
}
 8007ec0:	4618      	mov	r0, r3
 8007ec2:	370c      	adds	r7, #12
 8007ec4:	46bd      	mov	sp, r7
 8007ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eca:	4770      	bx	lr

08007ecc <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007ecc:	b580      	push	{r7, lr}
 8007ece:	b084      	sub	sp, #16
 8007ed0:	af00      	add	r7, sp, #0
 8007ed2:	6078      	str	r0, [r7, #4]
 8007ed4:	460b      	mov	r3, r1
 8007ed6:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8007ed8:	2303      	movs	r3, #3
 8007eda:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d009      	beq.n	8007efa <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	78fa      	ldrb	r2, [r7, #3]
 8007ef0:	4611      	mov	r1, r2
 8007ef2:	6878      	ldr	r0, [r7, #4]
 8007ef4:	4798      	blx	r3
 8007ef6:	4603      	mov	r3, r0
 8007ef8:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8007efa:	7bfb      	ldrb	r3, [r7, #15]
}
 8007efc:	4618      	mov	r0, r3
 8007efe:	3710      	adds	r7, #16
 8007f00:	46bd      	mov	sp, r7
 8007f02:	bd80      	pop	{r7, pc}

08007f04 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007f04:	b580      	push	{r7, lr}
 8007f06:	b082      	sub	sp, #8
 8007f08:	af00      	add	r7, sp, #0
 8007f0a:	6078      	str	r0, [r7, #4]
 8007f0c:	460b      	mov	r3, r1
 8007f0e:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d007      	beq.n	8007f2a <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f20:	685b      	ldr	r3, [r3, #4]
 8007f22:	78fa      	ldrb	r2, [r7, #3]
 8007f24:	4611      	mov	r1, r2
 8007f26:	6878      	ldr	r0, [r7, #4]
 8007f28:	4798      	blx	r3
  }

  return USBD_OK;
 8007f2a:	2300      	movs	r3, #0
}
 8007f2c:	4618      	mov	r0, r3
 8007f2e:	3708      	adds	r7, #8
 8007f30:	46bd      	mov	sp, r7
 8007f32:	bd80      	pop	{r7, pc}

08007f34 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007f34:	b580      	push	{r7, lr}
 8007f36:	b084      	sub	sp, #16
 8007f38:	af00      	add	r7, sp, #0
 8007f3a:	6078      	str	r0, [r7, #4]
 8007f3c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007f44:	6839      	ldr	r1, [r7, #0]
 8007f46:	4618      	mov	r0, r3
 8007f48:	f000 ff90 	bl	8008e6c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	2201      	movs	r2, #1
 8007f50:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8007f5a:	461a      	mov	r2, r3
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007f68:	f003 031f 	and.w	r3, r3, #31
 8007f6c:	2b02      	cmp	r3, #2
 8007f6e:	d01a      	beq.n	8007fa6 <USBD_LL_SetupStage+0x72>
 8007f70:	2b02      	cmp	r3, #2
 8007f72:	d822      	bhi.n	8007fba <USBD_LL_SetupStage+0x86>
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d002      	beq.n	8007f7e <USBD_LL_SetupStage+0x4a>
 8007f78:	2b01      	cmp	r3, #1
 8007f7a:	d00a      	beq.n	8007f92 <USBD_LL_SetupStage+0x5e>
 8007f7c:	e01d      	b.n	8007fba <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007f84:	4619      	mov	r1, r3
 8007f86:	6878      	ldr	r0, [r7, #4]
 8007f88:	f000 fa62 	bl	8008450 <USBD_StdDevReq>
 8007f8c:	4603      	mov	r3, r0
 8007f8e:	73fb      	strb	r3, [r7, #15]
      break;
 8007f90:	e020      	b.n	8007fd4 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007f98:	4619      	mov	r1, r3
 8007f9a:	6878      	ldr	r0, [r7, #4]
 8007f9c:	f000 fac6 	bl	800852c <USBD_StdItfReq>
 8007fa0:	4603      	mov	r3, r0
 8007fa2:	73fb      	strb	r3, [r7, #15]
      break;
 8007fa4:	e016      	b.n	8007fd4 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007fac:	4619      	mov	r1, r3
 8007fae:	6878      	ldr	r0, [r7, #4]
 8007fb0:	f000 fb05 	bl	80085be <USBD_StdEPReq>
 8007fb4:	4603      	mov	r3, r0
 8007fb6:	73fb      	strb	r3, [r7, #15]
      break;
 8007fb8:	e00c      	b.n	8007fd4 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007fc0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007fc4:	b2db      	uxtb	r3, r3
 8007fc6:	4619      	mov	r1, r3
 8007fc8:	6878      	ldr	r0, [r7, #4]
 8007fca:	f001 fda7 	bl	8009b1c <USBD_LL_StallEP>
 8007fce:	4603      	mov	r3, r0
 8007fd0:	73fb      	strb	r3, [r7, #15]
      break;
 8007fd2:	bf00      	nop
  }

  return ret;
 8007fd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fd6:	4618      	mov	r0, r3
 8007fd8:	3710      	adds	r7, #16
 8007fda:	46bd      	mov	sp, r7
 8007fdc:	bd80      	pop	{r7, pc}

08007fde <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007fde:	b580      	push	{r7, lr}
 8007fe0:	b086      	sub	sp, #24
 8007fe2:	af00      	add	r7, sp, #0
 8007fe4:	60f8      	str	r0, [r7, #12]
 8007fe6:	460b      	mov	r3, r1
 8007fe8:	607a      	str	r2, [r7, #4]
 8007fea:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8007fec:	7afb      	ldrb	r3, [r7, #11]
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d138      	bne.n	8008064 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8007ff8:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008000:	2b03      	cmp	r3, #3
 8008002:	d14a      	bne.n	800809a <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8008004:	693b      	ldr	r3, [r7, #16]
 8008006:	689a      	ldr	r2, [r3, #8]
 8008008:	693b      	ldr	r3, [r7, #16]
 800800a:	68db      	ldr	r3, [r3, #12]
 800800c:	429a      	cmp	r2, r3
 800800e:	d913      	bls.n	8008038 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008010:	693b      	ldr	r3, [r7, #16]
 8008012:	689a      	ldr	r2, [r3, #8]
 8008014:	693b      	ldr	r3, [r7, #16]
 8008016:	68db      	ldr	r3, [r3, #12]
 8008018:	1ad2      	subs	r2, r2, r3
 800801a:	693b      	ldr	r3, [r7, #16]
 800801c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800801e:	693b      	ldr	r3, [r7, #16]
 8008020:	68da      	ldr	r2, [r3, #12]
 8008022:	693b      	ldr	r3, [r7, #16]
 8008024:	689b      	ldr	r3, [r3, #8]
 8008026:	4293      	cmp	r3, r2
 8008028:	bf28      	it	cs
 800802a:	4613      	movcs	r3, r2
 800802c:	461a      	mov	r2, r3
 800802e:	6879      	ldr	r1, [r7, #4]
 8008030:	68f8      	ldr	r0, [r7, #12]
 8008032:	f001 f80f 	bl	8009054 <USBD_CtlContinueRx>
 8008036:	e030      	b.n	800809a <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800803e:	b2db      	uxtb	r3, r3
 8008040:	2b03      	cmp	r3, #3
 8008042:	d10b      	bne.n	800805c <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800804a:	691b      	ldr	r3, [r3, #16]
 800804c:	2b00      	cmp	r3, #0
 800804e:	d005      	beq.n	800805c <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008056:	691b      	ldr	r3, [r3, #16]
 8008058:	68f8      	ldr	r0, [r7, #12]
 800805a:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800805c:	68f8      	ldr	r0, [r7, #12]
 800805e:	f001 f80a 	bl	8009076 <USBD_CtlSendStatus>
 8008062:	e01a      	b.n	800809a <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800806a:	b2db      	uxtb	r3, r3
 800806c:	2b03      	cmp	r3, #3
 800806e:	d114      	bne.n	800809a <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008076:	699b      	ldr	r3, [r3, #24]
 8008078:	2b00      	cmp	r3, #0
 800807a:	d00e      	beq.n	800809a <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008082:	699b      	ldr	r3, [r3, #24]
 8008084:	7afa      	ldrb	r2, [r7, #11]
 8008086:	4611      	mov	r1, r2
 8008088:	68f8      	ldr	r0, [r7, #12]
 800808a:	4798      	blx	r3
 800808c:	4603      	mov	r3, r0
 800808e:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8008090:	7dfb      	ldrb	r3, [r7, #23]
 8008092:	2b00      	cmp	r3, #0
 8008094:	d001      	beq.n	800809a <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8008096:	7dfb      	ldrb	r3, [r7, #23]
 8008098:	e000      	b.n	800809c <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800809a:	2300      	movs	r3, #0
}
 800809c:	4618      	mov	r0, r3
 800809e:	3718      	adds	r7, #24
 80080a0:	46bd      	mov	sp, r7
 80080a2:	bd80      	pop	{r7, pc}

080080a4 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80080a4:	b580      	push	{r7, lr}
 80080a6:	b086      	sub	sp, #24
 80080a8:	af00      	add	r7, sp, #0
 80080aa:	60f8      	str	r0, [r7, #12]
 80080ac:	460b      	mov	r3, r1
 80080ae:	607a      	str	r2, [r7, #4]
 80080b0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80080b2:	7afb      	ldrb	r3, [r7, #11]
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d16b      	bne.n	8008190 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	3314      	adds	r3, #20
 80080bc:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80080c4:	2b02      	cmp	r3, #2
 80080c6:	d156      	bne.n	8008176 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 80080c8:	693b      	ldr	r3, [r7, #16]
 80080ca:	689a      	ldr	r2, [r3, #8]
 80080cc:	693b      	ldr	r3, [r7, #16]
 80080ce:	68db      	ldr	r3, [r3, #12]
 80080d0:	429a      	cmp	r2, r3
 80080d2:	d914      	bls.n	80080fe <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80080d4:	693b      	ldr	r3, [r7, #16]
 80080d6:	689a      	ldr	r2, [r3, #8]
 80080d8:	693b      	ldr	r3, [r7, #16]
 80080da:	68db      	ldr	r3, [r3, #12]
 80080dc:	1ad2      	subs	r2, r2, r3
 80080de:	693b      	ldr	r3, [r7, #16]
 80080e0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80080e2:	693b      	ldr	r3, [r7, #16]
 80080e4:	689b      	ldr	r3, [r3, #8]
 80080e6:	461a      	mov	r2, r3
 80080e8:	6879      	ldr	r1, [r7, #4]
 80080ea:	68f8      	ldr	r0, [r7, #12]
 80080ec:	f000 ff84 	bl	8008ff8 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80080f0:	2300      	movs	r3, #0
 80080f2:	2200      	movs	r2, #0
 80080f4:	2100      	movs	r1, #0
 80080f6:	68f8      	ldr	r0, [r7, #12]
 80080f8:	f001 fdba 	bl	8009c70 <USBD_LL_PrepareReceive>
 80080fc:	e03b      	b.n	8008176 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80080fe:	693b      	ldr	r3, [r7, #16]
 8008100:	68da      	ldr	r2, [r3, #12]
 8008102:	693b      	ldr	r3, [r7, #16]
 8008104:	689b      	ldr	r3, [r3, #8]
 8008106:	429a      	cmp	r2, r3
 8008108:	d11c      	bne.n	8008144 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800810a:	693b      	ldr	r3, [r7, #16]
 800810c:	685a      	ldr	r2, [r3, #4]
 800810e:	693b      	ldr	r3, [r7, #16]
 8008110:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8008112:	429a      	cmp	r2, r3
 8008114:	d316      	bcc.n	8008144 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8008116:	693b      	ldr	r3, [r7, #16]
 8008118:	685a      	ldr	r2, [r3, #4]
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008120:	429a      	cmp	r2, r3
 8008122:	d20f      	bcs.n	8008144 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008124:	2200      	movs	r2, #0
 8008126:	2100      	movs	r1, #0
 8008128:	68f8      	ldr	r0, [r7, #12]
 800812a:	f000 ff65 	bl	8008ff8 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	2200      	movs	r2, #0
 8008132:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008136:	2300      	movs	r3, #0
 8008138:	2200      	movs	r2, #0
 800813a:	2100      	movs	r1, #0
 800813c:	68f8      	ldr	r0, [r7, #12]
 800813e:	f001 fd97 	bl	8009c70 <USBD_LL_PrepareReceive>
 8008142:	e018      	b.n	8008176 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800814a:	b2db      	uxtb	r3, r3
 800814c:	2b03      	cmp	r3, #3
 800814e:	d10b      	bne.n	8008168 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008156:	68db      	ldr	r3, [r3, #12]
 8008158:	2b00      	cmp	r3, #0
 800815a:	d005      	beq.n	8008168 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008162:	68db      	ldr	r3, [r3, #12]
 8008164:	68f8      	ldr	r0, [r7, #12]
 8008166:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008168:	2180      	movs	r1, #128	; 0x80
 800816a:	68f8      	ldr	r0, [r7, #12]
 800816c:	f001 fcd6 	bl	8009b1c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8008170:	68f8      	ldr	r0, [r7, #12]
 8008172:	f000 ff93 	bl	800909c <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800817c:	2b01      	cmp	r3, #1
 800817e:	d122      	bne.n	80081c6 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8008180:	68f8      	ldr	r0, [r7, #12]
 8008182:	f7ff fe98 	bl	8007eb6 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	2200      	movs	r2, #0
 800818a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800818e:	e01a      	b.n	80081c6 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008196:	b2db      	uxtb	r3, r3
 8008198:	2b03      	cmp	r3, #3
 800819a:	d114      	bne.n	80081c6 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80081a2:	695b      	ldr	r3, [r3, #20]
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d00e      	beq.n	80081c6 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80081ae:	695b      	ldr	r3, [r3, #20]
 80081b0:	7afa      	ldrb	r2, [r7, #11]
 80081b2:	4611      	mov	r1, r2
 80081b4:	68f8      	ldr	r0, [r7, #12]
 80081b6:	4798      	blx	r3
 80081b8:	4603      	mov	r3, r0
 80081ba:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 80081bc:	7dfb      	ldrb	r3, [r7, #23]
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d001      	beq.n	80081c6 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 80081c2:	7dfb      	ldrb	r3, [r7, #23]
 80081c4:	e000      	b.n	80081c8 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 80081c6:	2300      	movs	r3, #0
}
 80081c8:	4618      	mov	r0, r3
 80081ca:	3718      	adds	r7, #24
 80081cc:	46bd      	mov	sp, r7
 80081ce:	bd80      	pop	{r7, pc}

080081d0 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80081d0:	b580      	push	{r7, lr}
 80081d2:	b082      	sub	sp, #8
 80081d4:	af00      	add	r7, sp, #0
 80081d6:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	2201      	movs	r2, #1
 80081dc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	2200      	movs	r2, #0
 80081e4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	2200      	movs	r2, #0
 80081ec:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	2200      	movs	r2, #0
 80081f2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d101      	bne.n	8008204 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8008200:	2303      	movs	r3, #3
 8008202:	e02f      	b.n	8008264 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800820a:	2b00      	cmp	r3, #0
 800820c:	d00f      	beq.n	800822e <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008214:	685b      	ldr	r3, [r3, #4]
 8008216:	2b00      	cmp	r3, #0
 8008218:	d009      	beq.n	800822e <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008220:	685b      	ldr	r3, [r3, #4]
 8008222:	687a      	ldr	r2, [r7, #4]
 8008224:	6852      	ldr	r2, [r2, #4]
 8008226:	b2d2      	uxtb	r2, r2
 8008228:	4611      	mov	r1, r2
 800822a:	6878      	ldr	r0, [r7, #4]
 800822c:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800822e:	2340      	movs	r3, #64	; 0x40
 8008230:	2200      	movs	r2, #0
 8008232:	2100      	movs	r1, #0
 8008234:	6878      	ldr	r0, [r7, #4]
 8008236:	f001 fc2c 	bl	8009a92 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	2201      	movs	r2, #1
 800823e:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	2240      	movs	r2, #64	; 0x40
 8008246:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800824a:	2340      	movs	r3, #64	; 0x40
 800824c:	2200      	movs	r2, #0
 800824e:	2180      	movs	r1, #128	; 0x80
 8008250:	6878      	ldr	r0, [r7, #4]
 8008252:	f001 fc1e 	bl	8009a92 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	2201      	movs	r2, #1
 800825a:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	2240      	movs	r2, #64	; 0x40
 8008260:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8008262:	2300      	movs	r3, #0
}
 8008264:	4618      	mov	r0, r3
 8008266:	3708      	adds	r7, #8
 8008268:	46bd      	mov	sp, r7
 800826a:	bd80      	pop	{r7, pc}

0800826c <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800826c:	b480      	push	{r7}
 800826e:	b083      	sub	sp, #12
 8008270:	af00      	add	r7, sp, #0
 8008272:	6078      	str	r0, [r7, #4]
 8008274:	460b      	mov	r3, r1
 8008276:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	78fa      	ldrb	r2, [r7, #3]
 800827c:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800827e:	2300      	movs	r3, #0
}
 8008280:	4618      	mov	r0, r3
 8008282:	370c      	adds	r7, #12
 8008284:	46bd      	mov	sp, r7
 8008286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800828a:	4770      	bx	lr

0800828c <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800828c:	b480      	push	{r7}
 800828e:	b083      	sub	sp, #12
 8008290:	af00      	add	r7, sp, #0
 8008292:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800829a:	b2da      	uxtb	r2, r3
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	2204      	movs	r2, #4
 80082a6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80082aa:	2300      	movs	r3, #0
}
 80082ac:	4618      	mov	r0, r3
 80082ae:	370c      	adds	r7, #12
 80082b0:	46bd      	mov	sp, r7
 80082b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b6:	4770      	bx	lr

080082b8 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80082b8:	b480      	push	{r7}
 80082ba:	b083      	sub	sp, #12
 80082bc:	af00      	add	r7, sp, #0
 80082be:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80082c6:	b2db      	uxtb	r3, r3
 80082c8:	2b04      	cmp	r3, #4
 80082ca:	d106      	bne.n	80082da <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80082d2:	b2da      	uxtb	r2, r3
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80082da:	2300      	movs	r3, #0
}
 80082dc:	4618      	mov	r0, r3
 80082de:	370c      	adds	r7, #12
 80082e0:	46bd      	mov	sp, r7
 80082e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082e6:	4770      	bx	lr

080082e8 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80082e8:	b580      	push	{r7, lr}
 80082ea:	b082      	sub	sp, #8
 80082ec:	af00      	add	r7, sp, #0
 80082ee:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d101      	bne.n	80082fe <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 80082fa:	2303      	movs	r3, #3
 80082fc:	e012      	b.n	8008324 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008304:	b2db      	uxtb	r3, r3
 8008306:	2b03      	cmp	r3, #3
 8008308:	d10b      	bne.n	8008322 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008310:	69db      	ldr	r3, [r3, #28]
 8008312:	2b00      	cmp	r3, #0
 8008314:	d005      	beq.n	8008322 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800831c:	69db      	ldr	r3, [r3, #28]
 800831e:	6878      	ldr	r0, [r7, #4]
 8008320:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008322:	2300      	movs	r3, #0
}
 8008324:	4618      	mov	r0, r3
 8008326:	3708      	adds	r7, #8
 8008328:	46bd      	mov	sp, r7
 800832a:	bd80      	pop	{r7, pc}

0800832c <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800832c:	b580      	push	{r7, lr}
 800832e:	b082      	sub	sp, #8
 8008330:	af00      	add	r7, sp, #0
 8008332:	6078      	str	r0, [r7, #4]
 8008334:	460b      	mov	r3, r1
 8008336:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800833e:	2b00      	cmp	r3, #0
 8008340:	d101      	bne.n	8008346 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 8008342:	2303      	movs	r3, #3
 8008344:	e014      	b.n	8008370 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800834c:	b2db      	uxtb	r3, r3
 800834e:	2b03      	cmp	r3, #3
 8008350:	d10d      	bne.n	800836e <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008358:	6a1b      	ldr	r3, [r3, #32]
 800835a:	2b00      	cmp	r3, #0
 800835c:	d007      	beq.n	800836e <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008364:	6a1b      	ldr	r3, [r3, #32]
 8008366:	78fa      	ldrb	r2, [r7, #3]
 8008368:	4611      	mov	r1, r2
 800836a:	6878      	ldr	r0, [r7, #4]
 800836c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800836e:	2300      	movs	r3, #0
}
 8008370:	4618      	mov	r0, r3
 8008372:	3708      	adds	r7, #8
 8008374:	46bd      	mov	sp, r7
 8008376:	bd80      	pop	{r7, pc}

08008378 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8008378:	b580      	push	{r7, lr}
 800837a:	b082      	sub	sp, #8
 800837c:	af00      	add	r7, sp, #0
 800837e:	6078      	str	r0, [r7, #4]
 8008380:	460b      	mov	r3, r1
 8008382:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800838a:	2b00      	cmp	r3, #0
 800838c:	d101      	bne.n	8008392 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 800838e:	2303      	movs	r3, #3
 8008390:	e014      	b.n	80083bc <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008398:	b2db      	uxtb	r3, r3
 800839a:	2b03      	cmp	r3, #3
 800839c:	d10d      	bne.n	80083ba <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80083a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d007      	beq.n	80083ba <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80083b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083b2:	78fa      	ldrb	r2, [r7, #3]
 80083b4:	4611      	mov	r1, r2
 80083b6:	6878      	ldr	r0, [r7, #4]
 80083b8:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80083ba:	2300      	movs	r3, #0
}
 80083bc:	4618      	mov	r0, r3
 80083be:	3708      	adds	r7, #8
 80083c0:	46bd      	mov	sp, r7
 80083c2:	bd80      	pop	{r7, pc}

080083c4 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80083c4:	b480      	push	{r7}
 80083c6:	b083      	sub	sp, #12
 80083c8:	af00      	add	r7, sp, #0
 80083ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80083cc:	2300      	movs	r3, #0
}
 80083ce:	4618      	mov	r0, r3
 80083d0:	370c      	adds	r7, #12
 80083d2:	46bd      	mov	sp, r7
 80083d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d8:	4770      	bx	lr

080083da <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80083da:	b580      	push	{r7, lr}
 80083dc:	b082      	sub	sp, #8
 80083de:	af00      	add	r7, sp, #0
 80083e0:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	2201      	movs	r2, #1
 80083e6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d009      	beq.n	8008408 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80083fa:	685b      	ldr	r3, [r3, #4]
 80083fc:	687a      	ldr	r2, [r7, #4]
 80083fe:	6852      	ldr	r2, [r2, #4]
 8008400:	b2d2      	uxtb	r2, r2
 8008402:	4611      	mov	r1, r2
 8008404:	6878      	ldr	r0, [r7, #4]
 8008406:	4798      	blx	r3
  }

  return USBD_OK;
 8008408:	2300      	movs	r3, #0
}
 800840a:	4618      	mov	r0, r3
 800840c:	3708      	adds	r7, #8
 800840e:	46bd      	mov	sp, r7
 8008410:	bd80      	pop	{r7, pc}

08008412 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8008412:	b480      	push	{r7}
 8008414:	b087      	sub	sp, #28
 8008416:	af00      	add	r7, sp, #0
 8008418:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800841e:	697b      	ldr	r3, [r7, #20]
 8008420:	781b      	ldrb	r3, [r3, #0]
 8008422:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8008424:	697b      	ldr	r3, [r7, #20]
 8008426:	3301      	adds	r3, #1
 8008428:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800842a:	697b      	ldr	r3, [r7, #20]
 800842c:	781b      	ldrb	r3, [r3, #0]
 800842e:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8008430:	8a3b      	ldrh	r3, [r7, #16]
 8008432:	021b      	lsls	r3, r3, #8
 8008434:	b21a      	sxth	r2, r3
 8008436:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800843a:	4313      	orrs	r3, r2
 800843c:	b21b      	sxth	r3, r3
 800843e:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8008440:	89fb      	ldrh	r3, [r7, #14]
}
 8008442:	4618      	mov	r0, r3
 8008444:	371c      	adds	r7, #28
 8008446:	46bd      	mov	sp, r7
 8008448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800844c:	4770      	bx	lr
	...

08008450 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008450:	b580      	push	{r7, lr}
 8008452:	b084      	sub	sp, #16
 8008454:	af00      	add	r7, sp, #0
 8008456:	6078      	str	r0, [r7, #4]
 8008458:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800845a:	2300      	movs	r3, #0
 800845c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800845e:	683b      	ldr	r3, [r7, #0]
 8008460:	781b      	ldrb	r3, [r3, #0]
 8008462:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008466:	2b40      	cmp	r3, #64	; 0x40
 8008468:	d005      	beq.n	8008476 <USBD_StdDevReq+0x26>
 800846a:	2b40      	cmp	r3, #64	; 0x40
 800846c:	d853      	bhi.n	8008516 <USBD_StdDevReq+0xc6>
 800846e:	2b00      	cmp	r3, #0
 8008470:	d00b      	beq.n	800848a <USBD_StdDevReq+0x3a>
 8008472:	2b20      	cmp	r3, #32
 8008474:	d14f      	bne.n	8008516 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800847c:	689b      	ldr	r3, [r3, #8]
 800847e:	6839      	ldr	r1, [r7, #0]
 8008480:	6878      	ldr	r0, [r7, #4]
 8008482:	4798      	blx	r3
 8008484:	4603      	mov	r3, r0
 8008486:	73fb      	strb	r3, [r7, #15]
      break;
 8008488:	e04a      	b.n	8008520 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800848a:	683b      	ldr	r3, [r7, #0]
 800848c:	785b      	ldrb	r3, [r3, #1]
 800848e:	2b09      	cmp	r3, #9
 8008490:	d83b      	bhi.n	800850a <USBD_StdDevReq+0xba>
 8008492:	a201      	add	r2, pc, #4	; (adr r2, 8008498 <USBD_StdDevReq+0x48>)
 8008494:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008498:	080084ed 	.word	0x080084ed
 800849c:	08008501 	.word	0x08008501
 80084a0:	0800850b 	.word	0x0800850b
 80084a4:	080084f7 	.word	0x080084f7
 80084a8:	0800850b 	.word	0x0800850b
 80084ac:	080084cb 	.word	0x080084cb
 80084b0:	080084c1 	.word	0x080084c1
 80084b4:	0800850b 	.word	0x0800850b
 80084b8:	080084e3 	.word	0x080084e3
 80084bc:	080084d5 	.word	0x080084d5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80084c0:	6839      	ldr	r1, [r7, #0]
 80084c2:	6878      	ldr	r0, [r7, #4]
 80084c4:	f000 f9de 	bl	8008884 <USBD_GetDescriptor>
          break;
 80084c8:	e024      	b.n	8008514 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80084ca:	6839      	ldr	r1, [r7, #0]
 80084cc:	6878      	ldr	r0, [r7, #4]
 80084ce:	f000 fb43 	bl	8008b58 <USBD_SetAddress>
          break;
 80084d2:	e01f      	b.n	8008514 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80084d4:	6839      	ldr	r1, [r7, #0]
 80084d6:	6878      	ldr	r0, [r7, #4]
 80084d8:	f000 fb82 	bl	8008be0 <USBD_SetConfig>
 80084dc:	4603      	mov	r3, r0
 80084de:	73fb      	strb	r3, [r7, #15]
          break;
 80084e0:	e018      	b.n	8008514 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80084e2:	6839      	ldr	r1, [r7, #0]
 80084e4:	6878      	ldr	r0, [r7, #4]
 80084e6:	f000 fc21 	bl	8008d2c <USBD_GetConfig>
          break;
 80084ea:	e013      	b.n	8008514 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80084ec:	6839      	ldr	r1, [r7, #0]
 80084ee:	6878      	ldr	r0, [r7, #4]
 80084f0:	f000 fc52 	bl	8008d98 <USBD_GetStatus>
          break;
 80084f4:	e00e      	b.n	8008514 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80084f6:	6839      	ldr	r1, [r7, #0]
 80084f8:	6878      	ldr	r0, [r7, #4]
 80084fa:	f000 fc81 	bl	8008e00 <USBD_SetFeature>
          break;
 80084fe:	e009      	b.n	8008514 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008500:	6839      	ldr	r1, [r7, #0]
 8008502:	6878      	ldr	r0, [r7, #4]
 8008504:	f000 fc90 	bl	8008e28 <USBD_ClrFeature>
          break;
 8008508:	e004      	b.n	8008514 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800850a:	6839      	ldr	r1, [r7, #0]
 800850c:	6878      	ldr	r0, [r7, #4]
 800850e:	f000 fce7 	bl	8008ee0 <USBD_CtlError>
          break;
 8008512:	bf00      	nop
      }
      break;
 8008514:	e004      	b.n	8008520 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8008516:	6839      	ldr	r1, [r7, #0]
 8008518:	6878      	ldr	r0, [r7, #4]
 800851a:	f000 fce1 	bl	8008ee0 <USBD_CtlError>
      break;
 800851e:	bf00      	nop
  }

  return ret;
 8008520:	7bfb      	ldrb	r3, [r7, #15]
}
 8008522:	4618      	mov	r0, r3
 8008524:	3710      	adds	r7, #16
 8008526:	46bd      	mov	sp, r7
 8008528:	bd80      	pop	{r7, pc}
 800852a:	bf00      	nop

0800852c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800852c:	b580      	push	{r7, lr}
 800852e:	b084      	sub	sp, #16
 8008530:	af00      	add	r7, sp, #0
 8008532:	6078      	str	r0, [r7, #4]
 8008534:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008536:	2300      	movs	r3, #0
 8008538:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800853a:	683b      	ldr	r3, [r7, #0]
 800853c:	781b      	ldrb	r3, [r3, #0]
 800853e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008542:	2b40      	cmp	r3, #64	; 0x40
 8008544:	d005      	beq.n	8008552 <USBD_StdItfReq+0x26>
 8008546:	2b40      	cmp	r3, #64	; 0x40
 8008548:	d82f      	bhi.n	80085aa <USBD_StdItfReq+0x7e>
 800854a:	2b00      	cmp	r3, #0
 800854c:	d001      	beq.n	8008552 <USBD_StdItfReq+0x26>
 800854e:	2b20      	cmp	r3, #32
 8008550:	d12b      	bne.n	80085aa <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008558:	b2db      	uxtb	r3, r3
 800855a:	3b01      	subs	r3, #1
 800855c:	2b02      	cmp	r3, #2
 800855e:	d81d      	bhi.n	800859c <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008560:	683b      	ldr	r3, [r7, #0]
 8008562:	889b      	ldrh	r3, [r3, #4]
 8008564:	b2db      	uxtb	r3, r3
 8008566:	2b01      	cmp	r3, #1
 8008568:	d813      	bhi.n	8008592 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008570:	689b      	ldr	r3, [r3, #8]
 8008572:	6839      	ldr	r1, [r7, #0]
 8008574:	6878      	ldr	r0, [r7, #4]
 8008576:	4798      	blx	r3
 8008578:	4603      	mov	r3, r0
 800857a:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800857c:	683b      	ldr	r3, [r7, #0]
 800857e:	88db      	ldrh	r3, [r3, #6]
 8008580:	2b00      	cmp	r3, #0
 8008582:	d110      	bne.n	80085a6 <USBD_StdItfReq+0x7a>
 8008584:	7bfb      	ldrb	r3, [r7, #15]
 8008586:	2b00      	cmp	r3, #0
 8008588:	d10d      	bne.n	80085a6 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800858a:	6878      	ldr	r0, [r7, #4]
 800858c:	f000 fd73 	bl	8009076 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008590:	e009      	b.n	80085a6 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8008592:	6839      	ldr	r1, [r7, #0]
 8008594:	6878      	ldr	r0, [r7, #4]
 8008596:	f000 fca3 	bl	8008ee0 <USBD_CtlError>
          break;
 800859a:	e004      	b.n	80085a6 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800859c:	6839      	ldr	r1, [r7, #0]
 800859e:	6878      	ldr	r0, [r7, #4]
 80085a0:	f000 fc9e 	bl	8008ee0 <USBD_CtlError>
          break;
 80085a4:	e000      	b.n	80085a8 <USBD_StdItfReq+0x7c>
          break;
 80085a6:	bf00      	nop
      }
      break;
 80085a8:	e004      	b.n	80085b4 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 80085aa:	6839      	ldr	r1, [r7, #0]
 80085ac:	6878      	ldr	r0, [r7, #4]
 80085ae:	f000 fc97 	bl	8008ee0 <USBD_CtlError>
      break;
 80085b2:	bf00      	nop
  }

  return ret;
 80085b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80085b6:	4618      	mov	r0, r3
 80085b8:	3710      	adds	r7, #16
 80085ba:	46bd      	mov	sp, r7
 80085bc:	bd80      	pop	{r7, pc}

080085be <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80085be:	b580      	push	{r7, lr}
 80085c0:	b084      	sub	sp, #16
 80085c2:	af00      	add	r7, sp, #0
 80085c4:	6078      	str	r0, [r7, #4]
 80085c6:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80085c8:	2300      	movs	r3, #0
 80085ca:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 80085cc:	683b      	ldr	r3, [r7, #0]
 80085ce:	889b      	ldrh	r3, [r3, #4]
 80085d0:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80085d2:	683b      	ldr	r3, [r7, #0]
 80085d4:	781b      	ldrb	r3, [r3, #0]
 80085d6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80085da:	2b40      	cmp	r3, #64	; 0x40
 80085dc:	d007      	beq.n	80085ee <USBD_StdEPReq+0x30>
 80085de:	2b40      	cmp	r3, #64	; 0x40
 80085e0:	f200 8145 	bhi.w	800886e <USBD_StdEPReq+0x2b0>
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d00c      	beq.n	8008602 <USBD_StdEPReq+0x44>
 80085e8:	2b20      	cmp	r3, #32
 80085ea:	f040 8140 	bne.w	800886e <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80085f4:	689b      	ldr	r3, [r3, #8]
 80085f6:	6839      	ldr	r1, [r7, #0]
 80085f8:	6878      	ldr	r0, [r7, #4]
 80085fa:	4798      	blx	r3
 80085fc:	4603      	mov	r3, r0
 80085fe:	73fb      	strb	r3, [r7, #15]
      break;
 8008600:	e13a      	b.n	8008878 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008602:	683b      	ldr	r3, [r7, #0]
 8008604:	785b      	ldrb	r3, [r3, #1]
 8008606:	2b03      	cmp	r3, #3
 8008608:	d007      	beq.n	800861a <USBD_StdEPReq+0x5c>
 800860a:	2b03      	cmp	r3, #3
 800860c:	f300 8129 	bgt.w	8008862 <USBD_StdEPReq+0x2a4>
 8008610:	2b00      	cmp	r3, #0
 8008612:	d07f      	beq.n	8008714 <USBD_StdEPReq+0x156>
 8008614:	2b01      	cmp	r3, #1
 8008616:	d03c      	beq.n	8008692 <USBD_StdEPReq+0xd4>
 8008618:	e123      	b.n	8008862 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008620:	b2db      	uxtb	r3, r3
 8008622:	2b02      	cmp	r3, #2
 8008624:	d002      	beq.n	800862c <USBD_StdEPReq+0x6e>
 8008626:	2b03      	cmp	r3, #3
 8008628:	d016      	beq.n	8008658 <USBD_StdEPReq+0x9a>
 800862a:	e02c      	b.n	8008686 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800862c:	7bbb      	ldrb	r3, [r7, #14]
 800862e:	2b00      	cmp	r3, #0
 8008630:	d00d      	beq.n	800864e <USBD_StdEPReq+0x90>
 8008632:	7bbb      	ldrb	r3, [r7, #14]
 8008634:	2b80      	cmp	r3, #128	; 0x80
 8008636:	d00a      	beq.n	800864e <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008638:	7bbb      	ldrb	r3, [r7, #14]
 800863a:	4619      	mov	r1, r3
 800863c:	6878      	ldr	r0, [r7, #4]
 800863e:	f001 fa6d 	bl	8009b1c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008642:	2180      	movs	r1, #128	; 0x80
 8008644:	6878      	ldr	r0, [r7, #4]
 8008646:	f001 fa69 	bl	8009b1c <USBD_LL_StallEP>
 800864a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800864c:	e020      	b.n	8008690 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800864e:	6839      	ldr	r1, [r7, #0]
 8008650:	6878      	ldr	r0, [r7, #4]
 8008652:	f000 fc45 	bl	8008ee0 <USBD_CtlError>
              break;
 8008656:	e01b      	b.n	8008690 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008658:	683b      	ldr	r3, [r7, #0]
 800865a:	885b      	ldrh	r3, [r3, #2]
 800865c:	2b00      	cmp	r3, #0
 800865e:	d10e      	bne.n	800867e <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008660:	7bbb      	ldrb	r3, [r7, #14]
 8008662:	2b00      	cmp	r3, #0
 8008664:	d00b      	beq.n	800867e <USBD_StdEPReq+0xc0>
 8008666:	7bbb      	ldrb	r3, [r7, #14]
 8008668:	2b80      	cmp	r3, #128	; 0x80
 800866a:	d008      	beq.n	800867e <USBD_StdEPReq+0xc0>
 800866c:	683b      	ldr	r3, [r7, #0]
 800866e:	88db      	ldrh	r3, [r3, #6]
 8008670:	2b00      	cmp	r3, #0
 8008672:	d104      	bne.n	800867e <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8008674:	7bbb      	ldrb	r3, [r7, #14]
 8008676:	4619      	mov	r1, r3
 8008678:	6878      	ldr	r0, [r7, #4]
 800867a:	f001 fa4f 	bl	8009b1c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800867e:	6878      	ldr	r0, [r7, #4]
 8008680:	f000 fcf9 	bl	8009076 <USBD_CtlSendStatus>

              break;
 8008684:	e004      	b.n	8008690 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8008686:	6839      	ldr	r1, [r7, #0]
 8008688:	6878      	ldr	r0, [r7, #4]
 800868a:	f000 fc29 	bl	8008ee0 <USBD_CtlError>
              break;
 800868e:	bf00      	nop
          }
          break;
 8008690:	e0ec      	b.n	800886c <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008698:	b2db      	uxtb	r3, r3
 800869a:	2b02      	cmp	r3, #2
 800869c:	d002      	beq.n	80086a4 <USBD_StdEPReq+0xe6>
 800869e:	2b03      	cmp	r3, #3
 80086a0:	d016      	beq.n	80086d0 <USBD_StdEPReq+0x112>
 80086a2:	e030      	b.n	8008706 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80086a4:	7bbb      	ldrb	r3, [r7, #14]
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d00d      	beq.n	80086c6 <USBD_StdEPReq+0x108>
 80086aa:	7bbb      	ldrb	r3, [r7, #14]
 80086ac:	2b80      	cmp	r3, #128	; 0x80
 80086ae:	d00a      	beq.n	80086c6 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80086b0:	7bbb      	ldrb	r3, [r7, #14]
 80086b2:	4619      	mov	r1, r3
 80086b4:	6878      	ldr	r0, [r7, #4]
 80086b6:	f001 fa31 	bl	8009b1c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80086ba:	2180      	movs	r1, #128	; 0x80
 80086bc:	6878      	ldr	r0, [r7, #4]
 80086be:	f001 fa2d 	bl	8009b1c <USBD_LL_StallEP>
 80086c2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80086c4:	e025      	b.n	8008712 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 80086c6:	6839      	ldr	r1, [r7, #0]
 80086c8:	6878      	ldr	r0, [r7, #4]
 80086ca:	f000 fc09 	bl	8008ee0 <USBD_CtlError>
              break;
 80086ce:	e020      	b.n	8008712 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80086d0:	683b      	ldr	r3, [r7, #0]
 80086d2:	885b      	ldrh	r3, [r3, #2]
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d11b      	bne.n	8008710 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80086d8:	7bbb      	ldrb	r3, [r7, #14]
 80086da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d004      	beq.n	80086ec <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80086e2:	7bbb      	ldrb	r3, [r7, #14]
 80086e4:	4619      	mov	r1, r3
 80086e6:	6878      	ldr	r0, [r7, #4]
 80086e8:	f001 fa37 	bl	8009b5a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80086ec:	6878      	ldr	r0, [r7, #4]
 80086ee:	f000 fcc2 	bl	8009076 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80086f8:	689b      	ldr	r3, [r3, #8]
 80086fa:	6839      	ldr	r1, [r7, #0]
 80086fc:	6878      	ldr	r0, [r7, #4]
 80086fe:	4798      	blx	r3
 8008700:	4603      	mov	r3, r0
 8008702:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8008704:	e004      	b.n	8008710 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8008706:	6839      	ldr	r1, [r7, #0]
 8008708:	6878      	ldr	r0, [r7, #4]
 800870a:	f000 fbe9 	bl	8008ee0 <USBD_CtlError>
              break;
 800870e:	e000      	b.n	8008712 <USBD_StdEPReq+0x154>
              break;
 8008710:	bf00      	nop
          }
          break;
 8008712:	e0ab      	b.n	800886c <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800871a:	b2db      	uxtb	r3, r3
 800871c:	2b02      	cmp	r3, #2
 800871e:	d002      	beq.n	8008726 <USBD_StdEPReq+0x168>
 8008720:	2b03      	cmp	r3, #3
 8008722:	d032      	beq.n	800878a <USBD_StdEPReq+0x1cc>
 8008724:	e097      	b.n	8008856 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008726:	7bbb      	ldrb	r3, [r7, #14]
 8008728:	2b00      	cmp	r3, #0
 800872a:	d007      	beq.n	800873c <USBD_StdEPReq+0x17e>
 800872c:	7bbb      	ldrb	r3, [r7, #14]
 800872e:	2b80      	cmp	r3, #128	; 0x80
 8008730:	d004      	beq.n	800873c <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8008732:	6839      	ldr	r1, [r7, #0]
 8008734:	6878      	ldr	r0, [r7, #4]
 8008736:	f000 fbd3 	bl	8008ee0 <USBD_CtlError>
                break;
 800873a:	e091      	b.n	8008860 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800873c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008740:	2b00      	cmp	r3, #0
 8008742:	da0b      	bge.n	800875c <USBD_StdEPReq+0x19e>
 8008744:	7bbb      	ldrb	r3, [r7, #14]
 8008746:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800874a:	4613      	mov	r3, r2
 800874c:	009b      	lsls	r3, r3, #2
 800874e:	4413      	add	r3, r2
 8008750:	009b      	lsls	r3, r3, #2
 8008752:	3310      	adds	r3, #16
 8008754:	687a      	ldr	r2, [r7, #4]
 8008756:	4413      	add	r3, r2
 8008758:	3304      	adds	r3, #4
 800875a:	e00b      	b.n	8008774 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800875c:	7bbb      	ldrb	r3, [r7, #14]
 800875e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008762:	4613      	mov	r3, r2
 8008764:	009b      	lsls	r3, r3, #2
 8008766:	4413      	add	r3, r2
 8008768:	009b      	lsls	r3, r3, #2
 800876a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800876e:	687a      	ldr	r2, [r7, #4]
 8008770:	4413      	add	r3, r2
 8008772:	3304      	adds	r3, #4
 8008774:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008776:	68bb      	ldr	r3, [r7, #8]
 8008778:	2200      	movs	r2, #0
 800877a:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800877c:	68bb      	ldr	r3, [r7, #8]
 800877e:	2202      	movs	r2, #2
 8008780:	4619      	mov	r1, r3
 8008782:	6878      	ldr	r0, [r7, #4]
 8008784:	f000 fc1d 	bl	8008fc2 <USBD_CtlSendData>
              break;
 8008788:	e06a      	b.n	8008860 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800878a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800878e:	2b00      	cmp	r3, #0
 8008790:	da11      	bge.n	80087b6 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008792:	7bbb      	ldrb	r3, [r7, #14]
 8008794:	f003 020f 	and.w	r2, r3, #15
 8008798:	6879      	ldr	r1, [r7, #4]
 800879a:	4613      	mov	r3, r2
 800879c:	009b      	lsls	r3, r3, #2
 800879e:	4413      	add	r3, r2
 80087a0:	009b      	lsls	r3, r3, #2
 80087a2:	440b      	add	r3, r1
 80087a4:	3324      	adds	r3, #36	; 0x24
 80087a6:	881b      	ldrh	r3, [r3, #0]
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d117      	bne.n	80087dc <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 80087ac:	6839      	ldr	r1, [r7, #0]
 80087ae:	6878      	ldr	r0, [r7, #4]
 80087b0:	f000 fb96 	bl	8008ee0 <USBD_CtlError>
                  break;
 80087b4:	e054      	b.n	8008860 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80087b6:	7bbb      	ldrb	r3, [r7, #14]
 80087b8:	f003 020f 	and.w	r2, r3, #15
 80087bc:	6879      	ldr	r1, [r7, #4]
 80087be:	4613      	mov	r3, r2
 80087c0:	009b      	lsls	r3, r3, #2
 80087c2:	4413      	add	r3, r2
 80087c4:	009b      	lsls	r3, r3, #2
 80087c6:	440b      	add	r3, r1
 80087c8:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80087cc:	881b      	ldrh	r3, [r3, #0]
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d104      	bne.n	80087dc <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 80087d2:	6839      	ldr	r1, [r7, #0]
 80087d4:	6878      	ldr	r0, [r7, #4]
 80087d6:	f000 fb83 	bl	8008ee0 <USBD_CtlError>
                  break;
 80087da:	e041      	b.n	8008860 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80087dc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	da0b      	bge.n	80087fc <USBD_StdEPReq+0x23e>
 80087e4:	7bbb      	ldrb	r3, [r7, #14]
 80087e6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80087ea:	4613      	mov	r3, r2
 80087ec:	009b      	lsls	r3, r3, #2
 80087ee:	4413      	add	r3, r2
 80087f0:	009b      	lsls	r3, r3, #2
 80087f2:	3310      	adds	r3, #16
 80087f4:	687a      	ldr	r2, [r7, #4]
 80087f6:	4413      	add	r3, r2
 80087f8:	3304      	adds	r3, #4
 80087fa:	e00b      	b.n	8008814 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80087fc:	7bbb      	ldrb	r3, [r7, #14]
 80087fe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008802:	4613      	mov	r3, r2
 8008804:	009b      	lsls	r3, r3, #2
 8008806:	4413      	add	r3, r2
 8008808:	009b      	lsls	r3, r3, #2
 800880a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800880e:	687a      	ldr	r2, [r7, #4]
 8008810:	4413      	add	r3, r2
 8008812:	3304      	adds	r3, #4
 8008814:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008816:	7bbb      	ldrb	r3, [r7, #14]
 8008818:	2b00      	cmp	r3, #0
 800881a:	d002      	beq.n	8008822 <USBD_StdEPReq+0x264>
 800881c:	7bbb      	ldrb	r3, [r7, #14]
 800881e:	2b80      	cmp	r3, #128	; 0x80
 8008820:	d103      	bne.n	800882a <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8008822:	68bb      	ldr	r3, [r7, #8]
 8008824:	2200      	movs	r2, #0
 8008826:	601a      	str	r2, [r3, #0]
 8008828:	e00e      	b.n	8008848 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800882a:	7bbb      	ldrb	r3, [r7, #14]
 800882c:	4619      	mov	r1, r3
 800882e:	6878      	ldr	r0, [r7, #4]
 8008830:	f001 f9b2 	bl	8009b98 <USBD_LL_IsStallEP>
 8008834:	4603      	mov	r3, r0
 8008836:	2b00      	cmp	r3, #0
 8008838:	d003      	beq.n	8008842 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800883a:	68bb      	ldr	r3, [r7, #8]
 800883c:	2201      	movs	r2, #1
 800883e:	601a      	str	r2, [r3, #0]
 8008840:	e002      	b.n	8008848 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8008842:	68bb      	ldr	r3, [r7, #8]
 8008844:	2200      	movs	r2, #0
 8008846:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008848:	68bb      	ldr	r3, [r7, #8]
 800884a:	2202      	movs	r2, #2
 800884c:	4619      	mov	r1, r3
 800884e:	6878      	ldr	r0, [r7, #4]
 8008850:	f000 fbb7 	bl	8008fc2 <USBD_CtlSendData>
              break;
 8008854:	e004      	b.n	8008860 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8008856:	6839      	ldr	r1, [r7, #0]
 8008858:	6878      	ldr	r0, [r7, #4]
 800885a:	f000 fb41 	bl	8008ee0 <USBD_CtlError>
              break;
 800885e:	bf00      	nop
          }
          break;
 8008860:	e004      	b.n	800886c <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8008862:	6839      	ldr	r1, [r7, #0]
 8008864:	6878      	ldr	r0, [r7, #4]
 8008866:	f000 fb3b 	bl	8008ee0 <USBD_CtlError>
          break;
 800886a:	bf00      	nop
      }
      break;
 800886c:	e004      	b.n	8008878 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800886e:	6839      	ldr	r1, [r7, #0]
 8008870:	6878      	ldr	r0, [r7, #4]
 8008872:	f000 fb35 	bl	8008ee0 <USBD_CtlError>
      break;
 8008876:	bf00      	nop
  }

  return ret;
 8008878:	7bfb      	ldrb	r3, [r7, #15]
}
 800887a:	4618      	mov	r0, r3
 800887c:	3710      	adds	r7, #16
 800887e:	46bd      	mov	sp, r7
 8008880:	bd80      	pop	{r7, pc}
	...

08008884 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008884:	b580      	push	{r7, lr}
 8008886:	b084      	sub	sp, #16
 8008888:	af00      	add	r7, sp, #0
 800888a:	6078      	str	r0, [r7, #4]
 800888c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800888e:	2300      	movs	r3, #0
 8008890:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008892:	2300      	movs	r3, #0
 8008894:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008896:	2300      	movs	r3, #0
 8008898:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800889a:	683b      	ldr	r3, [r7, #0]
 800889c:	885b      	ldrh	r3, [r3, #2]
 800889e:	0a1b      	lsrs	r3, r3, #8
 80088a0:	b29b      	uxth	r3, r3
 80088a2:	3b01      	subs	r3, #1
 80088a4:	2b06      	cmp	r3, #6
 80088a6:	f200 8128 	bhi.w	8008afa <USBD_GetDescriptor+0x276>
 80088aa:	a201      	add	r2, pc, #4	; (adr r2, 80088b0 <USBD_GetDescriptor+0x2c>)
 80088ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088b0:	080088cd 	.word	0x080088cd
 80088b4:	080088e5 	.word	0x080088e5
 80088b8:	08008925 	.word	0x08008925
 80088bc:	08008afb 	.word	0x08008afb
 80088c0:	08008afb 	.word	0x08008afb
 80088c4:	08008a9b 	.word	0x08008a9b
 80088c8:	08008ac7 	.word	0x08008ac7
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	687a      	ldr	r2, [r7, #4]
 80088d6:	7c12      	ldrb	r2, [r2, #16]
 80088d8:	f107 0108 	add.w	r1, r7, #8
 80088dc:	4610      	mov	r0, r2
 80088de:	4798      	blx	r3
 80088e0:	60f8      	str	r0, [r7, #12]
      break;
 80088e2:	e112      	b.n	8008b0a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	7c1b      	ldrb	r3, [r3, #16]
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d10d      	bne.n	8008908 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80088f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088f4:	f107 0208 	add.w	r2, r7, #8
 80088f8:	4610      	mov	r0, r2
 80088fa:	4798      	blx	r3
 80088fc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	3301      	adds	r3, #1
 8008902:	2202      	movs	r2, #2
 8008904:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008906:	e100      	b.n	8008b0a <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800890e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008910:	f107 0208 	add.w	r2, r7, #8
 8008914:	4610      	mov	r0, r2
 8008916:	4798      	blx	r3
 8008918:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	3301      	adds	r3, #1
 800891e:	2202      	movs	r2, #2
 8008920:	701a      	strb	r2, [r3, #0]
      break;
 8008922:	e0f2      	b.n	8008b0a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008924:	683b      	ldr	r3, [r7, #0]
 8008926:	885b      	ldrh	r3, [r3, #2]
 8008928:	b2db      	uxtb	r3, r3
 800892a:	2b05      	cmp	r3, #5
 800892c:	f200 80ac 	bhi.w	8008a88 <USBD_GetDescriptor+0x204>
 8008930:	a201      	add	r2, pc, #4	; (adr r2, 8008938 <USBD_GetDescriptor+0xb4>)
 8008932:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008936:	bf00      	nop
 8008938:	08008951 	.word	0x08008951
 800893c:	08008985 	.word	0x08008985
 8008940:	080089b9 	.word	0x080089b9
 8008944:	080089ed 	.word	0x080089ed
 8008948:	08008a21 	.word	0x08008a21
 800894c:	08008a55 	.word	0x08008a55
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008956:	685b      	ldr	r3, [r3, #4]
 8008958:	2b00      	cmp	r3, #0
 800895a:	d00b      	beq.n	8008974 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008962:	685b      	ldr	r3, [r3, #4]
 8008964:	687a      	ldr	r2, [r7, #4]
 8008966:	7c12      	ldrb	r2, [r2, #16]
 8008968:	f107 0108 	add.w	r1, r7, #8
 800896c:	4610      	mov	r0, r2
 800896e:	4798      	blx	r3
 8008970:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008972:	e091      	b.n	8008a98 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008974:	6839      	ldr	r1, [r7, #0]
 8008976:	6878      	ldr	r0, [r7, #4]
 8008978:	f000 fab2 	bl	8008ee0 <USBD_CtlError>
            err++;
 800897c:	7afb      	ldrb	r3, [r7, #11]
 800897e:	3301      	adds	r3, #1
 8008980:	72fb      	strb	r3, [r7, #11]
          break;
 8008982:	e089      	b.n	8008a98 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800898a:	689b      	ldr	r3, [r3, #8]
 800898c:	2b00      	cmp	r3, #0
 800898e:	d00b      	beq.n	80089a8 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008996:	689b      	ldr	r3, [r3, #8]
 8008998:	687a      	ldr	r2, [r7, #4]
 800899a:	7c12      	ldrb	r2, [r2, #16]
 800899c:	f107 0108 	add.w	r1, r7, #8
 80089a0:	4610      	mov	r0, r2
 80089a2:	4798      	blx	r3
 80089a4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80089a6:	e077      	b.n	8008a98 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80089a8:	6839      	ldr	r1, [r7, #0]
 80089aa:	6878      	ldr	r0, [r7, #4]
 80089ac:	f000 fa98 	bl	8008ee0 <USBD_CtlError>
            err++;
 80089b0:	7afb      	ldrb	r3, [r7, #11]
 80089b2:	3301      	adds	r3, #1
 80089b4:	72fb      	strb	r3, [r7, #11]
          break;
 80089b6:	e06f      	b.n	8008a98 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80089be:	68db      	ldr	r3, [r3, #12]
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d00b      	beq.n	80089dc <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80089ca:	68db      	ldr	r3, [r3, #12]
 80089cc:	687a      	ldr	r2, [r7, #4]
 80089ce:	7c12      	ldrb	r2, [r2, #16]
 80089d0:	f107 0108 	add.w	r1, r7, #8
 80089d4:	4610      	mov	r0, r2
 80089d6:	4798      	blx	r3
 80089d8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80089da:	e05d      	b.n	8008a98 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80089dc:	6839      	ldr	r1, [r7, #0]
 80089de:	6878      	ldr	r0, [r7, #4]
 80089e0:	f000 fa7e 	bl	8008ee0 <USBD_CtlError>
            err++;
 80089e4:	7afb      	ldrb	r3, [r7, #11]
 80089e6:	3301      	adds	r3, #1
 80089e8:	72fb      	strb	r3, [r7, #11]
          break;
 80089ea:	e055      	b.n	8008a98 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80089f2:	691b      	ldr	r3, [r3, #16]
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d00b      	beq.n	8008a10 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80089fe:	691b      	ldr	r3, [r3, #16]
 8008a00:	687a      	ldr	r2, [r7, #4]
 8008a02:	7c12      	ldrb	r2, [r2, #16]
 8008a04:	f107 0108 	add.w	r1, r7, #8
 8008a08:	4610      	mov	r0, r2
 8008a0a:	4798      	blx	r3
 8008a0c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008a0e:	e043      	b.n	8008a98 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008a10:	6839      	ldr	r1, [r7, #0]
 8008a12:	6878      	ldr	r0, [r7, #4]
 8008a14:	f000 fa64 	bl	8008ee0 <USBD_CtlError>
            err++;
 8008a18:	7afb      	ldrb	r3, [r7, #11]
 8008a1a:	3301      	adds	r3, #1
 8008a1c:	72fb      	strb	r3, [r7, #11]
          break;
 8008a1e:	e03b      	b.n	8008a98 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a26:	695b      	ldr	r3, [r3, #20]
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d00b      	beq.n	8008a44 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a32:	695b      	ldr	r3, [r3, #20]
 8008a34:	687a      	ldr	r2, [r7, #4]
 8008a36:	7c12      	ldrb	r2, [r2, #16]
 8008a38:	f107 0108 	add.w	r1, r7, #8
 8008a3c:	4610      	mov	r0, r2
 8008a3e:	4798      	blx	r3
 8008a40:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008a42:	e029      	b.n	8008a98 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008a44:	6839      	ldr	r1, [r7, #0]
 8008a46:	6878      	ldr	r0, [r7, #4]
 8008a48:	f000 fa4a 	bl	8008ee0 <USBD_CtlError>
            err++;
 8008a4c:	7afb      	ldrb	r3, [r7, #11]
 8008a4e:	3301      	adds	r3, #1
 8008a50:	72fb      	strb	r3, [r7, #11]
          break;
 8008a52:	e021      	b.n	8008a98 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a5a:	699b      	ldr	r3, [r3, #24]
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d00b      	beq.n	8008a78 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a66:	699b      	ldr	r3, [r3, #24]
 8008a68:	687a      	ldr	r2, [r7, #4]
 8008a6a:	7c12      	ldrb	r2, [r2, #16]
 8008a6c:	f107 0108 	add.w	r1, r7, #8
 8008a70:	4610      	mov	r0, r2
 8008a72:	4798      	blx	r3
 8008a74:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008a76:	e00f      	b.n	8008a98 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008a78:	6839      	ldr	r1, [r7, #0]
 8008a7a:	6878      	ldr	r0, [r7, #4]
 8008a7c:	f000 fa30 	bl	8008ee0 <USBD_CtlError>
            err++;
 8008a80:	7afb      	ldrb	r3, [r7, #11]
 8008a82:	3301      	adds	r3, #1
 8008a84:	72fb      	strb	r3, [r7, #11]
          break;
 8008a86:	e007      	b.n	8008a98 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8008a88:	6839      	ldr	r1, [r7, #0]
 8008a8a:	6878      	ldr	r0, [r7, #4]
 8008a8c:	f000 fa28 	bl	8008ee0 <USBD_CtlError>
          err++;
 8008a90:	7afb      	ldrb	r3, [r7, #11]
 8008a92:	3301      	adds	r3, #1
 8008a94:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8008a96:	bf00      	nop
      }
      break;
 8008a98:	e037      	b.n	8008b0a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	7c1b      	ldrb	r3, [r3, #16]
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d109      	bne.n	8008ab6 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008aa8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008aaa:	f107 0208 	add.w	r2, r7, #8
 8008aae:	4610      	mov	r0, r2
 8008ab0:	4798      	blx	r3
 8008ab2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008ab4:	e029      	b.n	8008b0a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008ab6:	6839      	ldr	r1, [r7, #0]
 8008ab8:	6878      	ldr	r0, [r7, #4]
 8008aba:	f000 fa11 	bl	8008ee0 <USBD_CtlError>
        err++;
 8008abe:	7afb      	ldrb	r3, [r7, #11]
 8008ac0:	3301      	adds	r3, #1
 8008ac2:	72fb      	strb	r3, [r7, #11]
      break;
 8008ac4:	e021      	b.n	8008b0a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	7c1b      	ldrb	r3, [r3, #16]
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d10d      	bne.n	8008aea <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ad6:	f107 0208 	add.w	r2, r7, #8
 8008ada:	4610      	mov	r0, r2
 8008adc:	4798      	blx	r3
 8008ade:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	3301      	adds	r3, #1
 8008ae4:	2207      	movs	r2, #7
 8008ae6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008ae8:	e00f      	b.n	8008b0a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008aea:	6839      	ldr	r1, [r7, #0]
 8008aec:	6878      	ldr	r0, [r7, #4]
 8008aee:	f000 f9f7 	bl	8008ee0 <USBD_CtlError>
        err++;
 8008af2:	7afb      	ldrb	r3, [r7, #11]
 8008af4:	3301      	adds	r3, #1
 8008af6:	72fb      	strb	r3, [r7, #11]
      break;
 8008af8:	e007      	b.n	8008b0a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8008afa:	6839      	ldr	r1, [r7, #0]
 8008afc:	6878      	ldr	r0, [r7, #4]
 8008afe:	f000 f9ef 	bl	8008ee0 <USBD_CtlError>
      err++;
 8008b02:	7afb      	ldrb	r3, [r7, #11]
 8008b04:	3301      	adds	r3, #1
 8008b06:	72fb      	strb	r3, [r7, #11]
      break;
 8008b08:	bf00      	nop
  }

  if (err != 0U)
 8008b0a:	7afb      	ldrb	r3, [r7, #11]
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d11e      	bne.n	8008b4e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8008b10:	683b      	ldr	r3, [r7, #0]
 8008b12:	88db      	ldrh	r3, [r3, #6]
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d016      	beq.n	8008b46 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8008b18:	893b      	ldrh	r3, [r7, #8]
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d00e      	beq.n	8008b3c <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8008b1e:	683b      	ldr	r3, [r7, #0]
 8008b20:	88da      	ldrh	r2, [r3, #6]
 8008b22:	893b      	ldrh	r3, [r7, #8]
 8008b24:	4293      	cmp	r3, r2
 8008b26:	bf28      	it	cs
 8008b28:	4613      	movcs	r3, r2
 8008b2a:	b29b      	uxth	r3, r3
 8008b2c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008b2e:	893b      	ldrh	r3, [r7, #8]
 8008b30:	461a      	mov	r2, r3
 8008b32:	68f9      	ldr	r1, [r7, #12]
 8008b34:	6878      	ldr	r0, [r7, #4]
 8008b36:	f000 fa44 	bl	8008fc2 <USBD_CtlSendData>
 8008b3a:	e009      	b.n	8008b50 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8008b3c:	6839      	ldr	r1, [r7, #0]
 8008b3e:	6878      	ldr	r0, [r7, #4]
 8008b40:	f000 f9ce 	bl	8008ee0 <USBD_CtlError>
 8008b44:	e004      	b.n	8008b50 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8008b46:	6878      	ldr	r0, [r7, #4]
 8008b48:	f000 fa95 	bl	8009076 <USBD_CtlSendStatus>
 8008b4c:	e000      	b.n	8008b50 <USBD_GetDescriptor+0x2cc>
    return;
 8008b4e:	bf00      	nop
  }
}
 8008b50:	3710      	adds	r7, #16
 8008b52:	46bd      	mov	sp, r7
 8008b54:	bd80      	pop	{r7, pc}
 8008b56:	bf00      	nop

08008b58 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008b58:	b580      	push	{r7, lr}
 8008b5a:	b084      	sub	sp, #16
 8008b5c:	af00      	add	r7, sp, #0
 8008b5e:	6078      	str	r0, [r7, #4]
 8008b60:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008b62:	683b      	ldr	r3, [r7, #0]
 8008b64:	889b      	ldrh	r3, [r3, #4]
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d131      	bne.n	8008bce <USBD_SetAddress+0x76>
 8008b6a:	683b      	ldr	r3, [r7, #0]
 8008b6c:	88db      	ldrh	r3, [r3, #6]
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d12d      	bne.n	8008bce <USBD_SetAddress+0x76>
 8008b72:	683b      	ldr	r3, [r7, #0]
 8008b74:	885b      	ldrh	r3, [r3, #2]
 8008b76:	2b7f      	cmp	r3, #127	; 0x7f
 8008b78:	d829      	bhi.n	8008bce <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008b7a:	683b      	ldr	r3, [r7, #0]
 8008b7c:	885b      	ldrh	r3, [r3, #2]
 8008b7e:	b2db      	uxtb	r3, r3
 8008b80:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008b84:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b8c:	b2db      	uxtb	r3, r3
 8008b8e:	2b03      	cmp	r3, #3
 8008b90:	d104      	bne.n	8008b9c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8008b92:	6839      	ldr	r1, [r7, #0]
 8008b94:	6878      	ldr	r0, [r7, #4]
 8008b96:	f000 f9a3 	bl	8008ee0 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b9a:	e01d      	b.n	8008bd8 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	7bfa      	ldrb	r2, [r7, #15]
 8008ba0:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008ba4:	7bfb      	ldrb	r3, [r7, #15]
 8008ba6:	4619      	mov	r1, r3
 8008ba8:	6878      	ldr	r0, [r7, #4]
 8008baa:	f001 f821 	bl	8009bf0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8008bae:	6878      	ldr	r0, [r7, #4]
 8008bb0:	f000 fa61 	bl	8009076 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008bb4:	7bfb      	ldrb	r3, [r7, #15]
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d004      	beq.n	8008bc4 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	2202      	movs	r2, #2
 8008bbe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008bc2:	e009      	b.n	8008bd8 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	2201      	movs	r2, #1
 8008bc8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008bcc:	e004      	b.n	8008bd8 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008bce:	6839      	ldr	r1, [r7, #0]
 8008bd0:	6878      	ldr	r0, [r7, #4]
 8008bd2:	f000 f985 	bl	8008ee0 <USBD_CtlError>
  }
}
 8008bd6:	bf00      	nop
 8008bd8:	bf00      	nop
 8008bda:	3710      	adds	r7, #16
 8008bdc:	46bd      	mov	sp, r7
 8008bde:	bd80      	pop	{r7, pc}

08008be0 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008be0:	b580      	push	{r7, lr}
 8008be2:	b084      	sub	sp, #16
 8008be4:	af00      	add	r7, sp, #0
 8008be6:	6078      	str	r0, [r7, #4]
 8008be8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008bea:	2300      	movs	r3, #0
 8008bec:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008bee:	683b      	ldr	r3, [r7, #0]
 8008bf0:	885b      	ldrh	r3, [r3, #2]
 8008bf2:	b2da      	uxtb	r2, r3
 8008bf4:	4b4c      	ldr	r3, [pc, #304]	; (8008d28 <USBD_SetConfig+0x148>)
 8008bf6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008bf8:	4b4b      	ldr	r3, [pc, #300]	; (8008d28 <USBD_SetConfig+0x148>)
 8008bfa:	781b      	ldrb	r3, [r3, #0]
 8008bfc:	2b01      	cmp	r3, #1
 8008bfe:	d905      	bls.n	8008c0c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008c00:	6839      	ldr	r1, [r7, #0]
 8008c02:	6878      	ldr	r0, [r7, #4]
 8008c04:	f000 f96c 	bl	8008ee0 <USBD_CtlError>
    return USBD_FAIL;
 8008c08:	2303      	movs	r3, #3
 8008c0a:	e088      	b.n	8008d1e <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008c12:	b2db      	uxtb	r3, r3
 8008c14:	2b02      	cmp	r3, #2
 8008c16:	d002      	beq.n	8008c1e <USBD_SetConfig+0x3e>
 8008c18:	2b03      	cmp	r3, #3
 8008c1a:	d025      	beq.n	8008c68 <USBD_SetConfig+0x88>
 8008c1c:	e071      	b.n	8008d02 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8008c1e:	4b42      	ldr	r3, [pc, #264]	; (8008d28 <USBD_SetConfig+0x148>)
 8008c20:	781b      	ldrb	r3, [r3, #0]
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d01c      	beq.n	8008c60 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8008c26:	4b40      	ldr	r3, [pc, #256]	; (8008d28 <USBD_SetConfig+0x148>)
 8008c28:	781b      	ldrb	r3, [r3, #0]
 8008c2a:	461a      	mov	r2, r3
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008c30:	4b3d      	ldr	r3, [pc, #244]	; (8008d28 <USBD_SetConfig+0x148>)
 8008c32:	781b      	ldrb	r3, [r3, #0]
 8008c34:	4619      	mov	r1, r3
 8008c36:	6878      	ldr	r0, [r7, #4]
 8008c38:	f7ff f948 	bl	8007ecc <USBD_SetClassConfig>
 8008c3c:	4603      	mov	r3, r0
 8008c3e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8008c40:	7bfb      	ldrb	r3, [r7, #15]
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d004      	beq.n	8008c50 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8008c46:	6839      	ldr	r1, [r7, #0]
 8008c48:	6878      	ldr	r0, [r7, #4]
 8008c4a:	f000 f949 	bl	8008ee0 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008c4e:	e065      	b.n	8008d1c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8008c50:	6878      	ldr	r0, [r7, #4]
 8008c52:	f000 fa10 	bl	8009076 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	2203      	movs	r2, #3
 8008c5a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008c5e:	e05d      	b.n	8008d1c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8008c60:	6878      	ldr	r0, [r7, #4]
 8008c62:	f000 fa08 	bl	8009076 <USBD_CtlSendStatus>
      break;
 8008c66:	e059      	b.n	8008d1c <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8008c68:	4b2f      	ldr	r3, [pc, #188]	; (8008d28 <USBD_SetConfig+0x148>)
 8008c6a:	781b      	ldrb	r3, [r3, #0]
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d112      	bne.n	8008c96 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	2202      	movs	r2, #2
 8008c74:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8008c78:	4b2b      	ldr	r3, [pc, #172]	; (8008d28 <USBD_SetConfig+0x148>)
 8008c7a:	781b      	ldrb	r3, [r3, #0]
 8008c7c:	461a      	mov	r2, r3
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008c82:	4b29      	ldr	r3, [pc, #164]	; (8008d28 <USBD_SetConfig+0x148>)
 8008c84:	781b      	ldrb	r3, [r3, #0]
 8008c86:	4619      	mov	r1, r3
 8008c88:	6878      	ldr	r0, [r7, #4]
 8008c8a:	f7ff f93b 	bl	8007f04 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8008c8e:	6878      	ldr	r0, [r7, #4]
 8008c90:	f000 f9f1 	bl	8009076 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008c94:	e042      	b.n	8008d1c <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8008c96:	4b24      	ldr	r3, [pc, #144]	; (8008d28 <USBD_SetConfig+0x148>)
 8008c98:	781b      	ldrb	r3, [r3, #0]
 8008c9a:	461a      	mov	r2, r3
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	685b      	ldr	r3, [r3, #4]
 8008ca0:	429a      	cmp	r2, r3
 8008ca2:	d02a      	beq.n	8008cfa <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	685b      	ldr	r3, [r3, #4]
 8008ca8:	b2db      	uxtb	r3, r3
 8008caa:	4619      	mov	r1, r3
 8008cac:	6878      	ldr	r0, [r7, #4]
 8008cae:	f7ff f929 	bl	8007f04 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8008cb2:	4b1d      	ldr	r3, [pc, #116]	; (8008d28 <USBD_SetConfig+0x148>)
 8008cb4:	781b      	ldrb	r3, [r3, #0]
 8008cb6:	461a      	mov	r2, r3
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008cbc:	4b1a      	ldr	r3, [pc, #104]	; (8008d28 <USBD_SetConfig+0x148>)
 8008cbe:	781b      	ldrb	r3, [r3, #0]
 8008cc0:	4619      	mov	r1, r3
 8008cc2:	6878      	ldr	r0, [r7, #4]
 8008cc4:	f7ff f902 	bl	8007ecc <USBD_SetClassConfig>
 8008cc8:	4603      	mov	r3, r0
 8008cca:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8008ccc:	7bfb      	ldrb	r3, [r7, #15]
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d00f      	beq.n	8008cf2 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8008cd2:	6839      	ldr	r1, [r7, #0]
 8008cd4:	6878      	ldr	r0, [r7, #4]
 8008cd6:	f000 f903 	bl	8008ee0 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	685b      	ldr	r3, [r3, #4]
 8008cde:	b2db      	uxtb	r3, r3
 8008ce0:	4619      	mov	r1, r3
 8008ce2:	6878      	ldr	r0, [r7, #4]
 8008ce4:	f7ff f90e 	bl	8007f04 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	2202      	movs	r2, #2
 8008cec:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008cf0:	e014      	b.n	8008d1c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8008cf2:	6878      	ldr	r0, [r7, #4]
 8008cf4:	f000 f9bf 	bl	8009076 <USBD_CtlSendStatus>
      break;
 8008cf8:	e010      	b.n	8008d1c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8008cfa:	6878      	ldr	r0, [r7, #4]
 8008cfc:	f000 f9bb 	bl	8009076 <USBD_CtlSendStatus>
      break;
 8008d00:	e00c      	b.n	8008d1c <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8008d02:	6839      	ldr	r1, [r7, #0]
 8008d04:	6878      	ldr	r0, [r7, #4]
 8008d06:	f000 f8eb 	bl	8008ee0 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008d0a:	4b07      	ldr	r3, [pc, #28]	; (8008d28 <USBD_SetConfig+0x148>)
 8008d0c:	781b      	ldrb	r3, [r3, #0]
 8008d0e:	4619      	mov	r1, r3
 8008d10:	6878      	ldr	r0, [r7, #4]
 8008d12:	f7ff f8f7 	bl	8007f04 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8008d16:	2303      	movs	r3, #3
 8008d18:	73fb      	strb	r3, [r7, #15]
      break;
 8008d1a:	bf00      	nop
  }

  return ret;
 8008d1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d1e:	4618      	mov	r0, r3
 8008d20:	3710      	adds	r7, #16
 8008d22:	46bd      	mov	sp, r7
 8008d24:	bd80      	pop	{r7, pc}
 8008d26:	bf00      	nop
 8008d28:	2000043c 	.word	0x2000043c

08008d2c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008d2c:	b580      	push	{r7, lr}
 8008d2e:	b082      	sub	sp, #8
 8008d30:	af00      	add	r7, sp, #0
 8008d32:	6078      	str	r0, [r7, #4]
 8008d34:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008d36:	683b      	ldr	r3, [r7, #0]
 8008d38:	88db      	ldrh	r3, [r3, #6]
 8008d3a:	2b01      	cmp	r3, #1
 8008d3c:	d004      	beq.n	8008d48 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008d3e:	6839      	ldr	r1, [r7, #0]
 8008d40:	6878      	ldr	r0, [r7, #4]
 8008d42:	f000 f8cd 	bl	8008ee0 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008d46:	e023      	b.n	8008d90 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008d4e:	b2db      	uxtb	r3, r3
 8008d50:	2b02      	cmp	r3, #2
 8008d52:	dc02      	bgt.n	8008d5a <USBD_GetConfig+0x2e>
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	dc03      	bgt.n	8008d60 <USBD_GetConfig+0x34>
 8008d58:	e015      	b.n	8008d86 <USBD_GetConfig+0x5a>
 8008d5a:	2b03      	cmp	r3, #3
 8008d5c:	d00b      	beq.n	8008d76 <USBD_GetConfig+0x4a>
 8008d5e:	e012      	b.n	8008d86 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	2200      	movs	r2, #0
 8008d64:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	3308      	adds	r3, #8
 8008d6a:	2201      	movs	r2, #1
 8008d6c:	4619      	mov	r1, r3
 8008d6e:	6878      	ldr	r0, [r7, #4]
 8008d70:	f000 f927 	bl	8008fc2 <USBD_CtlSendData>
        break;
 8008d74:	e00c      	b.n	8008d90 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	3304      	adds	r3, #4
 8008d7a:	2201      	movs	r2, #1
 8008d7c:	4619      	mov	r1, r3
 8008d7e:	6878      	ldr	r0, [r7, #4]
 8008d80:	f000 f91f 	bl	8008fc2 <USBD_CtlSendData>
        break;
 8008d84:	e004      	b.n	8008d90 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8008d86:	6839      	ldr	r1, [r7, #0]
 8008d88:	6878      	ldr	r0, [r7, #4]
 8008d8a:	f000 f8a9 	bl	8008ee0 <USBD_CtlError>
        break;
 8008d8e:	bf00      	nop
}
 8008d90:	bf00      	nop
 8008d92:	3708      	adds	r7, #8
 8008d94:	46bd      	mov	sp, r7
 8008d96:	bd80      	pop	{r7, pc}

08008d98 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008d98:	b580      	push	{r7, lr}
 8008d9a:	b082      	sub	sp, #8
 8008d9c:	af00      	add	r7, sp, #0
 8008d9e:	6078      	str	r0, [r7, #4]
 8008da0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008da8:	b2db      	uxtb	r3, r3
 8008daa:	3b01      	subs	r3, #1
 8008dac:	2b02      	cmp	r3, #2
 8008dae:	d81e      	bhi.n	8008dee <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008db0:	683b      	ldr	r3, [r7, #0]
 8008db2:	88db      	ldrh	r3, [r3, #6]
 8008db4:	2b02      	cmp	r3, #2
 8008db6:	d004      	beq.n	8008dc2 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8008db8:	6839      	ldr	r1, [r7, #0]
 8008dba:	6878      	ldr	r0, [r7, #4]
 8008dbc:	f000 f890 	bl	8008ee0 <USBD_CtlError>
        break;
 8008dc0:	e01a      	b.n	8008df8 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	2201      	movs	r2, #1
 8008dc6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d005      	beq.n	8008dde <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	68db      	ldr	r3, [r3, #12]
 8008dd6:	f043 0202 	orr.w	r2, r3, #2
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	330c      	adds	r3, #12
 8008de2:	2202      	movs	r2, #2
 8008de4:	4619      	mov	r1, r3
 8008de6:	6878      	ldr	r0, [r7, #4]
 8008de8:	f000 f8eb 	bl	8008fc2 <USBD_CtlSendData>
      break;
 8008dec:	e004      	b.n	8008df8 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8008dee:	6839      	ldr	r1, [r7, #0]
 8008df0:	6878      	ldr	r0, [r7, #4]
 8008df2:	f000 f875 	bl	8008ee0 <USBD_CtlError>
      break;
 8008df6:	bf00      	nop
  }
}
 8008df8:	bf00      	nop
 8008dfa:	3708      	adds	r7, #8
 8008dfc:	46bd      	mov	sp, r7
 8008dfe:	bd80      	pop	{r7, pc}

08008e00 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008e00:	b580      	push	{r7, lr}
 8008e02:	b082      	sub	sp, #8
 8008e04:	af00      	add	r7, sp, #0
 8008e06:	6078      	str	r0, [r7, #4]
 8008e08:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008e0a:	683b      	ldr	r3, [r7, #0]
 8008e0c:	885b      	ldrh	r3, [r3, #2]
 8008e0e:	2b01      	cmp	r3, #1
 8008e10:	d106      	bne.n	8008e20 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	2201      	movs	r2, #1
 8008e16:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8008e1a:	6878      	ldr	r0, [r7, #4]
 8008e1c:	f000 f92b 	bl	8009076 <USBD_CtlSendStatus>
  }
}
 8008e20:	bf00      	nop
 8008e22:	3708      	adds	r7, #8
 8008e24:	46bd      	mov	sp, r7
 8008e26:	bd80      	pop	{r7, pc}

08008e28 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008e28:	b580      	push	{r7, lr}
 8008e2a:	b082      	sub	sp, #8
 8008e2c:	af00      	add	r7, sp, #0
 8008e2e:	6078      	str	r0, [r7, #4]
 8008e30:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008e38:	b2db      	uxtb	r3, r3
 8008e3a:	3b01      	subs	r3, #1
 8008e3c:	2b02      	cmp	r3, #2
 8008e3e:	d80b      	bhi.n	8008e58 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008e40:	683b      	ldr	r3, [r7, #0]
 8008e42:	885b      	ldrh	r3, [r3, #2]
 8008e44:	2b01      	cmp	r3, #1
 8008e46:	d10c      	bne.n	8008e62 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	2200      	movs	r2, #0
 8008e4c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8008e50:	6878      	ldr	r0, [r7, #4]
 8008e52:	f000 f910 	bl	8009076 <USBD_CtlSendStatus>
      }
      break;
 8008e56:	e004      	b.n	8008e62 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8008e58:	6839      	ldr	r1, [r7, #0]
 8008e5a:	6878      	ldr	r0, [r7, #4]
 8008e5c:	f000 f840 	bl	8008ee0 <USBD_CtlError>
      break;
 8008e60:	e000      	b.n	8008e64 <USBD_ClrFeature+0x3c>
      break;
 8008e62:	bf00      	nop
  }
}
 8008e64:	bf00      	nop
 8008e66:	3708      	adds	r7, #8
 8008e68:	46bd      	mov	sp, r7
 8008e6a:	bd80      	pop	{r7, pc}

08008e6c <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008e6c:	b580      	push	{r7, lr}
 8008e6e:	b084      	sub	sp, #16
 8008e70:	af00      	add	r7, sp, #0
 8008e72:	6078      	str	r0, [r7, #4]
 8008e74:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008e76:	683b      	ldr	r3, [r7, #0]
 8008e78:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	781a      	ldrb	r2, [r3, #0]
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	3301      	adds	r3, #1
 8008e86:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	781a      	ldrb	r2, [r3, #0]
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	3301      	adds	r3, #1
 8008e94:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008e96:	68f8      	ldr	r0, [r7, #12]
 8008e98:	f7ff fabb 	bl	8008412 <SWAPBYTE>
 8008e9c:	4603      	mov	r3, r0
 8008e9e:	461a      	mov	r2, r3
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	3301      	adds	r3, #1
 8008ea8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	3301      	adds	r3, #1
 8008eae:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8008eb0:	68f8      	ldr	r0, [r7, #12]
 8008eb2:	f7ff faae 	bl	8008412 <SWAPBYTE>
 8008eb6:	4603      	mov	r3, r0
 8008eb8:	461a      	mov	r2, r3
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	3301      	adds	r3, #1
 8008ec2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	3301      	adds	r3, #1
 8008ec8:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008eca:	68f8      	ldr	r0, [r7, #12]
 8008ecc:	f7ff faa1 	bl	8008412 <SWAPBYTE>
 8008ed0:	4603      	mov	r3, r0
 8008ed2:	461a      	mov	r2, r3
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	80da      	strh	r2, [r3, #6]
}
 8008ed8:	bf00      	nop
 8008eda:	3710      	adds	r7, #16
 8008edc:	46bd      	mov	sp, r7
 8008ede:	bd80      	pop	{r7, pc}

08008ee0 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008ee0:	b580      	push	{r7, lr}
 8008ee2:	b082      	sub	sp, #8
 8008ee4:	af00      	add	r7, sp, #0
 8008ee6:	6078      	str	r0, [r7, #4]
 8008ee8:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008eea:	2180      	movs	r1, #128	; 0x80
 8008eec:	6878      	ldr	r0, [r7, #4]
 8008eee:	f000 fe15 	bl	8009b1c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008ef2:	2100      	movs	r1, #0
 8008ef4:	6878      	ldr	r0, [r7, #4]
 8008ef6:	f000 fe11 	bl	8009b1c <USBD_LL_StallEP>
}
 8008efa:	bf00      	nop
 8008efc:	3708      	adds	r7, #8
 8008efe:	46bd      	mov	sp, r7
 8008f00:	bd80      	pop	{r7, pc}

08008f02 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008f02:	b580      	push	{r7, lr}
 8008f04:	b086      	sub	sp, #24
 8008f06:	af00      	add	r7, sp, #0
 8008f08:	60f8      	str	r0, [r7, #12]
 8008f0a:	60b9      	str	r1, [r7, #8]
 8008f0c:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008f0e:	2300      	movs	r3, #0
 8008f10:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	d036      	beq.n	8008f86 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8008f1c:	6938      	ldr	r0, [r7, #16]
 8008f1e:	f000 f836 	bl	8008f8e <USBD_GetLen>
 8008f22:	4603      	mov	r3, r0
 8008f24:	3301      	adds	r3, #1
 8008f26:	b29b      	uxth	r3, r3
 8008f28:	005b      	lsls	r3, r3, #1
 8008f2a:	b29a      	uxth	r2, r3
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008f30:	7dfb      	ldrb	r3, [r7, #23]
 8008f32:	68ba      	ldr	r2, [r7, #8]
 8008f34:	4413      	add	r3, r2
 8008f36:	687a      	ldr	r2, [r7, #4]
 8008f38:	7812      	ldrb	r2, [r2, #0]
 8008f3a:	701a      	strb	r2, [r3, #0]
  idx++;
 8008f3c:	7dfb      	ldrb	r3, [r7, #23]
 8008f3e:	3301      	adds	r3, #1
 8008f40:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008f42:	7dfb      	ldrb	r3, [r7, #23]
 8008f44:	68ba      	ldr	r2, [r7, #8]
 8008f46:	4413      	add	r3, r2
 8008f48:	2203      	movs	r2, #3
 8008f4a:	701a      	strb	r2, [r3, #0]
  idx++;
 8008f4c:	7dfb      	ldrb	r3, [r7, #23]
 8008f4e:	3301      	adds	r3, #1
 8008f50:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008f52:	e013      	b.n	8008f7c <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8008f54:	7dfb      	ldrb	r3, [r7, #23]
 8008f56:	68ba      	ldr	r2, [r7, #8]
 8008f58:	4413      	add	r3, r2
 8008f5a:	693a      	ldr	r2, [r7, #16]
 8008f5c:	7812      	ldrb	r2, [r2, #0]
 8008f5e:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8008f60:	693b      	ldr	r3, [r7, #16]
 8008f62:	3301      	adds	r3, #1
 8008f64:	613b      	str	r3, [r7, #16]
    idx++;
 8008f66:	7dfb      	ldrb	r3, [r7, #23]
 8008f68:	3301      	adds	r3, #1
 8008f6a:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008f6c:	7dfb      	ldrb	r3, [r7, #23]
 8008f6e:	68ba      	ldr	r2, [r7, #8]
 8008f70:	4413      	add	r3, r2
 8008f72:	2200      	movs	r2, #0
 8008f74:	701a      	strb	r2, [r3, #0]
    idx++;
 8008f76:	7dfb      	ldrb	r3, [r7, #23]
 8008f78:	3301      	adds	r3, #1
 8008f7a:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008f7c:	693b      	ldr	r3, [r7, #16]
 8008f7e:	781b      	ldrb	r3, [r3, #0]
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d1e7      	bne.n	8008f54 <USBD_GetString+0x52>
 8008f84:	e000      	b.n	8008f88 <USBD_GetString+0x86>
    return;
 8008f86:	bf00      	nop
  }
}
 8008f88:	3718      	adds	r7, #24
 8008f8a:	46bd      	mov	sp, r7
 8008f8c:	bd80      	pop	{r7, pc}

08008f8e <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008f8e:	b480      	push	{r7}
 8008f90:	b085      	sub	sp, #20
 8008f92:	af00      	add	r7, sp, #0
 8008f94:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008f96:	2300      	movs	r3, #0
 8008f98:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008f9e:	e005      	b.n	8008fac <USBD_GetLen+0x1e>
  {
    len++;
 8008fa0:	7bfb      	ldrb	r3, [r7, #15]
 8008fa2:	3301      	adds	r3, #1
 8008fa4:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008fa6:	68bb      	ldr	r3, [r7, #8]
 8008fa8:	3301      	adds	r3, #1
 8008faa:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008fac:	68bb      	ldr	r3, [r7, #8]
 8008fae:	781b      	ldrb	r3, [r3, #0]
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d1f5      	bne.n	8008fa0 <USBD_GetLen+0x12>
  }

  return len;
 8008fb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8008fb6:	4618      	mov	r0, r3
 8008fb8:	3714      	adds	r7, #20
 8008fba:	46bd      	mov	sp, r7
 8008fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fc0:	4770      	bx	lr

08008fc2 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008fc2:	b580      	push	{r7, lr}
 8008fc4:	b084      	sub	sp, #16
 8008fc6:	af00      	add	r7, sp, #0
 8008fc8:	60f8      	str	r0, [r7, #12]
 8008fca:	60b9      	str	r1, [r7, #8]
 8008fcc:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	2202      	movs	r2, #2
 8008fd2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	687a      	ldr	r2, [r7, #4]
 8008fda:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	687a      	ldr	r2, [r7, #4]
 8008fe0:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	68ba      	ldr	r2, [r7, #8]
 8008fe6:	2100      	movs	r1, #0
 8008fe8:	68f8      	ldr	r0, [r7, #12]
 8008fea:	f000 fe20 	bl	8009c2e <USBD_LL_Transmit>

  return USBD_OK;
 8008fee:	2300      	movs	r3, #0
}
 8008ff0:	4618      	mov	r0, r3
 8008ff2:	3710      	adds	r7, #16
 8008ff4:	46bd      	mov	sp, r7
 8008ff6:	bd80      	pop	{r7, pc}

08008ff8 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008ff8:	b580      	push	{r7, lr}
 8008ffa:	b084      	sub	sp, #16
 8008ffc:	af00      	add	r7, sp, #0
 8008ffe:	60f8      	str	r0, [r7, #12]
 8009000:	60b9      	str	r1, [r7, #8]
 8009002:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	68ba      	ldr	r2, [r7, #8]
 8009008:	2100      	movs	r1, #0
 800900a:	68f8      	ldr	r0, [r7, #12]
 800900c:	f000 fe0f 	bl	8009c2e <USBD_LL_Transmit>

  return USBD_OK;
 8009010:	2300      	movs	r3, #0
}
 8009012:	4618      	mov	r0, r3
 8009014:	3710      	adds	r7, #16
 8009016:	46bd      	mov	sp, r7
 8009018:	bd80      	pop	{r7, pc}

0800901a <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800901a:	b580      	push	{r7, lr}
 800901c:	b084      	sub	sp, #16
 800901e:	af00      	add	r7, sp, #0
 8009020:	60f8      	str	r0, [r7, #12]
 8009022:	60b9      	str	r1, [r7, #8]
 8009024:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	2203      	movs	r2, #3
 800902a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	687a      	ldr	r2, [r7, #4]
 8009032:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	687a      	ldr	r2, [r7, #4]
 800903a:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	68ba      	ldr	r2, [r7, #8]
 8009042:	2100      	movs	r1, #0
 8009044:	68f8      	ldr	r0, [r7, #12]
 8009046:	f000 fe13 	bl	8009c70 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800904a:	2300      	movs	r3, #0
}
 800904c:	4618      	mov	r0, r3
 800904e:	3710      	adds	r7, #16
 8009050:	46bd      	mov	sp, r7
 8009052:	bd80      	pop	{r7, pc}

08009054 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8009054:	b580      	push	{r7, lr}
 8009056:	b084      	sub	sp, #16
 8009058:	af00      	add	r7, sp, #0
 800905a:	60f8      	str	r0, [r7, #12]
 800905c:	60b9      	str	r1, [r7, #8]
 800905e:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	68ba      	ldr	r2, [r7, #8]
 8009064:	2100      	movs	r1, #0
 8009066:	68f8      	ldr	r0, [r7, #12]
 8009068:	f000 fe02 	bl	8009c70 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800906c:	2300      	movs	r3, #0
}
 800906e:	4618      	mov	r0, r3
 8009070:	3710      	adds	r7, #16
 8009072:	46bd      	mov	sp, r7
 8009074:	bd80      	pop	{r7, pc}

08009076 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009076:	b580      	push	{r7, lr}
 8009078:	b082      	sub	sp, #8
 800907a:	af00      	add	r7, sp, #0
 800907c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	2204      	movs	r2, #4
 8009082:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009086:	2300      	movs	r3, #0
 8009088:	2200      	movs	r2, #0
 800908a:	2100      	movs	r1, #0
 800908c:	6878      	ldr	r0, [r7, #4]
 800908e:	f000 fdce 	bl	8009c2e <USBD_LL_Transmit>

  return USBD_OK;
 8009092:	2300      	movs	r3, #0
}
 8009094:	4618      	mov	r0, r3
 8009096:	3708      	adds	r7, #8
 8009098:	46bd      	mov	sp, r7
 800909a:	bd80      	pop	{r7, pc}

0800909c <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800909c:	b580      	push	{r7, lr}
 800909e:	b082      	sub	sp, #8
 80090a0:	af00      	add	r7, sp, #0
 80090a2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	2205      	movs	r2, #5
 80090a8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80090ac:	2300      	movs	r3, #0
 80090ae:	2200      	movs	r2, #0
 80090b0:	2100      	movs	r1, #0
 80090b2:	6878      	ldr	r0, [r7, #4]
 80090b4:	f000 fddc 	bl	8009c70 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80090b8:	2300      	movs	r3, #0
}
 80090ba:	4618      	mov	r0, r3
 80090bc:	3708      	adds	r7, #8
 80090be:	46bd      	mov	sp, r7
 80090c0:	bd80      	pop	{r7, pc}
	...

080090c4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80090c4:	b580      	push	{r7, lr}
 80090c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80090c8:	2200      	movs	r2, #0
 80090ca:	4912      	ldr	r1, [pc, #72]	; (8009114 <MX_USB_DEVICE_Init+0x50>)
 80090cc:	4812      	ldr	r0, [pc, #72]	; (8009118 <MX_USB_DEVICE_Init+0x54>)
 80090ce:	f7fe fe8f 	bl	8007df0 <USBD_Init>
 80090d2:	4603      	mov	r3, r0
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d001      	beq.n	80090dc <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80090d8:	f7f7 fbb8 	bl	800084c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80090dc:	490f      	ldr	r1, [pc, #60]	; (800911c <MX_USB_DEVICE_Init+0x58>)
 80090de:	480e      	ldr	r0, [pc, #56]	; (8009118 <MX_USB_DEVICE_Init+0x54>)
 80090e0:	f7fe feb6 	bl	8007e50 <USBD_RegisterClass>
 80090e4:	4603      	mov	r3, r0
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d001      	beq.n	80090ee <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80090ea:	f7f7 fbaf 	bl	800084c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80090ee:	490c      	ldr	r1, [pc, #48]	; (8009120 <MX_USB_DEVICE_Init+0x5c>)
 80090f0:	4809      	ldr	r0, [pc, #36]	; (8009118 <MX_USB_DEVICE_Init+0x54>)
 80090f2:	f7fe fdd7 	bl	8007ca4 <USBD_CDC_RegisterInterface>
 80090f6:	4603      	mov	r3, r0
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d001      	beq.n	8009100 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80090fc:	f7f7 fba6 	bl	800084c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8009100:	4805      	ldr	r0, [pc, #20]	; (8009118 <MX_USB_DEVICE_Init+0x54>)
 8009102:	f7fe fecc 	bl	8007e9e <USBD_Start>
 8009106:	4603      	mov	r3, r0
 8009108:	2b00      	cmp	r3, #0
 800910a:	d001      	beq.n	8009110 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800910c:	f7f7 fb9e 	bl	800084c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8009110:	bf00      	nop
 8009112:	bd80      	pop	{r7, pc}
 8009114:	20000158 	.word	0x20000158
 8009118:	20000440 	.word	0x20000440
 800911c:	2000003c 	.word	0x2000003c
 8009120:	20000144 	.word	0x20000144

08009124 <cdcAvailable>:
uint32_t  rx_len=512;
uint8_t   rx_buf[512];
bool      rx_full = false;

uint32_t cdcAvailable(void)
{
 8009124:	b480      	push	{r7}
 8009126:	b083      	sub	sp, #12
 8009128:	af00      	add	r7, sp, #0
	uint32_t ret;

	ret = (rx_in - rx_out) % rx_len;
 800912a:	4b0a      	ldr	r3, [pc, #40]	; (8009154 <cdcAvailable+0x30>)
 800912c:	681a      	ldr	r2, [r3, #0]
 800912e:	4b0a      	ldr	r3, [pc, #40]	; (8009158 <cdcAvailable+0x34>)
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	1ad3      	subs	r3, r2, r3
 8009134:	4a09      	ldr	r2, [pc, #36]	; (800915c <cdcAvailable+0x38>)
 8009136:	6812      	ldr	r2, [r2, #0]
 8009138:	fbb3 f1f2 	udiv	r1, r3, r2
 800913c:	fb01 f202 	mul.w	r2, r1, r2
 8009140:	1a9b      	subs	r3, r3, r2
 8009142:	607b      	str	r3, [r7, #4]

	return ret;
 8009144:	687b      	ldr	r3, [r7, #4]
}
 8009146:	4618      	mov	r0, r3
 8009148:	370c      	adds	r7, #12
 800914a:	46bd      	mov	sp, r7
 800914c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009150:	4770      	bx	lr
 8009152:	bf00      	nop
 8009154:	20000718 	.word	0x20000718
 8009158:	2000071c 	.word	0x2000071c
 800915c:	20000140 	.word	0x20000140

08009160 <cdcRead>:

uint8_t cdcRead(void)
{
 8009160:	b480      	push	{r7}
 8009162:	b083      	sub	sp, #12
 8009164:	af00      	add	r7, sp, #0
  /* 1. Read Data and return
   * 2. rx_out index increase
   * */
	uint8_t ret;
	ret = rx_buf[rx_out];
 8009166:	4b0f      	ldr	r3, [pc, #60]	; (80091a4 <cdcRead+0x44>)
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	4a0f      	ldr	r2, [pc, #60]	; (80091a8 <cdcRead+0x48>)
 800916c:	5cd3      	ldrb	r3, [r2, r3]
 800916e:	71fb      	strb	r3, [r7, #7]

	if(rx_out != rx_in)
 8009170:	4b0c      	ldr	r3, [pc, #48]	; (80091a4 <cdcRead+0x44>)
 8009172:	681a      	ldr	r2, [r3, #0]
 8009174:	4b0d      	ldr	r3, [pc, #52]	; (80091ac <cdcRead+0x4c>)
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	429a      	cmp	r2, r3
 800917a:	d00b      	beq.n	8009194 <cdcRead+0x34>
	{
		rx_out = (rx_out + 1) % rx_len;
 800917c:	4b09      	ldr	r3, [pc, #36]	; (80091a4 <cdcRead+0x44>)
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	3301      	adds	r3, #1
 8009182:	4a0b      	ldr	r2, [pc, #44]	; (80091b0 <cdcRead+0x50>)
 8009184:	6812      	ldr	r2, [r2, #0]
 8009186:	fbb3 f1f2 	udiv	r1, r3, r2
 800918a:	fb01 f202 	mul.w	r2, r1, r2
 800918e:	1a9b      	subs	r3, r3, r2
 8009190:	4a04      	ldr	r2, [pc, #16]	; (80091a4 <cdcRead+0x44>)
 8009192:	6013      	str	r3, [r2, #0]
	}
	return ret;
 8009194:	79fb      	ldrb	r3, [r7, #7]
}
 8009196:	4618      	mov	r0, r3
 8009198:	370c      	adds	r7, #12
 800919a:	46bd      	mov	sp, r7
 800919c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091a0:	4770      	bx	lr
 80091a2:	bf00      	nop
 80091a4:	2000071c 	.word	0x2000071c
 80091a8:	20000720 	.word	0x20000720
 80091ac:	20000718 	.word	0x20000718
 80091b0:	20000140 	.word	0x20000140

080091b4 <cdcDataIn>:

void cdcDataIn(uint8_t rx_data)
{
 80091b4:	b480      	push	{r7}
 80091b6:	b085      	sub	sp, #20
 80091b8:	af00      	add	r7, sp, #0
 80091ba:	4603      	mov	r3, r0
 80091bc:	71fb      	strb	r3, [r7, #7]
	uint32_t next_rx_in;
	next_rx_in = (rx_in + 1) % rx_len;
 80091be:	4b0f      	ldr	r3, [pc, #60]	; (80091fc <cdcDataIn+0x48>)
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	3301      	adds	r3, #1
 80091c4:	4a0e      	ldr	r2, [pc, #56]	; (8009200 <cdcDataIn+0x4c>)
 80091c6:	6812      	ldr	r2, [r2, #0]
 80091c8:	fbb3 f1f2 	udiv	r1, r3, r2
 80091cc:	fb01 f202 	mul.w	r2, r1, r2
 80091d0:	1a9b      	subs	r3, r3, r2
 80091d2:	60fb      	str	r3, [r7, #12]
	rx_buf[rx_in] = rx_data;
 80091d4:	4b09      	ldr	r3, [pc, #36]	; (80091fc <cdcDataIn+0x48>)
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	490a      	ldr	r1, [pc, #40]	; (8009204 <cdcDataIn+0x50>)
 80091da:	79fa      	ldrb	r2, [r7, #7]
 80091dc:	54ca      	strb	r2, [r1, r3]
	if(next_rx_in != rx_out)
 80091de:	4b0a      	ldr	r3, [pc, #40]	; (8009208 <cdcDataIn+0x54>)
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	68fa      	ldr	r2, [r7, #12]
 80091e4:	429a      	cmp	r2, r3
 80091e6:	d002      	beq.n	80091ee <cdcDataIn+0x3a>
	{
		rx_in = next_rx_in;
 80091e8:	4a04      	ldr	r2, [pc, #16]	; (80091fc <cdcDataIn+0x48>)
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	6013      	str	r3, [r2, #0]
	}
}
 80091ee:	bf00      	nop
 80091f0:	3714      	adds	r7, #20
 80091f2:	46bd      	mov	sp, r7
 80091f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091f8:	4770      	bx	lr
 80091fa:	bf00      	nop
 80091fc:	20000718 	.word	0x20000718
 8009200:	20000140 	.word	0x20000140
 8009204:	20000720 	.word	0x20000720
 8009208:	2000071c 	.word	0x2000071c

0800920c <cdcWrite>:
uint32_t cdcWrite(uint8_t *pData, uint32_t length)
{
 800920c:	b580      	push	{r7, lr}
 800920e:	b084      	sub	sp, #16
 8009210:	af00      	add	r7, sp, #0
 8009212:	6078      	str	r0, [r7, #4]
 8009214:	6039      	str	r1, [r7, #0]
  /* 1. basically transmit..
   * */
	uint32_t pre_time;
	uint8_t ret;

	pre_time = millis();
 8009216:	f7f7 fa98 	bl	800074a <millis>
 800921a:	60f8      	str	r0, [r7, #12]
	while(1)
	{
		ret = CDC_Transmit_FS(pData, length);
 800921c:	683b      	ldr	r3, [r7, #0]
 800921e:	b29b      	uxth	r3, r3
 8009220:	4619      	mov	r1, r3
 8009222:	6878      	ldr	r0, [r7, #4]
 8009224:	f000 f94a 	bl	80094bc <CDC_Transmit_FS>
 8009228:	4603      	mov	r3, r0
 800922a:	72fb      	strb	r3, [r7, #11]

		if(ret == USBD_OK)
 800922c:	7afb      	ldrb	r3, [r7, #11]
 800922e:	2b00      	cmp	r3, #0
 8009230:	d101      	bne.n	8009236 <cdcWrite+0x2a>
		{
			return length;
 8009232:	683b      	ldr	r3, [r7, #0]
 8009234:	e00e      	b.n	8009254 <cdcWrite+0x48>
		}
		else if(ret == USBD_FAIL)
 8009236:	7afb      	ldrb	r3, [r7, #11]
 8009238:	2b03      	cmp	r3, #3
 800923a:	d101      	bne.n	8009240 <cdcWrite+0x34>
		{
			return 0;
 800923c:	2300      	movs	r3, #0
 800923e:	e009      	b.n	8009254 <cdcWrite+0x48>
		}

		if(millis() - pre_time >= 100)
 8009240:	f7f7 fa83 	bl	800074a <millis>
 8009244:	4602      	mov	r2, r0
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	1ad3      	subs	r3, r2, r3
 800924a:	2b63      	cmp	r3, #99	; 0x63
 800924c:	d800      	bhi.n	8009250 <cdcWrite+0x44>
		ret = CDC_Transmit_FS(pData, length);
 800924e:	e7e5      	b.n	800921c <cdcWrite+0x10>
		{
		  //time out
			break;
 8009250:	bf00      	nop
		}

	}
	return 0;
 8009252:	2300      	movs	r3, #0
}
 8009254:	4618      	mov	r0, r3
 8009256:	3710      	adds	r7, #16
 8009258:	46bd      	mov	sp, r7
 800925a:	bd80      	pop	{r7, pc}

0800925c <USBD_CDC_SOF>:
{
	return LineCoding.bitrate;
}

uint8_t USBD_CDC_SOF(struct _USBD_HandleTypeDef *pdev)
{
 800925c:	b590      	push	{r4, r7, lr}
 800925e:	b085      	sub	sp, #20
 8009260:	af00      	add	r7, sp, #0
 8009262:	6078      	str	r0, [r7, #4]
  if(rx_full == true)
 8009264:	4b0c      	ldr	r3, [pc, #48]	; (8009298 <USBD_CDC_SOF+0x3c>)
 8009266:	781b      	ldrb	r3, [r3, #0]
 8009268:	2b00      	cmp	r3, #0
 800926a:	d010      	beq.n	800928e <USBD_CDC_SOF+0x32>
  {
    uint32_t buf_len;

    //Empty space amount of received buffer
    buf_len = (rx_len - cdcAvailable()) - 1; // for write one space -> -1
 800926c:	4b0b      	ldr	r3, [pc, #44]	; (800929c <USBD_CDC_SOF+0x40>)
 800926e:	681c      	ldr	r4, [r3, #0]
 8009270:	f7ff ff58 	bl	8009124 <cdcAvailable>
 8009274:	4603      	mov	r3, r0
 8009276:	1ae3      	subs	r3, r4, r3
 8009278:	3b01      	subs	r3, #1
 800927a:	60fb      	str	r3, [r7, #12]

    if(buf_len >= USB_FS_MAX_PACKET_SIZE)
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	2b3f      	cmp	r3, #63	; 0x3f
 8009280:	d905      	bls.n	800928e <USBD_CDC_SOF+0x32>
    {
      //USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]); only one is enough
      USBD_CDC_ReceivePacket(pdev);
 8009282:	6878      	ldr	r0, [r7, #4]
 8009284:	f7fe fd8a 	bl	8007d9c <USBD_CDC_ReceivePacket>
      rx_full = false;
 8009288:	4b03      	ldr	r3, [pc, #12]	; (8009298 <USBD_CDC_SOF+0x3c>)
 800928a:	2200      	movs	r2, #0
 800928c:	701a      	strb	r2, [r3, #0]
    }

  }
  return 0;
 800928e:	2300      	movs	r3, #0
}
 8009290:	4618      	mov	r0, r3
 8009292:	3714      	adds	r7, #20
 8009294:	46bd      	mov	sp, r7
 8009296:	bd90      	pop	{r4, r7, pc}
 8009298:	20000920 	.word	0x20000920
 800929c:	20000140 	.word	0x20000140

080092a0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80092a0:	b580      	push	{r7, lr}
 80092a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80092a4:	2200      	movs	r2, #0
 80092a6:	4905      	ldr	r1, [pc, #20]	; (80092bc <CDC_Init_FS+0x1c>)
 80092a8:	4805      	ldr	r0, [pc, #20]	; (80092c0 <CDC_Init_FS+0x20>)
 80092aa:	f7fe fd10 	bl	8007cce <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80092ae:	4905      	ldr	r1, [pc, #20]	; (80092c4 <CDC_Init_FS+0x24>)
 80092b0:	4803      	ldr	r0, [pc, #12]	; (80092c0 <CDC_Init_FS+0x20>)
 80092b2:	f7fe fd2a 	bl	8007d0a <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80092b6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80092b8:	4618      	mov	r0, r3
 80092ba:	bd80      	pop	{r7, pc}
 80092bc:	20000d24 	.word	0x20000d24
 80092c0:	20000440 	.word	0x20000440
 80092c4:	20000924 	.word	0x20000924

080092c8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80092c8:	b480      	push	{r7}
 80092ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80092cc:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80092ce:	4618      	mov	r0, r3
 80092d0:	46bd      	mov	sp, r7
 80092d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092d6:	4770      	bx	lr

080092d8 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80092d8:	b480      	push	{r7}
 80092da:	b083      	sub	sp, #12
 80092dc:	af00      	add	r7, sp, #0
 80092de:	4603      	mov	r3, r0
 80092e0:	6039      	str	r1, [r7, #0]
 80092e2:	71fb      	strb	r3, [r7, #7]
 80092e4:	4613      	mov	r3, r2
 80092e6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80092e8:	79fb      	ldrb	r3, [r7, #7]
 80092ea:	2b23      	cmp	r3, #35	; 0x23
 80092ec:	f200 80a3 	bhi.w	8009436 <CDC_Control_FS+0x15e>
 80092f0:	a201      	add	r2, pc, #4	; (adr r2, 80092f8 <CDC_Control_FS+0x20>)
 80092f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092f6:	bf00      	nop
 80092f8:	08009437 	.word	0x08009437
 80092fc:	08009437 	.word	0x08009437
 8009300:	08009437 	.word	0x08009437
 8009304:	08009437 	.word	0x08009437
 8009308:	08009437 	.word	0x08009437
 800930c:	08009437 	.word	0x08009437
 8009310:	08009437 	.word	0x08009437
 8009314:	08009437 	.word	0x08009437
 8009318:	08009437 	.word	0x08009437
 800931c:	08009437 	.word	0x08009437
 8009320:	08009437 	.word	0x08009437
 8009324:	08009437 	.word	0x08009437
 8009328:	08009437 	.word	0x08009437
 800932c:	08009437 	.word	0x08009437
 8009330:	08009437 	.word	0x08009437
 8009334:	08009437 	.word	0x08009437
 8009338:	08009437 	.word	0x08009437
 800933c:	08009437 	.word	0x08009437
 8009340:	08009437 	.word	0x08009437
 8009344:	08009437 	.word	0x08009437
 8009348:	08009437 	.word	0x08009437
 800934c:	08009437 	.word	0x08009437
 8009350:	08009437 	.word	0x08009437
 8009354:	08009437 	.word	0x08009437
 8009358:	08009437 	.word	0x08009437
 800935c:	08009437 	.word	0x08009437
 8009360:	08009437 	.word	0x08009437
 8009364:	08009437 	.word	0x08009437
 8009368:	08009437 	.word	0x08009437
 800936c:	08009437 	.word	0x08009437
 8009370:	08009437 	.word	0x08009437
 8009374:	08009437 	.word	0x08009437
 8009378:	08009389 	.word	0x08009389
 800937c:	080093e3 	.word	0x080093e3
 8009380:	08009437 	.word	0x08009437
 8009384:	08009437 	.word	0x08009437
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING: // MCU�?? ?��?��?���?? set
    	LineCoding.bitrate 		 = (uint32_t)(pbuf[0]);
 8009388:	683b      	ldr	r3, [r7, #0]
 800938a:	781b      	ldrb	r3, [r3, #0]
 800938c:	461a      	mov	r2, r3
 800938e:	4b2e      	ldr	r3, [pc, #184]	; (8009448 <CDC_Control_FS+0x170>)
 8009390:	601a      	str	r2, [r3, #0]
    	LineCoding.bitrate 		|= (uint32_t)(pbuf[1]) << 8;
 8009392:	4b2d      	ldr	r3, [pc, #180]	; (8009448 <CDC_Control_FS+0x170>)
 8009394:	681a      	ldr	r2, [r3, #0]
 8009396:	683b      	ldr	r3, [r7, #0]
 8009398:	3301      	adds	r3, #1
 800939a:	781b      	ldrb	r3, [r3, #0]
 800939c:	021b      	lsls	r3, r3, #8
 800939e:	4313      	orrs	r3, r2
 80093a0:	4a29      	ldr	r2, [pc, #164]	; (8009448 <CDC_Control_FS+0x170>)
 80093a2:	6013      	str	r3, [r2, #0]
    	LineCoding.bitrate 		|= (uint32_t)(pbuf[2]) << 16;
 80093a4:	4b28      	ldr	r3, [pc, #160]	; (8009448 <CDC_Control_FS+0x170>)
 80093a6:	681a      	ldr	r2, [r3, #0]
 80093a8:	683b      	ldr	r3, [r7, #0]
 80093aa:	3302      	adds	r3, #2
 80093ac:	781b      	ldrb	r3, [r3, #0]
 80093ae:	041b      	lsls	r3, r3, #16
 80093b0:	4313      	orrs	r3, r2
 80093b2:	4a25      	ldr	r2, [pc, #148]	; (8009448 <CDC_Control_FS+0x170>)
 80093b4:	6013      	str	r3, [r2, #0]
    	LineCoding.bitrate 		|= (uint32_t)(pbuf[3]) << 24;
 80093b6:	4b24      	ldr	r3, [pc, #144]	; (8009448 <CDC_Control_FS+0x170>)
 80093b8:	681a      	ldr	r2, [r3, #0]
 80093ba:	683b      	ldr	r3, [r7, #0]
 80093bc:	3303      	adds	r3, #3
 80093be:	781b      	ldrb	r3, [r3, #0]
 80093c0:	061b      	lsls	r3, r3, #24
 80093c2:	4313      	orrs	r3, r2
 80093c4:	4a20      	ldr	r2, [pc, #128]	; (8009448 <CDC_Control_FS+0x170>)
 80093c6:	6013      	str	r3, [r2, #0]
    	LineCoding.format 		 = pbuf[4];
 80093c8:	683b      	ldr	r3, [r7, #0]
 80093ca:	791a      	ldrb	r2, [r3, #4]
 80093cc:	4b1e      	ldr	r3, [pc, #120]	; (8009448 <CDC_Control_FS+0x170>)
 80093ce:	711a      	strb	r2, [r3, #4]
    	LineCoding.paritytype  = pbuf[5];
 80093d0:	683b      	ldr	r3, [r7, #0]
 80093d2:	795a      	ldrb	r2, [r3, #5]
 80093d4:	4b1c      	ldr	r3, [pc, #112]	; (8009448 <CDC_Control_FS+0x170>)
 80093d6:	715a      	strb	r2, [r3, #5]
    	LineCoding.datatype 	 = pbuf[6];
 80093d8:	683b      	ldr	r3, [r7, #0]
 80093da:	799a      	ldrb	r2, [r3, #6]
 80093dc:	4b1a      	ldr	r3, [pc, #104]	; (8009448 <CDC_Control_FS+0x170>)
 80093de:	719a      	strb	r2, [r3, #6]
    break;
 80093e0:	e02a      	b.n	8009438 <CDC_Control_FS+0x160>

    case CDC_GET_LINE_CODING: // PC�?? ?��?��?���?? ?��?���??
    	pbuf[0] = (uint8_t)(LineCoding.bitrate);
 80093e2:	4b19      	ldr	r3, [pc, #100]	; (8009448 <CDC_Control_FS+0x170>)
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	b2da      	uxtb	r2, r3
 80093e8:	683b      	ldr	r3, [r7, #0]
 80093ea:	701a      	strb	r2, [r3, #0]
    	pbuf[1] = (uint8_t)(LineCoding.bitrate >> 8);
 80093ec:	4b16      	ldr	r3, [pc, #88]	; (8009448 <CDC_Control_FS+0x170>)
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	0a1a      	lsrs	r2, r3, #8
 80093f2:	683b      	ldr	r3, [r7, #0]
 80093f4:	3301      	adds	r3, #1
 80093f6:	b2d2      	uxtb	r2, r2
 80093f8:	701a      	strb	r2, [r3, #0]
    	pbuf[2] = (uint8_t)(LineCoding.bitrate >> 16);
 80093fa:	4b13      	ldr	r3, [pc, #76]	; (8009448 <CDC_Control_FS+0x170>)
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	0c1a      	lsrs	r2, r3, #16
 8009400:	683b      	ldr	r3, [r7, #0]
 8009402:	3302      	adds	r3, #2
 8009404:	b2d2      	uxtb	r2, r2
 8009406:	701a      	strb	r2, [r3, #0]
    	pbuf[3] = (uint8_t)(LineCoding.bitrate >> 24);
 8009408:	4b0f      	ldr	r3, [pc, #60]	; (8009448 <CDC_Control_FS+0x170>)
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	0e1a      	lsrs	r2, r3, #24
 800940e:	683b      	ldr	r3, [r7, #0]
 8009410:	3303      	adds	r3, #3
 8009412:	b2d2      	uxtb	r2, r2
 8009414:	701a      	strb	r2, [r3, #0]
    	pbuf[4] = LineCoding.format;
 8009416:	683b      	ldr	r3, [r7, #0]
 8009418:	3304      	adds	r3, #4
 800941a:	4a0b      	ldr	r2, [pc, #44]	; (8009448 <CDC_Control_FS+0x170>)
 800941c:	7912      	ldrb	r2, [r2, #4]
 800941e:	701a      	strb	r2, [r3, #0]
    	pbuf[5] = LineCoding.paritytype;
 8009420:	683b      	ldr	r3, [r7, #0]
 8009422:	3305      	adds	r3, #5
 8009424:	4a08      	ldr	r2, [pc, #32]	; (8009448 <CDC_Control_FS+0x170>)
 8009426:	7952      	ldrb	r2, [r2, #5]
 8009428:	701a      	strb	r2, [r3, #0]
    	pbuf[6] = LineCoding.datatype;
 800942a:	683b      	ldr	r3, [r7, #0]
 800942c:	3306      	adds	r3, #6
 800942e:	4a06      	ldr	r2, [pc, #24]	; (8009448 <CDC_Control_FS+0x170>)
 8009430:	7992      	ldrb	r2, [r2, #6]
 8009432:	701a      	strb	r2, [r3, #0]
    break;
 8009434:	e000      	b.n	8009438 <CDC_Control_FS+0x160>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8009436:	bf00      	nop
  }

  return (USBD_OK);
 8009438:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800943a:	4618      	mov	r0, r3
 800943c:	370c      	adds	r7, #12
 800943e:	46bd      	mov	sp, r7
 8009440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009444:	4770      	bx	lr
 8009446:	bf00      	nop
 8009448:	20000710 	.word	0x20000710

0800944c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800944c:	b590      	push	{r4, r7, lr}
 800944e:	b085      	sub	sp, #20
 8009450:	af00      	add	r7, sp, #0
 8009452:	6078      	str	r0, [r7, #4]
 8009454:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */

  for(int i=0; i<*Len; i++)
 8009456:	2300      	movs	r3, #0
 8009458:	60fb      	str	r3, [r7, #12]
 800945a:	e009      	b.n	8009470 <CDC_Receive_FS+0x24>
  {
    cdcDataIn(Buf[i]);
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	687a      	ldr	r2, [r7, #4]
 8009460:	4413      	add	r3, r2
 8009462:	781b      	ldrb	r3, [r3, #0]
 8009464:	4618      	mov	r0, r3
 8009466:	f7ff fea5 	bl	80091b4 <cdcDataIn>
  for(int i=0; i<*Len; i++)
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	3301      	adds	r3, #1
 800946e:	60fb      	str	r3, [r7, #12]
 8009470:	683b      	ldr	r3, [r7, #0]
 8009472:	681a      	ldr	r2, [r3, #0]
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	429a      	cmp	r2, r3
 8009478:	d8f0      	bhi.n	800945c <CDC_Receive_FS+0x10>
  }
  uint32_t buf_len;

  //Empty space amount of received buffer
  buf_len = (rx_len - cdcAvailable()) - 1; // for write one space -> -1
 800947a:	4b0d      	ldr	r3, [pc, #52]	; (80094b0 <CDC_Receive_FS+0x64>)
 800947c:	681c      	ldr	r4, [r3, #0]
 800947e:	f7ff fe51 	bl	8009124 <cdcAvailable>
 8009482:	4603      	mov	r3, r0
 8009484:	1ae3      	subs	r3, r4, r3
 8009486:	3b01      	subs	r3, #1
 8009488:	60bb      	str	r3, [r7, #8]

  if(buf_len >= USB_FS_MAX_PACKET_SIZE)
 800948a:	68bb      	ldr	r3, [r7, #8]
 800948c:	2b3f      	cmp	r3, #63	; 0x3f
 800948e:	d907      	bls.n	80094a0 <CDC_Receive_FS+0x54>
  {
    USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8009490:	6879      	ldr	r1, [r7, #4]
 8009492:	4808      	ldr	r0, [pc, #32]	; (80094b4 <CDC_Receive_FS+0x68>)
 8009494:	f7fe fc39 	bl	8007d0a <USBD_CDC_SetRxBuffer>
    USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8009498:	4806      	ldr	r0, [pc, #24]	; (80094b4 <CDC_Receive_FS+0x68>)
 800949a:	f7fe fc7f 	bl	8007d9c <USBD_CDC_ReceivePacket>
 800949e:	e002      	b.n	80094a6 <CDC_Receive_FS+0x5a>
  }
  else
  {
    /*buffer not enough space.. please wait*/
    rx_full = true;
 80094a0:	4b05      	ldr	r3, [pc, #20]	; (80094b8 <CDC_Receive_FS+0x6c>)
 80094a2:	2201      	movs	r2, #1
 80094a4:	701a      	strb	r2, [r3, #0]
  }

  return (USBD_OK);
 80094a6:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80094a8:	4618      	mov	r0, r3
 80094aa:	3714      	adds	r7, #20
 80094ac:	46bd      	mov	sp, r7
 80094ae:	bd90      	pop	{r4, r7, pc}
 80094b0:	20000140 	.word	0x20000140
 80094b4:	20000440 	.word	0x20000440
 80094b8:	20000920 	.word	0x20000920

080094bc <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80094bc:	b580      	push	{r7, lr}
 80094be:	b084      	sub	sp, #16
 80094c0:	af00      	add	r7, sp, #0
 80094c2:	6078      	str	r0, [r7, #4]
 80094c4:	460b      	mov	r3, r1
 80094c6:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80094c8:	2300      	movs	r3, #0
 80094ca:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80094cc:	4b0d      	ldr	r3, [pc, #52]	; (8009504 <CDC_Transmit_FS+0x48>)
 80094ce:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80094d2:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80094d4:	68bb      	ldr	r3, [r7, #8]
 80094d6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d001      	beq.n	80094e2 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80094de:	2301      	movs	r3, #1
 80094e0:	e00b      	b.n	80094fa <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80094e2:	887b      	ldrh	r3, [r7, #2]
 80094e4:	461a      	mov	r2, r3
 80094e6:	6879      	ldr	r1, [r7, #4]
 80094e8:	4806      	ldr	r0, [pc, #24]	; (8009504 <CDC_Transmit_FS+0x48>)
 80094ea:	f7fe fbf0 	bl	8007cce <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80094ee:	4805      	ldr	r0, [pc, #20]	; (8009504 <CDC_Transmit_FS+0x48>)
 80094f0:	f7fe fc24 	bl	8007d3c <USBD_CDC_TransmitPacket>
 80094f4:	4603      	mov	r3, r0
 80094f6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80094f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80094fa:	4618      	mov	r0, r3
 80094fc:	3710      	adds	r7, #16
 80094fe:	46bd      	mov	sp, r7
 8009500:	bd80      	pop	{r7, pc}
 8009502:	bf00      	nop
 8009504:	20000440 	.word	0x20000440

08009508 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8009508:	b480      	push	{r7}
 800950a:	b087      	sub	sp, #28
 800950c:	af00      	add	r7, sp, #0
 800950e:	60f8      	str	r0, [r7, #12]
 8009510:	60b9      	str	r1, [r7, #8]
 8009512:	4613      	mov	r3, r2
 8009514:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8009516:	2300      	movs	r3, #0
 8009518:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800951a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800951e:	4618      	mov	r0, r3
 8009520:	371c      	adds	r7, #28
 8009522:	46bd      	mov	sp, r7
 8009524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009528:	4770      	bx	lr
	...

0800952c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800952c:	b480      	push	{r7}
 800952e:	b083      	sub	sp, #12
 8009530:	af00      	add	r7, sp, #0
 8009532:	4603      	mov	r3, r0
 8009534:	6039      	str	r1, [r7, #0]
 8009536:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009538:	683b      	ldr	r3, [r7, #0]
 800953a:	2212      	movs	r2, #18
 800953c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800953e:	4b03      	ldr	r3, [pc, #12]	; (800954c <USBD_FS_DeviceDescriptor+0x20>)
}
 8009540:	4618      	mov	r0, r3
 8009542:	370c      	adds	r7, #12
 8009544:	46bd      	mov	sp, r7
 8009546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800954a:	4770      	bx	lr
 800954c:	20000174 	.word	0x20000174

08009550 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009550:	b480      	push	{r7}
 8009552:	b083      	sub	sp, #12
 8009554:	af00      	add	r7, sp, #0
 8009556:	4603      	mov	r3, r0
 8009558:	6039      	str	r1, [r7, #0]
 800955a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800955c:	683b      	ldr	r3, [r7, #0]
 800955e:	2204      	movs	r2, #4
 8009560:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009562:	4b03      	ldr	r3, [pc, #12]	; (8009570 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8009564:	4618      	mov	r0, r3
 8009566:	370c      	adds	r7, #12
 8009568:	46bd      	mov	sp, r7
 800956a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800956e:	4770      	bx	lr
 8009570:	20000188 	.word	0x20000188

08009574 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009574:	b580      	push	{r7, lr}
 8009576:	b082      	sub	sp, #8
 8009578:	af00      	add	r7, sp, #0
 800957a:	4603      	mov	r3, r0
 800957c:	6039      	str	r1, [r7, #0]
 800957e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009580:	79fb      	ldrb	r3, [r7, #7]
 8009582:	2b00      	cmp	r3, #0
 8009584:	d105      	bne.n	8009592 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009586:	683a      	ldr	r2, [r7, #0]
 8009588:	4907      	ldr	r1, [pc, #28]	; (80095a8 <USBD_FS_ProductStrDescriptor+0x34>)
 800958a:	4808      	ldr	r0, [pc, #32]	; (80095ac <USBD_FS_ProductStrDescriptor+0x38>)
 800958c:	f7ff fcb9 	bl	8008f02 <USBD_GetString>
 8009590:	e004      	b.n	800959c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009592:	683a      	ldr	r2, [r7, #0]
 8009594:	4904      	ldr	r1, [pc, #16]	; (80095a8 <USBD_FS_ProductStrDescriptor+0x34>)
 8009596:	4805      	ldr	r0, [pc, #20]	; (80095ac <USBD_FS_ProductStrDescriptor+0x38>)
 8009598:	f7ff fcb3 	bl	8008f02 <USBD_GetString>
  }
  return USBD_StrDesc;
 800959c:	4b02      	ldr	r3, [pc, #8]	; (80095a8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800959e:	4618      	mov	r0, r3
 80095a0:	3708      	adds	r7, #8
 80095a2:	46bd      	mov	sp, r7
 80095a4:	bd80      	pop	{r7, pc}
 80095a6:	bf00      	nop
 80095a8:	20001124 	.word	0x20001124
 80095ac:	0800ae68 	.word	0x0800ae68

080095b0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80095b0:	b580      	push	{r7, lr}
 80095b2:	b082      	sub	sp, #8
 80095b4:	af00      	add	r7, sp, #0
 80095b6:	4603      	mov	r3, r0
 80095b8:	6039      	str	r1, [r7, #0]
 80095ba:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80095bc:	683a      	ldr	r2, [r7, #0]
 80095be:	4904      	ldr	r1, [pc, #16]	; (80095d0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80095c0:	4804      	ldr	r0, [pc, #16]	; (80095d4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80095c2:	f7ff fc9e 	bl	8008f02 <USBD_GetString>
  return USBD_StrDesc;
 80095c6:	4b02      	ldr	r3, [pc, #8]	; (80095d0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80095c8:	4618      	mov	r0, r3
 80095ca:	3708      	adds	r7, #8
 80095cc:	46bd      	mov	sp, r7
 80095ce:	bd80      	pop	{r7, pc}
 80095d0:	20001124 	.word	0x20001124
 80095d4:	0800ae80 	.word	0x0800ae80

080095d8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80095d8:	b580      	push	{r7, lr}
 80095da:	b082      	sub	sp, #8
 80095dc:	af00      	add	r7, sp, #0
 80095de:	4603      	mov	r3, r0
 80095e0:	6039      	str	r1, [r7, #0]
 80095e2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80095e4:	683b      	ldr	r3, [r7, #0]
 80095e6:	221a      	movs	r2, #26
 80095e8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80095ea:	f000 f843 	bl	8009674 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80095ee:	4b02      	ldr	r3, [pc, #8]	; (80095f8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80095f0:	4618      	mov	r0, r3
 80095f2:	3708      	adds	r7, #8
 80095f4:	46bd      	mov	sp, r7
 80095f6:	bd80      	pop	{r7, pc}
 80095f8:	2000018c 	.word	0x2000018c

080095fc <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80095fc:	b580      	push	{r7, lr}
 80095fe:	b082      	sub	sp, #8
 8009600:	af00      	add	r7, sp, #0
 8009602:	4603      	mov	r3, r0
 8009604:	6039      	str	r1, [r7, #0]
 8009606:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009608:	79fb      	ldrb	r3, [r7, #7]
 800960a:	2b00      	cmp	r3, #0
 800960c:	d105      	bne.n	800961a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800960e:	683a      	ldr	r2, [r7, #0]
 8009610:	4907      	ldr	r1, [pc, #28]	; (8009630 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009612:	4808      	ldr	r0, [pc, #32]	; (8009634 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009614:	f7ff fc75 	bl	8008f02 <USBD_GetString>
 8009618:	e004      	b.n	8009624 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800961a:	683a      	ldr	r2, [r7, #0]
 800961c:	4904      	ldr	r1, [pc, #16]	; (8009630 <USBD_FS_ConfigStrDescriptor+0x34>)
 800961e:	4805      	ldr	r0, [pc, #20]	; (8009634 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009620:	f7ff fc6f 	bl	8008f02 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009624:	4b02      	ldr	r3, [pc, #8]	; (8009630 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8009626:	4618      	mov	r0, r3
 8009628:	3708      	adds	r7, #8
 800962a:	46bd      	mov	sp, r7
 800962c:	bd80      	pop	{r7, pc}
 800962e:	bf00      	nop
 8009630:	20001124 	.word	0x20001124
 8009634:	0800ae94 	.word	0x0800ae94

08009638 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009638:	b580      	push	{r7, lr}
 800963a:	b082      	sub	sp, #8
 800963c:	af00      	add	r7, sp, #0
 800963e:	4603      	mov	r3, r0
 8009640:	6039      	str	r1, [r7, #0]
 8009642:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009644:	79fb      	ldrb	r3, [r7, #7]
 8009646:	2b00      	cmp	r3, #0
 8009648:	d105      	bne.n	8009656 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800964a:	683a      	ldr	r2, [r7, #0]
 800964c:	4907      	ldr	r1, [pc, #28]	; (800966c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800964e:	4808      	ldr	r0, [pc, #32]	; (8009670 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009650:	f7ff fc57 	bl	8008f02 <USBD_GetString>
 8009654:	e004      	b.n	8009660 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009656:	683a      	ldr	r2, [r7, #0]
 8009658:	4904      	ldr	r1, [pc, #16]	; (800966c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800965a:	4805      	ldr	r0, [pc, #20]	; (8009670 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800965c:	f7ff fc51 	bl	8008f02 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009660:	4b02      	ldr	r3, [pc, #8]	; (800966c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8009662:	4618      	mov	r0, r3
 8009664:	3708      	adds	r7, #8
 8009666:	46bd      	mov	sp, r7
 8009668:	bd80      	pop	{r7, pc}
 800966a:	bf00      	nop
 800966c:	20001124 	.word	0x20001124
 8009670:	0800aea0 	.word	0x0800aea0

08009674 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009674:	b580      	push	{r7, lr}
 8009676:	b084      	sub	sp, #16
 8009678:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800967a:	4b0f      	ldr	r3, [pc, #60]	; (80096b8 <Get_SerialNum+0x44>)
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009680:	4b0e      	ldr	r3, [pc, #56]	; (80096bc <Get_SerialNum+0x48>)
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009686:	4b0e      	ldr	r3, [pc, #56]	; (80096c0 <Get_SerialNum+0x4c>)
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800968c:	68fa      	ldr	r2, [r7, #12]
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	4413      	add	r3, r2
 8009692:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	2b00      	cmp	r3, #0
 8009698:	d009      	beq.n	80096ae <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800969a:	2208      	movs	r2, #8
 800969c:	4909      	ldr	r1, [pc, #36]	; (80096c4 <Get_SerialNum+0x50>)
 800969e:	68f8      	ldr	r0, [r7, #12]
 80096a0:	f000 f814 	bl	80096cc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80096a4:	2204      	movs	r2, #4
 80096a6:	4908      	ldr	r1, [pc, #32]	; (80096c8 <Get_SerialNum+0x54>)
 80096a8:	68b8      	ldr	r0, [r7, #8]
 80096aa:	f000 f80f 	bl	80096cc <IntToUnicode>
  }
}
 80096ae:	bf00      	nop
 80096b0:	3710      	adds	r7, #16
 80096b2:	46bd      	mov	sp, r7
 80096b4:	bd80      	pop	{r7, pc}
 80096b6:	bf00      	nop
 80096b8:	1fff7a10 	.word	0x1fff7a10
 80096bc:	1fff7a14 	.word	0x1fff7a14
 80096c0:	1fff7a18 	.word	0x1fff7a18
 80096c4:	2000018e 	.word	0x2000018e
 80096c8:	2000019e 	.word	0x2000019e

080096cc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80096cc:	b480      	push	{r7}
 80096ce:	b087      	sub	sp, #28
 80096d0:	af00      	add	r7, sp, #0
 80096d2:	60f8      	str	r0, [r7, #12]
 80096d4:	60b9      	str	r1, [r7, #8]
 80096d6:	4613      	mov	r3, r2
 80096d8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80096da:	2300      	movs	r3, #0
 80096dc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80096de:	2300      	movs	r3, #0
 80096e0:	75fb      	strb	r3, [r7, #23]
 80096e2:	e027      	b.n	8009734 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	0f1b      	lsrs	r3, r3, #28
 80096e8:	2b09      	cmp	r3, #9
 80096ea:	d80b      	bhi.n	8009704 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	0f1b      	lsrs	r3, r3, #28
 80096f0:	b2da      	uxtb	r2, r3
 80096f2:	7dfb      	ldrb	r3, [r7, #23]
 80096f4:	005b      	lsls	r3, r3, #1
 80096f6:	4619      	mov	r1, r3
 80096f8:	68bb      	ldr	r3, [r7, #8]
 80096fa:	440b      	add	r3, r1
 80096fc:	3230      	adds	r2, #48	; 0x30
 80096fe:	b2d2      	uxtb	r2, r2
 8009700:	701a      	strb	r2, [r3, #0]
 8009702:	e00a      	b.n	800971a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	0f1b      	lsrs	r3, r3, #28
 8009708:	b2da      	uxtb	r2, r3
 800970a:	7dfb      	ldrb	r3, [r7, #23]
 800970c:	005b      	lsls	r3, r3, #1
 800970e:	4619      	mov	r1, r3
 8009710:	68bb      	ldr	r3, [r7, #8]
 8009712:	440b      	add	r3, r1
 8009714:	3237      	adds	r2, #55	; 0x37
 8009716:	b2d2      	uxtb	r2, r2
 8009718:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	011b      	lsls	r3, r3, #4
 800971e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009720:	7dfb      	ldrb	r3, [r7, #23]
 8009722:	005b      	lsls	r3, r3, #1
 8009724:	3301      	adds	r3, #1
 8009726:	68ba      	ldr	r2, [r7, #8]
 8009728:	4413      	add	r3, r2
 800972a:	2200      	movs	r2, #0
 800972c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800972e:	7dfb      	ldrb	r3, [r7, #23]
 8009730:	3301      	adds	r3, #1
 8009732:	75fb      	strb	r3, [r7, #23]
 8009734:	7dfa      	ldrb	r2, [r7, #23]
 8009736:	79fb      	ldrb	r3, [r7, #7]
 8009738:	429a      	cmp	r2, r3
 800973a:	d3d3      	bcc.n	80096e4 <IntToUnicode+0x18>
  }
}
 800973c:	bf00      	nop
 800973e:	bf00      	nop
 8009740:	371c      	adds	r7, #28
 8009742:	46bd      	mov	sp, r7
 8009744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009748:	4770      	bx	lr
	...

0800974c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800974c:	b580      	push	{r7, lr}
 800974e:	b08a      	sub	sp, #40	; 0x28
 8009750:	af00      	add	r7, sp, #0
 8009752:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009754:	f107 0314 	add.w	r3, r7, #20
 8009758:	2200      	movs	r2, #0
 800975a:	601a      	str	r2, [r3, #0]
 800975c:	605a      	str	r2, [r3, #4]
 800975e:	609a      	str	r2, [r3, #8]
 8009760:	60da      	str	r2, [r3, #12]
 8009762:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800976c:	d13a      	bne.n	80097e4 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800976e:	2300      	movs	r3, #0
 8009770:	613b      	str	r3, [r7, #16]
 8009772:	4b1e      	ldr	r3, [pc, #120]	; (80097ec <HAL_PCD_MspInit+0xa0>)
 8009774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009776:	4a1d      	ldr	r2, [pc, #116]	; (80097ec <HAL_PCD_MspInit+0xa0>)
 8009778:	f043 0301 	orr.w	r3, r3, #1
 800977c:	6313      	str	r3, [r2, #48]	; 0x30
 800977e:	4b1b      	ldr	r3, [pc, #108]	; (80097ec <HAL_PCD_MspInit+0xa0>)
 8009780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009782:	f003 0301 	and.w	r3, r3, #1
 8009786:	613b      	str	r3, [r7, #16]
 8009788:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800978a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800978e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009790:	2302      	movs	r3, #2
 8009792:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009794:	2300      	movs	r3, #0
 8009796:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009798:	2303      	movs	r3, #3
 800979a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800979c:	230a      	movs	r3, #10
 800979e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80097a0:	f107 0314 	add.w	r3, r7, #20
 80097a4:	4619      	mov	r1, r3
 80097a6:	4812      	ldr	r0, [pc, #72]	; (80097f0 <HAL_PCD_MspInit+0xa4>)
 80097a8:	f7f8 ffe2 	bl	8002770 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80097ac:	4b0f      	ldr	r3, [pc, #60]	; (80097ec <HAL_PCD_MspInit+0xa0>)
 80097ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80097b0:	4a0e      	ldr	r2, [pc, #56]	; (80097ec <HAL_PCD_MspInit+0xa0>)
 80097b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80097b6:	6353      	str	r3, [r2, #52]	; 0x34
 80097b8:	2300      	movs	r3, #0
 80097ba:	60fb      	str	r3, [r7, #12]
 80097bc:	4b0b      	ldr	r3, [pc, #44]	; (80097ec <HAL_PCD_MspInit+0xa0>)
 80097be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80097c0:	4a0a      	ldr	r2, [pc, #40]	; (80097ec <HAL_PCD_MspInit+0xa0>)
 80097c2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80097c6:	6453      	str	r3, [r2, #68]	; 0x44
 80097c8:	4b08      	ldr	r3, [pc, #32]	; (80097ec <HAL_PCD_MspInit+0xa0>)
 80097ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80097cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80097d0:	60fb      	str	r3, [r7, #12]
 80097d2:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80097d4:	2200      	movs	r2, #0
 80097d6:	2100      	movs	r1, #0
 80097d8:	2043      	movs	r0, #67	; 0x43
 80097da:	f7f8 f83c 	bl	8001856 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80097de:	2043      	movs	r0, #67	; 0x43
 80097e0:	f7f8 f855 	bl	800188e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80097e4:	bf00      	nop
 80097e6:	3728      	adds	r7, #40	; 0x28
 80097e8:	46bd      	mov	sp, r7
 80097ea:	bd80      	pop	{r7, pc}
 80097ec:	40023800 	.word	0x40023800
 80097f0:	40020000 	.word	0x40020000

080097f4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80097f4:	b580      	push	{r7, lr}
 80097f6:	b082      	sub	sp, #8
 80097f8:	af00      	add	r7, sp, #0
 80097fa:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8009808:	4619      	mov	r1, r3
 800980a:	4610      	mov	r0, r2
 800980c:	f7fe fb92 	bl	8007f34 <USBD_LL_SetupStage>
}
 8009810:	bf00      	nop
 8009812:	3708      	adds	r7, #8
 8009814:	46bd      	mov	sp, r7
 8009816:	bd80      	pop	{r7, pc}

08009818 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009818:	b580      	push	{r7, lr}
 800981a:	b082      	sub	sp, #8
 800981c:	af00      	add	r7, sp, #0
 800981e:	6078      	str	r0, [r7, #4]
 8009820:	460b      	mov	r3, r1
 8009822:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800982a:	78fa      	ldrb	r2, [r7, #3]
 800982c:	6879      	ldr	r1, [r7, #4]
 800982e:	4613      	mov	r3, r2
 8009830:	00db      	lsls	r3, r3, #3
 8009832:	1a9b      	subs	r3, r3, r2
 8009834:	009b      	lsls	r3, r3, #2
 8009836:	440b      	add	r3, r1
 8009838:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800983c:	681a      	ldr	r2, [r3, #0]
 800983e:	78fb      	ldrb	r3, [r7, #3]
 8009840:	4619      	mov	r1, r3
 8009842:	f7fe fbcc 	bl	8007fde <USBD_LL_DataOutStage>
}
 8009846:	bf00      	nop
 8009848:	3708      	adds	r7, #8
 800984a:	46bd      	mov	sp, r7
 800984c:	bd80      	pop	{r7, pc}

0800984e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800984e:	b580      	push	{r7, lr}
 8009850:	b082      	sub	sp, #8
 8009852:	af00      	add	r7, sp, #0
 8009854:	6078      	str	r0, [r7, #4]
 8009856:	460b      	mov	r3, r1
 8009858:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8009860:	78fa      	ldrb	r2, [r7, #3]
 8009862:	6879      	ldr	r1, [r7, #4]
 8009864:	4613      	mov	r3, r2
 8009866:	00db      	lsls	r3, r3, #3
 8009868:	1a9b      	subs	r3, r3, r2
 800986a:	009b      	lsls	r3, r3, #2
 800986c:	440b      	add	r3, r1
 800986e:	3348      	adds	r3, #72	; 0x48
 8009870:	681a      	ldr	r2, [r3, #0]
 8009872:	78fb      	ldrb	r3, [r7, #3]
 8009874:	4619      	mov	r1, r3
 8009876:	f7fe fc15 	bl	80080a4 <USBD_LL_DataInStage>
}
 800987a:	bf00      	nop
 800987c:	3708      	adds	r7, #8
 800987e:	46bd      	mov	sp, r7
 8009880:	bd80      	pop	{r7, pc}

08009882 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009882:	b580      	push	{r7, lr}
 8009884:	b082      	sub	sp, #8
 8009886:	af00      	add	r7, sp, #0
 8009888:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009890:	4618      	mov	r0, r3
 8009892:	f7fe fd29 	bl	80082e8 <USBD_LL_SOF>
}
 8009896:	bf00      	nop
 8009898:	3708      	adds	r7, #8
 800989a:	46bd      	mov	sp, r7
 800989c:	bd80      	pop	{r7, pc}

0800989e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800989e:	b580      	push	{r7, lr}
 80098a0:	b084      	sub	sp, #16
 80098a2:	af00      	add	r7, sp, #0
 80098a4:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80098a6:	2301      	movs	r3, #1
 80098a8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	68db      	ldr	r3, [r3, #12]
 80098ae:	2b02      	cmp	r3, #2
 80098b0:	d001      	beq.n	80098b6 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80098b2:	f7f6 ffcb 	bl	800084c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80098bc:	7bfa      	ldrb	r2, [r7, #15]
 80098be:	4611      	mov	r1, r2
 80098c0:	4618      	mov	r0, r3
 80098c2:	f7fe fcd3 	bl	800826c <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80098cc:	4618      	mov	r0, r3
 80098ce:	f7fe fc7f 	bl	80081d0 <USBD_LL_Reset>
}
 80098d2:	bf00      	nop
 80098d4:	3710      	adds	r7, #16
 80098d6:	46bd      	mov	sp, r7
 80098d8:	bd80      	pop	{r7, pc}
	...

080098dc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80098dc:	b580      	push	{r7, lr}
 80098de:	b082      	sub	sp, #8
 80098e0:	af00      	add	r7, sp, #0
 80098e2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80098ea:	4618      	mov	r0, r3
 80098ec:	f7fe fcce 	bl	800828c <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	687a      	ldr	r2, [r7, #4]
 80098fc:	6812      	ldr	r2, [r2, #0]
 80098fe:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009902:	f043 0301 	orr.w	r3, r3, #1
 8009906:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	6a1b      	ldr	r3, [r3, #32]
 800990c:	2b00      	cmp	r3, #0
 800990e:	d005      	beq.n	800991c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009910:	4b04      	ldr	r3, [pc, #16]	; (8009924 <HAL_PCD_SuspendCallback+0x48>)
 8009912:	691b      	ldr	r3, [r3, #16]
 8009914:	4a03      	ldr	r2, [pc, #12]	; (8009924 <HAL_PCD_SuspendCallback+0x48>)
 8009916:	f043 0306 	orr.w	r3, r3, #6
 800991a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800991c:	bf00      	nop
 800991e:	3708      	adds	r7, #8
 8009920:	46bd      	mov	sp, r7
 8009922:	bd80      	pop	{r7, pc}
 8009924:	e000ed00 	.word	0xe000ed00

08009928 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009928:	b580      	push	{r7, lr}
 800992a:	b082      	sub	sp, #8
 800992c:	af00      	add	r7, sp, #0
 800992e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009936:	4618      	mov	r0, r3
 8009938:	f7fe fcbe 	bl	80082b8 <USBD_LL_Resume>
}
 800993c:	bf00      	nop
 800993e:	3708      	adds	r7, #8
 8009940:	46bd      	mov	sp, r7
 8009942:	bd80      	pop	{r7, pc}

08009944 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009944:	b580      	push	{r7, lr}
 8009946:	b082      	sub	sp, #8
 8009948:	af00      	add	r7, sp, #0
 800994a:	6078      	str	r0, [r7, #4]
 800994c:	460b      	mov	r3, r1
 800994e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009956:	78fa      	ldrb	r2, [r7, #3]
 8009958:	4611      	mov	r1, r2
 800995a:	4618      	mov	r0, r3
 800995c:	f7fe fd0c 	bl	8008378 <USBD_LL_IsoOUTIncomplete>
}
 8009960:	bf00      	nop
 8009962:	3708      	adds	r7, #8
 8009964:	46bd      	mov	sp, r7
 8009966:	bd80      	pop	{r7, pc}

08009968 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009968:	b580      	push	{r7, lr}
 800996a:	b082      	sub	sp, #8
 800996c:	af00      	add	r7, sp, #0
 800996e:	6078      	str	r0, [r7, #4]
 8009970:	460b      	mov	r3, r1
 8009972:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800997a:	78fa      	ldrb	r2, [r7, #3]
 800997c:	4611      	mov	r1, r2
 800997e:	4618      	mov	r0, r3
 8009980:	f7fe fcd4 	bl	800832c <USBD_LL_IsoINIncomplete>
}
 8009984:	bf00      	nop
 8009986:	3708      	adds	r7, #8
 8009988:	46bd      	mov	sp, r7
 800998a:	bd80      	pop	{r7, pc}

0800998c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800998c:	b580      	push	{r7, lr}
 800998e:	b082      	sub	sp, #8
 8009990:	af00      	add	r7, sp, #0
 8009992:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800999a:	4618      	mov	r0, r3
 800999c:	f7fe fd12 	bl	80083c4 <USBD_LL_DevConnected>
}
 80099a0:	bf00      	nop
 80099a2:	3708      	adds	r7, #8
 80099a4:	46bd      	mov	sp, r7
 80099a6:	bd80      	pop	{r7, pc}

080099a8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80099a8:	b580      	push	{r7, lr}
 80099aa:	b082      	sub	sp, #8
 80099ac:	af00      	add	r7, sp, #0
 80099ae:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80099b6:	4618      	mov	r0, r3
 80099b8:	f7fe fd0f 	bl	80083da <USBD_LL_DevDisconnected>
}
 80099bc:	bf00      	nop
 80099be:	3708      	adds	r7, #8
 80099c0:	46bd      	mov	sp, r7
 80099c2:	bd80      	pop	{r7, pc}

080099c4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80099c4:	b580      	push	{r7, lr}
 80099c6:	b082      	sub	sp, #8
 80099c8:	af00      	add	r7, sp, #0
 80099ca:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	781b      	ldrb	r3, [r3, #0]
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	d13c      	bne.n	8009a4e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80099d4:	4a20      	ldr	r2, [pc, #128]	; (8009a58 <USBD_LL_Init+0x94>)
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	4a1e      	ldr	r2, [pc, #120]	; (8009a58 <USBD_LL_Init+0x94>)
 80099e0:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80099e4:	4b1c      	ldr	r3, [pc, #112]	; (8009a58 <USBD_LL_Init+0x94>)
 80099e6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80099ea:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80099ec:	4b1a      	ldr	r3, [pc, #104]	; (8009a58 <USBD_LL_Init+0x94>)
 80099ee:	2204      	movs	r2, #4
 80099f0:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80099f2:	4b19      	ldr	r3, [pc, #100]	; (8009a58 <USBD_LL_Init+0x94>)
 80099f4:	2202      	movs	r2, #2
 80099f6:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80099f8:	4b17      	ldr	r3, [pc, #92]	; (8009a58 <USBD_LL_Init+0x94>)
 80099fa:	2200      	movs	r2, #0
 80099fc:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80099fe:	4b16      	ldr	r3, [pc, #88]	; (8009a58 <USBD_LL_Init+0x94>)
 8009a00:	2202      	movs	r2, #2
 8009a02:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8009a04:	4b14      	ldr	r3, [pc, #80]	; (8009a58 <USBD_LL_Init+0x94>)
 8009a06:	2201      	movs	r2, #1
 8009a08:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8009a0a:	4b13      	ldr	r3, [pc, #76]	; (8009a58 <USBD_LL_Init+0x94>)
 8009a0c:	2200      	movs	r2, #0
 8009a0e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8009a10:	4b11      	ldr	r3, [pc, #68]	; (8009a58 <USBD_LL_Init+0x94>)
 8009a12:	2200      	movs	r2, #0
 8009a14:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8009a16:	4b10      	ldr	r3, [pc, #64]	; (8009a58 <USBD_LL_Init+0x94>)
 8009a18:	2200      	movs	r2, #0
 8009a1a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8009a1c:	4b0e      	ldr	r3, [pc, #56]	; (8009a58 <USBD_LL_Init+0x94>)
 8009a1e:	2200      	movs	r2, #0
 8009a20:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8009a22:	480d      	ldr	r0, [pc, #52]	; (8009a58 <USBD_LL_Init+0x94>)
 8009a24:	f7f9 f93f 	bl	8002ca6 <HAL_PCD_Init>
 8009a28:	4603      	mov	r3, r0
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	d001      	beq.n	8009a32 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8009a2e:	f7f6 ff0d 	bl	800084c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8009a32:	2180      	movs	r1, #128	; 0x80
 8009a34:	4808      	ldr	r0, [pc, #32]	; (8009a58 <USBD_LL_Init+0x94>)
 8009a36:	f7fa fa9c 	bl	8003f72 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8009a3a:	2240      	movs	r2, #64	; 0x40
 8009a3c:	2100      	movs	r1, #0
 8009a3e:	4806      	ldr	r0, [pc, #24]	; (8009a58 <USBD_LL_Init+0x94>)
 8009a40:	f7fa fa50 	bl	8003ee4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8009a44:	2280      	movs	r2, #128	; 0x80
 8009a46:	2101      	movs	r1, #1
 8009a48:	4803      	ldr	r0, [pc, #12]	; (8009a58 <USBD_LL_Init+0x94>)
 8009a4a:	f7fa fa4b 	bl	8003ee4 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8009a4e:	2300      	movs	r3, #0
}
 8009a50:	4618      	mov	r0, r3
 8009a52:	3708      	adds	r7, #8
 8009a54:	46bd      	mov	sp, r7
 8009a56:	bd80      	pop	{r7, pc}
 8009a58:	20001324 	.word	0x20001324

08009a5c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009a5c:	b580      	push	{r7, lr}
 8009a5e:	b084      	sub	sp, #16
 8009a60:	af00      	add	r7, sp, #0
 8009a62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009a64:	2300      	movs	r3, #0
 8009a66:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009a68:	2300      	movs	r3, #0
 8009a6a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009a72:	4618      	mov	r0, r3
 8009a74:	f7f9 fa34 	bl	8002ee0 <HAL_PCD_Start>
 8009a78:	4603      	mov	r3, r0
 8009a7a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009a7c:	7bfb      	ldrb	r3, [r7, #15]
 8009a7e:	4618      	mov	r0, r3
 8009a80:	f000 f942 	bl	8009d08 <USBD_Get_USB_Status>
 8009a84:	4603      	mov	r3, r0
 8009a86:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009a88:	7bbb      	ldrb	r3, [r7, #14]
}
 8009a8a:	4618      	mov	r0, r3
 8009a8c:	3710      	adds	r7, #16
 8009a8e:	46bd      	mov	sp, r7
 8009a90:	bd80      	pop	{r7, pc}

08009a92 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009a92:	b580      	push	{r7, lr}
 8009a94:	b084      	sub	sp, #16
 8009a96:	af00      	add	r7, sp, #0
 8009a98:	6078      	str	r0, [r7, #4]
 8009a9a:	4608      	mov	r0, r1
 8009a9c:	4611      	mov	r1, r2
 8009a9e:	461a      	mov	r2, r3
 8009aa0:	4603      	mov	r3, r0
 8009aa2:	70fb      	strb	r3, [r7, #3]
 8009aa4:	460b      	mov	r3, r1
 8009aa6:	70bb      	strb	r3, [r7, #2]
 8009aa8:	4613      	mov	r3, r2
 8009aaa:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009aac:	2300      	movs	r3, #0
 8009aae:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009ab0:	2300      	movs	r3, #0
 8009ab2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009aba:	78bb      	ldrb	r3, [r7, #2]
 8009abc:	883a      	ldrh	r2, [r7, #0]
 8009abe:	78f9      	ldrb	r1, [r7, #3]
 8009ac0:	f7f9 fe18 	bl	80036f4 <HAL_PCD_EP_Open>
 8009ac4:	4603      	mov	r3, r0
 8009ac6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009ac8:	7bfb      	ldrb	r3, [r7, #15]
 8009aca:	4618      	mov	r0, r3
 8009acc:	f000 f91c 	bl	8009d08 <USBD_Get_USB_Status>
 8009ad0:	4603      	mov	r3, r0
 8009ad2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009ad4:	7bbb      	ldrb	r3, [r7, #14]
}
 8009ad6:	4618      	mov	r0, r3
 8009ad8:	3710      	adds	r7, #16
 8009ada:	46bd      	mov	sp, r7
 8009adc:	bd80      	pop	{r7, pc}

08009ade <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009ade:	b580      	push	{r7, lr}
 8009ae0:	b084      	sub	sp, #16
 8009ae2:	af00      	add	r7, sp, #0
 8009ae4:	6078      	str	r0, [r7, #4]
 8009ae6:	460b      	mov	r3, r1
 8009ae8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009aea:	2300      	movs	r3, #0
 8009aec:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009aee:	2300      	movs	r3, #0
 8009af0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009af8:	78fa      	ldrb	r2, [r7, #3]
 8009afa:	4611      	mov	r1, r2
 8009afc:	4618      	mov	r0, r3
 8009afe:	f7f9 fe61 	bl	80037c4 <HAL_PCD_EP_Close>
 8009b02:	4603      	mov	r3, r0
 8009b04:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009b06:	7bfb      	ldrb	r3, [r7, #15]
 8009b08:	4618      	mov	r0, r3
 8009b0a:	f000 f8fd 	bl	8009d08 <USBD_Get_USB_Status>
 8009b0e:	4603      	mov	r3, r0
 8009b10:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009b12:	7bbb      	ldrb	r3, [r7, #14]
}
 8009b14:	4618      	mov	r0, r3
 8009b16:	3710      	adds	r7, #16
 8009b18:	46bd      	mov	sp, r7
 8009b1a:	bd80      	pop	{r7, pc}

08009b1c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009b1c:	b580      	push	{r7, lr}
 8009b1e:	b084      	sub	sp, #16
 8009b20:	af00      	add	r7, sp, #0
 8009b22:	6078      	str	r0, [r7, #4]
 8009b24:	460b      	mov	r3, r1
 8009b26:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009b28:	2300      	movs	r3, #0
 8009b2a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009b2c:	2300      	movs	r3, #0
 8009b2e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009b36:	78fa      	ldrb	r2, [r7, #3]
 8009b38:	4611      	mov	r1, r2
 8009b3a:	4618      	mov	r0, r3
 8009b3c:	f7f9 ff39 	bl	80039b2 <HAL_PCD_EP_SetStall>
 8009b40:	4603      	mov	r3, r0
 8009b42:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009b44:	7bfb      	ldrb	r3, [r7, #15]
 8009b46:	4618      	mov	r0, r3
 8009b48:	f000 f8de 	bl	8009d08 <USBD_Get_USB_Status>
 8009b4c:	4603      	mov	r3, r0
 8009b4e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009b50:	7bbb      	ldrb	r3, [r7, #14]
}
 8009b52:	4618      	mov	r0, r3
 8009b54:	3710      	adds	r7, #16
 8009b56:	46bd      	mov	sp, r7
 8009b58:	bd80      	pop	{r7, pc}

08009b5a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009b5a:	b580      	push	{r7, lr}
 8009b5c:	b084      	sub	sp, #16
 8009b5e:	af00      	add	r7, sp, #0
 8009b60:	6078      	str	r0, [r7, #4]
 8009b62:	460b      	mov	r3, r1
 8009b64:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009b66:	2300      	movs	r3, #0
 8009b68:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009b6a:	2300      	movs	r3, #0
 8009b6c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009b74:	78fa      	ldrb	r2, [r7, #3]
 8009b76:	4611      	mov	r1, r2
 8009b78:	4618      	mov	r0, r3
 8009b7a:	f7f9 ff7e 	bl	8003a7a <HAL_PCD_EP_ClrStall>
 8009b7e:	4603      	mov	r3, r0
 8009b80:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009b82:	7bfb      	ldrb	r3, [r7, #15]
 8009b84:	4618      	mov	r0, r3
 8009b86:	f000 f8bf 	bl	8009d08 <USBD_Get_USB_Status>
 8009b8a:	4603      	mov	r3, r0
 8009b8c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009b8e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009b90:	4618      	mov	r0, r3
 8009b92:	3710      	adds	r7, #16
 8009b94:	46bd      	mov	sp, r7
 8009b96:	bd80      	pop	{r7, pc}

08009b98 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009b98:	b480      	push	{r7}
 8009b9a:	b085      	sub	sp, #20
 8009b9c:	af00      	add	r7, sp, #0
 8009b9e:	6078      	str	r0, [r7, #4]
 8009ba0:	460b      	mov	r3, r1
 8009ba2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009baa:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009bac:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	da0b      	bge.n	8009bcc <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009bb4:	78fb      	ldrb	r3, [r7, #3]
 8009bb6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009bba:	68f9      	ldr	r1, [r7, #12]
 8009bbc:	4613      	mov	r3, r2
 8009bbe:	00db      	lsls	r3, r3, #3
 8009bc0:	1a9b      	subs	r3, r3, r2
 8009bc2:	009b      	lsls	r3, r3, #2
 8009bc4:	440b      	add	r3, r1
 8009bc6:	333e      	adds	r3, #62	; 0x3e
 8009bc8:	781b      	ldrb	r3, [r3, #0]
 8009bca:	e00b      	b.n	8009be4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009bcc:	78fb      	ldrb	r3, [r7, #3]
 8009bce:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009bd2:	68f9      	ldr	r1, [r7, #12]
 8009bd4:	4613      	mov	r3, r2
 8009bd6:	00db      	lsls	r3, r3, #3
 8009bd8:	1a9b      	subs	r3, r3, r2
 8009bda:	009b      	lsls	r3, r3, #2
 8009bdc:	440b      	add	r3, r1
 8009bde:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8009be2:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009be4:	4618      	mov	r0, r3
 8009be6:	3714      	adds	r7, #20
 8009be8:	46bd      	mov	sp, r7
 8009bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bee:	4770      	bx	lr

08009bf0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009bf0:	b580      	push	{r7, lr}
 8009bf2:	b084      	sub	sp, #16
 8009bf4:	af00      	add	r7, sp, #0
 8009bf6:	6078      	str	r0, [r7, #4]
 8009bf8:	460b      	mov	r3, r1
 8009bfa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009bfc:	2300      	movs	r3, #0
 8009bfe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009c00:	2300      	movs	r3, #0
 8009c02:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009c0a:	78fa      	ldrb	r2, [r7, #3]
 8009c0c:	4611      	mov	r1, r2
 8009c0e:	4618      	mov	r0, r3
 8009c10:	f7f9 fd4b 	bl	80036aa <HAL_PCD_SetAddress>
 8009c14:	4603      	mov	r3, r0
 8009c16:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009c18:	7bfb      	ldrb	r3, [r7, #15]
 8009c1a:	4618      	mov	r0, r3
 8009c1c:	f000 f874 	bl	8009d08 <USBD_Get_USB_Status>
 8009c20:	4603      	mov	r3, r0
 8009c22:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009c24:	7bbb      	ldrb	r3, [r7, #14]
}
 8009c26:	4618      	mov	r0, r3
 8009c28:	3710      	adds	r7, #16
 8009c2a:	46bd      	mov	sp, r7
 8009c2c:	bd80      	pop	{r7, pc}

08009c2e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009c2e:	b580      	push	{r7, lr}
 8009c30:	b086      	sub	sp, #24
 8009c32:	af00      	add	r7, sp, #0
 8009c34:	60f8      	str	r0, [r7, #12]
 8009c36:	607a      	str	r2, [r7, #4]
 8009c38:	603b      	str	r3, [r7, #0]
 8009c3a:	460b      	mov	r3, r1
 8009c3c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009c3e:	2300      	movs	r3, #0
 8009c40:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009c42:	2300      	movs	r3, #0
 8009c44:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009c4c:	7af9      	ldrb	r1, [r7, #11]
 8009c4e:	683b      	ldr	r3, [r7, #0]
 8009c50:	687a      	ldr	r2, [r7, #4]
 8009c52:	f7f9 fe64 	bl	800391e <HAL_PCD_EP_Transmit>
 8009c56:	4603      	mov	r3, r0
 8009c58:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009c5a:	7dfb      	ldrb	r3, [r7, #23]
 8009c5c:	4618      	mov	r0, r3
 8009c5e:	f000 f853 	bl	8009d08 <USBD_Get_USB_Status>
 8009c62:	4603      	mov	r3, r0
 8009c64:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009c66:	7dbb      	ldrb	r3, [r7, #22]
}
 8009c68:	4618      	mov	r0, r3
 8009c6a:	3718      	adds	r7, #24
 8009c6c:	46bd      	mov	sp, r7
 8009c6e:	bd80      	pop	{r7, pc}

08009c70 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009c70:	b580      	push	{r7, lr}
 8009c72:	b086      	sub	sp, #24
 8009c74:	af00      	add	r7, sp, #0
 8009c76:	60f8      	str	r0, [r7, #12]
 8009c78:	607a      	str	r2, [r7, #4]
 8009c7a:	603b      	str	r3, [r7, #0]
 8009c7c:	460b      	mov	r3, r1
 8009c7e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009c80:	2300      	movs	r3, #0
 8009c82:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009c84:	2300      	movs	r3, #0
 8009c86:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009c88:	68fb      	ldr	r3, [r7, #12]
 8009c8a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009c8e:	7af9      	ldrb	r1, [r7, #11]
 8009c90:	683b      	ldr	r3, [r7, #0]
 8009c92:	687a      	ldr	r2, [r7, #4]
 8009c94:	f7f9 fde0 	bl	8003858 <HAL_PCD_EP_Receive>
 8009c98:	4603      	mov	r3, r0
 8009c9a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009c9c:	7dfb      	ldrb	r3, [r7, #23]
 8009c9e:	4618      	mov	r0, r3
 8009ca0:	f000 f832 	bl	8009d08 <USBD_Get_USB_Status>
 8009ca4:	4603      	mov	r3, r0
 8009ca6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009ca8:	7dbb      	ldrb	r3, [r7, #22]
}
 8009caa:	4618      	mov	r0, r3
 8009cac:	3718      	adds	r7, #24
 8009cae:	46bd      	mov	sp, r7
 8009cb0:	bd80      	pop	{r7, pc}

08009cb2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009cb2:	b580      	push	{r7, lr}
 8009cb4:	b082      	sub	sp, #8
 8009cb6:	af00      	add	r7, sp, #0
 8009cb8:	6078      	str	r0, [r7, #4]
 8009cba:	460b      	mov	r3, r1
 8009cbc:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009cc4:	78fa      	ldrb	r2, [r7, #3]
 8009cc6:	4611      	mov	r1, r2
 8009cc8:	4618      	mov	r0, r3
 8009cca:	f7f9 fe10 	bl	80038ee <HAL_PCD_EP_GetRxCount>
 8009cce:	4603      	mov	r3, r0
}
 8009cd0:	4618      	mov	r0, r3
 8009cd2:	3708      	adds	r7, #8
 8009cd4:	46bd      	mov	sp, r7
 8009cd6:	bd80      	pop	{r7, pc}

08009cd8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009cd8:	b480      	push	{r7}
 8009cda:	b083      	sub	sp, #12
 8009cdc:	af00      	add	r7, sp, #0
 8009cde:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009ce0:	4b03      	ldr	r3, [pc, #12]	; (8009cf0 <USBD_static_malloc+0x18>)
}
 8009ce2:	4618      	mov	r0, r3
 8009ce4:	370c      	adds	r7, #12
 8009ce6:	46bd      	mov	sp, r7
 8009ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cec:	4770      	bx	lr
 8009cee:	bf00      	nop
 8009cf0:	2000172c 	.word	0x2000172c

08009cf4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009cf4:	b480      	push	{r7}
 8009cf6:	b083      	sub	sp, #12
 8009cf8:	af00      	add	r7, sp, #0
 8009cfa:	6078      	str	r0, [r7, #4]

}
 8009cfc:	bf00      	nop
 8009cfe:	370c      	adds	r7, #12
 8009d00:	46bd      	mov	sp, r7
 8009d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d06:	4770      	bx	lr

08009d08 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009d08:	b480      	push	{r7}
 8009d0a:	b085      	sub	sp, #20
 8009d0c:	af00      	add	r7, sp, #0
 8009d0e:	4603      	mov	r3, r0
 8009d10:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009d12:	2300      	movs	r3, #0
 8009d14:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009d16:	79fb      	ldrb	r3, [r7, #7]
 8009d18:	2b03      	cmp	r3, #3
 8009d1a:	d817      	bhi.n	8009d4c <USBD_Get_USB_Status+0x44>
 8009d1c:	a201      	add	r2, pc, #4	; (adr r2, 8009d24 <USBD_Get_USB_Status+0x1c>)
 8009d1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d22:	bf00      	nop
 8009d24:	08009d35 	.word	0x08009d35
 8009d28:	08009d3b 	.word	0x08009d3b
 8009d2c:	08009d41 	.word	0x08009d41
 8009d30:	08009d47 	.word	0x08009d47
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009d34:	2300      	movs	r3, #0
 8009d36:	73fb      	strb	r3, [r7, #15]
    break;
 8009d38:	e00b      	b.n	8009d52 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009d3a:	2303      	movs	r3, #3
 8009d3c:	73fb      	strb	r3, [r7, #15]
    break;
 8009d3e:	e008      	b.n	8009d52 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009d40:	2301      	movs	r3, #1
 8009d42:	73fb      	strb	r3, [r7, #15]
    break;
 8009d44:	e005      	b.n	8009d52 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009d46:	2303      	movs	r3, #3
 8009d48:	73fb      	strb	r3, [r7, #15]
    break;
 8009d4a:	e002      	b.n	8009d52 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009d4c:	2303      	movs	r3, #3
 8009d4e:	73fb      	strb	r3, [r7, #15]
    break;
 8009d50:	bf00      	nop
  }
  return usb_status;
 8009d52:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d54:	4618      	mov	r0, r3
 8009d56:	3714      	adds	r7, #20
 8009d58:	46bd      	mov	sp, r7
 8009d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d5e:	4770      	bx	lr

08009d60 <main>:
 */

#include "main.h"

int main(void)
{
 8009d60:	b580      	push	{r7, lr}
 8009d62:	af00      	add	r7, sp, #0

	hwInit();
 8009d64:	f7f7 fbd0 	bl	8001508 <hwInit>
	apInit();
 8009d68:	f7f6 fc0c 	bl	8000584 <apInit>

	apMain();
 8009d6c:	f7f6 fc18 	bl	80005a0 <apMain>
	return 0;
 8009d70:	2300      	movs	r3, #0
}
 8009d72:	4618      	mov	r0, r3
 8009d74:	bd80      	pop	{r7, pc}
	...

08009d78 <__errno>:
 8009d78:	4b01      	ldr	r3, [pc, #4]	; (8009d80 <__errno+0x8>)
 8009d7a:	6818      	ldr	r0, [r3, #0]
 8009d7c:	4770      	bx	lr
 8009d7e:	bf00      	nop
 8009d80:	200001a8 	.word	0x200001a8

08009d84 <__libc_init_array>:
 8009d84:	b570      	push	{r4, r5, r6, lr}
 8009d86:	4d0d      	ldr	r5, [pc, #52]	; (8009dbc <__libc_init_array+0x38>)
 8009d88:	4c0d      	ldr	r4, [pc, #52]	; (8009dc0 <__libc_init_array+0x3c>)
 8009d8a:	1b64      	subs	r4, r4, r5
 8009d8c:	10a4      	asrs	r4, r4, #2
 8009d8e:	2600      	movs	r6, #0
 8009d90:	42a6      	cmp	r6, r4
 8009d92:	d109      	bne.n	8009da8 <__libc_init_array+0x24>
 8009d94:	4d0b      	ldr	r5, [pc, #44]	; (8009dc4 <__libc_init_array+0x40>)
 8009d96:	4c0c      	ldr	r4, [pc, #48]	; (8009dc8 <__libc_init_array+0x44>)
 8009d98:	f001 f824 	bl	800ade4 <_init>
 8009d9c:	1b64      	subs	r4, r4, r5
 8009d9e:	10a4      	asrs	r4, r4, #2
 8009da0:	2600      	movs	r6, #0
 8009da2:	42a6      	cmp	r6, r4
 8009da4:	d105      	bne.n	8009db2 <__libc_init_array+0x2e>
 8009da6:	bd70      	pop	{r4, r5, r6, pc}
 8009da8:	f855 3b04 	ldr.w	r3, [r5], #4
 8009dac:	4798      	blx	r3
 8009dae:	3601      	adds	r6, #1
 8009db0:	e7ee      	b.n	8009d90 <__libc_init_array+0xc>
 8009db2:	f855 3b04 	ldr.w	r3, [r5], #4
 8009db6:	4798      	blx	r3
 8009db8:	3601      	adds	r6, #1
 8009dba:	e7f2      	b.n	8009da2 <__libc_init_array+0x1e>
 8009dbc:	0800afd0 	.word	0x0800afd0
 8009dc0:	0800afd0 	.word	0x0800afd0
 8009dc4:	0800afd0 	.word	0x0800afd0
 8009dc8:	0800afd4 	.word	0x0800afd4

08009dcc <memset>:
 8009dcc:	4402      	add	r2, r0
 8009dce:	4603      	mov	r3, r0
 8009dd0:	4293      	cmp	r3, r2
 8009dd2:	d100      	bne.n	8009dd6 <memset+0xa>
 8009dd4:	4770      	bx	lr
 8009dd6:	f803 1b01 	strb.w	r1, [r3], #1
 8009dda:	e7f9      	b.n	8009dd0 <memset+0x4>

08009ddc <iprintf>:
 8009ddc:	b40f      	push	{r0, r1, r2, r3}
 8009dde:	4b0a      	ldr	r3, [pc, #40]	; (8009e08 <iprintf+0x2c>)
 8009de0:	b513      	push	{r0, r1, r4, lr}
 8009de2:	681c      	ldr	r4, [r3, #0]
 8009de4:	b124      	cbz	r4, 8009df0 <iprintf+0x14>
 8009de6:	69a3      	ldr	r3, [r4, #24]
 8009de8:	b913      	cbnz	r3, 8009df0 <iprintf+0x14>
 8009dea:	4620      	mov	r0, r4
 8009dec:	f000 fa5e 	bl	800a2ac <__sinit>
 8009df0:	ab05      	add	r3, sp, #20
 8009df2:	9a04      	ldr	r2, [sp, #16]
 8009df4:	68a1      	ldr	r1, [r4, #8]
 8009df6:	9301      	str	r3, [sp, #4]
 8009df8:	4620      	mov	r0, r4
 8009dfa:	f000 fc67 	bl	800a6cc <_vfiprintf_r>
 8009dfe:	b002      	add	sp, #8
 8009e00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009e04:	b004      	add	sp, #16
 8009e06:	4770      	bx	lr
 8009e08:	200001a8 	.word	0x200001a8

08009e0c <_puts_r>:
 8009e0c:	b570      	push	{r4, r5, r6, lr}
 8009e0e:	460e      	mov	r6, r1
 8009e10:	4605      	mov	r5, r0
 8009e12:	b118      	cbz	r0, 8009e1c <_puts_r+0x10>
 8009e14:	6983      	ldr	r3, [r0, #24]
 8009e16:	b90b      	cbnz	r3, 8009e1c <_puts_r+0x10>
 8009e18:	f000 fa48 	bl	800a2ac <__sinit>
 8009e1c:	69ab      	ldr	r3, [r5, #24]
 8009e1e:	68ac      	ldr	r4, [r5, #8]
 8009e20:	b913      	cbnz	r3, 8009e28 <_puts_r+0x1c>
 8009e22:	4628      	mov	r0, r5
 8009e24:	f000 fa42 	bl	800a2ac <__sinit>
 8009e28:	4b2c      	ldr	r3, [pc, #176]	; (8009edc <_puts_r+0xd0>)
 8009e2a:	429c      	cmp	r4, r3
 8009e2c:	d120      	bne.n	8009e70 <_puts_r+0x64>
 8009e2e:	686c      	ldr	r4, [r5, #4]
 8009e30:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009e32:	07db      	lsls	r3, r3, #31
 8009e34:	d405      	bmi.n	8009e42 <_puts_r+0x36>
 8009e36:	89a3      	ldrh	r3, [r4, #12]
 8009e38:	0598      	lsls	r0, r3, #22
 8009e3a:	d402      	bmi.n	8009e42 <_puts_r+0x36>
 8009e3c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009e3e:	f000 fad3 	bl	800a3e8 <__retarget_lock_acquire_recursive>
 8009e42:	89a3      	ldrh	r3, [r4, #12]
 8009e44:	0719      	lsls	r1, r3, #28
 8009e46:	d51d      	bpl.n	8009e84 <_puts_r+0x78>
 8009e48:	6923      	ldr	r3, [r4, #16]
 8009e4a:	b1db      	cbz	r3, 8009e84 <_puts_r+0x78>
 8009e4c:	3e01      	subs	r6, #1
 8009e4e:	68a3      	ldr	r3, [r4, #8]
 8009e50:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8009e54:	3b01      	subs	r3, #1
 8009e56:	60a3      	str	r3, [r4, #8]
 8009e58:	bb39      	cbnz	r1, 8009eaa <_puts_r+0x9e>
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	da38      	bge.n	8009ed0 <_puts_r+0xc4>
 8009e5e:	4622      	mov	r2, r4
 8009e60:	210a      	movs	r1, #10
 8009e62:	4628      	mov	r0, r5
 8009e64:	f000 f848 	bl	8009ef8 <__swbuf_r>
 8009e68:	3001      	adds	r0, #1
 8009e6a:	d011      	beq.n	8009e90 <_puts_r+0x84>
 8009e6c:	250a      	movs	r5, #10
 8009e6e:	e011      	b.n	8009e94 <_puts_r+0x88>
 8009e70:	4b1b      	ldr	r3, [pc, #108]	; (8009ee0 <_puts_r+0xd4>)
 8009e72:	429c      	cmp	r4, r3
 8009e74:	d101      	bne.n	8009e7a <_puts_r+0x6e>
 8009e76:	68ac      	ldr	r4, [r5, #8]
 8009e78:	e7da      	b.n	8009e30 <_puts_r+0x24>
 8009e7a:	4b1a      	ldr	r3, [pc, #104]	; (8009ee4 <_puts_r+0xd8>)
 8009e7c:	429c      	cmp	r4, r3
 8009e7e:	bf08      	it	eq
 8009e80:	68ec      	ldreq	r4, [r5, #12]
 8009e82:	e7d5      	b.n	8009e30 <_puts_r+0x24>
 8009e84:	4621      	mov	r1, r4
 8009e86:	4628      	mov	r0, r5
 8009e88:	f000 f888 	bl	8009f9c <__swsetup_r>
 8009e8c:	2800      	cmp	r0, #0
 8009e8e:	d0dd      	beq.n	8009e4c <_puts_r+0x40>
 8009e90:	f04f 35ff 	mov.w	r5, #4294967295
 8009e94:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009e96:	07da      	lsls	r2, r3, #31
 8009e98:	d405      	bmi.n	8009ea6 <_puts_r+0x9a>
 8009e9a:	89a3      	ldrh	r3, [r4, #12]
 8009e9c:	059b      	lsls	r3, r3, #22
 8009e9e:	d402      	bmi.n	8009ea6 <_puts_r+0x9a>
 8009ea0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009ea2:	f000 faa2 	bl	800a3ea <__retarget_lock_release_recursive>
 8009ea6:	4628      	mov	r0, r5
 8009ea8:	bd70      	pop	{r4, r5, r6, pc}
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	da04      	bge.n	8009eb8 <_puts_r+0xac>
 8009eae:	69a2      	ldr	r2, [r4, #24]
 8009eb0:	429a      	cmp	r2, r3
 8009eb2:	dc06      	bgt.n	8009ec2 <_puts_r+0xb6>
 8009eb4:	290a      	cmp	r1, #10
 8009eb6:	d004      	beq.n	8009ec2 <_puts_r+0xb6>
 8009eb8:	6823      	ldr	r3, [r4, #0]
 8009eba:	1c5a      	adds	r2, r3, #1
 8009ebc:	6022      	str	r2, [r4, #0]
 8009ebe:	7019      	strb	r1, [r3, #0]
 8009ec0:	e7c5      	b.n	8009e4e <_puts_r+0x42>
 8009ec2:	4622      	mov	r2, r4
 8009ec4:	4628      	mov	r0, r5
 8009ec6:	f000 f817 	bl	8009ef8 <__swbuf_r>
 8009eca:	3001      	adds	r0, #1
 8009ecc:	d1bf      	bne.n	8009e4e <_puts_r+0x42>
 8009ece:	e7df      	b.n	8009e90 <_puts_r+0x84>
 8009ed0:	6823      	ldr	r3, [r4, #0]
 8009ed2:	250a      	movs	r5, #10
 8009ed4:	1c5a      	adds	r2, r3, #1
 8009ed6:	6022      	str	r2, [r4, #0]
 8009ed8:	701d      	strb	r5, [r3, #0]
 8009eda:	e7db      	b.n	8009e94 <_puts_r+0x88>
 8009edc:	0800af54 	.word	0x0800af54
 8009ee0:	0800af74 	.word	0x0800af74
 8009ee4:	0800af34 	.word	0x0800af34

08009ee8 <puts>:
 8009ee8:	4b02      	ldr	r3, [pc, #8]	; (8009ef4 <puts+0xc>)
 8009eea:	4601      	mov	r1, r0
 8009eec:	6818      	ldr	r0, [r3, #0]
 8009eee:	f7ff bf8d 	b.w	8009e0c <_puts_r>
 8009ef2:	bf00      	nop
 8009ef4:	200001a8 	.word	0x200001a8

08009ef8 <__swbuf_r>:
 8009ef8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009efa:	460e      	mov	r6, r1
 8009efc:	4614      	mov	r4, r2
 8009efe:	4605      	mov	r5, r0
 8009f00:	b118      	cbz	r0, 8009f0a <__swbuf_r+0x12>
 8009f02:	6983      	ldr	r3, [r0, #24]
 8009f04:	b90b      	cbnz	r3, 8009f0a <__swbuf_r+0x12>
 8009f06:	f000 f9d1 	bl	800a2ac <__sinit>
 8009f0a:	4b21      	ldr	r3, [pc, #132]	; (8009f90 <__swbuf_r+0x98>)
 8009f0c:	429c      	cmp	r4, r3
 8009f0e:	d12b      	bne.n	8009f68 <__swbuf_r+0x70>
 8009f10:	686c      	ldr	r4, [r5, #4]
 8009f12:	69a3      	ldr	r3, [r4, #24]
 8009f14:	60a3      	str	r3, [r4, #8]
 8009f16:	89a3      	ldrh	r3, [r4, #12]
 8009f18:	071a      	lsls	r2, r3, #28
 8009f1a:	d52f      	bpl.n	8009f7c <__swbuf_r+0x84>
 8009f1c:	6923      	ldr	r3, [r4, #16]
 8009f1e:	b36b      	cbz	r3, 8009f7c <__swbuf_r+0x84>
 8009f20:	6923      	ldr	r3, [r4, #16]
 8009f22:	6820      	ldr	r0, [r4, #0]
 8009f24:	1ac0      	subs	r0, r0, r3
 8009f26:	6963      	ldr	r3, [r4, #20]
 8009f28:	b2f6      	uxtb	r6, r6
 8009f2a:	4283      	cmp	r3, r0
 8009f2c:	4637      	mov	r7, r6
 8009f2e:	dc04      	bgt.n	8009f3a <__swbuf_r+0x42>
 8009f30:	4621      	mov	r1, r4
 8009f32:	4628      	mov	r0, r5
 8009f34:	f000 f926 	bl	800a184 <_fflush_r>
 8009f38:	bb30      	cbnz	r0, 8009f88 <__swbuf_r+0x90>
 8009f3a:	68a3      	ldr	r3, [r4, #8]
 8009f3c:	3b01      	subs	r3, #1
 8009f3e:	60a3      	str	r3, [r4, #8]
 8009f40:	6823      	ldr	r3, [r4, #0]
 8009f42:	1c5a      	adds	r2, r3, #1
 8009f44:	6022      	str	r2, [r4, #0]
 8009f46:	701e      	strb	r6, [r3, #0]
 8009f48:	6963      	ldr	r3, [r4, #20]
 8009f4a:	3001      	adds	r0, #1
 8009f4c:	4283      	cmp	r3, r0
 8009f4e:	d004      	beq.n	8009f5a <__swbuf_r+0x62>
 8009f50:	89a3      	ldrh	r3, [r4, #12]
 8009f52:	07db      	lsls	r3, r3, #31
 8009f54:	d506      	bpl.n	8009f64 <__swbuf_r+0x6c>
 8009f56:	2e0a      	cmp	r6, #10
 8009f58:	d104      	bne.n	8009f64 <__swbuf_r+0x6c>
 8009f5a:	4621      	mov	r1, r4
 8009f5c:	4628      	mov	r0, r5
 8009f5e:	f000 f911 	bl	800a184 <_fflush_r>
 8009f62:	b988      	cbnz	r0, 8009f88 <__swbuf_r+0x90>
 8009f64:	4638      	mov	r0, r7
 8009f66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009f68:	4b0a      	ldr	r3, [pc, #40]	; (8009f94 <__swbuf_r+0x9c>)
 8009f6a:	429c      	cmp	r4, r3
 8009f6c:	d101      	bne.n	8009f72 <__swbuf_r+0x7a>
 8009f6e:	68ac      	ldr	r4, [r5, #8]
 8009f70:	e7cf      	b.n	8009f12 <__swbuf_r+0x1a>
 8009f72:	4b09      	ldr	r3, [pc, #36]	; (8009f98 <__swbuf_r+0xa0>)
 8009f74:	429c      	cmp	r4, r3
 8009f76:	bf08      	it	eq
 8009f78:	68ec      	ldreq	r4, [r5, #12]
 8009f7a:	e7ca      	b.n	8009f12 <__swbuf_r+0x1a>
 8009f7c:	4621      	mov	r1, r4
 8009f7e:	4628      	mov	r0, r5
 8009f80:	f000 f80c 	bl	8009f9c <__swsetup_r>
 8009f84:	2800      	cmp	r0, #0
 8009f86:	d0cb      	beq.n	8009f20 <__swbuf_r+0x28>
 8009f88:	f04f 37ff 	mov.w	r7, #4294967295
 8009f8c:	e7ea      	b.n	8009f64 <__swbuf_r+0x6c>
 8009f8e:	bf00      	nop
 8009f90:	0800af54 	.word	0x0800af54
 8009f94:	0800af74 	.word	0x0800af74
 8009f98:	0800af34 	.word	0x0800af34

08009f9c <__swsetup_r>:
 8009f9c:	4b32      	ldr	r3, [pc, #200]	; (800a068 <__swsetup_r+0xcc>)
 8009f9e:	b570      	push	{r4, r5, r6, lr}
 8009fa0:	681d      	ldr	r5, [r3, #0]
 8009fa2:	4606      	mov	r6, r0
 8009fa4:	460c      	mov	r4, r1
 8009fa6:	b125      	cbz	r5, 8009fb2 <__swsetup_r+0x16>
 8009fa8:	69ab      	ldr	r3, [r5, #24]
 8009faa:	b913      	cbnz	r3, 8009fb2 <__swsetup_r+0x16>
 8009fac:	4628      	mov	r0, r5
 8009fae:	f000 f97d 	bl	800a2ac <__sinit>
 8009fb2:	4b2e      	ldr	r3, [pc, #184]	; (800a06c <__swsetup_r+0xd0>)
 8009fb4:	429c      	cmp	r4, r3
 8009fb6:	d10f      	bne.n	8009fd8 <__swsetup_r+0x3c>
 8009fb8:	686c      	ldr	r4, [r5, #4]
 8009fba:	89a3      	ldrh	r3, [r4, #12]
 8009fbc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009fc0:	0719      	lsls	r1, r3, #28
 8009fc2:	d42c      	bmi.n	800a01e <__swsetup_r+0x82>
 8009fc4:	06dd      	lsls	r5, r3, #27
 8009fc6:	d411      	bmi.n	8009fec <__swsetup_r+0x50>
 8009fc8:	2309      	movs	r3, #9
 8009fca:	6033      	str	r3, [r6, #0]
 8009fcc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009fd0:	81a3      	strh	r3, [r4, #12]
 8009fd2:	f04f 30ff 	mov.w	r0, #4294967295
 8009fd6:	e03e      	b.n	800a056 <__swsetup_r+0xba>
 8009fd8:	4b25      	ldr	r3, [pc, #148]	; (800a070 <__swsetup_r+0xd4>)
 8009fda:	429c      	cmp	r4, r3
 8009fdc:	d101      	bne.n	8009fe2 <__swsetup_r+0x46>
 8009fde:	68ac      	ldr	r4, [r5, #8]
 8009fe0:	e7eb      	b.n	8009fba <__swsetup_r+0x1e>
 8009fe2:	4b24      	ldr	r3, [pc, #144]	; (800a074 <__swsetup_r+0xd8>)
 8009fe4:	429c      	cmp	r4, r3
 8009fe6:	bf08      	it	eq
 8009fe8:	68ec      	ldreq	r4, [r5, #12]
 8009fea:	e7e6      	b.n	8009fba <__swsetup_r+0x1e>
 8009fec:	0758      	lsls	r0, r3, #29
 8009fee:	d512      	bpl.n	800a016 <__swsetup_r+0x7a>
 8009ff0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009ff2:	b141      	cbz	r1, 800a006 <__swsetup_r+0x6a>
 8009ff4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009ff8:	4299      	cmp	r1, r3
 8009ffa:	d002      	beq.n	800a002 <__swsetup_r+0x66>
 8009ffc:	4630      	mov	r0, r6
 8009ffe:	f000 fa5b 	bl	800a4b8 <_free_r>
 800a002:	2300      	movs	r3, #0
 800a004:	6363      	str	r3, [r4, #52]	; 0x34
 800a006:	89a3      	ldrh	r3, [r4, #12]
 800a008:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a00c:	81a3      	strh	r3, [r4, #12]
 800a00e:	2300      	movs	r3, #0
 800a010:	6063      	str	r3, [r4, #4]
 800a012:	6923      	ldr	r3, [r4, #16]
 800a014:	6023      	str	r3, [r4, #0]
 800a016:	89a3      	ldrh	r3, [r4, #12]
 800a018:	f043 0308 	orr.w	r3, r3, #8
 800a01c:	81a3      	strh	r3, [r4, #12]
 800a01e:	6923      	ldr	r3, [r4, #16]
 800a020:	b94b      	cbnz	r3, 800a036 <__swsetup_r+0x9a>
 800a022:	89a3      	ldrh	r3, [r4, #12]
 800a024:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a028:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a02c:	d003      	beq.n	800a036 <__swsetup_r+0x9a>
 800a02e:	4621      	mov	r1, r4
 800a030:	4630      	mov	r0, r6
 800a032:	f000 fa01 	bl	800a438 <__smakebuf_r>
 800a036:	89a0      	ldrh	r0, [r4, #12]
 800a038:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a03c:	f010 0301 	ands.w	r3, r0, #1
 800a040:	d00a      	beq.n	800a058 <__swsetup_r+0xbc>
 800a042:	2300      	movs	r3, #0
 800a044:	60a3      	str	r3, [r4, #8]
 800a046:	6963      	ldr	r3, [r4, #20]
 800a048:	425b      	negs	r3, r3
 800a04a:	61a3      	str	r3, [r4, #24]
 800a04c:	6923      	ldr	r3, [r4, #16]
 800a04e:	b943      	cbnz	r3, 800a062 <__swsetup_r+0xc6>
 800a050:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a054:	d1ba      	bne.n	8009fcc <__swsetup_r+0x30>
 800a056:	bd70      	pop	{r4, r5, r6, pc}
 800a058:	0781      	lsls	r1, r0, #30
 800a05a:	bf58      	it	pl
 800a05c:	6963      	ldrpl	r3, [r4, #20]
 800a05e:	60a3      	str	r3, [r4, #8]
 800a060:	e7f4      	b.n	800a04c <__swsetup_r+0xb0>
 800a062:	2000      	movs	r0, #0
 800a064:	e7f7      	b.n	800a056 <__swsetup_r+0xba>
 800a066:	bf00      	nop
 800a068:	200001a8 	.word	0x200001a8
 800a06c:	0800af54 	.word	0x0800af54
 800a070:	0800af74 	.word	0x0800af74
 800a074:	0800af34 	.word	0x0800af34

0800a078 <__sflush_r>:
 800a078:	898a      	ldrh	r2, [r1, #12]
 800a07a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a07e:	4605      	mov	r5, r0
 800a080:	0710      	lsls	r0, r2, #28
 800a082:	460c      	mov	r4, r1
 800a084:	d458      	bmi.n	800a138 <__sflush_r+0xc0>
 800a086:	684b      	ldr	r3, [r1, #4]
 800a088:	2b00      	cmp	r3, #0
 800a08a:	dc05      	bgt.n	800a098 <__sflush_r+0x20>
 800a08c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a08e:	2b00      	cmp	r3, #0
 800a090:	dc02      	bgt.n	800a098 <__sflush_r+0x20>
 800a092:	2000      	movs	r0, #0
 800a094:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a098:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a09a:	2e00      	cmp	r6, #0
 800a09c:	d0f9      	beq.n	800a092 <__sflush_r+0x1a>
 800a09e:	2300      	movs	r3, #0
 800a0a0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a0a4:	682f      	ldr	r7, [r5, #0]
 800a0a6:	602b      	str	r3, [r5, #0]
 800a0a8:	d032      	beq.n	800a110 <__sflush_r+0x98>
 800a0aa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a0ac:	89a3      	ldrh	r3, [r4, #12]
 800a0ae:	075a      	lsls	r2, r3, #29
 800a0b0:	d505      	bpl.n	800a0be <__sflush_r+0x46>
 800a0b2:	6863      	ldr	r3, [r4, #4]
 800a0b4:	1ac0      	subs	r0, r0, r3
 800a0b6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a0b8:	b10b      	cbz	r3, 800a0be <__sflush_r+0x46>
 800a0ba:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a0bc:	1ac0      	subs	r0, r0, r3
 800a0be:	2300      	movs	r3, #0
 800a0c0:	4602      	mov	r2, r0
 800a0c2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a0c4:	6a21      	ldr	r1, [r4, #32]
 800a0c6:	4628      	mov	r0, r5
 800a0c8:	47b0      	blx	r6
 800a0ca:	1c43      	adds	r3, r0, #1
 800a0cc:	89a3      	ldrh	r3, [r4, #12]
 800a0ce:	d106      	bne.n	800a0de <__sflush_r+0x66>
 800a0d0:	6829      	ldr	r1, [r5, #0]
 800a0d2:	291d      	cmp	r1, #29
 800a0d4:	d82c      	bhi.n	800a130 <__sflush_r+0xb8>
 800a0d6:	4a2a      	ldr	r2, [pc, #168]	; (800a180 <__sflush_r+0x108>)
 800a0d8:	40ca      	lsrs	r2, r1
 800a0da:	07d6      	lsls	r6, r2, #31
 800a0dc:	d528      	bpl.n	800a130 <__sflush_r+0xb8>
 800a0de:	2200      	movs	r2, #0
 800a0e0:	6062      	str	r2, [r4, #4]
 800a0e2:	04d9      	lsls	r1, r3, #19
 800a0e4:	6922      	ldr	r2, [r4, #16]
 800a0e6:	6022      	str	r2, [r4, #0]
 800a0e8:	d504      	bpl.n	800a0f4 <__sflush_r+0x7c>
 800a0ea:	1c42      	adds	r2, r0, #1
 800a0ec:	d101      	bne.n	800a0f2 <__sflush_r+0x7a>
 800a0ee:	682b      	ldr	r3, [r5, #0]
 800a0f0:	b903      	cbnz	r3, 800a0f4 <__sflush_r+0x7c>
 800a0f2:	6560      	str	r0, [r4, #84]	; 0x54
 800a0f4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a0f6:	602f      	str	r7, [r5, #0]
 800a0f8:	2900      	cmp	r1, #0
 800a0fa:	d0ca      	beq.n	800a092 <__sflush_r+0x1a>
 800a0fc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a100:	4299      	cmp	r1, r3
 800a102:	d002      	beq.n	800a10a <__sflush_r+0x92>
 800a104:	4628      	mov	r0, r5
 800a106:	f000 f9d7 	bl	800a4b8 <_free_r>
 800a10a:	2000      	movs	r0, #0
 800a10c:	6360      	str	r0, [r4, #52]	; 0x34
 800a10e:	e7c1      	b.n	800a094 <__sflush_r+0x1c>
 800a110:	6a21      	ldr	r1, [r4, #32]
 800a112:	2301      	movs	r3, #1
 800a114:	4628      	mov	r0, r5
 800a116:	47b0      	blx	r6
 800a118:	1c41      	adds	r1, r0, #1
 800a11a:	d1c7      	bne.n	800a0ac <__sflush_r+0x34>
 800a11c:	682b      	ldr	r3, [r5, #0]
 800a11e:	2b00      	cmp	r3, #0
 800a120:	d0c4      	beq.n	800a0ac <__sflush_r+0x34>
 800a122:	2b1d      	cmp	r3, #29
 800a124:	d001      	beq.n	800a12a <__sflush_r+0xb2>
 800a126:	2b16      	cmp	r3, #22
 800a128:	d101      	bne.n	800a12e <__sflush_r+0xb6>
 800a12a:	602f      	str	r7, [r5, #0]
 800a12c:	e7b1      	b.n	800a092 <__sflush_r+0x1a>
 800a12e:	89a3      	ldrh	r3, [r4, #12]
 800a130:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a134:	81a3      	strh	r3, [r4, #12]
 800a136:	e7ad      	b.n	800a094 <__sflush_r+0x1c>
 800a138:	690f      	ldr	r7, [r1, #16]
 800a13a:	2f00      	cmp	r7, #0
 800a13c:	d0a9      	beq.n	800a092 <__sflush_r+0x1a>
 800a13e:	0793      	lsls	r3, r2, #30
 800a140:	680e      	ldr	r6, [r1, #0]
 800a142:	bf08      	it	eq
 800a144:	694b      	ldreq	r3, [r1, #20]
 800a146:	600f      	str	r7, [r1, #0]
 800a148:	bf18      	it	ne
 800a14a:	2300      	movne	r3, #0
 800a14c:	eba6 0807 	sub.w	r8, r6, r7
 800a150:	608b      	str	r3, [r1, #8]
 800a152:	f1b8 0f00 	cmp.w	r8, #0
 800a156:	dd9c      	ble.n	800a092 <__sflush_r+0x1a>
 800a158:	6a21      	ldr	r1, [r4, #32]
 800a15a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a15c:	4643      	mov	r3, r8
 800a15e:	463a      	mov	r2, r7
 800a160:	4628      	mov	r0, r5
 800a162:	47b0      	blx	r6
 800a164:	2800      	cmp	r0, #0
 800a166:	dc06      	bgt.n	800a176 <__sflush_r+0xfe>
 800a168:	89a3      	ldrh	r3, [r4, #12]
 800a16a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a16e:	81a3      	strh	r3, [r4, #12]
 800a170:	f04f 30ff 	mov.w	r0, #4294967295
 800a174:	e78e      	b.n	800a094 <__sflush_r+0x1c>
 800a176:	4407      	add	r7, r0
 800a178:	eba8 0800 	sub.w	r8, r8, r0
 800a17c:	e7e9      	b.n	800a152 <__sflush_r+0xda>
 800a17e:	bf00      	nop
 800a180:	20400001 	.word	0x20400001

0800a184 <_fflush_r>:
 800a184:	b538      	push	{r3, r4, r5, lr}
 800a186:	690b      	ldr	r3, [r1, #16]
 800a188:	4605      	mov	r5, r0
 800a18a:	460c      	mov	r4, r1
 800a18c:	b913      	cbnz	r3, 800a194 <_fflush_r+0x10>
 800a18e:	2500      	movs	r5, #0
 800a190:	4628      	mov	r0, r5
 800a192:	bd38      	pop	{r3, r4, r5, pc}
 800a194:	b118      	cbz	r0, 800a19e <_fflush_r+0x1a>
 800a196:	6983      	ldr	r3, [r0, #24]
 800a198:	b90b      	cbnz	r3, 800a19e <_fflush_r+0x1a>
 800a19a:	f000 f887 	bl	800a2ac <__sinit>
 800a19e:	4b14      	ldr	r3, [pc, #80]	; (800a1f0 <_fflush_r+0x6c>)
 800a1a0:	429c      	cmp	r4, r3
 800a1a2:	d11b      	bne.n	800a1dc <_fflush_r+0x58>
 800a1a4:	686c      	ldr	r4, [r5, #4]
 800a1a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	d0ef      	beq.n	800a18e <_fflush_r+0xa>
 800a1ae:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a1b0:	07d0      	lsls	r0, r2, #31
 800a1b2:	d404      	bmi.n	800a1be <_fflush_r+0x3a>
 800a1b4:	0599      	lsls	r1, r3, #22
 800a1b6:	d402      	bmi.n	800a1be <_fflush_r+0x3a>
 800a1b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a1ba:	f000 f915 	bl	800a3e8 <__retarget_lock_acquire_recursive>
 800a1be:	4628      	mov	r0, r5
 800a1c0:	4621      	mov	r1, r4
 800a1c2:	f7ff ff59 	bl	800a078 <__sflush_r>
 800a1c6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a1c8:	07da      	lsls	r2, r3, #31
 800a1ca:	4605      	mov	r5, r0
 800a1cc:	d4e0      	bmi.n	800a190 <_fflush_r+0xc>
 800a1ce:	89a3      	ldrh	r3, [r4, #12]
 800a1d0:	059b      	lsls	r3, r3, #22
 800a1d2:	d4dd      	bmi.n	800a190 <_fflush_r+0xc>
 800a1d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a1d6:	f000 f908 	bl	800a3ea <__retarget_lock_release_recursive>
 800a1da:	e7d9      	b.n	800a190 <_fflush_r+0xc>
 800a1dc:	4b05      	ldr	r3, [pc, #20]	; (800a1f4 <_fflush_r+0x70>)
 800a1de:	429c      	cmp	r4, r3
 800a1e0:	d101      	bne.n	800a1e6 <_fflush_r+0x62>
 800a1e2:	68ac      	ldr	r4, [r5, #8]
 800a1e4:	e7df      	b.n	800a1a6 <_fflush_r+0x22>
 800a1e6:	4b04      	ldr	r3, [pc, #16]	; (800a1f8 <_fflush_r+0x74>)
 800a1e8:	429c      	cmp	r4, r3
 800a1ea:	bf08      	it	eq
 800a1ec:	68ec      	ldreq	r4, [r5, #12]
 800a1ee:	e7da      	b.n	800a1a6 <_fflush_r+0x22>
 800a1f0:	0800af54 	.word	0x0800af54
 800a1f4:	0800af74 	.word	0x0800af74
 800a1f8:	0800af34 	.word	0x0800af34

0800a1fc <std>:
 800a1fc:	2300      	movs	r3, #0
 800a1fe:	b510      	push	{r4, lr}
 800a200:	4604      	mov	r4, r0
 800a202:	e9c0 3300 	strd	r3, r3, [r0]
 800a206:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a20a:	6083      	str	r3, [r0, #8]
 800a20c:	8181      	strh	r1, [r0, #12]
 800a20e:	6643      	str	r3, [r0, #100]	; 0x64
 800a210:	81c2      	strh	r2, [r0, #14]
 800a212:	6183      	str	r3, [r0, #24]
 800a214:	4619      	mov	r1, r3
 800a216:	2208      	movs	r2, #8
 800a218:	305c      	adds	r0, #92	; 0x5c
 800a21a:	f7ff fdd7 	bl	8009dcc <memset>
 800a21e:	4b05      	ldr	r3, [pc, #20]	; (800a234 <std+0x38>)
 800a220:	6263      	str	r3, [r4, #36]	; 0x24
 800a222:	4b05      	ldr	r3, [pc, #20]	; (800a238 <std+0x3c>)
 800a224:	62a3      	str	r3, [r4, #40]	; 0x28
 800a226:	4b05      	ldr	r3, [pc, #20]	; (800a23c <std+0x40>)
 800a228:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a22a:	4b05      	ldr	r3, [pc, #20]	; (800a240 <std+0x44>)
 800a22c:	6224      	str	r4, [r4, #32]
 800a22e:	6323      	str	r3, [r4, #48]	; 0x30
 800a230:	bd10      	pop	{r4, pc}
 800a232:	bf00      	nop
 800a234:	0800ac75 	.word	0x0800ac75
 800a238:	0800ac97 	.word	0x0800ac97
 800a23c:	0800accf 	.word	0x0800accf
 800a240:	0800acf3 	.word	0x0800acf3

0800a244 <_cleanup_r>:
 800a244:	4901      	ldr	r1, [pc, #4]	; (800a24c <_cleanup_r+0x8>)
 800a246:	f000 b8af 	b.w	800a3a8 <_fwalk_reent>
 800a24a:	bf00      	nop
 800a24c:	0800a185 	.word	0x0800a185

0800a250 <__sfmoreglue>:
 800a250:	b570      	push	{r4, r5, r6, lr}
 800a252:	2268      	movs	r2, #104	; 0x68
 800a254:	1e4d      	subs	r5, r1, #1
 800a256:	4355      	muls	r5, r2
 800a258:	460e      	mov	r6, r1
 800a25a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a25e:	f000 f997 	bl	800a590 <_malloc_r>
 800a262:	4604      	mov	r4, r0
 800a264:	b140      	cbz	r0, 800a278 <__sfmoreglue+0x28>
 800a266:	2100      	movs	r1, #0
 800a268:	e9c0 1600 	strd	r1, r6, [r0]
 800a26c:	300c      	adds	r0, #12
 800a26e:	60a0      	str	r0, [r4, #8]
 800a270:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a274:	f7ff fdaa 	bl	8009dcc <memset>
 800a278:	4620      	mov	r0, r4
 800a27a:	bd70      	pop	{r4, r5, r6, pc}

0800a27c <__sfp_lock_acquire>:
 800a27c:	4801      	ldr	r0, [pc, #4]	; (800a284 <__sfp_lock_acquire+0x8>)
 800a27e:	f000 b8b3 	b.w	800a3e8 <__retarget_lock_acquire_recursive>
 800a282:	bf00      	nop
 800a284:	2000194d 	.word	0x2000194d

0800a288 <__sfp_lock_release>:
 800a288:	4801      	ldr	r0, [pc, #4]	; (800a290 <__sfp_lock_release+0x8>)
 800a28a:	f000 b8ae 	b.w	800a3ea <__retarget_lock_release_recursive>
 800a28e:	bf00      	nop
 800a290:	2000194d 	.word	0x2000194d

0800a294 <__sinit_lock_acquire>:
 800a294:	4801      	ldr	r0, [pc, #4]	; (800a29c <__sinit_lock_acquire+0x8>)
 800a296:	f000 b8a7 	b.w	800a3e8 <__retarget_lock_acquire_recursive>
 800a29a:	bf00      	nop
 800a29c:	2000194e 	.word	0x2000194e

0800a2a0 <__sinit_lock_release>:
 800a2a0:	4801      	ldr	r0, [pc, #4]	; (800a2a8 <__sinit_lock_release+0x8>)
 800a2a2:	f000 b8a2 	b.w	800a3ea <__retarget_lock_release_recursive>
 800a2a6:	bf00      	nop
 800a2a8:	2000194e 	.word	0x2000194e

0800a2ac <__sinit>:
 800a2ac:	b510      	push	{r4, lr}
 800a2ae:	4604      	mov	r4, r0
 800a2b0:	f7ff fff0 	bl	800a294 <__sinit_lock_acquire>
 800a2b4:	69a3      	ldr	r3, [r4, #24]
 800a2b6:	b11b      	cbz	r3, 800a2c0 <__sinit+0x14>
 800a2b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a2bc:	f7ff bff0 	b.w	800a2a0 <__sinit_lock_release>
 800a2c0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a2c4:	6523      	str	r3, [r4, #80]	; 0x50
 800a2c6:	4b13      	ldr	r3, [pc, #76]	; (800a314 <__sinit+0x68>)
 800a2c8:	4a13      	ldr	r2, [pc, #76]	; (800a318 <__sinit+0x6c>)
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	62a2      	str	r2, [r4, #40]	; 0x28
 800a2ce:	42a3      	cmp	r3, r4
 800a2d0:	bf04      	itt	eq
 800a2d2:	2301      	moveq	r3, #1
 800a2d4:	61a3      	streq	r3, [r4, #24]
 800a2d6:	4620      	mov	r0, r4
 800a2d8:	f000 f820 	bl	800a31c <__sfp>
 800a2dc:	6060      	str	r0, [r4, #4]
 800a2de:	4620      	mov	r0, r4
 800a2e0:	f000 f81c 	bl	800a31c <__sfp>
 800a2e4:	60a0      	str	r0, [r4, #8]
 800a2e6:	4620      	mov	r0, r4
 800a2e8:	f000 f818 	bl	800a31c <__sfp>
 800a2ec:	2200      	movs	r2, #0
 800a2ee:	60e0      	str	r0, [r4, #12]
 800a2f0:	2104      	movs	r1, #4
 800a2f2:	6860      	ldr	r0, [r4, #4]
 800a2f4:	f7ff ff82 	bl	800a1fc <std>
 800a2f8:	68a0      	ldr	r0, [r4, #8]
 800a2fa:	2201      	movs	r2, #1
 800a2fc:	2109      	movs	r1, #9
 800a2fe:	f7ff ff7d 	bl	800a1fc <std>
 800a302:	68e0      	ldr	r0, [r4, #12]
 800a304:	2202      	movs	r2, #2
 800a306:	2112      	movs	r1, #18
 800a308:	f7ff ff78 	bl	800a1fc <std>
 800a30c:	2301      	movs	r3, #1
 800a30e:	61a3      	str	r3, [r4, #24]
 800a310:	e7d2      	b.n	800a2b8 <__sinit+0xc>
 800a312:	bf00      	nop
 800a314:	0800af30 	.word	0x0800af30
 800a318:	0800a245 	.word	0x0800a245

0800a31c <__sfp>:
 800a31c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a31e:	4607      	mov	r7, r0
 800a320:	f7ff ffac 	bl	800a27c <__sfp_lock_acquire>
 800a324:	4b1e      	ldr	r3, [pc, #120]	; (800a3a0 <__sfp+0x84>)
 800a326:	681e      	ldr	r6, [r3, #0]
 800a328:	69b3      	ldr	r3, [r6, #24]
 800a32a:	b913      	cbnz	r3, 800a332 <__sfp+0x16>
 800a32c:	4630      	mov	r0, r6
 800a32e:	f7ff ffbd 	bl	800a2ac <__sinit>
 800a332:	3648      	adds	r6, #72	; 0x48
 800a334:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a338:	3b01      	subs	r3, #1
 800a33a:	d503      	bpl.n	800a344 <__sfp+0x28>
 800a33c:	6833      	ldr	r3, [r6, #0]
 800a33e:	b30b      	cbz	r3, 800a384 <__sfp+0x68>
 800a340:	6836      	ldr	r6, [r6, #0]
 800a342:	e7f7      	b.n	800a334 <__sfp+0x18>
 800a344:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a348:	b9d5      	cbnz	r5, 800a380 <__sfp+0x64>
 800a34a:	4b16      	ldr	r3, [pc, #88]	; (800a3a4 <__sfp+0x88>)
 800a34c:	60e3      	str	r3, [r4, #12]
 800a34e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a352:	6665      	str	r5, [r4, #100]	; 0x64
 800a354:	f000 f847 	bl	800a3e6 <__retarget_lock_init_recursive>
 800a358:	f7ff ff96 	bl	800a288 <__sfp_lock_release>
 800a35c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a360:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a364:	6025      	str	r5, [r4, #0]
 800a366:	61a5      	str	r5, [r4, #24]
 800a368:	2208      	movs	r2, #8
 800a36a:	4629      	mov	r1, r5
 800a36c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a370:	f7ff fd2c 	bl	8009dcc <memset>
 800a374:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a378:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a37c:	4620      	mov	r0, r4
 800a37e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a380:	3468      	adds	r4, #104	; 0x68
 800a382:	e7d9      	b.n	800a338 <__sfp+0x1c>
 800a384:	2104      	movs	r1, #4
 800a386:	4638      	mov	r0, r7
 800a388:	f7ff ff62 	bl	800a250 <__sfmoreglue>
 800a38c:	4604      	mov	r4, r0
 800a38e:	6030      	str	r0, [r6, #0]
 800a390:	2800      	cmp	r0, #0
 800a392:	d1d5      	bne.n	800a340 <__sfp+0x24>
 800a394:	f7ff ff78 	bl	800a288 <__sfp_lock_release>
 800a398:	230c      	movs	r3, #12
 800a39a:	603b      	str	r3, [r7, #0]
 800a39c:	e7ee      	b.n	800a37c <__sfp+0x60>
 800a39e:	bf00      	nop
 800a3a0:	0800af30 	.word	0x0800af30
 800a3a4:	ffff0001 	.word	0xffff0001

0800a3a8 <_fwalk_reent>:
 800a3a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a3ac:	4606      	mov	r6, r0
 800a3ae:	4688      	mov	r8, r1
 800a3b0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a3b4:	2700      	movs	r7, #0
 800a3b6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a3ba:	f1b9 0901 	subs.w	r9, r9, #1
 800a3be:	d505      	bpl.n	800a3cc <_fwalk_reent+0x24>
 800a3c0:	6824      	ldr	r4, [r4, #0]
 800a3c2:	2c00      	cmp	r4, #0
 800a3c4:	d1f7      	bne.n	800a3b6 <_fwalk_reent+0xe>
 800a3c6:	4638      	mov	r0, r7
 800a3c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a3cc:	89ab      	ldrh	r3, [r5, #12]
 800a3ce:	2b01      	cmp	r3, #1
 800a3d0:	d907      	bls.n	800a3e2 <_fwalk_reent+0x3a>
 800a3d2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a3d6:	3301      	adds	r3, #1
 800a3d8:	d003      	beq.n	800a3e2 <_fwalk_reent+0x3a>
 800a3da:	4629      	mov	r1, r5
 800a3dc:	4630      	mov	r0, r6
 800a3de:	47c0      	blx	r8
 800a3e0:	4307      	orrs	r7, r0
 800a3e2:	3568      	adds	r5, #104	; 0x68
 800a3e4:	e7e9      	b.n	800a3ba <_fwalk_reent+0x12>

0800a3e6 <__retarget_lock_init_recursive>:
 800a3e6:	4770      	bx	lr

0800a3e8 <__retarget_lock_acquire_recursive>:
 800a3e8:	4770      	bx	lr

0800a3ea <__retarget_lock_release_recursive>:
 800a3ea:	4770      	bx	lr

0800a3ec <__swhatbuf_r>:
 800a3ec:	b570      	push	{r4, r5, r6, lr}
 800a3ee:	460e      	mov	r6, r1
 800a3f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a3f4:	2900      	cmp	r1, #0
 800a3f6:	b096      	sub	sp, #88	; 0x58
 800a3f8:	4614      	mov	r4, r2
 800a3fa:	461d      	mov	r5, r3
 800a3fc:	da08      	bge.n	800a410 <__swhatbuf_r+0x24>
 800a3fe:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800a402:	2200      	movs	r2, #0
 800a404:	602a      	str	r2, [r5, #0]
 800a406:	061a      	lsls	r2, r3, #24
 800a408:	d410      	bmi.n	800a42c <__swhatbuf_r+0x40>
 800a40a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a40e:	e00e      	b.n	800a42e <__swhatbuf_r+0x42>
 800a410:	466a      	mov	r2, sp
 800a412:	f000 fc95 	bl	800ad40 <_fstat_r>
 800a416:	2800      	cmp	r0, #0
 800a418:	dbf1      	blt.n	800a3fe <__swhatbuf_r+0x12>
 800a41a:	9a01      	ldr	r2, [sp, #4]
 800a41c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a420:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a424:	425a      	negs	r2, r3
 800a426:	415a      	adcs	r2, r3
 800a428:	602a      	str	r2, [r5, #0]
 800a42a:	e7ee      	b.n	800a40a <__swhatbuf_r+0x1e>
 800a42c:	2340      	movs	r3, #64	; 0x40
 800a42e:	2000      	movs	r0, #0
 800a430:	6023      	str	r3, [r4, #0]
 800a432:	b016      	add	sp, #88	; 0x58
 800a434:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a438 <__smakebuf_r>:
 800a438:	898b      	ldrh	r3, [r1, #12]
 800a43a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a43c:	079d      	lsls	r5, r3, #30
 800a43e:	4606      	mov	r6, r0
 800a440:	460c      	mov	r4, r1
 800a442:	d507      	bpl.n	800a454 <__smakebuf_r+0x1c>
 800a444:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a448:	6023      	str	r3, [r4, #0]
 800a44a:	6123      	str	r3, [r4, #16]
 800a44c:	2301      	movs	r3, #1
 800a44e:	6163      	str	r3, [r4, #20]
 800a450:	b002      	add	sp, #8
 800a452:	bd70      	pop	{r4, r5, r6, pc}
 800a454:	ab01      	add	r3, sp, #4
 800a456:	466a      	mov	r2, sp
 800a458:	f7ff ffc8 	bl	800a3ec <__swhatbuf_r>
 800a45c:	9900      	ldr	r1, [sp, #0]
 800a45e:	4605      	mov	r5, r0
 800a460:	4630      	mov	r0, r6
 800a462:	f000 f895 	bl	800a590 <_malloc_r>
 800a466:	b948      	cbnz	r0, 800a47c <__smakebuf_r+0x44>
 800a468:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a46c:	059a      	lsls	r2, r3, #22
 800a46e:	d4ef      	bmi.n	800a450 <__smakebuf_r+0x18>
 800a470:	f023 0303 	bic.w	r3, r3, #3
 800a474:	f043 0302 	orr.w	r3, r3, #2
 800a478:	81a3      	strh	r3, [r4, #12]
 800a47a:	e7e3      	b.n	800a444 <__smakebuf_r+0xc>
 800a47c:	4b0d      	ldr	r3, [pc, #52]	; (800a4b4 <__smakebuf_r+0x7c>)
 800a47e:	62b3      	str	r3, [r6, #40]	; 0x28
 800a480:	89a3      	ldrh	r3, [r4, #12]
 800a482:	6020      	str	r0, [r4, #0]
 800a484:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a488:	81a3      	strh	r3, [r4, #12]
 800a48a:	9b00      	ldr	r3, [sp, #0]
 800a48c:	6163      	str	r3, [r4, #20]
 800a48e:	9b01      	ldr	r3, [sp, #4]
 800a490:	6120      	str	r0, [r4, #16]
 800a492:	b15b      	cbz	r3, 800a4ac <__smakebuf_r+0x74>
 800a494:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a498:	4630      	mov	r0, r6
 800a49a:	f000 fc63 	bl	800ad64 <_isatty_r>
 800a49e:	b128      	cbz	r0, 800a4ac <__smakebuf_r+0x74>
 800a4a0:	89a3      	ldrh	r3, [r4, #12]
 800a4a2:	f023 0303 	bic.w	r3, r3, #3
 800a4a6:	f043 0301 	orr.w	r3, r3, #1
 800a4aa:	81a3      	strh	r3, [r4, #12]
 800a4ac:	89a0      	ldrh	r0, [r4, #12]
 800a4ae:	4305      	orrs	r5, r0
 800a4b0:	81a5      	strh	r5, [r4, #12]
 800a4b2:	e7cd      	b.n	800a450 <__smakebuf_r+0x18>
 800a4b4:	0800a245 	.word	0x0800a245

0800a4b8 <_free_r>:
 800a4b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a4ba:	2900      	cmp	r1, #0
 800a4bc:	d044      	beq.n	800a548 <_free_r+0x90>
 800a4be:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a4c2:	9001      	str	r0, [sp, #4]
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	f1a1 0404 	sub.w	r4, r1, #4
 800a4ca:	bfb8      	it	lt
 800a4cc:	18e4      	addlt	r4, r4, r3
 800a4ce:	f000 fc6b 	bl	800ada8 <__malloc_lock>
 800a4d2:	4a1e      	ldr	r2, [pc, #120]	; (800a54c <_free_r+0x94>)
 800a4d4:	9801      	ldr	r0, [sp, #4]
 800a4d6:	6813      	ldr	r3, [r2, #0]
 800a4d8:	b933      	cbnz	r3, 800a4e8 <_free_r+0x30>
 800a4da:	6063      	str	r3, [r4, #4]
 800a4dc:	6014      	str	r4, [r2, #0]
 800a4de:	b003      	add	sp, #12
 800a4e0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a4e4:	f000 bc66 	b.w	800adb4 <__malloc_unlock>
 800a4e8:	42a3      	cmp	r3, r4
 800a4ea:	d908      	bls.n	800a4fe <_free_r+0x46>
 800a4ec:	6825      	ldr	r5, [r4, #0]
 800a4ee:	1961      	adds	r1, r4, r5
 800a4f0:	428b      	cmp	r3, r1
 800a4f2:	bf01      	itttt	eq
 800a4f4:	6819      	ldreq	r1, [r3, #0]
 800a4f6:	685b      	ldreq	r3, [r3, #4]
 800a4f8:	1949      	addeq	r1, r1, r5
 800a4fa:	6021      	streq	r1, [r4, #0]
 800a4fc:	e7ed      	b.n	800a4da <_free_r+0x22>
 800a4fe:	461a      	mov	r2, r3
 800a500:	685b      	ldr	r3, [r3, #4]
 800a502:	b10b      	cbz	r3, 800a508 <_free_r+0x50>
 800a504:	42a3      	cmp	r3, r4
 800a506:	d9fa      	bls.n	800a4fe <_free_r+0x46>
 800a508:	6811      	ldr	r1, [r2, #0]
 800a50a:	1855      	adds	r5, r2, r1
 800a50c:	42a5      	cmp	r5, r4
 800a50e:	d10b      	bne.n	800a528 <_free_r+0x70>
 800a510:	6824      	ldr	r4, [r4, #0]
 800a512:	4421      	add	r1, r4
 800a514:	1854      	adds	r4, r2, r1
 800a516:	42a3      	cmp	r3, r4
 800a518:	6011      	str	r1, [r2, #0]
 800a51a:	d1e0      	bne.n	800a4de <_free_r+0x26>
 800a51c:	681c      	ldr	r4, [r3, #0]
 800a51e:	685b      	ldr	r3, [r3, #4]
 800a520:	6053      	str	r3, [r2, #4]
 800a522:	4421      	add	r1, r4
 800a524:	6011      	str	r1, [r2, #0]
 800a526:	e7da      	b.n	800a4de <_free_r+0x26>
 800a528:	d902      	bls.n	800a530 <_free_r+0x78>
 800a52a:	230c      	movs	r3, #12
 800a52c:	6003      	str	r3, [r0, #0]
 800a52e:	e7d6      	b.n	800a4de <_free_r+0x26>
 800a530:	6825      	ldr	r5, [r4, #0]
 800a532:	1961      	adds	r1, r4, r5
 800a534:	428b      	cmp	r3, r1
 800a536:	bf04      	itt	eq
 800a538:	6819      	ldreq	r1, [r3, #0]
 800a53a:	685b      	ldreq	r3, [r3, #4]
 800a53c:	6063      	str	r3, [r4, #4]
 800a53e:	bf04      	itt	eq
 800a540:	1949      	addeq	r1, r1, r5
 800a542:	6021      	streq	r1, [r4, #0]
 800a544:	6054      	str	r4, [r2, #4]
 800a546:	e7ca      	b.n	800a4de <_free_r+0x26>
 800a548:	b003      	add	sp, #12
 800a54a:	bd30      	pop	{r4, r5, pc}
 800a54c:	20001950 	.word	0x20001950

0800a550 <sbrk_aligned>:
 800a550:	b570      	push	{r4, r5, r6, lr}
 800a552:	4e0e      	ldr	r6, [pc, #56]	; (800a58c <sbrk_aligned+0x3c>)
 800a554:	460c      	mov	r4, r1
 800a556:	6831      	ldr	r1, [r6, #0]
 800a558:	4605      	mov	r5, r0
 800a55a:	b911      	cbnz	r1, 800a562 <sbrk_aligned+0x12>
 800a55c:	f000 fb7a 	bl	800ac54 <_sbrk_r>
 800a560:	6030      	str	r0, [r6, #0]
 800a562:	4621      	mov	r1, r4
 800a564:	4628      	mov	r0, r5
 800a566:	f000 fb75 	bl	800ac54 <_sbrk_r>
 800a56a:	1c43      	adds	r3, r0, #1
 800a56c:	d00a      	beq.n	800a584 <sbrk_aligned+0x34>
 800a56e:	1cc4      	adds	r4, r0, #3
 800a570:	f024 0403 	bic.w	r4, r4, #3
 800a574:	42a0      	cmp	r0, r4
 800a576:	d007      	beq.n	800a588 <sbrk_aligned+0x38>
 800a578:	1a21      	subs	r1, r4, r0
 800a57a:	4628      	mov	r0, r5
 800a57c:	f000 fb6a 	bl	800ac54 <_sbrk_r>
 800a580:	3001      	adds	r0, #1
 800a582:	d101      	bne.n	800a588 <sbrk_aligned+0x38>
 800a584:	f04f 34ff 	mov.w	r4, #4294967295
 800a588:	4620      	mov	r0, r4
 800a58a:	bd70      	pop	{r4, r5, r6, pc}
 800a58c:	20001954 	.word	0x20001954

0800a590 <_malloc_r>:
 800a590:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a594:	1ccd      	adds	r5, r1, #3
 800a596:	f025 0503 	bic.w	r5, r5, #3
 800a59a:	3508      	adds	r5, #8
 800a59c:	2d0c      	cmp	r5, #12
 800a59e:	bf38      	it	cc
 800a5a0:	250c      	movcc	r5, #12
 800a5a2:	2d00      	cmp	r5, #0
 800a5a4:	4607      	mov	r7, r0
 800a5a6:	db01      	blt.n	800a5ac <_malloc_r+0x1c>
 800a5a8:	42a9      	cmp	r1, r5
 800a5aa:	d905      	bls.n	800a5b8 <_malloc_r+0x28>
 800a5ac:	230c      	movs	r3, #12
 800a5ae:	603b      	str	r3, [r7, #0]
 800a5b0:	2600      	movs	r6, #0
 800a5b2:	4630      	mov	r0, r6
 800a5b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a5b8:	4e2e      	ldr	r6, [pc, #184]	; (800a674 <_malloc_r+0xe4>)
 800a5ba:	f000 fbf5 	bl	800ada8 <__malloc_lock>
 800a5be:	6833      	ldr	r3, [r6, #0]
 800a5c0:	461c      	mov	r4, r3
 800a5c2:	bb34      	cbnz	r4, 800a612 <_malloc_r+0x82>
 800a5c4:	4629      	mov	r1, r5
 800a5c6:	4638      	mov	r0, r7
 800a5c8:	f7ff ffc2 	bl	800a550 <sbrk_aligned>
 800a5cc:	1c43      	adds	r3, r0, #1
 800a5ce:	4604      	mov	r4, r0
 800a5d0:	d14d      	bne.n	800a66e <_malloc_r+0xde>
 800a5d2:	6834      	ldr	r4, [r6, #0]
 800a5d4:	4626      	mov	r6, r4
 800a5d6:	2e00      	cmp	r6, #0
 800a5d8:	d140      	bne.n	800a65c <_malloc_r+0xcc>
 800a5da:	6823      	ldr	r3, [r4, #0]
 800a5dc:	4631      	mov	r1, r6
 800a5de:	4638      	mov	r0, r7
 800a5e0:	eb04 0803 	add.w	r8, r4, r3
 800a5e4:	f000 fb36 	bl	800ac54 <_sbrk_r>
 800a5e8:	4580      	cmp	r8, r0
 800a5ea:	d13a      	bne.n	800a662 <_malloc_r+0xd2>
 800a5ec:	6821      	ldr	r1, [r4, #0]
 800a5ee:	3503      	adds	r5, #3
 800a5f0:	1a6d      	subs	r5, r5, r1
 800a5f2:	f025 0503 	bic.w	r5, r5, #3
 800a5f6:	3508      	adds	r5, #8
 800a5f8:	2d0c      	cmp	r5, #12
 800a5fa:	bf38      	it	cc
 800a5fc:	250c      	movcc	r5, #12
 800a5fe:	4629      	mov	r1, r5
 800a600:	4638      	mov	r0, r7
 800a602:	f7ff ffa5 	bl	800a550 <sbrk_aligned>
 800a606:	3001      	adds	r0, #1
 800a608:	d02b      	beq.n	800a662 <_malloc_r+0xd2>
 800a60a:	6823      	ldr	r3, [r4, #0]
 800a60c:	442b      	add	r3, r5
 800a60e:	6023      	str	r3, [r4, #0]
 800a610:	e00e      	b.n	800a630 <_malloc_r+0xa0>
 800a612:	6822      	ldr	r2, [r4, #0]
 800a614:	1b52      	subs	r2, r2, r5
 800a616:	d41e      	bmi.n	800a656 <_malloc_r+0xc6>
 800a618:	2a0b      	cmp	r2, #11
 800a61a:	d916      	bls.n	800a64a <_malloc_r+0xba>
 800a61c:	1961      	adds	r1, r4, r5
 800a61e:	42a3      	cmp	r3, r4
 800a620:	6025      	str	r5, [r4, #0]
 800a622:	bf18      	it	ne
 800a624:	6059      	strne	r1, [r3, #4]
 800a626:	6863      	ldr	r3, [r4, #4]
 800a628:	bf08      	it	eq
 800a62a:	6031      	streq	r1, [r6, #0]
 800a62c:	5162      	str	r2, [r4, r5]
 800a62e:	604b      	str	r3, [r1, #4]
 800a630:	4638      	mov	r0, r7
 800a632:	f104 060b 	add.w	r6, r4, #11
 800a636:	f000 fbbd 	bl	800adb4 <__malloc_unlock>
 800a63a:	f026 0607 	bic.w	r6, r6, #7
 800a63e:	1d23      	adds	r3, r4, #4
 800a640:	1af2      	subs	r2, r6, r3
 800a642:	d0b6      	beq.n	800a5b2 <_malloc_r+0x22>
 800a644:	1b9b      	subs	r3, r3, r6
 800a646:	50a3      	str	r3, [r4, r2]
 800a648:	e7b3      	b.n	800a5b2 <_malloc_r+0x22>
 800a64a:	6862      	ldr	r2, [r4, #4]
 800a64c:	42a3      	cmp	r3, r4
 800a64e:	bf0c      	ite	eq
 800a650:	6032      	streq	r2, [r6, #0]
 800a652:	605a      	strne	r2, [r3, #4]
 800a654:	e7ec      	b.n	800a630 <_malloc_r+0xa0>
 800a656:	4623      	mov	r3, r4
 800a658:	6864      	ldr	r4, [r4, #4]
 800a65a:	e7b2      	b.n	800a5c2 <_malloc_r+0x32>
 800a65c:	4634      	mov	r4, r6
 800a65e:	6876      	ldr	r6, [r6, #4]
 800a660:	e7b9      	b.n	800a5d6 <_malloc_r+0x46>
 800a662:	230c      	movs	r3, #12
 800a664:	603b      	str	r3, [r7, #0]
 800a666:	4638      	mov	r0, r7
 800a668:	f000 fba4 	bl	800adb4 <__malloc_unlock>
 800a66c:	e7a1      	b.n	800a5b2 <_malloc_r+0x22>
 800a66e:	6025      	str	r5, [r4, #0]
 800a670:	e7de      	b.n	800a630 <_malloc_r+0xa0>
 800a672:	bf00      	nop
 800a674:	20001950 	.word	0x20001950

0800a678 <__sfputc_r>:
 800a678:	6893      	ldr	r3, [r2, #8]
 800a67a:	3b01      	subs	r3, #1
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	b410      	push	{r4}
 800a680:	6093      	str	r3, [r2, #8]
 800a682:	da08      	bge.n	800a696 <__sfputc_r+0x1e>
 800a684:	6994      	ldr	r4, [r2, #24]
 800a686:	42a3      	cmp	r3, r4
 800a688:	db01      	blt.n	800a68e <__sfputc_r+0x16>
 800a68a:	290a      	cmp	r1, #10
 800a68c:	d103      	bne.n	800a696 <__sfputc_r+0x1e>
 800a68e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a692:	f7ff bc31 	b.w	8009ef8 <__swbuf_r>
 800a696:	6813      	ldr	r3, [r2, #0]
 800a698:	1c58      	adds	r0, r3, #1
 800a69a:	6010      	str	r0, [r2, #0]
 800a69c:	7019      	strb	r1, [r3, #0]
 800a69e:	4608      	mov	r0, r1
 800a6a0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a6a4:	4770      	bx	lr

0800a6a6 <__sfputs_r>:
 800a6a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a6a8:	4606      	mov	r6, r0
 800a6aa:	460f      	mov	r7, r1
 800a6ac:	4614      	mov	r4, r2
 800a6ae:	18d5      	adds	r5, r2, r3
 800a6b0:	42ac      	cmp	r4, r5
 800a6b2:	d101      	bne.n	800a6b8 <__sfputs_r+0x12>
 800a6b4:	2000      	movs	r0, #0
 800a6b6:	e007      	b.n	800a6c8 <__sfputs_r+0x22>
 800a6b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a6bc:	463a      	mov	r2, r7
 800a6be:	4630      	mov	r0, r6
 800a6c0:	f7ff ffda 	bl	800a678 <__sfputc_r>
 800a6c4:	1c43      	adds	r3, r0, #1
 800a6c6:	d1f3      	bne.n	800a6b0 <__sfputs_r+0xa>
 800a6c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a6cc <_vfiprintf_r>:
 800a6cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6d0:	460d      	mov	r5, r1
 800a6d2:	b09d      	sub	sp, #116	; 0x74
 800a6d4:	4614      	mov	r4, r2
 800a6d6:	4698      	mov	r8, r3
 800a6d8:	4606      	mov	r6, r0
 800a6da:	b118      	cbz	r0, 800a6e4 <_vfiprintf_r+0x18>
 800a6dc:	6983      	ldr	r3, [r0, #24]
 800a6de:	b90b      	cbnz	r3, 800a6e4 <_vfiprintf_r+0x18>
 800a6e0:	f7ff fde4 	bl	800a2ac <__sinit>
 800a6e4:	4b89      	ldr	r3, [pc, #548]	; (800a90c <_vfiprintf_r+0x240>)
 800a6e6:	429d      	cmp	r5, r3
 800a6e8:	d11b      	bne.n	800a722 <_vfiprintf_r+0x56>
 800a6ea:	6875      	ldr	r5, [r6, #4]
 800a6ec:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a6ee:	07d9      	lsls	r1, r3, #31
 800a6f0:	d405      	bmi.n	800a6fe <_vfiprintf_r+0x32>
 800a6f2:	89ab      	ldrh	r3, [r5, #12]
 800a6f4:	059a      	lsls	r2, r3, #22
 800a6f6:	d402      	bmi.n	800a6fe <_vfiprintf_r+0x32>
 800a6f8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a6fa:	f7ff fe75 	bl	800a3e8 <__retarget_lock_acquire_recursive>
 800a6fe:	89ab      	ldrh	r3, [r5, #12]
 800a700:	071b      	lsls	r3, r3, #28
 800a702:	d501      	bpl.n	800a708 <_vfiprintf_r+0x3c>
 800a704:	692b      	ldr	r3, [r5, #16]
 800a706:	b9eb      	cbnz	r3, 800a744 <_vfiprintf_r+0x78>
 800a708:	4629      	mov	r1, r5
 800a70a:	4630      	mov	r0, r6
 800a70c:	f7ff fc46 	bl	8009f9c <__swsetup_r>
 800a710:	b1c0      	cbz	r0, 800a744 <_vfiprintf_r+0x78>
 800a712:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a714:	07dc      	lsls	r4, r3, #31
 800a716:	d50e      	bpl.n	800a736 <_vfiprintf_r+0x6a>
 800a718:	f04f 30ff 	mov.w	r0, #4294967295
 800a71c:	b01d      	add	sp, #116	; 0x74
 800a71e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a722:	4b7b      	ldr	r3, [pc, #492]	; (800a910 <_vfiprintf_r+0x244>)
 800a724:	429d      	cmp	r5, r3
 800a726:	d101      	bne.n	800a72c <_vfiprintf_r+0x60>
 800a728:	68b5      	ldr	r5, [r6, #8]
 800a72a:	e7df      	b.n	800a6ec <_vfiprintf_r+0x20>
 800a72c:	4b79      	ldr	r3, [pc, #484]	; (800a914 <_vfiprintf_r+0x248>)
 800a72e:	429d      	cmp	r5, r3
 800a730:	bf08      	it	eq
 800a732:	68f5      	ldreq	r5, [r6, #12]
 800a734:	e7da      	b.n	800a6ec <_vfiprintf_r+0x20>
 800a736:	89ab      	ldrh	r3, [r5, #12]
 800a738:	0598      	lsls	r0, r3, #22
 800a73a:	d4ed      	bmi.n	800a718 <_vfiprintf_r+0x4c>
 800a73c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a73e:	f7ff fe54 	bl	800a3ea <__retarget_lock_release_recursive>
 800a742:	e7e9      	b.n	800a718 <_vfiprintf_r+0x4c>
 800a744:	2300      	movs	r3, #0
 800a746:	9309      	str	r3, [sp, #36]	; 0x24
 800a748:	2320      	movs	r3, #32
 800a74a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a74e:	f8cd 800c 	str.w	r8, [sp, #12]
 800a752:	2330      	movs	r3, #48	; 0x30
 800a754:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a918 <_vfiprintf_r+0x24c>
 800a758:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a75c:	f04f 0901 	mov.w	r9, #1
 800a760:	4623      	mov	r3, r4
 800a762:	469a      	mov	sl, r3
 800a764:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a768:	b10a      	cbz	r2, 800a76e <_vfiprintf_r+0xa2>
 800a76a:	2a25      	cmp	r2, #37	; 0x25
 800a76c:	d1f9      	bne.n	800a762 <_vfiprintf_r+0x96>
 800a76e:	ebba 0b04 	subs.w	fp, sl, r4
 800a772:	d00b      	beq.n	800a78c <_vfiprintf_r+0xc0>
 800a774:	465b      	mov	r3, fp
 800a776:	4622      	mov	r2, r4
 800a778:	4629      	mov	r1, r5
 800a77a:	4630      	mov	r0, r6
 800a77c:	f7ff ff93 	bl	800a6a6 <__sfputs_r>
 800a780:	3001      	adds	r0, #1
 800a782:	f000 80aa 	beq.w	800a8da <_vfiprintf_r+0x20e>
 800a786:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a788:	445a      	add	r2, fp
 800a78a:	9209      	str	r2, [sp, #36]	; 0x24
 800a78c:	f89a 3000 	ldrb.w	r3, [sl]
 800a790:	2b00      	cmp	r3, #0
 800a792:	f000 80a2 	beq.w	800a8da <_vfiprintf_r+0x20e>
 800a796:	2300      	movs	r3, #0
 800a798:	f04f 32ff 	mov.w	r2, #4294967295
 800a79c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a7a0:	f10a 0a01 	add.w	sl, sl, #1
 800a7a4:	9304      	str	r3, [sp, #16]
 800a7a6:	9307      	str	r3, [sp, #28]
 800a7a8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a7ac:	931a      	str	r3, [sp, #104]	; 0x68
 800a7ae:	4654      	mov	r4, sl
 800a7b0:	2205      	movs	r2, #5
 800a7b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a7b6:	4858      	ldr	r0, [pc, #352]	; (800a918 <_vfiprintf_r+0x24c>)
 800a7b8:	f7f5 fd12 	bl	80001e0 <memchr>
 800a7bc:	9a04      	ldr	r2, [sp, #16]
 800a7be:	b9d8      	cbnz	r0, 800a7f8 <_vfiprintf_r+0x12c>
 800a7c0:	06d1      	lsls	r1, r2, #27
 800a7c2:	bf44      	itt	mi
 800a7c4:	2320      	movmi	r3, #32
 800a7c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a7ca:	0713      	lsls	r3, r2, #28
 800a7cc:	bf44      	itt	mi
 800a7ce:	232b      	movmi	r3, #43	; 0x2b
 800a7d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a7d4:	f89a 3000 	ldrb.w	r3, [sl]
 800a7d8:	2b2a      	cmp	r3, #42	; 0x2a
 800a7da:	d015      	beq.n	800a808 <_vfiprintf_r+0x13c>
 800a7dc:	9a07      	ldr	r2, [sp, #28]
 800a7de:	4654      	mov	r4, sl
 800a7e0:	2000      	movs	r0, #0
 800a7e2:	f04f 0c0a 	mov.w	ip, #10
 800a7e6:	4621      	mov	r1, r4
 800a7e8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a7ec:	3b30      	subs	r3, #48	; 0x30
 800a7ee:	2b09      	cmp	r3, #9
 800a7f0:	d94e      	bls.n	800a890 <_vfiprintf_r+0x1c4>
 800a7f2:	b1b0      	cbz	r0, 800a822 <_vfiprintf_r+0x156>
 800a7f4:	9207      	str	r2, [sp, #28]
 800a7f6:	e014      	b.n	800a822 <_vfiprintf_r+0x156>
 800a7f8:	eba0 0308 	sub.w	r3, r0, r8
 800a7fc:	fa09 f303 	lsl.w	r3, r9, r3
 800a800:	4313      	orrs	r3, r2
 800a802:	9304      	str	r3, [sp, #16]
 800a804:	46a2      	mov	sl, r4
 800a806:	e7d2      	b.n	800a7ae <_vfiprintf_r+0xe2>
 800a808:	9b03      	ldr	r3, [sp, #12]
 800a80a:	1d19      	adds	r1, r3, #4
 800a80c:	681b      	ldr	r3, [r3, #0]
 800a80e:	9103      	str	r1, [sp, #12]
 800a810:	2b00      	cmp	r3, #0
 800a812:	bfbb      	ittet	lt
 800a814:	425b      	neglt	r3, r3
 800a816:	f042 0202 	orrlt.w	r2, r2, #2
 800a81a:	9307      	strge	r3, [sp, #28]
 800a81c:	9307      	strlt	r3, [sp, #28]
 800a81e:	bfb8      	it	lt
 800a820:	9204      	strlt	r2, [sp, #16]
 800a822:	7823      	ldrb	r3, [r4, #0]
 800a824:	2b2e      	cmp	r3, #46	; 0x2e
 800a826:	d10c      	bne.n	800a842 <_vfiprintf_r+0x176>
 800a828:	7863      	ldrb	r3, [r4, #1]
 800a82a:	2b2a      	cmp	r3, #42	; 0x2a
 800a82c:	d135      	bne.n	800a89a <_vfiprintf_r+0x1ce>
 800a82e:	9b03      	ldr	r3, [sp, #12]
 800a830:	1d1a      	adds	r2, r3, #4
 800a832:	681b      	ldr	r3, [r3, #0]
 800a834:	9203      	str	r2, [sp, #12]
 800a836:	2b00      	cmp	r3, #0
 800a838:	bfb8      	it	lt
 800a83a:	f04f 33ff 	movlt.w	r3, #4294967295
 800a83e:	3402      	adds	r4, #2
 800a840:	9305      	str	r3, [sp, #20]
 800a842:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a928 <_vfiprintf_r+0x25c>
 800a846:	7821      	ldrb	r1, [r4, #0]
 800a848:	2203      	movs	r2, #3
 800a84a:	4650      	mov	r0, sl
 800a84c:	f7f5 fcc8 	bl	80001e0 <memchr>
 800a850:	b140      	cbz	r0, 800a864 <_vfiprintf_r+0x198>
 800a852:	2340      	movs	r3, #64	; 0x40
 800a854:	eba0 000a 	sub.w	r0, r0, sl
 800a858:	fa03 f000 	lsl.w	r0, r3, r0
 800a85c:	9b04      	ldr	r3, [sp, #16]
 800a85e:	4303      	orrs	r3, r0
 800a860:	3401      	adds	r4, #1
 800a862:	9304      	str	r3, [sp, #16]
 800a864:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a868:	482c      	ldr	r0, [pc, #176]	; (800a91c <_vfiprintf_r+0x250>)
 800a86a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a86e:	2206      	movs	r2, #6
 800a870:	f7f5 fcb6 	bl	80001e0 <memchr>
 800a874:	2800      	cmp	r0, #0
 800a876:	d03f      	beq.n	800a8f8 <_vfiprintf_r+0x22c>
 800a878:	4b29      	ldr	r3, [pc, #164]	; (800a920 <_vfiprintf_r+0x254>)
 800a87a:	bb1b      	cbnz	r3, 800a8c4 <_vfiprintf_r+0x1f8>
 800a87c:	9b03      	ldr	r3, [sp, #12]
 800a87e:	3307      	adds	r3, #7
 800a880:	f023 0307 	bic.w	r3, r3, #7
 800a884:	3308      	adds	r3, #8
 800a886:	9303      	str	r3, [sp, #12]
 800a888:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a88a:	443b      	add	r3, r7
 800a88c:	9309      	str	r3, [sp, #36]	; 0x24
 800a88e:	e767      	b.n	800a760 <_vfiprintf_r+0x94>
 800a890:	fb0c 3202 	mla	r2, ip, r2, r3
 800a894:	460c      	mov	r4, r1
 800a896:	2001      	movs	r0, #1
 800a898:	e7a5      	b.n	800a7e6 <_vfiprintf_r+0x11a>
 800a89a:	2300      	movs	r3, #0
 800a89c:	3401      	adds	r4, #1
 800a89e:	9305      	str	r3, [sp, #20]
 800a8a0:	4619      	mov	r1, r3
 800a8a2:	f04f 0c0a 	mov.w	ip, #10
 800a8a6:	4620      	mov	r0, r4
 800a8a8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a8ac:	3a30      	subs	r2, #48	; 0x30
 800a8ae:	2a09      	cmp	r2, #9
 800a8b0:	d903      	bls.n	800a8ba <_vfiprintf_r+0x1ee>
 800a8b2:	2b00      	cmp	r3, #0
 800a8b4:	d0c5      	beq.n	800a842 <_vfiprintf_r+0x176>
 800a8b6:	9105      	str	r1, [sp, #20]
 800a8b8:	e7c3      	b.n	800a842 <_vfiprintf_r+0x176>
 800a8ba:	fb0c 2101 	mla	r1, ip, r1, r2
 800a8be:	4604      	mov	r4, r0
 800a8c0:	2301      	movs	r3, #1
 800a8c2:	e7f0      	b.n	800a8a6 <_vfiprintf_r+0x1da>
 800a8c4:	ab03      	add	r3, sp, #12
 800a8c6:	9300      	str	r3, [sp, #0]
 800a8c8:	462a      	mov	r2, r5
 800a8ca:	4b16      	ldr	r3, [pc, #88]	; (800a924 <_vfiprintf_r+0x258>)
 800a8cc:	a904      	add	r1, sp, #16
 800a8ce:	4630      	mov	r0, r6
 800a8d0:	f3af 8000 	nop.w
 800a8d4:	4607      	mov	r7, r0
 800a8d6:	1c78      	adds	r0, r7, #1
 800a8d8:	d1d6      	bne.n	800a888 <_vfiprintf_r+0x1bc>
 800a8da:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a8dc:	07d9      	lsls	r1, r3, #31
 800a8de:	d405      	bmi.n	800a8ec <_vfiprintf_r+0x220>
 800a8e0:	89ab      	ldrh	r3, [r5, #12]
 800a8e2:	059a      	lsls	r2, r3, #22
 800a8e4:	d402      	bmi.n	800a8ec <_vfiprintf_r+0x220>
 800a8e6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a8e8:	f7ff fd7f 	bl	800a3ea <__retarget_lock_release_recursive>
 800a8ec:	89ab      	ldrh	r3, [r5, #12]
 800a8ee:	065b      	lsls	r3, r3, #25
 800a8f0:	f53f af12 	bmi.w	800a718 <_vfiprintf_r+0x4c>
 800a8f4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a8f6:	e711      	b.n	800a71c <_vfiprintf_r+0x50>
 800a8f8:	ab03      	add	r3, sp, #12
 800a8fa:	9300      	str	r3, [sp, #0]
 800a8fc:	462a      	mov	r2, r5
 800a8fe:	4b09      	ldr	r3, [pc, #36]	; (800a924 <_vfiprintf_r+0x258>)
 800a900:	a904      	add	r1, sp, #16
 800a902:	4630      	mov	r0, r6
 800a904:	f000 f880 	bl	800aa08 <_printf_i>
 800a908:	e7e4      	b.n	800a8d4 <_vfiprintf_r+0x208>
 800a90a:	bf00      	nop
 800a90c:	0800af54 	.word	0x0800af54
 800a910:	0800af74 	.word	0x0800af74
 800a914:	0800af34 	.word	0x0800af34
 800a918:	0800af94 	.word	0x0800af94
 800a91c:	0800af9e 	.word	0x0800af9e
 800a920:	00000000 	.word	0x00000000
 800a924:	0800a6a7 	.word	0x0800a6a7
 800a928:	0800af9a 	.word	0x0800af9a

0800a92c <_printf_common>:
 800a92c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a930:	4616      	mov	r6, r2
 800a932:	4699      	mov	r9, r3
 800a934:	688a      	ldr	r2, [r1, #8]
 800a936:	690b      	ldr	r3, [r1, #16]
 800a938:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a93c:	4293      	cmp	r3, r2
 800a93e:	bfb8      	it	lt
 800a940:	4613      	movlt	r3, r2
 800a942:	6033      	str	r3, [r6, #0]
 800a944:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a948:	4607      	mov	r7, r0
 800a94a:	460c      	mov	r4, r1
 800a94c:	b10a      	cbz	r2, 800a952 <_printf_common+0x26>
 800a94e:	3301      	adds	r3, #1
 800a950:	6033      	str	r3, [r6, #0]
 800a952:	6823      	ldr	r3, [r4, #0]
 800a954:	0699      	lsls	r1, r3, #26
 800a956:	bf42      	ittt	mi
 800a958:	6833      	ldrmi	r3, [r6, #0]
 800a95a:	3302      	addmi	r3, #2
 800a95c:	6033      	strmi	r3, [r6, #0]
 800a95e:	6825      	ldr	r5, [r4, #0]
 800a960:	f015 0506 	ands.w	r5, r5, #6
 800a964:	d106      	bne.n	800a974 <_printf_common+0x48>
 800a966:	f104 0a19 	add.w	sl, r4, #25
 800a96a:	68e3      	ldr	r3, [r4, #12]
 800a96c:	6832      	ldr	r2, [r6, #0]
 800a96e:	1a9b      	subs	r3, r3, r2
 800a970:	42ab      	cmp	r3, r5
 800a972:	dc26      	bgt.n	800a9c2 <_printf_common+0x96>
 800a974:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a978:	1e13      	subs	r3, r2, #0
 800a97a:	6822      	ldr	r2, [r4, #0]
 800a97c:	bf18      	it	ne
 800a97e:	2301      	movne	r3, #1
 800a980:	0692      	lsls	r2, r2, #26
 800a982:	d42b      	bmi.n	800a9dc <_printf_common+0xb0>
 800a984:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a988:	4649      	mov	r1, r9
 800a98a:	4638      	mov	r0, r7
 800a98c:	47c0      	blx	r8
 800a98e:	3001      	adds	r0, #1
 800a990:	d01e      	beq.n	800a9d0 <_printf_common+0xa4>
 800a992:	6823      	ldr	r3, [r4, #0]
 800a994:	68e5      	ldr	r5, [r4, #12]
 800a996:	6832      	ldr	r2, [r6, #0]
 800a998:	f003 0306 	and.w	r3, r3, #6
 800a99c:	2b04      	cmp	r3, #4
 800a99e:	bf08      	it	eq
 800a9a0:	1aad      	subeq	r5, r5, r2
 800a9a2:	68a3      	ldr	r3, [r4, #8]
 800a9a4:	6922      	ldr	r2, [r4, #16]
 800a9a6:	bf0c      	ite	eq
 800a9a8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a9ac:	2500      	movne	r5, #0
 800a9ae:	4293      	cmp	r3, r2
 800a9b0:	bfc4      	itt	gt
 800a9b2:	1a9b      	subgt	r3, r3, r2
 800a9b4:	18ed      	addgt	r5, r5, r3
 800a9b6:	2600      	movs	r6, #0
 800a9b8:	341a      	adds	r4, #26
 800a9ba:	42b5      	cmp	r5, r6
 800a9bc:	d11a      	bne.n	800a9f4 <_printf_common+0xc8>
 800a9be:	2000      	movs	r0, #0
 800a9c0:	e008      	b.n	800a9d4 <_printf_common+0xa8>
 800a9c2:	2301      	movs	r3, #1
 800a9c4:	4652      	mov	r2, sl
 800a9c6:	4649      	mov	r1, r9
 800a9c8:	4638      	mov	r0, r7
 800a9ca:	47c0      	blx	r8
 800a9cc:	3001      	adds	r0, #1
 800a9ce:	d103      	bne.n	800a9d8 <_printf_common+0xac>
 800a9d0:	f04f 30ff 	mov.w	r0, #4294967295
 800a9d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a9d8:	3501      	adds	r5, #1
 800a9da:	e7c6      	b.n	800a96a <_printf_common+0x3e>
 800a9dc:	18e1      	adds	r1, r4, r3
 800a9de:	1c5a      	adds	r2, r3, #1
 800a9e0:	2030      	movs	r0, #48	; 0x30
 800a9e2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a9e6:	4422      	add	r2, r4
 800a9e8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a9ec:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a9f0:	3302      	adds	r3, #2
 800a9f2:	e7c7      	b.n	800a984 <_printf_common+0x58>
 800a9f4:	2301      	movs	r3, #1
 800a9f6:	4622      	mov	r2, r4
 800a9f8:	4649      	mov	r1, r9
 800a9fa:	4638      	mov	r0, r7
 800a9fc:	47c0      	blx	r8
 800a9fe:	3001      	adds	r0, #1
 800aa00:	d0e6      	beq.n	800a9d0 <_printf_common+0xa4>
 800aa02:	3601      	adds	r6, #1
 800aa04:	e7d9      	b.n	800a9ba <_printf_common+0x8e>
	...

0800aa08 <_printf_i>:
 800aa08:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800aa0c:	7e0f      	ldrb	r7, [r1, #24]
 800aa0e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800aa10:	2f78      	cmp	r7, #120	; 0x78
 800aa12:	4691      	mov	r9, r2
 800aa14:	4680      	mov	r8, r0
 800aa16:	460c      	mov	r4, r1
 800aa18:	469a      	mov	sl, r3
 800aa1a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800aa1e:	d807      	bhi.n	800aa30 <_printf_i+0x28>
 800aa20:	2f62      	cmp	r7, #98	; 0x62
 800aa22:	d80a      	bhi.n	800aa3a <_printf_i+0x32>
 800aa24:	2f00      	cmp	r7, #0
 800aa26:	f000 80d8 	beq.w	800abda <_printf_i+0x1d2>
 800aa2a:	2f58      	cmp	r7, #88	; 0x58
 800aa2c:	f000 80a3 	beq.w	800ab76 <_printf_i+0x16e>
 800aa30:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800aa34:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800aa38:	e03a      	b.n	800aab0 <_printf_i+0xa8>
 800aa3a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800aa3e:	2b15      	cmp	r3, #21
 800aa40:	d8f6      	bhi.n	800aa30 <_printf_i+0x28>
 800aa42:	a101      	add	r1, pc, #4	; (adr r1, 800aa48 <_printf_i+0x40>)
 800aa44:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800aa48:	0800aaa1 	.word	0x0800aaa1
 800aa4c:	0800aab5 	.word	0x0800aab5
 800aa50:	0800aa31 	.word	0x0800aa31
 800aa54:	0800aa31 	.word	0x0800aa31
 800aa58:	0800aa31 	.word	0x0800aa31
 800aa5c:	0800aa31 	.word	0x0800aa31
 800aa60:	0800aab5 	.word	0x0800aab5
 800aa64:	0800aa31 	.word	0x0800aa31
 800aa68:	0800aa31 	.word	0x0800aa31
 800aa6c:	0800aa31 	.word	0x0800aa31
 800aa70:	0800aa31 	.word	0x0800aa31
 800aa74:	0800abc1 	.word	0x0800abc1
 800aa78:	0800aae5 	.word	0x0800aae5
 800aa7c:	0800aba3 	.word	0x0800aba3
 800aa80:	0800aa31 	.word	0x0800aa31
 800aa84:	0800aa31 	.word	0x0800aa31
 800aa88:	0800abe3 	.word	0x0800abe3
 800aa8c:	0800aa31 	.word	0x0800aa31
 800aa90:	0800aae5 	.word	0x0800aae5
 800aa94:	0800aa31 	.word	0x0800aa31
 800aa98:	0800aa31 	.word	0x0800aa31
 800aa9c:	0800abab 	.word	0x0800abab
 800aaa0:	682b      	ldr	r3, [r5, #0]
 800aaa2:	1d1a      	adds	r2, r3, #4
 800aaa4:	681b      	ldr	r3, [r3, #0]
 800aaa6:	602a      	str	r2, [r5, #0]
 800aaa8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800aaac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800aab0:	2301      	movs	r3, #1
 800aab2:	e0a3      	b.n	800abfc <_printf_i+0x1f4>
 800aab4:	6820      	ldr	r0, [r4, #0]
 800aab6:	6829      	ldr	r1, [r5, #0]
 800aab8:	0606      	lsls	r6, r0, #24
 800aaba:	f101 0304 	add.w	r3, r1, #4
 800aabe:	d50a      	bpl.n	800aad6 <_printf_i+0xce>
 800aac0:	680e      	ldr	r6, [r1, #0]
 800aac2:	602b      	str	r3, [r5, #0]
 800aac4:	2e00      	cmp	r6, #0
 800aac6:	da03      	bge.n	800aad0 <_printf_i+0xc8>
 800aac8:	232d      	movs	r3, #45	; 0x2d
 800aaca:	4276      	negs	r6, r6
 800aacc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800aad0:	485e      	ldr	r0, [pc, #376]	; (800ac4c <_printf_i+0x244>)
 800aad2:	230a      	movs	r3, #10
 800aad4:	e019      	b.n	800ab0a <_printf_i+0x102>
 800aad6:	680e      	ldr	r6, [r1, #0]
 800aad8:	602b      	str	r3, [r5, #0]
 800aada:	f010 0f40 	tst.w	r0, #64	; 0x40
 800aade:	bf18      	it	ne
 800aae0:	b236      	sxthne	r6, r6
 800aae2:	e7ef      	b.n	800aac4 <_printf_i+0xbc>
 800aae4:	682b      	ldr	r3, [r5, #0]
 800aae6:	6820      	ldr	r0, [r4, #0]
 800aae8:	1d19      	adds	r1, r3, #4
 800aaea:	6029      	str	r1, [r5, #0]
 800aaec:	0601      	lsls	r1, r0, #24
 800aaee:	d501      	bpl.n	800aaf4 <_printf_i+0xec>
 800aaf0:	681e      	ldr	r6, [r3, #0]
 800aaf2:	e002      	b.n	800aafa <_printf_i+0xf2>
 800aaf4:	0646      	lsls	r6, r0, #25
 800aaf6:	d5fb      	bpl.n	800aaf0 <_printf_i+0xe8>
 800aaf8:	881e      	ldrh	r6, [r3, #0]
 800aafa:	4854      	ldr	r0, [pc, #336]	; (800ac4c <_printf_i+0x244>)
 800aafc:	2f6f      	cmp	r7, #111	; 0x6f
 800aafe:	bf0c      	ite	eq
 800ab00:	2308      	moveq	r3, #8
 800ab02:	230a      	movne	r3, #10
 800ab04:	2100      	movs	r1, #0
 800ab06:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ab0a:	6865      	ldr	r5, [r4, #4]
 800ab0c:	60a5      	str	r5, [r4, #8]
 800ab0e:	2d00      	cmp	r5, #0
 800ab10:	bfa2      	ittt	ge
 800ab12:	6821      	ldrge	r1, [r4, #0]
 800ab14:	f021 0104 	bicge.w	r1, r1, #4
 800ab18:	6021      	strge	r1, [r4, #0]
 800ab1a:	b90e      	cbnz	r6, 800ab20 <_printf_i+0x118>
 800ab1c:	2d00      	cmp	r5, #0
 800ab1e:	d04d      	beq.n	800abbc <_printf_i+0x1b4>
 800ab20:	4615      	mov	r5, r2
 800ab22:	fbb6 f1f3 	udiv	r1, r6, r3
 800ab26:	fb03 6711 	mls	r7, r3, r1, r6
 800ab2a:	5dc7      	ldrb	r7, [r0, r7]
 800ab2c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800ab30:	4637      	mov	r7, r6
 800ab32:	42bb      	cmp	r3, r7
 800ab34:	460e      	mov	r6, r1
 800ab36:	d9f4      	bls.n	800ab22 <_printf_i+0x11a>
 800ab38:	2b08      	cmp	r3, #8
 800ab3a:	d10b      	bne.n	800ab54 <_printf_i+0x14c>
 800ab3c:	6823      	ldr	r3, [r4, #0]
 800ab3e:	07de      	lsls	r6, r3, #31
 800ab40:	d508      	bpl.n	800ab54 <_printf_i+0x14c>
 800ab42:	6923      	ldr	r3, [r4, #16]
 800ab44:	6861      	ldr	r1, [r4, #4]
 800ab46:	4299      	cmp	r1, r3
 800ab48:	bfde      	ittt	le
 800ab4a:	2330      	movle	r3, #48	; 0x30
 800ab4c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ab50:	f105 35ff 	addle.w	r5, r5, #4294967295
 800ab54:	1b52      	subs	r2, r2, r5
 800ab56:	6122      	str	r2, [r4, #16]
 800ab58:	f8cd a000 	str.w	sl, [sp]
 800ab5c:	464b      	mov	r3, r9
 800ab5e:	aa03      	add	r2, sp, #12
 800ab60:	4621      	mov	r1, r4
 800ab62:	4640      	mov	r0, r8
 800ab64:	f7ff fee2 	bl	800a92c <_printf_common>
 800ab68:	3001      	adds	r0, #1
 800ab6a:	d14c      	bne.n	800ac06 <_printf_i+0x1fe>
 800ab6c:	f04f 30ff 	mov.w	r0, #4294967295
 800ab70:	b004      	add	sp, #16
 800ab72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ab76:	4835      	ldr	r0, [pc, #212]	; (800ac4c <_printf_i+0x244>)
 800ab78:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800ab7c:	6829      	ldr	r1, [r5, #0]
 800ab7e:	6823      	ldr	r3, [r4, #0]
 800ab80:	f851 6b04 	ldr.w	r6, [r1], #4
 800ab84:	6029      	str	r1, [r5, #0]
 800ab86:	061d      	lsls	r5, r3, #24
 800ab88:	d514      	bpl.n	800abb4 <_printf_i+0x1ac>
 800ab8a:	07df      	lsls	r7, r3, #31
 800ab8c:	bf44      	itt	mi
 800ab8e:	f043 0320 	orrmi.w	r3, r3, #32
 800ab92:	6023      	strmi	r3, [r4, #0]
 800ab94:	b91e      	cbnz	r6, 800ab9e <_printf_i+0x196>
 800ab96:	6823      	ldr	r3, [r4, #0]
 800ab98:	f023 0320 	bic.w	r3, r3, #32
 800ab9c:	6023      	str	r3, [r4, #0]
 800ab9e:	2310      	movs	r3, #16
 800aba0:	e7b0      	b.n	800ab04 <_printf_i+0xfc>
 800aba2:	6823      	ldr	r3, [r4, #0]
 800aba4:	f043 0320 	orr.w	r3, r3, #32
 800aba8:	6023      	str	r3, [r4, #0]
 800abaa:	2378      	movs	r3, #120	; 0x78
 800abac:	4828      	ldr	r0, [pc, #160]	; (800ac50 <_printf_i+0x248>)
 800abae:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800abb2:	e7e3      	b.n	800ab7c <_printf_i+0x174>
 800abb4:	0659      	lsls	r1, r3, #25
 800abb6:	bf48      	it	mi
 800abb8:	b2b6      	uxthmi	r6, r6
 800abba:	e7e6      	b.n	800ab8a <_printf_i+0x182>
 800abbc:	4615      	mov	r5, r2
 800abbe:	e7bb      	b.n	800ab38 <_printf_i+0x130>
 800abc0:	682b      	ldr	r3, [r5, #0]
 800abc2:	6826      	ldr	r6, [r4, #0]
 800abc4:	6961      	ldr	r1, [r4, #20]
 800abc6:	1d18      	adds	r0, r3, #4
 800abc8:	6028      	str	r0, [r5, #0]
 800abca:	0635      	lsls	r5, r6, #24
 800abcc:	681b      	ldr	r3, [r3, #0]
 800abce:	d501      	bpl.n	800abd4 <_printf_i+0x1cc>
 800abd0:	6019      	str	r1, [r3, #0]
 800abd2:	e002      	b.n	800abda <_printf_i+0x1d2>
 800abd4:	0670      	lsls	r0, r6, #25
 800abd6:	d5fb      	bpl.n	800abd0 <_printf_i+0x1c8>
 800abd8:	8019      	strh	r1, [r3, #0]
 800abda:	2300      	movs	r3, #0
 800abdc:	6123      	str	r3, [r4, #16]
 800abde:	4615      	mov	r5, r2
 800abe0:	e7ba      	b.n	800ab58 <_printf_i+0x150>
 800abe2:	682b      	ldr	r3, [r5, #0]
 800abe4:	1d1a      	adds	r2, r3, #4
 800abe6:	602a      	str	r2, [r5, #0]
 800abe8:	681d      	ldr	r5, [r3, #0]
 800abea:	6862      	ldr	r2, [r4, #4]
 800abec:	2100      	movs	r1, #0
 800abee:	4628      	mov	r0, r5
 800abf0:	f7f5 faf6 	bl	80001e0 <memchr>
 800abf4:	b108      	cbz	r0, 800abfa <_printf_i+0x1f2>
 800abf6:	1b40      	subs	r0, r0, r5
 800abf8:	6060      	str	r0, [r4, #4]
 800abfa:	6863      	ldr	r3, [r4, #4]
 800abfc:	6123      	str	r3, [r4, #16]
 800abfe:	2300      	movs	r3, #0
 800ac00:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ac04:	e7a8      	b.n	800ab58 <_printf_i+0x150>
 800ac06:	6923      	ldr	r3, [r4, #16]
 800ac08:	462a      	mov	r2, r5
 800ac0a:	4649      	mov	r1, r9
 800ac0c:	4640      	mov	r0, r8
 800ac0e:	47d0      	blx	sl
 800ac10:	3001      	adds	r0, #1
 800ac12:	d0ab      	beq.n	800ab6c <_printf_i+0x164>
 800ac14:	6823      	ldr	r3, [r4, #0]
 800ac16:	079b      	lsls	r3, r3, #30
 800ac18:	d413      	bmi.n	800ac42 <_printf_i+0x23a>
 800ac1a:	68e0      	ldr	r0, [r4, #12]
 800ac1c:	9b03      	ldr	r3, [sp, #12]
 800ac1e:	4298      	cmp	r0, r3
 800ac20:	bfb8      	it	lt
 800ac22:	4618      	movlt	r0, r3
 800ac24:	e7a4      	b.n	800ab70 <_printf_i+0x168>
 800ac26:	2301      	movs	r3, #1
 800ac28:	4632      	mov	r2, r6
 800ac2a:	4649      	mov	r1, r9
 800ac2c:	4640      	mov	r0, r8
 800ac2e:	47d0      	blx	sl
 800ac30:	3001      	adds	r0, #1
 800ac32:	d09b      	beq.n	800ab6c <_printf_i+0x164>
 800ac34:	3501      	adds	r5, #1
 800ac36:	68e3      	ldr	r3, [r4, #12]
 800ac38:	9903      	ldr	r1, [sp, #12]
 800ac3a:	1a5b      	subs	r3, r3, r1
 800ac3c:	42ab      	cmp	r3, r5
 800ac3e:	dcf2      	bgt.n	800ac26 <_printf_i+0x21e>
 800ac40:	e7eb      	b.n	800ac1a <_printf_i+0x212>
 800ac42:	2500      	movs	r5, #0
 800ac44:	f104 0619 	add.w	r6, r4, #25
 800ac48:	e7f5      	b.n	800ac36 <_printf_i+0x22e>
 800ac4a:	bf00      	nop
 800ac4c:	0800afa5 	.word	0x0800afa5
 800ac50:	0800afb6 	.word	0x0800afb6

0800ac54 <_sbrk_r>:
 800ac54:	b538      	push	{r3, r4, r5, lr}
 800ac56:	4d06      	ldr	r5, [pc, #24]	; (800ac70 <_sbrk_r+0x1c>)
 800ac58:	2300      	movs	r3, #0
 800ac5a:	4604      	mov	r4, r0
 800ac5c:	4608      	mov	r0, r1
 800ac5e:	602b      	str	r3, [r5, #0]
 800ac60:	f7f5 fed8 	bl	8000a14 <_sbrk>
 800ac64:	1c43      	adds	r3, r0, #1
 800ac66:	d102      	bne.n	800ac6e <_sbrk_r+0x1a>
 800ac68:	682b      	ldr	r3, [r5, #0]
 800ac6a:	b103      	cbz	r3, 800ac6e <_sbrk_r+0x1a>
 800ac6c:	6023      	str	r3, [r4, #0]
 800ac6e:	bd38      	pop	{r3, r4, r5, pc}
 800ac70:	20001958 	.word	0x20001958

0800ac74 <__sread>:
 800ac74:	b510      	push	{r4, lr}
 800ac76:	460c      	mov	r4, r1
 800ac78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ac7c:	f000 f8a0 	bl	800adc0 <_read_r>
 800ac80:	2800      	cmp	r0, #0
 800ac82:	bfab      	itete	ge
 800ac84:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ac86:	89a3      	ldrhlt	r3, [r4, #12]
 800ac88:	181b      	addge	r3, r3, r0
 800ac8a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ac8e:	bfac      	ite	ge
 800ac90:	6563      	strge	r3, [r4, #84]	; 0x54
 800ac92:	81a3      	strhlt	r3, [r4, #12]
 800ac94:	bd10      	pop	{r4, pc}

0800ac96 <__swrite>:
 800ac96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ac9a:	461f      	mov	r7, r3
 800ac9c:	898b      	ldrh	r3, [r1, #12]
 800ac9e:	05db      	lsls	r3, r3, #23
 800aca0:	4605      	mov	r5, r0
 800aca2:	460c      	mov	r4, r1
 800aca4:	4616      	mov	r6, r2
 800aca6:	d505      	bpl.n	800acb4 <__swrite+0x1e>
 800aca8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800acac:	2302      	movs	r3, #2
 800acae:	2200      	movs	r2, #0
 800acb0:	f000 f868 	bl	800ad84 <_lseek_r>
 800acb4:	89a3      	ldrh	r3, [r4, #12]
 800acb6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800acba:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800acbe:	81a3      	strh	r3, [r4, #12]
 800acc0:	4632      	mov	r2, r6
 800acc2:	463b      	mov	r3, r7
 800acc4:	4628      	mov	r0, r5
 800acc6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800acca:	f000 b817 	b.w	800acfc <_write_r>

0800acce <__sseek>:
 800acce:	b510      	push	{r4, lr}
 800acd0:	460c      	mov	r4, r1
 800acd2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800acd6:	f000 f855 	bl	800ad84 <_lseek_r>
 800acda:	1c43      	adds	r3, r0, #1
 800acdc:	89a3      	ldrh	r3, [r4, #12]
 800acde:	bf15      	itete	ne
 800ace0:	6560      	strne	r0, [r4, #84]	; 0x54
 800ace2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ace6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800acea:	81a3      	strheq	r3, [r4, #12]
 800acec:	bf18      	it	ne
 800acee:	81a3      	strhne	r3, [r4, #12]
 800acf0:	bd10      	pop	{r4, pc}

0800acf2 <__sclose>:
 800acf2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800acf6:	f000 b813 	b.w	800ad20 <_close_r>
	...

0800acfc <_write_r>:
 800acfc:	b538      	push	{r3, r4, r5, lr}
 800acfe:	4d07      	ldr	r5, [pc, #28]	; (800ad1c <_write_r+0x20>)
 800ad00:	4604      	mov	r4, r0
 800ad02:	4608      	mov	r0, r1
 800ad04:	4611      	mov	r1, r2
 800ad06:	2200      	movs	r2, #0
 800ad08:	602a      	str	r2, [r5, #0]
 800ad0a:	461a      	mov	r2, r3
 800ad0c:	f7f5 fe31 	bl	8000972 <_write>
 800ad10:	1c43      	adds	r3, r0, #1
 800ad12:	d102      	bne.n	800ad1a <_write_r+0x1e>
 800ad14:	682b      	ldr	r3, [r5, #0]
 800ad16:	b103      	cbz	r3, 800ad1a <_write_r+0x1e>
 800ad18:	6023      	str	r3, [r4, #0]
 800ad1a:	bd38      	pop	{r3, r4, r5, pc}
 800ad1c:	20001958 	.word	0x20001958

0800ad20 <_close_r>:
 800ad20:	b538      	push	{r3, r4, r5, lr}
 800ad22:	4d06      	ldr	r5, [pc, #24]	; (800ad3c <_close_r+0x1c>)
 800ad24:	2300      	movs	r3, #0
 800ad26:	4604      	mov	r4, r0
 800ad28:	4608      	mov	r0, r1
 800ad2a:	602b      	str	r3, [r5, #0]
 800ad2c:	f7f5 fe3d 	bl	80009aa <_close>
 800ad30:	1c43      	adds	r3, r0, #1
 800ad32:	d102      	bne.n	800ad3a <_close_r+0x1a>
 800ad34:	682b      	ldr	r3, [r5, #0]
 800ad36:	b103      	cbz	r3, 800ad3a <_close_r+0x1a>
 800ad38:	6023      	str	r3, [r4, #0]
 800ad3a:	bd38      	pop	{r3, r4, r5, pc}
 800ad3c:	20001958 	.word	0x20001958

0800ad40 <_fstat_r>:
 800ad40:	b538      	push	{r3, r4, r5, lr}
 800ad42:	4d07      	ldr	r5, [pc, #28]	; (800ad60 <_fstat_r+0x20>)
 800ad44:	2300      	movs	r3, #0
 800ad46:	4604      	mov	r4, r0
 800ad48:	4608      	mov	r0, r1
 800ad4a:	4611      	mov	r1, r2
 800ad4c:	602b      	str	r3, [r5, #0]
 800ad4e:	f7f5 fe38 	bl	80009c2 <_fstat>
 800ad52:	1c43      	adds	r3, r0, #1
 800ad54:	d102      	bne.n	800ad5c <_fstat_r+0x1c>
 800ad56:	682b      	ldr	r3, [r5, #0]
 800ad58:	b103      	cbz	r3, 800ad5c <_fstat_r+0x1c>
 800ad5a:	6023      	str	r3, [r4, #0]
 800ad5c:	bd38      	pop	{r3, r4, r5, pc}
 800ad5e:	bf00      	nop
 800ad60:	20001958 	.word	0x20001958

0800ad64 <_isatty_r>:
 800ad64:	b538      	push	{r3, r4, r5, lr}
 800ad66:	4d06      	ldr	r5, [pc, #24]	; (800ad80 <_isatty_r+0x1c>)
 800ad68:	2300      	movs	r3, #0
 800ad6a:	4604      	mov	r4, r0
 800ad6c:	4608      	mov	r0, r1
 800ad6e:	602b      	str	r3, [r5, #0]
 800ad70:	f7f5 fe37 	bl	80009e2 <_isatty>
 800ad74:	1c43      	adds	r3, r0, #1
 800ad76:	d102      	bne.n	800ad7e <_isatty_r+0x1a>
 800ad78:	682b      	ldr	r3, [r5, #0]
 800ad7a:	b103      	cbz	r3, 800ad7e <_isatty_r+0x1a>
 800ad7c:	6023      	str	r3, [r4, #0]
 800ad7e:	bd38      	pop	{r3, r4, r5, pc}
 800ad80:	20001958 	.word	0x20001958

0800ad84 <_lseek_r>:
 800ad84:	b538      	push	{r3, r4, r5, lr}
 800ad86:	4d07      	ldr	r5, [pc, #28]	; (800ada4 <_lseek_r+0x20>)
 800ad88:	4604      	mov	r4, r0
 800ad8a:	4608      	mov	r0, r1
 800ad8c:	4611      	mov	r1, r2
 800ad8e:	2200      	movs	r2, #0
 800ad90:	602a      	str	r2, [r5, #0]
 800ad92:	461a      	mov	r2, r3
 800ad94:	f7f5 fe30 	bl	80009f8 <_lseek>
 800ad98:	1c43      	adds	r3, r0, #1
 800ad9a:	d102      	bne.n	800ada2 <_lseek_r+0x1e>
 800ad9c:	682b      	ldr	r3, [r5, #0]
 800ad9e:	b103      	cbz	r3, 800ada2 <_lseek_r+0x1e>
 800ada0:	6023      	str	r3, [r4, #0]
 800ada2:	bd38      	pop	{r3, r4, r5, pc}
 800ada4:	20001958 	.word	0x20001958

0800ada8 <__malloc_lock>:
 800ada8:	4801      	ldr	r0, [pc, #4]	; (800adb0 <__malloc_lock+0x8>)
 800adaa:	f7ff bb1d 	b.w	800a3e8 <__retarget_lock_acquire_recursive>
 800adae:	bf00      	nop
 800adb0:	2000194c 	.word	0x2000194c

0800adb4 <__malloc_unlock>:
 800adb4:	4801      	ldr	r0, [pc, #4]	; (800adbc <__malloc_unlock+0x8>)
 800adb6:	f7ff bb18 	b.w	800a3ea <__retarget_lock_release_recursive>
 800adba:	bf00      	nop
 800adbc:	2000194c 	.word	0x2000194c

0800adc0 <_read_r>:
 800adc0:	b538      	push	{r3, r4, r5, lr}
 800adc2:	4d07      	ldr	r5, [pc, #28]	; (800ade0 <_read_r+0x20>)
 800adc4:	4604      	mov	r4, r0
 800adc6:	4608      	mov	r0, r1
 800adc8:	4611      	mov	r1, r2
 800adca:	2200      	movs	r2, #0
 800adcc:	602a      	str	r2, [r5, #0]
 800adce:	461a      	mov	r2, r3
 800add0:	f7f5 fdb2 	bl	8000938 <_read>
 800add4:	1c43      	adds	r3, r0, #1
 800add6:	d102      	bne.n	800adde <_read_r+0x1e>
 800add8:	682b      	ldr	r3, [r5, #0]
 800adda:	b103      	cbz	r3, 800adde <_read_r+0x1e>
 800addc:	6023      	str	r3, [r4, #0]
 800adde:	bd38      	pop	{r3, r4, r5, pc}
 800ade0:	20001958 	.word	0x20001958

0800ade4 <_init>:
 800ade4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ade6:	bf00      	nop
 800ade8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800adea:	bc08      	pop	{r3}
 800adec:	469e      	mov	lr, r3
 800adee:	4770      	bx	lr

0800adf0 <_fini>:
 800adf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800adf2:	bf00      	nop
 800adf4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800adf6:	bc08      	pop	{r3}
 800adf8:	469e      	mov	lr, r3
 800adfa:	4770      	bx	lr
