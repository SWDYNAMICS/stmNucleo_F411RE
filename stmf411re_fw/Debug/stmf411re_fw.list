
stmf411re_fw.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000091e0  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  08009378  08009378  00019378  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080093e0  080093e0  000201a8  2**0
                  CONTENTS
  4 .ARM          00000008  080093e0  080093e0  000193e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080093e8  080093e8  000201a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080093e8  080093e8  000193e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080093ec  080093ec  000193ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001a8  20000000  080093f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001618  200001a8  08009598  000201a8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200017c0  08009598  000217c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201a8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015e60  00000000  00000000  000201d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003f9b  00000000  00000000  00036038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001210  00000000  00000000  00039fd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001028  00000000  00000000  0003b1e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c552  00000000  00000000  0003c210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000204a5  00000000  00000000  00058762  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008fe85  00000000  00000000  00078c07  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00108a8c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004774  00000000  00000000  00108adc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	200001a8 	.word	0x200001a8
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08009360 	.word	0x08009360

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	200001ac 	.word	0x200001ac
 80001d4:	08009360 	.word	0x08009360

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b974 	b.w	80004d8 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468e      	mov	lr, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14d      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000216:	428a      	cmp	r2, r1
 8000218:	4694      	mov	ip, r2
 800021a:	d969      	bls.n	80002f0 <__udivmoddi4+0xe8>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b152      	cbz	r2, 8000238 <__udivmoddi4+0x30>
 8000222:	fa01 f302 	lsl.w	r3, r1, r2
 8000226:	f1c2 0120 	rsb	r1, r2, #32
 800022a:	fa20 f101 	lsr.w	r1, r0, r1
 800022e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000232:	ea41 0e03 	orr.w	lr, r1, r3
 8000236:	4094      	lsls	r4, r2
 8000238:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800023c:	0c21      	lsrs	r1, r4, #16
 800023e:	fbbe f6f8 	udiv	r6, lr, r8
 8000242:	fa1f f78c 	uxth.w	r7, ip
 8000246:	fb08 e316 	mls	r3, r8, r6, lr
 800024a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024e:	fb06 f107 	mul.w	r1, r6, r7
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f106 30ff 	add.w	r0, r6, #4294967295
 800025e:	f080 811f 	bcs.w	80004a0 <__udivmoddi4+0x298>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 811c 	bls.w	80004a0 <__udivmoddi4+0x298>
 8000268:	3e02      	subs	r6, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a5b      	subs	r3, r3, r1
 800026e:	b2a4      	uxth	r4, r4
 8000270:	fbb3 f0f8 	udiv	r0, r3, r8
 8000274:	fb08 3310 	mls	r3, r8, r0, r3
 8000278:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800027c:	fb00 f707 	mul.w	r7, r0, r7
 8000280:	42a7      	cmp	r7, r4
 8000282:	d90a      	bls.n	800029a <__udivmoddi4+0x92>
 8000284:	eb1c 0404 	adds.w	r4, ip, r4
 8000288:	f100 33ff 	add.w	r3, r0, #4294967295
 800028c:	f080 810a 	bcs.w	80004a4 <__udivmoddi4+0x29c>
 8000290:	42a7      	cmp	r7, r4
 8000292:	f240 8107 	bls.w	80004a4 <__udivmoddi4+0x29c>
 8000296:	4464      	add	r4, ip
 8000298:	3802      	subs	r0, #2
 800029a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800029e:	1be4      	subs	r4, r4, r7
 80002a0:	2600      	movs	r6, #0
 80002a2:	b11d      	cbz	r5, 80002ac <__udivmoddi4+0xa4>
 80002a4:	40d4      	lsrs	r4, r2
 80002a6:	2300      	movs	r3, #0
 80002a8:	e9c5 4300 	strd	r4, r3, [r5]
 80002ac:	4631      	mov	r1, r6
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d909      	bls.n	80002ca <__udivmoddi4+0xc2>
 80002b6:	2d00      	cmp	r5, #0
 80002b8:	f000 80ef 	beq.w	800049a <__udivmoddi4+0x292>
 80002bc:	2600      	movs	r6, #0
 80002be:	e9c5 0100 	strd	r0, r1, [r5]
 80002c2:	4630      	mov	r0, r6
 80002c4:	4631      	mov	r1, r6
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	fab3 f683 	clz	r6, r3
 80002ce:	2e00      	cmp	r6, #0
 80002d0:	d14a      	bne.n	8000368 <__udivmoddi4+0x160>
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xd4>
 80002d6:	4282      	cmp	r2, r0
 80002d8:	f200 80f9 	bhi.w	80004ce <__udivmoddi4+0x2c6>
 80002dc:	1a84      	subs	r4, r0, r2
 80002de:	eb61 0303 	sbc.w	r3, r1, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	469e      	mov	lr, r3
 80002e6:	2d00      	cmp	r5, #0
 80002e8:	d0e0      	beq.n	80002ac <__udivmoddi4+0xa4>
 80002ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80002ee:	e7dd      	b.n	80002ac <__udivmoddi4+0xa4>
 80002f0:	b902      	cbnz	r2, 80002f4 <__udivmoddi4+0xec>
 80002f2:	deff      	udf	#255	; 0xff
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	2a00      	cmp	r2, #0
 80002fa:	f040 8092 	bne.w	8000422 <__udivmoddi4+0x21a>
 80002fe:	eba1 010c 	sub.w	r1, r1, ip
 8000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000306:	fa1f fe8c 	uxth.w	lr, ip
 800030a:	2601      	movs	r6, #1
 800030c:	0c20      	lsrs	r0, r4, #16
 800030e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000312:	fb07 1113 	mls	r1, r7, r3, r1
 8000316:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800031a:	fb0e f003 	mul.w	r0, lr, r3
 800031e:	4288      	cmp	r0, r1
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x12c>
 8000322:	eb1c 0101 	adds.w	r1, ip, r1
 8000326:	f103 38ff 	add.w	r8, r3, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x12a>
 800032c:	4288      	cmp	r0, r1
 800032e:	f200 80cb 	bhi.w	80004c8 <__udivmoddi4+0x2c0>
 8000332:	4643      	mov	r3, r8
 8000334:	1a09      	subs	r1, r1, r0
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb1 f0f7 	udiv	r0, r1, r7
 800033c:	fb07 1110 	mls	r1, r7, r0, r1
 8000340:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000344:	fb0e fe00 	mul.w	lr, lr, r0
 8000348:	45a6      	cmp	lr, r4
 800034a:	d908      	bls.n	800035e <__udivmoddi4+0x156>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 31ff 	add.w	r1, r0, #4294967295
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x154>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f200 80bb 	bhi.w	80004d2 <__udivmoddi4+0x2ca>
 800035c:	4608      	mov	r0, r1
 800035e:	eba4 040e 	sub.w	r4, r4, lr
 8000362:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000366:	e79c      	b.n	80002a2 <__udivmoddi4+0x9a>
 8000368:	f1c6 0720 	rsb	r7, r6, #32
 800036c:	40b3      	lsls	r3, r6
 800036e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000372:	ea4c 0c03 	orr.w	ip, ip, r3
 8000376:	fa20 f407 	lsr.w	r4, r0, r7
 800037a:	fa01 f306 	lsl.w	r3, r1, r6
 800037e:	431c      	orrs	r4, r3
 8000380:	40f9      	lsrs	r1, r7
 8000382:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000386:	fa00 f306 	lsl.w	r3, r0, r6
 800038a:	fbb1 f8f9 	udiv	r8, r1, r9
 800038e:	0c20      	lsrs	r0, r4, #16
 8000390:	fa1f fe8c 	uxth.w	lr, ip
 8000394:	fb09 1118 	mls	r1, r9, r8, r1
 8000398:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800039c:	fb08 f00e 	mul.w	r0, r8, lr
 80003a0:	4288      	cmp	r0, r1
 80003a2:	fa02 f206 	lsl.w	r2, r2, r6
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b8>
 80003a8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b0:	f080 8088 	bcs.w	80004c4 <__udivmoddi4+0x2bc>
 80003b4:	4288      	cmp	r0, r1
 80003b6:	f240 8085 	bls.w	80004c4 <__udivmoddi4+0x2bc>
 80003ba:	f1a8 0802 	sub.w	r8, r8, #2
 80003be:	4461      	add	r1, ip
 80003c0:	1a09      	subs	r1, r1, r0
 80003c2:	b2a4      	uxth	r4, r4
 80003c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c8:	fb09 1110 	mls	r1, r9, r0, r1
 80003cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d4:	458e      	cmp	lr, r1
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1e2>
 80003d8:	eb1c 0101 	adds.w	r1, ip, r1
 80003dc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003e0:	d26c      	bcs.n	80004bc <__udivmoddi4+0x2b4>
 80003e2:	458e      	cmp	lr, r1
 80003e4:	d96a      	bls.n	80004bc <__udivmoddi4+0x2b4>
 80003e6:	3802      	subs	r0, #2
 80003e8:	4461      	add	r1, ip
 80003ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ee:	fba0 9402 	umull	r9, r4, r0, r2
 80003f2:	eba1 010e 	sub.w	r1, r1, lr
 80003f6:	42a1      	cmp	r1, r4
 80003f8:	46c8      	mov	r8, r9
 80003fa:	46a6      	mov	lr, r4
 80003fc:	d356      	bcc.n	80004ac <__udivmoddi4+0x2a4>
 80003fe:	d053      	beq.n	80004a8 <__udivmoddi4+0x2a0>
 8000400:	b15d      	cbz	r5, 800041a <__udivmoddi4+0x212>
 8000402:	ebb3 0208 	subs.w	r2, r3, r8
 8000406:	eb61 010e 	sbc.w	r1, r1, lr
 800040a:	fa01 f707 	lsl.w	r7, r1, r7
 800040e:	fa22 f306 	lsr.w	r3, r2, r6
 8000412:	40f1      	lsrs	r1, r6
 8000414:	431f      	orrs	r7, r3
 8000416:	e9c5 7100 	strd	r7, r1, [r5]
 800041a:	2600      	movs	r6, #0
 800041c:	4631      	mov	r1, r6
 800041e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000422:	f1c2 0320 	rsb	r3, r2, #32
 8000426:	40d8      	lsrs	r0, r3
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	fa21 f303 	lsr.w	r3, r1, r3
 8000430:	4091      	lsls	r1, r2
 8000432:	4301      	orrs	r1, r0
 8000434:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000440:	fb07 3610 	mls	r6, r7, r0, r3
 8000444:	0c0b      	lsrs	r3, r1, #16
 8000446:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800044a:	fb00 f60e 	mul.w	r6, r0, lr
 800044e:	429e      	cmp	r6, r3
 8000450:	fa04 f402 	lsl.w	r4, r4, r2
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x260>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 38ff 	add.w	r8, r0, #4294967295
 800045e:	d22f      	bcs.n	80004c0 <__udivmoddi4+0x2b8>
 8000460:	429e      	cmp	r6, r3
 8000462:	d92d      	bls.n	80004c0 <__udivmoddi4+0x2b8>
 8000464:	3802      	subs	r0, #2
 8000466:	4463      	add	r3, ip
 8000468:	1b9b      	subs	r3, r3, r6
 800046a:	b289      	uxth	r1, r1
 800046c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000470:	fb07 3316 	mls	r3, r7, r6, r3
 8000474:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000478:	fb06 f30e 	mul.w	r3, r6, lr
 800047c:	428b      	cmp	r3, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x28a>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f106 38ff 	add.w	r8, r6, #4294967295
 8000488:	d216      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 800048a:	428b      	cmp	r3, r1
 800048c:	d914      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800048e:	3e02      	subs	r6, #2
 8000490:	4461      	add	r1, ip
 8000492:	1ac9      	subs	r1, r1, r3
 8000494:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000498:	e738      	b.n	800030c <__udivmoddi4+0x104>
 800049a:	462e      	mov	r6, r5
 800049c:	4628      	mov	r0, r5
 800049e:	e705      	b.n	80002ac <__udivmoddi4+0xa4>
 80004a0:	4606      	mov	r6, r0
 80004a2:	e6e3      	b.n	800026c <__udivmoddi4+0x64>
 80004a4:	4618      	mov	r0, r3
 80004a6:	e6f8      	b.n	800029a <__udivmoddi4+0x92>
 80004a8:	454b      	cmp	r3, r9
 80004aa:	d2a9      	bcs.n	8000400 <__udivmoddi4+0x1f8>
 80004ac:	ebb9 0802 	subs.w	r8, r9, r2
 80004b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b4:	3801      	subs	r0, #1
 80004b6:	e7a3      	b.n	8000400 <__udivmoddi4+0x1f8>
 80004b8:	4646      	mov	r6, r8
 80004ba:	e7ea      	b.n	8000492 <__udivmoddi4+0x28a>
 80004bc:	4620      	mov	r0, r4
 80004be:	e794      	b.n	80003ea <__udivmoddi4+0x1e2>
 80004c0:	4640      	mov	r0, r8
 80004c2:	e7d1      	b.n	8000468 <__udivmoddi4+0x260>
 80004c4:	46d0      	mov	r8, sl
 80004c6:	e77b      	b.n	80003c0 <__udivmoddi4+0x1b8>
 80004c8:	3b02      	subs	r3, #2
 80004ca:	4461      	add	r1, ip
 80004cc:	e732      	b.n	8000334 <__udivmoddi4+0x12c>
 80004ce:	4630      	mov	r0, r6
 80004d0:	e709      	b.n	80002e6 <__udivmoddi4+0xde>
 80004d2:	4464      	add	r4, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e742      	b.n	800035e <__udivmoddi4+0x156>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <apInit>:
#include "qbuffer.h"



void apInit(void)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	af00      	add	r7, sp, #0
	uartOpen(_DEF_UART1, 57600);
 80004e0:	f44f 4161 	mov.w	r1, #57600	; 0xe100
 80004e4:	2000      	movs	r0, #0
 80004e6:	f000 fbc1 	bl	8000c6c <uartOpen>
	uartOpen(_DEF_UART2, 57600);
 80004ea:	f44f 4161 	mov.w	r1, #57600	; 0xe100
 80004ee:	2001      	movs	r0, #1
 80004f0:	f000 fbbc 	bl	8000c6c <uartOpen>
}
 80004f4:	bf00      	nop
 80004f6:	bd80      	pop	{r7, pc}

080004f8 <apMain>:

void apMain(void)
{
 80004f8:	b590      	push	{r4, r7, lr}
 80004fa:	b0a5      	sub	sp, #148	; 0x94
 80004fc:	af00      	add	r7, sp, #0
	uint32_t pre_time;
	uint8_t  rx_buf[128];
	uint32_t rx_len;

	pre_time = millis();
 80004fe:	f000 f8ca 	bl	8000696 <millis>
 8000502:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
	while (1)
	{
		if(millis() - pre_time >= 500)
 8000506:	f000 f8c6 	bl	8000696 <millis>
 800050a:	4602      	mov	r2, r0
 800050c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000510:	1ad3      	subs	r3, r2, r3
 8000512:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000516:	d306      	bcc.n	8000526 <apMain+0x2e>
		{
			pre_time = millis();
 8000518:	f000 f8bd 	bl	8000696 <millis>
 800051c:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
			ledToggle(_DEF_LED1);
 8000520:	2000      	movs	r0, #0
 8000522:	f000 fac5 	bl	8000ab0 <ledToggle>
		}
		if(uartGetBaud(_DEF_UART1) != uartGetBaud(_DEF_UART2))
 8000526:	2000      	movs	r0, #0
 8000528:	f000 fcb4 	bl	8000e94 <uartGetBaud>
 800052c:	4604      	mov	r4, r0
 800052e:	2001      	movs	r0, #1
 8000530:	f000 fcb0 	bl	8000e94 <uartGetBaud>
 8000534:	4603      	mov	r3, r0
 8000536:	429c      	cmp	r4, r3
 8000538:	d007      	beq.n	800054a <apMain+0x52>
		{
		  uartOpen(_DEF_UART2, uartGetBaud(_DEF_UART1));
 800053a:	2000      	movs	r0, #0
 800053c:	f000 fcaa 	bl	8000e94 <uartGetBaud>
 8000540:	4603      	mov	r3, r0
 8000542:	4619      	mov	r1, r3
 8000544:	2001      	movs	r0, #1
 8000546:	f000 fb91 	bl	8000c6c <uartOpen>
		}

		/*USB 2 UART*/
		rx_len= uartAvailable(_DEF_UART1);
 800054a:	2000      	movs	r0, #0
 800054c:	f000 fc26 	bl	8000d9c <uartAvailable>
 8000550:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
		if(rx_len > 128)
 8000554:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8000558:	2b80      	cmp	r3, #128	; 0x80
 800055a:	d902      	bls.n	8000562 <apMain+0x6a>
		{
		  rx_len = 128;
 800055c:	2380      	movs	r3, #128	; 0x80
 800055e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
		}
		if(rx_len > 0)
 8000562:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8000566:	2b00      	cmp	r3, #0
 8000568:	d020      	beq.n	80005ac <apMain+0xb4>
		{
		  for(int i=0; i<rx_len; i++)
 800056a:	2300      	movs	r3, #0
 800056c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8000570:	e00f      	b.n	8000592 <apMain+0x9a>
		  {
		    rx_buf[i] = uartRead(_DEF_UART1);
 8000572:	2000      	movs	r0, #0
 8000574:	f000 fc44 	bl	8000e00 <uartRead>
 8000578:	4603      	mov	r3, r0
 800057a:	4619      	mov	r1, r3
 800057c:	463a      	mov	r2, r7
 800057e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000582:	4413      	add	r3, r2
 8000584:	460a      	mov	r2, r1
 8000586:	701a      	strb	r2, [r3, #0]
		  for(int i=0; i<rx_len; i++)
 8000588:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800058c:	3301      	adds	r3, #1
 800058e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8000592:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000596:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800059a:	429a      	cmp	r2, r3
 800059c:	d8e9      	bhi.n	8000572 <apMain+0x7a>
		  }
		  uartWrite(_DEF_UART2, rx_buf, rx_len);
 800059e:	463b      	mov	r3, r7
 80005a0:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80005a4:	4619      	mov	r1, r3
 80005a6:	2001      	movs	r0, #1
 80005a8:	f000 fc4a 	bl	8000e40 <uartWrite>
		}


		/*UART 2 USB*/
		rx_len = uartAvailable(_DEF_UART2);
 80005ac:	2001      	movs	r0, #1
 80005ae:	f000 fbf5 	bl	8000d9c <uartAvailable>
 80005b2:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
		if(rx_len > 128)
 80005b6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80005ba:	2b80      	cmp	r3, #128	; 0x80
 80005bc:	d902      	bls.n	80005c4 <apMain+0xcc>
		{
		  rx_len = 128;
 80005be:	2380      	movs	r3, #128	; 0x80
 80005c0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
		}
		if(rx_len > 0)
 80005c4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d09c      	beq.n	8000506 <apMain+0xe>
		{
		  for(int i=0; i<rx_len; i++)
 80005cc:	2300      	movs	r3, #0
 80005ce:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80005d2:	e00f      	b.n	80005f4 <apMain+0xfc>
		  {
		    rx_buf[i] = uartRead(_DEF_UART2);
 80005d4:	2001      	movs	r0, #1
 80005d6:	f000 fc13 	bl	8000e00 <uartRead>
 80005da:	4603      	mov	r3, r0
 80005dc:	4619      	mov	r1, r3
 80005de:	463a      	mov	r2, r7
 80005e0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80005e4:	4413      	add	r3, r2
 80005e6:	460a      	mov	r2, r1
 80005e8:	701a      	strb	r2, [r3, #0]
		  for(int i=0; i<rx_len; i++)
 80005ea:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80005ee:	3301      	adds	r3, #1
 80005f0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80005f4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80005f8:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80005fc:	429a      	cmp	r2, r3
 80005fe:	d8e9      	bhi.n	80005d4 <apMain+0xdc>
		  }
		  uartWrite(_DEF_LED1, &rx_buf[0], rx_len);
 8000600:	463b      	mov	r3, r7
 8000602:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8000606:	4619      	mov	r1, r3
 8000608:	2000      	movs	r0, #0
 800060a:	f000 fc19 	bl	8000e40 <uartWrite>
		if(millis() - pre_time >= 500)
 800060e:	e77a      	b.n	8000506 <apMain+0xe>

08000610 <bspInit>:

#include "bsp.h"
void SystemClock_Config(void);

void bspInit(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b084      	sub	sp, #16
 8000614:	af00      	add	r7, sp, #0
  HAL_Init();
 8000616:	f000 fd61 	bl	80010dc <HAL_Init>
  SystemClock_Config();
 800061a:	f000 f843 	bl	80006a4 <SystemClock_Config>

  __HAL_RCC_GPIOC_CLK_ENABLE();
 800061e:	2300      	movs	r3, #0
 8000620:	60fb      	str	r3, [r7, #12]
 8000622:	4b16      	ldr	r3, [pc, #88]	; (800067c <bspInit+0x6c>)
 8000624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000626:	4a15      	ldr	r2, [pc, #84]	; (800067c <bspInit+0x6c>)
 8000628:	f043 0304 	orr.w	r3, r3, #4
 800062c:	6313      	str	r3, [r2, #48]	; 0x30
 800062e:	4b13      	ldr	r3, [pc, #76]	; (800067c <bspInit+0x6c>)
 8000630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000632:	f003 0304 	and.w	r3, r3, #4
 8000636:	60fb      	str	r3, [r7, #12]
 8000638:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800063a:	2300      	movs	r3, #0
 800063c:	60bb      	str	r3, [r7, #8]
 800063e:	4b0f      	ldr	r3, [pc, #60]	; (800067c <bspInit+0x6c>)
 8000640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000642:	4a0e      	ldr	r2, [pc, #56]	; (800067c <bspInit+0x6c>)
 8000644:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000648:	6313      	str	r3, [r2, #48]	; 0x30
 800064a:	4b0c      	ldr	r3, [pc, #48]	; (800067c <bspInit+0x6c>)
 800064c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800064e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000652:	60bb      	str	r3, [r7, #8]
 8000654:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000656:	2300      	movs	r3, #0
 8000658:	607b      	str	r3, [r7, #4]
 800065a:	4b08      	ldr	r3, [pc, #32]	; (800067c <bspInit+0x6c>)
 800065c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800065e:	4a07      	ldr	r2, [pc, #28]	; (800067c <bspInit+0x6c>)
 8000660:	f043 0301 	orr.w	r3, r3, #1
 8000664:	6313      	str	r3, [r2, #48]	; 0x30
 8000666:	4b05      	ldr	r3, [pc, #20]	; (800067c <bspInit+0x6c>)
 8000668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800066a:	f003 0301 	and.w	r3, r3, #1
 800066e:	607b      	str	r3, [r7, #4]
 8000670:	687b      	ldr	r3, [r7, #4]

}
 8000672:	bf00      	nop
 8000674:	3710      	adds	r7, #16
 8000676:	46bd      	mov	sp, r7
 8000678:	bd80      	pop	{r7, pc}
 800067a:	bf00      	nop
 800067c:	40023800 	.word	0x40023800

08000680 <delay>:
void delay(uint32_t ms)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b082      	sub	sp, #8
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]
  HAL_Delay(ms);
 8000688:	6878      	ldr	r0, [r7, #4]
 800068a:	f000 fd99 	bl	80011c0 <HAL_Delay>
}
 800068e:	bf00      	nop
 8000690:	3708      	adds	r7, #8
 8000692:	46bd      	mov	sp, r7
 8000694:	bd80      	pop	{r7, pc}

08000696 <millis>:
uint32_t millis(void)
{
 8000696:	b580      	push	{r7, lr}
 8000698:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800069a:	f000 fd85 	bl	80011a8 <HAL_GetTick>
 800069e:	4603      	mov	r3, r0
}
 80006a0:	4618      	mov	r0, r3
 80006a2:	bd80      	pop	{r7, pc}

080006a4 <SystemClock_Config>:




void SystemClock_Config(void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b094      	sub	sp, #80	; 0x50
 80006a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006aa:	f107 0320 	add.w	r3, r7, #32
 80006ae:	2230      	movs	r2, #48	; 0x30
 80006b0:	2100      	movs	r1, #0
 80006b2:	4618      	mov	r0, r3
 80006b4:	f008 fe4c 	bl	8009350 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006b8:	f107 030c 	add.w	r3, r7, #12
 80006bc:	2200      	movs	r2, #0
 80006be:	601a      	str	r2, [r3, #0]
 80006c0:	605a      	str	r2, [r3, #4]
 80006c2:	609a      	str	r2, [r3, #8]
 80006c4:	60da      	str	r2, [r3, #12]
 80006c6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006c8:	2300      	movs	r3, #0
 80006ca:	60bb      	str	r3, [r7, #8]
 80006cc:	4b28      	ldr	r3, [pc, #160]	; (8000770 <SystemClock_Config+0xcc>)
 80006ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006d0:	4a27      	ldr	r2, [pc, #156]	; (8000770 <SystemClock_Config+0xcc>)
 80006d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006d6:	6413      	str	r3, [r2, #64]	; 0x40
 80006d8:	4b25      	ldr	r3, [pc, #148]	; (8000770 <SystemClock_Config+0xcc>)
 80006da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006e0:	60bb      	str	r3, [r7, #8]
 80006e2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006e4:	2300      	movs	r3, #0
 80006e6:	607b      	str	r3, [r7, #4]
 80006e8:	4b22      	ldr	r3, [pc, #136]	; (8000774 <SystemClock_Config+0xd0>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	4a21      	ldr	r2, [pc, #132]	; (8000774 <SystemClock_Config+0xd0>)
 80006ee:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80006f2:	6013      	str	r3, [r2, #0]
 80006f4:	4b1f      	ldr	r3, [pc, #124]	; (8000774 <SystemClock_Config+0xd0>)
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006fc:	607b      	str	r3, [r7, #4]
 80006fe:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8000700:	2305      	movs	r3, #5
 8000702:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000704:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000708:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800070a:	2301      	movs	r3, #1
 800070c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800070e:	2302      	movs	r3, #2
 8000710:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000712:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000716:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000718:	2319      	movs	r3, #25
 800071a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 800071c:	23c0      	movs	r3, #192	; 0xc0
 800071e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000720:	2302      	movs	r3, #2
 8000722:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000724:	2304      	movs	r3, #4
 8000726:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000728:	f107 0320 	add.w	r3, r7, #32
 800072c:	4618      	mov	r0, r3
 800072e:	f002 ff2d 	bl	800358c <HAL_RCC_OscConfig>
 8000732:	4603      	mov	r3, r0
 8000734:	2b00      	cmp	r3, #0
 8000736:	d001      	beq.n	800073c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000738:	f000 f81e 	bl	8000778 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800073c:	230f      	movs	r3, #15
 800073e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000740:	2302      	movs	r3, #2
 8000742:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000744:	2300      	movs	r3, #0
 8000746:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000748:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800074c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800074e:	2300      	movs	r3, #0
 8000750:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000752:	f107 030c 	add.w	r3, r7, #12
 8000756:	2103      	movs	r1, #3
 8000758:	4618      	mov	r0, r3
 800075a:	f003 f98f 	bl	8003a7c <HAL_RCC_ClockConfig>
 800075e:	4603      	mov	r3, r0
 8000760:	2b00      	cmp	r3, #0
 8000762:	d001      	beq.n	8000768 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000764:	f000 f808 	bl	8000778 <Error_Handler>
  }
}
 8000768:	bf00      	nop
 800076a:	3750      	adds	r7, #80	; 0x50
 800076c:	46bd      	mov	sp, r7
 800076e:	bd80      	pop	{r7, pc}
 8000770:	40023800 	.word	0x40023800
 8000774:	40007000 	.word	0x40007000

08000778 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000778:	b480      	push	{r7}
 800077a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800077c:	b672      	cpsid	i
}
 800077e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000780:	e7fe      	b.n	8000780 <Error_Handler+0x8>
	...

08000784 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000784:	b480      	push	{r7}
 8000786:	b083      	sub	sp, #12
 8000788:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800078a:	2300      	movs	r3, #0
 800078c:	607b      	str	r3, [r7, #4]
 800078e:	4b10      	ldr	r3, [pc, #64]	; (80007d0 <HAL_MspInit+0x4c>)
 8000790:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000792:	4a0f      	ldr	r2, [pc, #60]	; (80007d0 <HAL_MspInit+0x4c>)
 8000794:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000798:	6453      	str	r3, [r2, #68]	; 0x44
 800079a:	4b0d      	ldr	r3, [pc, #52]	; (80007d0 <HAL_MspInit+0x4c>)
 800079c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800079e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007a2:	607b      	str	r3, [r7, #4]
 80007a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007a6:	2300      	movs	r3, #0
 80007a8:	603b      	str	r3, [r7, #0]
 80007aa:	4b09      	ldr	r3, [pc, #36]	; (80007d0 <HAL_MspInit+0x4c>)
 80007ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007ae:	4a08      	ldr	r2, [pc, #32]	; (80007d0 <HAL_MspInit+0x4c>)
 80007b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007b4:	6413      	str	r3, [r2, #64]	; 0x40
 80007b6:	4b06      	ldr	r3, [pc, #24]	; (80007d0 <HAL_MspInit+0x4c>)
 80007b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007be:	603b      	str	r3, [r7, #0]
 80007c0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007c2:	bf00      	nop
 80007c4:	370c      	adds	r7, #12
 80007c6:	46bd      	mov	sp, r7
 80007c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007cc:	4770      	bx	lr
 80007ce:	bf00      	nop
 80007d0:	40023800 	.word	0x40023800

080007d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007d4:	b480      	push	{r7}
 80007d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80007d8:	e7fe      	b.n	80007d8 <NMI_Handler+0x4>

080007da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007da:	b480      	push	{r7}
 80007dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007de:	e7fe      	b.n	80007de <HardFault_Handler+0x4>

080007e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007e0:	b480      	push	{r7}
 80007e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007e4:	e7fe      	b.n	80007e4 <MemManage_Handler+0x4>

080007e6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007e6:	b480      	push	{r7}
 80007e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007ea:	e7fe      	b.n	80007ea <BusFault_Handler+0x4>

080007ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007ec:	b480      	push	{r7}
 80007ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007f0:	e7fe      	b.n	80007f0 <UsageFault_Handler+0x4>

080007f2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007f2:	b480      	push	{r7}
 80007f4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007f6:	bf00      	nop
 80007f8:	46bd      	mov	sp, r7
 80007fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fe:	4770      	bx	lr

08000800 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000800:	b480      	push	{r7}
 8000802:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000804:	bf00      	nop
 8000806:	46bd      	mov	sp, r7
 8000808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800080c:	4770      	bx	lr

0800080e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800080e:	b480      	push	{r7}
 8000810:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000812:	bf00      	nop
 8000814:	46bd      	mov	sp, r7
 8000816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081a:	4770      	bx	lr

0800081c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000820:	f000 fcae 	bl	8001180 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000824:	bf00      	nop
 8000826:	bd80      	pop	{r7, pc}

08000828 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800082c:	4802      	ldr	r0, [pc, #8]	; (8000838 <USART1_IRQHandler+0x10>)
 800082e:	f003 fe4b 	bl	80044c8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000832:	bf00      	nop
 8000834:	bd80      	pop	{r7, pc}
 8000836:	bf00      	nop
 8000838:	200001e8 	.word	0x200001e8

0800083c <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000840:	4802      	ldr	r0, [pc, #8]	; (800084c <DMA2_Stream2_IRQHandler+0x10>)
 8000842:	f001 f81b 	bl	800187c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8000846:	bf00      	nop
 8000848:	bd80      	pop	{r7, pc}
 800084a:	bf00      	nop
 800084c:	2000022c 	.word	0x2000022c

08000850 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000854:	4802      	ldr	r0, [pc, #8]	; (8000860 <OTG_FS_IRQHandler+0x10>)
 8000856:	f001 fe66 	bl	8002526 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800085a:	bf00      	nop
 800085c:	bd80      	pop	{r7, pc}
 800085e:	bf00      	nop
 8000860:	20001198 	.word	0x20001198

08000864 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000864:	b480      	push	{r7}
 8000866:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000868:	4b06      	ldr	r3, [pc, #24]	; (8000884 <SystemInit+0x20>)
 800086a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800086e:	4a05      	ldr	r2, [pc, #20]	; (8000884 <SystemInit+0x20>)
 8000870:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000874:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000878:	bf00      	nop
 800087a:	46bd      	mov	sp, r7
 800087c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000880:	4770      	bx	lr
 8000882:	bf00      	nop
 8000884:	e000ed00 	.word	0xe000ed00

08000888 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000888:	f8df d034 	ldr.w	sp, [pc, #52]	; 80008c0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800088c:	480d      	ldr	r0, [pc, #52]	; (80008c4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800088e:	490e      	ldr	r1, [pc, #56]	; (80008c8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000890:	4a0e      	ldr	r2, [pc, #56]	; (80008cc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000892:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000894:	e002      	b.n	800089c <LoopCopyDataInit>

08000896 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000896:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000898:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800089a:	3304      	adds	r3, #4

0800089c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800089c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800089e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008a0:	d3f9      	bcc.n	8000896 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008a2:	4a0b      	ldr	r2, [pc, #44]	; (80008d0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80008a4:	4c0b      	ldr	r4, [pc, #44]	; (80008d4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80008a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008a8:	e001      	b.n	80008ae <LoopFillZerobss>

080008aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008ac:	3204      	adds	r2, #4

080008ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008b0:	d3fb      	bcc.n	80008aa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80008b2:	f7ff ffd7 	bl	8000864 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80008b6:	f008 fd27 	bl	8009308 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80008ba:	f008 fd19 	bl	80092f0 <main>
  bx  lr    
 80008be:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80008c0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80008c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008c8:	200001a8 	.word	0x200001a8
  ldr r2, =_sidata
 80008cc:	080093f0 	.word	0x080093f0
  ldr r2, =_sbss
 80008d0:	200001a8 	.word	0x200001a8
  ldr r4, =_ebss
 80008d4:	200017c0 	.word	0x200017c0

080008d8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80008d8:	e7fe      	b.n	80008d8 <ADC_IRQHandler>

080008da <qbufferCreate>:
{

}

bool qbufferCreate(qbuffer_t *p_node, uint8_t *p_buf, uint32_t length)
{
 80008da:	b480      	push	{r7}
 80008dc:	b087      	sub	sp, #28
 80008de:	af00      	add	r7, sp, #0
 80008e0:	60f8      	str	r0, [r7, #12]
 80008e2:	60b9      	str	r1, [r7, #8]
 80008e4:	607a      	str	r2, [r7, #4]
	/*Making buffer is index initializing */
	bool ret = true;
 80008e6:	2301      	movs	r3, #1
 80008e8:	75fb      	strb	r3, [r7, #23]

	p_node->in 		= 0;
 80008ea:	68fb      	ldr	r3, [r7, #12]
 80008ec:	2200      	movs	r2, #0
 80008ee:	601a      	str	r2, [r3, #0]
	p_node->out	  = 0;
 80008f0:	68fb      	ldr	r3, [r7, #12]
 80008f2:	2200      	movs	r2, #0
 80008f4:	605a      	str	r2, [r3, #4]
	p_node->len   = length;
 80008f6:	68fb      	ldr	r3, [r7, #12]
 80008f8:	687a      	ldr	r2, [r7, #4]
 80008fa:	609a      	str	r2, [r3, #8]
	p_node->p_buf = p_buf;
 80008fc:	68fb      	ldr	r3, [r7, #12]
 80008fe:	68ba      	ldr	r2, [r7, #8]
 8000900:	60da      	str	r2, [r3, #12]

	return ret;
 8000902:	7dfb      	ldrb	r3, [r7, #23]
}
 8000904:	4618      	mov	r0, r3
 8000906:	371c      	adds	r7, #28
 8000908:	46bd      	mov	sp, r7
 800090a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090e:	4770      	bx	lr

08000910 <qbufferRead>:
	return ret;
}

/* Read qbuffer and input to p_data. */
bool qbufferRead(qbuffer_t *p_node, uint8_t *p_data, uint32_t length)
{
 8000910:	b480      	push	{r7}
 8000912:	b087      	sub	sp, #28
 8000914:	af00      	add	r7, sp, #0
 8000916:	60f8      	str	r0, [r7, #12]
 8000918:	60b9      	str	r1, [r7, #8]
 800091a:	607a      	str	r2, [r7, #4]
	bool ret = true;
 800091c:	2301      	movs	r3, #1
 800091e:	75fb      	strb	r3, [r7, #23]
	for(int i = 0; i < length; i++)
 8000920:	2300      	movs	r3, #0
 8000922:	613b      	str	r3, [r7, #16]
 8000924:	e026      	b.n	8000974 <qbufferRead+0x64>
	{
		if(p_node->p_buf != NULL)
 8000926:	68fb      	ldr	r3, [r7, #12]
 8000928:	68db      	ldr	r3, [r3, #12]
 800092a:	2b00      	cmp	r3, #0
 800092c:	d009      	beq.n	8000942 <qbufferRead+0x32>
		{
			p_data[i] = p_node->p_buf[p_node->out];
 800092e:	68fb      	ldr	r3, [r7, #12]
 8000930:	68da      	ldr	r2, [r3, #12]
 8000932:	68fb      	ldr	r3, [r7, #12]
 8000934:	685b      	ldr	r3, [r3, #4]
 8000936:	441a      	add	r2, r3
 8000938:	693b      	ldr	r3, [r7, #16]
 800093a:	68b9      	ldr	r1, [r7, #8]
 800093c:	440b      	add	r3, r1
 800093e:	7812      	ldrb	r2, [r2, #0]
 8000940:	701a      	strb	r2, [r3, #0]
		}
		if(p_node->out != p_node->in)
 8000942:	68fb      	ldr	r3, [r7, #12]
 8000944:	685a      	ldr	r2, [r3, #4]
 8000946:	68fb      	ldr	r3, [r7, #12]
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	429a      	cmp	r2, r3
 800094c:	d00c      	beq.n	8000968 <qbufferRead+0x58>
		{
			/* index update */
			p_node->out = (p_node->out + 1) % p_node->len;
 800094e:	68fb      	ldr	r3, [r7, #12]
 8000950:	685b      	ldr	r3, [r3, #4]
 8000952:	3301      	adds	r3, #1
 8000954:	68fa      	ldr	r2, [r7, #12]
 8000956:	6892      	ldr	r2, [r2, #8]
 8000958:	fbb3 f1f2 	udiv	r1, r3, r2
 800095c:	fb01 f202 	mul.w	r2, r1, r2
 8000960:	1a9a      	subs	r2, r3, r2
 8000962:	68fb      	ldr	r3, [r7, #12]
 8000964:	605a      	str	r2, [r3, #4]
 8000966:	e002      	b.n	800096e <qbufferRead+0x5e>
		}
		else /*when in idx = out idx*/
		{
			ret = false;
 8000968:	2300      	movs	r3, #0
 800096a:	75fb      	strb	r3, [r7, #23]
			break;
 800096c:	e006      	b.n	800097c <qbufferRead+0x6c>
	for(int i = 0; i < length; i++)
 800096e:	693b      	ldr	r3, [r7, #16]
 8000970:	3301      	adds	r3, #1
 8000972:	613b      	str	r3, [r7, #16]
 8000974:	693b      	ldr	r3, [r7, #16]
 8000976:	687a      	ldr	r2, [r7, #4]
 8000978:	429a      	cmp	r2, r3
 800097a:	d8d4      	bhi.n	8000926 <qbufferRead+0x16>
		}
	}
	return ret;
 800097c:	7dfb      	ldrb	r3, [r7, #23]
}
 800097e:	4618      	mov	r0, r3
 8000980:	371c      	adds	r7, #28
 8000982:	46bd      	mov	sp, r7
 8000984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000988:	4770      	bx	lr

0800098a <qbufferAvailable>:

/*transmit struct pointer, receive current buffer's data number*/
uint32_t qbufferAvailable(qbuffer_t *p_node)
{
 800098a:	b480      	push	{r7}
 800098c:	b085      	sub	sp, #20
 800098e:	af00      	add	r7, sp, #0
 8000990:	6078      	str	r0, [r7, #4]
	uint32_t ret;

	ret = (p_node->len + p_node->in - p_node->out) % p_node->len;
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	689a      	ldr	r2, [r3, #8]
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	441a      	add	r2, r3
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	685b      	ldr	r3, [r3, #4]
 80009a0:	1ad3      	subs	r3, r2, r3
 80009a2:	687a      	ldr	r2, [r7, #4]
 80009a4:	6892      	ldr	r2, [r2, #8]
 80009a6:	fbb3 f1f2 	udiv	r1, r3, r2
 80009aa:	fb01 f202 	mul.w	r2, r1, r2
 80009ae:	1a9b      	subs	r3, r3, r2
 80009b0:	60fb      	str	r3, [r7, #12]

	return ret;
 80009b2:	68fb      	ldr	r3, [r7, #12]
}
 80009b4:	4618      	mov	r0, r3
 80009b6:	3714      	adds	r7, #20
 80009b8:	46bd      	mov	sp, r7
 80009ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009be:	4770      	bx	lr

080009c0 <ledInit>:
{
	{GPIOC, GPIO_PIN_13, GPIO_PIN_SET, GPIO_PIN_RESET}
};

bool ledInit(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b088      	sub	sp, #32
 80009c4:	af00      	add	r7, sp, #0
	bool ret = true;
 80009c6:	2301      	movs	r3, #1
 80009c8:	76fb      	strb	r3, [r7, #27]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009ca:	1d3b      	adds	r3, r7, #4
 80009cc:	2200      	movs	r2, #0
 80009ce:	601a      	str	r2, [r3, #0]
 80009d0:	605a      	str	r2, [r3, #4]
 80009d2:	609a      	str	r2, [r3, #8]
 80009d4:	60da      	str	r2, [r3, #12]
 80009d6:	611a      	str	r2, [r3, #16]

	__HAL_RCC_GPIOA_CLK_ENABLE();
 80009d8:	2300      	movs	r3, #0
 80009da:	603b      	str	r3, [r7, #0]
 80009dc:	4b1d      	ldr	r3, [pc, #116]	; (8000a54 <ledInit+0x94>)
 80009de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e0:	4a1c      	ldr	r2, [pc, #112]	; (8000a54 <ledInit+0x94>)
 80009e2:	f043 0301 	orr.w	r3, r3, #1
 80009e6:	6313      	str	r3, [r2, #48]	; 0x30
 80009e8:	4b1a      	ldr	r3, [pc, #104]	; (8000a54 <ledInit+0x94>)
 80009ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ec:	f003 0301 	and.w	r3, r3, #1
 80009f0:	603b      	str	r3, [r7, #0]
 80009f2:	683b      	ldr	r3, [r7, #0]

	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009f4:	2301      	movs	r3, #1
 80009f6:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f8:	2300      	movs	r3, #0
 80009fa:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009fc:	2300      	movs	r3, #0
 80009fe:	613b      	str	r3, [r7, #16]

	for(int i = 0; i < LED_MAX_CHANNEL; i++)
 8000a00:	2300      	movs	r3, #0
 8000a02:	61fb      	str	r3, [r7, #28]
 8000a04:	e01e      	b.n	8000a44 <ledInit+0x84>
	{
		ledOff(i);
 8000a06:	69fb      	ldr	r3, [r7, #28]
 8000a08:	b2db      	uxtb	r3, r3
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	f000 f826 	bl	8000a5c <ledOff>
		GPIO_InitStruct.Pin = led_tbl[i].pin;
 8000a10:	4911      	ldr	r1, [pc, #68]	; (8000a58 <ledInit+0x98>)
 8000a12:	69fa      	ldr	r2, [r7, #28]
 8000a14:	4613      	mov	r3, r2
 8000a16:	005b      	lsls	r3, r3, #1
 8000a18:	4413      	add	r3, r2
 8000a1a:	009b      	lsls	r3, r3, #2
 8000a1c:	440b      	add	r3, r1
 8000a1e:	3304      	adds	r3, #4
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	607b      	str	r3, [r7, #4]
		HAL_GPIO_Init(led_tbl[i].port, &GPIO_InitStruct);
 8000a24:	490c      	ldr	r1, [pc, #48]	; (8000a58 <ledInit+0x98>)
 8000a26:	69fa      	ldr	r2, [r7, #28]
 8000a28:	4613      	mov	r3, r2
 8000a2a:	005b      	lsls	r3, r3, #1
 8000a2c:	4413      	add	r3, r2
 8000a2e:	009b      	lsls	r3, r3, #2
 8000a30:	440b      	add	r3, r1
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	1d3a      	adds	r2, r7, #4
 8000a36:	4611      	mov	r1, r2
 8000a38:	4618      	mov	r0, r3
 8000a3a:	f001 f989 	bl	8001d50 <HAL_GPIO_Init>
	for(int i = 0; i < LED_MAX_CHANNEL; i++)
 8000a3e:	69fb      	ldr	r3, [r7, #28]
 8000a40:	3301      	adds	r3, #1
 8000a42:	61fb      	str	r3, [r7, #28]
 8000a44:	69fb      	ldr	r3, [r7, #28]
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	dddd      	ble.n	8000a06 <ledInit+0x46>
	}
	return ret;
 8000a4a:	7efb      	ldrb	r3, [r7, #27]
}
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	3720      	adds	r7, #32
 8000a50:	46bd      	mov	sp, r7
 8000a52:	bd80      	pop	{r7, pc}
 8000a54:	40023800 	.word	0x40023800
 8000a58:	20000004 	.word	0x20000004

08000a5c <ledOff>:
void ledOn(uint8_t ch)
{
	HAL_GPIO_WritePin(led_tbl[ch].port, led_tbl[ch].pin, led_tbl[ch].on_state);
}
void ledOff(uint8_t ch)
{
 8000a5c:	b590      	push	{r4, r7, lr}
 8000a5e:	b083      	sub	sp, #12
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	4603      	mov	r3, r0
 8000a64:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(led_tbl[ch].port, led_tbl[ch].pin, led_tbl[ch].off_state);
 8000a66:	79fa      	ldrb	r2, [r7, #7]
 8000a68:	4910      	ldr	r1, [pc, #64]	; (8000aac <ledOff+0x50>)
 8000a6a:	4613      	mov	r3, r2
 8000a6c:	005b      	lsls	r3, r3, #1
 8000a6e:	4413      	add	r3, r2
 8000a70:	009b      	lsls	r3, r3, #2
 8000a72:	440b      	add	r3, r1
 8000a74:	6818      	ldr	r0, [r3, #0]
 8000a76:	79fa      	ldrb	r2, [r7, #7]
 8000a78:	490c      	ldr	r1, [pc, #48]	; (8000aac <ledOff+0x50>)
 8000a7a:	4613      	mov	r3, r2
 8000a7c:	005b      	lsls	r3, r3, #1
 8000a7e:	4413      	add	r3, r2
 8000a80:	009b      	lsls	r3, r3, #2
 8000a82:	440b      	add	r3, r1
 8000a84:	3304      	adds	r3, #4
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	b299      	uxth	r1, r3
 8000a8a:	79fa      	ldrb	r2, [r7, #7]
 8000a8c:	4c07      	ldr	r4, [pc, #28]	; (8000aac <ledOff+0x50>)
 8000a8e:	4613      	mov	r3, r2
 8000a90:	005b      	lsls	r3, r3, #1
 8000a92:	4413      	add	r3, r2
 8000a94:	009b      	lsls	r3, r3, #2
 8000a96:	4423      	add	r3, r4
 8000a98:	3309      	adds	r3, #9
 8000a9a:	781b      	ldrb	r3, [r3, #0]
 8000a9c:	461a      	mov	r2, r3
 8000a9e:	f001 fbbf 	bl	8002220 <HAL_GPIO_WritePin>
}
 8000aa2:	bf00      	nop
 8000aa4:	370c      	adds	r7, #12
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bd90      	pop	{r4, r7, pc}
 8000aaa:	bf00      	nop
 8000aac:	20000004 	.word	0x20000004

08000ab0 <ledToggle>:
void ledToggle(uint8_t ch)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b082      	sub	sp, #8
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_TogglePin(led_tbl[ch].port, led_tbl[ch].pin);
 8000aba:	79fa      	ldrb	r2, [r7, #7]
 8000abc:	490b      	ldr	r1, [pc, #44]	; (8000aec <ledToggle+0x3c>)
 8000abe:	4613      	mov	r3, r2
 8000ac0:	005b      	lsls	r3, r3, #1
 8000ac2:	4413      	add	r3, r2
 8000ac4:	009b      	lsls	r3, r3, #2
 8000ac6:	440b      	add	r3, r1
 8000ac8:	6818      	ldr	r0, [r3, #0]
 8000aca:	79fa      	ldrb	r2, [r7, #7]
 8000acc:	4907      	ldr	r1, [pc, #28]	; (8000aec <ledToggle+0x3c>)
 8000ace:	4613      	mov	r3, r2
 8000ad0:	005b      	lsls	r3, r3, #1
 8000ad2:	4413      	add	r3, r2
 8000ad4:	009b      	lsls	r3, r3, #2
 8000ad6:	440b      	add	r3, r1
 8000ad8:	3304      	adds	r3, #4
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	b29b      	uxth	r3, r3
 8000ade:	4619      	mov	r1, r3
 8000ae0:	f001 fbb7 	bl	8002252 <HAL_GPIO_TogglePin>
}
 8000ae4:	bf00      	nop
 8000ae6:	3708      	adds	r7, #8
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	bd80      	pop	{r7, pc}
 8000aec:	20000004 	.word	0x20000004

08000af0 <resetInit>:
#include "rtc.h"

static uint32_t reset_count = 0;

bool resetInit(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b082      	sub	sp, #8
 8000af4:	af00      	add	r7, sp, #0
	bool ret = true;
 8000af6:	2301      	movs	r3, #1
 8000af8:	71fb      	strb	r3, [r7, #7]

	if(RCC->CSR & (1<<26))
 8000afa:	4b11      	ldr	r3, [pc, #68]	; (8000b40 <resetInit+0x50>)
 8000afc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000afe:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d013      	beq.n	8000b2e <resetInit+0x3e>
	{
		rtcBackupRegWrite(0, rtcBackupRegRead(0) + 1);
 8000b06:	2000      	movs	r0, #0
 8000b08:	f000 f85a 	bl	8000bc0 <rtcBackupRegRead>
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	3301      	adds	r3, #1
 8000b10:	4619      	mov	r1, r3
 8000b12:	2000      	movs	r0, #0
 8000b14:	f000 f844 	bl	8000ba0 <rtcBackupRegWrite>
		delay(500);
 8000b18:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000b1c:	f7ff fdb0 	bl	8000680 <delay>
		/* due to multiple input */
		reset_count = rtcBackupRegRead(0);
 8000b20:	2000      	movs	r0, #0
 8000b22:	f000 f84d 	bl	8000bc0 <rtcBackupRegRead>
 8000b26:	4603      	mov	r3, r0
 8000b28:	461a      	mov	r2, r3
 8000b2a:	4b06      	ldr	r3, [pc, #24]	; (8000b44 <resetInit+0x54>)
 8000b2c:	601a      	str	r2, [r3, #0]
		/* one count increase itself */
	}
	rtcBackupRegWrite(0, 0);
 8000b2e:	2100      	movs	r1, #0
 8000b30:	2000      	movs	r0, #0
 8000b32:	f000 f835 	bl	8000ba0 <rtcBackupRegWrite>
	return ret;
 8000b36:	79fb      	ldrb	r3, [r7, #7]
}
 8000b38:	4618      	mov	r0, r3
 8000b3a:	3708      	adds	r7, #8
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bd80      	pop	{r7, pc}
 8000b40:	40023800 	.word	0x40023800
 8000b44:	200001c4 	.word	0x200001c4

08000b48 <rtcInit>:
#include "rtc.h"

static RTC_HandleTypeDef hrtc;

bool rtcInit(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b082      	sub	sp, #8
 8000b4c:	af00      	add	r7, sp, #0
	bool ret = true;
 8000b4e:	2301      	movs	r3, #1
 8000b50:	71fb      	strb	r3, [r7, #7]
	// also need to enable GPIOC -> already declared on "bsp.c"
	hrtc.Instance 						= RTC;
 8000b52:	4b11      	ldr	r3, [pc, #68]	; (8000b98 <rtcInit+0x50>)
 8000b54:	4a11      	ldr	r2, [pc, #68]	; (8000b9c <rtcInit+0x54>)
 8000b56:	601a      	str	r2, [r3, #0]
	hrtc.Init.HourFormat 			= RTC_HOURFORMAT_24;
 8000b58:	4b0f      	ldr	r3, [pc, #60]	; (8000b98 <rtcInit+0x50>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	605a      	str	r2, [r3, #4]
	hrtc.Init.AsynchPrediv 		= 127;
 8000b5e:	4b0e      	ldr	r3, [pc, #56]	; (8000b98 <rtcInit+0x50>)
 8000b60:	227f      	movs	r2, #127	; 0x7f
 8000b62:	609a      	str	r2, [r3, #8]
	hrtc.Init.SynchPrediv 		= 255;
 8000b64:	4b0c      	ldr	r3, [pc, #48]	; (8000b98 <rtcInit+0x50>)
 8000b66:	22ff      	movs	r2, #255	; 0xff
 8000b68:	60da      	str	r2, [r3, #12]
	hrtc.Init.OutPut 					= RTC_OUTPUT_DISABLE;
 8000b6a:	4b0b      	ldr	r3, [pc, #44]	; (8000b98 <rtcInit+0x50>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	611a      	str	r2, [r3, #16]
	hrtc.Init.OutPutPolarity 	= RTC_OUTPUT_POLARITY_HIGH;
 8000b70:	4b09      	ldr	r3, [pc, #36]	; (8000b98 <rtcInit+0x50>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	615a      	str	r2, [r3, #20]
	hrtc.Init.OutPutType	    = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000b76:	4b08      	ldr	r3, [pc, #32]	; (8000b98 <rtcInit+0x50>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	619a      	str	r2, [r3, #24]
	if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000b7c:	4806      	ldr	r0, [pc, #24]	; (8000b98 <rtcInit+0x50>)
 8000b7e:	f003 fa4d 	bl	800401c <HAL_RTC_Init>
 8000b82:	4603      	mov	r3, r0
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d001      	beq.n	8000b8c <rtcInit+0x44>
	{
	Error_Handler();
 8000b88:	f7ff fdf6 	bl	8000778 <Error_Handler>
	}
	return ret;
 8000b8c:	79fb      	ldrb	r3, [r7, #7]
}
 8000b8e:	4618      	mov	r0, r3
 8000b90:	3708      	adds	r7, #8
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}
 8000b96:	bf00      	nop
 8000b98:	200001c8 	.word	0x200001c8
 8000b9c:	40002800 	.word	0x40002800

08000ba0 <rtcBackupRegWrite>:

void rtcBackupRegWrite(uint32_t index, uint32_t data)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b082      	sub	sp, #8
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
 8000ba8:	6039      	str	r1, [r7, #0]
	HAL_RTCEx_BKUPWrite(&hrtc, index, data);
 8000baa:	683a      	ldr	r2, [r7, #0]
 8000bac:	6879      	ldr	r1, [r7, #4]
 8000bae:	4803      	ldr	r0, [pc, #12]	; (8000bbc <rtcBackupRegWrite+0x1c>)
 8000bb0:	f003 fb19 	bl	80041e6 <HAL_RTCEx_BKUPWrite>
}
 8000bb4:	bf00      	nop
 8000bb6:	3708      	adds	r7, #8
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	bd80      	pop	{r7, pc}
 8000bbc:	200001c8 	.word	0x200001c8

08000bc0 <rtcBackupRegRead>:
uint32_t rtcBackupRegRead(uint32_t index)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b082      	sub	sp, #8
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
	return HAL_RTCEx_BKUPRead(&hrtc, index);
 8000bc8:	6879      	ldr	r1, [r7, #4]
 8000bca:	4804      	ldr	r0, [pc, #16]	; (8000bdc <rtcBackupRegRead+0x1c>)
 8000bcc:	f003 fb25 	bl	800421a <HAL_RTCEx_BKUPRead>
 8000bd0:	4603      	mov	r3, r0
}
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	3708      	adds	r7, #8
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	200001c8 	.word	0x200001c8

08000be0 <HAL_RTC_MspInit>:


void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b088      	sub	sp, #32
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000be8:	f107 0308 	add.w	r3, r7, #8
 8000bec:	2200      	movs	r2, #0
 8000bee:	601a      	str	r2, [r3, #0]
 8000bf0:	605a      	str	r2, [r3, #4]
 8000bf2:	609a      	str	r2, [r3, #8]
 8000bf4:	60da      	str	r2, [r3, #12]
 8000bf6:	611a      	str	r2, [r3, #16]
 8000bf8:	615a      	str	r2, [r3, #20]
  if(rtcHandle->Instance==RTC)
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	4a0c      	ldr	r2, [pc, #48]	; (8000c30 <HAL_RTC_MspInit+0x50>)
 8000c00:	4293      	cmp	r3, r2
 8000c02:	d111      	bne.n	8000c28 <HAL_RTC_MspInit+0x48>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000c04:	2302      	movs	r3, #2
 8000c06:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000c08:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c0c:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c0e:	f107 0308 	add.w	r3, r7, #8
 8000c12:	4618      	mov	r0, r3
 8000c14:	f003 f912 	bl	8003e3c <HAL_RCCEx_PeriphCLKConfig>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d001      	beq.n	8000c22 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8000c1e:	f7ff fdab 	bl	8000778 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000c22:	4b04      	ldr	r3, [pc, #16]	; (8000c34 <HAL_RTC_MspInit+0x54>)
 8000c24:	2201      	movs	r2, #1
 8000c26:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8000c28:	bf00      	nop
 8000c2a:	3720      	adds	r7, #32
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	bd80      	pop	{r7, pc}
 8000c30:	40002800 	.word	0x40002800
 8000c34:	42470e3c 	.word	0x42470e3c

08000c38 <uartInit>:
static qbuffer_t qbuffer[UART_MAX_CHANNEL];
static uint8_t rx_buf[256];
//static uint8_t rx_data[UART_MAX_CHANNEL];

bool uartInit(void)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	b083      	sub	sp, #12
 8000c3c:	af00      	add	r7, sp, #0
	for(int i = 0; i < UART_MAX_CHANNEL; i++)
 8000c3e:	2300      	movs	r3, #0
 8000c40:	607b      	str	r3, [r7, #4]
 8000c42:	e007      	b.n	8000c54 <uartInit+0x1c>
	{
		is_open[i] = false;
 8000c44:	4a08      	ldr	r2, [pc, #32]	; (8000c68 <uartInit+0x30>)
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	4413      	add	r3, r2
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < UART_MAX_CHANNEL; i++)
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	3301      	adds	r3, #1
 8000c52:	607b      	str	r3, [r7, #4]
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	2b01      	cmp	r3, #1
 8000c58:	ddf4      	ble.n	8000c44 <uartInit+0xc>
	}
	return false;
 8000c5a:	2300      	movs	r3, #0
}
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	370c      	adds	r7, #12
 8000c60:	46bd      	mov	sp, r7
 8000c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c66:	4770      	bx	lr
 8000c68:	2000028c 	.word	0x2000028c

08000c6c <uartOpen>:

bool uartOpen(uint8_t ch, uint32_t baud)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b084      	sub	sp, #16
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	4603      	mov	r3, r0
 8000c74:	6039      	str	r1, [r7, #0]
 8000c76:	71fb      	strb	r3, [r7, #7]
	bool ret = false;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	73fb      	strb	r3, [r7, #15]

	switch(ch)
 8000c7c:	79fb      	ldrb	r3, [r7, #7]
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d002      	beq.n	8000c88 <uartOpen+0x1c>
 8000c82:	2b01      	cmp	r3, #1
 8000c84:	d007      	beq.n	8000c96 <uartOpen+0x2a>
 8000c86:	e076      	b.n	8000d76 <uartOpen+0x10a>
	{
		case _DEF_UART1:
			is_open[ch] = true;
 8000c88:	79fb      	ldrb	r3, [r7, #7]
 8000c8a:	4a3d      	ldr	r2, [pc, #244]	; (8000d80 <uartOpen+0x114>)
 8000c8c:	2101      	movs	r1, #1
 8000c8e:	54d1      	strb	r1, [r2, r3]
			ret = true;
 8000c90:	2301      	movs	r3, #1
 8000c92:	73fb      	strb	r3, [r7, #15]
			break;
 8000c94:	e06f      	b.n	8000d76 <uartOpen+0x10a>

		case _DEF_UART2:
			huart1.Instance 					= USART1;
 8000c96:	4b3b      	ldr	r3, [pc, #236]	; (8000d84 <uartOpen+0x118>)
 8000c98:	4a3b      	ldr	r2, [pc, #236]	; (8000d88 <uartOpen+0x11c>)
 8000c9a:	601a      	str	r2, [r3, #0]
			huart1.Init.BaudRate 			= baud;
 8000c9c:	4a39      	ldr	r2, [pc, #228]	; (8000d84 <uartOpen+0x118>)
 8000c9e:	683b      	ldr	r3, [r7, #0]
 8000ca0:	6053      	str	r3, [r2, #4]
			huart1.Init.WordLength		= UART_WORDLENGTH_8B;
 8000ca2:	4b38      	ldr	r3, [pc, #224]	; (8000d84 <uartOpen+0x118>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	609a      	str	r2, [r3, #8]
			huart1.Init.StopBits 			= UART_STOPBITS_1;
 8000ca8:	4b36      	ldr	r3, [pc, #216]	; (8000d84 <uartOpen+0x118>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	60da      	str	r2, [r3, #12]
			huart1.Init.Parity 				= UART_PARITY_NONE;
 8000cae:	4b35      	ldr	r3, [pc, #212]	; (8000d84 <uartOpen+0x118>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	611a      	str	r2, [r3, #16]
			huart1.Init.Mode 					= UART_MODE_TX_RX;
 8000cb4:	4b33      	ldr	r3, [pc, #204]	; (8000d84 <uartOpen+0x118>)
 8000cb6:	220c      	movs	r2, #12
 8000cb8:	615a      	str	r2, [r3, #20]
			huart1.Init.HwFlowCtl 		= UART_HWCONTROL_NONE;
 8000cba:	4b32      	ldr	r3, [pc, #200]	; (8000d84 <uartOpen+0x118>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	619a      	str	r2, [r3, #24]
			huart1.Init.OverSampling 	= UART_OVERSAMPLING_16;
 8000cc0:	4b30      	ldr	r3, [pc, #192]	; (8000d84 <uartOpen+0x118>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	61da      	str	r2, [r3, #28]

			HAL_UART_DeInit(&huart1);
 8000cc6:	482f      	ldr	r0, [pc, #188]	; (8000d84 <uartOpen+0x118>)
 8000cc8:	f003 fb0c 	bl	80042e4 <HAL_UART_DeInit>

			qbufferCreate(&qbuffer[ch], &rx_buf[0], 256);
 8000ccc:	79fb      	ldrb	r3, [r7, #7]
 8000cce:	011b      	lsls	r3, r3, #4
 8000cd0:	4a2e      	ldr	r2, [pc, #184]	; (8000d8c <uartOpen+0x120>)
 8000cd2:	4413      	add	r3, r2
 8000cd4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000cd8:	492d      	ldr	r1, [pc, #180]	; (8000d90 <uartOpen+0x124>)
 8000cda:	4618      	mov	r0, r3
 8000cdc:	f7ff fdfd 	bl	80008da <qbufferCreate>

      __HAL_RCC_DMA2_CLK_ENABLE();
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	60bb      	str	r3, [r7, #8]
 8000ce4:	4b2b      	ldr	r3, [pc, #172]	; (8000d94 <uartOpen+0x128>)
 8000ce6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ce8:	4a2a      	ldr	r2, [pc, #168]	; (8000d94 <uartOpen+0x128>)
 8000cea:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000cee:	6313      	str	r3, [r2, #48]	; 0x30
 8000cf0:	4b28      	ldr	r3, [pc, #160]	; (8000d94 <uartOpen+0x128>)
 8000cf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cf4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000cf8:	60bb      	str	r3, [r7, #8]
 8000cfa:	68bb      	ldr	r3, [r7, #8]
      HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	2100      	movs	r1, #0
 8000d00:	203a      	movs	r0, #58	; 0x3a
 8000d02:	f000 fb80 	bl	8001406 <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8000d06:	203a      	movs	r0, #58	; 0x3a
 8000d08:	f000 fb99 	bl	800143e <HAL_NVIC_EnableIRQ>

			if (HAL_UART_Init(&huart1) != HAL_OK)
 8000d0c:	481d      	ldr	r0, [pc, #116]	; (8000d84 <uartOpen+0x118>)
 8000d0e:	f003 fa9c 	bl	800424a <HAL_UART_Init>
 8000d12:	4603      	mov	r3, r0
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d002      	beq.n	8000d1e <uartOpen+0xb2>
			{
				ret = false;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	73fb      	strb	r3, [r7, #15]
				}
				/* FLUSH */
				qbuffer[ch].in  = qbuffer[ch].len - hdma_usart1_rx.Instance->NDTR;
				qbuffer[ch].out = qbuffer[ch].in;
			}
			break;
 8000d1c:	e02a      	b.n	8000d74 <uartOpen+0x108>
				ret = true;
 8000d1e:	2301      	movs	r3, #1
 8000d20:	73fb      	strb	r3, [r7, #15]
				is_open[ch] = true;
 8000d22:	79fb      	ldrb	r3, [r7, #7]
 8000d24:	4a16      	ldr	r2, [pc, #88]	; (8000d80 <uartOpen+0x114>)
 8000d26:	2101      	movs	r1, #1
 8000d28:	54d1      	strb	r1, [r2, r3]
				if(HAL_UART_Receive_DMA(&huart1, (uint8_t *)&rx_buf[0], 256) != HAL_OK)
 8000d2a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d2e:	4918      	ldr	r1, [pc, #96]	; (8000d90 <uartOpen+0x124>)
 8000d30:	4814      	ldr	r0, [pc, #80]	; (8000d84 <uartOpen+0x118>)
 8000d32:	f003 fb98 	bl	8004466 <HAL_UART_Receive_DMA>
 8000d36:	4603      	mov	r3, r0
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d001      	beq.n	8000d40 <uartOpen+0xd4>
				  ret = false;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	73fb      	strb	r3, [r7, #15]
				qbuffer[ch].in  = qbuffer[ch].len - hdma_usart1_rx.Instance->NDTR;
 8000d40:	79fb      	ldrb	r3, [r7, #7]
 8000d42:	4a12      	ldr	r2, [pc, #72]	; (8000d8c <uartOpen+0x120>)
 8000d44:	011b      	lsls	r3, r3, #4
 8000d46:	4413      	add	r3, r2
 8000d48:	3308      	adds	r3, #8
 8000d4a:	6819      	ldr	r1, [r3, #0]
 8000d4c:	4b12      	ldr	r3, [pc, #72]	; (8000d98 <uartOpen+0x12c>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	685a      	ldr	r2, [r3, #4]
 8000d52:	79fb      	ldrb	r3, [r7, #7]
 8000d54:	1a8a      	subs	r2, r1, r2
 8000d56:	490d      	ldr	r1, [pc, #52]	; (8000d8c <uartOpen+0x120>)
 8000d58:	011b      	lsls	r3, r3, #4
 8000d5a:	440b      	add	r3, r1
 8000d5c:	601a      	str	r2, [r3, #0]
				qbuffer[ch].out = qbuffer[ch].in;
 8000d5e:	79fa      	ldrb	r2, [r7, #7]
 8000d60:	79fb      	ldrb	r3, [r7, #7]
 8000d62:	490a      	ldr	r1, [pc, #40]	; (8000d8c <uartOpen+0x120>)
 8000d64:	0112      	lsls	r2, r2, #4
 8000d66:	440a      	add	r2, r1
 8000d68:	6812      	ldr	r2, [r2, #0]
 8000d6a:	4908      	ldr	r1, [pc, #32]	; (8000d8c <uartOpen+0x120>)
 8000d6c:	011b      	lsls	r3, r3, #4
 8000d6e:	440b      	add	r3, r1
 8000d70:	3304      	adds	r3, #4
 8000d72:	601a      	str	r2, [r3, #0]
			break;
 8000d74:	bf00      	nop
	}

	return ret;
 8000d76:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d78:	4618      	mov	r0, r3
 8000d7a:	3710      	adds	r7, #16
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	bd80      	pop	{r7, pc}
 8000d80:	2000028c 	.word	0x2000028c
 8000d84:	200001e8 	.word	0x200001e8
 8000d88:	40011000 	.word	0x40011000
 8000d8c:	20000290 	.word	0x20000290
 8000d90:	200002b0 	.word	0x200002b0
 8000d94:	40023800 	.word	0x40023800
 8000d98:	2000022c 	.word	0x2000022c

08000d9c <uartAvailable>:
uint32_t uartAvailable(uint8_t ch)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b084      	sub	sp, #16
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	4603      	mov	r3, r0
 8000da4:	71fb      	strb	r3, [r7, #7]
	uint32_t ret = 0;
 8000da6:	2300      	movs	r3, #0
 8000da8:	60fb      	str	r3, [r7, #12]


	switch(ch)
 8000daa:	79fb      	ldrb	r3, [r7, #7]
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d002      	beq.n	8000db6 <uartAvailable+0x1a>
 8000db0:	2b01      	cmp	r3, #1
 8000db2:	d004      	beq.n	8000dbe <uartAvailable+0x22>
 8000db4:	e01b      	b.n	8000dee <uartAvailable+0x52>
	{
		case _DEF_UART1: // 첫번째 채널 uart -> 1. cdc 추
			ret = cdcAvailable();
 8000db6:	f007 fca5 	bl	8008704 <cdcAvailable>
 8000dba:	60f8      	str	r0, [r7, #12]
			break;
 8000dbc:	e017      	b.n	8000dee <uartAvailable+0x52>
		case _DEF_UART2:
		  qbuffer[ch].in = qbuffer[ch].len - hdma_usart1_rx.Instance->NDTR;
 8000dbe:	79fb      	ldrb	r3, [r7, #7]
 8000dc0:	4a0d      	ldr	r2, [pc, #52]	; (8000df8 <uartAvailable+0x5c>)
 8000dc2:	011b      	lsls	r3, r3, #4
 8000dc4:	4413      	add	r3, r2
 8000dc6:	3308      	adds	r3, #8
 8000dc8:	6819      	ldr	r1, [r3, #0]
 8000dca:	4b0c      	ldr	r3, [pc, #48]	; (8000dfc <uartAvailable+0x60>)
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	685a      	ldr	r2, [r3, #4]
 8000dd0:	79fb      	ldrb	r3, [r7, #7]
 8000dd2:	1a8a      	subs	r2, r1, r2
 8000dd4:	4908      	ldr	r1, [pc, #32]	; (8000df8 <uartAvailable+0x5c>)
 8000dd6:	011b      	lsls	r3, r3, #4
 8000dd8:	440b      	add	r3, r1
 8000dda:	601a      	str	r2, [r3, #0]
		  ret = qbufferAvailable(&qbuffer[ch]);
 8000ddc:	79fb      	ldrb	r3, [r7, #7]
 8000dde:	011b      	lsls	r3, r3, #4
 8000de0:	4a05      	ldr	r2, [pc, #20]	; (8000df8 <uartAvailable+0x5c>)
 8000de2:	4413      	add	r3, r2
 8000de4:	4618      	mov	r0, r3
 8000de6:	f7ff fdd0 	bl	800098a <qbufferAvailable>
 8000dea:	60f8      	str	r0, [r7, #12]
		  break;
 8000dec:	bf00      	nop
	}

	return ret;
 8000dee:	68fb      	ldr	r3, [r7, #12]
}
 8000df0:	4618      	mov	r0, r3
 8000df2:	3710      	adds	r7, #16
 8000df4:	46bd      	mov	sp, r7
 8000df6:	bd80      	pop	{r7, pc}
 8000df8:	20000290 	.word	0x20000290
 8000dfc:	2000022c 	.word	0x2000022c

08000e00 <uartRead>:
uint8_t uartRead(uint8_t ch)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b084      	sub	sp, #16
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	4603      	mov	r3, r0
 8000e08:	71fb      	strb	r3, [r7, #7]
	uint8_t ret;

	switch(ch)
 8000e0a:	79fb      	ldrb	r3, [r7, #7]
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d002      	beq.n	8000e16 <uartRead+0x16>
 8000e10:	2b01      	cmp	r3, #1
 8000e12:	d005      	beq.n	8000e20 <uartRead+0x20>
 8000e14:	e00c      	b.n	8000e30 <uartRead+0x30>
	{
		case _DEF_UART1:
			ret = cdcRead();
 8000e16:	f007 fc93 	bl	8008740 <cdcRead>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	73fb      	strb	r3, [r7, #15]
			break;
 8000e1e:	e007      	b.n	8000e30 <uartRead+0x30>
		case _DEF_UART2:
		  qbufferRead(&qbuffer[_DEF_UART2], &ret, 1);
 8000e20:	f107 030f 	add.w	r3, r7, #15
 8000e24:	2201      	movs	r2, #1
 8000e26:	4619      	mov	r1, r3
 8000e28:	4804      	ldr	r0, [pc, #16]	; (8000e3c <uartRead+0x3c>)
 8000e2a:	f7ff fd71 	bl	8000910 <qbufferRead>
		  break;
 8000e2e:	bf00      	nop
	}

	return ret;
 8000e30:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e32:	4618      	mov	r0, r3
 8000e34:	3710      	adds	r7, #16
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bd80      	pop	{r7, pc}
 8000e3a:	bf00      	nop
 8000e3c:	200002a0 	.word	0x200002a0

08000e40 <uartWrite>:
uint32_t uartWrite(uint8_t ch, uint8_t *pData, uint32_t length)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b086      	sub	sp, #24
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	4603      	mov	r3, r0
 8000e48:	60b9      	str	r1, [r7, #8]
 8000e4a:	607a      	str	r2, [r7, #4]
 8000e4c:	73fb      	strb	r3, [r7, #15]
	uint32_t ret;
	HAL_StatusTypeDef status;

	switch(ch)
 8000e4e:	7bfb      	ldrb	r3, [r7, #15]
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d002      	beq.n	8000e5a <uartWrite+0x1a>
 8000e54:	2b01      	cmp	r3, #1
 8000e56:	d006      	beq.n	8000e66 <uartWrite+0x26>
 8000e58:	e014      	b.n	8000e84 <uartWrite+0x44>
		{
			case _DEF_UART1:
				ret = cdcWrite(pData, length);
 8000e5a:	6879      	ldr	r1, [r7, #4]
 8000e5c:	68b8      	ldr	r0, [r7, #8]
 8000e5e:	f007 fcc5 	bl	80087ec <cdcWrite>
 8000e62:	6178      	str	r0, [r7, #20]
				break;
 8000e64:	e00e      	b.n	8000e84 <uartWrite+0x44>

			case _DEF_UART2:
				status = HAL_UART_Transmit(&huart1, pData, length, 100);
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	b29a      	uxth	r2, r3
 8000e6a:	2364      	movs	r3, #100	; 0x64
 8000e6c:	68b9      	ldr	r1, [r7, #8]
 8000e6e:	4808      	ldr	r0, [pc, #32]	; (8000e90 <uartWrite+0x50>)
 8000e70:	f003 fa67 	bl	8004342 <HAL_UART_Transmit>
 8000e74:	4603      	mov	r3, r0
 8000e76:	74fb      	strb	r3, [r7, #19]
				if(status == HAL_OK)
 8000e78:	7cfb      	ldrb	r3, [r7, #19]
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d101      	bne.n	8000e82 <uartWrite+0x42>
				{
					ret = length;
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	617b      	str	r3, [r7, #20]
				}
				break;
 8000e82:	bf00      	nop
		}

	return ret;
 8000e84:	697b      	ldr	r3, [r7, #20]
}
 8000e86:	4618      	mov	r0, r3
 8000e88:	3718      	adds	r7, #24
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bd80      	pop	{r7, pc}
 8000e8e:	bf00      	nop
 8000e90:	200001e8 	.word	0x200001e8

08000e94 <uartGetBaud>:
	va_end(args);

	return ret;
}
uint32_t uartGetBaud(uint8_t ch)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b084      	sub	sp, #16
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	71fb      	strb	r3, [r7, #7]
	//bridge mode make, real uart need to know baudrate
	uint32_t ret = 0;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	60fb      	str	r3, [r7, #12]
	switch(ch)
 8000ea2:	79fb      	ldrb	r3, [r7, #7]
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d002      	beq.n	8000eae <uartGetBaud+0x1a>
 8000ea8:	2b01      	cmp	r3, #1
 8000eaa:	d004      	beq.n	8000eb6 <uartGetBaud+0x22>
 8000eac:	e007      	b.n	8000ebe <uartGetBaud+0x2a>
	{
		case _DEF_UART1:
			ret = cdcGetBaud();
 8000eae:	f007 fcc5 	bl	800883c <cdcGetBaud>
 8000eb2:	60f8      	str	r0, [r7, #12]
			break;
 8000eb4:	e003      	b.n	8000ebe <uartGetBaud+0x2a>
		case _DEF_UART2:
		  ret = huart1.Init.BaudRate;
 8000eb6:	4b04      	ldr	r3, [pc, #16]	; (8000ec8 <uartGetBaud+0x34>)
 8000eb8:	685b      	ldr	r3, [r3, #4]
 8000eba:	60fb      	str	r3, [r7, #12]
		  break;
 8000ebc:	bf00      	nop
	}
	return ret;
 8000ebe:	68fb      	ldr	r3, [r7, #12]
}
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	3710      	adds	r7, #16
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bd80      	pop	{r7, pc}
 8000ec8:	200001e8 	.word	0x200001e8

08000ecc <HAL_UART_ErrorCallback>:




void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	b083      	sub	sp, #12
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
  if(huart1.Instance == USART1)
  {

  }
}
 8000ed4:	bf00      	nop
 8000ed6:	370c      	adds	r7, #12
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ede:	4770      	bx	lr

08000ee0 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	b083      	sub	sp, #12
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
    /* received 1 byte data will be sent to our buffer
     * and to receive 1byte again, recall HAL_UART_Receive_IT*/
    HAL_UART_Receive_IT(&huart1, (uint8_t *)&rx_data[_DEF_UART2], 1);
  }
#endif
}
 8000ee8:	bf00      	nop
 8000eea:	370c      	adds	r7, #12
 8000eec:	46bd      	mov	sp, r7
 8000eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef2:	4770      	bx	lr

08000ef4 <HAL_UART_MspInit>:




void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b08a      	sub	sp, #40	; 0x28
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000efc:	f107 0314 	add.w	r3, r7, #20
 8000f00:	2200      	movs	r2, #0
 8000f02:	601a      	str	r2, [r3, #0]
 8000f04:	605a      	str	r2, [r3, #4]
 8000f06:	609a      	str	r2, [r3, #8]
 8000f08:	60da      	str	r2, [r3, #12]
 8000f0a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	4a35      	ldr	r2, [pc, #212]	; (8000fe8 <HAL_UART_MspInit+0xf4>)
 8000f12:	4293      	cmp	r3, r2
 8000f14:	d163      	bne.n	8000fde <HAL_UART_MspInit+0xea>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000f16:	2300      	movs	r3, #0
 8000f18:	613b      	str	r3, [r7, #16]
 8000f1a:	4b34      	ldr	r3, [pc, #208]	; (8000fec <HAL_UART_MspInit+0xf8>)
 8000f1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f1e:	4a33      	ldr	r2, [pc, #204]	; (8000fec <HAL_UART_MspInit+0xf8>)
 8000f20:	f043 0310 	orr.w	r3, r3, #16
 8000f24:	6453      	str	r3, [r2, #68]	; 0x44
 8000f26:	4b31      	ldr	r3, [pc, #196]	; (8000fec <HAL_UART_MspInit+0xf8>)
 8000f28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f2a:	f003 0310 	and.w	r3, r3, #16
 8000f2e:	613b      	str	r3, [r7, #16]
 8000f30:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f32:	2300      	movs	r3, #0
 8000f34:	60fb      	str	r3, [r7, #12]
 8000f36:	4b2d      	ldr	r3, [pc, #180]	; (8000fec <HAL_UART_MspInit+0xf8>)
 8000f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f3a:	4a2c      	ldr	r2, [pc, #176]	; (8000fec <HAL_UART_MspInit+0xf8>)
 8000f3c:	f043 0301 	orr.w	r3, r3, #1
 8000f40:	6313      	str	r3, [r2, #48]	; 0x30
 8000f42:	4b2a      	ldr	r3, [pc, #168]	; (8000fec <HAL_UART_MspInit+0xf8>)
 8000f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f46:	f003 0301 	and.w	r3, r3, #1
 8000f4a:	60fb      	str	r3, [r7, #12]
 8000f4c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000f4e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000f52:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f54:	2302      	movs	r3, #2
 8000f56:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f5c:	2303      	movs	r3, #3
 8000f5e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000f60:	2307      	movs	r3, #7
 8000f62:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f64:	f107 0314 	add.w	r3, r7, #20
 8000f68:	4619      	mov	r1, r3
 8000f6a:	4821      	ldr	r0, [pc, #132]	; (8000ff0 <HAL_UART_MspInit+0xfc>)
 8000f6c:	f000 fef0 	bl	8001d50 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8000f70:	4b20      	ldr	r3, [pc, #128]	; (8000ff4 <HAL_UART_MspInit+0x100>)
 8000f72:	4a21      	ldr	r2, [pc, #132]	; (8000ff8 <HAL_UART_MspInit+0x104>)
 8000f74:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8000f76:	4b1f      	ldr	r3, [pc, #124]	; (8000ff4 <HAL_UART_MspInit+0x100>)
 8000f78:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000f7c:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000f7e:	4b1d      	ldr	r3, [pc, #116]	; (8000ff4 <HAL_UART_MspInit+0x100>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f84:	4b1b      	ldr	r3, [pc, #108]	; (8000ff4 <HAL_UART_MspInit+0x100>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000f8a:	4b1a      	ldr	r3, [pc, #104]	; (8000ff4 <HAL_UART_MspInit+0x100>)
 8000f8c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000f90:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000f92:	4b18      	ldr	r3, [pc, #96]	; (8000ff4 <HAL_UART_MspInit+0x100>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000f98:	4b16      	ldr	r3, [pc, #88]	; (8000ff4 <HAL_UART_MspInit+0x100>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8000f9e:	4b15      	ldr	r3, [pc, #84]	; (8000ff4 <HAL_UART_MspInit+0x100>)
 8000fa0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000fa4:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000fa6:	4b13      	ldr	r3, [pc, #76]	; (8000ff4 <HAL_UART_MspInit+0x100>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000fac:	4b11      	ldr	r3, [pc, #68]	; (8000ff4 <HAL_UART_MspInit+0x100>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000fb2:	4810      	ldr	r0, [pc, #64]	; (8000ff4 <HAL_UART_MspInit+0x100>)
 8000fb4:	f000 fa6c 	bl	8001490 <HAL_DMA_Init>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d001      	beq.n	8000fc2 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8000fbe:	f7ff fbdb 	bl	8000778 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	4a0b      	ldr	r2, [pc, #44]	; (8000ff4 <HAL_UART_MspInit+0x100>)
 8000fc6:	639a      	str	r2, [r3, #56]	; 0x38
 8000fc8:	4a0a      	ldr	r2, [pc, #40]	; (8000ff4 <HAL_UART_MspInit+0x100>)
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000fce:	2200      	movs	r2, #0
 8000fd0:	2100      	movs	r1, #0
 8000fd2:	2025      	movs	r0, #37	; 0x25
 8000fd4:	f000 fa17 	bl	8001406 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000fd8:	2025      	movs	r0, #37	; 0x25
 8000fda:	f000 fa30 	bl	800143e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000fde:	bf00      	nop
 8000fe0:	3728      	adds	r7, #40	; 0x28
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}
 8000fe6:	bf00      	nop
 8000fe8:	40011000 	.word	0x40011000
 8000fec:	40023800 	.word	0x40023800
 8000ff0:	40020000 	.word	0x40020000
 8000ff4:	2000022c 	.word	0x2000022c
 8000ff8:	40026440 	.word	0x40026440

08000ffc <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b082      	sub	sp, #8
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]

  if(uartHandle->Instance==USART1)
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	4a0c      	ldr	r2, [pc, #48]	; (800103c <HAL_UART_MspDeInit+0x40>)
 800100a:	4293      	cmp	r3, r2
 800100c:	d112      	bne.n	8001034 <HAL_UART_MspDeInit+0x38>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 800100e:	4b0c      	ldr	r3, [pc, #48]	; (8001040 <HAL_UART_MspDeInit+0x44>)
 8001010:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001012:	4a0b      	ldr	r2, [pc, #44]	; (8001040 <HAL_UART_MspDeInit+0x44>)
 8001014:	f023 0310 	bic.w	r3, r3, #16
 8001018:	6453      	str	r3, [r2, #68]	; 0x44

    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9|GPIO_PIN_10);
 800101a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800101e:	4809      	ldr	r0, [pc, #36]	; (8001044 <HAL_UART_MspDeInit+0x48>)
 8001020:	f001 f81a 	bl	8002058 <HAL_GPIO_DeInit>

    /* USART1 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmarx);
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001028:	4618      	mov	r0, r3
 800102a:	f000 fadf 	bl	80015ec <HAL_DMA_DeInit>

    /* USART1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 800102e:	2025      	movs	r0, #37	; 0x25
 8001030:	f000 fa13 	bl	800145a <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART1_MspDeInit 1 */

  /* USER CODE END USART1_MspDeInit 1 */
  }
}
 8001034:	bf00      	nop
 8001036:	3708      	adds	r7, #8
 8001038:	46bd      	mov	sp, r7
 800103a:	bd80      	pop	{r7, pc}
 800103c:	40011000 	.word	0x40011000
 8001040:	40023800 	.word	0x40023800
 8001044:	40020000 	.word	0x40020000

08001048 <usbInit>:


#include "usb.h"

bool usbInit(void)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b086      	sub	sp, #24
 800104c:	af00      	add	r7, sp, #0
	bool ret = true;
 800104e:	2301      	movs	r3, #1
 8001050:	75fb      	strb	r3, [r7, #23]

	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001052:	463b      	mov	r3, r7
 8001054:	2200      	movs	r2, #0
 8001056:	601a      	str	r2, [r3, #0]
 8001058:	605a      	str	r2, [r3, #4]
 800105a:	609a      	str	r2, [r3, #8]
 800105c:	60da      	str	r2, [r3, #12]
 800105e:	611a      	str	r2, [r3, #16]

	GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001060:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001064:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001066:	2311      	movs	r3, #17
 8001068:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800106a:	2300      	movs	r3, #0
 800106c:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800106e:	2300      	movs	r3, #0
 8001070:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001072:	463b      	mov	r3, r7
 8001074:	4619      	mov	r1, r3
 8001076:	4810      	ldr	r0, [pc, #64]	; (80010b8 <usbInit+0x70>)
 8001078:	f000 fe6a 	bl	8001d50 <HAL_GPIO_Init>

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 800107c:	2200      	movs	r2, #0
 800107e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001082:	480d      	ldr	r0, [pc, #52]	; (80010b8 <usbInit+0x70>)
 8001084:	f001 f8cc 	bl	8002220 <HAL_GPIO_WritePin>
	delay(100);
 8001088:	2064      	movs	r0, #100	; 0x64
 800108a:	f7ff faf9 	bl	8000680 <delay>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 800108e:	2201      	movs	r2, #1
 8001090:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001094:	4808      	ldr	r0, [pc, #32]	; (80010b8 <usbInit+0x70>)
 8001096:	f001 f8c3 	bl	8002220 <HAL_GPIO_WritePin>

	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800109a:	2300      	movs	r3, #0
 800109c:	607b      	str	r3, [r7, #4]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800109e:	463b      	mov	r3, r7
 80010a0:	4619      	mov	r1, r3
 80010a2:	4805      	ldr	r0, [pc, #20]	; (80010b8 <usbInit+0x70>)
 80010a4:	f000 fe54 	bl	8001d50 <HAL_GPIO_Init>

	MX_USB_DEVICE_Init();
 80010a8:	f007 fafc 	bl	80086a4 <MX_USB_DEVICE_Init>
	return ret;
 80010ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80010ae:	4618      	mov	r0, r3
 80010b0:	3718      	adds	r7, #24
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	40020000 	.word	0x40020000

080010bc <hwInit>:
 */

#include "hw.h"

void hwInit()
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	af00      	add	r7, sp, #0
  bspInit();
 80010c0:	f7ff faa6 	bl	8000610 <bspInit>
  rtcInit();
 80010c4:	f7ff fd40 	bl	8000b48 <rtcInit>

  resetInit();
 80010c8:	f7ff fd12 	bl	8000af0 <resetInit>
  ledInit();
 80010cc:	f7ff fc78 	bl	80009c0 <ledInit>
  usbInit();
 80010d0:	f7ff ffba 	bl	8001048 <usbInit>
  uartInit();
 80010d4:	f7ff fdb0 	bl	8000c38 <uartInit>
}
 80010d8:	bf00      	nop
 80010da:	bd80      	pop	{r7, pc}

080010dc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80010e0:	4b0e      	ldr	r3, [pc, #56]	; (800111c <HAL_Init+0x40>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	4a0d      	ldr	r2, [pc, #52]	; (800111c <HAL_Init+0x40>)
 80010e6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80010ea:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80010ec:	4b0b      	ldr	r3, [pc, #44]	; (800111c <HAL_Init+0x40>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	4a0a      	ldr	r2, [pc, #40]	; (800111c <HAL_Init+0x40>)
 80010f2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80010f6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010f8:	4b08      	ldr	r3, [pc, #32]	; (800111c <HAL_Init+0x40>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	4a07      	ldr	r2, [pc, #28]	; (800111c <HAL_Init+0x40>)
 80010fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001102:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001104:	2003      	movs	r0, #3
 8001106:	f000 f973 	bl	80013f0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800110a:	200f      	movs	r0, #15
 800110c:	f000 f808 	bl	8001120 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001110:	f7ff fb38 	bl	8000784 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001114:	2300      	movs	r3, #0
}
 8001116:	4618      	mov	r0, r3
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	40023c00 	.word	0x40023c00

08001120 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b082      	sub	sp, #8
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001128:	4b12      	ldr	r3, [pc, #72]	; (8001174 <HAL_InitTick+0x54>)
 800112a:	681a      	ldr	r2, [r3, #0]
 800112c:	4b12      	ldr	r3, [pc, #72]	; (8001178 <HAL_InitTick+0x58>)
 800112e:	781b      	ldrb	r3, [r3, #0]
 8001130:	4619      	mov	r1, r3
 8001132:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001136:	fbb3 f3f1 	udiv	r3, r3, r1
 800113a:	fbb2 f3f3 	udiv	r3, r2, r3
 800113e:	4618      	mov	r0, r3
 8001140:	f000 f999 	bl	8001476 <HAL_SYSTICK_Config>
 8001144:	4603      	mov	r3, r0
 8001146:	2b00      	cmp	r3, #0
 8001148:	d001      	beq.n	800114e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800114a:	2301      	movs	r3, #1
 800114c:	e00e      	b.n	800116c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	2b0f      	cmp	r3, #15
 8001152:	d80a      	bhi.n	800116a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001154:	2200      	movs	r2, #0
 8001156:	6879      	ldr	r1, [r7, #4]
 8001158:	f04f 30ff 	mov.w	r0, #4294967295
 800115c:	f000 f953 	bl	8001406 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001160:	4a06      	ldr	r2, [pc, #24]	; (800117c <HAL_InitTick+0x5c>)
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001166:	2300      	movs	r3, #0
 8001168:	e000      	b.n	800116c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800116a:	2301      	movs	r3, #1
}
 800116c:	4618      	mov	r0, r3
 800116e:	3708      	adds	r7, #8
 8001170:	46bd      	mov	sp, r7
 8001172:	bd80      	pop	{r7, pc}
 8001174:	20000000 	.word	0x20000000
 8001178:	2000002c 	.word	0x2000002c
 800117c:	20000028 	.word	0x20000028

08001180 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001180:	b480      	push	{r7}
 8001182:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001184:	4b06      	ldr	r3, [pc, #24]	; (80011a0 <HAL_IncTick+0x20>)
 8001186:	781b      	ldrb	r3, [r3, #0]
 8001188:	461a      	mov	r2, r3
 800118a:	4b06      	ldr	r3, [pc, #24]	; (80011a4 <HAL_IncTick+0x24>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	4413      	add	r3, r2
 8001190:	4a04      	ldr	r2, [pc, #16]	; (80011a4 <HAL_IncTick+0x24>)
 8001192:	6013      	str	r3, [r2, #0]
}
 8001194:	bf00      	nop
 8001196:	46bd      	mov	sp, r7
 8001198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119c:	4770      	bx	lr
 800119e:	bf00      	nop
 80011a0:	2000002c 	.word	0x2000002c
 80011a4:	200003b0 	.word	0x200003b0

080011a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011a8:	b480      	push	{r7}
 80011aa:	af00      	add	r7, sp, #0
  return uwTick;
 80011ac:	4b03      	ldr	r3, [pc, #12]	; (80011bc <HAL_GetTick+0x14>)
 80011ae:	681b      	ldr	r3, [r3, #0]
}
 80011b0:	4618      	mov	r0, r3
 80011b2:	46bd      	mov	sp, r7
 80011b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b8:	4770      	bx	lr
 80011ba:	bf00      	nop
 80011bc:	200003b0 	.word	0x200003b0

080011c0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b084      	sub	sp, #16
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011c8:	f7ff ffee 	bl	80011a8 <HAL_GetTick>
 80011cc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011d8:	d005      	beq.n	80011e6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80011da:	4b0a      	ldr	r3, [pc, #40]	; (8001204 <HAL_Delay+0x44>)
 80011dc:	781b      	ldrb	r3, [r3, #0]
 80011de:	461a      	mov	r2, r3
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	4413      	add	r3, r2
 80011e4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80011e6:	bf00      	nop
 80011e8:	f7ff ffde 	bl	80011a8 <HAL_GetTick>
 80011ec:	4602      	mov	r2, r0
 80011ee:	68bb      	ldr	r3, [r7, #8]
 80011f0:	1ad3      	subs	r3, r2, r3
 80011f2:	68fa      	ldr	r2, [r7, #12]
 80011f4:	429a      	cmp	r2, r3
 80011f6:	d8f7      	bhi.n	80011e8 <HAL_Delay+0x28>
  {
  }
}
 80011f8:	bf00      	nop
 80011fa:	bf00      	nop
 80011fc:	3710      	adds	r7, #16
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	2000002c 	.word	0x2000002c

08001208 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001208:	b480      	push	{r7}
 800120a:	b085      	sub	sp, #20
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	f003 0307 	and.w	r3, r3, #7
 8001216:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001218:	4b0c      	ldr	r3, [pc, #48]	; (800124c <__NVIC_SetPriorityGrouping+0x44>)
 800121a:	68db      	ldr	r3, [r3, #12]
 800121c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800121e:	68ba      	ldr	r2, [r7, #8]
 8001220:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001224:	4013      	ands	r3, r2
 8001226:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800122c:	68bb      	ldr	r3, [r7, #8]
 800122e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001230:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001234:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001238:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800123a:	4a04      	ldr	r2, [pc, #16]	; (800124c <__NVIC_SetPriorityGrouping+0x44>)
 800123c:	68bb      	ldr	r3, [r7, #8]
 800123e:	60d3      	str	r3, [r2, #12]
}
 8001240:	bf00      	nop
 8001242:	3714      	adds	r7, #20
 8001244:	46bd      	mov	sp, r7
 8001246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124a:	4770      	bx	lr
 800124c:	e000ed00 	.word	0xe000ed00

08001250 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001250:	b480      	push	{r7}
 8001252:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001254:	4b04      	ldr	r3, [pc, #16]	; (8001268 <__NVIC_GetPriorityGrouping+0x18>)
 8001256:	68db      	ldr	r3, [r3, #12]
 8001258:	0a1b      	lsrs	r3, r3, #8
 800125a:	f003 0307 	and.w	r3, r3, #7
}
 800125e:	4618      	mov	r0, r3
 8001260:	46bd      	mov	sp, r7
 8001262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001266:	4770      	bx	lr
 8001268:	e000ed00 	.word	0xe000ed00

0800126c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800126c:	b480      	push	{r7}
 800126e:	b083      	sub	sp, #12
 8001270:	af00      	add	r7, sp, #0
 8001272:	4603      	mov	r3, r0
 8001274:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001276:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800127a:	2b00      	cmp	r3, #0
 800127c:	db0b      	blt.n	8001296 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800127e:	79fb      	ldrb	r3, [r7, #7]
 8001280:	f003 021f 	and.w	r2, r3, #31
 8001284:	4907      	ldr	r1, [pc, #28]	; (80012a4 <__NVIC_EnableIRQ+0x38>)
 8001286:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800128a:	095b      	lsrs	r3, r3, #5
 800128c:	2001      	movs	r0, #1
 800128e:	fa00 f202 	lsl.w	r2, r0, r2
 8001292:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001296:	bf00      	nop
 8001298:	370c      	adds	r7, #12
 800129a:	46bd      	mov	sp, r7
 800129c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a0:	4770      	bx	lr
 80012a2:	bf00      	nop
 80012a4:	e000e100 	.word	0xe000e100

080012a8 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80012a8:	b480      	push	{r7}
 80012aa:	b083      	sub	sp, #12
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	4603      	mov	r3, r0
 80012b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	db12      	blt.n	80012e0 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012ba:	79fb      	ldrb	r3, [r7, #7]
 80012bc:	f003 021f 	and.w	r2, r3, #31
 80012c0:	490a      	ldr	r1, [pc, #40]	; (80012ec <__NVIC_DisableIRQ+0x44>)
 80012c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012c6:	095b      	lsrs	r3, r3, #5
 80012c8:	2001      	movs	r0, #1
 80012ca:	fa00 f202 	lsl.w	r2, r0, r2
 80012ce:	3320      	adds	r3, #32
 80012d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80012d4:	f3bf 8f4f 	dsb	sy
}
 80012d8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80012da:	f3bf 8f6f 	isb	sy
}
 80012de:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80012e0:	bf00      	nop
 80012e2:	370c      	adds	r7, #12
 80012e4:	46bd      	mov	sp, r7
 80012e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ea:	4770      	bx	lr
 80012ec:	e000e100 	.word	0xe000e100

080012f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012f0:	b480      	push	{r7}
 80012f2:	b083      	sub	sp, #12
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	4603      	mov	r3, r0
 80012f8:	6039      	str	r1, [r7, #0]
 80012fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001300:	2b00      	cmp	r3, #0
 8001302:	db0a      	blt.n	800131a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	b2da      	uxtb	r2, r3
 8001308:	490c      	ldr	r1, [pc, #48]	; (800133c <__NVIC_SetPriority+0x4c>)
 800130a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800130e:	0112      	lsls	r2, r2, #4
 8001310:	b2d2      	uxtb	r2, r2
 8001312:	440b      	add	r3, r1
 8001314:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001318:	e00a      	b.n	8001330 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800131a:	683b      	ldr	r3, [r7, #0]
 800131c:	b2da      	uxtb	r2, r3
 800131e:	4908      	ldr	r1, [pc, #32]	; (8001340 <__NVIC_SetPriority+0x50>)
 8001320:	79fb      	ldrb	r3, [r7, #7]
 8001322:	f003 030f 	and.w	r3, r3, #15
 8001326:	3b04      	subs	r3, #4
 8001328:	0112      	lsls	r2, r2, #4
 800132a:	b2d2      	uxtb	r2, r2
 800132c:	440b      	add	r3, r1
 800132e:	761a      	strb	r2, [r3, #24]
}
 8001330:	bf00      	nop
 8001332:	370c      	adds	r7, #12
 8001334:	46bd      	mov	sp, r7
 8001336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133a:	4770      	bx	lr
 800133c:	e000e100 	.word	0xe000e100
 8001340:	e000ed00 	.word	0xe000ed00

08001344 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001344:	b480      	push	{r7}
 8001346:	b089      	sub	sp, #36	; 0x24
 8001348:	af00      	add	r7, sp, #0
 800134a:	60f8      	str	r0, [r7, #12]
 800134c:	60b9      	str	r1, [r7, #8]
 800134e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	f003 0307 	and.w	r3, r3, #7
 8001356:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001358:	69fb      	ldr	r3, [r7, #28]
 800135a:	f1c3 0307 	rsb	r3, r3, #7
 800135e:	2b04      	cmp	r3, #4
 8001360:	bf28      	it	cs
 8001362:	2304      	movcs	r3, #4
 8001364:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001366:	69fb      	ldr	r3, [r7, #28]
 8001368:	3304      	adds	r3, #4
 800136a:	2b06      	cmp	r3, #6
 800136c:	d902      	bls.n	8001374 <NVIC_EncodePriority+0x30>
 800136e:	69fb      	ldr	r3, [r7, #28]
 8001370:	3b03      	subs	r3, #3
 8001372:	e000      	b.n	8001376 <NVIC_EncodePriority+0x32>
 8001374:	2300      	movs	r3, #0
 8001376:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001378:	f04f 32ff 	mov.w	r2, #4294967295
 800137c:	69bb      	ldr	r3, [r7, #24]
 800137e:	fa02 f303 	lsl.w	r3, r2, r3
 8001382:	43da      	mvns	r2, r3
 8001384:	68bb      	ldr	r3, [r7, #8]
 8001386:	401a      	ands	r2, r3
 8001388:	697b      	ldr	r3, [r7, #20]
 800138a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800138c:	f04f 31ff 	mov.w	r1, #4294967295
 8001390:	697b      	ldr	r3, [r7, #20]
 8001392:	fa01 f303 	lsl.w	r3, r1, r3
 8001396:	43d9      	mvns	r1, r3
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800139c:	4313      	orrs	r3, r2
         );
}
 800139e:	4618      	mov	r0, r3
 80013a0:	3724      	adds	r7, #36	; 0x24
 80013a2:	46bd      	mov	sp, r7
 80013a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a8:	4770      	bx	lr
	...

080013ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b082      	sub	sp, #8
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	3b01      	subs	r3, #1
 80013b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80013bc:	d301      	bcc.n	80013c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013be:	2301      	movs	r3, #1
 80013c0:	e00f      	b.n	80013e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013c2:	4a0a      	ldr	r2, [pc, #40]	; (80013ec <SysTick_Config+0x40>)
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	3b01      	subs	r3, #1
 80013c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013ca:	210f      	movs	r1, #15
 80013cc:	f04f 30ff 	mov.w	r0, #4294967295
 80013d0:	f7ff ff8e 	bl	80012f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013d4:	4b05      	ldr	r3, [pc, #20]	; (80013ec <SysTick_Config+0x40>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013da:	4b04      	ldr	r3, [pc, #16]	; (80013ec <SysTick_Config+0x40>)
 80013dc:	2207      	movs	r2, #7
 80013de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013e0:	2300      	movs	r3, #0
}
 80013e2:	4618      	mov	r0, r3
 80013e4:	3708      	adds	r7, #8
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	bf00      	nop
 80013ec:	e000e010 	.word	0xe000e010

080013f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b082      	sub	sp, #8
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013f8:	6878      	ldr	r0, [r7, #4]
 80013fa:	f7ff ff05 	bl	8001208 <__NVIC_SetPriorityGrouping>
}
 80013fe:	bf00      	nop
 8001400:	3708      	adds	r7, #8
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}

08001406 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001406:	b580      	push	{r7, lr}
 8001408:	b086      	sub	sp, #24
 800140a:	af00      	add	r7, sp, #0
 800140c:	4603      	mov	r3, r0
 800140e:	60b9      	str	r1, [r7, #8]
 8001410:	607a      	str	r2, [r7, #4]
 8001412:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001414:	2300      	movs	r3, #0
 8001416:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001418:	f7ff ff1a 	bl	8001250 <__NVIC_GetPriorityGrouping>
 800141c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800141e:	687a      	ldr	r2, [r7, #4]
 8001420:	68b9      	ldr	r1, [r7, #8]
 8001422:	6978      	ldr	r0, [r7, #20]
 8001424:	f7ff ff8e 	bl	8001344 <NVIC_EncodePriority>
 8001428:	4602      	mov	r2, r0
 800142a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800142e:	4611      	mov	r1, r2
 8001430:	4618      	mov	r0, r3
 8001432:	f7ff ff5d 	bl	80012f0 <__NVIC_SetPriority>
}
 8001436:	bf00      	nop
 8001438:	3718      	adds	r7, #24
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}

0800143e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800143e:	b580      	push	{r7, lr}
 8001440:	b082      	sub	sp, #8
 8001442:	af00      	add	r7, sp, #0
 8001444:	4603      	mov	r3, r0
 8001446:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001448:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800144c:	4618      	mov	r0, r3
 800144e:	f7ff ff0d 	bl	800126c <__NVIC_EnableIRQ>
}
 8001452:	bf00      	nop
 8001454:	3708      	adds	r7, #8
 8001456:	46bd      	mov	sp, r7
 8001458:	bd80      	pop	{r7, pc}

0800145a <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800145a:	b580      	push	{r7, lr}
 800145c:	b082      	sub	sp, #8
 800145e:	af00      	add	r7, sp, #0
 8001460:	4603      	mov	r3, r0
 8001462:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8001464:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001468:	4618      	mov	r0, r3
 800146a:	f7ff ff1d 	bl	80012a8 <__NVIC_DisableIRQ>
}
 800146e:	bf00      	nop
 8001470:	3708      	adds	r7, #8
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}

08001476 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001476:	b580      	push	{r7, lr}
 8001478:	b082      	sub	sp, #8
 800147a:	af00      	add	r7, sp, #0
 800147c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800147e:	6878      	ldr	r0, [r7, #4]
 8001480:	f7ff ff94 	bl	80013ac <SysTick_Config>
 8001484:	4603      	mov	r3, r0
}
 8001486:	4618      	mov	r0, r3
 8001488:	3708      	adds	r7, #8
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}
	...

08001490 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b086      	sub	sp, #24
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001498:	2300      	movs	r3, #0
 800149a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800149c:	f7ff fe84 	bl	80011a8 <HAL_GetTick>
 80014a0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d101      	bne.n	80014ac <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80014a8:	2301      	movs	r3, #1
 80014aa:	e099      	b.n	80015e0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	2202      	movs	r2, #2
 80014b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	2200      	movs	r2, #0
 80014b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	681a      	ldr	r2, [r3, #0]
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f022 0201 	bic.w	r2, r2, #1
 80014ca:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80014cc:	e00f      	b.n	80014ee <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80014ce:	f7ff fe6b 	bl	80011a8 <HAL_GetTick>
 80014d2:	4602      	mov	r2, r0
 80014d4:	693b      	ldr	r3, [r7, #16]
 80014d6:	1ad3      	subs	r3, r2, r3
 80014d8:	2b05      	cmp	r3, #5
 80014da:	d908      	bls.n	80014ee <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	2220      	movs	r2, #32
 80014e0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	2203      	movs	r2, #3
 80014e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80014ea:	2303      	movs	r3, #3
 80014ec:	e078      	b.n	80015e0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	f003 0301 	and.w	r3, r3, #1
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d1e8      	bne.n	80014ce <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001504:	697a      	ldr	r2, [r7, #20]
 8001506:	4b38      	ldr	r3, [pc, #224]	; (80015e8 <HAL_DMA_Init+0x158>)
 8001508:	4013      	ands	r3, r2
 800150a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	685a      	ldr	r2, [r3, #4]
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	689b      	ldr	r3, [r3, #8]
 8001514:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800151a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	691b      	ldr	r3, [r3, #16]
 8001520:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001526:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	699b      	ldr	r3, [r3, #24]
 800152c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001532:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	6a1b      	ldr	r3, [r3, #32]
 8001538:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800153a:	697a      	ldr	r2, [r7, #20]
 800153c:	4313      	orrs	r3, r2
 800153e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001544:	2b04      	cmp	r3, #4
 8001546:	d107      	bne.n	8001558 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001550:	4313      	orrs	r3, r2
 8001552:	697a      	ldr	r2, [r7, #20]
 8001554:	4313      	orrs	r3, r2
 8001556:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	697a      	ldr	r2, [r7, #20]
 800155e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	695b      	ldr	r3, [r3, #20]
 8001566:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001568:	697b      	ldr	r3, [r7, #20]
 800156a:	f023 0307 	bic.w	r3, r3, #7
 800156e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001574:	697a      	ldr	r2, [r7, #20]
 8001576:	4313      	orrs	r3, r2
 8001578:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800157e:	2b04      	cmp	r3, #4
 8001580:	d117      	bne.n	80015b2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001586:	697a      	ldr	r2, [r7, #20]
 8001588:	4313      	orrs	r3, r2
 800158a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001590:	2b00      	cmp	r3, #0
 8001592:	d00e      	beq.n	80015b2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001594:	6878      	ldr	r0, [r7, #4]
 8001596:	f000 fb5f 	bl	8001c58 <DMA_CheckFifoParam>
 800159a:	4603      	mov	r3, r0
 800159c:	2b00      	cmp	r3, #0
 800159e:	d008      	beq.n	80015b2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	2240      	movs	r2, #64	; 0x40
 80015a4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	2201      	movs	r2, #1
 80015aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80015ae:	2301      	movs	r3, #1
 80015b0:	e016      	b.n	80015e0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	697a      	ldr	r2, [r7, #20]
 80015b8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80015ba:	6878      	ldr	r0, [r7, #4]
 80015bc:	f000 fb16 	bl	8001bec <DMA_CalcBaseAndBitshift>
 80015c0:	4603      	mov	r3, r0
 80015c2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015c8:	223f      	movs	r2, #63	; 0x3f
 80015ca:	409a      	lsls	r2, r3
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	2200      	movs	r2, #0
 80015d4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	2201      	movs	r2, #1
 80015da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80015de:	2300      	movs	r3, #0
}
 80015e0:	4618      	mov	r0, r3
 80015e2:	3718      	adds	r7, #24
 80015e4:	46bd      	mov	sp, r7
 80015e6:	bd80      	pop	{r7, pc}
 80015e8:	f010803f 	.word	0xf010803f

080015ec <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b084      	sub	sp, #16
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d101      	bne.n	80015fe <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80015fa:	2301      	movs	r3, #1
 80015fc:	e050      	b.n	80016a0 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001604:	b2db      	uxtb	r3, r3
 8001606:	2b02      	cmp	r3, #2
 8001608:	d101      	bne.n	800160e <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 800160a:	2302      	movs	r3, #2
 800160c:	e048      	b.n	80016a0 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	681a      	ldr	r2, [r3, #0]
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f022 0201 	bic.w	r2, r2, #1
 800161c:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	2200      	movs	r2, #0
 8001624:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	2200      	movs	r2, #0
 800162c:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	2200      	movs	r2, #0
 8001634:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	2200      	movs	r2, #0
 800163c:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	2200      	movs	r2, #0
 8001644:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	2221      	movs	r2, #33	; 0x21
 800164c:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800164e:	6878      	ldr	r0, [r7, #4]
 8001650:	f000 facc 	bl	8001bec <DMA_CalcBaseAndBitshift>
 8001654:	4603      	mov	r3, r0
 8001656:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	2200      	movs	r2, #0
 800165c:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	2200      	movs	r2, #0
 8001662:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	2200      	movs	r2, #0
 8001668:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	2200      	movs	r2, #0
 800166e:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	2200      	movs	r2, #0
 8001674:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	2200      	movs	r2, #0
 800167a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001680:	223f      	movs	r2, #63	; 0x3f
 8001682:	409a      	lsls	r2, r3
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	2200      	movs	r2, #0
 800168c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	2200      	movs	r2, #0
 8001692:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	2200      	movs	r2, #0
 800169a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800169e:	2300      	movs	r3, #0
}
 80016a0:	4618      	mov	r0, r3
 80016a2:	3710      	adds	r7, #16
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bd80      	pop	{r7, pc}

080016a8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b086      	sub	sp, #24
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	60f8      	str	r0, [r7, #12]
 80016b0:	60b9      	str	r1, [r7, #8]
 80016b2:	607a      	str	r2, [r7, #4]
 80016b4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80016b6:	2300      	movs	r3, #0
 80016b8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016be:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80016c6:	2b01      	cmp	r3, #1
 80016c8:	d101      	bne.n	80016ce <HAL_DMA_Start_IT+0x26>
 80016ca:	2302      	movs	r3, #2
 80016cc:	e040      	b.n	8001750 <HAL_DMA_Start_IT+0xa8>
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	2201      	movs	r2, #1
 80016d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80016dc:	b2db      	uxtb	r3, r3
 80016de:	2b01      	cmp	r3, #1
 80016e0:	d12f      	bne.n	8001742 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	2202      	movs	r2, #2
 80016e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	2200      	movs	r2, #0
 80016ee:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80016f0:	683b      	ldr	r3, [r7, #0]
 80016f2:	687a      	ldr	r2, [r7, #4]
 80016f4:	68b9      	ldr	r1, [r7, #8]
 80016f6:	68f8      	ldr	r0, [r7, #12]
 80016f8:	f000 fa4a 	bl	8001b90 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001700:	223f      	movs	r2, #63	; 0x3f
 8001702:	409a      	lsls	r2, r3
 8001704:	693b      	ldr	r3, [r7, #16]
 8001706:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	681a      	ldr	r2, [r3, #0]
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f042 0216 	orr.w	r2, r2, #22
 8001716:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800171c:	2b00      	cmp	r3, #0
 800171e:	d007      	beq.n	8001730 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	681a      	ldr	r2, [r3, #0]
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f042 0208 	orr.w	r2, r2, #8
 800172e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	681a      	ldr	r2, [r3, #0]
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f042 0201 	orr.w	r2, r2, #1
 800173e:	601a      	str	r2, [r3, #0]
 8001740:	e005      	b.n	800174e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	2200      	movs	r2, #0
 8001746:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800174a:	2302      	movs	r3, #2
 800174c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800174e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001750:	4618      	mov	r0, r3
 8001752:	3718      	adds	r7, #24
 8001754:	46bd      	mov	sp, r7
 8001756:	bd80      	pop	{r7, pc}

08001758 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b084      	sub	sp, #16
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001764:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001766:	f7ff fd1f 	bl	80011a8 <HAL_GetTick>
 800176a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001772:	b2db      	uxtb	r3, r3
 8001774:	2b02      	cmp	r3, #2
 8001776:	d008      	beq.n	800178a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	2280      	movs	r2, #128	; 0x80
 800177c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	2200      	movs	r2, #0
 8001782:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001786:	2301      	movs	r3, #1
 8001788:	e052      	b.n	8001830 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	681a      	ldr	r2, [r3, #0]
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f022 0216 	bic.w	r2, r2, #22
 8001798:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	695a      	ldr	r2, [r3, #20]
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80017a8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d103      	bne.n	80017ba <HAL_DMA_Abort+0x62>
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d007      	beq.n	80017ca <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	681a      	ldr	r2, [r3, #0]
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	f022 0208 	bic.w	r2, r2, #8
 80017c8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	681a      	ldr	r2, [r3, #0]
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f022 0201 	bic.w	r2, r2, #1
 80017d8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80017da:	e013      	b.n	8001804 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80017dc:	f7ff fce4 	bl	80011a8 <HAL_GetTick>
 80017e0:	4602      	mov	r2, r0
 80017e2:	68bb      	ldr	r3, [r7, #8]
 80017e4:	1ad3      	subs	r3, r2, r3
 80017e6:	2b05      	cmp	r3, #5
 80017e8:	d90c      	bls.n	8001804 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	2220      	movs	r2, #32
 80017ee:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	2203      	movs	r2, #3
 80017f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	2200      	movs	r2, #0
 80017fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001800:	2303      	movs	r3, #3
 8001802:	e015      	b.n	8001830 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f003 0301 	and.w	r3, r3, #1
 800180e:	2b00      	cmp	r3, #0
 8001810:	d1e4      	bne.n	80017dc <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001816:	223f      	movs	r2, #63	; 0x3f
 8001818:	409a      	lsls	r2, r3
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	2201      	movs	r2, #1
 8001822:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	2200      	movs	r2, #0
 800182a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800182e:	2300      	movs	r3, #0
}
 8001830:	4618      	mov	r0, r3
 8001832:	3710      	adds	r7, #16
 8001834:	46bd      	mov	sp, r7
 8001836:	bd80      	pop	{r7, pc}

08001838 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001838:	b480      	push	{r7}
 800183a:	b083      	sub	sp, #12
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001846:	b2db      	uxtb	r3, r3
 8001848:	2b02      	cmp	r3, #2
 800184a:	d004      	beq.n	8001856 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	2280      	movs	r2, #128	; 0x80
 8001850:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001852:	2301      	movs	r3, #1
 8001854:	e00c      	b.n	8001870 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	2205      	movs	r2, #5
 800185a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	681a      	ldr	r2, [r3, #0]
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f022 0201 	bic.w	r2, r2, #1
 800186c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800186e:	2300      	movs	r3, #0
}
 8001870:	4618      	mov	r0, r3
 8001872:	370c      	adds	r7, #12
 8001874:	46bd      	mov	sp, r7
 8001876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187a:	4770      	bx	lr

0800187c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b086      	sub	sp, #24
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001884:	2300      	movs	r3, #0
 8001886:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001888:	4b8e      	ldr	r3, [pc, #568]	; (8001ac4 <HAL_DMA_IRQHandler+0x248>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	4a8e      	ldr	r2, [pc, #568]	; (8001ac8 <HAL_DMA_IRQHandler+0x24c>)
 800188e:	fba2 2303 	umull	r2, r3, r2, r3
 8001892:	0a9b      	lsrs	r3, r3, #10
 8001894:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800189a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800189c:	693b      	ldr	r3, [r7, #16]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018a6:	2208      	movs	r2, #8
 80018a8:	409a      	lsls	r2, r3
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	4013      	ands	r3, r2
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d01a      	beq.n	80018e8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f003 0304 	and.w	r3, r3, #4
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d013      	beq.n	80018e8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	681a      	ldr	r2, [r3, #0]
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f022 0204 	bic.w	r2, r2, #4
 80018ce:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018d4:	2208      	movs	r2, #8
 80018d6:	409a      	lsls	r2, r3
 80018d8:	693b      	ldr	r3, [r7, #16]
 80018da:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018e0:	f043 0201 	orr.w	r2, r3, #1
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018ec:	2201      	movs	r2, #1
 80018ee:	409a      	lsls	r2, r3
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	4013      	ands	r3, r2
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d012      	beq.n	800191e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	695b      	ldr	r3, [r3, #20]
 80018fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001902:	2b00      	cmp	r3, #0
 8001904:	d00b      	beq.n	800191e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800190a:	2201      	movs	r2, #1
 800190c:	409a      	lsls	r2, r3
 800190e:	693b      	ldr	r3, [r7, #16]
 8001910:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001916:	f043 0202 	orr.w	r2, r3, #2
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001922:	2204      	movs	r2, #4
 8001924:	409a      	lsls	r2, r3
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	4013      	ands	r3, r2
 800192a:	2b00      	cmp	r3, #0
 800192c:	d012      	beq.n	8001954 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f003 0302 	and.w	r3, r3, #2
 8001938:	2b00      	cmp	r3, #0
 800193a:	d00b      	beq.n	8001954 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001940:	2204      	movs	r2, #4
 8001942:	409a      	lsls	r2, r3
 8001944:	693b      	ldr	r3, [r7, #16]
 8001946:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800194c:	f043 0204 	orr.w	r2, r3, #4
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001958:	2210      	movs	r2, #16
 800195a:	409a      	lsls	r2, r3
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	4013      	ands	r3, r2
 8001960:	2b00      	cmp	r3, #0
 8001962:	d043      	beq.n	80019ec <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f003 0308 	and.w	r3, r3, #8
 800196e:	2b00      	cmp	r3, #0
 8001970:	d03c      	beq.n	80019ec <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001976:	2210      	movs	r2, #16
 8001978:	409a      	lsls	r2, r3
 800197a:	693b      	ldr	r3, [r7, #16]
 800197c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001988:	2b00      	cmp	r3, #0
 800198a:	d018      	beq.n	80019be <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001996:	2b00      	cmp	r3, #0
 8001998:	d108      	bne.n	80019ac <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d024      	beq.n	80019ec <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019a6:	6878      	ldr	r0, [r7, #4]
 80019a8:	4798      	blx	r3
 80019aa:	e01f      	b.n	80019ec <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d01b      	beq.n	80019ec <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80019b8:	6878      	ldr	r0, [r7, #4]
 80019ba:	4798      	blx	r3
 80019bc:	e016      	b.n	80019ec <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d107      	bne.n	80019dc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	681a      	ldr	r2, [r3, #0]
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f022 0208 	bic.w	r2, r2, #8
 80019da:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d003      	beq.n	80019ec <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019e8:	6878      	ldr	r0, [r7, #4]
 80019ea:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019f0:	2220      	movs	r2, #32
 80019f2:	409a      	lsls	r2, r3
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	4013      	ands	r3, r2
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	f000 808f 	beq.w	8001b1c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f003 0310 	and.w	r3, r3, #16
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	f000 8087 	beq.w	8001b1c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a12:	2220      	movs	r2, #32
 8001a14:	409a      	lsls	r2, r3
 8001a16:	693b      	ldr	r3, [r7, #16]
 8001a18:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001a20:	b2db      	uxtb	r3, r3
 8001a22:	2b05      	cmp	r3, #5
 8001a24:	d136      	bne.n	8001a94 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	681a      	ldr	r2, [r3, #0]
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f022 0216 	bic.w	r2, r2, #22
 8001a34:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	695a      	ldr	r2, [r3, #20]
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001a44:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d103      	bne.n	8001a56 <HAL_DMA_IRQHandler+0x1da>
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d007      	beq.n	8001a66 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	681a      	ldr	r2, [r3, #0]
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f022 0208 	bic.w	r2, r2, #8
 8001a64:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a6a:	223f      	movs	r2, #63	; 0x3f
 8001a6c:	409a      	lsls	r2, r3
 8001a6e:	693b      	ldr	r3, [r7, #16]
 8001a70:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	2201      	movs	r2, #1
 8001a76:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d07e      	beq.n	8001b88 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a8e:	6878      	ldr	r0, [r7, #4]
 8001a90:	4798      	blx	r3
        }
        return;
 8001a92:	e079      	b.n	8001b88 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d01d      	beq.n	8001ade <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d10d      	bne.n	8001acc <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d031      	beq.n	8001b1c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001abc:	6878      	ldr	r0, [r7, #4]
 8001abe:	4798      	blx	r3
 8001ac0:	e02c      	b.n	8001b1c <HAL_DMA_IRQHandler+0x2a0>
 8001ac2:	bf00      	nop
 8001ac4:	20000000 	.word	0x20000000
 8001ac8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d023      	beq.n	8001b1c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ad8:	6878      	ldr	r0, [r7, #4]
 8001ada:	4798      	blx	r3
 8001adc:	e01e      	b.n	8001b1c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d10f      	bne.n	8001b0c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	681a      	ldr	r2, [r3, #0]
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f022 0210 	bic.w	r2, r2, #16
 8001afa:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	2201      	movs	r2, #1
 8001b00:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	2200      	movs	r2, #0
 8001b08:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d003      	beq.n	8001b1c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b18:	6878      	ldr	r0, [r7, #4]
 8001b1a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d032      	beq.n	8001b8a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b28:	f003 0301 	and.w	r3, r3, #1
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d022      	beq.n	8001b76 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	2205      	movs	r2, #5
 8001b34:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	681a      	ldr	r2, [r3, #0]
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f022 0201 	bic.w	r2, r2, #1
 8001b46:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001b48:	68bb      	ldr	r3, [r7, #8]
 8001b4a:	3301      	adds	r3, #1
 8001b4c:	60bb      	str	r3, [r7, #8]
 8001b4e:	697a      	ldr	r2, [r7, #20]
 8001b50:	429a      	cmp	r2, r3
 8001b52:	d307      	bcc.n	8001b64 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f003 0301 	and.w	r3, r3, #1
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d1f2      	bne.n	8001b48 <HAL_DMA_IRQHandler+0x2cc>
 8001b62:	e000      	b.n	8001b66 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001b64:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	2201      	movs	r2, #1
 8001b6a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	2200      	movs	r2, #0
 8001b72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d005      	beq.n	8001b8a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b82:	6878      	ldr	r0, [r7, #4]
 8001b84:	4798      	blx	r3
 8001b86:	e000      	b.n	8001b8a <HAL_DMA_IRQHandler+0x30e>
        return;
 8001b88:	bf00      	nop
    }
  }
}
 8001b8a:	3718      	adds	r7, #24
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	bd80      	pop	{r7, pc}

08001b90 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001b90:	b480      	push	{r7}
 8001b92:	b085      	sub	sp, #20
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	60f8      	str	r0, [r7, #12]
 8001b98:	60b9      	str	r1, [r7, #8]
 8001b9a:	607a      	str	r2, [r7, #4]
 8001b9c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	681a      	ldr	r2, [r3, #0]
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001bac:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	683a      	ldr	r2, [r7, #0]
 8001bb4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	689b      	ldr	r3, [r3, #8]
 8001bba:	2b40      	cmp	r3, #64	; 0x40
 8001bbc:	d108      	bne.n	8001bd0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	687a      	ldr	r2, [r7, #4]
 8001bc4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	68ba      	ldr	r2, [r7, #8]
 8001bcc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001bce:	e007      	b.n	8001be0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	68ba      	ldr	r2, [r7, #8]
 8001bd6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	687a      	ldr	r2, [r7, #4]
 8001bde:	60da      	str	r2, [r3, #12]
}
 8001be0:	bf00      	nop
 8001be2:	3714      	adds	r7, #20
 8001be4:	46bd      	mov	sp, r7
 8001be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bea:	4770      	bx	lr

08001bec <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001bec:	b480      	push	{r7}
 8001bee:	b085      	sub	sp, #20
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	b2db      	uxtb	r3, r3
 8001bfa:	3b10      	subs	r3, #16
 8001bfc:	4a14      	ldr	r2, [pc, #80]	; (8001c50 <DMA_CalcBaseAndBitshift+0x64>)
 8001bfe:	fba2 2303 	umull	r2, r3, r2, r3
 8001c02:	091b      	lsrs	r3, r3, #4
 8001c04:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001c06:	4a13      	ldr	r2, [pc, #76]	; (8001c54 <DMA_CalcBaseAndBitshift+0x68>)
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	4413      	add	r3, r2
 8001c0c:	781b      	ldrb	r3, [r3, #0]
 8001c0e:	461a      	mov	r2, r3
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	2b03      	cmp	r3, #3
 8001c18:	d909      	bls.n	8001c2e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001c22:	f023 0303 	bic.w	r3, r3, #3
 8001c26:	1d1a      	adds	r2, r3, #4
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	659a      	str	r2, [r3, #88]	; 0x58
 8001c2c:	e007      	b.n	8001c3e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001c36:	f023 0303 	bic.w	r3, r3, #3
 8001c3a:	687a      	ldr	r2, [r7, #4]
 8001c3c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001c42:	4618      	mov	r0, r3
 8001c44:	3714      	adds	r7, #20
 8001c46:	46bd      	mov	sp, r7
 8001c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4c:	4770      	bx	lr
 8001c4e:	bf00      	nop
 8001c50:	aaaaaaab 	.word	0xaaaaaaab
 8001c54:	080093d8 	.word	0x080093d8

08001c58 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	b085      	sub	sp, #20
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001c60:	2300      	movs	r3, #0
 8001c62:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c68:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	699b      	ldr	r3, [r3, #24]
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d11f      	bne.n	8001cb2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001c72:	68bb      	ldr	r3, [r7, #8]
 8001c74:	2b03      	cmp	r3, #3
 8001c76:	d856      	bhi.n	8001d26 <DMA_CheckFifoParam+0xce>
 8001c78:	a201      	add	r2, pc, #4	; (adr r2, 8001c80 <DMA_CheckFifoParam+0x28>)
 8001c7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c7e:	bf00      	nop
 8001c80:	08001c91 	.word	0x08001c91
 8001c84:	08001ca3 	.word	0x08001ca3
 8001c88:	08001c91 	.word	0x08001c91
 8001c8c:	08001d27 	.word	0x08001d27
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c94:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d046      	beq.n	8001d2a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001c9c:	2301      	movs	r3, #1
 8001c9e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001ca0:	e043      	b.n	8001d2a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ca6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001caa:	d140      	bne.n	8001d2e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001cac:	2301      	movs	r3, #1
 8001cae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001cb0:	e03d      	b.n	8001d2e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	699b      	ldr	r3, [r3, #24]
 8001cb6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001cba:	d121      	bne.n	8001d00 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001cbc:	68bb      	ldr	r3, [r7, #8]
 8001cbe:	2b03      	cmp	r3, #3
 8001cc0:	d837      	bhi.n	8001d32 <DMA_CheckFifoParam+0xda>
 8001cc2:	a201      	add	r2, pc, #4	; (adr r2, 8001cc8 <DMA_CheckFifoParam+0x70>)
 8001cc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cc8:	08001cd9 	.word	0x08001cd9
 8001ccc:	08001cdf 	.word	0x08001cdf
 8001cd0:	08001cd9 	.word	0x08001cd9
 8001cd4:	08001cf1 	.word	0x08001cf1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001cd8:	2301      	movs	r3, #1
 8001cda:	73fb      	strb	r3, [r7, #15]
      break;
 8001cdc:	e030      	b.n	8001d40 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ce2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d025      	beq.n	8001d36 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001cea:	2301      	movs	r3, #1
 8001cec:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001cee:	e022      	b.n	8001d36 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cf4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001cf8:	d11f      	bne.n	8001d3a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001cfe:	e01c      	b.n	8001d3a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001d00:	68bb      	ldr	r3, [r7, #8]
 8001d02:	2b02      	cmp	r3, #2
 8001d04:	d903      	bls.n	8001d0e <DMA_CheckFifoParam+0xb6>
 8001d06:	68bb      	ldr	r3, [r7, #8]
 8001d08:	2b03      	cmp	r3, #3
 8001d0a:	d003      	beq.n	8001d14 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001d0c:	e018      	b.n	8001d40 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001d0e:	2301      	movs	r3, #1
 8001d10:	73fb      	strb	r3, [r7, #15]
      break;
 8001d12:	e015      	b.n	8001d40 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d18:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d00e      	beq.n	8001d3e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001d20:	2301      	movs	r3, #1
 8001d22:	73fb      	strb	r3, [r7, #15]
      break;
 8001d24:	e00b      	b.n	8001d3e <DMA_CheckFifoParam+0xe6>
      break;
 8001d26:	bf00      	nop
 8001d28:	e00a      	b.n	8001d40 <DMA_CheckFifoParam+0xe8>
      break;
 8001d2a:	bf00      	nop
 8001d2c:	e008      	b.n	8001d40 <DMA_CheckFifoParam+0xe8>
      break;
 8001d2e:	bf00      	nop
 8001d30:	e006      	b.n	8001d40 <DMA_CheckFifoParam+0xe8>
      break;
 8001d32:	bf00      	nop
 8001d34:	e004      	b.n	8001d40 <DMA_CheckFifoParam+0xe8>
      break;
 8001d36:	bf00      	nop
 8001d38:	e002      	b.n	8001d40 <DMA_CheckFifoParam+0xe8>
      break;   
 8001d3a:	bf00      	nop
 8001d3c:	e000      	b.n	8001d40 <DMA_CheckFifoParam+0xe8>
      break;
 8001d3e:	bf00      	nop
    }
  } 
  
  return status; 
 8001d40:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d42:	4618      	mov	r0, r3
 8001d44:	3714      	adds	r7, #20
 8001d46:	46bd      	mov	sp, r7
 8001d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4c:	4770      	bx	lr
 8001d4e:	bf00      	nop

08001d50 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d50:	b480      	push	{r7}
 8001d52:	b089      	sub	sp, #36	; 0x24
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
 8001d58:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001d62:	2300      	movs	r3, #0
 8001d64:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d66:	2300      	movs	r3, #0
 8001d68:	61fb      	str	r3, [r7, #28]
 8001d6a:	e159      	b.n	8002020 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001d6c:	2201      	movs	r2, #1
 8001d6e:	69fb      	ldr	r3, [r7, #28]
 8001d70:	fa02 f303 	lsl.w	r3, r2, r3
 8001d74:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d76:	683b      	ldr	r3, [r7, #0]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	697a      	ldr	r2, [r7, #20]
 8001d7c:	4013      	ands	r3, r2
 8001d7e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001d80:	693a      	ldr	r2, [r7, #16]
 8001d82:	697b      	ldr	r3, [r7, #20]
 8001d84:	429a      	cmp	r2, r3
 8001d86:	f040 8148 	bne.w	800201a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	685b      	ldr	r3, [r3, #4]
 8001d8e:	f003 0303 	and.w	r3, r3, #3
 8001d92:	2b01      	cmp	r3, #1
 8001d94:	d005      	beq.n	8001da2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	685b      	ldr	r3, [r3, #4]
 8001d9a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d9e:	2b02      	cmp	r3, #2
 8001da0:	d130      	bne.n	8001e04 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	689b      	ldr	r3, [r3, #8]
 8001da6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001da8:	69fb      	ldr	r3, [r7, #28]
 8001daa:	005b      	lsls	r3, r3, #1
 8001dac:	2203      	movs	r2, #3
 8001dae:	fa02 f303 	lsl.w	r3, r2, r3
 8001db2:	43db      	mvns	r3, r3
 8001db4:	69ba      	ldr	r2, [r7, #24]
 8001db6:	4013      	ands	r3, r2
 8001db8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	68da      	ldr	r2, [r3, #12]
 8001dbe:	69fb      	ldr	r3, [r7, #28]
 8001dc0:	005b      	lsls	r3, r3, #1
 8001dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc6:	69ba      	ldr	r2, [r7, #24]
 8001dc8:	4313      	orrs	r3, r2
 8001dca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	69ba      	ldr	r2, [r7, #24]
 8001dd0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	685b      	ldr	r3, [r3, #4]
 8001dd6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001dd8:	2201      	movs	r2, #1
 8001dda:	69fb      	ldr	r3, [r7, #28]
 8001ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8001de0:	43db      	mvns	r3, r3
 8001de2:	69ba      	ldr	r2, [r7, #24]
 8001de4:	4013      	ands	r3, r2
 8001de6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	685b      	ldr	r3, [r3, #4]
 8001dec:	091b      	lsrs	r3, r3, #4
 8001dee:	f003 0201 	and.w	r2, r3, #1
 8001df2:	69fb      	ldr	r3, [r7, #28]
 8001df4:	fa02 f303 	lsl.w	r3, r2, r3
 8001df8:	69ba      	ldr	r2, [r7, #24]
 8001dfa:	4313      	orrs	r3, r2
 8001dfc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	69ba      	ldr	r2, [r7, #24]
 8001e02:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	685b      	ldr	r3, [r3, #4]
 8001e08:	f003 0303 	and.w	r3, r3, #3
 8001e0c:	2b03      	cmp	r3, #3
 8001e0e:	d017      	beq.n	8001e40 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	68db      	ldr	r3, [r3, #12]
 8001e14:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001e16:	69fb      	ldr	r3, [r7, #28]
 8001e18:	005b      	lsls	r3, r3, #1
 8001e1a:	2203      	movs	r2, #3
 8001e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e20:	43db      	mvns	r3, r3
 8001e22:	69ba      	ldr	r2, [r7, #24]
 8001e24:	4013      	ands	r3, r2
 8001e26:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	689a      	ldr	r2, [r3, #8]
 8001e2c:	69fb      	ldr	r3, [r7, #28]
 8001e2e:	005b      	lsls	r3, r3, #1
 8001e30:	fa02 f303 	lsl.w	r3, r2, r3
 8001e34:	69ba      	ldr	r2, [r7, #24]
 8001e36:	4313      	orrs	r3, r2
 8001e38:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	69ba      	ldr	r2, [r7, #24]
 8001e3e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	685b      	ldr	r3, [r3, #4]
 8001e44:	f003 0303 	and.w	r3, r3, #3
 8001e48:	2b02      	cmp	r3, #2
 8001e4a:	d123      	bne.n	8001e94 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001e4c:	69fb      	ldr	r3, [r7, #28]
 8001e4e:	08da      	lsrs	r2, r3, #3
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	3208      	adds	r2, #8
 8001e54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e58:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001e5a:	69fb      	ldr	r3, [r7, #28]
 8001e5c:	f003 0307 	and.w	r3, r3, #7
 8001e60:	009b      	lsls	r3, r3, #2
 8001e62:	220f      	movs	r2, #15
 8001e64:	fa02 f303 	lsl.w	r3, r2, r3
 8001e68:	43db      	mvns	r3, r3
 8001e6a:	69ba      	ldr	r2, [r7, #24]
 8001e6c:	4013      	ands	r3, r2
 8001e6e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	691a      	ldr	r2, [r3, #16]
 8001e74:	69fb      	ldr	r3, [r7, #28]
 8001e76:	f003 0307 	and.w	r3, r3, #7
 8001e7a:	009b      	lsls	r3, r3, #2
 8001e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e80:	69ba      	ldr	r2, [r7, #24]
 8001e82:	4313      	orrs	r3, r2
 8001e84:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001e86:	69fb      	ldr	r3, [r7, #28]
 8001e88:	08da      	lsrs	r2, r3, #3
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	3208      	adds	r2, #8
 8001e8e:	69b9      	ldr	r1, [r7, #24]
 8001e90:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001e9a:	69fb      	ldr	r3, [r7, #28]
 8001e9c:	005b      	lsls	r3, r3, #1
 8001e9e:	2203      	movs	r2, #3
 8001ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea4:	43db      	mvns	r3, r3
 8001ea6:	69ba      	ldr	r2, [r7, #24]
 8001ea8:	4013      	ands	r3, r2
 8001eaa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	f003 0203 	and.w	r2, r3, #3
 8001eb4:	69fb      	ldr	r3, [r7, #28]
 8001eb6:	005b      	lsls	r3, r3, #1
 8001eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ebc:	69ba      	ldr	r2, [r7, #24]
 8001ebe:	4313      	orrs	r3, r2
 8001ec0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	69ba      	ldr	r2, [r7, #24]
 8001ec6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	685b      	ldr	r3, [r3, #4]
 8001ecc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	f000 80a2 	beq.w	800201a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	60fb      	str	r3, [r7, #12]
 8001eda:	4b57      	ldr	r3, [pc, #348]	; (8002038 <HAL_GPIO_Init+0x2e8>)
 8001edc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ede:	4a56      	ldr	r2, [pc, #344]	; (8002038 <HAL_GPIO_Init+0x2e8>)
 8001ee0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ee4:	6453      	str	r3, [r2, #68]	; 0x44
 8001ee6:	4b54      	ldr	r3, [pc, #336]	; (8002038 <HAL_GPIO_Init+0x2e8>)
 8001ee8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001eee:	60fb      	str	r3, [r7, #12]
 8001ef0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001ef2:	4a52      	ldr	r2, [pc, #328]	; (800203c <HAL_GPIO_Init+0x2ec>)
 8001ef4:	69fb      	ldr	r3, [r7, #28]
 8001ef6:	089b      	lsrs	r3, r3, #2
 8001ef8:	3302      	adds	r3, #2
 8001efa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001efe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001f00:	69fb      	ldr	r3, [r7, #28]
 8001f02:	f003 0303 	and.w	r3, r3, #3
 8001f06:	009b      	lsls	r3, r3, #2
 8001f08:	220f      	movs	r2, #15
 8001f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f0e:	43db      	mvns	r3, r3
 8001f10:	69ba      	ldr	r2, [r7, #24]
 8001f12:	4013      	ands	r3, r2
 8001f14:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	4a49      	ldr	r2, [pc, #292]	; (8002040 <HAL_GPIO_Init+0x2f0>)
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d019      	beq.n	8001f52 <HAL_GPIO_Init+0x202>
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	4a48      	ldr	r2, [pc, #288]	; (8002044 <HAL_GPIO_Init+0x2f4>)
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d013      	beq.n	8001f4e <HAL_GPIO_Init+0x1fe>
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	4a47      	ldr	r2, [pc, #284]	; (8002048 <HAL_GPIO_Init+0x2f8>)
 8001f2a:	4293      	cmp	r3, r2
 8001f2c:	d00d      	beq.n	8001f4a <HAL_GPIO_Init+0x1fa>
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	4a46      	ldr	r2, [pc, #280]	; (800204c <HAL_GPIO_Init+0x2fc>)
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d007      	beq.n	8001f46 <HAL_GPIO_Init+0x1f6>
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	4a45      	ldr	r2, [pc, #276]	; (8002050 <HAL_GPIO_Init+0x300>)
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	d101      	bne.n	8001f42 <HAL_GPIO_Init+0x1f2>
 8001f3e:	2304      	movs	r3, #4
 8001f40:	e008      	b.n	8001f54 <HAL_GPIO_Init+0x204>
 8001f42:	2307      	movs	r3, #7
 8001f44:	e006      	b.n	8001f54 <HAL_GPIO_Init+0x204>
 8001f46:	2303      	movs	r3, #3
 8001f48:	e004      	b.n	8001f54 <HAL_GPIO_Init+0x204>
 8001f4a:	2302      	movs	r3, #2
 8001f4c:	e002      	b.n	8001f54 <HAL_GPIO_Init+0x204>
 8001f4e:	2301      	movs	r3, #1
 8001f50:	e000      	b.n	8001f54 <HAL_GPIO_Init+0x204>
 8001f52:	2300      	movs	r3, #0
 8001f54:	69fa      	ldr	r2, [r7, #28]
 8001f56:	f002 0203 	and.w	r2, r2, #3
 8001f5a:	0092      	lsls	r2, r2, #2
 8001f5c:	4093      	lsls	r3, r2
 8001f5e:	69ba      	ldr	r2, [r7, #24]
 8001f60:	4313      	orrs	r3, r2
 8001f62:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001f64:	4935      	ldr	r1, [pc, #212]	; (800203c <HAL_GPIO_Init+0x2ec>)
 8001f66:	69fb      	ldr	r3, [r7, #28]
 8001f68:	089b      	lsrs	r3, r3, #2
 8001f6a:	3302      	adds	r3, #2
 8001f6c:	69ba      	ldr	r2, [r7, #24]
 8001f6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001f72:	4b38      	ldr	r3, [pc, #224]	; (8002054 <HAL_GPIO_Init+0x304>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f78:	693b      	ldr	r3, [r7, #16]
 8001f7a:	43db      	mvns	r3, r3
 8001f7c:	69ba      	ldr	r2, [r7, #24]
 8001f7e:	4013      	ands	r3, r2
 8001f80:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	685b      	ldr	r3, [r3, #4]
 8001f86:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d003      	beq.n	8001f96 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001f8e:	69ba      	ldr	r2, [r7, #24]
 8001f90:	693b      	ldr	r3, [r7, #16]
 8001f92:	4313      	orrs	r3, r2
 8001f94:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001f96:	4a2f      	ldr	r2, [pc, #188]	; (8002054 <HAL_GPIO_Init+0x304>)
 8001f98:	69bb      	ldr	r3, [r7, #24]
 8001f9a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001f9c:	4b2d      	ldr	r3, [pc, #180]	; (8002054 <HAL_GPIO_Init+0x304>)
 8001f9e:	685b      	ldr	r3, [r3, #4]
 8001fa0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fa2:	693b      	ldr	r3, [r7, #16]
 8001fa4:	43db      	mvns	r3, r3
 8001fa6:	69ba      	ldr	r2, [r7, #24]
 8001fa8:	4013      	ands	r3, r2
 8001faa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	685b      	ldr	r3, [r3, #4]
 8001fb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d003      	beq.n	8001fc0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001fb8:	69ba      	ldr	r2, [r7, #24]
 8001fba:	693b      	ldr	r3, [r7, #16]
 8001fbc:	4313      	orrs	r3, r2
 8001fbe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001fc0:	4a24      	ldr	r2, [pc, #144]	; (8002054 <HAL_GPIO_Init+0x304>)
 8001fc2:	69bb      	ldr	r3, [r7, #24]
 8001fc4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001fc6:	4b23      	ldr	r3, [pc, #140]	; (8002054 <HAL_GPIO_Init+0x304>)
 8001fc8:	689b      	ldr	r3, [r3, #8]
 8001fca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fcc:	693b      	ldr	r3, [r7, #16]
 8001fce:	43db      	mvns	r3, r3
 8001fd0:	69ba      	ldr	r2, [r7, #24]
 8001fd2:	4013      	ands	r3, r2
 8001fd4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	685b      	ldr	r3, [r3, #4]
 8001fda:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d003      	beq.n	8001fea <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001fe2:	69ba      	ldr	r2, [r7, #24]
 8001fe4:	693b      	ldr	r3, [r7, #16]
 8001fe6:	4313      	orrs	r3, r2
 8001fe8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001fea:	4a1a      	ldr	r2, [pc, #104]	; (8002054 <HAL_GPIO_Init+0x304>)
 8001fec:	69bb      	ldr	r3, [r7, #24]
 8001fee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ff0:	4b18      	ldr	r3, [pc, #96]	; (8002054 <HAL_GPIO_Init+0x304>)
 8001ff2:	68db      	ldr	r3, [r3, #12]
 8001ff4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ff6:	693b      	ldr	r3, [r7, #16]
 8001ff8:	43db      	mvns	r3, r3
 8001ffa:	69ba      	ldr	r2, [r7, #24]
 8001ffc:	4013      	ands	r3, r2
 8001ffe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002008:	2b00      	cmp	r3, #0
 800200a:	d003      	beq.n	8002014 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800200c:	69ba      	ldr	r2, [r7, #24]
 800200e:	693b      	ldr	r3, [r7, #16]
 8002010:	4313      	orrs	r3, r2
 8002012:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002014:	4a0f      	ldr	r2, [pc, #60]	; (8002054 <HAL_GPIO_Init+0x304>)
 8002016:	69bb      	ldr	r3, [r7, #24]
 8002018:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800201a:	69fb      	ldr	r3, [r7, #28]
 800201c:	3301      	adds	r3, #1
 800201e:	61fb      	str	r3, [r7, #28]
 8002020:	69fb      	ldr	r3, [r7, #28]
 8002022:	2b0f      	cmp	r3, #15
 8002024:	f67f aea2 	bls.w	8001d6c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002028:	bf00      	nop
 800202a:	bf00      	nop
 800202c:	3724      	adds	r7, #36	; 0x24
 800202e:	46bd      	mov	sp, r7
 8002030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002034:	4770      	bx	lr
 8002036:	bf00      	nop
 8002038:	40023800 	.word	0x40023800
 800203c:	40013800 	.word	0x40013800
 8002040:	40020000 	.word	0x40020000
 8002044:	40020400 	.word	0x40020400
 8002048:	40020800 	.word	0x40020800
 800204c:	40020c00 	.word	0x40020c00
 8002050:	40021000 	.word	0x40021000
 8002054:	40013c00 	.word	0x40013c00

08002058 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002058:	b480      	push	{r7}
 800205a:	b087      	sub	sp, #28
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
 8002060:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002062:	2300      	movs	r3, #0
 8002064:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8002066:	2300      	movs	r3, #0
 8002068:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 800206a:	2300      	movs	r3, #0
 800206c:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800206e:	2300      	movs	r3, #0
 8002070:	617b      	str	r3, [r7, #20]
 8002072:	e0bb      	b.n	80021ec <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002074:	2201      	movs	r2, #1
 8002076:	697b      	ldr	r3, [r7, #20]
 8002078:	fa02 f303 	lsl.w	r3, r2, r3
 800207c:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 800207e:	683a      	ldr	r2, [r7, #0]
 8002080:	693b      	ldr	r3, [r7, #16]
 8002082:	4013      	ands	r3, r2
 8002084:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8002086:	68fa      	ldr	r2, [r7, #12]
 8002088:	693b      	ldr	r3, [r7, #16]
 800208a:	429a      	cmp	r2, r3
 800208c:	f040 80ab 	bne.w	80021e6 <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8002090:	4a5c      	ldr	r2, [pc, #368]	; (8002204 <HAL_GPIO_DeInit+0x1ac>)
 8002092:	697b      	ldr	r3, [r7, #20]
 8002094:	089b      	lsrs	r3, r3, #2
 8002096:	3302      	adds	r3, #2
 8002098:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800209c:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 800209e:	697b      	ldr	r3, [r7, #20]
 80020a0:	f003 0303 	and.w	r3, r3, #3
 80020a4:	009b      	lsls	r3, r3, #2
 80020a6:	220f      	movs	r2, #15
 80020a8:	fa02 f303 	lsl.w	r3, r2, r3
 80020ac:	68ba      	ldr	r2, [r7, #8]
 80020ae:	4013      	ands	r3, r2
 80020b0:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	4a54      	ldr	r2, [pc, #336]	; (8002208 <HAL_GPIO_DeInit+0x1b0>)
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d019      	beq.n	80020ee <HAL_GPIO_DeInit+0x96>
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	4a53      	ldr	r2, [pc, #332]	; (800220c <HAL_GPIO_DeInit+0x1b4>)
 80020be:	4293      	cmp	r3, r2
 80020c0:	d013      	beq.n	80020ea <HAL_GPIO_DeInit+0x92>
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	4a52      	ldr	r2, [pc, #328]	; (8002210 <HAL_GPIO_DeInit+0x1b8>)
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d00d      	beq.n	80020e6 <HAL_GPIO_DeInit+0x8e>
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	4a51      	ldr	r2, [pc, #324]	; (8002214 <HAL_GPIO_DeInit+0x1bc>)
 80020ce:	4293      	cmp	r3, r2
 80020d0:	d007      	beq.n	80020e2 <HAL_GPIO_DeInit+0x8a>
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	4a50      	ldr	r2, [pc, #320]	; (8002218 <HAL_GPIO_DeInit+0x1c0>)
 80020d6:	4293      	cmp	r3, r2
 80020d8:	d101      	bne.n	80020de <HAL_GPIO_DeInit+0x86>
 80020da:	2304      	movs	r3, #4
 80020dc:	e008      	b.n	80020f0 <HAL_GPIO_DeInit+0x98>
 80020de:	2307      	movs	r3, #7
 80020e0:	e006      	b.n	80020f0 <HAL_GPIO_DeInit+0x98>
 80020e2:	2303      	movs	r3, #3
 80020e4:	e004      	b.n	80020f0 <HAL_GPIO_DeInit+0x98>
 80020e6:	2302      	movs	r3, #2
 80020e8:	e002      	b.n	80020f0 <HAL_GPIO_DeInit+0x98>
 80020ea:	2301      	movs	r3, #1
 80020ec:	e000      	b.n	80020f0 <HAL_GPIO_DeInit+0x98>
 80020ee:	2300      	movs	r3, #0
 80020f0:	697a      	ldr	r2, [r7, #20]
 80020f2:	f002 0203 	and.w	r2, r2, #3
 80020f6:	0092      	lsls	r2, r2, #2
 80020f8:	4093      	lsls	r3, r2
 80020fa:	68ba      	ldr	r2, [r7, #8]
 80020fc:	429a      	cmp	r2, r3
 80020fe:	d132      	bne.n	8002166 <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8002100:	4b46      	ldr	r3, [pc, #280]	; (800221c <HAL_GPIO_DeInit+0x1c4>)
 8002102:	681a      	ldr	r2, [r3, #0]
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	43db      	mvns	r3, r3
 8002108:	4944      	ldr	r1, [pc, #272]	; (800221c <HAL_GPIO_DeInit+0x1c4>)
 800210a:	4013      	ands	r3, r2
 800210c:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800210e:	4b43      	ldr	r3, [pc, #268]	; (800221c <HAL_GPIO_DeInit+0x1c4>)
 8002110:	685a      	ldr	r2, [r3, #4]
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	43db      	mvns	r3, r3
 8002116:	4941      	ldr	r1, [pc, #260]	; (800221c <HAL_GPIO_DeInit+0x1c4>)
 8002118:	4013      	ands	r3, r2
 800211a:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800211c:	4b3f      	ldr	r3, [pc, #252]	; (800221c <HAL_GPIO_DeInit+0x1c4>)
 800211e:	689a      	ldr	r2, [r3, #8]
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	43db      	mvns	r3, r3
 8002124:	493d      	ldr	r1, [pc, #244]	; (800221c <HAL_GPIO_DeInit+0x1c4>)
 8002126:	4013      	ands	r3, r2
 8002128:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 800212a:	4b3c      	ldr	r3, [pc, #240]	; (800221c <HAL_GPIO_DeInit+0x1c4>)
 800212c:	68da      	ldr	r2, [r3, #12]
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	43db      	mvns	r3, r3
 8002132:	493a      	ldr	r1, [pc, #232]	; (800221c <HAL_GPIO_DeInit+0x1c4>)
 8002134:	4013      	ands	r3, r2
 8002136:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8002138:	697b      	ldr	r3, [r7, #20]
 800213a:	f003 0303 	and.w	r3, r3, #3
 800213e:	009b      	lsls	r3, r3, #2
 8002140:	220f      	movs	r2, #15
 8002142:	fa02 f303 	lsl.w	r3, r2, r3
 8002146:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8002148:	4a2e      	ldr	r2, [pc, #184]	; (8002204 <HAL_GPIO_DeInit+0x1ac>)
 800214a:	697b      	ldr	r3, [r7, #20]
 800214c:	089b      	lsrs	r3, r3, #2
 800214e:	3302      	adds	r3, #2
 8002150:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002154:	68bb      	ldr	r3, [r7, #8]
 8002156:	43da      	mvns	r2, r3
 8002158:	482a      	ldr	r0, [pc, #168]	; (8002204 <HAL_GPIO_DeInit+0x1ac>)
 800215a:	697b      	ldr	r3, [r7, #20]
 800215c:	089b      	lsrs	r3, r3, #2
 800215e:	400a      	ands	r2, r1
 8002160:	3302      	adds	r3, #2
 8002162:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681a      	ldr	r2, [r3, #0]
 800216a:	697b      	ldr	r3, [r7, #20]
 800216c:	005b      	lsls	r3, r3, #1
 800216e:	2103      	movs	r1, #3
 8002170:	fa01 f303 	lsl.w	r3, r1, r3
 8002174:	43db      	mvns	r3, r3
 8002176:	401a      	ands	r2, r3
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800217c:	697b      	ldr	r3, [r7, #20]
 800217e:	08da      	lsrs	r2, r3, #3
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	3208      	adds	r2, #8
 8002184:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002188:	697b      	ldr	r3, [r7, #20]
 800218a:	f003 0307 	and.w	r3, r3, #7
 800218e:	009b      	lsls	r3, r3, #2
 8002190:	220f      	movs	r2, #15
 8002192:	fa02 f303 	lsl.w	r3, r2, r3
 8002196:	43db      	mvns	r3, r3
 8002198:	697a      	ldr	r2, [r7, #20]
 800219a:	08d2      	lsrs	r2, r2, #3
 800219c:	4019      	ands	r1, r3
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	3208      	adds	r2, #8
 80021a2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	68da      	ldr	r2, [r3, #12]
 80021aa:	697b      	ldr	r3, [r7, #20]
 80021ac:	005b      	lsls	r3, r3, #1
 80021ae:	2103      	movs	r1, #3
 80021b0:	fa01 f303 	lsl.w	r3, r1, r3
 80021b4:	43db      	mvns	r3, r3
 80021b6:	401a      	ands	r2, r3
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	685a      	ldr	r2, [r3, #4]
 80021c0:	2101      	movs	r1, #1
 80021c2:	697b      	ldr	r3, [r7, #20]
 80021c4:	fa01 f303 	lsl.w	r3, r1, r3
 80021c8:	43db      	mvns	r3, r3
 80021ca:	401a      	ands	r2, r3
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	689a      	ldr	r2, [r3, #8]
 80021d4:	697b      	ldr	r3, [r7, #20]
 80021d6:	005b      	lsls	r3, r3, #1
 80021d8:	2103      	movs	r1, #3
 80021da:	fa01 f303 	lsl.w	r3, r1, r3
 80021de:	43db      	mvns	r3, r3
 80021e0:	401a      	ands	r2, r3
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80021e6:	697b      	ldr	r3, [r7, #20]
 80021e8:	3301      	adds	r3, #1
 80021ea:	617b      	str	r3, [r7, #20]
 80021ec:	697b      	ldr	r3, [r7, #20]
 80021ee:	2b0f      	cmp	r3, #15
 80021f0:	f67f af40 	bls.w	8002074 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 80021f4:	bf00      	nop
 80021f6:	bf00      	nop
 80021f8:	371c      	adds	r7, #28
 80021fa:	46bd      	mov	sp, r7
 80021fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002200:	4770      	bx	lr
 8002202:	bf00      	nop
 8002204:	40013800 	.word	0x40013800
 8002208:	40020000 	.word	0x40020000
 800220c:	40020400 	.word	0x40020400
 8002210:	40020800 	.word	0x40020800
 8002214:	40020c00 	.word	0x40020c00
 8002218:	40021000 	.word	0x40021000
 800221c:	40013c00 	.word	0x40013c00

08002220 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002220:	b480      	push	{r7}
 8002222:	b083      	sub	sp, #12
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
 8002228:	460b      	mov	r3, r1
 800222a:	807b      	strh	r3, [r7, #2]
 800222c:	4613      	mov	r3, r2
 800222e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002230:	787b      	ldrb	r3, [r7, #1]
 8002232:	2b00      	cmp	r3, #0
 8002234:	d003      	beq.n	800223e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002236:	887a      	ldrh	r2, [r7, #2]
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800223c:	e003      	b.n	8002246 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800223e:	887b      	ldrh	r3, [r7, #2]
 8002240:	041a      	lsls	r2, r3, #16
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	619a      	str	r2, [r3, #24]
}
 8002246:	bf00      	nop
 8002248:	370c      	adds	r7, #12
 800224a:	46bd      	mov	sp, r7
 800224c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002250:	4770      	bx	lr

08002252 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002252:	b480      	push	{r7}
 8002254:	b085      	sub	sp, #20
 8002256:	af00      	add	r7, sp, #0
 8002258:	6078      	str	r0, [r7, #4]
 800225a:	460b      	mov	r3, r1
 800225c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	695b      	ldr	r3, [r3, #20]
 8002262:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002264:	887a      	ldrh	r2, [r7, #2]
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	4013      	ands	r3, r2
 800226a:	041a      	lsls	r2, r3, #16
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	43d9      	mvns	r1, r3
 8002270:	887b      	ldrh	r3, [r7, #2]
 8002272:	400b      	ands	r3, r1
 8002274:	431a      	orrs	r2, r3
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	619a      	str	r2, [r3, #24]
}
 800227a:	bf00      	nop
 800227c:	3714      	adds	r7, #20
 800227e:	46bd      	mov	sp, r7
 8002280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002284:	4770      	bx	lr

08002286 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002286:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002288:	b08f      	sub	sp, #60	; 0x3c
 800228a:	af0a      	add	r7, sp, #40	; 0x28
 800228c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	2b00      	cmp	r3, #0
 8002292:	d101      	bne.n	8002298 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002294:	2301      	movs	r3, #1
 8002296:	e10f      	b.n	80024b8 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80022a4:	b2db      	uxtb	r3, r3
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d106      	bne.n	80022b8 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	2200      	movs	r2, #0
 80022ae:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80022b2:	6878      	ldr	r0, [r7, #4]
 80022b4:	f006 fd12 	bl	8008cdc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2203      	movs	r2, #3
 80022bc:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80022c0:	68bb      	ldr	r3, [r7, #8]
 80022c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d102      	bne.n	80022d2 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2200      	movs	r2, #0
 80022d0:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	4618      	mov	r0, r3
 80022d8:	f003 faef 	bl	80058ba <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	603b      	str	r3, [r7, #0]
 80022e2:	687e      	ldr	r6, [r7, #4]
 80022e4:	466d      	mov	r5, sp
 80022e6:	f106 0410 	add.w	r4, r6, #16
 80022ea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80022ec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80022ee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80022f0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80022f2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80022f6:	e885 0003 	stmia.w	r5, {r0, r1}
 80022fa:	1d33      	adds	r3, r6, #4
 80022fc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80022fe:	6838      	ldr	r0, [r7, #0]
 8002300:	f003 f9c6 	bl	8005690 <USB_CoreInit>
 8002304:	4603      	mov	r3, r0
 8002306:	2b00      	cmp	r3, #0
 8002308:	d005      	beq.n	8002316 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	2202      	movs	r2, #2
 800230e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002312:	2301      	movs	r3, #1
 8002314:	e0d0      	b.n	80024b8 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	2100      	movs	r1, #0
 800231c:	4618      	mov	r0, r3
 800231e:	f003 fadd 	bl	80058dc <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002322:	2300      	movs	r3, #0
 8002324:	73fb      	strb	r3, [r7, #15]
 8002326:	e04a      	b.n	80023be <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002328:	7bfa      	ldrb	r2, [r7, #15]
 800232a:	6879      	ldr	r1, [r7, #4]
 800232c:	4613      	mov	r3, r2
 800232e:	00db      	lsls	r3, r3, #3
 8002330:	1a9b      	subs	r3, r3, r2
 8002332:	009b      	lsls	r3, r3, #2
 8002334:	440b      	add	r3, r1
 8002336:	333d      	adds	r3, #61	; 0x3d
 8002338:	2201      	movs	r2, #1
 800233a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800233c:	7bfa      	ldrb	r2, [r7, #15]
 800233e:	6879      	ldr	r1, [r7, #4]
 8002340:	4613      	mov	r3, r2
 8002342:	00db      	lsls	r3, r3, #3
 8002344:	1a9b      	subs	r3, r3, r2
 8002346:	009b      	lsls	r3, r3, #2
 8002348:	440b      	add	r3, r1
 800234a:	333c      	adds	r3, #60	; 0x3c
 800234c:	7bfa      	ldrb	r2, [r7, #15]
 800234e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002350:	7bfa      	ldrb	r2, [r7, #15]
 8002352:	7bfb      	ldrb	r3, [r7, #15]
 8002354:	b298      	uxth	r0, r3
 8002356:	6879      	ldr	r1, [r7, #4]
 8002358:	4613      	mov	r3, r2
 800235a:	00db      	lsls	r3, r3, #3
 800235c:	1a9b      	subs	r3, r3, r2
 800235e:	009b      	lsls	r3, r3, #2
 8002360:	440b      	add	r3, r1
 8002362:	3342      	adds	r3, #66	; 0x42
 8002364:	4602      	mov	r2, r0
 8002366:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002368:	7bfa      	ldrb	r2, [r7, #15]
 800236a:	6879      	ldr	r1, [r7, #4]
 800236c:	4613      	mov	r3, r2
 800236e:	00db      	lsls	r3, r3, #3
 8002370:	1a9b      	subs	r3, r3, r2
 8002372:	009b      	lsls	r3, r3, #2
 8002374:	440b      	add	r3, r1
 8002376:	333f      	adds	r3, #63	; 0x3f
 8002378:	2200      	movs	r2, #0
 800237a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800237c:	7bfa      	ldrb	r2, [r7, #15]
 800237e:	6879      	ldr	r1, [r7, #4]
 8002380:	4613      	mov	r3, r2
 8002382:	00db      	lsls	r3, r3, #3
 8002384:	1a9b      	subs	r3, r3, r2
 8002386:	009b      	lsls	r3, r3, #2
 8002388:	440b      	add	r3, r1
 800238a:	3344      	adds	r3, #68	; 0x44
 800238c:	2200      	movs	r2, #0
 800238e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002390:	7bfa      	ldrb	r2, [r7, #15]
 8002392:	6879      	ldr	r1, [r7, #4]
 8002394:	4613      	mov	r3, r2
 8002396:	00db      	lsls	r3, r3, #3
 8002398:	1a9b      	subs	r3, r3, r2
 800239a:	009b      	lsls	r3, r3, #2
 800239c:	440b      	add	r3, r1
 800239e:	3348      	adds	r3, #72	; 0x48
 80023a0:	2200      	movs	r2, #0
 80023a2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80023a4:	7bfa      	ldrb	r2, [r7, #15]
 80023a6:	6879      	ldr	r1, [r7, #4]
 80023a8:	4613      	mov	r3, r2
 80023aa:	00db      	lsls	r3, r3, #3
 80023ac:	1a9b      	subs	r3, r3, r2
 80023ae:	009b      	lsls	r3, r3, #2
 80023b0:	440b      	add	r3, r1
 80023b2:	3350      	adds	r3, #80	; 0x50
 80023b4:	2200      	movs	r2, #0
 80023b6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80023b8:	7bfb      	ldrb	r3, [r7, #15]
 80023ba:	3301      	adds	r3, #1
 80023bc:	73fb      	strb	r3, [r7, #15]
 80023be:	7bfa      	ldrb	r2, [r7, #15]
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	685b      	ldr	r3, [r3, #4]
 80023c4:	429a      	cmp	r2, r3
 80023c6:	d3af      	bcc.n	8002328 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80023c8:	2300      	movs	r3, #0
 80023ca:	73fb      	strb	r3, [r7, #15]
 80023cc:	e044      	b.n	8002458 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80023ce:	7bfa      	ldrb	r2, [r7, #15]
 80023d0:	6879      	ldr	r1, [r7, #4]
 80023d2:	4613      	mov	r3, r2
 80023d4:	00db      	lsls	r3, r3, #3
 80023d6:	1a9b      	subs	r3, r3, r2
 80023d8:	009b      	lsls	r3, r3, #2
 80023da:	440b      	add	r3, r1
 80023dc:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80023e0:	2200      	movs	r2, #0
 80023e2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80023e4:	7bfa      	ldrb	r2, [r7, #15]
 80023e6:	6879      	ldr	r1, [r7, #4]
 80023e8:	4613      	mov	r3, r2
 80023ea:	00db      	lsls	r3, r3, #3
 80023ec:	1a9b      	subs	r3, r3, r2
 80023ee:	009b      	lsls	r3, r3, #2
 80023f0:	440b      	add	r3, r1
 80023f2:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80023f6:	7bfa      	ldrb	r2, [r7, #15]
 80023f8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80023fa:	7bfa      	ldrb	r2, [r7, #15]
 80023fc:	6879      	ldr	r1, [r7, #4]
 80023fe:	4613      	mov	r3, r2
 8002400:	00db      	lsls	r3, r3, #3
 8002402:	1a9b      	subs	r3, r3, r2
 8002404:	009b      	lsls	r3, r3, #2
 8002406:	440b      	add	r3, r1
 8002408:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800240c:	2200      	movs	r2, #0
 800240e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002410:	7bfa      	ldrb	r2, [r7, #15]
 8002412:	6879      	ldr	r1, [r7, #4]
 8002414:	4613      	mov	r3, r2
 8002416:	00db      	lsls	r3, r3, #3
 8002418:	1a9b      	subs	r3, r3, r2
 800241a:	009b      	lsls	r3, r3, #2
 800241c:	440b      	add	r3, r1
 800241e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002422:	2200      	movs	r2, #0
 8002424:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002426:	7bfa      	ldrb	r2, [r7, #15]
 8002428:	6879      	ldr	r1, [r7, #4]
 800242a:	4613      	mov	r3, r2
 800242c:	00db      	lsls	r3, r3, #3
 800242e:	1a9b      	subs	r3, r3, r2
 8002430:	009b      	lsls	r3, r3, #2
 8002432:	440b      	add	r3, r1
 8002434:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002438:	2200      	movs	r2, #0
 800243a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800243c:	7bfa      	ldrb	r2, [r7, #15]
 800243e:	6879      	ldr	r1, [r7, #4]
 8002440:	4613      	mov	r3, r2
 8002442:	00db      	lsls	r3, r3, #3
 8002444:	1a9b      	subs	r3, r3, r2
 8002446:	009b      	lsls	r3, r3, #2
 8002448:	440b      	add	r3, r1
 800244a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800244e:	2200      	movs	r2, #0
 8002450:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002452:	7bfb      	ldrb	r3, [r7, #15]
 8002454:	3301      	adds	r3, #1
 8002456:	73fb      	strb	r3, [r7, #15]
 8002458:	7bfa      	ldrb	r2, [r7, #15]
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	685b      	ldr	r3, [r3, #4]
 800245e:	429a      	cmp	r2, r3
 8002460:	d3b5      	bcc.n	80023ce <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	603b      	str	r3, [r7, #0]
 8002468:	687e      	ldr	r6, [r7, #4]
 800246a:	466d      	mov	r5, sp
 800246c:	f106 0410 	add.w	r4, r6, #16
 8002470:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002472:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002474:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002476:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002478:	e894 0003 	ldmia.w	r4, {r0, r1}
 800247c:	e885 0003 	stmia.w	r5, {r0, r1}
 8002480:	1d33      	adds	r3, r6, #4
 8002482:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002484:	6838      	ldr	r0, [r7, #0]
 8002486:	f003 fa75 	bl	8005974 <USB_DevInit>
 800248a:	4603      	mov	r3, r0
 800248c:	2b00      	cmp	r3, #0
 800248e:	d005      	beq.n	800249c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2202      	movs	r2, #2
 8002494:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002498:	2301      	movs	r3, #1
 800249a:	e00d      	b.n	80024b8 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2200      	movs	r2, #0
 80024a0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2201      	movs	r2, #1
 80024a8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	4618      	mov	r0, r3
 80024b2:	f004 faf1 	bl	8006a98 <USB_DevDisconnect>

  return HAL_OK;
 80024b6:	2300      	movs	r3, #0
}
 80024b8:	4618      	mov	r0, r3
 80024ba:	3714      	adds	r7, #20
 80024bc:	46bd      	mov	sp, r7
 80024be:	bdf0      	pop	{r4, r5, r6, r7, pc}

080024c0 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b084      	sub	sp, #16
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80024d4:	2b01      	cmp	r3, #1
 80024d6:	d101      	bne.n	80024dc <HAL_PCD_Start+0x1c>
 80024d8:	2302      	movs	r3, #2
 80024da:	e020      	b.n	800251e <HAL_PCD_Start+0x5e>
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2201      	movs	r2, #1
 80024e0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024e8:	2b01      	cmp	r3, #1
 80024ea:	d109      	bne.n	8002500 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80024f0:	2b01      	cmp	r3, #1
 80024f2:	d005      	beq.n	8002500 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024f8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	4618      	mov	r0, r3
 8002506:	f003 f9c7 	bl	8005898 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	4618      	mov	r0, r3
 8002510:	f004 faa1 	bl	8006a56 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2200      	movs	r2, #0
 8002518:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800251c:	2300      	movs	r3, #0
}
 800251e:	4618      	mov	r0, r3
 8002520:	3710      	adds	r7, #16
 8002522:	46bd      	mov	sp, r7
 8002524:	bd80      	pop	{r7, pc}

08002526 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002526:	b590      	push	{r4, r7, lr}
 8002528:	b08d      	sub	sp, #52	; 0x34
 800252a:	af00      	add	r7, sp, #0
 800252c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002534:	6a3b      	ldr	r3, [r7, #32]
 8002536:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4618      	mov	r0, r3
 800253e:	f004 fb5f 	bl	8006c00 <USB_GetMode>
 8002542:	4603      	mov	r3, r0
 8002544:	2b00      	cmp	r3, #0
 8002546:	f040 839d 	bne.w	8002c84 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	4618      	mov	r0, r3
 8002550:	f004 fac3 	bl	8006ada <USB_ReadInterrupts>
 8002554:	4603      	mov	r3, r0
 8002556:	2b00      	cmp	r3, #0
 8002558:	f000 8393 	beq.w	8002c82 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	4618      	mov	r0, r3
 8002562:	f004 faba 	bl	8006ada <USB_ReadInterrupts>
 8002566:	4603      	mov	r3, r0
 8002568:	f003 0302 	and.w	r3, r3, #2
 800256c:	2b02      	cmp	r3, #2
 800256e:	d107      	bne.n	8002580 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	695a      	ldr	r2, [r3, #20]
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f002 0202 	and.w	r2, r2, #2
 800257e:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4618      	mov	r0, r3
 8002586:	f004 faa8 	bl	8006ada <USB_ReadInterrupts>
 800258a:	4603      	mov	r3, r0
 800258c:	f003 0310 	and.w	r3, r3, #16
 8002590:	2b10      	cmp	r3, #16
 8002592:	d161      	bne.n	8002658 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	699a      	ldr	r2, [r3, #24]
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f022 0210 	bic.w	r2, r2, #16
 80025a2:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 80025a4:	6a3b      	ldr	r3, [r7, #32]
 80025a6:	6a1b      	ldr	r3, [r3, #32]
 80025a8:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 80025aa:	69bb      	ldr	r3, [r7, #24]
 80025ac:	f003 020f 	and.w	r2, r3, #15
 80025b0:	4613      	mov	r3, r2
 80025b2:	00db      	lsls	r3, r3, #3
 80025b4:	1a9b      	subs	r3, r3, r2
 80025b6:	009b      	lsls	r3, r3, #2
 80025b8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80025bc:	687a      	ldr	r2, [r7, #4]
 80025be:	4413      	add	r3, r2
 80025c0:	3304      	adds	r3, #4
 80025c2:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80025c4:	69bb      	ldr	r3, [r7, #24]
 80025c6:	0c5b      	lsrs	r3, r3, #17
 80025c8:	f003 030f 	and.w	r3, r3, #15
 80025cc:	2b02      	cmp	r3, #2
 80025ce:	d124      	bne.n	800261a <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 80025d0:	69ba      	ldr	r2, [r7, #24]
 80025d2:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80025d6:	4013      	ands	r3, r2
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d035      	beq.n	8002648 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80025dc:	697b      	ldr	r3, [r7, #20]
 80025de:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 80025e0:	69bb      	ldr	r3, [r7, #24]
 80025e2:	091b      	lsrs	r3, r3, #4
 80025e4:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80025e6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80025ea:	b29b      	uxth	r3, r3
 80025ec:	461a      	mov	r2, r3
 80025ee:	6a38      	ldr	r0, [r7, #32]
 80025f0:	f004 f8df 	bl	80067b2 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80025f4:	697b      	ldr	r3, [r7, #20]
 80025f6:	68da      	ldr	r2, [r3, #12]
 80025f8:	69bb      	ldr	r3, [r7, #24]
 80025fa:	091b      	lsrs	r3, r3, #4
 80025fc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002600:	441a      	add	r2, r3
 8002602:	697b      	ldr	r3, [r7, #20]
 8002604:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002606:	697b      	ldr	r3, [r7, #20]
 8002608:	699a      	ldr	r2, [r3, #24]
 800260a:	69bb      	ldr	r3, [r7, #24]
 800260c:	091b      	lsrs	r3, r3, #4
 800260e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002612:	441a      	add	r2, r3
 8002614:	697b      	ldr	r3, [r7, #20]
 8002616:	619a      	str	r2, [r3, #24]
 8002618:	e016      	b.n	8002648 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 800261a:	69bb      	ldr	r3, [r7, #24]
 800261c:	0c5b      	lsrs	r3, r3, #17
 800261e:	f003 030f 	and.w	r3, r3, #15
 8002622:	2b06      	cmp	r3, #6
 8002624:	d110      	bne.n	8002648 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800262c:	2208      	movs	r2, #8
 800262e:	4619      	mov	r1, r3
 8002630:	6a38      	ldr	r0, [r7, #32]
 8002632:	f004 f8be 	bl	80067b2 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002636:	697b      	ldr	r3, [r7, #20]
 8002638:	699a      	ldr	r2, [r3, #24]
 800263a:	69bb      	ldr	r3, [r7, #24]
 800263c:	091b      	lsrs	r3, r3, #4
 800263e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002642:	441a      	add	r2, r3
 8002644:	697b      	ldr	r3, [r7, #20]
 8002646:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	699a      	ldr	r2, [r3, #24]
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f042 0210 	orr.w	r2, r2, #16
 8002656:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	4618      	mov	r0, r3
 800265e:	f004 fa3c 	bl	8006ada <USB_ReadInterrupts>
 8002662:	4603      	mov	r3, r0
 8002664:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002668:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800266c:	d16e      	bne.n	800274c <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 800266e:	2300      	movs	r3, #0
 8002670:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	4618      	mov	r0, r3
 8002678:	f004 fa42 	bl	8006b00 <USB_ReadDevAllOutEpInterrupt>
 800267c:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800267e:	e062      	b.n	8002746 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002680:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002682:	f003 0301 	and.w	r3, r3, #1
 8002686:	2b00      	cmp	r3, #0
 8002688:	d057      	beq.n	800273a <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002690:	b2d2      	uxtb	r2, r2
 8002692:	4611      	mov	r1, r2
 8002694:	4618      	mov	r0, r3
 8002696:	f004 fa67 	bl	8006b68 <USB_ReadDevOutEPInterrupt>
 800269a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800269c:	693b      	ldr	r3, [r7, #16]
 800269e:	f003 0301 	and.w	r3, r3, #1
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d00c      	beq.n	80026c0 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80026a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026a8:	015a      	lsls	r2, r3, #5
 80026aa:	69fb      	ldr	r3, [r7, #28]
 80026ac:	4413      	add	r3, r2
 80026ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80026b2:	461a      	mov	r2, r3
 80026b4:	2301      	movs	r3, #1
 80026b6:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80026b8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80026ba:	6878      	ldr	r0, [r7, #4]
 80026bc:	f000 fdb0 	bl	8003220 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80026c0:	693b      	ldr	r3, [r7, #16]
 80026c2:	f003 0308 	and.w	r3, r3, #8
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d00c      	beq.n	80026e4 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80026ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026cc:	015a      	lsls	r2, r3, #5
 80026ce:	69fb      	ldr	r3, [r7, #28]
 80026d0:	4413      	add	r3, r2
 80026d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80026d6:	461a      	mov	r2, r3
 80026d8:	2308      	movs	r3, #8
 80026da:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80026dc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80026de:	6878      	ldr	r0, [r7, #4]
 80026e0:	f000 feaa 	bl	8003438 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80026e4:	693b      	ldr	r3, [r7, #16]
 80026e6:	f003 0310 	and.w	r3, r3, #16
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d008      	beq.n	8002700 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80026ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026f0:	015a      	lsls	r2, r3, #5
 80026f2:	69fb      	ldr	r3, [r7, #28]
 80026f4:	4413      	add	r3, r2
 80026f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80026fa:	461a      	mov	r2, r3
 80026fc:	2310      	movs	r3, #16
 80026fe:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002700:	693b      	ldr	r3, [r7, #16]
 8002702:	f003 0320 	and.w	r3, r3, #32
 8002706:	2b00      	cmp	r3, #0
 8002708:	d008      	beq.n	800271c <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800270a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800270c:	015a      	lsls	r2, r3, #5
 800270e:	69fb      	ldr	r3, [r7, #28]
 8002710:	4413      	add	r3, r2
 8002712:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002716:	461a      	mov	r2, r3
 8002718:	2320      	movs	r3, #32
 800271a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800271c:	693b      	ldr	r3, [r7, #16]
 800271e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002722:	2b00      	cmp	r3, #0
 8002724:	d009      	beq.n	800273a <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002728:	015a      	lsls	r2, r3, #5
 800272a:	69fb      	ldr	r3, [r7, #28]
 800272c:	4413      	add	r3, r2
 800272e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002732:	461a      	mov	r2, r3
 8002734:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002738:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800273a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800273c:	3301      	adds	r3, #1
 800273e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002740:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002742:	085b      	lsrs	r3, r3, #1
 8002744:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002746:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002748:	2b00      	cmp	r3, #0
 800274a:	d199      	bne.n	8002680 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4618      	mov	r0, r3
 8002752:	f004 f9c2 	bl	8006ada <USB_ReadInterrupts>
 8002756:	4603      	mov	r3, r0
 8002758:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800275c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002760:	f040 80c0 	bne.w	80028e4 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	4618      	mov	r0, r3
 800276a:	f004 f9e3 	bl	8006b34 <USB_ReadDevAllInEpInterrupt>
 800276e:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002770:	2300      	movs	r3, #0
 8002772:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002774:	e0b2      	b.n	80028dc <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002776:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002778:	f003 0301 	and.w	r3, r3, #1
 800277c:	2b00      	cmp	r3, #0
 800277e:	f000 80a7 	beq.w	80028d0 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002788:	b2d2      	uxtb	r2, r2
 800278a:	4611      	mov	r1, r2
 800278c:	4618      	mov	r0, r3
 800278e:	f004 fa09 	bl	8006ba4 <USB_ReadDevInEPInterrupt>
 8002792:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002794:	693b      	ldr	r3, [r7, #16]
 8002796:	f003 0301 	and.w	r3, r3, #1
 800279a:	2b00      	cmp	r3, #0
 800279c:	d057      	beq.n	800284e <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800279e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027a0:	f003 030f 	and.w	r3, r3, #15
 80027a4:	2201      	movs	r2, #1
 80027a6:	fa02 f303 	lsl.w	r3, r2, r3
 80027aa:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80027ac:	69fb      	ldr	r3, [r7, #28]
 80027ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80027b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	43db      	mvns	r3, r3
 80027b8:	69f9      	ldr	r1, [r7, #28]
 80027ba:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80027be:	4013      	ands	r3, r2
 80027c0:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80027c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027c4:	015a      	lsls	r2, r3, #5
 80027c6:	69fb      	ldr	r3, [r7, #28]
 80027c8:	4413      	add	r3, r2
 80027ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80027ce:	461a      	mov	r2, r3
 80027d0:	2301      	movs	r3, #1
 80027d2:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	691b      	ldr	r3, [r3, #16]
 80027d8:	2b01      	cmp	r3, #1
 80027da:	d132      	bne.n	8002842 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80027dc:	6879      	ldr	r1, [r7, #4]
 80027de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027e0:	4613      	mov	r3, r2
 80027e2:	00db      	lsls	r3, r3, #3
 80027e4:	1a9b      	subs	r3, r3, r2
 80027e6:	009b      	lsls	r3, r3, #2
 80027e8:	440b      	add	r3, r1
 80027ea:	3348      	adds	r3, #72	; 0x48
 80027ec:	6819      	ldr	r1, [r3, #0]
 80027ee:	6878      	ldr	r0, [r7, #4]
 80027f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027f2:	4613      	mov	r3, r2
 80027f4:	00db      	lsls	r3, r3, #3
 80027f6:	1a9b      	subs	r3, r3, r2
 80027f8:	009b      	lsls	r3, r3, #2
 80027fa:	4403      	add	r3, r0
 80027fc:	3344      	adds	r3, #68	; 0x44
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	4419      	add	r1, r3
 8002802:	6878      	ldr	r0, [r7, #4]
 8002804:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002806:	4613      	mov	r3, r2
 8002808:	00db      	lsls	r3, r3, #3
 800280a:	1a9b      	subs	r3, r3, r2
 800280c:	009b      	lsls	r3, r3, #2
 800280e:	4403      	add	r3, r0
 8002810:	3348      	adds	r3, #72	; 0x48
 8002812:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002816:	2b00      	cmp	r3, #0
 8002818:	d113      	bne.n	8002842 <HAL_PCD_IRQHandler+0x31c>
 800281a:	6879      	ldr	r1, [r7, #4]
 800281c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800281e:	4613      	mov	r3, r2
 8002820:	00db      	lsls	r3, r3, #3
 8002822:	1a9b      	subs	r3, r3, r2
 8002824:	009b      	lsls	r3, r3, #2
 8002826:	440b      	add	r3, r1
 8002828:	3350      	adds	r3, #80	; 0x50
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	2b00      	cmp	r3, #0
 800282e:	d108      	bne.n	8002842 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6818      	ldr	r0, [r3, #0]
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800283a:	461a      	mov	r2, r3
 800283c:	2101      	movs	r1, #1
 800283e:	f004 fa11 	bl	8006c64 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002844:	b2db      	uxtb	r3, r3
 8002846:	4619      	mov	r1, r3
 8002848:	6878      	ldr	r0, [r7, #4]
 800284a:	f006 fac8 	bl	8008dde <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800284e:	693b      	ldr	r3, [r7, #16]
 8002850:	f003 0308 	and.w	r3, r3, #8
 8002854:	2b00      	cmp	r3, #0
 8002856:	d008      	beq.n	800286a <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800285a:	015a      	lsls	r2, r3, #5
 800285c:	69fb      	ldr	r3, [r7, #28]
 800285e:	4413      	add	r3, r2
 8002860:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002864:	461a      	mov	r2, r3
 8002866:	2308      	movs	r3, #8
 8002868:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800286a:	693b      	ldr	r3, [r7, #16]
 800286c:	f003 0310 	and.w	r3, r3, #16
 8002870:	2b00      	cmp	r3, #0
 8002872:	d008      	beq.n	8002886 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002876:	015a      	lsls	r2, r3, #5
 8002878:	69fb      	ldr	r3, [r7, #28]
 800287a:	4413      	add	r3, r2
 800287c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002880:	461a      	mov	r2, r3
 8002882:	2310      	movs	r3, #16
 8002884:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002886:	693b      	ldr	r3, [r7, #16]
 8002888:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800288c:	2b00      	cmp	r3, #0
 800288e:	d008      	beq.n	80028a2 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002892:	015a      	lsls	r2, r3, #5
 8002894:	69fb      	ldr	r3, [r7, #28]
 8002896:	4413      	add	r3, r2
 8002898:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800289c:	461a      	mov	r2, r3
 800289e:	2340      	movs	r3, #64	; 0x40
 80028a0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80028a2:	693b      	ldr	r3, [r7, #16]
 80028a4:	f003 0302 	and.w	r3, r3, #2
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d008      	beq.n	80028be <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80028ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ae:	015a      	lsls	r2, r3, #5
 80028b0:	69fb      	ldr	r3, [r7, #28]
 80028b2:	4413      	add	r3, r2
 80028b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80028b8:	461a      	mov	r2, r3
 80028ba:	2302      	movs	r3, #2
 80028bc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80028be:	693b      	ldr	r3, [r7, #16]
 80028c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d003      	beq.n	80028d0 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80028c8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80028ca:	6878      	ldr	r0, [r7, #4]
 80028cc:	f000 fc1b 	bl	8003106 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80028d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028d2:	3301      	adds	r3, #1
 80028d4:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80028d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028d8:	085b      	lsrs	r3, r3, #1
 80028da:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80028dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028de:	2b00      	cmp	r3, #0
 80028e0:	f47f af49 	bne.w	8002776 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	4618      	mov	r0, r3
 80028ea:	f004 f8f6 	bl	8006ada <USB_ReadInterrupts>
 80028ee:	4603      	mov	r3, r0
 80028f0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80028f4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80028f8:	d122      	bne.n	8002940 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80028fa:	69fb      	ldr	r3, [r7, #28]
 80028fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002900:	685b      	ldr	r3, [r3, #4]
 8002902:	69fa      	ldr	r2, [r7, #28]
 8002904:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002908:	f023 0301 	bic.w	r3, r3, #1
 800290c:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8002914:	2b01      	cmp	r3, #1
 8002916:	d108      	bne.n	800292a <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2200      	movs	r2, #0
 800291c:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002920:	2100      	movs	r1, #0
 8002922:	6878      	ldr	r0, [r7, #4]
 8002924:	f000 fe26 	bl	8003574 <HAL_PCDEx_LPM_Callback>
 8002928:	e002      	b.n	8002930 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800292a:	6878      	ldr	r0, [r7, #4]
 800292c:	f006 fac4 	bl	8008eb8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	695a      	ldr	r2, [r3, #20]
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800293e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	4618      	mov	r0, r3
 8002946:	f004 f8c8 	bl	8006ada <USB_ReadInterrupts>
 800294a:	4603      	mov	r3, r0
 800294c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002950:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002954:	d112      	bne.n	800297c <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002956:	69fb      	ldr	r3, [r7, #28]
 8002958:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800295c:	689b      	ldr	r3, [r3, #8]
 800295e:	f003 0301 	and.w	r3, r3, #1
 8002962:	2b01      	cmp	r3, #1
 8002964:	d102      	bne.n	800296c <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002966:	6878      	ldr	r0, [r7, #4]
 8002968:	f006 fa80 	bl	8008e6c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	695a      	ldr	r2, [r3, #20]
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800297a:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	4618      	mov	r0, r3
 8002982:	f004 f8aa 	bl	8006ada <USB_ReadInterrupts>
 8002986:	4603      	mov	r3, r0
 8002988:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800298c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002990:	f040 80c7 	bne.w	8002b22 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002994:	69fb      	ldr	r3, [r7, #28]
 8002996:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800299a:	685b      	ldr	r3, [r3, #4]
 800299c:	69fa      	ldr	r2, [r7, #28]
 800299e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80029a2:	f023 0301 	bic.w	r3, r3, #1
 80029a6:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	2110      	movs	r1, #16
 80029ae:	4618      	mov	r0, r3
 80029b0:	f003 f944 	bl	8005c3c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80029b4:	2300      	movs	r3, #0
 80029b6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80029b8:	e056      	b.n	8002a68 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80029ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029bc:	015a      	lsls	r2, r3, #5
 80029be:	69fb      	ldr	r3, [r7, #28]
 80029c0:	4413      	add	r3, r2
 80029c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80029c6:	461a      	mov	r2, r3
 80029c8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80029cc:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80029ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029d0:	015a      	lsls	r2, r3, #5
 80029d2:	69fb      	ldr	r3, [r7, #28]
 80029d4:	4413      	add	r3, r2
 80029d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80029de:	0151      	lsls	r1, r2, #5
 80029e0:	69fa      	ldr	r2, [r7, #28]
 80029e2:	440a      	add	r2, r1
 80029e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80029e8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80029ec:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80029ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029f0:	015a      	lsls	r2, r3, #5
 80029f2:	69fb      	ldr	r3, [r7, #28]
 80029f4:	4413      	add	r3, r2
 80029f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80029fe:	0151      	lsls	r1, r2, #5
 8002a00:	69fa      	ldr	r2, [r7, #28]
 8002a02:	440a      	add	r2, r1
 8002a04:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002a08:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002a0c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002a0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a10:	015a      	lsls	r2, r3, #5
 8002a12:	69fb      	ldr	r3, [r7, #28]
 8002a14:	4413      	add	r3, r2
 8002a16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a1a:	461a      	mov	r2, r3
 8002a1c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002a20:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002a22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a24:	015a      	lsls	r2, r3, #5
 8002a26:	69fb      	ldr	r3, [r7, #28]
 8002a28:	4413      	add	r3, r2
 8002a2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002a32:	0151      	lsls	r1, r2, #5
 8002a34:	69fa      	ldr	r2, [r7, #28]
 8002a36:	440a      	add	r2, r1
 8002a38:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002a3c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002a40:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002a42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a44:	015a      	lsls	r2, r3, #5
 8002a46:	69fb      	ldr	r3, [r7, #28]
 8002a48:	4413      	add	r3, r2
 8002a4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002a52:	0151      	lsls	r1, r2, #5
 8002a54:	69fa      	ldr	r2, [r7, #28]
 8002a56:	440a      	add	r2, r1
 8002a58:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002a5c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002a60:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a64:	3301      	adds	r3, #1
 8002a66:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	685b      	ldr	r3, [r3, #4]
 8002a6c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002a6e:	429a      	cmp	r2, r3
 8002a70:	d3a3      	bcc.n	80029ba <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002a72:	69fb      	ldr	r3, [r7, #28]
 8002a74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a78:	69db      	ldr	r3, [r3, #28]
 8002a7a:	69fa      	ldr	r2, [r7, #28]
 8002a7c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002a80:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002a84:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d016      	beq.n	8002abc <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002a8e:	69fb      	ldr	r3, [r7, #28]
 8002a90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a94:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a98:	69fa      	ldr	r2, [r7, #28]
 8002a9a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002a9e:	f043 030b 	orr.w	r3, r3, #11
 8002aa2:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002aa6:	69fb      	ldr	r3, [r7, #28]
 8002aa8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002aac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aae:	69fa      	ldr	r2, [r7, #28]
 8002ab0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002ab4:	f043 030b 	orr.w	r3, r3, #11
 8002ab8:	6453      	str	r3, [r2, #68]	; 0x44
 8002aba:	e015      	b.n	8002ae8 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002abc:	69fb      	ldr	r3, [r7, #28]
 8002abe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ac2:	695b      	ldr	r3, [r3, #20]
 8002ac4:	69fa      	ldr	r2, [r7, #28]
 8002ac6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002aca:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002ace:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8002ad2:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002ad4:	69fb      	ldr	r3, [r7, #28]
 8002ad6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ada:	691b      	ldr	r3, [r3, #16]
 8002adc:	69fa      	ldr	r2, [r7, #28]
 8002ade:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002ae2:	f043 030b 	orr.w	r3, r3, #11
 8002ae6:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002ae8:	69fb      	ldr	r3, [r7, #28]
 8002aea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	69fa      	ldr	r2, [r7, #28]
 8002af2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002af6:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002afa:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6818      	ldr	r0, [r3, #0]
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	691b      	ldr	r3, [r3, #16]
 8002b04:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002b0c:	461a      	mov	r2, r3
 8002b0e:	f004 f8a9 	bl	8006c64 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	695a      	ldr	r2, [r3, #20]
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002b20:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	4618      	mov	r0, r3
 8002b28:	f003 ffd7 	bl	8006ada <USB_ReadInterrupts>
 8002b2c:	4603      	mov	r3, r0
 8002b2e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002b32:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b36:	d124      	bne.n	8002b82 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	f004 f86d 	bl	8006c1c <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	4618      	mov	r0, r3
 8002b48:	f003 f8d5 	bl	8005cf6 <USB_GetDevSpeed>
 8002b4c:	4603      	mov	r3, r0
 8002b4e:	461a      	mov	r2, r3
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681c      	ldr	r4, [r3, #0]
 8002b58:	f001 f93c 	bl	8003dd4 <HAL_RCC_GetHCLKFreq>
 8002b5c:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002b62:	b2db      	uxtb	r3, r3
 8002b64:	461a      	mov	r2, r3
 8002b66:	4620      	mov	r0, r4
 8002b68:	f002 fdf4 	bl	8005754 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002b6c:	6878      	ldr	r0, [r7, #4]
 8002b6e:	f006 f95e 	bl	8008e2e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	695a      	ldr	r2, [r3, #20]
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002b80:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	4618      	mov	r0, r3
 8002b88:	f003 ffa7 	bl	8006ada <USB_ReadInterrupts>
 8002b8c:	4603      	mov	r3, r0
 8002b8e:	f003 0308 	and.w	r3, r3, #8
 8002b92:	2b08      	cmp	r3, #8
 8002b94:	d10a      	bne.n	8002bac <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002b96:	6878      	ldr	r0, [r7, #4]
 8002b98:	f006 f93b 	bl	8008e12 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	695a      	ldr	r2, [r3, #20]
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f002 0208 	and.w	r2, r2, #8
 8002baa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	f003 ff92 	bl	8006ada <USB_ReadInterrupts>
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002bbc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002bc0:	d10f      	bne.n	8002be2 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bc8:	b2db      	uxtb	r3, r3
 8002bca:	4619      	mov	r1, r3
 8002bcc:	6878      	ldr	r0, [r7, #4]
 8002bce:	f006 f993 	bl	8008ef8 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	695a      	ldr	r2, [r3, #20]
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002be0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	4618      	mov	r0, r3
 8002be8:	f003 ff77 	bl	8006ada <USB_ReadInterrupts>
 8002bec:	4603      	mov	r3, r0
 8002bee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002bf2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002bf6:	d10f      	bne.n	8002c18 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bfe:	b2db      	uxtb	r3, r3
 8002c00:	4619      	mov	r1, r3
 8002c02:	6878      	ldr	r0, [r7, #4]
 8002c04:	f006 f966 	bl	8008ed4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	695a      	ldr	r2, [r3, #20]
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002c16:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	f003 ff5c 	bl	8006ada <USB_ReadInterrupts>
 8002c22:	4603      	mov	r3, r0
 8002c24:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002c28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c2c:	d10a      	bne.n	8002c44 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002c2e:	6878      	ldr	r0, [r7, #4]
 8002c30:	f006 f974 	bl	8008f1c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	695a      	ldr	r2, [r3, #20]
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002c42:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	4618      	mov	r0, r3
 8002c4a:	f003 ff46 	bl	8006ada <USB_ReadInterrupts>
 8002c4e:	4603      	mov	r3, r0
 8002c50:	f003 0304 	and.w	r3, r3, #4
 8002c54:	2b04      	cmp	r3, #4
 8002c56:	d115      	bne.n	8002c84 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	685b      	ldr	r3, [r3, #4]
 8002c5e:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002c60:	69bb      	ldr	r3, [r7, #24]
 8002c62:	f003 0304 	and.w	r3, r3, #4
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d002      	beq.n	8002c70 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002c6a:	6878      	ldr	r0, [r7, #4]
 8002c6c:	f006 f964 	bl	8008f38 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	6859      	ldr	r1, [r3, #4]
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	69ba      	ldr	r2, [r7, #24]
 8002c7c:	430a      	orrs	r2, r1
 8002c7e:	605a      	str	r2, [r3, #4]
 8002c80:	e000      	b.n	8002c84 <HAL_PCD_IRQHandler+0x75e>
      return;
 8002c82:	bf00      	nop
    }
  }
}
 8002c84:	3734      	adds	r7, #52	; 0x34
 8002c86:	46bd      	mov	sp, r7
 8002c88:	bd90      	pop	{r4, r7, pc}

08002c8a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002c8a:	b580      	push	{r7, lr}
 8002c8c:	b082      	sub	sp, #8
 8002c8e:	af00      	add	r7, sp, #0
 8002c90:	6078      	str	r0, [r7, #4]
 8002c92:	460b      	mov	r3, r1
 8002c94:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002c9c:	2b01      	cmp	r3, #1
 8002c9e:	d101      	bne.n	8002ca4 <HAL_PCD_SetAddress+0x1a>
 8002ca0:	2302      	movs	r3, #2
 8002ca2:	e013      	b.n	8002ccc <HAL_PCD_SetAddress+0x42>
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2201      	movs	r2, #1
 8002ca8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	78fa      	ldrb	r2, [r7, #3]
 8002cb0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	78fa      	ldrb	r2, [r7, #3]
 8002cba:	4611      	mov	r1, r2
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	f003 fea4 	bl	8006a0a <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002cca:	2300      	movs	r3, #0
}
 8002ccc:	4618      	mov	r0, r3
 8002cce:	3708      	adds	r7, #8
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	bd80      	pop	{r7, pc}

08002cd4 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b084      	sub	sp, #16
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
 8002cdc:	4608      	mov	r0, r1
 8002cde:	4611      	mov	r1, r2
 8002ce0:	461a      	mov	r2, r3
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	70fb      	strb	r3, [r7, #3]
 8002ce6:	460b      	mov	r3, r1
 8002ce8:	803b      	strh	r3, [r7, #0]
 8002cea:	4613      	mov	r3, r2
 8002cec:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002cee:	2300      	movs	r3, #0
 8002cf0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002cf2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	da0f      	bge.n	8002d1a <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002cfa:	78fb      	ldrb	r3, [r7, #3]
 8002cfc:	f003 020f 	and.w	r2, r3, #15
 8002d00:	4613      	mov	r3, r2
 8002d02:	00db      	lsls	r3, r3, #3
 8002d04:	1a9b      	subs	r3, r3, r2
 8002d06:	009b      	lsls	r3, r3, #2
 8002d08:	3338      	adds	r3, #56	; 0x38
 8002d0a:	687a      	ldr	r2, [r7, #4]
 8002d0c:	4413      	add	r3, r2
 8002d0e:	3304      	adds	r3, #4
 8002d10:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	2201      	movs	r2, #1
 8002d16:	705a      	strb	r2, [r3, #1]
 8002d18:	e00f      	b.n	8002d3a <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002d1a:	78fb      	ldrb	r3, [r7, #3]
 8002d1c:	f003 020f 	and.w	r2, r3, #15
 8002d20:	4613      	mov	r3, r2
 8002d22:	00db      	lsls	r3, r3, #3
 8002d24:	1a9b      	subs	r3, r3, r2
 8002d26:	009b      	lsls	r3, r3, #2
 8002d28:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002d2c:	687a      	ldr	r2, [r7, #4]
 8002d2e:	4413      	add	r3, r2
 8002d30:	3304      	adds	r3, #4
 8002d32:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	2200      	movs	r2, #0
 8002d38:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002d3a:	78fb      	ldrb	r3, [r7, #3]
 8002d3c:	f003 030f 	and.w	r3, r3, #15
 8002d40:	b2da      	uxtb	r2, r3
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002d46:	883a      	ldrh	r2, [r7, #0]
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	78ba      	ldrb	r2, [r7, #2]
 8002d50:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	785b      	ldrb	r3, [r3, #1]
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d004      	beq.n	8002d64 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	781b      	ldrb	r3, [r3, #0]
 8002d5e:	b29a      	uxth	r2, r3
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002d64:	78bb      	ldrb	r3, [r7, #2]
 8002d66:	2b02      	cmp	r3, #2
 8002d68:	d102      	bne.n	8002d70 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002d76:	2b01      	cmp	r3, #1
 8002d78:	d101      	bne.n	8002d7e <HAL_PCD_EP_Open+0xaa>
 8002d7a:	2302      	movs	r3, #2
 8002d7c:	e00e      	b.n	8002d9c <HAL_PCD_EP_Open+0xc8>
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	2201      	movs	r2, #1
 8002d82:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	68f9      	ldr	r1, [r7, #12]
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	f002 ffd7 	bl	8005d40 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	2200      	movs	r2, #0
 8002d96:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8002d9a:	7afb      	ldrb	r3, [r7, #11]
}
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	3710      	adds	r7, #16
 8002da0:	46bd      	mov	sp, r7
 8002da2:	bd80      	pop	{r7, pc}

08002da4 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b084      	sub	sp, #16
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
 8002dac:	460b      	mov	r3, r1
 8002dae:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002db0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	da0f      	bge.n	8002dd8 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002db8:	78fb      	ldrb	r3, [r7, #3]
 8002dba:	f003 020f 	and.w	r2, r3, #15
 8002dbe:	4613      	mov	r3, r2
 8002dc0:	00db      	lsls	r3, r3, #3
 8002dc2:	1a9b      	subs	r3, r3, r2
 8002dc4:	009b      	lsls	r3, r3, #2
 8002dc6:	3338      	adds	r3, #56	; 0x38
 8002dc8:	687a      	ldr	r2, [r7, #4]
 8002dca:	4413      	add	r3, r2
 8002dcc:	3304      	adds	r3, #4
 8002dce:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	2201      	movs	r2, #1
 8002dd4:	705a      	strb	r2, [r3, #1]
 8002dd6:	e00f      	b.n	8002df8 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002dd8:	78fb      	ldrb	r3, [r7, #3]
 8002dda:	f003 020f 	and.w	r2, r3, #15
 8002dde:	4613      	mov	r3, r2
 8002de0:	00db      	lsls	r3, r3, #3
 8002de2:	1a9b      	subs	r3, r3, r2
 8002de4:	009b      	lsls	r3, r3, #2
 8002de6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002dea:	687a      	ldr	r2, [r7, #4]
 8002dec:	4413      	add	r3, r2
 8002dee:	3304      	adds	r3, #4
 8002df0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	2200      	movs	r2, #0
 8002df6:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002df8:	78fb      	ldrb	r3, [r7, #3]
 8002dfa:	f003 030f 	and.w	r3, r3, #15
 8002dfe:	b2da      	uxtb	r2, r3
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002e0a:	2b01      	cmp	r3, #1
 8002e0c:	d101      	bne.n	8002e12 <HAL_PCD_EP_Close+0x6e>
 8002e0e:	2302      	movs	r3, #2
 8002e10:	e00e      	b.n	8002e30 <HAL_PCD_EP_Close+0x8c>
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	2201      	movs	r2, #1
 8002e16:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	68f9      	ldr	r1, [r7, #12]
 8002e20:	4618      	mov	r0, r3
 8002e22:	f003 f815 	bl	8005e50 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	2200      	movs	r2, #0
 8002e2a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8002e2e:	2300      	movs	r3, #0
}
 8002e30:	4618      	mov	r0, r3
 8002e32:	3710      	adds	r7, #16
 8002e34:	46bd      	mov	sp, r7
 8002e36:	bd80      	pop	{r7, pc}

08002e38 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b086      	sub	sp, #24
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	60f8      	str	r0, [r7, #12]
 8002e40:	607a      	str	r2, [r7, #4]
 8002e42:	603b      	str	r3, [r7, #0]
 8002e44:	460b      	mov	r3, r1
 8002e46:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002e48:	7afb      	ldrb	r3, [r7, #11]
 8002e4a:	f003 020f 	and.w	r2, r3, #15
 8002e4e:	4613      	mov	r3, r2
 8002e50:	00db      	lsls	r3, r3, #3
 8002e52:	1a9b      	subs	r3, r3, r2
 8002e54:	009b      	lsls	r3, r3, #2
 8002e56:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002e5a:	68fa      	ldr	r2, [r7, #12]
 8002e5c:	4413      	add	r3, r2
 8002e5e:	3304      	adds	r3, #4
 8002e60:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002e62:	697b      	ldr	r3, [r7, #20]
 8002e64:	687a      	ldr	r2, [r7, #4]
 8002e66:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002e68:	697b      	ldr	r3, [r7, #20]
 8002e6a:	683a      	ldr	r2, [r7, #0]
 8002e6c:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8002e6e:	697b      	ldr	r3, [r7, #20]
 8002e70:	2200      	movs	r2, #0
 8002e72:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8002e74:	697b      	ldr	r3, [r7, #20]
 8002e76:	2200      	movs	r2, #0
 8002e78:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002e7a:	7afb      	ldrb	r3, [r7, #11]
 8002e7c:	f003 030f 	and.w	r3, r3, #15
 8002e80:	b2da      	uxtb	r2, r3
 8002e82:	697b      	ldr	r3, [r7, #20]
 8002e84:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	691b      	ldr	r3, [r3, #16]
 8002e8a:	2b01      	cmp	r3, #1
 8002e8c:	d102      	bne.n	8002e94 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002e8e:	687a      	ldr	r2, [r7, #4]
 8002e90:	697b      	ldr	r3, [r7, #20]
 8002e92:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002e94:	7afb      	ldrb	r3, [r7, #11]
 8002e96:	f003 030f 	and.w	r3, r3, #15
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d109      	bne.n	8002eb2 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	6818      	ldr	r0, [r3, #0]
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	691b      	ldr	r3, [r3, #16]
 8002ea6:	b2db      	uxtb	r3, r3
 8002ea8:	461a      	mov	r2, r3
 8002eaa:	6979      	ldr	r1, [r7, #20]
 8002eac:	f003 faf0 	bl	8006490 <USB_EP0StartXfer>
 8002eb0:	e008      	b.n	8002ec4 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	6818      	ldr	r0, [r3, #0]
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	691b      	ldr	r3, [r3, #16]
 8002eba:	b2db      	uxtb	r3, r3
 8002ebc:	461a      	mov	r2, r3
 8002ebe:	6979      	ldr	r1, [r7, #20]
 8002ec0:	f003 f8a2 	bl	8006008 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002ec4:	2300      	movs	r3, #0
}
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	3718      	adds	r7, #24
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	bd80      	pop	{r7, pc}

08002ece <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002ece:	b480      	push	{r7}
 8002ed0:	b083      	sub	sp, #12
 8002ed2:	af00      	add	r7, sp, #0
 8002ed4:	6078      	str	r0, [r7, #4]
 8002ed6:	460b      	mov	r3, r1
 8002ed8:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002eda:	78fb      	ldrb	r3, [r7, #3]
 8002edc:	f003 020f 	and.w	r2, r3, #15
 8002ee0:	6879      	ldr	r1, [r7, #4]
 8002ee2:	4613      	mov	r3, r2
 8002ee4:	00db      	lsls	r3, r3, #3
 8002ee6:	1a9b      	subs	r3, r3, r2
 8002ee8:	009b      	lsls	r3, r3, #2
 8002eea:	440b      	add	r3, r1
 8002eec:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8002ef0:	681b      	ldr	r3, [r3, #0]
}
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	370c      	adds	r7, #12
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efc:	4770      	bx	lr

08002efe <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002efe:	b580      	push	{r7, lr}
 8002f00:	b086      	sub	sp, #24
 8002f02:	af00      	add	r7, sp, #0
 8002f04:	60f8      	str	r0, [r7, #12]
 8002f06:	607a      	str	r2, [r7, #4]
 8002f08:	603b      	str	r3, [r7, #0]
 8002f0a:	460b      	mov	r3, r1
 8002f0c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002f0e:	7afb      	ldrb	r3, [r7, #11]
 8002f10:	f003 020f 	and.w	r2, r3, #15
 8002f14:	4613      	mov	r3, r2
 8002f16:	00db      	lsls	r3, r3, #3
 8002f18:	1a9b      	subs	r3, r3, r2
 8002f1a:	009b      	lsls	r3, r3, #2
 8002f1c:	3338      	adds	r3, #56	; 0x38
 8002f1e:	68fa      	ldr	r2, [r7, #12]
 8002f20:	4413      	add	r3, r2
 8002f22:	3304      	adds	r3, #4
 8002f24:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002f26:	697b      	ldr	r3, [r7, #20]
 8002f28:	687a      	ldr	r2, [r7, #4]
 8002f2a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002f2c:	697b      	ldr	r3, [r7, #20]
 8002f2e:	683a      	ldr	r2, [r7, #0]
 8002f30:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8002f32:	697b      	ldr	r3, [r7, #20]
 8002f34:	2200      	movs	r2, #0
 8002f36:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8002f38:	697b      	ldr	r3, [r7, #20]
 8002f3a:	2201      	movs	r2, #1
 8002f3c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002f3e:	7afb      	ldrb	r3, [r7, #11]
 8002f40:	f003 030f 	and.w	r3, r3, #15
 8002f44:	b2da      	uxtb	r2, r3
 8002f46:	697b      	ldr	r3, [r7, #20]
 8002f48:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	691b      	ldr	r3, [r3, #16]
 8002f4e:	2b01      	cmp	r3, #1
 8002f50:	d102      	bne.n	8002f58 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002f52:	687a      	ldr	r2, [r7, #4]
 8002f54:	697b      	ldr	r3, [r7, #20]
 8002f56:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002f58:	7afb      	ldrb	r3, [r7, #11]
 8002f5a:	f003 030f 	and.w	r3, r3, #15
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d109      	bne.n	8002f76 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	6818      	ldr	r0, [r3, #0]
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	691b      	ldr	r3, [r3, #16]
 8002f6a:	b2db      	uxtb	r3, r3
 8002f6c:	461a      	mov	r2, r3
 8002f6e:	6979      	ldr	r1, [r7, #20]
 8002f70:	f003 fa8e 	bl	8006490 <USB_EP0StartXfer>
 8002f74:	e008      	b.n	8002f88 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	6818      	ldr	r0, [r3, #0]
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	691b      	ldr	r3, [r3, #16]
 8002f7e:	b2db      	uxtb	r3, r3
 8002f80:	461a      	mov	r2, r3
 8002f82:	6979      	ldr	r1, [r7, #20]
 8002f84:	f003 f840 	bl	8006008 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002f88:	2300      	movs	r3, #0
}
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	3718      	adds	r7, #24
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	bd80      	pop	{r7, pc}

08002f92 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002f92:	b580      	push	{r7, lr}
 8002f94:	b084      	sub	sp, #16
 8002f96:	af00      	add	r7, sp, #0
 8002f98:	6078      	str	r0, [r7, #4]
 8002f9a:	460b      	mov	r3, r1
 8002f9c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002f9e:	78fb      	ldrb	r3, [r7, #3]
 8002fa0:	f003 020f 	and.w	r2, r3, #15
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	685b      	ldr	r3, [r3, #4]
 8002fa8:	429a      	cmp	r2, r3
 8002faa:	d901      	bls.n	8002fb0 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002fac:	2301      	movs	r3, #1
 8002fae:	e050      	b.n	8003052 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002fb0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	da0f      	bge.n	8002fd8 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002fb8:	78fb      	ldrb	r3, [r7, #3]
 8002fba:	f003 020f 	and.w	r2, r3, #15
 8002fbe:	4613      	mov	r3, r2
 8002fc0:	00db      	lsls	r3, r3, #3
 8002fc2:	1a9b      	subs	r3, r3, r2
 8002fc4:	009b      	lsls	r3, r3, #2
 8002fc6:	3338      	adds	r3, #56	; 0x38
 8002fc8:	687a      	ldr	r2, [r7, #4]
 8002fca:	4413      	add	r3, r2
 8002fcc:	3304      	adds	r3, #4
 8002fce:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	2201      	movs	r2, #1
 8002fd4:	705a      	strb	r2, [r3, #1]
 8002fd6:	e00d      	b.n	8002ff4 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002fd8:	78fa      	ldrb	r2, [r7, #3]
 8002fda:	4613      	mov	r3, r2
 8002fdc:	00db      	lsls	r3, r3, #3
 8002fde:	1a9b      	subs	r3, r3, r2
 8002fe0:	009b      	lsls	r3, r3, #2
 8002fe2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002fe6:	687a      	ldr	r2, [r7, #4]
 8002fe8:	4413      	add	r3, r2
 8002fea:	3304      	adds	r3, #4
 8002fec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	2201      	movs	r2, #1
 8002ff8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002ffa:	78fb      	ldrb	r3, [r7, #3]
 8002ffc:	f003 030f 	and.w	r3, r3, #15
 8003000:	b2da      	uxtb	r2, r3
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800300c:	2b01      	cmp	r3, #1
 800300e:	d101      	bne.n	8003014 <HAL_PCD_EP_SetStall+0x82>
 8003010:	2302      	movs	r3, #2
 8003012:	e01e      	b.n	8003052 <HAL_PCD_EP_SetStall+0xc0>
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2201      	movs	r2, #1
 8003018:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	68f9      	ldr	r1, [r7, #12]
 8003022:	4618      	mov	r0, r3
 8003024:	f003 fc1d 	bl	8006862 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003028:	78fb      	ldrb	r3, [r7, #3]
 800302a:	f003 030f 	and.w	r3, r3, #15
 800302e:	2b00      	cmp	r3, #0
 8003030:	d10a      	bne.n	8003048 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6818      	ldr	r0, [r3, #0]
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	691b      	ldr	r3, [r3, #16]
 800303a:	b2d9      	uxtb	r1, r3
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003042:	461a      	mov	r2, r3
 8003044:	f003 fe0e 	bl	8006c64 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2200      	movs	r2, #0
 800304c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003050:	2300      	movs	r3, #0
}
 8003052:	4618      	mov	r0, r3
 8003054:	3710      	adds	r7, #16
 8003056:	46bd      	mov	sp, r7
 8003058:	bd80      	pop	{r7, pc}

0800305a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800305a:	b580      	push	{r7, lr}
 800305c:	b084      	sub	sp, #16
 800305e:	af00      	add	r7, sp, #0
 8003060:	6078      	str	r0, [r7, #4]
 8003062:	460b      	mov	r3, r1
 8003064:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003066:	78fb      	ldrb	r3, [r7, #3]
 8003068:	f003 020f 	and.w	r2, r3, #15
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	685b      	ldr	r3, [r3, #4]
 8003070:	429a      	cmp	r2, r3
 8003072:	d901      	bls.n	8003078 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003074:	2301      	movs	r3, #1
 8003076:	e042      	b.n	80030fe <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003078:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800307c:	2b00      	cmp	r3, #0
 800307e:	da0f      	bge.n	80030a0 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003080:	78fb      	ldrb	r3, [r7, #3]
 8003082:	f003 020f 	and.w	r2, r3, #15
 8003086:	4613      	mov	r3, r2
 8003088:	00db      	lsls	r3, r3, #3
 800308a:	1a9b      	subs	r3, r3, r2
 800308c:	009b      	lsls	r3, r3, #2
 800308e:	3338      	adds	r3, #56	; 0x38
 8003090:	687a      	ldr	r2, [r7, #4]
 8003092:	4413      	add	r3, r2
 8003094:	3304      	adds	r3, #4
 8003096:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	2201      	movs	r2, #1
 800309c:	705a      	strb	r2, [r3, #1]
 800309e:	e00f      	b.n	80030c0 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80030a0:	78fb      	ldrb	r3, [r7, #3]
 80030a2:	f003 020f 	and.w	r2, r3, #15
 80030a6:	4613      	mov	r3, r2
 80030a8:	00db      	lsls	r3, r3, #3
 80030aa:	1a9b      	subs	r3, r3, r2
 80030ac:	009b      	lsls	r3, r3, #2
 80030ae:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80030b2:	687a      	ldr	r2, [r7, #4]
 80030b4:	4413      	add	r3, r2
 80030b6:	3304      	adds	r3, #4
 80030b8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	2200      	movs	r2, #0
 80030be:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	2200      	movs	r2, #0
 80030c4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80030c6:	78fb      	ldrb	r3, [r7, #3]
 80030c8:	f003 030f 	and.w	r3, r3, #15
 80030cc:	b2da      	uxtb	r2, r3
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80030d8:	2b01      	cmp	r3, #1
 80030da:	d101      	bne.n	80030e0 <HAL_PCD_EP_ClrStall+0x86>
 80030dc:	2302      	movs	r3, #2
 80030de:	e00e      	b.n	80030fe <HAL_PCD_EP_ClrStall+0xa4>
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2201      	movs	r2, #1
 80030e4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	68f9      	ldr	r1, [r7, #12]
 80030ee:	4618      	mov	r0, r3
 80030f0:	f003 fc25 	bl	800693e <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2200      	movs	r2, #0
 80030f8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80030fc:	2300      	movs	r3, #0
}
 80030fe:	4618      	mov	r0, r3
 8003100:	3710      	adds	r7, #16
 8003102:	46bd      	mov	sp, r7
 8003104:	bd80      	pop	{r7, pc}

08003106 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003106:	b580      	push	{r7, lr}
 8003108:	b08a      	sub	sp, #40	; 0x28
 800310a:	af02      	add	r7, sp, #8
 800310c:	6078      	str	r0, [r7, #4]
 800310e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003116:	697b      	ldr	r3, [r7, #20]
 8003118:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800311a:	683a      	ldr	r2, [r7, #0]
 800311c:	4613      	mov	r3, r2
 800311e:	00db      	lsls	r3, r3, #3
 8003120:	1a9b      	subs	r3, r3, r2
 8003122:	009b      	lsls	r3, r3, #2
 8003124:	3338      	adds	r3, #56	; 0x38
 8003126:	687a      	ldr	r2, [r7, #4]
 8003128:	4413      	add	r3, r2
 800312a:	3304      	adds	r3, #4
 800312c:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	699a      	ldr	r2, [r3, #24]
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	695b      	ldr	r3, [r3, #20]
 8003136:	429a      	cmp	r2, r3
 8003138:	d901      	bls.n	800313e <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800313a:	2301      	movs	r3, #1
 800313c:	e06c      	b.n	8003218 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	695a      	ldr	r2, [r3, #20]
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	699b      	ldr	r3, [r3, #24]
 8003146:	1ad3      	subs	r3, r2, r3
 8003148:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	689b      	ldr	r3, [r3, #8]
 800314e:	69fa      	ldr	r2, [r7, #28]
 8003150:	429a      	cmp	r2, r3
 8003152:	d902      	bls.n	800315a <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	689b      	ldr	r3, [r3, #8]
 8003158:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800315a:	69fb      	ldr	r3, [r7, #28]
 800315c:	3303      	adds	r3, #3
 800315e:	089b      	lsrs	r3, r3, #2
 8003160:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003162:	e02b      	b.n	80031bc <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	695a      	ldr	r2, [r3, #20]
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	699b      	ldr	r3, [r3, #24]
 800316c:	1ad3      	subs	r3, r2, r3
 800316e:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	689b      	ldr	r3, [r3, #8]
 8003174:	69fa      	ldr	r2, [r7, #28]
 8003176:	429a      	cmp	r2, r3
 8003178:	d902      	bls.n	8003180 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	689b      	ldr	r3, [r3, #8]
 800317e:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003180:	69fb      	ldr	r3, [r7, #28]
 8003182:	3303      	adds	r3, #3
 8003184:	089b      	lsrs	r3, r3, #2
 8003186:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	68d9      	ldr	r1, [r3, #12]
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	b2da      	uxtb	r2, r3
 8003190:	69fb      	ldr	r3, [r7, #28]
 8003192:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003198:	b2db      	uxtb	r3, r3
 800319a:	9300      	str	r3, [sp, #0]
 800319c:	4603      	mov	r3, r0
 800319e:	6978      	ldr	r0, [r7, #20]
 80031a0:	f003 fac9 	bl	8006736 <USB_WritePacket>

    ep->xfer_buff  += len;
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	68da      	ldr	r2, [r3, #12]
 80031a8:	69fb      	ldr	r3, [r7, #28]
 80031aa:	441a      	add	r2, r3
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	699a      	ldr	r2, [r3, #24]
 80031b4:	69fb      	ldr	r3, [r7, #28]
 80031b6:	441a      	add	r2, r3
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	015a      	lsls	r2, r3, #5
 80031c0:	693b      	ldr	r3, [r7, #16]
 80031c2:	4413      	add	r3, r2
 80031c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80031c8:	699b      	ldr	r3, [r3, #24]
 80031ca:	b29b      	uxth	r3, r3
 80031cc:	69ba      	ldr	r2, [r7, #24]
 80031ce:	429a      	cmp	r2, r3
 80031d0:	d809      	bhi.n	80031e6 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	699a      	ldr	r2, [r3, #24]
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80031da:	429a      	cmp	r2, r3
 80031dc:	d203      	bcs.n	80031e6 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	695b      	ldr	r3, [r3, #20]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d1be      	bne.n	8003164 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	695a      	ldr	r2, [r3, #20]
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	699b      	ldr	r3, [r3, #24]
 80031ee:	429a      	cmp	r2, r3
 80031f0:	d811      	bhi.n	8003216 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	f003 030f 	and.w	r3, r3, #15
 80031f8:	2201      	movs	r2, #1
 80031fa:	fa02 f303 	lsl.w	r3, r2, r3
 80031fe:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003200:	693b      	ldr	r3, [r7, #16]
 8003202:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003206:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003208:	68bb      	ldr	r3, [r7, #8]
 800320a:	43db      	mvns	r3, r3
 800320c:	6939      	ldr	r1, [r7, #16]
 800320e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003212:	4013      	ands	r3, r2
 8003214:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003216:	2300      	movs	r3, #0
}
 8003218:	4618      	mov	r0, r3
 800321a:	3720      	adds	r7, #32
 800321c:	46bd      	mov	sp, r7
 800321e:	bd80      	pop	{r7, pc}

08003220 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	b086      	sub	sp, #24
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
 8003228:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003230:	697b      	ldr	r3, [r7, #20]
 8003232:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003234:	697b      	ldr	r3, [r7, #20]
 8003236:	333c      	adds	r3, #60	; 0x3c
 8003238:	3304      	adds	r3, #4
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	015a      	lsls	r2, r3, #5
 8003242:	693b      	ldr	r3, [r7, #16]
 8003244:	4413      	add	r3, r2
 8003246:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800324a:	689b      	ldr	r3, [r3, #8]
 800324c:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	691b      	ldr	r3, [r3, #16]
 8003252:	2b01      	cmp	r3, #1
 8003254:	f040 80a0 	bne.w	8003398 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003258:	68bb      	ldr	r3, [r7, #8]
 800325a:	f003 0308 	and.w	r3, r3, #8
 800325e:	2b00      	cmp	r3, #0
 8003260:	d015      	beq.n	800328e <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	4a72      	ldr	r2, [pc, #456]	; (8003430 <PCD_EP_OutXfrComplete_int+0x210>)
 8003266:	4293      	cmp	r3, r2
 8003268:	f240 80dd 	bls.w	8003426 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800326c:	68bb      	ldr	r3, [r7, #8]
 800326e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003272:	2b00      	cmp	r3, #0
 8003274:	f000 80d7 	beq.w	8003426 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	015a      	lsls	r2, r3, #5
 800327c:	693b      	ldr	r3, [r7, #16]
 800327e:	4413      	add	r3, r2
 8003280:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003284:	461a      	mov	r2, r3
 8003286:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800328a:	6093      	str	r3, [r2, #8]
 800328c:	e0cb      	b.n	8003426 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800328e:	68bb      	ldr	r3, [r7, #8]
 8003290:	f003 0320 	and.w	r3, r3, #32
 8003294:	2b00      	cmp	r3, #0
 8003296:	d009      	beq.n	80032ac <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	015a      	lsls	r2, r3, #5
 800329c:	693b      	ldr	r3, [r7, #16]
 800329e:	4413      	add	r3, r2
 80032a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032a4:	461a      	mov	r2, r3
 80032a6:	2320      	movs	r3, #32
 80032a8:	6093      	str	r3, [r2, #8]
 80032aa:	e0bc      	b.n	8003426 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80032ac:	68bb      	ldr	r3, [r7, #8]
 80032ae:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	f040 80b7 	bne.w	8003426 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	4a5d      	ldr	r2, [pc, #372]	; (8003430 <PCD_EP_OutXfrComplete_int+0x210>)
 80032bc:	4293      	cmp	r3, r2
 80032be:	d90f      	bls.n	80032e0 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80032c0:	68bb      	ldr	r3, [r7, #8]
 80032c2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d00a      	beq.n	80032e0 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80032ca:	683b      	ldr	r3, [r7, #0]
 80032cc:	015a      	lsls	r2, r3, #5
 80032ce:	693b      	ldr	r3, [r7, #16]
 80032d0:	4413      	add	r3, r2
 80032d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032d6:	461a      	mov	r2, r3
 80032d8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80032dc:	6093      	str	r3, [r2, #8]
 80032de:	e0a2      	b.n	8003426 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 80032e0:	6879      	ldr	r1, [r7, #4]
 80032e2:	683a      	ldr	r2, [r7, #0]
 80032e4:	4613      	mov	r3, r2
 80032e6:	00db      	lsls	r3, r3, #3
 80032e8:	1a9b      	subs	r3, r3, r2
 80032ea:	009b      	lsls	r3, r3, #2
 80032ec:	440b      	add	r3, r1
 80032ee:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80032f2:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	0159      	lsls	r1, r3, #5
 80032f8:	693b      	ldr	r3, [r7, #16]
 80032fa:	440b      	add	r3, r1
 80032fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003300:	691b      	ldr	r3, [r3, #16]
 8003302:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8003306:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8003308:	6878      	ldr	r0, [r7, #4]
 800330a:	683a      	ldr	r2, [r7, #0]
 800330c:	4613      	mov	r3, r2
 800330e:	00db      	lsls	r3, r3, #3
 8003310:	1a9b      	subs	r3, r3, r2
 8003312:	009b      	lsls	r3, r3, #2
 8003314:	4403      	add	r3, r0
 8003316:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800331a:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 800331c:	6879      	ldr	r1, [r7, #4]
 800331e:	683a      	ldr	r2, [r7, #0]
 8003320:	4613      	mov	r3, r2
 8003322:	00db      	lsls	r3, r3, #3
 8003324:	1a9b      	subs	r3, r3, r2
 8003326:	009b      	lsls	r3, r3, #2
 8003328:	440b      	add	r3, r1
 800332a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800332e:	6819      	ldr	r1, [r3, #0]
 8003330:	6878      	ldr	r0, [r7, #4]
 8003332:	683a      	ldr	r2, [r7, #0]
 8003334:	4613      	mov	r3, r2
 8003336:	00db      	lsls	r3, r3, #3
 8003338:	1a9b      	subs	r3, r3, r2
 800333a:	009b      	lsls	r3, r3, #2
 800333c:	4403      	add	r3, r0
 800333e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4419      	add	r1, r3
 8003346:	6878      	ldr	r0, [r7, #4]
 8003348:	683a      	ldr	r2, [r7, #0]
 800334a:	4613      	mov	r3, r2
 800334c:	00db      	lsls	r3, r3, #3
 800334e:	1a9b      	subs	r3, r3, r2
 8003350:	009b      	lsls	r3, r3, #2
 8003352:	4403      	add	r3, r0
 8003354:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003358:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	2b00      	cmp	r3, #0
 800335e:	d114      	bne.n	800338a <PCD_EP_OutXfrComplete_int+0x16a>
 8003360:	6879      	ldr	r1, [r7, #4]
 8003362:	683a      	ldr	r2, [r7, #0]
 8003364:	4613      	mov	r3, r2
 8003366:	00db      	lsls	r3, r3, #3
 8003368:	1a9b      	subs	r3, r3, r2
 800336a:	009b      	lsls	r3, r3, #2
 800336c:	440b      	add	r3, r1
 800336e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	2b00      	cmp	r3, #0
 8003376:	d108      	bne.n	800338a <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6818      	ldr	r0, [r3, #0]
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003382:	461a      	mov	r2, r3
 8003384:	2101      	movs	r1, #1
 8003386:	f003 fc6d 	bl	8006c64 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	b2db      	uxtb	r3, r3
 800338e:	4619      	mov	r1, r3
 8003390:	6878      	ldr	r0, [r7, #4]
 8003392:	f005 fd09 	bl	8008da8 <HAL_PCD_DataOutStageCallback>
 8003396:	e046      	b.n	8003426 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	4a26      	ldr	r2, [pc, #152]	; (8003434 <PCD_EP_OutXfrComplete_int+0x214>)
 800339c:	4293      	cmp	r3, r2
 800339e:	d124      	bne.n	80033ea <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80033a0:	68bb      	ldr	r3, [r7, #8]
 80033a2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d00a      	beq.n	80033c0 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80033aa:	683b      	ldr	r3, [r7, #0]
 80033ac:	015a      	lsls	r2, r3, #5
 80033ae:	693b      	ldr	r3, [r7, #16]
 80033b0:	4413      	add	r3, r2
 80033b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033b6:	461a      	mov	r2, r3
 80033b8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80033bc:	6093      	str	r3, [r2, #8]
 80033be:	e032      	b.n	8003426 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80033c0:	68bb      	ldr	r3, [r7, #8]
 80033c2:	f003 0320 	and.w	r3, r3, #32
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d008      	beq.n	80033dc <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	015a      	lsls	r2, r3, #5
 80033ce:	693b      	ldr	r3, [r7, #16]
 80033d0:	4413      	add	r3, r2
 80033d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033d6:	461a      	mov	r2, r3
 80033d8:	2320      	movs	r3, #32
 80033da:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	b2db      	uxtb	r3, r3
 80033e0:	4619      	mov	r1, r3
 80033e2:	6878      	ldr	r0, [r7, #4]
 80033e4:	f005 fce0 	bl	8008da8 <HAL_PCD_DataOutStageCallback>
 80033e8:	e01d      	b.n	8003426 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d114      	bne.n	800341a <PCD_EP_OutXfrComplete_int+0x1fa>
 80033f0:	6879      	ldr	r1, [r7, #4]
 80033f2:	683a      	ldr	r2, [r7, #0]
 80033f4:	4613      	mov	r3, r2
 80033f6:	00db      	lsls	r3, r3, #3
 80033f8:	1a9b      	subs	r3, r3, r2
 80033fa:	009b      	lsls	r3, r3, #2
 80033fc:	440b      	add	r3, r1
 80033fe:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	2b00      	cmp	r3, #0
 8003406:	d108      	bne.n	800341a <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6818      	ldr	r0, [r3, #0]
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003412:	461a      	mov	r2, r3
 8003414:	2100      	movs	r1, #0
 8003416:	f003 fc25 	bl	8006c64 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800341a:	683b      	ldr	r3, [r7, #0]
 800341c:	b2db      	uxtb	r3, r3
 800341e:	4619      	mov	r1, r3
 8003420:	6878      	ldr	r0, [r7, #4]
 8003422:	f005 fcc1 	bl	8008da8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003426:	2300      	movs	r3, #0
}
 8003428:	4618      	mov	r0, r3
 800342a:	3718      	adds	r7, #24
 800342c:	46bd      	mov	sp, r7
 800342e:	bd80      	pop	{r7, pc}
 8003430:	4f54300a 	.word	0x4f54300a
 8003434:	4f54310a 	.word	0x4f54310a

08003438 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	b086      	sub	sp, #24
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
 8003440:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003448:	697b      	ldr	r3, [r7, #20]
 800344a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800344c:	697b      	ldr	r3, [r7, #20]
 800344e:	333c      	adds	r3, #60	; 0x3c
 8003450:	3304      	adds	r3, #4
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	015a      	lsls	r2, r3, #5
 800345a:	693b      	ldr	r3, [r7, #16]
 800345c:	4413      	add	r3, r2
 800345e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003462:	689b      	ldr	r3, [r3, #8]
 8003464:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	4a15      	ldr	r2, [pc, #84]	; (80034c0 <PCD_EP_OutSetupPacket_int+0x88>)
 800346a:	4293      	cmp	r3, r2
 800346c:	d90e      	bls.n	800348c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800346e:	68bb      	ldr	r3, [r7, #8]
 8003470:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003474:	2b00      	cmp	r3, #0
 8003476:	d009      	beq.n	800348c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	015a      	lsls	r2, r3, #5
 800347c:	693b      	ldr	r3, [r7, #16]
 800347e:	4413      	add	r3, r2
 8003480:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003484:	461a      	mov	r2, r3
 8003486:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800348a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800348c:	6878      	ldr	r0, [r7, #4]
 800348e:	f005 fc79 	bl	8008d84 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	4a0a      	ldr	r2, [pc, #40]	; (80034c0 <PCD_EP_OutSetupPacket_int+0x88>)
 8003496:	4293      	cmp	r3, r2
 8003498:	d90c      	bls.n	80034b4 <PCD_EP_OutSetupPacket_int+0x7c>
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	691b      	ldr	r3, [r3, #16]
 800349e:	2b01      	cmp	r3, #1
 80034a0:	d108      	bne.n	80034b4 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6818      	ldr	r0, [r3, #0]
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80034ac:	461a      	mov	r2, r3
 80034ae:	2101      	movs	r1, #1
 80034b0:	f003 fbd8 	bl	8006c64 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80034b4:	2300      	movs	r3, #0
}
 80034b6:	4618      	mov	r0, r3
 80034b8:	3718      	adds	r7, #24
 80034ba:	46bd      	mov	sp, r7
 80034bc:	bd80      	pop	{r7, pc}
 80034be:	bf00      	nop
 80034c0:	4f54300a 	.word	0x4f54300a

080034c4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80034c4:	b480      	push	{r7}
 80034c6:	b085      	sub	sp, #20
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
 80034cc:	460b      	mov	r3, r1
 80034ce:	70fb      	strb	r3, [r7, #3]
 80034d0:	4613      	mov	r3, r2
 80034d2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034da:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80034dc:	78fb      	ldrb	r3, [r7, #3]
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d107      	bne.n	80034f2 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80034e2:	883b      	ldrh	r3, [r7, #0]
 80034e4:	0419      	lsls	r1, r3, #16
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	68ba      	ldr	r2, [r7, #8]
 80034ec:	430a      	orrs	r2, r1
 80034ee:	629a      	str	r2, [r3, #40]	; 0x28
 80034f0:	e028      	b.n	8003544 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034f8:	0c1b      	lsrs	r3, r3, #16
 80034fa:	68ba      	ldr	r2, [r7, #8]
 80034fc:	4413      	add	r3, r2
 80034fe:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003500:	2300      	movs	r3, #0
 8003502:	73fb      	strb	r3, [r7, #15]
 8003504:	e00d      	b.n	8003522 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681a      	ldr	r2, [r3, #0]
 800350a:	7bfb      	ldrb	r3, [r7, #15]
 800350c:	3340      	adds	r3, #64	; 0x40
 800350e:	009b      	lsls	r3, r3, #2
 8003510:	4413      	add	r3, r2
 8003512:	685b      	ldr	r3, [r3, #4]
 8003514:	0c1b      	lsrs	r3, r3, #16
 8003516:	68ba      	ldr	r2, [r7, #8]
 8003518:	4413      	add	r3, r2
 800351a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800351c:	7bfb      	ldrb	r3, [r7, #15]
 800351e:	3301      	adds	r3, #1
 8003520:	73fb      	strb	r3, [r7, #15]
 8003522:	7bfa      	ldrb	r2, [r7, #15]
 8003524:	78fb      	ldrb	r3, [r7, #3]
 8003526:	3b01      	subs	r3, #1
 8003528:	429a      	cmp	r2, r3
 800352a:	d3ec      	bcc.n	8003506 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800352c:	883b      	ldrh	r3, [r7, #0]
 800352e:	0418      	lsls	r0, r3, #16
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6819      	ldr	r1, [r3, #0]
 8003534:	78fb      	ldrb	r3, [r7, #3]
 8003536:	3b01      	subs	r3, #1
 8003538:	68ba      	ldr	r2, [r7, #8]
 800353a:	4302      	orrs	r2, r0
 800353c:	3340      	adds	r3, #64	; 0x40
 800353e:	009b      	lsls	r3, r3, #2
 8003540:	440b      	add	r3, r1
 8003542:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003544:	2300      	movs	r3, #0
}
 8003546:	4618      	mov	r0, r3
 8003548:	3714      	adds	r7, #20
 800354a:	46bd      	mov	sp, r7
 800354c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003550:	4770      	bx	lr

08003552 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003552:	b480      	push	{r7}
 8003554:	b083      	sub	sp, #12
 8003556:	af00      	add	r7, sp, #0
 8003558:	6078      	str	r0, [r7, #4]
 800355a:	460b      	mov	r3, r1
 800355c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	887a      	ldrh	r2, [r7, #2]
 8003564:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003566:	2300      	movs	r3, #0
}
 8003568:	4618      	mov	r0, r3
 800356a:	370c      	adds	r7, #12
 800356c:	46bd      	mov	sp, r7
 800356e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003572:	4770      	bx	lr

08003574 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003574:	b480      	push	{r7}
 8003576:	b083      	sub	sp, #12
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
 800357c:	460b      	mov	r3, r1
 800357e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003580:	bf00      	nop
 8003582:	370c      	adds	r7, #12
 8003584:	46bd      	mov	sp, r7
 8003586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358a:	4770      	bx	lr

0800358c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	b086      	sub	sp, #24
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2b00      	cmp	r3, #0
 8003598:	d101      	bne.n	800359e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800359a:	2301      	movs	r3, #1
 800359c:	e267      	b.n	8003a6e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f003 0301 	and.w	r3, r3, #1
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d075      	beq.n	8003696 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80035aa:	4b88      	ldr	r3, [pc, #544]	; (80037cc <HAL_RCC_OscConfig+0x240>)
 80035ac:	689b      	ldr	r3, [r3, #8]
 80035ae:	f003 030c 	and.w	r3, r3, #12
 80035b2:	2b04      	cmp	r3, #4
 80035b4:	d00c      	beq.n	80035d0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80035b6:	4b85      	ldr	r3, [pc, #532]	; (80037cc <HAL_RCC_OscConfig+0x240>)
 80035b8:	689b      	ldr	r3, [r3, #8]
 80035ba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80035be:	2b08      	cmp	r3, #8
 80035c0:	d112      	bne.n	80035e8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80035c2:	4b82      	ldr	r3, [pc, #520]	; (80037cc <HAL_RCC_OscConfig+0x240>)
 80035c4:	685b      	ldr	r3, [r3, #4]
 80035c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035ca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80035ce:	d10b      	bne.n	80035e8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035d0:	4b7e      	ldr	r3, [pc, #504]	; (80037cc <HAL_RCC_OscConfig+0x240>)
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d05b      	beq.n	8003694 <HAL_RCC_OscConfig+0x108>
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	685b      	ldr	r3, [r3, #4]
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d157      	bne.n	8003694 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80035e4:	2301      	movs	r3, #1
 80035e6:	e242      	b.n	8003a6e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	685b      	ldr	r3, [r3, #4]
 80035ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035f0:	d106      	bne.n	8003600 <HAL_RCC_OscConfig+0x74>
 80035f2:	4b76      	ldr	r3, [pc, #472]	; (80037cc <HAL_RCC_OscConfig+0x240>)
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	4a75      	ldr	r2, [pc, #468]	; (80037cc <HAL_RCC_OscConfig+0x240>)
 80035f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035fc:	6013      	str	r3, [r2, #0]
 80035fe:	e01d      	b.n	800363c <HAL_RCC_OscConfig+0xb0>
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	685b      	ldr	r3, [r3, #4]
 8003604:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003608:	d10c      	bne.n	8003624 <HAL_RCC_OscConfig+0x98>
 800360a:	4b70      	ldr	r3, [pc, #448]	; (80037cc <HAL_RCC_OscConfig+0x240>)
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	4a6f      	ldr	r2, [pc, #444]	; (80037cc <HAL_RCC_OscConfig+0x240>)
 8003610:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003614:	6013      	str	r3, [r2, #0]
 8003616:	4b6d      	ldr	r3, [pc, #436]	; (80037cc <HAL_RCC_OscConfig+0x240>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	4a6c      	ldr	r2, [pc, #432]	; (80037cc <HAL_RCC_OscConfig+0x240>)
 800361c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003620:	6013      	str	r3, [r2, #0]
 8003622:	e00b      	b.n	800363c <HAL_RCC_OscConfig+0xb0>
 8003624:	4b69      	ldr	r3, [pc, #420]	; (80037cc <HAL_RCC_OscConfig+0x240>)
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	4a68      	ldr	r2, [pc, #416]	; (80037cc <HAL_RCC_OscConfig+0x240>)
 800362a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800362e:	6013      	str	r3, [r2, #0]
 8003630:	4b66      	ldr	r3, [pc, #408]	; (80037cc <HAL_RCC_OscConfig+0x240>)
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	4a65      	ldr	r2, [pc, #404]	; (80037cc <HAL_RCC_OscConfig+0x240>)
 8003636:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800363a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	685b      	ldr	r3, [r3, #4]
 8003640:	2b00      	cmp	r3, #0
 8003642:	d013      	beq.n	800366c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003644:	f7fd fdb0 	bl	80011a8 <HAL_GetTick>
 8003648:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800364a:	e008      	b.n	800365e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800364c:	f7fd fdac 	bl	80011a8 <HAL_GetTick>
 8003650:	4602      	mov	r2, r0
 8003652:	693b      	ldr	r3, [r7, #16]
 8003654:	1ad3      	subs	r3, r2, r3
 8003656:	2b64      	cmp	r3, #100	; 0x64
 8003658:	d901      	bls.n	800365e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800365a:	2303      	movs	r3, #3
 800365c:	e207      	b.n	8003a6e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800365e:	4b5b      	ldr	r3, [pc, #364]	; (80037cc <HAL_RCC_OscConfig+0x240>)
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003666:	2b00      	cmp	r3, #0
 8003668:	d0f0      	beq.n	800364c <HAL_RCC_OscConfig+0xc0>
 800366a:	e014      	b.n	8003696 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800366c:	f7fd fd9c 	bl	80011a8 <HAL_GetTick>
 8003670:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003672:	e008      	b.n	8003686 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003674:	f7fd fd98 	bl	80011a8 <HAL_GetTick>
 8003678:	4602      	mov	r2, r0
 800367a:	693b      	ldr	r3, [r7, #16]
 800367c:	1ad3      	subs	r3, r2, r3
 800367e:	2b64      	cmp	r3, #100	; 0x64
 8003680:	d901      	bls.n	8003686 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003682:	2303      	movs	r3, #3
 8003684:	e1f3      	b.n	8003a6e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003686:	4b51      	ldr	r3, [pc, #324]	; (80037cc <HAL_RCC_OscConfig+0x240>)
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800368e:	2b00      	cmp	r3, #0
 8003690:	d1f0      	bne.n	8003674 <HAL_RCC_OscConfig+0xe8>
 8003692:	e000      	b.n	8003696 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003694:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f003 0302 	and.w	r3, r3, #2
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d063      	beq.n	800376a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80036a2:	4b4a      	ldr	r3, [pc, #296]	; (80037cc <HAL_RCC_OscConfig+0x240>)
 80036a4:	689b      	ldr	r3, [r3, #8]
 80036a6:	f003 030c 	and.w	r3, r3, #12
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d00b      	beq.n	80036c6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80036ae:	4b47      	ldr	r3, [pc, #284]	; (80037cc <HAL_RCC_OscConfig+0x240>)
 80036b0:	689b      	ldr	r3, [r3, #8]
 80036b2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80036b6:	2b08      	cmp	r3, #8
 80036b8:	d11c      	bne.n	80036f4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80036ba:	4b44      	ldr	r3, [pc, #272]	; (80037cc <HAL_RCC_OscConfig+0x240>)
 80036bc:	685b      	ldr	r3, [r3, #4]
 80036be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d116      	bne.n	80036f4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80036c6:	4b41      	ldr	r3, [pc, #260]	; (80037cc <HAL_RCC_OscConfig+0x240>)
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f003 0302 	and.w	r3, r3, #2
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d005      	beq.n	80036de <HAL_RCC_OscConfig+0x152>
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	68db      	ldr	r3, [r3, #12]
 80036d6:	2b01      	cmp	r3, #1
 80036d8:	d001      	beq.n	80036de <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80036da:	2301      	movs	r3, #1
 80036dc:	e1c7      	b.n	8003a6e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036de:	4b3b      	ldr	r3, [pc, #236]	; (80037cc <HAL_RCC_OscConfig+0x240>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	691b      	ldr	r3, [r3, #16]
 80036ea:	00db      	lsls	r3, r3, #3
 80036ec:	4937      	ldr	r1, [pc, #220]	; (80037cc <HAL_RCC_OscConfig+0x240>)
 80036ee:	4313      	orrs	r3, r2
 80036f0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80036f2:	e03a      	b.n	800376a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	68db      	ldr	r3, [r3, #12]
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d020      	beq.n	800373e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80036fc:	4b34      	ldr	r3, [pc, #208]	; (80037d0 <HAL_RCC_OscConfig+0x244>)
 80036fe:	2201      	movs	r2, #1
 8003700:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003702:	f7fd fd51 	bl	80011a8 <HAL_GetTick>
 8003706:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003708:	e008      	b.n	800371c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800370a:	f7fd fd4d 	bl	80011a8 <HAL_GetTick>
 800370e:	4602      	mov	r2, r0
 8003710:	693b      	ldr	r3, [r7, #16]
 8003712:	1ad3      	subs	r3, r2, r3
 8003714:	2b02      	cmp	r3, #2
 8003716:	d901      	bls.n	800371c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003718:	2303      	movs	r3, #3
 800371a:	e1a8      	b.n	8003a6e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800371c:	4b2b      	ldr	r3, [pc, #172]	; (80037cc <HAL_RCC_OscConfig+0x240>)
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f003 0302 	and.w	r3, r3, #2
 8003724:	2b00      	cmp	r3, #0
 8003726:	d0f0      	beq.n	800370a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003728:	4b28      	ldr	r3, [pc, #160]	; (80037cc <HAL_RCC_OscConfig+0x240>)
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	691b      	ldr	r3, [r3, #16]
 8003734:	00db      	lsls	r3, r3, #3
 8003736:	4925      	ldr	r1, [pc, #148]	; (80037cc <HAL_RCC_OscConfig+0x240>)
 8003738:	4313      	orrs	r3, r2
 800373a:	600b      	str	r3, [r1, #0]
 800373c:	e015      	b.n	800376a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800373e:	4b24      	ldr	r3, [pc, #144]	; (80037d0 <HAL_RCC_OscConfig+0x244>)
 8003740:	2200      	movs	r2, #0
 8003742:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003744:	f7fd fd30 	bl	80011a8 <HAL_GetTick>
 8003748:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800374a:	e008      	b.n	800375e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800374c:	f7fd fd2c 	bl	80011a8 <HAL_GetTick>
 8003750:	4602      	mov	r2, r0
 8003752:	693b      	ldr	r3, [r7, #16]
 8003754:	1ad3      	subs	r3, r2, r3
 8003756:	2b02      	cmp	r3, #2
 8003758:	d901      	bls.n	800375e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800375a:	2303      	movs	r3, #3
 800375c:	e187      	b.n	8003a6e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800375e:	4b1b      	ldr	r3, [pc, #108]	; (80037cc <HAL_RCC_OscConfig+0x240>)
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f003 0302 	and.w	r3, r3, #2
 8003766:	2b00      	cmp	r3, #0
 8003768:	d1f0      	bne.n	800374c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f003 0308 	and.w	r3, r3, #8
 8003772:	2b00      	cmp	r3, #0
 8003774:	d036      	beq.n	80037e4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	695b      	ldr	r3, [r3, #20]
 800377a:	2b00      	cmp	r3, #0
 800377c:	d016      	beq.n	80037ac <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800377e:	4b15      	ldr	r3, [pc, #84]	; (80037d4 <HAL_RCC_OscConfig+0x248>)
 8003780:	2201      	movs	r2, #1
 8003782:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003784:	f7fd fd10 	bl	80011a8 <HAL_GetTick>
 8003788:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800378a:	e008      	b.n	800379e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800378c:	f7fd fd0c 	bl	80011a8 <HAL_GetTick>
 8003790:	4602      	mov	r2, r0
 8003792:	693b      	ldr	r3, [r7, #16]
 8003794:	1ad3      	subs	r3, r2, r3
 8003796:	2b02      	cmp	r3, #2
 8003798:	d901      	bls.n	800379e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800379a:	2303      	movs	r3, #3
 800379c:	e167      	b.n	8003a6e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800379e:	4b0b      	ldr	r3, [pc, #44]	; (80037cc <HAL_RCC_OscConfig+0x240>)
 80037a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037a2:	f003 0302 	and.w	r3, r3, #2
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d0f0      	beq.n	800378c <HAL_RCC_OscConfig+0x200>
 80037aa:	e01b      	b.n	80037e4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80037ac:	4b09      	ldr	r3, [pc, #36]	; (80037d4 <HAL_RCC_OscConfig+0x248>)
 80037ae:	2200      	movs	r2, #0
 80037b0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80037b2:	f7fd fcf9 	bl	80011a8 <HAL_GetTick>
 80037b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80037b8:	e00e      	b.n	80037d8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80037ba:	f7fd fcf5 	bl	80011a8 <HAL_GetTick>
 80037be:	4602      	mov	r2, r0
 80037c0:	693b      	ldr	r3, [r7, #16]
 80037c2:	1ad3      	subs	r3, r2, r3
 80037c4:	2b02      	cmp	r3, #2
 80037c6:	d907      	bls.n	80037d8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80037c8:	2303      	movs	r3, #3
 80037ca:	e150      	b.n	8003a6e <HAL_RCC_OscConfig+0x4e2>
 80037cc:	40023800 	.word	0x40023800
 80037d0:	42470000 	.word	0x42470000
 80037d4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80037d8:	4b88      	ldr	r3, [pc, #544]	; (80039fc <HAL_RCC_OscConfig+0x470>)
 80037da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037dc:	f003 0302 	and.w	r3, r3, #2
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d1ea      	bne.n	80037ba <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f003 0304 	and.w	r3, r3, #4
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	f000 8097 	beq.w	8003920 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80037f2:	2300      	movs	r3, #0
 80037f4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80037f6:	4b81      	ldr	r3, [pc, #516]	; (80039fc <HAL_RCC_OscConfig+0x470>)
 80037f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d10f      	bne.n	8003822 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003802:	2300      	movs	r3, #0
 8003804:	60bb      	str	r3, [r7, #8]
 8003806:	4b7d      	ldr	r3, [pc, #500]	; (80039fc <HAL_RCC_OscConfig+0x470>)
 8003808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800380a:	4a7c      	ldr	r2, [pc, #496]	; (80039fc <HAL_RCC_OscConfig+0x470>)
 800380c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003810:	6413      	str	r3, [r2, #64]	; 0x40
 8003812:	4b7a      	ldr	r3, [pc, #488]	; (80039fc <HAL_RCC_OscConfig+0x470>)
 8003814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003816:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800381a:	60bb      	str	r3, [r7, #8]
 800381c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800381e:	2301      	movs	r3, #1
 8003820:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003822:	4b77      	ldr	r3, [pc, #476]	; (8003a00 <HAL_RCC_OscConfig+0x474>)
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800382a:	2b00      	cmp	r3, #0
 800382c:	d118      	bne.n	8003860 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800382e:	4b74      	ldr	r3, [pc, #464]	; (8003a00 <HAL_RCC_OscConfig+0x474>)
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	4a73      	ldr	r2, [pc, #460]	; (8003a00 <HAL_RCC_OscConfig+0x474>)
 8003834:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003838:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800383a:	f7fd fcb5 	bl	80011a8 <HAL_GetTick>
 800383e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003840:	e008      	b.n	8003854 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003842:	f7fd fcb1 	bl	80011a8 <HAL_GetTick>
 8003846:	4602      	mov	r2, r0
 8003848:	693b      	ldr	r3, [r7, #16]
 800384a:	1ad3      	subs	r3, r2, r3
 800384c:	2b02      	cmp	r3, #2
 800384e:	d901      	bls.n	8003854 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003850:	2303      	movs	r3, #3
 8003852:	e10c      	b.n	8003a6e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003854:	4b6a      	ldr	r3, [pc, #424]	; (8003a00 <HAL_RCC_OscConfig+0x474>)
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800385c:	2b00      	cmp	r3, #0
 800385e:	d0f0      	beq.n	8003842 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	689b      	ldr	r3, [r3, #8]
 8003864:	2b01      	cmp	r3, #1
 8003866:	d106      	bne.n	8003876 <HAL_RCC_OscConfig+0x2ea>
 8003868:	4b64      	ldr	r3, [pc, #400]	; (80039fc <HAL_RCC_OscConfig+0x470>)
 800386a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800386c:	4a63      	ldr	r2, [pc, #396]	; (80039fc <HAL_RCC_OscConfig+0x470>)
 800386e:	f043 0301 	orr.w	r3, r3, #1
 8003872:	6713      	str	r3, [r2, #112]	; 0x70
 8003874:	e01c      	b.n	80038b0 <HAL_RCC_OscConfig+0x324>
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	689b      	ldr	r3, [r3, #8]
 800387a:	2b05      	cmp	r3, #5
 800387c:	d10c      	bne.n	8003898 <HAL_RCC_OscConfig+0x30c>
 800387e:	4b5f      	ldr	r3, [pc, #380]	; (80039fc <HAL_RCC_OscConfig+0x470>)
 8003880:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003882:	4a5e      	ldr	r2, [pc, #376]	; (80039fc <HAL_RCC_OscConfig+0x470>)
 8003884:	f043 0304 	orr.w	r3, r3, #4
 8003888:	6713      	str	r3, [r2, #112]	; 0x70
 800388a:	4b5c      	ldr	r3, [pc, #368]	; (80039fc <HAL_RCC_OscConfig+0x470>)
 800388c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800388e:	4a5b      	ldr	r2, [pc, #364]	; (80039fc <HAL_RCC_OscConfig+0x470>)
 8003890:	f043 0301 	orr.w	r3, r3, #1
 8003894:	6713      	str	r3, [r2, #112]	; 0x70
 8003896:	e00b      	b.n	80038b0 <HAL_RCC_OscConfig+0x324>
 8003898:	4b58      	ldr	r3, [pc, #352]	; (80039fc <HAL_RCC_OscConfig+0x470>)
 800389a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800389c:	4a57      	ldr	r2, [pc, #348]	; (80039fc <HAL_RCC_OscConfig+0x470>)
 800389e:	f023 0301 	bic.w	r3, r3, #1
 80038a2:	6713      	str	r3, [r2, #112]	; 0x70
 80038a4:	4b55      	ldr	r3, [pc, #340]	; (80039fc <HAL_RCC_OscConfig+0x470>)
 80038a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038a8:	4a54      	ldr	r2, [pc, #336]	; (80039fc <HAL_RCC_OscConfig+0x470>)
 80038aa:	f023 0304 	bic.w	r3, r3, #4
 80038ae:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	689b      	ldr	r3, [r3, #8]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d015      	beq.n	80038e4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038b8:	f7fd fc76 	bl	80011a8 <HAL_GetTick>
 80038bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038be:	e00a      	b.n	80038d6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80038c0:	f7fd fc72 	bl	80011a8 <HAL_GetTick>
 80038c4:	4602      	mov	r2, r0
 80038c6:	693b      	ldr	r3, [r7, #16]
 80038c8:	1ad3      	subs	r3, r2, r3
 80038ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80038ce:	4293      	cmp	r3, r2
 80038d0:	d901      	bls.n	80038d6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80038d2:	2303      	movs	r3, #3
 80038d4:	e0cb      	b.n	8003a6e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038d6:	4b49      	ldr	r3, [pc, #292]	; (80039fc <HAL_RCC_OscConfig+0x470>)
 80038d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038da:	f003 0302 	and.w	r3, r3, #2
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d0ee      	beq.n	80038c0 <HAL_RCC_OscConfig+0x334>
 80038e2:	e014      	b.n	800390e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038e4:	f7fd fc60 	bl	80011a8 <HAL_GetTick>
 80038e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038ea:	e00a      	b.n	8003902 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80038ec:	f7fd fc5c 	bl	80011a8 <HAL_GetTick>
 80038f0:	4602      	mov	r2, r0
 80038f2:	693b      	ldr	r3, [r7, #16]
 80038f4:	1ad3      	subs	r3, r2, r3
 80038f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80038fa:	4293      	cmp	r3, r2
 80038fc:	d901      	bls.n	8003902 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80038fe:	2303      	movs	r3, #3
 8003900:	e0b5      	b.n	8003a6e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003902:	4b3e      	ldr	r3, [pc, #248]	; (80039fc <HAL_RCC_OscConfig+0x470>)
 8003904:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003906:	f003 0302 	and.w	r3, r3, #2
 800390a:	2b00      	cmp	r3, #0
 800390c:	d1ee      	bne.n	80038ec <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800390e:	7dfb      	ldrb	r3, [r7, #23]
 8003910:	2b01      	cmp	r3, #1
 8003912:	d105      	bne.n	8003920 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003914:	4b39      	ldr	r3, [pc, #228]	; (80039fc <HAL_RCC_OscConfig+0x470>)
 8003916:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003918:	4a38      	ldr	r2, [pc, #224]	; (80039fc <HAL_RCC_OscConfig+0x470>)
 800391a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800391e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	699b      	ldr	r3, [r3, #24]
 8003924:	2b00      	cmp	r3, #0
 8003926:	f000 80a1 	beq.w	8003a6c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800392a:	4b34      	ldr	r3, [pc, #208]	; (80039fc <HAL_RCC_OscConfig+0x470>)
 800392c:	689b      	ldr	r3, [r3, #8]
 800392e:	f003 030c 	and.w	r3, r3, #12
 8003932:	2b08      	cmp	r3, #8
 8003934:	d05c      	beq.n	80039f0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	699b      	ldr	r3, [r3, #24]
 800393a:	2b02      	cmp	r3, #2
 800393c:	d141      	bne.n	80039c2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800393e:	4b31      	ldr	r3, [pc, #196]	; (8003a04 <HAL_RCC_OscConfig+0x478>)
 8003940:	2200      	movs	r2, #0
 8003942:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003944:	f7fd fc30 	bl	80011a8 <HAL_GetTick>
 8003948:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800394a:	e008      	b.n	800395e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800394c:	f7fd fc2c 	bl	80011a8 <HAL_GetTick>
 8003950:	4602      	mov	r2, r0
 8003952:	693b      	ldr	r3, [r7, #16]
 8003954:	1ad3      	subs	r3, r2, r3
 8003956:	2b02      	cmp	r3, #2
 8003958:	d901      	bls.n	800395e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800395a:	2303      	movs	r3, #3
 800395c:	e087      	b.n	8003a6e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800395e:	4b27      	ldr	r3, [pc, #156]	; (80039fc <HAL_RCC_OscConfig+0x470>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003966:	2b00      	cmp	r3, #0
 8003968:	d1f0      	bne.n	800394c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	69da      	ldr	r2, [r3, #28]
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6a1b      	ldr	r3, [r3, #32]
 8003972:	431a      	orrs	r2, r3
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003978:	019b      	lsls	r3, r3, #6
 800397a:	431a      	orrs	r2, r3
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003980:	085b      	lsrs	r3, r3, #1
 8003982:	3b01      	subs	r3, #1
 8003984:	041b      	lsls	r3, r3, #16
 8003986:	431a      	orrs	r2, r3
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800398c:	061b      	lsls	r3, r3, #24
 800398e:	491b      	ldr	r1, [pc, #108]	; (80039fc <HAL_RCC_OscConfig+0x470>)
 8003990:	4313      	orrs	r3, r2
 8003992:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003994:	4b1b      	ldr	r3, [pc, #108]	; (8003a04 <HAL_RCC_OscConfig+0x478>)
 8003996:	2201      	movs	r2, #1
 8003998:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800399a:	f7fd fc05 	bl	80011a8 <HAL_GetTick>
 800399e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039a0:	e008      	b.n	80039b4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80039a2:	f7fd fc01 	bl	80011a8 <HAL_GetTick>
 80039a6:	4602      	mov	r2, r0
 80039a8:	693b      	ldr	r3, [r7, #16]
 80039aa:	1ad3      	subs	r3, r2, r3
 80039ac:	2b02      	cmp	r3, #2
 80039ae:	d901      	bls.n	80039b4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80039b0:	2303      	movs	r3, #3
 80039b2:	e05c      	b.n	8003a6e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039b4:	4b11      	ldr	r3, [pc, #68]	; (80039fc <HAL_RCC_OscConfig+0x470>)
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d0f0      	beq.n	80039a2 <HAL_RCC_OscConfig+0x416>
 80039c0:	e054      	b.n	8003a6c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039c2:	4b10      	ldr	r3, [pc, #64]	; (8003a04 <HAL_RCC_OscConfig+0x478>)
 80039c4:	2200      	movs	r2, #0
 80039c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039c8:	f7fd fbee 	bl	80011a8 <HAL_GetTick>
 80039cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039ce:	e008      	b.n	80039e2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80039d0:	f7fd fbea 	bl	80011a8 <HAL_GetTick>
 80039d4:	4602      	mov	r2, r0
 80039d6:	693b      	ldr	r3, [r7, #16]
 80039d8:	1ad3      	subs	r3, r2, r3
 80039da:	2b02      	cmp	r3, #2
 80039dc:	d901      	bls.n	80039e2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80039de:	2303      	movs	r3, #3
 80039e0:	e045      	b.n	8003a6e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039e2:	4b06      	ldr	r3, [pc, #24]	; (80039fc <HAL_RCC_OscConfig+0x470>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d1f0      	bne.n	80039d0 <HAL_RCC_OscConfig+0x444>
 80039ee:	e03d      	b.n	8003a6c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	699b      	ldr	r3, [r3, #24]
 80039f4:	2b01      	cmp	r3, #1
 80039f6:	d107      	bne.n	8003a08 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80039f8:	2301      	movs	r3, #1
 80039fa:	e038      	b.n	8003a6e <HAL_RCC_OscConfig+0x4e2>
 80039fc:	40023800 	.word	0x40023800
 8003a00:	40007000 	.word	0x40007000
 8003a04:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003a08:	4b1b      	ldr	r3, [pc, #108]	; (8003a78 <HAL_RCC_OscConfig+0x4ec>)
 8003a0a:	685b      	ldr	r3, [r3, #4]
 8003a0c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	699b      	ldr	r3, [r3, #24]
 8003a12:	2b01      	cmp	r3, #1
 8003a14:	d028      	beq.n	8003a68 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003a20:	429a      	cmp	r2, r3
 8003a22:	d121      	bne.n	8003a68 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a2e:	429a      	cmp	r2, r3
 8003a30:	d11a      	bne.n	8003a68 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003a32:	68fa      	ldr	r2, [r7, #12]
 8003a34:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003a38:	4013      	ands	r3, r2
 8003a3a:	687a      	ldr	r2, [r7, #4]
 8003a3c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003a3e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003a40:	4293      	cmp	r3, r2
 8003a42:	d111      	bne.n	8003a68 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a4e:	085b      	lsrs	r3, r3, #1
 8003a50:	3b01      	subs	r3, #1
 8003a52:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003a54:	429a      	cmp	r2, r3
 8003a56:	d107      	bne.n	8003a68 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a62:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003a64:	429a      	cmp	r2, r3
 8003a66:	d001      	beq.n	8003a6c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003a68:	2301      	movs	r3, #1
 8003a6a:	e000      	b.n	8003a6e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003a6c:	2300      	movs	r3, #0
}
 8003a6e:	4618      	mov	r0, r3
 8003a70:	3718      	adds	r7, #24
 8003a72:	46bd      	mov	sp, r7
 8003a74:	bd80      	pop	{r7, pc}
 8003a76:	bf00      	nop
 8003a78:	40023800 	.word	0x40023800

08003a7c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b084      	sub	sp, #16
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
 8003a84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d101      	bne.n	8003a90 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003a8c:	2301      	movs	r3, #1
 8003a8e:	e0cc      	b.n	8003c2a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003a90:	4b68      	ldr	r3, [pc, #416]	; (8003c34 <HAL_RCC_ClockConfig+0x1b8>)
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f003 0307 	and.w	r3, r3, #7
 8003a98:	683a      	ldr	r2, [r7, #0]
 8003a9a:	429a      	cmp	r2, r3
 8003a9c:	d90c      	bls.n	8003ab8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a9e:	4b65      	ldr	r3, [pc, #404]	; (8003c34 <HAL_RCC_ClockConfig+0x1b8>)
 8003aa0:	683a      	ldr	r2, [r7, #0]
 8003aa2:	b2d2      	uxtb	r2, r2
 8003aa4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003aa6:	4b63      	ldr	r3, [pc, #396]	; (8003c34 <HAL_RCC_ClockConfig+0x1b8>)
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f003 0307 	and.w	r3, r3, #7
 8003aae:	683a      	ldr	r2, [r7, #0]
 8003ab0:	429a      	cmp	r2, r3
 8003ab2:	d001      	beq.n	8003ab8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003ab4:	2301      	movs	r3, #1
 8003ab6:	e0b8      	b.n	8003c2a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f003 0302 	and.w	r3, r3, #2
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d020      	beq.n	8003b06 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f003 0304 	and.w	r3, r3, #4
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d005      	beq.n	8003adc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003ad0:	4b59      	ldr	r3, [pc, #356]	; (8003c38 <HAL_RCC_ClockConfig+0x1bc>)
 8003ad2:	689b      	ldr	r3, [r3, #8]
 8003ad4:	4a58      	ldr	r2, [pc, #352]	; (8003c38 <HAL_RCC_ClockConfig+0x1bc>)
 8003ad6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003ada:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f003 0308 	and.w	r3, r3, #8
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d005      	beq.n	8003af4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003ae8:	4b53      	ldr	r3, [pc, #332]	; (8003c38 <HAL_RCC_ClockConfig+0x1bc>)
 8003aea:	689b      	ldr	r3, [r3, #8]
 8003aec:	4a52      	ldr	r2, [pc, #328]	; (8003c38 <HAL_RCC_ClockConfig+0x1bc>)
 8003aee:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003af2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003af4:	4b50      	ldr	r3, [pc, #320]	; (8003c38 <HAL_RCC_ClockConfig+0x1bc>)
 8003af6:	689b      	ldr	r3, [r3, #8]
 8003af8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	689b      	ldr	r3, [r3, #8]
 8003b00:	494d      	ldr	r1, [pc, #308]	; (8003c38 <HAL_RCC_ClockConfig+0x1bc>)
 8003b02:	4313      	orrs	r3, r2
 8003b04:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f003 0301 	and.w	r3, r3, #1
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d044      	beq.n	8003b9c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	685b      	ldr	r3, [r3, #4]
 8003b16:	2b01      	cmp	r3, #1
 8003b18:	d107      	bne.n	8003b2a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b1a:	4b47      	ldr	r3, [pc, #284]	; (8003c38 <HAL_RCC_ClockConfig+0x1bc>)
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d119      	bne.n	8003b5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b26:	2301      	movs	r3, #1
 8003b28:	e07f      	b.n	8003c2a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	685b      	ldr	r3, [r3, #4]
 8003b2e:	2b02      	cmp	r3, #2
 8003b30:	d003      	beq.n	8003b3a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003b36:	2b03      	cmp	r3, #3
 8003b38:	d107      	bne.n	8003b4a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b3a:	4b3f      	ldr	r3, [pc, #252]	; (8003c38 <HAL_RCC_ClockConfig+0x1bc>)
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d109      	bne.n	8003b5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b46:	2301      	movs	r3, #1
 8003b48:	e06f      	b.n	8003c2a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b4a:	4b3b      	ldr	r3, [pc, #236]	; (8003c38 <HAL_RCC_ClockConfig+0x1bc>)
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f003 0302 	and.w	r3, r3, #2
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d101      	bne.n	8003b5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b56:	2301      	movs	r3, #1
 8003b58:	e067      	b.n	8003c2a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003b5a:	4b37      	ldr	r3, [pc, #220]	; (8003c38 <HAL_RCC_ClockConfig+0x1bc>)
 8003b5c:	689b      	ldr	r3, [r3, #8]
 8003b5e:	f023 0203 	bic.w	r2, r3, #3
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	685b      	ldr	r3, [r3, #4]
 8003b66:	4934      	ldr	r1, [pc, #208]	; (8003c38 <HAL_RCC_ClockConfig+0x1bc>)
 8003b68:	4313      	orrs	r3, r2
 8003b6a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003b6c:	f7fd fb1c 	bl	80011a8 <HAL_GetTick>
 8003b70:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b72:	e00a      	b.n	8003b8a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b74:	f7fd fb18 	bl	80011a8 <HAL_GetTick>
 8003b78:	4602      	mov	r2, r0
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	1ad3      	subs	r3, r2, r3
 8003b7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b82:	4293      	cmp	r3, r2
 8003b84:	d901      	bls.n	8003b8a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003b86:	2303      	movs	r3, #3
 8003b88:	e04f      	b.n	8003c2a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b8a:	4b2b      	ldr	r3, [pc, #172]	; (8003c38 <HAL_RCC_ClockConfig+0x1bc>)
 8003b8c:	689b      	ldr	r3, [r3, #8]
 8003b8e:	f003 020c 	and.w	r2, r3, #12
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	685b      	ldr	r3, [r3, #4]
 8003b96:	009b      	lsls	r3, r3, #2
 8003b98:	429a      	cmp	r2, r3
 8003b9a:	d1eb      	bne.n	8003b74 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003b9c:	4b25      	ldr	r3, [pc, #148]	; (8003c34 <HAL_RCC_ClockConfig+0x1b8>)
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f003 0307 	and.w	r3, r3, #7
 8003ba4:	683a      	ldr	r2, [r7, #0]
 8003ba6:	429a      	cmp	r2, r3
 8003ba8:	d20c      	bcs.n	8003bc4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003baa:	4b22      	ldr	r3, [pc, #136]	; (8003c34 <HAL_RCC_ClockConfig+0x1b8>)
 8003bac:	683a      	ldr	r2, [r7, #0]
 8003bae:	b2d2      	uxtb	r2, r2
 8003bb0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bb2:	4b20      	ldr	r3, [pc, #128]	; (8003c34 <HAL_RCC_ClockConfig+0x1b8>)
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f003 0307 	and.w	r3, r3, #7
 8003bba:	683a      	ldr	r2, [r7, #0]
 8003bbc:	429a      	cmp	r2, r3
 8003bbe:	d001      	beq.n	8003bc4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003bc0:	2301      	movs	r3, #1
 8003bc2:	e032      	b.n	8003c2a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f003 0304 	and.w	r3, r3, #4
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d008      	beq.n	8003be2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003bd0:	4b19      	ldr	r3, [pc, #100]	; (8003c38 <HAL_RCC_ClockConfig+0x1bc>)
 8003bd2:	689b      	ldr	r3, [r3, #8]
 8003bd4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	68db      	ldr	r3, [r3, #12]
 8003bdc:	4916      	ldr	r1, [pc, #88]	; (8003c38 <HAL_RCC_ClockConfig+0x1bc>)
 8003bde:	4313      	orrs	r3, r2
 8003be0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f003 0308 	and.w	r3, r3, #8
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d009      	beq.n	8003c02 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003bee:	4b12      	ldr	r3, [pc, #72]	; (8003c38 <HAL_RCC_ClockConfig+0x1bc>)
 8003bf0:	689b      	ldr	r3, [r3, #8]
 8003bf2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	691b      	ldr	r3, [r3, #16]
 8003bfa:	00db      	lsls	r3, r3, #3
 8003bfc:	490e      	ldr	r1, [pc, #56]	; (8003c38 <HAL_RCC_ClockConfig+0x1bc>)
 8003bfe:	4313      	orrs	r3, r2
 8003c00:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003c02:	f000 f821 	bl	8003c48 <HAL_RCC_GetSysClockFreq>
 8003c06:	4602      	mov	r2, r0
 8003c08:	4b0b      	ldr	r3, [pc, #44]	; (8003c38 <HAL_RCC_ClockConfig+0x1bc>)
 8003c0a:	689b      	ldr	r3, [r3, #8]
 8003c0c:	091b      	lsrs	r3, r3, #4
 8003c0e:	f003 030f 	and.w	r3, r3, #15
 8003c12:	490a      	ldr	r1, [pc, #40]	; (8003c3c <HAL_RCC_ClockConfig+0x1c0>)
 8003c14:	5ccb      	ldrb	r3, [r1, r3]
 8003c16:	fa22 f303 	lsr.w	r3, r2, r3
 8003c1a:	4a09      	ldr	r2, [pc, #36]	; (8003c40 <HAL_RCC_ClockConfig+0x1c4>)
 8003c1c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003c1e:	4b09      	ldr	r3, [pc, #36]	; (8003c44 <HAL_RCC_ClockConfig+0x1c8>)
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	4618      	mov	r0, r3
 8003c24:	f7fd fa7c 	bl	8001120 <HAL_InitTick>

  return HAL_OK;
 8003c28:	2300      	movs	r3, #0
}
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	3710      	adds	r7, #16
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	bd80      	pop	{r7, pc}
 8003c32:	bf00      	nop
 8003c34:	40023c00 	.word	0x40023c00
 8003c38:	40023800 	.word	0x40023800
 8003c3c:	080093c0 	.word	0x080093c0
 8003c40:	20000000 	.word	0x20000000
 8003c44:	20000028 	.word	0x20000028

08003c48 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c48:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003c4c:	b090      	sub	sp, #64	; 0x40
 8003c4e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003c50:	2300      	movs	r3, #0
 8003c52:	637b      	str	r3, [r7, #52]	; 0x34
 8003c54:	2300      	movs	r3, #0
 8003c56:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003c58:	2300      	movs	r3, #0
 8003c5a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003c5c:	2300      	movs	r3, #0
 8003c5e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003c60:	4b59      	ldr	r3, [pc, #356]	; (8003dc8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003c62:	689b      	ldr	r3, [r3, #8]
 8003c64:	f003 030c 	and.w	r3, r3, #12
 8003c68:	2b08      	cmp	r3, #8
 8003c6a:	d00d      	beq.n	8003c88 <HAL_RCC_GetSysClockFreq+0x40>
 8003c6c:	2b08      	cmp	r3, #8
 8003c6e:	f200 80a1 	bhi.w	8003db4 <HAL_RCC_GetSysClockFreq+0x16c>
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d002      	beq.n	8003c7c <HAL_RCC_GetSysClockFreq+0x34>
 8003c76:	2b04      	cmp	r3, #4
 8003c78:	d003      	beq.n	8003c82 <HAL_RCC_GetSysClockFreq+0x3a>
 8003c7a:	e09b      	b.n	8003db4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003c7c:	4b53      	ldr	r3, [pc, #332]	; (8003dcc <HAL_RCC_GetSysClockFreq+0x184>)
 8003c7e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003c80:	e09b      	b.n	8003dba <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003c82:	4b53      	ldr	r3, [pc, #332]	; (8003dd0 <HAL_RCC_GetSysClockFreq+0x188>)
 8003c84:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003c86:	e098      	b.n	8003dba <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003c88:	4b4f      	ldr	r3, [pc, #316]	; (8003dc8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003c8a:	685b      	ldr	r3, [r3, #4]
 8003c8c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003c90:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003c92:	4b4d      	ldr	r3, [pc, #308]	; (8003dc8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003c94:	685b      	ldr	r3, [r3, #4]
 8003c96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d028      	beq.n	8003cf0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c9e:	4b4a      	ldr	r3, [pc, #296]	; (8003dc8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003ca0:	685b      	ldr	r3, [r3, #4]
 8003ca2:	099b      	lsrs	r3, r3, #6
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	623b      	str	r3, [r7, #32]
 8003ca8:	627a      	str	r2, [r7, #36]	; 0x24
 8003caa:	6a3b      	ldr	r3, [r7, #32]
 8003cac:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003cb0:	2100      	movs	r1, #0
 8003cb2:	4b47      	ldr	r3, [pc, #284]	; (8003dd0 <HAL_RCC_GetSysClockFreq+0x188>)
 8003cb4:	fb03 f201 	mul.w	r2, r3, r1
 8003cb8:	2300      	movs	r3, #0
 8003cba:	fb00 f303 	mul.w	r3, r0, r3
 8003cbe:	4413      	add	r3, r2
 8003cc0:	4a43      	ldr	r2, [pc, #268]	; (8003dd0 <HAL_RCC_GetSysClockFreq+0x188>)
 8003cc2:	fba0 1202 	umull	r1, r2, r0, r2
 8003cc6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003cc8:	460a      	mov	r2, r1
 8003cca:	62ba      	str	r2, [r7, #40]	; 0x28
 8003ccc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003cce:	4413      	add	r3, r2
 8003cd0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003cd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	61bb      	str	r3, [r7, #24]
 8003cd8:	61fa      	str	r2, [r7, #28]
 8003cda:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003cde:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003ce2:	f7fc fa79 	bl	80001d8 <__aeabi_uldivmod>
 8003ce6:	4602      	mov	r2, r0
 8003ce8:	460b      	mov	r3, r1
 8003cea:	4613      	mov	r3, r2
 8003cec:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003cee:	e053      	b.n	8003d98 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003cf0:	4b35      	ldr	r3, [pc, #212]	; (8003dc8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003cf2:	685b      	ldr	r3, [r3, #4]
 8003cf4:	099b      	lsrs	r3, r3, #6
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	613b      	str	r3, [r7, #16]
 8003cfa:	617a      	str	r2, [r7, #20]
 8003cfc:	693b      	ldr	r3, [r7, #16]
 8003cfe:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003d02:	f04f 0b00 	mov.w	fp, #0
 8003d06:	4652      	mov	r2, sl
 8003d08:	465b      	mov	r3, fp
 8003d0a:	f04f 0000 	mov.w	r0, #0
 8003d0e:	f04f 0100 	mov.w	r1, #0
 8003d12:	0159      	lsls	r1, r3, #5
 8003d14:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003d18:	0150      	lsls	r0, r2, #5
 8003d1a:	4602      	mov	r2, r0
 8003d1c:	460b      	mov	r3, r1
 8003d1e:	ebb2 080a 	subs.w	r8, r2, sl
 8003d22:	eb63 090b 	sbc.w	r9, r3, fp
 8003d26:	f04f 0200 	mov.w	r2, #0
 8003d2a:	f04f 0300 	mov.w	r3, #0
 8003d2e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003d32:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003d36:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003d3a:	ebb2 0408 	subs.w	r4, r2, r8
 8003d3e:	eb63 0509 	sbc.w	r5, r3, r9
 8003d42:	f04f 0200 	mov.w	r2, #0
 8003d46:	f04f 0300 	mov.w	r3, #0
 8003d4a:	00eb      	lsls	r3, r5, #3
 8003d4c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003d50:	00e2      	lsls	r2, r4, #3
 8003d52:	4614      	mov	r4, r2
 8003d54:	461d      	mov	r5, r3
 8003d56:	eb14 030a 	adds.w	r3, r4, sl
 8003d5a:	603b      	str	r3, [r7, #0]
 8003d5c:	eb45 030b 	adc.w	r3, r5, fp
 8003d60:	607b      	str	r3, [r7, #4]
 8003d62:	f04f 0200 	mov.w	r2, #0
 8003d66:	f04f 0300 	mov.w	r3, #0
 8003d6a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003d6e:	4629      	mov	r1, r5
 8003d70:	028b      	lsls	r3, r1, #10
 8003d72:	4621      	mov	r1, r4
 8003d74:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003d78:	4621      	mov	r1, r4
 8003d7a:	028a      	lsls	r2, r1, #10
 8003d7c:	4610      	mov	r0, r2
 8003d7e:	4619      	mov	r1, r3
 8003d80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d82:	2200      	movs	r2, #0
 8003d84:	60bb      	str	r3, [r7, #8]
 8003d86:	60fa      	str	r2, [r7, #12]
 8003d88:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003d8c:	f7fc fa24 	bl	80001d8 <__aeabi_uldivmod>
 8003d90:	4602      	mov	r2, r0
 8003d92:	460b      	mov	r3, r1
 8003d94:	4613      	mov	r3, r2
 8003d96:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003d98:	4b0b      	ldr	r3, [pc, #44]	; (8003dc8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003d9a:	685b      	ldr	r3, [r3, #4]
 8003d9c:	0c1b      	lsrs	r3, r3, #16
 8003d9e:	f003 0303 	and.w	r3, r3, #3
 8003da2:	3301      	adds	r3, #1
 8003da4:	005b      	lsls	r3, r3, #1
 8003da6:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003da8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003daa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dac:	fbb2 f3f3 	udiv	r3, r2, r3
 8003db0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003db2:	e002      	b.n	8003dba <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003db4:	4b05      	ldr	r3, [pc, #20]	; (8003dcc <HAL_RCC_GetSysClockFreq+0x184>)
 8003db6:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003db8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003dba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	3740      	adds	r7, #64	; 0x40
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003dc6:	bf00      	nop
 8003dc8:	40023800 	.word	0x40023800
 8003dcc:	00f42400 	.word	0x00f42400
 8003dd0:	017d7840 	.word	0x017d7840

08003dd4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003dd4:	b480      	push	{r7}
 8003dd6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003dd8:	4b03      	ldr	r3, [pc, #12]	; (8003de8 <HAL_RCC_GetHCLKFreq+0x14>)
 8003dda:	681b      	ldr	r3, [r3, #0]
}
 8003ddc:	4618      	mov	r0, r3
 8003dde:	46bd      	mov	sp, r7
 8003de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de4:	4770      	bx	lr
 8003de6:	bf00      	nop
 8003de8:	20000000 	.word	0x20000000

08003dec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003df0:	f7ff fff0 	bl	8003dd4 <HAL_RCC_GetHCLKFreq>
 8003df4:	4602      	mov	r2, r0
 8003df6:	4b05      	ldr	r3, [pc, #20]	; (8003e0c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003df8:	689b      	ldr	r3, [r3, #8]
 8003dfa:	0a9b      	lsrs	r3, r3, #10
 8003dfc:	f003 0307 	and.w	r3, r3, #7
 8003e00:	4903      	ldr	r1, [pc, #12]	; (8003e10 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003e02:	5ccb      	ldrb	r3, [r1, r3]
 8003e04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e08:	4618      	mov	r0, r3
 8003e0a:	bd80      	pop	{r7, pc}
 8003e0c:	40023800 	.word	0x40023800
 8003e10:	080093d0 	.word	0x080093d0

08003e14 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003e18:	f7ff ffdc 	bl	8003dd4 <HAL_RCC_GetHCLKFreq>
 8003e1c:	4602      	mov	r2, r0
 8003e1e:	4b05      	ldr	r3, [pc, #20]	; (8003e34 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003e20:	689b      	ldr	r3, [r3, #8]
 8003e22:	0b5b      	lsrs	r3, r3, #13
 8003e24:	f003 0307 	and.w	r3, r3, #7
 8003e28:	4903      	ldr	r1, [pc, #12]	; (8003e38 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003e2a:	5ccb      	ldrb	r3, [r1, r3]
 8003e2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e30:	4618      	mov	r0, r3
 8003e32:	bd80      	pop	{r7, pc}
 8003e34:	40023800 	.word	0x40023800
 8003e38:	080093d0 	.word	0x080093d0

08003e3c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b086      	sub	sp, #24
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003e44:	2300      	movs	r3, #0
 8003e46:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8003e48:	2300      	movs	r3, #0
 8003e4a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f003 0301 	and.w	r3, r3, #1
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d105      	bne.n	8003e64 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d038      	beq.n	8003ed6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003e64:	4b68      	ldr	r3, [pc, #416]	; (8004008 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003e66:	2200      	movs	r2, #0
 8003e68:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003e6a:	f7fd f99d 	bl	80011a8 <HAL_GetTick>
 8003e6e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003e70:	e008      	b.n	8003e84 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003e72:	f7fd f999 	bl	80011a8 <HAL_GetTick>
 8003e76:	4602      	mov	r2, r0
 8003e78:	697b      	ldr	r3, [r7, #20]
 8003e7a:	1ad3      	subs	r3, r2, r3
 8003e7c:	2b02      	cmp	r3, #2
 8003e7e:	d901      	bls.n	8003e84 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003e80:	2303      	movs	r3, #3
 8003e82:	e0bd      	b.n	8004000 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003e84:	4b61      	ldr	r3, [pc, #388]	; (800400c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d1f0      	bne.n	8003e72 <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	685a      	ldr	r2, [r3, #4]
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	689b      	ldr	r3, [r3, #8]
 8003e98:	019b      	lsls	r3, r3, #6
 8003e9a:	431a      	orrs	r2, r3
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	68db      	ldr	r3, [r3, #12]
 8003ea0:	071b      	lsls	r3, r3, #28
 8003ea2:	495a      	ldr	r1, [pc, #360]	; (800400c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ea4:	4313      	orrs	r3, r2
 8003ea6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003eaa:	4b57      	ldr	r3, [pc, #348]	; (8004008 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003eac:	2201      	movs	r2, #1
 8003eae:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003eb0:	f7fd f97a 	bl	80011a8 <HAL_GetTick>
 8003eb4:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003eb6:	e008      	b.n	8003eca <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003eb8:	f7fd f976 	bl	80011a8 <HAL_GetTick>
 8003ebc:	4602      	mov	r2, r0
 8003ebe:	697b      	ldr	r3, [r7, #20]
 8003ec0:	1ad3      	subs	r3, r2, r3
 8003ec2:	2b02      	cmp	r3, #2
 8003ec4:	d901      	bls.n	8003eca <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003ec6:	2303      	movs	r3, #3
 8003ec8:	e09a      	b.n	8004000 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003eca:	4b50      	ldr	r3, [pc, #320]	; (800400c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d0f0      	beq.n	8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f003 0302 	and.w	r3, r3, #2
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	f000 8083 	beq.w	8003fea <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003ee4:	2300      	movs	r3, #0
 8003ee6:	60fb      	str	r3, [r7, #12]
 8003ee8:	4b48      	ldr	r3, [pc, #288]	; (800400c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003eea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eec:	4a47      	ldr	r2, [pc, #284]	; (800400c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003eee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ef2:	6413      	str	r3, [r2, #64]	; 0x40
 8003ef4:	4b45      	ldr	r3, [pc, #276]	; (800400c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ef6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ef8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003efc:	60fb      	str	r3, [r7, #12]
 8003efe:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003f00:	4b43      	ldr	r3, [pc, #268]	; (8004010 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	4a42      	ldr	r2, [pc, #264]	; (8004010 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003f06:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f0a:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003f0c:	f7fd f94c 	bl	80011a8 <HAL_GetTick>
 8003f10:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003f12:	e008      	b.n	8003f26 <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003f14:	f7fd f948 	bl	80011a8 <HAL_GetTick>
 8003f18:	4602      	mov	r2, r0
 8003f1a:	697b      	ldr	r3, [r7, #20]
 8003f1c:	1ad3      	subs	r3, r2, r3
 8003f1e:	2b02      	cmp	r3, #2
 8003f20:	d901      	bls.n	8003f26 <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 8003f22:	2303      	movs	r3, #3
 8003f24:	e06c      	b.n	8004000 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003f26:	4b3a      	ldr	r3, [pc, #232]	; (8004010 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d0f0      	beq.n	8003f14 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003f32:	4b36      	ldr	r3, [pc, #216]	; (800400c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f3a:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003f3c:	693b      	ldr	r3, [r7, #16]
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d02f      	beq.n	8003fa2 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	691b      	ldr	r3, [r3, #16]
 8003f46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f4a:	693a      	ldr	r2, [r7, #16]
 8003f4c:	429a      	cmp	r2, r3
 8003f4e:	d028      	beq.n	8003fa2 <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003f50:	4b2e      	ldr	r3, [pc, #184]	; (800400c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f54:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f58:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003f5a:	4b2e      	ldr	r3, [pc, #184]	; (8004014 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003f5c:	2201      	movs	r2, #1
 8003f5e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003f60:	4b2c      	ldr	r3, [pc, #176]	; (8004014 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003f62:	2200      	movs	r2, #0
 8003f64:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003f66:	4a29      	ldr	r2, [pc, #164]	; (800400c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f68:	693b      	ldr	r3, [r7, #16]
 8003f6a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003f6c:	4b27      	ldr	r3, [pc, #156]	; (800400c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f70:	f003 0301 	and.w	r3, r3, #1
 8003f74:	2b01      	cmp	r3, #1
 8003f76:	d114      	bne.n	8003fa2 <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003f78:	f7fd f916 	bl	80011a8 <HAL_GetTick>
 8003f7c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f7e:	e00a      	b.n	8003f96 <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f80:	f7fd f912 	bl	80011a8 <HAL_GetTick>
 8003f84:	4602      	mov	r2, r0
 8003f86:	697b      	ldr	r3, [r7, #20]
 8003f88:	1ad3      	subs	r3, r2, r3
 8003f8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f8e:	4293      	cmp	r3, r2
 8003f90:	d901      	bls.n	8003f96 <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8003f92:	2303      	movs	r3, #3
 8003f94:	e034      	b.n	8004000 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f96:	4b1d      	ldr	r3, [pc, #116]	; (800400c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f9a:	f003 0302 	and.w	r3, r3, #2
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d0ee      	beq.n	8003f80 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	691b      	ldr	r3, [r3, #16]
 8003fa6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003faa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003fae:	d10d      	bne.n	8003fcc <HAL_RCCEx_PeriphCLKConfig+0x190>
 8003fb0:	4b16      	ldr	r3, [pc, #88]	; (800400c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003fb2:	689b      	ldr	r3, [r3, #8]
 8003fb4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	691b      	ldr	r3, [r3, #16]
 8003fbc:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8003fc0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003fc4:	4911      	ldr	r1, [pc, #68]	; (800400c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003fc6:	4313      	orrs	r3, r2
 8003fc8:	608b      	str	r3, [r1, #8]
 8003fca:	e005      	b.n	8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8003fcc:	4b0f      	ldr	r3, [pc, #60]	; (800400c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003fce:	689b      	ldr	r3, [r3, #8]
 8003fd0:	4a0e      	ldr	r2, [pc, #56]	; (800400c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003fd2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003fd6:	6093      	str	r3, [r2, #8]
 8003fd8:	4b0c      	ldr	r3, [pc, #48]	; (800400c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003fda:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	691b      	ldr	r3, [r3, #16]
 8003fe0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003fe4:	4909      	ldr	r1, [pc, #36]	; (800400c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003fe6:	4313      	orrs	r3, r2
 8003fe8:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f003 0308 	and.w	r3, r3, #8
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d003      	beq.n	8003ffe <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	7d1a      	ldrb	r2, [r3, #20]
 8003ffa:	4b07      	ldr	r3, [pc, #28]	; (8004018 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8003ffc:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8003ffe:	2300      	movs	r3, #0
}
 8004000:	4618      	mov	r0, r3
 8004002:	3718      	adds	r7, #24
 8004004:	46bd      	mov	sp, r7
 8004006:	bd80      	pop	{r7, pc}
 8004008:	42470068 	.word	0x42470068
 800400c:	40023800 	.word	0x40023800
 8004010:	40007000 	.word	0x40007000
 8004014:	42470e40 	.word	0x42470e40
 8004018:	424711e0 	.word	0x424711e0

0800401c <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800401c:	b580      	push	{r7, lr}
 800401e:	b082      	sub	sp, #8
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2b00      	cmp	r3, #0
 8004028:	d101      	bne.n	800402e <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 800402a:	2301      	movs	r3, #1
 800402c:	e083      	b.n	8004136 <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	7f5b      	ldrb	r3, [r3, #29]
 8004032:	b2db      	uxtb	r3, r3
 8004034:	2b00      	cmp	r3, #0
 8004036:	d105      	bne.n	8004044 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2200      	movs	r2, #0
 800403c:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800403e:	6878      	ldr	r0, [r7, #4]
 8004040:	f7fc fdce 	bl	8000be0 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2202      	movs	r2, #2
 8004048:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	22ca      	movs	r2, #202	; 0xca
 8004050:	625a      	str	r2, [r3, #36]	; 0x24
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	2253      	movs	r2, #83	; 0x53
 8004058:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800405a:	6878      	ldr	r0, [r7, #4]
 800405c:	f000 f897 	bl	800418e <RTC_EnterInitMode>
 8004060:	4603      	mov	r3, r0
 8004062:	2b00      	cmp	r3, #0
 8004064:	d008      	beq.n	8004078 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	22ff      	movs	r2, #255	; 0xff
 800406c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	2204      	movs	r2, #4
 8004072:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8004074:	2301      	movs	r3, #1
 8004076:	e05e      	b.n	8004136 <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	689b      	ldr	r3, [r3, #8]
 800407e:	687a      	ldr	r2, [r7, #4]
 8004080:	6812      	ldr	r2, [r2, #0]
 8004082:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8004086:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800408a:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	6899      	ldr	r1, [r3, #8]
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	685a      	ldr	r2, [r3, #4]
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	691b      	ldr	r3, [r3, #16]
 800409a:	431a      	orrs	r2, r3
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	695b      	ldr	r3, [r3, #20]
 80040a0:	431a      	orrs	r2, r3
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	430a      	orrs	r2, r1
 80040a8:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	687a      	ldr	r2, [r7, #4]
 80040b0:	68d2      	ldr	r2, [r2, #12]
 80040b2:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	6919      	ldr	r1, [r3, #16]
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	689b      	ldr	r3, [r3, #8]
 80040be:	041a      	lsls	r2, r3, #16
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	430a      	orrs	r2, r1
 80040c6:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	68da      	ldr	r2, [r3, #12]
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80040d6:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	689b      	ldr	r3, [r3, #8]
 80040de:	f003 0320 	and.w	r3, r3, #32
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d10e      	bne.n	8004104 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80040e6:	6878      	ldr	r0, [r7, #4]
 80040e8:	f000 f829 	bl	800413e <HAL_RTC_WaitForSynchro>
 80040ec:	4603      	mov	r3, r0
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d008      	beq.n	8004104 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	22ff      	movs	r2, #255	; 0xff
 80040f8:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	2204      	movs	r2, #4
 80040fe:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8004100:	2301      	movs	r3, #1
 8004102:	e018      	b.n	8004136 <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004112:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	699a      	ldr	r2, [r3, #24]
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	430a      	orrs	r2, r1
 8004124:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	22ff      	movs	r2, #255	; 0xff
 800412c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	2201      	movs	r2, #1
 8004132:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8004134:	2300      	movs	r3, #0
  }
}
 8004136:	4618      	mov	r0, r3
 8004138:	3708      	adds	r7, #8
 800413a:	46bd      	mov	sp, r7
 800413c:	bd80      	pop	{r7, pc}

0800413e <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 800413e:	b580      	push	{r7, lr}
 8004140:	b084      	sub	sp, #16
 8004142:	af00      	add	r7, sp, #0
 8004144:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004146:	2300      	movs	r3, #0
 8004148:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	68da      	ldr	r2, [r3, #12]
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004158:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800415a:	f7fd f825 	bl	80011a8 <HAL_GetTick>
 800415e:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8004160:	e009      	b.n	8004176 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8004162:	f7fd f821 	bl	80011a8 <HAL_GetTick>
 8004166:	4602      	mov	r2, r0
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	1ad3      	subs	r3, r2, r3
 800416c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004170:	d901      	bls.n	8004176 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8004172:	2303      	movs	r3, #3
 8004174:	e007      	b.n	8004186 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	68db      	ldr	r3, [r3, #12]
 800417c:	f003 0320 	and.w	r3, r3, #32
 8004180:	2b00      	cmp	r3, #0
 8004182:	d0ee      	beq.n	8004162 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8004184:	2300      	movs	r3, #0
}
 8004186:	4618      	mov	r0, r3
 8004188:	3710      	adds	r7, #16
 800418a:	46bd      	mov	sp, r7
 800418c:	bd80      	pop	{r7, pc}

0800418e <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 800418e:	b580      	push	{r7, lr}
 8004190:	b084      	sub	sp, #16
 8004192:	af00      	add	r7, sp, #0
 8004194:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004196:	2300      	movs	r3, #0
 8004198:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	68db      	ldr	r3, [r3, #12]
 80041a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d119      	bne.n	80041dc <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f04f 32ff 	mov.w	r2, #4294967295
 80041b0:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80041b2:	f7fc fff9 	bl	80011a8 <HAL_GetTick>
 80041b6:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80041b8:	e009      	b.n	80041ce <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80041ba:	f7fc fff5 	bl	80011a8 <HAL_GetTick>
 80041be:	4602      	mov	r2, r0
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	1ad3      	subs	r3, r2, r3
 80041c4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80041c8:	d901      	bls.n	80041ce <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 80041ca:	2303      	movs	r3, #3
 80041cc:	e007      	b.n	80041de <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	68db      	ldr	r3, [r3, #12]
 80041d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d0ee      	beq.n	80041ba <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 80041dc:	2300      	movs	r3, #0
}
 80041de:	4618      	mov	r0, r3
 80041e0:	3710      	adds	r7, #16
 80041e2:	46bd      	mov	sp, r7
 80041e4:	bd80      	pop	{r7, pc}

080041e6 <HAL_RTCEx_BKUPWrite>:
  *                                 specify the register.
  * @param  Data Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 80041e6:	b480      	push	{r7}
 80041e8:	b087      	sub	sp, #28
 80041ea:	af00      	add	r7, sp, #0
 80041ec:	60f8      	str	r0, [r7, #12]
 80041ee:	60b9      	str	r1, [r7, #8]
 80041f0:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 80041f2:	2300      	movs	r3, #0
 80041f4:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	3350      	adds	r3, #80	; 0x50
 80041fc:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 80041fe:	68bb      	ldr	r3, [r7, #8]
 8004200:	009b      	lsls	r3, r3, #2
 8004202:	697a      	ldr	r2, [r7, #20]
 8004204:	4413      	add	r3, r2
 8004206:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8004208:	697b      	ldr	r3, [r7, #20]
 800420a:	687a      	ldr	r2, [r7, #4]
 800420c:	601a      	str	r2, [r3, #0]
}
 800420e:	bf00      	nop
 8004210:	371c      	adds	r7, #28
 8004212:	46bd      	mov	sp, r7
 8004214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004218:	4770      	bx	lr

0800421a <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx where x can be from 0 to 19 to
  *                                 specify the register.
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 800421a:	b480      	push	{r7}
 800421c:	b085      	sub	sp, #20
 800421e:	af00      	add	r7, sp, #0
 8004220:	6078      	str	r0, [r7, #4]
 8004222:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0U;
 8004224:	2300      	movs	r3, #0
 8004226:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	3350      	adds	r3, #80	; 0x50
 800422e:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	009b      	lsls	r3, r3, #2
 8004234:	68fa      	ldr	r2, [r7, #12]
 8004236:	4413      	add	r3, r2
 8004238:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	681b      	ldr	r3, [r3, #0]
}
 800423e:	4618      	mov	r0, r3
 8004240:	3714      	adds	r7, #20
 8004242:	46bd      	mov	sp, r7
 8004244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004248:	4770      	bx	lr

0800424a <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800424a:	b580      	push	{r7, lr}
 800424c:	b082      	sub	sp, #8
 800424e:	af00      	add	r7, sp, #0
 8004250:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	2b00      	cmp	r3, #0
 8004256:	d101      	bne.n	800425c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004258:	2301      	movs	r3, #1
 800425a:	e03f      	b.n	80042dc <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004262:	b2db      	uxtb	r3, r3
 8004264:	2b00      	cmp	r3, #0
 8004266:	d106      	bne.n	8004276 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2200      	movs	r2, #0
 800426c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004270:	6878      	ldr	r0, [r7, #4]
 8004272:	f7fc fe3f 	bl	8000ef4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	2224      	movs	r2, #36	; 0x24
 800427a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	68da      	ldr	r2, [r3, #12]
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800428c:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800428e:	6878      	ldr	r0, [r7, #4]
 8004290:	f000 ff8a 	bl	80051a8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	691a      	ldr	r2, [r3, #16]
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80042a2:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	695a      	ldr	r2, [r3, #20]
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80042b2:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	68da      	ldr	r2, [r3, #12]
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80042c2:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2200      	movs	r2, #0
 80042c8:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	2220      	movs	r2, #32
 80042ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	2220      	movs	r2, #32
 80042d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80042da:	2300      	movs	r3, #0
}
 80042dc:	4618      	mov	r0, r3
 80042de:	3708      	adds	r7, #8
 80042e0:	46bd      	mov	sp, r7
 80042e2:	bd80      	pop	{r7, pc}

080042e4 <HAL_UART_DeInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	b082      	sub	sp, #8
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d101      	bne.n	80042f6 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 80042f2:	2301      	movs	r3, #1
 80042f4:	e021      	b.n	800433a <HAL_UART_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	2224      	movs	r2, #36	; 0x24
 80042fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	68da      	ldr	r2, [r3, #12]
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800430c:	60da      	str	r2, [r3, #12]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 800430e:	6878      	ldr	r0, [r7, #4]
 8004310:	f7fc fe74 	bl	8000ffc <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2200      	movs	r2, #0
 8004318:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_RESET;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	2200      	movs	r2, #0
 800431e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_RESET;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	2200      	movs	r2, #0
 8004326:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	2200      	movs	r2, #0
 800432e:	631a      	str	r2, [r3, #48]	; 0x30

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2200      	movs	r2, #0
 8004334:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004338:	2300      	movs	r3, #0
}
 800433a:	4618      	mov	r0, r3
 800433c:	3708      	adds	r7, #8
 800433e:	46bd      	mov	sp, r7
 8004340:	bd80      	pop	{r7, pc}

08004342 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004342:	b580      	push	{r7, lr}
 8004344:	b08a      	sub	sp, #40	; 0x28
 8004346:	af02      	add	r7, sp, #8
 8004348:	60f8      	str	r0, [r7, #12]
 800434a:	60b9      	str	r1, [r7, #8]
 800434c:	603b      	str	r3, [r7, #0]
 800434e:	4613      	mov	r3, r2
 8004350:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004352:	2300      	movs	r3, #0
 8004354:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800435c:	b2db      	uxtb	r3, r3
 800435e:	2b20      	cmp	r3, #32
 8004360:	d17c      	bne.n	800445c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004362:	68bb      	ldr	r3, [r7, #8]
 8004364:	2b00      	cmp	r3, #0
 8004366:	d002      	beq.n	800436e <HAL_UART_Transmit+0x2c>
 8004368:	88fb      	ldrh	r3, [r7, #6]
 800436a:	2b00      	cmp	r3, #0
 800436c:	d101      	bne.n	8004372 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800436e:	2301      	movs	r3, #1
 8004370:	e075      	b.n	800445e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004378:	2b01      	cmp	r3, #1
 800437a:	d101      	bne.n	8004380 <HAL_UART_Transmit+0x3e>
 800437c:	2302      	movs	r3, #2
 800437e:	e06e      	b.n	800445e <HAL_UART_Transmit+0x11c>
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	2201      	movs	r2, #1
 8004384:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	2200      	movs	r2, #0
 800438c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	2221      	movs	r2, #33	; 0x21
 8004392:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004396:	f7fc ff07 	bl	80011a8 <HAL_GetTick>
 800439a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	88fa      	ldrh	r2, [r7, #6]
 80043a0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	88fa      	ldrh	r2, [r7, #6]
 80043a6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	689b      	ldr	r3, [r3, #8]
 80043ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043b0:	d108      	bne.n	80043c4 <HAL_UART_Transmit+0x82>
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	691b      	ldr	r3, [r3, #16]
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d104      	bne.n	80043c4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80043ba:	2300      	movs	r3, #0
 80043bc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80043be:	68bb      	ldr	r3, [r7, #8]
 80043c0:	61bb      	str	r3, [r7, #24]
 80043c2:	e003      	b.n	80043cc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80043c4:	68bb      	ldr	r3, [r7, #8]
 80043c6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80043c8:	2300      	movs	r3, #0
 80043ca:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	2200      	movs	r2, #0
 80043d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80043d4:	e02a      	b.n	800442c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	9300      	str	r3, [sp, #0]
 80043da:	697b      	ldr	r3, [r7, #20]
 80043dc:	2200      	movs	r2, #0
 80043de:	2180      	movs	r1, #128	; 0x80
 80043e0:	68f8      	ldr	r0, [r7, #12]
 80043e2:	f000 fc17 	bl	8004c14 <UART_WaitOnFlagUntilTimeout>
 80043e6:	4603      	mov	r3, r0
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d001      	beq.n	80043f0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80043ec:	2303      	movs	r3, #3
 80043ee:	e036      	b.n	800445e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80043f0:	69fb      	ldr	r3, [r7, #28]
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d10b      	bne.n	800440e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80043f6:	69bb      	ldr	r3, [r7, #24]
 80043f8:	881b      	ldrh	r3, [r3, #0]
 80043fa:	461a      	mov	r2, r3
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004404:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004406:	69bb      	ldr	r3, [r7, #24]
 8004408:	3302      	adds	r3, #2
 800440a:	61bb      	str	r3, [r7, #24]
 800440c:	e007      	b.n	800441e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800440e:	69fb      	ldr	r3, [r7, #28]
 8004410:	781a      	ldrb	r2, [r3, #0]
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004418:	69fb      	ldr	r3, [r7, #28]
 800441a:	3301      	adds	r3, #1
 800441c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004422:	b29b      	uxth	r3, r3
 8004424:	3b01      	subs	r3, #1
 8004426:	b29a      	uxth	r2, r3
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004430:	b29b      	uxth	r3, r3
 8004432:	2b00      	cmp	r3, #0
 8004434:	d1cf      	bne.n	80043d6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004436:	683b      	ldr	r3, [r7, #0]
 8004438:	9300      	str	r3, [sp, #0]
 800443a:	697b      	ldr	r3, [r7, #20]
 800443c:	2200      	movs	r2, #0
 800443e:	2140      	movs	r1, #64	; 0x40
 8004440:	68f8      	ldr	r0, [r7, #12]
 8004442:	f000 fbe7 	bl	8004c14 <UART_WaitOnFlagUntilTimeout>
 8004446:	4603      	mov	r3, r0
 8004448:	2b00      	cmp	r3, #0
 800444a:	d001      	beq.n	8004450 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800444c:	2303      	movs	r3, #3
 800444e:	e006      	b.n	800445e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	2220      	movs	r2, #32
 8004454:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004458:	2300      	movs	r3, #0
 800445a:	e000      	b.n	800445e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800445c:	2302      	movs	r3, #2
  }
}
 800445e:	4618      	mov	r0, r3
 8004460:	3720      	adds	r7, #32
 8004462:	46bd      	mov	sp, r7
 8004464:	bd80      	pop	{r7, pc}

08004466 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004466:	b580      	push	{r7, lr}
 8004468:	b084      	sub	sp, #16
 800446a:	af00      	add	r7, sp, #0
 800446c:	60f8      	str	r0, [r7, #12]
 800446e:	60b9      	str	r1, [r7, #8]
 8004470:	4613      	mov	r3, r2
 8004472:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800447a:	b2db      	uxtb	r3, r3
 800447c:	2b20      	cmp	r3, #32
 800447e:	d11d      	bne.n	80044bc <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8004480:	68bb      	ldr	r3, [r7, #8]
 8004482:	2b00      	cmp	r3, #0
 8004484:	d002      	beq.n	800448c <HAL_UART_Receive_DMA+0x26>
 8004486:	88fb      	ldrh	r3, [r7, #6]
 8004488:	2b00      	cmp	r3, #0
 800448a:	d101      	bne.n	8004490 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800448c:	2301      	movs	r3, #1
 800448e:	e016      	b.n	80044be <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004496:	2b01      	cmp	r3, #1
 8004498:	d101      	bne.n	800449e <HAL_UART_Receive_DMA+0x38>
 800449a:	2302      	movs	r3, #2
 800449c:	e00f      	b.n	80044be <HAL_UART_Receive_DMA+0x58>
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	2201      	movs	r2, #1
 80044a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	2200      	movs	r2, #0
 80044aa:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80044ac:	88fb      	ldrh	r3, [r7, #6]
 80044ae:	461a      	mov	r2, r3
 80044b0:	68b9      	ldr	r1, [r7, #8]
 80044b2:	68f8      	ldr	r0, [r7, #12]
 80044b4:	f000 fc1c 	bl	8004cf0 <UART_Start_Receive_DMA>
 80044b8:	4603      	mov	r3, r0
 80044ba:	e000      	b.n	80044be <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 80044bc:	2302      	movs	r3, #2
  }
}
 80044be:	4618      	mov	r0, r3
 80044c0:	3710      	adds	r7, #16
 80044c2:	46bd      	mov	sp, r7
 80044c4:	bd80      	pop	{r7, pc}
	...

080044c8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80044c8:	b580      	push	{r7, lr}
 80044ca:	b0ba      	sub	sp, #232	; 0xe8
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	68db      	ldr	r3, [r3, #12]
 80044e0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	695b      	ldr	r3, [r3, #20]
 80044ea:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80044ee:	2300      	movs	r3, #0
 80044f0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80044f4:	2300      	movs	r3, #0
 80044f6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80044fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80044fe:	f003 030f 	and.w	r3, r3, #15
 8004502:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004506:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800450a:	2b00      	cmp	r3, #0
 800450c:	d10f      	bne.n	800452e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800450e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004512:	f003 0320 	and.w	r3, r3, #32
 8004516:	2b00      	cmp	r3, #0
 8004518:	d009      	beq.n	800452e <HAL_UART_IRQHandler+0x66>
 800451a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800451e:	f003 0320 	and.w	r3, r3, #32
 8004522:	2b00      	cmp	r3, #0
 8004524:	d003      	beq.n	800452e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004526:	6878      	ldr	r0, [r7, #4]
 8004528:	f000 fd83 	bl	8005032 <UART_Receive_IT>
      return;
 800452c:	e256      	b.n	80049dc <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800452e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004532:	2b00      	cmp	r3, #0
 8004534:	f000 80de 	beq.w	80046f4 <HAL_UART_IRQHandler+0x22c>
 8004538:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800453c:	f003 0301 	and.w	r3, r3, #1
 8004540:	2b00      	cmp	r3, #0
 8004542:	d106      	bne.n	8004552 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004544:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004548:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800454c:	2b00      	cmp	r3, #0
 800454e:	f000 80d1 	beq.w	80046f4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004552:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004556:	f003 0301 	and.w	r3, r3, #1
 800455a:	2b00      	cmp	r3, #0
 800455c:	d00b      	beq.n	8004576 <HAL_UART_IRQHandler+0xae>
 800455e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004562:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004566:	2b00      	cmp	r3, #0
 8004568:	d005      	beq.n	8004576 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800456e:	f043 0201 	orr.w	r2, r3, #1
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004576:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800457a:	f003 0304 	and.w	r3, r3, #4
 800457e:	2b00      	cmp	r3, #0
 8004580:	d00b      	beq.n	800459a <HAL_UART_IRQHandler+0xd2>
 8004582:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004586:	f003 0301 	and.w	r3, r3, #1
 800458a:	2b00      	cmp	r3, #0
 800458c:	d005      	beq.n	800459a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004592:	f043 0202 	orr.w	r2, r3, #2
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800459a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800459e:	f003 0302 	and.w	r3, r3, #2
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d00b      	beq.n	80045be <HAL_UART_IRQHandler+0xf6>
 80045a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80045aa:	f003 0301 	and.w	r3, r3, #1
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d005      	beq.n	80045be <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045b6:	f043 0204 	orr.w	r2, r3, #4
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80045be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80045c2:	f003 0308 	and.w	r3, r3, #8
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d011      	beq.n	80045ee <HAL_UART_IRQHandler+0x126>
 80045ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80045ce:	f003 0320 	and.w	r3, r3, #32
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d105      	bne.n	80045e2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80045d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80045da:	f003 0301 	and.w	r3, r3, #1
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d005      	beq.n	80045ee <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045e6:	f043 0208 	orr.w	r2, r3, #8
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	f000 81ed 	beq.w	80049d2 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80045f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80045fc:	f003 0320 	and.w	r3, r3, #32
 8004600:	2b00      	cmp	r3, #0
 8004602:	d008      	beq.n	8004616 <HAL_UART_IRQHandler+0x14e>
 8004604:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004608:	f003 0320 	and.w	r3, r3, #32
 800460c:	2b00      	cmp	r3, #0
 800460e:	d002      	beq.n	8004616 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004610:	6878      	ldr	r0, [r7, #4]
 8004612:	f000 fd0e 	bl	8005032 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	695b      	ldr	r3, [r3, #20]
 800461c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004620:	2b40      	cmp	r3, #64	; 0x40
 8004622:	bf0c      	ite	eq
 8004624:	2301      	moveq	r3, #1
 8004626:	2300      	movne	r3, #0
 8004628:	b2db      	uxtb	r3, r3
 800462a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004632:	f003 0308 	and.w	r3, r3, #8
 8004636:	2b00      	cmp	r3, #0
 8004638:	d103      	bne.n	8004642 <HAL_UART_IRQHandler+0x17a>
 800463a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800463e:	2b00      	cmp	r3, #0
 8004640:	d04f      	beq.n	80046e2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004642:	6878      	ldr	r0, [r7, #4]
 8004644:	f000 fc16 	bl	8004e74 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	695b      	ldr	r3, [r3, #20]
 800464e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004652:	2b40      	cmp	r3, #64	; 0x40
 8004654:	d141      	bne.n	80046da <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	3314      	adds	r3, #20
 800465c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004660:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004664:	e853 3f00 	ldrex	r3, [r3]
 8004668:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800466c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004670:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004674:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	3314      	adds	r3, #20
 800467e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004682:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004686:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800468a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800468e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004692:	e841 2300 	strex	r3, r2, [r1]
 8004696:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800469a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d1d9      	bne.n	8004656 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d013      	beq.n	80046d2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046ae:	4a7d      	ldr	r2, [pc, #500]	; (80048a4 <HAL_UART_IRQHandler+0x3dc>)
 80046b0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046b6:	4618      	mov	r0, r3
 80046b8:	f7fd f8be 	bl	8001838 <HAL_DMA_Abort_IT>
 80046bc:	4603      	mov	r3, r0
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d016      	beq.n	80046f0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046c8:	687a      	ldr	r2, [r7, #4]
 80046ca:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80046cc:	4610      	mov	r0, r2
 80046ce:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046d0:	e00e      	b.n	80046f0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80046d2:	6878      	ldr	r0, [r7, #4]
 80046d4:	f7fc fbfa 	bl	8000ecc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046d8:	e00a      	b.n	80046f0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80046da:	6878      	ldr	r0, [r7, #4]
 80046dc:	f7fc fbf6 	bl	8000ecc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046e0:	e006      	b.n	80046f0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80046e2:	6878      	ldr	r0, [r7, #4]
 80046e4:	f7fc fbf2 	bl	8000ecc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2200      	movs	r2, #0
 80046ec:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80046ee:	e170      	b.n	80049d2 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046f0:	bf00      	nop
    return;
 80046f2:	e16e      	b.n	80049d2 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046f8:	2b01      	cmp	r3, #1
 80046fa:	f040 814a 	bne.w	8004992 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80046fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004702:	f003 0310 	and.w	r3, r3, #16
 8004706:	2b00      	cmp	r3, #0
 8004708:	f000 8143 	beq.w	8004992 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800470c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004710:	f003 0310 	and.w	r3, r3, #16
 8004714:	2b00      	cmp	r3, #0
 8004716:	f000 813c 	beq.w	8004992 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800471a:	2300      	movs	r3, #0
 800471c:	60bb      	str	r3, [r7, #8]
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	60bb      	str	r3, [r7, #8]
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	685b      	ldr	r3, [r3, #4]
 800472c:	60bb      	str	r3, [r7, #8]
 800472e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	695b      	ldr	r3, [r3, #20]
 8004736:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800473a:	2b40      	cmp	r3, #64	; 0x40
 800473c:	f040 80b4 	bne.w	80048a8 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	685b      	ldr	r3, [r3, #4]
 8004748:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800474c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004750:	2b00      	cmp	r3, #0
 8004752:	f000 8140 	beq.w	80049d6 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800475a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800475e:	429a      	cmp	r2, r3
 8004760:	f080 8139 	bcs.w	80049d6 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800476a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004770:	69db      	ldr	r3, [r3, #28]
 8004772:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004776:	f000 8088 	beq.w	800488a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	330c      	adds	r3, #12
 8004780:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004784:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004788:	e853 3f00 	ldrex	r3, [r3]
 800478c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004790:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004794:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004798:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	330c      	adds	r3, #12
 80047a2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80047a6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80047aa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047ae:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80047b2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80047b6:	e841 2300 	strex	r3, r2, [r1]
 80047ba:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80047be:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d1d9      	bne.n	800477a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	3314      	adds	r3, #20
 80047cc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047ce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80047d0:	e853 3f00 	ldrex	r3, [r3]
 80047d4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80047d6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80047d8:	f023 0301 	bic.w	r3, r3, #1
 80047dc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	3314      	adds	r3, #20
 80047e6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80047ea:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80047ee:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047f0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80047f2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80047f6:	e841 2300 	strex	r3, r2, [r1]
 80047fa:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80047fc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d1e1      	bne.n	80047c6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	3314      	adds	r3, #20
 8004808:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800480a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800480c:	e853 3f00 	ldrex	r3, [r3]
 8004810:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004812:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004814:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004818:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	3314      	adds	r3, #20
 8004822:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004826:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004828:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800482a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800482c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800482e:	e841 2300 	strex	r3, r2, [r1]
 8004832:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004834:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004836:	2b00      	cmp	r3, #0
 8004838:	d1e3      	bne.n	8004802 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	2220      	movs	r2, #32
 800483e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	2200      	movs	r2, #0
 8004846:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	330c      	adds	r3, #12
 800484e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004850:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004852:	e853 3f00 	ldrex	r3, [r3]
 8004856:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004858:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800485a:	f023 0310 	bic.w	r3, r3, #16
 800485e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	330c      	adds	r3, #12
 8004868:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800486c:	65ba      	str	r2, [r7, #88]	; 0x58
 800486e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004870:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004872:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004874:	e841 2300 	strex	r3, r2, [r1]
 8004878:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800487a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800487c:	2b00      	cmp	r3, #0
 800487e:	d1e3      	bne.n	8004848 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004884:	4618      	mov	r0, r3
 8004886:	f7fc ff67 	bl	8001758 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004892:	b29b      	uxth	r3, r3
 8004894:	1ad3      	subs	r3, r2, r3
 8004896:	b29b      	uxth	r3, r3
 8004898:	4619      	mov	r1, r3
 800489a:	6878      	ldr	r0, [r7, #4]
 800489c:	f000 f8b6 	bl	8004a0c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80048a0:	e099      	b.n	80049d6 <HAL_UART_IRQHandler+0x50e>
 80048a2:	bf00      	nop
 80048a4:	08004f3b 	.word	0x08004f3b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80048b0:	b29b      	uxth	r3, r3
 80048b2:	1ad3      	subs	r3, r2, r3
 80048b4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80048bc:	b29b      	uxth	r3, r3
 80048be:	2b00      	cmp	r3, #0
 80048c0:	f000 808b 	beq.w	80049da <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80048c4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	f000 8086 	beq.w	80049da <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	330c      	adds	r3, #12
 80048d4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048d8:	e853 3f00 	ldrex	r3, [r3]
 80048dc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80048de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048e0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80048e4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	330c      	adds	r3, #12
 80048ee:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80048f2:	647a      	str	r2, [r7, #68]	; 0x44
 80048f4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048f6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80048f8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80048fa:	e841 2300 	strex	r3, r2, [r1]
 80048fe:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004900:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004902:	2b00      	cmp	r3, #0
 8004904:	d1e3      	bne.n	80048ce <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	3314      	adds	r3, #20
 800490c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800490e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004910:	e853 3f00 	ldrex	r3, [r3]
 8004914:	623b      	str	r3, [r7, #32]
   return(result);
 8004916:	6a3b      	ldr	r3, [r7, #32]
 8004918:	f023 0301 	bic.w	r3, r3, #1
 800491c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	3314      	adds	r3, #20
 8004926:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800492a:	633a      	str	r2, [r7, #48]	; 0x30
 800492c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800492e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004930:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004932:	e841 2300 	strex	r3, r2, [r1]
 8004936:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004938:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800493a:	2b00      	cmp	r3, #0
 800493c:	d1e3      	bne.n	8004906 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	2220      	movs	r2, #32
 8004942:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	2200      	movs	r2, #0
 800494a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	330c      	adds	r3, #12
 8004952:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004954:	693b      	ldr	r3, [r7, #16]
 8004956:	e853 3f00 	ldrex	r3, [r3]
 800495a:	60fb      	str	r3, [r7, #12]
   return(result);
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	f023 0310 	bic.w	r3, r3, #16
 8004962:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	330c      	adds	r3, #12
 800496c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004970:	61fa      	str	r2, [r7, #28]
 8004972:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004974:	69b9      	ldr	r1, [r7, #24]
 8004976:	69fa      	ldr	r2, [r7, #28]
 8004978:	e841 2300 	strex	r3, r2, [r1]
 800497c:	617b      	str	r3, [r7, #20]
   return(result);
 800497e:	697b      	ldr	r3, [r7, #20]
 8004980:	2b00      	cmp	r3, #0
 8004982:	d1e3      	bne.n	800494c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004984:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004988:	4619      	mov	r1, r3
 800498a:	6878      	ldr	r0, [r7, #4]
 800498c:	f000 f83e 	bl	8004a0c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004990:	e023      	b.n	80049da <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004992:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004996:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800499a:	2b00      	cmp	r3, #0
 800499c:	d009      	beq.n	80049b2 <HAL_UART_IRQHandler+0x4ea>
 800499e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80049a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d003      	beq.n	80049b2 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80049aa:	6878      	ldr	r0, [r7, #4]
 80049ac:	f000 fad9 	bl	8004f62 <UART_Transmit_IT>
    return;
 80049b0:	e014      	b.n	80049dc <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80049b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80049b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d00e      	beq.n	80049dc <HAL_UART_IRQHandler+0x514>
 80049be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80049c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d008      	beq.n	80049dc <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80049ca:	6878      	ldr	r0, [r7, #4]
 80049cc:	f000 fb19 	bl	8005002 <UART_EndTransmit_IT>
    return;
 80049d0:	e004      	b.n	80049dc <HAL_UART_IRQHandler+0x514>
    return;
 80049d2:	bf00      	nop
 80049d4:	e002      	b.n	80049dc <HAL_UART_IRQHandler+0x514>
      return;
 80049d6:	bf00      	nop
 80049d8:	e000      	b.n	80049dc <HAL_UART_IRQHandler+0x514>
      return;
 80049da:	bf00      	nop
  }
}
 80049dc:	37e8      	adds	r7, #232	; 0xe8
 80049de:	46bd      	mov	sp, r7
 80049e0:	bd80      	pop	{r7, pc}
 80049e2:	bf00      	nop

080049e4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80049e4:	b480      	push	{r7}
 80049e6:	b083      	sub	sp, #12
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80049ec:	bf00      	nop
 80049ee:	370c      	adds	r7, #12
 80049f0:	46bd      	mov	sp, r7
 80049f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f6:	4770      	bx	lr

080049f8 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80049f8:	b480      	push	{r7}
 80049fa:	b083      	sub	sp, #12
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8004a00:	bf00      	nop
 8004a02:	370c      	adds	r7, #12
 8004a04:	46bd      	mov	sp, r7
 8004a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0a:	4770      	bx	lr

08004a0c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004a0c:	b480      	push	{r7}
 8004a0e:	b083      	sub	sp, #12
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	6078      	str	r0, [r7, #4]
 8004a14:	460b      	mov	r3, r1
 8004a16:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004a18:	bf00      	nop
 8004a1a:	370c      	adds	r7, #12
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a22:	4770      	bx	lr

08004a24 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004a24:	b580      	push	{r7, lr}
 8004a26:	b09c      	sub	sp, #112	; 0x70
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a30:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d172      	bne.n	8004b26 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8004a40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a42:	2200      	movs	r2, #0
 8004a44:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004a46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	330c      	adds	r3, #12
 8004a4c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a50:	e853 3f00 	ldrex	r3, [r3]
 8004a54:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004a56:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a58:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004a5c:	66bb      	str	r3, [r7, #104]	; 0x68
 8004a5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	330c      	adds	r3, #12
 8004a64:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004a66:	65ba      	str	r2, [r7, #88]	; 0x58
 8004a68:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a6a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004a6c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004a6e:	e841 2300 	strex	r3, r2, [r1]
 8004a72:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004a74:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d1e5      	bne.n	8004a46 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	3314      	adds	r3, #20
 8004a80:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a84:	e853 3f00 	ldrex	r3, [r3]
 8004a88:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004a8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a8c:	f023 0301 	bic.w	r3, r3, #1
 8004a90:	667b      	str	r3, [r7, #100]	; 0x64
 8004a92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	3314      	adds	r3, #20
 8004a98:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004a9a:	647a      	str	r2, [r7, #68]	; 0x44
 8004a9c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a9e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004aa0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004aa2:	e841 2300 	strex	r3, r2, [r1]
 8004aa6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004aa8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d1e5      	bne.n	8004a7a <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004aae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	3314      	adds	r3, #20
 8004ab4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ab8:	e853 3f00 	ldrex	r3, [r3]
 8004abc:	623b      	str	r3, [r7, #32]
   return(result);
 8004abe:	6a3b      	ldr	r3, [r7, #32]
 8004ac0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004ac4:	663b      	str	r3, [r7, #96]	; 0x60
 8004ac6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	3314      	adds	r3, #20
 8004acc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004ace:	633a      	str	r2, [r7, #48]	; 0x30
 8004ad0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ad2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004ad4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004ad6:	e841 2300 	strex	r3, r2, [r1]
 8004ada:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004adc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d1e5      	bne.n	8004aae <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004ae2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ae4:	2220      	movs	r2, #32
 8004ae6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004aea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004aee:	2b01      	cmp	r3, #1
 8004af0:	d119      	bne.n	8004b26 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004af2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	330c      	adds	r3, #12
 8004af8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004afa:	693b      	ldr	r3, [r7, #16]
 8004afc:	e853 3f00 	ldrex	r3, [r3]
 8004b00:	60fb      	str	r3, [r7, #12]
   return(result);
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	f023 0310 	bic.w	r3, r3, #16
 8004b08:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004b0a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	330c      	adds	r3, #12
 8004b10:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004b12:	61fa      	str	r2, [r7, #28]
 8004b14:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b16:	69b9      	ldr	r1, [r7, #24]
 8004b18:	69fa      	ldr	r2, [r7, #28]
 8004b1a:	e841 2300 	strex	r3, r2, [r1]
 8004b1e:	617b      	str	r3, [r7, #20]
   return(result);
 8004b20:	697b      	ldr	r3, [r7, #20]
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d1e5      	bne.n	8004af2 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b2a:	2b01      	cmp	r3, #1
 8004b2c:	d106      	bne.n	8004b3c <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004b2e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b30:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004b32:	4619      	mov	r1, r3
 8004b34:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8004b36:	f7ff ff69 	bl	8004a0c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004b3a:	e002      	b.n	8004b42 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8004b3c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8004b3e:	f7fc f9cf 	bl	8000ee0 <HAL_UART_RxCpltCallback>
}
 8004b42:	bf00      	nop
 8004b44:	3770      	adds	r7, #112	; 0x70
 8004b46:	46bd      	mov	sp, r7
 8004b48:	bd80      	pop	{r7, pc}

08004b4a <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004b4a:	b580      	push	{r7, lr}
 8004b4c:	b084      	sub	sp, #16
 8004b4e:	af00      	add	r7, sp, #0
 8004b50:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b56:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b5c:	2b01      	cmp	r3, #1
 8004b5e:	d108      	bne.n	8004b72 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004b64:	085b      	lsrs	r3, r3, #1
 8004b66:	b29b      	uxth	r3, r3
 8004b68:	4619      	mov	r1, r3
 8004b6a:	68f8      	ldr	r0, [r7, #12]
 8004b6c:	f7ff ff4e 	bl	8004a0c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004b70:	e002      	b.n	8004b78 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8004b72:	68f8      	ldr	r0, [r7, #12]
 8004b74:	f7ff ff40 	bl	80049f8 <HAL_UART_RxHalfCpltCallback>
}
 8004b78:	bf00      	nop
 8004b7a:	3710      	adds	r7, #16
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	bd80      	pop	{r7, pc}

08004b80 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004b80:	b580      	push	{r7, lr}
 8004b82:	b084      	sub	sp, #16
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8004b88:	2300      	movs	r3, #0
 8004b8a:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b90:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8004b92:	68bb      	ldr	r3, [r7, #8]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	695b      	ldr	r3, [r3, #20]
 8004b98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b9c:	2b80      	cmp	r3, #128	; 0x80
 8004b9e:	bf0c      	ite	eq
 8004ba0:	2301      	moveq	r3, #1
 8004ba2:	2300      	movne	r3, #0
 8004ba4:	b2db      	uxtb	r3, r3
 8004ba6:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8004ba8:	68bb      	ldr	r3, [r7, #8]
 8004baa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004bae:	b2db      	uxtb	r3, r3
 8004bb0:	2b21      	cmp	r3, #33	; 0x21
 8004bb2:	d108      	bne.n	8004bc6 <UART_DMAError+0x46>
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d005      	beq.n	8004bc6 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8004bba:	68bb      	ldr	r3, [r7, #8]
 8004bbc:	2200      	movs	r2, #0
 8004bbe:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8004bc0:	68b8      	ldr	r0, [r7, #8]
 8004bc2:	f000 f92f 	bl	8004e24 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004bc6:	68bb      	ldr	r3, [r7, #8]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	695b      	ldr	r3, [r3, #20]
 8004bcc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bd0:	2b40      	cmp	r3, #64	; 0x40
 8004bd2:	bf0c      	ite	eq
 8004bd4:	2301      	moveq	r3, #1
 8004bd6:	2300      	movne	r3, #0
 8004bd8:	b2db      	uxtb	r3, r3
 8004bda:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8004bdc:	68bb      	ldr	r3, [r7, #8]
 8004bde:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004be2:	b2db      	uxtb	r3, r3
 8004be4:	2b22      	cmp	r3, #34	; 0x22
 8004be6:	d108      	bne.n	8004bfa <UART_DMAError+0x7a>
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d005      	beq.n	8004bfa <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8004bee:	68bb      	ldr	r3, [r7, #8]
 8004bf0:	2200      	movs	r2, #0
 8004bf2:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8004bf4:	68b8      	ldr	r0, [r7, #8]
 8004bf6:	f000 f93d 	bl	8004e74 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004bfa:	68bb      	ldr	r3, [r7, #8]
 8004bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bfe:	f043 0210 	orr.w	r2, r3, #16
 8004c02:	68bb      	ldr	r3, [r7, #8]
 8004c04:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004c06:	68b8      	ldr	r0, [r7, #8]
 8004c08:	f7fc f960 	bl	8000ecc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004c0c:	bf00      	nop
 8004c0e:	3710      	adds	r7, #16
 8004c10:	46bd      	mov	sp, r7
 8004c12:	bd80      	pop	{r7, pc}

08004c14 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004c14:	b580      	push	{r7, lr}
 8004c16:	b090      	sub	sp, #64	; 0x40
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	60f8      	str	r0, [r7, #12]
 8004c1c:	60b9      	str	r1, [r7, #8]
 8004c1e:	603b      	str	r3, [r7, #0]
 8004c20:	4613      	mov	r3, r2
 8004c22:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c24:	e050      	b.n	8004cc8 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c26:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004c28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c2c:	d04c      	beq.n	8004cc8 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004c2e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d007      	beq.n	8004c44 <UART_WaitOnFlagUntilTimeout+0x30>
 8004c34:	f7fc fab8 	bl	80011a8 <HAL_GetTick>
 8004c38:	4602      	mov	r2, r0
 8004c3a:	683b      	ldr	r3, [r7, #0]
 8004c3c:	1ad3      	subs	r3, r2, r3
 8004c3e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004c40:	429a      	cmp	r2, r3
 8004c42:	d241      	bcs.n	8004cc8 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	330c      	adds	r3, #12
 8004c4a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c4e:	e853 3f00 	ldrex	r3, [r3]
 8004c52:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c56:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004c5a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	330c      	adds	r3, #12
 8004c62:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004c64:	637a      	str	r2, [r7, #52]	; 0x34
 8004c66:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c68:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004c6a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004c6c:	e841 2300 	strex	r3, r2, [r1]
 8004c70:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004c72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d1e5      	bne.n	8004c44 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	3314      	adds	r3, #20
 8004c7e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c80:	697b      	ldr	r3, [r7, #20]
 8004c82:	e853 3f00 	ldrex	r3, [r3]
 8004c86:	613b      	str	r3, [r7, #16]
   return(result);
 8004c88:	693b      	ldr	r3, [r7, #16]
 8004c8a:	f023 0301 	bic.w	r3, r3, #1
 8004c8e:	63bb      	str	r3, [r7, #56]	; 0x38
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	3314      	adds	r3, #20
 8004c96:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004c98:	623a      	str	r2, [r7, #32]
 8004c9a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c9c:	69f9      	ldr	r1, [r7, #28]
 8004c9e:	6a3a      	ldr	r2, [r7, #32]
 8004ca0:	e841 2300 	strex	r3, r2, [r1]
 8004ca4:	61bb      	str	r3, [r7, #24]
   return(result);
 8004ca6:	69bb      	ldr	r3, [r7, #24]
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d1e5      	bne.n	8004c78 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	2220      	movs	r2, #32
 8004cb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	2220      	movs	r2, #32
 8004cb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	2200      	movs	r2, #0
 8004cc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004cc4:	2303      	movs	r3, #3
 8004cc6:	e00f      	b.n	8004ce8 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	681a      	ldr	r2, [r3, #0]
 8004cce:	68bb      	ldr	r3, [r7, #8]
 8004cd0:	4013      	ands	r3, r2
 8004cd2:	68ba      	ldr	r2, [r7, #8]
 8004cd4:	429a      	cmp	r2, r3
 8004cd6:	bf0c      	ite	eq
 8004cd8:	2301      	moveq	r3, #1
 8004cda:	2300      	movne	r3, #0
 8004cdc:	b2db      	uxtb	r3, r3
 8004cde:	461a      	mov	r2, r3
 8004ce0:	79fb      	ldrb	r3, [r7, #7]
 8004ce2:	429a      	cmp	r2, r3
 8004ce4:	d09f      	beq.n	8004c26 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004ce6:	2300      	movs	r3, #0
}
 8004ce8:	4618      	mov	r0, r3
 8004cea:	3740      	adds	r7, #64	; 0x40
 8004cec:	46bd      	mov	sp, r7
 8004cee:	bd80      	pop	{r7, pc}

08004cf0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004cf0:	b580      	push	{r7, lr}
 8004cf2:	b098      	sub	sp, #96	; 0x60
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	60f8      	str	r0, [r7, #12]
 8004cf8:	60b9      	str	r1, [r7, #8]
 8004cfa:	4613      	mov	r3, r2
 8004cfc:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8004cfe:	68ba      	ldr	r2, [r7, #8]
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	88fa      	ldrh	r2, [r7, #6]
 8004d08:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	2200      	movs	r2, #0
 8004d0e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	2222      	movs	r2, #34	; 0x22
 8004d14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d1c:	4a3e      	ldr	r2, [pc, #248]	; (8004e18 <UART_Start_Receive_DMA+0x128>)
 8004d1e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d24:	4a3d      	ldr	r2, [pc, #244]	; (8004e1c <UART_Start_Receive_DMA+0x12c>)
 8004d26:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d2c:	4a3c      	ldr	r2, [pc, #240]	; (8004e20 <UART_Start_Receive_DMA+0x130>)
 8004d2e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d34:	2200      	movs	r2, #0
 8004d36:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8004d38:	f107 0308 	add.w	r3, r7, #8
 8004d3c:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	3304      	adds	r3, #4
 8004d48:	4619      	mov	r1, r3
 8004d4a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004d4c:	681a      	ldr	r2, [r3, #0]
 8004d4e:	88fb      	ldrh	r3, [r7, #6]
 8004d50:	f7fc fcaa 	bl	80016a8 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8004d54:	2300      	movs	r3, #0
 8004d56:	613b      	str	r3, [r7, #16]
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	613b      	str	r3, [r7, #16]
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	685b      	ldr	r3, [r3, #4]
 8004d66:	613b      	str	r3, [r7, #16]
 8004d68:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	330c      	adds	r3, #12
 8004d78:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d7a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d7c:	e853 3f00 	ldrex	r3, [r3]
 8004d80:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004d82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d88:	65bb      	str	r3, [r7, #88]	; 0x58
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	330c      	adds	r3, #12
 8004d90:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004d92:	64fa      	str	r2, [r7, #76]	; 0x4c
 8004d94:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d96:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8004d98:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004d9a:	e841 2300 	strex	r3, r2, [r1]
 8004d9e:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8004da0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d1e5      	bne.n	8004d72 <UART_Start_Receive_DMA+0x82>

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	3314      	adds	r3, #20
 8004dac:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004db0:	e853 3f00 	ldrex	r3, [r3]
 8004db4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004db6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004db8:	f043 0301 	orr.w	r3, r3, #1
 8004dbc:	657b      	str	r3, [r7, #84]	; 0x54
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	3314      	adds	r3, #20
 8004dc4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004dc6:	63ba      	str	r2, [r7, #56]	; 0x38
 8004dc8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dca:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004dcc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004dce:	e841 2300 	strex	r3, r2, [r1]
 8004dd2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004dd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d1e5      	bne.n	8004da6 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	3314      	adds	r3, #20
 8004de0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004de2:	69bb      	ldr	r3, [r7, #24]
 8004de4:	e853 3f00 	ldrex	r3, [r3]
 8004de8:	617b      	str	r3, [r7, #20]
   return(result);
 8004dea:	697b      	ldr	r3, [r7, #20]
 8004dec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004df0:	653b      	str	r3, [r7, #80]	; 0x50
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	3314      	adds	r3, #20
 8004df8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004dfa:	627a      	str	r2, [r7, #36]	; 0x24
 8004dfc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dfe:	6a39      	ldr	r1, [r7, #32]
 8004e00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e02:	e841 2300 	strex	r3, r2, [r1]
 8004e06:	61fb      	str	r3, [r7, #28]
   return(result);
 8004e08:	69fb      	ldr	r3, [r7, #28]
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d1e5      	bne.n	8004dda <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8004e0e:	2300      	movs	r3, #0
}
 8004e10:	4618      	mov	r0, r3
 8004e12:	3760      	adds	r7, #96	; 0x60
 8004e14:	46bd      	mov	sp, r7
 8004e16:	bd80      	pop	{r7, pc}
 8004e18:	08004a25 	.word	0x08004a25
 8004e1c:	08004b4b 	.word	0x08004b4b
 8004e20:	08004b81 	.word	0x08004b81

08004e24 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004e24:	b480      	push	{r7}
 8004e26:	b089      	sub	sp, #36	; 0x24
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	330c      	adds	r3, #12
 8004e32:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	e853 3f00 	ldrex	r3, [r3]
 8004e3a:	60bb      	str	r3, [r7, #8]
   return(result);
 8004e3c:	68bb      	ldr	r3, [r7, #8]
 8004e3e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004e42:	61fb      	str	r3, [r7, #28]
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	330c      	adds	r3, #12
 8004e4a:	69fa      	ldr	r2, [r7, #28]
 8004e4c:	61ba      	str	r2, [r7, #24]
 8004e4e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e50:	6979      	ldr	r1, [r7, #20]
 8004e52:	69ba      	ldr	r2, [r7, #24]
 8004e54:	e841 2300 	strex	r3, r2, [r1]
 8004e58:	613b      	str	r3, [r7, #16]
   return(result);
 8004e5a:	693b      	ldr	r3, [r7, #16]
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d1e5      	bne.n	8004e2c <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2220      	movs	r2, #32
 8004e64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8004e68:	bf00      	nop
 8004e6a:	3724      	adds	r7, #36	; 0x24
 8004e6c:	46bd      	mov	sp, r7
 8004e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e72:	4770      	bx	lr

08004e74 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004e74:	b480      	push	{r7}
 8004e76:	b095      	sub	sp, #84	; 0x54
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	330c      	adds	r3, #12
 8004e82:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e86:	e853 3f00 	ldrex	r3, [r3]
 8004e8a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004e8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e8e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004e92:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	330c      	adds	r3, #12
 8004e9a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004e9c:	643a      	str	r2, [r7, #64]	; 0x40
 8004e9e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ea0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004ea2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004ea4:	e841 2300 	strex	r3, r2, [r1]
 8004ea8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004eaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d1e5      	bne.n	8004e7c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	3314      	adds	r3, #20
 8004eb6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004eb8:	6a3b      	ldr	r3, [r7, #32]
 8004eba:	e853 3f00 	ldrex	r3, [r3]
 8004ebe:	61fb      	str	r3, [r7, #28]
   return(result);
 8004ec0:	69fb      	ldr	r3, [r7, #28]
 8004ec2:	f023 0301 	bic.w	r3, r3, #1
 8004ec6:	64bb      	str	r3, [r7, #72]	; 0x48
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	3314      	adds	r3, #20
 8004ece:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004ed0:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004ed2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ed4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004ed6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004ed8:	e841 2300 	strex	r3, r2, [r1]
 8004edc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d1e5      	bne.n	8004eb0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ee8:	2b01      	cmp	r3, #1
 8004eea:	d119      	bne.n	8004f20 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	330c      	adds	r3, #12
 8004ef2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	e853 3f00 	ldrex	r3, [r3]
 8004efa:	60bb      	str	r3, [r7, #8]
   return(result);
 8004efc:	68bb      	ldr	r3, [r7, #8]
 8004efe:	f023 0310 	bic.w	r3, r3, #16
 8004f02:	647b      	str	r3, [r7, #68]	; 0x44
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	330c      	adds	r3, #12
 8004f0a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004f0c:	61ba      	str	r2, [r7, #24]
 8004f0e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f10:	6979      	ldr	r1, [r7, #20]
 8004f12:	69ba      	ldr	r2, [r7, #24]
 8004f14:	e841 2300 	strex	r3, r2, [r1]
 8004f18:	613b      	str	r3, [r7, #16]
   return(result);
 8004f1a:	693b      	ldr	r3, [r7, #16]
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d1e5      	bne.n	8004eec <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2220      	movs	r2, #32
 8004f24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2200      	movs	r2, #0
 8004f2c:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004f2e:	bf00      	nop
 8004f30:	3754      	adds	r7, #84	; 0x54
 8004f32:	46bd      	mov	sp, r7
 8004f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f38:	4770      	bx	lr

08004f3a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004f3a:	b580      	push	{r7, lr}
 8004f3c:	b084      	sub	sp, #16
 8004f3e:	af00      	add	r7, sp, #0
 8004f40:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f46:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	2200      	movs	r2, #0
 8004f4c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	2200      	movs	r2, #0
 8004f52:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004f54:	68f8      	ldr	r0, [r7, #12]
 8004f56:	f7fb ffb9 	bl	8000ecc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004f5a:	bf00      	nop
 8004f5c:	3710      	adds	r7, #16
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	bd80      	pop	{r7, pc}

08004f62 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004f62:	b480      	push	{r7}
 8004f64:	b085      	sub	sp, #20
 8004f66:	af00      	add	r7, sp, #0
 8004f68:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f70:	b2db      	uxtb	r3, r3
 8004f72:	2b21      	cmp	r3, #33	; 0x21
 8004f74:	d13e      	bne.n	8004ff4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	689b      	ldr	r3, [r3, #8]
 8004f7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f7e:	d114      	bne.n	8004faa <UART_Transmit_IT+0x48>
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	691b      	ldr	r3, [r3, #16]
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d110      	bne.n	8004faa <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	6a1b      	ldr	r3, [r3, #32]
 8004f8c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	881b      	ldrh	r3, [r3, #0]
 8004f92:	461a      	mov	r2, r3
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004f9c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	6a1b      	ldr	r3, [r3, #32]
 8004fa2:	1c9a      	adds	r2, r3, #2
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	621a      	str	r2, [r3, #32]
 8004fa8:	e008      	b.n	8004fbc <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	6a1b      	ldr	r3, [r3, #32]
 8004fae:	1c59      	adds	r1, r3, #1
 8004fb0:	687a      	ldr	r2, [r7, #4]
 8004fb2:	6211      	str	r1, [r2, #32]
 8004fb4:	781a      	ldrb	r2, [r3, #0]
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004fc0:	b29b      	uxth	r3, r3
 8004fc2:	3b01      	subs	r3, #1
 8004fc4:	b29b      	uxth	r3, r3
 8004fc6:	687a      	ldr	r2, [r7, #4]
 8004fc8:	4619      	mov	r1, r3
 8004fca:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d10f      	bne.n	8004ff0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	68da      	ldr	r2, [r3, #12]
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004fde:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	68da      	ldr	r2, [r3, #12]
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004fee:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004ff0:	2300      	movs	r3, #0
 8004ff2:	e000      	b.n	8004ff6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004ff4:	2302      	movs	r3, #2
  }
}
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	3714      	adds	r7, #20
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005000:	4770      	bx	lr

08005002 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005002:	b580      	push	{r7, lr}
 8005004:	b082      	sub	sp, #8
 8005006:	af00      	add	r7, sp, #0
 8005008:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	68da      	ldr	r2, [r3, #12]
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005018:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	2220      	movs	r2, #32
 800501e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005022:	6878      	ldr	r0, [r7, #4]
 8005024:	f7ff fcde 	bl	80049e4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005028:	2300      	movs	r3, #0
}
 800502a:	4618      	mov	r0, r3
 800502c:	3708      	adds	r7, #8
 800502e:	46bd      	mov	sp, r7
 8005030:	bd80      	pop	{r7, pc}

08005032 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005032:	b580      	push	{r7, lr}
 8005034:	b08c      	sub	sp, #48	; 0x30
 8005036:	af00      	add	r7, sp, #0
 8005038:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005040:	b2db      	uxtb	r3, r3
 8005042:	2b22      	cmp	r3, #34	; 0x22
 8005044:	f040 80ab 	bne.w	800519e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	689b      	ldr	r3, [r3, #8]
 800504c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005050:	d117      	bne.n	8005082 <UART_Receive_IT+0x50>
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	691b      	ldr	r3, [r3, #16]
 8005056:	2b00      	cmp	r3, #0
 8005058:	d113      	bne.n	8005082 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800505a:	2300      	movs	r3, #0
 800505c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005062:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	685b      	ldr	r3, [r3, #4]
 800506a:	b29b      	uxth	r3, r3
 800506c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005070:	b29a      	uxth	r2, r3
 8005072:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005074:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800507a:	1c9a      	adds	r2, r3, #2
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	629a      	str	r2, [r3, #40]	; 0x28
 8005080:	e026      	b.n	80050d0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005086:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005088:	2300      	movs	r3, #0
 800508a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	689b      	ldr	r3, [r3, #8]
 8005090:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005094:	d007      	beq.n	80050a6 <UART_Receive_IT+0x74>
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	689b      	ldr	r3, [r3, #8]
 800509a:	2b00      	cmp	r3, #0
 800509c:	d10a      	bne.n	80050b4 <UART_Receive_IT+0x82>
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	691b      	ldr	r3, [r3, #16]
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d106      	bne.n	80050b4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	685b      	ldr	r3, [r3, #4]
 80050ac:	b2da      	uxtb	r2, r3
 80050ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050b0:	701a      	strb	r2, [r3, #0]
 80050b2:	e008      	b.n	80050c6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	685b      	ldr	r3, [r3, #4]
 80050ba:	b2db      	uxtb	r3, r3
 80050bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80050c0:	b2da      	uxtb	r2, r3
 80050c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050c4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050ca:	1c5a      	adds	r2, r3, #1
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80050d4:	b29b      	uxth	r3, r3
 80050d6:	3b01      	subs	r3, #1
 80050d8:	b29b      	uxth	r3, r3
 80050da:	687a      	ldr	r2, [r7, #4]
 80050dc:	4619      	mov	r1, r3
 80050de:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d15a      	bne.n	800519a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	68da      	ldr	r2, [r3, #12]
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f022 0220 	bic.w	r2, r2, #32
 80050f2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	68da      	ldr	r2, [r3, #12]
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005102:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	695a      	ldr	r2, [r3, #20]
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	f022 0201 	bic.w	r2, r2, #1
 8005112:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2220      	movs	r2, #32
 8005118:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005120:	2b01      	cmp	r3, #1
 8005122:	d135      	bne.n	8005190 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2200      	movs	r2, #0
 8005128:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	330c      	adds	r3, #12
 8005130:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005132:	697b      	ldr	r3, [r7, #20]
 8005134:	e853 3f00 	ldrex	r3, [r3]
 8005138:	613b      	str	r3, [r7, #16]
   return(result);
 800513a:	693b      	ldr	r3, [r7, #16]
 800513c:	f023 0310 	bic.w	r3, r3, #16
 8005140:	627b      	str	r3, [r7, #36]	; 0x24
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	330c      	adds	r3, #12
 8005148:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800514a:	623a      	str	r2, [r7, #32]
 800514c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800514e:	69f9      	ldr	r1, [r7, #28]
 8005150:	6a3a      	ldr	r2, [r7, #32]
 8005152:	e841 2300 	strex	r3, r2, [r1]
 8005156:	61bb      	str	r3, [r7, #24]
   return(result);
 8005158:	69bb      	ldr	r3, [r7, #24]
 800515a:	2b00      	cmp	r3, #0
 800515c:	d1e5      	bne.n	800512a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	f003 0310 	and.w	r3, r3, #16
 8005168:	2b10      	cmp	r3, #16
 800516a:	d10a      	bne.n	8005182 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800516c:	2300      	movs	r3, #0
 800516e:	60fb      	str	r3, [r7, #12]
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	60fb      	str	r3, [r7, #12]
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	685b      	ldr	r3, [r3, #4]
 800517e:	60fb      	str	r3, [r7, #12]
 8005180:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005186:	4619      	mov	r1, r3
 8005188:	6878      	ldr	r0, [r7, #4]
 800518a:	f7ff fc3f 	bl	8004a0c <HAL_UARTEx_RxEventCallback>
 800518e:	e002      	b.n	8005196 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005190:	6878      	ldr	r0, [r7, #4]
 8005192:	f7fb fea5 	bl	8000ee0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005196:	2300      	movs	r3, #0
 8005198:	e002      	b.n	80051a0 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800519a:	2300      	movs	r3, #0
 800519c:	e000      	b.n	80051a0 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800519e:	2302      	movs	r3, #2
  }
}
 80051a0:	4618      	mov	r0, r3
 80051a2:	3730      	adds	r7, #48	; 0x30
 80051a4:	46bd      	mov	sp, r7
 80051a6:	bd80      	pop	{r7, pc}

080051a8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80051a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80051ac:	b0c0      	sub	sp, #256	; 0x100
 80051ae:	af00      	add	r7, sp, #0
 80051b0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80051b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	691b      	ldr	r3, [r3, #16]
 80051bc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80051c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051c4:	68d9      	ldr	r1, [r3, #12]
 80051c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051ca:	681a      	ldr	r2, [r3, #0]
 80051cc:	ea40 0301 	orr.w	r3, r0, r1
 80051d0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80051d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051d6:	689a      	ldr	r2, [r3, #8]
 80051d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051dc:	691b      	ldr	r3, [r3, #16]
 80051de:	431a      	orrs	r2, r3
 80051e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051e4:	695b      	ldr	r3, [r3, #20]
 80051e6:	431a      	orrs	r2, r3
 80051e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051ec:	69db      	ldr	r3, [r3, #28]
 80051ee:	4313      	orrs	r3, r2
 80051f0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80051f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	68db      	ldr	r3, [r3, #12]
 80051fc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005200:	f021 010c 	bic.w	r1, r1, #12
 8005204:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005208:	681a      	ldr	r2, [r3, #0]
 800520a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800520e:	430b      	orrs	r3, r1
 8005210:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005212:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	695b      	ldr	r3, [r3, #20]
 800521a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800521e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005222:	6999      	ldr	r1, [r3, #24]
 8005224:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005228:	681a      	ldr	r2, [r3, #0]
 800522a:	ea40 0301 	orr.w	r3, r0, r1
 800522e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005230:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005234:	681a      	ldr	r2, [r3, #0]
 8005236:	4b8f      	ldr	r3, [pc, #572]	; (8005474 <UART_SetConfig+0x2cc>)
 8005238:	429a      	cmp	r2, r3
 800523a:	d005      	beq.n	8005248 <UART_SetConfig+0xa0>
 800523c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005240:	681a      	ldr	r2, [r3, #0]
 8005242:	4b8d      	ldr	r3, [pc, #564]	; (8005478 <UART_SetConfig+0x2d0>)
 8005244:	429a      	cmp	r2, r3
 8005246:	d104      	bne.n	8005252 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005248:	f7fe fde4 	bl	8003e14 <HAL_RCC_GetPCLK2Freq>
 800524c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005250:	e003      	b.n	800525a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005252:	f7fe fdcb 	bl	8003dec <HAL_RCC_GetPCLK1Freq>
 8005256:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800525a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800525e:	69db      	ldr	r3, [r3, #28]
 8005260:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005264:	f040 810c 	bne.w	8005480 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005268:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800526c:	2200      	movs	r2, #0
 800526e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005272:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005276:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800527a:	4622      	mov	r2, r4
 800527c:	462b      	mov	r3, r5
 800527e:	1891      	adds	r1, r2, r2
 8005280:	65b9      	str	r1, [r7, #88]	; 0x58
 8005282:	415b      	adcs	r3, r3
 8005284:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005286:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800528a:	4621      	mov	r1, r4
 800528c:	eb12 0801 	adds.w	r8, r2, r1
 8005290:	4629      	mov	r1, r5
 8005292:	eb43 0901 	adc.w	r9, r3, r1
 8005296:	f04f 0200 	mov.w	r2, #0
 800529a:	f04f 0300 	mov.w	r3, #0
 800529e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80052a2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80052a6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80052aa:	4690      	mov	r8, r2
 80052ac:	4699      	mov	r9, r3
 80052ae:	4623      	mov	r3, r4
 80052b0:	eb18 0303 	adds.w	r3, r8, r3
 80052b4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80052b8:	462b      	mov	r3, r5
 80052ba:	eb49 0303 	adc.w	r3, r9, r3
 80052be:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80052c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052c6:	685b      	ldr	r3, [r3, #4]
 80052c8:	2200      	movs	r2, #0
 80052ca:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80052ce:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80052d2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80052d6:	460b      	mov	r3, r1
 80052d8:	18db      	adds	r3, r3, r3
 80052da:	653b      	str	r3, [r7, #80]	; 0x50
 80052dc:	4613      	mov	r3, r2
 80052de:	eb42 0303 	adc.w	r3, r2, r3
 80052e2:	657b      	str	r3, [r7, #84]	; 0x54
 80052e4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80052e8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80052ec:	f7fa ff74 	bl	80001d8 <__aeabi_uldivmod>
 80052f0:	4602      	mov	r2, r0
 80052f2:	460b      	mov	r3, r1
 80052f4:	4b61      	ldr	r3, [pc, #388]	; (800547c <UART_SetConfig+0x2d4>)
 80052f6:	fba3 2302 	umull	r2, r3, r3, r2
 80052fa:	095b      	lsrs	r3, r3, #5
 80052fc:	011c      	lsls	r4, r3, #4
 80052fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005302:	2200      	movs	r2, #0
 8005304:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005308:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800530c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005310:	4642      	mov	r2, r8
 8005312:	464b      	mov	r3, r9
 8005314:	1891      	adds	r1, r2, r2
 8005316:	64b9      	str	r1, [r7, #72]	; 0x48
 8005318:	415b      	adcs	r3, r3
 800531a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800531c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005320:	4641      	mov	r1, r8
 8005322:	eb12 0a01 	adds.w	sl, r2, r1
 8005326:	4649      	mov	r1, r9
 8005328:	eb43 0b01 	adc.w	fp, r3, r1
 800532c:	f04f 0200 	mov.w	r2, #0
 8005330:	f04f 0300 	mov.w	r3, #0
 8005334:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005338:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800533c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005340:	4692      	mov	sl, r2
 8005342:	469b      	mov	fp, r3
 8005344:	4643      	mov	r3, r8
 8005346:	eb1a 0303 	adds.w	r3, sl, r3
 800534a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800534e:	464b      	mov	r3, r9
 8005350:	eb4b 0303 	adc.w	r3, fp, r3
 8005354:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005358:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800535c:	685b      	ldr	r3, [r3, #4]
 800535e:	2200      	movs	r2, #0
 8005360:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005364:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005368:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800536c:	460b      	mov	r3, r1
 800536e:	18db      	adds	r3, r3, r3
 8005370:	643b      	str	r3, [r7, #64]	; 0x40
 8005372:	4613      	mov	r3, r2
 8005374:	eb42 0303 	adc.w	r3, r2, r3
 8005378:	647b      	str	r3, [r7, #68]	; 0x44
 800537a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800537e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005382:	f7fa ff29 	bl	80001d8 <__aeabi_uldivmod>
 8005386:	4602      	mov	r2, r0
 8005388:	460b      	mov	r3, r1
 800538a:	4611      	mov	r1, r2
 800538c:	4b3b      	ldr	r3, [pc, #236]	; (800547c <UART_SetConfig+0x2d4>)
 800538e:	fba3 2301 	umull	r2, r3, r3, r1
 8005392:	095b      	lsrs	r3, r3, #5
 8005394:	2264      	movs	r2, #100	; 0x64
 8005396:	fb02 f303 	mul.w	r3, r2, r3
 800539a:	1acb      	subs	r3, r1, r3
 800539c:	00db      	lsls	r3, r3, #3
 800539e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80053a2:	4b36      	ldr	r3, [pc, #216]	; (800547c <UART_SetConfig+0x2d4>)
 80053a4:	fba3 2302 	umull	r2, r3, r3, r2
 80053a8:	095b      	lsrs	r3, r3, #5
 80053aa:	005b      	lsls	r3, r3, #1
 80053ac:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80053b0:	441c      	add	r4, r3
 80053b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80053b6:	2200      	movs	r2, #0
 80053b8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80053bc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80053c0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80053c4:	4642      	mov	r2, r8
 80053c6:	464b      	mov	r3, r9
 80053c8:	1891      	adds	r1, r2, r2
 80053ca:	63b9      	str	r1, [r7, #56]	; 0x38
 80053cc:	415b      	adcs	r3, r3
 80053ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 80053d0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80053d4:	4641      	mov	r1, r8
 80053d6:	1851      	adds	r1, r2, r1
 80053d8:	6339      	str	r1, [r7, #48]	; 0x30
 80053da:	4649      	mov	r1, r9
 80053dc:	414b      	adcs	r3, r1
 80053de:	637b      	str	r3, [r7, #52]	; 0x34
 80053e0:	f04f 0200 	mov.w	r2, #0
 80053e4:	f04f 0300 	mov.w	r3, #0
 80053e8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80053ec:	4659      	mov	r1, fp
 80053ee:	00cb      	lsls	r3, r1, #3
 80053f0:	4651      	mov	r1, sl
 80053f2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80053f6:	4651      	mov	r1, sl
 80053f8:	00ca      	lsls	r2, r1, #3
 80053fa:	4610      	mov	r0, r2
 80053fc:	4619      	mov	r1, r3
 80053fe:	4603      	mov	r3, r0
 8005400:	4642      	mov	r2, r8
 8005402:	189b      	adds	r3, r3, r2
 8005404:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005408:	464b      	mov	r3, r9
 800540a:	460a      	mov	r2, r1
 800540c:	eb42 0303 	adc.w	r3, r2, r3
 8005410:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005414:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005418:	685b      	ldr	r3, [r3, #4]
 800541a:	2200      	movs	r2, #0
 800541c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005420:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005424:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005428:	460b      	mov	r3, r1
 800542a:	18db      	adds	r3, r3, r3
 800542c:	62bb      	str	r3, [r7, #40]	; 0x28
 800542e:	4613      	mov	r3, r2
 8005430:	eb42 0303 	adc.w	r3, r2, r3
 8005434:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005436:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800543a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800543e:	f7fa fecb 	bl	80001d8 <__aeabi_uldivmod>
 8005442:	4602      	mov	r2, r0
 8005444:	460b      	mov	r3, r1
 8005446:	4b0d      	ldr	r3, [pc, #52]	; (800547c <UART_SetConfig+0x2d4>)
 8005448:	fba3 1302 	umull	r1, r3, r3, r2
 800544c:	095b      	lsrs	r3, r3, #5
 800544e:	2164      	movs	r1, #100	; 0x64
 8005450:	fb01 f303 	mul.w	r3, r1, r3
 8005454:	1ad3      	subs	r3, r2, r3
 8005456:	00db      	lsls	r3, r3, #3
 8005458:	3332      	adds	r3, #50	; 0x32
 800545a:	4a08      	ldr	r2, [pc, #32]	; (800547c <UART_SetConfig+0x2d4>)
 800545c:	fba2 2303 	umull	r2, r3, r2, r3
 8005460:	095b      	lsrs	r3, r3, #5
 8005462:	f003 0207 	and.w	r2, r3, #7
 8005466:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	4422      	add	r2, r4
 800546e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005470:	e105      	b.n	800567e <UART_SetConfig+0x4d6>
 8005472:	bf00      	nop
 8005474:	40011000 	.word	0x40011000
 8005478:	40011400 	.word	0x40011400
 800547c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005480:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005484:	2200      	movs	r2, #0
 8005486:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800548a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800548e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005492:	4642      	mov	r2, r8
 8005494:	464b      	mov	r3, r9
 8005496:	1891      	adds	r1, r2, r2
 8005498:	6239      	str	r1, [r7, #32]
 800549a:	415b      	adcs	r3, r3
 800549c:	627b      	str	r3, [r7, #36]	; 0x24
 800549e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80054a2:	4641      	mov	r1, r8
 80054a4:	1854      	adds	r4, r2, r1
 80054a6:	4649      	mov	r1, r9
 80054a8:	eb43 0501 	adc.w	r5, r3, r1
 80054ac:	f04f 0200 	mov.w	r2, #0
 80054b0:	f04f 0300 	mov.w	r3, #0
 80054b4:	00eb      	lsls	r3, r5, #3
 80054b6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80054ba:	00e2      	lsls	r2, r4, #3
 80054bc:	4614      	mov	r4, r2
 80054be:	461d      	mov	r5, r3
 80054c0:	4643      	mov	r3, r8
 80054c2:	18e3      	adds	r3, r4, r3
 80054c4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80054c8:	464b      	mov	r3, r9
 80054ca:	eb45 0303 	adc.w	r3, r5, r3
 80054ce:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80054d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054d6:	685b      	ldr	r3, [r3, #4]
 80054d8:	2200      	movs	r2, #0
 80054da:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80054de:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80054e2:	f04f 0200 	mov.w	r2, #0
 80054e6:	f04f 0300 	mov.w	r3, #0
 80054ea:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80054ee:	4629      	mov	r1, r5
 80054f0:	008b      	lsls	r3, r1, #2
 80054f2:	4621      	mov	r1, r4
 80054f4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80054f8:	4621      	mov	r1, r4
 80054fa:	008a      	lsls	r2, r1, #2
 80054fc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005500:	f7fa fe6a 	bl	80001d8 <__aeabi_uldivmod>
 8005504:	4602      	mov	r2, r0
 8005506:	460b      	mov	r3, r1
 8005508:	4b60      	ldr	r3, [pc, #384]	; (800568c <UART_SetConfig+0x4e4>)
 800550a:	fba3 2302 	umull	r2, r3, r3, r2
 800550e:	095b      	lsrs	r3, r3, #5
 8005510:	011c      	lsls	r4, r3, #4
 8005512:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005516:	2200      	movs	r2, #0
 8005518:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800551c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005520:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005524:	4642      	mov	r2, r8
 8005526:	464b      	mov	r3, r9
 8005528:	1891      	adds	r1, r2, r2
 800552a:	61b9      	str	r1, [r7, #24]
 800552c:	415b      	adcs	r3, r3
 800552e:	61fb      	str	r3, [r7, #28]
 8005530:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005534:	4641      	mov	r1, r8
 8005536:	1851      	adds	r1, r2, r1
 8005538:	6139      	str	r1, [r7, #16]
 800553a:	4649      	mov	r1, r9
 800553c:	414b      	adcs	r3, r1
 800553e:	617b      	str	r3, [r7, #20]
 8005540:	f04f 0200 	mov.w	r2, #0
 8005544:	f04f 0300 	mov.w	r3, #0
 8005548:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800554c:	4659      	mov	r1, fp
 800554e:	00cb      	lsls	r3, r1, #3
 8005550:	4651      	mov	r1, sl
 8005552:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005556:	4651      	mov	r1, sl
 8005558:	00ca      	lsls	r2, r1, #3
 800555a:	4610      	mov	r0, r2
 800555c:	4619      	mov	r1, r3
 800555e:	4603      	mov	r3, r0
 8005560:	4642      	mov	r2, r8
 8005562:	189b      	adds	r3, r3, r2
 8005564:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005568:	464b      	mov	r3, r9
 800556a:	460a      	mov	r2, r1
 800556c:	eb42 0303 	adc.w	r3, r2, r3
 8005570:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005574:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005578:	685b      	ldr	r3, [r3, #4]
 800557a:	2200      	movs	r2, #0
 800557c:	67bb      	str	r3, [r7, #120]	; 0x78
 800557e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005580:	f04f 0200 	mov.w	r2, #0
 8005584:	f04f 0300 	mov.w	r3, #0
 8005588:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800558c:	4649      	mov	r1, r9
 800558e:	008b      	lsls	r3, r1, #2
 8005590:	4641      	mov	r1, r8
 8005592:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005596:	4641      	mov	r1, r8
 8005598:	008a      	lsls	r2, r1, #2
 800559a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800559e:	f7fa fe1b 	bl	80001d8 <__aeabi_uldivmod>
 80055a2:	4602      	mov	r2, r0
 80055a4:	460b      	mov	r3, r1
 80055a6:	4b39      	ldr	r3, [pc, #228]	; (800568c <UART_SetConfig+0x4e4>)
 80055a8:	fba3 1302 	umull	r1, r3, r3, r2
 80055ac:	095b      	lsrs	r3, r3, #5
 80055ae:	2164      	movs	r1, #100	; 0x64
 80055b0:	fb01 f303 	mul.w	r3, r1, r3
 80055b4:	1ad3      	subs	r3, r2, r3
 80055b6:	011b      	lsls	r3, r3, #4
 80055b8:	3332      	adds	r3, #50	; 0x32
 80055ba:	4a34      	ldr	r2, [pc, #208]	; (800568c <UART_SetConfig+0x4e4>)
 80055bc:	fba2 2303 	umull	r2, r3, r2, r3
 80055c0:	095b      	lsrs	r3, r3, #5
 80055c2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80055c6:	441c      	add	r4, r3
 80055c8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80055cc:	2200      	movs	r2, #0
 80055ce:	673b      	str	r3, [r7, #112]	; 0x70
 80055d0:	677a      	str	r2, [r7, #116]	; 0x74
 80055d2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80055d6:	4642      	mov	r2, r8
 80055d8:	464b      	mov	r3, r9
 80055da:	1891      	adds	r1, r2, r2
 80055dc:	60b9      	str	r1, [r7, #8]
 80055de:	415b      	adcs	r3, r3
 80055e0:	60fb      	str	r3, [r7, #12]
 80055e2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80055e6:	4641      	mov	r1, r8
 80055e8:	1851      	adds	r1, r2, r1
 80055ea:	6039      	str	r1, [r7, #0]
 80055ec:	4649      	mov	r1, r9
 80055ee:	414b      	adcs	r3, r1
 80055f0:	607b      	str	r3, [r7, #4]
 80055f2:	f04f 0200 	mov.w	r2, #0
 80055f6:	f04f 0300 	mov.w	r3, #0
 80055fa:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80055fe:	4659      	mov	r1, fp
 8005600:	00cb      	lsls	r3, r1, #3
 8005602:	4651      	mov	r1, sl
 8005604:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005608:	4651      	mov	r1, sl
 800560a:	00ca      	lsls	r2, r1, #3
 800560c:	4610      	mov	r0, r2
 800560e:	4619      	mov	r1, r3
 8005610:	4603      	mov	r3, r0
 8005612:	4642      	mov	r2, r8
 8005614:	189b      	adds	r3, r3, r2
 8005616:	66bb      	str	r3, [r7, #104]	; 0x68
 8005618:	464b      	mov	r3, r9
 800561a:	460a      	mov	r2, r1
 800561c:	eb42 0303 	adc.w	r3, r2, r3
 8005620:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005622:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005626:	685b      	ldr	r3, [r3, #4]
 8005628:	2200      	movs	r2, #0
 800562a:	663b      	str	r3, [r7, #96]	; 0x60
 800562c:	667a      	str	r2, [r7, #100]	; 0x64
 800562e:	f04f 0200 	mov.w	r2, #0
 8005632:	f04f 0300 	mov.w	r3, #0
 8005636:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800563a:	4649      	mov	r1, r9
 800563c:	008b      	lsls	r3, r1, #2
 800563e:	4641      	mov	r1, r8
 8005640:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005644:	4641      	mov	r1, r8
 8005646:	008a      	lsls	r2, r1, #2
 8005648:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800564c:	f7fa fdc4 	bl	80001d8 <__aeabi_uldivmod>
 8005650:	4602      	mov	r2, r0
 8005652:	460b      	mov	r3, r1
 8005654:	4b0d      	ldr	r3, [pc, #52]	; (800568c <UART_SetConfig+0x4e4>)
 8005656:	fba3 1302 	umull	r1, r3, r3, r2
 800565a:	095b      	lsrs	r3, r3, #5
 800565c:	2164      	movs	r1, #100	; 0x64
 800565e:	fb01 f303 	mul.w	r3, r1, r3
 8005662:	1ad3      	subs	r3, r2, r3
 8005664:	011b      	lsls	r3, r3, #4
 8005666:	3332      	adds	r3, #50	; 0x32
 8005668:	4a08      	ldr	r2, [pc, #32]	; (800568c <UART_SetConfig+0x4e4>)
 800566a:	fba2 2303 	umull	r2, r3, r2, r3
 800566e:	095b      	lsrs	r3, r3, #5
 8005670:	f003 020f 	and.w	r2, r3, #15
 8005674:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	4422      	add	r2, r4
 800567c:	609a      	str	r2, [r3, #8]
}
 800567e:	bf00      	nop
 8005680:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005684:	46bd      	mov	sp, r7
 8005686:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800568a:	bf00      	nop
 800568c:	51eb851f 	.word	0x51eb851f

08005690 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005690:	b084      	sub	sp, #16
 8005692:	b580      	push	{r7, lr}
 8005694:	b084      	sub	sp, #16
 8005696:	af00      	add	r7, sp, #0
 8005698:	6078      	str	r0, [r7, #4]
 800569a:	f107 001c 	add.w	r0, r7, #28
 800569e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80056a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056a4:	2b01      	cmp	r3, #1
 80056a6:	d122      	bne.n	80056ee <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056ac:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	68db      	ldr	r3, [r3, #12]
 80056b8:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80056bc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80056c0:	687a      	ldr	r2, [r7, #4]
 80056c2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	68db      	ldr	r3, [r3, #12]
 80056c8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80056d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80056d2:	2b01      	cmp	r3, #1
 80056d4:	d105      	bne.n	80056e2 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	68db      	ldr	r3, [r3, #12]
 80056da:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80056e2:	6878      	ldr	r0, [r7, #4]
 80056e4:	f001 fb1c 	bl	8006d20 <USB_CoreReset>
 80056e8:	4603      	mov	r3, r0
 80056ea:	73fb      	strb	r3, [r7, #15]
 80056ec:	e01a      	b.n	8005724 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	68db      	ldr	r3, [r3, #12]
 80056f2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80056fa:	6878      	ldr	r0, [r7, #4]
 80056fc:	f001 fb10 	bl	8006d20 <USB_CoreReset>
 8005700:	4603      	mov	r3, r0
 8005702:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005704:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005706:	2b00      	cmp	r3, #0
 8005708:	d106      	bne.n	8005718 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800570e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	639a      	str	r2, [r3, #56]	; 0x38
 8005716:	e005      	b.n	8005724 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800571c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005724:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005726:	2b01      	cmp	r3, #1
 8005728:	d10b      	bne.n	8005742 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	689b      	ldr	r3, [r3, #8]
 800572e:	f043 0206 	orr.w	r2, r3, #6
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	689b      	ldr	r3, [r3, #8]
 800573a:	f043 0220 	orr.w	r2, r3, #32
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005742:	7bfb      	ldrb	r3, [r7, #15]
}
 8005744:	4618      	mov	r0, r3
 8005746:	3710      	adds	r7, #16
 8005748:	46bd      	mov	sp, r7
 800574a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800574e:	b004      	add	sp, #16
 8005750:	4770      	bx	lr
	...

08005754 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8005754:	b480      	push	{r7}
 8005756:	b087      	sub	sp, #28
 8005758:	af00      	add	r7, sp, #0
 800575a:	60f8      	str	r0, [r7, #12]
 800575c:	60b9      	str	r1, [r7, #8]
 800575e:	4613      	mov	r3, r2
 8005760:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8005762:	79fb      	ldrb	r3, [r7, #7]
 8005764:	2b02      	cmp	r3, #2
 8005766:	d165      	bne.n	8005834 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8005768:	68bb      	ldr	r3, [r7, #8]
 800576a:	4a41      	ldr	r2, [pc, #260]	; (8005870 <USB_SetTurnaroundTime+0x11c>)
 800576c:	4293      	cmp	r3, r2
 800576e:	d906      	bls.n	800577e <USB_SetTurnaroundTime+0x2a>
 8005770:	68bb      	ldr	r3, [r7, #8]
 8005772:	4a40      	ldr	r2, [pc, #256]	; (8005874 <USB_SetTurnaroundTime+0x120>)
 8005774:	4293      	cmp	r3, r2
 8005776:	d202      	bcs.n	800577e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8005778:	230f      	movs	r3, #15
 800577a:	617b      	str	r3, [r7, #20]
 800577c:	e062      	b.n	8005844 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800577e:	68bb      	ldr	r3, [r7, #8]
 8005780:	4a3c      	ldr	r2, [pc, #240]	; (8005874 <USB_SetTurnaroundTime+0x120>)
 8005782:	4293      	cmp	r3, r2
 8005784:	d306      	bcc.n	8005794 <USB_SetTurnaroundTime+0x40>
 8005786:	68bb      	ldr	r3, [r7, #8]
 8005788:	4a3b      	ldr	r2, [pc, #236]	; (8005878 <USB_SetTurnaroundTime+0x124>)
 800578a:	4293      	cmp	r3, r2
 800578c:	d202      	bcs.n	8005794 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800578e:	230e      	movs	r3, #14
 8005790:	617b      	str	r3, [r7, #20]
 8005792:	e057      	b.n	8005844 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8005794:	68bb      	ldr	r3, [r7, #8]
 8005796:	4a38      	ldr	r2, [pc, #224]	; (8005878 <USB_SetTurnaroundTime+0x124>)
 8005798:	4293      	cmp	r3, r2
 800579a:	d306      	bcc.n	80057aa <USB_SetTurnaroundTime+0x56>
 800579c:	68bb      	ldr	r3, [r7, #8]
 800579e:	4a37      	ldr	r2, [pc, #220]	; (800587c <USB_SetTurnaroundTime+0x128>)
 80057a0:	4293      	cmp	r3, r2
 80057a2:	d202      	bcs.n	80057aa <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80057a4:	230d      	movs	r3, #13
 80057a6:	617b      	str	r3, [r7, #20]
 80057a8:	e04c      	b.n	8005844 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80057aa:	68bb      	ldr	r3, [r7, #8]
 80057ac:	4a33      	ldr	r2, [pc, #204]	; (800587c <USB_SetTurnaroundTime+0x128>)
 80057ae:	4293      	cmp	r3, r2
 80057b0:	d306      	bcc.n	80057c0 <USB_SetTurnaroundTime+0x6c>
 80057b2:	68bb      	ldr	r3, [r7, #8]
 80057b4:	4a32      	ldr	r2, [pc, #200]	; (8005880 <USB_SetTurnaroundTime+0x12c>)
 80057b6:	4293      	cmp	r3, r2
 80057b8:	d802      	bhi.n	80057c0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80057ba:	230c      	movs	r3, #12
 80057bc:	617b      	str	r3, [r7, #20]
 80057be:	e041      	b.n	8005844 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80057c0:	68bb      	ldr	r3, [r7, #8]
 80057c2:	4a2f      	ldr	r2, [pc, #188]	; (8005880 <USB_SetTurnaroundTime+0x12c>)
 80057c4:	4293      	cmp	r3, r2
 80057c6:	d906      	bls.n	80057d6 <USB_SetTurnaroundTime+0x82>
 80057c8:	68bb      	ldr	r3, [r7, #8]
 80057ca:	4a2e      	ldr	r2, [pc, #184]	; (8005884 <USB_SetTurnaroundTime+0x130>)
 80057cc:	4293      	cmp	r3, r2
 80057ce:	d802      	bhi.n	80057d6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80057d0:	230b      	movs	r3, #11
 80057d2:	617b      	str	r3, [r7, #20]
 80057d4:	e036      	b.n	8005844 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80057d6:	68bb      	ldr	r3, [r7, #8]
 80057d8:	4a2a      	ldr	r2, [pc, #168]	; (8005884 <USB_SetTurnaroundTime+0x130>)
 80057da:	4293      	cmp	r3, r2
 80057dc:	d906      	bls.n	80057ec <USB_SetTurnaroundTime+0x98>
 80057de:	68bb      	ldr	r3, [r7, #8]
 80057e0:	4a29      	ldr	r2, [pc, #164]	; (8005888 <USB_SetTurnaroundTime+0x134>)
 80057e2:	4293      	cmp	r3, r2
 80057e4:	d802      	bhi.n	80057ec <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80057e6:	230a      	movs	r3, #10
 80057e8:	617b      	str	r3, [r7, #20]
 80057ea:	e02b      	b.n	8005844 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80057ec:	68bb      	ldr	r3, [r7, #8]
 80057ee:	4a26      	ldr	r2, [pc, #152]	; (8005888 <USB_SetTurnaroundTime+0x134>)
 80057f0:	4293      	cmp	r3, r2
 80057f2:	d906      	bls.n	8005802 <USB_SetTurnaroundTime+0xae>
 80057f4:	68bb      	ldr	r3, [r7, #8]
 80057f6:	4a25      	ldr	r2, [pc, #148]	; (800588c <USB_SetTurnaroundTime+0x138>)
 80057f8:	4293      	cmp	r3, r2
 80057fa:	d202      	bcs.n	8005802 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80057fc:	2309      	movs	r3, #9
 80057fe:	617b      	str	r3, [r7, #20]
 8005800:	e020      	b.n	8005844 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8005802:	68bb      	ldr	r3, [r7, #8]
 8005804:	4a21      	ldr	r2, [pc, #132]	; (800588c <USB_SetTurnaroundTime+0x138>)
 8005806:	4293      	cmp	r3, r2
 8005808:	d306      	bcc.n	8005818 <USB_SetTurnaroundTime+0xc4>
 800580a:	68bb      	ldr	r3, [r7, #8]
 800580c:	4a20      	ldr	r2, [pc, #128]	; (8005890 <USB_SetTurnaroundTime+0x13c>)
 800580e:	4293      	cmp	r3, r2
 8005810:	d802      	bhi.n	8005818 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8005812:	2308      	movs	r3, #8
 8005814:	617b      	str	r3, [r7, #20]
 8005816:	e015      	b.n	8005844 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8005818:	68bb      	ldr	r3, [r7, #8]
 800581a:	4a1d      	ldr	r2, [pc, #116]	; (8005890 <USB_SetTurnaroundTime+0x13c>)
 800581c:	4293      	cmp	r3, r2
 800581e:	d906      	bls.n	800582e <USB_SetTurnaroundTime+0xda>
 8005820:	68bb      	ldr	r3, [r7, #8]
 8005822:	4a1c      	ldr	r2, [pc, #112]	; (8005894 <USB_SetTurnaroundTime+0x140>)
 8005824:	4293      	cmp	r3, r2
 8005826:	d202      	bcs.n	800582e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8005828:	2307      	movs	r3, #7
 800582a:	617b      	str	r3, [r7, #20]
 800582c:	e00a      	b.n	8005844 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800582e:	2306      	movs	r3, #6
 8005830:	617b      	str	r3, [r7, #20]
 8005832:	e007      	b.n	8005844 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8005834:	79fb      	ldrb	r3, [r7, #7]
 8005836:	2b00      	cmp	r3, #0
 8005838:	d102      	bne.n	8005840 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800583a:	2309      	movs	r3, #9
 800583c:	617b      	str	r3, [r7, #20]
 800583e:	e001      	b.n	8005844 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8005840:	2309      	movs	r3, #9
 8005842:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	68db      	ldr	r3, [r3, #12]
 8005848:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	68da      	ldr	r2, [r3, #12]
 8005854:	697b      	ldr	r3, [r7, #20]
 8005856:	029b      	lsls	r3, r3, #10
 8005858:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800585c:	431a      	orrs	r2, r3
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005862:	2300      	movs	r3, #0
}
 8005864:	4618      	mov	r0, r3
 8005866:	371c      	adds	r7, #28
 8005868:	46bd      	mov	sp, r7
 800586a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800586e:	4770      	bx	lr
 8005870:	00d8acbf 	.word	0x00d8acbf
 8005874:	00e4e1c0 	.word	0x00e4e1c0
 8005878:	00f42400 	.word	0x00f42400
 800587c:	01067380 	.word	0x01067380
 8005880:	011a499f 	.word	0x011a499f
 8005884:	01312cff 	.word	0x01312cff
 8005888:	014ca43f 	.word	0x014ca43f
 800588c:	016e3600 	.word	0x016e3600
 8005890:	01a6ab1f 	.word	0x01a6ab1f
 8005894:	01e84800 	.word	0x01e84800

08005898 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005898:	b480      	push	{r7}
 800589a:	b083      	sub	sp, #12
 800589c:	af00      	add	r7, sp, #0
 800589e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	689b      	ldr	r3, [r3, #8]
 80058a4:	f043 0201 	orr.w	r2, r3, #1
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80058ac:	2300      	movs	r3, #0
}
 80058ae:	4618      	mov	r0, r3
 80058b0:	370c      	adds	r7, #12
 80058b2:	46bd      	mov	sp, r7
 80058b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b8:	4770      	bx	lr

080058ba <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80058ba:	b480      	push	{r7}
 80058bc:	b083      	sub	sp, #12
 80058be:	af00      	add	r7, sp, #0
 80058c0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	689b      	ldr	r3, [r3, #8]
 80058c6:	f023 0201 	bic.w	r2, r3, #1
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80058ce:	2300      	movs	r3, #0
}
 80058d0:	4618      	mov	r0, r3
 80058d2:	370c      	adds	r7, #12
 80058d4:	46bd      	mov	sp, r7
 80058d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058da:	4770      	bx	lr

080058dc <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80058dc:	b580      	push	{r7, lr}
 80058de:	b084      	sub	sp, #16
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	6078      	str	r0, [r7, #4]
 80058e4:	460b      	mov	r3, r1
 80058e6:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80058e8:	2300      	movs	r3, #0
 80058ea:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	68db      	ldr	r3, [r3, #12]
 80058f0:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80058f8:	78fb      	ldrb	r3, [r7, #3]
 80058fa:	2b01      	cmp	r3, #1
 80058fc:	d115      	bne.n	800592a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	68db      	ldr	r3, [r3, #12]
 8005902:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800590a:	2001      	movs	r0, #1
 800590c:	f7fb fc58 	bl	80011c0 <HAL_Delay>
      ms++;
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	3301      	adds	r3, #1
 8005914:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005916:	6878      	ldr	r0, [r7, #4]
 8005918:	f001 f972 	bl	8006c00 <USB_GetMode>
 800591c:	4603      	mov	r3, r0
 800591e:	2b01      	cmp	r3, #1
 8005920:	d01e      	beq.n	8005960 <USB_SetCurrentMode+0x84>
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	2b31      	cmp	r3, #49	; 0x31
 8005926:	d9f0      	bls.n	800590a <USB_SetCurrentMode+0x2e>
 8005928:	e01a      	b.n	8005960 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800592a:	78fb      	ldrb	r3, [r7, #3]
 800592c:	2b00      	cmp	r3, #0
 800592e:	d115      	bne.n	800595c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	68db      	ldr	r3, [r3, #12]
 8005934:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800593c:	2001      	movs	r0, #1
 800593e:	f7fb fc3f 	bl	80011c0 <HAL_Delay>
      ms++;
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	3301      	adds	r3, #1
 8005946:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005948:	6878      	ldr	r0, [r7, #4]
 800594a:	f001 f959 	bl	8006c00 <USB_GetMode>
 800594e:	4603      	mov	r3, r0
 8005950:	2b00      	cmp	r3, #0
 8005952:	d005      	beq.n	8005960 <USB_SetCurrentMode+0x84>
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	2b31      	cmp	r3, #49	; 0x31
 8005958:	d9f0      	bls.n	800593c <USB_SetCurrentMode+0x60>
 800595a:	e001      	b.n	8005960 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800595c:	2301      	movs	r3, #1
 800595e:	e005      	b.n	800596c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	2b32      	cmp	r3, #50	; 0x32
 8005964:	d101      	bne.n	800596a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005966:	2301      	movs	r3, #1
 8005968:	e000      	b.n	800596c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800596a:	2300      	movs	r3, #0
}
 800596c:	4618      	mov	r0, r3
 800596e:	3710      	adds	r7, #16
 8005970:	46bd      	mov	sp, r7
 8005972:	bd80      	pop	{r7, pc}

08005974 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005974:	b084      	sub	sp, #16
 8005976:	b580      	push	{r7, lr}
 8005978:	b086      	sub	sp, #24
 800597a:	af00      	add	r7, sp, #0
 800597c:	6078      	str	r0, [r7, #4]
 800597e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005982:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005986:	2300      	movs	r3, #0
 8005988:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800598e:	2300      	movs	r3, #0
 8005990:	613b      	str	r3, [r7, #16]
 8005992:	e009      	b.n	80059a8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005994:	687a      	ldr	r2, [r7, #4]
 8005996:	693b      	ldr	r3, [r7, #16]
 8005998:	3340      	adds	r3, #64	; 0x40
 800599a:	009b      	lsls	r3, r3, #2
 800599c:	4413      	add	r3, r2
 800599e:	2200      	movs	r2, #0
 80059a0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80059a2:	693b      	ldr	r3, [r7, #16]
 80059a4:	3301      	adds	r3, #1
 80059a6:	613b      	str	r3, [r7, #16]
 80059a8:	693b      	ldr	r3, [r7, #16]
 80059aa:	2b0e      	cmp	r3, #14
 80059ac:	d9f2      	bls.n	8005994 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80059ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d11c      	bne.n	80059ee <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059ba:	685b      	ldr	r3, [r3, #4]
 80059bc:	68fa      	ldr	r2, [r7, #12]
 80059be:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80059c2:	f043 0302 	orr.w	r3, r3, #2
 80059c6:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059cc:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059d8:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059e4:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	639a      	str	r2, [r3, #56]	; 0x38
 80059ec:	e00b      	b.n	8005a06 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059f2:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059fe:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005a0c:	461a      	mov	r2, r3
 8005a0e:	2300      	movs	r3, #0
 8005a10:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a18:	4619      	mov	r1, r3
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a20:	461a      	mov	r2, r3
 8005a22:	680b      	ldr	r3, [r1, #0]
 8005a24:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005a26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a28:	2b01      	cmp	r3, #1
 8005a2a:	d10c      	bne.n	8005a46 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005a2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d104      	bne.n	8005a3c <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005a32:	2100      	movs	r1, #0
 8005a34:	6878      	ldr	r0, [r7, #4]
 8005a36:	f000 f945 	bl	8005cc4 <USB_SetDevSpeed>
 8005a3a:	e008      	b.n	8005a4e <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005a3c:	2101      	movs	r1, #1
 8005a3e:	6878      	ldr	r0, [r7, #4]
 8005a40:	f000 f940 	bl	8005cc4 <USB_SetDevSpeed>
 8005a44:	e003      	b.n	8005a4e <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005a46:	2103      	movs	r1, #3
 8005a48:	6878      	ldr	r0, [r7, #4]
 8005a4a:	f000 f93b 	bl	8005cc4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005a4e:	2110      	movs	r1, #16
 8005a50:	6878      	ldr	r0, [r7, #4]
 8005a52:	f000 f8f3 	bl	8005c3c <USB_FlushTxFifo>
 8005a56:	4603      	mov	r3, r0
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d001      	beq.n	8005a60 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8005a5c:	2301      	movs	r3, #1
 8005a5e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005a60:	6878      	ldr	r0, [r7, #4]
 8005a62:	f000 f90f 	bl	8005c84 <USB_FlushRxFifo>
 8005a66:	4603      	mov	r3, r0
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d001      	beq.n	8005a70 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8005a6c:	2301      	movs	r3, #1
 8005a6e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a76:	461a      	mov	r2, r3
 8005a78:	2300      	movs	r3, #0
 8005a7a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a82:	461a      	mov	r2, r3
 8005a84:	2300      	movs	r3, #0
 8005a86:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a8e:	461a      	mov	r2, r3
 8005a90:	2300      	movs	r3, #0
 8005a92:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005a94:	2300      	movs	r3, #0
 8005a96:	613b      	str	r3, [r7, #16]
 8005a98:	e043      	b.n	8005b22 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005a9a:	693b      	ldr	r3, [r7, #16]
 8005a9c:	015a      	lsls	r2, r3, #5
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	4413      	add	r3, r2
 8005aa2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005aac:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005ab0:	d118      	bne.n	8005ae4 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8005ab2:	693b      	ldr	r3, [r7, #16]
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d10a      	bne.n	8005ace <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005ab8:	693b      	ldr	r3, [r7, #16]
 8005aba:	015a      	lsls	r2, r3, #5
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	4413      	add	r3, r2
 8005ac0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ac4:	461a      	mov	r2, r3
 8005ac6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005aca:	6013      	str	r3, [r2, #0]
 8005acc:	e013      	b.n	8005af6 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005ace:	693b      	ldr	r3, [r7, #16]
 8005ad0:	015a      	lsls	r2, r3, #5
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	4413      	add	r3, r2
 8005ad6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ada:	461a      	mov	r2, r3
 8005adc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005ae0:	6013      	str	r3, [r2, #0]
 8005ae2:	e008      	b.n	8005af6 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005ae4:	693b      	ldr	r3, [r7, #16]
 8005ae6:	015a      	lsls	r2, r3, #5
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	4413      	add	r3, r2
 8005aec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005af0:	461a      	mov	r2, r3
 8005af2:	2300      	movs	r3, #0
 8005af4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005af6:	693b      	ldr	r3, [r7, #16]
 8005af8:	015a      	lsls	r2, r3, #5
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	4413      	add	r3, r2
 8005afe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b02:	461a      	mov	r2, r3
 8005b04:	2300      	movs	r3, #0
 8005b06:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005b08:	693b      	ldr	r3, [r7, #16]
 8005b0a:	015a      	lsls	r2, r3, #5
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	4413      	add	r3, r2
 8005b10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b14:	461a      	mov	r2, r3
 8005b16:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005b1a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005b1c:	693b      	ldr	r3, [r7, #16]
 8005b1e:	3301      	adds	r3, #1
 8005b20:	613b      	str	r3, [r7, #16]
 8005b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b24:	693a      	ldr	r2, [r7, #16]
 8005b26:	429a      	cmp	r2, r3
 8005b28:	d3b7      	bcc.n	8005a9a <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005b2a:	2300      	movs	r3, #0
 8005b2c:	613b      	str	r3, [r7, #16]
 8005b2e:	e043      	b.n	8005bb8 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005b30:	693b      	ldr	r3, [r7, #16]
 8005b32:	015a      	lsls	r2, r3, #5
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	4413      	add	r3, r2
 8005b38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005b42:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005b46:	d118      	bne.n	8005b7a <USB_DevInit+0x206>
    {
      if (i == 0U)
 8005b48:	693b      	ldr	r3, [r7, #16]
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d10a      	bne.n	8005b64 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005b4e:	693b      	ldr	r3, [r7, #16]
 8005b50:	015a      	lsls	r2, r3, #5
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	4413      	add	r3, r2
 8005b56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b5a:	461a      	mov	r2, r3
 8005b5c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005b60:	6013      	str	r3, [r2, #0]
 8005b62:	e013      	b.n	8005b8c <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005b64:	693b      	ldr	r3, [r7, #16]
 8005b66:	015a      	lsls	r2, r3, #5
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	4413      	add	r3, r2
 8005b6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b70:	461a      	mov	r2, r3
 8005b72:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005b76:	6013      	str	r3, [r2, #0]
 8005b78:	e008      	b.n	8005b8c <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005b7a:	693b      	ldr	r3, [r7, #16]
 8005b7c:	015a      	lsls	r2, r3, #5
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	4413      	add	r3, r2
 8005b82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b86:	461a      	mov	r2, r3
 8005b88:	2300      	movs	r3, #0
 8005b8a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005b8c:	693b      	ldr	r3, [r7, #16]
 8005b8e:	015a      	lsls	r2, r3, #5
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	4413      	add	r3, r2
 8005b94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b98:	461a      	mov	r2, r3
 8005b9a:	2300      	movs	r3, #0
 8005b9c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005b9e:	693b      	ldr	r3, [r7, #16]
 8005ba0:	015a      	lsls	r2, r3, #5
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	4413      	add	r3, r2
 8005ba6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005baa:	461a      	mov	r2, r3
 8005bac:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005bb0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005bb2:	693b      	ldr	r3, [r7, #16]
 8005bb4:	3301      	adds	r3, #1
 8005bb6:	613b      	str	r3, [r7, #16]
 8005bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bba:	693a      	ldr	r2, [r7, #16]
 8005bbc:	429a      	cmp	r2, r3
 8005bbe:	d3b7      	bcc.n	8005b30 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005bc6:	691b      	ldr	r3, [r3, #16]
 8005bc8:	68fa      	ldr	r2, [r7, #12]
 8005bca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005bce:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005bd2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	2200      	movs	r2, #0
 8005bd8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005be0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005be2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d105      	bne.n	8005bf4 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	699b      	ldr	r3, [r3, #24]
 8005bec:	f043 0210 	orr.w	r2, r3, #16
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	699a      	ldr	r2, [r3, #24]
 8005bf8:	4b0f      	ldr	r3, [pc, #60]	; (8005c38 <USB_DevInit+0x2c4>)
 8005bfa:	4313      	orrs	r3, r2
 8005bfc:	687a      	ldr	r2, [r7, #4]
 8005bfe:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005c00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d005      	beq.n	8005c12 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	699b      	ldr	r3, [r3, #24]
 8005c0a:	f043 0208 	orr.w	r2, r3, #8
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005c12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c14:	2b01      	cmp	r3, #1
 8005c16:	d107      	bne.n	8005c28 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	699b      	ldr	r3, [r3, #24]
 8005c1c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005c20:	f043 0304 	orr.w	r3, r3, #4
 8005c24:	687a      	ldr	r2, [r7, #4]
 8005c26:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005c28:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c2a:	4618      	mov	r0, r3
 8005c2c:	3718      	adds	r7, #24
 8005c2e:	46bd      	mov	sp, r7
 8005c30:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005c34:	b004      	add	sp, #16
 8005c36:	4770      	bx	lr
 8005c38:	803c3800 	.word	0x803c3800

08005c3c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005c3c:	b480      	push	{r7}
 8005c3e:	b085      	sub	sp, #20
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	6078      	str	r0, [r7, #4]
 8005c44:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005c46:	2300      	movs	r3, #0
 8005c48:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005c4a:	683b      	ldr	r3, [r7, #0]
 8005c4c:	019b      	lsls	r3, r3, #6
 8005c4e:	f043 0220 	orr.w	r2, r3, #32
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	3301      	adds	r3, #1
 8005c5a:	60fb      	str	r3, [r7, #12]
 8005c5c:	4a08      	ldr	r2, [pc, #32]	; (8005c80 <USB_FlushTxFifo+0x44>)
 8005c5e:	4293      	cmp	r3, r2
 8005c60:	d901      	bls.n	8005c66 <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 8005c62:	2303      	movs	r3, #3
 8005c64:	e006      	b.n	8005c74 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	691b      	ldr	r3, [r3, #16]
 8005c6a:	f003 0320 	and.w	r3, r3, #32
 8005c6e:	2b20      	cmp	r3, #32
 8005c70:	d0f1      	beq.n	8005c56 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8005c72:	2300      	movs	r3, #0
}
 8005c74:	4618      	mov	r0, r3
 8005c76:	3714      	adds	r7, #20
 8005c78:	46bd      	mov	sp, r7
 8005c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c7e:	4770      	bx	lr
 8005c80:	00030d40 	.word	0x00030d40

08005c84 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005c84:	b480      	push	{r7}
 8005c86:	b085      	sub	sp, #20
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005c8c:	2300      	movs	r3, #0
 8005c8e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	2210      	movs	r2, #16
 8005c94:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	3301      	adds	r3, #1
 8005c9a:	60fb      	str	r3, [r7, #12]
 8005c9c:	4a08      	ldr	r2, [pc, #32]	; (8005cc0 <USB_FlushRxFifo+0x3c>)
 8005c9e:	4293      	cmp	r3, r2
 8005ca0:	d901      	bls.n	8005ca6 <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 8005ca2:	2303      	movs	r3, #3
 8005ca4:	e006      	b.n	8005cb4 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	691b      	ldr	r3, [r3, #16]
 8005caa:	f003 0310 	and.w	r3, r3, #16
 8005cae:	2b10      	cmp	r3, #16
 8005cb0:	d0f1      	beq.n	8005c96 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8005cb2:	2300      	movs	r3, #0
}
 8005cb4:	4618      	mov	r0, r3
 8005cb6:	3714      	adds	r7, #20
 8005cb8:	46bd      	mov	sp, r7
 8005cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cbe:	4770      	bx	lr
 8005cc0:	00030d40 	.word	0x00030d40

08005cc4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005cc4:	b480      	push	{r7}
 8005cc6:	b085      	sub	sp, #20
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	6078      	str	r0, [r7, #4]
 8005ccc:	460b      	mov	r3, r1
 8005cce:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005cda:	681a      	ldr	r2, [r3, #0]
 8005cdc:	78fb      	ldrb	r3, [r7, #3]
 8005cde:	68f9      	ldr	r1, [r7, #12]
 8005ce0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005ce4:	4313      	orrs	r3, r2
 8005ce6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005ce8:	2300      	movs	r3, #0
}
 8005cea:	4618      	mov	r0, r3
 8005cec:	3714      	adds	r7, #20
 8005cee:	46bd      	mov	sp, r7
 8005cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf4:	4770      	bx	lr

08005cf6 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005cf6:	b480      	push	{r7}
 8005cf8:	b087      	sub	sp, #28
 8005cfa:	af00      	add	r7, sp, #0
 8005cfc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8005d02:	693b      	ldr	r3, [r7, #16]
 8005d04:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d08:	689b      	ldr	r3, [r3, #8]
 8005d0a:	f003 0306 	and.w	r3, r3, #6
 8005d0e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d102      	bne.n	8005d1c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8005d16:	2300      	movs	r3, #0
 8005d18:	75fb      	strb	r3, [r7, #23]
 8005d1a:	e00a      	b.n	8005d32 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	2b02      	cmp	r3, #2
 8005d20:	d002      	beq.n	8005d28 <USB_GetDevSpeed+0x32>
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	2b06      	cmp	r3, #6
 8005d26:	d102      	bne.n	8005d2e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005d28:	2302      	movs	r3, #2
 8005d2a:	75fb      	strb	r3, [r7, #23]
 8005d2c:	e001      	b.n	8005d32 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8005d2e:	230f      	movs	r3, #15
 8005d30:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8005d32:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d34:	4618      	mov	r0, r3
 8005d36:	371c      	adds	r7, #28
 8005d38:	46bd      	mov	sp, r7
 8005d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d3e:	4770      	bx	lr

08005d40 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005d40:	b480      	push	{r7}
 8005d42:	b085      	sub	sp, #20
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	6078      	str	r0, [r7, #4]
 8005d48:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005d4e:	683b      	ldr	r3, [r7, #0]
 8005d50:	781b      	ldrb	r3, [r3, #0]
 8005d52:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005d54:	683b      	ldr	r3, [r7, #0]
 8005d56:	785b      	ldrb	r3, [r3, #1]
 8005d58:	2b01      	cmp	r3, #1
 8005d5a:	d13a      	bne.n	8005dd2 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d62:	69da      	ldr	r2, [r3, #28]
 8005d64:	683b      	ldr	r3, [r7, #0]
 8005d66:	781b      	ldrb	r3, [r3, #0]
 8005d68:	f003 030f 	and.w	r3, r3, #15
 8005d6c:	2101      	movs	r1, #1
 8005d6e:	fa01 f303 	lsl.w	r3, r1, r3
 8005d72:	b29b      	uxth	r3, r3
 8005d74:	68f9      	ldr	r1, [r7, #12]
 8005d76:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005d7a:	4313      	orrs	r3, r2
 8005d7c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8005d7e:	68bb      	ldr	r3, [r7, #8]
 8005d80:	015a      	lsls	r2, r3, #5
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	4413      	add	r3, r2
 8005d86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d155      	bne.n	8005e40 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005d94:	68bb      	ldr	r3, [r7, #8]
 8005d96:	015a      	lsls	r2, r3, #5
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	4413      	add	r3, r2
 8005d9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005da0:	681a      	ldr	r2, [r3, #0]
 8005da2:	683b      	ldr	r3, [r7, #0]
 8005da4:	689b      	ldr	r3, [r3, #8]
 8005da6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005daa:	683b      	ldr	r3, [r7, #0]
 8005dac:	78db      	ldrb	r3, [r3, #3]
 8005dae:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005db0:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005db2:	68bb      	ldr	r3, [r7, #8]
 8005db4:	059b      	lsls	r3, r3, #22
 8005db6:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005db8:	4313      	orrs	r3, r2
 8005dba:	68ba      	ldr	r2, [r7, #8]
 8005dbc:	0151      	lsls	r1, r2, #5
 8005dbe:	68fa      	ldr	r2, [r7, #12]
 8005dc0:	440a      	add	r2, r1
 8005dc2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005dc6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005dca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005dce:	6013      	str	r3, [r2, #0]
 8005dd0:	e036      	b.n	8005e40 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005dd8:	69da      	ldr	r2, [r3, #28]
 8005dda:	683b      	ldr	r3, [r7, #0]
 8005ddc:	781b      	ldrb	r3, [r3, #0]
 8005dde:	f003 030f 	and.w	r3, r3, #15
 8005de2:	2101      	movs	r1, #1
 8005de4:	fa01 f303 	lsl.w	r3, r1, r3
 8005de8:	041b      	lsls	r3, r3, #16
 8005dea:	68f9      	ldr	r1, [r7, #12]
 8005dec:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005df0:	4313      	orrs	r3, r2
 8005df2:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005df4:	68bb      	ldr	r3, [r7, #8]
 8005df6:	015a      	lsls	r2, r3, #5
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	4413      	add	r3, r2
 8005dfc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d11a      	bne.n	8005e40 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005e0a:	68bb      	ldr	r3, [r7, #8]
 8005e0c:	015a      	lsls	r2, r3, #5
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	4413      	add	r3, r2
 8005e12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e16:	681a      	ldr	r2, [r3, #0]
 8005e18:	683b      	ldr	r3, [r7, #0]
 8005e1a:	689b      	ldr	r3, [r3, #8]
 8005e1c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005e20:	683b      	ldr	r3, [r7, #0]
 8005e22:	78db      	ldrb	r3, [r3, #3]
 8005e24:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005e26:	430b      	orrs	r3, r1
 8005e28:	4313      	orrs	r3, r2
 8005e2a:	68ba      	ldr	r2, [r7, #8]
 8005e2c:	0151      	lsls	r1, r2, #5
 8005e2e:	68fa      	ldr	r2, [r7, #12]
 8005e30:	440a      	add	r2, r1
 8005e32:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e36:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005e3a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e3e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005e40:	2300      	movs	r3, #0
}
 8005e42:	4618      	mov	r0, r3
 8005e44:	3714      	adds	r7, #20
 8005e46:	46bd      	mov	sp, r7
 8005e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4c:	4770      	bx	lr
	...

08005e50 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005e50:	b480      	push	{r7}
 8005e52:	b085      	sub	sp, #20
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	6078      	str	r0, [r7, #4]
 8005e58:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005e5e:	683b      	ldr	r3, [r7, #0]
 8005e60:	781b      	ldrb	r3, [r3, #0]
 8005e62:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005e64:	683b      	ldr	r3, [r7, #0]
 8005e66:	785b      	ldrb	r3, [r3, #1]
 8005e68:	2b01      	cmp	r3, #1
 8005e6a:	d161      	bne.n	8005f30 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005e6c:	68bb      	ldr	r3, [r7, #8]
 8005e6e:	015a      	lsls	r2, r3, #5
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	4413      	add	r3, r2
 8005e74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005e7e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005e82:	d11f      	bne.n	8005ec4 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005e84:	68bb      	ldr	r3, [r7, #8]
 8005e86:	015a      	lsls	r2, r3, #5
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	4413      	add	r3, r2
 8005e8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	68ba      	ldr	r2, [r7, #8]
 8005e94:	0151      	lsls	r1, r2, #5
 8005e96:	68fa      	ldr	r2, [r7, #12]
 8005e98:	440a      	add	r2, r1
 8005e9a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e9e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005ea2:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005ea4:	68bb      	ldr	r3, [r7, #8]
 8005ea6:	015a      	lsls	r2, r3, #5
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	4413      	add	r3, r2
 8005eac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	68ba      	ldr	r2, [r7, #8]
 8005eb4:	0151      	lsls	r1, r2, #5
 8005eb6:	68fa      	ldr	r2, [r7, #12]
 8005eb8:	440a      	add	r2, r1
 8005eba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ebe:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005ec2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005eca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005ecc:	683b      	ldr	r3, [r7, #0]
 8005ece:	781b      	ldrb	r3, [r3, #0]
 8005ed0:	f003 030f 	and.w	r3, r3, #15
 8005ed4:	2101      	movs	r1, #1
 8005ed6:	fa01 f303 	lsl.w	r3, r1, r3
 8005eda:	b29b      	uxth	r3, r3
 8005edc:	43db      	mvns	r3, r3
 8005ede:	68f9      	ldr	r1, [r7, #12]
 8005ee0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005ee4:	4013      	ands	r3, r2
 8005ee6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005eee:	69da      	ldr	r2, [r3, #28]
 8005ef0:	683b      	ldr	r3, [r7, #0]
 8005ef2:	781b      	ldrb	r3, [r3, #0]
 8005ef4:	f003 030f 	and.w	r3, r3, #15
 8005ef8:	2101      	movs	r1, #1
 8005efa:	fa01 f303 	lsl.w	r3, r1, r3
 8005efe:	b29b      	uxth	r3, r3
 8005f00:	43db      	mvns	r3, r3
 8005f02:	68f9      	ldr	r1, [r7, #12]
 8005f04:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005f08:	4013      	ands	r3, r2
 8005f0a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005f0c:	68bb      	ldr	r3, [r7, #8]
 8005f0e:	015a      	lsls	r2, r3, #5
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	4413      	add	r3, r2
 8005f14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f18:	681a      	ldr	r2, [r3, #0]
 8005f1a:	68bb      	ldr	r3, [r7, #8]
 8005f1c:	0159      	lsls	r1, r3, #5
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	440b      	add	r3, r1
 8005f22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f26:	4619      	mov	r1, r3
 8005f28:	4b35      	ldr	r3, [pc, #212]	; (8006000 <USB_DeactivateEndpoint+0x1b0>)
 8005f2a:	4013      	ands	r3, r2
 8005f2c:	600b      	str	r3, [r1, #0]
 8005f2e:	e060      	b.n	8005ff2 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005f30:	68bb      	ldr	r3, [r7, #8]
 8005f32:	015a      	lsls	r2, r3, #5
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	4413      	add	r3, r2
 8005f38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005f42:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005f46:	d11f      	bne.n	8005f88 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005f48:	68bb      	ldr	r3, [r7, #8]
 8005f4a:	015a      	lsls	r2, r3, #5
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	4413      	add	r3, r2
 8005f50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	68ba      	ldr	r2, [r7, #8]
 8005f58:	0151      	lsls	r1, r2, #5
 8005f5a:	68fa      	ldr	r2, [r7, #12]
 8005f5c:	440a      	add	r2, r1
 8005f5e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f62:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005f66:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005f68:	68bb      	ldr	r3, [r7, #8]
 8005f6a:	015a      	lsls	r2, r3, #5
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	4413      	add	r3, r2
 8005f70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	68ba      	ldr	r2, [r7, #8]
 8005f78:	0151      	lsls	r1, r2, #5
 8005f7a:	68fa      	ldr	r2, [r7, #12]
 8005f7c:	440a      	add	r2, r1
 8005f7e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f82:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005f86:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f8e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005f90:	683b      	ldr	r3, [r7, #0]
 8005f92:	781b      	ldrb	r3, [r3, #0]
 8005f94:	f003 030f 	and.w	r3, r3, #15
 8005f98:	2101      	movs	r1, #1
 8005f9a:	fa01 f303 	lsl.w	r3, r1, r3
 8005f9e:	041b      	lsls	r3, r3, #16
 8005fa0:	43db      	mvns	r3, r3
 8005fa2:	68f9      	ldr	r1, [r7, #12]
 8005fa4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005fa8:	4013      	ands	r3, r2
 8005faa:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005fb2:	69da      	ldr	r2, [r3, #28]
 8005fb4:	683b      	ldr	r3, [r7, #0]
 8005fb6:	781b      	ldrb	r3, [r3, #0]
 8005fb8:	f003 030f 	and.w	r3, r3, #15
 8005fbc:	2101      	movs	r1, #1
 8005fbe:	fa01 f303 	lsl.w	r3, r1, r3
 8005fc2:	041b      	lsls	r3, r3, #16
 8005fc4:	43db      	mvns	r3, r3
 8005fc6:	68f9      	ldr	r1, [r7, #12]
 8005fc8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005fcc:	4013      	ands	r3, r2
 8005fce:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005fd0:	68bb      	ldr	r3, [r7, #8]
 8005fd2:	015a      	lsls	r2, r3, #5
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	4413      	add	r3, r2
 8005fd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fdc:	681a      	ldr	r2, [r3, #0]
 8005fde:	68bb      	ldr	r3, [r7, #8]
 8005fe0:	0159      	lsls	r1, r3, #5
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	440b      	add	r3, r1
 8005fe6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fea:	4619      	mov	r1, r3
 8005fec:	4b05      	ldr	r3, [pc, #20]	; (8006004 <USB_DeactivateEndpoint+0x1b4>)
 8005fee:	4013      	ands	r3, r2
 8005ff0:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8005ff2:	2300      	movs	r3, #0
}
 8005ff4:	4618      	mov	r0, r3
 8005ff6:	3714      	adds	r7, #20
 8005ff8:	46bd      	mov	sp, r7
 8005ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ffe:	4770      	bx	lr
 8006000:	ec337800 	.word	0xec337800
 8006004:	eff37800 	.word	0xeff37800

08006008 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006008:	b580      	push	{r7, lr}
 800600a:	b08a      	sub	sp, #40	; 0x28
 800600c:	af02      	add	r7, sp, #8
 800600e:	60f8      	str	r0, [r7, #12]
 8006010:	60b9      	str	r1, [r7, #8]
 8006012:	4613      	mov	r3, r2
 8006014:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800601a:	68bb      	ldr	r3, [r7, #8]
 800601c:	781b      	ldrb	r3, [r3, #0]
 800601e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006020:	68bb      	ldr	r3, [r7, #8]
 8006022:	785b      	ldrb	r3, [r3, #1]
 8006024:	2b01      	cmp	r3, #1
 8006026:	f040 815c 	bne.w	80062e2 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800602a:	68bb      	ldr	r3, [r7, #8]
 800602c:	695b      	ldr	r3, [r3, #20]
 800602e:	2b00      	cmp	r3, #0
 8006030:	d132      	bne.n	8006098 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006032:	69bb      	ldr	r3, [r7, #24]
 8006034:	015a      	lsls	r2, r3, #5
 8006036:	69fb      	ldr	r3, [r7, #28]
 8006038:	4413      	add	r3, r2
 800603a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800603e:	691b      	ldr	r3, [r3, #16]
 8006040:	69ba      	ldr	r2, [r7, #24]
 8006042:	0151      	lsls	r1, r2, #5
 8006044:	69fa      	ldr	r2, [r7, #28]
 8006046:	440a      	add	r2, r1
 8006048:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800604c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006050:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006054:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006056:	69bb      	ldr	r3, [r7, #24]
 8006058:	015a      	lsls	r2, r3, #5
 800605a:	69fb      	ldr	r3, [r7, #28]
 800605c:	4413      	add	r3, r2
 800605e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006062:	691b      	ldr	r3, [r3, #16]
 8006064:	69ba      	ldr	r2, [r7, #24]
 8006066:	0151      	lsls	r1, r2, #5
 8006068:	69fa      	ldr	r2, [r7, #28]
 800606a:	440a      	add	r2, r1
 800606c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006070:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006074:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006076:	69bb      	ldr	r3, [r7, #24]
 8006078:	015a      	lsls	r2, r3, #5
 800607a:	69fb      	ldr	r3, [r7, #28]
 800607c:	4413      	add	r3, r2
 800607e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006082:	691b      	ldr	r3, [r3, #16]
 8006084:	69ba      	ldr	r2, [r7, #24]
 8006086:	0151      	lsls	r1, r2, #5
 8006088:	69fa      	ldr	r2, [r7, #28]
 800608a:	440a      	add	r2, r1
 800608c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006090:	0cdb      	lsrs	r3, r3, #19
 8006092:	04db      	lsls	r3, r3, #19
 8006094:	6113      	str	r3, [r2, #16]
 8006096:	e074      	b.n	8006182 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006098:	69bb      	ldr	r3, [r7, #24]
 800609a:	015a      	lsls	r2, r3, #5
 800609c:	69fb      	ldr	r3, [r7, #28]
 800609e:	4413      	add	r3, r2
 80060a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060a4:	691b      	ldr	r3, [r3, #16]
 80060a6:	69ba      	ldr	r2, [r7, #24]
 80060a8:	0151      	lsls	r1, r2, #5
 80060aa:	69fa      	ldr	r2, [r7, #28]
 80060ac:	440a      	add	r2, r1
 80060ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80060b2:	0cdb      	lsrs	r3, r3, #19
 80060b4:	04db      	lsls	r3, r3, #19
 80060b6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80060b8:	69bb      	ldr	r3, [r7, #24]
 80060ba:	015a      	lsls	r2, r3, #5
 80060bc:	69fb      	ldr	r3, [r7, #28]
 80060be:	4413      	add	r3, r2
 80060c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060c4:	691b      	ldr	r3, [r3, #16]
 80060c6:	69ba      	ldr	r2, [r7, #24]
 80060c8:	0151      	lsls	r1, r2, #5
 80060ca:	69fa      	ldr	r2, [r7, #28]
 80060cc:	440a      	add	r2, r1
 80060ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80060d2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80060d6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80060da:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80060dc:	69bb      	ldr	r3, [r7, #24]
 80060de:	015a      	lsls	r2, r3, #5
 80060e0:	69fb      	ldr	r3, [r7, #28]
 80060e2:	4413      	add	r3, r2
 80060e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060e8:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80060ea:	68bb      	ldr	r3, [r7, #8]
 80060ec:	6959      	ldr	r1, [r3, #20]
 80060ee:	68bb      	ldr	r3, [r7, #8]
 80060f0:	689b      	ldr	r3, [r3, #8]
 80060f2:	440b      	add	r3, r1
 80060f4:	1e59      	subs	r1, r3, #1
 80060f6:	68bb      	ldr	r3, [r7, #8]
 80060f8:	689b      	ldr	r3, [r3, #8]
 80060fa:	fbb1 f3f3 	udiv	r3, r1, r3
 80060fe:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8006100:	4b9d      	ldr	r3, [pc, #628]	; (8006378 <USB_EPStartXfer+0x370>)
 8006102:	400b      	ands	r3, r1
 8006104:	69b9      	ldr	r1, [r7, #24]
 8006106:	0148      	lsls	r0, r1, #5
 8006108:	69f9      	ldr	r1, [r7, #28]
 800610a:	4401      	add	r1, r0
 800610c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006110:	4313      	orrs	r3, r2
 8006112:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006114:	69bb      	ldr	r3, [r7, #24]
 8006116:	015a      	lsls	r2, r3, #5
 8006118:	69fb      	ldr	r3, [r7, #28]
 800611a:	4413      	add	r3, r2
 800611c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006120:	691a      	ldr	r2, [r3, #16]
 8006122:	68bb      	ldr	r3, [r7, #8]
 8006124:	695b      	ldr	r3, [r3, #20]
 8006126:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800612a:	69b9      	ldr	r1, [r7, #24]
 800612c:	0148      	lsls	r0, r1, #5
 800612e:	69f9      	ldr	r1, [r7, #28]
 8006130:	4401      	add	r1, r0
 8006132:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006136:	4313      	orrs	r3, r2
 8006138:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800613a:	68bb      	ldr	r3, [r7, #8]
 800613c:	78db      	ldrb	r3, [r3, #3]
 800613e:	2b01      	cmp	r3, #1
 8006140:	d11f      	bne.n	8006182 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8006142:	69bb      	ldr	r3, [r7, #24]
 8006144:	015a      	lsls	r2, r3, #5
 8006146:	69fb      	ldr	r3, [r7, #28]
 8006148:	4413      	add	r3, r2
 800614a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800614e:	691b      	ldr	r3, [r3, #16]
 8006150:	69ba      	ldr	r2, [r7, #24]
 8006152:	0151      	lsls	r1, r2, #5
 8006154:	69fa      	ldr	r2, [r7, #28]
 8006156:	440a      	add	r2, r1
 8006158:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800615c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8006160:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8006162:	69bb      	ldr	r3, [r7, #24]
 8006164:	015a      	lsls	r2, r3, #5
 8006166:	69fb      	ldr	r3, [r7, #28]
 8006168:	4413      	add	r3, r2
 800616a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800616e:	691b      	ldr	r3, [r3, #16]
 8006170:	69ba      	ldr	r2, [r7, #24]
 8006172:	0151      	lsls	r1, r2, #5
 8006174:	69fa      	ldr	r2, [r7, #28]
 8006176:	440a      	add	r2, r1
 8006178:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800617c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006180:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8006182:	79fb      	ldrb	r3, [r7, #7]
 8006184:	2b01      	cmp	r3, #1
 8006186:	d14b      	bne.n	8006220 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006188:	68bb      	ldr	r3, [r7, #8]
 800618a:	691b      	ldr	r3, [r3, #16]
 800618c:	2b00      	cmp	r3, #0
 800618e:	d009      	beq.n	80061a4 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006190:	69bb      	ldr	r3, [r7, #24]
 8006192:	015a      	lsls	r2, r3, #5
 8006194:	69fb      	ldr	r3, [r7, #28]
 8006196:	4413      	add	r3, r2
 8006198:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800619c:	461a      	mov	r2, r3
 800619e:	68bb      	ldr	r3, [r7, #8]
 80061a0:	691b      	ldr	r3, [r3, #16]
 80061a2:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80061a4:	68bb      	ldr	r3, [r7, #8]
 80061a6:	78db      	ldrb	r3, [r3, #3]
 80061a8:	2b01      	cmp	r3, #1
 80061aa:	d128      	bne.n	80061fe <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80061ac:	69fb      	ldr	r3, [r7, #28]
 80061ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061b2:	689b      	ldr	r3, [r3, #8]
 80061b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d110      	bne.n	80061de <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80061bc:	69bb      	ldr	r3, [r7, #24]
 80061be:	015a      	lsls	r2, r3, #5
 80061c0:	69fb      	ldr	r3, [r7, #28]
 80061c2:	4413      	add	r3, r2
 80061c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	69ba      	ldr	r2, [r7, #24]
 80061cc:	0151      	lsls	r1, r2, #5
 80061ce:	69fa      	ldr	r2, [r7, #28]
 80061d0:	440a      	add	r2, r1
 80061d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80061d6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80061da:	6013      	str	r3, [r2, #0]
 80061dc:	e00f      	b.n	80061fe <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80061de:	69bb      	ldr	r3, [r7, #24]
 80061e0:	015a      	lsls	r2, r3, #5
 80061e2:	69fb      	ldr	r3, [r7, #28]
 80061e4:	4413      	add	r3, r2
 80061e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	69ba      	ldr	r2, [r7, #24]
 80061ee:	0151      	lsls	r1, r2, #5
 80061f0:	69fa      	ldr	r2, [r7, #28]
 80061f2:	440a      	add	r2, r1
 80061f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80061f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80061fc:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80061fe:	69bb      	ldr	r3, [r7, #24]
 8006200:	015a      	lsls	r2, r3, #5
 8006202:	69fb      	ldr	r3, [r7, #28]
 8006204:	4413      	add	r3, r2
 8006206:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	69ba      	ldr	r2, [r7, #24]
 800620e:	0151      	lsls	r1, r2, #5
 8006210:	69fa      	ldr	r2, [r7, #28]
 8006212:	440a      	add	r2, r1
 8006214:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006218:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800621c:	6013      	str	r3, [r2, #0]
 800621e:	e12f      	b.n	8006480 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006220:	69bb      	ldr	r3, [r7, #24]
 8006222:	015a      	lsls	r2, r3, #5
 8006224:	69fb      	ldr	r3, [r7, #28]
 8006226:	4413      	add	r3, r2
 8006228:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	69ba      	ldr	r2, [r7, #24]
 8006230:	0151      	lsls	r1, r2, #5
 8006232:	69fa      	ldr	r2, [r7, #28]
 8006234:	440a      	add	r2, r1
 8006236:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800623a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800623e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006240:	68bb      	ldr	r3, [r7, #8]
 8006242:	78db      	ldrb	r3, [r3, #3]
 8006244:	2b01      	cmp	r3, #1
 8006246:	d015      	beq.n	8006274 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8006248:	68bb      	ldr	r3, [r7, #8]
 800624a:	695b      	ldr	r3, [r3, #20]
 800624c:	2b00      	cmp	r3, #0
 800624e:	f000 8117 	beq.w	8006480 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006252:	69fb      	ldr	r3, [r7, #28]
 8006254:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006258:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800625a:	68bb      	ldr	r3, [r7, #8]
 800625c:	781b      	ldrb	r3, [r3, #0]
 800625e:	f003 030f 	and.w	r3, r3, #15
 8006262:	2101      	movs	r1, #1
 8006264:	fa01 f303 	lsl.w	r3, r1, r3
 8006268:	69f9      	ldr	r1, [r7, #28]
 800626a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800626e:	4313      	orrs	r3, r2
 8006270:	634b      	str	r3, [r1, #52]	; 0x34
 8006272:	e105      	b.n	8006480 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006274:	69fb      	ldr	r3, [r7, #28]
 8006276:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800627a:	689b      	ldr	r3, [r3, #8]
 800627c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006280:	2b00      	cmp	r3, #0
 8006282:	d110      	bne.n	80062a6 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006284:	69bb      	ldr	r3, [r7, #24]
 8006286:	015a      	lsls	r2, r3, #5
 8006288:	69fb      	ldr	r3, [r7, #28]
 800628a:	4413      	add	r3, r2
 800628c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	69ba      	ldr	r2, [r7, #24]
 8006294:	0151      	lsls	r1, r2, #5
 8006296:	69fa      	ldr	r2, [r7, #28]
 8006298:	440a      	add	r2, r1
 800629a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800629e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80062a2:	6013      	str	r3, [r2, #0]
 80062a4:	e00f      	b.n	80062c6 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80062a6:	69bb      	ldr	r3, [r7, #24]
 80062a8:	015a      	lsls	r2, r3, #5
 80062aa:	69fb      	ldr	r3, [r7, #28]
 80062ac:	4413      	add	r3, r2
 80062ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	69ba      	ldr	r2, [r7, #24]
 80062b6:	0151      	lsls	r1, r2, #5
 80062b8:	69fa      	ldr	r2, [r7, #28]
 80062ba:	440a      	add	r2, r1
 80062bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80062c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80062c4:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80062c6:	68bb      	ldr	r3, [r7, #8]
 80062c8:	68d9      	ldr	r1, [r3, #12]
 80062ca:	68bb      	ldr	r3, [r7, #8]
 80062cc:	781a      	ldrb	r2, [r3, #0]
 80062ce:	68bb      	ldr	r3, [r7, #8]
 80062d0:	695b      	ldr	r3, [r3, #20]
 80062d2:	b298      	uxth	r0, r3
 80062d4:	79fb      	ldrb	r3, [r7, #7]
 80062d6:	9300      	str	r3, [sp, #0]
 80062d8:	4603      	mov	r3, r0
 80062da:	68f8      	ldr	r0, [r7, #12]
 80062dc:	f000 fa2b 	bl	8006736 <USB_WritePacket>
 80062e0:	e0ce      	b.n	8006480 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80062e2:	69bb      	ldr	r3, [r7, #24]
 80062e4:	015a      	lsls	r2, r3, #5
 80062e6:	69fb      	ldr	r3, [r7, #28]
 80062e8:	4413      	add	r3, r2
 80062ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062ee:	691b      	ldr	r3, [r3, #16]
 80062f0:	69ba      	ldr	r2, [r7, #24]
 80062f2:	0151      	lsls	r1, r2, #5
 80062f4:	69fa      	ldr	r2, [r7, #28]
 80062f6:	440a      	add	r2, r1
 80062f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80062fc:	0cdb      	lsrs	r3, r3, #19
 80062fe:	04db      	lsls	r3, r3, #19
 8006300:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006302:	69bb      	ldr	r3, [r7, #24]
 8006304:	015a      	lsls	r2, r3, #5
 8006306:	69fb      	ldr	r3, [r7, #28]
 8006308:	4413      	add	r3, r2
 800630a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800630e:	691b      	ldr	r3, [r3, #16]
 8006310:	69ba      	ldr	r2, [r7, #24]
 8006312:	0151      	lsls	r1, r2, #5
 8006314:	69fa      	ldr	r2, [r7, #28]
 8006316:	440a      	add	r2, r1
 8006318:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800631c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006320:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006324:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8006326:	68bb      	ldr	r3, [r7, #8]
 8006328:	695b      	ldr	r3, [r3, #20]
 800632a:	2b00      	cmp	r3, #0
 800632c:	d126      	bne.n	800637c <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800632e:	69bb      	ldr	r3, [r7, #24]
 8006330:	015a      	lsls	r2, r3, #5
 8006332:	69fb      	ldr	r3, [r7, #28]
 8006334:	4413      	add	r3, r2
 8006336:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800633a:	691a      	ldr	r2, [r3, #16]
 800633c:	68bb      	ldr	r3, [r7, #8]
 800633e:	689b      	ldr	r3, [r3, #8]
 8006340:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006344:	69b9      	ldr	r1, [r7, #24]
 8006346:	0148      	lsls	r0, r1, #5
 8006348:	69f9      	ldr	r1, [r7, #28]
 800634a:	4401      	add	r1, r0
 800634c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006350:	4313      	orrs	r3, r2
 8006352:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006354:	69bb      	ldr	r3, [r7, #24]
 8006356:	015a      	lsls	r2, r3, #5
 8006358:	69fb      	ldr	r3, [r7, #28]
 800635a:	4413      	add	r3, r2
 800635c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006360:	691b      	ldr	r3, [r3, #16]
 8006362:	69ba      	ldr	r2, [r7, #24]
 8006364:	0151      	lsls	r1, r2, #5
 8006366:	69fa      	ldr	r2, [r7, #28]
 8006368:	440a      	add	r2, r1
 800636a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800636e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006372:	6113      	str	r3, [r2, #16]
 8006374:	e036      	b.n	80063e4 <USB_EPStartXfer+0x3dc>
 8006376:	bf00      	nop
 8006378:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800637c:	68bb      	ldr	r3, [r7, #8]
 800637e:	695a      	ldr	r2, [r3, #20]
 8006380:	68bb      	ldr	r3, [r7, #8]
 8006382:	689b      	ldr	r3, [r3, #8]
 8006384:	4413      	add	r3, r2
 8006386:	1e5a      	subs	r2, r3, #1
 8006388:	68bb      	ldr	r3, [r7, #8]
 800638a:	689b      	ldr	r3, [r3, #8]
 800638c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006390:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8006392:	69bb      	ldr	r3, [r7, #24]
 8006394:	015a      	lsls	r2, r3, #5
 8006396:	69fb      	ldr	r3, [r7, #28]
 8006398:	4413      	add	r3, r2
 800639a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800639e:	691a      	ldr	r2, [r3, #16]
 80063a0:	8afb      	ldrh	r3, [r7, #22]
 80063a2:	04d9      	lsls	r1, r3, #19
 80063a4:	4b39      	ldr	r3, [pc, #228]	; (800648c <USB_EPStartXfer+0x484>)
 80063a6:	400b      	ands	r3, r1
 80063a8:	69b9      	ldr	r1, [r7, #24]
 80063aa:	0148      	lsls	r0, r1, #5
 80063ac:	69f9      	ldr	r1, [r7, #28]
 80063ae:	4401      	add	r1, r0
 80063b0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80063b4:	4313      	orrs	r3, r2
 80063b6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 80063b8:	69bb      	ldr	r3, [r7, #24]
 80063ba:	015a      	lsls	r2, r3, #5
 80063bc:	69fb      	ldr	r3, [r7, #28]
 80063be:	4413      	add	r3, r2
 80063c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063c4:	691a      	ldr	r2, [r3, #16]
 80063c6:	68bb      	ldr	r3, [r7, #8]
 80063c8:	689b      	ldr	r3, [r3, #8]
 80063ca:	8af9      	ldrh	r1, [r7, #22]
 80063cc:	fb01 f303 	mul.w	r3, r1, r3
 80063d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80063d4:	69b9      	ldr	r1, [r7, #24]
 80063d6:	0148      	lsls	r0, r1, #5
 80063d8:	69f9      	ldr	r1, [r7, #28]
 80063da:	4401      	add	r1, r0
 80063dc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80063e0:	4313      	orrs	r3, r2
 80063e2:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80063e4:	79fb      	ldrb	r3, [r7, #7]
 80063e6:	2b01      	cmp	r3, #1
 80063e8:	d10d      	bne.n	8006406 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80063ea:	68bb      	ldr	r3, [r7, #8]
 80063ec:	68db      	ldr	r3, [r3, #12]
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d009      	beq.n	8006406 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80063f2:	68bb      	ldr	r3, [r7, #8]
 80063f4:	68d9      	ldr	r1, [r3, #12]
 80063f6:	69bb      	ldr	r3, [r7, #24]
 80063f8:	015a      	lsls	r2, r3, #5
 80063fa:	69fb      	ldr	r3, [r7, #28]
 80063fc:	4413      	add	r3, r2
 80063fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006402:	460a      	mov	r2, r1
 8006404:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8006406:	68bb      	ldr	r3, [r7, #8]
 8006408:	78db      	ldrb	r3, [r3, #3]
 800640a:	2b01      	cmp	r3, #1
 800640c:	d128      	bne.n	8006460 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800640e:	69fb      	ldr	r3, [r7, #28]
 8006410:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006414:	689b      	ldr	r3, [r3, #8]
 8006416:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800641a:	2b00      	cmp	r3, #0
 800641c:	d110      	bne.n	8006440 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800641e:	69bb      	ldr	r3, [r7, #24]
 8006420:	015a      	lsls	r2, r3, #5
 8006422:	69fb      	ldr	r3, [r7, #28]
 8006424:	4413      	add	r3, r2
 8006426:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	69ba      	ldr	r2, [r7, #24]
 800642e:	0151      	lsls	r1, r2, #5
 8006430:	69fa      	ldr	r2, [r7, #28]
 8006432:	440a      	add	r2, r1
 8006434:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006438:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800643c:	6013      	str	r3, [r2, #0]
 800643e:	e00f      	b.n	8006460 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8006440:	69bb      	ldr	r3, [r7, #24]
 8006442:	015a      	lsls	r2, r3, #5
 8006444:	69fb      	ldr	r3, [r7, #28]
 8006446:	4413      	add	r3, r2
 8006448:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	69ba      	ldr	r2, [r7, #24]
 8006450:	0151      	lsls	r1, r2, #5
 8006452:	69fa      	ldr	r2, [r7, #28]
 8006454:	440a      	add	r2, r1
 8006456:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800645a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800645e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006460:	69bb      	ldr	r3, [r7, #24]
 8006462:	015a      	lsls	r2, r3, #5
 8006464:	69fb      	ldr	r3, [r7, #28]
 8006466:	4413      	add	r3, r2
 8006468:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	69ba      	ldr	r2, [r7, #24]
 8006470:	0151      	lsls	r1, r2, #5
 8006472:	69fa      	ldr	r2, [r7, #28]
 8006474:	440a      	add	r2, r1
 8006476:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800647a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800647e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006480:	2300      	movs	r3, #0
}
 8006482:	4618      	mov	r0, r3
 8006484:	3720      	adds	r7, #32
 8006486:	46bd      	mov	sp, r7
 8006488:	bd80      	pop	{r7, pc}
 800648a:	bf00      	nop
 800648c:	1ff80000 	.word	0x1ff80000

08006490 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006490:	b480      	push	{r7}
 8006492:	b087      	sub	sp, #28
 8006494:	af00      	add	r7, sp, #0
 8006496:	60f8      	str	r0, [r7, #12]
 8006498:	60b9      	str	r1, [r7, #8]
 800649a:	4613      	mov	r3, r2
 800649c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80064a2:	68bb      	ldr	r3, [r7, #8]
 80064a4:	781b      	ldrb	r3, [r3, #0]
 80064a6:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80064a8:	68bb      	ldr	r3, [r7, #8]
 80064aa:	785b      	ldrb	r3, [r3, #1]
 80064ac:	2b01      	cmp	r3, #1
 80064ae:	f040 80cd 	bne.w	800664c <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80064b2:	68bb      	ldr	r3, [r7, #8]
 80064b4:	695b      	ldr	r3, [r3, #20]
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d132      	bne.n	8006520 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80064ba:	693b      	ldr	r3, [r7, #16]
 80064bc:	015a      	lsls	r2, r3, #5
 80064be:	697b      	ldr	r3, [r7, #20]
 80064c0:	4413      	add	r3, r2
 80064c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064c6:	691b      	ldr	r3, [r3, #16]
 80064c8:	693a      	ldr	r2, [r7, #16]
 80064ca:	0151      	lsls	r1, r2, #5
 80064cc:	697a      	ldr	r2, [r7, #20]
 80064ce:	440a      	add	r2, r1
 80064d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80064d4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80064d8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80064dc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80064de:	693b      	ldr	r3, [r7, #16]
 80064e0:	015a      	lsls	r2, r3, #5
 80064e2:	697b      	ldr	r3, [r7, #20]
 80064e4:	4413      	add	r3, r2
 80064e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064ea:	691b      	ldr	r3, [r3, #16]
 80064ec:	693a      	ldr	r2, [r7, #16]
 80064ee:	0151      	lsls	r1, r2, #5
 80064f0:	697a      	ldr	r2, [r7, #20]
 80064f2:	440a      	add	r2, r1
 80064f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80064f8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80064fc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80064fe:	693b      	ldr	r3, [r7, #16]
 8006500:	015a      	lsls	r2, r3, #5
 8006502:	697b      	ldr	r3, [r7, #20]
 8006504:	4413      	add	r3, r2
 8006506:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800650a:	691b      	ldr	r3, [r3, #16]
 800650c:	693a      	ldr	r2, [r7, #16]
 800650e:	0151      	lsls	r1, r2, #5
 8006510:	697a      	ldr	r2, [r7, #20]
 8006512:	440a      	add	r2, r1
 8006514:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006518:	0cdb      	lsrs	r3, r3, #19
 800651a:	04db      	lsls	r3, r3, #19
 800651c:	6113      	str	r3, [r2, #16]
 800651e:	e04e      	b.n	80065be <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006520:	693b      	ldr	r3, [r7, #16]
 8006522:	015a      	lsls	r2, r3, #5
 8006524:	697b      	ldr	r3, [r7, #20]
 8006526:	4413      	add	r3, r2
 8006528:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800652c:	691b      	ldr	r3, [r3, #16]
 800652e:	693a      	ldr	r2, [r7, #16]
 8006530:	0151      	lsls	r1, r2, #5
 8006532:	697a      	ldr	r2, [r7, #20]
 8006534:	440a      	add	r2, r1
 8006536:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800653a:	0cdb      	lsrs	r3, r3, #19
 800653c:	04db      	lsls	r3, r3, #19
 800653e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006540:	693b      	ldr	r3, [r7, #16]
 8006542:	015a      	lsls	r2, r3, #5
 8006544:	697b      	ldr	r3, [r7, #20]
 8006546:	4413      	add	r3, r2
 8006548:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800654c:	691b      	ldr	r3, [r3, #16]
 800654e:	693a      	ldr	r2, [r7, #16]
 8006550:	0151      	lsls	r1, r2, #5
 8006552:	697a      	ldr	r2, [r7, #20]
 8006554:	440a      	add	r2, r1
 8006556:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800655a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800655e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006562:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8006564:	68bb      	ldr	r3, [r7, #8]
 8006566:	695a      	ldr	r2, [r3, #20]
 8006568:	68bb      	ldr	r3, [r7, #8]
 800656a:	689b      	ldr	r3, [r3, #8]
 800656c:	429a      	cmp	r2, r3
 800656e:	d903      	bls.n	8006578 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8006570:	68bb      	ldr	r3, [r7, #8]
 8006572:	689a      	ldr	r2, [r3, #8]
 8006574:	68bb      	ldr	r3, [r7, #8]
 8006576:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006578:	693b      	ldr	r3, [r7, #16]
 800657a:	015a      	lsls	r2, r3, #5
 800657c:	697b      	ldr	r3, [r7, #20]
 800657e:	4413      	add	r3, r2
 8006580:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006584:	691b      	ldr	r3, [r3, #16]
 8006586:	693a      	ldr	r2, [r7, #16]
 8006588:	0151      	lsls	r1, r2, #5
 800658a:	697a      	ldr	r2, [r7, #20]
 800658c:	440a      	add	r2, r1
 800658e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006592:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006596:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006598:	693b      	ldr	r3, [r7, #16]
 800659a:	015a      	lsls	r2, r3, #5
 800659c:	697b      	ldr	r3, [r7, #20]
 800659e:	4413      	add	r3, r2
 80065a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065a4:	691a      	ldr	r2, [r3, #16]
 80065a6:	68bb      	ldr	r3, [r7, #8]
 80065a8:	695b      	ldr	r3, [r3, #20]
 80065aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80065ae:	6939      	ldr	r1, [r7, #16]
 80065b0:	0148      	lsls	r0, r1, #5
 80065b2:	6979      	ldr	r1, [r7, #20]
 80065b4:	4401      	add	r1, r0
 80065b6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80065ba:	4313      	orrs	r3, r2
 80065bc:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80065be:	79fb      	ldrb	r3, [r7, #7]
 80065c0:	2b01      	cmp	r3, #1
 80065c2:	d11e      	bne.n	8006602 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80065c4:	68bb      	ldr	r3, [r7, #8]
 80065c6:	691b      	ldr	r3, [r3, #16]
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d009      	beq.n	80065e0 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80065cc:	693b      	ldr	r3, [r7, #16]
 80065ce:	015a      	lsls	r2, r3, #5
 80065d0:	697b      	ldr	r3, [r7, #20]
 80065d2:	4413      	add	r3, r2
 80065d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065d8:	461a      	mov	r2, r3
 80065da:	68bb      	ldr	r3, [r7, #8]
 80065dc:	691b      	ldr	r3, [r3, #16]
 80065de:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80065e0:	693b      	ldr	r3, [r7, #16]
 80065e2:	015a      	lsls	r2, r3, #5
 80065e4:	697b      	ldr	r3, [r7, #20]
 80065e6:	4413      	add	r3, r2
 80065e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	693a      	ldr	r2, [r7, #16]
 80065f0:	0151      	lsls	r1, r2, #5
 80065f2:	697a      	ldr	r2, [r7, #20]
 80065f4:	440a      	add	r2, r1
 80065f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80065fa:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80065fe:	6013      	str	r3, [r2, #0]
 8006600:	e092      	b.n	8006728 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006602:	693b      	ldr	r3, [r7, #16]
 8006604:	015a      	lsls	r2, r3, #5
 8006606:	697b      	ldr	r3, [r7, #20]
 8006608:	4413      	add	r3, r2
 800660a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	693a      	ldr	r2, [r7, #16]
 8006612:	0151      	lsls	r1, r2, #5
 8006614:	697a      	ldr	r2, [r7, #20]
 8006616:	440a      	add	r2, r1
 8006618:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800661c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006620:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8006622:	68bb      	ldr	r3, [r7, #8]
 8006624:	695b      	ldr	r3, [r3, #20]
 8006626:	2b00      	cmp	r3, #0
 8006628:	d07e      	beq.n	8006728 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800662a:	697b      	ldr	r3, [r7, #20]
 800662c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006630:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006632:	68bb      	ldr	r3, [r7, #8]
 8006634:	781b      	ldrb	r3, [r3, #0]
 8006636:	f003 030f 	and.w	r3, r3, #15
 800663a:	2101      	movs	r1, #1
 800663c:	fa01 f303 	lsl.w	r3, r1, r3
 8006640:	6979      	ldr	r1, [r7, #20]
 8006642:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006646:	4313      	orrs	r3, r2
 8006648:	634b      	str	r3, [r1, #52]	; 0x34
 800664a:	e06d      	b.n	8006728 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800664c:	693b      	ldr	r3, [r7, #16]
 800664e:	015a      	lsls	r2, r3, #5
 8006650:	697b      	ldr	r3, [r7, #20]
 8006652:	4413      	add	r3, r2
 8006654:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006658:	691b      	ldr	r3, [r3, #16]
 800665a:	693a      	ldr	r2, [r7, #16]
 800665c:	0151      	lsls	r1, r2, #5
 800665e:	697a      	ldr	r2, [r7, #20]
 8006660:	440a      	add	r2, r1
 8006662:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006666:	0cdb      	lsrs	r3, r3, #19
 8006668:	04db      	lsls	r3, r3, #19
 800666a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800666c:	693b      	ldr	r3, [r7, #16]
 800666e:	015a      	lsls	r2, r3, #5
 8006670:	697b      	ldr	r3, [r7, #20]
 8006672:	4413      	add	r3, r2
 8006674:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006678:	691b      	ldr	r3, [r3, #16]
 800667a:	693a      	ldr	r2, [r7, #16]
 800667c:	0151      	lsls	r1, r2, #5
 800667e:	697a      	ldr	r2, [r7, #20]
 8006680:	440a      	add	r2, r1
 8006682:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006686:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800668a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800668e:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8006690:	68bb      	ldr	r3, [r7, #8]
 8006692:	695b      	ldr	r3, [r3, #20]
 8006694:	2b00      	cmp	r3, #0
 8006696:	d003      	beq.n	80066a0 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8006698:	68bb      	ldr	r3, [r7, #8]
 800669a:	689a      	ldr	r2, [r3, #8]
 800669c:	68bb      	ldr	r3, [r7, #8]
 800669e:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80066a0:	693b      	ldr	r3, [r7, #16]
 80066a2:	015a      	lsls	r2, r3, #5
 80066a4:	697b      	ldr	r3, [r7, #20]
 80066a6:	4413      	add	r3, r2
 80066a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066ac:	691b      	ldr	r3, [r3, #16]
 80066ae:	693a      	ldr	r2, [r7, #16]
 80066b0:	0151      	lsls	r1, r2, #5
 80066b2:	697a      	ldr	r2, [r7, #20]
 80066b4:	440a      	add	r2, r1
 80066b6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80066ba:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80066be:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 80066c0:	693b      	ldr	r3, [r7, #16]
 80066c2:	015a      	lsls	r2, r3, #5
 80066c4:	697b      	ldr	r3, [r7, #20]
 80066c6:	4413      	add	r3, r2
 80066c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066cc:	691a      	ldr	r2, [r3, #16]
 80066ce:	68bb      	ldr	r3, [r7, #8]
 80066d0:	689b      	ldr	r3, [r3, #8]
 80066d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80066d6:	6939      	ldr	r1, [r7, #16]
 80066d8:	0148      	lsls	r0, r1, #5
 80066da:	6979      	ldr	r1, [r7, #20]
 80066dc:	4401      	add	r1, r0
 80066de:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80066e2:	4313      	orrs	r3, r2
 80066e4:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80066e6:	79fb      	ldrb	r3, [r7, #7]
 80066e8:	2b01      	cmp	r3, #1
 80066ea:	d10d      	bne.n	8006708 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80066ec:	68bb      	ldr	r3, [r7, #8]
 80066ee:	68db      	ldr	r3, [r3, #12]
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d009      	beq.n	8006708 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80066f4:	68bb      	ldr	r3, [r7, #8]
 80066f6:	68d9      	ldr	r1, [r3, #12]
 80066f8:	693b      	ldr	r3, [r7, #16]
 80066fa:	015a      	lsls	r2, r3, #5
 80066fc:	697b      	ldr	r3, [r7, #20]
 80066fe:	4413      	add	r3, r2
 8006700:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006704:	460a      	mov	r2, r1
 8006706:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006708:	693b      	ldr	r3, [r7, #16]
 800670a:	015a      	lsls	r2, r3, #5
 800670c:	697b      	ldr	r3, [r7, #20]
 800670e:	4413      	add	r3, r2
 8006710:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	693a      	ldr	r2, [r7, #16]
 8006718:	0151      	lsls	r1, r2, #5
 800671a:	697a      	ldr	r2, [r7, #20]
 800671c:	440a      	add	r2, r1
 800671e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006722:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006726:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006728:	2300      	movs	r3, #0
}
 800672a:	4618      	mov	r0, r3
 800672c:	371c      	adds	r7, #28
 800672e:	46bd      	mov	sp, r7
 8006730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006734:	4770      	bx	lr

08006736 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006736:	b480      	push	{r7}
 8006738:	b089      	sub	sp, #36	; 0x24
 800673a:	af00      	add	r7, sp, #0
 800673c:	60f8      	str	r0, [r7, #12]
 800673e:	60b9      	str	r1, [r7, #8]
 8006740:	4611      	mov	r1, r2
 8006742:	461a      	mov	r2, r3
 8006744:	460b      	mov	r3, r1
 8006746:	71fb      	strb	r3, [r7, #7]
 8006748:	4613      	mov	r3, r2
 800674a:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8006750:	68bb      	ldr	r3, [r7, #8]
 8006752:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8006754:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006758:	2b00      	cmp	r3, #0
 800675a:	d123      	bne.n	80067a4 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800675c:	88bb      	ldrh	r3, [r7, #4]
 800675e:	3303      	adds	r3, #3
 8006760:	089b      	lsrs	r3, r3, #2
 8006762:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006764:	2300      	movs	r3, #0
 8006766:	61bb      	str	r3, [r7, #24]
 8006768:	e018      	b.n	800679c <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800676a:	79fb      	ldrb	r3, [r7, #7]
 800676c:	031a      	lsls	r2, r3, #12
 800676e:	697b      	ldr	r3, [r7, #20]
 8006770:	4413      	add	r3, r2
 8006772:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006776:	461a      	mov	r2, r3
 8006778:	69fb      	ldr	r3, [r7, #28]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	6013      	str	r3, [r2, #0]
      pSrc++;
 800677e:	69fb      	ldr	r3, [r7, #28]
 8006780:	3301      	adds	r3, #1
 8006782:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006784:	69fb      	ldr	r3, [r7, #28]
 8006786:	3301      	adds	r3, #1
 8006788:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800678a:	69fb      	ldr	r3, [r7, #28]
 800678c:	3301      	adds	r3, #1
 800678e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006790:	69fb      	ldr	r3, [r7, #28]
 8006792:	3301      	adds	r3, #1
 8006794:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006796:	69bb      	ldr	r3, [r7, #24]
 8006798:	3301      	adds	r3, #1
 800679a:	61bb      	str	r3, [r7, #24]
 800679c:	69ba      	ldr	r2, [r7, #24]
 800679e:	693b      	ldr	r3, [r7, #16]
 80067a0:	429a      	cmp	r2, r3
 80067a2:	d3e2      	bcc.n	800676a <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80067a4:	2300      	movs	r3, #0
}
 80067a6:	4618      	mov	r0, r3
 80067a8:	3724      	adds	r7, #36	; 0x24
 80067aa:	46bd      	mov	sp, r7
 80067ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b0:	4770      	bx	lr

080067b2 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80067b2:	b480      	push	{r7}
 80067b4:	b08b      	sub	sp, #44	; 0x2c
 80067b6:	af00      	add	r7, sp, #0
 80067b8:	60f8      	str	r0, [r7, #12]
 80067ba:	60b9      	str	r1, [r7, #8]
 80067bc:	4613      	mov	r3, r2
 80067be:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80067c4:	68bb      	ldr	r3, [r7, #8]
 80067c6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80067c8:	88fb      	ldrh	r3, [r7, #6]
 80067ca:	089b      	lsrs	r3, r3, #2
 80067cc:	b29b      	uxth	r3, r3
 80067ce:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80067d0:	88fb      	ldrh	r3, [r7, #6]
 80067d2:	f003 0303 	and.w	r3, r3, #3
 80067d6:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80067d8:	2300      	movs	r3, #0
 80067da:	623b      	str	r3, [r7, #32]
 80067dc:	e014      	b.n	8006808 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80067de:	69bb      	ldr	r3, [r7, #24]
 80067e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80067e4:	681a      	ldr	r2, [r3, #0]
 80067e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067e8:	601a      	str	r2, [r3, #0]
    pDest++;
 80067ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067ec:	3301      	adds	r3, #1
 80067ee:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80067f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067f2:	3301      	adds	r3, #1
 80067f4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80067f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067f8:	3301      	adds	r3, #1
 80067fa:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80067fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067fe:	3301      	adds	r3, #1
 8006800:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8006802:	6a3b      	ldr	r3, [r7, #32]
 8006804:	3301      	adds	r3, #1
 8006806:	623b      	str	r3, [r7, #32]
 8006808:	6a3a      	ldr	r2, [r7, #32]
 800680a:	697b      	ldr	r3, [r7, #20]
 800680c:	429a      	cmp	r2, r3
 800680e:	d3e6      	bcc.n	80067de <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8006810:	8bfb      	ldrh	r3, [r7, #30]
 8006812:	2b00      	cmp	r3, #0
 8006814:	d01e      	beq.n	8006854 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006816:	2300      	movs	r3, #0
 8006818:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800681a:	69bb      	ldr	r3, [r7, #24]
 800681c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006820:	461a      	mov	r2, r3
 8006822:	f107 0310 	add.w	r3, r7, #16
 8006826:	6812      	ldr	r2, [r2, #0]
 8006828:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800682a:	693a      	ldr	r2, [r7, #16]
 800682c:	6a3b      	ldr	r3, [r7, #32]
 800682e:	b2db      	uxtb	r3, r3
 8006830:	00db      	lsls	r3, r3, #3
 8006832:	fa22 f303 	lsr.w	r3, r2, r3
 8006836:	b2da      	uxtb	r2, r3
 8006838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800683a:	701a      	strb	r2, [r3, #0]
      i++;
 800683c:	6a3b      	ldr	r3, [r7, #32]
 800683e:	3301      	adds	r3, #1
 8006840:	623b      	str	r3, [r7, #32]
      pDest++;
 8006842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006844:	3301      	adds	r3, #1
 8006846:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8006848:	8bfb      	ldrh	r3, [r7, #30]
 800684a:	3b01      	subs	r3, #1
 800684c:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800684e:	8bfb      	ldrh	r3, [r7, #30]
 8006850:	2b00      	cmp	r3, #0
 8006852:	d1ea      	bne.n	800682a <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006856:	4618      	mov	r0, r3
 8006858:	372c      	adds	r7, #44	; 0x2c
 800685a:	46bd      	mov	sp, r7
 800685c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006860:	4770      	bx	lr

08006862 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006862:	b480      	push	{r7}
 8006864:	b085      	sub	sp, #20
 8006866:	af00      	add	r7, sp, #0
 8006868:	6078      	str	r0, [r7, #4]
 800686a:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006870:	683b      	ldr	r3, [r7, #0]
 8006872:	781b      	ldrb	r3, [r3, #0]
 8006874:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006876:	683b      	ldr	r3, [r7, #0]
 8006878:	785b      	ldrb	r3, [r3, #1]
 800687a:	2b01      	cmp	r3, #1
 800687c:	d12c      	bne.n	80068d8 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800687e:	68bb      	ldr	r3, [r7, #8]
 8006880:	015a      	lsls	r2, r3, #5
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	4413      	add	r3, r2
 8006886:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	2b00      	cmp	r3, #0
 800688e:	db12      	blt.n	80068b6 <USB_EPSetStall+0x54>
 8006890:	68bb      	ldr	r3, [r7, #8]
 8006892:	2b00      	cmp	r3, #0
 8006894:	d00f      	beq.n	80068b6 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8006896:	68bb      	ldr	r3, [r7, #8]
 8006898:	015a      	lsls	r2, r3, #5
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	4413      	add	r3, r2
 800689e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	68ba      	ldr	r2, [r7, #8]
 80068a6:	0151      	lsls	r1, r2, #5
 80068a8:	68fa      	ldr	r2, [r7, #12]
 80068aa:	440a      	add	r2, r1
 80068ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80068b0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80068b4:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80068b6:	68bb      	ldr	r3, [r7, #8]
 80068b8:	015a      	lsls	r2, r3, #5
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	4413      	add	r3, r2
 80068be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	68ba      	ldr	r2, [r7, #8]
 80068c6:	0151      	lsls	r1, r2, #5
 80068c8:	68fa      	ldr	r2, [r7, #12]
 80068ca:	440a      	add	r2, r1
 80068cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80068d0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80068d4:	6013      	str	r3, [r2, #0]
 80068d6:	e02b      	b.n	8006930 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80068d8:	68bb      	ldr	r3, [r7, #8]
 80068da:	015a      	lsls	r2, r3, #5
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	4413      	add	r3, r2
 80068e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	db12      	blt.n	8006910 <USB_EPSetStall+0xae>
 80068ea:	68bb      	ldr	r3, [r7, #8]
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d00f      	beq.n	8006910 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80068f0:	68bb      	ldr	r3, [r7, #8]
 80068f2:	015a      	lsls	r2, r3, #5
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	4413      	add	r3, r2
 80068f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	68ba      	ldr	r2, [r7, #8]
 8006900:	0151      	lsls	r1, r2, #5
 8006902:	68fa      	ldr	r2, [r7, #12]
 8006904:	440a      	add	r2, r1
 8006906:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800690a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800690e:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8006910:	68bb      	ldr	r3, [r7, #8]
 8006912:	015a      	lsls	r2, r3, #5
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	4413      	add	r3, r2
 8006918:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	68ba      	ldr	r2, [r7, #8]
 8006920:	0151      	lsls	r1, r2, #5
 8006922:	68fa      	ldr	r2, [r7, #12]
 8006924:	440a      	add	r2, r1
 8006926:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800692a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800692e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006930:	2300      	movs	r3, #0
}
 8006932:	4618      	mov	r0, r3
 8006934:	3714      	adds	r7, #20
 8006936:	46bd      	mov	sp, r7
 8006938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800693c:	4770      	bx	lr

0800693e <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800693e:	b480      	push	{r7}
 8006940:	b085      	sub	sp, #20
 8006942:	af00      	add	r7, sp, #0
 8006944:	6078      	str	r0, [r7, #4]
 8006946:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800694c:	683b      	ldr	r3, [r7, #0]
 800694e:	781b      	ldrb	r3, [r3, #0]
 8006950:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006952:	683b      	ldr	r3, [r7, #0]
 8006954:	785b      	ldrb	r3, [r3, #1]
 8006956:	2b01      	cmp	r3, #1
 8006958:	d128      	bne.n	80069ac <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800695a:	68bb      	ldr	r3, [r7, #8]
 800695c:	015a      	lsls	r2, r3, #5
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	4413      	add	r3, r2
 8006962:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	68ba      	ldr	r2, [r7, #8]
 800696a:	0151      	lsls	r1, r2, #5
 800696c:	68fa      	ldr	r2, [r7, #12]
 800696e:	440a      	add	r2, r1
 8006970:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006974:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006978:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800697a:	683b      	ldr	r3, [r7, #0]
 800697c:	78db      	ldrb	r3, [r3, #3]
 800697e:	2b03      	cmp	r3, #3
 8006980:	d003      	beq.n	800698a <USB_EPClearStall+0x4c>
 8006982:	683b      	ldr	r3, [r7, #0]
 8006984:	78db      	ldrb	r3, [r3, #3]
 8006986:	2b02      	cmp	r3, #2
 8006988:	d138      	bne.n	80069fc <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800698a:	68bb      	ldr	r3, [r7, #8]
 800698c:	015a      	lsls	r2, r3, #5
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	4413      	add	r3, r2
 8006992:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	68ba      	ldr	r2, [r7, #8]
 800699a:	0151      	lsls	r1, r2, #5
 800699c:	68fa      	ldr	r2, [r7, #12]
 800699e:	440a      	add	r2, r1
 80069a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80069a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80069a8:	6013      	str	r3, [r2, #0]
 80069aa:	e027      	b.n	80069fc <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80069ac:	68bb      	ldr	r3, [r7, #8]
 80069ae:	015a      	lsls	r2, r3, #5
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	4413      	add	r3, r2
 80069b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	68ba      	ldr	r2, [r7, #8]
 80069bc:	0151      	lsls	r1, r2, #5
 80069be:	68fa      	ldr	r2, [r7, #12]
 80069c0:	440a      	add	r2, r1
 80069c2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80069c6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80069ca:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80069cc:	683b      	ldr	r3, [r7, #0]
 80069ce:	78db      	ldrb	r3, [r3, #3]
 80069d0:	2b03      	cmp	r3, #3
 80069d2:	d003      	beq.n	80069dc <USB_EPClearStall+0x9e>
 80069d4:	683b      	ldr	r3, [r7, #0]
 80069d6:	78db      	ldrb	r3, [r3, #3]
 80069d8:	2b02      	cmp	r3, #2
 80069da:	d10f      	bne.n	80069fc <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80069dc:	68bb      	ldr	r3, [r7, #8]
 80069de:	015a      	lsls	r2, r3, #5
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	4413      	add	r3, r2
 80069e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	68ba      	ldr	r2, [r7, #8]
 80069ec:	0151      	lsls	r1, r2, #5
 80069ee:	68fa      	ldr	r2, [r7, #12]
 80069f0:	440a      	add	r2, r1
 80069f2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80069f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80069fa:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80069fc:	2300      	movs	r3, #0
}
 80069fe:	4618      	mov	r0, r3
 8006a00:	3714      	adds	r7, #20
 8006a02:	46bd      	mov	sp, r7
 8006a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a08:	4770      	bx	lr

08006a0a <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8006a0a:	b480      	push	{r7}
 8006a0c:	b085      	sub	sp, #20
 8006a0e:	af00      	add	r7, sp, #0
 8006a10:	6078      	str	r0, [r7, #4]
 8006a12:	460b      	mov	r3, r1
 8006a14:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	68fa      	ldr	r2, [r7, #12]
 8006a24:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006a28:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8006a2c:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a34:	681a      	ldr	r2, [r3, #0]
 8006a36:	78fb      	ldrb	r3, [r7, #3]
 8006a38:	011b      	lsls	r3, r3, #4
 8006a3a:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8006a3e:	68f9      	ldr	r1, [r7, #12]
 8006a40:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006a44:	4313      	orrs	r3, r2
 8006a46:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8006a48:	2300      	movs	r3, #0
}
 8006a4a:	4618      	mov	r0, r3
 8006a4c:	3714      	adds	r7, #20
 8006a4e:	46bd      	mov	sp, r7
 8006a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a54:	4770      	bx	lr

08006a56 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006a56:	b480      	push	{r7}
 8006a58:	b085      	sub	sp, #20
 8006a5a:	af00      	add	r7, sp, #0
 8006a5c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	68fa      	ldr	r2, [r7, #12]
 8006a6c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006a70:	f023 0303 	bic.w	r3, r3, #3
 8006a74:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a7c:	685b      	ldr	r3, [r3, #4]
 8006a7e:	68fa      	ldr	r2, [r7, #12]
 8006a80:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006a84:	f023 0302 	bic.w	r3, r3, #2
 8006a88:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006a8a:	2300      	movs	r3, #0
}
 8006a8c:	4618      	mov	r0, r3
 8006a8e:	3714      	adds	r7, #20
 8006a90:	46bd      	mov	sp, r7
 8006a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a96:	4770      	bx	lr

08006a98 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006a98:	b480      	push	{r7}
 8006a9a:	b085      	sub	sp, #20
 8006a9c:	af00      	add	r7, sp, #0
 8006a9e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	68fa      	ldr	r2, [r7, #12]
 8006aae:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006ab2:	f023 0303 	bic.w	r3, r3, #3
 8006ab6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006abe:	685b      	ldr	r3, [r3, #4]
 8006ac0:	68fa      	ldr	r2, [r7, #12]
 8006ac2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006ac6:	f043 0302 	orr.w	r3, r3, #2
 8006aca:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006acc:	2300      	movs	r3, #0
}
 8006ace:	4618      	mov	r0, r3
 8006ad0:	3714      	adds	r7, #20
 8006ad2:	46bd      	mov	sp, r7
 8006ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad8:	4770      	bx	lr

08006ada <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8006ada:	b480      	push	{r7}
 8006adc:	b085      	sub	sp, #20
 8006ade:	af00      	add	r7, sp, #0
 8006ae0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	695b      	ldr	r3, [r3, #20]
 8006ae6:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	699b      	ldr	r3, [r3, #24]
 8006aec:	68fa      	ldr	r2, [r7, #12]
 8006aee:	4013      	ands	r3, r2
 8006af0:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006af2:	68fb      	ldr	r3, [r7, #12]
}
 8006af4:	4618      	mov	r0, r3
 8006af6:	3714      	adds	r7, #20
 8006af8:	46bd      	mov	sp, r7
 8006afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006afe:	4770      	bx	lr

08006b00 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006b00:	b480      	push	{r7}
 8006b02:	b085      	sub	sp, #20
 8006b04:	af00      	add	r7, sp, #0
 8006b06:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b12:	699b      	ldr	r3, [r3, #24]
 8006b14:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b1c:	69db      	ldr	r3, [r3, #28]
 8006b1e:	68ba      	ldr	r2, [r7, #8]
 8006b20:	4013      	ands	r3, r2
 8006b22:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8006b24:	68bb      	ldr	r3, [r7, #8]
 8006b26:	0c1b      	lsrs	r3, r3, #16
}
 8006b28:	4618      	mov	r0, r3
 8006b2a:	3714      	adds	r7, #20
 8006b2c:	46bd      	mov	sp, r7
 8006b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b32:	4770      	bx	lr

08006b34 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006b34:	b480      	push	{r7}
 8006b36:	b085      	sub	sp, #20
 8006b38:	af00      	add	r7, sp, #0
 8006b3a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b46:	699b      	ldr	r3, [r3, #24]
 8006b48:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b50:	69db      	ldr	r3, [r3, #28]
 8006b52:	68ba      	ldr	r2, [r7, #8]
 8006b54:	4013      	ands	r3, r2
 8006b56:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8006b58:	68bb      	ldr	r3, [r7, #8]
 8006b5a:	b29b      	uxth	r3, r3
}
 8006b5c:	4618      	mov	r0, r3
 8006b5e:	3714      	adds	r7, #20
 8006b60:	46bd      	mov	sp, r7
 8006b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b66:	4770      	bx	lr

08006b68 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006b68:	b480      	push	{r7}
 8006b6a:	b085      	sub	sp, #20
 8006b6c:	af00      	add	r7, sp, #0
 8006b6e:	6078      	str	r0, [r7, #4]
 8006b70:	460b      	mov	r3, r1
 8006b72:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8006b78:	78fb      	ldrb	r3, [r7, #3]
 8006b7a:	015a      	lsls	r2, r3, #5
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	4413      	add	r3, r2
 8006b80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b84:	689b      	ldr	r3, [r3, #8]
 8006b86:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b8e:	695b      	ldr	r3, [r3, #20]
 8006b90:	68ba      	ldr	r2, [r7, #8]
 8006b92:	4013      	ands	r3, r2
 8006b94:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006b96:	68bb      	ldr	r3, [r7, #8]
}
 8006b98:	4618      	mov	r0, r3
 8006b9a:	3714      	adds	r7, #20
 8006b9c:	46bd      	mov	sp, r7
 8006b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba2:	4770      	bx	lr

08006ba4 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006ba4:	b480      	push	{r7}
 8006ba6:	b087      	sub	sp, #28
 8006ba8:	af00      	add	r7, sp, #0
 8006baa:	6078      	str	r0, [r7, #4]
 8006bac:	460b      	mov	r3, r1
 8006bae:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8006bb4:	697b      	ldr	r3, [r7, #20]
 8006bb6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006bba:	691b      	ldr	r3, [r3, #16]
 8006bbc:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006bbe:	697b      	ldr	r3, [r7, #20]
 8006bc0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006bc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006bc6:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8006bc8:	78fb      	ldrb	r3, [r7, #3]
 8006bca:	f003 030f 	and.w	r3, r3, #15
 8006bce:	68fa      	ldr	r2, [r7, #12]
 8006bd0:	fa22 f303 	lsr.w	r3, r2, r3
 8006bd4:	01db      	lsls	r3, r3, #7
 8006bd6:	b2db      	uxtb	r3, r3
 8006bd8:	693a      	ldr	r2, [r7, #16]
 8006bda:	4313      	orrs	r3, r2
 8006bdc:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006bde:	78fb      	ldrb	r3, [r7, #3]
 8006be0:	015a      	lsls	r2, r3, #5
 8006be2:	697b      	ldr	r3, [r7, #20]
 8006be4:	4413      	add	r3, r2
 8006be6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006bea:	689b      	ldr	r3, [r3, #8]
 8006bec:	693a      	ldr	r2, [r7, #16]
 8006bee:	4013      	ands	r3, r2
 8006bf0:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006bf2:	68bb      	ldr	r3, [r7, #8]
}
 8006bf4:	4618      	mov	r0, r3
 8006bf6:	371c      	adds	r7, #28
 8006bf8:	46bd      	mov	sp, r7
 8006bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bfe:	4770      	bx	lr

08006c00 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006c00:	b480      	push	{r7}
 8006c02:	b083      	sub	sp, #12
 8006c04:	af00      	add	r7, sp, #0
 8006c06:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	695b      	ldr	r3, [r3, #20]
 8006c0c:	f003 0301 	and.w	r3, r3, #1
}
 8006c10:	4618      	mov	r0, r3
 8006c12:	370c      	adds	r7, #12
 8006c14:	46bd      	mov	sp, r7
 8006c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c1a:	4770      	bx	lr

08006c1c <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8006c1c:	b480      	push	{r7}
 8006c1e:	b085      	sub	sp, #20
 8006c20:	af00      	add	r7, sp, #0
 8006c22:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	68fa      	ldr	r2, [r7, #12]
 8006c32:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c36:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006c3a:	f023 0307 	bic.w	r3, r3, #7
 8006c3e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c46:	685b      	ldr	r3, [r3, #4]
 8006c48:	68fa      	ldr	r2, [r7, #12]
 8006c4a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006c4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006c52:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006c54:	2300      	movs	r3, #0
}
 8006c56:	4618      	mov	r0, r3
 8006c58:	3714      	adds	r7, #20
 8006c5a:	46bd      	mov	sp, r7
 8006c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c60:	4770      	bx	lr
	...

08006c64 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8006c64:	b480      	push	{r7}
 8006c66:	b087      	sub	sp, #28
 8006c68:	af00      	add	r7, sp, #0
 8006c6a:	60f8      	str	r0, [r7, #12]
 8006c6c:	460b      	mov	r3, r1
 8006c6e:	607a      	str	r2, [r7, #4]
 8006c70:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	333c      	adds	r3, #60	; 0x3c
 8006c7a:	3304      	adds	r3, #4
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006c80:	693b      	ldr	r3, [r7, #16]
 8006c82:	4a26      	ldr	r2, [pc, #152]	; (8006d1c <USB_EP0_OutStart+0xb8>)
 8006c84:	4293      	cmp	r3, r2
 8006c86:	d90a      	bls.n	8006c9e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006c88:	697b      	ldr	r3, [r7, #20]
 8006c8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006c94:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006c98:	d101      	bne.n	8006c9e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8006c9a:	2300      	movs	r3, #0
 8006c9c:	e037      	b.n	8006d0e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8006c9e:	697b      	ldr	r3, [r7, #20]
 8006ca0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ca4:	461a      	mov	r2, r3
 8006ca6:	2300      	movs	r3, #0
 8006ca8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006caa:	697b      	ldr	r3, [r7, #20]
 8006cac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006cb0:	691b      	ldr	r3, [r3, #16]
 8006cb2:	697a      	ldr	r2, [r7, #20]
 8006cb4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006cb8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006cbc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8006cbe:	697b      	ldr	r3, [r7, #20]
 8006cc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006cc4:	691b      	ldr	r3, [r3, #16]
 8006cc6:	697a      	ldr	r2, [r7, #20]
 8006cc8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006ccc:	f043 0318 	orr.w	r3, r3, #24
 8006cd0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8006cd2:	697b      	ldr	r3, [r7, #20]
 8006cd4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006cd8:	691b      	ldr	r3, [r3, #16]
 8006cda:	697a      	ldr	r2, [r7, #20]
 8006cdc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006ce0:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8006ce4:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8006ce6:	7afb      	ldrb	r3, [r7, #11]
 8006ce8:	2b01      	cmp	r3, #1
 8006cea:	d10f      	bne.n	8006d0c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006cec:	697b      	ldr	r3, [r7, #20]
 8006cee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006cf2:	461a      	mov	r2, r3
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8006cf8:	697b      	ldr	r3, [r7, #20]
 8006cfa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	697a      	ldr	r2, [r7, #20]
 8006d02:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006d06:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8006d0a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006d0c:	2300      	movs	r3, #0
}
 8006d0e:	4618      	mov	r0, r3
 8006d10:	371c      	adds	r7, #28
 8006d12:	46bd      	mov	sp, r7
 8006d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d18:	4770      	bx	lr
 8006d1a:	bf00      	nop
 8006d1c:	4f54300a 	.word	0x4f54300a

08006d20 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006d20:	b480      	push	{r7}
 8006d22:	b085      	sub	sp, #20
 8006d24:	af00      	add	r7, sp, #0
 8006d26:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006d28:	2300      	movs	r3, #0
 8006d2a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	3301      	adds	r3, #1
 8006d30:	60fb      	str	r3, [r7, #12]
 8006d32:	4a13      	ldr	r2, [pc, #76]	; (8006d80 <USB_CoreReset+0x60>)
 8006d34:	4293      	cmp	r3, r2
 8006d36:	d901      	bls.n	8006d3c <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8006d38:	2303      	movs	r3, #3
 8006d3a:	e01a      	b.n	8006d72 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	691b      	ldr	r3, [r3, #16]
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	daf3      	bge.n	8006d2c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006d44:	2300      	movs	r3, #0
 8006d46:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	691b      	ldr	r3, [r3, #16]
 8006d4c:	f043 0201 	orr.w	r2, r3, #1
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	3301      	adds	r3, #1
 8006d58:	60fb      	str	r3, [r7, #12]
 8006d5a:	4a09      	ldr	r2, [pc, #36]	; (8006d80 <USB_CoreReset+0x60>)
 8006d5c:	4293      	cmp	r3, r2
 8006d5e:	d901      	bls.n	8006d64 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8006d60:	2303      	movs	r3, #3
 8006d62:	e006      	b.n	8006d72 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	691b      	ldr	r3, [r3, #16]
 8006d68:	f003 0301 	and.w	r3, r3, #1
 8006d6c:	2b01      	cmp	r3, #1
 8006d6e:	d0f1      	beq.n	8006d54 <USB_CoreReset+0x34>

  return HAL_OK;
 8006d70:	2300      	movs	r3, #0
}
 8006d72:	4618      	mov	r0, r3
 8006d74:	3714      	adds	r7, #20
 8006d76:	46bd      	mov	sp, r7
 8006d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d7c:	4770      	bx	lr
 8006d7e:	bf00      	nop
 8006d80:	00030d40 	.word	0x00030d40

08006d84 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006d84:	b580      	push	{r7, lr}
 8006d86:	b084      	sub	sp, #16
 8006d88:	af00      	add	r7, sp, #0
 8006d8a:	6078      	str	r0, [r7, #4]
 8006d8c:	460b      	mov	r3, r1
 8006d8e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006d90:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006d94:	f002 fa68 	bl	8009268 <USBD_static_malloc>
 8006d98:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d105      	bne.n	8006dac <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	2200      	movs	r2, #0
 8006da4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8006da8:	2302      	movs	r3, #2
 8006daa:	e066      	b.n	8006e7a <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	68fa      	ldr	r2, [r7, #12]
 8006db0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	7c1b      	ldrb	r3, [r3, #16]
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d119      	bne.n	8006df0 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006dbc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006dc0:	2202      	movs	r2, #2
 8006dc2:	2181      	movs	r1, #129	; 0x81
 8006dc4:	6878      	ldr	r0, [r7, #4]
 8006dc6:	f002 f92c 	bl	8009022 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	2201      	movs	r2, #1
 8006dce:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006dd0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006dd4:	2202      	movs	r2, #2
 8006dd6:	2101      	movs	r1, #1
 8006dd8:	6878      	ldr	r0, [r7, #4]
 8006dda:	f002 f922 	bl	8009022 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	2201      	movs	r2, #1
 8006de2:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	2210      	movs	r2, #16
 8006dea:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8006dee:	e016      	b.n	8006e1e <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006df0:	2340      	movs	r3, #64	; 0x40
 8006df2:	2202      	movs	r2, #2
 8006df4:	2181      	movs	r1, #129	; 0x81
 8006df6:	6878      	ldr	r0, [r7, #4]
 8006df8:	f002 f913 	bl	8009022 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	2201      	movs	r2, #1
 8006e00:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006e02:	2340      	movs	r3, #64	; 0x40
 8006e04:	2202      	movs	r2, #2
 8006e06:	2101      	movs	r1, #1
 8006e08:	6878      	ldr	r0, [r7, #4]
 8006e0a:	f002 f90a 	bl	8009022 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	2201      	movs	r2, #1
 8006e12:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	2210      	movs	r2, #16
 8006e1a:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006e1e:	2308      	movs	r3, #8
 8006e20:	2203      	movs	r2, #3
 8006e22:	2182      	movs	r1, #130	; 0x82
 8006e24:	6878      	ldr	r0, [r7, #4]
 8006e26:	f002 f8fc 	bl	8009022 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	2201      	movs	r2, #1
 8006e2e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	2200      	movs	r2, #0
 8006e40:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	2200      	movs	r2, #0
 8006e48:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	7c1b      	ldrb	r3, [r3, #16]
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d109      	bne.n	8006e68 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006e5a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006e5e:	2101      	movs	r1, #1
 8006e60:	6878      	ldr	r0, [r7, #4]
 8006e62:	f002 f9cd 	bl	8009200 <USBD_LL_PrepareReceive>
 8006e66:	e007      	b.n	8006e78 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006e6e:	2340      	movs	r3, #64	; 0x40
 8006e70:	2101      	movs	r1, #1
 8006e72:	6878      	ldr	r0, [r7, #4]
 8006e74:	f002 f9c4 	bl	8009200 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006e78:	2300      	movs	r3, #0
}
 8006e7a:	4618      	mov	r0, r3
 8006e7c:	3710      	adds	r7, #16
 8006e7e:	46bd      	mov	sp, r7
 8006e80:	bd80      	pop	{r7, pc}

08006e82 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006e82:	b580      	push	{r7, lr}
 8006e84:	b082      	sub	sp, #8
 8006e86:	af00      	add	r7, sp, #0
 8006e88:	6078      	str	r0, [r7, #4]
 8006e8a:	460b      	mov	r3, r1
 8006e8c:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8006e8e:	2181      	movs	r1, #129	; 0x81
 8006e90:	6878      	ldr	r0, [r7, #4]
 8006e92:	f002 f8ec 	bl	800906e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	2200      	movs	r2, #0
 8006e9a:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8006e9c:	2101      	movs	r1, #1
 8006e9e:	6878      	ldr	r0, [r7, #4]
 8006ea0:	f002 f8e5 	bl	800906e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	2200      	movs	r2, #0
 8006ea8:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8006eac:	2182      	movs	r1, #130	; 0x82
 8006eae:	6878      	ldr	r0, [r7, #4]
 8006eb0:	f002 f8dd 	bl	800906e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	2200      	movs	r2, #0
 8006eb8:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	2200      	movs	r2, #0
 8006ec0:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d00e      	beq.n	8006eec <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006ed4:	685b      	ldr	r3, [r3, #4]
 8006ed6:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006ede:	4618      	mov	r0, r3
 8006ee0:	f002 f9d0 	bl	8009284 <USBD_static_free>
    pdev->pClassData = NULL;
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	2200      	movs	r2, #0
 8006ee8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8006eec:	2300      	movs	r3, #0
}
 8006eee:	4618      	mov	r0, r3
 8006ef0:	3708      	adds	r7, #8
 8006ef2:	46bd      	mov	sp, r7
 8006ef4:	bd80      	pop	{r7, pc}
	...

08006ef8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8006ef8:	b580      	push	{r7, lr}
 8006efa:	b086      	sub	sp, #24
 8006efc:	af00      	add	r7, sp, #0
 8006efe:	6078      	str	r0, [r7, #4]
 8006f00:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006f08:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8006f0a:	2300      	movs	r3, #0
 8006f0c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8006f0e:	2300      	movs	r3, #0
 8006f10:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8006f12:	2300      	movs	r3, #0
 8006f14:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8006f16:	693b      	ldr	r3, [r7, #16]
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d101      	bne.n	8006f20 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8006f1c:	2303      	movs	r3, #3
 8006f1e:	e0af      	b.n	8007080 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006f20:	683b      	ldr	r3, [r7, #0]
 8006f22:	781b      	ldrb	r3, [r3, #0]
 8006f24:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d03f      	beq.n	8006fac <USBD_CDC_Setup+0xb4>
 8006f2c:	2b20      	cmp	r3, #32
 8006f2e:	f040 809f 	bne.w	8007070 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8006f32:	683b      	ldr	r3, [r7, #0]
 8006f34:	88db      	ldrh	r3, [r3, #6]
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d02e      	beq.n	8006f98 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8006f3a:	683b      	ldr	r3, [r7, #0]
 8006f3c:	781b      	ldrb	r3, [r3, #0]
 8006f3e:	b25b      	sxtb	r3, r3
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	da16      	bge.n	8006f72 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006f4a:	689b      	ldr	r3, [r3, #8]
 8006f4c:	683a      	ldr	r2, [r7, #0]
 8006f4e:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8006f50:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006f52:	683a      	ldr	r2, [r7, #0]
 8006f54:	88d2      	ldrh	r2, [r2, #6]
 8006f56:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8006f58:	683b      	ldr	r3, [r7, #0]
 8006f5a:	88db      	ldrh	r3, [r3, #6]
 8006f5c:	2b07      	cmp	r3, #7
 8006f5e:	bf28      	it	cs
 8006f60:	2307      	movcs	r3, #7
 8006f62:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8006f64:	693b      	ldr	r3, [r7, #16]
 8006f66:	89fa      	ldrh	r2, [r7, #14]
 8006f68:	4619      	mov	r1, r3
 8006f6a:	6878      	ldr	r0, [r7, #4]
 8006f6c:	f001 fb19 	bl	80085a2 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8006f70:	e085      	b.n	800707e <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 8006f72:	683b      	ldr	r3, [r7, #0]
 8006f74:	785a      	ldrb	r2, [r3, #1]
 8006f76:	693b      	ldr	r3, [r7, #16]
 8006f78:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8006f7c:	683b      	ldr	r3, [r7, #0]
 8006f7e:	88db      	ldrh	r3, [r3, #6]
 8006f80:	b2da      	uxtb	r2, r3
 8006f82:	693b      	ldr	r3, [r7, #16]
 8006f84:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8006f88:	6939      	ldr	r1, [r7, #16]
 8006f8a:	683b      	ldr	r3, [r7, #0]
 8006f8c:	88db      	ldrh	r3, [r3, #6]
 8006f8e:	461a      	mov	r2, r3
 8006f90:	6878      	ldr	r0, [r7, #4]
 8006f92:	f001 fb32 	bl	80085fa <USBD_CtlPrepareRx>
      break;
 8006f96:	e072      	b.n	800707e <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006f9e:	689b      	ldr	r3, [r3, #8]
 8006fa0:	683a      	ldr	r2, [r7, #0]
 8006fa2:	7850      	ldrb	r0, [r2, #1]
 8006fa4:	2200      	movs	r2, #0
 8006fa6:	6839      	ldr	r1, [r7, #0]
 8006fa8:	4798      	blx	r3
      break;
 8006faa:	e068      	b.n	800707e <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006fac:	683b      	ldr	r3, [r7, #0]
 8006fae:	785b      	ldrb	r3, [r3, #1]
 8006fb0:	2b0b      	cmp	r3, #11
 8006fb2:	d852      	bhi.n	800705a <USBD_CDC_Setup+0x162>
 8006fb4:	a201      	add	r2, pc, #4	; (adr r2, 8006fbc <USBD_CDC_Setup+0xc4>)
 8006fb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fba:	bf00      	nop
 8006fbc:	08006fed 	.word	0x08006fed
 8006fc0:	08007069 	.word	0x08007069
 8006fc4:	0800705b 	.word	0x0800705b
 8006fc8:	0800705b 	.word	0x0800705b
 8006fcc:	0800705b 	.word	0x0800705b
 8006fd0:	0800705b 	.word	0x0800705b
 8006fd4:	0800705b 	.word	0x0800705b
 8006fd8:	0800705b 	.word	0x0800705b
 8006fdc:	0800705b 	.word	0x0800705b
 8006fe0:	0800705b 	.word	0x0800705b
 8006fe4:	08007017 	.word	0x08007017
 8006fe8:	08007041 	.word	0x08007041
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ff2:	b2db      	uxtb	r3, r3
 8006ff4:	2b03      	cmp	r3, #3
 8006ff6:	d107      	bne.n	8007008 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006ff8:	f107 030a 	add.w	r3, r7, #10
 8006ffc:	2202      	movs	r2, #2
 8006ffe:	4619      	mov	r1, r3
 8007000:	6878      	ldr	r0, [r7, #4]
 8007002:	f001 face 	bl	80085a2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007006:	e032      	b.n	800706e <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8007008:	6839      	ldr	r1, [r7, #0]
 800700a:	6878      	ldr	r0, [r7, #4]
 800700c:	f001 fa58 	bl	80084c0 <USBD_CtlError>
            ret = USBD_FAIL;
 8007010:	2303      	movs	r3, #3
 8007012:	75fb      	strb	r3, [r7, #23]
          break;
 8007014:	e02b      	b.n	800706e <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800701c:	b2db      	uxtb	r3, r3
 800701e:	2b03      	cmp	r3, #3
 8007020:	d107      	bne.n	8007032 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8007022:	f107 030d 	add.w	r3, r7, #13
 8007026:	2201      	movs	r2, #1
 8007028:	4619      	mov	r1, r3
 800702a:	6878      	ldr	r0, [r7, #4]
 800702c:	f001 fab9 	bl	80085a2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007030:	e01d      	b.n	800706e <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8007032:	6839      	ldr	r1, [r7, #0]
 8007034:	6878      	ldr	r0, [r7, #4]
 8007036:	f001 fa43 	bl	80084c0 <USBD_CtlError>
            ret = USBD_FAIL;
 800703a:	2303      	movs	r3, #3
 800703c:	75fb      	strb	r3, [r7, #23]
          break;
 800703e:	e016      	b.n	800706e <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007046:	b2db      	uxtb	r3, r3
 8007048:	2b03      	cmp	r3, #3
 800704a:	d00f      	beq.n	800706c <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 800704c:	6839      	ldr	r1, [r7, #0]
 800704e:	6878      	ldr	r0, [r7, #4]
 8007050:	f001 fa36 	bl	80084c0 <USBD_CtlError>
            ret = USBD_FAIL;
 8007054:	2303      	movs	r3, #3
 8007056:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007058:	e008      	b.n	800706c <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800705a:	6839      	ldr	r1, [r7, #0]
 800705c:	6878      	ldr	r0, [r7, #4]
 800705e:	f001 fa2f 	bl	80084c0 <USBD_CtlError>
          ret = USBD_FAIL;
 8007062:	2303      	movs	r3, #3
 8007064:	75fb      	strb	r3, [r7, #23]
          break;
 8007066:	e002      	b.n	800706e <USBD_CDC_Setup+0x176>
          break;
 8007068:	bf00      	nop
 800706a:	e008      	b.n	800707e <USBD_CDC_Setup+0x186>
          break;
 800706c:	bf00      	nop
      }
      break;
 800706e:	e006      	b.n	800707e <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8007070:	6839      	ldr	r1, [r7, #0]
 8007072:	6878      	ldr	r0, [r7, #4]
 8007074:	f001 fa24 	bl	80084c0 <USBD_CtlError>
      ret = USBD_FAIL;
 8007078:	2303      	movs	r3, #3
 800707a:	75fb      	strb	r3, [r7, #23]
      break;
 800707c:	bf00      	nop
  }

  return (uint8_t)ret;
 800707e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007080:	4618      	mov	r0, r3
 8007082:	3718      	adds	r7, #24
 8007084:	46bd      	mov	sp, r7
 8007086:	bd80      	pop	{r7, pc}

08007088 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007088:	b580      	push	{r7, lr}
 800708a:	b084      	sub	sp, #16
 800708c:	af00      	add	r7, sp, #0
 800708e:	6078      	str	r0, [r7, #4]
 8007090:	460b      	mov	r3, r1
 8007092:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800709a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d101      	bne.n	80070aa <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80070a6:	2303      	movs	r3, #3
 80070a8:	e04f      	b.n	800714a <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80070b0:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80070b2:	78fa      	ldrb	r2, [r7, #3]
 80070b4:	6879      	ldr	r1, [r7, #4]
 80070b6:	4613      	mov	r3, r2
 80070b8:	009b      	lsls	r3, r3, #2
 80070ba:	4413      	add	r3, r2
 80070bc:	009b      	lsls	r3, r3, #2
 80070be:	440b      	add	r3, r1
 80070c0:	3318      	adds	r3, #24
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d029      	beq.n	800711c <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80070c8:	78fa      	ldrb	r2, [r7, #3]
 80070ca:	6879      	ldr	r1, [r7, #4]
 80070cc:	4613      	mov	r3, r2
 80070ce:	009b      	lsls	r3, r3, #2
 80070d0:	4413      	add	r3, r2
 80070d2:	009b      	lsls	r3, r3, #2
 80070d4:	440b      	add	r3, r1
 80070d6:	3318      	adds	r3, #24
 80070d8:	681a      	ldr	r2, [r3, #0]
 80070da:	78f9      	ldrb	r1, [r7, #3]
 80070dc:	68f8      	ldr	r0, [r7, #12]
 80070de:	460b      	mov	r3, r1
 80070e0:	00db      	lsls	r3, r3, #3
 80070e2:	1a5b      	subs	r3, r3, r1
 80070e4:	009b      	lsls	r3, r3, #2
 80070e6:	4403      	add	r3, r0
 80070e8:	3344      	adds	r3, #68	; 0x44
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	fbb2 f1f3 	udiv	r1, r2, r3
 80070f0:	fb01 f303 	mul.w	r3, r1, r3
 80070f4:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d110      	bne.n	800711c <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 80070fa:	78fa      	ldrb	r2, [r7, #3]
 80070fc:	6879      	ldr	r1, [r7, #4]
 80070fe:	4613      	mov	r3, r2
 8007100:	009b      	lsls	r3, r3, #2
 8007102:	4413      	add	r3, r2
 8007104:	009b      	lsls	r3, r3, #2
 8007106:	440b      	add	r3, r1
 8007108:	3318      	adds	r3, #24
 800710a:	2200      	movs	r2, #0
 800710c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800710e:	78f9      	ldrb	r1, [r7, #3]
 8007110:	2300      	movs	r3, #0
 8007112:	2200      	movs	r2, #0
 8007114:	6878      	ldr	r0, [r7, #4]
 8007116:	f002 f852 	bl	80091be <USBD_LL_Transmit>
 800711a:	e015      	b.n	8007148 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800711c:	68bb      	ldr	r3, [r7, #8]
 800711e:	2200      	movs	r2, #0
 8007120:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800712a:	691b      	ldr	r3, [r3, #16]
 800712c:	2b00      	cmp	r3, #0
 800712e:	d00b      	beq.n	8007148 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007136:	691b      	ldr	r3, [r3, #16]
 8007138:	68ba      	ldr	r2, [r7, #8]
 800713a:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800713e:	68ba      	ldr	r2, [r7, #8]
 8007140:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8007144:	78fa      	ldrb	r2, [r7, #3]
 8007146:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8007148:	2300      	movs	r3, #0
}
 800714a:	4618      	mov	r0, r3
 800714c:	3710      	adds	r7, #16
 800714e:	46bd      	mov	sp, r7
 8007150:	bd80      	pop	{r7, pc}

08007152 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007152:	b580      	push	{r7, lr}
 8007154:	b084      	sub	sp, #16
 8007156:	af00      	add	r7, sp, #0
 8007158:	6078      	str	r0, [r7, #4]
 800715a:	460b      	mov	r3, r1
 800715c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007164:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800716c:	2b00      	cmp	r3, #0
 800716e:	d101      	bne.n	8007174 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007170:	2303      	movs	r3, #3
 8007172:	e015      	b.n	80071a0 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007174:	78fb      	ldrb	r3, [r7, #3]
 8007176:	4619      	mov	r1, r3
 8007178:	6878      	ldr	r0, [r7, #4]
 800717a:	f002 f862 	bl	8009242 <USBD_LL_GetRxDataSize>
 800717e:	4602      	mov	r2, r0
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800718c:	68db      	ldr	r3, [r3, #12]
 800718e:	68fa      	ldr	r2, [r7, #12]
 8007190:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8007194:	68fa      	ldr	r2, [r7, #12]
 8007196:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800719a:	4611      	mov	r1, r2
 800719c:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800719e:	2300      	movs	r3, #0
}
 80071a0:	4618      	mov	r0, r3
 80071a2:	3710      	adds	r7, #16
 80071a4:	46bd      	mov	sp, r7
 80071a6:	bd80      	pop	{r7, pc}

080071a8 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80071a8:	b580      	push	{r7, lr}
 80071aa:	b084      	sub	sp, #16
 80071ac:	af00      	add	r7, sp, #0
 80071ae:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80071b6:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d101      	bne.n	80071c2 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 80071be:	2303      	movs	r3, #3
 80071c0:	e01b      	b.n	80071fa <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d015      	beq.n	80071f8 <USBD_CDC_EP0_RxReady+0x50>
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80071d2:	2bff      	cmp	r3, #255	; 0xff
 80071d4:	d010      	beq.n	80071f8 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80071dc:	689b      	ldr	r3, [r3, #8]
 80071de:	68fa      	ldr	r2, [r7, #12]
 80071e0:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 80071e4:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80071e6:	68fa      	ldr	r2, [r7, #12]
 80071e8:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80071ec:	b292      	uxth	r2, r2
 80071ee:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	22ff      	movs	r2, #255	; 0xff
 80071f4:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 80071f8:	2300      	movs	r3, #0
}
 80071fa:	4618      	mov	r0, r3
 80071fc:	3710      	adds	r7, #16
 80071fe:	46bd      	mov	sp, r7
 8007200:	bd80      	pop	{r7, pc}
	...

08007204 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007204:	b480      	push	{r7}
 8007206:	b083      	sub	sp, #12
 8007208:	af00      	add	r7, sp, #0
 800720a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	2243      	movs	r2, #67	; 0x43
 8007210:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8007212:	4b03      	ldr	r3, [pc, #12]	; (8007220 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8007214:	4618      	mov	r0, r3
 8007216:	370c      	adds	r7, #12
 8007218:	46bd      	mov	sp, r7
 800721a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800721e:	4770      	bx	lr
 8007220:	200000b8 	.word	0x200000b8

08007224 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007224:	b480      	push	{r7}
 8007226:	b083      	sub	sp, #12
 8007228:	af00      	add	r7, sp, #0
 800722a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	2243      	movs	r2, #67	; 0x43
 8007230:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8007232:	4b03      	ldr	r3, [pc, #12]	; (8007240 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8007234:	4618      	mov	r0, r3
 8007236:	370c      	adds	r7, #12
 8007238:	46bd      	mov	sp, r7
 800723a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800723e:	4770      	bx	lr
 8007240:	20000074 	.word	0x20000074

08007244 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007244:	b480      	push	{r7}
 8007246:	b083      	sub	sp, #12
 8007248:	af00      	add	r7, sp, #0
 800724a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	2243      	movs	r2, #67	; 0x43
 8007250:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8007252:	4b03      	ldr	r3, [pc, #12]	; (8007260 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8007254:	4618      	mov	r0, r3
 8007256:	370c      	adds	r7, #12
 8007258:	46bd      	mov	sp, r7
 800725a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800725e:	4770      	bx	lr
 8007260:	200000fc 	.word	0x200000fc

08007264 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007264:	b480      	push	{r7}
 8007266:	b083      	sub	sp, #12
 8007268:	af00      	add	r7, sp, #0
 800726a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	220a      	movs	r2, #10
 8007270:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8007272:	4b03      	ldr	r3, [pc, #12]	; (8007280 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007274:	4618      	mov	r0, r3
 8007276:	370c      	adds	r7, #12
 8007278:	46bd      	mov	sp, r7
 800727a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800727e:	4770      	bx	lr
 8007280:	20000030 	.word	0x20000030

08007284 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8007284:	b480      	push	{r7}
 8007286:	b083      	sub	sp, #12
 8007288:	af00      	add	r7, sp, #0
 800728a:	6078      	str	r0, [r7, #4]
 800728c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800728e:	683b      	ldr	r3, [r7, #0]
 8007290:	2b00      	cmp	r3, #0
 8007292:	d101      	bne.n	8007298 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8007294:	2303      	movs	r3, #3
 8007296:	e004      	b.n	80072a2 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	683a      	ldr	r2, [r7, #0]
 800729c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 80072a0:	2300      	movs	r3, #0
}
 80072a2:	4618      	mov	r0, r3
 80072a4:	370c      	adds	r7, #12
 80072a6:	46bd      	mov	sp, r7
 80072a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ac:	4770      	bx	lr

080072ae <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80072ae:	b480      	push	{r7}
 80072b0:	b087      	sub	sp, #28
 80072b2:	af00      	add	r7, sp, #0
 80072b4:	60f8      	str	r0, [r7, #12]
 80072b6:	60b9      	str	r1, [r7, #8]
 80072b8:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80072c0:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 80072c2:	697b      	ldr	r3, [r7, #20]
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d101      	bne.n	80072cc <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 80072c8:	2303      	movs	r3, #3
 80072ca:	e008      	b.n	80072de <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 80072cc:	697b      	ldr	r3, [r7, #20]
 80072ce:	68ba      	ldr	r2, [r7, #8]
 80072d0:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80072d4:	697b      	ldr	r3, [r7, #20]
 80072d6:	687a      	ldr	r2, [r7, #4]
 80072d8:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80072dc:	2300      	movs	r3, #0
}
 80072de:	4618      	mov	r0, r3
 80072e0:	371c      	adds	r7, #28
 80072e2:	46bd      	mov	sp, r7
 80072e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e8:	4770      	bx	lr

080072ea <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80072ea:	b480      	push	{r7}
 80072ec:	b085      	sub	sp, #20
 80072ee:	af00      	add	r7, sp, #0
 80072f0:	6078      	str	r0, [r7, #4]
 80072f2:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80072fa:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d101      	bne.n	8007306 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 8007302:	2303      	movs	r3, #3
 8007304:	e004      	b.n	8007310 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	683a      	ldr	r2, [r7, #0]
 800730a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800730e:	2300      	movs	r3, #0
}
 8007310:	4618      	mov	r0, r3
 8007312:	3714      	adds	r7, #20
 8007314:	46bd      	mov	sp, r7
 8007316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800731a:	4770      	bx	lr

0800731c <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800731c:	b580      	push	{r7, lr}
 800731e:	b084      	sub	sp, #16
 8007320:	af00      	add	r7, sp, #0
 8007322:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800732a:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800732c:	2301      	movs	r3, #1
 800732e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007336:	2b00      	cmp	r3, #0
 8007338:	d101      	bne.n	800733e <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800733a:	2303      	movs	r3, #3
 800733c:	e01a      	b.n	8007374 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800733e:	68bb      	ldr	r3, [r7, #8]
 8007340:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007344:	2b00      	cmp	r3, #0
 8007346:	d114      	bne.n	8007372 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8007348:	68bb      	ldr	r3, [r7, #8]
 800734a:	2201      	movs	r2, #1
 800734c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8007350:	68bb      	ldr	r3, [r7, #8]
 8007352:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800735a:	68bb      	ldr	r3, [r7, #8]
 800735c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8007360:	68bb      	ldr	r3, [r7, #8]
 8007362:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8007366:	2181      	movs	r1, #129	; 0x81
 8007368:	6878      	ldr	r0, [r7, #4]
 800736a:	f001 ff28 	bl	80091be <USBD_LL_Transmit>

    ret = USBD_OK;
 800736e:	2300      	movs	r3, #0
 8007370:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8007372:	7bfb      	ldrb	r3, [r7, #15]
}
 8007374:	4618      	mov	r0, r3
 8007376:	3710      	adds	r7, #16
 8007378:	46bd      	mov	sp, r7
 800737a:	bd80      	pop	{r7, pc}

0800737c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800737c:	b580      	push	{r7, lr}
 800737e:	b084      	sub	sp, #16
 8007380:	af00      	add	r7, sp, #0
 8007382:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800738a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007392:	2b00      	cmp	r3, #0
 8007394:	d101      	bne.n	800739a <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8007396:	2303      	movs	r3, #3
 8007398:	e016      	b.n	80073c8 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	7c1b      	ldrb	r3, [r3, #16]
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d109      	bne.n	80073b6 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80073a8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80073ac:	2101      	movs	r1, #1
 80073ae:	6878      	ldr	r0, [r7, #4]
 80073b0:	f001 ff26 	bl	8009200 <USBD_LL_PrepareReceive>
 80073b4:	e007      	b.n	80073c6 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80073bc:	2340      	movs	r3, #64	; 0x40
 80073be:	2101      	movs	r1, #1
 80073c0:	6878      	ldr	r0, [r7, #4]
 80073c2:	f001 ff1d 	bl	8009200 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80073c6:	2300      	movs	r3, #0
}
 80073c8:	4618      	mov	r0, r3
 80073ca:	3710      	adds	r7, #16
 80073cc:	46bd      	mov	sp, r7
 80073ce:	bd80      	pop	{r7, pc}

080073d0 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80073d0:	b580      	push	{r7, lr}
 80073d2:	b086      	sub	sp, #24
 80073d4:	af00      	add	r7, sp, #0
 80073d6:	60f8      	str	r0, [r7, #12]
 80073d8:	60b9      	str	r1, [r7, #8]
 80073da:	4613      	mov	r3, r2
 80073dc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d101      	bne.n	80073e8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80073e4:	2303      	movs	r3, #3
 80073e6:	e01f      	b.n	8007428 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	2200      	movs	r2, #0
 80073ec:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	2200      	movs	r2, #0
 80073f4:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	2200      	movs	r2, #0
 80073fc:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007400:	68bb      	ldr	r3, [r7, #8]
 8007402:	2b00      	cmp	r3, #0
 8007404:	d003      	beq.n	800740e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	68ba      	ldr	r2, [r7, #8]
 800740a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	2201      	movs	r2, #1
 8007412:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	79fa      	ldrb	r2, [r7, #7]
 800741a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800741c:	68f8      	ldr	r0, [r7, #12]
 800741e:	f001 fd99 	bl	8008f54 <USBD_LL_Init>
 8007422:	4603      	mov	r3, r0
 8007424:	75fb      	strb	r3, [r7, #23]

  return ret;
 8007426:	7dfb      	ldrb	r3, [r7, #23]
}
 8007428:	4618      	mov	r0, r3
 800742a:	3718      	adds	r7, #24
 800742c:	46bd      	mov	sp, r7
 800742e:	bd80      	pop	{r7, pc}

08007430 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007430:	b580      	push	{r7, lr}
 8007432:	b084      	sub	sp, #16
 8007434:	af00      	add	r7, sp, #0
 8007436:	6078      	str	r0, [r7, #4]
 8007438:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800743a:	2300      	movs	r3, #0
 800743c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800743e:	683b      	ldr	r3, [r7, #0]
 8007440:	2b00      	cmp	r3, #0
 8007442:	d101      	bne.n	8007448 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8007444:	2303      	movs	r3, #3
 8007446:	e016      	b.n	8007476 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	683a      	ldr	r2, [r7, #0]
 800744c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007456:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007458:	2b00      	cmp	r3, #0
 800745a:	d00b      	beq.n	8007474 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007462:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007464:	f107 020e 	add.w	r2, r7, #14
 8007468:	4610      	mov	r0, r2
 800746a:	4798      	blx	r3
 800746c:	4602      	mov	r2, r0
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8007474:	2300      	movs	r3, #0
}
 8007476:	4618      	mov	r0, r3
 8007478:	3710      	adds	r7, #16
 800747a:	46bd      	mov	sp, r7
 800747c:	bd80      	pop	{r7, pc}

0800747e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800747e:	b580      	push	{r7, lr}
 8007480:	b082      	sub	sp, #8
 8007482:	af00      	add	r7, sp, #0
 8007484:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007486:	6878      	ldr	r0, [r7, #4]
 8007488:	f001 fdb0 	bl	8008fec <USBD_LL_Start>
 800748c:	4603      	mov	r3, r0
}
 800748e:	4618      	mov	r0, r3
 8007490:	3708      	adds	r7, #8
 8007492:	46bd      	mov	sp, r7
 8007494:	bd80      	pop	{r7, pc}

08007496 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8007496:	b480      	push	{r7}
 8007498:	b083      	sub	sp, #12
 800749a:	af00      	add	r7, sp, #0
 800749c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800749e:	2300      	movs	r3, #0
}
 80074a0:	4618      	mov	r0, r3
 80074a2:	370c      	adds	r7, #12
 80074a4:	46bd      	mov	sp, r7
 80074a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074aa:	4770      	bx	lr

080074ac <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80074ac:	b580      	push	{r7, lr}
 80074ae:	b084      	sub	sp, #16
 80074b0:	af00      	add	r7, sp, #0
 80074b2:	6078      	str	r0, [r7, #4]
 80074b4:	460b      	mov	r3, r1
 80074b6:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80074b8:	2303      	movs	r3, #3
 80074ba:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d009      	beq.n	80074da <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	78fa      	ldrb	r2, [r7, #3]
 80074d0:	4611      	mov	r1, r2
 80074d2:	6878      	ldr	r0, [r7, #4]
 80074d4:	4798      	blx	r3
 80074d6:	4603      	mov	r3, r0
 80074d8:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80074da:	7bfb      	ldrb	r3, [r7, #15]
}
 80074dc:	4618      	mov	r0, r3
 80074de:	3710      	adds	r7, #16
 80074e0:	46bd      	mov	sp, r7
 80074e2:	bd80      	pop	{r7, pc}

080074e4 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80074e4:	b580      	push	{r7, lr}
 80074e6:	b082      	sub	sp, #8
 80074e8:	af00      	add	r7, sp, #0
 80074ea:	6078      	str	r0, [r7, #4]
 80074ec:	460b      	mov	r3, r1
 80074ee:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d007      	beq.n	800750a <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007500:	685b      	ldr	r3, [r3, #4]
 8007502:	78fa      	ldrb	r2, [r7, #3]
 8007504:	4611      	mov	r1, r2
 8007506:	6878      	ldr	r0, [r7, #4]
 8007508:	4798      	blx	r3
  }

  return USBD_OK;
 800750a:	2300      	movs	r3, #0
}
 800750c:	4618      	mov	r0, r3
 800750e:	3708      	adds	r7, #8
 8007510:	46bd      	mov	sp, r7
 8007512:	bd80      	pop	{r7, pc}

08007514 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007514:	b580      	push	{r7, lr}
 8007516:	b084      	sub	sp, #16
 8007518:	af00      	add	r7, sp, #0
 800751a:	6078      	str	r0, [r7, #4]
 800751c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007524:	6839      	ldr	r1, [r7, #0]
 8007526:	4618      	mov	r0, r3
 8007528:	f000 ff90 	bl	800844c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	2201      	movs	r2, #1
 8007530:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800753a:	461a      	mov	r2, r3
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007548:	f003 031f 	and.w	r3, r3, #31
 800754c:	2b02      	cmp	r3, #2
 800754e:	d01a      	beq.n	8007586 <USBD_LL_SetupStage+0x72>
 8007550:	2b02      	cmp	r3, #2
 8007552:	d822      	bhi.n	800759a <USBD_LL_SetupStage+0x86>
 8007554:	2b00      	cmp	r3, #0
 8007556:	d002      	beq.n	800755e <USBD_LL_SetupStage+0x4a>
 8007558:	2b01      	cmp	r3, #1
 800755a:	d00a      	beq.n	8007572 <USBD_LL_SetupStage+0x5e>
 800755c:	e01d      	b.n	800759a <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007564:	4619      	mov	r1, r3
 8007566:	6878      	ldr	r0, [r7, #4]
 8007568:	f000 fa62 	bl	8007a30 <USBD_StdDevReq>
 800756c:	4603      	mov	r3, r0
 800756e:	73fb      	strb	r3, [r7, #15]
      break;
 8007570:	e020      	b.n	80075b4 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007578:	4619      	mov	r1, r3
 800757a:	6878      	ldr	r0, [r7, #4]
 800757c:	f000 fac6 	bl	8007b0c <USBD_StdItfReq>
 8007580:	4603      	mov	r3, r0
 8007582:	73fb      	strb	r3, [r7, #15]
      break;
 8007584:	e016      	b.n	80075b4 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800758c:	4619      	mov	r1, r3
 800758e:	6878      	ldr	r0, [r7, #4]
 8007590:	f000 fb05 	bl	8007b9e <USBD_StdEPReq>
 8007594:	4603      	mov	r3, r0
 8007596:	73fb      	strb	r3, [r7, #15]
      break;
 8007598:	e00c      	b.n	80075b4 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80075a0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80075a4:	b2db      	uxtb	r3, r3
 80075a6:	4619      	mov	r1, r3
 80075a8:	6878      	ldr	r0, [r7, #4]
 80075aa:	f001 fd7f 	bl	80090ac <USBD_LL_StallEP>
 80075ae:	4603      	mov	r3, r0
 80075b0:	73fb      	strb	r3, [r7, #15]
      break;
 80075b2:	bf00      	nop
  }

  return ret;
 80075b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80075b6:	4618      	mov	r0, r3
 80075b8:	3710      	adds	r7, #16
 80075ba:	46bd      	mov	sp, r7
 80075bc:	bd80      	pop	{r7, pc}

080075be <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80075be:	b580      	push	{r7, lr}
 80075c0:	b086      	sub	sp, #24
 80075c2:	af00      	add	r7, sp, #0
 80075c4:	60f8      	str	r0, [r7, #12]
 80075c6:	460b      	mov	r3, r1
 80075c8:	607a      	str	r2, [r7, #4]
 80075ca:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80075cc:	7afb      	ldrb	r3, [r7, #11]
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d138      	bne.n	8007644 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80075d8:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80075e0:	2b03      	cmp	r3, #3
 80075e2:	d14a      	bne.n	800767a <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 80075e4:	693b      	ldr	r3, [r7, #16]
 80075e6:	689a      	ldr	r2, [r3, #8]
 80075e8:	693b      	ldr	r3, [r7, #16]
 80075ea:	68db      	ldr	r3, [r3, #12]
 80075ec:	429a      	cmp	r2, r3
 80075ee:	d913      	bls.n	8007618 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80075f0:	693b      	ldr	r3, [r7, #16]
 80075f2:	689a      	ldr	r2, [r3, #8]
 80075f4:	693b      	ldr	r3, [r7, #16]
 80075f6:	68db      	ldr	r3, [r3, #12]
 80075f8:	1ad2      	subs	r2, r2, r3
 80075fa:	693b      	ldr	r3, [r7, #16]
 80075fc:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80075fe:	693b      	ldr	r3, [r7, #16]
 8007600:	68da      	ldr	r2, [r3, #12]
 8007602:	693b      	ldr	r3, [r7, #16]
 8007604:	689b      	ldr	r3, [r3, #8]
 8007606:	4293      	cmp	r3, r2
 8007608:	bf28      	it	cs
 800760a:	4613      	movcs	r3, r2
 800760c:	461a      	mov	r2, r3
 800760e:	6879      	ldr	r1, [r7, #4]
 8007610:	68f8      	ldr	r0, [r7, #12]
 8007612:	f001 f80f 	bl	8008634 <USBD_CtlContinueRx>
 8007616:	e030      	b.n	800767a <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800761e:	b2db      	uxtb	r3, r3
 8007620:	2b03      	cmp	r3, #3
 8007622:	d10b      	bne.n	800763c <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800762a:	691b      	ldr	r3, [r3, #16]
 800762c:	2b00      	cmp	r3, #0
 800762e:	d005      	beq.n	800763c <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007636:	691b      	ldr	r3, [r3, #16]
 8007638:	68f8      	ldr	r0, [r7, #12]
 800763a:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800763c:	68f8      	ldr	r0, [r7, #12]
 800763e:	f001 f80a 	bl	8008656 <USBD_CtlSendStatus>
 8007642:	e01a      	b.n	800767a <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800764a:	b2db      	uxtb	r3, r3
 800764c:	2b03      	cmp	r3, #3
 800764e:	d114      	bne.n	800767a <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007656:	699b      	ldr	r3, [r3, #24]
 8007658:	2b00      	cmp	r3, #0
 800765a:	d00e      	beq.n	800767a <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007662:	699b      	ldr	r3, [r3, #24]
 8007664:	7afa      	ldrb	r2, [r7, #11]
 8007666:	4611      	mov	r1, r2
 8007668:	68f8      	ldr	r0, [r7, #12]
 800766a:	4798      	blx	r3
 800766c:	4603      	mov	r3, r0
 800766e:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8007670:	7dfb      	ldrb	r3, [r7, #23]
 8007672:	2b00      	cmp	r3, #0
 8007674:	d001      	beq.n	800767a <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8007676:	7dfb      	ldrb	r3, [r7, #23]
 8007678:	e000      	b.n	800767c <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800767a:	2300      	movs	r3, #0
}
 800767c:	4618      	mov	r0, r3
 800767e:	3718      	adds	r7, #24
 8007680:	46bd      	mov	sp, r7
 8007682:	bd80      	pop	{r7, pc}

08007684 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007684:	b580      	push	{r7, lr}
 8007686:	b086      	sub	sp, #24
 8007688:	af00      	add	r7, sp, #0
 800768a:	60f8      	str	r0, [r7, #12]
 800768c:	460b      	mov	r3, r1
 800768e:	607a      	str	r2, [r7, #4]
 8007690:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8007692:	7afb      	ldrb	r3, [r7, #11]
 8007694:	2b00      	cmp	r3, #0
 8007696:	d16b      	bne.n	8007770 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	3314      	adds	r3, #20
 800769c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80076a4:	2b02      	cmp	r3, #2
 80076a6:	d156      	bne.n	8007756 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 80076a8:	693b      	ldr	r3, [r7, #16]
 80076aa:	689a      	ldr	r2, [r3, #8]
 80076ac:	693b      	ldr	r3, [r7, #16]
 80076ae:	68db      	ldr	r3, [r3, #12]
 80076b0:	429a      	cmp	r2, r3
 80076b2:	d914      	bls.n	80076de <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80076b4:	693b      	ldr	r3, [r7, #16]
 80076b6:	689a      	ldr	r2, [r3, #8]
 80076b8:	693b      	ldr	r3, [r7, #16]
 80076ba:	68db      	ldr	r3, [r3, #12]
 80076bc:	1ad2      	subs	r2, r2, r3
 80076be:	693b      	ldr	r3, [r7, #16]
 80076c0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80076c2:	693b      	ldr	r3, [r7, #16]
 80076c4:	689b      	ldr	r3, [r3, #8]
 80076c6:	461a      	mov	r2, r3
 80076c8:	6879      	ldr	r1, [r7, #4]
 80076ca:	68f8      	ldr	r0, [r7, #12]
 80076cc:	f000 ff84 	bl	80085d8 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80076d0:	2300      	movs	r3, #0
 80076d2:	2200      	movs	r2, #0
 80076d4:	2100      	movs	r1, #0
 80076d6:	68f8      	ldr	r0, [r7, #12]
 80076d8:	f001 fd92 	bl	8009200 <USBD_LL_PrepareReceive>
 80076dc:	e03b      	b.n	8007756 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80076de:	693b      	ldr	r3, [r7, #16]
 80076e0:	68da      	ldr	r2, [r3, #12]
 80076e2:	693b      	ldr	r3, [r7, #16]
 80076e4:	689b      	ldr	r3, [r3, #8]
 80076e6:	429a      	cmp	r2, r3
 80076e8:	d11c      	bne.n	8007724 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80076ea:	693b      	ldr	r3, [r7, #16]
 80076ec:	685a      	ldr	r2, [r3, #4]
 80076ee:	693b      	ldr	r3, [r7, #16]
 80076f0:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80076f2:	429a      	cmp	r2, r3
 80076f4:	d316      	bcc.n	8007724 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80076f6:	693b      	ldr	r3, [r7, #16]
 80076f8:	685a      	ldr	r2, [r3, #4]
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007700:	429a      	cmp	r2, r3
 8007702:	d20f      	bcs.n	8007724 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007704:	2200      	movs	r2, #0
 8007706:	2100      	movs	r1, #0
 8007708:	68f8      	ldr	r0, [r7, #12]
 800770a:	f000 ff65 	bl	80085d8 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	2200      	movs	r2, #0
 8007712:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007716:	2300      	movs	r3, #0
 8007718:	2200      	movs	r2, #0
 800771a:	2100      	movs	r1, #0
 800771c:	68f8      	ldr	r0, [r7, #12]
 800771e:	f001 fd6f 	bl	8009200 <USBD_LL_PrepareReceive>
 8007722:	e018      	b.n	8007756 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800772a:	b2db      	uxtb	r3, r3
 800772c:	2b03      	cmp	r3, #3
 800772e:	d10b      	bne.n	8007748 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007736:	68db      	ldr	r3, [r3, #12]
 8007738:	2b00      	cmp	r3, #0
 800773a:	d005      	beq.n	8007748 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007742:	68db      	ldr	r3, [r3, #12]
 8007744:	68f8      	ldr	r0, [r7, #12]
 8007746:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007748:	2180      	movs	r1, #128	; 0x80
 800774a:	68f8      	ldr	r0, [r7, #12]
 800774c:	f001 fcae 	bl	80090ac <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8007750:	68f8      	ldr	r0, [r7, #12]
 8007752:	f000 ff93 	bl	800867c <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800775c:	2b01      	cmp	r3, #1
 800775e:	d122      	bne.n	80077a6 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8007760:	68f8      	ldr	r0, [r7, #12]
 8007762:	f7ff fe98 	bl	8007496 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	2200      	movs	r2, #0
 800776a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800776e:	e01a      	b.n	80077a6 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007776:	b2db      	uxtb	r3, r3
 8007778:	2b03      	cmp	r3, #3
 800777a:	d114      	bne.n	80077a6 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007782:	695b      	ldr	r3, [r3, #20]
 8007784:	2b00      	cmp	r3, #0
 8007786:	d00e      	beq.n	80077a6 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800778e:	695b      	ldr	r3, [r3, #20]
 8007790:	7afa      	ldrb	r2, [r7, #11]
 8007792:	4611      	mov	r1, r2
 8007794:	68f8      	ldr	r0, [r7, #12]
 8007796:	4798      	blx	r3
 8007798:	4603      	mov	r3, r0
 800779a:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800779c:	7dfb      	ldrb	r3, [r7, #23]
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d001      	beq.n	80077a6 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 80077a2:	7dfb      	ldrb	r3, [r7, #23]
 80077a4:	e000      	b.n	80077a8 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 80077a6:	2300      	movs	r3, #0
}
 80077a8:	4618      	mov	r0, r3
 80077aa:	3718      	adds	r7, #24
 80077ac:	46bd      	mov	sp, r7
 80077ae:	bd80      	pop	{r7, pc}

080077b0 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80077b0:	b580      	push	{r7, lr}
 80077b2:	b082      	sub	sp, #8
 80077b4:	af00      	add	r7, sp, #0
 80077b6:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	2201      	movs	r2, #1
 80077bc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	2200      	movs	r2, #0
 80077c4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	2200      	movs	r2, #0
 80077cc:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	2200      	movs	r2, #0
 80077d2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d101      	bne.n	80077e4 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 80077e0:	2303      	movs	r3, #3
 80077e2:	e02f      	b.n	8007844 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d00f      	beq.n	800780e <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80077f4:	685b      	ldr	r3, [r3, #4]
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d009      	beq.n	800780e <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007800:	685b      	ldr	r3, [r3, #4]
 8007802:	687a      	ldr	r2, [r7, #4]
 8007804:	6852      	ldr	r2, [r2, #4]
 8007806:	b2d2      	uxtb	r2, r2
 8007808:	4611      	mov	r1, r2
 800780a:	6878      	ldr	r0, [r7, #4]
 800780c:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800780e:	2340      	movs	r3, #64	; 0x40
 8007810:	2200      	movs	r2, #0
 8007812:	2100      	movs	r1, #0
 8007814:	6878      	ldr	r0, [r7, #4]
 8007816:	f001 fc04 	bl	8009022 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	2201      	movs	r2, #1
 800781e:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	2240      	movs	r2, #64	; 0x40
 8007826:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800782a:	2340      	movs	r3, #64	; 0x40
 800782c:	2200      	movs	r2, #0
 800782e:	2180      	movs	r1, #128	; 0x80
 8007830:	6878      	ldr	r0, [r7, #4]
 8007832:	f001 fbf6 	bl	8009022 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	2201      	movs	r2, #1
 800783a:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	2240      	movs	r2, #64	; 0x40
 8007840:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8007842:	2300      	movs	r3, #0
}
 8007844:	4618      	mov	r0, r3
 8007846:	3708      	adds	r7, #8
 8007848:	46bd      	mov	sp, r7
 800784a:	bd80      	pop	{r7, pc}

0800784c <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800784c:	b480      	push	{r7}
 800784e:	b083      	sub	sp, #12
 8007850:	af00      	add	r7, sp, #0
 8007852:	6078      	str	r0, [r7, #4]
 8007854:	460b      	mov	r3, r1
 8007856:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	78fa      	ldrb	r2, [r7, #3]
 800785c:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800785e:	2300      	movs	r3, #0
}
 8007860:	4618      	mov	r0, r3
 8007862:	370c      	adds	r7, #12
 8007864:	46bd      	mov	sp, r7
 8007866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800786a:	4770      	bx	lr

0800786c <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800786c:	b480      	push	{r7}
 800786e:	b083      	sub	sp, #12
 8007870:	af00      	add	r7, sp, #0
 8007872:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800787a:	b2da      	uxtb	r2, r3
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	2204      	movs	r2, #4
 8007886:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800788a:	2300      	movs	r3, #0
}
 800788c:	4618      	mov	r0, r3
 800788e:	370c      	adds	r7, #12
 8007890:	46bd      	mov	sp, r7
 8007892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007896:	4770      	bx	lr

08007898 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007898:	b480      	push	{r7}
 800789a:	b083      	sub	sp, #12
 800789c:	af00      	add	r7, sp, #0
 800789e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80078a6:	b2db      	uxtb	r3, r3
 80078a8:	2b04      	cmp	r3, #4
 80078aa:	d106      	bne.n	80078ba <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80078b2:	b2da      	uxtb	r2, r3
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80078ba:	2300      	movs	r3, #0
}
 80078bc:	4618      	mov	r0, r3
 80078be:	370c      	adds	r7, #12
 80078c0:	46bd      	mov	sp, r7
 80078c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c6:	4770      	bx	lr

080078c8 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80078c8:	b580      	push	{r7, lr}
 80078ca:	b082      	sub	sp, #8
 80078cc:	af00      	add	r7, sp, #0
 80078ce:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d101      	bne.n	80078de <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 80078da:	2303      	movs	r3, #3
 80078dc:	e012      	b.n	8007904 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80078e4:	b2db      	uxtb	r3, r3
 80078e6:	2b03      	cmp	r3, #3
 80078e8:	d10b      	bne.n	8007902 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80078f0:	69db      	ldr	r3, [r3, #28]
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d005      	beq.n	8007902 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80078fc:	69db      	ldr	r3, [r3, #28]
 80078fe:	6878      	ldr	r0, [r7, #4]
 8007900:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007902:	2300      	movs	r3, #0
}
 8007904:	4618      	mov	r0, r3
 8007906:	3708      	adds	r7, #8
 8007908:	46bd      	mov	sp, r7
 800790a:	bd80      	pop	{r7, pc}

0800790c <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800790c:	b580      	push	{r7, lr}
 800790e:	b082      	sub	sp, #8
 8007910:	af00      	add	r7, sp, #0
 8007912:	6078      	str	r0, [r7, #4]
 8007914:	460b      	mov	r3, r1
 8007916:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800791e:	2b00      	cmp	r3, #0
 8007920:	d101      	bne.n	8007926 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 8007922:	2303      	movs	r3, #3
 8007924:	e014      	b.n	8007950 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800792c:	b2db      	uxtb	r3, r3
 800792e:	2b03      	cmp	r3, #3
 8007930:	d10d      	bne.n	800794e <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007938:	6a1b      	ldr	r3, [r3, #32]
 800793a:	2b00      	cmp	r3, #0
 800793c:	d007      	beq.n	800794e <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007944:	6a1b      	ldr	r3, [r3, #32]
 8007946:	78fa      	ldrb	r2, [r7, #3]
 8007948:	4611      	mov	r1, r2
 800794a:	6878      	ldr	r0, [r7, #4]
 800794c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800794e:	2300      	movs	r3, #0
}
 8007950:	4618      	mov	r0, r3
 8007952:	3708      	adds	r7, #8
 8007954:	46bd      	mov	sp, r7
 8007956:	bd80      	pop	{r7, pc}

08007958 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8007958:	b580      	push	{r7, lr}
 800795a:	b082      	sub	sp, #8
 800795c:	af00      	add	r7, sp, #0
 800795e:	6078      	str	r0, [r7, #4]
 8007960:	460b      	mov	r3, r1
 8007962:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800796a:	2b00      	cmp	r3, #0
 800796c:	d101      	bne.n	8007972 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 800796e:	2303      	movs	r3, #3
 8007970:	e014      	b.n	800799c <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007978:	b2db      	uxtb	r3, r3
 800797a:	2b03      	cmp	r3, #3
 800797c:	d10d      	bne.n	800799a <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007984:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007986:	2b00      	cmp	r3, #0
 8007988:	d007      	beq.n	800799a <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007992:	78fa      	ldrb	r2, [r7, #3]
 8007994:	4611      	mov	r1, r2
 8007996:	6878      	ldr	r0, [r7, #4]
 8007998:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800799a:	2300      	movs	r3, #0
}
 800799c:	4618      	mov	r0, r3
 800799e:	3708      	adds	r7, #8
 80079a0:	46bd      	mov	sp, r7
 80079a2:	bd80      	pop	{r7, pc}

080079a4 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80079a4:	b480      	push	{r7}
 80079a6:	b083      	sub	sp, #12
 80079a8:	af00      	add	r7, sp, #0
 80079aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80079ac:	2300      	movs	r3, #0
}
 80079ae:	4618      	mov	r0, r3
 80079b0:	370c      	adds	r7, #12
 80079b2:	46bd      	mov	sp, r7
 80079b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b8:	4770      	bx	lr

080079ba <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80079ba:	b580      	push	{r7, lr}
 80079bc:	b082      	sub	sp, #8
 80079be:	af00      	add	r7, sp, #0
 80079c0:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	2201      	movs	r2, #1
 80079c6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d009      	beq.n	80079e8 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80079da:	685b      	ldr	r3, [r3, #4]
 80079dc:	687a      	ldr	r2, [r7, #4]
 80079de:	6852      	ldr	r2, [r2, #4]
 80079e0:	b2d2      	uxtb	r2, r2
 80079e2:	4611      	mov	r1, r2
 80079e4:	6878      	ldr	r0, [r7, #4]
 80079e6:	4798      	blx	r3
  }

  return USBD_OK;
 80079e8:	2300      	movs	r3, #0
}
 80079ea:	4618      	mov	r0, r3
 80079ec:	3708      	adds	r7, #8
 80079ee:	46bd      	mov	sp, r7
 80079f0:	bd80      	pop	{r7, pc}

080079f2 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80079f2:	b480      	push	{r7}
 80079f4:	b087      	sub	sp, #28
 80079f6:	af00      	add	r7, sp, #0
 80079f8:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80079fe:	697b      	ldr	r3, [r7, #20]
 8007a00:	781b      	ldrb	r3, [r3, #0]
 8007a02:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007a04:	697b      	ldr	r3, [r7, #20]
 8007a06:	3301      	adds	r3, #1
 8007a08:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8007a0a:	697b      	ldr	r3, [r7, #20]
 8007a0c:	781b      	ldrb	r3, [r3, #0]
 8007a0e:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8007a10:	8a3b      	ldrh	r3, [r7, #16]
 8007a12:	021b      	lsls	r3, r3, #8
 8007a14:	b21a      	sxth	r2, r3
 8007a16:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007a1a:	4313      	orrs	r3, r2
 8007a1c:	b21b      	sxth	r3, r3
 8007a1e:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8007a20:	89fb      	ldrh	r3, [r7, #14]
}
 8007a22:	4618      	mov	r0, r3
 8007a24:	371c      	adds	r7, #28
 8007a26:	46bd      	mov	sp, r7
 8007a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a2c:	4770      	bx	lr
	...

08007a30 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007a30:	b580      	push	{r7, lr}
 8007a32:	b084      	sub	sp, #16
 8007a34:	af00      	add	r7, sp, #0
 8007a36:	6078      	str	r0, [r7, #4]
 8007a38:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007a3a:	2300      	movs	r3, #0
 8007a3c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007a3e:	683b      	ldr	r3, [r7, #0]
 8007a40:	781b      	ldrb	r3, [r3, #0]
 8007a42:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007a46:	2b40      	cmp	r3, #64	; 0x40
 8007a48:	d005      	beq.n	8007a56 <USBD_StdDevReq+0x26>
 8007a4a:	2b40      	cmp	r3, #64	; 0x40
 8007a4c:	d853      	bhi.n	8007af6 <USBD_StdDevReq+0xc6>
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d00b      	beq.n	8007a6a <USBD_StdDevReq+0x3a>
 8007a52:	2b20      	cmp	r3, #32
 8007a54:	d14f      	bne.n	8007af6 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a5c:	689b      	ldr	r3, [r3, #8]
 8007a5e:	6839      	ldr	r1, [r7, #0]
 8007a60:	6878      	ldr	r0, [r7, #4]
 8007a62:	4798      	blx	r3
 8007a64:	4603      	mov	r3, r0
 8007a66:	73fb      	strb	r3, [r7, #15]
      break;
 8007a68:	e04a      	b.n	8007b00 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007a6a:	683b      	ldr	r3, [r7, #0]
 8007a6c:	785b      	ldrb	r3, [r3, #1]
 8007a6e:	2b09      	cmp	r3, #9
 8007a70:	d83b      	bhi.n	8007aea <USBD_StdDevReq+0xba>
 8007a72:	a201      	add	r2, pc, #4	; (adr r2, 8007a78 <USBD_StdDevReq+0x48>)
 8007a74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a78:	08007acd 	.word	0x08007acd
 8007a7c:	08007ae1 	.word	0x08007ae1
 8007a80:	08007aeb 	.word	0x08007aeb
 8007a84:	08007ad7 	.word	0x08007ad7
 8007a88:	08007aeb 	.word	0x08007aeb
 8007a8c:	08007aab 	.word	0x08007aab
 8007a90:	08007aa1 	.word	0x08007aa1
 8007a94:	08007aeb 	.word	0x08007aeb
 8007a98:	08007ac3 	.word	0x08007ac3
 8007a9c:	08007ab5 	.word	0x08007ab5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007aa0:	6839      	ldr	r1, [r7, #0]
 8007aa2:	6878      	ldr	r0, [r7, #4]
 8007aa4:	f000 f9de 	bl	8007e64 <USBD_GetDescriptor>
          break;
 8007aa8:	e024      	b.n	8007af4 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007aaa:	6839      	ldr	r1, [r7, #0]
 8007aac:	6878      	ldr	r0, [r7, #4]
 8007aae:	f000 fb43 	bl	8008138 <USBD_SetAddress>
          break;
 8007ab2:	e01f      	b.n	8007af4 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8007ab4:	6839      	ldr	r1, [r7, #0]
 8007ab6:	6878      	ldr	r0, [r7, #4]
 8007ab8:	f000 fb82 	bl	80081c0 <USBD_SetConfig>
 8007abc:	4603      	mov	r3, r0
 8007abe:	73fb      	strb	r3, [r7, #15]
          break;
 8007ac0:	e018      	b.n	8007af4 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007ac2:	6839      	ldr	r1, [r7, #0]
 8007ac4:	6878      	ldr	r0, [r7, #4]
 8007ac6:	f000 fc21 	bl	800830c <USBD_GetConfig>
          break;
 8007aca:	e013      	b.n	8007af4 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007acc:	6839      	ldr	r1, [r7, #0]
 8007ace:	6878      	ldr	r0, [r7, #4]
 8007ad0:	f000 fc52 	bl	8008378 <USBD_GetStatus>
          break;
 8007ad4:	e00e      	b.n	8007af4 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007ad6:	6839      	ldr	r1, [r7, #0]
 8007ad8:	6878      	ldr	r0, [r7, #4]
 8007ada:	f000 fc81 	bl	80083e0 <USBD_SetFeature>
          break;
 8007ade:	e009      	b.n	8007af4 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007ae0:	6839      	ldr	r1, [r7, #0]
 8007ae2:	6878      	ldr	r0, [r7, #4]
 8007ae4:	f000 fc90 	bl	8008408 <USBD_ClrFeature>
          break;
 8007ae8:	e004      	b.n	8007af4 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8007aea:	6839      	ldr	r1, [r7, #0]
 8007aec:	6878      	ldr	r0, [r7, #4]
 8007aee:	f000 fce7 	bl	80084c0 <USBD_CtlError>
          break;
 8007af2:	bf00      	nop
      }
      break;
 8007af4:	e004      	b.n	8007b00 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8007af6:	6839      	ldr	r1, [r7, #0]
 8007af8:	6878      	ldr	r0, [r7, #4]
 8007afa:	f000 fce1 	bl	80084c0 <USBD_CtlError>
      break;
 8007afe:	bf00      	nop
  }

  return ret;
 8007b00:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b02:	4618      	mov	r0, r3
 8007b04:	3710      	adds	r7, #16
 8007b06:	46bd      	mov	sp, r7
 8007b08:	bd80      	pop	{r7, pc}
 8007b0a:	bf00      	nop

08007b0c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007b0c:	b580      	push	{r7, lr}
 8007b0e:	b084      	sub	sp, #16
 8007b10:	af00      	add	r7, sp, #0
 8007b12:	6078      	str	r0, [r7, #4]
 8007b14:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007b16:	2300      	movs	r3, #0
 8007b18:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007b1a:	683b      	ldr	r3, [r7, #0]
 8007b1c:	781b      	ldrb	r3, [r3, #0]
 8007b1e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007b22:	2b40      	cmp	r3, #64	; 0x40
 8007b24:	d005      	beq.n	8007b32 <USBD_StdItfReq+0x26>
 8007b26:	2b40      	cmp	r3, #64	; 0x40
 8007b28:	d82f      	bhi.n	8007b8a <USBD_StdItfReq+0x7e>
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d001      	beq.n	8007b32 <USBD_StdItfReq+0x26>
 8007b2e:	2b20      	cmp	r3, #32
 8007b30:	d12b      	bne.n	8007b8a <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b38:	b2db      	uxtb	r3, r3
 8007b3a:	3b01      	subs	r3, #1
 8007b3c:	2b02      	cmp	r3, #2
 8007b3e:	d81d      	bhi.n	8007b7c <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007b40:	683b      	ldr	r3, [r7, #0]
 8007b42:	889b      	ldrh	r3, [r3, #4]
 8007b44:	b2db      	uxtb	r3, r3
 8007b46:	2b01      	cmp	r3, #1
 8007b48:	d813      	bhi.n	8007b72 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b50:	689b      	ldr	r3, [r3, #8]
 8007b52:	6839      	ldr	r1, [r7, #0]
 8007b54:	6878      	ldr	r0, [r7, #4]
 8007b56:	4798      	blx	r3
 8007b58:	4603      	mov	r3, r0
 8007b5a:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007b5c:	683b      	ldr	r3, [r7, #0]
 8007b5e:	88db      	ldrh	r3, [r3, #6]
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d110      	bne.n	8007b86 <USBD_StdItfReq+0x7a>
 8007b64:	7bfb      	ldrb	r3, [r7, #15]
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d10d      	bne.n	8007b86 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8007b6a:	6878      	ldr	r0, [r7, #4]
 8007b6c:	f000 fd73 	bl	8008656 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007b70:	e009      	b.n	8007b86 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8007b72:	6839      	ldr	r1, [r7, #0]
 8007b74:	6878      	ldr	r0, [r7, #4]
 8007b76:	f000 fca3 	bl	80084c0 <USBD_CtlError>
          break;
 8007b7a:	e004      	b.n	8007b86 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8007b7c:	6839      	ldr	r1, [r7, #0]
 8007b7e:	6878      	ldr	r0, [r7, #4]
 8007b80:	f000 fc9e 	bl	80084c0 <USBD_CtlError>
          break;
 8007b84:	e000      	b.n	8007b88 <USBD_StdItfReq+0x7c>
          break;
 8007b86:	bf00      	nop
      }
      break;
 8007b88:	e004      	b.n	8007b94 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8007b8a:	6839      	ldr	r1, [r7, #0]
 8007b8c:	6878      	ldr	r0, [r7, #4]
 8007b8e:	f000 fc97 	bl	80084c0 <USBD_CtlError>
      break;
 8007b92:	bf00      	nop
  }

  return ret;
 8007b94:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b96:	4618      	mov	r0, r3
 8007b98:	3710      	adds	r7, #16
 8007b9a:	46bd      	mov	sp, r7
 8007b9c:	bd80      	pop	{r7, pc}

08007b9e <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007b9e:	b580      	push	{r7, lr}
 8007ba0:	b084      	sub	sp, #16
 8007ba2:	af00      	add	r7, sp, #0
 8007ba4:	6078      	str	r0, [r7, #4]
 8007ba6:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8007ba8:	2300      	movs	r3, #0
 8007baa:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8007bac:	683b      	ldr	r3, [r7, #0]
 8007bae:	889b      	ldrh	r3, [r3, #4]
 8007bb0:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007bb2:	683b      	ldr	r3, [r7, #0]
 8007bb4:	781b      	ldrb	r3, [r3, #0]
 8007bb6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007bba:	2b40      	cmp	r3, #64	; 0x40
 8007bbc:	d007      	beq.n	8007bce <USBD_StdEPReq+0x30>
 8007bbe:	2b40      	cmp	r3, #64	; 0x40
 8007bc0:	f200 8145 	bhi.w	8007e4e <USBD_StdEPReq+0x2b0>
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d00c      	beq.n	8007be2 <USBD_StdEPReq+0x44>
 8007bc8:	2b20      	cmp	r3, #32
 8007bca:	f040 8140 	bne.w	8007e4e <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007bd4:	689b      	ldr	r3, [r3, #8]
 8007bd6:	6839      	ldr	r1, [r7, #0]
 8007bd8:	6878      	ldr	r0, [r7, #4]
 8007bda:	4798      	blx	r3
 8007bdc:	4603      	mov	r3, r0
 8007bde:	73fb      	strb	r3, [r7, #15]
      break;
 8007be0:	e13a      	b.n	8007e58 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007be2:	683b      	ldr	r3, [r7, #0]
 8007be4:	785b      	ldrb	r3, [r3, #1]
 8007be6:	2b03      	cmp	r3, #3
 8007be8:	d007      	beq.n	8007bfa <USBD_StdEPReq+0x5c>
 8007bea:	2b03      	cmp	r3, #3
 8007bec:	f300 8129 	bgt.w	8007e42 <USBD_StdEPReq+0x2a4>
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d07f      	beq.n	8007cf4 <USBD_StdEPReq+0x156>
 8007bf4:	2b01      	cmp	r3, #1
 8007bf6:	d03c      	beq.n	8007c72 <USBD_StdEPReq+0xd4>
 8007bf8:	e123      	b.n	8007e42 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c00:	b2db      	uxtb	r3, r3
 8007c02:	2b02      	cmp	r3, #2
 8007c04:	d002      	beq.n	8007c0c <USBD_StdEPReq+0x6e>
 8007c06:	2b03      	cmp	r3, #3
 8007c08:	d016      	beq.n	8007c38 <USBD_StdEPReq+0x9a>
 8007c0a:	e02c      	b.n	8007c66 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007c0c:	7bbb      	ldrb	r3, [r7, #14]
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d00d      	beq.n	8007c2e <USBD_StdEPReq+0x90>
 8007c12:	7bbb      	ldrb	r3, [r7, #14]
 8007c14:	2b80      	cmp	r3, #128	; 0x80
 8007c16:	d00a      	beq.n	8007c2e <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007c18:	7bbb      	ldrb	r3, [r7, #14]
 8007c1a:	4619      	mov	r1, r3
 8007c1c:	6878      	ldr	r0, [r7, #4]
 8007c1e:	f001 fa45 	bl	80090ac <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007c22:	2180      	movs	r1, #128	; 0x80
 8007c24:	6878      	ldr	r0, [r7, #4]
 8007c26:	f001 fa41 	bl	80090ac <USBD_LL_StallEP>
 8007c2a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007c2c:	e020      	b.n	8007c70 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8007c2e:	6839      	ldr	r1, [r7, #0]
 8007c30:	6878      	ldr	r0, [r7, #4]
 8007c32:	f000 fc45 	bl	80084c0 <USBD_CtlError>
              break;
 8007c36:	e01b      	b.n	8007c70 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007c38:	683b      	ldr	r3, [r7, #0]
 8007c3a:	885b      	ldrh	r3, [r3, #2]
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d10e      	bne.n	8007c5e <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007c40:	7bbb      	ldrb	r3, [r7, #14]
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d00b      	beq.n	8007c5e <USBD_StdEPReq+0xc0>
 8007c46:	7bbb      	ldrb	r3, [r7, #14]
 8007c48:	2b80      	cmp	r3, #128	; 0x80
 8007c4a:	d008      	beq.n	8007c5e <USBD_StdEPReq+0xc0>
 8007c4c:	683b      	ldr	r3, [r7, #0]
 8007c4e:	88db      	ldrh	r3, [r3, #6]
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d104      	bne.n	8007c5e <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8007c54:	7bbb      	ldrb	r3, [r7, #14]
 8007c56:	4619      	mov	r1, r3
 8007c58:	6878      	ldr	r0, [r7, #4]
 8007c5a:	f001 fa27 	bl	80090ac <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8007c5e:	6878      	ldr	r0, [r7, #4]
 8007c60:	f000 fcf9 	bl	8008656 <USBD_CtlSendStatus>

              break;
 8007c64:	e004      	b.n	8007c70 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8007c66:	6839      	ldr	r1, [r7, #0]
 8007c68:	6878      	ldr	r0, [r7, #4]
 8007c6a:	f000 fc29 	bl	80084c0 <USBD_CtlError>
              break;
 8007c6e:	bf00      	nop
          }
          break;
 8007c70:	e0ec      	b.n	8007e4c <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c78:	b2db      	uxtb	r3, r3
 8007c7a:	2b02      	cmp	r3, #2
 8007c7c:	d002      	beq.n	8007c84 <USBD_StdEPReq+0xe6>
 8007c7e:	2b03      	cmp	r3, #3
 8007c80:	d016      	beq.n	8007cb0 <USBD_StdEPReq+0x112>
 8007c82:	e030      	b.n	8007ce6 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007c84:	7bbb      	ldrb	r3, [r7, #14]
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d00d      	beq.n	8007ca6 <USBD_StdEPReq+0x108>
 8007c8a:	7bbb      	ldrb	r3, [r7, #14]
 8007c8c:	2b80      	cmp	r3, #128	; 0x80
 8007c8e:	d00a      	beq.n	8007ca6 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007c90:	7bbb      	ldrb	r3, [r7, #14]
 8007c92:	4619      	mov	r1, r3
 8007c94:	6878      	ldr	r0, [r7, #4]
 8007c96:	f001 fa09 	bl	80090ac <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007c9a:	2180      	movs	r1, #128	; 0x80
 8007c9c:	6878      	ldr	r0, [r7, #4]
 8007c9e:	f001 fa05 	bl	80090ac <USBD_LL_StallEP>
 8007ca2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007ca4:	e025      	b.n	8007cf2 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8007ca6:	6839      	ldr	r1, [r7, #0]
 8007ca8:	6878      	ldr	r0, [r7, #4]
 8007caa:	f000 fc09 	bl	80084c0 <USBD_CtlError>
              break;
 8007cae:	e020      	b.n	8007cf2 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007cb0:	683b      	ldr	r3, [r7, #0]
 8007cb2:	885b      	ldrh	r3, [r3, #2]
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d11b      	bne.n	8007cf0 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007cb8:	7bbb      	ldrb	r3, [r7, #14]
 8007cba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d004      	beq.n	8007ccc <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8007cc2:	7bbb      	ldrb	r3, [r7, #14]
 8007cc4:	4619      	mov	r1, r3
 8007cc6:	6878      	ldr	r0, [r7, #4]
 8007cc8:	f001 fa0f 	bl	80090ea <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8007ccc:	6878      	ldr	r0, [r7, #4]
 8007cce:	f000 fcc2 	bl	8008656 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007cd8:	689b      	ldr	r3, [r3, #8]
 8007cda:	6839      	ldr	r1, [r7, #0]
 8007cdc:	6878      	ldr	r0, [r7, #4]
 8007cde:	4798      	blx	r3
 8007ce0:	4603      	mov	r3, r0
 8007ce2:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8007ce4:	e004      	b.n	8007cf0 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8007ce6:	6839      	ldr	r1, [r7, #0]
 8007ce8:	6878      	ldr	r0, [r7, #4]
 8007cea:	f000 fbe9 	bl	80084c0 <USBD_CtlError>
              break;
 8007cee:	e000      	b.n	8007cf2 <USBD_StdEPReq+0x154>
              break;
 8007cf0:	bf00      	nop
          }
          break;
 8007cf2:	e0ab      	b.n	8007e4c <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007cfa:	b2db      	uxtb	r3, r3
 8007cfc:	2b02      	cmp	r3, #2
 8007cfe:	d002      	beq.n	8007d06 <USBD_StdEPReq+0x168>
 8007d00:	2b03      	cmp	r3, #3
 8007d02:	d032      	beq.n	8007d6a <USBD_StdEPReq+0x1cc>
 8007d04:	e097      	b.n	8007e36 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007d06:	7bbb      	ldrb	r3, [r7, #14]
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d007      	beq.n	8007d1c <USBD_StdEPReq+0x17e>
 8007d0c:	7bbb      	ldrb	r3, [r7, #14]
 8007d0e:	2b80      	cmp	r3, #128	; 0x80
 8007d10:	d004      	beq.n	8007d1c <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8007d12:	6839      	ldr	r1, [r7, #0]
 8007d14:	6878      	ldr	r0, [r7, #4]
 8007d16:	f000 fbd3 	bl	80084c0 <USBD_CtlError>
                break;
 8007d1a:	e091      	b.n	8007e40 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007d1c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	da0b      	bge.n	8007d3c <USBD_StdEPReq+0x19e>
 8007d24:	7bbb      	ldrb	r3, [r7, #14]
 8007d26:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007d2a:	4613      	mov	r3, r2
 8007d2c:	009b      	lsls	r3, r3, #2
 8007d2e:	4413      	add	r3, r2
 8007d30:	009b      	lsls	r3, r3, #2
 8007d32:	3310      	adds	r3, #16
 8007d34:	687a      	ldr	r2, [r7, #4]
 8007d36:	4413      	add	r3, r2
 8007d38:	3304      	adds	r3, #4
 8007d3a:	e00b      	b.n	8007d54 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007d3c:	7bbb      	ldrb	r3, [r7, #14]
 8007d3e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007d42:	4613      	mov	r3, r2
 8007d44:	009b      	lsls	r3, r3, #2
 8007d46:	4413      	add	r3, r2
 8007d48:	009b      	lsls	r3, r3, #2
 8007d4a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007d4e:	687a      	ldr	r2, [r7, #4]
 8007d50:	4413      	add	r3, r2
 8007d52:	3304      	adds	r3, #4
 8007d54:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007d56:	68bb      	ldr	r3, [r7, #8]
 8007d58:	2200      	movs	r2, #0
 8007d5a:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007d5c:	68bb      	ldr	r3, [r7, #8]
 8007d5e:	2202      	movs	r2, #2
 8007d60:	4619      	mov	r1, r3
 8007d62:	6878      	ldr	r0, [r7, #4]
 8007d64:	f000 fc1d 	bl	80085a2 <USBD_CtlSendData>
              break;
 8007d68:	e06a      	b.n	8007e40 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007d6a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	da11      	bge.n	8007d96 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007d72:	7bbb      	ldrb	r3, [r7, #14]
 8007d74:	f003 020f 	and.w	r2, r3, #15
 8007d78:	6879      	ldr	r1, [r7, #4]
 8007d7a:	4613      	mov	r3, r2
 8007d7c:	009b      	lsls	r3, r3, #2
 8007d7e:	4413      	add	r3, r2
 8007d80:	009b      	lsls	r3, r3, #2
 8007d82:	440b      	add	r3, r1
 8007d84:	3324      	adds	r3, #36	; 0x24
 8007d86:	881b      	ldrh	r3, [r3, #0]
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d117      	bne.n	8007dbc <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8007d8c:	6839      	ldr	r1, [r7, #0]
 8007d8e:	6878      	ldr	r0, [r7, #4]
 8007d90:	f000 fb96 	bl	80084c0 <USBD_CtlError>
                  break;
 8007d94:	e054      	b.n	8007e40 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007d96:	7bbb      	ldrb	r3, [r7, #14]
 8007d98:	f003 020f 	and.w	r2, r3, #15
 8007d9c:	6879      	ldr	r1, [r7, #4]
 8007d9e:	4613      	mov	r3, r2
 8007da0:	009b      	lsls	r3, r3, #2
 8007da2:	4413      	add	r3, r2
 8007da4:	009b      	lsls	r3, r3, #2
 8007da6:	440b      	add	r3, r1
 8007da8:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007dac:	881b      	ldrh	r3, [r3, #0]
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d104      	bne.n	8007dbc <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8007db2:	6839      	ldr	r1, [r7, #0]
 8007db4:	6878      	ldr	r0, [r7, #4]
 8007db6:	f000 fb83 	bl	80084c0 <USBD_CtlError>
                  break;
 8007dba:	e041      	b.n	8007e40 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007dbc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	da0b      	bge.n	8007ddc <USBD_StdEPReq+0x23e>
 8007dc4:	7bbb      	ldrb	r3, [r7, #14]
 8007dc6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007dca:	4613      	mov	r3, r2
 8007dcc:	009b      	lsls	r3, r3, #2
 8007dce:	4413      	add	r3, r2
 8007dd0:	009b      	lsls	r3, r3, #2
 8007dd2:	3310      	adds	r3, #16
 8007dd4:	687a      	ldr	r2, [r7, #4]
 8007dd6:	4413      	add	r3, r2
 8007dd8:	3304      	adds	r3, #4
 8007dda:	e00b      	b.n	8007df4 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007ddc:	7bbb      	ldrb	r3, [r7, #14]
 8007dde:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007de2:	4613      	mov	r3, r2
 8007de4:	009b      	lsls	r3, r3, #2
 8007de6:	4413      	add	r3, r2
 8007de8:	009b      	lsls	r3, r3, #2
 8007dea:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007dee:	687a      	ldr	r2, [r7, #4]
 8007df0:	4413      	add	r3, r2
 8007df2:	3304      	adds	r3, #4
 8007df4:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007df6:	7bbb      	ldrb	r3, [r7, #14]
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d002      	beq.n	8007e02 <USBD_StdEPReq+0x264>
 8007dfc:	7bbb      	ldrb	r3, [r7, #14]
 8007dfe:	2b80      	cmp	r3, #128	; 0x80
 8007e00:	d103      	bne.n	8007e0a <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8007e02:	68bb      	ldr	r3, [r7, #8]
 8007e04:	2200      	movs	r2, #0
 8007e06:	601a      	str	r2, [r3, #0]
 8007e08:	e00e      	b.n	8007e28 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8007e0a:	7bbb      	ldrb	r3, [r7, #14]
 8007e0c:	4619      	mov	r1, r3
 8007e0e:	6878      	ldr	r0, [r7, #4]
 8007e10:	f001 f98a 	bl	8009128 <USBD_LL_IsStallEP>
 8007e14:	4603      	mov	r3, r0
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d003      	beq.n	8007e22 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8007e1a:	68bb      	ldr	r3, [r7, #8]
 8007e1c:	2201      	movs	r2, #1
 8007e1e:	601a      	str	r2, [r3, #0]
 8007e20:	e002      	b.n	8007e28 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8007e22:	68bb      	ldr	r3, [r7, #8]
 8007e24:	2200      	movs	r2, #0
 8007e26:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007e28:	68bb      	ldr	r3, [r7, #8]
 8007e2a:	2202      	movs	r2, #2
 8007e2c:	4619      	mov	r1, r3
 8007e2e:	6878      	ldr	r0, [r7, #4]
 8007e30:	f000 fbb7 	bl	80085a2 <USBD_CtlSendData>
              break;
 8007e34:	e004      	b.n	8007e40 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8007e36:	6839      	ldr	r1, [r7, #0]
 8007e38:	6878      	ldr	r0, [r7, #4]
 8007e3a:	f000 fb41 	bl	80084c0 <USBD_CtlError>
              break;
 8007e3e:	bf00      	nop
          }
          break;
 8007e40:	e004      	b.n	8007e4c <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8007e42:	6839      	ldr	r1, [r7, #0]
 8007e44:	6878      	ldr	r0, [r7, #4]
 8007e46:	f000 fb3b 	bl	80084c0 <USBD_CtlError>
          break;
 8007e4a:	bf00      	nop
      }
      break;
 8007e4c:	e004      	b.n	8007e58 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8007e4e:	6839      	ldr	r1, [r7, #0]
 8007e50:	6878      	ldr	r0, [r7, #4]
 8007e52:	f000 fb35 	bl	80084c0 <USBD_CtlError>
      break;
 8007e56:	bf00      	nop
  }

  return ret;
 8007e58:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e5a:	4618      	mov	r0, r3
 8007e5c:	3710      	adds	r7, #16
 8007e5e:	46bd      	mov	sp, r7
 8007e60:	bd80      	pop	{r7, pc}
	...

08007e64 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007e64:	b580      	push	{r7, lr}
 8007e66:	b084      	sub	sp, #16
 8007e68:	af00      	add	r7, sp, #0
 8007e6a:	6078      	str	r0, [r7, #4]
 8007e6c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007e6e:	2300      	movs	r3, #0
 8007e70:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007e72:	2300      	movs	r3, #0
 8007e74:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007e76:	2300      	movs	r3, #0
 8007e78:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007e7a:	683b      	ldr	r3, [r7, #0]
 8007e7c:	885b      	ldrh	r3, [r3, #2]
 8007e7e:	0a1b      	lsrs	r3, r3, #8
 8007e80:	b29b      	uxth	r3, r3
 8007e82:	3b01      	subs	r3, #1
 8007e84:	2b06      	cmp	r3, #6
 8007e86:	f200 8128 	bhi.w	80080da <USBD_GetDescriptor+0x276>
 8007e8a:	a201      	add	r2, pc, #4	; (adr r2, 8007e90 <USBD_GetDescriptor+0x2c>)
 8007e8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e90:	08007ead 	.word	0x08007ead
 8007e94:	08007ec5 	.word	0x08007ec5
 8007e98:	08007f05 	.word	0x08007f05
 8007e9c:	080080db 	.word	0x080080db
 8007ea0:	080080db 	.word	0x080080db
 8007ea4:	0800807b 	.word	0x0800807b
 8007ea8:	080080a7 	.word	0x080080a7
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	687a      	ldr	r2, [r7, #4]
 8007eb6:	7c12      	ldrb	r2, [r2, #16]
 8007eb8:	f107 0108 	add.w	r1, r7, #8
 8007ebc:	4610      	mov	r0, r2
 8007ebe:	4798      	blx	r3
 8007ec0:	60f8      	str	r0, [r7, #12]
      break;
 8007ec2:	e112      	b.n	80080ea <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	7c1b      	ldrb	r3, [r3, #16]
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d10d      	bne.n	8007ee8 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ed2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ed4:	f107 0208 	add.w	r2, r7, #8
 8007ed8:	4610      	mov	r0, r2
 8007eda:	4798      	blx	r3
 8007edc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	3301      	adds	r3, #1
 8007ee2:	2202      	movs	r2, #2
 8007ee4:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007ee6:	e100      	b.n	80080ea <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007eee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ef0:	f107 0208 	add.w	r2, r7, #8
 8007ef4:	4610      	mov	r0, r2
 8007ef6:	4798      	blx	r3
 8007ef8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	3301      	adds	r3, #1
 8007efe:	2202      	movs	r2, #2
 8007f00:	701a      	strb	r2, [r3, #0]
      break;
 8007f02:	e0f2      	b.n	80080ea <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007f04:	683b      	ldr	r3, [r7, #0]
 8007f06:	885b      	ldrh	r3, [r3, #2]
 8007f08:	b2db      	uxtb	r3, r3
 8007f0a:	2b05      	cmp	r3, #5
 8007f0c:	f200 80ac 	bhi.w	8008068 <USBD_GetDescriptor+0x204>
 8007f10:	a201      	add	r2, pc, #4	; (adr r2, 8007f18 <USBD_GetDescriptor+0xb4>)
 8007f12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f16:	bf00      	nop
 8007f18:	08007f31 	.word	0x08007f31
 8007f1c:	08007f65 	.word	0x08007f65
 8007f20:	08007f99 	.word	0x08007f99
 8007f24:	08007fcd 	.word	0x08007fcd
 8007f28:	08008001 	.word	0x08008001
 8007f2c:	08008035 	.word	0x08008035
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007f36:	685b      	ldr	r3, [r3, #4]
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d00b      	beq.n	8007f54 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007f42:	685b      	ldr	r3, [r3, #4]
 8007f44:	687a      	ldr	r2, [r7, #4]
 8007f46:	7c12      	ldrb	r2, [r2, #16]
 8007f48:	f107 0108 	add.w	r1, r7, #8
 8007f4c:	4610      	mov	r0, r2
 8007f4e:	4798      	blx	r3
 8007f50:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007f52:	e091      	b.n	8008078 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007f54:	6839      	ldr	r1, [r7, #0]
 8007f56:	6878      	ldr	r0, [r7, #4]
 8007f58:	f000 fab2 	bl	80084c0 <USBD_CtlError>
            err++;
 8007f5c:	7afb      	ldrb	r3, [r7, #11]
 8007f5e:	3301      	adds	r3, #1
 8007f60:	72fb      	strb	r3, [r7, #11]
          break;
 8007f62:	e089      	b.n	8008078 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007f6a:	689b      	ldr	r3, [r3, #8]
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d00b      	beq.n	8007f88 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007f76:	689b      	ldr	r3, [r3, #8]
 8007f78:	687a      	ldr	r2, [r7, #4]
 8007f7a:	7c12      	ldrb	r2, [r2, #16]
 8007f7c:	f107 0108 	add.w	r1, r7, #8
 8007f80:	4610      	mov	r0, r2
 8007f82:	4798      	blx	r3
 8007f84:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007f86:	e077      	b.n	8008078 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007f88:	6839      	ldr	r1, [r7, #0]
 8007f8a:	6878      	ldr	r0, [r7, #4]
 8007f8c:	f000 fa98 	bl	80084c0 <USBD_CtlError>
            err++;
 8007f90:	7afb      	ldrb	r3, [r7, #11]
 8007f92:	3301      	adds	r3, #1
 8007f94:	72fb      	strb	r3, [r7, #11]
          break;
 8007f96:	e06f      	b.n	8008078 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007f9e:	68db      	ldr	r3, [r3, #12]
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d00b      	beq.n	8007fbc <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007faa:	68db      	ldr	r3, [r3, #12]
 8007fac:	687a      	ldr	r2, [r7, #4]
 8007fae:	7c12      	ldrb	r2, [r2, #16]
 8007fb0:	f107 0108 	add.w	r1, r7, #8
 8007fb4:	4610      	mov	r0, r2
 8007fb6:	4798      	blx	r3
 8007fb8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007fba:	e05d      	b.n	8008078 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007fbc:	6839      	ldr	r1, [r7, #0]
 8007fbe:	6878      	ldr	r0, [r7, #4]
 8007fc0:	f000 fa7e 	bl	80084c0 <USBD_CtlError>
            err++;
 8007fc4:	7afb      	ldrb	r3, [r7, #11]
 8007fc6:	3301      	adds	r3, #1
 8007fc8:	72fb      	strb	r3, [r7, #11]
          break;
 8007fca:	e055      	b.n	8008078 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007fd2:	691b      	ldr	r3, [r3, #16]
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d00b      	beq.n	8007ff0 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007fde:	691b      	ldr	r3, [r3, #16]
 8007fe0:	687a      	ldr	r2, [r7, #4]
 8007fe2:	7c12      	ldrb	r2, [r2, #16]
 8007fe4:	f107 0108 	add.w	r1, r7, #8
 8007fe8:	4610      	mov	r0, r2
 8007fea:	4798      	blx	r3
 8007fec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007fee:	e043      	b.n	8008078 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007ff0:	6839      	ldr	r1, [r7, #0]
 8007ff2:	6878      	ldr	r0, [r7, #4]
 8007ff4:	f000 fa64 	bl	80084c0 <USBD_CtlError>
            err++;
 8007ff8:	7afb      	ldrb	r3, [r7, #11]
 8007ffa:	3301      	adds	r3, #1
 8007ffc:	72fb      	strb	r3, [r7, #11]
          break;
 8007ffe:	e03b      	b.n	8008078 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008006:	695b      	ldr	r3, [r3, #20]
 8008008:	2b00      	cmp	r3, #0
 800800a:	d00b      	beq.n	8008024 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008012:	695b      	ldr	r3, [r3, #20]
 8008014:	687a      	ldr	r2, [r7, #4]
 8008016:	7c12      	ldrb	r2, [r2, #16]
 8008018:	f107 0108 	add.w	r1, r7, #8
 800801c:	4610      	mov	r0, r2
 800801e:	4798      	blx	r3
 8008020:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008022:	e029      	b.n	8008078 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008024:	6839      	ldr	r1, [r7, #0]
 8008026:	6878      	ldr	r0, [r7, #4]
 8008028:	f000 fa4a 	bl	80084c0 <USBD_CtlError>
            err++;
 800802c:	7afb      	ldrb	r3, [r7, #11]
 800802e:	3301      	adds	r3, #1
 8008030:	72fb      	strb	r3, [r7, #11]
          break;
 8008032:	e021      	b.n	8008078 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800803a:	699b      	ldr	r3, [r3, #24]
 800803c:	2b00      	cmp	r3, #0
 800803e:	d00b      	beq.n	8008058 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008046:	699b      	ldr	r3, [r3, #24]
 8008048:	687a      	ldr	r2, [r7, #4]
 800804a:	7c12      	ldrb	r2, [r2, #16]
 800804c:	f107 0108 	add.w	r1, r7, #8
 8008050:	4610      	mov	r0, r2
 8008052:	4798      	blx	r3
 8008054:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008056:	e00f      	b.n	8008078 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008058:	6839      	ldr	r1, [r7, #0]
 800805a:	6878      	ldr	r0, [r7, #4]
 800805c:	f000 fa30 	bl	80084c0 <USBD_CtlError>
            err++;
 8008060:	7afb      	ldrb	r3, [r7, #11]
 8008062:	3301      	adds	r3, #1
 8008064:	72fb      	strb	r3, [r7, #11]
          break;
 8008066:	e007      	b.n	8008078 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8008068:	6839      	ldr	r1, [r7, #0]
 800806a:	6878      	ldr	r0, [r7, #4]
 800806c:	f000 fa28 	bl	80084c0 <USBD_CtlError>
          err++;
 8008070:	7afb      	ldrb	r3, [r7, #11]
 8008072:	3301      	adds	r3, #1
 8008074:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8008076:	bf00      	nop
      }
      break;
 8008078:	e037      	b.n	80080ea <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	7c1b      	ldrb	r3, [r3, #16]
 800807e:	2b00      	cmp	r3, #0
 8008080:	d109      	bne.n	8008096 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008088:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800808a:	f107 0208 	add.w	r2, r7, #8
 800808e:	4610      	mov	r0, r2
 8008090:	4798      	blx	r3
 8008092:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008094:	e029      	b.n	80080ea <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008096:	6839      	ldr	r1, [r7, #0]
 8008098:	6878      	ldr	r0, [r7, #4]
 800809a:	f000 fa11 	bl	80084c0 <USBD_CtlError>
        err++;
 800809e:	7afb      	ldrb	r3, [r7, #11]
 80080a0:	3301      	adds	r3, #1
 80080a2:	72fb      	strb	r3, [r7, #11]
      break;
 80080a4:	e021      	b.n	80080ea <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	7c1b      	ldrb	r3, [r3, #16]
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d10d      	bne.n	80080ca <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80080b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080b6:	f107 0208 	add.w	r2, r7, #8
 80080ba:	4610      	mov	r0, r2
 80080bc:	4798      	blx	r3
 80080be:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	3301      	adds	r3, #1
 80080c4:	2207      	movs	r2, #7
 80080c6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80080c8:	e00f      	b.n	80080ea <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80080ca:	6839      	ldr	r1, [r7, #0]
 80080cc:	6878      	ldr	r0, [r7, #4]
 80080ce:	f000 f9f7 	bl	80084c0 <USBD_CtlError>
        err++;
 80080d2:	7afb      	ldrb	r3, [r7, #11]
 80080d4:	3301      	adds	r3, #1
 80080d6:	72fb      	strb	r3, [r7, #11]
      break;
 80080d8:	e007      	b.n	80080ea <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80080da:	6839      	ldr	r1, [r7, #0]
 80080dc:	6878      	ldr	r0, [r7, #4]
 80080de:	f000 f9ef 	bl	80084c0 <USBD_CtlError>
      err++;
 80080e2:	7afb      	ldrb	r3, [r7, #11]
 80080e4:	3301      	adds	r3, #1
 80080e6:	72fb      	strb	r3, [r7, #11]
      break;
 80080e8:	bf00      	nop
  }

  if (err != 0U)
 80080ea:	7afb      	ldrb	r3, [r7, #11]
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d11e      	bne.n	800812e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 80080f0:	683b      	ldr	r3, [r7, #0]
 80080f2:	88db      	ldrh	r3, [r3, #6]
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d016      	beq.n	8008126 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 80080f8:	893b      	ldrh	r3, [r7, #8]
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d00e      	beq.n	800811c <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 80080fe:	683b      	ldr	r3, [r7, #0]
 8008100:	88da      	ldrh	r2, [r3, #6]
 8008102:	893b      	ldrh	r3, [r7, #8]
 8008104:	4293      	cmp	r3, r2
 8008106:	bf28      	it	cs
 8008108:	4613      	movcs	r3, r2
 800810a:	b29b      	uxth	r3, r3
 800810c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800810e:	893b      	ldrh	r3, [r7, #8]
 8008110:	461a      	mov	r2, r3
 8008112:	68f9      	ldr	r1, [r7, #12]
 8008114:	6878      	ldr	r0, [r7, #4]
 8008116:	f000 fa44 	bl	80085a2 <USBD_CtlSendData>
 800811a:	e009      	b.n	8008130 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800811c:	6839      	ldr	r1, [r7, #0]
 800811e:	6878      	ldr	r0, [r7, #4]
 8008120:	f000 f9ce 	bl	80084c0 <USBD_CtlError>
 8008124:	e004      	b.n	8008130 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8008126:	6878      	ldr	r0, [r7, #4]
 8008128:	f000 fa95 	bl	8008656 <USBD_CtlSendStatus>
 800812c:	e000      	b.n	8008130 <USBD_GetDescriptor+0x2cc>
    return;
 800812e:	bf00      	nop
  }
}
 8008130:	3710      	adds	r7, #16
 8008132:	46bd      	mov	sp, r7
 8008134:	bd80      	pop	{r7, pc}
 8008136:	bf00      	nop

08008138 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008138:	b580      	push	{r7, lr}
 800813a:	b084      	sub	sp, #16
 800813c:	af00      	add	r7, sp, #0
 800813e:	6078      	str	r0, [r7, #4]
 8008140:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008142:	683b      	ldr	r3, [r7, #0]
 8008144:	889b      	ldrh	r3, [r3, #4]
 8008146:	2b00      	cmp	r3, #0
 8008148:	d131      	bne.n	80081ae <USBD_SetAddress+0x76>
 800814a:	683b      	ldr	r3, [r7, #0]
 800814c:	88db      	ldrh	r3, [r3, #6]
 800814e:	2b00      	cmp	r3, #0
 8008150:	d12d      	bne.n	80081ae <USBD_SetAddress+0x76>
 8008152:	683b      	ldr	r3, [r7, #0]
 8008154:	885b      	ldrh	r3, [r3, #2]
 8008156:	2b7f      	cmp	r3, #127	; 0x7f
 8008158:	d829      	bhi.n	80081ae <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800815a:	683b      	ldr	r3, [r7, #0]
 800815c:	885b      	ldrh	r3, [r3, #2]
 800815e:	b2db      	uxtb	r3, r3
 8008160:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008164:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800816c:	b2db      	uxtb	r3, r3
 800816e:	2b03      	cmp	r3, #3
 8008170:	d104      	bne.n	800817c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8008172:	6839      	ldr	r1, [r7, #0]
 8008174:	6878      	ldr	r0, [r7, #4]
 8008176:	f000 f9a3 	bl	80084c0 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800817a:	e01d      	b.n	80081b8 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	7bfa      	ldrb	r2, [r7, #15]
 8008180:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008184:	7bfb      	ldrb	r3, [r7, #15]
 8008186:	4619      	mov	r1, r3
 8008188:	6878      	ldr	r0, [r7, #4]
 800818a:	f000 fff9 	bl	8009180 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800818e:	6878      	ldr	r0, [r7, #4]
 8008190:	f000 fa61 	bl	8008656 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008194:	7bfb      	ldrb	r3, [r7, #15]
 8008196:	2b00      	cmp	r3, #0
 8008198:	d004      	beq.n	80081a4 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	2202      	movs	r2, #2
 800819e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80081a2:	e009      	b.n	80081b8 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	2201      	movs	r2, #1
 80081a8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80081ac:	e004      	b.n	80081b8 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80081ae:	6839      	ldr	r1, [r7, #0]
 80081b0:	6878      	ldr	r0, [r7, #4]
 80081b2:	f000 f985 	bl	80084c0 <USBD_CtlError>
  }
}
 80081b6:	bf00      	nop
 80081b8:	bf00      	nop
 80081ba:	3710      	adds	r7, #16
 80081bc:	46bd      	mov	sp, r7
 80081be:	bd80      	pop	{r7, pc}

080081c0 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80081c0:	b580      	push	{r7, lr}
 80081c2:	b084      	sub	sp, #16
 80081c4:	af00      	add	r7, sp, #0
 80081c6:	6078      	str	r0, [r7, #4]
 80081c8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80081ca:	2300      	movs	r3, #0
 80081cc:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80081ce:	683b      	ldr	r3, [r7, #0]
 80081d0:	885b      	ldrh	r3, [r3, #2]
 80081d2:	b2da      	uxtb	r2, r3
 80081d4:	4b4c      	ldr	r3, [pc, #304]	; (8008308 <USBD_SetConfig+0x148>)
 80081d6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80081d8:	4b4b      	ldr	r3, [pc, #300]	; (8008308 <USBD_SetConfig+0x148>)
 80081da:	781b      	ldrb	r3, [r3, #0]
 80081dc:	2b01      	cmp	r3, #1
 80081de:	d905      	bls.n	80081ec <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80081e0:	6839      	ldr	r1, [r7, #0]
 80081e2:	6878      	ldr	r0, [r7, #4]
 80081e4:	f000 f96c 	bl	80084c0 <USBD_CtlError>
    return USBD_FAIL;
 80081e8:	2303      	movs	r3, #3
 80081ea:	e088      	b.n	80082fe <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80081f2:	b2db      	uxtb	r3, r3
 80081f4:	2b02      	cmp	r3, #2
 80081f6:	d002      	beq.n	80081fe <USBD_SetConfig+0x3e>
 80081f8:	2b03      	cmp	r3, #3
 80081fa:	d025      	beq.n	8008248 <USBD_SetConfig+0x88>
 80081fc:	e071      	b.n	80082e2 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80081fe:	4b42      	ldr	r3, [pc, #264]	; (8008308 <USBD_SetConfig+0x148>)
 8008200:	781b      	ldrb	r3, [r3, #0]
 8008202:	2b00      	cmp	r3, #0
 8008204:	d01c      	beq.n	8008240 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8008206:	4b40      	ldr	r3, [pc, #256]	; (8008308 <USBD_SetConfig+0x148>)
 8008208:	781b      	ldrb	r3, [r3, #0]
 800820a:	461a      	mov	r2, r3
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008210:	4b3d      	ldr	r3, [pc, #244]	; (8008308 <USBD_SetConfig+0x148>)
 8008212:	781b      	ldrb	r3, [r3, #0]
 8008214:	4619      	mov	r1, r3
 8008216:	6878      	ldr	r0, [r7, #4]
 8008218:	f7ff f948 	bl	80074ac <USBD_SetClassConfig>
 800821c:	4603      	mov	r3, r0
 800821e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8008220:	7bfb      	ldrb	r3, [r7, #15]
 8008222:	2b00      	cmp	r3, #0
 8008224:	d004      	beq.n	8008230 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8008226:	6839      	ldr	r1, [r7, #0]
 8008228:	6878      	ldr	r0, [r7, #4]
 800822a:	f000 f949 	bl	80084c0 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800822e:	e065      	b.n	80082fc <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8008230:	6878      	ldr	r0, [r7, #4]
 8008232:	f000 fa10 	bl	8008656 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	2203      	movs	r2, #3
 800823a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800823e:	e05d      	b.n	80082fc <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8008240:	6878      	ldr	r0, [r7, #4]
 8008242:	f000 fa08 	bl	8008656 <USBD_CtlSendStatus>
      break;
 8008246:	e059      	b.n	80082fc <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8008248:	4b2f      	ldr	r3, [pc, #188]	; (8008308 <USBD_SetConfig+0x148>)
 800824a:	781b      	ldrb	r3, [r3, #0]
 800824c:	2b00      	cmp	r3, #0
 800824e:	d112      	bne.n	8008276 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	2202      	movs	r2, #2
 8008254:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8008258:	4b2b      	ldr	r3, [pc, #172]	; (8008308 <USBD_SetConfig+0x148>)
 800825a:	781b      	ldrb	r3, [r3, #0]
 800825c:	461a      	mov	r2, r3
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008262:	4b29      	ldr	r3, [pc, #164]	; (8008308 <USBD_SetConfig+0x148>)
 8008264:	781b      	ldrb	r3, [r3, #0]
 8008266:	4619      	mov	r1, r3
 8008268:	6878      	ldr	r0, [r7, #4]
 800826a:	f7ff f93b 	bl	80074e4 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800826e:	6878      	ldr	r0, [r7, #4]
 8008270:	f000 f9f1 	bl	8008656 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008274:	e042      	b.n	80082fc <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8008276:	4b24      	ldr	r3, [pc, #144]	; (8008308 <USBD_SetConfig+0x148>)
 8008278:	781b      	ldrb	r3, [r3, #0]
 800827a:	461a      	mov	r2, r3
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	685b      	ldr	r3, [r3, #4]
 8008280:	429a      	cmp	r2, r3
 8008282:	d02a      	beq.n	80082da <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	685b      	ldr	r3, [r3, #4]
 8008288:	b2db      	uxtb	r3, r3
 800828a:	4619      	mov	r1, r3
 800828c:	6878      	ldr	r0, [r7, #4]
 800828e:	f7ff f929 	bl	80074e4 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8008292:	4b1d      	ldr	r3, [pc, #116]	; (8008308 <USBD_SetConfig+0x148>)
 8008294:	781b      	ldrb	r3, [r3, #0]
 8008296:	461a      	mov	r2, r3
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800829c:	4b1a      	ldr	r3, [pc, #104]	; (8008308 <USBD_SetConfig+0x148>)
 800829e:	781b      	ldrb	r3, [r3, #0]
 80082a0:	4619      	mov	r1, r3
 80082a2:	6878      	ldr	r0, [r7, #4]
 80082a4:	f7ff f902 	bl	80074ac <USBD_SetClassConfig>
 80082a8:	4603      	mov	r3, r0
 80082aa:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80082ac:	7bfb      	ldrb	r3, [r7, #15]
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d00f      	beq.n	80082d2 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 80082b2:	6839      	ldr	r1, [r7, #0]
 80082b4:	6878      	ldr	r0, [r7, #4]
 80082b6:	f000 f903 	bl	80084c0 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	685b      	ldr	r3, [r3, #4]
 80082be:	b2db      	uxtb	r3, r3
 80082c0:	4619      	mov	r1, r3
 80082c2:	6878      	ldr	r0, [r7, #4]
 80082c4:	f7ff f90e 	bl	80074e4 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	2202      	movs	r2, #2
 80082cc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80082d0:	e014      	b.n	80082fc <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 80082d2:	6878      	ldr	r0, [r7, #4]
 80082d4:	f000 f9bf 	bl	8008656 <USBD_CtlSendStatus>
      break;
 80082d8:	e010      	b.n	80082fc <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80082da:	6878      	ldr	r0, [r7, #4]
 80082dc:	f000 f9bb 	bl	8008656 <USBD_CtlSendStatus>
      break;
 80082e0:	e00c      	b.n	80082fc <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 80082e2:	6839      	ldr	r1, [r7, #0]
 80082e4:	6878      	ldr	r0, [r7, #4]
 80082e6:	f000 f8eb 	bl	80084c0 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80082ea:	4b07      	ldr	r3, [pc, #28]	; (8008308 <USBD_SetConfig+0x148>)
 80082ec:	781b      	ldrb	r3, [r3, #0]
 80082ee:	4619      	mov	r1, r3
 80082f0:	6878      	ldr	r0, [r7, #4]
 80082f2:	f7ff f8f7 	bl	80074e4 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80082f6:	2303      	movs	r3, #3
 80082f8:	73fb      	strb	r3, [r7, #15]
      break;
 80082fa:	bf00      	nop
  }

  return ret;
 80082fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80082fe:	4618      	mov	r0, r3
 8008300:	3710      	adds	r7, #16
 8008302:	46bd      	mov	sp, r7
 8008304:	bd80      	pop	{r7, pc}
 8008306:	bf00      	nop
 8008308:	200003b4 	.word	0x200003b4

0800830c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800830c:	b580      	push	{r7, lr}
 800830e:	b082      	sub	sp, #8
 8008310:	af00      	add	r7, sp, #0
 8008312:	6078      	str	r0, [r7, #4]
 8008314:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008316:	683b      	ldr	r3, [r7, #0]
 8008318:	88db      	ldrh	r3, [r3, #6]
 800831a:	2b01      	cmp	r3, #1
 800831c:	d004      	beq.n	8008328 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800831e:	6839      	ldr	r1, [r7, #0]
 8008320:	6878      	ldr	r0, [r7, #4]
 8008322:	f000 f8cd 	bl	80084c0 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008326:	e023      	b.n	8008370 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800832e:	b2db      	uxtb	r3, r3
 8008330:	2b02      	cmp	r3, #2
 8008332:	dc02      	bgt.n	800833a <USBD_GetConfig+0x2e>
 8008334:	2b00      	cmp	r3, #0
 8008336:	dc03      	bgt.n	8008340 <USBD_GetConfig+0x34>
 8008338:	e015      	b.n	8008366 <USBD_GetConfig+0x5a>
 800833a:	2b03      	cmp	r3, #3
 800833c:	d00b      	beq.n	8008356 <USBD_GetConfig+0x4a>
 800833e:	e012      	b.n	8008366 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	2200      	movs	r2, #0
 8008344:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	3308      	adds	r3, #8
 800834a:	2201      	movs	r2, #1
 800834c:	4619      	mov	r1, r3
 800834e:	6878      	ldr	r0, [r7, #4]
 8008350:	f000 f927 	bl	80085a2 <USBD_CtlSendData>
        break;
 8008354:	e00c      	b.n	8008370 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	3304      	adds	r3, #4
 800835a:	2201      	movs	r2, #1
 800835c:	4619      	mov	r1, r3
 800835e:	6878      	ldr	r0, [r7, #4]
 8008360:	f000 f91f 	bl	80085a2 <USBD_CtlSendData>
        break;
 8008364:	e004      	b.n	8008370 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8008366:	6839      	ldr	r1, [r7, #0]
 8008368:	6878      	ldr	r0, [r7, #4]
 800836a:	f000 f8a9 	bl	80084c0 <USBD_CtlError>
        break;
 800836e:	bf00      	nop
}
 8008370:	bf00      	nop
 8008372:	3708      	adds	r7, #8
 8008374:	46bd      	mov	sp, r7
 8008376:	bd80      	pop	{r7, pc}

08008378 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008378:	b580      	push	{r7, lr}
 800837a:	b082      	sub	sp, #8
 800837c:	af00      	add	r7, sp, #0
 800837e:	6078      	str	r0, [r7, #4]
 8008380:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008388:	b2db      	uxtb	r3, r3
 800838a:	3b01      	subs	r3, #1
 800838c:	2b02      	cmp	r3, #2
 800838e:	d81e      	bhi.n	80083ce <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008390:	683b      	ldr	r3, [r7, #0]
 8008392:	88db      	ldrh	r3, [r3, #6]
 8008394:	2b02      	cmp	r3, #2
 8008396:	d004      	beq.n	80083a2 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8008398:	6839      	ldr	r1, [r7, #0]
 800839a:	6878      	ldr	r0, [r7, #4]
 800839c:	f000 f890 	bl	80084c0 <USBD_CtlError>
        break;
 80083a0:	e01a      	b.n	80083d8 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	2201      	movs	r2, #1
 80083a6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d005      	beq.n	80083be <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	68db      	ldr	r3, [r3, #12]
 80083b6:	f043 0202 	orr.w	r2, r3, #2
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	330c      	adds	r3, #12
 80083c2:	2202      	movs	r2, #2
 80083c4:	4619      	mov	r1, r3
 80083c6:	6878      	ldr	r0, [r7, #4]
 80083c8:	f000 f8eb 	bl	80085a2 <USBD_CtlSendData>
      break;
 80083cc:	e004      	b.n	80083d8 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80083ce:	6839      	ldr	r1, [r7, #0]
 80083d0:	6878      	ldr	r0, [r7, #4]
 80083d2:	f000 f875 	bl	80084c0 <USBD_CtlError>
      break;
 80083d6:	bf00      	nop
  }
}
 80083d8:	bf00      	nop
 80083da:	3708      	adds	r7, #8
 80083dc:	46bd      	mov	sp, r7
 80083de:	bd80      	pop	{r7, pc}

080083e0 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80083e0:	b580      	push	{r7, lr}
 80083e2:	b082      	sub	sp, #8
 80083e4:	af00      	add	r7, sp, #0
 80083e6:	6078      	str	r0, [r7, #4]
 80083e8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80083ea:	683b      	ldr	r3, [r7, #0]
 80083ec:	885b      	ldrh	r3, [r3, #2]
 80083ee:	2b01      	cmp	r3, #1
 80083f0:	d106      	bne.n	8008400 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	2201      	movs	r2, #1
 80083f6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80083fa:	6878      	ldr	r0, [r7, #4]
 80083fc:	f000 f92b 	bl	8008656 <USBD_CtlSendStatus>
  }
}
 8008400:	bf00      	nop
 8008402:	3708      	adds	r7, #8
 8008404:	46bd      	mov	sp, r7
 8008406:	bd80      	pop	{r7, pc}

08008408 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008408:	b580      	push	{r7, lr}
 800840a:	b082      	sub	sp, #8
 800840c:	af00      	add	r7, sp, #0
 800840e:	6078      	str	r0, [r7, #4]
 8008410:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008418:	b2db      	uxtb	r3, r3
 800841a:	3b01      	subs	r3, #1
 800841c:	2b02      	cmp	r3, #2
 800841e:	d80b      	bhi.n	8008438 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008420:	683b      	ldr	r3, [r7, #0]
 8008422:	885b      	ldrh	r3, [r3, #2]
 8008424:	2b01      	cmp	r3, #1
 8008426:	d10c      	bne.n	8008442 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	2200      	movs	r2, #0
 800842c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8008430:	6878      	ldr	r0, [r7, #4]
 8008432:	f000 f910 	bl	8008656 <USBD_CtlSendStatus>
      }
      break;
 8008436:	e004      	b.n	8008442 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8008438:	6839      	ldr	r1, [r7, #0]
 800843a:	6878      	ldr	r0, [r7, #4]
 800843c:	f000 f840 	bl	80084c0 <USBD_CtlError>
      break;
 8008440:	e000      	b.n	8008444 <USBD_ClrFeature+0x3c>
      break;
 8008442:	bf00      	nop
  }
}
 8008444:	bf00      	nop
 8008446:	3708      	adds	r7, #8
 8008448:	46bd      	mov	sp, r7
 800844a:	bd80      	pop	{r7, pc}

0800844c <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800844c:	b580      	push	{r7, lr}
 800844e:	b084      	sub	sp, #16
 8008450:	af00      	add	r7, sp, #0
 8008452:	6078      	str	r0, [r7, #4]
 8008454:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008456:	683b      	ldr	r3, [r7, #0]
 8008458:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	781a      	ldrb	r2, [r3, #0]
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	3301      	adds	r3, #1
 8008466:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	781a      	ldrb	r2, [r3, #0]
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	3301      	adds	r3, #1
 8008474:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008476:	68f8      	ldr	r0, [r7, #12]
 8008478:	f7ff fabb 	bl	80079f2 <SWAPBYTE>
 800847c:	4603      	mov	r3, r0
 800847e:	461a      	mov	r2, r3
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	3301      	adds	r3, #1
 8008488:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	3301      	adds	r3, #1
 800848e:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8008490:	68f8      	ldr	r0, [r7, #12]
 8008492:	f7ff faae 	bl	80079f2 <SWAPBYTE>
 8008496:	4603      	mov	r3, r0
 8008498:	461a      	mov	r2, r3
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	3301      	adds	r3, #1
 80084a2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	3301      	adds	r3, #1
 80084a8:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80084aa:	68f8      	ldr	r0, [r7, #12]
 80084ac:	f7ff faa1 	bl	80079f2 <SWAPBYTE>
 80084b0:	4603      	mov	r3, r0
 80084b2:	461a      	mov	r2, r3
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	80da      	strh	r2, [r3, #6]
}
 80084b8:	bf00      	nop
 80084ba:	3710      	adds	r7, #16
 80084bc:	46bd      	mov	sp, r7
 80084be:	bd80      	pop	{r7, pc}

080084c0 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80084c0:	b580      	push	{r7, lr}
 80084c2:	b082      	sub	sp, #8
 80084c4:	af00      	add	r7, sp, #0
 80084c6:	6078      	str	r0, [r7, #4]
 80084c8:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80084ca:	2180      	movs	r1, #128	; 0x80
 80084cc:	6878      	ldr	r0, [r7, #4]
 80084ce:	f000 fded 	bl	80090ac <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80084d2:	2100      	movs	r1, #0
 80084d4:	6878      	ldr	r0, [r7, #4]
 80084d6:	f000 fde9 	bl	80090ac <USBD_LL_StallEP>
}
 80084da:	bf00      	nop
 80084dc:	3708      	adds	r7, #8
 80084de:	46bd      	mov	sp, r7
 80084e0:	bd80      	pop	{r7, pc}

080084e2 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80084e2:	b580      	push	{r7, lr}
 80084e4:	b086      	sub	sp, #24
 80084e6:	af00      	add	r7, sp, #0
 80084e8:	60f8      	str	r0, [r7, #12]
 80084ea:	60b9      	str	r1, [r7, #8]
 80084ec:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80084ee:	2300      	movs	r3, #0
 80084f0:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d036      	beq.n	8008566 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80084fc:	6938      	ldr	r0, [r7, #16]
 80084fe:	f000 f836 	bl	800856e <USBD_GetLen>
 8008502:	4603      	mov	r3, r0
 8008504:	3301      	adds	r3, #1
 8008506:	b29b      	uxth	r3, r3
 8008508:	005b      	lsls	r3, r3, #1
 800850a:	b29a      	uxth	r2, r3
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008510:	7dfb      	ldrb	r3, [r7, #23]
 8008512:	68ba      	ldr	r2, [r7, #8]
 8008514:	4413      	add	r3, r2
 8008516:	687a      	ldr	r2, [r7, #4]
 8008518:	7812      	ldrb	r2, [r2, #0]
 800851a:	701a      	strb	r2, [r3, #0]
  idx++;
 800851c:	7dfb      	ldrb	r3, [r7, #23]
 800851e:	3301      	adds	r3, #1
 8008520:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008522:	7dfb      	ldrb	r3, [r7, #23]
 8008524:	68ba      	ldr	r2, [r7, #8]
 8008526:	4413      	add	r3, r2
 8008528:	2203      	movs	r2, #3
 800852a:	701a      	strb	r2, [r3, #0]
  idx++;
 800852c:	7dfb      	ldrb	r3, [r7, #23]
 800852e:	3301      	adds	r3, #1
 8008530:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008532:	e013      	b.n	800855c <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8008534:	7dfb      	ldrb	r3, [r7, #23]
 8008536:	68ba      	ldr	r2, [r7, #8]
 8008538:	4413      	add	r3, r2
 800853a:	693a      	ldr	r2, [r7, #16]
 800853c:	7812      	ldrb	r2, [r2, #0]
 800853e:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8008540:	693b      	ldr	r3, [r7, #16]
 8008542:	3301      	adds	r3, #1
 8008544:	613b      	str	r3, [r7, #16]
    idx++;
 8008546:	7dfb      	ldrb	r3, [r7, #23]
 8008548:	3301      	adds	r3, #1
 800854a:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800854c:	7dfb      	ldrb	r3, [r7, #23]
 800854e:	68ba      	ldr	r2, [r7, #8]
 8008550:	4413      	add	r3, r2
 8008552:	2200      	movs	r2, #0
 8008554:	701a      	strb	r2, [r3, #0]
    idx++;
 8008556:	7dfb      	ldrb	r3, [r7, #23]
 8008558:	3301      	adds	r3, #1
 800855a:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800855c:	693b      	ldr	r3, [r7, #16]
 800855e:	781b      	ldrb	r3, [r3, #0]
 8008560:	2b00      	cmp	r3, #0
 8008562:	d1e7      	bne.n	8008534 <USBD_GetString+0x52>
 8008564:	e000      	b.n	8008568 <USBD_GetString+0x86>
    return;
 8008566:	bf00      	nop
  }
}
 8008568:	3718      	adds	r7, #24
 800856a:	46bd      	mov	sp, r7
 800856c:	bd80      	pop	{r7, pc}

0800856e <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800856e:	b480      	push	{r7}
 8008570:	b085      	sub	sp, #20
 8008572:	af00      	add	r7, sp, #0
 8008574:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008576:	2300      	movs	r3, #0
 8008578:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800857e:	e005      	b.n	800858c <USBD_GetLen+0x1e>
  {
    len++;
 8008580:	7bfb      	ldrb	r3, [r7, #15]
 8008582:	3301      	adds	r3, #1
 8008584:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008586:	68bb      	ldr	r3, [r7, #8]
 8008588:	3301      	adds	r3, #1
 800858a:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800858c:	68bb      	ldr	r3, [r7, #8]
 800858e:	781b      	ldrb	r3, [r3, #0]
 8008590:	2b00      	cmp	r3, #0
 8008592:	d1f5      	bne.n	8008580 <USBD_GetLen+0x12>
  }

  return len;
 8008594:	7bfb      	ldrb	r3, [r7, #15]
}
 8008596:	4618      	mov	r0, r3
 8008598:	3714      	adds	r7, #20
 800859a:	46bd      	mov	sp, r7
 800859c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085a0:	4770      	bx	lr

080085a2 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80085a2:	b580      	push	{r7, lr}
 80085a4:	b084      	sub	sp, #16
 80085a6:	af00      	add	r7, sp, #0
 80085a8:	60f8      	str	r0, [r7, #12]
 80085aa:	60b9      	str	r1, [r7, #8]
 80085ac:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	2202      	movs	r2, #2
 80085b2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	687a      	ldr	r2, [r7, #4]
 80085ba:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	687a      	ldr	r2, [r7, #4]
 80085c0:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	68ba      	ldr	r2, [r7, #8]
 80085c6:	2100      	movs	r1, #0
 80085c8:	68f8      	ldr	r0, [r7, #12]
 80085ca:	f000 fdf8 	bl	80091be <USBD_LL_Transmit>

  return USBD_OK;
 80085ce:	2300      	movs	r3, #0
}
 80085d0:	4618      	mov	r0, r3
 80085d2:	3710      	adds	r7, #16
 80085d4:	46bd      	mov	sp, r7
 80085d6:	bd80      	pop	{r7, pc}

080085d8 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80085d8:	b580      	push	{r7, lr}
 80085da:	b084      	sub	sp, #16
 80085dc:	af00      	add	r7, sp, #0
 80085de:	60f8      	str	r0, [r7, #12]
 80085e0:	60b9      	str	r1, [r7, #8]
 80085e2:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	68ba      	ldr	r2, [r7, #8]
 80085e8:	2100      	movs	r1, #0
 80085ea:	68f8      	ldr	r0, [r7, #12]
 80085ec:	f000 fde7 	bl	80091be <USBD_LL_Transmit>

  return USBD_OK;
 80085f0:	2300      	movs	r3, #0
}
 80085f2:	4618      	mov	r0, r3
 80085f4:	3710      	adds	r7, #16
 80085f6:	46bd      	mov	sp, r7
 80085f8:	bd80      	pop	{r7, pc}

080085fa <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80085fa:	b580      	push	{r7, lr}
 80085fc:	b084      	sub	sp, #16
 80085fe:	af00      	add	r7, sp, #0
 8008600:	60f8      	str	r0, [r7, #12]
 8008602:	60b9      	str	r1, [r7, #8]
 8008604:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	2203      	movs	r2, #3
 800860a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	687a      	ldr	r2, [r7, #4]
 8008612:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	687a      	ldr	r2, [r7, #4]
 800861a:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	68ba      	ldr	r2, [r7, #8]
 8008622:	2100      	movs	r1, #0
 8008624:	68f8      	ldr	r0, [r7, #12]
 8008626:	f000 fdeb 	bl	8009200 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800862a:	2300      	movs	r3, #0
}
 800862c:	4618      	mov	r0, r3
 800862e:	3710      	adds	r7, #16
 8008630:	46bd      	mov	sp, r7
 8008632:	bd80      	pop	{r7, pc}

08008634 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8008634:	b580      	push	{r7, lr}
 8008636:	b084      	sub	sp, #16
 8008638:	af00      	add	r7, sp, #0
 800863a:	60f8      	str	r0, [r7, #12]
 800863c:	60b9      	str	r1, [r7, #8]
 800863e:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	68ba      	ldr	r2, [r7, #8]
 8008644:	2100      	movs	r1, #0
 8008646:	68f8      	ldr	r0, [r7, #12]
 8008648:	f000 fdda 	bl	8009200 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800864c:	2300      	movs	r3, #0
}
 800864e:	4618      	mov	r0, r3
 8008650:	3710      	adds	r7, #16
 8008652:	46bd      	mov	sp, r7
 8008654:	bd80      	pop	{r7, pc}

08008656 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008656:	b580      	push	{r7, lr}
 8008658:	b082      	sub	sp, #8
 800865a:	af00      	add	r7, sp, #0
 800865c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	2204      	movs	r2, #4
 8008662:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008666:	2300      	movs	r3, #0
 8008668:	2200      	movs	r2, #0
 800866a:	2100      	movs	r1, #0
 800866c:	6878      	ldr	r0, [r7, #4]
 800866e:	f000 fda6 	bl	80091be <USBD_LL_Transmit>

  return USBD_OK;
 8008672:	2300      	movs	r3, #0
}
 8008674:	4618      	mov	r0, r3
 8008676:	3708      	adds	r7, #8
 8008678:	46bd      	mov	sp, r7
 800867a:	bd80      	pop	{r7, pc}

0800867c <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800867c:	b580      	push	{r7, lr}
 800867e:	b082      	sub	sp, #8
 8008680:	af00      	add	r7, sp, #0
 8008682:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	2205      	movs	r2, #5
 8008688:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800868c:	2300      	movs	r3, #0
 800868e:	2200      	movs	r2, #0
 8008690:	2100      	movs	r1, #0
 8008692:	6878      	ldr	r0, [r7, #4]
 8008694:	f000 fdb4 	bl	8009200 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008698:	2300      	movs	r3, #0
}
 800869a:	4618      	mov	r0, r3
 800869c:	3708      	adds	r7, #8
 800869e:	46bd      	mov	sp, r7
 80086a0:	bd80      	pop	{r7, pc}
	...

080086a4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80086a4:	b580      	push	{r7, lr}
 80086a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80086a8:	2200      	movs	r2, #0
 80086aa:	4912      	ldr	r1, [pc, #72]	; (80086f4 <MX_USB_DEVICE_Init+0x50>)
 80086ac:	4812      	ldr	r0, [pc, #72]	; (80086f8 <MX_USB_DEVICE_Init+0x54>)
 80086ae:	f7fe fe8f 	bl	80073d0 <USBD_Init>
 80086b2:	4603      	mov	r3, r0
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d001      	beq.n	80086bc <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80086b8:	f7f8 f85e 	bl	8000778 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80086bc:	490f      	ldr	r1, [pc, #60]	; (80086fc <MX_USB_DEVICE_Init+0x58>)
 80086be:	480e      	ldr	r0, [pc, #56]	; (80086f8 <MX_USB_DEVICE_Init+0x54>)
 80086c0:	f7fe feb6 	bl	8007430 <USBD_RegisterClass>
 80086c4:	4603      	mov	r3, r0
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d001      	beq.n	80086ce <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80086ca:	f7f8 f855 	bl	8000778 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80086ce:	490c      	ldr	r1, [pc, #48]	; (8008700 <MX_USB_DEVICE_Init+0x5c>)
 80086d0:	4809      	ldr	r0, [pc, #36]	; (80086f8 <MX_USB_DEVICE_Init+0x54>)
 80086d2:	f7fe fdd7 	bl	8007284 <USBD_CDC_RegisterInterface>
 80086d6:	4603      	mov	r3, r0
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d001      	beq.n	80086e0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80086dc:	f7f8 f84c 	bl	8000778 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80086e0:	4805      	ldr	r0, [pc, #20]	; (80086f8 <MX_USB_DEVICE_Init+0x54>)
 80086e2:	f7fe fecc 	bl	800747e <USBD_Start>
 80086e6:	4603      	mov	r3, r0
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d001      	beq.n	80086f0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80086ec:	f7f8 f844 	bl	8000778 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80086f0:	bf00      	nop
 80086f2:	bd80      	pop	{r7, pc}
 80086f4:	20000158 	.word	0x20000158
 80086f8:	200003b8 	.word	0x200003b8
 80086fc:	2000003c 	.word	0x2000003c
 8008700:	20000144 	.word	0x20000144

08008704 <cdcAvailable>:
uint32_t rx_out;			//read buffer
uint32_t rx_len=256;
uint8_t rx_buf[256];

uint32_t cdcAvailable(void)
{
 8008704:	b480      	push	{r7}
 8008706:	b083      	sub	sp, #12
 8008708:	af00      	add	r7, sp, #0
	uint32_t ret;

	ret = (rx_in - rx_out) % rx_len;
 800870a:	4b0a      	ldr	r3, [pc, #40]	; (8008734 <cdcAvailable+0x30>)
 800870c:	681a      	ldr	r2, [r3, #0]
 800870e:	4b0a      	ldr	r3, [pc, #40]	; (8008738 <cdcAvailable+0x34>)
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	1ad3      	subs	r3, r2, r3
 8008714:	4a09      	ldr	r2, [pc, #36]	; (800873c <cdcAvailable+0x38>)
 8008716:	6812      	ldr	r2, [r2, #0]
 8008718:	fbb3 f1f2 	udiv	r1, r3, r2
 800871c:	fb01 f202 	mul.w	r2, r1, r2
 8008720:	1a9b      	subs	r3, r3, r2
 8008722:	607b      	str	r3, [r7, #4]

	return ret;
 8008724:	687b      	ldr	r3, [r7, #4]
}
 8008726:	4618      	mov	r0, r3
 8008728:	370c      	adds	r7, #12
 800872a:	46bd      	mov	sp, r7
 800872c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008730:	4770      	bx	lr
 8008732:	bf00      	nop
 8008734:	20000690 	.word	0x20000690
 8008738:	20000694 	.word	0x20000694
 800873c:	20000140 	.word	0x20000140

08008740 <cdcRead>:

uint8_t cdcRead(void)
{
 8008740:	b480      	push	{r7}
 8008742:	b083      	sub	sp, #12
 8008744:	af00      	add	r7, sp, #0
	uint8_t ret;
	ret = rx_buf[rx_out];
 8008746:	4b0f      	ldr	r3, [pc, #60]	; (8008784 <cdcRead+0x44>)
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	4a0f      	ldr	r2, [pc, #60]	; (8008788 <cdcRead+0x48>)
 800874c:	5cd3      	ldrb	r3, [r2, r3]
 800874e:	71fb      	strb	r3, [r7, #7]

	if(rx_out != rx_in)
 8008750:	4b0c      	ldr	r3, [pc, #48]	; (8008784 <cdcRead+0x44>)
 8008752:	681a      	ldr	r2, [r3, #0]
 8008754:	4b0d      	ldr	r3, [pc, #52]	; (800878c <cdcRead+0x4c>)
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	429a      	cmp	r2, r3
 800875a:	d00b      	beq.n	8008774 <cdcRead+0x34>
	{
		rx_out = (rx_out + 1) % rx_len;
 800875c:	4b09      	ldr	r3, [pc, #36]	; (8008784 <cdcRead+0x44>)
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	3301      	adds	r3, #1
 8008762:	4a0b      	ldr	r2, [pc, #44]	; (8008790 <cdcRead+0x50>)
 8008764:	6812      	ldr	r2, [r2, #0]
 8008766:	fbb3 f1f2 	udiv	r1, r3, r2
 800876a:	fb01 f202 	mul.w	r2, r1, r2
 800876e:	1a9b      	subs	r3, r3, r2
 8008770:	4a04      	ldr	r2, [pc, #16]	; (8008784 <cdcRead+0x44>)
 8008772:	6013      	str	r3, [r2, #0]
	}
	return ret;
 8008774:	79fb      	ldrb	r3, [r7, #7]
}
 8008776:	4618      	mov	r0, r3
 8008778:	370c      	adds	r7, #12
 800877a:	46bd      	mov	sp, r7
 800877c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008780:	4770      	bx	lr
 8008782:	bf00      	nop
 8008784:	20000694 	.word	0x20000694
 8008788:	20000698 	.word	0x20000698
 800878c:	20000690 	.word	0x20000690
 8008790:	20000140 	.word	0x20000140

08008794 <cdcDataIn>:

void cdcDataIn(uint8_t rx_data)
{
 8008794:	b480      	push	{r7}
 8008796:	b085      	sub	sp, #20
 8008798:	af00      	add	r7, sp, #0
 800879a:	4603      	mov	r3, r0
 800879c:	71fb      	strb	r3, [r7, #7]
	uint32_t next_rx_in;
	next_rx_in = (rx_in + 1) % rx_len;
 800879e:	4b0f      	ldr	r3, [pc, #60]	; (80087dc <cdcDataIn+0x48>)
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	3301      	adds	r3, #1
 80087a4:	4a0e      	ldr	r2, [pc, #56]	; (80087e0 <cdcDataIn+0x4c>)
 80087a6:	6812      	ldr	r2, [r2, #0]
 80087a8:	fbb3 f1f2 	udiv	r1, r3, r2
 80087ac:	fb01 f202 	mul.w	r2, r1, r2
 80087b0:	1a9b      	subs	r3, r3, r2
 80087b2:	60fb      	str	r3, [r7, #12]
	rx_buf[rx_in] = rx_data;
 80087b4:	4b09      	ldr	r3, [pc, #36]	; (80087dc <cdcDataIn+0x48>)
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	490a      	ldr	r1, [pc, #40]	; (80087e4 <cdcDataIn+0x50>)
 80087ba:	79fa      	ldrb	r2, [r7, #7]
 80087bc:	54ca      	strb	r2, [r1, r3]
	if(next_rx_in != rx_out)
 80087be:	4b0a      	ldr	r3, [pc, #40]	; (80087e8 <cdcDataIn+0x54>)
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	68fa      	ldr	r2, [r7, #12]
 80087c4:	429a      	cmp	r2, r3
 80087c6:	d002      	beq.n	80087ce <cdcDataIn+0x3a>
	{
		rx_in = next_rx_in;
 80087c8:	4a04      	ldr	r2, [pc, #16]	; (80087dc <cdcDataIn+0x48>)
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	6013      	str	r3, [r2, #0]
	}
}
 80087ce:	bf00      	nop
 80087d0:	3714      	adds	r7, #20
 80087d2:	46bd      	mov	sp, r7
 80087d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087d8:	4770      	bx	lr
 80087da:	bf00      	nop
 80087dc:	20000690 	.word	0x20000690
 80087e0:	20000140 	.word	0x20000140
 80087e4:	20000698 	.word	0x20000698
 80087e8:	20000694 	.word	0x20000694

080087ec <cdcWrite>:
uint32_t cdcWrite(uint8_t *pData, uint32_t length)
{
 80087ec:	b580      	push	{r7, lr}
 80087ee:	b084      	sub	sp, #16
 80087f0:	af00      	add	r7, sp, #0
 80087f2:	6078      	str	r0, [r7, #4]
 80087f4:	6039      	str	r1, [r7, #0]
	uint32_t pre_time;
	uint8_t ret;

	pre_time = millis();
 80087f6:	f7f7 ff4e 	bl	8000696 <millis>
 80087fa:	60f8      	str	r0, [r7, #12]
	while(1)
	{
		ret = CDC_Transmit_FS(pData, length);
 80087fc:	683b      	ldr	r3, [r7, #0]
 80087fe:	b29b      	uxth	r3, r3
 8008800:	4619      	mov	r1, r3
 8008802:	6878      	ldr	r0, [r7, #4]
 8008804:	f000 f922 	bl	8008a4c <CDC_Transmit_FS>
 8008808:	4603      	mov	r3, r0
 800880a:	72fb      	strb	r3, [r7, #11]

		if(ret == USBD_OK)
 800880c:	7afb      	ldrb	r3, [r7, #11]
 800880e:	2b00      	cmp	r3, #0
 8008810:	d101      	bne.n	8008816 <cdcWrite+0x2a>
		{
			return length;
 8008812:	683b      	ldr	r3, [r7, #0]
 8008814:	e00e      	b.n	8008834 <cdcWrite+0x48>
		}
		else if(ret == USBD_FAIL)
 8008816:	7afb      	ldrb	r3, [r7, #11]
 8008818:	2b03      	cmp	r3, #3
 800881a:	d101      	bne.n	8008820 <cdcWrite+0x34>
		{
			return 0;
 800881c:	2300      	movs	r3, #0
 800881e:	e009      	b.n	8008834 <cdcWrite+0x48>
		}

		if(millis() - pre_time >= 100)
 8008820:	f7f7 ff39 	bl	8000696 <millis>
 8008824:	4602      	mov	r2, r0
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	1ad3      	subs	r3, r2, r3
 800882a:	2b63      	cmp	r3, #99	; 0x63
 800882c:	d800      	bhi.n	8008830 <cdcWrite+0x44>
		ret = CDC_Transmit_FS(pData, length);
 800882e:	e7e5      	b.n	80087fc <cdcWrite+0x10>
		{
			break;
 8008830:	bf00      	nop
		}

	}
	return 0;
 8008832:	2300      	movs	r3, #0
}
 8008834:	4618      	mov	r0, r3
 8008836:	3710      	adds	r7, #16
 8008838:	46bd      	mov	sp, r7
 800883a:	bd80      	pop	{r7, pc}

0800883c <cdcGetBaud>:
uint32_t cdcGetBaud(void)
{
 800883c:	b480      	push	{r7}
 800883e:	af00      	add	r7, sp, #0
	return LineCoding.bitrate;
 8008840:	4b03      	ldr	r3, [pc, #12]	; (8008850 <cdcGetBaud+0x14>)
 8008842:	681b      	ldr	r3, [r3, #0]
}
 8008844:	4618      	mov	r0, r3
 8008846:	46bd      	mov	sp, r7
 8008848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800884c:	4770      	bx	lr
 800884e:	bf00      	nop
 8008850:	20000688 	.word	0x20000688

08008854 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008854:	b580      	push	{r7, lr}
 8008856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008858:	2200      	movs	r2, #0
 800885a:	4905      	ldr	r1, [pc, #20]	; (8008870 <CDC_Init_FS+0x1c>)
 800885c:	4805      	ldr	r0, [pc, #20]	; (8008874 <CDC_Init_FS+0x20>)
 800885e:	f7fe fd26 	bl	80072ae <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008862:	4905      	ldr	r1, [pc, #20]	; (8008878 <CDC_Init_FS+0x24>)
 8008864:	4803      	ldr	r0, [pc, #12]	; (8008874 <CDC_Init_FS+0x20>)
 8008866:	f7fe fd40 	bl	80072ea <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800886a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800886c:	4618      	mov	r0, r3
 800886e:	bd80      	pop	{r7, pc}
 8008870:	20000b98 	.word	0x20000b98
 8008874:	200003b8 	.word	0x200003b8
 8008878:	20000798 	.word	0x20000798

0800887c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800887c:	b480      	push	{r7}
 800887e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008880:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008882:	4618      	mov	r0, r3
 8008884:	46bd      	mov	sp, r7
 8008886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800888a:	4770      	bx	lr

0800888c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800888c:	b480      	push	{r7}
 800888e:	b083      	sub	sp, #12
 8008890:	af00      	add	r7, sp, #0
 8008892:	4603      	mov	r3, r0
 8008894:	6039      	str	r1, [r7, #0]
 8008896:	71fb      	strb	r3, [r7, #7]
 8008898:	4613      	mov	r3, r2
 800889a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800889c:	79fb      	ldrb	r3, [r7, #7]
 800889e:	2b23      	cmp	r3, #35	; 0x23
 80088a0:	f200 80a3 	bhi.w	80089ea <CDC_Control_FS+0x15e>
 80088a4:	a201      	add	r2, pc, #4	; (adr r2, 80088ac <CDC_Control_FS+0x20>)
 80088a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088aa:	bf00      	nop
 80088ac:	080089eb 	.word	0x080089eb
 80088b0:	080089eb 	.word	0x080089eb
 80088b4:	080089eb 	.word	0x080089eb
 80088b8:	080089eb 	.word	0x080089eb
 80088bc:	080089eb 	.word	0x080089eb
 80088c0:	080089eb 	.word	0x080089eb
 80088c4:	080089eb 	.word	0x080089eb
 80088c8:	080089eb 	.word	0x080089eb
 80088cc:	080089eb 	.word	0x080089eb
 80088d0:	080089eb 	.word	0x080089eb
 80088d4:	080089eb 	.word	0x080089eb
 80088d8:	080089eb 	.word	0x080089eb
 80088dc:	080089eb 	.word	0x080089eb
 80088e0:	080089eb 	.word	0x080089eb
 80088e4:	080089eb 	.word	0x080089eb
 80088e8:	080089eb 	.word	0x080089eb
 80088ec:	080089eb 	.word	0x080089eb
 80088f0:	080089eb 	.word	0x080089eb
 80088f4:	080089eb 	.word	0x080089eb
 80088f8:	080089eb 	.word	0x080089eb
 80088fc:	080089eb 	.word	0x080089eb
 8008900:	080089eb 	.word	0x080089eb
 8008904:	080089eb 	.word	0x080089eb
 8008908:	080089eb 	.word	0x080089eb
 800890c:	080089eb 	.word	0x080089eb
 8008910:	080089eb 	.word	0x080089eb
 8008914:	080089eb 	.word	0x080089eb
 8008918:	080089eb 	.word	0x080089eb
 800891c:	080089eb 	.word	0x080089eb
 8008920:	080089eb 	.word	0x080089eb
 8008924:	080089eb 	.word	0x080089eb
 8008928:	080089eb 	.word	0x080089eb
 800892c:	0800893d 	.word	0x0800893d
 8008930:	08008997 	.word	0x08008997
 8008934:	080089eb 	.word	0x080089eb
 8008938:	080089eb 	.word	0x080089eb
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING: // MCU�?? ?��?��?���?? set
    	LineCoding.bitrate 		 = (uint32_t)(pbuf[0]);
 800893c:	683b      	ldr	r3, [r7, #0]
 800893e:	781b      	ldrb	r3, [r3, #0]
 8008940:	461a      	mov	r2, r3
 8008942:	4b2e      	ldr	r3, [pc, #184]	; (80089fc <CDC_Control_FS+0x170>)
 8008944:	601a      	str	r2, [r3, #0]
    	LineCoding.bitrate 		|= (uint32_t)(pbuf[1]) << 8;
 8008946:	4b2d      	ldr	r3, [pc, #180]	; (80089fc <CDC_Control_FS+0x170>)
 8008948:	681a      	ldr	r2, [r3, #0]
 800894a:	683b      	ldr	r3, [r7, #0]
 800894c:	3301      	adds	r3, #1
 800894e:	781b      	ldrb	r3, [r3, #0]
 8008950:	021b      	lsls	r3, r3, #8
 8008952:	4313      	orrs	r3, r2
 8008954:	4a29      	ldr	r2, [pc, #164]	; (80089fc <CDC_Control_FS+0x170>)
 8008956:	6013      	str	r3, [r2, #0]
    	LineCoding.bitrate 		|= (uint32_t)(pbuf[2]) << 16;
 8008958:	4b28      	ldr	r3, [pc, #160]	; (80089fc <CDC_Control_FS+0x170>)
 800895a:	681a      	ldr	r2, [r3, #0]
 800895c:	683b      	ldr	r3, [r7, #0]
 800895e:	3302      	adds	r3, #2
 8008960:	781b      	ldrb	r3, [r3, #0]
 8008962:	041b      	lsls	r3, r3, #16
 8008964:	4313      	orrs	r3, r2
 8008966:	4a25      	ldr	r2, [pc, #148]	; (80089fc <CDC_Control_FS+0x170>)
 8008968:	6013      	str	r3, [r2, #0]
    	LineCoding.bitrate 		|= (uint32_t)(pbuf[3]) << 24;
 800896a:	4b24      	ldr	r3, [pc, #144]	; (80089fc <CDC_Control_FS+0x170>)
 800896c:	681a      	ldr	r2, [r3, #0]
 800896e:	683b      	ldr	r3, [r7, #0]
 8008970:	3303      	adds	r3, #3
 8008972:	781b      	ldrb	r3, [r3, #0]
 8008974:	061b      	lsls	r3, r3, #24
 8008976:	4313      	orrs	r3, r2
 8008978:	4a20      	ldr	r2, [pc, #128]	; (80089fc <CDC_Control_FS+0x170>)
 800897a:	6013      	str	r3, [r2, #0]
    	LineCoding.format 		 = pbuf[4];
 800897c:	683b      	ldr	r3, [r7, #0]
 800897e:	791a      	ldrb	r2, [r3, #4]
 8008980:	4b1e      	ldr	r3, [pc, #120]	; (80089fc <CDC_Control_FS+0x170>)
 8008982:	711a      	strb	r2, [r3, #4]
    	LineCoding.paritytype  = pbuf[5];
 8008984:	683b      	ldr	r3, [r7, #0]
 8008986:	795a      	ldrb	r2, [r3, #5]
 8008988:	4b1c      	ldr	r3, [pc, #112]	; (80089fc <CDC_Control_FS+0x170>)
 800898a:	715a      	strb	r2, [r3, #5]
    	LineCoding.datatype 	 = pbuf[6];
 800898c:	683b      	ldr	r3, [r7, #0]
 800898e:	799a      	ldrb	r2, [r3, #6]
 8008990:	4b1a      	ldr	r3, [pc, #104]	; (80089fc <CDC_Control_FS+0x170>)
 8008992:	719a      	strb	r2, [r3, #6]
    break;
 8008994:	e02a      	b.n	80089ec <CDC_Control_FS+0x160>

    case CDC_GET_LINE_CODING: // PC�?? ?��?��?���?? ?��?���??
    	pbuf[0] = (uint8_t)(LineCoding.bitrate);
 8008996:	4b19      	ldr	r3, [pc, #100]	; (80089fc <CDC_Control_FS+0x170>)
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	b2da      	uxtb	r2, r3
 800899c:	683b      	ldr	r3, [r7, #0]
 800899e:	701a      	strb	r2, [r3, #0]
    	pbuf[1] = (uint8_t)(LineCoding.bitrate >> 8);
 80089a0:	4b16      	ldr	r3, [pc, #88]	; (80089fc <CDC_Control_FS+0x170>)
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	0a1a      	lsrs	r2, r3, #8
 80089a6:	683b      	ldr	r3, [r7, #0]
 80089a8:	3301      	adds	r3, #1
 80089aa:	b2d2      	uxtb	r2, r2
 80089ac:	701a      	strb	r2, [r3, #0]
    	pbuf[2] = (uint8_t)(LineCoding.bitrate >> 16);
 80089ae:	4b13      	ldr	r3, [pc, #76]	; (80089fc <CDC_Control_FS+0x170>)
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	0c1a      	lsrs	r2, r3, #16
 80089b4:	683b      	ldr	r3, [r7, #0]
 80089b6:	3302      	adds	r3, #2
 80089b8:	b2d2      	uxtb	r2, r2
 80089ba:	701a      	strb	r2, [r3, #0]
    	pbuf[3] = (uint8_t)(LineCoding.bitrate >> 24);
 80089bc:	4b0f      	ldr	r3, [pc, #60]	; (80089fc <CDC_Control_FS+0x170>)
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	0e1a      	lsrs	r2, r3, #24
 80089c2:	683b      	ldr	r3, [r7, #0]
 80089c4:	3303      	adds	r3, #3
 80089c6:	b2d2      	uxtb	r2, r2
 80089c8:	701a      	strb	r2, [r3, #0]
    	pbuf[4] = LineCoding.format;
 80089ca:	683b      	ldr	r3, [r7, #0]
 80089cc:	3304      	adds	r3, #4
 80089ce:	4a0b      	ldr	r2, [pc, #44]	; (80089fc <CDC_Control_FS+0x170>)
 80089d0:	7912      	ldrb	r2, [r2, #4]
 80089d2:	701a      	strb	r2, [r3, #0]
    	pbuf[5] = LineCoding.paritytype;
 80089d4:	683b      	ldr	r3, [r7, #0]
 80089d6:	3305      	adds	r3, #5
 80089d8:	4a08      	ldr	r2, [pc, #32]	; (80089fc <CDC_Control_FS+0x170>)
 80089da:	7952      	ldrb	r2, [r2, #5]
 80089dc:	701a      	strb	r2, [r3, #0]
    	pbuf[6] = LineCoding.datatype;
 80089de:	683b      	ldr	r3, [r7, #0]
 80089e0:	3306      	adds	r3, #6
 80089e2:	4a06      	ldr	r2, [pc, #24]	; (80089fc <CDC_Control_FS+0x170>)
 80089e4:	7992      	ldrb	r2, [r2, #6]
 80089e6:	701a      	strb	r2, [r3, #0]
    break;
 80089e8:	e000      	b.n	80089ec <CDC_Control_FS+0x160>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80089ea:	bf00      	nop
  }

  return (USBD_OK);
 80089ec:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80089ee:	4618      	mov	r0, r3
 80089f0:	370c      	adds	r7, #12
 80089f2:	46bd      	mov	sp, r7
 80089f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089f8:	4770      	bx	lr
 80089fa:	bf00      	nop
 80089fc:	20000688 	.word	0x20000688

08008a00 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008a00:	b580      	push	{r7, lr}
 8008a02:	b084      	sub	sp, #16
 8008a04:	af00      	add	r7, sp, #0
 8008a06:	6078      	str	r0, [r7, #4]
 8008a08:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008a0a:	6879      	ldr	r1, [r7, #4]
 8008a0c:	480e      	ldr	r0, [pc, #56]	; (8008a48 <CDC_Receive_FS+0x48>)
 8008a0e:	f7fe fc6c 	bl	80072ea <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8008a12:	480d      	ldr	r0, [pc, #52]	; (8008a48 <CDC_Receive_FS+0x48>)
 8008a14:	f7fe fcb2 	bl	800737c <USBD_CDC_ReceivePacket>

  for(int i = 0 ; i < *Len ; i++)
 8008a18:	2300      	movs	r3, #0
 8008a1a:	60fb      	str	r3, [r7, #12]
 8008a1c:	e009      	b.n	8008a32 <CDC_Receive_FS+0x32>
  {
  	cdcDataIn(Buf[i]);// ?��?��?��?�� 발생?�� data in
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	687a      	ldr	r2, [r7, #4]
 8008a22:	4413      	add	r3, r2
 8008a24:	781b      	ldrb	r3, [r3, #0]
 8008a26:	4618      	mov	r0, r3
 8008a28:	f7ff feb4 	bl	8008794 <cdcDataIn>
  for(int i = 0 ; i < *Len ; i++)
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	3301      	adds	r3, #1
 8008a30:	60fb      	str	r3, [r7, #12]
 8008a32:	683b      	ldr	r3, [r7, #0]
 8008a34:	681a      	ldr	r2, [r3, #0]
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	429a      	cmp	r2, r3
 8008a3a:	d8f0      	bhi.n	8008a1e <CDC_Receive_FS+0x1e>
  }
  return (USBD_OK);
 8008a3c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008a3e:	4618      	mov	r0, r3
 8008a40:	3710      	adds	r7, #16
 8008a42:	46bd      	mov	sp, r7
 8008a44:	bd80      	pop	{r7, pc}
 8008a46:	bf00      	nop
 8008a48:	200003b8 	.word	0x200003b8

08008a4c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8008a4c:	b580      	push	{r7, lr}
 8008a4e:	b084      	sub	sp, #16
 8008a50:	af00      	add	r7, sp, #0
 8008a52:	6078      	str	r0, [r7, #4]
 8008a54:	460b      	mov	r3, r1
 8008a56:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8008a58:	2300      	movs	r3, #0
 8008a5a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8008a5c:	4b0d      	ldr	r3, [pc, #52]	; (8008a94 <CDC_Transmit_FS+0x48>)
 8008a5e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008a62:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8008a64:	68bb      	ldr	r3, [r7, #8]
 8008a66:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d001      	beq.n	8008a72 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8008a6e:	2301      	movs	r3, #1
 8008a70:	e00b      	b.n	8008a8a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8008a72:	887b      	ldrh	r3, [r7, #2]
 8008a74:	461a      	mov	r2, r3
 8008a76:	6879      	ldr	r1, [r7, #4]
 8008a78:	4806      	ldr	r0, [pc, #24]	; (8008a94 <CDC_Transmit_FS+0x48>)
 8008a7a:	f7fe fc18 	bl	80072ae <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8008a7e:	4805      	ldr	r0, [pc, #20]	; (8008a94 <CDC_Transmit_FS+0x48>)
 8008a80:	f7fe fc4c 	bl	800731c <USBD_CDC_TransmitPacket>
 8008a84:	4603      	mov	r3, r0
 8008a86:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8008a88:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a8a:	4618      	mov	r0, r3
 8008a8c:	3710      	adds	r7, #16
 8008a8e:	46bd      	mov	sp, r7
 8008a90:	bd80      	pop	{r7, pc}
 8008a92:	bf00      	nop
 8008a94:	200003b8 	.word	0x200003b8

08008a98 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8008a98:	b480      	push	{r7}
 8008a9a:	b087      	sub	sp, #28
 8008a9c:	af00      	add	r7, sp, #0
 8008a9e:	60f8      	str	r0, [r7, #12]
 8008aa0:	60b9      	str	r1, [r7, #8]
 8008aa2:	4613      	mov	r3, r2
 8008aa4:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8008aa6:	2300      	movs	r3, #0
 8008aa8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8008aaa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008aae:	4618      	mov	r0, r3
 8008ab0:	371c      	adds	r7, #28
 8008ab2:	46bd      	mov	sp, r7
 8008ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ab8:	4770      	bx	lr
	...

08008abc <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008abc:	b480      	push	{r7}
 8008abe:	b083      	sub	sp, #12
 8008ac0:	af00      	add	r7, sp, #0
 8008ac2:	4603      	mov	r3, r0
 8008ac4:	6039      	str	r1, [r7, #0]
 8008ac6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008ac8:	683b      	ldr	r3, [r7, #0]
 8008aca:	2212      	movs	r2, #18
 8008acc:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008ace:	4b03      	ldr	r3, [pc, #12]	; (8008adc <USBD_FS_DeviceDescriptor+0x20>)
}
 8008ad0:	4618      	mov	r0, r3
 8008ad2:	370c      	adds	r7, #12
 8008ad4:	46bd      	mov	sp, r7
 8008ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ada:	4770      	bx	lr
 8008adc:	20000174 	.word	0x20000174

08008ae0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008ae0:	b480      	push	{r7}
 8008ae2:	b083      	sub	sp, #12
 8008ae4:	af00      	add	r7, sp, #0
 8008ae6:	4603      	mov	r3, r0
 8008ae8:	6039      	str	r1, [r7, #0]
 8008aea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008aec:	683b      	ldr	r3, [r7, #0]
 8008aee:	2204      	movs	r2, #4
 8008af0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008af2:	4b03      	ldr	r3, [pc, #12]	; (8008b00 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008af4:	4618      	mov	r0, r3
 8008af6:	370c      	adds	r7, #12
 8008af8:	46bd      	mov	sp, r7
 8008afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008afe:	4770      	bx	lr
 8008b00:	20000188 	.word	0x20000188

08008b04 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008b04:	b580      	push	{r7, lr}
 8008b06:	b082      	sub	sp, #8
 8008b08:	af00      	add	r7, sp, #0
 8008b0a:	4603      	mov	r3, r0
 8008b0c:	6039      	str	r1, [r7, #0]
 8008b0e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008b10:	79fb      	ldrb	r3, [r7, #7]
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d105      	bne.n	8008b22 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008b16:	683a      	ldr	r2, [r7, #0]
 8008b18:	4907      	ldr	r1, [pc, #28]	; (8008b38 <USBD_FS_ProductStrDescriptor+0x34>)
 8008b1a:	4808      	ldr	r0, [pc, #32]	; (8008b3c <USBD_FS_ProductStrDescriptor+0x38>)
 8008b1c:	f7ff fce1 	bl	80084e2 <USBD_GetString>
 8008b20:	e004      	b.n	8008b2c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008b22:	683a      	ldr	r2, [r7, #0]
 8008b24:	4904      	ldr	r1, [pc, #16]	; (8008b38 <USBD_FS_ProductStrDescriptor+0x34>)
 8008b26:	4805      	ldr	r0, [pc, #20]	; (8008b3c <USBD_FS_ProductStrDescriptor+0x38>)
 8008b28:	f7ff fcdb 	bl	80084e2 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008b2c:	4b02      	ldr	r3, [pc, #8]	; (8008b38 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008b2e:	4618      	mov	r0, r3
 8008b30:	3708      	adds	r7, #8
 8008b32:	46bd      	mov	sp, r7
 8008b34:	bd80      	pop	{r7, pc}
 8008b36:	bf00      	nop
 8008b38:	20000f98 	.word	0x20000f98
 8008b3c:	08009378 	.word	0x08009378

08008b40 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008b40:	b580      	push	{r7, lr}
 8008b42:	b082      	sub	sp, #8
 8008b44:	af00      	add	r7, sp, #0
 8008b46:	4603      	mov	r3, r0
 8008b48:	6039      	str	r1, [r7, #0]
 8008b4a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008b4c:	683a      	ldr	r2, [r7, #0]
 8008b4e:	4904      	ldr	r1, [pc, #16]	; (8008b60 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008b50:	4804      	ldr	r0, [pc, #16]	; (8008b64 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008b52:	f7ff fcc6 	bl	80084e2 <USBD_GetString>
  return USBD_StrDesc;
 8008b56:	4b02      	ldr	r3, [pc, #8]	; (8008b60 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008b58:	4618      	mov	r0, r3
 8008b5a:	3708      	adds	r7, #8
 8008b5c:	46bd      	mov	sp, r7
 8008b5e:	bd80      	pop	{r7, pc}
 8008b60:	20000f98 	.word	0x20000f98
 8008b64:	08009390 	.word	0x08009390

08008b68 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008b68:	b580      	push	{r7, lr}
 8008b6a:	b082      	sub	sp, #8
 8008b6c:	af00      	add	r7, sp, #0
 8008b6e:	4603      	mov	r3, r0
 8008b70:	6039      	str	r1, [r7, #0]
 8008b72:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008b74:	683b      	ldr	r3, [r7, #0]
 8008b76:	221a      	movs	r2, #26
 8008b78:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008b7a:	f000 f843 	bl	8008c04 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008b7e:	4b02      	ldr	r3, [pc, #8]	; (8008b88 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008b80:	4618      	mov	r0, r3
 8008b82:	3708      	adds	r7, #8
 8008b84:	46bd      	mov	sp, r7
 8008b86:	bd80      	pop	{r7, pc}
 8008b88:	2000018c 	.word	0x2000018c

08008b8c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008b8c:	b580      	push	{r7, lr}
 8008b8e:	b082      	sub	sp, #8
 8008b90:	af00      	add	r7, sp, #0
 8008b92:	4603      	mov	r3, r0
 8008b94:	6039      	str	r1, [r7, #0]
 8008b96:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008b98:	79fb      	ldrb	r3, [r7, #7]
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d105      	bne.n	8008baa <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008b9e:	683a      	ldr	r2, [r7, #0]
 8008ba0:	4907      	ldr	r1, [pc, #28]	; (8008bc0 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008ba2:	4808      	ldr	r0, [pc, #32]	; (8008bc4 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008ba4:	f7ff fc9d 	bl	80084e2 <USBD_GetString>
 8008ba8:	e004      	b.n	8008bb4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008baa:	683a      	ldr	r2, [r7, #0]
 8008bac:	4904      	ldr	r1, [pc, #16]	; (8008bc0 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008bae:	4805      	ldr	r0, [pc, #20]	; (8008bc4 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008bb0:	f7ff fc97 	bl	80084e2 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008bb4:	4b02      	ldr	r3, [pc, #8]	; (8008bc0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008bb6:	4618      	mov	r0, r3
 8008bb8:	3708      	adds	r7, #8
 8008bba:	46bd      	mov	sp, r7
 8008bbc:	bd80      	pop	{r7, pc}
 8008bbe:	bf00      	nop
 8008bc0:	20000f98 	.word	0x20000f98
 8008bc4:	080093a4 	.word	0x080093a4

08008bc8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008bc8:	b580      	push	{r7, lr}
 8008bca:	b082      	sub	sp, #8
 8008bcc:	af00      	add	r7, sp, #0
 8008bce:	4603      	mov	r3, r0
 8008bd0:	6039      	str	r1, [r7, #0]
 8008bd2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008bd4:	79fb      	ldrb	r3, [r7, #7]
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d105      	bne.n	8008be6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008bda:	683a      	ldr	r2, [r7, #0]
 8008bdc:	4907      	ldr	r1, [pc, #28]	; (8008bfc <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008bde:	4808      	ldr	r0, [pc, #32]	; (8008c00 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008be0:	f7ff fc7f 	bl	80084e2 <USBD_GetString>
 8008be4:	e004      	b.n	8008bf0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008be6:	683a      	ldr	r2, [r7, #0]
 8008be8:	4904      	ldr	r1, [pc, #16]	; (8008bfc <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008bea:	4805      	ldr	r0, [pc, #20]	; (8008c00 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008bec:	f7ff fc79 	bl	80084e2 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008bf0:	4b02      	ldr	r3, [pc, #8]	; (8008bfc <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008bf2:	4618      	mov	r0, r3
 8008bf4:	3708      	adds	r7, #8
 8008bf6:	46bd      	mov	sp, r7
 8008bf8:	bd80      	pop	{r7, pc}
 8008bfa:	bf00      	nop
 8008bfc:	20000f98 	.word	0x20000f98
 8008c00:	080093b0 	.word	0x080093b0

08008c04 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008c04:	b580      	push	{r7, lr}
 8008c06:	b084      	sub	sp, #16
 8008c08:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008c0a:	4b0f      	ldr	r3, [pc, #60]	; (8008c48 <Get_SerialNum+0x44>)
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008c10:	4b0e      	ldr	r3, [pc, #56]	; (8008c4c <Get_SerialNum+0x48>)
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008c16:	4b0e      	ldr	r3, [pc, #56]	; (8008c50 <Get_SerialNum+0x4c>)
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008c1c:	68fa      	ldr	r2, [r7, #12]
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	4413      	add	r3, r2
 8008c22:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d009      	beq.n	8008c3e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008c2a:	2208      	movs	r2, #8
 8008c2c:	4909      	ldr	r1, [pc, #36]	; (8008c54 <Get_SerialNum+0x50>)
 8008c2e:	68f8      	ldr	r0, [r7, #12]
 8008c30:	f000 f814 	bl	8008c5c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008c34:	2204      	movs	r2, #4
 8008c36:	4908      	ldr	r1, [pc, #32]	; (8008c58 <Get_SerialNum+0x54>)
 8008c38:	68b8      	ldr	r0, [r7, #8]
 8008c3a:	f000 f80f 	bl	8008c5c <IntToUnicode>
  }
}
 8008c3e:	bf00      	nop
 8008c40:	3710      	adds	r7, #16
 8008c42:	46bd      	mov	sp, r7
 8008c44:	bd80      	pop	{r7, pc}
 8008c46:	bf00      	nop
 8008c48:	1fff7a10 	.word	0x1fff7a10
 8008c4c:	1fff7a14 	.word	0x1fff7a14
 8008c50:	1fff7a18 	.word	0x1fff7a18
 8008c54:	2000018e 	.word	0x2000018e
 8008c58:	2000019e 	.word	0x2000019e

08008c5c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008c5c:	b480      	push	{r7}
 8008c5e:	b087      	sub	sp, #28
 8008c60:	af00      	add	r7, sp, #0
 8008c62:	60f8      	str	r0, [r7, #12]
 8008c64:	60b9      	str	r1, [r7, #8]
 8008c66:	4613      	mov	r3, r2
 8008c68:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008c6a:	2300      	movs	r3, #0
 8008c6c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008c6e:	2300      	movs	r3, #0
 8008c70:	75fb      	strb	r3, [r7, #23]
 8008c72:	e027      	b.n	8008cc4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	0f1b      	lsrs	r3, r3, #28
 8008c78:	2b09      	cmp	r3, #9
 8008c7a:	d80b      	bhi.n	8008c94 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	0f1b      	lsrs	r3, r3, #28
 8008c80:	b2da      	uxtb	r2, r3
 8008c82:	7dfb      	ldrb	r3, [r7, #23]
 8008c84:	005b      	lsls	r3, r3, #1
 8008c86:	4619      	mov	r1, r3
 8008c88:	68bb      	ldr	r3, [r7, #8]
 8008c8a:	440b      	add	r3, r1
 8008c8c:	3230      	adds	r2, #48	; 0x30
 8008c8e:	b2d2      	uxtb	r2, r2
 8008c90:	701a      	strb	r2, [r3, #0]
 8008c92:	e00a      	b.n	8008caa <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	0f1b      	lsrs	r3, r3, #28
 8008c98:	b2da      	uxtb	r2, r3
 8008c9a:	7dfb      	ldrb	r3, [r7, #23]
 8008c9c:	005b      	lsls	r3, r3, #1
 8008c9e:	4619      	mov	r1, r3
 8008ca0:	68bb      	ldr	r3, [r7, #8]
 8008ca2:	440b      	add	r3, r1
 8008ca4:	3237      	adds	r2, #55	; 0x37
 8008ca6:	b2d2      	uxtb	r2, r2
 8008ca8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	011b      	lsls	r3, r3, #4
 8008cae:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008cb0:	7dfb      	ldrb	r3, [r7, #23]
 8008cb2:	005b      	lsls	r3, r3, #1
 8008cb4:	3301      	adds	r3, #1
 8008cb6:	68ba      	ldr	r2, [r7, #8]
 8008cb8:	4413      	add	r3, r2
 8008cba:	2200      	movs	r2, #0
 8008cbc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008cbe:	7dfb      	ldrb	r3, [r7, #23]
 8008cc0:	3301      	adds	r3, #1
 8008cc2:	75fb      	strb	r3, [r7, #23]
 8008cc4:	7dfa      	ldrb	r2, [r7, #23]
 8008cc6:	79fb      	ldrb	r3, [r7, #7]
 8008cc8:	429a      	cmp	r2, r3
 8008cca:	d3d3      	bcc.n	8008c74 <IntToUnicode+0x18>
  }
}
 8008ccc:	bf00      	nop
 8008cce:	bf00      	nop
 8008cd0:	371c      	adds	r7, #28
 8008cd2:	46bd      	mov	sp, r7
 8008cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cd8:	4770      	bx	lr
	...

08008cdc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008cdc:	b580      	push	{r7, lr}
 8008cde:	b08a      	sub	sp, #40	; 0x28
 8008ce0:	af00      	add	r7, sp, #0
 8008ce2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008ce4:	f107 0314 	add.w	r3, r7, #20
 8008ce8:	2200      	movs	r2, #0
 8008cea:	601a      	str	r2, [r3, #0]
 8008cec:	605a      	str	r2, [r3, #4]
 8008cee:	609a      	str	r2, [r3, #8]
 8008cf0:	60da      	str	r2, [r3, #12]
 8008cf2:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008cfc:	d13a      	bne.n	8008d74 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008cfe:	2300      	movs	r3, #0
 8008d00:	613b      	str	r3, [r7, #16]
 8008d02:	4b1e      	ldr	r3, [pc, #120]	; (8008d7c <HAL_PCD_MspInit+0xa0>)
 8008d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d06:	4a1d      	ldr	r2, [pc, #116]	; (8008d7c <HAL_PCD_MspInit+0xa0>)
 8008d08:	f043 0301 	orr.w	r3, r3, #1
 8008d0c:	6313      	str	r3, [r2, #48]	; 0x30
 8008d0e:	4b1b      	ldr	r3, [pc, #108]	; (8008d7c <HAL_PCD_MspInit+0xa0>)
 8008d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d12:	f003 0301 	and.w	r3, r3, #1
 8008d16:	613b      	str	r3, [r7, #16]
 8008d18:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8008d1a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8008d1e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008d20:	2302      	movs	r3, #2
 8008d22:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008d24:	2300      	movs	r3, #0
 8008d26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008d28:	2303      	movs	r3, #3
 8008d2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008d2c:	230a      	movs	r3, #10
 8008d2e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008d30:	f107 0314 	add.w	r3, r7, #20
 8008d34:	4619      	mov	r1, r3
 8008d36:	4812      	ldr	r0, [pc, #72]	; (8008d80 <HAL_PCD_MspInit+0xa4>)
 8008d38:	f7f9 f80a 	bl	8001d50 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008d3c:	4b0f      	ldr	r3, [pc, #60]	; (8008d7c <HAL_PCD_MspInit+0xa0>)
 8008d3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d40:	4a0e      	ldr	r2, [pc, #56]	; (8008d7c <HAL_PCD_MspInit+0xa0>)
 8008d42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008d46:	6353      	str	r3, [r2, #52]	; 0x34
 8008d48:	2300      	movs	r3, #0
 8008d4a:	60fb      	str	r3, [r7, #12]
 8008d4c:	4b0b      	ldr	r3, [pc, #44]	; (8008d7c <HAL_PCD_MspInit+0xa0>)
 8008d4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008d50:	4a0a      	ldr	r2, [pc, #40]	; (8008d7c <HAL_PCD_MspInit+0xa0>)
 8008d52:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008d56:	6453      	str	r3, [r2, #68]	; 0x44
 8008d58:	4b08      	ldr	r3, [pc, #32]	; (8008d7c <HAL_PCD_MspInit+0xa0>)
 8008d5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008d5c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008d60:	60fb      	str	r3, [r7, #12]
 8008d62:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008d64:	2200      	movs	r2, #0
 8008d66:	2100      	movs	r1, #0
 8008d68:	2043      	movs	r0, #67	; 0x43
 8008d6a:	f7f8 fb4c 	bl	8001406 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008d6e:	2043      	movs	r0, #67	; 0x43
 8008d70:	f7f8 fb65 	bl	800143e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008d74:	bf00      	nop
 8008d76:	3728      	adds	r7, #40	; 0x28
 8008d78:	46bd      	mov	sp, r7
 8008d7a:	bd80      	pop	{r7, pc}
 8008d7c:	40023800 	.word	0x40023800
 8008d80:	40020000 	.word	0x40020000

08008d84 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008d84:	b580      	push	{r7, lr}
 8008d86:	b082      	sub	sp, #8
 8008d88:	af00      	add	r7, sp, #0
 8008d8a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8008d98:	4619      	mov	r1, r3
 8008d9a:	4610      	mov	r0, r2
 8008d9c:	f7fe fbba 	bl	8007514 <USBD_LL_SetupStage>
}
 8008da0:	bf00      	nop
 8008da2:	3708      	adds	r7, #8
 8008da4:	46bd      	mov	sp, r7
 8008da6:	bd80      	pop	{r7, pc}

08008da8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008da8:	b580      	push	{r7, lr}
 8008daa:	b082      	sub	sp, #8
 8008dac:	af00      	add	r7, sp, #0
 8008dae:	6078      	str	r0, [r7, #4]
 8008db0:	460b      	mov	r3, r1
 8008db2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8008dba:	78fa      	ldrb	r2, [r7, #3]
 8008dbc:	6879      	ldr	r1, [r7, #4]
 8008dbe:	4613      	mov	r3, r2
 8008dc0:	00db      	lsls	r3, r3, #3
 8008dc2:	1a9b      	subs	r3, r3, r2
 8008dc4:	009b      	lsls	r3, r3, #2
 8008dc6:	440b      	add	r3, r1
 8008dc8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8008dcc:	681a      	ldr	r2, [r3, #0]
 8008dce:	78fb      	ldrb	r3, [r7, #3]
 8008dd0:	4619      	mov	r1, r3
 8008dd2:	f7fe fbf4 	bl	80075be <USBD_LL_DataOutStage>
}
 8008dd6:	bf00      	nop
 8008dd8:	3708      	adds	r7, #8
 8008dda:	46bd      	mov	sp, r7
 8008ddc:	bd80      	pop	{r7, pc}

08008dde <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008dde:	b580      	push	{r7, lr}
 8008de0:	b082      	sub	sp, #8
 8008de2:	af00      	add	r7, sp, #0
 8008de4:	6078      	str	r0, [r7, #4]
 8008de6:	460b      	mov	r3, r1
 8008de8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8008df0:	78fa      	ldrb	r2, [r7, #3]
 8008df2:	6879      	ldr	r1, [r7, #4]
 8008df4:	4613      	mov	r3, r2
 8008df6:	00db      	lsls	r3, r3, #3
 8008df8:	1a9b      	subs	r3, r3, r2
 8008dfa:	009b      	lsls	r3, r3, #2
 8008dfc:	440b      	add	r3, r1
 8008dfe:	3348      	adds	r3, #72	; 0x48
 8008e00:	681a      	ldr	r2, [r3, #0]
 8008e02:	78fb      	ldrb	r3, [r7, #3]
 8008e04:	4619      	mov	r1, r3
 8008e06:	f7fe fc3d 	bl	8007684 <USBD_LL_DataInStage>
}
 8008e0a:	bf00      	nop
 8008e0c:	3708      	adds	r7, #8
 8008e0e:	46bd      	mov	sp, r7
 8008e10:	bd80      	pop	{r7, pc}

08008e12 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008e12:	b580      	push	{r7, lr}
 8008e14:	b082      	sub	sp, #8
 8008e16:	af00      	add	r7, sp, #0
 8008e18:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008e20:	4618      	mov	r0, r3
 8008e22:	f7fe fd51 	bl	80078c8 <USBD_LL_SOF>
}
 8008e26:	bf00      	nop
 8008e28:	3708      	adds	r7, #8
 8008e2a:	46bd      	mov	sp, r7
 8008e2c:	bd80      	pop	{r7, pc}

08008e2e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008e2e:	b580      	push	{r7, lr}
 8008e30:	b084      	sub	sp, #16
 8008e32:	af00      	add	r7, sp, #0
 8008e34:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008e36:	2301      	movs	r3, #1
 8008e38:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	68db      	ldr	r3, [r3, #12]
 8008e3e:	2b02      	cmp	r3, #2
 8008e40:	d001      	beq.n	8008e46 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8008e42:	f7f7 fc99 	bl	8000778 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008e4c:	7bfa      	ldrb	r2, [r7, #15]
 8008e4e:	4611      	mov	r1, r2
 8008e50:	4618      	mov	r0, r3
 8008e52:	f7fe fcfb 	bl	800784c <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008e5c:	4618      	mov	r0, r3
 8008e5e:	f7fe fca7 	bl	80077b0 <USBD_LL_Reset>
}
 8008e62:	bf00      	nop
 8008e64:	3710      	adds	r7, #16
 8008e66:	46bd      	mov	sp, r7
 8008e68:	bd80      	pop	{r7, pc}
	...

08008e6c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008e6c:	b580      	push	{r7, lr}
 8008e6e:	b082      	sub	sp, #8
 8008e70:	af00      	add	r7, sp, #0
 8008e72:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008e7a:	4618      	mov	r0, r3
 8008e7c:	f7fe fcf6 	bl	800786c <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	687a      	ldr	r2, [r7, #4]
 8008e8c:	6812      	ldr	r2, [r2, #0]
 8008e8e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008e92:	f043 0301 	orr.w	r3, r3, #1
 8008e96:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	6a1b      	ldr	r3, [r3, #32]
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d005      	beq.n	8008eac <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008ea0:	4b04      	ldr	r3, [pc, #16]	; (8008eb4 <HAL_PCD_SuspendCallback+0x48>)
 8008ea2:	691b      	ldr	r3, [r3, #16]
 8008ea4:	4a03      	ldr	r2, [pc, #12]	; (8008eb4 <HAL_PCD_SuspendCallback+0x48>)
 8008ea6:	f043 0306 	orr.w	r3, r3, #6
 8008eaa:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008eac:	bf00      	nop
 8008eae:	3708      	adds	r7, #8
 8008eb0:	46bd      	mov	sp, r7
 8008eb2:	bd80      	pop	{r7, pc}
 8008eb4:	e000ed00 	.word	0xe000ed00

08008eb8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008eb8:	b580      	push	{r7, lr}
 8008eba:	b082      	sub	sp, #8
 8008ebc:	af00      	add	r7, sp, #0
 8008ebe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008ec6:	4618      	mov	r0, r3
 8008ec8:	f7fe fce6 	bl	8007898 <USBD_LL_Resume>
}
 8008ecc:	bf00      	nop
 8008ece:	3708      	adds	r7, #8
 8008ed0:	46bd      	mov	sp, r7
 8008ed2:	bd80      	pop	{r7, pc}

08008ed4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008ed4:	b580      	push	{r7, lr}
 8008ed6:	b082      	sub	sp, #8
 8008ed8:	af00      	add	r7, sp, #0
 8008eda:	6078      	str	r0, [r7, #4]
 8008edc:	460b      	mov	r3, r1
 8008ede:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008ee6:	78fa      	ldrb	r2, [r7, #3]
 8008ee8:	4611      	mov	r1, r2
 8008eea:	4618      	mov	r0, r3
 8008eec:	f7fe fd34 	bl	8007958 <USBD_LL_IsoOUTIncomplete>
}
 8008ef0:	bf00      	nop
 8008ef2:	3708      	adds	r7, #8
 8008ef4:	46bd      	mov	sp, r7
 8008ef6:	bd80      	pop	{r7, pc}

08008ef8 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008ef8:	b580      	push	{r7, lr}
 8008efa:	b082      	sub	sp, #8
 8008efc:	af00      	add	r7, sp, #0
 8008efe:	6078      	str	r0, [r7, #4]
 8008f00:	460b      	mov	r3, r1
 8008f02:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008f0a:	78fa      	ldrb	r2, [r7, #3]
 8008f0c:	4611      	mov	r1, r2
 8008f0e:	4618      	mov	r0, r3
 8008f10:	f7fe fcfc 	bl	800790c <USBD_LL_IsoINIncomplete>
}
 8008f14:	bf00      	nop
 8008f16:	3708      	adds	r7, #8
 8008f18:	46bd      	mov	sp, r7
 8008f1a:	bd80      	pop	{r7, pc}

08008f1c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008f1c:	b580      	push	{r7, lr}
 8008f1e:	b082      	sub	sp, #8
 8008f20:	af00      	add	r7, sp, #0
 8008f22:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008f2a:	4618      	mov	r0, r3
 8008f2c:	f7fe fd3a 	bl	80079a4 <USBD_LL_DevConnected>
}
 8008f30:	bf00      	nop
 8008f32:	3708      	adds	r7, #8
 8008f34:	46bd      	mov	sp, r7
 8008f36:	bd80      	pop	{r7, pc}

08008f38 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008f38:	b580      	push	{r7, lr}
 8008f3a:	b082      	sub	sp, #8
 8008f3c:	af00      	add	r7, sp, #0
 8008f3e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008f46:	4618      	mov	r0, r3
 8008f48:	f7fe fd37 	bl	80079ba <USBD_LL_DevDisconnected>
}
 8008f4c:	bf00      	nop
 8008f4e:	3708      	adds	r7, #8
 8008f50:	46bd      	mov	sp, r7
 8008f52:	bd80      	pop	{r7, pc}

08008f54 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008f54:	b580      	push	{r7, lr}
 8008f56:	b082      	sub	sp, #8
 8008f58:	af00      	add	r7, sp, #0
 8008f5a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	781b      	ldrb	r3, [r3, #0]
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d13c      	bne.n	8008fde <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8008f64:	4a20      	ldr	r2, [pc, #128]	; (8008fe8 <USBD_LL_Init+0x94>)
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	4a1e      	ldr	r2, [pc, #120]	; (8008fe8 <USBD_LL_Init+0x94>)
 8008f70:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008f74:	4b1c      	ldr	r3, [pc, #112]	; (8008fe8 <USBD_LL_Init+0x94>)
 8008f76:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008f7a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8008f7c:	4b1a      	ldr	r3, [pc, #104]	; (8008fe8 <USBD_LL_Init+0x94>)
 8008f7e:	2204      	movs	r2, #4
 8008f80:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8008f82:	4b19      	ldr	r3, [pc, #100]	; (8008fe8 <USBD_LL_Init+0x94>)
 8008f84:	2202      	movs	r2, #2
 8008f86:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008f88:	4b17      	ldr	r3, [pc, #92]	; (8008fe8 <USBD_LL_Init+0x94>)
 8008f8a:	2200      	movs	r2, #0
 8008f8c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8008f8e:	4b16      	ldr	r3, [pc, #88]	; (8008fe8 <USBD_LL_Init+0x94>)
 8008f90:	2202      	movs	r2, #2
 8008f92:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008f94:	4b14      	ldr	r3, [pc, #80]	; (8008fe8 <USBD_LL_Init+0x94>)
 8008f96:	2200      	movs	r2, #0
 8008f98:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8008f9a:	4b13      	ldr	r3, [pc, #76]	; (8008fe8 <USBD_LL_Init+0x94>)
 8008f9c:	2200      	movs	r2, #0
 8008f9e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8008fa0:	4b11      	ldr	r3, [pc, #68]	; (8008fe8 <USBD_LL_Init+0x94>)
 8008fa2:	2200      	movs	r2, #0
 8008fa4:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8008fa6:	4b10      	ldr	r3, [pc, #64]	; (8008fe8 <USBD_LL_Init+0x94>)
 8008fa8:	2200      	movs	r2, #0
 8008faa:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8008fac:	4b0e      	ldr	r3, [pc, #56]	; (8008fe8 <USBD_LL_Init+0x94>)
 8008fae:	2200      	movs	r2, #0
 8008fb0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8008fb2:	480d      	ldr	r0, [pc, #52]	; (8008fe8 <USBD_LL_Init+0x94>)
 8008fb4:	f7f9 f967 	bl	8002286 <HAL_PCD_Init>
 8008fb8:	4603      	mov	r3, r0
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d001      	beq.n	8008fc2 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8008fbe:	f7f7 fbdb 	bl	8000778 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8008fc2:	2180      	movs	r1, #128	; 0x80
 8008fc4:	4808      	ldr	r0, [pc, #32]	; (8008fe8 <USBD_LL_Init+0x94>)
 8008fc6:	f7fa fac4 	bl	8003552 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8008fca:	2240      	movs	r2, #64	; 0x40
 8008fcc:	2100      	movs	r1, #0
 8008fce:	4806      	ldr	r0, [pc, #24]	; (8008fe8 <USBD_LL_Init+0x94>)
 8008fd0:	f7fa fa78 	bl	80034c4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8008fd4:	2280      	movs	r2, #128	; 0x80
 8008fd6:	2101      	movs	r1, #1
 8008fd8:	4803      	ldr	r0, [pc, #12]	; (8008fe8 <USBD_LL_Init+0x94>)
 8008fda:	f7fa fa73 	bl	80034c4 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8008fde:	2300      	movs	r3, #0
}
 8008fe0:	4618      	mov	r0, r3
 8008fe2:	3708      	adds	r7, #8
 8008fe4:	46bd      	mov	sp, r7
 8008fe6:	bd80      	pop	{r7, pc}
 8008fe8:	20001198 	.word	0x20001198

08008fec <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008fec:	b580      	push	{r7, lr}
 8008fee:	b084      	sub	sp, #16
 8008ff0:	af00      	add	r7, sp, #0
 8008ff2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008ff4:	2300      	movs	r3, #0
 8008ff6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008ff8:	2300      	movs	r3, #0
 8008ffa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009002:	4618      	mov	r0, r3
 8009004:	f7f9 fa5c 	bl	80024c0 <HAL_PCD_Start>
 8009008:	4603      	mov	r3, r0
 800900a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800900c:	7bfb      	ldrb	r3, [r7, #15]
 800900e:	4618      	mov	r0, r3
 8009010:	f000 f942 	bl	8009298 <USBD_Get_USB_Status>
 8009014:	4603      	mov	r3, r0
 8009016:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009018:	7bbb      	ldrb	r3, [r7, #14]
}
 800901a:	4618      	mov	r0, r3
 800901c:	3710      	adds	r7, #16
 800901e:	46bd      	mov	sp, r7
 8009020:	bd80      	pop	{r7, pc}

08009022 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009022:	b580      	push	{r7, lr}
 8009024:	b084      	sub	sp, #16
 8009026:	af00      	add	r7, sp, #0
 8009028:	6078      	str	r0, [r7, #4]
 800902a:	4608      	mov	r0, r1
 800902c:	4611      	mov	r1, r2
 800902e:	461a      	mov	r2, r3
 8009030:	4603      	mov	r3, r0
 8009032:	70fb      	strb	r3, [r7, #3]
 8009034:	460b      	mov	r3, r1
 8009036:	70bb      	strb	r3, [r7, #2]
 8009038:	4613      	mov	r3, r2
 800903a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800903c:	2300      	movs	r3, #0
 800903e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009040:	2300      	movs	r3, #0
 8009042:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800904a:	78bb      	ldrb	r3, [r7, #2]
 800904c:	883a      	ldrh	r2, [r7, #0]
 800904e:	78f9      	ldrb	r1, [r7, #3]
 8009050:	f7f9 fe40 	bl	8002cd4 <HAL_PCD_EP_Open>
 8009054:	4603      	mov	r3, r0
 8009056:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009058:	7bfb      	ldrb	r3, [r7, #15]
 800905a:	4618      	mov	r0, r3
 800905c:	f000 f91c 	bl	8009298 <USBD_Get_USB_Status>
 8009060:	4603      	mov	r3, r0
 8009062:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009064:	7bbb      	ldrb	r3, [r7, #14]
}
 8009066:	4618      	mov	r0, r3
 8009068:	3710      	adds	r7, #16
 800906a:	46bd      	mov	sp, r7
 800906c:	bd80      	pop	{r7, pc}

0800906e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800906e:	b580      	push	{r7, lr}
 8009070:	b084      	sub	sp, #16
 8009072:	af00      	add	r7, sp, #0
 8009074:	6078      	str	r0, [r7, #4]
 8009076:	460b      	mov	r3, r1
 8009078:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800907a:	2300      	movs	r3, #0
 800907c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800907e:	2300      	movs	r3, #0
 8009080:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009088:	78fa      	ldrb	r2, [r7, #3]
 800908a:	4611      	mov	r1, r2
 800908c:	4618      	mov	r0, r3
 800908e:	f7f9 fe89 	bl	8002da4 <HAL_PCD_EP_Close>
 8009092:	4603      	mov	r3, r0
 8009094:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009096:	7bfb      	ldrb	r3, [r7, #15]
 8009098:	4618      	mov	r0, r3
 800909a:	f000 f8fd 	bl	8009298 <USBD_Get_USB_Status>
 800909e:	4603      	mov	r3, r0
 80090a0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80090a2:	7bbb      	ldrb	r3, [r7, #14]
}
 80090a4:	4618      	mov	r0, r3
 80090a6:	3710      	adds	r7, #16
 80090a8:	46bd      	mov	sp, r7
 80090aa:	bd80      	pop	{r7, pc}

080090ac <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80090ac:	b580      	push	{r7, lr}
 80090ae:	b084      	sub	sp, #16
 80090b0:	af00      	add	r7, sp, #0
 80090b2:	6078      	str	r0, [r7, #4]
 80090b4:	460b      	mov	r3, r1
 80090b6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80090b8:	2300      	movs	r3, #0
 80090ba:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80090bc:	2300      	movs	r3, #0
 80090be:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80090c6:	78fa      	ldrb	r2, [r7, #3]
 80090c8:	4611      	mov	r1, r2
 80090ca:	4618      	mov	r0, r3
 80090cc:	f7f9 ff61 	bl	8002f92 <HAL_PCD_EP_SetStall>
 80090d0:	4603      	mov	r3, r0
 80090d2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80090d4:	7bfb      	ldrb	r3, [r7, #15]
 80090d6:	4618      	mov	r0, r3
 80090d8:	f000 f8de 	bl	8009298 <USBD_Get_USB_Status>
 80090dc:	4603      	mov	r3, r0
 80090de:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80090e0:	7bbb      	ldrb	r3, [r7, #14]
}
 80090e2:	4618      	mov	r0, r3
 80090e4:	3710      	adds	r7, #16
 80090e6:	46bd      	mov	sp, r7
 80090e8:	bd80      	pop	{r7, pc}

080090ea <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80090ea:	b580      	push	{r7, lr}
 80090ec:	b084      	sub	sp, #16
 80090ee:	af00      	add	r7, sp, #0
 80090f0:	6078      	str	r0, [r7, #4]
 80090f2:	460b      	mov	r3, r1
 80090f4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80090f6:	2300      	movs	r3, #0
 80090f8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80090fa:	2300      	movs	r3, #0
 80090fc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009104:	78fa      	ldrb	r2, [r7, #3]
 8009106:	4611      	mov	r1, r2
 8009108:	4618      	mov	r0, r3
 800910a:	f7f9 ffa6 	bl	800305a <HAL_PCD_EP_ClrStall>
 800910e:	4603      	mov	r3, r0
 8009110:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009112:	7bfb      	ldrb	r3, [r7, #15]
 8009114:	4618      	mov	r0, r3
 8009116:	f000 f8bf 	bl	8009298 <USBD_Get_USB_Status>
 800911a:	4603      	mov	r3, r0
 800911c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800911e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009120:	4618      	mov	r0, r3
 8009122:	3710      	adds	r7, #16
 8009124:	46bd      	mov	sp, r7
 8009126:	bd80      	pop	{r7, pc}

08009128 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009128:	b480      	push	{r7}
 800912a:	b085      	sub	sp, #20
 800912c:	af00      	add	r7, sp, #0
 800912e:	6078      	str	r0, [r7, #4]
 8009130:	460b      	mov	r3, r1
 8009132:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800913a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800913c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009140:	2b00      	cmp	r3, #0
 8009142:	da0b      	bge.n	800915c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009144:	78fb      	ldrb	r3, [r7, #3]
 8009146:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800914a:	68f9      	ldr	r1, [r7, #12]
 800914c:	4613      	mov	r3, r2
 800914e:	00db      	lsls	r3, r3, #3
 8009150:	1a9b      	subs	r3, r3, r2
 8009152:	009b      	lsls	r3, r3, #2
 8009154:	440b      	add	r3, r1
 8009156:	333e      	adds	r3, #62	; 0x3e
 8009158:	781b      	ldrb	r3, [r3, #0]
 800915a:	e00b      	b.n	8009174 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800915c:	78fb      	ldrb	r3, [r7, #3]
 800915e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009162:	68f9      	ldr	r1, [r7, #12]
 8009164:	4613      	mov	r3, r2
 8009166:	00db      	lsls	r3, r3, #3
 8009168:	1a9b      	subs	r3, r3, r2
 800916a:	009b      	lsls	r3, r3, #2
 800916c:	440b      	add	r3, r1
 800916e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8009172:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009174:	4618      	mov	r0, r3
 8009176:	3714      	adds	r7, #20
 8009178:	46bd      	mov	sp, r7
 800917a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800917e:	4770      	bx	lr

08009180 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009180:	b580      	push	{r7, lr}
 8009182:	b084      	sub	sp, #16
 8009184:	af00      	add	r7, sp, #0
 8009186:	6078      	str	r0, [r7, #4]
 8009188:	460b      	mov	r3, r1
 800918a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800918c:	2300      	movs	r3, #0
 800918e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009190:	2300      	movs	r3, #0
 8009192:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800919a:	78fa      	ldrb	r2, [r7, #3]
 800919c:	4611      	mov	r1, r2
 800919e:	4618      	mov	r0, r3
 80091a0:	f7f9 fd73 	bl	8002c8a <HAL_PCD_SetAddress>
 80091a4:	4603      	mov	r3, r0
 80091a6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80091a8:	7bfb      	ldrb	r3, [r7, #15]
 80091aa:	4618      	mov	r0, r3
 80091ac:	f000 f874 	bl	8009298 <USBD_Get_USB_Status>
 80091b0:	4603      	mov	r3, r0
 80091b2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80091b4:	7bbb      	ldrb	r3, [r7, #14]
}
 80091b6:	4618      	mov	r0, r3
 80091b8:	3710      	adds	r7, #16
 80091ba:	46bd      	mov	sp, r7
 80091bc:	bd80      	pop	{r7, pc}

080091be <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80091be:	b580      	push	{r7, lr}
 80091c0:	b086      	sub	sp, #24
 80091c2:	af00      	add	r7, sp, #0
 80091c4:	60f8      	str	r0, [r7, #12]
 80091c6:	607a      	str	r2, [r7, #4]
 80091c8:	603b      	str	r3, [r7, #0]
 80091ca:	460b      	mov	r3, r1
 80091cc:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80091ce:	2300      	movs	r3, #0
 80091d0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80091d2:	2300      	movs	r3, #0
 80091d4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80091dc:	7af9      	ldrb	r1, [r7, #11]
 80091de:	683b      	ldr	r3, [r7, #0]
 80091e0:	687a      	ldr	r2, [r7, #4]
 80091e2:	f7f9 fe8c 	bl	8002efe <HAL_PCD_EP_Transmit>
 80091e6:	4603      	mov	r3, r0
 80091e8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80091ea:	7dfb      	ldrb	r3, [r7, #23]
 80091ec:	4618      	mov	r0, r3
 80091ee:	f000 f853 	bl	8009298 <USBD_Get_USB_Status>
 80091f2:	4603      	mov	r3, r0
 80091f4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80091f6:	7dbb      	ldrb	r3, [r7, #22]
}
 80091f8:	4618      	mov	r0, r3
 80091fa:	3718      	adds	r7, #24
 80091fc:	46bd      	mov	sp, r7
 80091fe:	bd80      	pop	{r7, pc}

08009200 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009200:	b580      	push	{r7, lr}
 8009202:	b086      	sub	sp, #24
 8009204:	af00      	add	r7, sp, #0
 8009206:	60f8      	str	r0, [r7, #12]
 8009208:	607a      	str	r2, [r7, #4]
 800920a:	603b      	str	r3, [r7, #0]
 800920c:	460b      	mov	r3, r1
 800920e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009210:	2300      	movs	r3, #0
 8009212:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009214:	2300      	movs	r3, #0
 8009216:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800921e:	7af9      	ldrb	r1, [r7, #11]
 8009220:	683b      	ldr	r3, [r7, #0]
 8009222:	687a      	ldr	r2, [r7, #4]
 8009224:	f7f9 fe08 	bl	8002e38 <HAL_PCD_EP_Receive>
 8009228:	4603      	mov	r3, r0
 800922a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800922c:	7dfb      	ldrb	r3, [r7, #23]
 800922e:	4618      	mov	r0, r3
 8009230:	f000 f832 	bl	8009298 <USBD_Get_USB_Status>
 8009234:	4603      	mov	r3, r0
 8009236:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009238:	7dbb      	ldrb	r3, [r7, #22]
}
 800923a:	4618      	mov	r0, r3
 800923c:	3718      	adds	r7, #24
 800923e:	46bd      	mov	sp, r7
 8009240:	bd80      	pop	{r7, pc}

08009242 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009242:	b580      	push	{r7, lr}
 8009244:	b082      	sub	sp, #8
 8009246:	af00      	add	r7, sp, #0
 8009248:	6078      	str	r0, [r7, #4]
 800924a:	460b      	mov	r3, r1
 800924c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009254:	78fa      	ldrb	r2, [r7, #3]
 8009256:	4611      	mov	r1, r2
 8009258:	4618      	mov	r0, r3
 800925a:	f7f9 fe38 	bl	8002ece <HAL_PCD_EP_GetRxCount>
 800925e:	4603      	mov	r3, r0
}
 8009260:	4618      	mov	r0, r3
 8009262:	3708      	adds	r7, #8
 8009264:	46bd      	mov	sp, r7
 8009266:	bd80      	pop	{r7, pc}

08009268 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009268:	b480      	push	{r7}
 800926a:	b083      	sub	sp, #12
 800926c:	af00      	add	r7, sp, #0
 800926e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009270:	4b03      	ldr	r3, [pc, #12]	; (8009280 <USBD_static_malloc+0x18>)
}
 8009272:	4618      	mov	r0, r3
 8009274:	370c      	adds	r7, #12
 8009276:	46bd      	mov	sp, r7
 8009278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800927c:	4770      	bx	lr
 800927e:	bf00      	nop
 8009280:	200015a0 	.word	0x200015a0

08009284 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009284:	b480      	push	{r7}
 8009286:	b083      	sub	sp, #12
 8009288:	af00      	add	r7, sp, #0
 800928a:	6078      	str	r0, [r7, #4]

}
 800928c:	bf00      	nop
 800928e:	370c      	adds	r7, #12
 8009290:	46bd      	mov	sp, r7
 8009292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009296:	4770      	bx	lr

08009298 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009298:	b480      	push	{r7}
 800929a:	b085      	sub	sp, #20
 800929c:	af00      	add	r7, sp, #0
 800929e:	4603      	mov	r3, r0
 80092a0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80092a2:	2300      	movs	r3, #0
 80092a4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80092a6:	79fb      	ldrb	r3, [r7, #7]
 80092a8:	2b03      	cmp	r3, #3
 80092aa:	d817      	bhi.n	80092dc <USBD_Get_USB_Status+0x44>
 80092ac:	a201      	add	r2, pc, #4	; (adr r2, 80092b4 <USBD_Get_USB_Status+0x1c>)
 80092ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092b2:	bf00      	nop
 80092b4:	080092c5 	.word	0x080092c5
 80092b8:	080092cb 	.word	0x080092cb
 80092bc:	080092d1 	.word	0x080092d1
 80092c0:	080092d7 	.word	0x080092d7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80092c4:	2300      	movs	r3, #0
 80092c6:	73fb      	strb	r3, [r7, #15]
    break;
 80092c8:	e00b      	b.n	80092e2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80092ca:	2303      	movs	r3, #3
 80092cc:	73fb      	strb	r3, [r7, #15]
    break;
 80092ce:	e008      	b.n	80092e2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80092d0:	2301      	movs	r3, #1
 80092d2:	73fb      	strb	r3, [r7, #15]
    break;
 80092d4:	e005      	b.n	80092e2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80092d6:	2303      	movs	r3, #3
 80092d8:	73fb      	strb	r3, [r7, #15]
    break;
 80092da:	e002      	b.n	80092e2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80092dc:	2303      	movs	r3, #3
 80092de:	73fb      	strb	r3, [r7, #15]
    break;
 80092e0:	bf00      	nop
  }
  return usb_status;
 80092e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80092e4:	4618      	mov	r0, r3
 80092e6:	3714      	adds	r7, #20
 80092e8:	46bd      	mov	sp, r7
 80092ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ee:	4770      	bx	lr

080092f0 <main>:
 */

#include "main.h"

int main(void)
{
 80092f0:	b580      	push	{r7, lr}
 80092f2:	af00      	add	r7, sp, #0

	hwInit();
 80092f4:	f7f7 fee2 	bl	80010bc <hwInit>
	apInit();
 80092f8:	f7f7 f8f0 	bl	80004dc <apInit>

	apMain();
 80092fc:	f7f7 f8fc 	bl	80004f8 <apMain>
	return 0;
 8009300:	2300      	movs	r3, #0
}
 8009302:	4618      	mov	r0, r3
 8009304:	bd80      	pop	{r7, pc}
	...

08009308 <__libc_init_array>:
 8009308:	b570      	push	{r4, r5, r6, lr}
 800930a:	4d0d      	ldr	r5, [pc, #52]	; (8009340 <__libc_init_array+0x38>)
 800930c:	4c0d      	ldr	r4, [pc, #52]	; (8009344 <__libc_init_array+0x3c>)
 800930e:	1b64      	subs	r4, r4, r5
 8009310:	10a4      	asrs	r4, r4, #2
 8009312:	2600      	movs	r6, #0
 8009314:	42a6      	cmp	r6, r4
 8009316:	d109      	bne.n	800932c <__libc_init_array+0x24>
 8009318:	4d0b      	ldr	r5, [pc, #44]	; (8009348 <__libc_init_array+0x40>)
 800931a:	4c0c      	ldr	r4, [pc, #48]	; (800934c <__libc_init_array+0x44>)
 800931c:	f000 f820 	bl	8009360 <_init>
 8009320:	1b64      	subs	r4, r4, r5
 8009322:	10a4      	asrs	r4, r4, #2
 8009324:	2600      	movs	r6, #0
 8009326:	42a6      	cmp	r6, r4
 8009328:	d105      	bne.n	8009336 <__libc_init_array+0x2e>
 800932a:	bd70      	pop	{r4, r5, r6, pc}
 800932c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009330:	4798      	blx	r3
 8009332:	3601      	adds	r6, #1
 8009334:	e7ee      	b.n	8009314 <__libc_init_array+0xc>
 8009336:	f855 3b04 	ldr.w	r3, [r5], #4
 800933a:	4798      	blx	r3
 800933c:	3601      	adds	r6, #1
 800933e:	e7f2      	b.n	8009326 <__libc_init_array+0x1e>
 8009340:	080093e8 	.word	0x080093e8
 8009344:	080093e8 	.word	0x080093e8
 8009348:	080093e8 	.word	0x080093e8
 800934c:	080093ec 	.word	0x080093ec

08009350 <memset>:
 8009350:	4402      	add	r2, r0
 8009352:	4603      	mov	r3, r0
 8009354:	4293      	cmp	r3, r2
 8009356:	d100      	bne.n	800935a <memset+0xa>
 8009358:	4770      	bx	lr
 800935a:	f803 1b01 	strb.w	r1, [r3], #1
 800935e:	e7f9      	b.n	8009354 <memset+0x4>

08009360 <_init>:
 8009360:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009362:	bf00      	nop
 8009364:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009366:	bc08      	pop	{r3}
 8009368:	469e      	mov	lr, r3
 800936a:	4770      	bx	lr

0800936c <_fini>:
 800936c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800936e:	bf00      	nop
 8009370:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009372:	bc08      	pop	{r3}
 8009374:	469e      	mov	lr, r3
 8009376:	4770      	bx	lr
