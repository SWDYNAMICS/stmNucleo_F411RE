
stmf411re_fw.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000982c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000dc  080099cc  080099cc  000199cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009aa8  08009aa8  0002020c  2**0
                  CONTENTS
  4 .ARM          00000008  08009aa8  08009aa8  00019aa8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009ab0  08009ab0  0002020c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009ab0  08009ab0  00019ab0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009ab4  08009ab4  00019ab4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000020c  20000000  08009ab8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001630  2000020c  08009cc4  0002020c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000183c  08009cc4  0002183c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015f93  00000000  00000000  0002023c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004038  00000000  00000000  000361cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001230  00000000  00000000  0003a208  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001038  00000000  00000000  0003b438  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c88c  00000000  00000000  0003c470  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002097a  00000000  00000000  00058cfc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009035c  00000000  00000000  00079676  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001099d2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004b9c  00000000  00000000  00109a24  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000020c 	.word	0x2000020c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080099b4 	.word	0x080099b4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000210 	.word	0x20000210
 80001dc:	080099b4 	.word	0x080099b4

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <apInit>:
#include "qbuffer.h"



void apInit(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	af00      	add	r7, sp, #0
	uartOpen(_DEF_UART1, 57600);
 8000588:	f44f 4161 	mov.w	r1, #57600	; 0xe100
 800058c:	2000      	movs	r0, #0
 800058e:	f000 fba9 	bl	8000ce4 <uartOpen>
	uartOpen(_DEF_UART2, 57600);
 8000592:	f44f 4161 	mov.w	r1, #57600	; 0xe100
 8000596:	2001      	movs	r0, #1
 8000598:	f000 fba4 	bl	8000ce4 <uartOpen>
}
 800059c:	bf00      	nop
 800059e:	bd80      	pop	{r7, pc}

080005a0 <apMain>:

void apMain(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b082      	sub	sp, #8
 80005a4:	af00      	add	r7, sp, #0
	uint32_t pre_time;

	pre_time = millis();
 80005a6:	f000 f87a 	bl	800069e <millis>
 80005aa:	6078      	str	r0, [r7, #4]
	while (1)
	{
		if(millis() - pre_time >= 500)
 80005ac:	f000 f877 	bl	800069e <millis>
 80005b0:	4602      	mov	r2, r0
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	1ad3      	subs	r3, r2, r3
 80005b6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80005ba:	d305      	bcc.n	80005c8 <apMain+0x28>
		{
			pre_time = millis();
 80005bc:	f000 f86f 	bl	800069e <millis>
 80005c0:	6078      	str	r0, [r7, #4]
			ledToggle(_DEF_LED1);
 80005c2:	2000      	movs	r0, #0
 80005c4:	f000 fa3c 	bl	8000a40 <ledToggle>


		}
		if(uartAvailable(_DEF_UART1) > 0)
 80005c8:	2000      	movs	r0, #0
 80005ca:	f000 fc21 	bl	8000e10 <uartAvailable>
 80005ce:	4603      	mov	r3, r0
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d00a      	beq.n	80005ea <apMain+0x4a>
    {
      uint8_t rx_data;

      rx_data = uartRead(_DEF_UART1);
 80005d4:	2000      	movs	r0, #0
 80005d6:	f000 fc69 	bl	8000eac <uartRead>
 80005da:	4603      	mov	r3, r0
 80005dc:	70fb      	strb	r3, [r7, #3]
      uartPrintf(_DEF_UART1, "USB Rx %c %x\n", rx_data, rx_data);
 80005de:	78fa      	ldrb	r2, [r7, #3]
 80005e0:	78fb      	ldrb	r3, [r7, #3]
 80005e2:	490b      	ldr	r1, [pc, #44]	; (8000610 <apMain+0x70>)
 80005e4:	2000      	movs	r0, #0
 80005e6:	f000 fcab 	bl	8000f40 <uartPrintf>
    }

		if(uartAvailable(_DEF_UART2) > 0)
 80005ea:	2001      	movs	r0, #1
 80005ec:	f000 fc10 	bl	8000e10 <uartAvailable>
 80005f0:	4603      	mov	r3, r0
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d0da      	beq.n	80005ac <apMain+0xc>
		{
		  uint8_t rx_data;

		  rx_data = uartRead(_DEF_UART2);
 80005f6:	2001      	movs	r0, #1
 80005f8:	f000 fc58 	bl	8000eac <uartRead>
 80005fc:	4603      	mov	r3, r0
 80005fe:	70bb      	strb	r3, [r7, #2]
		  uartPrintf(_DEF_UART2, "UART1 DMA Rx %c %x \n", rx_data, rx_data);
 8000600:	78ba      	ldrb	r2, [r7, #2]
 8000602:	78bb      	ldrb	r3, [r7, #2]
 8000604:	4903      	ldr	r1, [pc, #12]	; (8000614 <apMain+0x74>)
 8000606:	2001      	movs	r0, #1
 8000608:	f000 fc9a 	bl	8000f40 <uartPrintf>
		if(millis() - pre_time >= 500)
 800060c:	e7ce      	b.n	80005ac <apMain+0xc>
 800060e:	bf00      	nop
 8000610:	080099cc 	.word	0x080099cc
 8000614:	080099dc 	.word	0x080099dc

08000618 <bspInit>:

#include "bsp.h"
void SystemClock_Config(void);

void bspInit(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b084      	sub	sp, #16
 800061c:	af00      	add	r7, sp, #0
  HAL_Init();
 800061e:	f000 fda9 	bl	8001174 <HAL_Init>
  SystemClock_Config();
 8000622:	f000 f843 	bl	80006ac <SystemClock_Config>

  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000626:	2300      	movs	r3, #0
 8000628:	60fb      	str	r3, [r7, #12]
 800062a:	4b16      	ldr	r3, [pc, #88]	; (8000684 <bspInit+0x6c>)
 800062c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800062e:	4a15      	ldr	r2, [pc, #84]	; (8000684 <bspInit+0x6c>)
 8000630:	f043 0304 	orr.w	r3, r3, #4
 8000634:	6313      	str	r3, [r2, #48]	; 0x30
 8000636:	4b13      	ldr	r3, [pc, #76]	; (8000684 <bspInit+0x6c>)
 8000638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800063a:	f003 0304 	and.w	r3, r3, #4
 800063e:	60fb      	str	r3, [r7, #12]
 8000640:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000642:	2300      	movs	r3, #0
 8000644:	60bb      	str	r3, [r7, #8]
 8000646:	4b0f      	ldr	r3, [pc, #60]	; (8000684 <bspInit+0x6c>)
 8000648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800064a:	4a0e      	ldr	r2, [pc, #56]	; (8000684 <bspInit+0x6c>)
 800064c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000650:	6313      	str	r3, [r2, #48]	; 0x30
 8000652:	4b0c      	ldr	r3, [pc, #48]	; (8000684 <bspInit+0x6c>)
 8000654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000656:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800065a:	60bb      	str	r3, [r7, #8]
 800065c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800065e:	2300      	movs	r3, #0
 8000660:	607b      	str	r3, [r7, #4]
 8000662:	4b08      	ldr	r3, [pc, #32]	; (8000684 <bspInit+0x6c>)
 8000664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000666:	4a07      	ldr	r2, [pc, #28]	; (8000684 <bspInit+0x6c>)
 8000668:	f043 0301 	orr.w	r3, r3, #1
 800066c:	6313      	str	r3, [r2, #48]	; 0x30
 800066e:	4b05      	ldr	r3, [pc, #20]	; (8000684 <bspInit+0x6c>)
 8000670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000672:	f003 0301 	and.w	r3, r3, #1
 8000676:	607b      	str	r3, [r7, #4]
 8000678:	687b      	ldr	r3, [r7, #4]

}
 800067a:	bf00      	nop
 800067c:	3710      	adds	r7, #16
 800067e:	46bd      	mov	sp, r7
 8000680:	bd80      	pop	{r7, pc}
 8000682:	bf00      	nop
 8000684:	40023800 	.word	0x40023800

08000688 <delay>:
void delay(uint32_t ms)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b082      	sub	sp, #8
 800068c:	af00      	add	r7, sp, #0
 800068e:	6078      	str	r0, [r7, #4]
  HAL_Delay(ms);
 8000690:	6878      	ldr	r0, [r7, #4]
 8000692:	f000 fde1 	bl	8001258 <HAL_Delay>
}
 8000696:	bf00      	nop
 8000698:	3708      	adds	r7, #8
 800069a:	46bd      	mov	sp, r7
 800069c:	bd80      	pop	{r7, pc}

0800069e <millis>:
uint32_t millis(void)
{
 800069e:	b580      	push	{r7, lr}
 80006a0:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80006a2:	f000 fdcd 	bl	8001240 <HAL_GetTick>
 80006a6:	4603      	mov	r3, r0
}
 80006a8:	4618      	mov	r0, r3
 80006aa:	bd80      	pop	{r7, pc}

080006ac <SystemClock_Config>:




void SystemClock_Config(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b094      	sub	sp, #80	; 0x50
 80006b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006b2:	f107 0320 	add.w	r3, r7, #32
 80006b6:	2230      	movs	r2, #48	; 0x30
 80006b8:	2100      	movs	r1, #0
 80006ba:	4618      	mov	r0, r3
 80006bc:	f008 fcea 	bl	8009094 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006c0:	f107 030c 	add.w	r3, r7, #12
 80006c4:	2200      	movs	r2, #0
 80006c6:	601a      	str	r2, [r3, #0]
 80006c8:	605a      	str	r2, [r3, #4]
 80006ca:	609a      	str	r2, [r3, #8]
 80006cc:	60da      	str	r2, [r3, #12]
 80006ce:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006d0:	2300      	movs	r3, #0
 80006d2:	60bb      	str	r3, [r7, #8]
 80006d4:	4b28      	ldr	r3, [pc, #160]	; (8000778 <SystemClock_Config+0xcc>)
 80006d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006d8:	4a27      	ldr	r2, [pc, #156]	; (8000778 <SystemClock_Config+0xcc>)
 80006da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006de:	6413      	str	r3, [r2, #64]	; 0x40
 80006e0:	4b25      	ldr	r3, [pc, #148]	; (8000778 <SystemClock_Config+0xcc>)
 80006e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006e8:	60bb      	str	r3, [r7, #8]
 80006ea:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006ec:	2300      	movs	r3, #0
 80006ee:	607b      	str	r3, [r7, #4]
 80006f0:	4b22      	ldr	r3, [pc, #136]	; (800077c <SystemClock_Config+0xd0>)
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	4a21      	ldr	r2, [pc, #132]	; (800077c <SystemClock_Config+0xd0>)
 80006f6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80006fa:	6013      	str	r3, [r2, #0]
 80006fc:	4b1f      	ldr	r3, [pc, #124]	; (800077c <SystemClock_Config+0xd0>)
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000704:	607b      	str	r3, [r7, #4]
 8000706:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8000708:	2305      	movs	r3, #5
 800070a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800070c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000710:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000712:	2301      	movs	r3, #1
 8000714:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000716:	2302      	movs	r3, #2
 8000718:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800071a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800071e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000720:	2319      	movs	r3, #25
 8000722:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000724:	23c0      	movs	r3, #192	; 0xc0
 8000726:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000728:	2302      	movs	r3, #2
 800072a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800072c:	2304      	movs	r3, #4
 800072e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000730:	f107 0320 	add.w	r3, r7, #32
 8000734:	4618      	mov	r0, r3
 8000736:	f002 fe01 	bl	800333c <HAL_RCC_OscConfig>
 800073a:	4603      	mov	r3, r0
 800073c:	2b00      	cmp	r3, #0
 800073e:	d001      	beq.n	8000744 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000740:	f000 f81e 	bl	8000780 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000744:	230f      	movs	r3, #15
 8000746:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000748:	2302      	movs	r3, #2
 800074a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800074c:	2300      	movs	r3, #0
 800074e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000750:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000754:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000756:	2300      	movs	r3, #0
 8000758:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800075a:	f107 030c 	add.w	r3, r7, #12
 800075e:	2103      	movs	r1, #3
 8000760:	4618      	mov	r0, r3
 8000762:	f003 f863 	bl	800382c <HAL_RCC_ClockConfig>
 8000766:	4603      	mov	r3, r0
 8000768:	2b00      	cmp	r3, #0
 800076a:	d001      	beq.n	8000770 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800076c:	f000 f808 	bl	8000780 <Error_Handler>
  }
}
 8000770:	bf00      	nop
 8000772:	3750      	adds	r7, #80	; 0x50
 8000774:	46bd      	mov	sp, r7
 8000776:	bd80      	pop	{r7, pc}
 8000778:	40023800 	.word	0x40023800
 800077c:	40007000 	.word	0x40007000

08000780 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000780:	b480      	push	{r7}
 8000782:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000784:	b672      	cpsid	i
}
 8000786:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000788:	e7fe      	b.n	8000788 <Error_Handler+0x8>
	...

0800078c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800078c:	b480      	push	{r7}
 800078e:	b083      	sub	sp, #12
 8000790:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000792:	2300      	movs	r3, #0
 8000794:	607b      	str	r3, [r7, #4]
 8000796:	4b10      	ldr	r3, [pc, #64]	; (80007d8 <HAL_MspInit+0x4c>)
 8000798:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800079a:	4a0f      	ldr	r2, [pc, #60]	; (80007d8 <HAL_MspInit+0x4c>)
 800079c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007a0:	6453      	str	r3, [r2, #68]	; 0x44
 80007a2:	4b0d      	ldr	r3, [pc, #52]	; (80007d8 <HAL_MspInit+0x4c>)
 80007a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007aa:	607b      	str	r3, [r7, #4]
 80007ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007ae:	2300      	movs	r3, #0
 80007b0:	603b      	str	r3, [r7, #0]
 80007b2:	4b09      	ldr	r3, [pc, #36]	; (80007d8 <HAL_MspInit+0x4c>)
 80007b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007b6:	4a08      	ldr	r2, [pc, #32]	; (80007d8 <HAL_MspInit+0x4c>)
 80007b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007bc:	6413      	str	r3, [r2, #64]	; 0x40
 80007be:	4b06      	ldr	r3, [pc, #24]	; (80007d8 <HAL_MspInit+0x4c>)
 80007c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007c6:	603b      	str	r3, [r7, #0]
 80007c8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007ca:	bf00      	nop
 80007cc:	370c      	adds	r7, #12
 80007ce:	46bd      	mov	sp, r7
 80007d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d4:	4770      	bx	lr
 80007d6:	bf00      	nop
 80007d8:	40023800 	.word	0x40023800

080007dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007dc:	b480      	push	{r7}
 80007de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80007e0:	e7fe      	b.n	80007e0 <NMI_Handler+0x4>

080007e2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007e2:	b480      	push	{r7}
 80007e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007e6:	e7fe      	b.n	80007e6 <HardFault_Handler+0x4>

080007e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007e8:	b480      	push	{r7}
 80007ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007ec:	e7fe      	b.n	80007ec <MemManage_Handler+0x4>

080007ee <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007ee:	b480      	push	{r7}
 80007f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007f2:	e7fe      	b.n	80007f2 <BusFault_Handler+0x4>

080007f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007f4:	b480      	push	{r7}
 80007f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007f8:	e7fe      	b.n	80007f8 <UsageFault_Handler+0x4>

080007fa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007fa:	b480      	push	{r7}
 80007fc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007fe:	bf00      	nop
 8000800:	46bd      	mov	sp, r7
 8000802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000806:	4770      	bx	lr

08000808 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000808:	b480      	push	{r7}
 800080a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800080c:	bf00      	nop
 800080e:	46bd      	mov	sp, r7
 8000810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000814:	4770      	bx	lr

08000816 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000816:	b480      	push	{r7}
 8000818:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800081a:	bf00      	nop
 800081c:	46bd      	mov	sp, r7
 800081e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000822:	4770      	bx	lr

08000824 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000828:	f000 fcf6 	bl	8001218 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800082c:	bf00      	nop
 800082e:	bd80      	pop	{r7, pc}

08000830 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000834:	4802      	ldr	r0, [pc, #8]	; (8000840 <USART1_IRQHandler+0x10>)
 8000836:	f003 fcef 	bl	8004218 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800083a:	bf00      	nop
 800083c:	bd80      	pop	{r7, pc}
 800083e:	bf00      	nop
 8000840:	20000250 	.word	0x20000250

08000844 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000848:	4802      	ldr	r0, [pc, #8]	; (8000854 <DMA2_Stream2_IRQHandler+0x10>)
 800084a:	f000 ffd3 	bl	80017f4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800084e:	bf00      	nop
 8000850:	bd80      	pop	{r7, pc}
 8000852:	bf00      	nop
 8000854:	20000294 	.word	0x20000294

08000858 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800085c:	4802      	ldr	r0, [pc, #8]	; (8000868 <OTG_FS_IRQHandler+0x10>)
 800085e:	f001 fd3a 	bl	80022d6 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000862:	bf00      	nop
 8000864:	bd80      	pop	{r7, pc}
 8000866:	bf00      	nop
 8000868:	20001204 	.word	0x20001204

0800086c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b086      	sub	sp, #24
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000874:	4a14      	ldr	r2, [pc, #80]	; (80008c8 <_sbrk+0x5c>)
 8000876:	4b15      	ldr	r3, [pc, #84]	; (80008cc <_sbrk+0x60>)
 8000878:	1ad3      	subs	r3, r2, r3
 800087a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800087c:	697b      	ldr	r3, [r7, #20]
 800087e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000880:	4b13      	ldr	r3, [pc, #76]	; (80008d0 <_sbrk+0x64>)
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	2b00      	cmp	r3, #0
 8000886:	d102      	bne.n	800088e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000888:	4b11      	ldr	r3, [pc, #68]	; (80008d0 <_sbrk+0x64>)
 800088a:	4a12      	ldr	r2, [pc, #72]	; (80008d4 <_sbrk+0x68>)
 800088c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800088e:	4b10      	ldr	r3, [pc, #64]	; (80008d0 <_sbrk+0x64>)
 8000890:	681a      	ldr	r2, [r3, #0]
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	4413      	add	r3, r2
 8000896:	693a      	ldr	r2, [r7, #16]
 8000898:	429a      	cmp	r2, r3
 800089a:	d207      	bcs.n	80008ac <_sbrk+0x40>
  {
    errno = ENOMEM;
 800089c:	f008 fbd0 	bl	8009040 <__errno>
 80008a0:	4603      	mov	r3, r0
 80008a2:	220c      	movs	r2, #12
 80008a4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80008a6:	f04f 33ff 	mov.w	r3, #4294967295
 80008aa:	e009      	b.n	80008c0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80008ac:	4b08      	ldr	r3, [pc, #32]	; (80008d0 <_sbrk+0x64>)
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80008b2:	4b07      	ldr	r3, [pc, #28]	; (80008d0 <_sbrk+0x64>)
 80008b4:	681a      	ldr	r2, [r3, #0]
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	4413      	add	r3, r2
 80008ba:	4a05      	ldr	r2, [pc, #20]	; (80008d0 <_sbrk+0x64>)
 80008bc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80008be:	68fb      	ldr	r3, [r7, #12]
}
 80008c0:	4618      	mov	r0, r3
 80008c2:	3718      	adds	r7, #24
 80008c4:	46bd      	mov	sp, r7
 80008c6:	bd80      	pop	{r7, pc}
 80008c8:	20020000 	.word	0x20020000
 80008cc:	00000400 	.word	0x00000400
 80008d0:	20000228 	.word	0x20000228
 80008d4:	20001840 	.word	0x20001840

080008d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80008d8:	b480      	push	{r7}
 80008da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80008dc:	4b06      	ldr	r3, [pc, #24]	; (80008f8 <SystemInit+0x20>)
 80008de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80008e2:	4a05      	ldr	r2, [pc, #20]	; (80008f8 <SystemInit+0x20>)
 80008e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80008e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008ec:	bf00      	nop
 80008ee:	46bd      	mov	sp, r7
 80008f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f4:	4770      	bx	lr
 80008f6:	bf00      	nop
 80008f8:	e000ed00 	.word	0xe000ed00

080008fc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80008fc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000934 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000900:	480d      	ldr	r0, [pc, #52]	; (8000938 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000902:	490e      	ldr	r1, [pc, #56]	; (800093c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000904:	4a0e      	ldr	r2, [pc, #56]	; (8000940 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000906:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000908:	e002      	b.n	8000910 <LoopCopyDataInit>

0800090a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800090a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800090c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800090e:	3304      	adds	r3, #4

08000910 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000910:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000912:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000914:	d3f9      	bcc.n	800090a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000916:	4a0b      	ldr	r2, [pc, #44]	; (8000944 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000918:	4c0b      	ldr	r4, [pc, #44]	; (8000948 <LoopFillZerobss+0x26>)
  movs r3, #0
 800091a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800091c:	e001      	b.n	8000922 <LoopFillZerobss>

0800091e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800091e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000920:	3204      	adds	r2, #4

08000922 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000922:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000924:	d3fb      	bcc.n	800091e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000926:	f7ff ffd7 	bl	80008d8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800092a:	f008 fb8f 	bl	800904c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800092e:	f008 fb7b 	bl	8009028 <main>
  bx  lr    
 8000932:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000934:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000938:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800093c:	2000020c 	.word	0x2000020c
  ldr r2, =_sidata
 8000940:	08009ab8 	.word	0x08009ab8
  ldr r2, =_sbss
 8000944:	2000020c 	.word	0x2000020c
  ldr r4, =_ebss
 8000948:	2000183c 	.word	0x2000183c

0800094c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800094c:	e7fe      	b.n	800094c <ADC_IRQHandler>
	...

08000950 <ledInit>:
{
	{GPIOC, GPIO_PIN_13, GPIO_PIN_SET, GPIO_PIN_RESET}
};

bool ledInit(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b088      	sub	sp, #32
 8000954:	af00      	add	r7, sp, #0
	bool ret = true;
 8000956:	2301      	movs	r3, #1
 8000958:	76fb      	strb	r3, [r7, #27]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800095a:	1d3b      	adds	r3, r7, #4
 800095c:	2200      	movs	r2, #0
 800095e:	601a      	str	r2, [r3, #0]
 8000960:	605a      	str	r2, [r3, #4]
 8000962:	609a      	str	r2, [r3, #8]
 8000964:	60da      	str	r2, [r3, #12]
 8000966:	611a      	str	r2, [r3, #16]

	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000968:	2300      	movs	r3, #0
 800096a:	603b      	str	r3, [r7, #0]
 800096c:	4b1d      	ldr	r3, [pc, #116]	; (80009e4 <ledInit+0x94>)
 800096e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000970:	4a1c      	ldr	r2, [pc, #112]	; (80009e4 <ledInit+0x94>)
 8000972:	f043 0301 	orr.w	r3, r3, #1
 8000976:	6313      	str	r3, [r2, #48]	; 0x30
 8000978:	4b1a      	ldr	r3, [pc, #104]	; (80009e4 <ledInit+0x94>)
 800097a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097c:	f003 0301 	and.w	r3, r3, #1
 8000980:	603b      	str	r3, [r7, #0]
 8000982:	683b      	ldr	r3, [r7, #0]

	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000984:	2301      	movs	r3, #1
 8000986:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000988:	2300      	movs	r3, #0
 800098a:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800098c:	2300      	movs	r3, #0
 800098e:	613b      	str	r3, [r7, #16]

	for(int i = 0; i < LED_MAX_CHANNEL; i++)
 8000990:	2300      	movs	r3, #0
 8000992:	61fb      	str	r3, [r7, #28]
 8000994:	e01e      	b.n	80009d4 <ledInit+0x84>
	{
		ledOff(i);
 8000996:	69fb      	ldr	r3, [r7, #28]
 8000998:	b2db      	uxtb	r3, r3
 800099a:	4618      	mov	r0, r3
 800099c:	f000 f826 	bl	80009ec <ledOff>
		GPIO_InitStruct.Pin = led_tbl[i].pin;
 80009a0:	4911      	ldr	r1, [pc, #68]	; (80009e8 <ledInit+0x98>)
 80009a2:	69fa      	ldr	r2, [r7, #28]
 80009a4:	4613      	mov	r3, r2
 80009a6:	005b      	lsls	r3, r3, #1
 80009a8:	4413      	add	r3, r2
 80009aa:	009b      	lsls	r3, r3, #2
 80009ac:	440b      	add	r3, r1
 80009ae:	3304      	adds	r3, #4
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	607b      	str	r3, [r7, #4]
		HAL_GPIO_Init(led_tbl[i].port, &GPIO_InitStruct);
 80009b4:	490c      	ldr	r1, [pc, #48]	; (80009e8 <ledInit+0x98>)
 80009b6:	69fa      	ldr	r2, [r7, #28]
 80009b8:	4613      	mov	r3, r2
 80009ba:	005b      	lsls	r3, r3, #1
 80009bc:	4413      	add	r3, r2
 80009be:	009b      	lsls	r3, r3, #2
 80009c0:	440b      	add	r3, r1
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	1d3a      	adds	r2, r7, #4
 80009c6:	4611      	mov	r1, r2
 80009c8:	4618      	mov	r0, r3
 80009ca:	f001 f97d 	bl	8001cc8 <HAL_GPIO_Init>
	for(int i = 0; i < LED_MAX_CHANNEL; i++)
 80009ce:	69fb      	ldr	r3, [r7, #28]
 80009d0:	3301      	adds	r3, #1
 80009d2:	61fb      	str	r3, [r7, #28]
 80009d4:	69fb      	ldr	r3, [r7, #28]
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	dddd      	ble.n	8000996 <ledInit+0x46>
	}
	return ret;
 80009da:	7efb      	ldrb	r3, [r7, #27]
}
 80009dc:	4618      	mov	r0, r3
 80009de:	3720      	adds	r7, #32
 80009e0:	46bd      	mov	sp, r7
 80009e2:	bd80      	pop	{r7, pc}
 80009e4:	40023800 	.word	0x40023800
 80009e8:	20000004 	.word	0x20000004

080009ec <ledOff>:
void ledOn(uint8_t ch)
{
	HAL_GPIO_WritePin(led_tbl[ch].port, led_tbl[ch].pin, led_tbl[ch].on_state);
}
void ledOff(uint8_t ch)
{
 80009ec:	b590      	push	{r4, r7, lr}
 80009ee:	b083      	sub	sp, #12
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	4603      	mov	r3, r0
 80009f4:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(led_tbl[ch].port, led_tbl[ch].pin, led_tbl[ch].off_state);
 80009f6:	79fa      	ldrb	r2, [r7, #7]
 80009f8:	4910      	ldr	r1, [pc, #64]	; (8000a3c <ledOff+0x50>)
 80009fa:	4613      	mov	r3, r2
 80009fc:	005b      	lsls	r3, r3, #1
 80009fe:	4413      	add	r3, r2
 8000a00:	009b      	lsls	r3, r3, #2
 8000a02:	440b      	add	r3, r1
 8000a04:	6818      	ldr	r0, [r3, #0]
 8000a06:	79fa      	ldrb	r2, [r7, #7]
 8000a08:	490c      	ldr	r1, [pc, #48]	; (8000a3c <ledOff+0x50>)
 8000a0a:	4613      	mov	r3, r2
 8000a0c:	005b      	lsls	r3, r3, #1
 8000a0e:	4413      	add	r3, r2
 8000a10:	009b      	lsls	r3, r3, #2
 8000a12:	440b      	add	r3, r1
 8000a14:	3304      	adds	r3, #4
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	b299      	uxth	r1, r3
 8000a1a:	79fa      	ldrb	r2, [r7, #7]
 8000a1c:	4c07      	ldr	r4, [pc, #28]	; (8000a3c <ledOff+0x50>)
 8000a1e:	4613      	mov	r3, r2
 8000a20:	005b      	lsls	r3, r3, #1
 8000a22:	4413      	add	r3, r2
 8000a24:	009b      	lsls	r3, r3, #2
 8000a26:	4423      	add	r3, r4
 8000a28:	3309      	adds	r3, #9
 8000a2a:	781b      	ldrb	r3, [r3, #0]
 8000a2c:	461a      	mov	r2, r3
 8000a2e:	f001 facf 	bl	8001fd0 <HAL_GPIO_WritePin>
}
 8000a32:	bf00      	nop
 8000a34:	370c      	adds	r7, #12
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bd90      	pop	{r4, r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	20000004 	.word	0x20000004

08000a40 <ledToggle>:
void ledToggle(uint8_t ch)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b082      	sub	sp, #8
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	4603      	mov	r3, r0
 8000a48:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_TogglePin(led_tbl[ch].port, led_tbl[ch].pin);
 8000a4a:	79fa      	ldrb	r2, [r7, #7]
 8000a4c:	490b      	ldr	r1, [pc, #44]	; (8000a7c <ledToggle+0x3c>)
 8000a4e:	4613      	mov	r3, r2
 8000a50:	005b      	lsls	r3, r3, #1
 8000a52:	4413      	add	r3, r2
 8000a54:	009b      	lsls	r3, r3, #2
 8000a56:	440b      	add	r3, r1
 8000a58:	6818      	ldr	r0, [r3, #0]
 8000a5a:	79fa      	ldrb	r2, [r7, #7]
 8000a5c:	4907      	ldr	r1, [pc, #28]	; (8000a7c <ledToggle+0x3c>)
 8000a5e:	4613      	mov	r3, r2
 8000a60:	005b      	lsls	r3, r3, #1
 8000a62:	4413      	add	r3, r2
 8000a64:	009b      	lsls	r3, r3, #2
 8000a66:	440b      	add	r3, r1
 8000a68:	3304      	adds	r3, #4
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	b29b      	uxth	r3, r3
 8000a6e:	4619      	mov	r1, r3
 8000a70:	f001 fac7 	bl	8002002 <HAL_GPIO_TogglePin>
}
 8000a74:	bf00      	nop
 8000a76:	3708      	adds	r7, #8
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	bd80      	pop	{r7, pc}
 8000a7c:	20000004 	.word	0x20000004

08000a80 <qbufferCreate>:
{

}

bool qbufferCreate(qbuffer_t *p_node, uint8_t *p_buf, uint32_t length)
{
 8000a80:	b480      	push	{r7}
 8000a82:	b087      	sub	sp, #28
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	60f8      	str	r0, [r7, #12]
 8000a88:	60b9      	str	r1, [r7, #8]
 8000a8a:	607a      	str	r2, [r7, #4]
	/*Making buffer is index initializing */
	bool ret = true;
 8000a8c:	2301      	movs	r3, #1
 8000a8e:	75fb      	strb	r3, [r7, #23]

	p_node->in 		= 0;
 8000a90:	68fb      	ldr	r3, [r7, #12]
 8000a92:	2200      	movs	r2, #0
 8000a94:	601a      	str	r2, [r3, #0]
	p_node->out	  = 0;
 8000a96:	68fb      	ldr	r3, [r7, #12]
 8000a98:	2200      	movs	r2, #0
 8000a9a:	605a      	str	r2, [r3, #4]
	p_node->len   = length;
 8000a9c:	68fb      	ldr	r3, [r7, #12]
 8000a9e:	687a      	ldr	r2, [r7, #4]
 8000aa0:	609a      	str	r2, [r3, #8]
	p_node->p_buf = p_buf;
 8000aa2:	68fb      	ldr	r3, [r7, #12]
 8000aa4:	68ba      	ldr	r2, [r7, #8]
 8000aa6:	60da      	str	r2, [r3, #12]

	return ret;
 8000aa8:	7dfb      	ldrb	r3, [r7, #23]
}
 8000aaa:	4618      	mov	r0, r3
 8000aac:	371c      	adds	r7, #28
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab4:	4770      	bx	lr

08000ab6 <qbufferRead>:
	return ret;
}

/* Read qbuffer and input to p_data. */
bool qbufferRead(qbuffer_t *p_node, uint8_t *p_data, uint32_t length)
{
 8000ab6:	b480      	push	{r7}
 8000ab8:	b087      	sub	sp, #28
 8000aba:	af00      	add	r7, sp, #0
 8000abc:	60f8      	str	r0, [r7, #12]
 8000abe:	60b9      	str	r1, [r7, #8]
 8000ac0:	607a      	str	r2, [r7, #4]
	bool ret = true;
 8000ac2:	2301      	movs	r3, #1
 8000ac4:	75fb      	strb	r3, [r7, #23]
	for(int i = 0; i < length; i++)
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	613b      	str	r3, [r7, #16]
 8000aca:	e026      	b.n	8000b1a <qbufferRead+0x64>
	{
		if(p_node->p_buf != NULL)
 8000acc:	68fb      	ldr	r3, [r7, #12]
 8000ace:	68db      	ldr	r3, [r3, #12]
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d009      	beq.n	8000ae8 <qbufferRead+0x32>
		{
			p_data[i] = p_node->p_buf[p_node->out];
 8000ad4:	68fb      	ldr	r3, [r7, #12]
 8000ad6:	68da      	ldr	r2, [r3, #12]
 8000ad8:	68fb      	ldr	r3, [r7, #12]
 8000ada:	685b      	ldr	r3, [r3, #4]
 8000adc:	441a      	add	r2, r3
 8000ade:	693b      	ldr	r3, [r7, #16]
 8000ae0:	68b9      	ldr	r1, [r7, #8]
 8000ae2:	440b      	add	r3, r1
 8000ae4:	7812      	ldrb	r2, [r2, #0]
 8000ae6:	701a      	strb	r2, [r3, #0]
		}
		if(p_node->out != p_node->in)
 8000ae8:	68fb      	ldr	r3, [r7, #12]
 8000aea:	685a      	ldr	r2, [r3, #4]
 8000aec:	68fb      	ldr	r3, [r7, #12]
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	429a      	cmp	r2, r3
 8000af2:	d00c      	beq.n	8000b0e <qbufferRead+0x58>
		{
			/* index update */
			p_node->out = (p_node->out + 1) % p_node->len;
 8000af4:	68fb      	ldr	r3, [r7, #12]
 8000af6:	685b      	ldr	r3, [r3, #4]
 8000af8:	3301      	adds	r3, #1
 8000afa:	68fa      	ldr	r2, [r7, #12]
 8000afc:	6892      	ldr	r2, [r2, #8]
 8000afe:	fbb3 f1f2 	udiv	r1, r3, r2
 8000b02:	fb01 f202 	mul.w	r2, r1, r2
 8000b06:	1a9a      	subs	r2, r3, r2
 8000b08:	68fb      	ldr	r3, [r7, #12]
 8000b0a:	605a      	str	r2, [r3, #4]
 8000b0c:	e002      	b.n	8000b14 <qbufferRead+0x5e>
		}
		else /*when in idx = out idx*/
		{
			ret = false;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	75fb      	strb	r3, [r7, #23]
			break;
 8000b12:	e006      	b.n	8000b22 <qbufferRead+0x6c>
	for(int i = 0; i < length; i++)
 8000b14:	693b      	ldr	r3, [r7, #16]
 8000b16:	3301      	adds	r3, #1
 8000b18:	613b      	str	r3, [r7, #16]
 8000b1a:	693b      	ldr	r3, [r7, #16]
 8000b1c:	687a      	ldr	r2, [r7, #4]
 8000b1e:	429a      	cmp	r2, r3
 8000b20:	d8d4      	bhi.n	8000acc <qbufferRead+0x16>
		}
	}
	return ret;
 8000b22:	7dfb      	ldrb	r3, [r7, #23]
}
 8000b24:	4618      	mov	r0, r3
 8000b26:	371c      	adds	r7, #28
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2e:	4770      	bx	lr

08000b30 <qbufferAvailable>:

/*transmit struct pointer, receive current buffer's data number*/
uint32_t qbufferAvailable(qbuffer_t *p_node)
{
 8000b30:	b480      	push	{r7}
 8000b32:	b085      	sub	sp, #20
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
	uint32_t ret;

	ret = (p_node->len + p_node->in - p_node->out) % p_node->len;
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	689a      	ldr	r2, [r3, #8]
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	441a      	add	r2, r3
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	685b      	ldr	r3, [r3, #4]
 8000b46:	1ad3      	subs	r3, r2, r3
 8000b48:	687a      	ldr	r2, [r7, #4]
 8000b4a:	6892      	ldr	r2, [r2, #8]
 8000b4c:	fbb3 f1f2 	udiv	r1, r3, r2
 8000b50:	fb01 f202 	mul.w	r2, r1, r2
 8000b54:	1a9b      	subs	r3, r3, r2
 8000b56:	60fb      	str	r3, [r7, #12]

	return ret;
 8000b58:	68fb      	ldr	r3, [r7, #12]
}
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	3714      	adds	r7, #20
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b64:	4770      	bx	lr
	...

08000b68 <resetInit>:
#include "rtc.h"

static uint32_t reset_count = 0;

bool resetInit(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b082      	sub	sp, #8
 8000b6c:	af00      	add	r7, sp, #0
	bool ret = true;
 8000b6e:	2301      	movs	r3, #1
 8000b70:	71fb      	strb	r3, [r7, #7]

	if(RCC->CSR & (1<<26))
 8000b72:	4b11      	ldr	r3, [pc, #68]	; (8000bb8 <resetInit+0x50>)
 8000b74:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000b76:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d013      	beq.n	8000ba6 <resetInit+0x3e>
	{
		rtcBackupRegWrite(0, rtcBackupRegRead(0) + 1);
 8000b7e:	2000      	movs	r0, #0
 8000b80:	f000 f85a 	bl	8000c38 <rtcBackupRegRead>
 8000b84:	4603      	mov	r3, r0
 8000b86:	3301      	adds	r3, #1
 8000b88:	4619      	mov	r1, r3
 8000b8a:	2000      	movs	r0, #0
 8000b8c:	f000 f844 	bl	8000c18 <rtcBackupRegWrite>
		delay(500);
 8000b90:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000b94:	f7ff fd78 	bl	8000688 <delay>
		/* due to multiple input */
		reset_count = rtcBackupRegRead(0);
 8000b98:	2000      	movs	r0, #0
 8000b9a:	f000 f84d 	bl	8000c38 <rtcBackupRegRead>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	461a      	mov	r2, r3
 8000ba2:	4b06      	ldr	r3, [pc, #24]	; (8000bbc <resetInit+0x54>)
 8000ba4:	601a      	str	r2, [r3, #0]
		/* one count increase itself */
	}
	rtcBackupRegWrite(0, 0);
 8000ba6:	2100      	movs	r1, #0
 8000ba8:	2000      	movs	r0, #0
 8000baa:	f000 f835 	bl	8000c18 <rtcBackupRegWrite>
	return ret;
 8000bae:	79fb      	ldrb	r3, [r7, #7]
}
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	3708      	adds	r7, #8
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	bd80      	pop	{r7, pc}
 8000bb8:	40023800 	.word	0x40023800
 8000bbc:	2000022c 	.word	0x2000022c

08000bc0 <rtcInit>:
#include "rtc.h"

static RTC_HandleTypeDef hrtc;

bool rtcInit(void)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b082      	sub	sp, #8
 8000bc4:	af00      	add	r7, sp, #0
	bool ret = true;
 8000bc6:	2301      	movs	r3, #1
 8000bc8:	71fb      	strb	r3, [r7, #7]
	// also need to enable GPIOC -> already declared on "bsp.c"
	hrtc.Instance 						= RTC;
 8000bca:	4b11      	ldr	r3, [pc, #68]	; (8000c10 <rtcInit+0x50>)
 8000bcc:	4a11      	ldr	r2, [pc, #68]	; (8000c14 <rtcInit+0x54>)
 8000bce:	601a      	str	r2, [r3, #0]
	hrtc.Init.HourFormat 			= RTC_HOURFORMAT_24;
 8000bd0:	4b0f      	ldr	r3, [pc, #60]	; (8000c10 <rtcInit+0x50>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	605a      	str	r2, [r3, #4]
	hrtc.Init.AsynchPrediv 		= 127;
 8000bd6:	4b0e      	ldr	r3, [pc, #56]	; (8000c10 <rtcInit+0x50>)
 8000bd8:	227f      	movs	r2, #127	; 0x7f
 8000bda:	609a      	str	r2, [r3, #8]
	hrtc.Init.SynchPrediv 		= 255;
 8000bdc:	4b0c      	ldr	r3, [pc, #48]	; (8000c10 <rtcInit+0x50>)
 8000bde:	22ff      	movs	r2, #255	; 0xff
 8000be0:	60da      	str	r2, [r3, #12]
	hrtc.Init.OutPut 					= RTC_OUTPUT_DISABLE;
 8000be2:	4b0b      	ldr	r3, [pc, #44]	; (8000c10 <rtcInit+0x50>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	611a      	str	r2, [r3, #16]
	hrtc.Init.OutPutPolarity 	= RTC_OUTPUT_POLARITY_HIGH;
 8000be8:	4b09      	ldr	r3, [pc, #36]	; (8000c10 <rtcInit+0x50>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	615a      	str	r2, [r3, #20]
	hrtc.Init.OutPutType	    = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000bee:	4b08      	ldr	r3, [pc, #32]	; (8000c10 <rtcInit+0x50>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	619a      	str	r2, [r3, #24]
	if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000bf4:	4806      	ldr	r0, [pc, #24]	; (8000c10 <rtcInit+0x50>)
 8000bf6:	f003 f8e9 	bl	8003dcc <HAL_RTC_Init>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d001      	beq.n	8000c04 <rtcInit+0x44>
	{
	Error_Handler();
 8000c00:	f7ff fdbe 	bl	8000780 <Error_Handler>
	}
	return ret;
 8000c04:	79fb      	ldrb	r3, [r7, #7]
}
 8000c06:	4618      	mov	r0, r3
 8000c08:	3708      	adds	r7, #8
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	bf00      	nop
 8000c10:	20000230 	.word	0x20000230
 8000c14:	40002800 	.word	0x40002800

08000c18 <rtcBackupRegWrite>:

void rtcBackupRegWrite(uint32_t index, uint32_t data)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b082      	sub	sp, #8
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
 8000c20:	6039      	str	r1, [r7, #0]
	HAL_RTCEx_BKUPWrite(&hrtc, index, data);
 8000c22:	683a      	ldr	r2, [r7, #0]
 8000c24:	6879      	ldr	r1, [r7, #4]
 8000c26:	4803      	ldr	r0, [pc, #12]	; (8000c34 <rtcBackupRegWrite+0x1c>)
 8000c28:	f003 f9b5 	bl	8003f96 <HAL_RTCEx_BKUPWrite>
}
 8000c2c:	bf00      	nop
 8000c2e:	3708      	adds	r7, #8
 8000c30:	46bd      	mov	sp, r7
 8000c32:	bd80      	pop	{r7, pc}
 8000c34:	20000230 	.word	0x20000230

08000c38 <rtcBackupRegRead>:
uint32_t rtcBackupRegRead(uint32_t index)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b082      	sub	sp, #8
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
	return HAL_RTCEx_BKUPRead(&hrtc, index);
 8000c40:	6879      	ldr	r1, [r7, #4]
 8000c42:	4804      	ldr	r0, [pc, #16]	; (8000c54 <rtcBackupRegRead+0x1c>)
 8000c44:	f003 f9c1 	bl	8003fca <HAL_RTCEx_BKUPRead>
 8000c48:	4603      	mov	r3, r0
}
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	3708      	adds	r7, #8
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	bf00      	nop
 8000c54:	20000230 	.word	0x20000230

08000c58 <HAL_RTC_MspInit>:


void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b088      	sub	sp, #32
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c60:	f107 0308 	add.w	r3, r7, #8
 8000c64:	2200      	movs	r2, #0
 8000c66:	601a      	str	r2, [r3, #0]
 8000c68:	605a      	str	r2, [r3, #4]
 8000c6a:	609a      	str	r2, [r3, #8]
 8000c6c:	60da      	str	r2, [r3, #12]
 8000c6e:	611a      	str	r2, [r3, #16]
 8000c70:	615a      	str	r2, [r3, #20]
  if(rtcHandle->Instance==RTC)
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	4a0c      	ldr	r2, [pc, #48]	; (8000ca8 <HAL_RTC_MspInit+0x50>)
 8000c78:	4293      	cmp	r3, r2
 8000c7a:	d111      	bne.n	8000ca0 <HAL_RTC_MspInit+0x48>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000c7c:	2302      	movs	r3, #2
 8000c7e:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000c80:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c84:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c86:	f107 0308 	add.w	r3, r7, #8
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	f002 ffae 	bl	8003bec <HAL_RCCEx_PeriphCLKConfig>
 8000c90:	4603      	mov	r3, r0
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d001      	beq.n	8000c9a <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8000c96:	f7ff fd73 	bl	8000780 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000c9a:	4b04      	ldr	r3, [pc, #16]	; (8000cac <HAL_RTC_MspInit+0x54>)
 8000c9c:	2201      	movs	r2, #1
 8000c9e:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8000ca0:	bf00      	nop
 8000ca2:	3720      	adds	r7, #32
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bd80      	pop	{r7, pc}
 8000ca8:	40002800 	.word	0x40002800
 8000cac:	42470e3c 	.word	0x42470e3c

08000cb0 <uartInit>:
static qbuffer_t qbuffer[UART_MAX_CHANNEL];
static uint8_t rx_buf[256];
//static uint8_t rx_data[UART_MAX_CHANNEL];

bool uartInit(void)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	b083      	sub	sp, #12
 8000cb4:	af00      	add	r7, sp, #0
	for(int i = 0; i < UART_MAX_CHANNEL; i++)
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	607b      	str	r3, [r7, #4]
 8000cba:	e007      	b.n	8000ccc <uartInit+0x1c>
	{
		is_open[i] = false;
 8000cbc:	4a08      	ldr	r2, [pc, #32]	; (8000ce0 <uartInit+0x30>)
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	4413      	add	r3, r2
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < UART_MAX_CHANNEL; i++)
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	3301      	adds	r3, #1
 8000cca:	607b      	str	r3, [r7, #4]
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	2b01      	cmp	r3, #1
 8000cd0:	ddf4      	ble.n	8000cbc <uartInit+0xc>
	}
	return false;
 8000cd2:	2300      	movs	r3, #0
}
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	370c      	adds	r7, #12
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cde:	4770      	bx	lr
 8000ce0:	200002f4 	.word	0x200002f4

08000ce4 <uartOpen>:

bool uartOpen(uint8_t ch, uint32_t baud)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b084      	sub	sp, #16
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	4603      	mov	r3, r0
 8000cec:	6039      	str	r1, [r7, #0]
 8000cee:	71fb      	strb	r3, [r7, #7]
	bool ret = false;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	73fb      	strb	r3, [r7, #15]

	switch(ch)
 8000cf4:	79fb      	ldrb	r3, [r7, #7]
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d002      	beq.n	8000d00 <uartOpen+0x1c>
 8000cfa:	2b01      	cmp	r3, #1
 8000cfc:	d007      	beq.n	8000d0e <uartOpen+0x2a>
 8000cfe:	e073      	b.n	8000de8 <uartOpen+0x104>
	{
		case _DEF_UART1:
			is_open[ch] = true;
 8000d00:	79fb      	ldrb	r3, [r7, #7]
 8000d02:	4a3c      	ldr	r2, [pc, #240]	; (8000df4 <uartOpen+0x110>)
 8000d04:	2101      	movs	r1, #1
 8000d06:	54d1      	strb	r1, [r2, r3]
			ret = true;
 8000d08:	2301      	movs	r3, #1
 8000d0a:	73fb      	strb	r3, [r7, #15]
			break;
 8000d0c:	e06c      	b.n	8000de8 <uartOpen+0x104>

		case _DEF_UART2:
			huart1.Instance 					= USART1;
 8000d0e:	4b3a      	ldr	r3, [pc, #232]	; (8000df8 <uartOpen+0x114>)
 8000d10:	4a3a      	ldr	r2, [pc, #232]	; (8000dfc <uartOpen+0x118>)
 8000d12:	601a      	str	r2, [r3, #0]
			huart1.Init.BaudRate 			= baud;
 8000d14:	4a38      	ldr	r2, [pc, #224]	; (8000df8 <uartOpen+0x114>)
 8000d16:	683b      	ldr	r3, [r7, #0]
 8000d18:	6053      	str	r3, [r2, #4]
			huart1.Init.WordLength		= UART_WORDLENGTH_8B;
 8000d1a:	4b37      	ldr	r3, [pc, #220]	; (8000df8 <uartOpen+0x114>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	609a      	str	r2, [r3, #8]
			huart1.Init.StopBits 			= UART_STOPBITS_1;
 8000d20:	4b35      	ldr	r3, [pc, #212]	; (8000df8 <uartOpen+0x114>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	60da      	str	r2, [r3, #12]
			huart1.Init.Parity 				= UART_PARITY_NONE;
 8000d26:	4b34      	ldr	r3, [pc, #208]	; (8000df8 <uartOpen+0x114>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	611a      	str	r2, [r3, #16]
			huart1.Init.Mode 					= UART_MODE_TX_RX;
 8000d2c:	4b32      	ldr	r3, [pc, #200]	; (8000df8 <uartOpen+0x114>)
 8000d2e:	220c      	movs	r2, #12
 8000d30:	615a      	str	r2, [r3, #20]
			huart1.Init.HwFlowCtl 		= UART_HWCONTROL_NONE;
 8000d32:	4b31      	ldr	r3, [pc, #196]	; (8000df8 <uartOpen+0x114>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	619a      	str	r2, [r3, #24]
			huart1.Init.OverSampling 	= UART_OVERSAMPLING_16;
 8000d38:	4b2f      	ldr	r3, [pc, #188]	; (8000df8 <uartOpen+0x114>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	61da      	str	r2, [r3, #28]

			qbufferCreate(&qbuffer[ch], &rx_buf[0], 256);
 8000d3e:	79fb      	ldrb	r3, [r7, #7]
 8000d40:	011b      	lsls	r3, r3, #4
 8000d42:	4a2f      	ldr	r2, [pc, #188]	; (8000e00 <uartOpen+0x11c>)
 8000d44:	4413      	add	r3, r2
 8000d46:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d4a:	492e      	ldr	r1, [pc, #184]	; (8000e04 <uartOpen+0x120>)
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	f7ff fe97 	bl	8000a80 <qbufferCreate>

      __HAL_RCC_DMA2_CLK_ENABLE();
 8000d52:	2300      	movs	r3, #0
 8000d54:	60bb      	str	r3, [r7, #8]
 8000d56:	4b2c      	ldr	r3, [pc, #176]	; (8000e08 <uartOpen+0x124>)
 8000d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d5a:	4a2b      	ldr	r2, [pc, #172]	; (8000e08 <uartOpen+0x124>)
 8000d5c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000d60:	6313      	str	r3, [r2, #48]	; 0x30
 8000d62:	4b29      	ldr	r3, [pc, #164]	; (8000e08 <uartOpen+0x124>)
 8000d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000d6a:	60bb      	str	r3, [r7, #8]
 8000d6c:	68bb      	ldr	r3, [r7, #8]
      HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8000d6e:	2200      	movs	r2, #0
 8000d70:	2100      	movs	r1, #0
 8000d72:	203a      	movs	r0, #58	; 0x3a
 8000d74:	f000 fb6f 	bl	8001456 <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8000d78:	203a      	movs	r0, #58	; 0x3a
 8000d7a:	f000 fb88 	bl	800148e <HAL_NVIC_EnableIRQ>

			if (HAL_UART_Init(&huart1) != HAL_OK)
 8000d7e:	481e      	ldr	r0, [pc, #120]	; (8000df8 <uartOpen+0x114>)
 8000d80:	f003 f93b 	bl	8003ffa <HAL_UART_Init>
 8000d84:	4603      	mov	r3, r0
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d002      	beq.n	8000d90 <uartOpen+0xac>
			{
				ret = false;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	73fb      	strb	r3, [r7, #15]
				}
				/* FLUSH */
				qbuffer[ch].in  = qbuffer[ch].len - hdma_usart1_rx.Instance->NDTR;
				qbuffer[ch].out = qbuffer[ch].in;
			}
			break;
 8000d8e:	e02a      	b.n	8000de6 <uartOpen+0x102>
				ret = true;
 8000d90:	2301      	movs	r3, #1
 8000d92:	73fb      	strb	r3, [r7, #15]
				is_open[ch] = true;
 8000d94:	79fb      	ldrb	r3, [r7, #7]
 8000d96:	4a17      	ldr	r2, [pc, #92]	; (8000df4 <uartOpen+0x110>)
 8000d98:	2101      	movs	r1, #1
 8000d9a:	54d1      	strb	r1, [r2, r3]
				if(HAL_UART_Receive_DMA(&huart1, (uint8_t *)&rx_buf[0], 256) != HAL_OK)
 8000d9c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000da0:	4918      	ldr	r1, [pc, #96]	; (8000e04 <uartOpen+0x120>)
 8000da2:	4815      	ldr	r0, [pc, #84]	; (8000df8 <uartOpen+0x114>)
 8000da4:	f003 fa08 	bl	80041b8 <HAL_UART_Receive_DMA>
 8000da8:	4603      	mov	r3, r0
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d001      	beq.n	8000db2 <uartOpen+0xce>
				  ret = false;
 8000dae:	2300      	movs	r3, #0
 8000db0:	73fb      	strb	r3, [r7, #15]
				qbuffer[ch].in  = qbuffer[ch].len - hdma_usart1_rx.Instance->NDTR;
 8000db2:	79fb      	ldrb	r3, [r7, #7]
 8000db4:	4a12      	ldr	r2, [pc, #72]	; (8000e00 <uartOpen+0x11c>)
 8000db6:	011b      	lsls	r3, r3, #4
 8000db8:	4413      	add	r3, r2
 8000dba:	3308      	adds	r3, #8
 8000dbc:	6819      	ldr	r1, [r3, #0]
 8000dbe:	4b13      	ldr	r3, [pc, #76]	; (8000e0c <uartOpen+0x128>)
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	685a      	ldr	r2, [r3, #4]
 8000dc4:	79fb      	ldrb	r3, [r7, #7]
 8000dc6:	1a8a      	subs	r2, r1, r2
 8000dc8:	490d      	ldr	r1, [pc, #52]	; (8000e00 <uartOpen+0x11c>)
 8000dca:	011b      	lsls	r3, r3, #4
 8000dcc:	440b      	add	r3, r1
 8000dce:	601a      	str	r2, [r3, #0]
				qbuffer[ch].out = qbuffer[ch].in;
 8000dd0:	79fa      	ldrb	r2, [r7, #7]
 8000dd2:	79fb      	ldrb	r3, [r7, #7]
 8000dd4:	490a      	ldr	r1, [pc, #40]	; (8000e00 <uartOpen+0x11c>)
 8000dd6:	0112      	lsls	r2, r2, #4
 8000dd8:	440a      	add	r2, r1
 8000dda:	6812      	ldr	r2, [r2, #0]
 8000ddc:	4908      	ldr	r1, [pc, #32]	; (8000e00 <uartOpen+0x11c>)
 8000dde:	011b      	lsls	r3, r3, #4
 8000de0:	440b      	add	r3, r1
 8000de2:	3304      	adds	r3, #4
 8000de4:	601a      	str	r2, [r3, #0]
			break;
 8000de6:	bf00      	nop
	}

	return ret;
 8000de8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000dea:	4618      	mov	r0, r3
 8000dec:	3710      	adds	r7, #16
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bd80      	pop	{r7, pc}
 8000df2:	bf00      	nop
 8000df4:	200002f4 	.word	0x200002f4
 8000df8:	20000250 	.word	0x20000250
 8000dfc:	40011000 	.word	0x40011000
 8000e00:	200002f8 	.word	0x200002f8
 8000e04:	20000318 	.word	0x20000318
 8000e08:	40023800 	.word	0x40023800
 8000e0c:	20000294 	.word	0x20000294

08000e10 <uartAvailable>:
uint32_t uartAvailable(uint8_t ch)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b084      	sub	sp, #16
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	4603      	mov	r3, r0
 8000e18:	71fb      	strb	r3, [r7, #7]
	uint32_t ret = 0;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	60fb      	str	r3, [r7, #12]
	static uint32_t pre_time;

	switch(ch)
 8000e1e:	79fb      	ldrb	r3, [r7, #7]
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d002      	beq.n	8000e2a <uartAvailable+0x1a>
 8000e24:	2b01      	cmp	r3, #1
 8000e26:	d004      	beq.n	8000e32 <uartAvailable+0x22>
 8000e28:	e033      	b.n	8000e92 <uartAvailable+0x82>
	{
		case _DEF_UART1: // 첫번째 채널 uart -> 1. cdc 추
			ret = cdcAvailable();
 8000e2a:	f007 fb13 	bl	8008454 <cdcAvailable>
 8000e2e:	60f8      	str	r0, [r7, #12]
			break;
 8000e30:	e02f      	b.n	8000e92 <uartAvailable+0x82>
		case _DEF_UART2:

		  qbuffer[ch].in = qbuffer[ch].len - hdma_usart1_rx.Instance->NDTR;
 8000e32:	79fb      	ldrb	r3, [r7, #7]
 8000e34:	4a19      	ldr	r2, [pc, #100]	; (8000e9c <uartAvailable+0x8c>)
 8000e36:	011b      	lsls	r3, r3, #4
 8000e38:	4413      	add	r3, r2
 8000e3a:	3308      	adds	r3, #8
 8000e3c:	6819      	ldr	r1, [r3, #0]
 8000e3e:	4b18      	ldr	r3, [pc, #96]	; (8000ea0 <uartAvailable+0x90>)
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	685a      	ldr	r2, [r3, #4]
 8000e44:	79fb      	ldrb	r3, [r7, #7]
 8000e46:	1a8a      	subs	r2, r1, r2
 8000e48:	4914      	ldr	r1, [pc, #80]	; (8000e9c <uartAvailable+0x8c>)
 8000e4a:	011b      	lsls	r3, r3, #4
 8000e4c:	440b      	add	r3, r1
 8000e4e:	601a      	str	r2, [r3, #0]
		  if (millis() - pre_time > 500)
 8000e50:	f7ff fc25 	bl	800069e <millis>
 8000e54:	4602      	mov	r2, r0
 8000e56:	4b13      	ldr	r3, [pc, #76]	; (8000ea4 <uartAvailable+0x94>)
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	1ad3      	subs	r3, r2, r3
 8000e5c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000e60:	d90e      	bls.n	8000e80 <uartAvailable+0x70>
		  {
		    uartPrintf(ch, "qbuffer[ch].in = %d\n", qbuffer[ch].in);
 8000e62:	79fb      	ldrb	r3, [r7, #7]
 8000e64:	4a0d      	ldr	r2, [pc, #52]	; (8000e9c <uartAvailable+0x8c>)
 8000e66:	011b      	lsls	r3, r3, #4
 8000e68:	4413      	add	r3, r2
 8000e6a:	681a      	ldr	r2, [r3, #0]
 8000e6c:	79fb      	ldrb	r3, [r7, #7]
 8000e6e:	490e      	ldr	r1, [pc, #56]	; (8000ea8 <uartAvailable+0x98>)
 8000e70:	4618      	mov	r0, r3
 8000e72:	f000 f865 	bl	8000f40 <uartPrintf>
		    pre_time = millis();
 8000e76:	f7ff fc12 	bl	800069e <millis>
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	4a09      	ldr	r2, [pc, #36]	; (8000ea4 <uartAvailable+0x94>)
 8000e7e:	6013      	str	r3, [r2, #0]
		  }
		  ret = qbufferAvailable(&qbuffer[ch]);
 8000e80:	79fb      	ldrb	r3, [r7, #7]
 8000e82:	011b      	lsls	r3, r3, #4
 8000e84:	4a05      	ldr	r2, [pc, #20]	; (8000e9c <uartAvailable+0x8c>)
 8000e86:	4413      	add	r3, r2
 8000e88:	4618      	mov	r0, r3
 8000e8a:	f7ff fe51 	bl	8000b30 <qbufferAvailable>
 8000e8e:	60f8      	str	r0, [r7, #12]
		  break;
 8000e90:	bf00      	nop
	}

	return ret;
 8000e92:	68fb      	ldr	r3, [r7, #12]
}
 8000e94:	4618      	mov	r0, r3
 8000e96:	3710      	adds	r7, #16
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	bd80      	pop	{r7, pc}
 8000e9c:	200002f8 	.word	0x200002f8
 8000ea0:	20000294 	.word	0x20000294
 8000ea4:	20000418 	.word	0x20000418
 8000ea8:	080099f4 	.word	0x080099f4

08000eac <uartRead>:
uint8_t uartRead(uint8_t ch)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b084      	sub	sp, #16
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	71fb      	strb	r3, [r7, #7]
	uint8_t ret;

	switch(ch)
 8000eb6:	79fb      	ldrb	r3, [r7, #7]
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d002      	beq.n	8000ec2 <uartRead+0x16>
 8000ebc:	2b01      	cmp	r3, #1
 8000ebe:	d005      	beq.n	8000ecc <uartRead+0x20>
 8000ec0:	e00c      	b.n	8000edc <uartRead+0x30>
	{
		case _DEF_UART1:
			ret = cdcRead();
 8000ec2:	f007 fae5 	bl	8008490 <cdcRead>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	73fb      	strb	r3, [r7, #15]
			break;
 8000eca:	e007      	b.n	8000edc <uartRead+0x30>
		case _DEF_UART2:
		  qbufferRead(&qbuffer[_DEF_UART2], &ret, 1);
 8000ecc:	f107 030f 	add.w	r3, r7, #15
 8000ed0:	2201      	movs	r2, #1
 8000ed2:	4619      	mov	r1, r3
 8000ed4:	4804      	ldr	r0, [pc, #16]	; (8000ee8 <uartRead+0x3c>)
 8000ed6:	f7ff fdee 	bl	8000ab6 <qbufferRead>
		  break;
 8000eda:	bf00      	nop
	}

	return ret;
 8000edc:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ede:	4618      	mov	r0, r3
 8000ee0:	3710      	adds	r7, #16
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	bf00      	nop
 8000ee8:	20000308 	.word	0x20000308

08000eec <uartWrite>:
uint32_t uartWrite(uint8_t ch, uint8_t *pData, uint32_t length)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b086      	sub	sp, #24
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	60b9      	str	r1, [r7, #8]
 8000ef6:	607a      	str	r2, [r7, #4]
 8000ef8:	73fb      	strb	r3, [r7, #15]
	uint32_t ret;
	HAL_StatusTypeDef status;

	switch(ch)
 8000efa:	7bfb      	ldrb	r3, [r7, #15]
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d002      	beq.n	8000f06 <uartWrite+0x1a>
 8000f00:	2b01      	cmp	r3, #1
 8000f02:	d006      	beq.n	8000f12 <uartWrite+0x26>
 8000f04:	e014      	b.n	8000f30 <uartWrite+0x44>
		{
			case _DEF_UART1:
				ret = cdcWrite(pData, length);
 8000f06:	6879      	ldr	r1, [r7, #4]
 8000f08:	68b8      	ldr	r0, [r7, #8]
 8000f0a:	f007 fb17 	bl	800853c <cdcWrite>
 8000f0e:	6178      	str	r0, [r7, #20]
				break;
 8000f10:	e00e      	b.n	8000f30 <uartWrite+0x44>

			case _DEF_UART2:
				status = HAL_UART_Transmit(&huart1, pData, length, 100);
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	b29a      	uxth	r2, r3
 8000f16:	2364      	movs	r3, #100	; 0x64
 8000f18:	68b9      	ldr	r1, [r7, #8]
 8000f1a:	4808      	ldr	r0, [pc, #32]	; (8000f3c <uartWrite+0x50>)
 8000f1c:	f003 f8ba 	bl	8004094 <HAL_UART_Transmit>
 8000f20:	4603      	mov	r3, r0
 8000f22:	74fb      	strb	r3, [r7, #19]
				if(status == HAL_OK)
 8000f24:	7cfb      	ldrb	r3, [r7, #19]
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d101      	bne.n	8000f2e <uartWrite+0x42>
				{
					ret = length;
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	617b      	str	r3, [r7, #20]
				}
				break;
 8000f2e:	bf00      	nop
		}

	return ret;
 8000f30:	697b      	ldr	r3, [r7, #20]
}
 8000f32:	4618      	mov	r0, r3
 8000f34:	3718      	adds	r7, #24
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bd80      	pop	{r7, pc}
 8000f3a:	bf00      	nop
 8000f3c:	20000250 	.word	0x20000250

08000f40 <uartPrintf>:
/*
 * 복습할 것 가변인자...*/
uint32_t uartPrintf(uint8_t ch, char* fmt, ...)
{
 8000f40:	b40e      	push	{r1, r2, r3}
 8000f42:	b580      	push	{r7, lr}
 8000f44:	b0c7      	sub	sp, #284	; 0x11c
 8000f46:	af00      	add	r7, sp, #0
 8000f48:	4602      	mov	r2, r0
 8000f4a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000f4e:	f2a3 1311 	subw	r3, r3, #273	; 0x111
 8000f52:	701a      	strb	r2, [r3, #0]
	va_list args;
	int len;
	uint32_t ret;


	va_start(args, fmt); 									// 가변인자 처리 시작
 8000f54:	f507 7294 	add.w	r2, r7, #296	; 0x128
 8000f58:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000f5c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000f60:	601a      	str	r2, [r3, #0]
	len = vsnprintf(buf, 256, fmt, args); //-> 버퍼에 해당 내용을 write
 8000f62:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000f66:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000f6a:	f107 0010 	add.w	r0, r7, #16
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8000f74:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f78:	f008 f8c0 	bl	80090fc <vsniprintf>
 8000f7c:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114

	ret = uartWrite(ch, (uint8_t *)buf, len);
 8000f80:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8000f84:	f107 0110 	add.w	r1, r7, #16
 8000f88:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000f8c:	f2a3 1311 	subw	r3, r3, #273	; 0x111
 8000f90:	781b      	ldrb	r3, [r3, #0]
 8000f92:	4618      	mov	r0, r3
 8000f94:	f7ff ffaa 	bl	8000eec <uartWrite>
 8000f98:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

	va_end(args);

	return ret;
 8000f9c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
}
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	f507 778e 	add.w	r7, r7, #284	; 0x11c
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000fac:	b003      	add	sp, #12
 8000fae:	4770      	bx	lr

08000fb0 <HAL_UART_ErrorCallback>:




void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	b083      	sub	sp, #12
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
  if(huart1.Instance == USART1)
  {

  }
}
 8000fb8:	bf00      	nop
 8000fba:	370c      	adds	r7, #12
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc2:	4770      	bx	lr

08000fc4 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	b083      	sub	sp, #12
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
    /* received 1 byte data will be sent to our buffer
     * and to receive 1byte again, recall HAL_UART_Receive_IT*/
    HAL_UART_Receive_IT(&huart1, (uint8_t *)&rx_data[_DEF_UART2], 1);
  }
#endif
}
 8000fcc:	bf00      	nop
 8000fce:	370c      	adds	r7, #12
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd6:	4770      	bx	lr

08000fd8 <HAL_UART_MspInit>:




void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b08a      	sub	sp, #40	; 0x28
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fe0:	f107 0314 	add.w	r3, r7, #20
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	601a      	str	r2, [r3, #0]
 8000fe8:	605a      	str	r2, [r3, #4]
 8000fea:	609a      	str	r2, [r3, #8]
 8000fec:	60da      	str	r2, [r3, #12]
 8000fee:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	4a35      	ldr	r2, [pc, #212]	; (80010cc <HAL_UART_MspInit+0xf4>)
 8000ff6:	4293      	cmp	r3, r2
 8000ff8:	d163      	bne.n	80010c2 <HAL_UART_MspInit+0xea>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	613b      	str	r3, [r7, #16]
 8000ffe:	4b34      	ldr	r3, [pc, #208]	; (80010d0 <HAL_UART_MspInit+0xf8>)
 8001000:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001002:	4a33      	ldr	r2, [pc, #204]	; (80010d0 <HAL_UART_MspInit+0xf8>)
 8001004:	f043 0310 	orr.w	r3, r3, #16
 8001008:	6453      	str	r3, [r2, #68]	; 0x44
 800100a:	4b31      	ldr	r3, [pc, #196]	; (80010d0 <HAL_UART_MspInit+0xf8>)
 800100c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800100e:	f003 0310 	and.w	r3, r3, #16
 8001012:	613b      	str	r3, [r7, #16]
 8001014:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001016:	2300      	movs	r3, #0
 8001018:	60fb      	str	r3, [r7, #12]
 800101a:	4b2d      	ldr	r3, [pc, #180]	; (80010d0 <HAL_UART_MspInit+0xf8>)
 800101c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800101e:	4a2c      	ldr	r2, [pc, #176]	; (80010d0 <HAL_UART_MspInit+0xf8>)
 8001020:	f043 0301 	orr.w	r3, r3, #1
 8001024:	6313      	str	r3, [r2, #48]	; 0x30
 8001026:	4b2a      	ldr	r3, [pc, #168]	; (80010d0 <HAL_UART_MspInit+0xf8>)
 8001028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800102a:	f003 0301 	and.w	r3, r3, #1
 800102e:	60fb      	str	r3, [r7, #12]
 8001030:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001032:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001036:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001038:	2302      	movs	r3, #2
 800103a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800103c:	2300      	movs	r3, #0
 800103e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001040:	2303      	movs	r3, #3
 8001042:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001044:	2307      	movs	r3, #7
 8001046:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001048:	f107 0314 	add.w	r3, r7, #20
 800104c:	4619      	mov	r1, r3
 800104e:	4821      	ldr	r0, [pc, #132]	; (80010d4 <HAL_UART_MspInit+0xfc>)
 8001050:	f000 fe3a 	bl	8001cc8 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8001054:	4b20      	ldr	r3, [pc, #128]	; (80010d8 <HAL_UART_MspInit+0x100>)
 8001056:	4a21      	ldr	r2, [pc, #132]	; (80010dc <HAL_UART_MspInit+0x104>)
 8001058:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 800105a:	4b1f      	ldr	r3, [pc, #124]	; (80010d8 <HAL_UART_MspInit+0x100>)
 800105c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001060:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001062:	4b1d      	ldr	r3, [pc, #116]	; (80010d8 <HAL_UART_MspInit+0x100>)
 8001064:	2200      	movs	r2, #0
 8001066:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001068:	4b1b      	ldr	r3, [pc, #108]	; (80010d8 <HAL_UART_MspInit+0x100>)
 800106a:	2200      	movs	r2, #0
 800106c:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800106e:	4b1a      	ldr	r3, [pc, #104]	; (80010d8 <HAL_UART_MspInit+0x100>)
 8001070:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001074:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001076:	4b18      	ldr	r3, [pc, #96]	; (80010d8 <HAL_UART_MspInit+0x100>)
 8001078:	2200      	movs	r2, #0
 800107a:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800107c:	4b16      	ldr	r3, [pc, #88]	; (80010d8 <HAL_UART_MspInit+0x100>)
 800107e:	2200      	movs	r2, #0
 8001080:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8001082:	4b15      	ldr	r3, [pc, #84]	; (80010d8 <HAL_UART_MspInit+0x100>)
 8001084:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001088:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800108a:	4b13      	ldr	r3, [pc, #76]	; (80010d8 <HAL_UART_MspInit+0x100>)
 800108c:	2200      	movs	r2, #0
 800108e:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001090:	4b11      	ldr	r3, [pc, #68]	; (80010d8 <HAL_UART_MspInit+0x100>)
 8001092:	2200      	movs	r2, #0
 8001094:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001096:	4810      	ldr	r0, [pc, #64]	; (80010d8 <HAL_UART_MspInit+0x100>)
 8001098:	f000 fa14 	bl	80014c4 <HAL_DMA_Init>
 800109c:	4603      	mov	r3, r0
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d001      	beq.n	80010a6 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 80010a2:	f7ff fb6d 	bl	8000780 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	4a0b      	ldr	r2, [pc, #44]	; (80010d8 <HAL_UART_MspInit+0x100>)
 80010aa:	639a      	str	r2, [r3, #56]	; 0x38
 80010ac:	4a0a      	ldr	r2, [pc, #40]	; (80010d8 <HAL_UART_MspInit+0x100>)
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80010b2:	2200      	movs	r2, #0
 80010b4:	2100      	movs	r1, #0
 80010b6:	2025      	movs	r0, #37	; 0x25
 80010b8:	f000 f9cd 	bl	8001456 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80010bc:	2025      	movs	r0, #37	; 0x25
 80010be:	f000 f9e6 	bl	800148e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80010c2:	bf00      	nop
 80010c4:	3728      	adds	r7, #40	; 0x28
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	40011000 	.word	0x40011000
 80010d0:	40023800 	.word	0x40023800
 80010d4:	40020000 	.word	0x40020000
 80010d8:	20000294 	.word	0x20000294
 80010dc:	40026440 	.word	0x40026440

080010e0 <usbInit>:


#include "usb.h"

bool usbInit(void)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b086      	sub	sp, #24
 80010e4:	af00      	add	r7, sp, #0
	bool ret = true;
 80010e6:	2301      	movs	r3, #1
 80010e8:	75fb      	strb	r3, [r7, #23]

	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010ea:	463b      	mov	r3, r7
 80010ec:	2200      	movs	r2, #0
 80010ee:	601a      	str	r2, [r3, #0]
 80010f0:	605a      	str	r2, [r3, #4]
 80010f2:	609a      	str	r2, [r3, #8]
 80010f4:	60da      	str	r2, [r3, #12]
 80010f6:	611a      	str	r2, [r3, #16]

	GPIO_InitStruct.Pin = GPIO_PIN_12;
 80010f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010fc:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80010fe:	2311      	movs	r3, #17
 8001100:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001102:	2300      	movs	r3, #0
 8001104:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001106:	2300      	movs	r3, #0
 8001108:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800110a:	463b      	mov	r3, r7
 800110c:	4619      	mov	r1, r3
 800110e:	4810      	ldr	r0, [pc, #64]	; (8001150 <usbInit+0x70>)
 8001110:	f000 fdda 	bl	8001cc8 <HAL_GPIO_Init>

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8001114:	2200      	movs	r2, #0
 8001116:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800111a:	480d      	ldr	r0, [pc, #52]	; (8001150 <usbInit+0x70>)
 800111c:	f000 ff58 	bl	8001fd0 <HAL_GPIO_WritePin>
	delay(100);
 8001120:	2064      	movs	r0, #100	; 0x64
 8001122:	f7ff fab1 	bl	8000688 <delay>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8001126:	2201      	movs	r2, #1
 8001128:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800112c:	4808      	ldr	r0, [pc, #32]	; (8001150 <usbInit+0x70>)
 800112e:	f000 ff4f 	bl	8001fd0 <HAL_GPIO_WritePin>

	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001132:	2300      	movs	r3, #0
 8001134:	607b      	str	r3, [r7, #4]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001136:	463b      	mov	r3, r7
 8001138:	4619      	mov	r1, r3
 800113a:	4805      	ldr	r0, [pc, #20]	; (8001150 <usbInit+0x70>)
 800113c:	f000 fdc4 	bl	8001cc8 <HAL_GPIO_Init>

	MX_USB_DEVICE_Init();
 8001140:	f007 f958 	bl	80083f4 <MX_USB_DEVICE_Init>
	return ret;
 8001144:	7dfb      	ldrb	r3, [r7, #23]
}
 8001146:	4618      	mov	r0, r3
 8001148:	3718      	adds	r7, #24
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}
 800114e:	bf00      	nop
 8001150:	40020000 	.word	0x40020000

08001154 <hwInit>:
 */

#include "hw.h"

void hwInit()
{
 8001154:	b580      	push	{r7, lr}
 8001156:	af00      	add	r7, sp, #0
  bspInit();
 8001158:	f7ff fa5e 	bl	8000618 <bspInit>
  rtcInit();
 800115c:	f7ff fd30 	bl	8000bc0 <rtcInit>

  resetInit();
 8001160:	f7ff fd02 	bl	8000b68 <resetInit>
  ledInit();
 8001164:	f7ff fbf4 	bl	8000950 <ledInit>
  usbInit();
 8001168:	f7ff ffba 	bl	80010e0 <usbInit>
  uartInit();
 800116c:	f7ff fda0 	bl	8000cb0 <uartInit>
}
 8001170:	bf00      	nop
 8001172:	bd80      	pop	{r7, pc}

08001174 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001178:	4b0e      	ldr	r3, [pc, #56]	; (80011b4 <HAL_Init+0x40>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	4a0d      	ldr	r2, [pc, #52]	; (80011b4 <HAL_Init+0x40>)
 800117e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001182:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001184:	4b0b      	ldr	r3, [pc, #44]	; (80011b4 <HAL_Init+0x40>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	4a0a      	ldr	r2, [pc, #40]	; (80011b4 <HAL_Init+0x40>)
 800118a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800118e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001190:	4b08      	ldr	r3, [pc, #32]	; (80011b4 <HAL_Init+0x40>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	4a07      	ldr	r2, [pc, #28]	; (80011b4 <HAL_Init+0x40>)
 8001196:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800119a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800119c:	2003      	movs	r0, #3
 800119e:	f000 f94f 	bl	8001440 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011a2:	200f      	movs	r0, #15
 80011a4:	f000 f808 	bl	80011b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011a8:	f7ff faf0 	bl	800078c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011ac:	2300      	movs	r3, #0
}
 80011ae:	4618      	mov	r0, r3
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	bf00      	nop
 80011b4:	40023c00 	.word	0x40023c00

080011b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b082      	sub	sp, #8
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011c0:	4b12      	ldr	r3, [pc, #72]	; (800120c <HAL_InitTick+0x54>)
 80011c2:	681a      	ldr	r2, [r3, #0]
 80011c4:	4b12      	ldr	r3, [pc, #72]	; (8001210 <HAL_InitTick+0x58>)
 80011c6:	781b      	ldrb	r3, [r3, #0]
 80011c8:	4619      	mov	r1, r3
 80011ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80011d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80011d6:	4618      	mov	r0, r3
 80011d8:	f000 f967 	bl	80014aa <HAL_SYSTICK_Config>
 80011dc:	4603      	mov	r3, r0
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d001      	beq.n	80011e6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80011e2:	2301      	movs	r3, #1
 80011e4:	e00e      	b.n	8001204 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	2b0f      	cmp	r3, #15
 80011ea:	d80a      	bhi.n	8001202 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011ec:	2200      	movs	r2, #0
 80011ee:	6879      	ldr	r1, [r7, #4]
 80011f0:	f04f 30ff 	mov.w	r0, #4294967295
 80011f4:	f000 f92f 	bl	8001456 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011f8:	4a06      	ldr	r2, [pc, #24]	; (8001214 <HAL_InitTick+0x5c>)
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80011fe:	2300      	movs	r3, #0
 8001200:	e000      	b.n	8001204 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001202:	2301      	movs	r3, #1
}
 8001204:	4618      	mov	r0, r3
 8001206:	3708      	adds	r7, #8
 8001208:	46bd      	mov	sp, r7
 800120a:	bd80      	pop	{r7, pc}
 800120c:	20000000 	.word	0x20000000
 8001210:	2000002c 	.word	0x2000002c
 8001214:	20000028 	.word	0x20000028

08001218 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001218:	b480      	push	{r7}
 800121a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800121c:	4b06      	ldr	r3, [pc, #24]	; (8001238 <HAL_IncTick+0x20>)
 800121e:	781b      	ldrb	r3, [r3, #0]
 8001220:	461a      	mov	r2, r3
 8001222:	4b06      	ldr	r3, [pc, #24]	; (800123c <HAL_IncTick+0x24>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	4413      	add	r3, r2
 8001228:	4a04      	ldr	r2, [pc, #16]	; (800123c <HAL_IncTick+0x24>)
 800122a:	6013      	str	r3, [r2, #0]
}
 800122c:	bf00      	nop
 800122e:	46bd      	mov	sp, r7
 8001230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001234:	4770      	bx	lr
 8001236:	bf00      	nop
 8001238:	2000002c 	.word	0x2000002c
 800123c:	2000041c 	.word	0x2000041c

08001240 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001240:	b480      	push	{r7}
 8001242:	af00      	add	r7, sp, #0
  return uwTick;
 8001244:	4b03      	ldr	r3, [pc, #12]	; (8001254 <HAL_GetTick+0x14>)
 8001246:	681b      	ldr	r3, [r3, #0]
}
 8001248:	4618      	mov	r0, r3
 800124a:	46bd      	mov	sp, r7
 800124c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001250:	4770      	bx	lr
 8001252:	bf00      	nop
 8001254:	2000041c 	.word	0x2000041c

08001258 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b084      	sub	sp, #16
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001260:	f7ff ffee 	bl	8001240 <HAL_GetTick>
 8001264:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001270:	d005      	beq.n	800127e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001272:	4b0a      	ldr	r3, [pc, #40]	; (800129c <HAL_Delay+0x44>)
 8001274:	781b      	ldrb	r3, [r3, #0]
 8001276:	461a      	mov	r2, r3
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	4413      	add	r3, r2
 800127c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800127e:	bf00      	nop
 8001280:	f7ff ffde 	bl	8001240 <HAL_GetTick>
 8001284:	4602      	mov	r2, r0
 8001286:	68bb      	ldr	r3, [r7, #8]
 8001288:	1ad3      	subs	r3, r2, r3
 800128a:	68fa      	ldr	r2, [r7, #12]
 800128c:	429a      	cmp	r2, r3
 800128e:	d8f7      	bhi.n	8001280 <HAL_Delay+0x28>
  {
  }
}
 8001290:	bf00      	nop
 8001292:	bf00      	nop
 8001294:	3710      	adds	r7, #16
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}
 800129a:	bf00      	nop
 800129c:	2000002c 	.word	0x2000002c

080012a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012a0:	b480      	push	{r7}
 80012a2:	b085      	sub	sp, #20
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	f003 0307 	and.w	r3, r3, #7
 80012ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012b0:	4b0c      	ldr	r3, [pc, #48]	; (80012e4 <__NVIC_SetPriorityGrouping+0x44>)
 80012b2:	68db      	ldr	r3, [r3, #12]
 80012b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012b6:	68ba      	ldr	r2, [r7, #8]
 80012b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80012bc:	4013      	ands	r3, r2
 80012be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012c4:	68bb      	ldr	r3, [r7, #8]
 80012c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012c8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80012cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012d2:	4a04      	ldr	r2, [pc, #16]	; (80012e4 <__NVIC_SetPriorityGrouping+0x44>)
 80012d4:	68bb      	ldr	r3, [r7, #8]
 80012d6:	60d3      	str	r3, [r2, #12]
}
 80012d8:	bf00      	nop
 80012da:	3714      	adds	r7, #20
 80012dc:	46bd      	mov	sp, r7
 80012de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e2:	4770      	bx	lr
 80012e4:	e000ed00 	.word	0xe000ed00

080012e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012e8:	b480      	push	{r7}
 80012ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012ec:	4b04      	ldr	r3, [pc, #16]	; (8001300 <__NVIC_GetPriorityGrouping+0x18>)
 80012ee:	68db      	ldr	r3, [r3, #12]
 80012f0:	0a1b      	lsrs	r3, r3, #8
 80012f2:	f003 0307 	and.w	r3, r3, #7
}
 80012f6:	4618      	mov	r0, r3
 80012f8:	46bd      	mov	sp, r7
 80012fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fe:	4770      	bx	lr
 8001300:	e000ed00 	.word	0xe000ed00

08001304 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001304:	b480      	push	{r7}
 8001306:	b083      	sub	sp, #12
 8001308:	af00      	add	r7, sp, #0
 800130a:	4603      	mov	r3, r0
 800130c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800130e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001312:	2b00      	cmp	r3, #0
 8001314:	db0b      	blt.n	800132e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001316:	79fb      	ldrb	r3, [r7, #7]
 8001318:	f003 021f 	and.w	r2, r3, #31
 800131c:	4907      	ldr	r1, [pc, #28]	; (800133c <__NVIC_EnableIRQ+0x38>)
 800131e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001322:	095b      	lsrs	r3, r3, #5
 8001324:	2001      	movs	r0, #1
 8001326:	fa00 f202 	lsl.w	r2, r0, r2
 800132a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800132e:	bf00      	nop
 8001330:	370c      	adds	r7, #12
 8001332:	46bd      	mov	sp, r7
 8001334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001338:	4770      	bx	lr
 800133a:	bf00      	nop
 800133c:	e000e100 	.word	0xe000e100

08001340 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001340:	b480      	push	{r7}
 8001342:	b083      	sub	sp, #12
 8001344:	af00      	add	r7, sp, #0
 8001346:	4603      	mov	r3, r0
 8001348:	6039      	str	r1, [r7, #0]
 800134a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800134c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001350:	2b00      	cmp	r3, #0
 8001352:	db0a      	blt.n	800136a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	b2da      	uxtb	r2, r3
 8001358:	490c      	ldr	r1, [pc, #48]	; (800138c <__NVIC_SetPriority+0x4c>)
 800135a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800135e:	0112      	lsls	r2, r2, #4
 8001360:	b2d2      	uxtb	r2, r2
 8001362:	440b      	add	r3, r1
 8001364:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001368:	e00a      	b.n	8001380 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800136a:	683b      	ldr	r3, [r7, #0]
 800136c:	b2da      	uxtb	r2, r3
 800136e:	4908      	ldr	r1, [pc, #32]	; (8001390 <__NVIC_SetPriority+0x50>)
 8001370:	79fb      	ldrb	r3, [r7, #7]
 8001372:	f003 030f 	and.w	r3, r3, #15
 8001376:	3b04      	subs	r3, #4
 8001378:	0112      	lsls	r2, r2, #4
 800137a:	b2d2      	uxtb	r2, r2
 800137c:	440b      	add	r3, r1
 800137e:	761a      	strb	r2, [r3, #24]
}
 8001380:	bf00      	nop
 8001382:	370c      	adds	r7, #12
 8001384:	46bd      	mov	sp, r7
 8001386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138a:	4770      	bx	lr
 800138c:	e000e100 	.word	0xe000e100
 8001390:	e000ed00 	.word	0xe000ed00

08001394 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001394:	b480      	push	{r7}
 8001396:	b089      	sub	sp, #36	; 0x24
 8001398:	af00      	add	r7, sp, #0
 800139a:	60f8      	str	r0, [r7, #12]
 800139c:	60b9      	str	r1, [r7, #8]
 800139e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	f003 0307 	and.w	r3, r3, #7
 80013a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013a8:	69fb      	ldr	r3, [r7, #28]
 80013aa:	f1c3 0307 	rsb	r3, r3, #7
 80013ae:	2b04      	cmp	r3, #4
 80013b0:	bf28      	it	cs
 80013b2:	2304      	movcs	r3, #4
 80013b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013b6:	69fb      	ldr	r3, [r7, #28]
 80013b8:	3304      	adds	r3, #4
 80013ba:	2b06      	cmp	r3, #6
 80013bc:	d902      	bls.n	80013c4 <NVIC_EncodePriority+0x30>
 80013be:	69fb      	ldr	r3, [r7, #28]
 80013c0:	3b03      	subs	r3, #3
 80013c2:	e000      	b.n	80013c6 <NVIC_EncodePriority+0x32>
 80013c4:	2300      	movs	r3, #0
 80013c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013c8:	f04f 32ff 	mov.w	r2, #4294967295
 80013cc:	69bb      	ldr	r3, [r7, #24]
 80013ce:	fa02 f303 	lsl.w	r3, r2, r3
 80013d2:	43da      	mvns	r2, r3
 80013d4:	68bb      	ldr	r3, [r7, #8]
 80013d6:	401a      	ands	r2, r3
 80013d8:	697b      	ldr	r3, [r7, #20]
 80013da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013dc:	f04f 31ff 	mov.w	r1, #4294967295
 80013e0:	697b      	ldr	r3, [r7, #20]
 80013e2:	fa01 f303 	lsl.w	r3, r1, r3
 80013e6:	43d9      	mvns	r1, r3
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013ec:	4313      	orrs	r3, r2
         );
}
 80013ee:	4618      	mov	r0, r3
 80013f0:	3724      	adds	r7, #36	; 0x24
 80013f2:	46bd      	mov	sp, r7
 80013f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f8:	4770      	bx	lr
	...

080013fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b082      	sub	sp, #8
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	3b01      	subs	r3, #1
 8001408:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800140c:	d301      	bcc.n	8001412 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800140e:	2301      	movs	r3, #1
 8001410:	e00f      	b.n	8001432 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001412:	4a0a      	ldr	r2, [pc, #40]	; (800143c <SysTick_Config+0x40>)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	3b01      	subs	r3, #1
 8001418:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800141a:	210f      	movs	r1, #15
 800141c:	f04f 30ff 	mov.w	r0, #4294967295
 8001420:	f7ff ff8e 	bl	8001340 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001424:	4b05      	ldr	r3, [pc, #20]	; (800143c <SysTick_Config+0x40>)
 8001426:	2200      	movs	r2, #0
 8001428:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800142a:	4b04      	ldr	r3, [pc, #16]	; (800143c <SysTick_Config+0x40>)
 800142c:	2207      	movs	r2, #7
 800142e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001430:	2300      	movs	r3, #0
}
 8001432:	4618      	mov	r0, r3
 8001434:	3708      	adds	r7, #8
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}
 800143a:	bf00      	nop
 800143c:	e000e010 	.word	0xe000e010

08001440 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b082      	sub	sp, #8
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001448:	6878      	ldr	r0, [r7, #4]
 800144a:	f7ff ff29 	bl	80012a0 <__NVIC_SetPriorityGrouping>
}
 800144e:	bf00      	nop
 8001450:	3708      	adds	r7, #8
 8001452:	46bd      	mov	sp, r7
 8001454:	bd80      	pop	{r7, pc}

08001456 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001456:	b580      	push	{r7, lr}
 8001458:	b086      	sub	sp, #24
 800145a:	af00      	add	r7, sp, #0
 800145c:	4603      	mov	r3, r0
 800145e:	60b9      	str	r1, [r7, #8]
 8001460:	607a      	str	r2, [r7, #4]
 8001462:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001464:	2300      	movs	r3, #0
 8001466:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001468:	f7ff ff3e 	bl	80012e8 <__NVIC_GetPriorityGrouping>
 800146c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800146e:	687a      	ldr	r2, [r7, #4]
 8001470:	68b9      	ldr	r1, [r7, #8]
 8001472:	6978      	ldr	r0, [r7, #20]
 8001474:	f7ff ff8e 	bl	8001394 <NVIC_EncodePriority>
 8001478:	4602      	mov	r2, r0
 800147a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800147e:	4611      	mov	r1, r2
 8001480:	4618      	mov	r0, r3
 8001482:	f7ff ff5d 	bl	8001340 <__NVIC_SetPriority>
}
 8001486:	bf00      	nop
 8001488:	3718      	adds	r7, #24
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}

0800148e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800148e:	b580      	push	{r7, lr}
 8001490:	b082      	sub	sp, #8
 8001492:	af00      	add	r7, sp, #0
 8001494:	4603      	mov	r3, r0
 8001496:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001498:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800149c:	4618      	mov	r0, r3
 800149e:	f7ff ff31 	bl	8001304 <__NVIC_EnableIRQ>
}
 80014a2:	bf00      	nop
 80014a4:	3708      	adds	r7, #8
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}

080014aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014aa:	b580      	push	{r7, lr}
 80014ac:	b082      	sub	sp, #8
 80014ae:	af00      	add	r7, sp, #0
 80014b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014b2:	6878      	ldr	r0, [r7, #4]
 80014b4:	f7ff ffa2 	bl	80013fc <SysTick_Config>
 80014b8:	4603      	mov	r3, r0
}
 80014ba:	4618      	mov	r0, r3
 80014bc:	3708      	adds	r7, #8
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}
	...

080014c4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b086      	sub	sp, #24
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80014cc:	2300      	movs	r3, #0
 80014ce:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80014d0:	f7ff feb6 	bl	8001240 <HAL_GetTick>
 80014d4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d101      	bne.n	80014e0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80014dc:	2301      	movs	r3, #1
 80014de:	e099      	b.n	8001614 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	2202      	movs	r2, #2
 80014e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	2200      	movs	r2, #0
 80014ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	681a      	ldr	r2, [r3, #0]
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f022 0201 	bic.w	r2, r2, #1
 80014fe:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001500:	e00f      	b.n	8001522 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001502:	f7ff fe9d 	bl	8001240 <HAL_GetTick>
 8001506:	4602      	mov	r2, r0
 8001508:	693b      	ldr	r3, [r7, #16]
 800150a:	1ad3      	subs	r3, r2, r3
 800150c:	2b05      	cmp	r3, #5
 800150e:	d908      	bls.n	8001522 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	2220      	movs	r2, #32
 8001514:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	2203      	movs	r2, #3
 800151a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800151e:	2303      	movs	r3, #3
 8001520:	e078      	b.n	8001614 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	f003 0301 	and.w	r3, r3, #1
 800152c:	2b00      	cmp	r3, #0
 800152e:	d1e8      	bne.n	8001502 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001538:	697a      	ldr	r2, [r7, #20]
 800153a:	4b38      	ldr	r3, [pc, #224]	; (800161c <HAL_DMA_Init+0x158>)
 800153c:	4013      	ands	r3, r2
 800153e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	685a      	ldr	r2, [r3, #4]
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	689b      	ldr	r3, [r3, #8]
 8001548:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800154e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	691b      	ldr	r3, [r3, #16]
 8001554:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800155a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	699b      	ldr	r3, [r3, #24]
 8001560:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001566:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	6a1b      	ldr	r3, [r3, #32]
 800156c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800156e:	697a      	ldr	r2, [r7, #20]
 8001570:	4313      	orrs	r3, r2
 8001572:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001578:	2b04      	cmp	r3, #4
 800157a:	d107      	bne.n	800158c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001584:	4313      	orrs	r3, r2
 8001586:	697a      	ldr	r2, [r7, #20]
 8001588:	4313      	orrs	r3, r2
 800158a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	697a      	ldr	r2, [r7, #20]
 8001592:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	695b      	ldr	r3, [r3, #20]
 800159a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800159c:	697b      	ldr	r3, [r7, #20]
 800159e:	f023 0307 	bic.w	r3, r3, #7
 80015a2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015a8:	697a      	ldr	r2, [r7, #20]
 80015aa:	4313      	orrs	r3, r2
 80015ac:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015b2:	2b04      	cmp	r3, #4
 80015b4:	d117      	bne.n	80015e6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015ba:	697a      	ldr	r2, [r7, #20]
 80015bc:	4313      	orrs	r3, r2
 80015be:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d00e      	beq.n	80015e6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80015c8:	6878      	ldr	r0, [r7, #4]
 80015ca:	f000 fb01 	bl	8001bd0 <DMA_CheckFifoParam>
 80015ce:	4603      	mov	r3, r0
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d008      	beq.n	80015e6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	2240      	movs	r2, #64	; 0x40
 80015d8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	2201      	movs	r2, #1
 80015de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80015e2:	2301      	movs	r3, #1
 80015e4:	e016      	b.n	8001614 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	697a      	ldr	r2, [r7, #20]
 80015ec:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80015ee:	6878      	ldr	r0, [r7, #4]
 80015f0:	f000 fab8 	bl	8001b64 <DMA_CalcBaseAndBitshift>
 80015f4:	4603      	mov	r3, r0
 80015f6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015fc:	223f      	movs	r2, #63	; 0x3f
 80015fe:	409a      	lsls	r2, r3
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	2200      	movs	r2, #0
 8001608:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	2201      	movs	r2, #1
 800160e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001612:	2300      	movs	r3, #0
}
 8001614:	4618      	mov	r0, r3
 8001616:	3718      	adds	r7, #24
 8001618:	46bd      	mov	sp, r7
 800161a:	bd80      	pop	{r7, pc}
 800161c:	f010803f 	.word	0xf010803f

08001620 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b086      	sub	sp, #24
 8001624:	af00      	add	r7, sp, #0
 8001626:	60f8      	str	r0, [r7, #12]
 8001628:	60b9      	str	r1, [r7, #8]
 800162a:	607a      	str	r2, [r7, #4]
 800162c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800162e:	2300      	movs	r3, #0
 8001630:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001636:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800163e:	2b01      	cmp	r3, #1
 8001640:	d101      	bne.n	8001646 <HAL_DMA_Start_IT+0x26>
 8001642:	2302      	movs	r3, #2
 8001644:	e040      	b.n	80016c8 <HAL_DMA_Start_IT+0xa8>
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	2201      	movs	r2, #1
 800164a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001654:	b2db      	uxtb	r3, r3
 8001656:	2b01      	cmp	r3, #1
 8001658:	d12f      	bne.n	80016ba <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	2202      	movs	r2, #2
 800165e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	2200      	movs	r2, #0
 8001666:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	687a      	ldr	r2, [r7, #4]
 800166c:	68b9      	ldr	r1, [r7, #8]
 800166e:	68f8      	ldr	r0, [r7, #12]
 8001670:	f000 fa4a 	bl	8001b08 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001678:	223f      	movs	r2, #63	; 0x3f
 800167a:	409a      	lsls	r2, r3
 800167c:	693b      	ldr	r3, [r7, #16]
 800167e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	681a      	ldr	r2, [r3, #0]
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f042 0216 	orr.w	r2, r2, #22
 800168e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001694:	2b00      	cmp	r3, #0
 8001696:	d007      	beq.n	80016a8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	681a      	ldr	r2, [r3, #0]
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f042 0208 	orr.w	r2, r2, #8
 80016a6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	681a      	ldr	r2, [r3, #0]
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f042 0201 	orr.w	r2, r2, #1
 80016b6:	601a      	str	r2, [r3, #0]
 80016b8:	e005      	b.n	80016c6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	2200      	movs	r2, #0
 80016be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80016c2:	2302      	movs	r3, #2
 80016c4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80016c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80016c8:	4618      	mov	r0, r3
 80016ca:	3718      	adds	r7, #24
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bd80      	pop	{r7, pc}

080016d0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b084      	sub	sp, #16
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016dc:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80016de:	f7ff fdaf 	bl	8001240 <HAL_GetTick>
 80016e2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80016ea:	b2db      	uxtb	r3, r3
 80016ec:	2b02      	cmp	r3, #2
 80016ee:	d008      	beq.n	8001702 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	2280      	movs	r2, #128	; 0x80
 80016f4:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	2200      	movs	r2, #0
 80016fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80016fe:	2301      	movs	r3, #1
 8001700:	e052      	b.n	80017a8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	681a      	ldr	r2, [r3, #0]
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f022 0216 	bic.w	r2, r2, #22
 8001710:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	695a      	ldr	r2, [r3, #20]
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001720:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001726:	2b00      	cmp	r3, #0
 8001728:	d103      	bne.n	8001732 <HAL_DMA_Abort+0x62>
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800172e:	2b00      	cmp	r3, #0
 8001730:	d007      	beq.n	8001742 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	681a      	ldr	r2, [r3, #0]
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f022 0208 	bic.w	r2, r2, #8
 8001740:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	681a      	ldr	r2, [r3, #0]
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f022 0201 	bic.w	r2, r2, #1
 8001750:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001752:	e013      	b.n	800177c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001754:	f7ff fd74 	bl	8001240 <HAL_GetTick>
 8001758:	4602      	mov	r2, r0
 800175a:	68bb      	ldr	r3, [r7, #8]
 800175c:	1ad3      	subs	r3, r2, r3
 800175e:	2b05      	cmp	r3, #5
 8001760:	d90c      	bls.n	800177c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	2220      	movs	r2, #32
 8001766:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	2203      	movs	r2, #3
 800176c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	2200      	movs	r2, #0
 8001774:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001778:	2303      	movs	r3, #3
 800177a:	e015      	b.n	80017a8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f003 0301 	and.w	r3, r3, #1
 8001786:	2b00      	cmp	r3, #0
 8001788:	d1e4      	bne.n	8001754 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800178e:	223f      	movs	r2, #63	; 0x3f
 8001790:	409a      	lsls	r2, r3
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	2201      	movs	r2, #1
 800179a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	2200      	movs	r2, #0
 80017a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80017a6:	2300      	movs	r3, #0
}
 80017a8:	4618      	mov	r0, r3
 80017aa:	3710      	adds	r7, #16
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bd80      	pop	{r7, pc}

080017b0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80017b0:	b480      	push	{r7}
 80017b2:	b083      	sub	sp, #12
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80017be:	b2db      	uxtb	r3, r3
 80017c0:	2b02      	cmp	r3, #2
 80017c2:	d004      	beq.n	80017ce <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	2280      	movs	r2, #128	; 0x80
 80017c8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80017ca:	2301      	movs	r3, #1
 80017cc:	e00c      	b.n	80017e8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	2205      	movs	r2, #5
 80017d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	681a      	ldr	r2, [r3, #0]
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f022 0201 	bic.w	r2, r2, #1
 80017e4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80017e6:	2300      	movs	r3, #0
}
 80017e8:	4618      	mov	r0, r3
 80017ea:	370c      	adds	r7, #12
 80017ec:	46bd      	mov	sp, r7
 80017ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f2:	4770      	bx	lr

080017f4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b086      	sub	sp, #24
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80017fc:	2300      	movs	r3, #0
 80017fe:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001800:	4b8e      	ldr	r3, [pc, #568]	; (8001a3c <HAL_DMA_IRQHandler+0x248>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	4a8e      	ldr	r2, [pc, #568]	; (8001a40 <HAL_DMA_IRQHandler+0x24c>)
 8001806:	fba2 2303 	umull	r2, r3, r2, r3
 800180a:	0a9b      	lsrs	r3, r3, #10
 800180c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001812:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001814:	693b      	ldr	r3, [r7, #16]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800181e:	2208      	movs	r2, #8
 8001820:	409a      	lsls	r2, r3
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	4013      	ands	r3, r2
 8001826:	2b00      	cmp	r3, #0
 8001828:	d01a      	beq.n	8001860 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f003 0304 	and.w	r3, r3, #4
 8001834:	2b00      	cmp	r3, #0
 8001836:	d013      	beq.n	8001860 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	681a      	ldr	r2, [r3, #0]
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f022 0204 	bic.w	r2, r2, #4
 8001846:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800184c:	2208      	movs	r2, #8
 800184e:	409a      	lsls	r2, r3
 8001850:	693b      	ldr	r3, [r7, #16]
 8001852:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001858:	f043 0201 	orr.w	r2, r3, #1
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001864:	2201      	movs	r2, #1
 8001866:	409a      	lsls	r2, r3
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	4013      	ands	r3, r2
 800186c:	2b00      	cmp	r3, #0
 800186e:	d012      	beq.n	8001896 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	695b      	ldr	r3, [r3, #20]
 8001876:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800187a:	2b00      	cmp	r3, #0
 800187c:	d00b      	beq.n	8001896 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001882:	2201      	movs	r2, #1
 8001884:	409a      	lsls	r2, r3
 8001886:	693b      	ldr	r3, [r7, #16]
 8001888:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800188e:	f043 0202 	orr.w	r2, r3, #2
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800189a:	2204      	movs	r2, #4
 800189c:	409a      	lsls	r2, r3
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	4013      	ands	r3, r2
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d012      	beq.n	80018cc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f003 0302 	and.w	r3, r3, #2
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d00b      	beq.n	80018cc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018b8:	2204      	movs	r2, #4
 80018ba:	409a      	lsls	r2, r3
 80018bc:	693b      	ldr	r3, [r7, #16]
 80018be:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018c4:	f043 0204 	orr.w	r2, r3, #4
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018d0:	2210      	movs	r2, #16
 80018d2:	409a      	lsls	r2, r3
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	4013      	ands	r3, r2
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d043      	beq.n	8001964 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f003 0308 	and.w	r3, r3, #8
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d03c      	beq.n	8001964 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018ee:	2210      	movs	r2, #16
 80018f0:	409a      	lsls	r2, r3
 80018f2:	693b      	ldr	r3, [r7, #16]
 80018f4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001900:	2b00      	cmp	r3, #0
 8001902:	d018      	beq.n	8001936 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800190e:	2b00      	cmp	r3, #0
 8001910:	d108      	bne.n	8001924 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001916:	2b00      	cmp	r3, #0
 8001918:	d024      	beq.n	8001964 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800191e:	6878      	ldr	r0, [r7, #4]
 8001920:	4798      	blx	r3
 8001922:	e01f      	b.n	8001964 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001928:	2b00      	cmp	r3, #0
 800192a:	d01b      	beq.n	8001964 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001930:	6878      	ldr	r0, [r7, #4]
 8001932:	4798      	blx	r3
 8001934:	e016      	b.n	8001964 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001940:	2b00      	cmp	r3, #0
 8001942:	d107      	bne.n	8001954 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	681a      	ldr	r2, [r3, #0]
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f022 0208 	bic.w	r2, r2, #8
 8001952:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001958:	2b00      	cmp	r3, #0
 800195a:	d003      	beq.n	8001964 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001960:	6878      	ldr	r0, [r7, #4]
 8001962:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001968:	2220      	movs	r2, #32
 800196a:	409a      	lsls	r2, r3
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	4013      	ands	r3, r2
 8001970:	2b00      	cmp	r3, #0
 8001972:	f000 808f 	beq.w	8001a94 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f003 0310 	and.w	r3, r3, #16
 8001980:	2b00      	cmp	r3, #0
 8001982:	f000 8087 	beq.w	8001a94 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800198a:	2220      	movs	r2, #32
 800198c:	409a      	lsls	r2, r3
 800198e:	693b      	ldr	r3, [r7, #16]
 8001990:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001998:	b2db      	uxtb	r3, r3
 800199a:	2b05      	cmp	r3, #5
 800199c:	d136      	bne.n	8001a0c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	681a      	ldr	r2, [r3, #0]
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f022 0216 	bic.w	r2, r2, #22
 80019ac:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	695a      	ldr	r2, [r3, #20]
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80019bc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d103      	bne.n	80019ce <HAL_DMA_IRQHandler+0x1da>
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d007      	beq.n	80019de <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	681a      	ldr	r2, [r3, #0]
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f022 0208 	bic.w	r2, r2, #8
 80019dc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019e2:	223f      	movs	r2, #63	; 0x3f
 80019e4:	409a      	lsls	r2, r3
 80019e6:	693b      	ldr	r3, [r7, #16]
 80019e8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	2201      	movs	r2, #1
 80019ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	2200      	movs	r2, #0
 80019f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d07e      	beq.n	8001b00 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a06:	6878      	ldr	r0, [r7, #4]
 8001a08:	4798      	blx	r3
        }
        return;
 8001a0a:	e079      	b.n	8001b00 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d01d      	beq.n	8001a56 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d10d      	bne.n	8001a44 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d031      	beq.n	8001a94 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a34:	6878      	ldr	r0, [r7, #4]
 8001a36:	4798      	blx	r3
 8001a38:	e02c      	b.n	8001a94 <HAL_DMA_IRQHandler+0x2a0>
 8001a3a:	bf00      	nop
 8001a3c:	20000000 	.word	0x20000000
 8001a40:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d023      	beq.n	8001a94 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a50:	6878      	ldr	r0, [r7, #4]
 8001a52:	4798      	blx	r3
 8001a54:	e01e      	b.n	8001a94 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d10f      	bne.n	8001a84 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	681a      	ldr	r2, [r3, #0]
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f022 0210 	bic.w	r2, r2, #16
 8001a72:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	2201      	movs	r2, #1
 8001a78:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	2200      	movs	r2, #0
 8001a80:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d003      	beq.n	8001a94 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a90:	6878      	ldr	r0, [r7, #4]
 8001a92:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d032      	beq.n	8001b02 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001aa0:	f003 0301 	and.w	r3, r3, #1
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d022      	beq.n	8001aee <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	2205      	movs	r2, #5
 8001aac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	681a      	ldr	r2, [r3, #0]
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f022 0201 	bic.w	r2, r2, #1
 8001abe:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001ac0:	68bb      	ldr	r3, [r7, #8]
 8001ac2:	3301      	adds	r3, #1
 8001ac4:	60bb      	str	r3, [r7, #8]
 8001ac6:	697a      	ldr	r2, [r7, #20]
 8001ac8:	429a      	cmp	r2, r3
 8001aca:	d307      	bcc.n	8001adc <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f003 0301 	and.w	r3, r3, #1
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d1f2      	bne.n	8001ac0 <HAL_DMA_IRQHandler+0x2cc>
 8001ada:	e000      	b.n	8001ade <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001adc:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	2201      	movs	r2, #1
 8001ae2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	2200      	movs	r2, #0
 8001aea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d005      	beq.n	8001b02 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001afa:	6878      	ldr	r0, [r7, #4]
 8001afc:	4798      	blx	r3
 8001afe:	e000      	b.n	8001b02 <HAL_DMA_IRQHandler+0x30e>
        return;
 8001b00:	bf00      	nop
    }
  }
}
 8001b02:	3718      	adds	r7, #24
 8001b04:	46bd      	mov	sp, r7
 8001b06:	bd80      	pop	{r7, pc}

08001b08 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	b085      	sub	sp, #20
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	60f8      	str	r0, [r7, #12]
 8001b10:	60b9      	str	r1, [r7, #8]
 8001b12:	607a      	str	r2, [r7, #4]
 8001b14:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	681a      	ldr	r2, [r3, #0]
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001b24:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	683a      	ldr	r2, [r7, #0]
 8001b2c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	689b      	ldr	r3, [r3, #8]
 8001b32:	2b40      	cmp	r3, #64	; 0x40
 8001b34:	d108      	bne.n	8001b48 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	687a      	ldr	r2, [r7, #4]
 8001b3c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	68ba      	ldr	r2, [r7, #8]
 8001b44:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001b46:	e007      	b.n	8001b58 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	68ba      	ldr	r2, [r7, #8]
 8001b4e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	687a      	ldr	r2, [r7, #4]
 8001b56:	60da      	str	r2, [r3, #12]
}
 8001b58:	bf00      	nop
 8001b5a:	3714      	adds	r7, #20
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b62:	4770      	bx	lr

08001b64 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001b64:	b480      	push	{r7}
 8001b66:	b085      	sub	sp, #20
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	b2db      	uxtb	r3, r3
 8001b72:	3b10      	subs	r3, #16
 8001b74:	4a14      	ldr	r2, [pc, #80]	; (8001bc8 <DMA_CalcBaseAndBitshift+0x64>)
 8001b76:	fba2 2303 	umull	r2, r3, r2, r3
 8001b7a:	091b      	lsrs	r3, r3, #4
 8001b7c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001b7e:	4a13      	ldr	r2, [pc, #76]	; (8001bcc <DMA_CalcBaseAndBitshift+0x68>)
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	4413      	add	r3, r2
 8001b84:	781b      	ldrb	r3, [r3, #0]
 8001b86:	461a      	mov	r2, r3
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	2b03      	cmp	r3, #3
 8001b90:	d909      	bls.n	8001ba6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001b9a:	f023 0303 	bic.w	r3, r3, #3
 8001b9e:	1d1a      	adds	r2, r3, #4
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	659a      	str	r2, [r3, #88]	; 0x58
 8001ba4:	e007      	b.n	8001bb6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001bae:	f023 0303 	bic.w	r3, r3, #3
 8001bb2:	687a      	ldr	r2, [r7, #4]
 8001bb4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001bba:	4618      	mov	r0, r3
 8001bbc:	3714      	adds	r7, #20
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc4:	4770      	bx	lr
 8001bc6:	bf00      	nop
 8001bc8:	aaaaaaab 	.word	0xaaaaaaab
 8001bcc:	08009a6c 	.word	0x08009a6c

08001bd0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	b085      	sub	sp, #20
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001be0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	699b      	ldr	r3, [r3, #24]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d11f      	bne.n	8001c2a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001bea:	68bb      	ldr	r3, [r7, #8]
 8001bec:	2b03      	cmp	r3, #3
 8001bee:	d856      	bhi.n	8001c9e <DMA_CheckFifoParam+0xce>
 8001bf0:	a201      	add	r2, pc, #4	; (adr r2, 8001bf8 <DMA_CheckFifoParam+0x28>)
 8001bf2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bf6:	bf00      	nop
 8001bf8:	08001c09 	.word	0x08001c09
 8001bfc:	08001c1b 	.word	0x08001c1b
 8001c00:	08001c09 	.word	0x08001c09
 8001c04:	08001c9f 	.word	0x08001c9f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c0c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d046      	beq.n	8001ca2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001c14:	2301      	movs	r3, #1
 8001c16:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001c18:	e043      	b.n	8001ca2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c1e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001c22:	d140      	bne.n	8001ca6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001c24:	2301      	movs	r3, #1
 8001c26:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001c28:	e03d      	b.n	8001ca6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	699b      	ldr	r3, [r3, #24]
 8001c2e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001c32:	d121      	bne.n	8001c78 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001c34:	68bb      	ldr	r3, [r7, #8]
 8001c36:	2b03      	cmp	r3, #3
 8001c38:	d837      	bhi.n	8001caa <DMA_CheckFifoParam+0xda>
 8001c3a:	a201      	add	r2, pc, #4	; (adr r2, 8001c40 <DMA_CheckFifoParam+0x70>)
 8001c3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c40:	08001c51 	.word	0x08001c51
 8001c44:	08001c57 	.word	0x08001c57
 8001c48:	08001c51 	.word	0x08001c51
 8001c4c:	08001c69 	.word	0x08001c69
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001c50:	2301      	movs	r3, #1
 8001c52:	73fb      	strb	r3, [r7, #15]
      break;
 8001c54:	e030      	b.n	8001cb8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c5a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d025      	beq.n	8001cae <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001c62:	2301      	movs	r3, #1
 8001c64:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001c66:	e022      	b.n	8001cae <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c6c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001c70:	d11f      	bne.n	8001cb2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001c72:	2301      	movs	r3, #1
 8001c74:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001c76:	e01c      	b.n	8001cb2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001c78:	68bb      	ldr	r3, [r7, #8]
 8001c7a:	2b02      	cmp	r3, #2
 8001c7c:	d903      	bls.n	8001c86 <DMA_CheckFifoParam+0xb6>
 8001c7e:	68bb      	ldr	r3, [r7, #8]
 8001c80:	2b03      	cmp	r3, #3
 8001c82:	d003      	beq.n	8001c8c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001c84:	e018      	b.n	8001cb8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001c86:	2301      	movs	r3, #1
 8001c88:	73fb      	strb	r3, [r7, #15]
      break;
 8001c8a:	e015      	b.n	8001cb8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c90:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d00e      	beq.n	8001cb6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001c98:	2301      	movs	r3, #1
 8001c9a:	73fb      	strb	r3, [r7, #15]
      break;
 8001c9c:	e00b      	b.n	8001cb6 <DMA_CheckFifoParam+0xe6>
      break;
 8001c9e:	bf00      	nop
 8001ca0:	e00a      	b.n	8001cb8 <DMA_CheckFifoParam+0xe8>
      break;
 8001ca2:	bf00      	nop
 8001ca4:	e008      	b.n	8001cb8 <DMA_CheckFifoParam+0xe8>
      break;
 8001ca6:	bf00      	nop
 8001ca8:	e006      	b.n	8001cb8 <DMA_CheckFifoParam+0xe8>
      break;
 8001caa:	bf00      	nop
 8001cac:	e004      	b.n	8001cb8 <DMA_CheckFifoParam+0xe8>
      break;
 8001cae:	bf00      	nop
 8001cb0:	e002      	b.n	8001cb8 <DMA_CheckFifoParam+0xe8>
      break;   
 8001cb2:	bf00      	nop
 8001cb4:	e000      	b.n	8001cb8 <DMA_CheckFifoParam+0xe8>
      break;
 8001cb6:	bf00      	nop
    }
  } 
  
  return status; 
 8001cb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cba:	4618      	mov	r0, r3
 8001cbc:	3714      	adds	r7, #20
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc4:	4770      	bx	lr
 8001cc6:	bf00      	nop

08001cc8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	b089      	sub	sp, #36	; 0x24
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
 8001cd0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001cde:	2300      	movs	r3, #0
 8001ce0:	61fb      	str	r3, [r7, #28]
 8001ce2:	e159      	b.n	8001f98 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001ce4:	2201      	movs	r2, #1
 8001ce6:	69fb      	ldr	r3, [r7, #28]
 8001ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	697a      	ldr	r2, [r7, #20]
 8001cf4:	4013      	ands	r3, r2
 8001cf6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001cf8:	693a      	ldr	r2, [r7, #16]
 8001cfa:	697b      	ldr	r3, [r7, #20]
 8001cfc:	429a      	cmp	r2, r3
 8001cfe:	f040 8148 	bne.w	8001f92 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	685b      	ldr	r3, [r3, #4]
 8001d06:	f003 0303 	and.w	r3, r3, #3
 8001d0a:	2b01      	cmp	r3, #1
 8001d0c:	d005      	beq.n	8001d1a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	685b      	ldr	r3, [r3, #4]
 8001d12:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d16:	2b02      	cmp	r3, #2
 8001d18:	d130      	bne.n	8001d7c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	689b      	ldr	r3, [r3, #8]
 8001d1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001d20:	69fb      	ldr	r3, [r7, #28]
 8001d22:	005b      	lsls	r3, r3, #1
 8001d24:	2203      	movs	r2, #3
 8001d26:	fa02 f303 	lsl.w	r3, r2, r3
 8001d2a:	43db      	mvns	r3, r3
 8001d2c:	69ba      	ldr	r2, [r7, #24]
 8001d2e:	4013      	ands	r3, r2
 8001d30:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	68da      	ldr	r2, [r3, #12]
 8001d36:	69fb      	ldr	r3, [r7, #28]
 8001d38:	005b      	lsls	r3, r3, #1
 8001d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d3e:	69ba      	ldr	r2, [r7, #24]
 8001d40:	4313      	orrs	r3, r2
 8001d42:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	69ba      	ldr	r2, [r7, #24]
 8001d48:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	685b      	ldr	r3, [r3, #4]
 8001d4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d50:	2201      	movs	r2, #1
 8001d52:	69fb      	ldr	r3, [r7, #28]
 8001d54:	fa02 f303 	lsl.w	r3, r2, r3
 8001d58:	43db      	mvns	r3, r3
 8001d5a:	69ba      	ldr	r2, [r7, #24]
 8001d5c:	4013      	ands	r3, r2
 8001d5e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	685b      	ldr	r3, [r3, #4]
 8001d64:	091b      	lsrs	r3, r3, #4
 8001d66:	f003 0201 	and.w	r2, r3, #1
 8001d6a:	69fb      	ldr	r3, [r7, #28]
 8001d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d70:	69ba      	ldr	r2, [r7, #24]
 8001d72:	4313      	orrs	r3, r2
 8001d74:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	69ba      	ldr	r2, [r7, #24]
 8001d7a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	f003 0303 	and.w	r3, r3, #3
 8001d84:	2b03      	cmp	r3, #3
 8001d86:	d017      	beq.n	8001db8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	68db      	ldr	r3, [r3, #12]
 8001d8c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001d8e:	69fb      	ldr	r3, [r7, #28]
 8001d90:	005b      	lsls	r3, r3, #1
 8001d92:	2203      	movs	r2, #3
 8001d94:	fa02 f303 	lsl.w	r3, r2, r3
 8001d98:	43db      	mvns	r3, r3
 8001d9a:	69ba      	ldr	r2, [r7, #24]
 8001d9c:	4013      	ands	r3, r2
 8001d9e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	689a      	ldr	r2, [r3, #8]
 8001da4:	69fb      	ldr	r3, [r7, #28]
 8001da6:	005b      	lsls	r3, r3, #1
 8001da8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dac:	69ba      	ldr	r2, [r7, #24]
 8001dae:	4313      	orrs	r3, r2
 8001db0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	69ba      	ldr	r2, [r7, #24]
 8001db6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	685b      	ldr	r3, [r3, #4]
 8001dbc:	f003 0303 	and.w	r3, r3, #3
 8001dc0:	2b02      	cmp	r3, #2
 8001dc2:	d123      	bne.n	8001e0c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001dc4:	69fb      	ldr	r3, [r7, #28]
 8001dc6:	08da      	lsrs	r2, r3, #3
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	3208      	adds	r2, #8
 8001dcc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001dd0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001dd2:	69fb      	ldr	r3, [r7, #28]
 8001dd4:	f003 0307 	and.w	r3, r3, #7
 8001dd8:	009b      	lsls	r3, r3, #2
 8001dda:	220f      	movs	r2, #15
 8001ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8001de0:	43db      	mvns	r3, r3
 8001de2:	69ba      	ldr	r2, [r7, #24]
 8001de4:	4013      	ands	r3, r2
 8001de6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	691a      	ldr	r2, [r3, #16]
 8001dec:	69fb      	ldr	r3, [r7, #28]
 8001dee:	f003 0307 	and.w	r3, r3, #7
 8001df2:	009b      	lsls	r3, r3, #2
 8001df4:	fa02 f303 	lsl.w	r3, r2, r3
 8001df8:	69ba      	ldr	r2, [r7, #24]
 8001dfa:	4313      	orrs	r3, r2
 8001dfc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001dfe:	69fb      	ldr	r3, [r7, #28]
 8001e00:	08da      	lsrs	r2, r3, #3
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	3208      	adds	r2, #8
 8001e06:	69b9      	ldr	r1, [r7, #24]
 8001e08:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001e12:	69fb      	ldr	r3, [r7, #28]
 8001e14:	005b      	lsls	r3, r3, #1
 8001e16:	2203      	movs	r2, #3
 8001e18:	fa02 f303 	lsl.w	r3, r2, r3
 8001e1c:	43db      	mvns	r3, r3
 8001e1e:	69ba      	ldr	r2, [r7, #24]
 8001e20:	4013      	ands	r3, r2
 8001e22:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	685b      	ldr	r3, [r3, #4]
 8001e28:	f003 0203 	and.w	r2, r3, #3
 8001e2c:	69fb      	ldr	r3, [r7, #28]
 8001e2e:	005b      	lsls	r3, r3, #1
 8001e30:	fa02 f303 	lsl.w	r3, r2, r3
 8001e34:	69ba      	ldr	r2, [r7, #24]
 8001e36:	4313      	orrs	r3, r2
 8001e38:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	69ba      	ldr	r2, [r7, #24]
 8001e3e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	685b      	ldr	r3, [r3, #4]
 8001e44:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	f000 80a2 	beq.w	8001f92 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e4e:	2300      	movs	r3, #0
 8001e50:	60fb      	str	r3, [r7, #12]
 8001e52:	4b57      	ldr	r3, [pc, #348]	; (8001fb0 <HAL_GPIO_Init+0x2e8>)
 8001e54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e56:	4a56      	ldr	r2, [pc, #344]	; (8001fb0 <HAL_GPIO_Init+0x2e8>)
 8001e58:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e5c:	6453      	str	r3, [r2, #68]	; 0x44
 8001e5e:	4b54      	ldr	r3, [pc, #336]	; (8001fb0 <HAL_GPIO_Init+0x2e8>)
 8001e60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e66:	60fb      	str	r3, [r7, #12]
 8001e68:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001e6a:	4a52      	ldr	r2, [pc, #328]	; (8001fb4 <HAL_GPIO_Init+0x2ec>)
 8001e6c:	69fb      	ldr	r3, [r7, #28]
 8001e6e:	089b      	lsrs	r3, r3, #2
 8001e70:	3302      	adds	r3, #2
 8001e72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e76:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001e78:	69fb      	ldr	r3, [r7, #28]
 8001e7a:	f003 0303 	and.w	r3, r3, #3
 8001e7e:	009b      	lsls	r3, r3, #2
 8001e80:	220f      	movs	r2, #15
 8001e82:	fa02 f303 	lsl.w	r3, r2, r3
 8001e86:	43db      	mvns	r3, r3
 8001e88:	69ba      	ldr	r2, [r7, #24]
 8001e8a:	4013      	ands	r3, r2
 8001e8c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	4a49      	ldr	r2, [pc, #292]	; (8001fb8 <HAL_GPIO_Init+0x2f0>)
 8001e92:	4293      	cmp	r3, r2
 8001e94:	d019      	beq.n	8001eca <HAL_GPIO_Init+0x202>
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	4a48      	ldr	r2, [pc, #288]	; (8001fbc <HAL_GPIO_Init+0x2f4>)
 8001e9a:	4293      	cmp	r3, r2
 8001e9c:	d013      	beq.n	8001ec6 <HAL_GPIO_Init+0x1fe>
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	4a47      	ldr	r2, [pc, #284]	; (8001fc0 <HAL_GPIO_Init+0x2f8>)
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	d00d      	beq.n	8001ec2 <HAL_GPIO_Init+0x1fa>
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	4a46      	ldr	r2, [pc, #280]	; (8001fc4 <HAL_GPIO_Init+0x2fc>)
 8001eaa:	4293      	cmp	r3, r2
 8001eac:	d007      	beq.n	8001ebe <HAL_GPIO_Init+0x1f6>
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	4a45      	ldr	r2, [pc, #276]	; (8001fc8 <HAL_GPIO_Init+0x300>)
 8001eb2:	4293      	cmp	r3, r2
 8001eb4:	d101      	bne.n	8001eba <HAL_GPIO_Init+0x1f2>
 8001eb6:	2304      	movs	r3, #4
 8001eb8:	e008      	b.n	8001ecc <HAL_GPIO_Init+0x204>
 8001eba:	2307      	movs	r3, #7
 8001ebc:	e006      	b.n	8001ecc <HAL_GPIO_Init+0x204>
 8001ebe:	2303      	movs	r3, #3
 8001ec0:	e004      	b.n	8001ecc <HAL_GPIO_Init+0x204>
 8001ec2:	2302      	movs	r3, #2
 8001ec4:	e002      	b.n	8001ecc <HAL_GPIO_Init+0x204>
 8001ec6:	2301      	movs	r3, #1
 8001ec8:	e000      	b.n	8001ecc <HAL_GPIO_Init+0x204>
 8001eca:	2300      	movs	r3, #0
 8001ecc:	69fa      	ldr	r2, [r7, #28]
 8001ece:	f002 0203 	and.w	r2, r2, #3
 8001ed2:	0092      	lsls	r2, r2, #2
 8001ed4:	4093      	lsls	r3, r2
 8001ed6:	69ba      	ldr	r2, [r7, #24]
 8001ed8:	4313      	orrs	r3, r2
 8001eda:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001edc:	4935      	ldr	r1, [pc, #212]	; (8001fb4 <HAL_GPIO_Init+0x2ec>)
 8001ede:	69fb      	ldr	r3, [r7, #28]
 8001ee0:	089b      	lsrs	r3, r3, #2
 8001ee2:	3302      	adds	r3, #2
 8001ee4:	69ba      	ldr	r2, [r7, #24]
 8001ee6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001eea:	4b38      	ldr	r3, [pc, #224]	; (8001fcc <HAL_GPIO_Init+0x304>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ef0:	693b      	ldr	r3, [r7, #16]
 8001ef2:	43db      	mvns	r3, r3
 8001ef4:	69ba      	ldr	r2, [r7, #24]
 8001ef6:	4013      	ands	r3, r2
 8001ef8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	685b      	ldr	r3, [r3, #4]
 8001efe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d003      	beq.n	8001f0e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001f06:	69ba      	ldr	r2, [r7, #24]
 8001f08:	693b      	ldr	r3, [r7, #16]
 8001f0a:	4313      	orrs	r3, r2
 8001f0c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001f0e:	4a2f      	ldr	r2, [pc, #188]	; (8001fcc <HAL_GPIO_Init+0x304>)
 8001f10:	69bb      	ldr	r3, [r7, #24]
 8001f12:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001f14:	4b2d      	ldr	r3, [pc, #180]	; (8001fcc <HAL_GPIO_Init+0x304>)
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f1a:	693b      	ldr	r3, [r7, #16]
 8001f1c:	43db      	mvns	r3, r3
 8001f1e:	69ba      	ldr	r2, [r7, #24]
 8001f20:	4013      	ands	r3, r2
 8001f22:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	685b      	ldr	r3, [r3, #4]
 8001f28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d003      	beq.n	8001f38 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001f30:	69ba      	ldr	r2, [r7, #24]
 8001f32:	693b      	ldr	r3, [r7, #16]
 8001f34:	4313      	orrs	r3, r2
 8001f36:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001f38:	4a24      	ldr	r2, [pc, #144]	; (8001fcc <HAL_GPIO_Init+0x304>)
 8001f3a:	69bb      	ldr	r3, [r7, #24]
 8001f3c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f3e:	4b23      	ldr	r3, [pc, #140]	; (8001fcc <HAL_GPIO_Init+0x304>)
 8001f40:	689b      	ldr	r3, [r3, #8]
 8001f42:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f44:	693b      	ldr	r3, [r7, #16]
 8001f46:	43db      	mvns	r3, r3
 8001f48:	69ba      	ldr	r2, [r7, #24]
 8001f4a:	4013      	ands	r3, r2
 8001f4c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	685b      	ldr	r3, [r3, #4]
 8001f52:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d003      	beq.n	8001f62 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001f5a:	69ba      	ldr	r2, [r7, #24]
 8001f5c:	693b      	ldr	r3, [r7, #16]
 8001f5e:	4313      	orrs	r3, r2
 8001f60:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001f62:	4a1a      	ldr	r2, [pc, #104]	; (8001fcc <HAL_GPIO_Init+0x304>)
 8001f64:	69bb      	ldr	r3, [r7, #24]
 8001f66:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001f68:	4b18      	ldr	r3, [pc, #96]	; (8001fcc <HAL_GPIO_Init+0x304>)
 8001f6a:	68db      	ldr	r3, [r3, #12]
 8001f6c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f6e:	693b      	ldr	r3, [r7, #16]
 8001f70:	43db      	mvns	r3, r3
 8001f72:	69ba      	ldr	r2, [r7, #24]
 8001f74:	4013      	ands	r3, r2
 8001f76:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	685b      	ldr	r3, [r3, #4]
 8001f7c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d003      	beq.n	8001f8c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001f84:	69ba      	ldr	r2, [r7, #24]
 8001f86:	693b      	ldr	r3, [r7, #16]
 8001f88:	4313      	orrs	r3, r2
 8001f8a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001f8c:	4a0f      	ldr	r2, [pc, #60]	; (8001fcc <HAL_GPIO_Init+0x304>)
 8001f8e:	69bb      	ldr	r3, [r7, #24]
 8001f90:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f92:	69fb      	ldr	r3, [r7, #28]
 8001f94:	3301      	adds	r3, #1
 8001f96:	61fb      	str	r3, [r7, #28]
 8001f98:	69fb      	ldr	r3, [r7, #28]
 8001f9a:	2b0f      	cmp	r3, #15
 8001f9c:	f67f aea2 	bls.w	8001ce4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001fa0:	bf00      	nop
 8001fa2:	bf00      	nop
 8001fa4:	3724      	adds	r7, #36	; 0x24
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fac:	4770      	bx	lr
 8001fae:	bf00      	nop
 8001fb0:	40023800 	.word	0x40023800
 8001fb4:	40013800 	.word	0x40013800
 8001fb8:	40020000 	.word	0x40020000
 8001fbc:	40020400 	.word	0x40020400
 8001fc0:	40020800 	.word	0x40020800
 8001fc4:	40020c00 	.word	0x40020c00
 8001fc8:	40021000 	.word	0x40021000
 8001fcc:	40013c00 	.word	0x40013c00

08001fd0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	b083      	sub	sp, #12
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
 8001fd8:	460b      	mov	r3, r1
 8001fda:	807b      	strh	r3, [r7, #2]
 8001fdc:	4613      	mov	r3, r2
 8001fde:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001fe0:	787b      	ldrb	r3, [r7, #1]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d003      	beq.n	8001fee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001fe6:	887a      	ldrh	r2, [r7, #2]
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001fec:	e003      	b.n	8001ff6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001fee:	887b      	ldrh	r3, [r7, #2]
 8001ff0:	041a      	lsls	r2, r3, #16
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	619a      	str	r2, [r3, #24]
}
 8001ff6:	bf00      	nop
 8001ff8:	370c      	adds	r7, #12
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002000:	4770      	bx	lr

08002002 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002002:	b480      	push	{r7}
 8002004:	b085      	sub	sp, #20
 8002006:	af00      	add	r7, sp, #0
 8002008:	6078      	str	r0, [r7, #4]
 800200a:	460b      	mov	r3, r1
 800200c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	695b      	ldr	r3, [r3, #20]
 8002012:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002014:	887a      	ldrh	r2, [r7, #2]
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	4013      	ands	r3, r2
 800201a:	041a      	lsls	r2, r3, #16
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	43d9      	mvns	r1, r3
 8002020:	887b      	ldrh	r3, [r7, #2]
 8002022:	400b      	ands	r3, r1
 8002024:	431a      	orrs	r2, r3
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	619a      	str	r2, [r3, #24]
}
 800202a:	bf00      	nop
 800202c:	3714      	adds	r7, #20
 800202e:	46bd      	mov	sp, r7
 8002030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002034:	4770      	bx	lr

08002036 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002036:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002038:	b08f      	sub	sp, #60	; 0x3c
 800203a:	af0a      	add	r7, sp, #40	; 0x28
 800203c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	2b00      	cmp	r3, #0
 8002042:	d101      	bne.n	8002048 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002044:	2301      	movs	r3, #1
 8002046:	e10f      	b.n	8002268 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8002054:	b2db      	uxtb	r3, r3
 8002056:	2b00      	cmp	r3, #0
 8002058:	d106      	bne.n	8002068 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	2200      	movs	r2, #0
 800205e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002062:	6878      	ldr	r0, [r7, #4]
 8002064:	f006 fcd6 	bl	8008a14 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	2203      	movs	r2, #3
 800206c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002070:	68bb      	ldr	r3, [r7, #8]
 8002072:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002074:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002078:	2b00      	cmp	r3, #0
 800207a:	d102      	bne.n	8002082 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2200      	movs	r2, #0
 8002080:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	4618      	mov	r0, r3
 8002088:	f003 fabf 	bl	800560a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	603b      	str	r3, [r7, #0]
 8002092:	687e      	ldr	r6, [r7, #4]
 8002094:	466d      	mov	r5, sp
 8002096:	f106 0410 	add.w	r4, r6, #16
 800209a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800209c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800209e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80020a0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80020a2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80020a6:	e885 0003 	stmia.w	r5, {r0, r1}
 80020aa:	1d33      	adds	r3, r6, #4
 80020ac:	cb0e      	ldmia	r3, {r1, r2, r3}
 80020ae:	6838      	ldr	r0, [r7, #0]
 80020b0:	f003 f996 	bl	80053e0 <USB_CoreInit>
 80020b4:	4603      	mov	r3, r0
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d005      	beq.n	80020c6 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	2202      	movs	r2, #2
 80020be:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80020c2:	2301      	movs	r3, #1
 80020c4:	e0d0      	b.n	8002268 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	2100      	movs	r1, #0
 80020cc:	4618      	mov	r0, r3
 80020ce:	f003 faad 	bl	800562c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80020d2:	2300      	movs	r3, #0
 80020d4:	73fb      	strb	r3, [r7, #15]
 80020d6:	e04a      	b.n	800216e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80020d8:	7bfa      	ldrb	r2, [r7, #15]
 80020da:	6879      	ldr	r1, [r7, #4]
 80020dc:	4613      	mov	r3, r2
 80020de:	00db      	lsls	r3, r3, #3
 80020e0:	1a9b      	subs	r3, r3, r2
 80020e2:	009b      	lsls	r3, r3, #2
 80020e4:	440b      	add	r3, r1
 80020e6:	333d      	adds	r3, #61	; 0x3d
 80020e8:	2201      	movs	r2, #1
 80020ea:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80020ec:	7bfa      	ldrb	r2, [r7, #15]
 80020ee:	6879      	ldr	r1, [r7, #4]
 80020f0:	4613      	mov	r3, r2
 80020f2:	00db      	lsls	r3, r3, #3
 80020f4:	1a9b      	subs	r3, r3, r2
 80020f6:	009b      	lsls	r3, r3, #2
 80020f8:	440b      	add	r3, r1
 80020fa:	333c      	adds	r3, #60	; 0x3c
 80020fc:	7bfa      	ldrb	r2, [r7, #15]
 80020fe:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002100:	7bfa      	ldrb	r2, [r7, #15]
 8002102:	7bfb      	ldrb	r3, [r7, #15]
 8002104:	b298      	uxth	r0, r3
 8002106:	6879      	ldr	r1, [r7, #4]
 8002108:	4613      	mov	r3, r2
 800210a:	00db      	lsls	r3, r3, #3
 800210c:	1a9b      	subs	r3, r3, r2
 800210e:	009b      	lsls	r3, r3, #2
 8002110:	440b      	add	r3, r1
 8002112:	3342      	adds	r3, #66	; 0x42
 8002114:	4602      	mov	r2, r0
 8002116:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002118:	7bfa      	ldrb	r2, [r7, #15]
 800211a:	6879      	ldr	r1, [r7, #4]
 800211c:	4613      	mov	r3, r2
 800211e:	00db      	lsls	r3, r3, #3
 8002120:	1a9b      	subs	r3, r3, r2
 8002122:	009b      	lsls	r3, r3, #2
 8002124:	440b      	add	r3, r1
 8002126:	333f      	adds	r3, #63	; 0x3f
 8002128:	2200      	movs	r2, #0
 800212a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800212c:	7bfa      	ldrb	r2, [r7, #15]
 800212e:	6879      	ldr	r1, [r7, #4]
 8002130:	4613      	mov	r3, r2
 8002132:	00db      	lsls	r3, r3, #3
 8002134:	1a9b      	subs	r3, r3, r2
 8002136:	009b      	lsls	r3, r3, #2
 8002138:	440b      	add	r3, r1
 800213a:	3344      	adds	r3, #68	; 0x44
 800213c:	2200      	movs	r2, #0
 800213e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002140:	7bfa      	ldrb	r2, [r7, #15]
 8002142:	6879      	ldr	r1, [r7, #4]
 8002144:	4613      	mov	r3, r2
 8002146:	00db      	lsls	r3, r3, #3
 8002148:	1a9b      	subs	r3, r3, r2
 800214a:	009b      	lsls	r3, r3, #2
 800214c:	440b      	add	r3, r1
 800214e:	3348      	adds	r3, #72	; 0x48
 8002150:	2200      	movs	r2, #0
 8002152:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002154:	7bfa      	ldrb	r2, [r7, #15]
 8002156:	6879      	ldr	r1, [r7, #4]
 8002158:	4613      	mov	r3, r2
 800215a:	00db      	lsls	r3, r3, #3
 800215c:	1a9b      	subs	r3, r3, r2
 800215e:	009b      	lsls	r3, r3, #2
 8002160:	440b      	add	r3, r1
 8002162:	3350      	adds	r3, #80	; 0x50
 8002164:	2200      	movs	r2, #0
 8002166:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002168:	7bfb      	ldrb	r3, [r7, #15]
 800216a:	3301      	adds	r3, #1
 800216c:	73fb      	strb	r3, [r7, #15]
 800216e:	7bfa      	ldrb	r2, [r7, #15]
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	685b      	ldr	r3, [r3, #4]
 8002174:	429a      	cmp	r2, r3
 8002176:	d3af      	bcc.n	80020d8 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002178:	2300      	movs	r3, #0
 800217a:	73fb      	strb	r3, [r7, #15]
 800217c:	e044      	b.n	8002208 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800217e:	7bfa      	ldrb	r2, [r7, #15]
 8002180:	6879      	ldr	r1, [r7, #4]
 8002182:	4613      	mov	r3, r2
 8002184:	00db      	lsls	r3, r3, #3
 8002186:	1a9b      	subs	r3, r3, r2
 8002188:	009b      	lsls	r3, r3, #2
 800218a:	440b      	add	r3, r1
 800218c:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8002190:	2200      	movs	r2, #0
 8002192:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002194:	7bfa      	ldrb	r2, [r7, #15]
 8002196:	6879      	ldr	r1, [r7, #4]
 8002198:	4613      	mov	r3, r2
 800219a:	00db      	lsls	r3, r3, #3
 800219c:	1a9b      	subs	r3, r3, r2
 800219e:	009b      	lsls	r3, r3, #2
 80021a0:	440b      	add	r3, r1
 80021a2:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80021a6:	7bfa      	ldrb	r2, [r7, #15]
 80021a8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80021aa:	7bfa      	ldrb	r2, [r7, #15]
 80021ac:	6879      	ldr	r1, [r7, #4]
 80021ae:	4613      	mov	r3, r2
 80021b0:	00db      	lsls	r3, r3, #3
 80021b2:	1a9b      	subs	r3, r3, r2
 80021b4:	009b      	lsls	r3, r3, #2
 80021b6:	440b      	add	r3, r1
 80021b8:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80021bc:	2200      	movs	r2, #0
 80021be:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80021c0:	7bfa      	ldrb	r2, [r7, #15]
 80021c2:	6879      	ldr	r1, [r7, #4]
 80021c4:	4613      	mov	r3, r2
 80021c6:	00db      	lsls	r3, r3, #3
 80021c8:	1a9b      	subs	r3, r3, r2
 80021ca:	009b      	lsls	r3, r3, #2
 80021cc:	440b      	add	r3, r1
 80021ce:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80021d2:	2200      	movs	r2, #0
 80021d4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80021d6:	7bfa      	ldrb	r2, [r7, #15]
 80021d8:	6879      	ldr	r1, [r7, #4]
 80021da:	4613      	mov	r3, r2
 80021dc:	00db      	lsls	r3, r3, #3
 80021de:	1a9b      	subs	r3, r3, r2
 80021e0:	009b      	lsls	r3, r3, #2
 80021e2:	440b      	add	r3, r1
 80021e4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80021e8:	2200      	movs	r2, #0
 80021ea:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80021ec:	7bfa      	ldrb	r2, [r7, #15]
 80021ee:	6879      	ldr	r1, [r7, #4]
 80021f0:	4613      	mov	r3, r2
 80021f2:	00db      	lsls	r3, r3, #3
 80021f4:	1a9b      	subs	r3, r3, r2
 80021f6:	009b      	lsls	r3, r3, #2
 80021f8:	440b      	add	r3, r1
 80021fa:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80021fe:	2200      	movs	r2, #0
 8002200:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002202:	7bfb      	ldrb	r3, [r7, #15]
 8002204:	3301      	adds	r3, #1
 8002206:	73fb      	strb	r3, [r7, #15]
 8002208:	7bfa      	ldrb	r2, [r7, #15]
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	685b      	ldr	r3, [r3, #4]
 800220e:	429a      	cmp	r2, r3
 8002210:	d3b5      	bcc.n	800217e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	603b      	str	r3, [r7, #0]
 8002218:	687e      	ldr	r6, [r7, #4]
 800221a:	466d      	mov	r5, sp
 800221c:	f106 0410 	add.w	r4, r6, #16
 8002220:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002222:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002224:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002226:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002228:	e894 0003 	ldmia.w	r4, {r0, r1}
 800222c:	e885 0003 	stmia.w	r5, {r0, r1}
 8002230:	1d33      	adds	r3, r6, #4
 8002232:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002234:	6838      	ldr	r0, [r7, #0]
 8002236:	f003 fa45 	bl	80056c4 <USB_DevInit>
 800223a:	4603      	mov	r3, r0
 800223c:	2b00      	cmp	r3, #0
 800223e:	d005      	beq.n	800224c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2202      	movs	r2, #2
 8002244:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002248:	2301      	movs	r3, #1
 800224a:	e00d      	b.n	8002268 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2200      	movs	r2, #0
 8002250:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2201      	movs	r2, #1
 8002258:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	4618      	mov	r0, r3
 8002262:	f004 fac1 	bl	80067e8 <USB_DevDisconnect>

  return HAL_OK;
 8002266:	2300      	movs	r3, #0
}
 8002268:	4618      	mov	r0, r3
 800226a:	3714      	adds	r7, #20
 800226c:	46bd      	mov	sp, r7
 800226e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002270 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b084      	sub	sp, #16
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002284:	2b01      	cmp	r3, #1
 8002286:	d101      	bne.n	800228c <HAL_PCD_Start+0x1c>
 8002288:	2302      	movs	r3, #2
 800228a:	e020      	b.n	80022ce <HAL_PCD_Start+0x5e>
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2201      	movs	r2, #1
 8002290:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002298:	2b01      	cmp	r3, #1
 800229a:	d109      	bne.n	80022b0 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80022a0:	2b01      	cmp	r3, #1
 80022a2:	d005      	beq.n	80022b0 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022a8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	4618      	mov	r0, r3
 80022b6:	f003 f997 	bl	80055e8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	4618      	mov	r0, r3
 80022c0:	f004 fa71 	bl	80067a6 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2200      	movs	r2, #0
 80022c8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80022cc:	2300      	movs	r3, #0
}
 80022ce:	4618      	mov	r0, r3
 80022d0:	3710      	adds	r7, #16
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bd80      	pop	{r7, pc}

080022d6 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80022d6:	b590      	push	{r4, r7, lr}
 80022d8:	b08d      	sub	sp, #52	; 0x34
 80022da:	af00      	add	r7, sp, #0
 80022dc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80022e4:	6a3b      	ldr	r3, [r7, #32]
 80022e6:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	4618      	mov	r0, r3
 80022ee:	f004 fb2f 	bl	8006950 <USB_GetMode>
 80022f2:	4603      	mov	r3, r0
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	f040 839d 	bne.w	8002a34 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	4618      	mov	r0, r3
 8002300:	f004 fa93 	bl	800682a <USB_ReadInterrupts>
 8002304:	4603      	mov	r3, r0
 8002306:	2b00      	cmp	r3, #0
 8002308:	f000 8393 	beq.w	8002a32 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	4618      	mov	r0, r3
 8002312:	f004 fa8a 	bl	800682a <USB_ReadInterrupts>
 8002316:	4603      	mov	r3, r0
 8002318:	f003 0302 	and.w	r3, r3, #2
 800231c:	2b02      	cmp	r3, #2
 800231e:	d107      	bne.n	8002330 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	695a      	ldr	r2, [r3, #20]
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f002 0202 	and.w	r2, r2, #2
 800232e:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	4618      	mov	r0, r3
 8002336:	f004 fa78 	bl	800682a <USB_ReadInterrupts>
 800233a:	4603      	mov	r3, r0
 800233c:	f003 0310 	and.w	r3, r3, #16
 8002340:	2b10      	cmp	r3, #16
 8002342:	d161      	bne.n	8002408 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	699a      	ldr	r2, [r3, #24]
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f022 0210 	bic.w	r2, r2, #16
 8002352:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8002354:	6a3b      	ldr	r3, [r7, #32]
 8002356:	6a1b      	ldr	r3, [r3, #32]
 8002358:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 800235a:	69bb      	ldr	r3, [r7, #24]
 800235c:	f003 020f 	and.w	r2, r3, #15
 8002360:	4613      	mov	r3, r2
 8002362:	00db      	lsls	r3, r3, #3
 8002364:	1a9b      	subs	r3, r3, r2
 8002366:	009b      	lsls	r3, r3, #2
 8002368:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800236c:	687a      	ldr	r2, [r7, #4]
 800236e:	4413      	add	r3, r2
 8002370:	3304      	adds	r3, #4
 8002372:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002374:	69bb      	ldr	r3, [r7, #24]
 8002376:	0c5b      	lsrs	r3, r3, #17
 8002378:	f003 030f 	and.w	r3, r3, #15
 800237c:	2b02      	cmp	r3, #2
 800237e:	d124      	bne.n	80023ca <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002380:	69ba      	ldr	r2, [r7, #24]
 8002382:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002386:	4013      	ands	r3, r2
 8002388:	2b00      	cmp	r3, #0
 800238a:	d035      	beq.n	80023f8 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800238c:	697b      	ldr	r3, [r7, #20]
 800238e:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002390:	69bb      	ldr	r3, [r7, #24]
 8002392:	091b      	lsrs	r3, r3, #4
 8002394:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002396:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800239a:	b29b      	uxth	r3, r3
 800239c:	461a      	mov	r2, r3
 800239e:	6a38      	ldr	r0, [r7, #32]
 80023a0:	f004 f8af 	bl	8006502 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80023a4:	697b      	ldr	r3, [r7, #20]
 80023a6:	68da      	ldr	r2, [r3, #12]
 80023a8:	69bb      	ldr	r3, [r7, #24]
 80023aa:	091b      	lsrs	r3, r3, #4
 80023ac:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80023b0:	441a      	add	r2, r3
 80023b2:	697b      	ldr	r3, [r7, #20]
 80023b4:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80023b6:	697b      	ldr	r3, [r7, #20]
 80023b8:	699a      	ldr	r2, [r3, #24]
 80023ba:	69bb      	ldr	r3, [r7, #24]
 80023bc:	091b      	lsrs	r3, r3, #4
 80023be:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80023c2:	441a      	add	r2, r3
 80023c4:	697b      	ldr	r3, [r7, #20]
 80023c6:	619a      	str	r2, [r3, #24]
 80023c8:	e016      	b.n	80023f8 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 80023ca:	69bb      	ldr	r3, [r7, #24]
 80023cc:	0c5b      	lsrs	r3, r3, #17
 80023ce:	f003 030f 	and.w	r3, r3, #15
 80023d2:	2b06      	cmp	r3, #6
 80023d4:	d110      	bne.n	80023f8 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80023dc:	2208      	movs	r2, #8
 80023de:	4619      	mov	r1, r3
 80023e0:	6a38      	ldr	r0, [r7, #32]
 80023e2:	f004 f88e 	bl	8006502 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80023e6:	697b      	ldr	r3, [r7, #20]
 80023e8:	699a      	ldr	r2, [r3, #24]
 80023ea:	69bb      	ldr	r3, [r7, #24]
 80023ec:	091b      	lsrs	r3, r3, #4
 80023ee:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80023f2:	441a      	add	r2, r3
 80023f4:	697b      	ldr	r3, [r7, #20]
 80023f6:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	699a      	ldr	r2, [r3, #24]
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f042 0210 	orr.w	r2, r2, #16
 8002406:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4618      	mov	r0, r3
 800240e:	f004 fa0c 	bl	800682a <USB_ReadInterrupts>
 8002412:	4603      	mov	r3, r0
 8002414:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002418:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800241c:	d16e      	bne.n	80024fc <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 800241e:	2300      	movs	r3, #0
 8002420:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	4618      	mov	r0, r3
 8002428:	f004 fa12 	bl	8006850 <USB_ReadDevAllOutEpInterrupt>
 800242c:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800242e:	e062      	b.n	80024f6 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002430:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002432:	f003 0301 	and.w	r3, r3, #1
 8002436:	2b00      	cmp	r3, #0
 8002438:	d057      	beq.n	80024ea <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002440:	b2d2      	uxtb	r2, r2
 8002442:	4611      	mov	r1, r2
 8002444:	4618      	mov	r0, r3
 8002446:	f004 fa37 	bl	80068b8 <USB_ReadDevOutEPInterrupt>
 800244a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800244c:	693b      	ldr	r3, [r7, #16]
 800244e:	f003 0301 	and.w	r3, r3, #1
 8002452:	2b00      	cmp	r3, #0
 8002454:	d00c      	beq.n	8002470 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002458:	015a      	lsls	r2, r3, #5
 800245a:	69fb      	ldr	r3, [r7, #28]
 800245c:	4413      	add	r3, r2
 800245e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002462:	461a      	mov	r2, r3
 8002464:	2301      	movs	r3, #1
 8002466:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002468:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800246a:	6878      	ldr	r0, [r7, #4]
 800246c:	f000 fdb0 	bl	8002fd0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002470:	693b      	ldr	r3, [r7, #16]
 8002472:	f003 0308 	and.w	r3, r3, #8
 8002476:	2b00      	cmp	r3, #0
 8002478:	d00c      	beq.n	8002494 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800247a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800247c:	015a      	lsls	r2, r3, #5
 800247e:	69fb      	ldr	r3, [r7, #28]
 8002480:	4413      	add	r3, r2
 8002482:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002486:	461a      	mov	r2, r3
 8002488:	2308      	movs	r3, #8
 800248a:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800248c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800248e:	6878      	ldr	r0, [r7, #4]
 8002490:	f000 feaa 	bl	80031e8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002494:	693b      	ldr	r3, [r7, #16]
 8002496:	f003 0310 	and.w	r3, r3, #16
 800249a:	2b00      	cmp	r3, #0
 800249c:	d008      	beq.n	80024b0 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800249e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024a0:	015a      	lsls	r2, r3, #5
 80024a2:	69fb      	ldr	r3, [r7, #28]
 80024a4:	4413      	add	r3, r2
 80024a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80024aa:	461a      	mov	r2, r3
 80024ac:	2310      	movs	r3, #16
 80024ae:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80024b0:	693b      	ldr	r3, [r7, #16]
 80024b2:	f003 0320 	and.w	r3, r3, #32
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d008      	beq.n	80024cc <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80024ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024bc:	015a      	lsls	r2, r3, #5
 80024be:	69fb      	ldr	r3, [r7, #28]
 80024c0:	4413      	add	r3, r2
 80024c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80024c6:	461a      	mov	r2, r3
 80024c8:	2320      	movs	r3, #32
 80024ca:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80024cc:	693b      	ldr	r3, [r7, #16]
 80024ce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d009      	beq.n	80024ea <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80024d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024d8:	015a      	lsls	r2, r3, #5
 80024da:	69fb      	ldr	r3, [r7, #28]
 80024dc:	4413      	add	r3, r2
 80024de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80024e2:	461a      	mov	r2, r3
 80024e4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80024e8:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80024ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ec:	3301      	adds	r3, #1
 80024ee:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80024f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024f2:	085b      	lsrs	r3, r3, #1
 80024f4:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80024f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d199      	bne.n	8002430 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	4618      	mov	r0, r3
 8002502:	f004 f992 	bl	800682a <USB_ReadInterrupts>
 8002506:	4603      	mov	r3, r0
 8002508:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800250c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002510:	f040 80c0 	bne.w	8002694 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	4618      	mov	r0, r3
 800251a:	f004 f9b3 	bl	8006884 <USB_ReadDevAllInEpInterrupt>
 800251e:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002520:	2300      	movs	r3, #0
 8002522:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002524:	e0b2      	b.n	800268c <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002526:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002528:	f003 0301 	and.w	r3, r3, #1
 800252c:	2b00      	cmp	r3, #0
 800252e:	f000 80a7 	beq.w	8002680 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002538:	b2d2      	uxtb	r2, r2
 800253a:	4611      	mov	r1, r2
 800253c:	4618      	mov	r0, r3
 800253e:	f004 f9d9 	bl	80068f4 <USB_ReadDevInEPInterrupt>
 8002542:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002544:	693b      	ldr	r3, [r7, #16]
 8002546:	f003 0301 	and.w	r3, r3, #1
 800254a:	2b00      	cmp	r3, #0
 800254c:	d057      	beq.n	80025fe <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800254e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002550:	f003 030f 	and.w	r3, r3, #15
 8002554:	2201      	movs	r2, #1
 8002556:	fa02 f303 	lsl.w	r3, r2, r3
 800255a:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800255c:	69fb      	ldr	r3, [r7, #28]
 800255e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002562:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	43db      	mvns	r3, r3
 8002568:	69f9      	ldr	r1, [r7, #28]
 800256a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800256e:	4013      	ands	r3, r2
 8002570:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002574:	015a      	lsls	r2, r3, #5
 8002576:	69fb      	ldr	r3, [r7, #28]
 8002578:	4413      	add	r3, r2
 800257a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800257e:	461a      	mov	r2, r3
 8002580:	2301      	movs	r3, #1
 8002582:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	691b      	ldr	r3, [r3, #16]
 8002588:	2b01      	cmp	r3, #1
 800258a:	d132      	bne.n	80025f2 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800258c:	6879      	ldr	r1, [r7, #4]
 800258e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002590:	4613      	mov	r3, r2
 8002592:	00db      	lsls	r3, r3, #3
 8002594:	1a9b      	subs	r3, r3, r2
 8002596:	009b      	lsls	r3, r3, #2
 8002598:	440b      	add	r3, r1
 800259a:	3348      	adds	r3, #72	; 0x48
 800259c:	6819      	ldr	r1, [r3, #0]
 800259e:	6878      	ldr	r0, [r7, #4]
 80025a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025a2:	4613      	mov	r3, r2
 80025a4:	00db      	lsls	r3, r3, #3
 80025a6:	1a9b      	subs	r3, r3, r2
 80025a8:	009b      	lsls	r3, r3, #2
 80025aa:	4403      	add	r3, r0
 80025ac:	3344      	adds	r3, #68	; 0x44
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	4419      	add	r1, r3
 80025b2:	6878      	ldr	r0, [r7, #4]
 80025b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025b6:	4613      	mov	r3, r2
 80025b8:	00db      	lsls	r3, r3, #3
 80025ba:	1a9b      	subs	r3, r3, r2
 80025bc:	009b      	lsls	r3, r3, #2
 80025be:	4403      	add	r3, r0
 80025c0:	3348      	adds	r3, #72	; 0x48
 80025c2:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80025c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d113      	bne.n	80025f2 <HAL_PCD_IRQHandler+0x31c>
 80025ca:	6879      	ldr	r1, [r7, #4]
 80025cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025ce:	4613      	mov	r3, r2
 80025d0:	00db      	lsls	r3, r3, #3
 80025d2:	1a9b      	subs	r3, r3, r2
 80025d4:	009b      	lsls	r3, r3, #2
 80025d6:	440b      	add	r3, r1
 80025d8:	3350      	adds	r3, #80	; 0x50
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d108      	bne.n	80025f2 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6818      	ldr	r0, [r3, #0]
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80025ea:	461a      	mov	r2, r3
 80025ec:	2101      	movs	r1, #1
 80025ee:	f004 f9e1 	bl	80069b4 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80025f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025f4:	b2db      	uxtb	r3, r3
 80025f6:	4619      	mov	r1, r3
 80025f8:	6878      	ldr	r0, [r7, #4]
 80025fa:	f006 fa8c 	bl	8008b16 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80025fe:	693b      	ldr	r3, [r7, #16]
 8002600:	f003 0308 	and.w	r3, r3, #8
 8002604:	2b00      	cmp	r3, #0
 8002606:	d008      	beq.n	800261a <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800260a:	015a      	lsls	r2, r3, #5
 800260c:	69fb      	ldr	r3, [r7, #28]
 800260e:	4413      	add	r3, r2
 8002610:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002614:	461a      	mov	r2, r3
 8002616:	2308      	movs	r3, #8
 8002618:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800261a:	693b      	ldr	r3, [r7, #16]
 800261c:	f003 0310 	and.w	r3, r3, #16
 8002620:	2b00      	cmp	r3, #0
 8002622:	d008      	beq.n	8002636 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002626:	015a      	lsls	r2, r3, #5
 8002628:	69fb      	ldr	r3, [r7, #28]
 800262a:	4413      	add	r3, r2
 800262c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002630:	461a      	mov	r2, r3
 8002632:	2310      	movs	r3, #16
 8002634:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002636:	693b      	ldr	r3, [r7, #16]
 8002638:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800263c:	2b00      	cmp	r3, #0
 800263e:	d008      	beq.n	8002652 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002642:	015a      	lsls	r2, r3, #5
 8002644:	69fb      	ldr	r3, [r7, #28]
 8002646:	4413      	add	r3, r2
 8002648:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800264c:	461a      	mov	r2, r3
 800264e:	2340      	movs	r3, #64	; 0x40
 8002650:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002652:	693b      	ldr	r3, [r7, #16]
 8002654:	f003 0302 	and.w	r3, r3, #2
 8002658:	2b00      	cmp	r3, #0
 800265a:	d008      	beq.n	800266e <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800265c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800265e:	015a      	lsls	r2, r3, #5
 8002660:	69fb      	ldr	r3, [r7, #28]
 8002662:	4413      	add	r3, r2
 8002664:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002668:	461a      	mov	r2, r3
 800266a:	2302      	movs	r3, #2
 800266c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800266e:	693b      	ldr	r3, [r7, #16]
 8002670:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002674:	2b00      	cmp	r3, #0
 8002676:	d003      	beq.n	8002680 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002678:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800267a:	6878      	ldr	r0, [r7, #4]
 800267c:	f000 fc1b 	bl	8002eb6 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002682:	3301      	adds	r3, #1
 8002684:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002686:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002688:	085b      	lsrs	r3, r3, #1
 800268a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800268c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800268e:	2b00      	cmp	r3, #0
 8002690:	f47f af49 	bne.w	8002526 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	4618      	mov	r0, r3
 800269a:	f004 f8c6 	bl	800682a <USB_ReadInterrupts>
 800269e:	4603      	mov	r3, r0
 80026a0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80026a4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80026a8:	d122      	bne.n	80026f0 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80026aa:	69fb      	ldr	r3, [r7, #28]
 80026ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80026b0:	685b      	ldr	r3, [r3, #4]
 80026b2:	69fa      	ldr	r2, [r7, #28]
 80026b4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80026b8:	f023 0301 	bic.w	r3, r3, #1
 80026bc:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 80026c4:	2b01      	cmp	r3, #1
 80026c6:	d108      	bne.n	80026da <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	2200      	movs	r2, #0
 80026cc:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80026d0:	2100      	movs	r1, #0
 80026d2:	6878      	ldr	r0, [r7, #4]
 80026d4:	f000 fe26 	bl	8003324 <HAL_PCDEx_LPM_Callback>
 80026d8:	e002      	b.n	80026e0 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80026da:	6878      	ldr	r0, [r7, #4]
 80026dc:	f006 fa88 	bl	8008bf0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	695a      	ldr	r2, [r3, #20]
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80026ee:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	4618      	mov	r0, r3
 80026f6:	f004 f898 	bl	800682a <USB_ReadInterrupts>
 80026fa:	4603      	mov	r3, r0
 80026fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002700:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002704:	d112      	bne.n	800272c <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002706:	69fb      	ldr	r3, [r7, #28]
 8002708:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800270c:	689b      	ldr	r3, [r3, #8]
 800270e:	f003 0301 	and.w	r3, r3, #1
 8002712:	2b01      	cmp	r3, #1
 8002714:	d102      	bne.n	800271c <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002716:	6878      	ldr	r0, [r7, #4]
 8002718:	f006 fa44 	bl	8008ba4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	695a      	ldr	r2, [r3, #20]
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800272a:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	4618      	mov	r0, r3
 8002732:	f004 f87a 	bl	800682a <USB_ReadInterrupts>
 8002736:	4603      	mov	r3, r0
 8002738:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800273c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002740:	f040 80c7 	bne.w	80028d2 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002744:	69fb      	ldr	r3, [r7, #28]
 8002746:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800274a:	685b      	ldr	r3, [r3, #4]
 800274c:	69fa      	ldr	r2, [r7, #28]
 800274e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002752:	f023 0301 	bic.w	r3, r3, #1
 8002756:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	2110      	movs	r1, #16
 800275e:	4618      	mov	r0, r3
 8002760:	f003 f914 	bl	800598c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002764:	2300      	movs	r3, #0
 8002766:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002768:	e056      	b.n	8002818 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800276a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800276c:	015a      	lsls	r2, r3, #5
 800276e:	69fb      	ldr	r3, [r7, #28]
 8002770:	4413      	add	r3, r2
 8002772:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002776:	461a      	mov	r2, r3
 8002778:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800277c:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800277e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002780:	015a      	lsls	r2, r3, #5
 8002782:	69fb      	ldr	r3, [r7, #28]
 8002784:	4413      	add	r3, r2
 8002786:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800278e:	0151      	lsls	r1, r2, #5
 8002790:	69fa      	ldr	r2, [r7, #28]
 8002792:	440a      	add	r2, r1
 8002794:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002798:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800279c:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800279e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027a0:	015a      	lsls	r2, r3, #5
 80027a2:	69fb      	ldr	r3, [r7, #28]
 80027a4:	4413      	add	r3, r2
 80027a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80027ae:	0151      	lsls	r1, r2, #5
 80027b0:	69fa      	ldr	r2, [r7, #28]
 80027b2:	440a      	add	r2, r1
 80027b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80027b8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80027bc:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80027be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027c0:	015a      	lsls	r2, r3, #5
 80027c2:	69fb      	ldr	r3, [r7, #28]
 80027c4:	4413      	add	r3, r2
 80027c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80027ca:	461a      	mov	r2, r3
 80027cc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80027d0:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80027d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027d4:	015a      	lsls	r2, r3, #5
 80027d6:	69fb      	ldr	r3, [r7, #28]
 80027d8:	4413      	add	r3, r2
 80027da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80027e2:	0151      	lsls	r1, r2, #5
 80027e4:	69fa      	ldr	r2, [r7, #28]
 80027e6:	440a      	add	r2, r1
 80027e8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80027ec:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80027f0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80027f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027f4:	015a      	lsls	r2, r3, #5
 80027f6:	69fb      	ldr	r3, [r7, #28]
 80027f8:	4413      	add	r3, r2
 80027fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002802:	0151      	lsls	r1, r2, #5
 8002804:	69fa      	ldr	r2, [r7, #28]
 8002806:	440a      	add	r2, r1
 8002808:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800280c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002810:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002812:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002814:	3301      	adds	r3, #1
 8002816:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800281e:	429a      	cmp	r2, r3
 8002820:	d3a3      	bcc.n	800276a <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002822:	69fb      	ldr	r3, [r7, #28]
 8002824:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002828:	69db      	ldr	r3, [r3, #28]
 800282a:	69fa      	ldr	r2, [r7, #28]
 800282c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002830:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002834:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800283a:	2b00      	cmp	r3, #0
 800283c:	d016      	beq.n	800286c <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800283e:	69fb      	ldr	r3, [r7, #28]
 8002840:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002844:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002848:	69fa      	ldr	r2, [r7, #28]
 800284a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800284e:	f043 030b 	orr.w	r3, r3, #11
 8002852:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002856:	69fb      	ldr	r3, [r7, #28]
 8002858:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800285c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800285e:	69fa      	ldr	r2, [r7, #28]
 8002860:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002864:	f043 030b 	orr.w	r3, r3, #11
 8002868:	6453      	str	r3, [r2, #68]	; 0x44
 800286a:	e015      	b.n	8002898 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800286c:	69fb      	ldr	r3, [r7, #28]
 800286e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002872:	695b      	ldr	r3, [r3, #20]
 8002874:	69fa      	ldr	r2, [r7, #28]
 8002876:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800287a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800287e:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8002882:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002884:	69fb      	ldr	r3, [r7, #28]
 8002886:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800288a:	691b      	ldr	r3, [r3, #16]
 800288c:	69fa      	ldr	r2, [r7, #28]
 800288e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002892:	f043 030b 	orr.w	r3, r3, #11
 8002896:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002898:	69fb      	ldr	r3, [r7, #28]
 800289a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	69fa      	ldr	r2, [r7, #28]
 80028a2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80028a6:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80028aa:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6818      	ldr	r0, [r3, #0]
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	691b      	ldr	r3, [r3, #16]
 80028b4:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80028bc:	461a      	mov	r2, r3
 80028be:	f004 f879 	bl	80069b4 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	695a      	ldr	r2, [r3, #20]
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80028d0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	4618      	mov	r0, r3
 80028d8:	f003 ffa7 	bl	800682a <USB_ReadInterrupts>
 80028dc:	4603      	mov	r3, r0
 80028de:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80028e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80028e6:	d124      	bne.n	8002932 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4618      	mov	r0, r3
 80028ee:	f004 f83d 	bl	800696c <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4618      	mov	r0, r3
 80028f8:	f003 f8a5 	bl	8005a46 <USB_GetDevSpeed>
 80028fc:	4603      	mov	r3, r0
 80028fe:	461a      	mov	r2, r3
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681c      	ldr	r4, [r3, #0]
 8002908:	f001 f93c 	bl	8003b84 <HAL_RCC_GetHCLKFreq>
 800290c:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002912:	b2db      	uxtb	r3, r3
 8002914:	461a      	mov	r2, r3
 8002916:	4620      	mov	r0, r4
 8002918:	f002 fdc4 	bl	80054a4 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800291c:	6878      	ldr	r0, [r7, #4]
 800291e:	f006 f922 	bl	8008b66 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	695a      	ldr	r2, [r3, #20]
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002930:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	4618      	mov	r0, r3
 8002938:	f003 ff77 	bl	800682a <USB_ReadInterrupts>
 800293c:	4603      	mov	r3, r0
 800293e:	f003 0308 	and.w	r3, r3, #8
 8002942:	2b08      	cmp	r3, #8
 8002944:	d10a      	bne.n	800295c <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002946:	6878      	ldr	r0, [r7, #4]
 8002948:	f006 f8ff 	bl	8008b4a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	695a      	ldr	r2, [r3, #20]
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f002 0208 	and.w	r2, r2, #8
 800295a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4618      	mov	r0, r3
 8002962:	f003 ff62 	bl	800682a <USB_ReadInterrupts>
 8002966:	4603      	mov	r3, r0
 8002968:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800296c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002970:	d10f      	bne.n	8002992 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8002972:	2300      	movs	r3, #0
 8002974:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002978:	b2db      	uxtb	r3, r3
 800297a:	4619      	mov	r1, r3
 800297c:	6878      	ldr	r0, [r7, #4]
 800297e:	f006 f957 	bl	8008c30 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	695a      	ldr	r2, [r3, #20]
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002990:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	4618      	mov	r0, r3
 8002998:	f003 ff47 	bl	800682a <USB_ReadInterrupts>
 800299c:	4603      	mov	r3, r0
 800299e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80029a2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80029a6:	d10f      	bne.n	80029c8 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80029a8:	2300      	movs	r3, #0
 80029aa:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80029ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ae:	b2db      	uxtb	r3, r3
 80029b0:	4619      	mov	r1, r3
 80029b2:	6878      	ldr	r0, [r7, #4]
 80029b4:	f006 f92a 	bl	8008c0c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	695a      	ldr	r2, [r3, #20]
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80029c6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4618      	mov	r0, r3
 80029ce:	f003 ff2c 	bl	800682a <USB_ReadInterrupts>
 80029d2:	4603      	mov	r3, r0
 80029d4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80029d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029dc:	d10a      	bne.n	80029f4 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80029de:	6878      	ldr	r0, [r7, #4]
 80029e0:	f006 f938 	bl	8008c54 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	695a      	ldr	r2, [r3, #20]
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80029f2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	4618      	mov	r0, r3
 80029fa:	f003 ff16 	bl	800682a <USB_ReadInterrupts>
 80029fe:	4603      	mov	r3, r0
 8002a00:	f003 0304 	and.w	r3, r3, #4
 8002a04:	2b04      	cmp	r3, #4
 8002a06:	d115      	bne.n	8002a34 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	685b      	ldr	r3, [r3, #4]
 8002a0e:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002a10:	69bb      	ldr	r3, [r7, #24]
 8002a12:	f003 0304 	and.w	r3, r3, #4
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d002      	beq.n	8002a20 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002a1a:	6878      	ldr	r0, [r7, #4]
 8002a1c:	f006 f928 	bl	8008c70 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	6859      	ldr	r1, [r3, #4]
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	69ba      	ldr	r2, [r7, #24]
 8002a2c:	430a      	orrs	r2, r1
 8002a2e:	605a      	str	r2, [r3, #4]
 8002a30:	e000      	b.n	8002a34 <HAL_PCD_IRQHandler+0x75e>
      return;
 8002a32:	bf00      	nop
    }
  }
}
 8002a34:	3734      	adds	r7, #52	; 0x34
 8002a36:	46bd      	mov	sp, r7
 8002a38:	bd90      	pop	{r4, r7, pc}

08002a3a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002a3a:	b580      	push	{r7, lr}
 8002a3c:	b082      	sub	sp, #8
 8002a3e:	af00      	add	r7, sp, #0
 8002a40:	6078      	str	r0, [r7, #4]
 8002a42:	460b      	mov	r3, r1
 8002a44:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002a4c:	2b01      	cmp	r3, #1
 8002a4e:	d101      	bne.n	8002a54 <HAL_PCD_SetAddress+0x1a>
 8002a50:	2302      	movs	r3, #2
 8002a52:	e013      	b.n	8002a7c <HAL_PCD_SetAddress+0x42>
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2201      	movs	r2, #1
 8002a58:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	78fa      	ldrb	r2, [r7, #3]
 8002a60:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	78fa      	ldrb	r2, [r7, #3]
 8002a6a:	4611      	mov	r1, r2
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	f003 fe74 	bl	800675a <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	2200      	movs	r2, #0
 8002a76:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002a7a:	2300      	movs	r3, #0
}
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	3708      	adds	r7, #8
 8002a80:	46bd      	mov	sp, r7
 8002a82:	bd80      	pop	{r7, pc}

08002a84 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b084      	sub	sp, #16
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
 8002a8c:	4608      	mov	r0, r1
 8002a8e:	4611      	mov	r1, r2
 8002a90:	461a      	mov	r2, r3
 8002a92:	4603      	mov	r3, r0
 8002a94:	70fb      	strb	r3, [r7, #3]
 8002a96:	460b      	mov	r3, r1
 8002a98:	803b      	strh	r3, [r7, #0]
 8002a9a:	4613      	mov	r3, r2
 8002a9c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002aa2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	da0f      	bge.n	8002aca <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002aaa:	78fb      	ldrb	r3, [r7, #3]
 8002aac:	f003 020f 	and.w	r2, r3, #15
 8002ab0:	4613      	mov	r3, r2
 8002ab2:	00db      	lsls	r3, r3, #3
 8002ab4:	1a9b      	subs	r3, r3, r2
 8002ab6:	009b      	lsls	r3, r3, #2
 8002ab8:	3338      	adds	r3, #56	; 0x38
 8002aba:	687a      	ldr	r2, [r7, #4]
 8002abc:	4413      	add	r3, r2
 8002abe:	3304      	adds	r3, #4
 8002ac0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	2201      	movs	r2, #1
 8002ac6:	705a      	strb	r2, [r3, #1]
 8002ac8:	e00f      	b.n	8002aea <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002aca:	78fb      	ldrb	r3, [r7, #3]
 8002acc:	f003 020f 	and.w	r2, r3, #15
 8002ad0:	4613      	mov	r3, r2
 8002ad2:	00db      	lsls	r3, r3, #3
 8002ad4:	1a9b      	subs	r3, r3, r2
 8002ad6:	009b      	lsls	r3, r3, #2
 8002ad8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002adc:	687a      	ldr	r2, [r7, #4]
 8002ade:	4413      	add	r3, r2
 8002ae0:	3304      	adds	r3, #4
 8002ae2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002aea:	78fb      	ldrb	r3, [r7, #3]
 8002aec:	f003 030f 	and.w	r3, r3, #15
 8002af0:	b2da      	uxtb	r2, r3
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002af6:	883a      	ldrh	r2, [r7, #0]
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	78ba      	ldrb	r2, [r7, #2]
 8002b00:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	785b      	ldrb	r3, [r3, #1]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d004      	beq.n	8002b14 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	781b      	ldrb	r3, [r3, #0]
 8002b0e:	b29a      	uxth	r2, r3
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002b14:	78bb      	ldrb	r3, [r7, #2]
 8002b16:	2b02      	cmp	r3, #2
 8002b18:	d102      	bne.n	8002b20 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002b26:	2b01      	cmp	r3, #1
 8002b28:	d101      	bne.n	8002b2e <HAL_PCD_EP_Open+0xaa>
 8002b2a:	2302      	movs	r3, #2
 8002b2c:	e00e      	b.n	8002b4c <HAL_PCD_EP_Open+0xc8>
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	2201      	movs	r2, #1
 8002b32:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	68f9      	ldr	r1, [r7, #12]
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	f002 ffa7 	bl	8005a90 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	2200      	movs	r2, #0
 8002b46:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8002b4a:	7afb      	ldrb	r3, [r7, #11]
}
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	3710      	adds	r7, #16
 8002b50:	46bd      	mov	sp, r7
 8002b52:	bd80      	pop	{r7, pc}

08002b54 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b084      	sub	sp, #16
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
 8002b5c:	460b      	mov	r3, r1
 8002b5e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002b60:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	da0f      	bge.n	8002b88 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002b68:	78fb      	ldrb	r3, [r7, #3]
 8002b6a:	f003 020f 	and.w	r2, r3, #15
 8002b6e:	4613      	mov	r3, r2
 8002b70:	00db      	lsls	r3, r3, #3
 8002b72:	1a9b      	subs	r3, r3, r2
 8002b74:	009b      	lsls	r3, r3, #2
 8002b76:	3338      	adds	r3, #56	; 0x38
 8002b78:	687a      	ldr	r2, [r7, #4]
 8002b7a:	4413      	add	r3, r2
 8002b7c:	3304      	adds	r3, #4
 8002b7e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	2201      	movs	r2, #1
 8002b84:	705a      	strb	r2, [r3, #1]
 8002b86:	e00f      	b.n	8002ba8 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002b88:	78fb      	ldrb	r3, [r7, #3]
 8002b8a:	f003 020f 	and.w	r2, r3, #15
 8002b8e:	4613      	mov	r3, r2
 8002b90:	00db      	lsls	r3, r3, #3
 8002b92:	1a9b      	subs	r3, r3, r2
 8002b94:	009b      	lsls	r3, r3, #2
 8002b96:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002b9a:	687a      	ldr	r2, [r7, #4]
 8002b9c:	4413      	add	r3, r2
 8002b9e:	3304      	adds	r3, #4
 8002ba0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002ba8:	78fb      	ldrb	r3, [r7, #3]
 8002baa:	f003 030f 	and.w	r3, r3, #15
 8002bae:	b2da      	uxtb	r2, r3
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002bba:	2b01      	cmp	r3, #1
 8002bbc:	d101      	bne.n	8002bc2 <HAL_PCD_EP_Close+0x6e>
 8002bbe:	2302      	movs	r3, #2
 8002bc0:	e00e      	b.n	8002be0 <HAL_PCD_EP_Close+0x8c>
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	2201      	movs	r2, #1
 8002bc6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	68f9      	ldr	r1, [r7, #12]
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	f002 ffe5 	bl	8005ba0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	2200      	movs	r2, #0
 8002bda:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8002bde:	2300      	movs	r3, #0
}
 8002be0:	4618      	mov	r0, r3
 8002be2:	3710      	adds	r7, #16
 8002be4:	46bd      	mov	sp, r7
 8002be6:	bd80      	pop	{r7, pc}

08002be8 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b086      	sub	sp, #24
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	60f8      	str	r0, [r7, #12]
 8002bf0:	607a      	str	r2, [r7, #4]
 8002bf2:	603b      	str	r3, [r7, #0]
 8002bf4:	460b      	mov	r3, r1
 8002bf6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002bf8:	7afb      	ldrb	r3, [r7, #11]
 8002bfa:	f003 020f 	and.w	r2, r3, #15
 8002bfe:	4613      	mov	r3, r2
 8002c00:	00db      	lsls	r3, r3, #3
 8002c02:	1a9b      	subs	r3, r3, r2
 8002c04:	009b      	lsls	r3, r3, #2
 8002c06:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002c0a:	68fa      	ldr	r2, [r7, #12]
 8002c0c:	4413      	add	r3, r2
 8002c0e:	3304      	adds	r3, #4
 8002c10:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002c12:	697b      	ldr	r3, [r7, #20]
 8002c14:	687a      	ldr	r2, [r7, #4]
 8002c16:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002c18:	697b      	ldr	r3, [r7, #20]
 8002c1a:	683a      	ldr	r2, [r7, #0]
 8002c1c:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8002c1e:	697b      	ldr	r3, [r7, #20]
 8002c20:	2200      	movs	r2, #0
 8002c22:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8002c24:	697b      	ldr	r3, [r7, #20]
 8002c26:	2200      	movs	r2, #0
 8002c28:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002c2a:	7afb      	ldrb	r3, [r7, #11]
 8002c2c:	f003 030f 	and.w	r3, r3, #15
 8002c30:	b2da      	uxtb	r2, r3
 8002c32:	697b      	ldr	r3, [r7, #20]
 8002c34:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	691b      	ldr	r3, [r3, #16]
 8002c3a:	2b01      	cmp	r3, #1
 8002c3c:	d102      	bne.n	8002c44 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002c3e:	687a      	ldr	r2, [r7, #4]
 8002c40:	697b      	ldr	r3, [r7, #20]
 8002c42:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002c44:	7afb      	ldrb	r3, [r7, #11]
 8002c46:	f003 030f 	and.w	r3, r3, #15
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d109      	bne.n	8002c62 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	6818      	ldr	r0, [r3, #0]
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	691b      	ldr	r3, [r3, #16]
 8002c56:	b2db      	uxtb	r3, r3
 8002c58:	461a      	mov	r2, r3
 8002c5a:	6979      	ldr	r1, [r7, #20]
 8002c5c:	f003 fac0 	bl	80061e0 <USB_EP0StartXfer>
 8002c60:	e008      	b.n	8002c74 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	6818      	ldr	r0, [r3, #0]
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	691b      	ldr	r3, [r3, #16]
 8002c6a:	b2db      	uxtb	r3, r3
 8002c6c:	461a      	mov	r2, r3
 8002c6e:	6979      	ldr	r1, [r7, #20]
 8002c70:	f003 f872 	bl	8005d58 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002c74:	2300      	movs	r3, #0
}
 8002c76:	4618      	mov	r0, r3
 8002c78:	3718      	adds	r7, #24
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	bd80      	pop	{r7, pc}

08002c7e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002c7e:	b480      	push	{r7}
 8002c80:	b083      	sub	sp, #12
 8002c82:	af00      	add	r7, sp, #0
 8002c84:	6078      	str	r0, [r7, #4]
 8002c86:	460b      	mov	r3, r1
 8002c88:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002c8a:	78fb      	ldrb	r3, [r7, #3]
 8002c8c:	f003 020f 	and.w	r2, r3, #15
 8002c90:	6879      	ldr	r1, [r7, #4]
 8002c92:	4613      	mov	r3, r2
 8002c94:	00db      	lsls	r3, r3, #3
 8002c96:	1a9b      	subs	r3, r3, r2
 8002c98:	009b      	lsls	r3, r3, #2
 8002c9a:	440b      	add	r3, r1
 8002c9c:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8002ca0:	681b      	ldr	r3, [r3, #0]
}
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	370c      	adds	r7, #12
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cac:	4770      	bx	lr

08002cae <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002cae:	b580      	push	{r7, lr}
 8002cb0:	b086      	sub	sp, #24
 8002cb2:	af00      	add	r7, sp, #0
 8002cb4:	60f8      	str	r0, [r7, #12]
 8002cb6:	607a      	str	r2, [r7, #4]
 8002cb8:	603b      	str	r3, [r7, #0]
 8002cba:	460b      	mov	r3, r1
 8002cbc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002cbe:	7afb      	ldrb	r3, [r7, #11]
 8002cc0:	f003 020f 	and.w	r2, r3, #15
 8002cc4:	4613      	mov	r3, r2
 8002cc6:	00db      	lsls	r3, r3, #3
 8002cc8:	1a9b      	subs	r3, r3, r2
 8002cca:	009b      	lsls	r3, r3, #2
 8002ccc:	3338      	adds	r3, #56	; 0x38
 8002cce:	68fa      	ldr	r2, [r7, #12]
 8002cd0:	4413      	add	r3, r2
 8002cd2:	3304      	adds	r3, #4
 8002cd4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002cd6:	697b      	ldr	r3, [r7, #20]
 8002cd8:	687a      	ldr	r2, [r7, #4]
 8002cda:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002cdc:	697b      	ldr	r3, [r7, #20]
 8002cde:	683a      	ldr	r2, [r7, #0]
 8002ce0:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8002ce2:	697b      	ldr	r3, [r7, #20]
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8002ce8:	697b      	ldr	r3, [r7, #20]
 8002cea:	2201      	movs	r2, #1
 8002cec:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002cee:	7afb      	ldrb	r3, [r7, #11]
 8002cf0:	f003 030f 	and.w	r3, r3, #15
 8002cf4:	b2da      	uxtb	r2, r3
 8002cf6:	697b      	ldr	r3, [r7, #20]
 8002cf8:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	691b      	ldr	r3, [r3, #16]
 8002cfe:	2b01      	cmp	r3, #1
 8002d00:	d102      	bne.n	8002d08 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002d02:	687a      	ldr	r2, [r7, #4]
 8002d04:	697b      	ldr	r3, [r7, #20]
 8002d06:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002d08:	7afb      	ldrb	r3, [r7, #11]
 8002d0a:	f003 030f 	and.w	r3, r3, #15
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d109      	bne.n	8002d26 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	6818      	ldr	r0, [r3, #0]
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	691b      	ldr	r3, [r3, #16]
 8002d1a:	b2db      	uxtb	r3, r3
 8002d1c:	461a      	mov	r2, r3
 8002d1e:	6979      	ldr	r1, [r7, #20]
 8002d20:	f003 fa5e 	bl	80061e0 <USB_EP0StartXfer>
 8002d24:	e008      	b.n	8002d38 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	6818      	ldr	r0, [r3, #0]
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	691b      	ldr	r3, [r3, #16]
 8002d2e:	b2db      	uxtb	r3, r3
 8002d30:	461a      	mov	r2, r3
 8002d32:	6979      	ldr	r1, [r7, #20]
 8002d34:	f003 f810 	bl	8005d58 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002d38:	2300      	movs	r3, #0
}
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	3718      	adds	r7, #24
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	bd80      	pop	{r7, pc}

08002d42 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002d42:	b580      	push	{r7, lr}
 8002d44:	b084      	sub	sp, #16
 8002d46:	af00      	add	r7, sp, #0
 8002d48:	6078      	str	r0, [r7, #4]
 8002d4a:	460b      	mov	r3, r1
 8002d4c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002d4e:	78fb      	ldrb	r3, [r7, #3]
 8002d50:	f003 020f 	and.w	r2, r3, #15
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	685b      	ldr	r3, [r3, #4]
 8002d58:	429a      	cmp	r2, r3
 8002d5a:	d901      	bls.n	8002d60 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002d5c:	2301      	movs	r3, #1
 8002d5e:	e050      	b.n	8002e02 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002d60:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	da0f      	bge.n	8002d88 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002d68:	78fb      	ldrb	r3, [r7, #3]
 8002d6a:	f003 020f 	and.w	r2, r3, #15
 8002d6e:	4613      	mov	r3, r2
 8002d70:	00db      	lsls	r3, r3, #3
 8002d72:	1a9b      	subs	r3, r3, r2
 8002d74:	009b      	lsls	r3, r3, #2
 8002d76:	3338      	adds	r3, #56	; 0x38
 8002d78:	687a      	ldr	r2, [r7, #4]
 8002d7a:	4413      	add	r3, r2
 8002d7c:	3304      	adds	r3, #4
 8002d7e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	2201      	movs	r2, #1
 8002d84:	705a      	strb	r2, [r3, #1]
 8002d86:	e00d      	b.n	8002da4 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002d88:	78fa      	ldrb	r2, [r7, #3]
 8002d8a:	4613      	mov	r3, r2
 8002d8c:	00db      	lsls	r3, r3, #3
 8002d8e:	1a9b      	subs	r3, r3, r2
 8002d90:	009b      	lsls	r3, r3, #2
 8002d92:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002d96:	687a      	ldr	r2, [r7, #4]
 8002d98:	4413      	add	r3, r2
 8002d9a:	3304      	adds	r3, #4
 8002d9c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	2200      	movs	r2, #0
 8002da2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	2201      	movs	r2, #1
 8002da8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002daa:	78fb      	ldrb	r3, [r7, #3]
 8002dac:	f003 030f 	and.w	r3, r3, #15
 8002db0:	b2da      	uxtb	r2, r3
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002dbc:	2b01      	cmp	r3, #1
 8002dbe:	d101      	bne.n	8002dc4 <HAL_PCD_EP_SetStall+0x82>
 8002dc0:	2302      	movs	r3, #2
 8002dc2:	e01e      	b.n	8002e02 <HAL_PCD_EP_SetStall+0xc0>
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2201      	movs	r2, #1
 8002dc8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	68f9      	ldr	r1, [r7, #12]
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	f003 fbed 	bl	80065b2 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002dd8:	78fb      	ldrb	r3, [r7, #3]
 8002dda:	f003 030f 	and.w	r3, r3, #15
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d10a      	bne.n	8002df8 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6818      	ldr	r0, [r3, #0]
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	691b      	ldr	r3, [r3, #16]
 8002dea:	b2d9      	uxtb	r1, r3
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002df2:	461a      	mov	r2, r3
 8002df4:	f003 fdde 	bl	80069b4 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002e00:	2300      	movs	r3, #0
}
 8002e02:	4618      	mov	r0, r3
 8002e04:	3710      	adds	r7, #16
 8002e06:	46bd      	mov	sp, r7
 8002e08:	bd80      	pop	{r7, pc}

08002e0a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002e0a:	b580      	push	{r7, lr}
 8002e0c:	b084      	sub	sp, #16
 8002e0e:	af00      	add	r7, sp, #0
 8002e10:	6078      	str	r0, [r7, #4]
 8002e12:	460b      	mov	r3, r1
 8002e14:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002e16:	78fb      	ldrb	r3, [r7, #3]
 8002e18:	f003 020f 	and.w	r2, r3, #15
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	685b      	ldr	r3, [r3, #4]
 8002e20:	429a      	cmp	r2, r3
 8002e22:	d901      	bls.n	8002e28 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002e24:	2301      	movs	r3, #1
 8002e26:	e042      	b.n	8002eae <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002e28:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	da0f      	bge.n	8002e50 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e30:	78fb      	ldrb	r3, [r7, #3]
 8002e32:	f003 020f 	and.w	r2, r3, #15
 8002e36:	4613      	mov	r3, r2
 8002e38:	00db      	lsls	r3, r3, #3
 8002e3a:	1a9b      	subs	r3, r3, r2
 8002e3c:	009b      	lsls	r3, r3, #2
 8002e3e:	3338      	adds	r3, #56	; 0x38
 8002e40:	687a      	ldr	r2, [r7, #4]
 8002e42:	4413      	add	r3, r2
 8002e44:	3304      	adds	r3, #4
 8002e46:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	2201      	movs	r2, #1
 8002e4c:	705a      	strb	r2, [r3, #1]
 8002e4e:	e00f      	b.n	8002e70 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002e50:	78fb      	ldrb	r3, [r7, #3]
 8002e52:	f003 020f 	and.w	r2, r3, #15
 8002e56:	4613      	mov	r3, r2
 8002e58:	00db      	lsls	r3, r3, #3
 8002e5a:	1a9b      	subs	r3, r3, r2
 8002e5c:	009b      	lsls	r3, r3, #2
 8002e5e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002e62:	687a      	ldr	r2, [r7, #4]
 8002e64:	4413      	add	r3, r2
 8002e66:	3304      	adds	r3, #4
 8002e68:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	2200      	movs	r2, #0
 8002e74:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002e76:	78fb      	ldrb	r3, [r7, #3]
 8002e78:	f003 030f 	and.w	r3, r3, #15
 8002e7c:	b2da      	uxtb	r2, r3
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002e88:	2b01      	cmp	r3, #1
 8002e8a:	d101      	bne.n	8002e90 <HAL_PCD_EP_ClrStall+0x86>
 8002e8c:	2302      	movs	r3, #2
 8002e8e:	e00e      	b.n	8002eae <HAL_PCD_EP_ClrStall+0xa4>
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2201      	movs	r2, #1
 8002e94:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	68f9      	ldr	r1, [r7, #12]
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	f003 fbf5 	bl	800668e <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002eac:	2300      	movs	r3, #0
}
 8002eae:	4618      	mov	r0, r3
 8002eb0:	3710      	adds	r7, #16
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	bd80      	pop	{r7, pc}

08002eb6 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002eb6:	b580      	push	{r7, lr}
 8002eb8:	b08a      	sub	sp, #40	; 0x28
 8002eba:	af02      	add	r7, sp, #8
 8002ebc:	6078      	str	r0, [r7, #4]
 8002ebe:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002ec6:	697b      	ldr	r3, [r7, #20]
 8002ec8:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002eca:	683a      	ldr	r2, [r7, #0]
 8002ecc:	4613      	mov	r3, r2
 8002ece:	00db      	lsls	r3, r3, #3
 8002ed0:	1a9b      	subs	r3, r3, r2
 8002ed2:	009b      	lsls	r3, r3, #2
 8002ed4:	3338      	adds	r3, #56	; 0x38
 8002ed6:	687a      	ldr	r2, [r7, #4]
 8002ed8:	4413      	add	r3, r2
 8002eda:	3304      	adds	r3, #4
 8002edc:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	699a      	ldr	r2, [r3, #24]
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	695b      	ldr	r3, [r3, #20]
 8002ee6:	429a      	cmp	r2, r3
 8002ee8:	d901      	bls.n	8002eee <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002eea:	2301      	movs	r3, #1
 8002eec:	e06c      	b.n	8002fc8 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	695a      	ldr	r2, [r3, #20]
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	699b      	ldr	r3, [r3, #24]
 8002ef6:	1ad3      	subs	r3, r2, r3
 8002ef8:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	689b      	ldr	r3, [r3, #8]
 8002efe:	69fa      	ldr	r2, [r7, #28]
 8002f00:	429a      	cmp	r2, r3
 8002f02:	d902      	bls.n	8002f0a <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	689b      	ldr	r3, [r3, #8]
 8002f08:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002f0a:	69fb      	ldr	r3, [r7, #28]
 8002f0c:	3303      	adds	r3, #3
 8002f0e:	089b      	lsrs	r3, r3, #2
 8002f10:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002f12:	e02b      	b.n	8002f6c <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	695a      	ldr	r2, [r3, #20]
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	699b      	ldr	r3, [r3, #24]
 8002f1c:	1ad3      	subs	r3, r2, r3
 8002f1e:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	689b      	ldr	r3, [r3, #8]
 8002f24:	69fa      	ldr	r2, [r7, #28]
 8002f26:	429a      	cmp	r2, r3
 8002f28:	d902      	bls.n	8002f30 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	689b      	ldr	r3, [r3, #8]
 8002f2e:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002f30:	69fb      	ldr	r3, [r7, #28]
 8002f32:	3303      	adds	r3, #3
 8002f34:	089b      	lsrs	r3, r3, #2
 8002f36:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	68d9      	ldr	r1, [r3, #12]
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	b2da      	uxtb	r2, r3
 8002f40:	69fb      	ldr	r3, [r7, #28]
 8002f42:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002f48:	b2db      	uxtb	r3, r3
 8002f4a:	9300      	str	r3, [sp, #0]
 8002f4c:	4603      	mov	r3, r0
 8002f4e:	6978      	ldr	r0, [r7, #20]
 8002f50:	f003 fa99 	bl	8006486 <USB_WritePacket>

    ep->xfer_buff  += len;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	68da      	ldr	r2, [r3, #12]
 8002f58:	69fb      	ldr	r3, [r7, #28]
 8002f5a:	441a      	add	r2, r3
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	699a      	ldr	r2, [r3, #24]
 8002f64:	69fb      	ldr	r3, [r7, #28]
 8002f66:	441a      	add	r2, r3
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	015a      	lsls	r2, r3, #5
 8002f70:	693b      	ldr	r3, [r7, #16]
 8002f72:	4413      	add	r3, r2
 8002f74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002f78:	699b      	ldr	r3, [r3, #24]
 8002f7a:	b29b      	uxth	r3, r3
 8002f7c:	69ba      	ldr	r2, [r7, #24]
 8002f7e:	429a      	cmp	r2, r3
 8002f80:	d809      	bhi.n	8002f96 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	699a      	ldr	r2, [r3, #24]
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002f8a:	429a      	cmp	r2, r3
 8002f8c:	d203      	bcs.n	8002f96 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	695b      	ldr	r3, [r3, #20]
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d1be      	bne.n	8002f14 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	695a      	ldr	r2, [r3, #20]
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	699b      	ldr	r3, [r3, #24]
 8002f9e:	429a      	cmp	r2, r3
 8002fa0:	d811      	bhi.n	8002fc6 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	f003 030f 	and.w	r3, r3, #15
 8002fa8:	2201      	movs	r2, #1
 8002faa:	fa02 f303 	lsl.w	r3, r2, r3
 8002fae:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002fb0:	693b      	ldr	r3, [r7, #16]
 8002fb2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002fb6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002fb8:	68bb      	ldr	r3, [r7, #8]
 8002fba:	43db      	mvns	r3, r3
 8002fbc:	6939      	ldr	r1, [r7, #16]
 8002fbe:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002fc2:	4013      	ands	r3, r2
 8002fc4:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002fc6:	2300      	movs	r3, #0
}
 8002fc8:	4618      	mov	r0, r3
 8002fca:	3720      	adds	r7, #32
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	bd80      	pop	{r7, pc}

08002fd0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b086      	sub	sp, #24
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
 8002fd8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002fe0:	697b      	ldr	r3, [r7, #20]
 8002fe2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002fe4:	697b      	ldr	r3, [r7, #20]
 8002fe6:	333c      	adds	r3, #60	; 0x3c
 8002fe8:	3304      	adds	r3, #4
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	015a      	lsls	r2, r3, #5
 8002ff2:	693b      	ldr	r3, [r7, #16]
 8002ff4:	4413      	add	r3, r2
 8002ff6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ffa:	689b      	ldr	r3, [r3, #8]
 8002ffc:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	691b      	ldr	r3, [r3, #16]
 8003002:	2b01      	cmp	r3, #1
 8003004:	f040 80a0 	bne.w	8003148 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003008:	68bb      	ldr	r3, [r7, #8]
 800300a:	f003 0308 	and.w	r3, r3, #8
 800300e:	2b00      	cmp	r3, #0
 8003010:	d015      	beq.n	800303e <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	4a72      	ldr	r2, [pc, #456]	; (80031e0 <PCD_EP_OutXfrComplete_int+0x210>)
 8003016:	4293      	cmp	r3, r2
 8003018:	f240 80dd 	bls.w	80031d6 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800301c:	68bb      	ldr	r3, [r7, #8]
 800301e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003022:	2b00      	cmp	r3, #0
 8003024:	f000 80d7 	beq.w	80031d6 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	015a      	lsls	r2, r3, #5
 800302c:	693b      	ldr	r3, [r7, #16]
 800302e:	4413      	add	r3, r2
 8003030:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003034:	461a      	mov	r2, r3
 8003036:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800303a:	6093      	str	r3, [r2, #8]
 800303c:	e0cb      	b.n	80031d6 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800303e:	68bb      	ldr	r3, [r7, #8]
 8003040:	f003 0320 	and.w	r3, r3, #32
 8003044:	2b00      	cmp	r3, #0
 8003046:	d009      	beq.n	800305c <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	015a      	lsls	r2, r3, #5
 800304c:	693b      	ldr	r3, [r7, #16]
 800304e:	4413      	add	r3, r2
 8003050:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003054:	461a      	mov	r2, r3
 8003056:	2320      	movs	r3, #32
 8003058:	6093      	str	r3, [r2, #8]
 800305a:	e0bc      	b.n	80031d6 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800305c:	68bb      	ldr	r3, [r7, #8]
 800305e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003062:	2b00      	cmp	r3, #0
 8003064:	f040 80b7 	bne.w	80031d6 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	4a5d      	ldr	r2, [pc, #372]	; (80031e0 <PCD_EP_OutXfrComplete_int+0x210>)
 800306c:	4293      	cmp	r3, r2
 800306e:	d90f      	bls.n	8003090 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003070:	68bb      	ldr	r3, [r7, #8]
 8003072:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003076:	2b00      	cmp	r3, #0
 8003078:	d00a      	beq.n	8003090 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800307a:	683b      	ldr	r3, [r7, #0]
 800307c:	015a      	lsls	r2, r3, #5
 800307e:	693b      	ldr	r3, [r7, #16]
 8003080:	4413      	add	r3, r2
 8003082:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003086:	461a      	mov	r2, r3
 8003088:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800308c:	6093      	str	r3, [r2, #8]
 800308e:	e0a2      	b.n	80031d6 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8003090:	6879      	ldr	r1, [r7, #4]
 8003092:	683a      	ldr	r2, [r7, #0]
 8003094:	4613      	mov	r3, r2
 8003096:	00db      	lsls	r3, r3, #3
 8003098:	1a9b      	subs	r3, r3, r2
 800309a:	009b      	lsls	r3, r3, #2
 800309c:	440b      	add	r3, r1
 800309e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80030a2:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	0159      	lsls	r1, r3, #5
 80030a8:	693b      	ldr	r3, [r7, #16]
 80030aa:	440b      	add	r3, r1
 80030ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030b0:	691b      	ldr	r3, [r3, #16]
 80030b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 80030b6:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 80030b8:	6878      	ldr	r0, [r7, #4]
 80030ba:	683a      	ldr	r2, [r7, #0]
 80030bc:	4613      	mov	r3, r2
 80030be:	00db      	lsls	r3, r3, #3
 80030c0:	1a9b      	subs	r3, r3, r2
 80030c2:	009b      	lsls	r3, r3, #2
 80030c4:	4403      	add	r3, r0
 80030c6:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80030ca:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 80030cc:	6879      	ldr	r1, [r7, #4]
 80030ce:	683a      	ldr	r2, [r7, #0]
 80030d0:	4613      	mov	r3, r2
 80030d2:	00db      	lsls	r3, r3, #3
 80030d4:	1a9b      	subs	r3, r3, r2
 80030d6:	009b      	lsls	r3, r3, #2
 80030d8:	440b      	add	r3, r1
 80030da:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80030de:	6819      	ldr	r1, [r3, #0]
 80030e0:	6878      	ldr	r0, [r7, #4]
 80030e2:	683a      	ldr	r2, [r7, #0]
 80030e4:	4613      	mov	r3, r2
 80030e6:	00db      	lsls	r3, r3, #3
 80030e8:	1a9b      	subs	r3, r3, r2
 80030ea:	009b      	lsls	r3, r3, #2
 80030ec:	4403      	add	r3, r0
 80030ee:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	4419      	add	r1, r3
 80030f6:	6878      	ldr	r0, [r7, #4]
 80030f8:	683a      	ldr	r2, [r7, #0]
 80030fa:	4613      	mov	r3, r2
 80030fc:	00db      	lsls	r3, r3, #3
 80030fe:	1a9b      	subs	r3, r3, r2
 8003100:	009b      	lsls	r3, r3, #2
 8003102:	4403      	add	r3, r0
 8003104:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003108:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	2b00      	cmp	r3, #0
 800310e:	d114      	bne.n	800313a <PCD_EP_OutXfrComplete_int+0x16a>
 8003110:	6879      	ldr	r1, [r7, #4]
 8003112:	683a      	ldr	r2, [r7, #0]
 8003114:	4613      	mov	r3, r2
 8003116:	00db      	lsls	r3, r3, #3
 8003118:	1a9b      	subs	r3, r3, r2
 800311a:	009b      	lsls	r3, r3, #2
 800311c:	440b      	add	r3, r1
 800311e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	2b00      	cmp	r3, #0
 8003126:	d108      	bne.n	800313a <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6818      	ldr	r0, [r3, #0]
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003132:	461a      	mov	r2, r3
 8003134:	2101      	movs	r1, #1
 8003136:	f003 fc3d 	bl	80069b4 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	b2db      	uxtb	r3, r3
 800313e:	4619      	mov	r1, r3
 8003140:	6878      	ldr	r0, [r7, #4]
 8003142:	f005 fccd 	bl	8008ae0 <HAL_PCD_DataOutStageCallback>
 8003146:	e046      	b.n	80031d6 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	4a26      	ldr	r2, [pc, #152]	; (80031e4 <PCD_EP_OutXfrComplete_int+0x214>)
 800314c:	4293      	cmp	r3, r2
 800314e:	d124      	bne.n	800319a <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003150:	68bb      	ldr	r3, [r7, #8]
 8003152:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003156:	2b00      	cmp	r3, #0
 8003158:	d00a      	beq.n	8003170 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800315a:	683b      	ldr	r3, [r7, #0]
 800315c:	015a      	lsls	r2, r3, #5
 800315e:	693b      	ldr	r3, [r7, #16]
 8003160:	4413      	add	r3, r2
 8003162:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003166:	461a      	mov	r2, r3
 8003168:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800316c:	6093      	str	r3, [r2, #8]
 800316e:	e032      	b.n	80031d6 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003170:	68bb      	ldr	r3, [r7, #8]
 8003172:	f003 0320 	and.w	r3, r3, #32
 8003176:	2b00      	cmp	r3, #0
 8003178:	d008      	beq.n	800318c <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	015a      	lsls	r2, r3, #5
 800317e:	693b      	ldr	r3, [r7, #16]
 8003180:	4413      	add	r3, r2
 8003182:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003186:	461a      	mov	r2, r3
 8003188:	2320      	movs	r3, #32
 800318a:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	b2db      	uxtb	r3, r3
 8003190:	4619      	mov	r1, r3
 8003192:	6878      	ldr	r0, [r7, #4]
 8003194:	f005 fca4 	bl	8008ae0 <HAL_PCD_DataOutStageCallback>
 8003198:	e01d      	b.n	80031d6 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	2b00      	cmp	r3, #0
 800319e:	d114      	bne.n	80031ca <PCD_EP_OutXfrComplete_int+0x1fa>
 80031a0:	6879      	ldr	r1, [r7, #4]
 80031a2:	683a      	ldr	r2, [r7, #0]
 80031a4:	4613      	mov	r3, r2
 80031a6:	00db      	lsls	r3, r3, #3
 80031a8:	1a9b      	subs	r3, r3, r2
 80031aa:	009b      	lsls	r3, r3, #2
 80031ac:	440b      	add	r3, r1
 80031ae:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d108      	bne.n	80031ca <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6818      	ldr	r0, [r3, #0]
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80031c2:	461a      	mov	r2, r3
 80031c4:	2100      	movs	r1, #0
 80031c6:	f003 fbf5 	bl	80069b4 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	b2db      	uxtb	r3, r3
 80031ce:	4619      	mov	r1, r3
 80031d0:	6878      	ldr	r0, [r7, #4]
 80031d2:	f005 fc85 	bl	8008ae0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80031d6:	2300      	movs	r3, #0
}
 80031d8:	4618      	mov	r0, r3
 80031da:	3718      	adds	r7, #24
 80031dc:	46bd      	mov	sp, r7
 80031de:	bd80      	pop	{r7, pc}
 80031e0:	4f54300a 	.word	0x4f54300a
 80031e4:	4f54310a 	.word	0x4f54310a

080031e8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b086      	sub	sp, #24
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
 80031f0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80031f8:	697b      	ldr	r3, [r7, #20]
 80031fa:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80031fc:	697b      	ldr	r3, [r7, #20]
 80031fe:	333c      	adds	r3, #60	; 0x3c
 8003200:	3304      	adds	r3, #4
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003206:	683b      	ldr	r3, [r7, #0]
 8003208:	015a      	lsls	r2, r3, #5
 800320a:	693b      	ldr	r3, [r7, #16]
 800320c:	4413      	add	r3, r2
 800320e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003212:	689b      	ldr	r3, [r3, #8]
 8003214:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	4a15      	ldr	r2, [pc, #84]	; (8003270 <PCD_EP_OutSetupPacket_int+0x88>)
 800321a:	4293      	cmp	r3, r2
 800321c:	d90e      	bls.n	800323c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800321e:	68bb      	ldr	r3, [r7, #8]
 8003220:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003224:	2b00      	cmp	r3, #0
 8003226:	d009      	beq.n	800323c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	015a      	lsls	r2, r3, #5
 800322c:	693b      	ldr	r3, [r7, #16]
 800322e:	4413      	add	r3, r2
 8003230:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003234:	461a      	mov	r2, r3
 8003236:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800323a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800323c:	6878      	ldr	r0, [r7, #4]
 800323e:	f005 fc3d 	bl	8008abc <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	4a0a      	ldr	r2, [pc, #40]	; (8003270 <PCD_EP_OutSetupPacket_int+0x88>)
 8003246:	4293      	cmp	r3, r2
 8003248:	d90c      	bls.n	8003264 <PCD_EP_OutSetupPacket_int+0x7c>
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	691b      	ldr	r3, [r3, #16]
 800324e:	2b01      	cmp	r3, #1
 8003250:	d108      	bne.n	8003264 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6818      	ldr	r0, [r3, #0]
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800325c:	461a      	mov	r2, r3
 800325e:	2101      	movs	r1, #1
 8003260:	f003 fba8 	bl	80069b4 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003264:	2300      	movs	r3, #0
}
 8003266:	4618      	mov	r0, r3
 8003268:	3718      	adds	r7, #24
 800326a:	46bd      	mov	sp, r7
 800326c:	bd80      	pop	{r7, pc}
 800326e:	bf00      	nop
 8003270:	4f54300a 	.word	0x4f54300a

08003274 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003274:	b480      	push	{r7}
 8003276:	b085      	sub	sp, #20
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
 800327c:	460b      	mov	r3, r1
 800327e:	70fb      	strb	r3, [r7, #3]
 8003280:	4613      	mov	r3, r2
 8003282:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800328a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800328c:	78fb      	ldrb	r3, [r7, #3]
 800328e:	2b00      	cmp	r3, #0
 8003290:	d107      	bne.n	80032a2 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003292:	883b      	ldrh	r3, [r7, #0]
 8003294:	0419      	lsls	r1, r3, #16
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	68ba      	ldr	r2, [r7, #8]
 800329c:	430a      	orrs	r2, r1
 800329e:	629a      	str	r2, [r3, #40]	; 0x28
 80032a0:	e028      	b.n	80032f4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032a8:	0c1b      	lsrs	r3, r3, #16
 80032aa:	68ba      	ldr	r2, [r7, #8]
 80032ac:	4413      	add	r3, r2
 80032ae:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80032b0:	2300      	movs	r3, #0
 80032b2:	73fb      	strb	r3, [r7, #15]
 80032b4:	e00d      	b.n	80032d2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681a      	ldr	r2, [r3, #0]
 80032ba:	7bfb      	ldrb	r3, [r7, #15]
 80032bc:	3340      	adds	r3, #64	; 0x40
 80032be:	009b      	lsls	r3, r3, #2
 80032c0:	4413      	add	r3, r2
 80032c2:	685b      	ldr	r3, [r3, #4]
 80032c4:	0c1b      	lsrs	r3, r3, #16
 80032c6:	68ba      	ldr	r2, [r7, #8]
 80032c8:	4413      	add	r3, r2
 80032ca:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80032cc:	7bfb      	ldrb	r3, [r7, #15]
 80032ce:	3301      	adds	r3, #1
 80032d0:	73fb      	strb	r3, [r7, #15]
 80032d2:	7bfa      	ldrb	r2, [r7, #15]
 80032d4:	78fb      	ldrb	r3, [r7, #3]
 80032d6:	3b01      	subs	r3, #1
 80032d8:	429a      	cmp	r2, r3
 80032da:	d3ec      	bcc.n	80032b6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80032dc:	883b      	ldrh	r3, [r7, #0]
 80032de:	0418      	lsls	r0, r3, #16
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6819      	ldr	r1, [r3, #0]
 80032e4:	78fb      	ldrb	r3, [r7, #3]
 80032e6:	3b01      	subs	r3, #1
 80032e8:	68ba      	ldr	r2, [r7, #8]
 80032ea:	4302      	orrs	r2, r0
 80032ec:	3340      	adds	r3, #64	; 0x40
 80032ee:	009b      	lsls	r3, r3, #2
 80032f0:	440b      	add	r3, r1
 80032f2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80032f4:	2300      	movs	r3, #0
}
 80032f6:	4618      	mov	r0, r3
 80032f8:	3714      	adds	r7, #20
 80032fa:	46bd      	mov	sp, r7
 80032fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003300:	4770      	bx	lr

08003302 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003302:	b480      	push	{r7}
 8003304:	b083      	sub	sp, #12
 8003306:	af00      	add	r7, sp, #0
 8003308:	6078      	str	r0, [r7, #4]
 800330a:	460b      	mov	r3, r1
 800330c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	887a      	ldrh	r2, [r7, #2]
 8003314:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003316:	2300      	movs	r3, #0
}
 8003318:	4618      	mov	r0, r3
 800331a:	370c      	adds	r7, #12
 800331c:	46bd      	mov	sp, r7
 800331e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003322:	4770      	bx	lr

08003324 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003324:	b480      	push	{r7}
 8003326:	b083      	sub	sp, #12
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
 800332c:	460b      	mov	r3, r1
 800332e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003330:	bf00      	nop
 8003332:	370c      	adds	r7, #12
 8003334:	46bd      	mov	sp, r7
 8003336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333a:	4770      	bx	lr

0800333c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800333c:	b580      	push	{r7, lr}
 800333e:	b086      	sub	sp, #24
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2b00      	cmp	r3, #0
 8003348:	d101      	bne.n	800334e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800334a:	2301      	movs	r3, #1
 800334c:	e267      	b.n	800381e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f003 0301 	and.w	r3, r3, #1
 8003356:	2b00      	cmp	r3, #0
 8003358:	d075      	beq.n	8003446 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800335a:	4b88      	ldr	r3, [pc, #544]	; (800357c <HAL_RCC_OscConfig+0x240>)
 800335c:	689b      	ldr	r3, [r3, #8]
 800335e:	f003 030c 	and.w	r3, r3, #12
 8003362:	2b04      	cmp	r3, #4
 8003364:	d00c      	beq.n	8003380 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003366:	4b85      	ldr	r3, [pc, #532]	; (800357c <HAL_RCC_OscConfig+0x240>)
 8003368:	689b      	ldr	r3, [r3, #8]
 800336a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800336e:	2b08      	cmp	r3, #8
 8003370:	d112      	bne.n	8003398 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003372:	4b82      	ldr	r3, [pc, #520]	; (800357c <HAL_RCC_OscConfig+0x240>)
 8003374:	685b      	ldr	r3, [r3, #4]
 8003376:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800337a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800337e:	d10b      	bne.n	8003398 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003380:	4b7e      	ldr	r3, [pc, #504]	; (800357c <HAL_RCC_OscConfig+0x240>)
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003388:	2b00      	cmp	r3, #0
 800338a:	d05b      	beq.n	8003444 <HAL_RCC_OscConfig+0x108>
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	685b      	ldr	r3, [r3, #4]
 8003390:	2b00      	cmp	r3, #0
 8003392:	d157      	bne.n	8003444 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003394:	2301      	movs	r3, #1
 8003396:	e242      	b.n	800381e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	685b      	ldr	r3, [r3, #4]
 800339c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033a0:	d106      	bne.n	80033b0 <HAL_RCC_OscConfig+0x74>
 80033a2:	4b76      	ldr	r3, [pc, #472]	; (800357c <HAL_RCC_OscConfig+0x240>)
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	4a75      	ldr	r2, [pc, #468]	; (800357c <HAL_RCC_OscConfig+0x240>)
 80033a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033ac:	6013      	str	r3, [r2, #0]
 80033ae:	e01d      	b.n	80033ec <HAL_RCC_OscConfig+0xb0>
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	685b      	ldr	r3, [r3, #4]
 80033b4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80033b8:	d10c      	bne.n	80033d4 <HAL_RCC_OscConfig+0x98>
 80033ba:	4b70      	ldr	r3, [pc, #448]	; (800357c <HAL_RCC_OscConfig+0x240>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	4a6f      	ldr	r2, [pc, #444]	; (800357c <HAL_RCC_OscConfig+0x240>)
 80033c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80033c4:	6013      	str	r3, [r2, #0]
 80033c6:	4b6d      	ldr	r3, [pc, #436]	; (800357c <HAL_RCC_OscConfig+0x240>)
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	4a6c      	ldr	r2, [pc, #432]	; (800357c <HAL_RCC_OscConfig+0x240>)
 80033cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033d0:	6013      	str	r3, [r2, #0]
 80033d2:	e00b      	b.n	80033ec <HAL_RCC_OscConfig+0xb0>
 80033d4:	4b69      	ldr	r3, [pc, #420]	; (800357c <HAL_RCC_OscConfig+0x240>)
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	4a68      	ldr	r2, [pc, #416]	; (800357c <HAL_RCC_OscConfig+0x240>)
 80033da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033de:	6013      	str	r3, [r2, #0]
 80033e0:	4b66      	ldr	r3, [pc, #408]	; (800357c <HAL_RCC_OscConfig+0x240>)
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	4a65      	ldr	r2, [pc, #404]	; (800357c <HAL_RCC_OscConfig+0x240>)
 80033e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80033ea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	685b      	ldr	r3, [r3, #4]
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d013      	beq.n	800341c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033f4:	f7fd ff24 	bl	8001240 <HAL_GetTick>
 80033f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033fa:	e008      	b.n	800340e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80033fc:	f7fd ff20 	bl	8001240 <HAL_GetTick>
 8003400:	4602      	mov	r2, r0
 8003402:	693b      	ldr	r3, [r7, #16]
 8003404:	1ad3      	subs	r3, r2, r3
 8003406:	2b64      	cmp	r3, #100	; 0x64
 8003408:	d901      	bls.n	800340e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800340a:	2303      	movs	r3, #3
 800340c:	e207      	b.n	800381e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800340e:	4b5b      	ldr	r3, [pc, #364]	; (800357c <HAL_RCC_OscConfig+0x240>)
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003416:	2b00      	cmp	r3, #0
 8003418:	d0f0      	beq.n	80033fc <HAL_RCC_OscConfig+0xc0>
 800341a:	e014      	b.n	8003446 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800341c:	f7fd ff10 	bl	8001240 <HAL_GetTick>
 8003420:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003422:	e008      	b.n	8003436 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003424:	f7fd ff0c 	bl	8001240 <HAL_GetTick>
 8003428:	4602      	mov	r2, r0
 800342a:	693b      	ldr	r3, [r7, #16]
 800342c:	1ad3      	subs	r3, r2, r3
 800342e:	2b64      	cmp	r3, #100	; 0x64
 8003430:	d901      	bls.n	8003436 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003432:	2303      	movs	r3, #3
 8003434:	e1f3      	b.n	800381e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003436:	4b51      	ldr	r3, [pc, #324]	; (800357c <HAL_RCC_OscConfig+0x240>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800343e:	2b00      	cmp	r3, #0
 8003440:	d1f0      	bne.n	8003424 <HAL_RCC_OscConfig+0xe8>
 8003442:	e000      	b.n	8003446 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003444:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f003 0302 	and.w	r3, r3, #2
 800344e:	2b00      	cmp	r3, #0
 8003450:	d063      	beq.n	800351a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003452:	4b4a      	ldr	r3, [pc, #296]	; (800357c <HAL_RCC_OscConfig+0x240>)
 8003454:	689b      	ldr	r3, [r3, #8]
 8003456:	f003 030c 	and.w	r3, r3, #12
 800345a:	2b00      	cmp	r3, #0
 800345c:	d00b      	beq.n	8003476 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800345e:	4b47      	ldr	r3, [pc, #284]	; (800357c <HAL_RCC_OscConfig+0x240>)
 8003460:	689b      	ldr	r3, [r3, #8]
 8003462:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003466:	2b08      	cmp	r3, #8
 8003468:	d11c      	bne.n	80034a4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800346a:	4b44      	ldr	r3, [pc, #272]	; (800357c <HAL_RCC_OscConfig+0x240>)
 800346c:	685b      	ldr	r3, [r3, #4]
 800346e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003472:	2b00      	cmp	r3, #0
 8003474:	d116      	bne.n	80034a4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003476:	4b41      	ldr	r3, [pc, #260]	; (800357c <HAL_RCC_OscConfig+0x240>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f003 0302 	and.w	r3, r3, #2
 800347e:	2b00      	cmp	r3, #0
 8003480:	d005      	beq.n	800348e <HAL_RCC_OscConfig+0x152>
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	68db      	ldr	r3, [r3, #12]
 8003486:	2b01      	cmp	r3, #1
 8003488:	d001      	beq.n	800348e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800348a:	2301      	movs	r3, #1
 800348c:	e1c7      	b.n	800381e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800348e:	4b3b      	ldr	r3, [pc, #236]	; (800357c <HAL_RCC_OscConfig+0x240>)
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	691b      	ldr	r3, [r3, #16]
 800349a:	00db      	lsls	r3, r3, #3
 800349c:	4937      	ldr	r1, [pc, #220]	; (800357c <HAL_RCC_OscConfig+0x240>)
 800349e:	4313      	orrs	r3, r2
 80034a0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034a2:	e03a      	b.n	800351a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	68db      	ldr	r3, [r3, #12]
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d020      	beq.n	80034ee <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80034ac:	4b34      	ldr	r3, [pc, #208]	; (8003580 <HAL_RCC_OscConfig+0x244>)
 80034ae:	2201      	movs	r2, #1
 80034b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034b2:	f7fd fec5 	bl	8001240 <HAL_GetTick>
 80034b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034b8:	e008      	b.n	80034cc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80034ba:	f7fd fec1 	bl	8001240 <HAL_GetTick>
 80034be:	4602      	mov	r2, r0
 80034c0:	693b      	ldr	r3, [r7, #16]
 80034c2:	1ad3      	subs	r3, r2, r3
 80034c4:	2b02      	cmp	r3, #2
 80034c6:	d901      	bls.n	80034cc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80034c8:	2303      	movs	r3, #3
 80034ca:	e1a8      	b.n	800381e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034cc:	4b2b      	ldr	r3, [pc, #172]	; (800357c <HAL_RCC_OscConfig+0x240>)
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f003 0302 	and.w	r3, r3, #2
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d0f0      	beq.n	80034ba <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034d8:	4b28      	ldr	r3, [pc, #160]	; (800357c <HAL_RCC_OscConfig+0x240>)
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	691b      	ldr	r3, [r3, #16]
 80034e4:	00db      	lsls	r3, r3, #3
 80034e6:	4925      	ldr	r1, [pc, #148]	; (800357c <HAL_RCC_OscConfig+0x240>)
 80034e8:	4313      	orrs	r3, r2
 80034ea:	600b      	str	r3, [r1, #0]
 80034ec:	e015      	b.n	800351a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80034ee:	4b24      	ldr	r3, [pc, #144]	; (8003580 <HAL_RCC_OscConfig+0x244>)
 80034f0:	2200      	movs	r2, #0
 80034f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034f4:	f7fd fea4 	bl	8001240 <HAL_GetTick>
 80034f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034fa:	e008      	b.n	800350e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80034fc:	f7fd fea0 	bl	8001240 <HAL_GetTick>
 8003500:	4602      	mov	r2, r0
 8003502:	693b      	ldr	r3, [r7, #16]
 8003504:	1ad3      	subs	r3, r2, r3
 8003506:	2b02      	cmp	r3, #2
 8003508:	d901      	bls.n	800350e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800350a:	2303      	movs	r3, #3
 800350c:	e187      	b.n	800381e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800350e:	4b1b      	ldr	r3, [pc, #108]	; (800357c <HAL_RCC_OscConfig+0x240>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f003 0302 	and.w	r3, r3, #2
 8003516:	2b00      	cmp	r3, #0
 8003518:	d1f0      	bne.n	80034fc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f003 0308 	and.w	r3, r3, #8
 8003522:	2b00      	cmp	r3, #0
 8003524:	d036      	beq.n	8003594 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	695b      	ldr	r3, [r3, #20]
 800352a:	2b00      	cmp	r3, #0
 800352c:	d016      	beq.n	800355c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800352e:	4b15      	ldr	r3, [pc, #84]	; (8003584 <HAL_RCC_OscConfig+0x248>)
 8003530:	2201      	movs	r2, #1
 8003532:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003534:	f7fd fe84 	bl	8001240 <HAL_GetTick>
 8003538:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800353a:	e008      	b.n	800354e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800353c:	f7fd fe80 	bl	8001240 <HAL_GetTick>
 8003540:	4602      	mov	r2, r0
 8003542:	693b      	ldr	r3, [r7, #16]
 8003544:	1ad3      	subs	r3, r2, r3
 8003546:	2b02      	cmp	r3, #2
 8003548:	d901      	bls.n	800354e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800354a:	2303      	movs	r3, #3
 800354c:	e167      	b.n	800381e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800354e:	4b0b      	ldr	r3, [pc, #44]	; (800357c <HAL_RCC_OscConfig+0x240>)
 8003550:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003552:	f003 0302 	and.w	r3, r3, #2
 8003556:	2b00      	cmp	r3, #0
 8003558:	d0f0      	beq.n	800353c <HAL_RCC_OscConfig+0x200>
 800355a:	e01b      	b.n	8003594 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800355c:	4b09      	ldr	r3, [pc, #36]	; (8003584 <HAL_RCC_OscConfig+0x248>)
 800355e:	2200      	movs	r2, #0
 8003560:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003562:	f7fd fe6d 	bl	8001240 <HAL_GetTick>
 8003566:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003568:	e00e      	b.n	8003588 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800356a:	f7fd fe69 	bl	8001240 <HAL_GetTick>
 800356e:	4602      	mov	r2, r0
 8003570:	693b      	ldr	r3, [r7, #16]
 8003572:	1ad3      	subs	r3, r2, r3
 8003574:	2b02      	cmp	r3, #2
 8003576:	d907      	bls.n	8003588 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003578:	2303      	movs	r3, #3
 800357a:	e150      	b.n	800381e <HAL_RCC_OscConfig+0x4e2>
 800357c:	40023800 	.word	0x40023800
 8003580:	42470000 	.word	0x42470000
 8003584:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003588:	4b88      	ldr	r3, [pc, #544]	; (80037ac <HAL_RCC_OscConfig+0x470>)
 800358a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800358c:	f003 0302 	and.w	r3, r3, #2
 8003590:	2b00      	cmp	r3, #0
 8003592:	d1ea      	bne.n	800356a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f003 0304 	and.w	r3, r3, #4
 800359c:	2b00      	cmp	r3, #0
 800359e:	f000 8097 	beq.w	80036d0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80035a2:	2300      	movs	r3, #0
 80035a4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80035a6:	4b81      	ldr	r3, [pc, #516]	; (80037ac <HAL_RCC_OscConfig+0x470>)
 80035a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d10f      	bne.n	80035d2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80035b2:	2300      	movs	r3, #0
 80035b4:	60bb      	str	r3, [r7, #8]
 80035b6:	4b7d      	ldr	r3, [pc, #500]	; (80037ac <HAL_RCC_OscConfig+0x470>)
 80035b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ba:	4a7c      	ldr	r2, [pc, #496]	; (80037ac <HAL_RCC_OscConfig+0x470>)
 80035bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035c0:	6413      	str	r3, [r2, #64]	; 0x40
 80035c2:	4b7a      	ldr	r3, [pc, #488]	; (80037ac <HAL_RCC_OscConfig+0x470>)
 80035c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035ca:	60bb      	str	r3, [r7, #8]
 80035cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80035ce:	2301      	movs	r3, #1
 80035d0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035d2:	4b77      	ldr	r3, [pc, #476]	; (80037b0 <HAL_RCC_OscConfig+0x474>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d118      	bne.n	8003610 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80035de:	4b74      	ldr	r3, [pc, #464]	; (80037b0 <HAL_RCC_OscConfig+0x474>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	4a73      	ldr	r2, [pc, #460]	; (80037b0 <HAL_RCC_OscConfig+0x474>)
 80035e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035e8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80035ea:	f7fd fe29 	bl	8001240 <HAL_GetTick>
 80035ee:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035f0:	e008      	b.n	8003604 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035f2:	f7fd fe25 	bl	8001240 <HAL_GetTick>
 80035f6:	4602      	mov	r2, r0
 80035f8:	693b      	ldr	r3, [r7, #16]
 80035fa:	1ad3      	subs	r3, r2, r3
 80035fc:	2b02      	cmp	r3, #2
 80035fe:	d901      	bls.n	8003604 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003600:	2303      	movs	r3, #3
 8003602:	e10c      	b.n	800381e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003604:	4b6a      	ldr	r3, [pc, #424]	; (80037b0 <HAL_RCC_OscConfig+0x474>)
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800360c:	2b00      	cmp	r3, #0
 800360e:	d0f0      	beq.n	80035f2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	689b      	ldr	r3, [r3, #8]
 8003614:	2b01      	cmp	r3, #1
 8003616:	d106      	bne.n	8003626 <HAL_RCC_OscConfig+0x2ea>
 8003618:	4b64      	ldr	r3, [pc, #400]	; (80037ac <HAL_RCC_OscConfig+0x470>)
 800361a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800361c:	4a63      	ldr	r2, [pc, #396]	; (80037ac <HAL_RCC_OscConfig+0x470>)
 800361e:	f043 0301 	orr.w	r3, r3, #1
 8003622:	6713      	str	r3, [r2, #112]	; 0x70
 8003624:	e01c      	b.n	8003660 <HAL_RCC_OscConfig+0x324>
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	689b      	ldr	r3, [r3, #8]
 800362a:	2b05      	cmp	r3, #5
 800362c:	d10c      	bne.n	8003648 <HAL_RCC_OscConfig+0x30c>
 800362e:	4b5f      	ldr	r3, [pc, #380]	; (80037ac <HAL_RCC_OscConfig+0x470>)
 8003630:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003632:	4a5e      	ldr	r2, [pc, #376]	; (80037ac <HAL_RCC_OscConfig+0x470>)
 8003634:	f043 0304 	orr.w	r3, r3, #4
 8003638:	6713      	str	r3, [r2, #112]	; 0x70
 800363a:	4b5c      	ldr	r3, [pc, #368]	; (80037ac <HAL_RCC_OscConfig+0x470>)
 800363c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800363e:	4a5b      	ldr	r2, [pc, #364]	; (80037ac <HAL_RCC_OscConfig+0x470>)
 8003640:	f043 0301 	orr.w	r3, r3, #1
 8003644:	6713      	str	r3, [r2, #112]	; 0x70
 8003646:	e00b      	b.n	8003660 <HAL_RCC_OscConfig+0x324>
 8003648:	4b58      	ldr	r3, [pc, #352]	; (80037ac <HAL_RCC_OscConfig+0x470>)
 800364a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800364c:	4a57      	ldr	r2, [pc, #348]	; (80037ac <HAL_RCC_OscConfig+0x470>)
 800364e:	f023 0301 	bic.w	r3, r3, #1
 8003652:	6713      	str	r3, [r2, #112]	; 0x70
 8003654:	4b55      	ldr	r3, [pc, #340]	; (80037ac <HAL_RCC_OscConfig+0x470>)
 8003656:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003658:	4a54      	ldr	r2, [pc, #336]	; (80037ac <HAL_RCC_OscConfig+0x470>)
 800365a:	f023 0304 	bic.w	r3, r3, #4
 800365e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	689b      	ldr	r3, [r3, #8]
 8003664:	2b00      	cmp	r3, #0
 8003666:	d015      	beq.n	8003694 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003668:	f7fd fdea 	bl	8001240 <HAL_GetTick>
 800366c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800366e:	e00a      	b.n	8003686 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003670:	f7fd fde6 	bl	8001240 <HAL_GetTick>
 8003674:	4602      	mov	r2, r0
 8003676:	693b      	ldr	r3, [r7, #16]
 8003678:	1ad3      	subs	r3, r2, r3
 800367a:	f241 3288 	movw	r2, #5000	; 0x1388
 800367e:	4293      	cmp	r3, r2
 8003680:	d901      	bls.n	8003686 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003682:	2303      	movs	r3, #3
 8003684:	e0cb      	b.n	800381e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003686:	4b49      	ldr	r3, [pc, #292]	; (80037ac <HAL_RCC_OscConfig+0x470>)
 8003688:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800368a:	f003 0302 	and.w	r3, r3, #2
 800368e:	2b00      	cmp	r3, #0
 8003690:	d0ee      	beq.n	8003670 <HAL_RCC_OscConfig+0x334>
 8003692:	e014      	b.n	80036be <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003694:	f7fd fdd4 	bl	8001240 <HAL_GetTick>
 8003698:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800369a:	e00a      	b.n	80036b2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800369c:	f7fd fdd0 	bl	8001240 <HAL_GetTick>
 80036a0:	4602      	mov	r2, r0
 80036a2:	693b      	ldr	r3, [r7, #16]
 80036a4:	1ad3      	subs	r3, r2, r3
 80036a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d901      	bls.n	80036b2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80036ae:	2303      	movs	r3, #3
 80036b0:	e0b5      	b.n	800381e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036b2:	4b3e      	ldr	r3, [pc, #248]	; (80037ac <HAL_RCC_OscConfig+0x470>)
 80036b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036b6:	f003 0302 	and.w	r3, r3, #2
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d1ee      	bne.n	800369c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80036be:	7dfb      	ldrb	r3, [r7, #23]
 80036c0:	2b01      	cmp	r3, #1
 80036c2:	d105      	bne.n	80036d0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80036c4:	4b39      	ldr	r3, [pc, #228]	; (80037ac <HAL_RCC_OscConfig+0x470>)
 80036c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036c8:	4a38      	ldr	r2, [pc, #224]	; (80037ac <HAL_RCC_OscConfig+0x470>)
 80036ca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80036ce:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	699b      	ldr	r3, [r3, #24]
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	f000 80a1 	beq.w	800381c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80036da:	4b34      	ldr	r3, [pc, #208]	; (80037ac <HAL_RCC_OscConfig+0x470>)
 80036dc:	689b      	ldr	r3, [r3, #8]
 80036de:	f003 030c 	and.w	r3, r3, #12
 80036e2:	2b08      	cmp	r3, #8
 80036e4:	d05c      	beq.n	80037a0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	699b      	ldr	r3, [r3, #24]
 80036ea:	2b02      	cmp	r3, #2
 80036ec:	d141      	bne.n	8003772 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036ee:	4b31      	ldr	r3, [pc, #196]	; (80037b4 <HAL_RCC_OscConfig+0x478>)
 80036f0:	2200      	movs	r2, #0
 80036f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036f4:	f7fd fda4 	bl	8001240 <HAL_GetTick>
 80036f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036fa:	e008      	b.n	800370e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80036fc:	f7fd fda0 	bl	8001240 <HAL_GetTick>
 8003700:	4602      	mov	r2, r0
 8003702:	693b      	ldr	r3, [r7, #16]
 8003704:	1ad3      	subs	r3, r2, r3
 8003706:	2b02      	cmp	r3, #2
 8003708:	d901      	bls.n	800370e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800370a:	2303      	movs	r3, #3
 800370c:	e087      	b.n	800381e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800370e:	4b27      	ldr	r3, [pc, #156]	; (80037ac <HAL_RCC_OscConfig+0x470>)
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003716:	2b00      	cmp	r3, #0
 8003718:	d1f0      	bne.n	80036fc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	69da      	ldr	r2, [r3, #28]
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6a1b      	ldr	r3, [r3, #32]
 8003722:	431a      	orrs	r2, r3
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003728:	019b      	lsls	r3, r3, #6
 800372a:	431a      	orrs	r2, r3
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003730:	085b      	lsrs	r3, r3, #1
 8003732:	3b01      	subs	r3, #1
 8003734:	041b      	lsls	r3, r3, #16
 8003736:	431a      	orrs	r2, r3
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800373c:	061b      	lsls	r3, r3, #24
 800373e:	491b      	ldr	r1, [pc, #108]	; (80037ac <HAL_RCC_OscConfig+0x470>)
 8003740:	4313      	orrs	r3, r2
 8003742:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003744:	4b1b      	ldr	r3, [pc, #108]	; (80037b4 <HAL_RCC_OscConfig+0x478>)
 8003746:	2201      	movs	r2, #1
 8003748:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800374a:	f7fd fd79 	bl	8001240 <HAL_GetTick>
 800374e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003750:	e008      	b.n	8003764 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003752:	f7fd fd75 	bl	8001240 <HAL_GetTick>
 8003756:	4602      	mov	r2, r0
 8003758:	693b      	ldr	r3, [r7, #16]
 800375a:	1ad3      	subs	r3, r2, r3
 800375c:	2b02      	cmp	r3, #2
 800375e:	d901      	bls.n	8003764 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003760:	2303      	movs	r3, #3
 8003762:	e05c      	b.n	800381e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003764:	4b11      	ldr	r3, [pc, #68]	; (80037ac <HAL_RCC_OscConfig+0x470>)
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800376c:	2b00      	cmp	r3, #0
 800376e:	d0f0      	beq.n	8003752 <HAL_RCC_OscConfig+0x416>
 8003770:	e054      	b.n	800381c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003772:	4b10      	ldr	r3, [pc, #64]	; (80037b4 <HAL_RCC_OscConfig+0x478>)
 8003774:	2200      	movs	r2, #0
 8003776:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003778:	f7fd fd62 	bl	8001240 <HAL_GetTick>
 800377c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800377e:	e008      	b.n	8003792 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003780:	f7fd fd5e 	bl	8001240 <HAL_GetTick>
 8003784:	4602      	mov	r2, r0
 8003786:	693b      	ldr	r3, [r7, #16]
 8003788:	1ad3      	subs	r3, r2, r3
 800378a:	2b02      	cmp	r3, #2
 800378c:	d901      	bls.n	8003792 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800378e:	2303      	movs	r3, #3
 8003790:	e045      	b.n	800381e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003792:	4b06      	ldr	r3, [pc, #24]	; (80037ac <HAL_RCC_OscConfig+0x470>)
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800379a:	2b00      	cmp	r3, #0
 800379c:	d1f0      	bne.n	8003780 <HAL_RCC_OscConfig+0x444>
 800379e:	e03d      	b.n	800381c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	699b      	ldr	r3, [r3, #24]
 80037a4:	2b01      	cmp	r3, #1
 80037a6:	d107      	bne.n	80037b8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80037a8:	2301      	movs	r3, #1
 80037aa:	e038      	b.n	800381e <HAL_RCC_OscConfig+0x4e2>
 80037ac:	40023800 	.word	0x40023800
 80037b0:	40007000 	.word	0x40007000
 80037b4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80037b8:	4b1b      	ldr	r3, [pc, #108]	; (8003828 <HAL_RCC_OscConfig+0x4ec>)
 80037ba:	685b      	ldr	r3, [r3, #4]
 80037bc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	699b      	ldr	r3, [r3, #24]
 80037c2:	2b01      	cmp	r3, #1
 80037c4:	d028      	beq.n	8003818 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80037d0:	429a      	cmp	r2, r3
 80037d2:	d121      	bne.n	8003818 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037de:	429a      	cmp	r2, r3
 80037e0:	d11a      	bne.n	8003818 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80037e2:	68fa      	ldr	r2, [r7, #12]
 80037e4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80037e8:	4013      	ands	r3, r2
 80037ea:	687a      	ldr	r2, [r7, #4]
 80037ec:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80037ee:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80037f0:	4293      	cmp	r3, r2
 80037f2:	d111      	bne.n	8003818 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037fe:	085b      	lsrs	r3, r3, #1
 8003800:	3b01      	subs	r3, #1
 8003802:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003804:	429a      	cmp	r2, r3
 8003806:	d107      	bne.n	8003818 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003812:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003814:	429a      	cmp	r2, r3
 8003816:	d001      	beq.n	800381c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003818:	2301      	movs	r3, #1
 800381a:	e000      	b.n	800381e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800381c:	2300      	movs	r3, #0
}
 800381e:	4618      	mov	r0, r3
 8003820:	3718      	adds	r7, #24
 8003822:	46bd      	mov	sp, r7
 8003824:	bd80      	pop	{r7, pc}
 8003826:	bf00      	nop
 8003828:	40023800 	.word	0x40023800

0800382c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800382c:	b580      	push	{r7, lr}
 800382e:	b084      	sub	sp, #16
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
 8003834:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	2b00      	cmp	r3, #0
 800383a:	d101      	bne.n	8003840 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800383c:	2301      	movs	r3, #1
 800383e:	e0cc      	b.n	80039da <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003840:	4b68      	ldr	r3, [pc, #416]	; (80039e4 <HAL_RCC_ClockConfig+0x1b8>)
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f003 0307 	and.w	r3, r3, #7
 8003848:	683a      	ldr	r2, [r7, #0]
 800384a:	429a      	cmp	r2, r3
 800384c:	d90c      	bls.n	8003868 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800384e:	4b65      	ldr	r3, [pc, #404]	; (80039e4 <HAL_RCC_ClockConfig+0x1b8>)
 8003850:	683a      	ldr	r2, [r7, #0]
 8003852:	b2d2      	uxtb	r2, r2
 8003854:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003856:	4b63      	ldr	r3, [pc, #396]	; (80039e4 <HAL_RCC_ClockConfig+0x1b8>)
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f003 0307 	and.w	r3, r3, #7
 800385e:	683a      	ldr	r2, [r7, #0]
 8003860:	429a      	cmp	r2, r3
 8003862:	d001      	beq.n	8003868 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003864:	2301      	movs	r3, #1
 8003866:	e0b8      	b.n	80039da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f003 0302 	and.w	r3, r3, #2
 8003870:	2b00      	cmp	r3, #0
 8003872:	d020      	beq.n	80038b6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f003 0304 	and.w	r3, r3, #4
 800387c:	2b00      	cmp	r3, #0
 800387e:	d005      	beq.n	800388c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003880:	4b59      	ldr	r3, [pc, #356]	; (80039e8 <HAL_RCC_ClockConfig+0x1bc>)
 8003882:	689b      	ldr	r3, [r3, #8]
 8003884:	4a58      	ldr	r2, [pc, #352]	; (80039e8 <HAL_RCC_ClockConfig+0x1bc>)
 8003886:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800388a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f003 0308 	and.w	r3, r3, #8
 8003894:	2b00      	cmp	r3, #0
 8003896:	d005      	beq.n	80038a4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003898:	4b53      	ldr	r3, [pc, #332]	; (80039e8 <HAL_RCC_ClockConfig+0x1bc>)
 800389a:	689b      	ldr	r3, [r3, #8]
 800389c:	4a52      	ldr	r2, [pc, #328]	; (80039e8 <HAL_RCC_ClockConfig+0x1bc>)
 800389e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80038a2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80038a4:	4b50      	ldr	r3, [pc, #320]	; (80039e8 <HAL_RCC_ClockConfig+0x1bc>)
 80038a6:	689b      	ldr	r3, [r3, #8]
 80038a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	689b      	ldr	r3, [r3, #8]
 80038b0:	494d      	ldr	r1, [pc, #308]	; (80039e8 <HAL_RCC_ClockConfig+0x1bc>)
 80038b2:	4313      	orrs	r3, r2
 80038b4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f003 0301 	and.w	r3, r3, #1
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d044      	beq.n	800394c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	685b      	ldr	r3, [r3, #4]
 80038c6:	2b01      	cmp	r3, #1
 80038c8:	d107      	bne.n	80038da <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038ca:	4b47      	ldr	r3, [pc, #284]	; (80039e8 <HAL_RCC_ClockConfig+0x1bc>)
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d119      	bne.n	800390a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038d6:	2301      	movs	r3, #1
 80038d8:	e07f      	b.n	80039da <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	685b      	ldr	r3, [r3, #4]
 80038de:	2b02      	cmp	r3, #2
 80038e0:	d003      	beq.n	80038ea <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80038e6:	2b03      	cmp	r3, #3
 80038e8:	d107      	bne.n	80038fa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038ea:	4b3f      	ldr	r3, [pc, #252]	; (80039e8 <HAL_RCC_ClockConfig+0x1bc>)
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d109      	bne.n	800390a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038f6:	2301      	movs	r3, #1
 80038f8:	e06f      	b.n	80039da <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038fa:	4b3b      	ldr	r3, [pc, #236]	; (80039e8 <HAL_RCC_ClockConfig+0x1bc>)
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f003 0302 	and.w	r3, r3, #2
 8003902:	2b00      	cmp	r3, #0
 8003904:	d101      	bne.n	800390a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003906:	2301      	movs	r3, #1
 8003908:	e067      	b.n	80039da <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800390a:	4b37      	ldr	r3, [pc, #220]	; (80039e8 <HAL_RCC_ClockConfig+0x1bc>)
 800390c:	689b      	ldr	r3, [r3, #8]
 800390e:	f023 0203 	bic.w	r2, r3, #3
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	685b      	ldr	r3, [r3, #4]
 8003916:	4934      	ldr	r1, [pc, #208]	; (80039e8 <HAL_RCC_ClockConfig+0x1bc>)
 8003918:	4313      	orrs	r3, r2
 800391a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800391c:	f7fd fc90 	bl	8001240 <HAL_GetTick>
 8003920:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003922:	e00a      	b.n	800393a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003924:	f7fd fc8c 	bl	8001240 <HAL_GetTick>
 8003928:	4602      	mov	r2, r0
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	1ad3      	subs	r3, r2, r3
 800392e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003932:	4293      	cmp	r3, r2
 8003934:	d901      	bls.n	800393a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003936:	2303      	movs	r3, #3
 8003938:	e04f      	b.n	80039da <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800393a:	4b2b      	ldr	r3, [pc, #172]	; (80039e8 <HAL_RCC_ClockConfig+0x1bc>)
 800393c:	689b      	ldr	r3, [r3, #8]
 800393e:	f003 020c 	and.w	r2, r3, #12
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	685b      	ldr	r3, [r3, #4]
 8003946:	009b      	lsls	r3, r3, #2
 8003948:	429a      	cmp	r2, r3
 800394a:	d1eb      	bne.n	8003924 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800394c:	4b25      	ldr	r3, [pc, #148]	; (80039e4 <HAL_RCC_ClockConfig+0x1b8>)
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f003 0307 	and.w	r3, r3, #7
 8003954:	683a      	ldr	r2, [r7, #0]
 8003956:	429a      	cmp	r2, r3
 8003958:	d20c      	bcs.n	8003974 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800395a:	4b22      	ldr	r3, [pc, #136]	; (80039e4 <HAL_RCC_ClockConfig+0x1b8>)
 800395c:	683a      	ldr	r2, [r7, #0]
 800395e:	b2d2      	uxtb	r2, r2
 8003960:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003962:	4b20      	ldr	r3, [pc, #128]	; (80039e4 <HAL_RCC_ClockConfig+0x1b8>)
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f003 0307 	and.w	r3, r3, #7
 800396a:	683a      	ldr	r2, [r7, #0]
 800396c:	429a      	cmp	r2, r3
 800396e:	d001      	beq.n	8003974 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003970:	2301      	movs	r3, #1
 8003972:	e032      	b.n	80039da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f003 0304 	and.w	r3, r3, #4
 800397c:	2b00      	cmp	r3, #0
 800397e:	d008      	beq.n	8003992 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003980:	4b19      	ldr	r3, [pc, #100]	; (80039e8 <HAL_RCC_ClockConfig+0x1bc>)
 8003982:	689b      	ldr	r3, [r3, #8]
 8003984:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	68db      	ldr	r3, [r3, #12]
 800398c:	4916      	ldr	r1, [pc, #88]	; (80039e8 <HAL_RCC_ClockConfig+0x1bc>)
 800398e:	4313      	orrs	r3, r2
 8003990:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f003 0308 	and.w	r3, r3, #8
 800399a:	2b00      	cmp	r3, #0
 800399c:	d009      	beq.n	80039b2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800399e:	4b12      	ldr	r3, [pc, #72]	; (80039e8 <HAL_RCC_ClockConfig+0x1bc>)
 80039a0:	689b      	ldr	r3, [r3, #8]
 80039a2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	691b      	ldr	r3, [r3, #16]
 80039aa:	00db      	lsls	r3, r3, #3
 80039ac:	490e      	ldr	r1, [pc, #56]	; (80039e8 <HAL_RCC_ClockConfig+0x1bc>)
 80039ae:	4313      	orrs	r3, r2
 80039b0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80039b2:	f000 f821 	bl	80039f8 <HAL_RCC_GetSysClockFreq>
 80039b6:	4602      	mov	r2, r0
 80039b8:	4b0b      	ldr	r3, [pc, #44]	; (80039e8 <HAL_RCC_ClockConfig+0x1bc>)
 80039ba:	689b      	ldr	r3, [r3, #8]
 80039bc:	091b      	lsrs	r3, r3, #4
 80039be:	f003 030f 	and.w	r3, r3, #15
 80039c2:	490a      	ldr	r1, [pc, #40]	; (80039ec <HAL_RCC_ClockConfig+0x1c0>)
 80039c4:	5ccb      	ldrb	r3, [r1, r3]
 80039c6:	fa22 f303 	lsr.w	r3, r2, r3
 80039ca:	4a09      	ldr	r2, [pc, #36]	; (80039f0 <HAL_RCC_ClockConfig+0x1c4>)
 80039cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80039ce:	4b09      	ldr	r3, [pc, #36]	; (80039f4 <HAL_RCC_ClockConfig+0x1c8>)
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	4618      	mov	r0, r3
 80039d4:	f7fd fbf0 	bl	80011b8 <HAL_InitTick>

  return HAL_OK;
 80039d8:	2300      	movs	r3, #0
}
 80039da:	4618      	mov	r0, r3
 80039dc:	3710      	adds	r7, #16
 80039de:	46bd      	mov	sp, r7
 80039e0:	bd80      	pop	{r7, pc}
 80039e2:	bf00      	nop
 80039e4:	40023c00 	.word	0x40023c00
 80039e8:	40023800 	.word	0x40023800
 80039ec:	08009a54 	.word	0x08009a54
 80039f0:	20000000 	.word	0x20000000
 80039f4:	20000028 	.word	0x20000028

080039f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80039f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80039fc:	b090      	sub	sp, #64	; 0x40
 80039fe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003a00:	2300      	movs	r3, #0
 8003a02:	637b      	str	r3, [r7, #52]	; 0x34
 8003a04:	2300      	movs	r3, #0
 8003a06:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003a08:	2300      	movs	r3, #0
 8003a0a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003a10:	4b59      	ldr	r3, [pc, #356]	; (8003b78 <HAL_RCC_GetSysClockFreq+0x180>)
 8003a12:	689b      	ldr	r3, [r3, #8]
 8003a14:	f003 030c 	and.w	r3, r3, #12
 8003a18:	2b08      	cmp	r3, #8
 8003a1a:	d00d      	beq.n	8003a38 <HAL_RCC_GetSysClockFreq+0x40>
 8003a1c:	2b08      	cmp	r3, #8
 8003a1e:	f200 80a1 	bhi.w	8003b64 <HAL_RCC_GetSysClockFreq+0x16c>
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d002      	beq.n	8003a2c <HAL_RCC_GetSysClockFreq+0x34>
 8003a26:	2b04      	cmp	r3, #4
 8003a28:	d003      	beq.n	8003a32 <HAL_RCC_GetSysClockFreq+0x3a>
 8003a2a:	e09b      	b.n	8003b64 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003a2c:	4b53      	ldr	r3, [pc, #332]	; (8003b7c <HAL_RCC_GetSysClockFreq+0x184>)
 8003a2e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003a30:	e09b      	b.n	8003b6a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003a32:	4b53      	ldr	r3, [pc, #332]	; (8003b80 <HAL_RCC_GetSysClockFreq+0x188>)
 8003a34:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003a36:	e098      	b.n	8003b6a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003a38:	4b4f      	ldr	r3, [pc, #316]	; (8003b78 <HAL_RCC_GetSysClockFreq+0x180>)
 8003a3a:	685b      	ldr	r3, [r3, #4]
 8003a3c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003a40:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003a42:	4b4d      	ldr	r3, [pc, #308]	; (8003b78 <HAL_RCC_GetSysClockFreq+0x180>)
 8003a44:	685b      	ldr	r3, [r3, #4]
 8003a46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d028      	beq.n	8003aa0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a4e:	4b4a      	ldr	r3, [pc, #296]	; (8003b78 <HAL_RCC_GetSysClockFreq+0x180>)
 8003a50:	685b      	ldr	r3, [r3, #4]
 8003a52:	099b      	lsrs	r3, r3, #6
 8003a54:	2200      	movs	r2, #0
 8003a56:	623b      	str	r3, [r7, #32]
 8003a58:	627a      	str	r2, [r7, #36]	; 0x24
 8003a5a:	6a3b      	ldr	r3, [r7, #32]
 8003a5c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003a60:	2100      	movs	r1, #0
 8003a62:	4b47      	ldr	r3, [pc, #284]	; (8003b80 <HAL_RCC_GetSysClockFreq+0x188>)
 8003a64:	fb03 f201 	mul.w	r2, r3, r1
 8003a68:	2300      	movs	r3, #0
 8003a6a:	fb00 f303 	mul.w	r3, r0, r3
 8003a6e:	4413      	add	r3, r2
 8003a70:	4a43      	ldr	r2, [pc, #268]	; (8003b80 <HAL_RCC_GetSysClockFreq+0x188>)
 8003a72:	fba0 1202 	umull	r1, r2, r0, r2
 8003a76:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003a78:	460a      	mov	r2, r1
 8003a7a:	62ba      	str	r2, [r7, #40]	; 0x28
 8003a7c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003a7e:	4413      	add	r3, r2
 8003a80:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003a82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a84:	2200      	movs	r2, #0
 8003a86:	61bb      	str	r3, [r7, #24]
 8003a88:	61fa      	str	r2, [r7, #28]
 8003a8a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003a8e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003a92:	f7fc fbf5 	bl	8000280 <__aeabi_uldivmod>
 8003a96:	4602      	mov	r2, r0
 8003a98:	460b      	mov	r3, r1
 8003a9a:	4613      	mov	r3, r2
 8003a9c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003a9e:	e053      	b.n	8003b48 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003aa0:	4b35      	ldr	r3, [pc, #212]	; (8003b78 <HAL_RCC_GetSysClockFreq+0x180>)
 8003aa2:	685b      	ldr	r3, [r3, #4]
 8003aa4:	099b      	lsrs	r3, r3, #6
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	613b      	str	r3, [r7, #16]
 8003aaa:	617a      	str	r2, [r7, #20]
 8003aac:	693b      	ldr	r3, [r7, #16]
 8003aae:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003ab2:	f04f 0b00 	mov.w	fp, #0
 8003ab6:	4652      	mov	r2, sl
 8003ab8:	465b      	mov	r3, fp
 8003aba:	f04f 0000 	mov.w	r0, #0
 8003abe:	f04f 0100 	mov.w	r1, #0
 8003ac2:	0159      	lsls	r1, r3, #5
 8003ac4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003ac8:	0150      	lsls	r0, r2, #5
 8003aca:	4602      	mov	r2, r0
 8003acc:	460b      	mov	r3, r1
 8003ace:	ebb2 080a 	subs.w	r8, r2, sl
 8003ad2:	eb63 090b 	sbc.w	r9, r3, fp
 8003ad6:	f04f 0200 	mov.w	r2, #0
 8003ada:	f04f 0300 	mov.w	r3, #0
 8003ade:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003ae2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003ae6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003aea:	ebb2 0408 	subs.w	r4, r2, r8
 8003aee:	eb63 0509 	sbc.w	r5, r3, r9
 8003af2:	f04f 0200 	mov.w	r2, #0
 8003af6:	f04f 0300 	mov.w	r3, #0
 8003afa:	00eb      	lsls	r3, r5, #3
 8003afc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003b00:	00e2      	lsls	r2, r4, #3
 8003b02:	4614      	mov	r4, r2
 8003b04:	461d      	mov	r5, r3
 8003b06:	eb14 030a 	adds.w	r3, r4, sl
 8003b0a:	603b      	str	r3, [r7, #0]
 8003b0c:	eb45 030b 	adc.w	r3, r5, fp
 8003b10:	607b      	str	r3, [r7, #4]
 8003b12:	f04f 0200 	mov.w	r2, #0
 8003b16:	f04f 0300 	mov.w	r3, #0
 8003b1a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003b1e:	4629      	mov	r1, r5
 8003b20:	028b      	lsls	r3, r1, #10
 8003b22:	4621      	mov	r1, r4
 8003b24:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003b28:	4621      	mov	r1, r4
 8003b2a:	028a      	lsls	r2, r1, #10
 8003b2c:	4610      	mov	r0, r2
 8003b2e:	4619      	mov	r1, r3
 8003b30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b32:	2200      	movs	r2, #0
 8003b34:	60bb      	str	r3, [r7, #8]
 8003b36:	60fa      	str	r2, [r7, #12]
 8003b38:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003b3c:	f7fc fba0 	bl	8000280 <__aeabi_uldivmod>
 8003b40:	4602      	mov	r2, r0
 8003b42:	460b      	mov	r3, r1
 8003b44:	4613      	mov	r3, r2
 8003b46:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003b48:	4b0b      	ldr	r3, [pc, #44]	; (8003b78 <HAL_RCC_GetSysClockFreq+0x180>)
 8003b4a:	685b      	ldr	r3, [r3, #4]
 8003b4c:	0c1b      	lsrs	r3, r3, #16
 8003b4e:	f003 0303 	and.w	r3, r3, #3
 8003b52:	3301      	adds	r3, #1
 8003b54:	005b      	lsls	r3, r3, #1
 8003b56:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003b58:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003b5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b60:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003b62:	e002      	b.n	8003b6a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003b64:	4b05      	ldr	r3, [pc, #20]	; (8003b7c <HAL_RCC_GetSysClockFreq+0x184>)
 8003b66:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003b68:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003b6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	3740      	adds	r7, #64	; 0x40
 8003b70:	46bd      	mov	sp, r7
 8003b72:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003b76:	bf00      	nop
 8003b78:	40023800 	.word	0x40023800
 8003b7c:	00f42400 	.word	0x00f42400
 8003b80:	017d7840 	.word	0x017d7840

08003b84 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b84:	b480      	push	{r7}
 8003b86:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003b88:	4b03      	ldr	r3, [pc, #12]	; (8003b98 <HAL_RCC_GetHCLKFreq+0x14>)
 8003b8a:	681b      	ldr	r3, [r3, #0]
}
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b94:	4770      	bx	lr
 8003b96:	bf00      	nop
 8003b98:	20000000 	.word	0x20000000

08003b9c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003ba0:	f7ff fff0 	bl	8003b84 <HAL_RCC_GetHCLKFreq>
 8003ba4:	4602      	mov	r2, r0
 8003ba6:	4b05      	ldr	r3, [pc, #20]	; (8003bbc <HAL_RCC_GetPCLK1Freq+0x20>)
 8003ba8:	689b      	ldr	r3, [r3, #8]
 8003baa:	0a9b      	lsrs	r3, r3, #10
 8003bac:	f003 0307 	and.w	r3, r3, #7
 8003bb0:	4903      	ldr	r1, [pc, #12]	; (8003bc0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003bb2:	5ccb      	ldrb	r3, [r1, r3]
 8003bb4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003bb8:	4618      	mov	r0, r3
 8003bba:	bd80      	pop	{r7, pc}
 8003bbc:	40023800 	.word	0x40023800
 8003bc0:	08009a64 	.word	0x08009a64

08003bc4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003bc8:	f7ff ffdc 	bl	8003b84 <HAL_RCC_GetHCLKFreq>
 8003bcc:	4602      	mov	r2, r0
 8003bce:	4b05      	ldr	r3, [pc, #20]	; (8003be4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003bd0:	689b      	ldr	r3, [r3, #8]
 8003bd2:	0b5b      	lsrs	r3, r3, #13
 8003bd4:	f003 0307 	and.w	r3, r3, #7
 8003bd8:	4903      	ldr	r1, [pc, #12]	; (8003be8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003bda:	5ccb      	ldrb	r3, [r1, r3]
 8003bdc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003be0:	4618      	mov	r0, r3
 8003be2:	bd80      	pop	{r7, pc}
 8003be4:	40023800 	.word	0x40023800
 8003be8:	08009a64 	.word	0x08009a64

08003bec <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	b086      	sub	sp, #24
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003bf4:	2300      	movs	r3, #0
 8003bf6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8003bf8:	2300      	movs	r3, #0
 8003bfa:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f003 0301 	and.w	r3, r3, #1
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d105      	bne.n	8003c14 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d038      	beq.n	8003c86 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003c14:	4b68      	ldr	r3, [pc, #416]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003c16:	2200      	movs	r2, #0
 8003c18:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003c1a:	f7fd fb11 	bl	8001240 <HAL_GetTick>
 8003c1e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003c20:	e008      	b.n	8003c34 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003c22:	f7fd fb0d 	bl	8001240 <HAL_GetTick>
 8003c26:	4602      	mov	r2, r0
 8003c28:	697b      	ldr	r3, [r7, #20]
 8003c2a:	1ad3      	subs	r3, r2, r3
 8003c2c:	2b02      	cmp	r3, #2
 8003c2e:	d901      	bls.n	8003c34 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003c30:	2303      	movs	r3, #3
 8003c32:	e0bd      	b.n	8003db0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003c34:	4b61      	ldr	r3, [pc, #388]	; (8003dbc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d1f0      	bne.n	8003c22 <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	685a      	ldr	r2, [r3, #4]
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	689b      	ldr	r3, [r3, #8]
 8003c48:	019b      	lsls	r3, r3, #6
 8003c4a:	431a      	orrs	r2, r3
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	68db      	ldr	r3, [r3, #12]
 8003c50:	071b      	lsls	r3, r3, #28
 8003c52:	495a      	ldr	r1, [pc, #360]	; (8003dbc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c54:	4313      	orrs	r3, r2
 8003c56:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003c5a:	4b57      	ldr	r3, [pc, #348]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003c5c:	2201      	movs	r2, #1
 8003c5e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003c60:	f7fd faee 	bl	8001240 <HAL_GetTick>
 8003c64:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003c66:	e008      	b.n	8003c7a <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003c68:	f7fd faea 	bl	8001240 <HAL_GetTick>
 8003c6c:	4602      	mov	r2, r0
 8003c6e:	697b      	ldr	r3, [r7, #20]
 8003c70:	1ad3      	subs	r3, r2, r3
 8003c72:	2b02      	cmp	r3, #2
 8003c74:	d901      	bls.n	8003c7a <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003c76:	2303      	movs	r3, #3
 8003c78:	e09a      	b.n	8003db0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003c7a:	4b50      	ldr	r3, [pc, #320]	; (8003dbc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d0f0      	beq.n	8003c68 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f003 0302 	and.w	r3, r3, #2
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	f000 8083 	beq.w	8003d9a <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003c94:	2300      	movs	r3, #0
 8003c96:	60fb      	str	r3, [r7, #12]
 8003c98:	4b48      	ldr	r3, [pc, #288]	; (8003dbc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c9c:	4a47      	ldr	r2, [pc, #284]	; (8003dbc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c9e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ca2:	6413      	str	r3, [r2, #64]	; 0x40
 8003ca4:	4b45      	ldr	r3, [pc, #276]	; (8003dbc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ca6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ca8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cac:	60fb      	str	r3, [r7, #12]
 8003cae:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003cb0:	4b43      	ldr	r3, [pc, #268]	; (8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	4a42      	ldr	r2, [pc, #264]	; (8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003cb6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003cba:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003cbc:	f7fd fac0 	bl	8001240 <HAL_GetTick>
 8003cc0:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003cc2:	e008      	b.n	8003cd6 <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003cc4:	f7fd fabc 	bl	8001240 <HAL_GetTick>
 8003cc8:	4602      	mov	r2, r0
 8003cca:	697b      	ldr	r3, [r7, #20]
 8003ccc:	1ad3      	subs	r3, r2, r3
 8003cce:	2b02      	cmp	r3, #2
 8003cd0:	d901      	bls.n	8003cd6 <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 8003cd2:	2303      	movs	r3, #3
 8003cd4:	e06c      	b.n	8003db0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003cd6:	4b3a      	ldr	r3, [pc, #232]	; (8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d0f0      	beq.n	8003cc4 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003ce2:	4b36      	ldr	r3, [pc, #216]	; (8003dbc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ce4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ce6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003cea:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003cec:	693b      	ldr	r3, [r7, #16]
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d02f      	beq.n	8003d52 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	691b      	ldr	r3, [r3, #16]
 8003cf6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003cfa:	693a      	ldr	r2, [r7, #16]
 8003cfc:	429a      	cmp	r2, r3
 8003cfe:	d028      	beq.n	8003d52 <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003d00:	4b2e      	ldr	r3, [pc, #184]	; (8003dbc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d04:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d08:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003d0a:	4b2e      	ldr	r3, [pc, #184]	; (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003d0c:	2201      	movs	r2, #1
 8003d0e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003d10:	4b2c      	ldr	r3, [pc, #176]	; (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003d12:	2200      	movs	r2, #0
 8003d14:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003d16:	4a29      	ldr	r2, [pc, #164]	; (8003dbc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d18:	693b      	ldr	r3, [r7, #16]
 8003d1a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003d1c:	4b27      	ldr	r3, [pc, #156]	; (8003dbc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d20:	f003 0301 	and.w	r3, r3, #1
 8003d24:	2b01      	cmp	r3, #1
 8003d26:	d114      	bne.n	8003d52 <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003d28:	f7fd fa8a 	bl	8001240 <HAL_GetTick>
 8003d2c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d2e:	e00a      	b.n	8003d46 <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d30:	f7fd fa86 	bl	8001240 <HAL_GetTick>
 8003d34:	4602      	mov	r2, r0
 8003d36:	697b      	ldr	r3, [r7, #20]
 8003d38:	1ad3      	subs	r3, r2, r3
 8003d3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	d901      	bls.n	8003d46 <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8003d42:	2303      	movs	r3, #3
 8003d44:	e034      	b.n	8003db0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d46:	4b1d      	ldr	r3, [pc, #116]	; (8003dbc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d4a:	f003 0302 	and.w	r3, r3, #2
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d0ee      	beq.n	8003d30 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	691b      	ldr	r3, [r3, #16]
 8003d56:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d5a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003d5e:	d10d      	bne.n	8003d7c <HAL_RCCEx_PeriphCLKConfig+0x190>
 8003d60:	4b16      	ldr	r3, [pc, #88]	; (8003dbc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d62:	689b      	ldr	r3, [r3, #8]
 8003d64:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	691b      	ldr	r3, [r3, #16]
 8003d6c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8003d70:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d74:	4911      	ldr	r1, [pc, #68]	; (8003dbc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d76:	4313      	orrs	r3, r2
 8003d78:	608b      	str	r3, [r1, #8]
 8003d7a:	e005      	b.n	8003d88 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8003d7c:	4b0f      	ldr	r3, [pc, #60]	; (8003dbc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d7e:	689b      	ldr	r3, [r3, #8]
 8003d80:	4a0e      	ldr	r2, [pc, #56]	; (8003dbc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d82:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003d86:	6093      	str	r3, [r2, #8]
 8003d88:	4b0c      	ldr	r3, [pc, #48]	; (8003dbc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d8a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	691b      	ldr	r3, [r3, #16]
 8003d90:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d94:	4909      	ldr	r1, [pc, #36]	; (8003dbc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d96:	4313      	orrs	r3, r2
 8003d98:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f003 0308 	and.w	r3, r3, #8
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d003      	beq.n	8003dae <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	7d1a      	ldrb	r2, [r3, #20]
 8003daa:	4b07      	ldr	r3, [pc, #28]	; (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8003dac:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8003dae:	2300      	movs	r3, #0
}
 8003db0:	4618      	mov	r0, r3
 8003db2:	3718      	adds	r7, #24
 8003db4:	46bd      	mov	sp, r7
 8003db6:	bd80      	pop	{r7, pc}
 8003db8:	42470068 	.word	0x42470068
 8003dbc:	40023800 	.word	0x40023800
 8003dc0:	40007000 	.word	0x40007000
 8003dc4:	42470e40 	.word	0x42470e40
 8003dc8:	424711e0 	.word	0x424711e0

08003dcc <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	b082      	sub	sp, #8
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d101      	bne.n	8003dde <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8003dda:	2301      	movs	r3, #1
 8003ddc:	e083      	b.n	8003ee6 <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	7f5b      	ldrb	r3, [r3, #29]
 8003de2:	b2db      	uxtb	r3, r3
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d105      	bne.n	8003df4 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2200      	movs	r2, #0
 8003dec:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8003dee:	6878      	ldr	r0, [r7, #4]
 8003df0:	f7fc ff32 	bl	8000c58 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2202      	movs	r2, #2
 8003df8:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	22ca      	movs	r2, #202	; 0xca
 8003e00:	625a      	str	r2, [r3, #36]	; 0x24
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	2253      	movs	r2, #83	; 0x53
 8003e08:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8003e0a:	6878      	ldr	r0, [r7, #4]
 8003e0c:	f000 f897 	bl	8003f3e <RTC_EnterInitMode>
 8003e10:	4603      	mov	r3, r0
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d008      	beq.n	8003e28 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	22ff      	movs	r2, #255	; 0xff
 8003e1c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	2204      	movs	r2, #4
 8003e22:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8003e24:	2301      	movs	r3, #1
 8003e26:	e05e      	b.n	8003ee6 <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	689b      	ldr	r3, [r3, #8]
 8003e2e:	687a      	ldr	r2, [r7, #4]
 8003e30:	6812      	ldr	r2, [r2, #0]
 8003e32:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8003e36:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003e3a:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	6899      	ldr	r1, [r3, #8]
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	685a      	ldr	r2, [r3, #4]
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	691b      	ldr	r3, [r3, #16]
 8003e4a:	431a      	orrs	r2, r3
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	695b      	ldr	r3, [r3, #20]
 8003e50:	431a      	orrs	r2, r3
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	430a      	orrs	r2, r1
 8003e58:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	687a      	ldr	r2, [r7, #4]
 8003e60:	68d2      	ldr	r2, [r2, #12]
 8003e62:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	6919      	ldr	r1, [r3, #16]
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	689b      	ldr	r3, [r3, #8]
 8003e6e:	041a      	lsls	r2, r3, #16
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	430a      	orrs	r2, r1
 8003e76:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	68da      	ldr	r2, [r3, #12]
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003e86:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	689b      	ldr	r3, [r3, #8]
 8003e8e:	f003 0320 	and.w	r3, r3, #32
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d10e      	bne.n	8003eb4 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003e96:	6878      	ldr	r0, [r7, #4]
 8003e98:	f000 f829 	bl	8003eee <HAL_RTC_WaitForSynchro>
 8003e9c:	4603      	mov	r3, r0
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d008      	beq.n	8003eb4 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	22ff      	movs	r2, #255	; 0xff
 8003ea8:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	2204      	movs	r2, #4
 8003eae:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8003eb0:	2301      	movs	r3, #1
 8003eb2:	e018      	b.n	8003ee6 <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003ec2:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	699a      	ldr	r2, [r3, #24]
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	430a      	orrs	r2, r1
 8003ed4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	22ff      	movs	r2, #255	; 0xff
 8003edc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	2201      	movs	r2, #1
 8003ee2:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8003ee4:	2300      	movs	r3, #0
  }
}
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	3708      	adds	r7, #8
 8003eea:	46bd      	mov	sp, r7
 8003eec:	bd80      	pop	{r7, pc}

08003eee <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8003eee:	b580      	push	{r7, lr}
 8003ef0:	b084      	sub	sp, #16
 8003ef2:	af00      	add	r7, sp, #0
 8003ef4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	68da      	ldr	r2, [r3, #12]
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003f08:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003f0a:	f7fd f999 	bl	8001240 <HAL_GetTick>
 8003f0e:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8003f10:	e009      	b.n	8003f26 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8003f12:	f7fd f995 	bl	8001240 <HAL_GetTick>
 8003f16:	4602      	mov	r2, r0
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	1ad3      	subs	r3, r2, r3
 8003f1c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003f20:	d901      	bls.n	8003f26 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8003f22:	2303      	movs	r3, #3
 8003f24:	e007      	b.n	8003f36 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	68db      	ldr	r3, [r3, #12]
 8003f2c:	f003 0320 	and.w	r3, r3, #32
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d0ee      	beq.n	8003f12 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8003f34:	2300      	movs	r3, #0
}
 8003f36:	4618      	mov	r0, r3
 8003f38:	3710      	adds	r7, #16
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	bd80      	pop	{r7, pc}

08003f3e <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8003f3e:	b580      	push	{r7, lr}
 8003f40:	b084      	sub	sp, #16
 8003f42:	af00      	add	r7, sp, #0
 8003f44:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003f46:	2300      	movs	r3, #0
 8003f48:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	68db      	ldr	r3, [r3, #12]
 8003f50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d119      	bne.n	8003f8c <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f04f 32ff 	mov.w	r2, #4294967295
 8003f60:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003f62:	f7fd f96d 	bl	8001240 <HAL_GetTick>
 8003f66:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8003f68:	e009      	b.n	8003f7e <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8003f6a:	f7fd f969 	bl	8001240 <HAL_GetTick>
 8003f6e:	4602      	mov	r2, r0
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	1ad3      	subs	r3, r2, r3
 8003f74:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003f78:	d901      	bls.n	8003f7e <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8003f7a:	2303      	movs	r3, #3
 8003f7c:	e007      	b.n	8003f8e <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	68db      	ldr	r3, [r3, #12]
 8003f84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d0ee      	beq.n	8003f6a <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8003f8c:	2300      	movs	r3, #0
}
 8003f8e:	4618      	mov	r0, r3
 8003f90:	3710      	adds	r7, #16
 8003f92:	46bd      	mov	sp, r7
 8003f94:	bd80      	pop	{r7, pc}

08003f96 <HAL_RTCEx_BKUPWrite>:
  *                                 specify the register.
  * @param  Data Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8003f96:	b480      	push	{r7}
 8003f98:	b087      	sub	sp, #28
 8003f9a:	af00      	add	r7, sp, #0
 8003f9c:	60f8      	str	r0, [r7, #12]
 8003f9e:	60b9      	str	r1, [r7, #8]
 8003fa0:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	3350      	adds	r3, #80	; 0x50
 8003fac:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 8003fae:	68bb      	ldr	r3, [r7, #8]
 8003fb0:	009b      	lsls	r3, r3, #2
 8003fb2:	697a      	ldr	r2, [r7, #20]
 8003fb4:	4413      	add	r3, r2
 8003fb6:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8003fb8:	697b      	ldr	r3, [r7, #20]
 8003fba:	687a      	ldr	r2, [r7, #4]
 8003fbc:	601a      	str	r2, [r3, #0]
}
 8003fbe:	bf00      	nop
 8003fc0:	371c      	adds	r7, #28
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc8:	4770      	bx	lr

08003fca <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx where x can be from 0 to 19 to
  *                                 specify the register.
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 8003fca:	b480      	push	{r7}
 8003fcc:	b085      	sub	sp, #20
 8003fce:	af00      	add	r7, sp, #0
 8003fd0:	6078      	str	r0, [r7, #4]
 8003fd2:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0U;
 8003fd4:	2300      	movs	r3, #0
 8003fd6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	3350      	adds	r3, #80	; 0x50
 8003fde:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 8003fe0:	683b      	ldr	r3, [r7, #0]
 8003fe2:	009b      	lsls	r3, r3, #2
 8003fe4:	68fa      	ldr	r2, [r7, #12]
 8003fe6:	4413      	add	r3, r2
 8003fe8:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	681b      	ldr	r3, [r3, #0]
}
 8003fee:	4618      	mov	r0, r3
 8003ff0:	3714      	adds	r7, #20
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff8:	4770      	bx	lr

08003ffa <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003ffa:	b580      	push	{r7, lr}
 8003ffc:	b082      	sub	sp, #8
 8003ffe:	af00      	add	r7, sp, #0
 8004000:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	2b00      	cmp	r3, #0
 8004006:	d101      	bne.n	800400c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004008:	2301      	movs	r3, #1
 800400a:	e03f      	b.n	800408c <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004012:	b2db      	uxtb	r3, r3
 8004014:	2b00      	cmp	r3, #0
 8004016:	d106      	bne.n	8004026 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2200      	movs	r2, #0
 800401c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004020:	6878      	ldr	r0, [r7, #4]
 8004022:	f7fc ffd9 	bl	8000fd8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	2224      	movs	r2, #36	; 0x24
 800402a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	68da      	ldr	r2, [r3, #12]
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800403c:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800403e:	6878      	ldr	r0, [r7, #4]
 8004040:	f000 ff5a 	bl	8004ef8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	691a      	ldr	r2, [r3, #16]
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004052:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	695a      	ldr	r2, [r3, #20]
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004062:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	68da      	ldr	r2, [r3, #12]
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004072:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2200      	movs	r2, #0
 8004078:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	2220      	movs	r2, #32
 800407e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	2220      	movs	r2, #32
 8004086:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800408a:	2300      	movs	r3, #0
}
 800408c:	4618      	mov	r0, r3
 800408e:	3708      	adds	r7, #8
 8004090:	46bd      	mov	sp, r7
 8004092:	bd80      	pop	{r7, pc}

08004094 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004094:	b580      	push	{r7, lr}
 8004096:	b08a      	sub	sp, #40	; 0x28
 8004098:	af02      	add	r7, sp, #8
 800409a:	60f8      	str	r0, [r7, #12]
 800409c:	60b9      	str	r1, [r7, #8]
 800409e:	603b      	str	r3, [r7, #0]
 80040a0:	4613      	mov	r3, r2
 80040a2:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80040a4:	2300      	movs	r3, #0
 80040a6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040ae:	b2db      	uxtb	r3, r3
 80040b0:	2b20      	cmp	r3, #32
 80040b2:	d17c      	bne.n	80041ae <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80040b4:	68bb      	ldr	r3, [r7, #8]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d002      	beq.n	80040c0 <HAL_UART_Transmit+0x2c>
 80040ba:	88fb      	ldrh	r3, [r7, #6]
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d101      	bne.n	80040c4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80040c0:	2301      	movs	r3, #1
 80040c2:	e075      	b.n	80041b0 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80040ca:	2b01      	cmp	r3, #1
 80040cc:	d101      	bne.n	80040d2 <HAL_UART_Transmit+0x3e>
 80040ce:	2302      	movs	r3, #2
 80040d0:	e06e      	b.n	80041b0 <HAL_UART_Transmit+0x11c>
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	2201      	movs	r2, #1
 80040d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	2200      	movs	r2, #0
 80040de:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	2221      	movs	r2, #33	; 0x21
 80040e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80040e8:	f7fd f8aa 	bl	8001240 <HAL_GetTick>
 80040ec:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	88fa      	ldrh	r2, [r7, #6]
 80040f2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	88fa      	ldrh	r2, [r7, #6]
 80040f8:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	689b      	ldr	r3, [r3, #8]
 80040fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004102:	d108      	bne.n	8004116 <HAL_UART_Transmit+0x82>
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	691b      	ldr	r3, [r3, #16]
 8004108:	2b00      	cmp	r3, #0
 800410a:	d104      	bne.n	8004116 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800410c:	2300      	movs	r3, #0
 800410e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004110:	68bb      	ldr	r3, [r7, #8]
 8004112:	61bb      	str	r3, [r7, #24]
 8004114:	e003      	b.n	800411e <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004116:	68bb      	ldr	r3, [r7, #8]
 8004118:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800411a:	2300      	movs	r3, #0
 800411c:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	2200      	movs	r2, #0
 8004122:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004126:	e02a      	b.n	800417e <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004128:	683b      	ldr	r3, [r7, #0]
 800412a:	9300      	str	r3, [sp, #0]
 800412c:	697b      	ldr	r3, [r7, #20]
 800412e:	2200      	movs	r2, #0
 8004130:	2180      	movs	r1, #128	; 0x80
 8004132:	68f8      	ldr	r0, [r7, #12]
 8004134:	f000 fc16 	bl	8004964 <UART_WaitOnFlagUntilTimeout>
 8004138:	4603      	mov	r3, r0
 800413a:	2b00      	cmp	r3, #0
 800413c:	d001      	beq.n	8004142 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800413e:	2303      	movs	r3, #3
 8004140:	e036      	b.n	80041b0 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004142:	69fb      	ldr	r3, [r7, #28]
 8004144:	2b00      	cmp	r3, #0
 8004146:	d10b      	bne.n	8004160 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004148:	69bb      	ldr	r3, [r7, #24]
 800414a:	881b      	ldrh	r3, [r3, #0]
 800414c:	461a      	mov	r2, r3
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004156:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004158:	69bb      	ldr	r3, [r7, #24]
 800415a:	3302      	adds	r3, #2
 800415c:	61bb      	str	r3, [r7, #24]
 800415e:	e007      	b.n	8004170 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004160:	69fb      	ldr	r3, [r7, #28]
 8004162:	781a      	ldrb	r2, [r3, #0]
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800416a:	69fb      	ldr	r3, [r7, #28]
 800416c:	3301      	adds	r3, #1
 800416e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004174:	b29b      	uxth	r3, r3
 8004176:	3b01      	subs	r3, #1
 8004178:	b29a      	uxth	r2, r3
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004182:	b29b      	uxth	r3, r3
 8004184:	2b00      	cmp	r3, #0
 8004186:	d1cf      	bne.n	8004128 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	9300      	str	r3, [sp, #0]
 800418c:	697b      	ldr	r3, [r7, #20]
 800418e:	2200      	movs	r2, #0
 8004190:	2140      	movs	r1, #64	; 0x40
 8004192:	68f8      	ldr	r0, [r7, #12]
 8004194:	f000 fbe6 	bl	8004964 <UART_WaitOnFlagUntilTimeout>
 8004198:	4603      	mov	r3, r0
 800419a:	2b00      	cmp	r3, #0
 800419c:	d001      	beq.n	80041a2 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800419e:	2303      	movs	r3, #3
 80041a0:	e006      	b.n	80041b0 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	2220      	movs	r2, #32
 80041a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80041aa:	2300      	movs	r3, #0
 80041ac:	e000      	b.n	80041b0 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80041ae:	2302      	movs	r3, #2
  }
}
 80041b0:	4618      	mov	r0, r3
 80041b2:	3720      	adds	r7, #32
 80041b4:	46bd      	mov	sp, r7
 80041b6:	bd80      	pop	{r7, pc}

080041b8 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80041b8:	b580      	push	{r7, lr}
 80041ba:	b084      	sub	sp, #16
 80041bc:	af00      	add	r7, sp, #0
 80041be:	60f8      	str	r0, [r7, #12]
 80041c0:	60b9      	str	r1, [r7, #8]
 80041c2:	4613      	mov	r3, r2
 80041c4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80041cc:	b2db      	uxtb	r3, r3
 80041ce:	2b20      	cmp	r3, #32
 80041d0:	d11d      	bne.n	800420e <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80041d2:	68bb      	ldr	r3, [r7, #8]
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d002      	beq.n	80041de <HAL_UART_Receive_DMA+0x26>
 80041d8:	88fb      	ldrh	r3, [r7, #6]
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d101      	bne.n	80041e2 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80041de:	2301      	movs	r3, #1
 80041e0:	e016      	b.n	8004210 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80041e8:	2b01      	cmp	r3, #1
 80041ea:	d101      	bne.n	80041f0 <HAL_UART_Receive_DMA+0x38>
 80041ec:	2302      	movs	r3, #2
 80041ee:	e00f      	b.n	8004210 <HAL_UART_Receive_DMA+0x58>
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	2201      	movs	r2, #1
 80041f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	2200      	movs	r2, #0
 80041fc:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80041fe:	88fb      	ldrh	r3, [r7, #6]
 8004200:	461a      	mov	r2, r3
 8004202:	68b9      	ldr	r1, [r7, #8]
 8004204:	68f8      	ldr	r0, [r7, #12]
 8004206:	f000 fc1b 	bl	8004a40 <UART_Start_Receive_DMA>
 800420a:	4603      	mov	r3, r0
 800420c:	e000      	b.n	8004210 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 800420e:	2302      	movs	r3, #2
  }
}
 8004210:	4618      	mov	r0, r3
 8004212:	3710      	adds	r7, #16
 8004214:	46bd      	mov	sp, r7
 8004216:	bd80      	pop	{r7, pc}

08004218 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004218:	b580      	push	{r7, lr}
 800421a:	b0ba      	sub	sp, #232	; 0xe8
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	68db      	ldr	r3, [r3, #12]
 8004230:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	695b      	ldr	r3, [r3, #20]
 800423a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800423e:	2300      	movs	r3, #0
 8004240:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004244:	2300      	movs	r3, #0
 8004246:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800424a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800424e:	f003 030f 	and.w	r3, r3, #15
 8004252:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004256:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800425a:	2b00      	cmp	r3, #0
 800425c:	d10f      	bne.n	800427e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800425e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004262:	f003 0320 	and.w	r3, r3, #32
 8004266:	2b00      	cmp	r3, #0
 8004268:	d009      	beq.n	800427e <HAL_UART_IRQHandler+0x66>
 800426a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800426e:	f003 0320 	and.w	r3, r3, #32
 8004272:	2b00      	cmp	r3, #0
 8004274:	d003      	beq.n	800427e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004276:	6878      	ldr	r0, [r7, #4]
 8004278:	f000 fd83 	bl	8004d82 <UART_Receive_IT>
      return;
 800427c:	e256      	b.n	800472c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800427e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004282:	2b00      	cmp	r3, #0
 8004284:	f000 80de 	beq.w	8004444 <HAL_UART_IRQHandler+0x22c>
 8004288:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800428c:	f003 0301 	and.w	r3, r3, #1
 8004290:	2b00      	cmp	r3, #0
 8004292:	d106      	bne.n	80042a2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004294:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004298:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800429c:	2b00      	cmp	r3, #0
 800429e:	f000 80d1 	beq.w	8004444 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80042a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80042a6:	f003 0301 	and.w	r3, r3, #1
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d00b      	beq.n	80042c6 <HAL_UART_IRQHandler+0xae>
 80042ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80042b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d005      	beq.n	80042c6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042be:	f043 0201 	orr.w	r2, r3, #1
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80042c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80042ca:	f003 0304 	and.w	r3, r3, #4
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d00b      	beq.n	80042ea <HAL_UART_IRQHandler+0xd2>
 80042d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80042d6:	f003 0301 	and.w	r3, r3, #1
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d005      	beq.n	80042ea <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042e2:	f043 0202 	orr.w	r2, r3, #2
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80042ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80042ee:	f003 0302 	and.w	r3, r3, #2
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d00b      	beq.n	800430e <HAL_UART_IRQHandler+0xf6>
 80042f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80042fa:	f003 0301 	and.w	r3, r3, #1
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d005      	beq.n	800430e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004306:	f043 0204 	orr.w	r2, r3, #4
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800430e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004312:	f003 0308 	and.w	r3, r3, #8
 8004316:	2b00      	cmp	r3, #0
 8004318:	d011      	beq.n	800433e <HAL_UART_IRQHandler+0x126>
 800431a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800431e:	f003 0320 	and.w	r3, r3, #32
 8004322:	2b00      	cmp	r3, #0
 8004324:	d105      	bne.n	8004332 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004326:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800432a:	f003 0301 	and.w	r3, r3, #1
 800432e:	2b00      	cmp	r3, #0
 8004330:	d005      	beq.n	800433e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004336:	f043 0208 	orr.w	r2, r3, #8
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004342:	2b00      	cmp	r3, #0
 8004344:	f000 81ed 	beq.w	8004722 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004348:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800434c:	f003 0320 	and.w	r3, r3, #32
 8004350:	2b00      	cmp	r3, #0
 8004352:	d008      	beq.n	8004366 <HAL_UART_IRQHandler+0x14e>
 8004354:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004358:	f003 0320 	and.w	r3, r3, #32
 800435c:	2b00      	cmp	r3, #0
 800435e:	d002      	beq.n	8004366 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004360:	6878      	ldr	r0, [r7, #4]
 8004362:	f000 fd0e 	bl	8004d82 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	695b      	ldr	r3, [r3, #20]
 800436c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004370:	2b40      	cmp	r3, #64	; 0x40
 8004372:	bf0c      	ite	eq
 8004374:	2301      	moveq	r3, #1
 8004376:	2300      	movne	r3, #0
 8004378:	b2db      	uxtb	r3, r3
 800437a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004382:	f003 0308 	and.w	r3, r3, #8
 8004386:	2b00      	cmp	r3, #0
 8004388:	d103      	bne.n	8004392 <HAL_UART_IRQHandler+0x17a>
 800438a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800438e:	2b00      	cmp	r3, #0
 8004390:	d04f      	beq.n	8004432 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004392:	6878      	ldr	r0, [r7, #4]
 8004394:	f000 fc16 	bl	8004bc4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	695b      	ldr	r3, [r3, #20]
 800439e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043a2:	2b40      	cmp	r3, #64	; 0x40
 80043a4:	d141      	bne.n	800442a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	3314      	adds	r3, #20
 80043ac:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043b0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80043b4:	e853 3f00 	ldrex	r3, [r3]
 80043b8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80043bc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80043c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80043c4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	3314      	adds	r3, #20
 80043ce:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80043d2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80043d6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043da:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80043de:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80043e2:	e841 2300 	strex	r3, r2, [r1]
 80043e6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80043ea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d1d9      	bne.n	80043a6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d013      	beq.n	8004422 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043fe:	4a7d      	ldr	r2, [pc, #500]	; (80045f4 <HAL_UART_IRQHandler+0x3dc>)
 8004400:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004406:	4618      	mov	r0, r3
 8004408:	f7fd f9d2 	bl	80017b0 <HAL_DMA_Abort_IT>
 800440c:	4603      	mov	r3, r0
 800440e:	2b00      	cmp	r3, #0
 8004410:	d016      	beq.n	8004440 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004416:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004418:	687a      	ldr	r2, [r7, #4]
 800441a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800441c:	4610      	mov	r0, r2
 800441e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004420:	e00e      	b.n	8004440 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004422:	6878      	ldr	r0, [r7, #4]
 8004424:	f7fc fdc4 	bl	8000fb0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004428:	e00a      	b.n	8004440 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800442a:	6878      	ldr	r0, [r7, #4]
 800442c:	f7fc fdc0 	bl	8000fb0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004430:	e006      	b.n	8004440 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004432:	6878      	ldr	r0, [r7, #4]
 8004434:	f7fc fdbc 	bl	8000fb0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2200      	movs	r2, #0
 800443c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800443e:	e170      	b.n	8004722 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004440:	bf00      	nop
    return;
 8004442:	e16e      	b.n	8004722 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004448:	2b01      	cmp	r3, #1
 800444a:	f040 814a 	bne.w	80046e2 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800444e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004452:	f003 0310 	and.w	r3, r3, #16
 8004456:	2b00      	cmp	r3, #0
 8004458:	f000 8143 	beq.w	80046e2 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800445c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004460:	f003 0310 	and.w	r3, r3, #16
 8004464:	2b00      	cmp	r3, #0
 8004466:	f000 813c 	beq.w	80046e2 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800446a:	2300      	movs	r3, #0
 800446c:	60bb      	str	r3, [r7, #8]
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	60bb      	str	r3, [r7, #8]
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	685b      	ldr	r3, [r3, #4]
 800447c:	60bb      	str	r3, [r7, #8]
 800447e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	695b      	ldr	r3, [r3, #20]
 8004486:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800448a:	2b40      	cmp	r3, #64	; 0x40
 800448c:	f040 80b4 	bne.w	80045f8 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	685b      	ldr	r3, [r3, #4]
 8004498:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800449c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	f000 8140 	beq.w	8004726 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80044aa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80044ae:	429a      	cmp	r2, r3
 80044b0:	f080 8139 	bcs.w	8004726 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80044ba:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044c0:	69db      	ldr	r3, [r3, #28]
 80044c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80044c6:	f000 8088 	beq.w	80045da <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	330c      	adds	r3, #12
 80044d0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044d4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80044d8:	e853 3f00 	ldrex	r3, [r3]
 80044dc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80044e0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80044e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80044e8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	330c      	adds	r3, #12
 80044f2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80044f6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80044fa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044fe:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004502:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004506:	e841 2300 	strex	r3, r2, [r1]
 800450a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800450e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004512:	2b00      	cmp	r3, #0
 8004514:	d1d9      	bne.n	80044ca <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	3314      	adds	r3, #20
 800451c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800451e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004520:	e853 3f00 	ldrex	r3, [r3]
 8004524:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004526:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004528:	f023 0301 	bic.w	r3, r3, #1
 800452c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	3314      	adds	r3, #20
 8004536:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800453a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800453e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004540:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004542:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004546:	e841 2300 	strex	r3, r2, [r1]
 800454a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800454c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800454e:	2b00      	cmp	r3, #0
 8004550:	d1e1      	bne.n	8004516 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	3314      	adds	r3, #20
 8004558:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800455a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800455c:	e853 3f00 	ldrex	r3, [r3]
 8004560:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004562:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004564:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004568:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	3314      	adds	r3, #20
 8004572:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004576:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004578:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800457a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800457c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800457e:	e841 2300 	strex	r3, r2, [r1]
 8004582:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004584:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004586:	2b00      	cmp	r3, #0
 8004588:	d1e3      	bne.n	8004552 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	2220      	movs	r2, #32
 800458e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	2200      	movs	r2, #0
 8004596:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	330c      	adds	r3, #12
 800459e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80045a2:	e853 3f00 	ldrex	r3, [r3]
 80045a6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80045a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80045aa:	f023 0310 	bic.w	r3, r3, #16
 80045ae:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	330c      	adds	r3, #12
 80045b8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80045bc:	65ba      	str	r2, [r7, #88]	; 0x58
 80045be:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045c0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80045c2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80045c4:	e841 2300 	strex	r3, r2, [r1]
 80045c8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80045ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d1e3      	bne.n	8004598 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045d4:	4618      	mov	r0, r3
 80045d6:	f7fd f87b 	bl	80016d0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80045e2:	b29b      	uxth	r3, r3
 80045e4:	1ad3      	subs	r3, r2, r3
 80045e6:	b29b      	uxth	r3, r3
 80045e8:	4619      	mov	r1, r3
 80045ea:	6878      	ldr	r0, [r7, #4]
 80045ec:	f000 f8b6 	bl	800475c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80045f0:	e099      	b.n	8004726 <HAL_UART_IRQHandler+0x50e>
 80045f2:	bf00      	nop
 80045f4:	08004c8b 	.word	0x08004c8b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004600:	b29b      	uxth	r3, r3
 8004602:	1ad3      	subs	r3, r2, r3
 8004604:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800460c:	b29b      	uxth	r3, r3
 800460e:	2b00      	cmp	r3, #0
 8004610:	f000 808b 	beq.w	800472a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8004614:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004618:	2b00      	cmp	r3, #0
 800461a:	f000 8086 	beq.w	800472a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	330c      	adds	r3, #12
 8004624:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004626:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004628:	e853 3f00 	ldrex	r3, [r3]
 800462c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800462e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004630:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004634:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	330c      	adds	r3, #12
 800463e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004642:	647a      	str	r2, [r7, #68]	; 0x44
 8004644:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004646:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004648:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800464a:	e841 2300 	strex	r3, r2, [r1]
 800464e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004650:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004652:	2b00      	cmp	r3, #0
 8004654:	d1e3      	bne.n	800461e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	3314      	adds	r3, #20
 800465c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800465e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004660:	e853 3f00 	ldrex	r3, [r3]
 8004664:	623b      	str	r3, [r7, #32]
   return(result);
 8004666:	6a3b      	ldr	r3, [r7, #32]
 8004668:	f023 0301 	bic.w	r3, r3, #1
 800466c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	3314      	adds	r3, #20
 8004676:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800467a:	633a      	str	r2, [r7, #48]	; 0x30
 800467c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800467e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004680:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004682:	e841 2300 	strex	r3, r2, [r1]
 8004686:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004688:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800468a:	2b00      	cmp	r3, #0
 800468c:	d1e3      	bne.n	8004656 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	2220      	movs	r2, #32
 8004692:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	2200      	movs	r2, #0
 800469a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	330c      	adds	r3, #12
 80046a2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046a4:	693b      	ldr	r3, [r7, #16]
 80046a6:	e853 3f00 	ldrex	r3, [r3]
 80046aa:	60fb      	str	r3, [r7, #12]
   return(result);
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	f023 0310 	bic.w	r3, r3, #16
 80046b2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	330c      	adds	r3, #12
 80046bc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80046c0:	61fa      	str	r2, [r7, #28]
 80046c2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046c4:	69b9      	ldr	r1, [r7, #24]
 80046c6:	69fa      	ldr	r2, [r7, #28]
 80046c8:	e841 2300 	strex	r3, r2, [r1]
 80046cc:	617b      	str	r3, [r7, #20]
   return(result);
 80046ce:	697b      	ldr	r3, [r7, #20]
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d1e3      	bne.n	800469c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80046d4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80046d8:	4619      	mov	r1, r3
 80046da:	6878      	ldr	r0, [r7, #4]
 80046dc:	f000 f83e 	bl	800475c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80046e0:	e023      	b.n	800472a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80046e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d009      	beq.n	8004702 <HAL_UART_IRQHandler+0x4ea>
 80046ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80046f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d003      	beq.n	8004702 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80046fa:	6878      	ldr	r0, [r7, #4]
 80046fc:	f000 fad9 	bl	8004cb2 <UART_Transmit_IT>
    return;
 8004700:	e014      	b.n	800472c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004702:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004706:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800470a:	2b00      	cmp	r3, #0
 800470c:	d00e      	beq.n	800472c <HAL_UART_IRQHandler+0x514>
 800470e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004712:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004716:	2b00      	cmp	r3, #0
 8004718:	d008      	beq.n	800472c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800471a:	6878      	ldr	r0, [r7, #4]
 800471c:	f000 fb19 	bl	8004d52 <UART_EndTransmit_IT>
    return;
 8004720:	e004      	b.n	800472c <HAL_UART_IRQHandler+0x514>
    return;
 8004722:	bf00      	nop
 8004724:	e002      	b.n	800472c <HAL_UART_IRQHandler+0x514>
      return;
 8004726:	bf00      	nop
 8004728:	e000      	b.n	800472c <HAL_UART_IRQHandler+0x514>
      return;
 800472a:	bf00      	nop
  }
}
 800472c:	37e8      	adds	r7, #232	; 0xe8
 800472e:	46bd      	mov	sp, r7
 8004730:	bd80      	pop	{r7, pc}
 8004732:	bf00      	nop

08004734 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004734:	b480      	push	{r7}
 8004736:	b083      	sub	sp, #12
 8004738:	af00      	add	r7, sp, #0
 800473a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800473c:	bf00      	nop
 800473e:	370c      	adds	r7, #12
 8004740:	46bd      	mov	sp, r7
 8004742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004746:	4770      	bx	lr

08004748 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004748:	b480      	push	{r7}
 800474a:	b083      	sub	sp, #12
 800474c:	af00      	add	r7, sp, #0
 800474e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8004750:	bf00      	nop
 8004752:	370c      	adds	r7, #12
 8004754:	46bd      	mov	sp, r7
 8004756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475a:	4770      	bx	lr

0800475c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800475c:	b480      	push	{r7}
 800475e:	b083      	sub	sp, #12
 8004760:	af00      	add	r7, sp, #0
 8004762:	6078      	str	r0, [r7, #4]
 8004764:	460b      	mov	r3, r1
 8004766:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004768:	bf00      	nop
 800476a:	370c      	adds	r7, #12
 800476c:	46bd      	mov	sp, r7
 800476e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004772:	4770      	bx	lr

08004774 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004774:	b580      	push	{r7, lr}
 8004776:	b09c      	sub	sp, #112	; 0x70
 8004778:	af00      	add	r7, sp, #0
 800477a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004780:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800478c:	2b00      	cmp	r3, #0
 800478e:	d172      	bne.n	8004876 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8004790:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004792:	2200      	movs	r2, #0
 8004794:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004796:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	330c      	adds	r3, #12
 800479c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800479e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80047a0:	e853 3f00 	ldrex	r3, [r3]
 80047a4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80047a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80047a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80047ac:	66bb      	str	r3, [r7, #104]	; 0x68
 80047ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	330c      	adds	r3, #12
 80047b4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80047b6:	65ba      	str	r2, [r7, #88]	; 0x58
 80047b8:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047ba:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80047bc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80047be:	e841 2300 	strex	r3, r2, [r1]
 80047c2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80047c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d1e5      	bne.n	8004796 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	3314      	adds	r3, #20
 80047d0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047d4:	e853 3f00 	ldrex	r3, [r3]
 80047d8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80047da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047dc:	f023 0301 	bic.w	r3, r3, #1
 80047e0:	667b      	str	r3, [r7, #100]	; 0x64
 80047e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	3314      	adds	r3, #20
 80047e8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80047ea:	647a      	str	r2, [r7, #68]	; 0x44
 80047ec:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047ee:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80047f0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80047f2:	e841 2300 	strex	r3, r2, [r1]
 80047f6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80047f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d1e5      	bne.n	80047ca <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80047fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	3314      	adds	r3, #20
 8004804:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004808:	e853 3f00 	ldrex	r3, [r3]
 800480c:	623b      	str	r3, [r7, #32]
   return(result);
 800480e:	6a3b      	ldr	r3, [r7, #32]
 8004810:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004814:	663b      	str	r3, [r7, #96]	; 0x60
 8004816:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	3314      	adds	r3, #20
 800481c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800481e:	633a      	str	r2, [r7, #48]	; 0x30
 8004820:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004822:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004824:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004826:	e841 2300 	strex	r3, r2, [r1]
 800482a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800482c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800482e:	2b00      	cmp	r3, #0
 8004830:	d1e5      	bne.n	80047fe <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004832:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004834:	2220      	movs	r2, #32
 8004836:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800483a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800483c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800483e:	2b01      	cmp	r3, #1
 8004840:	d119      	bne.n	8004876 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004842:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	330c      	adds	r3, #12
 8004848:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800484a:	693b      	ldr	r3, [r7, #16]
 800484c:	e853 3f00 	ldrex	r3, [r3]
 8004850:	60fb      	str	r3, [r7, #12]
   return(result);
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	f023 0310 	bic.w	r3, r3, #16
 8004858:	65fb      	str	r3, [r7, #92]	; 0x5c
 800485a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	330c      	adds	r3, #12
 8004860:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004862:	61fa      	str	r2, [r7, #28]
 8004864:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004866:	69b9      	ldr	r1, [r7, #24]
 8004868:	69fa      	ldr	r2, [r7, #28]
 800486a:	e841 2300 	strex	r3, r2, [r1]
 800486e:	617b      	str	r3, [r7, #20]
   return(result);
 8004870:	697b      	ldr	r3, [r7, #20]
 8004872:	2b00      	cmp	r3, #0
 8004874:	d1e5      	bne.n	8004842 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004876:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800487a:	2b01      	cmp	r3, #1
 800487c:	d106      	bne.n	800488c <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800487e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004880:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004882:	4619      	mov	r1, r3
 8004884:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8004886:	f7ff ff69 	bl	800475c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800488a:	e002      	b.n	8004892 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 800488c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800488e:	f7fc fb99 	bl	8000fc4 <HAL_UART_RxCpltCallback>
}
 8004892:	bf00      	nop
 8004894:	3770      	adds	r7, #112	; 0x70
 8004896:	46bd      	mov	sp, r7
 8004898:	bd80      	pop	{r7, pc}

0800489a <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800489a:	b580      	push	{r7, lr}
 800489c:	b084      	sub	sp, #16
 800489e:	af00      	add	r7, sp, #0
 80048a0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048a6:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048ac:	2b01      	cmp	r3, #1
 80048ae:	d108      	bne.n	80048c2 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80048b4:	085b      	lsrs	r3, r3, #1
 80048b6:	b29b      	uxth	r3, r3
 80048b8:	4619      	mov	r1, r3
 80048ba:	68f8      	ldr	r0, [r7, #12]
 80048bc:	f7ff ff4e 	bl	800475c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80048c0:	e002      	b.n	80048c8 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 80048c2:	68f8      	ldr	r0, [r7, #12]
 80048c4:	f7ff ff40 	bl	8004748 <HAL_UART_RxHalfCpltCallback>
}
 80048c8:	bf00      	nop
 80048ca:	3710      	adds	r7, #16
 80048cc:	46bd      	mov	sp, r7
 80048ce:	bd80      	pop	{r7, pc}

080048d0 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80048d0:	b580      	push	{r7, lr}
 80048d2:	b084      	sub	sp, #16
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80048d8:	2300      	movs	r3, #0
 80048da:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048e0:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80048e2:	68bb      	ldr	r3, [r7, #8]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	695b      	ldr	r3, [r3, #20]
 80048e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048ec:	2b80      	cmp	r3, #128	; 0x80
 80048ee:	bf0c      	ite	eq
 80048f0:	2301      	moveq	r3, #1
 80048f2:	2300      	movne	r3, #0
 80048f4:	b2db      	uxtb	r3, r3
 80048f6:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80048f8:	68bb      	ldr	r3, [r7, #8]
 80048fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048fe:	b2db      	uxtb	r3, r3
 8004900:	2b21      	cmp	r3, #33	; 0x21
 8004902:	d108      	bne.n	8004916 <UART_DMAError+0x46>
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	2b00      	cmp	r3, #0
 8004908:	d005      	beq.n	8004916 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800490a:	68bb      	ldr	r3, [r7, #8]
 800490c:	2200      	movs	r2, #0
 800490e:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8004910:	68b8      	ldr	r0, [r7, #8]
 8004912:	f000 f92f 	bl	8004b74 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004916:	68bb      	ldr	r3, [r7, #8]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	695b      	ldr	r3, [r3, #20]
 800491c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004920:	2b40      	cmp	r3, #64	; 0x40
 8004922:	bf0c      	ite	eq
 8004924:	2301      	moveq	r3, #1
 8004926:	2300      	movne	r3, #0
 8004928:	b2db      	uxtb	r3, r3
 800492a:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800492c:	68bb      	ldr	r3, [r7, #8]
 800492e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004932:	b2db      	uxtb	r3, r3
 8004934:	2b22      	cmp	r3, #34	; 0x22
 8004936:	d108      	bne.n	800494a <UART_DMAError+0x7a>
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	2b00      	cmp	r3, #0
 800493c:	d005      	beq.n	800494a <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800493e:	68bb      	ldr	r3, [r7, #8]
 8004940:	2200      	movs	r2, #0
 8004942:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8004944:	68b8      	ldr	r0, [r7, #8]
 8004946:	f000 f93d 	bl	8004bc4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800494a:	68bb      	ldr	r3, [r7, #8]
 800494c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800494e:	f043 0210 	orr.w	r2, r3, #16
 8004952:	68bb      	ldr	r3, [r7, #8]
 8004954:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004956:	68b8      	ldr	r0, [r7, #8]
 8004958:	f7fc fb2a 	bl	8000fb0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800495c:	bf00      	nop
 800495e:	3710      	adds	r7, #16
 8004960:	46bd      	mov	sp, r7
 8004962:	bd80      	pop	{r7, pc}

08004964 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004964:	b580      	push	{r7, lr}
 8004966:	b090      	sub	sp, #64	; 0x40
 8004968:	af00      	add	r7, sp, #0
 800496a:	60f8      	str	r0, [r7, #12]
 800496c:	60b9      	str	r1, [r7, #8]
 800496e:	603b      	str	r3, [r7, #0]
 8004970:	4613      	mov	r3, r2
 8004972:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004974:	e050      	b.n	8004a18 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004976:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004978:	f1b3 3fff 	cmp.w	r3, #4294967295
 800497c:	d04c      	beq.n	8004a18 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800497e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004980:	2b00      	cmp	r3, #0
 8004982:	d007      	beq.n	8004994 <UART_WaitOnFlagUntilTimeout+0x30>
 8004984:	f7fc fc5c 	bl	8001240 <HAL_GetTick>
 8004988:	4602      	mov	r2, r0
 800498a:	683b      	ldr	r3, [r7, #0]
 800498c:	1ad3      	subs	r3, r2, r3
 800498e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004990:	429a      	cmp	r2, r3
 8004992:	d241      	bcs.n	8004a18 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	330c      	adds	r3, #12
 800499a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800499c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800499e:	e853 3f00 	ldrex	r3, [r3]
 80049a2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80049a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049a6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80049aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	330c      	adds	r3, #12
 80049b2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80049b4:	637a      	str	r2, [r7, #52]	; 0x34
 80049b6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049b8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80049ba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80049bc:	e841 2300 	strex	r3, r2, [r1]
 80049c0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80049c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d1e5      	bne.n	8004994 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	3314      	adds	r3, #20
 80049ce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049d0:	697b      	ldr	r3, [r7, #20]
 80049d2:	e853 3f00 	ldrex	r3, [r3]
 80049d6:	613b      	str	r3, [r7, #16]
   return(result);
 80049d8:	693b      	ldr	r3, [r7, #16]
 80049da:	f023 0301 	bic.w	r3, r3, #1
 80049de:	63bb      	str	r3, [r7, #56]	; 0x38
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	3314      	adds	r3, #20
 80049e6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80049e8:	623a      	str	r2, [r7, #32]
 80049ea:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049ec:	69f9      	ldr	r1, [r7, #28]
 80049ee:	6a3a      	ldr	r2, [r7, #32]
 80049f0:	e841 2300 	strex	r3, r2, [r1]
 80049f4:	61bb      	str	r3, [r7, #24]
   return(result);
 80049f6:	69bb      	ldr	r3, [r7, #24]
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d1e5      	bne.n	80049c8 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	2220      	movs	r2, #32
 8004a00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	2220      	movs	r2, #32
 8004a08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	2200      	movs	r2, #0
 8004a10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004a14:	2303      	movs	r3, #3
 8004a16:	e00f      	b.n	8004a38 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	681a      	ldr	r2, [r3, #0]
 8004a1e:	68bb      	ldr	r3, [r7, #8]
 8004a20:	4013      	ands	r3, r2
 8004a22:	68ba      	ldr	r2, [r7, #8]
 8004a24:	429a      	cmp	r2, r3
 8004a26:	bf0c      	ite	eq
 8004a28:	2301      	moveq	r3, #1
 8004a2a:	2300      	movne	r3, #0
 8004a2c:	b2db      	uxtb	r3, r3
 8004a2e:	461a      	mov	r2, r3
 8004a30:	79fb      	ldrb	r3, [r7, #7]
 8004a32:	429a      	cmp	r2, r3
 8004a34:	d09f      	beq.n	8004976 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004a36:	2300      	movs	r3, #0
}
 8004a38:	4618      	mov	r0, r3
 8004a3a:	3740      	adds	r7, #64	; 0x40
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	bd80      	pop	{r7, pc}

08004a40 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004a40:	b580      	push	{r7, lr}
 8004a42:	b098      	sub	sp, #96	; 0x60
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	60f8      	str	r0, [r7, #12]
 8004a48:	60b9      	str	r1, [r7, #8]
 8004a4a:	4613      	mov	r3, r2
 8004a4c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8004a4e:	68ba      	ldr	r2, [r7, #8]
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	88fa      	ldrh	r2, [r7, #6]
 8004a58:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	2222      	movs	r2, #34	; 0x22
 8004a64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a6c:	4a3e      	ldr	r2, [pc, #248]	; (8004b68 <UART_Start_Receive_DMA+0x128>)
 8004a6e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a74:	4a3d      	ldr	r2, [pc, #244]	; (8004b6c <UART_Start_Receive_DMA+0x12c>)
 8004a76:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a7c:	4a3c      	ldr	r2, [pc, #240]	; (8004b70 <UART_Start_Receive_DMA+0x130>)
 8004a7e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a84:	2200      	movs	r2, #0
 8004a86:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8004a88:	f107 0308 	add.w	r3, r7, #8
 8004a8c:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	3304      	adds	r3, #4
 8004a98:	4619      	mov	r1, r3
 8004a9a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004a9c:	681a      	ldr	r2, [r3, #0]
 8004a9e:	88fb      	ldrh	r3, [r7, #6]
 8004aa0:	f7fc fdbe 	bl	8001620 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8004aa4:	2300      	movs	r3, #0
 8004aa6:	613b      	str	r3, [r7, #16]
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	613b      	str	r3, [r7, #16]
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	685b      	ldr	r3, [r3, #4]
 8004ab6:	613b      	str	r3, [r7, #16]
 8004ab8:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	2200      	movs	r2, #0
 8004abe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	330c      	adds	r3, #12
 8004ac8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004aca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004acc:	e853 3f00 	ldrex	r3, [r3]
 8004ad0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004ad2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ad4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ad8:	65bb      	str	r3, [r7, #88]	; 0x58
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	330c      	adds	r3, #12
 8004ae0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004ae2:	64fa      	str	r2, [r7, #76]	; 0x4c
 8004ae4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ae6:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8004ae8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004aea:	e841 2300 	strex	r3, r2, [r1]
 8004aee:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8004af0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d1e5      	bne.n	8004ac2 <UART_Start_Receive_DMA+0x82>

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	3314      	adds	r3, #20
 8004afc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004afe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b00:	e853 3f00 	ldrex	r3, [r3]
 8004b04:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004b06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b08:	f043 0301 	orr.w	r3, r3, #1
 8004b0c:	657b      	str	r3, [r7, #84]	; 0x54
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	3314      	adds	r3, #20
 8004b14:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004b16:	63ba      	str	r2, [r7, #56]	; 0x38
 8004b18:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b1a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004b1c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004b1e:	e841 2300 	strex	r3, r2, [r1]
 8004b22:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004b24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d1e5      	bne.n	8004af6 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	3314      	adds	r3, #20
 8004b30:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b32:	69bb      	ldr	r3, [r7, #24]
 8004b34:	e853 3f00 	ldrex	r3, [r3]
 8004b38:	617b      	str	r3, [r7, #20]
   return(result);
 8004b3a:	697b      	ldr	r3, [r7, #20]
 8004b3c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004b40:	653b      	str	r3, [r7, #80]	; 0x50
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	3314      	adds	r3, #20
 8004b48:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004b4a:	627a      	str	r2, [r7, #36]	; 0x24
 8004b4c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b4e:	6a39      	ldr	r1, [r7, #32]
 8004b50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b52:	e841 2300 	strex	r3, r2, [r1]
 8004b56:	61fb      	str	r3, [r7, #28]
   return(result);
 8004b58:	69fb      	ldr	r3, [r7, #28]
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d1e5      	bne.n	8004b2a <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8004b5e:	2300      	movs	r3, #0
}
 8004b60:	4618      	mov	r0, r3
 8004b62:	3760      	adds	r7, #96	; 0x60
 8004b64:	46bd      	mov	sp, r7
 8004b66:	bd80      	pop	{r7, pc}
 8004b68:	08004775 	.word	0x08004775
 8004b6c:	0800489b 	.word	0x0800489b
 8004b70:	080048d1 	.word	0x080048d1

08004b74 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004b74:	b480      	push	{r7}
 8004b76:	b089      	sub	sp, #36	; 0x24
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	330c      	adds	r3, #12
 8004b82:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	e853 3f00 	ldrex	r3, [r3]
 8004b8a:	60bb      	str	r3, [r7, #8]
   return(result);
 8004b8c:	68bb      	ldr	r3, [r7, #8]
 8004b8e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004b92:	61fb      	str	r3, [r7, #28]
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	330c      	adds	r3, #12
 8004b9a:	69fa      	ldr	r2, [r7, #28]
 8004b9c:	61ba      	str	r2, [r7, #24]
 8004b9e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ba0:	6979      	ldr	r1, [r7, #20]
 8004ba2:	69ba      	ldr	r2, [r7, #24]
 8004ba4:	e841 2300 	strex	r3, r2, [r1]
 8004ba8:	613b      	str	r3, [r7, #16]
   return(result);
 8004baa:	693b      	ldr	r3, [r7, #16]
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d1e5      	bne.n	8004b7c <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2220      	movs	r2, #32
 8004bb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8004bb8:	bf00      	nop
 8004bba:	3724      	adds	r7, #36	; 0x24
 8004bbc:	46bd      	mov	sp, r7
 8004bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc2:	4770      	bx	lr

08004bc4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004bc4:	b480      	push	{r7}
 8004bc6:	b095      	sub	sp, #84	; 0x54
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	330c      	adds	r3, #12
 8004bd2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004bd6:	e853 3f00 	ldrex	r3, [r3]
 8004bda:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004bdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bde:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004be2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	330c      	adds	r3, #12
 8004bea:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004bec:	643a      	str	r2, [r7, #64]	; 0x40
 8004bee:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bf0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004bf2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004bf4:	e841 2300 	strex	r3, r2, [r1]
 8004bf8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004bfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d1e5      	bne.n	8004bcc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	3314      	adds	r3, #20
 8004c06:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c08:	6a3b      	ldr	r3, [r7, #32]
 8004c0a:	e853 3f00 	ldrex	r3, [r3]
 8004c0e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004c10:	69fb      	ldr	r3, [r7, #28]
 8004c12:	f023 0301 	bic.w	r3, r3, #1
 8004c16:	64bb      	str	r3, [r7, #72]	; 0x48
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	3314      	adds	r3, #20
 8004c1e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004c20:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004c22:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c24:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004c26:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004c28:	e841 2300 	strex	r3, r2, [r1]
 8004c2c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d1e5      	bne.n	8004c00 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c38:	2b01      	cmp	r3, #1
 8004c3a:	d119      	bne.n	8004c70 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	330c      	adds	r3, #12
 8004c42:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	e853 3f00 	ldrex	r3, [r3]
 8004c4a:	60bb      	str	r3, [r7, #8]
   return(result);
 8004c4c:	68bb      	ldr	r3, [r7, #8]
 8004c4e:	f023 0310 	bic.w	r3, r3, #16
 8004c52:	647b      	str	r3, [r7, #68]	; 0x44
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	330c      	adds	r3, #12
 8004c5a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004c5c:	61ba      	str	r2, [r7, #24]
 8004c5e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c60:	6979      	ldr	r1, [r7, #20]
 8004c62:	69ba      	ldr	r2, [r7, #24]
 8004c64:	e841 2300 	strex	r3, r2, [r1]
 8004c68:	613b      	str	r3, [r7, #16]
   return(result);
 8004c6a:	693b      	ldr	r3, [r7, #16]
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d1e5      	bne.n	8004c3c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2220      	movs	r2, #32
 8004c74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004c7e:	bf00      	nop
 8004c80:	3754      	adds	r7, #84	; 0x54
 8004c82:	46bd      	mov	sp, r7
 8004c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c88:	4770      	bx	lr

08004c8a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004c8a:	b580      	push	{r7, lr}
 8004c8c:	b084      	sub	sp, #16
 8004c8e:	af00      	add	r7, sp, #0
 8004c90:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c96:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	2200      	movs	r2, #0
 8004c9c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004ca4:	68f8      	ldr	r0, [r7, #12]
 8004ca6:	f7fc f983 	bl	8000fb0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004caa:	bf00      	nop
 8004cac:	3710      	adds	r7, #16
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	bd80      	pop	{r7, pc}

08004cb2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004cb2:	b480      	push	{r7}
 8004cb4:	b085      	sub	sp, #20
 8004cb6:	af00      	add	r7, sp, #0
 8004cb8:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004cc0:	b2db      	uxtb	r3, r3
 8004cc2:	2b21      	cmp	r3, #33	; 0x21
 8004cc4:	d13e      	bne.n	8004d44 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	689b      	ldr	r3, [r3, #8]
 8004cca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004cce:	d114      	bne.n	8004cfa <UART_Transmit_IT+0x48>
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	691b      	ldr	r3, [r3, #16]
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d110      	bne.n	8004cfa <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	6a1b      	ldr	r3, [r3, #32]
 8004cdc:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	881b      	ldrh	r3, [r3, #0]
 8004ce2:	461a      	mov	r2, r3
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004cec:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	6a1b      	ldr	r3, [r3, #32]
 8004cf2:	1c9a      	adds	r2, r3, #2
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	621a      	str	r2, [r3, #32]
 8004cf8:	e008      	b.n	8004d0c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	6a1b      	ldr	r3, [r3, #32]
 8004cfe:	1c59      	adds	r1, r3, #1
 8004d00:	687a      	ldr	r2, [r7, #4]
 8004d02:	6211      	str	r1, [r2, #32]
 8004d04:	781a      	ldrb	r2, [r3, #0]
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004d10:	b29b      	uxth	r3, r3
 8004d12:	3b01      	subs	r3, #1
 8004d14:	b29b      	uxth	r3, r3
 8004d16:	687a      	ldr	r2, [r7, #4]
 8004d18:	4619      	mov	r1, r3
 8004d1a:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d10f      	bne.n	8004d40 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	68da      	ldr	r2, [r3, #12]
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004d2e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	68da      	ldr	r2, [r3, #12]
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004d3e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004d40:	2300      	movs	r3, #0
 8004d42:	e000      	b.n	8004d46 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004d44:	2302      	movs	r3, #2
  }
}
 8004d46:	4618      	mov	r0, r3
 8004d48:	3714      	adds	r7, #20
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d50:	4770      	bx	lr

08004d52 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004d52:	b580      	push	{r7, lr}
 8004d54:	b082      	sub	sp, #8
 8004d56:	af00      	add	r7, sp, #0
 8004d58:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	68da      	ldr	r2, [r3, #12]
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d68:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	2220      	movs	r2, #32
 8004d6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004d72:	6878      	ldr	r0, [r7, #4]
 8004d74:	f7ff fcde 	bl	8004734 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004d78:	2300      	movs	r3, #0
}
 8004d7a:	4618      	mov	r0, r3
 8004d7c:	3708      	adds	r7, #8
 8004d7e:	46bd      	mov	sp, r7
 8004d80:	bd80      	pop	{r7, pc}

08004d82 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004d82:	b580      	push	{r7, lr}
 8004d84:	b08c      	sub	sp, #48	; 0x30
 8004d86:	af00      	add	r7, sp, #0
 8004d88:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004d90:	b2db      	uxtb	r3, r3
 8004d92:	2b22      	cmp	r3, #34	; 0x22
 8004d94:	f040 80ab 	bne.w	8004eee <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	689b      	ldr	r3, [r3, #8]
 8004d9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004da0:	d117      	bne.n	8004dd2 <UART_Receive_IT+0x50>
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	691b      	ldr	r3, [r3, #16]
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d113      	bne.n	8004dd2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004daa:	2300      	movs	r3, #0
 8004dac:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004db2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	685b      	ldr	r3, [r3, #4]
 8004dba:	b29b      	uxth	r3, r3
 8004dbc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004dc0:	b29a      	uxth	r2, r3
 8004dc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dc4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dca:	1c9a      	adds	r2, r3, #2
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	629a      	str	r2, [r3, #40]	; 0x28
 8004dd0:	e026      	b.n	8004e20 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dd6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004dd8:	2300      	movs	r3, #0
 8004dda:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	689b      	ldr	r3, [r3, #8]
 8004de0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004de4:	d007      	beq.n	8004df6 <UART_Receive_IT+0x74>
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	689b      	ldr	r3, [r3, #8]
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d10a      	bne.n	8004e04 <UART_Receive_IT+0x82>
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	691b      	ldr	r3, [r3, #16]
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d106      	bne.n	8004e04 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	685b      	ldr	r3, [r3, #4]
 8004dfc:	b2da      	uxtb	r2, r3
 8004dfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e00:	701a      	strb	r2, [r3, #0]
 8004e02:	e008      	b.n	8004e16 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	685b      	ldr	r3, [r3, #4]
 8004e0a:	b2db      	uxtb	r3, r3
 8004e0c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004e10:	b2da      	uxtb	r2, r3
 8004e12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e14:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e1a:	1c5a      	adds	r2, r3, #1
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004e24:	b29b      	uxth	r3, r3
 8004e26:	3b01      	subs	r3, #1
 8004e28:	b29b      	uxth	r3, r3
 8004e2a:	687a      	ldr	r2, [r7, #4]
 8004e2c:	4619      	mov	r1, r3
 8004e2e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d15a      	bne.n	8004eea <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	68da      	ldr	r2, [r3, #12]
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f022 0220 	bic.w	r2, r2, #32
 8004e42:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	68da      	ldr	r2, [r3, #12]
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004e52:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	695a      	ldr	r2, [r3, #20]
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f022 0201 	bic.w	r2, r2, #1
 8004e62:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	2220      	movs	r2, #32
 8004e68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e70:	2b01      	cmp	r3, #1
 8004e72:	d135      	bne.n	8004ee0 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2200      	movs	r2, #0
 8004e78:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	330c      	adds	r3, #12
 8004e80:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e82:	697b      	ldr	r3, [r7, #20]
 8004e84:	e853 3f00 	ldrex	r3, [r3]
 8004e88:	613b      	str	r3, [r7, #16]
   return(result);
 8004e8a:	693b      	ldr	r3, [r7, #16]
 8004e8c:	f023 0310 	bic.w	r3, r3, #16
 8004e90:	627b      	str	r3, [r7, #36]	; 0x24
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	330c      	adds	r3, #12
 8004e98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e9a:	623a      	str	r2, [r7, #32]
 8004e9c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e9e:	69f9      	ldr	r1, [r7, #28]
 8004ea0:	6a3a      	ldr	r2, [r7, #32]
 8004ea2:	e841 2300 	strex	r3, r2, [r1]
 8004ea6:	61bb      	str	r3, [r7, #24]
   return(result);
 8004ea8:	69bb      	ldr	r3, [r7, #24]
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d1e5      	bne.n	8004e7a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	f003 0310 	and.w	r3, r3, #16
 8004eb8:	2b10      	cmp	r3, #16
 8004eba:	d10a      	bne.n	8004ed2 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004ebc:	2300      	movs	r3, #0
 8004ebe:	60fb      	str	r3, [r7, #12]
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	60fb      	str	r3, [r7, #12]
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	685b      	ldr	r3, [r3, #4]
 8004ece:	60fb      	str	r3, [r7, #12]
 8004ed0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004ed6:	4619      	mov	r1, r3
 8004ed8:	6878      	ldr	r0, [r7, #4]
 8004eda:	f7ff fc3f 	bl	800475c <HAL_UARTEx_RxEventCallback>
 8004ede:	e002      	b.n	8004ee6 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004ee0:	6878      	ldr	r0, [r7, #4]
 8004ee2:	f7fc f86f 	bl	8000fc4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004ee6:	2300      	movs	r3, #0
 8004ee8:	e002      	b.n	8004ef0 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8004eea:	2300      	movs	r3, #0
 8004eec:	e000      	b.n	8004ef0 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8004eee:	2302      	movs	r3, #2
  }
}
 8004ef0:	4618      	mov	r0, r3
 8004ef2:	3730      	adds	r7, #48	; 0x30
 8004ef4:	46bd      	mov	sp, r7
 8004ef6:	bd80      	pop	{r7, pc}

08004ef8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004ef8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004efc:	b0c0      	sub	sp, #256	; 0x100
 8004efe:	af00      	add	r7, sp, #0
 8004f00:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004f04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	691b      	ldr	r3, [r3, #16]
 8004f0c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004f10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f14:	68d9      	ldr	r1, [r3, #12]
 8004f16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f1a:	681a      	ldr	r2, [r3, #0]
 8004f1c:	ea40 0301 	orr.w	r3, r0, r1
 8004f20:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004f22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f26:	689a      	ldr	r2, [r3, #8]
 8004f28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f2c:	691b      	ldr	r3, [r3, #16]
 8004f2e:	431a      	orrs	r2, r3
 8004f30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f34:	695b      	ldr	r3, [r3, #20]
 8004f36:	431a      	orrs	r2, r3
 8004f38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f3c:	69db      	ldr	r3, [r3, #28]
 8004f3e:	4313      	orrs	r3, r2
 8004f40:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004f44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	68db      	ldr	r3, [r3, #12]
 8004f4c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004f50:	f021 010c 	bic.w	r1, r1, #12
 8004f54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f58:	681a      	ldr	r2, [r3, #0]
 8004f5a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004f5e:	430b      	orrs	r3, r1
 8004f60:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004f62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	695b      	ldr	r3, [r3, #20]
 8004f6a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004f6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f72:	6999      	ldr	r1, [r3, #24]
 8004f74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f78:	681a      	ldr	r2, [r3, #0]
 8004f7a:	ea40 0301 	orr.w	r3, r0, r1
 8004f7e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004f80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f84:	681a      	ldr	r2, [r3, #0]
 8004f86:	4b8f      	ldr	r3, [pc, #572]	; (80051c4 <UART_SetConfig+0x2cc>)
 8004f88:	429a      	cmp	r2, r3
 8004f8a:	d005      	beq.n	8004f98 <UART_SetConfig+0xa0>
 8004f8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f90:	681a      	ldr	r2, [r3, #0]
 8004f92:	4b8d      	ldr	r3, [pc, #564]	; (80051c8 <UART_SetConfig+0x2d0>)
 8004f94:	429a      	cmp	r2, r3
 8004f96:	d104      	bne.n	8004fa2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004f98:	f7fe fe14 	bl	8003bc4 <HAL_RCC_GetPCLK2Freq>
 8004f9c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004fa0:	e003      	b.n	8004faa <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004fa2:	f7fe fdfb 	bl	8003b9c <HAL_RCC_GetPCLK1Freq>
 8004fa6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004faa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fae:	69db      	ldr	r3, [r3, #28]
 8004fb0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004fb4:	f040 810c 	bne.w	80051d0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004fb8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004fbc:	2200      	movs	r2, #0
 8004fbe:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004fc2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004fc6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004fca:	4622      	mov	r2, r4
 8004fcc:	462b      	mov	r3, r5
 8004fce:	1891      	adds	r1, r2, r2
 8004fd0:	65b9      	str	r1, [r7, #88]	; 0x58
 8004fd2:	415b      	adcs	r3, r3
 8004fd4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004fd6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004fda:	4621      	mov	r1, r4
 8004fdc:	eb12 0801 	adds.w	r8, r2, r1
 8004fe0:	4629      	mov	r1, r5
 8004fe2:	eb43 0901 	adc.w	r9, r3, r1
 8004fe6:	f04f 0200 	mov.w	r2, #0
 8004fea:	f04f 0300 	mov.w	r3, #0
 8004fee:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004ff2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004ff6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004ffa:	4690      	mov	r8, r2
 8004ffc:	4699      	mov	r9, r3
 8004ffe:	4623      	mov	r3, r4
 8005000:	eb18 0303 	adds.w	r3, r8, r3
 8005004:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005008:	462b      	mov	r3, r5
 800500a:	eb49 0303 	adc.w	r3, r9, r3
 800500e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005012:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005016:	685b      	ldr	r3, [r3, #4]
 8005018:	2200      	movs	r2, #0
 800501a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800501e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005022:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005026:	460b      	mov	r3, r1
 8005028:	18db      	adds	r3, r3, r3
 800502a:	653b      	str	r3, [r7, #80]	; 0x50
 800502c:	4613      	mov	r3, r2
 800502e:	eb42 0303 	adc.w	r3, r2, r3
 8005032:	657b      	str	r3, [r7, #84]	; 0x54
 8005034:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005038:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800503c:	f7fb f920 	bl	8000280 <__aeabi_uldivmod>
 8005040:	4602      	mov	r2, r0
 8005042:	460b      	mov	r3, r1
 8005044:	4b61      	ldr	r3, [pc, #388]	; (80051cc <UART_SetConfig+0x2d4>)
 8005046:	fba3 2302 	umull	r2, r3, r3, r2
 800504a:	095b      	lsrs	r3, r3, #5
 800504c:	011c      	lsls	r4, r3, #4
 800504e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005052:	2200      	movs	r2, #0
 8005054:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005058:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800505c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005060:	4642      	mov	r2, r8
 8005062:	464b      	mov	r3, r9
 8005064:	1891      	adds	r1, r2, r2
 8005066:	64b9      	str	r1, [r7, #72]	; 0x48
 8005068:	415b      	adcs	r3, r3
 800506a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800506c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005070:	4641      	mov	r1, r8
 8005072:	eb12 0a01 	adds.w	sl, r2, r1
 8005076:	4649      	mov	r1, r9
 8005078:	eb43 0b01 	adc.w	fp, r3, r1
 800507c:	f04f 0200 	mov.w	r2, #0
 8005080:	f04f 0300 	mov.w	r3, #0
 8005084:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005088:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800508c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005090:	4692      	mov	sl, r2
 8005092:	469b      	mov	fp, r3
 8005094:	4643      	mov	r3, r8
 8005096:	eb1a 0303 	adds.w	r3, sl, r3
 800509a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800509e:	464b      	mov	r3, r9
 80050a0:	eb4b 0303 	adc.w	r3, fp, r3
 80050a4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80050a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050ac:	685b      	ldr	r3, [r3, #4]
 80050ae:	2200      	movs	r2, #0
 80050b0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80050b4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80050b8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80050bc:	460b      	mov	r3, r1
 80050be:	18db      	adds	r3, r3, r3
 80050c0:	643b      	str	r3, [r7, #64]	; 0x40
 80050c2:	4613      	mov	r3, r2
 80050c4:	eb42 0303 	adc.w	r3, r2, r3
 80050c8:	647b      	str	r3, [r7, #68]	; 0x44
 80050ca:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80050ce:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80050d2:	f7fb f8d5 	bl	8000280 <__aeabi_uldivmod>
 80050d6:	4602      	mov	r2, r0
 80050d8:	460b      	mov	r3, r1
 80050da:	4611      	mov	r1, r2
 80050dc:	4b3b      	ldr	r3, [pc, #236]	; (80051cc <UART_SetConfig+0x2d4>)
 80050de:	fba3 2301 	umull	r2, r3, r3, r1
 80050e2:	095b      	lsrs	r3, r3, #5
 80050e4:	2264      	movs	r2, #100	; 0x64
 80050e6:	fb02 f303 	mul.w	r3, r2, r3
 80050ea:	1acb      	subs	r3, r1, r3
 80050ec:	00db      	lsls	r3, r3, #3
 80050ee:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80050f2:	4b36      	ldr	r3, [pc, #216]	; (80051cc <UART_SetConfig+0x2d4>)
 80050f4:	fba3 2302 	umull	r2, r3, r3, r2
 80050f8:	095b      	lsrs	r3, r3, #5
 80050fa:	005b      	lsls	r3, r3, #1
 80050fc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005100:	441c      	add	r4, r3
 8005102:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005106:	2200      	movs	r2, #0
 8005108:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800510c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005110:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005114:	4642      	mov	r2, r8
 8005116:	464b      	mov	r3, r9
 8005118:	1891      	adds	r1, r2, r2
 800511a:	63b9      	str	r1, [r7, #56]	; 0x38
 800511c:	415b      	adcs	r3, r3
 800511e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005120:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005124:	4641      	mov	r1, r8
 8005126:	1851      	adds	r1, r2, r1
 8005128:	6339      	str	r1, [r7, #48]	; 0x30
 800512a:	4649      	mov	r1, r9
 800512c:	414b      	adcs	r3, r1
 800512e:	637b      	str	r3, [r7, #52]	; 0x34
 8005130:	f04f 0200 	mov.w	r2, #0
 8005134:	f04f 0300 	mov.w	r3, #0
 8005138:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800513c:	4659      	mov	r1, fp
 800513e:	00cb      	lsls	r3, r1, #3
 8005140:	4651      	mov	r1, sl
 8005142:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005146:	4651      	mov	r1, sl
 8005148:	00ca      	lsls	r2, r1, #3
 800514a:	4610      	mov	r0, r2
 800514c:	4619      	mov	r1, r3
 800514e:	4603      	mov	r3, r0
 8005150:	4642      	mov	r2, r8
 8005152:	189b      	adds	r3, r3, r2
 8005154:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005158:	464b      	mov	r3, r9
 800515a:	460a      	mov	r2, r1
 800515c:	eb42 0303 	adc.w	r3, r2, r3
 8005160:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005164:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005168:	685b      	ldr	r3, [r3, #4]
 800516a:	2200      	movs	r2, #0
 800516c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005170:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005174:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005178:	460b      	mov	r3, r1
 800517a:	18db      	adds	r3, r3, r3
 800517c:	62bb      	str	r3, [r7, #40]	; 0x28
 800517e:	4613      	mov	r3, r2
 8005180:	eb42 0303 	adc.w	r3, r2, r3
 8005184:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005186:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800518a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800518e:	f7fb f877 	bl	8000280 <__aeabi_uldivmod>
 8005192:	4602      	mov	r2, r0
 8005194:	460b      	mov	r3, r1
 8005196:	4b0d      	ldr	r3, [pc, #52]	; (80051cc <UART_SetConfig+0x2d4>)
 8005198:	fba3 1302 	umull	r1, r3, r3, r2
 800519c:	095b      	lsrs	r3, r3, #5
 800519e:	2164      	movs	r1, #100	; 0x64
 80051a0:	fb01 f303 	mul.w	r3, r1, r3
 80051a4:	1ad3      	subs	r3, r2, r3
 80051a6:	00db      	lsls	r3, r3, #3
 80051a8:	3332      	adds	r3, #50	; 0x32
 80051aa:	4a08      	ldr	r2, [pc, #32]	; (80051cc <UART_SetConfig+0x2d4>)
 80051ac:	fba2 2303 	umull	r2, r3, r2, r3
 80051b0:	095b      	lsrs	r3, r3, #5
 80051b2:	f003 0207 	and.w	r2, r3, #7
 80051b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	4422      	add	r2, r4
 80051be:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80051c0:	e105      	b.n	80053ce <UART_SetConfig+0x4d6>
 80051c2:	bf00      	nop
 80051c4:	40011000 	.word	0x40011000
 80051c8:	40011400 	.word	0x40011400
 80051cc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80051d0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80051d4:	2200      	movs	r2, #0
 80051d6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80051da:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80051de:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80051e2:	4642      	mov	r2, r8
 80051e4:	464b      	mov	r3, r9
 80051e6:	1891      	adds	r1, r2, r2
 80051e8:	6239      	str	r1, [r7, #32]
 80051ea:	415b      	adcs	r3, r3
 80051ec:	627b      	str	r3, [r7, #36]	; 0x24
 80051ee:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80051f2:	4641      	mov	r1, r8
 80051f4:	1854      	adds	r4, r2, r1
 80051f6:	4649      	mov	r1, r9
 80051f8:	eb43 0501 	adc.w	r5, r3, r1
 80051fc:	f04f 0200 	mov.w	r2, #0
 8005200:	f04f 0300 	mov.w	r3, #0
 8005204:	00eb      	lsls	r3, r5, #3
 8005206:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800520a:	00e2      	lsls	r2, r4, #3
 800520c:	4614      	mov	r4, r2
 800520e:	461d      	mov	r5, r3
 8005210:	4643      	mov	r3, r8
 8005212:	18e3      	adds	r3, r4, r3
 8005214:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005218:	464b      	mov	r3, r9
 800521a:	eb45 0303 	adc.w	r3, r5, r3
 800521e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005222:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005226:	685b      	ldr	r3, [r3, #4]
 8005228:	2200      	movs	r2, #0
 800522a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800522e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005232:	f04f 0200 	mov.w	r2, #0
 8005236:	f04f 0300 	mov.w	r3, #0
 800523a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800523e:	4629      	mov	r1, r5
 8005240:	008b      	lsls	r3, r1, #2
 8005242:	4621      	mov	r1, r4
 8005244:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005248:	4621      	mov	r1, r4
 800524a:	008a      	lsls	r2, r1, #2
 800524c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005250:	f7fb f816 	bl	8000280 <__aeabi_uldivmod>
 8005254:	4602      	mov	r2, r0
 8005256:	460b      	mov	r3, r1
 8005258:	4b60      	ldr	r3, [pc, #384]	; (80053dc <UART_SetConfig+0x4e4>)
 800525a:	fba3 2302 	umull	r2, r3, r3, r2
 800525e:	095b      	lsrs	r3, r3, #5
 8005260:	011c      	lsls	r4, r3, #4
 8005262:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005266:	2200      	movs	r2, #0
 8005268:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800526c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005270:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005274:	4642      	mov	r2, r8
 8005276:	464b      	mov	r3, r9
 8005278:	1891      	adds	r1, r2, r2
 800527a:	61b9      	str	r1, [r7, #24]
 800527c:	415b      	adcs	r3, r3
 800527e:	61fb      	str	r3, [r7, #28]
 8005280:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005284:	4641      	mov	r1, r8
 8005286:	1851      	adds	r1, r2, r1
 8005288:	6139      	str	r1, [r7, #16]
 800528a:	4649      	mov	r1, r9
 800528c:	414b      	adcs	r3, r1
 800528e:	617b      	str	r3, [r7, #20]
 8005290:	f04f 0200 	mov.w	r2, #0
 8005294:	f04f 0300 	mov.w	r3, #0
 8005298:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800529c:	4659      	mov	r1, fp
 800529e:	00cb      	lsls	r3, r1, #3
 80052a0:	4651      	mov	r1, sl
 80052a2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80052a6:	4651      	mov	r1, sl
 80052a8:	00ca      	lsls	r2, r1, #3
 80052aa:	4610      	mov	r0, r2
 80052ac:	4619      	mov	r1, r3
 80052ae:	4603      	mov	r3, r0
 80052b0:	4642      	mov	r2, r8
 80052b2:	189b      	adds	r3, r3, r2
 80052b4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80052b8:	464b      	mov	r3, r9
 80052ba:	460a      	mov	r2, r1
 80052bc:	eb42 0303 	adc.w	r3, r2, r3
 80052c0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80052c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052c8:	685b      	ldr	r3, [r3, #4]
 80052ca:	2200      	movs	r2, #0
 80052cc:	67bb      	str	r3, [r7, #120]	; 0x78
 80052ce:	67fa      	str	r2, [r7, #124]	; 0x7c
 80052d0:	f04f 0200 	mov.w	r2, #0
 80052d4:	f04f 0300 	mov.w	r3, #0
 80052d8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80052dc:	4649      	mov	r1, r9
 80052de:	008b      	lsls	r3, r1, #2
 80052e0:	4641      	mov	r1, r8
 80052e2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80052e6:	4641      	mov	r1, r8
 80052e8:	008a      	lsls	r2, r1, #2
 80052ea:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80052ee:	f7fa ffc7 	bl	8000280 <__aeabi_uldivmod>
 80052f2:	4602      	mov	r2, r0
 80052f4:	460b      	mov	r3, r1
 80052f6:	4b39      	ldr	r3, [pc, #228]	; (80053dc <UART_SetConfig+0x4e4>)
 80052f8:	fba3 1302 	umull	r1, r3, r3, r2
 80052fc:	095b      	lsrs	r3, r3, #5
 80052fe:	2164      	movs	r1, #100	; 0x64
 8005300:	fb01 f303 	mul.w	r3, r1, r3
 8005304:	1ad3      	subs	r3, r2, r3
 8005306:	011b      	lsls	r3, r3, #4
 8005308:	3332      	adds	r3, #50	; 0x32
 800530a:	4a34      	ldr	r2, [pc, #208]	; (80053dc <UART_SetConfig+0x4e4>)
 800530c:	fba2 2303 	umull	r2, r3, r2, r3
 8005310:	095b      	lsrs	r3, r3, #5
 8005312:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005316:	441c      	add	r4, r3
 8005318:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800531c:	2200      	movs	r2, #0
 800531e:	673b      	str	r3, [r7, #112]	; 0x70
 8005320:	677a      	str	r2, [r7, #116]	; 0x74
 8005322:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005326:	4642      	mov	r2, r8
 8005328:	464b      	mov	r3, r9
 800532a:	1891      	adds	r1, r2, r2
 800532c:	60b9      	str	r1, [r7, #8]
 800532e:	415b      	adcs	r3, r3
 8005330:	60fb      	str	r3, [r7, #12]
 8005332:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005336:	4641      	mov	r1, r8
 8005338:	1851      	adds	r1, r2, r1
 800533a:	6039      	str	r1, [r7, #0]
 800533c:	4649      	mov	r1, r9
 800533e:	414b      	adcs	r3, r1
 8005340:	607b      	str	r3, [r7, #4]
 8005342:	f04f 0200 	mov.w	r2, #0
 8005346:	f04f 0300 	mov.w	r3, #0
 800534a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800534e:	4659      	mov	r1, fp
 8005350:	00cb      	lsls	r3, r1, #3
 8005352:	4651      	mov	r1, sl
 8005354:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005358:	4651      	mov	r1, sl
 800535a:	00ca      	lsls	r2, r1, #3
 800535c:	4610      	mov	r0, r2
 800535e:	4619      	mov	r1, r3
 8005360:	4603      	mov	r3, r0
 8005362:	4642      	mov	r2, r8
 8005364:	189b      	adds	r3, r3, r2
 8005366:	66bb      	str	r3, [r7, #104]	; 0x68
 8005368:	464b      	mov	r3, r9
 800536a:	460a      	mov	r2, r1
 800536c:	eb42 0303 	adc.w	r3, r2, r3
 8005370:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005372:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005376:	685b      	ldr	r3, [r3, #4]
 8005378:	2200      	movs	r2, #0
 800537a:	663b      	str	r3, [r7, #96]	; 0x60
 800537c:	667a      	str	r2, [r7, #100]	; 0x64
 800537e:	f04f 0200 	mov.w	r2, #0
 8005382:	f04f 0300 	mov.w	r3, #0
 8005386:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800538a:	4649      	mov	r1, r9
 800538c:	008b      	lsls	r3, r1, #2
 800538e:	4641      	mov	r1, r8
 8005390:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005394:	4641      	mov	r1, r8
 8005396:	008a      	lsls	r2, r1, #2
 8005398:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800539c:	f7fa ff70 	bl	8000280 <__aeabi_uldivmod>
 80053a0:	4602      	mov	r2, r0
 80053a2:	460b      	mov	r3, r1
 80053a4:	4b0d      	ldr	r3, [pc, #52]	; (80053dc <UART_SetConfig+0x4e4>)
 80053a6:	fba3 1302 	umull	r1, r3, r3, r2
 80053aa:	095b      	lsrs	r3, r3, #5
 80053ac:	2164      	movs	r1, #100	; 0x64
 80053ae:	fb01 f303 	mul.w	r3, r1, r3
 80053b2:	1ad3      	subs	r3, r2, r3
 80053b4:	011b      	lsls	r3, r3, #4
 80053b6:	3332      	adds	r3, #50	; 0x32
 80053b8:	4a08      	ldr	r2, [pc, #32]	; (80053dc <UART_SetConfig+0x4e4>)
 80053ba:	fba2 2303 	umull	r2, r3, r2, r3
 80053be:	095b      	lsrs	r3, r3, #5
 80053c0:	f003 020f 	and.w	r2, r3, #15
 80053c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	4422      	add	r2, r4
 80053cc:	609a      	str	r2, [r3, #8]
}
 80053ce:	bf00      	nop
 80053d0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80053d4:	46bd      	mov	sp, r7
 80053d6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80053da:	bf00      	nop
 80053dc:	51eb851f 	.word	0x51eb851f

080053e0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80053e0:	b084      	sub	sp, #16
 80053e2:	b580      	push	{r7, lr}
 80053e4:	b084      	sub	sp, #16
 80053e6:	af00      	add	r7, sp, #0
 80053e8:	6078      	str	r0, [r7, #4]
 80053ea:	f107 001c 	add.w	r0, r7, #28
 80053ee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80053f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053f4:	2b01      	cmp	r3, #1
 80053f6:	d122      	bne.n	800543e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053fc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	68db      	ldr	r3, [r3, #12]
 8005408:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800540c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005410:	687a      	ldr	r2, [r7, #4]
 8005412:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	68db      	ldr	r3, [r3, #12]
 8005418:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005420:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005422:	2b01      	cmp	r3, #1
 8005424:	d105      	bne.n	8005432 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	68db      	ldr	r3, [r3, #12]
 800542a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005432:	6878      	ldr	r0, [r7, #4]
 8005434:	f001 fb1c 	bl	8006a70 <USB_CoreReset>
 8005438:	4603      	mov	r3, r0
 800543a:	73fb      	strb	r3, [r7, #15]
 800543c:	e01a      	b.n	8005474 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	68db      	ldr	r3, [r3, #12]
 8005442:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800544a:	6878      	ldr	r0, [r7, #4]
 800544c:	f001 fb10 	bl	8006a70 <USB_CoreReset>
 8005450:	4603      	mov	r3, r0
 8005452:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005454:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005456:	2b00      	cmp	r3, #0
 8005458:	d106      	bne.n	8005468 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800545e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	639a      	str	r2, [r3, #56]	; 0x38
 8005466:	e005      	b.n	8005474 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800546c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005474:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005476:	2b01      	cmp	r3, #1
 8005478:	d10b      	bne.n	8005492 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	689b      	ldr	r3, [r3, #8]
 800547e:	f043 0206 	orr.w	r2, r3, #6
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	689b      	ldr	r3, [r3, #8]
 800548a:	f043 0220 	orr.w	r2, r3, #32
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005492:	7bfb      	ldrb	r3, [r7, #15]
}
 8005494:	4618      	mov	r0, r3
 8005496:	3710      	adds	r7, #16
 8005498:	46bd      	mov	sp, r7
 800549a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800549e:	b004      	add	sp, #16
 80054a0:	4770      	bx	lr
	...

080054a4 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80054a4:	b480      	push	{r7}
 80054a6:	b087      	sub	sp, #28
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	60f8      	str	r0, [r7, #12]
 80054ac:	60b9      	str	r1, [r7, #8]
 80054ae:	4613      	mov	r3, r2
 80054b0:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80054b2:	79fb      	ldrb	r3, [r7, #7]
 80054b4:	2b02      	cmp	r3, #2
 80054b6:	d165      	bne.n	8005584 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80054b8:	68bb      	ldr	r3, [r7, #8]
 80054ba:	4a41      	ldr	r2, [pc, #260]	; (80055c0 <USB_SetTurnaroundTime+0x11c>)
 80054bc:	4293      	cmp	r3, r2
 80054be:	d906      	bls.n	80054ce <USB_SetTurnaroundTime+0x2a>
 80054c0:	68bb      	ldr	r3, [r7, #8]
 80054c2:	4a40      	ldr	r2, [pc, #256]	; (80055c4 <USB_SetTurnaroundTime+0x120>)
 80054c4:	4293      	cmp	r3, r2
 80054c6:	d202      	bcs.n	80054ce <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80054c8:	230f      	movs	r3, #15
 80054ca:	617b      	str	r3, [r7, #20]
 80054cc:	e062      	b.n	8005594 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80054ce:	68bb      	ldr	r3, [r7, #8]
 80054d0:	4a3c      	ldr	r2, [pc, #240]	; (80055c4 <USB_SetTurnaroundTime+0x120>)
 80054d2:	4293      	cmp	r3, r2
 80054d4:	d306      	bcc.n	80054e4 <USB_SetTurnaroundTime+0x40>
 80054d6:	68bb      	ldr	r3, [r7, #8]
 80054d8:	4a3b      	ldr	r2, [pc, #236]	; (80055c8 <USB_SetTurnaroundTime+0x124>)
 80054da:	4293      	cmp	r3, r2
 80054dc:	d202      	bcs.n	80054e4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80054de:	230e      	movs	r3, #14
 80054e0:	617b      	str	r3, [r7, #20]
 80054e2:	e057      	b.n	8005594 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80054e4:	68bb      	ldr	r3, [r7, #8]
 80054e6:	4a38      	ldr	r2, [pc, #224]	; (80055c8 <USB_SetTurnaroundTime+0x124>)
 80054e8:	4293      	cmp	r3, r2
 80054ea:	d306      	bcc.n	80054fa <USB_SetTurnaroundTime+0x56>
 80054ec:	68bb      	ldr	r3, [r7, #8]
 80054ee:	4a37      	ldr	r2, [pc, #220]	; (80055cc <USB_SetTurnaroundTime+0x128>)
 80054f0:	4293      	cmp	r3, r2
 80054f2:	d202      	bcs.n	80054fa <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80054f4:	230d      	movs	r3, #13
 80054f6:	617b      	str	r3, [r7, #20]
 80054f8:	e04c      	b.n	8005594 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80054fa:	68bb      	ldr	r3, [r7, #8]
 80054fc:	4a33      	ldr	r2, [pc, #204]	; (80055cc <USB_SetTurnaroundTime+0x128>)
 80054fe:	4293      	cmp	r3, r2
 8005500:	d306      	bcc.n	8005510 <USB_SetTurnaroundTime+0x6c>
 8005502:	68bb      	ldr	r3, [r7, #8]
 8005504:	4a32      	ldr	r2, [pc, #200]	; (80055d0 <USB_SetTurnaroundTime+0x12c>)
 8005506:	4293      	cmp	r3, r2
 8005508:	d802      	bhi.n	8005510 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800550a:	230c      	movs	r3, #12
 800550c:	617b      	str	r3, [r7, #20]
 800550e:	e041      	b.n	8005594 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8005510:	68bb      	ldr	r3, [r7, #8]
 8005512:	4a2f      	ldr	r2, [pc, #188]	; (80055d0 <USB_SetTurnaroundTime+0x12c>)
 8005514:	4293      	cmp	r3, r2
 8005516:	d906      	bls.n	8005526 <USB_SetTurnaroundTime+0x82>
 8005518:	68bb      	ldr	r3, [r7, #8]
 800551a:	4a2e      	ldr	r2, [pc, #184]	; (80055d4 <USB_SetTurnaroundTime+0x130>)
 800551c:	4293      	cmp	r3, r2
 800551e:	d802      	bhi.n	8005526 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8005520:	230b      	movs	r3, #11
 8005522:	617b      	str	r3, [r7, #20]
 8005524:	e036      	b.n	8005594 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8005526:	68bb      	ldr	r3, [r7, #8]
 8005528:	4a2a      	ldr	r2, [pc, #168]	; (80055d4 <USB_SetTurnaroundTime+0x130>)
 800552a:	4293      	cmp	r3, r2
 800552c:	d906      	bls.n	800553c <USB_SetTurnaroundTime+0x98>
 800552e:	68bb      	ldr	r3, [r7, #8]
 8005530:	4a29      	ldr	r2, [pc, #164]	; (80055d8 <USB_SetTurnaroundTime+0x134>)
 8005532:	4293      	cmp	r3, r2
 8005534:	d802      	bhi.n	800553c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8005536:	230a      	movs	r3, #10
 8005538:	617b      	str	r3, [r7, #20]
 800553a:	e02b      	b.n	8005594 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800553c:	68bb      	ldr	r3, [r7, #8]
 800553e:	4a26      	ldr	r2, [pc, #152]	; (80055d8 <USB_SetTurnaroundTime+0x134>)
 8005540:	4293      	cmp	r3, r2
 8005542:	d906      	bls.n	8005552 <USB_SetTurnaroundTime+0xae>
 8005544:	68bb      	ldr	r3, [r7, #8]
 8005546:	4a25      	ldr	r2, [pc, #148]	; (80055dc <USB_SetTurnaroundTime+0x138>)
 8005548:	4293      	cmp	r3, r2
 800554a:	d202      	bcs.n	8005552 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800554c:	2309      	movs	r3, #9
 800554e:	617b      	str	r3, [r7, #20]
 8005550:	e020      	b.n	8005594 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8005552:	68bb      	ldr	r3, [r7, #8]
 8005554:	4a21      	ldr	r2, [pc, #132]	; (80055dc <USB_SetTurnaroundTime+0x138>)
 8005556:	4293      	cmp	r3, r2
 8005558:	d306      	bcc.n	8005568 <USB_SetTurnaroundTime+0xc4>
 800555a:	68bb      	ldr	r3, [r7, #8]
 800555c:	4a20      	ldr	r2, [pc, #128]	; (80055e0 <USB_SetTurnaroundTime+0x13c>)
 800555e:	4293      	cmp	r3, r2
 8005560:	d802      	bhi.n	8005568 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8005562:	2308      	movs	r3, #8
 8005564:	617b      	str	r3, [r7, #20]
 8005566:	e015      	b.n	8005594 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8005568:	68bb      	ldr	r3, [r7, #8]
 800556a:	4a1d      	ldr	r2, [pc, #116]	; (80055e0 <USB_SetTurnaroundTime+0x13c>)
 800556c:	4293      	cmp	r3, r2
 800556e:	d906      	bls.n	800557e <USB_SetTurnaroundTime+0xda>
 8005570:	68bb      	ldr	r3, [r7, #8]
 8005572:	4a1c      	ldr	r2, [pc, #112]	; (80055e4 <USB_SetTurnaroundTime+0x140>)
 8005574:	4293      	cmp	r3, r2
 8005576:	d202      	bcs.n	800557e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8005578:	2307      	movs	r3, #7
 800557a:	617b      	str	r3, [r7, #20]
 800557c:	e00a      	b.n	8005594 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800557e:	2306      	movs	r3, #6
 8005580:	617b      	str	r3, [r7, #20]
 8005582:	e007      	b.n	8005594 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8005584:	79fb      	ldrb	r3, [r7, #7]
 8005586:	2b00      	cmp	r3, #0
 8005588:	d102      	bne.n	8005590 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800558a:	2309      	movs	r3, #9
 800558c:	617b      	str	r3, [r7, #20]
 800558e:	e001      	b.n	8005594 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8005590:	2309      	movs	r3, #9
 8005592:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	68db      	ldr	r3, [r3, #12]
 8005598:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	68da      	ldr	r2, [r3, #12]
 80055a4:	697b      	ldr	r3, [r7, #20]
 80055a6:	029b      	lsls	r3, r3, #10
 80055a8:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80055ac:	431a      	orrs	r2, r3
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80055b2:	2300      	movs	r3, #0
}
 80055b4:	4618      	mov	r0, r3
 80055b6:	371c      	adds	r7, #28
 80055b8:	46bd      	mov	sp, r7
 80055ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055be:	4770      	bx	lr
 80055c0:	00d8acbf 	.word	0x00d8acbf
 80055c4:	00e4e1c0 	.word	0x00e4e1c0
 80055c8:	00f42400 	.word	0x00f42400
 80055cc:	01067380 	.word	0x01067380
 80055d0:	011a499f 	.word	0x011a499f
 80055d4:	01312cff 	.word	0x01312cff
 80055d8:	014ca43f 	.word	0x014ca43f
 80055dc:	016e3600 	.word	0x016e3600
 80055e0:	01a6ab1f 	.word	0x01a6ab1f
 80055e4:	01e84800 	.word	0x01e84800

080055e8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80055e8:	b480      	push	{r7}
 80055ea:	b083      	sub	sp, #12
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	689b      	ldr	r3, [r3, #8]
 80055f4:	f043 0201 	orr.w	r2, r3, #1
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80055fc:	2300      	movs	r3, #0
}
 80055fe:	4618      	mov	r0, r3
 8005600:	370c      	adds	r7, #12
 8005602:	46bd      	mov	sp, r7
 8005604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005608:	4770      	bx	lr

0800560a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800560a:	b480      	push	{r7}
 800560c:	b083      	sub	sp, #12
 800560e:	af00      	add	r7, sp, #0
 8005610:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	689b      	ldr	r3, [r3, #8]
 8005616:	f023 0201 	bic.w	r2, r3, #1
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800561e:	2300      	movs	r3, #0
}
 8005620:	4618      	mov	r0, r3
 8005622:	370c      	adds	r7, #12
 8005624:	46bd      	mov	sp, r7
 8005626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800562a:	4770      	bx	lr

0800562c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800562c:	b580      	push	{r7, lr}
 800562e:	b084      	sub	sp, #16
 8005630:	af00      	add	r7, sp, #0
 8005632:	6078      	str	r0, [r7, #4]
 8005634:	460b      	mov	r3, r1
 8005636:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005638:	2300      	movs	r3, #0
 800563a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	68db      	ldr	r3, [r3, #12]
 8005640:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005648:	78fb      	ldrb	r3, [r7, #3]
 800564a:	2b01      	cmp	r3, #1
 800564c:	d115      	bne.n	800567a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	68db      	ldr	r3, [r3, #12]
 8005652:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800565a:	2001      	movs	r0, #1
 800565c:	f7fb fdfc 	bl	8001258 <HAL_Delay>
      ms++;
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	3301      	adds	r3, #1
 8005664:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005666:	6878      	ldr	r0, [r7, #4]
 8005668:	f001 f972 	bl	8006950 <USB_GetMode>
 800566c:	4603      	mov	r3, r0
 800566e:	2b01      	cmp	r3, #1
 8005670:	d01e      	beq.n	80056b0 <USB_SetCurrentMode+0x84>
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	2b31      	cmp	r3, #49	; 0x31
 8005676:	d9f0      	bls.n	800565a <USB_SetCurrentMode+0x2e>
 8005678:	e01a      	b.n	80056b0 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800567a:	78fb      	ldrb	r3, [r7, #3]
 800567c:	2b00      	cmp	r3, #0
 800567e:	d115      	bne.n	80056ac <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	68db      	ldr	r3, [r3, #12]
 8005684:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800568c:	2001      	movs	r0, #1
 800568e:	f7fb fde3 	bl	8001258 <HAL_Delay>
      ms++;
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	3301      	adds	r3, #1
 8005696:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005698:	6878      	ldr	r0, [r7, #4]
 800569a:	f001 f959 	bl	8006950 <USB_GetMode>
 800569e:	4603      	mov	r3, r0
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d005      	beq.n	80056b0 <USB_SetCurrentMode+0x84>
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	2b31      	cmp	r3, #49	; 0x31
 80056a8:	d9f0      	bls.n	800568c <USB_SetCurrentMode+0x60>
 80056aa:	e001      	b.n	80056b0 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80056ac:	2301      	movs	r3, #1
 80056ae:	e005      	b.n	80056bc <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	2b32      	cmp	r3, #50	; 0x32
 80056b4:	d101      	bne.n	80056ba <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80056b6:	2301      	movs	r3, #1
 80056b8:	e000      	b.n	80056bc <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80056ba:	2300      	movs	r3, #0
}
 80056bc:	4618      	mov	r0, r3
 80056be:	3710      	adds	r7, #16
 80056c0:	46bd      	mov	sp, r7
 80056c2:	bd80      	pop	{r7, pc}

080056c4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80056c4:	b084      	sub	sp, #16
 80056c6:	b580      	push	{r7, lr}
 80056c8:	b086      	sub	sp, #24
 80056ca:	af00      	add	r7, sp, #0
 80056cc:	6078      	str	r0, [r7, #4]
 80056ce:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80056d2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80056d6:	2300      	movs	r3, #0
 80056d8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80056de:	2300      	movs	r3, #0
 80056e0:	613b      	str	r3, [r7, #16]
 80056e2:	e009      	b.n	80056f8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80056e4:	687a      	ldr	r2, [r7, #4]
 80056e6:	693b      	ldr	r3, [r7, #16]
 80056e8:	3340      	adds	r3, #64	; 0x40
 80056ea:	009b      	lsls	r3, r3, #2
 80056ec:	4413      	add	r3, r2
 80056ee:	2200      	movs	r2, #0
 80056f0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80056f2:	693b      	ldr	r3, [r7, #16]
 80056f4:	3301      	adds	r3, #1
 80056f6:	613b      	str	r3, [r7, #16]
 80056f8:	693b      	ldr	r3, [r7, #16]
 80056fa:	2b0e      	cmp	r3, #14
 80056fc:	d9f2      	bls.n	80056e4 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80056fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005700:	2b00      	cmp	r3, #0
 8005702:	d11c      	bne.n	800573e <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800570a:	685b      	ldr	r3, [r3, #4]
 800570c:	68fa      	ldr	r2, [r7, #12]
 800570e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005712:	f043 0302 	orr.w	r3, r3, #2
 8005716:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800571c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005728:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005734:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	639a      	str	r2, [r3, #56]	; 0x38
 800573c:	e00b      	b.n	8005756 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005742:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800574e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800575c:	461a      	mov	r2, r3
 800575e:	2300      	movs	r3, #0
 8005760:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005768:	4619      	mov	r1, r3
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005770:	461a      	mov	r2, r3
 8005772:	680b      	ldr	r3, [r1, #0]
 8005774:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005776:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005778:	2b01      	cmp	r3, #1
 800577a:	d10c      	bne.n	8005796 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800577c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800577e:	2b00      	cmp	r3, #0
 8005780:	d104      	bne.n	800578c <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005782:	2100      	movs	r1, #0
 8005784:	6878      	ldr	r0, [r7, #4]
 8005786:	f000 f945 	bl	8005a14 <USB_SetDevSpeed>
 800578a:	e008      	b.n	800579e <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800578c:	2101      	movs	r1, #1
 800578e:	6878      	ldr	r0, [r7, #4]
 8005790:	f000 f940 	bl	8005a14 <USB_SetDevSpeed>
 8005794:	e003      	b.n	800579e <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005796:	2103      	movs	r1, #3
 8005798:	6878      	ldr	r0, [r7, #4]
 800579a:	f000 f93b 	bl	8005a14 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800579e:	2110      	movs	r1, #16
 80057a0:	6878      	ldr	r0, [r7, #4]
 80057a2:	f000 f8f3 	bl	800598c <USB_FlushTxFifo>
 80057a6:	4603      	mov	r3, r0
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d001      	beq.n	80057b0 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80057ac:	2301      	movs	r3, #1
 80057ae:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80057b0:	6878      	ldr	r0, [r7, #4]
 80057b2:	f000 f90f 	bl	80059d4 <USB_FlushRxFifo>
 80057b6:	4603      	mov	r3, r0
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d001      	beq.n	80057c0 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80057bc:	2301      	movs	r3, #1
 80057be:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057c6:	461a      	mov	r2, r3
 80057c8:	2300      	movs	r3, #0
 80057ca:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057d2:	461a      	mov	r2, r3
 80057d4:	2300      	movs	r3, #0
 80057d6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057de:	461a      	mov	r2, r3
 80057e0:	2300      	movs	r3, #0
 80057e2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80057e4:	2300      	movs	r3, #0
 80057e6:	613b      	str	r3, [r7, #16]
 80057e8:	e043      	b.n	8005872 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80057ea:	693b      	ldr	r3, [r7, #16]
 80057ec:	015a      	lsls	r2, r3, #5
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	4413      	add	r3, r2
 80057f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80057fc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005800:	d118      	bne.n	8005834 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8005802:	693b      	ldr	r3, [r7, #16]
 8005804:	2b00      	cmp	r3, #0
 8005806:	d10a      	bne.n	800581e <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005808:	693b      	ldr	r3, [r7, #16]
 800580a:	015a      	lsls	r2, r3, #5
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	4413      	add	r3, r2
 8005810:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005814:	461a      	mov	r2, r3
 8005816:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800581a:	6013      	str	r3, [r2, #0]
 800581c:	e013      	b.n	8005846 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800581e:	693b      	ldr	r3, [r7, #16]
 8005820:	015a      	lsls	r2, r3, #5
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	4413      	add	r3, r2
 8005826:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800582a:	461a      	mov	r2, r3
 800582c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005830:	6013      	str	r3, [r2, #0]
 8005832:	e008      	b.n	8005846 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005834:	693b      	ldr	r3, [r7, #16]
 8005836:	015a      	lsls	r2, r3, #5
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	4413      	add	r3, r2
 800583c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005840:	461a      	mov	r2, r3
 8005842:	2300      	movs	r3, #0
 8005844:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005846:	693b      	ldr	r3, [r7, #16]
 8005848:	015a      	lsls	r2, r3, #5
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	4413      	add	r3, r2
 800584e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005852:	461a      	mov	r2, r3
 8005854:	2300      	movs	r3, #0
 8005856:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005858:	693b      	ldr	r3, [r7, #16]
 800585a:	015a      	lsls	r2, r3, #5
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	4413      	add	r3, r2
 8005860:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005864:	461a      	mov	r2, r3
 8005866:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800586a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800586c:	693b      	ldr	r3, [r7, #16]
 800586e:	3301      	adds	r3, #1
 8005870:	613b      	str	r3, [r7, #16]
 8005872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005874:	693a      	ldr	r2, [r7, #16]
 8005876:	429a      	cmp	r2, r3
 8005878:	d3b7      	bcc.n	80057ea <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800587a:	2300      	movs	r3, #0
 800587c:	613b      	str	r3, [r7, #16]
 800587e:	e043      	b.n	8005908 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005880:	693b      	ldr	r3, [r7, #16]
 8005882:	015a      	lsls	r2, r3, #5
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	4413      	add	r3, r2
 8005888:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005892:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005896:	d118      	bne.n	80058ca <USB_DevInit+0x206>
    {
      if (i == 0U)
 8005898:	693b      	ldr	r3, [r7, #16]
 800589a:	2b00      	cmp	r3, #0
 800589c:	d10a      	bne.n	80058b4 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800589e:	693b      	ldr	r3, [r7, #16]
 80058a0:	015a      	lsls	r2, r3, #5
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	4413      	add	r3, r2
 80058a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058aa:	461a      	mov	r2, r3
 80058ac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80058b0:	6013      	str	r3, [r2, #0]
 80058b2:	e013      	b.n	80058dc <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80058b4:	693b      	ldr	r3, [r7, #16]
 80058b6:	015a      	lsls	r2, r3, #5
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	4413      	add	r3, r2
 80058bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058c0:	461a      	mov	r2, r3
 80058c2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80058c6:	6013      	str	r3, [r2, #0]
 80058c8:	e008      	b.n	80058dc <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80058ca:	693b      	ldr	r3, [r7, #16]
 80058cc:	015a      	lsls	r2, r3, #5
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	4413      	add	r3, r2
 80058d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058d6:	461a      	mov	r2, r3
 80058d8:	2300      	movs	r3, #0
 80058da:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80058dc:	693b      	ldr	r3, [r7, #16]
 80058de:	015a      	lsls	r2, r3, #5
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	4413      	add	r3, r2
 80058e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058e8:	461a      	mov	r2, r3
 80058ea:	2300      	movs	r3, #0
 80058ec:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80058ee:	693b      	ldr	r3, [r7, #16]
 80058f0:	015a      	lsls	r2, r3, #5
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	4413      	add	r3, r2
 80058f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058fa:	461a      	mov	r2, r3
 80058fc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005900:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005902:	693b      	ldr	r3, [r7, #16]
 8005904:	3301      	adds	r3, #1
 8005906:	613b      	str	r3, [r7, #16]
 8005908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800590a:	693a      	ldr	r2, [r7, #16]
 800590c:	429a      	cmp	r2, r3
 800590e:	d3b7      	bcc.n	8005880 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005916:	691b      	ldr	r3, [r3, #16]
 8005918:	68fa      	ldr	r2, [r7, #12]
 800591a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800591e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005922:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	2200      	movs	r2, #0
 8005928:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005930:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005932:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005934:	2b00      	cmp	r3, #0
 8005936:	d105      	bne.n	8005944 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	699b      	ldr	r3, [r3, #24]
 800593c:	f043 0210 	orr.w	r2, r3, #16
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	699a      	ldr	r2, [r3, #24]
 8005948:	4b0f      	ldr	r3, [pc, #60]	; (8005988 <USB_DevInit+0x2c4>)
 800594a:	4313      	orrs	r3, r2
 800594c:	687a      	ldr	r2, [r7, #4]
 800594e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005950:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005952:	2b00      	cmp	r3, #0
 8005954:	d005      	beq.n	8005962 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	699b      	ldr	r3, [r3, #24]
 800595a:	f043 0208 	orr.w	r2, r3, #8
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005962:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005964:	2b01      	cmp	r3, #1
 8005966:	d107      	bne.n	8005978 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	699b      	ldr	r3, [r3, #24]
 800596c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005970:	f043 0304 	orr.w	r3, r3, #4
 8005974:	687a      	ldr	r2, [r7, #4]
 8005976:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005978:	7dfb      	ldrb	r3, [r7, #23]
}
 800597a:	4618      	mov	r0, r3
 800597c:	3718      	adds	r7, #24
 800597e:	46bd      	mov	sp, r7
 8005980:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005984:	b004      	add	sp, #16
 8005986:	4770      	bx	lr
 8005988:	803c3800 	.word	0x803c3800

0800598c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800598c:	b480      	push	{r7}
 800598e:	b085      	sub	sp, #20
 8005990:	af00      	add	r7, sp, #0
 8005992:	6078      	str	r0, [r7, #4]
 8005994:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005996:	2300      	movs	r3, #0
 8005998:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800599a:	683b      	ldr	r3, [r7, #0]
 800599c:	019b      	lsls	r3, r3, #6
 800599e:	f043 0220 	orr.w	r2, r3, #32
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	3301      	adds	r3, #1
 80059aa:	60fb      	str	r3, [r7, #12]
 80059ac:	4a08      	ldr	r2, [pc, #32]	; (80059d0 <USB_FlushTxFifo+0x44>)
 80059ae:	4293      	cmp	r3, r2
 80059b0:	d901      	bls.n	80059b6 <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 80059b2:	2303      	movs	r3, #3
 80059b4:	e006      	b.n	80059c4 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	691b      	ldr	r3, [r3, #16]
 80059ba:	f003 0320 	and.w	r3, r3, #32
 80059be:	2b20      	cmp	r3, #32
 80059c0:	d0f1      	beq.n	80059a6 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80059c2:	2300      	movs	r3, #0
}
 80059c4:	4618      	mov	r0, r3
 80059c6:	3714      	adds	r7, #20
 80059c8:	46bd      	mov	sp, r7
 80059ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ce:	4770      	bx	lr
 80059d0:	00030d40 	.word	0x00030d40

080059d4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80059d4:	b480      	push	{r7}
 80059d6:	b085      	sub	sp, #20
 80059d8:	af00      	add	r7, sp, #0
 80059da:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80059dc:	2300      	movs	r3, #0
 80059de:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	2210      	movs	r2, #16
 80059e4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	3301      	adds	r3, #1
 80059ea:	60fb      	str	r3, [r7, #12]
 80059ec:	4a08      	ldr	r2, [pc, #32]	; (8005a10 <USB_FlushRxFifo+0x3c>)
 80059ee:	4293      	cmp	r3, r2
 80059f0:	d901      	bls.n	80059f6 <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 80059f2:	2303      	movs	r3, #3
 80059f4:	e006      	b.n	8005a04 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	691b      	ldr	r3, [r3, #16]
 80059fa:	f003 0310 	and.w	r3, r3, #16
 80059fe:	2b10      	cmp	r3, #16
 8005a00:	d0f1      	beq.n	80059e6 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8005a02:	2300      	movs	r3, #0
}
 8005a04:	4618      	mov	r0, r3
 8005a06:	3714      	adds	r7, #20
 8005a08:	46bd      	mov	sp, r7
 8005a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0e:	4770      	bx	lr
 8005a10:	00030d40 	.word	0x00030d40

08005a14 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005a14:	b480      	push	{r7}
 8005a16:	b085      	sub	sp, #20
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	6078      	str	r0, [r7, #4]
 8005a1c:	460b      	mov	r3, r1
 8005a1e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a2a:	681a      	ldr	r2, [r3, #0]
 8005a2c:	78fb      	ldrb	r3, [r7, #3]
 8005a2e:	68f9      	ldr	r1, [r7, #12]
 8005a30:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005a34:	4313      	orrs	r3, r2
 8005a36:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005a38:	2300      	movs	r3, #0
}
 8005a3a:	4618      	mov	r0, r3
 8005a3c:	3714      	adds	r7, #20
 8005a3e:	46bd      	mov	sp, r7
 8005a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a44:	4770      	bx	lr

08005a46 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005a46:	b480      	push	{r7}
 8005a48:	b087      	sub	sp, #28
 8005a4a:	af00      	add	r7, sp, #0
 8005a4c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8005a52:	693b      	ldr	r3, [r7, #16]
 8005a54:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a58:	689b      	ldr	r3, [r3, #8]
 8005a5a:	f003 0306 	and.w	r3, r3, #6
 8005a5e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d102      	bne.n	8005a6c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8005a66:	2300      	movs	r3, #0
 8005a68:	75fb      	strb	r3, [r7, #23]
 8005a6a:	e00a      	b.n	8005a82 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	2b02      	cmp	r3, #2
 8005a70:	d002      	beq.n	8005a78 <USB_GetDevSpeed+0x32>
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	2b06      	cmp	r3, #6
 8005a76:	d102      	bne.n	8005a7e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005a78:	2302      	movs	r3, #2
 8005a7a:	75fb      	strb	r3, [r7, #23]
 8005a7c:	e001      	b.n	8005a82 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8005a7e:	230f      	movs	r3, #15
 8005a80:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8005a82:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a84:	4618      	mov	r0, r3
 8005a86:	371c      	adds	r7, #28
 8005a88:	46bd      	mov	sp, r7
 8005a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8e:	4770      	bx	lr

08005a90 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005a90:	b480      	push	{r7}
 8005a92:	b085      	sub	sp, #20
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	6078      	str	r0, [r7, #4]
 8005a98:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005a9e:	683b      	ldr	r3, [r7, #0]
 8005aa0:	781b      	ldrb	r3, [r3, #0]
 8005aa2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005aa4:	683b      	ldr	r3, [r7, #0]
 8005aa6:	785b      	ldrb	r3, [r3, #1]
 8005aa8:	2b01      	cmp	r3, #1
 8005aaa:	d13a      	bne.n	8005b22 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ab2:	69da      	ldr	r2, [r3, #28]
 8005ab4:	683b      	ldr	r3, [r7, #0]
 8005ab6:	781b      	ldrb	r3, [r3, #0]
 8005ab8:	f003 030f 	and.w	r3, r3, #15
 8005abc:	2101      	movs	r1, #1
 8005abe:	fa01 f303 	lsl.w	r3, r1, r3
 8005ac2:	b29b      	uxth	r3, r3
 8005ac4:	68f9      	ldr	r1, [r7, #12]
 8005ac6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005aca:	4313      	orrs	r3, r2
 8005acc:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8005ace:	68bb      	ldr	r3, [r7, #8]
 8005ad0:	015a      	lsls	r2, r3, #5
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	4413      	add	r3, r2
 8005ad6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d155      	bne.n	8005b90 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005ae4:	68bb      	ldr	r3, [r7, #8]
 8005ae6:	015a      	lsls	r2, r3, #5
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	4413      	add	r3, r2
 8005aec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005af0:	681a      	ldr	r2, [r3, #0]
 8005af2:	683b      	ldr	r3, [r7, #0]
 8005af4:	689b      	ldr	r3, [r3, #8]
 8005af6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005afa:	683b      	ldr	r3, [r7, #0]
 8005afc:	78db      	ldrb	r3, [r3, #3]
 8005afe:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005b00:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005b02:	68bb      	ldr	r3, [r7, #8]
 8005b04:	059b      	lsls	r3, r3, #22
 8005b06:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005b08:	4313      	orrs	r3, r2
 8005b0a:	68ba      	ldr	r2, [r7, #8]
 8005b0c:	0151      	lsls	r1, r2, #5
 8005b0e:	68fa      	ldr	r2, [r7, #12]
 8005b10:	440a      	add	r2, r1
 8005b12:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b16:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b1a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b1e:	6013      	str	r3, [r2, #0]
 8005b20:	e036      	b.n	8005b90 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b28:	69da      	ldr	r2, [r3, #28]
 8005b2a:	683b      	ldr	r3, [r7, #0]
 8005b2c:	781b      	ldrb	r3, [r3, #0]
 8005b2e:	f003 030f 	and.w	r3, r3, #15
 8005b32:	2101      	movs	r1, #1
 8005b34:	fa01 f303 	lsl.w	r3, r1, r3
 8005b38:	041b      	lsls	r3, r3, #16
 8005b3a:	68f9      	ldr	r1, [r7, #12]
 8005b3c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005b40:	4313      	orrs	r3, r2
 8005b42:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005b44:	68bb      	ldr	r3, [r7, #8]
 8005b46:	015a      	lsls	r2, r3, #5
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	4413      	add	r3, r2
 8005b4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d11a      	bne.n	8005b90 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005b5a:	68bb      	ldr	r3, [r7, #8]
 8005b5c:	015a      	lsls	r2, r3, #5
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	4413      	add	r3, r2
 8005b62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b66:	681a      	ldr	r2, [r3, #0]
 8005b68:	683b      	ldr	r3, [r7, #0]
 8005b6a:	689b      	ldr	r3, [r3, #8]
 8005b6c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005b70:	683b      	ldr	r3, [r7, #0]
 8005b72:	78db      	ldrb	r3, [r3, #3]
 8005b74:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005b76:	430b      	orrs	r3, r1
 8005b78:	4313      	orrs	r3, r2
 8005b7a:	68ba      	ldr	r2, [r7, #8]
 8005b7c:	0151      	lsls	r1, r2, #5
 8005b7e:	68fa      	ldr	r2, [r7, #12]
 8005b80:	440a      	add	r2, r1
 8005b82:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b86:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b8a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b8e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005b90:	2300      	movs	r3, #0
}
 8005b92:	4618      	mov	r0, r3
 8005b94:	3714      	adds	r7, #20
 8005b96:	46bd      	mov	sp, r7
 8005b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b9c:	4770      	bx	lr
	...

08005ba0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005ba0:	b480      	push	{r7}
 8005ba2:	b085      	sub	sp, #20
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	6078      	str	r0, [r7, #4]
 8005ba8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005bae:	683b      	ldr	r3, [r7, #0]
 8005bb0:	781b      	ldrb	r3, [r3, #0]
 8005bb2:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005bb4:	683b      	ldr	r3, [r7, #0]
 8005bb6:	785b      	ldrb	r3, [r3, #1]
 8005bb8:	2b01      	cmp	r3, #1
 8005bba:	d161      	bne.n	8005c80 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005bbc:	68bb      	ldr	r3, [r7, #8]
 8005bbe:	015a      	lsls	r2, r3, #5
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	4413      	add	r3, r2
 8005bc4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005bce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005bd2:	d11f      	bne.n	8005c14 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005bd4:	68bb      	ldr	r3, [r7, #8]
 8005bd6:	015a      	lsls	r2, r3, #5
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	4413      	add	r3, r2
 8005bdc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	68ba      	ldr	r2, [r7, #8]
 8005be4:	0151      	lsls	r1, r2, #5
 8005be6:	68fa      	ldr	r2, [r7, #12]
 8005be8:	440a      	add	r2, r1
 8005bea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005bee:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005bf2:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005bf4:	68bb      	ldr	r3, [r7, #8]
 8005bf6:	015a      	lsls	r2, r3, #5
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	4413      	add	r3, r2
 8005bfc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	68ba      	ldr	r2, [r7, #8]
 8005c04:	0151      	lsls	r1, r2, #5
 8005c06:	68fa      	ldr	r2, [r7, #12]
 8005c08:	440a      	add	r2, r1
 8005c0a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c0e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005c12:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c1a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005c1c:	683b      	ldr	r3, [r7, #0]
 8005c1e:	781b      	ldrb	r3, [r3, #0]
 8005c20:	f003 030f 	and.w	r3, r3, #15
 8005c24:	2101      	movs	r1, #1
 8005c26:	fa01 f303 	lsl.w	r3, r1, r3
 8005c2a:	b29b      	uxth	r3, r3
 8005c2c:	43db      	mvns	r3, r3
 8005c2e:	68f9      	ldr	r1, [r7, #12]
 8005c30:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005c34:	4013      	ands	r3, r2
 8005c36:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c3e:	69da      	ldr	r2, [r3, #28]
 8005c40:	683b      	ldr	r3, [r7, #0]
 8005c42:	781b      	ldrb	r3, [r3, #0]
 8005c44:	f003 030f 	and.w	r3, r3, #15
 8005c48:	2101      	movs	r1, #1
 8005c4a:	fa01 f303 	lsl.w	r3, r1, r3
 8005c4e:	b29b      	uxth	r3, r3
 8005c50:	43db      	mvns	r3, r3
 8005c52:	68f9      	ldr	r1, [r7, #12]
 8005c54:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005c58:	4013      	ands	r3, r2
 8005c5a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005c5c:	68bb      	ldr	r3, [r7, #8]
 8005c5e:	015a      	lsls	r2, r3, #5
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	4413      	add	r3, r2
 8005c64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c68:	681a      	ldr	r2, [r3, #0]
 8005c6a:	68bb      	ldr	r3, [r7, #8]
 8005c6c:	0159      	lsls	r1, r3, #5
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	440b      	add	r3, r1
 8005c72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c76:	4619      	mov	r1, r3
 8005c78:	4b35      	ldr	r3, [pc, #212]	; (8005d50 <USB_DeactivateEndpoint+0x1b0>)
 8005c7a:	4013      	ands	r3, r2
 8005c7c:	600b      	str	r3, [r1, #0]
 8005c7e:	e060      	b.n	8005d42 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005c80:	68bb      	ldr	r3, [r7, #8]
 8005c82:	015a      	lsls	r2, r3, #5
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	4413      	add	r3, r2
 8005c88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005c92:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005c96:	d11f      	bne.n	8005cd8 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005c98:	68bb      	ldr	r3, [r7, #8]
 8005c9a:	015a      	lsls	r2, r3, #5
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	4413      	add	r3, r2
 8005ca0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	68ba      	ldr	r2, [r7, #8]
 8005ca8:	0151      	lsls	r1, r2, #5
 8005caa:	68fa      	ldr	r2, [r7, #12]
 8005cac:	440a      	add	r2, r1
 8005cae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005cb2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005cb6:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005cb8:	68bb      	ldr	r3, [r7, #8]
 8005cba:	015a      	lsls	r2, r3, #5
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	4413      	add	r3, r2
 8005cc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	68ba      	ldr	r2, [r7, #8]
 8005cc8:	0151      	lsls	r1, r2, #5
 8005cca:	68fa      	ldr	r2, [r7, #12]
 8005ccc:	440a      	add	r2, r1
 8005cce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005cd2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005cd6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005cde:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005ce0:	683b      	ldr	r3, [r7, #0]
 8005ce2:	781b      	ldrb	r3, [r3, #0]
 8005ce4:	f003 030f 	and.w	r3, r3, #15
 8005ce8:	2101      	movs	r1, #1
 8005cea:	fa01 f303 	lsl.w	r3, r1, r3
 8005cee:	041b      	lsls	r3, r3, #16
 8005cf0:	43db      	mvns	r3, r3
 8005cf2:	68f9      	ldr	r1, [r7, #12]
 8005cf4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005cf8:	4013      	ands	r3, r2
 8005cfa:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d02:	69da      	ldr	r2, [r3, #28]
 8005d04:	683b      	ldr	r3, [r7, #0]
 8005d06:	781b      	ldrb	r3, [r3, #0]
 8005d08:	f003 030f 	and.w	r3, r3, #15
 8005d0c:	2101      	movs	r1, #1
 8005d0e:	fa01 f303 	lsl.w	r3, r1, r3
 8005d12:	041b      	lsls	r3, r3, #16
 8005d14:	43db      	mvns	r3, r3
 8005d16:	68f9      	ldr	r1, [r7, #12]
 8005d18:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005d1c:	4013      	ands	r3, r2
 8005d1e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005d20:	68bb      	ldr	r3, [r7, #8]
 8005d22:	015a      	lsls	r2, r3, #5
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	4413      	add	r3, r2
 8005d28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d2c:	681a      	ldr	r2, [r3, #0]
 8005d2e:	68bb      	ldr	r3, [r7, #8]
 8005d30:	0159      	lsls	r1, r3, #5
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	440b      	add	r3, r1
 8005d36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d3a:	4619      	mov	r1, r3
 8005d3c:	4b05      	ldr	r3, [pc, #20]	; (8005d54 <USB_DeactivateEndpoint+0x1b4>)
 8005d3e:	4013      	ands	r3, r2
 8005d40:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8005d42:	2300      	movs	r3, #0
}
 8005d44:	4618      	mov	r0, r3
 8005d46:	3714      	adds	r7, #20
 8005d48:	46bd      	mov	sp, r7
 8005d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d4e:	4770      	bx	lr
 8005d50:	ec337800 	.word	0xec337800
 8005d54:	eff37800 	.word	0xeff37800

08005d58 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005d58:	b580      	push	{r7, lr}
 8005d5a:	b08a      	sub	sp, #40	; 0x28
 8005d5c:	af02      	add	r7, sp, #8
 8005d5e:	60f8      	str	r0, [r7, #12]
 8005d60:	60b9      	str	r1, [r7, #8]
 8005d62:	4613      	mov	r3, r2
 8005d64:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8005d6a:	68bb      	ldr	r3, [r7, #8]
 8005d6c:	781b      	ldrb	r3, [r3, #0]
 8005d6e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005d70:	68bb      	ldr	r3, [r7, #8]
 8005d72:	785b      	ldrb	r3, [r3, #1]
 8005d74:	2b01      	cmp	r3, #1
 8005d76:	f040 815c 	bne.w	8006032 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005d7a:	68bb      	ldr	r3, [r7, #8]
 8005d7c:	695b      	ldr	r3, [r3, #20]
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d132      	bne.n	8005de8 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005d82:	69bb      	ldr	r3, [r7, #24]
 8005d84:	015a      	lsls	r2, r3, #5
 8005d86:	69fb      	ldr	r3, [r7, #28]
 8005d88:	4413      	add	r3, r2
 8005d8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d8e:	691b      	ldr	r3, [r3, #16]
 8005d90:	69ba      	ldr	r2, [r7, #24]
 8005d92:	0151      	lsls	r1, r2, #5
 8005d94:	69fa      	ldr	r2, [r7, #28]
 8005d96:	440a      	add	r2, r1
 8005d98:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d9c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005da0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005da4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005da6:	69bb      	ldr	r3, [r7, #24]
 8005da8:	015a      	lsls	r2, r3, #5
 8005daa:	69fb      	ldr	r3, [r7, #28]
 8005dac:	4413      	add	r3, r2
 8005dae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005db2:	691b      	ldr	r3, [r3, #16]
 8005db4:	69ba      	ldr	r2, [r7, #24]
 8005db6:	0151      	lsls	r1, r2, #5
 8005db8:	69fa      	ldr	r2, [r7, #28]
 8005dba:	440a      	add	r2, r1
 8005dbc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005dc0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005dc4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005dc6:	69bb      	ldr	r3, [r7, #24]
 8005dc8:	015a      	lsls	r2, r3, #5
 8005dca:	69fb      	ldr	r3, [r7, #28]
 8005dcc:	4413      	add	r3, r2
 8005dce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005dd2:	691b      	ldr	r3, [r3, #16]
 8005dd4:	69ba      	ldr	r2, [r7, #24]
 8005dd6:	0151      	lsls	r1, r2, #5
 8005dd8:	69fa      	ldr	r2, [r7, #28]
 8005dda:	440a      	add	r2, r1
 8005ddc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005de0:	0cdb      	lsrs	r3, r3, #19
 8005de2:	04db      	lsls	r3, r3, #19
 8005de4:	6113      	str	r3, [r2, #16]
 8005de6:	e074      	b.n	8005ed2 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005de8:	69bb      	ldr	r3, [r7, #24]
 8005dea:	015a      	lsls	r2, r3, #5
 8005dec:	69fb      	ldr	r3, [r7, #28]
 8005dee:	4413      	add	r3, r2
 8005df0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005df4:	691b      	ldr	r3, [r3, #16]
 8005df6:	69ba      	ldr	r2, [r7, #24]
 8005df8:	0151      	lsls	r1, r2, #5
 8005dfa:	69fa      	ldr	r2, [r7, #28]
 8005dfc:	440a      	add	r2, r1
 8005dfe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e02:	0cdb      	lsrs	r3, r3, #19
 8005e04:	04db      	lsls	r3, r3, #19
 8005e06:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005e08:	69bb      	ldr	r3, [r7, #24]
 8005e0a:	015a      	lsls	r2, r3, #5
 8005e0c:	69fb      	ldr	r3, [r7, #28]
 8005e0e:	4413      	add	r3, r2
 8005e10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e14:	691b      	ldr	r3, [r3, #16]
 8005e16:	69ba      	ldr	r2, [r7, #24]
 8005e18:	0151      	lsls	r1, r2, #5
 8005e1a:	69fa      	ldr	r2, [r7, #28]
 8005e1c:	440a      	add	r2, r1
 8005e1e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e22:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005e26:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005e2a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005e2c:	69bb      	ldr	r3, [r7, #24]
 8005e2e:	015a      	lsls	r2, r3, #5
 8005e30:	69fb      	ldr	r3, [r7, #28]
 8005e32:	4413      	add	r3, r2
 8005e34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e38:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8005e3a:	68bb      	ldr	r3, [r7, #8]
 8005e3c:	6959      	ldr	r1, [r3, #20]
 8005e3e:	68bb      	ldr	r3, [r7, #8]
 8005e40:	689b      	ldr	r3, [r3, #8]
 8005e42:	440b      	add	r3, r1
 8005e44:	1e59      	subs	r1, r3, #1
 8005e46:	68bb      	ldr	r3, [r7, #8]
 8005e48:	689b      	ldr	r3, [r3, #8]
 8005e4a:	fbb1 f3f3 	udiv	r3, r1, r3
 8005e4e:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005e50:	4b9d      	ldr	r3, [pc, #628]	; (80060c8 <USB_EPStartXfer+0x370>)
 8005e52:	400b      	ands	r3, r1
 8005e54:	69b9      	ldr	r1, [r7, #24]
 8005e56:	0148      	lsls	r0, r1, #5
 8005e58:	69f9      	ldr	r1, [r7, #28]
 8005e5a:	4401      	add	r1, r0
 8005e5c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005e60:	4313      	orrs	r3, r2
 8005e62:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005e64:	69bb      	ldr	r3, [r7, #24]
 8005e66:	015a      	lsls	r2, r3, #5
 8005e68:	69fb      	ldr	r3, [r7, #28]
 8005e6a:	4413      	add	r3, r2
 8005e6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e70:	691a      	ldr	r2, [r3, #16]
 8005e72:	68bb      	ldr	r3, [r7, #8]
 8005e74:	695b      	ldr	r3, [r3, #20]
 8005e76:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005e7a:	69b9      	ldr	r1, [r7, #24]
 8005e7c:	0148      	lsls	r0, r1, #5
 8005e7e:	69f9      	ldr	r1, [r7, #28]
 8005e80:	4401      	add	r1, r0
 8005e82:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005e86:	4313      	orrs	r3, r2
 8005e88:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8005e8a:	68bb      	ldr	r3, [r7, #8]
 8005e8c:	78db      	ldrb	r3, [r3, #3]
 8005e8e:	2b01      	cmp	r3, #1
 8005e90:	d11f      	bne.n	8005ed2 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005e92:	69bb      	ldr	r3, [r7, #24]
 8005e94:	015a      	lsls	r2, r3, #5
 8005e96:	69fb      	ldr	r3, [r7, #28]
 8005e98:	4413      	add	r3, r2
 8005e9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e9e:	691b      	ldr	r3, [r3, #16]
 8005ea0:	69ba      	ldr	r2, [r7, #24]
 8005ea2:	0151      	lsls	r1, r2, #5
 8005ea4:	69fa      	ldr	r2, [r7, #28]
 8005ea6:	440a      	add	r2, r1
 8005ea8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005eac:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8005eb0:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8005eb2:	69bb      	ldr	r3, [r7, #24]
 8005eb4:	015a      	lsls	r2, r3, #5
 8005eb6:	69fb      	ldr	r3, [r7, #28]
 8005eb8:	4413      	add	r3, r2
 8005eba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ebe:	691b      	ldr	r3, [r3, #16]
 8005ec0:	69ba      	ldr	r2, [r7, #24]
 8005ec2:	0151      	lsls	r1, r2, #5
 8005ec4:	69fa      	ldr	r2, [r7, #28]
 8005ec6:	440a      	add	r2, r1
 8005ec8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ecc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005ed0:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8005ed2:	79fb      	ldrb	r3, [r7, #7]
 8005ed4:	2b01      	cmp	r3, #1
 8005ed6:	d14b      	bne.n	8005f70 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005ed8:	68bb      	ldr	r3, [r7, #8]
 8005eda:	691b      	ldr	r3, [r3, #16]
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d009      	beq.n	8005ef4 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005ee0:	69bb      	ldr	r3, [r7, #24]
 8005ee2:	015a      	lsls	r2, r3, #5
 8005ee4:	69fb      	ldr	r3, [r7, #28]
 8005ee6:	4413      	add	r3, r2
 8005ee8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005eec:	461a      	mov	r2, r3
 8005eee:	68bb      	ldr	r3, [r7, #8]
 8005ef0:	691b      	ldr	r3, [r3, #16]
 8005ef2:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8005ef4:	68bb      	ldr	r3, [r7, #8]
 8005ef6:	78db      	ldrb	r3, [r3, #3]
 8005ef8:	2b01      	cmp	r3, #1
 8005efa:	d128      	bne.n	8005f4e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005efc:	69fb      	ldr	r3, [r7, #28]
 8005efe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f02:	689b      	ldr	r3, [r3, #8]
 8005f04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d110      	bne.n	8005f2e <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005f0c:	69bb      	ldr	r3, [r7, #24]
 8005f0e:	015a      	lsls	r2, r3, #5
 8005f10:	69fb      	ldr	r3, [r7, #28]
 8005f12:	4413      	add	r3, r2
 8005f14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	69ba      	ldr	r2, [r7, #24]
 8005f1c:	0151      	lsls	r1, r2, #5
 8005f1e:	69fa      	ldr	r2, [r7, #28]
 8005f20:	440a      	add	r2, r1
 8005f22:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f26:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005f2a:	6013      	str	r3, [r2, #0]
 8005f2c:	e00f      	b.n	8005f4e <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005f2e:	69bb      	ldr	r3, [r7, #24]
 8005f30:	015a      	lsls	r2, r3, #5
 8005f32:	69fb      	ldr	r3, [r7, #28]
 8005f34:	4413      	add	r3, r2
 8005f36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	69ba      	ldr	r2, [r7, #24]
 8005f3e:	0151      	lsls	r1, r2, #5
 8005f40:	69fa      	ldr	r2, [r7, #28]
 8005f42:	440a      	add	r2, r1
 8005f44:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005f4c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005f4e:	69bb      	ldr	r3, [r7, #24]
 8005f50:	015a      	lsls	r2, r3, #5
 8005f52:	69fb      	ldr	r3, [r7, #28]
 8005f54:	4413      	add	r3, r2
 8005f56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	69ba      	ldr	r2, [r7, #24]
 8005f5e:	0151      	lsls	r1, r2, #5
 8005f60:	69fa      	ldr	r2, [r7, #28]
 8005f62:	440a      	add	r2, r1
 8005f64:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f68:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005f6c:	6013      	str	r3, [r2, #0]
 8005f6e:	e12f      	b.n	80061d0 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005f70:	69bb      	ldr	r3, [r7, #24]
 8005f72:	015a      	lsls	r2, r3, #5
 8005f74:	69fb      	ldr	r3, [r7, #28]
 8005f76:	4413      	add	r3, r2
 8005f78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	69ba      	ldr	r2, [r7, #24]
 8005f80:	0151      	lsls	r1, r2, #5
 8005f82:	69fa      	ldr	r2, [r7, #28]
 8005f84:	440a      	add	r2, r1
 8005f86:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f8a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005f8e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005f90:	68bb      	ldr	r3, [r7, #8]
 8005f92:	78db      	ldrb	r3, [r3, #3]
 8005f94:	2b01      	cmp	r3, #1
 8005f96:	d015      	beq.n	8005fc4 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005f98:	68bb      	ldr	r3, [r7, #8]
 8005f9a:	695b      	ldr	r3, [r3, #20]
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	f000 8117 	beq.w	80061d0 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005fa2:	69fb      	ldr	r3, [r7, #28]
 8005fa4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005fa8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005faa:	68bb      	ldr	r3, [r7, #8]
 8005fac:	781b      	ldrb	r3, [r3, #0]
 8005fae:	f003 030f 	and.w	r3, r3, #15
 8005fb2:	2101      	movs	r1, #1
 8005fb4:	fa01 f303 	lsl.w	r3, r1, r3
 8005fb8:	69f9      	ldr	r1, [r7, #28]
 8005fba:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005fbe:	4313      	orrs	r3, r2
 8005fc0:	634b      	str	r3, [r1, #52]	; 0x34
 8005fc2:	e105      	b.n	80061d0 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005fc4:	69fb      	ldr	r3, [r7, #28]
 8005fc6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005fca:	689b      	ldr	r3, [r3, #8]
 8005fcc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d110      	bne.n	8005ff6 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005fd4:	69bb      	ldr	r3, [r7, #24]
 8005fd6:	015a      	lsls	r2, r3, #5
 8005fd8:	69fb      	ldr	r3, [r7, #28]
 8005fda:	4413      	add	r3, r2
 8005fdc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	69ba      	ldr	r2, [r7, #24]
 8005fe4:	0151      	lsls	r1, r2, #5
 8005fe6:	69fa      	ldr	r2, [r7, #28]
 8005fe8:	440a      	add	r2, r1
 8005fea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005fee:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005ff2:	6013      	str	r3, [r2, #0]
 8005ff4:	e00f      	b.n	8006016 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005ff6:	69bb      	ldr	r3, [r7, #24]
 8005ff8:	015a      	lsls	r2, r3, #5
 8005ffa:	69fb      	ldr	r3, [r7, #28]
 8005ffc:	4413      	add	r3, r2
 8005ffe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	69ba      	ldr	r2, [r7, #24]
 8006006:	0151      	lsls	r1, r2, #5
 8006008:	69fa      	ldr	r2, [r7, #28]
 800600a:	440a      	add	r2, r1
 800600c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006010:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006014:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8006016:	68bb      	ldr	r3, [r7, #8]
 8006018:	68d9      	ldr	r1, [r3, #12]
 800601a:	68bb      	ldr	r3, [r7, #8]
 800601c:	781a      	ldrb	r2, [r3, #0]
 800601e:	68bb      	ldr	r3, [r7, #8]
 8006020:	695b      	ldr	r3, [r3, #20]
 8006022:	b298      	uxth	r0, r3
 8006024:	79fb      	ldrb	r3, [r7, #7]
 8006026:	9300      	str	r3, [sp, #0]
 8006028:	4603      	mov	r3, r0
 800602a:	68f8      	ldr	r0, [r7, #12]
 800602c:	f000 fa2b 	bl	8006486 <USB_WritePacket>
 8006030:	e0ce      	b.n	80061d0 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006032:	69bb      	ldr	r3, [r7, #24]
 8006034:	015a      	lsls	r2, r3, #5
 8006036:	69fb      	ldr	r3, [r7, #28]
 8006038:	4413      	add	r3, r2
 800603a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800603e:	691b      	ldr	r3, [r3, #16]
 8006040:	69ba      	ldr	r2, [r7, #24]
 8006042:	0151      	lsls	r1, r2, #5
 8006044:	69fa      	ldr	r2, [r7, #28]
 8006046:	440a      	add	r2, r1
 8006048:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800604c:	0cdb      	lsrs	r3, r3, #19
 800604e:	04db      	lsls	r3, r3, #19
 8006050:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006052:	69bb      	ldr	r3, [r7, #24]
 8006054:	015a      	lsls	r2, r3, #5
 8006056:	69fb      	ldr	r3, [r7, #28]
 8006058:	4413      	add	r3, r2
 800605a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800605e:	691b      	ldr	r3, [r3, #16]
 8006060:	69ba      	ldr	r2, [r7, #24]
 8006062:	0151      	lsls	r1, r2, #5
 8006064:	69fa      	ldr	r2, [r7, #28]
 8006066:	440a      	add	r2, r1
 8006068:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800606c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006070:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006074:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8006076:	68bb      	ldr	r3, [r7, #8]
 8006078:	695b      	ldr	r3, [r3, #20]
 800607a:	2b00      	cmp	r3, #0
 800607c:	d126      	bne.n	80060cc <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800607e:	69bb      	ldr	r3, [r7, #24]
 8006080:	015a      	lsls	r2, r3, #5
 8006082:	69fb      	ldr	r3, [r7, #28]
 8006084:	4413      	add	r3, r2
 8006086:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800608a:	691a      	ldr	r2, [r3, #16]
 800608c:	68bb      	ldr	r3, [r7, #8]
 800608e:	689b      	ldr	r3, [r3, #8]
 8006090:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006094:	69b9      	ldr	r1, [r7, #24]
 8006096:	0148      	lsls	r0, r1, #5
 8006098:	69f9      	ldr	r1, [r7, #28]
 800609a:	4401      	add	r1, r0
 800609c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80060a0:	4313      	orrs	r3, r2
 80060a2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80060a4:	69bb      	ldr	r3, [r7, #24]
 80060a6:	015a      	lsls	r2, r3, #5
 80060a8:	69fb      	ldr	r3, [r7, #28]
 80060aa:	4413      	add	r3, r2
 80060ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060b0:	691b      	ldr	r3, [r3, #16]
 80060b2:	69ba      	ldr	r2, [r7, #24]
 80060b4:	0151      	lsls	r1, r2, #5
 80060b6:	69fa      	ldr	r2, [r7, #28]
 80060b8:	440a      	add	r2, r1
 80060ba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80060be:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80060c2:	6113      	str	r3, [r2, #16]
 80060c4:	e036      	b.n	8006134 <USB_EPStartXfer+0x3dc>
 80060c6:	bf00      	nop
 80060c8:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80060cc:	68bb      	ldr	r3, [r7, #8]
 80060ce:	695a      	ldr	r2, [r3, #20]
 80060d0:	68bb      	ldr	r3, [r7, #8]
 80060d2:	689b      	ldr	r3, [r3, #8]
 80060d4:	4413      	add	r3, r2
 80060d6:	1e5a      	subs	r2, r3, #1
 80060d8:	68bb      	ldr	r3, [r7, #8]
 80060da:	689b      	ldr	r3, [r3, #8]
 80060dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80060e0:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80060e2:	69bb      	ldr	r3, [r7, #24]
 80060e4:	015a      	lsls	r2, r3, #5
 80060e6:	69fb      	ldr	r3, [r7, #28]
 80060e8:	4413      	add	r3, r2
 80060ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060ee:	691a      	ldr	r2, [r3, #16]
 80060f0:	8afb      	ldrh	r3, [r7, #22]
 80060f2:	04d9      	lsls	r1, r3, #19
 80060f4:	4b39      	ldr	r3, [pc, #228]	; (80061dc <USB_EPStartXfer+0x484>)
 80060f6:	400b      	ands	r3, r1
 80060f8:	69b9      	ldr	r1, [r7, #24]
 80060fa:	0148      	lsls	r0, r1, #5
 80060fc:	69f9      	ldr	r1, [r7, #28]
 80060fe:	4401      	add	r1, r0
 8006100:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006104:	4313      	orrs	r3, r2
 8006106:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8006108:	69bb      	ldr	r3, [r7, #24]
 800610a:	015a      	lsls	r2, r3, #5
 800610c:	69fb      	ldr	r3, [r7, #28]
 800610e:	4413      	add	r3, r2
 8006110:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006114:	691a      	ldr	r2, [r3, #16]
 8006116:	68bb      	ldr	r3, [r7, #8]
 8006118:	689b      	ldr	r3, [r3, #8]
 800611a:	8af9      	ldrh	r1, [r7, #22]
 800611c:	fb01 f303 	mul.w	r3, r1, r3
 8006120:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006124:	69b9      	ldr	r1, [r7, #24]
 8006126:	0148      	lsls	r0, r1, #5
 8006128:	69f9      	ldr	r1, [r7, #28]
 800612a:	4401      	add	r1, r0
 800612c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006130:	4313      	orrs	r3, r2
 8006132:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006134:	79fb      	ldrb	r3, [r7, #7]
 8006136:	2b01      	cmp	r3, #1
 8006138:	d10d      	bne.n	8006156 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800613a:	68bb      	ldr	r3, [r7, #8]
 800613c:	68db      	ldr	r3, [r3, #12]
 800613e:	2b00      	cmp	r3, #0
 8006140:	d009      	beq.n	8006156 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006142:	68bb      	ldr	r3, [r7, #8]
 8006144:	68d9      	ldr	r1, [r3, #12]
 8006146:	69bb      	ldr	r3, [r7, #24]
 8006148:	015a      	lsls	r2, r3, #5
 800614a:	69fb      	ldr	r3, [r7, #28]
 800614c:	4413      	add	r3, r2
 800614e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006152:	460a      	mov	r2, r1
 8006154:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8006156:	68bb      	ldr	r3, [r7, #8]
 8006158:	78db      	ldrb	r3, [r3, #3]
 800615a:	2b01      	cmp	r3, #1
 800615c:	d128      	bne.n	80061b0 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800615e:	69fb      	ldr	r3, [r7, #28]
 8006160:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006164:	689b      	ldr	r3, [r3, #8]
 8006166:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800616a:	2b00      	cmp	r3, #0
 800616c:	d110      	bne.n	8006190 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800616e:	69bb      	ldr	r3, [r7, #24]
 8006170:	015a      	lsls	r2, r3, #5
 8006172:	69fb      	ldr	r3, [r7, #28]
 8006174:	4413      	add	r3, r2
 8006176:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	69ba      	ldr	r2, [r7, #24]
 800617e:	0151      	lsls	r1, r2, #5
 8006180:	69fa      	ldr	r2, [r7, #28]
 8006182:	440a      	add	r2, r1
 8006184:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006188:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800618c:	6013      	str	r3, [r2, #0]
 800618e:	e00f      	b.n	80061b0 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8006190:	69bb      	ldr	r3, [r7, #24]
 8006192:	015a      	lsls	r2, r3, #5
 8006194:	69fb      	ldr	r3, [r7, #28]
 8006196:	4413      	add	r3, r2
 8006198:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	69ba      	ldr	r2, [r7, #24]
 80061a0:	0151      	lsls	r1, r2, #5
 80061a2:	69fa      	ldr	r2, [r7, #28]
 80061a4:	440a      	add	r2, r1
 80061a6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80061aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80061ae:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80061b0:	69bb      	ldr	r3, [r7, #24]
 80061b2:	015a      	lsls	r2, r3, #5
 80061b4:	69fb      	ldr	r3, [r7, #28]
 80061b6:	4413      	add	r3, r2
 80061b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	69ba      	ldr	r2, [r7, #24]
 80061c0:	0151      	lsls	r1, r2, #5
 80061c2:	69fa      	ldr	r2, [r7, #28]
 80061c4:	440a      	add	r2, r1
 80061c6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80061ca:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80061ce:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80061d0:	2300      	movs	r3, #0
}
 80061d2:	4618      	mov	r0, r3
 80061d4:	3720      	adds	r7, #32
 80061d6:	46bd      	mov	sp, r7
 80061d8:	bd80      	pop	{r7, pc}
 80061da:	bf00      	nop
 80061dc:	1ff80000 	.word	0x1ff80000

080061e0 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80061e0:	b480      	push	{r7}
 80061e2:	b087      	sub	sp, #28
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	60f8      	str	r0, [r7, #12]
 80061e8:	60b9      	str	r1, [r7, #8]
 80061ea:	4613      	mov	r3, r2
 80061ec:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80061f2:	68bb      	ldr	r3, [r7, #8]
 80061f4:	781b      	ldrb	r3, [r3, #0]
 80061f6:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80061f8:	68bb      	ldr	r3, [r7, #8]
 80061fa:	785b      	ldrb	r3, [r3, #1]
 80061fc:	2b01      	cmp	r3, #1
 80061fe:	f040 80cd 	bne.w	800639c <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006202:	68bb      	ldr	r3, [r7, #8]
 8006204:	695b      	ldr	r3, [r3, #20]
 8006206:	2b00      	cmp	r3, #0
 8006208:	d132      	bne.n	8006270 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800620a:	693b      	ldr	r3, [r7, #16]
 800620c:	015a      	lsls	r2, r3, #5
 800620e:	697b      	ldr	r3, [r7, #20]
 8006210:	4413      	add	r3, r2
 8006212:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006216:	691b      	ldr	r3, [r3, #16]
 8006218:	693a      	ldr	r2, [r7, #16]
 800621a:	0151      	lsls	r1, r2, #5
 800621c:	697a      	ldr	r2, [r7, #20]
 800621e:	440a      	add	r2, r1
 8006220:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006224:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006228:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800622c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800622e:	693b      	ldr	r3, [r7, #16]
 8006230:	015a      	lsls	r2, r3, #5
 8006232:	697b      	ldr	r3, [r7, #20]
 8006234:	4413      	add	r3, r2
 8006236:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800623a:	691b      	ldr	r3, [r3, #16]
 800623c:	693a      	ldr	r2, [r7, #16]
 800623e:	0151      	lsls	r1, r2, #5
 8006240:	697a      	ldr	r2, [r7, #20]
 8006242:	440a      	add	r2, r1
 8006244:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006248:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800624c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800624e:	693b      	ldr	r3, [r7, #16]
 8006250:	015a      	lsls	r2, r3, #5
 8006252:	697b      	ldr	r3, [r7, #20]
 8006254:	4413      	add	r3, r2
 8006256:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800625a:	691b      	ldr	r3, [r3, #16]
 800625c:	693a      	ldr	r2, [r7, #16]
 800625e:	0151      	lsls	r1, r2, #5
 8006260:	697a      	ldr	r2, [r7, #20]
 8006262:	440a      	add	r2, r1
 8006264:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006268:	0cdb      	lsrs	r3, r3, #19
 800626a:	04db      	lsls	r3, r3, #19
 800626c:	6113      	str	r3, [r2, #16]
 800626e:	e04e      	b.n	800630e <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006270:	693b      	ldr	r3, [r7, #16]
 8006272:	015a      	lsls	r2, r3, #5
 8006274:	697b      	ldr	r3, [r7, #20]
 8006276:	4413      	add	r3, r2
 8006278:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800627c:	691b      	ldr	r3, [r3, #16]
 800627e:	693a      	ldr	r2, [r7, #16]
 8006280:	0151      	lsls	r1, r2, #5
 8006282:	697a      	ldr	r2, [r7, #20]
 8006284:	440a      	add	r2, r1
 8006286:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800628a:	0cdb      	lsrs	r3, r3, #19
 800628c:	04db      	lsls	r3, r3, #19
 800628e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006290:	693b      	ldr	r3, [r7, #16]
 8006292:	015a      	lsls	r2, r3, #5
 8006294:	697b      	ldr	r3, [r7, #20]
 8006296:	4413      	add	r3, r2
 8006298:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800629c:	691b      	ldr	r3, [r3, #16]
 800629e:	693a      	ldr	r2, [r7, #16]
 80062a0:	0151      	lsls	r1, r2, #5
 80062a2:	697a      	ldr	r2, [r7, #20]
 80062a4:	440a      	add	r2, r1
 80062a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80062aa:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80062ae:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80062b2:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80062b4:	68bb      	ldr	r3, [r7, #8]
 80062b6:	695a      	ldr	r2, [r3, #20]
 80062b8:	68bb      	ldr	r3, [r7, #8]
 80062ba:	689b      	ldr	r3, [r3, #8]
 80062bc:	429a      	cmp	r2, r3
 80062be:	d903      	bls.n	80062c8 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80062c0:	68bb      	ldr	r3, [r7, #8]
 80062c2:	689a      	ldr	r2, [r3, #8]
 80062c4:	68bb      	ldr	r3, [r7, #8]
 80062c6:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80062c8:	693b      	ldr	r3, [r7, #16]
 80062ca:	015a      	lsls	r2, r3, #5
 80062cc:	697b      	ldr	r3, [r7, #20]
 80062ce:	4413      	add	r3, r2
 80062d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062d4:	691b      	ldr	r3, [r3, #16]
 80062d6:	693a      	ldr	r2, [r7, #16]
 80062d8:	0151      	lsls	r1, r2, #5
 80062da:	697a      	ldr	r2, [r7, #20]
 80062dc:	440a      	add	r2, r1
 80062de:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80062e2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80062e6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80062e8:	693b      	ldr	r3, [r7, #16]
 80062ea:	015a      	lsls	r2, r3, #5
 80062ec:	697b      	ldr	r3, [r7, #20]
 80062ee:	4413      	add	r3, r2
 80062f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062f4:	691a      	ldr	r2, [r3, #16]
 80062f6:	68bb      	ldr	r3, [r7, #8]
 80062f8:	695b      	ldr	r3, [r3, #20]
 80062fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80062fe:	6939      	ldr	r1, [r7, #16]
 8006300:	0148      	lsls	r0, r1, #5
 8006302:	6979      	ldr	r1, [r7, #20]
 8006304:	4401      	add	r1, r0
 8006306:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800630a:	4313      	orrs	r3, r2
 800630c:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800630e:	79fb      	ldrb	r3, [r7, #7]
 8006310:	2b01      	cmp	r3, #1
 8006312:	d11e      	bne.n	8006352 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006314:	68bb      	ldr	r3, [r7, #8]
 8006316:	691b      	ldr	r3, [r3, #16]
 8006318:	2b00      	cmp	r3, #0
 800631a:	d009      	beq.n	8006330 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800631c:	693b      	ldr	r3, [r7, #16]
 800631e:	015a      	lsls	r2, r3, #5
 8006320:	697b      	ldr	r3, [r7, #20]
 8006322:	4413      	add	r3, r2
 8006324:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006328:	461a      	mov	r2, r3
 800632a:	68bb      	ldr	r3, [r7, #8]
 800632c:	691b      	ldr	r3, [r3, #16]
 800632e:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006330:	693b      	ldr	r3, [r7, #16]
 8006332:	015a      	lsls	r2, r3, #5
 8006334:	697b      	ldr	r3, [r7, #20]
 8006336:	4413      	add	r3, r2
 8006338:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	693a      	ldr	r2, [r7, #16]
 8006340:	0151      	lsls	r1, r2, #5
 8006342:	697a      	ldr	r2, [r7, #20]
 8006344:	440a      	add	r2, r1
 8006346:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800634a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800634e:	6013      	str	r3, [r2, #0]
 8006350:	e092      	b.n	8006478 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006352:	693b      	ldr	r3, [r7, #16]
 8006354:	015a      	lsls	r2, r3, #5
 8006356:	697b      	ldr	r3, [r7, #20]
 8006358:	4413      	add	r3, r2
 800635a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	693a      	ldr	r2, [r7, #16]
 8006362:	0151      	lsls	r1, r2, #5
 8006364:	697a      	ldr	r2, [r7, #20]
 8006366:	440a      	add	r2, r1
 8006368:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800636c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006370:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8006372:	68bb      	ldr	r3, [r7, #8]
 8006374:	695b      	ldr	r3, [r3, #20]
 8006376:	2b00      	cmp	r3, #0
 8006378:	d07e      	beq.n	8006478 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800637a:	697b      	ldr	r3, [r7, #20]
 800637c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006380:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006382:	68bb      	ldr	r3, [r7, #8]
 8006384:	781b      	ldrb	r3, [r3, #0]
 8006386:	f003 030f 	and.w	r3, r3, #15
 800638a:	2101      	movs	r1, #1
 800638c:	fa01 f303 	lsl.w	r3, r1, r3
 8006390:	6979      	ldr	r1, [r7, #20]
 8006392:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006396:	4313      	orrs	r3, r2
 8006398:	634b      	str	r3, [r1, #52]	; 0x34
 800639a:	e06d      	b.n	8006478 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800639c:	693b      	ldr	r3, [r7, #16]
 800639e:	015a      	lsls	r2, r3, #5
 80063a0:	697b      	ldr	r3, [r7, #20]
 80063a2:	4413      	add	r3, r2
 80063a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063a8:	691b      	ldr	r3, [r3, #16]
 80063aa:	693a      	ldr	r2, [r7, #16]
 80063ac:	0151      	lsls	r1, r2, #5
 80063ae:	697a      	ldr	r2, [r7, #20]
 80063b0:	440a      	add	r2, r1
 80063b2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80063b6:	0cdb      	lsrs	r3, r3, #19
 80063b8:	04db      	lsls	r3, r3, #19
 80063ba:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80063bc:	693b      	ldr	r3, [r7, #16]
 80063be:	015a      	lsls	r2, r3, #5
 80063c0:	697b      	ldr	r3, [r7, #20]
 80063c2:	4413      	add	r3, r2
 80063c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063c8:	691b      	ldr	r3, [r3, #16]
 80063ca:	693a      	ldr	r2, [r7, #16]
 80063cc:	0151      	lsls	r1, r2, #5
 80063ce:	697a      	ldr	r2, [r7, #20]
 80063d0:	440a      	add	r2, r1
 80063d2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80063d6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80063da:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80063de:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80063e0:	68bb      	ldr	r3, [r7, #8]
 80063e2:	695b      	ldr	r3, [r3, #20]
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d003      	beq.n	80063f0 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 80063e8:	68bb      	ldr	r3, [r7, #8]
 80063ea:	689a      	ldr	r2, [r3, #8]
 80063ec:	68bb      	ldr	r3, [r7, #8]
 80063ee:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80063f0:	693b      	ldr	r3, [r7, #16]
 80063f2:	015a      	lsls	r2, r3, #5
 80063f4:	697b      	ldr	r3, [r7, #20]
 80063f6:	4413      	add	r3, r2
 80063f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063fc:	691b      	ldr	r3, [r3, #16]
 80063fe:	693a      	ldr	r2, [r7, #16]
 8006400:	0151      	lsls	r1, r2, #5
 8006402:	697a      	ldr	r2, [r7, #20]
 8006404:	440a      	add	r2, r1
 8006406:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800640a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800640e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8006410:	693b      	ldr	r3, [r7, #16]
 8006412:	015a      	lsls	r2, r3, #5
 8006414:	697b      	ldr	r3, [r7, #20]
 8006416:	4413      	add	r3, r2
 8006418:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800641c:	691a      	ldr	r2, [r3, #16]
 800641e:	68bb      	ldr	r3, [r7, #8]
 8006420:	689b      	ldr	r3, [r3, #8]
 8006422:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006426:	6939      	ldr	r1, [r7, #16]
 8006428:	0148      	lsls	r0, r1, #5
 800642a:	6979      	ldr	r1, [r7, #20]
 800642c:	4401      	add	r1, r0
 800642e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006432:	4313      	orrs	r3, r2
 8006434:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8006436:	79fb      	ldrb	r3, [r7, #7]
 8006438:	2b01      	cmp	r3, #1
 800643a:	d10d      	bne.n	8006458 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800643c:	68bb      	ldr	r3, [r7, #8]
 800643e:	68db      	ldr	r3, [r3, #12]
 8006440:	2b00      	cmp	r3, #0
 8006442:	d009      	beq.n	8006458 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006444:	68bb      	ldr	r3, [r7, #8]
 8006446:	68d9      	ldr	r1, [r3, #12]
 8006448:	693b      	ldr	r3, [r7, #16]
 800644a:	015a      	lsls	r2, r3, #5
 800644c:	697b      	ldr	r3, [r7, #20]
 800644e:	4413      	add	r3, r2
 8006450:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006454:	460a      	mov	r2, r1
 8006456:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006458:	693b      	ldr	r3, [r7, #16]
 800645a:	015a      	lsls	r2, r3, #5
 800645c:	697b      	ldr	r3, [r7, #20]
 800645e:	4413      	add	r3, r2
 8006460:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	693a      	ldr	r2, [r7, #16]
 8006468:	0151      	lsls	r1, r2, #5
 800646a:	697a      	ldr	r2, [r7, #20]
 800646c:	440a      	add	r2, r1
 800646e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006472:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006476:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006478:	2300      	movs	r3, #0
}
 800647a:	4618      	mov	r0, r3
 800647c:	371c      	adds	r7, #28
 800647e:	46bd      	mov	sp, r7
 8006480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006484:	4770      	bx	lr

08006486 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006486:	b480      	push	{r7}
 8006488:	b089      	sub	sp, #36	; 0x24
 800648a:	af00      	add	r7, sp, #0
 800648c:	60f8      	str	r0, [r7, #12]
 800648e:	60b9      	str	r1, [r7, #8]
 8006490:	4611      	mov	r1, r2
 8006492:	461a      	mov	r2, r3
 8006494:	460b      	mov	r3, r1
 8006496:	71fb      	strb	r3, [r7, #7]
 8006498:	4613      	mov	r3, r2
 800649a:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80064a0:	68bb      	ldr	r3, [r7, #8]
 80064a2:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80064a4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d123      	bne.n	80064f4 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80064ac:	88bb      	ldrh	r3, [r7, #4]
 80064ae:	3303      	adds	r3, #3
 80064b0:	089b      	lsrs	r3, r3, #2
 80064b2:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80064b4:	2300      	movs	r3, #0
 80064b6:	61bb      	str	r3, [r7, #24]
 80064b8:	e018      	b.n	80064ec <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80064ba:	79fb      	ldrb	r3, [r7, #7]
 80064bc:	031a      	lsls	r2, r3, #12
 80064be:	697b      	ldr	r3, [r7, #20]
 80064c0:	4413      	add	r3, r2
 80064c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80064c6:	461a      	mov	r2, r3
 80064c8:	69fb      	ldr	r3, [r7, #28]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	6013      	str	r3, [r2, #0]
      pSrc++;
 80064ce:	69fb      	ldr	r3, [r7, #28]
 80064d0:	3301      	adds	r3, #1
 80064d2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80064d4:	69fb      	ldr	r3, [r7, #28]
 80064d6:	3301      	adds	r3, #1
 80064d8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80064da:	69fb      	ldr	r3, [r7, #28]
 80064dc:	3301      	adds	r3, #1
 80064de:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80064e0:	69fb      	ldr	r3, [r7, #28]
 80064e2:	3301      	adds	r3, #1
 80064e4:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80064e6:	69bb      	ldr	r3, [r7, #24]
 80064e8:	3301      	adds	r3, #1
 80064ea:	61bb      	str	r3, [r7, #24]
 80064ec:	69ba      	ldr	r2, [r7, #24]
 80064ee:	693b      	ldr	r3, [r7, #16]
 80064f0:	429a      	cmp	r2, r3
 80064f2:	d3e2      	bcc.n	80064ba <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80064f4:	2300      	movs	r3, #0
}
 80064f6:	4618      	mov	r0, r3
 80064f8:	3724      	adds	r7, #36	; 0x24
 80064fa:	46bd      	mov	sp, r7
 80064fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006500:	4770      	bx	lr

08006502 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006502:	b480      	push	{r7}
 8006504:	b08b      	sub	sp, #44	; 0x2c
 8006506:	af00      	add	r7, sp, #0
 8006508:	60f8      	str	r0, [r7, #12]
 800650a:	60b9      	str	r1, [r7, #8]
 800650c:	4613      	mov	r3, r2
 800650e:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006514:	68bb      	ldr	r3, [r7, #8]
 8006516:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8006518:	88fb      	ldrh	r3, [r7, #6]
 800651a:	089b      	lsrs	r3, r3, #2
 800651c:	b29b      	uxth	r3, r3
 800651e:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8006520:	88fb      	ldrh	r3, [r7, #6]
 8006522:	f003 0303 	and.w	r3, r3, #3
 8006526:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8006528:	2300      	movs	r3, #0
 800652a:	623b      	str	r3, [r7, #32]
 800652c:	e014      	b.n	8006558 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800652e:	69bb      	ldr	r3, [r7, #24]
 8006530:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006534:	681a      	ldr	r2, [r3, #0]
 8006536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006538:	601a      	str	r2, [r3, #0]
    pDest++;
 800653a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800653c:	3301      	adds	r3, #1
 800653e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006542:	3301      	adds	r3, #1
 8006544:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006548:	3301      	adds	r3, #1
 800654a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800654c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800654e:	3301      	adds	r3, #1
 8006550:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8006552:	6a3b      	ldr	r3, [r7, #32]
 8006554:	3301      	adds	r3, #1
 8006556:	623b      	str	r3, [r7, #32]
 8006558:	6a3a      	ldr	r2, [r7, #32]
 800655a:	697b      	ldr	r3, [r7, #20]
 800655c:	429a      	cmp	r2, r3
 800655e:	d3e6      	bcc.n	800652e <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8006560:	8bfb      	ldrh	r3, [r7, #30]
 8006562:	2b00      	cmp	r3, #0
 8006564:	d01e      	beq.n	80065a4 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006566:	2300      	movs	r3, #0
 8006568:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800656a:	69bb      	ldr	r3, [r7, #24]
 800656c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006570:	461a      	mov	r2, r3
 8006572:	f107 0310 	add.w	r3, r7, #16
 8006576:	6812      	ldr	r2, [r2, #0]
 8006578:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800657a:	693a      	ldr	r2, [r7, #16]
 800657c:	6a3b      	ldr	r3, [r7, #32]
 800657e:	b2db      	uxtb	r3, r3
 8006580:	00db      	lsls	r3, r3, #3
 8006582:	fa22 f303 	lsr.w	r3, r2, r3
 8006586:	b2da      	uxtb	r2, r3
 8006588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800658a:	701a      	strb	r2, [r3, #0]
      i++;
 800658c:	6a3b      	ldr	r3, [r7, #32]
 800658e:	3301      	adds	r3, #1
 8006590:	623b      	str	r3, [r7, #32]
      pDest++;
 8006592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006594:	3301      	adds	r3, #1
 8006596:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8006598:	8bfb      	ldrh	r3, [r7, #30]
 800659a:	3b01      	subs	r3, #1
 800659c:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800659e:	8bfb      	ldrh	r3, [r7, #30]
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d1ea      	bne.n	800657a <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80065a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80065a6:	4618      	mov	r0, r3
 80065a8:	372c      	adds	r7, #44	; 0x2c
 80065aa:	46bd      	mov	sp, r7
 80065ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b0:	4770      	bx	lr

080065b2 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80065b2:	b480      	push	{r7}
 80065b4:	b085      	sub	sp, #20
 80065b6:	af00      	add	r7, sp, #0
 80065b8:	6078      	str	r0, [r7, #4]
 80065ba:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80065c0:	683b      	ldr	r3, [r7, #0]
 80065c2:	781b      	ldrb	r3, [r3, #0]
 80065c4:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80065c6:	683b      	ldr	r3, [r7, #0]
 80065c8:	785b      	ldrb	r3, [r3, #1]
 80065ca:	2b01      	cmp	r3, #1
 80065cc:	d12c      	bne.n	8006628 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80065ce:	68bb      	ldr	r3, [r7, #8]
 80065d0:	015a      	lsls	r2, r3, #5
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	4413      	add	r3, r2
 80065d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	2b00      	cmp	r3, #0
 80065de:	db12      	blt.n	8006606 <USB_EPSetStall+0x54>
 80065e0:	68bb      	ldr	r3, [r7, #8]
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d00f      	beq.n	8006606 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80065e6:	68bb      	ldr	r3, [r7, #8]
 80065e8:	015a      	lsls	r2, r3, #5
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	4413      	add	r3, r2
 80065ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	68ba      	ldr	r2, [r7, #8]
 80065f6:	0151      	lsls	r1, r2, #5
 80065f8:	68fa      	ldr	r2, [r7, #12]
 80065fa:	440a      	add	r2, r1
 80065fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006600:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006604:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8006606:	68bb      	ldr	r3, [r7, #8]
 8006608:	015a      	lsls	r2, r3, #5
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	4413      	add	r3, r2
 800660e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	68ba      	ldr	r2, [r7, #8]
 8006616:	0151      	lsls	r1, r2, #5
 8006618:	68fa      	ldr	r2, [r7, #12]
 800661a:	440a      	add	r2, r1
 800661c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006620:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006624:	6013      	str	r3, [r2, #0]
 8006626:	e02b      	b.n	8006680 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006628:	68bb      	ldr	r3, [r7, #8]
 800662a:	015a      	lsls	r2, r3, #5
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	4413      	add	r3, r2
 8006630:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	2b00      	cmp	r3, #0
 8006638:	db12      	blt.n	8006660 <USB_EPSetStall+0xae>
 800663a:	68bb      	ldr	r3, [r7, #8]
 800663c:	2b00      	cmp	r3, #0
 800663e:	d00f      	beq.n	8006660 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8006640:	68bb      	ldr	r3, [r7, #8]
 8006642:	015a      	lsls	r2, r3, #5
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	4413      	add	r3, r2
 8006648:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	68ba      	ldr	r2, [r7, #8]
 8006650:	0151      	lsls	r1, r2, #5
 8006652:	68fa      	ldr	r2, [r7, #12]
 8006654:	440a      	add	r2, r1
 8006656:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800665a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800665e:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8006660:	68bb      	ldr	r3, [r7, #8]
 8006662:	015a      	lsls	r2, r3, #5
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	4413      	add	r3, r2
 8006668:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	68ba      	ldr	r2, [r7, #8]
 8006670:	0151      	lsls	r1, r2, #5
 8006672:	68fa      	ldr	r2, [r7, #12]
 8006674:	440a      	add	r2, r1
 8006676:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800667a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800667e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006680:	2300      	movs	r3, #0
}
 8006682:	4618      	mov	r0, r3
 8006684:	3714      	adds	r7, #20
 8006686:	46bd      	mov	sp, r7
 8006688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800668c:	4770      	bx	lr

0800668e <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800668e:	b480      	push	{r7}
 8006690:	b085      	sub	sp, #20
 8006692:	af00      	add	r7, sp, #0
 8006694:	6078      	str	r0, [r7, #4]
 8006696:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800669c:	683b      	ldr	r3, [r7, #0]
 800669e:	781b      	ldrb	r3, [r3, #0]
 80066a0:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80066a2:	683b      	ldr	r3, [r7, #0]
 80066a4:	785b      	ldrb	r3, [r3, #1]
 80066a6:	2b01      	cmp	r3, #1
 80066a8:	d128      	bne.n	80066fc <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80066aa:	68bb      	ldr	r3, [r7, #8]
 80066ac:	015a      	lsls	r2, r3, #5
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	4413      	add	r3, r2
 80066b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	68ba      	ldr	r2, [r7, #8]
 80066ba:	0151      	lsls	r1, r2, #5
 80066bc:	68fa      	ldr	r2, [r7, #12]
 80066be:	440a      	add	r2, r1
 80066c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80066c4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80066c8:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80066ca:	683b      	ldr	r3, [r7, #0]
 80066cc:	78db      	ldrb	r3, [r3, #3]
 80066ce:	2b03      	cmp	r3, #3
 80066d0:	d003      	beq.n	80066da <USB_EPClearStall+0x4c>
 80066d2:	683b      	ldr	r3, [r7, #0]
 80066d4:	78db      	ldrb	r3, [r3, #3]
 80066d6:	2b02      	cmp	r3, #2
 80066d8:	d138      	bne.n	800674c <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80066da:	68bb      	ldr	r3, [r7, #8]
 80066dc:	015a      	lsls	r2, r3, #5
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	4413      	add	r3, r2
 80066e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	68ba      	ldr	r2, [r7, #8]
 80066ea:	0151      	lsls	r1, r2, #5
 80066ec:	68fa      	ldr	r2, [r7, #12]
 80066ee:	440a      	add	r2, r1
 80066f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80066f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80066f8:	6013      	str	r3, [r2, #0]
 80066fa:	e027      	b.n	800674c <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80066fc:	68bb      	ldr	r3, [r7, #8]
 80066fe:	015a      	lsls	r2, r3, #5
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	4413      	add	r3, r2
 8006704:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	68ba      	ldr	r2, [r7, #8]
 800670c:	0151      	lsls	r1, r2, #5
 800670e:	68fa      	ldr	r2, [r7, #12]
 8006710:	440a      	add	r2, r1
 8006712:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006716:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800671a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800671c:	683b      	ldr	r3, [r7, #0]
 800671e:	78db      	ldrb	r3, [r3, #3]
 8006720:	2b03      	cmp	r3, #3
 8006722:	d003      	beq.n	800672c <USB_EPClearStall+0x9e>
 8006724:	683b      	ldr	r3, [r7, #0]
 8006726:	78db      	ldrb	r3, [r3, #3]
 8006728:	2b02      	cmp	r3, #2
 800672a:	d10f      	bne.n	800674c <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800672c:	68bb      	ldr	r3, [r7, #8]
 800672e:	015a      	lsls	r2, r3, #5
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	4413      	add	r3, r2
 8006734:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	68ba      	ldr	r2, [r7, #8]
 800673c:	0151      	lsls	r1, r2, #5
 800673e:	68fa      	ldr	r2, [r7, #12]
 8006740:	440a      	add	r2, r1
 8006742:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006746:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800674a:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800674c:	2300      	movs	r3, #0
}
 800674e:	4618      	mov	r0, r3
 8006750:	3714      	adds	r7, #20
 8006752:	46bd      	mov	sp, r7
 8006754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006758:	4770      	bx	lr

0800675a <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800675a:	b480      	push	{r7}
 800675c:	b085      	sub	sp, #20
 800675e:	af00      	add	r7, sp, #0
 8006760:	6078      	str	r0, [r7, #4]
 8006762:	460b      	mov	r3, r1
 8006764:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	68fa      	ldr	r2, [r7, #12]
 8006774:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006778:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800677c:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006784:	681a      	ldr	r2, [r3, #0]
 8006786:	78fb      	ldrb	r3, [r7, #3]
 8006788:	011b      	lsls	r3, r3, #4
 800678a:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800678e:	68f9      	ldr	r1, [r7, #12]
 8006790:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006794:	4313      	orrs	r3, r2
 8006796:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8006798:	2300      	movs	r3, #0
}
 800679a:	4618      	mov	r0, r3
 800679c:	3714      	adds	r7, #20
 800679e:	46bd      	mov	sp, r7
 80067a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a4:	4770      	bx	lr

080067a6 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80067a6:	b480      	push	{r7}
 80067a8:	b085      	sub	sp, #20
 80067aa:	af00      	add	r7, sp, #0
 80067ac:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	68fa      	ldr	r2, [r7, #12]
 80067bc:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80067c0:	f023 0303 	bic.w	r3, r3, #3
 80067c4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067cc:	685b      	ldr	r3, [r3, #4]
 80067ce:	68fa      	ldr	r2, [r7, #12]
 80067d0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80067d4:	f023 0302 	bic.w	r3, r3, #2
 80067d8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80067da:	2300      	movs	r3, #0
}
 80067dc:	4618      	mov	r0, r3
 80067de:	3714      	adds	r7, #20
 80067e0:	46bd      	mov	sp, r7
 80067e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e6:	4770      	bx	lr

080067e8 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80067e8:	b480      	push	{r7}
 80067ea:	b085      	sub	sp, #20
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	68fa      	ldr	r2, [r7, #12]
 80067fe:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006802:	f023 0303 	bic.w	r3, r3, #3
 8006806:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800680e:	685b      	ldr	r3, [r3, #4]
 8006810:	68fa      	ldr	r2, [r7, #12]
 8006812:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006816:	f043 0302 	orr.w	r3, r3, #2
 800681a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800681c:	2300      	movs	r3, #0
}
 800681e:	4618      	mov	r0, r3
 8006820:	3714      	adds	r7, #20
 8006822:	46bd      	mov	sp, r7
 8006824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006828:	4770      	bx	lr

0800682a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800682a:	b480      	push	{r7}
 800682c:	b085      	sub	sp, #20
 800682e:	af00      	add	r7, sp, #0
 8006830:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	695b      	ldr	r3, [r3, #20]
 8006836:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	699b      	ldr	r3, [r3, #24]
 800683c:	68fa      	ldr	r2, [r7, #12]
 800683e:	4013      	ands	r3, r2
 8006840:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006842:	68fb      	ldr	r3, [r7, #12]
}
 8006844:	4618      	mov	r0, r3
 8006846:	3714      	adds	r7, #20
 8006848:	46bd      	mov	sp, r7
 800684a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800684e:	4770      	bx	lr

08006850 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006850:	b480      	push	{r7}
 8006852:	b085      	sub	sp, #20
 8006854:	af00      	add	r7, sp, #0
 8006856:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006862:	699b      	ldr	r3, [r3, #24]
 8006864:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800686c:	69db      	ldr	r3, [r3, #28]
 800686e:	68ba      	ldr	r2, [r7, #8]
 8006870:	4013      	ands	r3, r2
 8006872:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8006874:	68bb      	ldr	r3, [r7, #8]
 8006876:	0c1b      	lsrs	r3, r3, #16
}
 8006878:	4618      	mov	r0, r3
 800687a:	3714      	adds	r7, #20
 800687c:	46bd      	mov	sp, r7
 800687e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006882:	4770      	bx	lr

08006884 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006884:	b480      	push	{r7}
 8006886:	b085      	sub	sp, #20
 8006888:	af00      	add	r7, sp, #0
 800688a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006896:	699b      	ldr	r3, [r3, #24]
 8006898:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068a0:	69db      	ldr	r3, [r3, #28]
 80068a2:	68ba      	ldr	r2, [r7, #8]
 80068a4:	4013      	ands	r3, r2
 80068a6:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80068a8:	68bb      	ldr	r3, [r7, #8]
 80068aa:	b29b      	uxth	r3, r3
}
 80068ac:	4618      	mov	r0, r3
 80068ae:	3714      	adds	r7, #20
 80068b0:	46bd      	mov	sp, r7
 80068b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b6:	4770      	bx	lr

080068b8 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80068b8:	b480      	push	{r7}
 80068ba:	b085      	sub	sp, #20
 80068bc:	af00      	add	r7, sp, #0
 80068be:	6078      	str	r0, [r7, #4]
 80068c0:	460b      	mov	r3, r1
 80068c2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80068c8:	78fb      	ldrb	r3, [r7, #3]
 80068ca:	015a      	lsls	r2, r3, #5
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	4413      	add	r3, r2
 80068d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068d4:	689b      	ldr	r3, [r3, #8]
 80068d6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068de:	695b      	ldr	r3, [r3, #20]
 80068e0:	68ba      	ldr	r2, [r7, #8]
 80068e2:	4013      	ands	r3, r2
 80068e4:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80068e6:	68bb      	ldr	r3, [r7, #8]
}
 80068e8:	4618      	mov	r0, r3
 80068ea:	3714      	adds	r7, #20
 80068ec:	46bd      	mov	sp, r7
 80068ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f2:	4770      	bx	lr

080068f4 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80068f4:	b480      	push	{r7}
 80068f6:	b087      	sub	sp, #28
 80068f8:	af00      	add	r7, sp, #0
 80068fa:	6078      	str	r0, [r7, #4]
 80068fc:	460b      	mov	r3, r1
 80068fe:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8006904:	697b      	ldr	r3, [r7, #20]
 8006906:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800690a:	691b      	ldr	r3, [r3, #16]
 800690c:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800690e:	697b      	ldr	r3, [r7, #20]
 8006910:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006914:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006916:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8006918:	78fb      	ldrb	r3, [r7, #3]
 800691a:	f003 030f 	and.w	r3, r3, #15
 800691e:	68fa      	ldr	r2, [r7, #12]
 8006920:	fa22 f303 	lsr.w	r3, r2, r3
 8006924:	01db      	lsls	r3, r3, #7
 8006926:	b2db      	uxtb	r3, r3
 8006928:	693a      	ldr	r2, [r7, #16]
 800692a:	4313      	orrs	r3, r2
 800692c:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800692e:	78fb      	ldrb	r3, [r7, #3]
 8006930:	015a      	lsls	r2, r3, #5
 8006932:	697b      	ldr	r3, [r7, #20]
 8006934:	4413      	add	r3, r2
 8006936:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800693a:	689b      	ldr	r3, [r3, #8]
 800693c:	693a      	ldr	r2, [r7, #16]
 800693e:	4013      	ands	r3, r2
 8006940:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006942:	68bb      	ldr	r3, [r7, #8]
}
 8006944:	4618      	mov	r0, r3
 8006946:	371c      	adds	r7, #28
 8006948:	46bd      	mov	sp, r7
 800694a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800694e:	4770      	bx	lr

08006950 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006950:	b480      	push	{r7}
 8006952:	b083      	sub	sp, #12
 8006954:	af00      	add	r7, sp, #0
 8006956:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	695b      	ldr	r3, [r3, #20]
 800695c:	f003 0301 	and.w	r3, r3, #1
}
 8006960:	4618      	mov	r0, r3
 8006962:	370c      	adds	r7, #12
 8006964:	46bd      	mov	sp, r7
 8006966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800696a:	4770      	bx	lr

0800696c <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800696c:	b480      	push	{r7}
 800696e:	b085      	sub	sp, #20
 8006970:	af00      	add	r7, sp, #0
 8006972:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	68fa      	ldr	r2, [r7, #12]
 8006982:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006986:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800698a:	f023 0307 	bic.w	r3, r3, #7
 800698e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006996:	685b      	ldr	r3, [r3, #4]
 8006998:	68fa      	ldr	r2, [r7, #12]
 800699a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800699e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80069a2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80069a4:	2300      	movs	r3, #0
}
 80069a6:	4618      	mov	r0, r3
 80069a8:	3714      	adds	r7, #20
 80069aa:	46bd      	mov	sp, r7
 80069ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b0:	4770      	bx	lr
	...

080069b4 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80069b4:	b480      	push	{r7}
 80069b6:	b087      	sub	sp, #28
 80069b8:	af00      	add	r7, sp, #0
 80069ba:	60f8      	str	r0, [r7, #12]
 80069bc:	460b      	mov	r3, r1
 80069be:	607a      	str	r2, [r7, #4]
 80069c0:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	333c      	adds	r3, #60	; 0x3c
 80069ca:	3304      	adds	r3, #4
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80069d0:	693b      	ldr	r3, [r7, #16]
 80069d2:	4a26      	ldr	r2, [pc, #152]	; (8006a6c <USB_EP0_OutStart+0xb8>)
 80069d4:	4293      	cmp	r3, r2
 80069d6:	d90a      	bls.n	80069ee <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80069d8:	697b      	ldr	r3, [r7, #20]
 80069da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80069e4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80069e8:	d101      	bne.n	80069ee <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80069ea:	2300      	movs	r3, #0
 80069ec:	e037      	b.n	8006a5e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80069ee:	697b      	ldr	r3, [r7, #20]
 80069f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069f4:	461a      	mov	r2, r3
 80069f6:	2300      	movs	r3, #0
 80069f8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80069fa:	697b      	ldr	r3, [r7, #20]
 80069fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a00:	691b      	ldr	r3, [r3, #16]
 8006a02:	697a      	ldr	r2, [r7, #20]
 8006a04:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006a08:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006a0c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8006a0e:	697b      	ldr	r3, [r7, #20]
 8006a10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a14:	691b      	ldr	r3, [r3, #16]
 8006a16:	697a      	ldr	r2, [r7, #20]
 8006a18:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006a1c:	f043 0318 	orr.w	r3, r3, #24
 8006a20:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8006a22:	697b      	ldr	r3, [r7, #20]
 8006a24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a28:	691b      	ldr	r3, [r3, #16]
 8006a2a:	697a      	ldr	r2, [r7, #20]
 8006a2c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006a30:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8006a34:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8006a36:	7afb      	ldrb	r3, [r7, #11]
 8006a38:	2b01      	cmp	r3, #1
 8006a3a:	d10f      	bne.n	8006a5c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006a3c:	697b      	ldr	r3, [r7, #20]
 8006a3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a42:	461a      	mov	r2, r3
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8006a48:	697b      	ldr	r3, [r7, #20]
 8006a4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	697a      	ldr	r2, [r7, #20]
 8006a52:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006a56:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8006a5a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006a5c:	2300      	movs	r3, #0
}
 8006a5e:	4618      	mov	r0, r3
 8006a60:	371c      	adds	r7, #28
 8006a62:	46bd      	mov	sp, r7
 8006a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a68:	4770      	bx	lr
 8006a6a:	bf00      	nop
 8006a6c:	4f54300a 	.word	0x4f54300a

08006a70 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006a70:	b480      	push	{r7}
 8006a72:	b085      	sub	sp, #20
 8006a74:	af00      	add	r7, sp, #0
 8006a76:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006a78:	2300      	movs	r3, #0
 8006a7a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	3301      	adds	r3, #1
 8006a80:	60fb      	str	r3, [r7, #12]
 8006a82:	4a13      	ldr	r2, [pc, #76]	; (8006ad0 <USB_CoreReset+0x60>)
 8006a84:	4293      	cmp	r3, r2
 8006a86:	d901      	bls.n	8006a8c <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8006a88:	2303      	movs	r3, #3
 8006a8a:	e01a      	b.n	8006ac2 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	691b      	ldr	r3, [r3, #16]
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	daf3      	bge.n	8006a7c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006a94:	2300      	movs	r3, #0
 8006a96:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	691b      	ldr	r3, [r3, #16]
 8006a9c:	f043 0201 	orr.w	r2, r3, #1
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	3301      	adds	r3, #1
 8006aa8:	60fb      	str	r3, [r7, #12]
 8006aaa:	4a09      	ldr	r2, [pc, #36]	; (8006ad0 <USB_CoreReset+0x60>)
 8006aac:	4293      	cmp	r3, r2
 8006aae:	d901      	bls.n	8006ab4 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8006ab0:	2303      	movs	r3, #3
 8006ab2:	e006      	b.n	8006ac2 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	691b      	ldr	r3, [r3, #16]
 8006ab8:	f003 0301 	and.w	r3, r3, #1
 8006abc:	2b01      	cmp	r3, #1
 8006abe:	d0f1      	beq.n	8006aa4 <USB_CoreReset+0x34>

  return HAL_OK;
 8006ac0:	2300      	movs	r3, #0
}
 8006ac2:	4618      	mov	r0, r3
 8006ac4:	3714      	adds	r7, #20
 8006ac6:	46bd      	mov	sp, r7
 8006ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006acc:	4770      	bx	lr
 8006ace:	bf00      	nop
 8006ad0:	00030d40 	.word	0x00030d40

08006ad4 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006ad4:	b580      	push	{r7, lr}
 8006ad6:	b084      	sub	sp, #16
 8006ad8:	af00      	add	r7, sp, #0
 8006ada:	6078      	str	r0, [r7, #4]
 8006adc:	460b      	mov	r3, r1
 8006ade:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006ae0:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006ae4:	f002 fa5c 	bl	8008fa0 <USBD_static_malloc>
 8006ae8:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d105      	bne.n	8006afc <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	2200      	movs	r2, #0
 8006af4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8006af8:	2302      	movs	r3, #2
 8006afa:	e066      	b.n	8006bca <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	68fa      	ldr	r2, [r7, #12]
 8006b00:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	7c1b      	ldrb	r3, [r3, #16]
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d119      	bne.n	8006b40 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006b0c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006b10:	2202      	movs	r2, #2
 8006b12:	2181      	movs	r1, #129	; 0x81
 8006b14:	6878      	ldr	r0, [r7, #4]
 8006b16:	f002 f920 	bl	8008d5a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	2201      	movs	r2, #1
 8006b1e:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006b20:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006b24:	2202      	movs	r2, #2
 8006b26:	2101      	movs	r1, #1
 8006b28:	6878      	ldr	r0, [r7, #4]
 8006b2a:	f002 f916 	bl	8008d5a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	2201      	movs	r2, #1
 8006b32:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	2210      	movs	r2, #16
 8006b3a:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8006b3e:	e016      	b.n	8006b6e <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006b40:	2340      	movs	r3, #64	; 0x40
 8006b42:	2202      	movs	r2, #2
 8006b44:	2181      	movs	r1, #129	; 0x81
 8006b46:	6878      	ldr	r0, [r7, #4]
 8006b48:	f002 f907 	bl	8008d5a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	2201      	movs	r2, #1
 8006b50:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006b52:	2340      	movs	r3, #64	; 0x40
 8006b54:	2202      	movs	r2, #2
 8006b56:	2101      	movs	r1, #1
 8006b58:	6878      	ldr	r0, [r7, #4]
 8006b5a:	f002 f8fe 	bl	8008d5a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	2201      	movs	r2, #1
 8006b62:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	2210      	movs	r2, #16
 8006b6a:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006b6e:	2308      	movs	r3, #8
 8006b70:	2203      	movs	r2, #3
 8006b72:	2182      	movs	r1, #130	; 0x82
 8006b74:	6878      	ldr	r0, [r7, #4]
 8006b76:	f002 f8f0 	bl	8008d5a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	2201      	movs	r2, #1
 8006b7e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	2200      	movs	r2, #0
 8006b90:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	2200      	movs	r2, #0
 8006b98:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	7c1b      	ldrb	r3, [r3, #16]
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d109      	bne.n	8006bb8 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006baa:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006bae:	2101      	movs	r1, #1
 8006bb0:	6878      	ldr	r0, [r7, #4]
 8006bb2:	f002 f9c1 	bl	8008f38 <USBD_LL_PrepareReceive>
 8006bb6:	e007      	b.n	8006bc8 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006bbe:	2340      	movs	r3, #64	; 0x40
 8006bc0:	2101      	movs	r1, #1
 8006bc2:	6878      	ldr	r0, [r7, #4]
 8006bc4:	f002 f9b8 	bl	8008f38 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006bc8:	2300      	movs	r3, #0
}
 8006bca:	4618      	mov	r0, r3
 8006bcc:	3710      	adds	r7, #16
 8006bce:	46bd      	mov	sp, r7
 8006bd0:	bd80      	pop	{r7, pc}

08006bd2 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006bd2:	b580      	push	{r7, lr}
 8006bd4:	b082      	sub	sp, #8
 8006bd6:	af00      	add	r7, sp, #0
 8006bd8:	6078      	str	r0, [r7, #4]
 8006bda:	460b      	mov	r3, r1
 8006bdc:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8006bde:	2181      	movs	r1, #129	; 0x81
 8006be0:	6878      	ldr	r0, [r7, #4]
 8006be2:	f002 f8e0 	bl	8008da6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	2200      	movs	r2, #0
 8006bea:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8006bec:	2101      	movs	r1, #1
 8006bee:	6878      	ldr	r0, [r7, #4]
 8006bf0:	f002 f8d9 	bl	8008da6 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	2200      	movs	r2, #0
 8006bf8:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8006bfc:	2182      	movs	r1, #130	; 0x82
 8006bfe:	6878      	ldr	r0, [r7, #4]
 8006c00:	f002 f8d1 	bl	8008da6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	2200      	movs	r2, #0
 8006c08:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	2200      	movs	r2, #0
 8006c10:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d00e      	beq.n	8006c3c <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006c24:	685b      	ldr	r3, [r3, #4]
 8006c26:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006c2e:	4618      	mov	r0, r3
 8006c30:	f002 f9c4 	bl	8008fbc <USBD_static_free>
    pdev->pClassData = NULL;
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	2200      	movs	r2, #0
 8006c38:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8006c3c:	2300      	movs	r3, #0
}
 8006c3e:	4618      	mov	r0, r3
 8006c40:	3708      	adds	r7, #8
 8006c42:	46bd      	mov	sp, r7
 8006c44:	bd80      	pop	{r7, pc}
	...

08006c48 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8006c48:	b580      	push	{r7, lr}
 8006c4a:	b086      	sub	sp, #24
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	6078      	str	r0, [r7, #4]
 8006c50:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006c58:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8006c5a:	2300      	movs	r3, #0
 8006c5c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8006c5e:	2300      	movs	r3, #0
 8006c60:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8006c62:	2300      	movs	r3, #0
 8006c64:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8006c66:	693b      	ldr	r3, [r7, #16]
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d101      	bne.n	8006c70 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8006c6c:	2303      	movs	r3, #3
 8006c6e:	e0af      	b.n	8006dd0 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006c70:	683b      	ldr	r3, [r7, #0]
 8006c72:	781b      	ldrb	r3, [r3, #0]
 8006c74:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d03f      	beq.n	8006cfc <USBD_CDC_Setup+0xb4>
 8006c7c:	2b20      	cmp	r3, #32
 8006c7e:	f040 809f 	bne.w	8006dc0 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8006c82:	683b      	ldr	r3, [r7, #0]
 8006c84:	88db      	ldrh	r3, [r3, #6]
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d02e      	beq.n	8006ce8 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8006c8a:	683b      	ldr	r3, [r7, #0]
 8006c8c:	781b      	ldrb	r3, [r3, #0]
 8006c8e:	b25b      	sxtb	r3, r3
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	da16      	bge.n	8006cc2 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006c9a:	689b      	ldr	r3, [r3, #8]
 8006c9c:	683a      	ldr	r2, [r7, #0]
 8006c9e:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8006ca0:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006ca2:	683a      	ldr	r2, [r7, #0]
 8006ca4:	88d2      	ldrh	r2, [r2, #6]
 8006ca6:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8006ca8:	683b      	ldr	r3, [r7, #0]
 8006caa:	88db      	ldrh	r3, [r3, #6]
 8006cac:	2b07      	cmp	r3, #7
 8006cae:	bf28      	it	cs
 8006cb0:	2307      	movcs	r3, #7
 8006cb2:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8006cb4:	693b      	ldr	r3, [r7, #16]
 8006cb6:	89fa      	ldrh	r2, [r7, #14]
 8006cb8:	4619      	mov	r1, r3
 8006cba:	6878      	ldr	r0, [r7, #4]
 8006cbc:	f001 fb19 	bl	80082f2 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8006cc0:	e085      	b.n	8006dce <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 8006cc2:	683b      	ldr	r3, [r7, #0]
 8006cc4:	785a      	ldrb	r2, [r3, #1]
 8006cc6:	693b      	ldr	r3, [r7, #16]
 8006cc8:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8006ccc:	683b      	ldr	r3, [r7, #0]
 8006cce:	88db      	ldrh	r3, [r3, #6]
 8006cd0:	b2da      	uxtb	r2, r3
 8006cd2:	693b      	ldr	r3, [r7, #16]
 8006cd4:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8006cd8:	6939      	ldr	r1, [r7, #16]
 8006cda:	683b      	ldr	r3, [r7, #0]
 8006cdc:	88db      	ldrh	r3, [r3, #6]
 8006cde:	461a      	mov	r2, r3
 8006ce0:	6878      	ldr	r0, [r7, #4]
 8006ce2:	f001 fb32 	bl	800834a <USBD_CtlPrepareRx>
      break;
 8006ce6:	e072      	b.n	8006dce <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006cee:	689b      	ldr	r3, [r3, #8]
 8006cf0:	683a      	ldr	r2, [r7, #0]
 8006cf2:	7850      	ldrb	r0, [r2, #1]
 8006cf4:	2200      	movs	r2, #0
 8006cf6:	6839      	ldr	r1, [r7, #0]
 8006cf8:	4798      	blx	r3
      break;
 8006cfa:	e068      	b.n	8006dce <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006cfc:	683b      	ldr	r3, [r7, #0]
 8006cfe:	785b      	ldrb	r3, [r3, #1]
 8006d00:	2b0b      	cmp	r3, #11
 8006d02:	d852      	bhi.n	8006daa <USBD_CDC_Setup+0x162>
 8006d04:	a201      	add	r2, pc, #4	; (adr r2, 8006d0c <USBD_CDC_Setup+0xc4>)
 8006d06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d0a:	bf00      	nop
 8006d0c:	08006d3d 	.word	0x08006d3d
 8006d10:	08006db9 	.word	0x08006db9
 8006d14:	08006dab 	.word	0x08006dab
 8006d18:	08006dab 	.word	0x08006dab
 8006d1c:	08006dab 	.word	0x08006dab
 8006d20:	08006dab 	.word	0x08006dab
 8006d24:	08006dab 	.word	0x08006dab
 8006d28:	08006dab 	.word	0x08006dab
 8006d2c:	08006dab 	.word	0x08006dab
 8006d30:	08006dab 	.word	0x08006dab
 8006d34:	08006d67 	.word	0x08006d67
 8006d38:	08006d91 	.word	0x08006d91
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d42:	b2db      	uxtb	r3, r3
 8006d44:	2b03      	cmp	r3, #3
 8006d46:	d107      	bne.n	8006d58 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006d48:	f107 030a 	add.w	r3, r7, #10
 8006d4c:	2202      	movs	r2, #2
 8006d4e:	4619      	mov	r1, r3
 8006d50:	6878      	ldr	r0, [r7, #4]
 8006d52:	f001 face 	bl	80082f2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006d56:	e032      	b.n	8006dbe <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8006d58:	6839      	ldr	r1, [r7, #0]
 8006d5a:	6878      	ldr	r0, [r7, #4]
 8006d5c:	f001 fa58 	bl	8008210 <USBD_CtlError>
            ret = USBD_FAIL;
 8006d60:	2303      	movs	r3, #3
 8006d62:	75fb      	strb	r3, [r7, #23]
          break;
 8006d64:	e02b      	b.n	8006dbe <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d6c:	b2db      	uxtb	r3, r3
 8006d6e:	2b03      	cmp	r3, #3
 8006d70:	d107      	bne.n	8006d82 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8006d72:	f107 030d 	add.w	r3, r7, #13
 8006d76:	2201      	movs	r2, #1
 8006d78:	4619      	mov	r1, r3
 8006d7a:	6878      	ldr	r0, [r7, #4]
 8006d7c:	f001 fab9 	bl	80082f2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006d80:	e01d      	b.n	8006dbe <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8006d82:	6839      	ldr	r1, [r7, #0]
 8006d84:	6878      	ldr	r0, [r7, #4]
 8006d86:	f001 fa43 	bl	8008210 <USBD_CtlError>
            ret = USBD_FAIL;
 8006d8a:	2303      	movs	r3, #3
 8006d8c:	75fb      	strb	r3, [r7, #23]
          break;
 8006d8e:	e016      	b.n	8006dbe <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d96:	b2db      	uxtb	r3, r3
 8006d98:	2b03      	cmp	r3, #3
 8006d9a:	d00f      	beq.n	8006dbc <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8006d9c:	6839      	ldr	r1, [r7, #0]
 8006d9e:	6878      	ldr	r0, [r7, #4]
 8006da0:	f001 fa36 	bl	8008210 <USBD_CtlError>
            ret = USBD_FAIL;
 8006da4:	2303      	movs	r3, #3
 8006da6:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006da8:	e008      	b.n	8006dbc <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8006daa:	6839      	ldr	r1, [r7, #0]
 8006dac:	6878      	ldr	r0, [r7, #4]
 8006dae:	f001 fa2f 	bl	8008210 <USBD_CtlError>
          ret = USBD_FAIL;
 8006db2:	2303      	movs	r3, #3
 8006db4:	75fb      	strb	r3, [r7, #23]
          break;
 8006db6:	e002      	b.n	8006dbe <USBD_CDC_Setup+0x176>
          break;
 8006db8:	bf00      	nop
 8006dba:	e008      	b.n	8006dce <USBD_CDC_Setup+0x186>
          break;
 8006dbc:	bf00      	nop
      }
      break;
 8006dbe:	e006      	b.n	8006dce <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8006dc0:	6839      	ldr	r1, [r7, #0]
 8006dc2:	6878      	ldr	r0, [r7, #4]
 8006dc4:	f001 fa24 	bl	8008210 <USBD_CtlError>
      ret = USBD_FAIL;
 8006dc8:	2303      	movs	r3, #3
 8006dca:	75fb      	strb	r3, [r7, #23]
      break;
 8006dcc:	bf00      	nop
  }

  return (uint8_t)ret;
 8006dce:	7dfb      	ldrb	r3, [r7, #23]
}
 8006dd0:	4618      	mov	r0, r3
 8006dd2:	3718      	adds	r7, #24
 8006dd4:	46bd      	mov	sp, r7
 8006dd6:	bd80      	pop	{r7, pc}

08006dd8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006dd8:	b580      	push	{r7, lr}
 8006dda:	b084      	sub	sp, #16
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	6078      	str	r0, [r7, #4]
 8006de0:	460b      	mov	r3, r1
 8006de2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006dea:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d101      	bne.n	8006dfa <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006df6:	2303      	movs	r3, #3
 8006df8:	e04f      	b.n	8006e9a <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006e00:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8006e02:	78fa      	ldrb	r2, [r7, #3]
 8006e04:	6879      	ldr	r1, [r7, #4]
 8006e06:	4613      	mov	r3, r2
 8006e08:	009b      	lsls	r3, r3, #2
 8006e0a:	4413      	add	r3, r2
 8006e0c:	009b      	lsls	r3, r3, #2
 8006e0e:	440b      	add	r3, r1
 8006e10:	3318      	adds	r3, #24
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d029      	beq.n	8006e6c <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8006e18:	78fa      	ldrb	r2, [r7, #3]
 8006e1a:	6879      	ldr	r1, [r7, #4]
 8006e1c:	4613      	mov	r3, r2
 8006e1e:	009b      	lsls	r3, r3, #2
 8006e20:	4413      	add	r3, r2
 8006e22:	009b      	lsls	r3, r3, #2
 8006e24:	440b      	add	r3, r1
 8006e26:	3318      	adds	r3, #24
 8006e28:	681a      	ldr	r2, [r3, #0]
 8006e2a:	78f9      	ldrb	r1, [r7, #3]
 8006e2c:	68f8      	ldr	r0, [r7, #12]
 8006e2e:	460b      	mov	r3, r1
 8006e30:	00db      	lsls	r3, r3, #3
 8006e32:	1a5b      	subs	r3, r3, r1
 8006e34:	009b      	lsls	r3, r3, #2
 8006e36:	4403      	add	r3, r0
 8006e38:	3344      	adds	r3, #68	; 0x44
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	fbb2 f1f3 	udiv	r1, r2, r3
 8006e40:	fb01 f303 	mul.w	r3, r1, r3
 8006e44:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d110      	bne.n	8006e6c <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8006e4a:	78fa      	ldrb	r2, [r7, #3]
 8006e4c:	6879      	ldr	r1, [r7, #4]
 8006e4e:	4613      	mov	r3, r2
 8006e50:	009b      	lsls	r3, r3, #2
 8006e52:	4413      	add	r3, r2
 8006e54:	009b      	lsls	r3, r3, #2
 8006e56:	440b      	add	r3, r1
 8006e58:	3318      	adds	r3, #24
 8006e5a:	2200      	movs	r2, #0
 8006e5c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006e5e:	78f9      	ldrb	r1, [r7, #3]
 8006e60:	2300      	movs	r3, #0
 8006e62:	2200      	movs	r2, #0
 8006e64:	6878      	ldr	r0, [r7, #4]
 8006e66:	f002 f846 	bl	8008ef6 <USBD_LL_Transmit>
 8006e6a:	e015      	b.n	8006e98 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8006e6c:	68bb      	ldr	r3, [r7, #8]
 8006e6e:	2200      	movs	r2, #0
 8006e70:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006e7a:	691b      	ldr	r3, [r3, #16]
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d00b      	beq.n	8006e98 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006e86:	691b      	ldr	r3, [r3, #16]
 8006e88:	68ba      	ldr	r2, [r7, #8]
 8006e8a:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8006e8e:	68ba      	ldr	r2, [r7, #8]
 8006e90:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8006e94:	78fa      	ldrb	r2, [r7, #3]
 8006e96:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8006e98:	2300      	movs	r3, #0
}
 8006e9a:	4618      	mov	r0, r3
 8006e9c:	3710      	adds	r7, #16
 8006e9e:	46bd      	mov	sp, r7
 8006ea0:	bd80      	pop	{r7, pc}

08006ea2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006ea2:	b580      	push	{r7, lr}
 8006ea4:	b084      	sub	sp, #16
 8006ea6:	af00      	add	r7, sp, #0
 8006ea8:	6078      	str	r0, [r7, #4]
 8006eaa:	460b      	mov	r3, r1
 8006eac:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006eb4:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d101      	bne.n	8006ec4 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006ec0:	2303      	movs	r3, #3
 8006ec2:	e015      	b.n	8006ef0 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006ec4:	78fb      	ldrb	r3, [r7, #3]
 8006ec6:	4619      	mov	r1, r3
 8006ec8:	6878      	ldr	r0, [r7, #4]
 8006eca:	f002 f856 	bl	8008f7a <USBD_LL_GetRxDataSize>
 8006ece:	4602      	mov	r2, r0
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006edc:	68db      	ldr	r3, [r3, #12]
 8006ede:	68fa      	ldr	r2, [r7, #12]
 8006ee0:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8006ee4:	68fa      	ldr	r2, [r7, #12]
 8006ee6:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8006eea:	4611      	mov	r1, r2
 8006eec:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8006eee:	2300      	movs	r3, #0
}
 8006ef0:	4618      	mov	r0, r3
 8006ef2:	3710      	adds	r7, #16
 8006ef4:	46bd      	mov	sp, r7
 8006ef6:	bd80      	pop	{r7, pc}

08006ef8 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006ef8:	b580      	push	{r7, lr}
 8006efa:	b084      	sub	sp, #16
 8006efc:	af00      	add	r7, sp, #0
 8006efe:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006f06:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d101      	bne.n	8006f12 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8006f0e:	2303      	movs	r3, #3
 8006f10:	e01b      	b.n	8006f4a <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d015      	beq.n	8006f48 <USBD_CDC_EP0_RxReady+0x50>
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006f22:	2bff      	cmp	r3, #255	; 0xff
 8006f24:	d010      	beq.n	8006f48 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006f2c:	689b      	ldr	r3, [r3, #8]
 8006f2e:	68fa      	ldr	r2, [r7, #12]
 8006f30:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8006f34:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8006f36:	68fa      	ldr	r2, [r7, #12]
 8006f38:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006f3c:	b292      	uxth	r2, r2
 8006f3e:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	22ff      	movs	r2, #255	; 0xff
 8006f44:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8006f48:	2300      	movs	r3, #0
}
 8006f4a:	4618      	mov	r0, r3
 8006f4c:	3710      	adds	r7, #16
 8006f4e:	46bd      	mov	sp, r7
 8006f50:	bd80      	pop	{r7, pc}
	...

08006f54 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006f54:	b480      	push	{r7}
 8006f56:	b083      	sub	sp, #12
 8006f58:	af00      	add	r7, sp, #0
 8006f5a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	2243      	movs	r2, #67	; 0x43
 8006f60:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8006f62:	4b03      	ldr	r3, [pc, #12]	; (8006f70 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8006f64:	4618      	mov	r0, r3
 8006f66:	370c      	adds	r7, #12
 8006f68:	46bd      	mov	sp, r7
 8006f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f6e:	4770      	bx	lr
 8006f70:	200000b8 	.word	0x200000b8

08006f74 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006f74:	b480      	push	{r7}
 8006f76:	b083      	sub	sp, #12
 8006f78:	af00      	add	r7, sp, #0
 8006f7a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	2243      	movs	r2, #67	; 0x43
 8006f80:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8006f82:	4b03      	ldr	r3, [pc, #12]	; (8006f90 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8006f84:	4618      	mov	r0, r3
 8006f86:	370c      	adds	r7, #12
 8006f88:	46bd      	mov	sp, r7
 8006f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f8e:	4770      	bx	lr
 8006f90:	20000074 	.word	0x20000074

08006f94 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006f94:	b480      	push	{r7}
 8006f96:	b083      	sub	sp, #12
 8006f98:	af00      	add	r7, sp, #0
 8006f9a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	2243      	movs	r2, #67	; 0x43
 8006fa0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8006fa2:	4b03      	ldr	r3, [pc, #12]	; (8006fb0 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8006fa4:	4618      	mov	r0, r3
 8006fa6:	370c      	adds	r7, #12
 8006fa8:	46bd      	mov	sp, r7
 8006faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fae:	4770      	bx	lr
 8006fb0:	200000fc 	.word	0x200000fc

08006fb4 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006fb4:	b480      	push	{r7}
 8006fb6:	b083      	sub	sp, #12
 8006fb8:	af00      	add	r7, sp, #0
 8006fba:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	220a      	movs	r2, #10
 8006fc0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8006fc2:	4b03      	ldr	r3, [pc, #12]	; (8006fd0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006fc4:	4618      	mov	r0, r3
 8006fc6:	370c      	adds	r7, #12
 8006fc8:	46bd      	mov	sp, r7
 8006fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fce:	4770      	bx	lr
 8006fd0:	20000030 	.word	0x20000030

08006fd4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8006fd4:	b480      	push	{r7}
 8006fd6:	b083      	sub	sp, #12
 8006fd8:	af00      	add	r7, sp, #0
 8006fda:	6078      	str	r0, [r7, #4]
 8006fdc:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8006fde:	683b      	ldr	r3, [r7, #0]
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d101      	bne.n	8006fe8 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8006fe4:	2303      	movs	r3, #3
 8006fe6:	e004      	b.n	8006ff2 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	683a      	ldr	r2, [r7, #0]
 8006fec:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8006ff0:	2300      	movs	r3, #0
}
 8006ff2:	4618      	mov	r0, r3
 8006ff4:	370c      	adds	r7, #12
 8006ff6:	46bd      	mov	sp, r7
 8006ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ffc:	4770      	bx	lr

08006ffe <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8006ffe:	b480      	push	{r7}
 8007000:	b087      	sub	sp, #28
 8007002:	af00      	add	r7, sp, #0
 8007004:	60f8      	str	r0, [r7, #12]
 8007006:	60b9      	str	r1, [r7, #8]
 8007008:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007010:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8007012:	697b      	ldr	r3, [r7, #20]
 8007014:	2b00      	cmp	r3, #0
 8007016:	d101      	bne.n	800701c <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8007018:	2303      	movs	r3, #3
 800701a:	e008      	b.n	800702e <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 800701c:	697b      	ldr	r3, [r7, #20]
 800701e:	68ba      	ldr	r2, [r7, #8]
 8007020:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8007024:	697b      	ldr	r3, [r7, #20]
 8007026:	687a      	ldr	r2, [r7, #4]
 8007028:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800702c:	2300      	movs	r3, #0
}
 800702e:	4618      	mov	r0, r3
 8007030:	371c      	adds	r7, #28
 8007032:	46bd      	mov	sp, r7
 8007034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007038:	4770      	bx	lr

0800703a <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800703a:	b480      	push	{r7}
 800703c:	b085      	sub	sp, #20
 800703e:	af00      	add	r7, sp, #0
 8007040:	6078      	str	r0, [r7, #4]
 8007042:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800704a:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	2b00      	cmp	r3, #0
 8007050:	d101      	bne.n	8007056 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 8007052:	2303      	movs	r3, #3
 8007054:	e004      	b.n	8007060 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	683a      	ldr	r2, [r7, #0]
 800705a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800705e:	2300      	movs	r3, #0
}
 8007060:	4618      	mov	r0, r3
 8007062:	3714      	adds	r7, #20
 8007064:	46bd      	mov	sp, r7
 8007066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800706a:	4770      	bx	lr

0800706c <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800706c:	b580      	push	{r7, lr}
 800706e:	b084      	sub	sp, #16
 8007070:	af00      	add	r7, sp, #0
 8007072:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800707a:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800707c:	2301      	movs	r3, #1
 800707e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007086:	2b00      	cmp	r3, #0
 8007088:	d101      	bne.n	800708e <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800708a:	2303      	movs	r3, #3
 800708c:	e01a      	b.n	80070c4 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800708e:	68bb      	ldr	r3, [r7, #8]
 8007090:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007094:	2b00      	cmp	r3, #0
 8007096:	d114      	bne.n	80070c2 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8007098:	68bb      	ldr	r3, [r7, #8]
 800709a:	2201      	movs	r2, #1
 800709c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80070a0:	68bb      	ldr	r3, [r7, #8]
 80070a2:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 80070aa:	68bb      	ldr	r3, [r7, #8]
 80070ac:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80070b0:	68bb      	ldr	r3, [r7, #8]
 80070b2:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80070b6:	2181      	movs	r1, #129	; 0x81
 80070b8:	6878      	ldr	r0, [r7, #4]
 80070ba:	f001 ff1c 	bl	8008ef6 <USBD_LL_Transmit>

    ret = USBD_OK;
 80070be:	2300      	movs	r3, #0
 80070c0:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80070c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80070c4:	4618      	mov	r0, r3
 80070c6:	3710      	adds	r7, #16
 80070c8:	46bd      	mov	sp, r7
 80070ca:	bd80      	pop	{r7, pc}

080070cc <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80070cc:	b580      	push	{r7, lr}
 80070ce:	b084      	sub	sp, #16
 80070d0:	af00      	add	r7, sp, #0
 80070d2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80070da:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d101      	bne.n	80070ea <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 80070e6:	2303      	movs	r3, #3
 80070e8:	e016      	b.n	8007118 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	7c1b      	ldrb	r3, [r3, #16]
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d109      	bne.n	8007106 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80070f8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80070fc:	2101      	movs	r1, #1
 80070fe:	6878      	ldr	r0, [r7, #4]
 8007100:	f001 ff1a 	bl	8008f38 <USBD_LL_PrepareReceive>
 8007104:	e007      	b.n	8007116 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800710c:	2340      	movs	r3, #64	; 0x40
 800710e:	2101      	movs	r1, #1
 8007110:	6878      	ldr	r0, [r7, #4]
 8007112:	f001 ff11 	bl	8008f38 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007116:	2300      	movs	r3, #0
}
 8007118:	4618      	mov	r0, r3
 800711a:	3710      	adds	r7, #16
 800711c:	46bd      	mov	sp, r7
 800711e:	bd80      	pop	{r7, pc}

08007120 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007120:	b580      	push	{r7, lr}
 8007122:	b086      	sub	sp, #24
 8007124:	af00      	add	r7, sp, #0
 8007126:	60f8      	str	r0, [r7, #12]
 8007128:	60b9      	str	r1, [r7, #8]
 800712a:	4613      	mov	r3, r2
 800712c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	2b00      	cmp	r3, #0
 8007132:	d101      	bne.n	8007138 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8007134:	2303      	movs	r3, #3
 8007136:	e01f      	b.n	8007178 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	2200      	movs	r2, #0
 800713c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	2200      	movs	r2, #0
 8007144:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	2200      	movs	r2, #0
 800714c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007150:	68bb      	ldr	r3, [r7, #8]
 8007152:	2b00      	cmp	r3, #0
 8007154:	d003      	beq.n	800715e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	68ba      	ldr	r2, [r7, #8]
 800715a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	2201      	movs	r2, #1
 8007162:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	79fa      	ldrb	r2, [r7, #7]
 800716a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800716c:	68f8      	ldr	r0, [r7, #12]
 800716e:	f001 fd8d 	bl	8008c8c <USBD_LL_Init>
 8007172:	4603      	mov	r3, r0
 8007174:	75fb      	strb	r3, [r7, #23]

  return ret;
 8007176:	7dfb      	ldrb	r3, [r7, #23]
}
 8007178:	4618      	mov	r0, r3
 800717a:	3718      	adds	r7, #24
 800717c:	46bd      	mov	sp, r7
 800717e:	bd80      	pop	{r7, pc}

08007180 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007180:	b580      	push	{r7, lr}
 8007182:	b084      	sub	sp, #16
 8007184:	af00      	add	r7, sp, #0
 8007186:	6078      	str	r0, [r7, #4]
 8007188:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800718a:	2300      	movs	r3, #0
 800718c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800718e:	683b      	ldr	r3, [r7, #0]
 8007190:	2b00      	cmp	r3, #0
 8007192:	d101      	bne.n	8007198 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8007194:	2303      	movs	r3, #3
 8007196:	e016      	b.n	80071c6 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	683a      	ldr	r2, [r7, #0]
 800719c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80071a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d00b      	beq.n	80071c4 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80071b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071b4:	f107 020e 	add.w	r2, r7, #14
 80071b8:	4610      	mov	r0, r2
 80071ba:	4798      	blx	r3
 80071bc:	4602      	mov	r2, r0
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 80071c4:	2300      	movs	r3, #0
}
 80071c6:	4618      	mov	r0, r3
 80071c8:	3710      	adds	r7, #16
 80071ca:	46bd      	mov	sp, r7
 80071cc:	bd80      	pop	{r7, pc}

080071ce <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80071ce:	b580      	push	{r7, lr}
 80071d0:	b082      	sub	sp, #8
 80071d2:	af00      	add	r7, sp, #0
 80071d4:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80071d6:	6878      	ldr	r0, [r7, #4]
 80071d8:	f001 fda4 	bl	8008d24 <USBD_LL_Start>
 80071dc:	4603      	mov	r3, r0
}
 80071de:	4618      	mov	r0, r3
 80071e0:	3708      	adds	r7, #8
 80071e2:	46bd      	mov	sp, r7
 80071e4:	bd80      	pop	{r7, pc}

080071e6 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80071e6:	b480      	push	{r7}
 80071e8:	b083      	sub	sp, #12
 80071ea:	af00      	add	r7, sp, #0
 80071ec:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80071ee:	2300      	movs	r3, #0
}
 80071f0:	4618      	mov	r0, r3
 80071f2:	370c      	adds	r7, #12
 80071f4:	46bd      	mov	sp, r7
 80071f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071fa:	4770      	bx	lr

080071fc <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80071fc:	b580      	push	{r7, lr}
 80071fe:	b084      	sub	sp, #16
 8007200:	af00      	add	r7, sp, #0
 8007202:	6078      	str	r0, [r7, #4]
 8007204:	460b      	mov	r3, r1
 8007206:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8007208:	2303      	movs	r3, #3
 800720a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007212:	2b00      	cmp	r3, #0
 8007214:	d009      	beq.n	800722a <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	78fa      	ldrb	r2, [r7, #3]
 8007220:	4611      	mov	r1, r2
 8007222:	6878      	ldr	r0, [r7, #4]
 8007224:	4798      	blx	r3
 8007226:	4603      	mov	r3, r0
 8007228:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800722a:	7bfb      	ldrb	r3, [r7, #15]
}
 800722c:	4618      	mov	r0, r3
 800722e:	3710      	adds	r7, #16
 8007230:	46bd      	mov	sp, r7
 8007232:	bd80      	pop	{r7, pc}

08007234 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007234:	b580      	push	{r7, lr}
 8007236:	b082      	sub	sp, #8
 8007238:	af00      	add	r7, sp, #0
 800723a:	6078      	str	r0, [r7, #4]
 800723c:	460b      	mov	r3, r1
 800723e:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007246:	2b00      	cmp	r3, #0
 8007248:	d007      	beq.n	800725a <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007250:	685b      	ldr	r3, [r3, #4]
 8007252:	78fa      	ldrb	r2, [r7, #3]
 8007254:	4611      	mov	r1, r2
 8007256:	6878      	ldr	r0, [r7, #4]
 8007258:	4798      	blx	r3
  }

  return USBD_OK;
 800725a:	2300      	movs	r3, #0
}
 800725c:	4618      	mov	r0, r3
 800725e:	3708      	adds	r7, #8
 8007260:	46bd      	mov	sp, r7
 8007262:	bd80      	pop	{r7, pc}

08007264 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007264:	b580      	push	{r7, lr}
 8007266:	b084      	sub	sp, #16
 8007268:	af00      	add	r7, sp, #0
 800726a:	6078      	str	r0, [r7, #4]
 800726c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007274:	6839      	ldr	r1, [r7, #0]
 8007276:	4618      	mov	r0, r3
 8007278:	f000 ff90 	bl	800819c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	2201      	movs	r2, #1
 8007280:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800728a:	461a      	mov	r2, r3
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007298:	f003 031f 	and.w	r3, r3, #31
 800729c:	2b02      	cmp	r3, #2
 800729e:	d01a      	beq.n	80072d6 <USBD_LL_SetupStage+0x72>
 80072a0:	2b02      	cmp	r3, #2
 80072a2:	d822      	bhi.n	80072ea <USBD_LL_SetupStage+0x86>
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d002      	beq.n	80072ae <USBD_LL_SetupStage+0x4a>
 80072a8:	2b01      	cmp	r3, #1
 80072aa:	d00a      	beq.n	80072c2 <USBD_LL_SetupStage+0x5e>
 80072ac:	e01d      	b.n	80072ea <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80072b4:	4619      	mov	r1, r3
 80072b6:	6878      	ldr	r0, [r7, #4]
 80072b8:	f000 fa62 	bl	8007780 <USBD_StdDevReq>
 80072bc:	4603      	mov	r3, r0
 80072be:	73fb      	strb	r3, [r7, #15]
      break;
 80072c0:	e020      	b.n	8007304 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80072c8:	4619      	mov	r1, r3
 80072ca:	6878      	ldr	r0, [r7, #4]
 80072cc:	f000 fac6 	bl	800785c <USBD_StdItfReq>
 80072d0:	4603      	mov	r3, r0
 80072d2:	73fb      	strb	r3, [r7, #15]
      break;
 80072d4:	e016      	b.n	8007304 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80072dc:	4619      	mov	r1, r3
 80072de:	6878      	ldr	r0, [r7, #4]
 80072e0:	f000 fb05 	bl	80078ee <USBD_StdEPReq>
 80072e4:	4603      	mov	r3, r0
 80072e6:	73fb      	strb	r3, [r7, #15]
      break;
 80072e8:	e00c      	b.n	8007304 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80072f0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80072f4:	b2db      	uxtb	r3, r3
 80072f6:	4619      	mov	r1, r3
 80072f8:	6878      	ldr	r0, [r7, #4]
 80072fa:	f001 fd73 	bl	8008de4 <USBD_LL_StallEP>
 80072fe:	4603      	mov	r3, r0
 8007300:	73fb      	strb	r3, [r7, #15]
      break;
 8007302:	bf00      	nop
  }

  return ret;
 8007304:	7bfb      	ldrb	r3, [r7, #15]
}
 8007306:	4618      	mov	r0, r3
 8007308:	3710      	adds	r7, #16
 800730a:	46bd      	mov	sp, r7
 800730c:	bd80      	pop	{r7, pc}

0800730e <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800730e:	b580      	push	{r7, lr}
 8007310:	b086      	sub	sp, #24
 8007312:	af00      	add	r7, sp, #0
 8007314:	60f8      	str	r0, [r7, #12]
 8007316:	460b      	mov	r3, r1
 8007318:	607a      	str	r2, [r7, #4]
 800731a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800731c:	7afb      	ldrb	r3, [r7, #11]
 800731e:	2b00      	cmp	r3, #0
 8007320:	d138      	bne.n	8007394 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8007328:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007330:	2b03      	cmp	r3, #3
 8007332:	d14a      	bne.n	80073ca <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8007334:	693b      	ldr	r3, [r7, #16]
 8007336:	689a      	ldr	r2, [r3, #8]
 8007338:	693b      	ldr	r3, [r7, #16]
 800733a:	68db      	ldr	r3, [r3, #12]
 800733c:	429a      	cmp	r2, r3
 800733e:	d913      	bls.n	8007368 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007340:	693b      	ldr	r3, [r7, #16]
 8007342:	689a      	ldr	r2, [r3, #8]
 8007344:	693b      	ldr	r3, [r7, #16]
 8007346:	68db      	ldr	r3, [r3, #12]
 8007348:	1ad2      	subs	r2, r2, r3
 800734a:	693b      	ldr	r3, [r7, #16]
 800734c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800734e:	693b      	ldr	r3, [r7, #16]
 8007350:	68da      	ldr	r2, [r3, #12]
 8007352:	693b      	ldr	r3, [r7, #16]
 8007354:	689b      	ldr	r3, [r3, #8]
 8007356:	4293      	cmp	r3, r2
 8007358:	bf28      	it	cs
 800735a:	4613      	movcs	r3, r2
 800735c:	461a      	mov	r2, r3
 800735e:	6879      	ldr	r1, [r7, #4]
 8007360:	68f8      	ldr	r0, [r7, #12]
 8007362:	f001 f80f 	bl	8008384 <USBD_CtlContinueRx>
 8007366:	e030      	b.n	80073ca <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800736e:	b2db      	uxtb	r3, r3
 8007370:	2b03      	cmp	r3, #3
 8007372:	d10b      	bne.n	800738c <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800737a:	691b      	ldr	r3, [r3, #16]
 800737c:	2b00      	cmp	r3, #0
 800737e:	d005      	beq.n	800738c <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007386:	691b      	ldr	r3, [r3, #16]
 8007388:	68f8      	ldr	r0, [r7, #12]
 800738a:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800738c:	68f8      	ldr	r0, [r7, #12]
 800738e:	f001 f80a 	bl	80083a6 <USBD_CtlSendStatus>
 8007392:	e01a      	b.n	80073ca <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800739a:	b2db      	uxtb	r3, r3
 800739c:	2b03      	cmp	r3, #3
 800739e:	d114      	bne.n	80073ca <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80073a6:	699b      	ldr	r3, [r3, #24]
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d00e      	beq.n	80073ca <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80073b2:	699b      	ldr	r3, [r3, #24]
 80073b4:	7afa      	ldrb	r2, [r7, #11]
 80073b6:	4611      	mov	r1, r2
 80073b8:	68f8      	ldr	r0, [r7, #12]
 80073ba:	4798      	blx	r3
 80073bc:	4603      	mov	r3, r0
 80073be:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 80073c0:	7dfb      	ldrb	r3, [r7, #23]
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d001      	beq.n	80073ca <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 80073c6:	7dfb      	ldrb	r3, [r7, #23]
 80073c8:	e000      	b.n	80073cc <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 80073ca:	2300      	movs	r3, #0
}
 80073cc:	4618      	mov	r0, r3
 80073ce:	3718      	adds	r7, #24
 80073d0:	46bd      	mov	sp, r7
 80073d2:	bd80      	pop	{r7, pc}

080073d4 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80073d4:	b580      	push	{r7, lr}
 80073d6:	b086      	sub	sp, #24
 80073d8:	af00      	add	r7, sp, #0
 80073da:	60f8      	str	r0, [r7, #12]
 80073dc:	460b      	mov	r3, r1
 80073de:	607a      	str	r2, [r7, #4]
 80073e0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80073e2:	7afb      	ldrb	r3, [r7, #11]
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d16b      	bne.n	80074c0 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	3314      	adds	r3, #20
 80073ec:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80073f4:	2b02      	cmp	r3, #2
 80073f6:	d156      	bne.n	80074a6 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 80073f8:	693b      	ldr	r3, [r7, #16]
 80073fa:	689a      	ldr	r2, [r3, #8]
 80073fc:	693b      	ldr	r3, [r7, #16]
 80073fe:	68db      	ldr	r3, [r3, #12]
 8007400:	429a      	cmp	r2, r3
 8007402:	d914      	bls.n	800742e <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007404:	693b      	ldr	r3, [r7, #16]
 8007406:	689a      	ldr	r2, [r3, #8]
 8007408:	693b      	ldr	r3, [r7, #16]
 800740a:	68db      	ldr	r3, [r3, #12]
 800740c:	1ad2      	subs	r2, r2, r3
 800740e:	693b      	ldr	r3, [r7, #16]
 8007410:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8007412:	693b      	ldr	r3, [r7, #16]
 8007414:	689b      	ldr	r3, [r3, #8]
 8007416:	461a      	mov	r2, r3
 8007418:	6879      	ldr	r1, [r7, #4]
 800741a:	68f8      	ldr	r0, [r7, #12]
 800741c:	f000 ff84 	bl	8008328 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007420:	2300      	movs	r3, #0
 8007422:	2200      	movs	r2, #0
 8007424:	2100      	movs	r1, #0
 8007426:	68f8      	ldr	r0, [r7, #12]
 8007428:	f001 fd86 	bl	8008f38 <USBD_LL_PrepareReceive>
 800742c:	e03b      	b.n	80074a6 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800742e:	693b      	ldr	r3, [r7, #16]
 8007430:	68da      	ldr	r2, [r3, #12]
 8007432:	693b      	ldr	r3, [r7, #16]
 8007434:	689b      	ldr	r3, [r3, #8]
 8007436:	429a      	cmp	r2, r3
 8007438:	d11c      	bne.n	8007474 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800743a:	693b      	ldr	r3, [r7, #16]
 800743c:	685a      	ldr	r2, [r3, #4]
 800743e:	693b      	ldr	r3, [r7, #16]
 8007440:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007442:	429a      	cmp	r2, r3
 8007444:	d316      	bcc.n	8007474 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8007446:	693b      	ldr	r3, [r7, #16]
 8007448:	685a      	ldr	r2, [r3, #4]
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007450:	429a      	cmp	r2, r3
 8007452:	d20f      	bcs.n	8007474 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007454:	2200      	movs	r2, #0
 8007456:	2100      	movs	r1, #0
 8007458:	68f8      	ldr	r0, [r7, #12]
 800745a:	f000 ff65 	bl	8008328 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	2200      	movs	r2, #0
 8007462:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007466:	2300      	movs	r3, #0
 8007468:	2200      	movs	r2, #0
 800746a:	2100      	movs	r1, #0
 800746c:	68f8      	ldr	r0, [r7, #12]
 800746e:	f001 fd63 	bl	8008f38 <USBD_LL_PrepareReceive>
 8007472:	e018      	b.n	80074a6 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800747a:	b2db      	uxtb	r3, r3
 800747c:	2b03      	cmp	r3, #3
 800747e:	d10b      	bne.n	8007498 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007486:	68db      	ldr	r3, [r3, #12]
 8007488:	2b00      	cmp	r3, #0
 800748a:	d005      	beq.n	8007498 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007492:	68db      	ldr	r3, [r3, #12]
 8007494:	68f8      	ldr	r0, [r7, #12]
 8007496:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007498:	2180      	movs	r1, #128	; 0x80
 800749a:	68f8      	ldr	r0, [r7, #12]
 800749c:	f001 fca2 	bl	8008de4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80074a0:	68f8      	ldr	r0, [r7, #12]
 80074a2:	f000 ff93 	bl	80083cc <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80074ac:	2b01      	cmp	r3, #1
 80074ae:	d122      	bne.n	80074f6 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 80074b0:	68f8      	ldr	r0, [r7, #12]
 80074b2:	f7ff fe98 	bl	80071e6 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	2200      	movs	r2, #0
 80074ba:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80074be:	e01a      	b.n	80074f6 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80074c6:	b2db      	uxtb	r3, r3
 80074c8:	2b03      	cmp	r3, #3
 80074ca:	d114      	bne.n	80074f6 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80074d2:	695b      	ldr	r3, [r3, #20]
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d00e      	beq.n	80074f6 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80074de:	695b      	ldr	r3, [r3, #20]
 80074e0:	7afa      	ldrb	r2, [r7, #11]
 80074e2:	4611      	mov	r1, r2
 80074e4:	68f8      	ldr	r0, [r7, #12]
 80074e6:	4798      	blx	r3
 80074e8:	4603      	mov	r3, r0
 80074ea:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 80074ec:	7dfb      	ldrb	r3, [r7, #23]
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d001      	beq.n	80074f6 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 80074f2:	7dfb      	ldrb	r3, [r7, #23]
 80074f4:	e000      	b.n	80074f8 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 80074f6:	2300      	movs	r3, #0
}
 80074f8:	4618      	mov	r0, r3
 80074fa:	3718      	adds	r7, #24
 80074fc:	46bd      	mov	sp, r7
 80074fe:	bd80      	pop	{r7, pc}

08007500 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007500:	b580      	push	{r7, lr}
 8007502:	b082      	sub	sp, #8
 8007504:	af00      	add	r7, sp, #0
 8007506:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	2201      	movs	r2, #1
 800750c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	2200      	movs	r2, #0
 8007514:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	2200      	movs	r2, #0
 800751c:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	2200      	movs	r2, #0
 8007522:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800752c:	2b00      	cmp	r3, #0
 800752e:	d101      	bne.n	8007534 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8007530:	2303      	movs	r3, #3
 8007532:	e02f      	b.n	8007594 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800753a:	2b00      	cmp	r3, #0
 800753c:	d00f      	beq.n	800755e <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007544:	685b      	ldr	r3, [r3, #4]
 8007546:	2b00      	cmp	r3, #0
 8007548:	d009      	beq.n	800755e <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007550:	685b      	ldr	r3, [r3, #4]
 8007552:	687a      	ldr	r2, [r7, #4]
 8007554:	6852      	ldr	r2, [r2, #4]
 8007556:	b2d2      	uxtb	r2, r2
 8007558:	4611      	mov	r1, r2
 800755a:	6878      	ldr	r0, [r7, #4]
 800755c:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800755e:	2340      	movs	r3, #64	; 0x40
 8007560:	2200      	movs	r2, #0
 8007562:	2100      	movs	r1, #0
 8007564:	6878      	ldr	r0, [r7, #4]
 8007566:	f001 fbf8 	bl	8008d5a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	2201      	movs	r2, #1
 800756e:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	2240      	movs	r2, #64	; 0x40
 8007576:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800757a:	2340      	movs	r3, #64	; 0x40
 800757c:	2200      	movs	r2, #0
 800757e:	2180      	movs	r1, #128	; 0x80
 8007580:	6878      	ldr	r0, [r7, #4]
 8007582:	f001 fbea 	bl	8008d5a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	2201      	movs	r2, #1
 800758a:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	2240      	movs	r2, #64	; 0x40
 8007590:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8007592:	2300      	movs	r3, #0
}
 8007594:	4618      	mov	r0, r3
 8007596:	3708      	adds	r7, #8
 8007598:	46bd      	mov	sp, r7
 800759a:	bd80      	pop	{r7, pc}

0800759c <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800759c:	b480      	push	{r7}
 800759e:	b083      	sub	sp, #12
 80075a0:	af00      	add	r7, sp, #0
 80075a2:	6078      	str	r0, [r7, #4]
 80075a4:	460b      	mov	r3, r1
 80075a6:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	78fa      	ldrb	r2, [r7, #3]
 80075ac:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80075ae:	2300      	movs	r3, #0
}
 80075b0:	4618      	mov	r0, r3
 80075b2:	370c      	adds	r7, #12
 80075b4:	46bd      	mov	sp, r7
 80075b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ba:	4770      	bx	lr

080075bc <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80075bc:	b480      	push	{r7}
 80075be:	b083      	sub	sp, #12
 80075c0:	af00      	add	r7, sp, #0
 80075c2:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80075ca:	b2da      	uxtb	r2, r3
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	2204      	movs	r2, #4
 80075d6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80075da:	2300      	movs	r3, #0
}
 80075dc:	4618      	mov	r0, r3
 80075de:	370c      	adds	r7, #12
 80075e0:	46bd      	mov	sp, r7
 80075e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e6:	4770      	bx	lr

080075e8 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80075e8:	b480      	push	{r7}
 80075ea:	b083      	sub	sp, #12
 80075ec:	af00      	add	r7, sp, #0
 80075ee:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80075f6:	b2db      	uxtb	r3, r3
 80075f8:	2b04      	cmp	r3, #4
 80075fa:	d106      	bne.n	800760a <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8007602:	b2da      	uxtb	r2, r3
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800760a:	2300      	movs	r3, #0
}
 800760c:	4618      	mov	r0, r3
 800760e:	370c      	adds	r7, #12
 8007610:	46bd      	mov	sp, r7
 8007612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007616:	4770      	bx	lr

08007618 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007618:	b580      	push	{r7, lr}
 800761a:	b082      	sub	sp, #8
 800761c:	af00      	add	r7, sp, #0
 800761e:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007626:	2b00      	cmp	r3, #0
 8007628:	d101      	bne.n	800762e <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800762a:	2303      	movs	r3, #3
 800762c:	e012      	b.n	8007654 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007634:	b2db      	uxtb	r3, r3
 8007636:	2b03      	cmp	r3, #3
 8007638:	d10b      	bne.n	8007652 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007640:	69db      	ldr	r3, [r3, #28]
 8007642:	2b00      	cmp	r3, #0
 8007644:	d005      	beq.n	8007652 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800764c:	69db      	ldr	r3, [r3, #28]
 800764e:	6878      	ldr	r0, [r7, #4]
 8007650:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007652:	2300      	movs	r3, #0
}
 8007654:	4618      	mov	r0, r3
 8007656:	3708      	adds	r7, #8
 8007658:	46bd      	mov	sp, r7
 800765a:	bd80      	pop	{r7, pc}

0800765c <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800765c:	b580      	push	{r7, lr}
 800765e:	b082      	sub	sp, #8
 8007660:	af00      	add	r7, sp, #0
 8007662:	6078      	str	r0, [r7, #4]
 8007664:	460b      	mov	r3, r1
 8007666:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800766e:	2b00      	cmp	r3, #0
 8007670:	d101      	bne.n	8007676 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 8007672:	2303      	movs	r3, #3
 8007674:	e014      	b.n	80076a0 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800767c:	b2db      	uxtb	r3, r3
 800767e:	2b03      	cmp	r3, #3
 8007680:	d10d      	bne.n	800769e <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007688:	6a1b      	ldr	r3, [r3, #32]
 800768a:	2b00      	cmp	r3, #0
 800768c:	d007      	beq.n	800769e <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007694:	6a1b      	ldr	r3, [r3, #32]
 8007696:	78fa      	ldrb	r2, [r7, #3]
 8007698:	4611      	mov	r1, r2
 800769a:	6878      	ldr	r0, [r7, #4]
 800769c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800769e:	2300      	movs	r3, #0
}
 80076a0:	4618      	mov	r0, r3
 80076a2:	3708      	adds	r7, #8
 80076a4:	46bd      	mov	sp, r7
 80076a6:	bd80      	pop	{r7, pc}

080076a8 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80076a8:	b580      	push	{r7, lr}
 80076aa:	b082      	sub	sp, #8
 80076ac:	af00      	add	r7, sp, #0
 80076ae:	6078      	str	r0, [r7, #4]
 80076b0:	460b      	mov	r3, r1
 80076b2:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d101      	bne.n	80076c2 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 80076be:	2303      	movs	r3, #3
 80076c0:	e014      	b.n	80076ec <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80076c8:	b2db      	uxtb	r3, r3
 80076ca:	2b03      	cmp	r3, #3
 80076cc:	d10d      	bne.n	80076ea <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80076d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d007      	beq.n	80076ea <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80076e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076e2:	78fa      	ldrb	r2, [r7, #3]
 80076e4:	4611      	mov	r1, r2
 80076e6:	6878      	ldr	r0, [r7, #4]
 80076e8:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80076ea:	2300      	movs	r3, #0
}
 80076ec:	4618      	mov	r0, r3
 80076ee:	3708      	adds	r7, #8
 80076f0:	46bd      	mov	sp, r7
 80076f2:	bd80      	pop	{r7, pc}

080076f4 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80076f4:	b480      	push	{r7}
 80076f6:	b083      	sub	sp, #12
 80076f8:	af00      	add	r7, sp, #0
 80076fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80076fc:	2300      	movs	r3, #0
}
 80076fe:	4618      	mov	r0, r3
 8007700:	370c      	adds	r7, #12
 8007702:	46bd      	mov	sp, r7
 8007704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007708:	4770      	bx	lr

0800770a <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800770a:	b580      	push	{r7, lr}
 800770c:	b082      	sub	sp, #8
 800770e:	af00      	add	r7, sp, #0
 8007710:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	2201      	movs	r2, #1
 8007716:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007720:	2b00      	cmp	r3, #0
 8007722:	d009      	beq.n	8007738 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800772a:	685b      	ldr	r3, [r3, #4]
 800772c:	687a      	ldr	r2, [r7, #4]
 800772e:	6852      	ldr	r2, [r2, #4]
 8007730:	b2d2      	uxtb	r2, r2
 8007732:	4611      	mov	r1, r2
 8007734:	6878      	ldr	r0, [r7, #4]
 8007736:	4798      	blx	r3
  }

  return USBD_OK;
 8007738:	2300      	movs	r3, #0
}
 800773a:	4618      	mov	r0, r3
 800773c:	3708      	adds	r7, #8
 800773e:	46bd      	mov	sp, r7
 8007740:	bd80      	pop	{r7, pc}

08007742 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007742:	b480      	push	{r7}
 8007744:	b087      	sub	sp, #28
 8007746:	af00      	add	r7, sp, #0
 8007748:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800774e:	697b      	ldr	r3, [r7, #20]
 8007750:	781b      	ldrb	r3, [r3, #0]
 8007752:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007754:	697b      	ldr	r3, [r7, #20]
 8007756:	3301      	adds	r3, #1
 8007758:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800775a:	697b      	ldr	r3, [r7, #20]
 800775c:	781b      	ldrb	r3, [r3, #0]
 800775e:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8007760:	8a3b      	ldrh	r3, [r7, #16]
 8007762:	021b      	lsls	r3, r3, #8
 8007764:	b21a      	sxth	r2, r3
 8007766:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800776a:	4313      	orrs	r3, r2
 800776c:	b21b      	sxth	r3, r3
 800776e:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8007770:	89fb      	ldrh	r3, [r7, #14]
}
 8007772:	4618      	mov	r0, r3
 8007774:	371c      	adds	r7, #28
 8007776:	46bd      	mov	sp, r7
 8007778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800777c:	4770      	bx	lr
	...

08007780 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007780:	b580      	push	{r7, lr}
 8007782:	b084      	sub	sp, #16
 8007784:	af00      	add	r7, sp, #0
 8007786:	6078      	str	r0, [r7, #4]
 8007788:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800778a:	2300      	movs	r3, #0
 800778c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800778e:	683b      	ldr	r3, [r7, #0]
 8007790:	781b      	ldrb	r3, [r3, #0]
 8007792:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007796:	2b40      	cmp	r3, #64	; 0x40
 8007798:	d005      	beq.n	80077a6 <USBD_StdDevReq+0x26>
 800779a:	2b40      	cmp	r3, #64	; 0x40
 800779c:	d853      	bhi.n	8007846 <USBD_StdDevReq+0xc6>
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d00b      	beq.n	80077ba <USBD_StdDevReq+0x3a>
 80077a2:	2b20      	cmp	r3, #32
 80077a4:	d14f      	bne.n	8007846 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80077ac:	689b      	ldr	r3, [r3, #8]
 80077ae:	6839      	ldr	r1, [r7, #0]
 80077b0:	6878      	ldr	r0, [r7, #4]
 80077b2:	4798      	blx	r3
 80077b4:	4603      	mov	r3, r0
 80077b6:	73fb      	strb	r3, [r7, #15]
      break;
 80077b8:	e04a      	b.n	8007850 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80077ba:	683b      	ldr	r3, [r7, #0]
 80077bc:	785b      	ldrb	r3, [r3, #1]
 80077be:	2b09      	cmp	r3, #9
 80077c0:	d83b      	bhi.n	800783a <USBD_StdDevReq+0xba>
 80077c2:	a201      	add	r2, pc, #4	; (adr r2, 80077c8 <USBD_StdDevReq+0x48>)
 80077c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077c8:	0800781d 	.word	0x0800781d
 80077cc:	08007831 	.word	0x08007831
 80077d0:	0800783b 	.word	0x0800783b
 80077d4:	08007827 	.word	0x08007827
 80077d8:	0800783b 	.word	0x0800783b
 80077dc:	080077fb 	.word	0x080077fb
 80077e0:	080077f1 	.word	0x080077f1
 80077e4:	0800783b 	.word	0x0800783b
 80077e8:	08007813 	.word	0x08007813
 80077ec:	08007805 	.word	0x08007805
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80077f0:	6839      	ldr	r1, [r7, #0]
 80077f2:	6878      	ldr	r0, [r7, #4]
 80077f4:	f000 f9de 	bl	8007bb4 <USBD_GetDescriptor>
          break;
 80077f8:	e024      	b.n	8007844 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80077fa:	6839      	ldr	r1, [r7, #0]
 80077fc:	6878      	ldr	r0, [r7, #4]
 80077fe:	f000 fb43 	bl	8007e88 <USBD_SetAddress>
          break;
 8007802:	e01f      	b.n	8007844 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8007804:	6839      	ldr	r1, [r7, #0]
 8007806:	6878      	ldr	r0, [r7, #4]
 8007808:	f000 fb82 	bl	8007f10 <USBD_SetConfig>
 800780c:	4603      	mov	r3, r0
 800780e:	73fb      	strb	r3, [r7, #15]
          break;
 8007810:	e018      	b.n	8007844 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007812:	6839      	ldr	r1, [r7, #0]
 8007814:	6878      	ldr	r0, [r7, #4]
 8007816:	f000 fc21 	bl	800805c <USBD_GetConfig>
          break;
 800781a:	e013      	b.n	8007844 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800781c:	6839      	ldr	r1, [r7, #0]
 800781e:	6878      	ldr	r0, [r7, #4]
 8007820:	f000 fc52 	bl	80080c8 <USBD_GetStatus>
          break;
 8007824:	e00e      	b.n	8007844 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007826:	6839      	ldr	r1, [r7, #0]
 8007828:	6878      	ldr	r0, [r7, #4]
 800782a:	f000 fc81 	bl	8008130 <USBD_SetFeature>
          break;
 800782e:	e009      	b.n	8007844 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007830:	6839      	ldr	r1, [r7, #0]
 8007832:	6878      	ldr	r0, [r7, #4]
 8007834:	f000 fc90 	bl	8008158 <USBD_ClrFeature>
          break;
 8007838:	e004      	b.n	8007844 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800783a:	6839      	ldr	r1, [r7, #0]
 800783c:	6878      	ldr	r0, [r7, #4]
 800783e:	f000 fce7 	bl	8008210 <USBD_CtlError>
          break;
 8007842:	bf00      	nop
      }
      break;
 8007844:	e004      	b.n	8007850 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8007846:	6839      	ldr	r1, [r7, #0]
 8007848:	6878      	ldr	r0, [r7, #4]
 800784a:	f000 fce1 	bl	8008210 <USBD_CtlError>
      break;
 800784e:	bf00      	nop
  }

  return ret;
 8007850:	7bfb      	ldrb	r3, [r7, #15]
}
 8007852:	4618      	mov	r0, r3
 8007854:	3710      	adds	r7, #16
 8007856:	46bd      	mov	sp, r7
 8007858:	bd80      	pop	{r7, pc}
 800785a:	bf00      	nop

0800785c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800785c:	b580      	push	{r7, lr}
 800785e:	b084      	sub	sp, #16
 8007860:	af00      	add	r7, sp, #0
 8007862:	6078      	str	r0, [r7, #4]
 8007864:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007866:	2300      	movs	r3, #0
 8007868:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800786a:	683b      	ldr	r3, [r7, #0]
 800786c:	781b      	ldrb	r3, [r3, #0]
 800786e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007872:	2b40      	cmp	r3, #64	; 0x40
 8007874:	d005      	beq.n	8007882 <USBD_StdItfReq+0x26>
 8007876:	2b40      	cmp	r3, #64	; 0x40
 8007878:	d82f      	bhi.n	80078da <USBD_StdItfReq+0x7e>
 800787a:	2b00      	cmp	r3, #0
 800787c:	d001      	beq.n	8007882 <USBD_StdItfReq+0x26>
 800787e:	2b20      	cmp	r3, #32
 8007880:	d12b      	bne.n	80078da <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007888:	b2db      	uxtb	r3, r3
 800788a:	3b01      	subs	r3, #1
 800788c:	2b02      	cmp	r3, #2
 800788e:	d81d      	bhi.n	80078cc <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007890:	683b      	ldr	r3, [r7, #0]
 8007892:	889b      	ldrh	r3, [r3, #4]
 8007894:	b2db      	uxtb	r3, r3
 8007896:	2b01      	cmp	r3, #1
 8007898:	d813      	bhi.n	80078c2 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80078a0:	689b      	ldr	r3, [r3, #8]
 80078a2:	6839      	ldr	r1, [r7, #0]
 80078a4:	6878      	ldr	r0, [r7, #4]
 80078a6:	4798      	blx	r3
 80078a8:	4603      	mov	r3, r0
 80078aa:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80078ac:	683b      	ldr	r3, [r7, #0]
 80078ae:	88db      	ldrh	r3, [r3, #6]
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d110      	bne.n	80078d6 <USBD_StdItfReq+0x7a>
 80078b4:	7bfb      	ldrb	r3, [r7, #15]
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d10d      	bne.n	80078d6 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 80078ba:	6878      	ldr	r0, [r7, #4]
 80078bc:	f000 fd73 	bl	80083a6 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80078c0:	e009      	b.n	80078d6 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 80078c2:	6839      	ldr	r1, [r7, #0]
 80078c4:	6878      	ldr	r0, [r7, #4]
 80078c6:	f000 fca3 	bl	8008210 <USBD_CtlError>
          break;
 80078ca:	e004      	b.n	80078d6 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 80078cc:	6839      	ldr	r1, [r7, #0]
 80078ce:	6878      	ldr	r0, [r7, #4]
 80078d0:	f000 fc9e 	bl	8008210 <USBD_CtlError>
          break;
 80078d4:	e000      	b.n	80078d8 <USBD_StdItfReq+0x7c>
          break;
 80078d6:	bf00      	nop
      }
      break;
 80078d8:	e004      	b.n	80078e4 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 80078da:	6839      	ldr	r1, [r7, #0]
 80078dc:	6878      	ldr	r0, [r7, #4]
 80078de:	f000 fc97 	bl	8008210 <USBD_CtlError>
      break;
 80078e2:	bf00      	nop
  }

  return ret;
 80078e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80078e6:	4618      	mov	r0, r3
 80078e8:	3710      	adds	r7, #16
 80078ea:	46bd      	mov	sp, r7
 80078ec:	bd80      	pop	{r7, pc}

080078ee <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80078ee:	b580      	push	{r7, lr}
 80078f0:	b084      	sub	sp, #16
 80078f2:	af00      	add	r7, sp, #0
 80078f4:	6078      	str	r0, [r7, #4]
 80078f6:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80078f8:	2300      	movs	r3, #0
 80078fa:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 80078fc:	683b      	ldr	r3, [r7, #0]
 80078fe:	889b      	ldrh	r3, [r3, #4]
 8007900:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007902:	683b      	ldr	r3, [r7, #0]
 8007904:	781b      	ldrb	r3, [r3, #0]
 8007906:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800790a:	2b40      	cmp	r3, #64	; 0x40
 800790c:	d007      	beq.n	800791e <USBD_StdEPReq+0x30>
 800790e:	2b40      	cmp	r3, #64	; 0x40
 8007910:	f200 8145 	bhi.w	8007b9e <USBD_StdEPReq+0x2b0>
 8007914:	2b00      	cmp	r3, #0
 8007916:	d00c      	beq.n	8007932 <USBD_StdEPReq+0x44>
 8007918:	2b20      	cmp	r3, #32
 800791a:	f040 8140 	bne.w	8007b9e <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007924:	689b      	ldr	r3, [r3, #8]
 8007926:	6839      	ldr	r1, [r7, #0]
 8007928:	6878      	ldr	r0, [r7, #4]
 800792a:	4798      	blx	r3
 800792c:	4603      	mov	r3, r0
 800792e:	73fb      	strb	r3, [r7, #15]
      break;
 8007930:	e13a      	b.n	8007ba8 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007932:	683b      	ldr	r3, [r7, #0]
 8007934:	785b      	ldrb	r3, [r3, #1]
 8007936:	2b03      	cmp	r3, #3
 8007938:	d007      	beq.n	800794a <USBD_StdEPReq+0x5c>
 800793a:	2b03      	cmp	r3, #3
 800793c:	f300 8129 	bgt.w	8007b92 <USBD_StdEPReq+0x2a4>
 8007940:	2b00      	cmp	r3, #0
 8007942:	d07f      	beq.n	8007a44 <USBD_StdEPReq+0x156>
 8007944:	2b01      	cmp	r3, #1
 8007946:	d03c      	beq.n	80079c2 <USBD_StdEPReq+0xd4>
 8007948:	e123      	b.n	8007b92 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007950:	b2db      	uxtb	r3, r3
 8007952:	2b02      	cmp	r3, #2
 8007954:	d002      	beq.n	800795c <USBD_StdEPReq+0x6e>
 8007956:	2b03      	cmp	r3, #3
 8007958:	d016      	beq.n	8007988 <USBD_StdEPReq+0x9a>
 800795a:	e02c      	b.n	80079b6 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800795c:	7bbb      	ldrb	r3, [r7, #14]
 800795e:	2b00      	cmp	r3, #0
 8007960:	d00d      	beq.n	800797e <USBD_StdEPReq+0x90>
 8007962:	7bbb      	ldrb	r3, [r7, #14]
 8007964:	2b80      	cmp	r3, #128	; 0x80
 8007966:	d00a      	beq.n	800797e <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007968:	7bbb      	ldrb	r3, [r7, #14]
 800796a:	4619      	mov	r1, r3
 800796c:	6878      	ldr	r0, [r7, #4]
 800796e:	f001 fa39 	bl	8008de4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007972:	2180      	movs	r1, #128	; 0x80
 8007974:	6878      	ldr	r0, [r7, #4]
 8007976:	f001 fa35 	bl	8008de4 <USBD_LL_StallEP>
 800797a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800797c:	e020      	b.n	80079c0 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800797e:	6839      	ldr	r1, [r7, #0]
 8007980:	6878      	ldr	r0, [r7, #4]
 8007982:	f000 fc45 	bl	8008210 <USBD_CtlError>
              break;
 8007986:	e01b      	b.n	80079c0 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007988:	683b      	ldr	r3, [r7, #0]
 800798a:	885b      	ldrh	r3, [r3, #2]
 800798c:	2b00      	cmp	r3, #0
 800798e:	d10e      	bne.n	80079ae <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007990:	7bbb      	ldrb	r3, [r7, #14]
 8007992:	2b00      	cmp	r3, #0
 8007994:	d00b      	beq.n	80079ae <USBD_StdEPReq+0xc0>
 8007996:	7bbb      	ldrb	r3, [r7, #14]
 8007998:	2b80      	cmp	r3, #128	; 0x80
 800799a:	d008      	beq.n	80079ae <USBD_StdEPReq+0xc0>
 800799c:	683b      	ldr	r3, [r7, #0]
 800799e:	88db      	ldrh	r3, [r3, #6]
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d104      	bne.n	80079ae <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80079a4:	7bbb      	ldrb	r3, [r7, #14]
 80079a6:	4619      	mov	r1, r3
 80079a8:	6878      	ldr	r0, [r7, #4]
 80079aa:	f001 fa1b 	bl	8008de4 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80079ae:	6878      	ldr	r0, [r7, #4]
 80079b0:	f000 fcf9 	bl	80083a6 <USBD_CtlSendStatus>

              break;
 80079b4:	e004      	b.n	80079c0 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 80079b6:	6839      	ldr	r1, [r7, #0]
 80079b8:	6878      	ldr	r0, [r7, #4]
 80079ba:	f000 fc29 	bl	8008210 <USBD_CtlError>
              break;
 80079be:	bf00      	nop
          }
          break;
 80079c0:	e0ec      	b.n	8007b9c <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80079c8:	b2db      	uxtb	r3, r3
 80079ca:	2b02      	cmp	r3, #2
 80079cc:	d002      	beq.n	80079d4 <USBD_StdEPReq+0xe6>
 80079ce:	2b03      	cmp	r3, #3
 80079d0:	d016      	beq.n	8007a00 <USBD_StdEPReq+0x112>
 80079d2:	e030      	b.n	8007a36 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80079d4:	7bbb      	ldrb	r3, [r7, #14]
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d00d      	beq.n	80079f6 <USBD_StdEPReq+0x108>
 80079da:	7bbb      	ldrb	r3, [r7, #14]
 80079dc:	2b80      	cmp	r3, #128	; 0x80
 80079de:	d00a      	beq.n	80079f6 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80079e0:	7bbb      	ldrb	r3, [r7, #14]
 80079e2:	4619      	mov	r1, r3
 80079e4:	6878      	ldr	r0, [r7, #4]
 80079e6:	f001 f9fd 	bl	8008de4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80079ea:	2180      	movs	r1, #128	; 0x80
 80079ec:	6878      	ldr	r0, [r7, #4]
 80079ee:	f001 f9f9 	bl	8008de4 <USBD_LL_StallEP>
 80079f2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80079f4:	e025      	b.n	8007a42 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 80079f6:	6839      	ldr	r1, [r7, #0]
 80079f8:	6878      	ldr	r0, [r7, #4]
 80079fa:	f000 fc09 	bl	8008210 <USBD_CtlError>
              break;
 80079fe:	e020      	b.n	8007a42 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007a00:	683b      	ldr	r3, [r7, #0]
 8007a02:	885b      	ldrh	r3, [r3, #2]
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d11b      	bne.n	8007a40 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007a08:	7bbb      	ldrb	r3, [r7, #14]
 8007a0a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d004      	beq.n	8007a1c <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8007a12:	7bbb      	ldrb	r3, [r7, #14]
 8007a14:	4619      	mov	r1, r3
 8007a16:	6878      	ldr	r0, [r7, #4]
 8007a18:	f001 fa03 	bl	8008e22 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8007a1c:	6878      	ldr	r0, [r7, #4]
 8007a1e:	f000 fcc2 	bl	80083a6 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a28:	689b      	ldr	r3, [r3, #8]
 8007a2a:	6839      	ldr	r1, [r7, #0]
 8007a2c:	6878      	ldr	r0, [r7, #4]
 8007a2e:	4798      	blx	r3
 8007a30:	4603      	mov	r3, r0
 8007a32:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8007a34:	e004      	b.n	8007a40 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8007a36:	6839      	ldr	r1, [r7, #0]
 8007a38:	6878      	ldr	r0, [r7, #4]
 8007a3a:	f000 fbe9 	bl	8008210 <USBD_CtlError>
              break;
 8007a3e:	e000      	b.n	8007a42 <USBD_StdEPReq+0x154>
              break;
 8007a40:	bf00      	nop
          }
          break;
 8007a42:	e0ab      	b.n	8007b9c <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a4a:	b2db      	uxtb	r3, r3
 8007a4c:	2b02      	cmp	r3, #2
 8007a4e:	d002      	beq.n	8007a56 <USBD_StdEPReq+0x168>
 8007a50:	2b03      	cmp	r3, #3
 8007a52:	d032      	beq.n	8007aba <USBD_StdEPReq+0x1cc>
 8007a54:	e097      	b.n	8007b86 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007a56:	7bbb      	ldrb	r3, [r7, #14]
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d007      	beq.n	8007a6c <USBD_StdEPReq+0x17e>
 8007a5c:	7bbb      	ldrb	r3, [r7, #14]
 8007a5e:	2b80      	cmp	r3, #128	; 0x80
 8007a60:	d004      	beq.n	8007a6c <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8007a62:	6839      	ldr	r1, [r7, #0]
 8007a64:	6878      	ldr	r0, [r7, #4]
 8007a66:	f000 fbd3 	bl	8008210 <USBD_CtlError>
                break;
 8007a6a:	e091      	b.n	8007b90 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007a6c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	da0b      	bge.n	8007a8c <USBD_StdEPReq+0x19e>
 8007a74:	7bbb      	ldrb	r3, [r7, #14]
 8007a76:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007a7a:	4613      	mov	r3, r2
 8007a7c:	009b      	lsls	r3, r3, #2
 8007a7e:	4413      	add	r3, r2
 8007a80:	009b      	lsls	r3, r3, #2
 8007a82:	3310      	adds	r3, #16
 8007a84:	687a      	ldr	r2, [r7, #4]
 8007a86:	4413      	add	r3, r2
 8007a88:	3304      	adds	r3, #4
 8007a8a:	e00b      	b.n	8007aa4 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007a8c:	7bbb      	ldrb	r3, [r7, #14]
 8007a8e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007a92:	4613      	mov	r3, r2
 8007a94:	009b      	lsls	r3, r3, #2
 8007a96:	4413      	add	r3, r2
 8007a98:	009b      	lsls	r3, r3, #2
 8007a9a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007a9e:	687a      	ldr	r2, [r7, #4]
 8007aa0:	4413      	add	r3, r2
 8007aa2:	3304      	adds	r3, #4
 8007aa4:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007aa6:	68bb      	ldr	r3, [r7, #8]
 8007aa8:	2200      	movs	r2, #0
 8007aaa:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007aac:	68bb      	ldr	r3, [r7, #8]
 8007aae:	2202      	movs	r2, #2
 8007ab0:	4619      	mov	r1, r3
 8007ab2:	6878      	ldr	r0, [r7, #4]
 8007ab4:	f000 fc1d 	bl	80082f2 <USBD_CtlSendData>
              break;
 8007ab8:	e06a      	b.n	8007b90 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007aba:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	da11      	bge.n	8007ae6 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007ac2:	7bbb      	ldrb	r3, [r7, #14]
 8007ac4:	f003 020f 	and.w	r2, r3, #15
 8007ac8:	6879      	ldr	r1, [r7, #4]
 8007aca:	4613      	mov	r3, r2
 8007acc:	009b      	lsls	r3, r3, #2
 8007ace:	4413      	add	r3, r2
 8007ad0:	009b      	lsls	r3, r3, #2
 8007ad2:	440b      	add	r3, r1
 8007ad4:	3324      	adds	r3, #36	; 0x24
 8007ad6:	881b      	ldrh	r3, [r3, #0]
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d117      	bne.n	8007b0c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8007adc:	6839      	ldr	r1, [r7, #0]
 8007ade:	6878      	ldr	r0, [r7, #4]
 8007ae0:	f000 fb96 	bl	8008210 <USBD_CtlError>
                  break;
 8007ae4:	e054      	b.n	8007b90 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007ae6:	7bbb      	ldrb	r3, [r7, #14]
 8007ae8:	f003 020f 	and.w	r2, r3, #15
 8007aec:	6879      	ldr	r1, [r7, #4]
 8007aee:	4613      	mov	r3, r2
 8007af0:	009b      	lsls	r3, r3, #2
 8007af2:	4413      	add	r3, r2
 8007af4:	009b      	lsls	r3, r3, #2
 8007af6:	440b      	add	r3, r1
 8007af8:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007afc:	881b      	ldrh	r3, [r3, #0]
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d104      	bne.n	8007b0c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8007b02:	6839      	ldr	r1, [r7, #0]
 8007b04:	6878      	ldr	r0, [r7, #4]
 8007b06:	f000 fb83 	bl	8008210 <USBD_CtlError>
                  break;
 8007b0a:	e041      	b.n	8007b90 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007b0c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	da0b      	bge.n	8007b2c <USBD_StdEPReq+0x23e>
 8007b14:	7bbb      	ldrb	r3, [r7, #14]
 8007b16:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007b1a:	4613      	mov	r3, r2
 8007b1c:	009b      	lsls	r3, r3, #2
 8007b1e:	4413      	add	r3, r2
 8007b20:	009b      	lsls	r3, r3, #2
 8007b22:	3310      	adds	r3, #16
 8007b24:	687a      	ldr	r2, [r7, #4]
 8007b26:	4413      	add	r3, r2
 8007b28:	3304      	adds	r3, #4
 8007b2a:	e00b      	b.n	8007b44 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007b2c:	7bbb      	ldrb	r3, [r7, #14]
 8007b2e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007b32:	4613      	mov	r3, r2
 8007b34:	009b      	lsls	r3, r3, #2
 8007b36:	4413      	add	r3, r2
 8007b38:	009b      	lsls	r3, r3, #2
 8007b3a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007b3e:	687a      	ldr	r2, [r7, #4]
 8007b40:	4413      	add	r3, r2
 8007b42:	3304      	adds	r3, #4
 8007b44:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007b46:	7bbb      	ldrb	r3, [r7, #14]
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d002      	beq.n	8007b52 <USBD_StdEPReq+0x264>
 8007b4c:	7bbb      	ldrb	r3, [r7, #14]
 8007b4e:	2b80      	cmp	r3, #128	; 0x80
 8007b50:	d103      	bne.n	8007b5a <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8007b52:	68bb      	ldr	r3, [r7, #8]
 8007b54:	2200      	movs	r2, #0
 8007b56:	601a      	str	r2, [r3, #0]
 8007b58:	e00e      	b.n	8007b78 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8007b5a:	7bbb      	ldrb	r3, [r7, #14]
 8007b5c:	4619      	mov	r1, r3
 8007b5e:	6878      	ldr	r0, [r7, #4]
 8007b60:	f001 f97e 	bl	8008e60 <USBD_LL_IsStallEP>
 8007b64:	4603      	mov	r3, r0
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d003      	beq.n	8007b72 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8007b6a:	68bb      	ldr	r3, [r7, #8]
 8007b6c:	2201      	movs	r2, #1
 8007b6e:	601a      	str	r2, [r3, #0]
 8007b70:	e002      	b.n	8007b78 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8007b72:	68bb      	ldr	r3, [r7, #8]
 8007b74:	2200      	movs	r2, #0
 8007b76:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007b78:	68bb      	ldr	r3, [r7, #8]
 8007b7a:	2202      	movs	r2, #2
 8007b7c:	4619      	mov	r1, r3
 8007b7e:	6878      	ldr	r0, [r7, #4]
 8007b80:	f000 fbb7 	bl	80082f2 <USBD_CtlSendData>
              break;
 8007b84:	e004      	b.n	8007b90 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8007b86:	6839      	ldr	r1, [r7, #0]
 8007b88:	6878      	ldr	r0, [r7, #4]
 8007b8a:	f000 fb41 	bl	8008210 <USBD_CtlError>
              break;
 8007b8e:	bf00      	nop
          }
          break;
 8007b90:	e004      	b.n	8007b9c <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8007b92:	6839      	ldr	r1, [r7, #0]
 8007b94:	6878      	ldr	r0, [r7, #4]
 8007b96:	f000 fb3b 	bl	8008210 <USBD_CtlError>
          break;
 8007b9a:	bf00      	nop
      }
      break;
 8007b9c:	e004      	b.n	8007ba8 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8007b9e:	6839      	ldr	r1, [r7, #0]
 8007ba0:	6878      	ldr	r0, [r7, #4]
 8007ba2:	f000 fb35 	bl	8008210 <USBD_CtlError>
      break;
 8007ba6:	bf00      	nop
  }

  return ret;
 8007ba8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007baa:	4618      	mov	r0, r3
 8007bac:	3710      	adds	r7, #16
 8007bae:	46bd      	mov	sp, r7
 8007bb0:	bd80      	pop	{r7, pc}
	...

08007bb4 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007bb4:	b580      	push	{r7, lr}
 8007bb6:	b084      	sub	sp, #16
 8007bb8:	af00      	add	r7, sp, #0
 8007bba:	6078      	str	r0, [r7, #4]
 8007bbc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007bbe:	2300      	movs	r3, #0
 8007bc0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007bc2:	2300      	movs	r3, #0
 8007bc4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007bc6:	2300      	movs	r3, #0
 8007bc8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007bca:	683b      	ldr	r3, [r7, #0]
 8007bcc:	885b      	ldrh	r3, [r3, #2]
 8007bce:	0a1b      	lsrs	r3, r3, #8
 8007bd0:	b29b      	uxth	r3, r3
 8007bd2:	3b01      	subs	r3, #1
 8007bd4:	2b06      	cmp	r3, #6
 8007bd6:	f200 8128 	bhi.w	8007e2a <USBD_GetDescriptor+0x276>
 8007bda:	a201      	add	r2, pc, #4	; (adr r2, 8007be0 <USBD_GetDescriptor+0x2c>)
 8007bdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007be0:	08007bfd 	.word	0x08007bfd
 8007be4:	08007c15 	.word	0x08007c15
 8007be8:	08007c55 	.word	0x08007c55
 8007bec:	08007e2b 	.word	0x08007e2b
 8007bf0:	08007e2b 	.word	0x08007e2b
 8007bf4:	08007dcb 	.word	0x08007dcb
 8007bf8:	08007df7 	.word	0x08007df7
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	687a      	ldr	r2, [r7, #4]
 8007c06:	7c12      	ldrb	r2, [r2, #16]
 8007c08:	f107 0108 	add.w	r1, r7, #8
 8007c0c:	4610      	mov	r0, r2
 8007c0e:	4798      	blx	r3
 8007c10:	60f8      	str	r0, [r7, #12]
      break;
 8007c12:	e112      	b.n	8007e3a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	7c1b      	ldrb	r3, [r3, #16]
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d10d      	bne.n	8007c38 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c24:	f107 0208 	add.w	r2, r7, #8
 8007c28:	4610      	mov	r0, r2
 8007c2a:	4798      	blx	r3
 8007c2c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	3301      	adds	r3, #1
 8007c32:	2202      	movs	r2, #2
 8007c34:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007c36:	e100      	b.n	8007e3a <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c40:	f107 0208 	add.w	r2, r7, #8
 8007c44:	4610      	mov	r0, r2
 8007c46:	4798      	blx	r3
 8007c48:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	3301      	adds	r3, #1
 8007c4e:	2202      	movs	r2, #2
 8007c50:	701a      	strb	r2, [r3, #0]
      break;
 8007c52:	e0f2      	b.n	8007e3a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007c54:	683b      	ldr	r3, [r7, #0]
 8007c56:	885b      	ldrh	r3, [r3, #2]
 8007c58:	b2db      	uxtb	r3, r3
 8007c5a:	2b05      	cmp	r3, #5
 8007c5c:	f200 80ac 	bhi.w	8007db8 <USBD_GetDescriptor+0x204>
 8007c60:	a201      	add	r2, pc, #4	; (adr r2, 8007c68 <USBD_GetDescriptor+0xb4>)
 8007c62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c66:	bf00      	nop
 8007c68:	08007c81 	.word	0x08007c81
 8007c6c:	08007cb5 	.word	0x08007cb5
 8007c70:	08007ce9 	.word	0x08007ce9
 8007c74:	08007d1d 	.word	0x08007d1d
 8007c78:	08007d51 	.word	0x08007d51
 8007c7c:	08007d85 	.word	0x08007d85
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c86:	685b      	ldr	r3, [r3, #4]
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d00b      	beq.n	8007ca4 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c92:	685b      	ldr	r3, [r3, #4]
 8007c94:	687a      	ldr	r2, [r7, #4]
 8007c96:	7c12      	ldrb	r2, [r2, #16]
 8007c98:	f107 0108 	add.w	r1, r7, #8
 8007c9c:	4610      	mov	r0, r2
 8007c9e:	4798      	blx	r3
 8007ca0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007ca2:	e091      	b.n	8007dc8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007ca4:	6839      	ldr	r1, [r7, #0]
 8007ca6:	6878      	ldr	r0, [r7, #4]
 8007ca8:	f000 fab2 	bl	8008210 <USBD_CtlError>
            err++;
 8007cac:	7afb      	ldrb	r3, [r7, #11]
 8007cae:	3301      	adds	r3, #1
 8007cb0:	72fb      	strb	r3, [r7, #11]
          break;
 8007cb2:	e089      	b.n	8007dc8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007cba:	689b      	ldr	r3, [r3, #8]
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d00b      	beq.n	8007cd8 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007cc6:	689b      	ldr	r3, [r3, #8]
 8007cc8:	687a      	ldr	r2, [r7, #4]
 8007cca:	7c12      	ldrb	r2, [r2, #16]
 8007ccc:	f107 0108 	add.w	r1, r7, #8
 8007cd0:	4610      	mov	r0, r2
 8007cd2:	4798      	blx	r3
 8007cd4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007cd6:	e077      	b.n	8007dc8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007cd8:	6839      	ldr	r1, [r7, #0]
 8007cda:	6878      	ldr	r0, [r7, #4]
 8007cdc:	f000 fa98 	bl	8008210 <USBD_CtlError>
            err++;
 8007ce0:	7afb      	ldrb	r3, [r7, #11]
 8007ce2:	3301      	adds	r3, #1
 8007ce4:	72fb      	strb	r3, [r7, #11]
          break;
 8007ce6:	e06f      	b.n	8007dc8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007cee:	68db      	ldr	r3, [r3, #12]
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d00b      	beq.n	8007d0c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007cfa:	68db      	ldr	r3, [r3, #12]
 8007cfc:	687a      	ldr	r2, [r7, #4]
 8007cfe:	7c12      	ldrb	r2, [r2, #16]
 8007d00:	f107 0108 	add.w	r1, r7, #8
 8007d04:	4610      	mov	r0, r2
 8007d06:	4798      	blx	r3
 8007d08:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007d0a:	e05d      	b.n	8007dc8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007d0c:	6839      	ldr	r1, [r7, #0]
 8007d0e:	6878      	ldr	r0, [r7, #4]
 8007d10:	f000 fa7e 	bl	8008210 <USBD_CtlError>
            err++;
 8007d14:	7afb      	ldrb	r3, [r7, #11]
 8007d16:	3301      	adds	r3, #1
 8007d18:	72fb      	strb	r3, [r7, #11]
          break;
 8007d1a:	e055      	b.n	8007dc8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d22:	691b      	ldr	r3, [r3, #16]
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d00b      	beq.n	8007d40 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d2e:	691b      	ldr	r3, [r3, #16]
 8007d30:	687a      	ldr	r2, [r7, #4]
 8007d32:	7c12      	ldrb	r2, [r2, #16]
 8007d34:	f107 0108 	add.w	r1, r7, #8
 8007d38:	4610      	mov	r0, r2
 8007d3a:	4798      	blx	r3
 8007d3c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007d3e:	e043      	b.n	8007dc8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007d40:	6839      	ldr	r1, [r7, #0]
 8007d42:	6878      	ldr	r0, [r7, #4]
 8007d44:	f000 fa64 	bl	8008210 <USBD_CtlError>
            err++;
 8007d48:	7afb      	ldrb	r3, [r7, #11]
 8007d4a:	3301      	adds	r3, #1
 8007d4c:	72fb      	strb	r3, [r7, #11]
          break;
 8007d4e:	e03b      	b.n	8007dc8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d56:	695b      	ldr	r3, [r3, #20]
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d00b      	beq.n	8007d74 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d62:	695b      	ldr	r3, [r3, #20]
 8007d64:	687a      	ldr	r2, [r7, #4]
 8007d66:	7c12      	ldrb	r2, [r2, #16]
 8007d68:	f107 0108 	add.w	r1, r7, #8
 8007d6c:	4610      	mov	r0, r2
 8007d6e:	4798      	blx	r3
 8007d70:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007d72:	e029      	b.n	8007dc8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007d74:	6839      	ldr	r1, [r7, #0]
 8007d76:	6878      	ldr	r0, [r7, #4]
 8007d78:	f000 fa4a 	bl	8008210 <USBD_CtlError>
            err++;
 8007d7c:	7afb      	ldrb	r3, [r7, #11]
 8007d7e:	3301      	adds	r3, #1
 8007d80:	72fb      	strb	r3, [r7, #11]
          break;
 8007d82:	e021      	b.n	8007dc8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d8a:	699b      	ldr	r3, [r3, #24]
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d00b      	beq.n	8007da8 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d96:	699b      	ldr	r3, [r3, #24]
 8007d98:	687a      	ldr	r2, [r7, #4]
 8007d9a:	7c12      	ldrb	r2, [r2, #16]
 8007d9c:	f107 0108 	add.w	r1, r7, #8
 8007da0:	4610      	mov	r0, r2
 8007da2:	4798      	blx	r3
 8007da4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007da6:	e00f      	b.n	8007dc8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007da8:	6839      	ldr	r1, [r7, #0]
 8007daa:	6878      	ldr	r0, [r7, #4]
 8007dac:	f000 fa30 	bl	8008210 <USBD_CtlError>
            err++;
 8007db0:	7afb      	ldrb	r3, [r7, #11]
 8007db2:	3301      	adds	r3, #1
 8007db4:	72fb      	strb	r3, [r7, #11]
          break;
 8007db6:	e007      	b.n	8007dc8 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8007db8:	6839      	ldr	r1, [r7, #0]
 8007dba:	6878      	ldr	r0, [r7, #4]
 8007dbc:	f000 fa28 	bl	8008210 <USBD_CtlError>
          err++;
 8007dc0:	7afb      	ldrb	r3, [r7, #11]
 8007dc2:	3301      	adds	r3, #1
 8007dc4:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8007dc6:	bf00      	nop
      }
      break;
 8007dc8:	e037      	b.n	8007e3a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	7c1b      	ldrb	r3, [r3, #16]
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d109      	bne.n	8007de6 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007dd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007dda:	f107 0208 	add.w	r2, r7, #8
 8007dde:	4610      	mov	r0, r2
 8007de0:	4798      	blx	r3
 8007de2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007de4:	e029      	b.n	8007e3a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007de6:	6839      	ldr	r1, [r7, #0]
 8007de8:	6878      	ldr	r0, [r7, #4]
 8007dea:	f000 fa11 	bl	8008210 <USBD_CtlError>
        err++;
 8007dee:	7afb      	ldrb	r3, [r7, #11]
 8007df0:	3301      	adds	r3, #1
 8007df2:	72fb      	strb	r3, [r7, #11]
      break;
 8007df4:	e021      	b.n	8007e3a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	7c1b      	ldrb	r3, [r3, #16]
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d10d      	bne.n	8007e1a <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e06:	f107 0208 	add.w	r2, r7, #8
 8007e0a:	4610      	mov	r0, r2
 8007e0c:	4798      	blx	r3
 8007e0e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	3301      	adds	r3, #1
 8007e14:	2207      	movs	r2, #7
 8007e16:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007e18:	e00f      	b.n	8007e3a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007e1a:	6839      	ldr	r1, [r7, #0]
 8007e1c:	6878      	ldr	r0, [r7, #4]
 8007e1e:	f000 f9f7 	bl	8008210 <USBD_CtlError>
        err++;
 8007e22:	7afb      	ldrb	r3, [r7, #11]
 8007e24:	3301      	adds	r3, #1
 8007e26:	72fb      	strb	r3, [r7, #11]
      break;
 8007e28:	e007      	b.n	8007e3a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007e2a:	6839      	ldr	r1, [r7, #0]
 8007e2c:	6878      	ldr	r0, [r7, #4]
 8007e2e:	f000 f9ef 	bl	8008210 <USBD_CtlError>
      err++;
 8007e32:	7afb      	ldrb	r3, [r7, #11]
 8007e34:	3301      	adds	r3, #1
 8007e36:	72fb      	strb	r3, [r7, #11]
      break;
 8007e38:	bf00      	nop
  }

  if (err != 0U)
 8007e3a:	7afb      	ldrb	r3, [r7, #11]
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d11e      	bne.n	8007e7e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8007e40:	683b      	ldr	r3, [r7, #0]
 8007e42:	88db      	ldrh	r3, [r3, #6]
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d016      	beq.n	8007e76 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8007e48:	893b      	ldrh	r3, [r7, #8]
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d00e      	beq.n	8007e6c <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8007e4e:	683b      	ldr	r3, [r7, #0]
 8007e50:	88da      	ldrh	r2, [r3, #6]
 8007e52:	893b      	ldrh	r3, [r7, #8]
 8007e54:	4293      	cmp	r3, r2
 8007e56:	bf28      	it	cs
 8007e58:	4613      	movcs	r3, r2
 8007e5a:	b29b      	uxth	r3, r3
 8007e5c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007e5e:	893b      	ldrh	r3, [r7, #8]
 8007e60:	461a      	mov	r2, r3
 8007e62:	68f9      	ldr	r1, [r7, #12]
 8007e64:	6878      	ldr	r0, [r7, #4]
 8007e66:	f000 fa44 	bl	80082f2 <USBD_CtlSendData>
 8007e6a:	e009      	b.n	8007e80 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8007e6c:	6839      	ldr	r1, [r7, #0]
 8007e6e:	6878      	ldr	r0, [r7, #4]
 8007e70:	f000 f9ce 	bl	8008210 <USBD_CtlError>
 8007e74:	e004      	b.n	8007e80 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8007e76:	6878      	ldr	r0, [r7, #4]
 8007e78:	f000 fa95 	bl	80083a6 <USBD_CtlSendStatus>
 8007e7c:	e000      	b.n	8007e80 <USBD_GetDescriptor+0x2cc>
    return;
 8007e7e:	bf00      	nop
  }
}
 8007e80:	3710      	adds	r7, #16
 8007e82:	46bd      	mov	sp, r7
 8007e84:	bd80      	pop	{r7, pc}
 8007e86:	bf00      	nop

08007e88 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007e88:	b580      	push	{r7, lr}
 8007e8a:	b084      	sub	sp, #16
 8007e8c:	af00      	add	r7, sp, #0
 8007e8e:	6078      	str	r0, [r7, #4]
 8007e90:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007e92:	683b      	ldr	r3, [r7, #0]
 8007e94:	889b      	ldrh	r3, [r3, #4]
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d131      	bne.n	8007efe <USBD_SetAddress+0x76>
 8007e9a:	683b      	ldr	r3, [r7, #0]
 8007e9c:	88db      	ldrh	r3, [r3, #6]
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d12d      	bne.n	8007efe <USBD_SetAddress+0x76>
 8007ea2:	683b      	ldr	r3, [r7, #0]
 8007ea4:	885b      	ldrh	r3, [r3, #2]
 8007ea6:	2b7f      	cmp	r3, #127	; 0x7f
 8007ea8:	d829      	bhi.n	8007efe <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007eaa:	683b      	ldr	r3, [r7, #0]
 8007eac:	885b      	ldrh	r3, [r3, #2]
 8007eae:	b2db      	uxtb	r3, r3
 8007eb0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007eb4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ebc:	b2db      	uxtb	r3, r3
 8007ebe:	2b03      	cmp	r3, #3
 8007ec0:	d104      	bne.n	8007ecc <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8007ec2:	6839      	ldr	r1, [r7, #0]
 8007ec4:	6878      	ldr	r0, [r7, #4]
 8007ec6:	f000 f9a3 	bl	8008210 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007eca:	e01d      	b.n	8007f08 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	7bfa      	ldrb	r2, [r7, #15]
 8007ed0:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007ed4:	7bfb      	ldrb	r3, [r7, #15]
 8007ed6:	4619      	mov	r1, r3
 8007ed8:	6878      	ldr	r0, [r7, #4]
 8007eda:	f000 ffed 	bl	8008eb8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8007ede:	6878      	ldr	r0, [r7, #4]
 8007ee0:	f000 fa61 	bl	80083a6 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007ee4:	7bfb      	ldrb	r3, [r7, #15]
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d004      	beq.n	8007ef4 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	2202      	movs	r2, #2
 8007eee:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ef2:	e009      	b.n	8007f08 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	2201      	movs	r2, #1
 8007ef8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007efc:	e004      	b.n	8007f08 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007efe:	6839      	ldr	r1, [r7, #0]
 8007f00:	6878      	ldr	r0, [r7, #4]
 8007f02:	f000 f985 	bl	8008210 <USBD_CtlError>
  }
}
 8007f06:	bf00      	nop
 8007f08:	bf00      	nop
 8007f0a:	3710      	adds	r7, #16
 8007f0c:	46bd      	mov	sp, r7
 8007f0e:	bd80      	pop	{r7, pc}

08007f10 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007f10:	b580      	push	{r7, lr}
 8007f12:	b084      	sub	sp, #16
 8007f14:	af00      	add	r7, sp, #0
 8007f16:	6078      	str	r0, [r7, #4]
 8007f18:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007f1a:	2300      	movs	r3, #0
 8007f1c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007f1e:	683b      	ldr	r3, [r7, #0]
 8007f20:	885b      	ldrh	r3, [r3, #2]
 8007f22:	b2da      	uxtb	r2, r3
 8007f24:	4b4c      	ldr	r3, [pc, #304]	; (8008058 <USBD_SetConfig+0x148>)
 8007f26:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007f28:	4b4b      	ldr	r3, [pc, #300]	; (8008058 <USBD_SetConfig+0x148>)
 8007f2a:	781b      	ldrb	r3, [r3, #0]
 8007f2c:	2b01      	cmp	r3, #1
 8007f2e:	d905      	bls.n	8007f3c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007f30:	6839      	ldr	r1, [r7, #0]
 8007f32:	6878      	ldr	r0, [r7, #4]
 8007f34:	f000 f96c 	bl	8008210 <USBD_CtlError>
    return USBD_FAIL;
 8007f38:	2303      	movs	r3, #3
 8007f3a:	e088      	b.n	800804e <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f42:	b2db      	uxtb	r3, r3
 8007f44:	2b02      	cmp	r3, #2
 8007f46:	d002      	beq.n	8007f4e <USBD_SetConfig+0x3e>
 8007f48:	2b03      	cmp	r3, #3
 8007f4a:	d025      	beq.n	8007f98 <USBD_SetConfig+0x88>
 8007f4c:	e071      	b.n	8008032 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8007f4e:	4b42      	ldr	r3, [pc, #264]	; (8008058 <USBD_SetConfig+0x148>)
 8007f50:	781b      	ldrb	r3, [r3, #0]
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d01c      	beq.n	8007f90 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8007f56:	4b40      	ldr	r3, [pc, #256]	; (8008058 <USBD_SetConfig+0x148>)
 8007f58:	781b      	ldrb	r3, [r3, #0]
 8007f5a:	461a      	mov	r2, r3
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007f60:	4b3d      	ldr	r3, [pc, #244]	; (8008058 <USBD_SetConfig+0x148>)
 8007f62:	781b      	ldrb	r3, [r3, #0]
 8007f64:	4619      	mov	r1, r3
 8007f66:	6878      	ldr	r0, [r7, #4]
 8007f68:	f7ff f948 	bl	80071fc <USBD_SetClassConfig>
 8007f6c:	4603      	mov	r3, r0
 8007f6e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8007f70:	7bfb      	ldrb	r3, [r7, #15]
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d004      	beq.n	8007f80 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8007f76:	6839      	ldr	r1, [r7, #0]
 8007f78:	6878      	ldr	r0, [r7, #4]
 8007f7a:	f000 f949 	bl	8008210 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007f7e:	e065      	b.n	800804c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8007f80:	6878      	ldr	r0, [r7, #4]
 8007f82:	f000 fa10 	bl	80083a6 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	2203      	movs	r2, #3
 8007f8a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007f8e:	e05d      	b.n	800804c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8007f90:	6878      	ldr	r0, [r7, #4]
 8007f92:	f000 fa08 	bl	80083a6 <USBD_CtlSendStatus>
      break;
 8007f96:	e059      	b.n	800804c <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8007f98:	4b2f      	ldr	r3, [pc, #188]	; (8008058 <USBD_SetConfig+0x148>)
 8007f9a:	781b      	ldrb	r3, [r3, #0]
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d112      	bne.n	8007fc6 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	2202      	movs	r2, #2
 8007fa4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8007fa8:	4b2b      	ldr	r3, [pc, #172]	; (8008058 <USBD_SetConfig+0x148>)
 8007faa:	781b      	ldrb	r3, [r3, #0]
 8007fac:	461a      	mov	r2, r3
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007fb2:	4b29      	ldr	r3, [pc, #164]	; (8008058 <USBD_SetConfig+0x148>)
 8007fb4:	781b      	ldrb	r3, [r3, #0]
 8007fb6:	4619      	mov	r1, r3
 8007fb8:	6878      	ldr	r0, [r7, #4]
 8007fba:	f7ff f93b 	bl	8007234 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8007fbe:	6878      	ldr	r0, [r7, #4]
 8007fc0:	f000 f9f1 	bl	80083a6 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007fc4:	e042      	b.n	800804c <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8007fc6:	4b24      	ldr	r3, [pc, #144]	; (8008058 <USBD_SetConfig+0x148>)
 8007fc8:	781b      	ldrb	r3, [r3, #0]
 8007fca:	461a      	mov	r2, r3
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	685b      	ldr	r3, [r3, #4]
 8007fd0:	429a      	cmp	r2, r3
 8007fd2:	d02a      	beq.n	800802a <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	685b      	ldr	r3, [r3, #4]
 8007fd8:	b2db      	uxtb	r3, r3
 8007fda:	4619      	mov	r1, r3
 8007fdc:	6878      	ldr	r0, [r7, #4]
 8007fde:	f7ff f929 	bl	8007234 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8007fe2:	4b1d      	ldr	r3, [pc, #116]	; (8008058 <USBD_SetConfig+0x148>)
 8007fe4:	781b      	ldrb	r3, [r3, #0]
 8007fe6:	461a      	mov	r2, r3
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007fec:	4b1a      	ldr	r3, [pc, #104]	; (8008058 <USBD_SetConfig+0x148>)
 8007fee:	781b      	ldrb	r3, [r3, #0]
 8007ff0:	4619      	mov	r1, r3
 8007ff2:	6878      	ldr	r0, [r7, #4]
 8007ff4:	f7ff f902 	bl	80071fc <USBD_SetClassConfig>
 8007ff8:	4603      	mov	r3, r0
 8007ffa:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8007ffc:	7bfb      	ldrb	r3, [r7, #15]
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d00f      	beq.n	8008022 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8008002:	6839      	ldr	r1, [r7, #0]
 8008004:	6878      	ldr	r0, [r7, #4]
 8008006:	f000 f903 	bl	8008210 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	685b      	ldr	r3, [r3, #4]
 800800e:	b2db      	uxtb	r3, r3
 8008010:	4619      	mov	r1, r3
 8008012:	6878      	ldr	r0, [r7, #4]
 8008014:	f7ff f90e 	bl	8007234 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	2202      	movs	r2, #2
 800801c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008020:	e014      	b.n	800804c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8008022:	6878      	ldr	r0, [r7, #4]
 8008024:	f000 f9bf 	bl	80083a6 <USBD_CtlSendStatus>
      break;
 8008028:	e010      	b.n	800804c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800802a:	6878      	ldr	r0, [r7, #4]
 800802c:	f000 f9bb 	bl	80083a6 <USBD_CtlSendStatus>
      break;
 8008030:	e00c      	b.n	800804c <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8008032:	6839      	ldr	r1, [r7, #0]
 8008034:	6878      	ldr	r0, [r7, #4]
 8008036:	f000 f8eb 	bl	8008210 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800803a:	4b07      	ldr	r3, [pc, #28]	; (8008058 <USBD_SetConfig+0x148>)
 800803c:	781b      	ldrb	r3, [r3, #0]
 800803e:	4619      	mov	r1, r3
 8008040:	6878      	ldr	r0, [r7, #4]
 8008042:	f7ff f8f7 	bl	8007234 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8008046:	2303      	movs	r3, #3
 8008048:	73fb      	strb	r3, [r7, #15]
      break;
 800804a:	bf00      	nop
  }

  return ret;
 800804c:	7bfb      	ldrb	r3, [r7, #15]
}
 800804e:	4618      	mov	r0, r3
 8008050:	3710      	adds	r7, #16
 8008052:	46bd      	mov	sp, r7
 8008054:	bd80      	pop	{r7, pc}
 8008056:	bf00      	nop
 8008058:	20000420 	.word	0x20000420

0800805c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800805c:	b580      	push	{r7, lr}
 800805e:	b082      	sub	sp, #8
 8008060:	af00      	add	r7, sp, #0
 8008062:	6078      	str	r0, [r7, #4]
 8008064:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008066:	683b      	ldr	r3, [r7, #0]
 8008068:	88db      	ldrh	r3, [r3, #6]
 800806a:	2b01      	cmp	r3, #1
 800806c:	d004      	beq.n	8008078 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800806e:	6839      	ldr	r1, [r7, #0]
 8008070:	6878      	ldr	r0, [r7, #4]
 8008072:	f000 f8cd 	bl	8008210 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008076:	e023      	b.n	80080c0 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800807e:	b2db      	uxtb	r3, r3
 8008080:	2b02      	cmp	r3, #2
 8008082:	dc02      	bgt.n	800808a <USBD_GetConfig+0x2e>
 8008084:	2b00      	cmp	r3, #0
 8008086:	dc03      	bgt.n	8008090 <USBD_GetConfig+0x34>
 8008088:	e015      	b.n	80080b6 <USBD_GetConfig+0x5a>
 800808a:	2b03      	cmp	r3, #3
 800808c:	d00b      	beq.n	80080a6 <USBD_GetConfig+0x4a>
 800808e:	e012      	b.n	80080b6 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	2200      	movs	r2, #0
 8008094:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	3308      	adds	r3, #8
 800809a:	2201      	movs	r2, #1
 800809c:	4619      	mov	r1, r3
 800809e:	6878      	ldr	r0, [r7, #4]
 80080a0:	f000 f927 	bl	80082f2 <USBD_CtlSendData>
        break;
 80080a4:	e00c      	b.n	80080c0 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	3304      	adds	r3, #4
 80080aa:	2201      	movs	r2, #1
 80080ac:	4619      	mov	r1, r3
 80080ae:	6878      	ldr	r0, [r7, #4]
 80080b0:	f000 f91f 	bl	80082f2 <USBD_CtlSendData>
        break;
 80080b4:	e004      	b.n	80080c0 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80080b6:	6839      	ldr	r1, [r7, #0]
 80080b8:	6878      	ldr	r0, [r7, #4]
 80080ba:	f000 f8a9 	bl	8008210 <USBD_CtlError>
        break;
 80080be:	bf00      	nop
}
 80080c0:	bf00      	nop
 80080c2:	3708      	adds	r7, #8
 80080c4:	46bd      	mov	sp, r7
 80080c6:	bd80      	pop	{r7, pc}

080080c8 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80080c8:	b580      	push	{r7, lr}
 80080ca:	b082      	sub	sp, #8
 80080cc:	af00      	add	r7, sp, #0
 80080ce:	6078      	str	r0, [r7, #4]
 80080d0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80080d8:	b2db      	uxtb	r3, r3
 80080da:	3b01      	subs	r3, #1
 80080dc:	2b02      	cmp	r3, #2
 80080de:	d81e      	bhi.n	800811e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80080e0:	683b      	ldr	r3, [r7, #0]
 80080e2:	88db      	ldrh	r3, [r3, #6]
 80080e4:	2b02      	cmp	r3, #2
 80080e6:	d004      	beq.n	80080f2 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80080e8:	6839      	ldr	r1, [r7, #0]
 80080ea:	6878      	ldr	r0, [r7, #4]
 80080ec:	f000 f890 	bl	8008210 <USBD_CtlError>
        break;
 80080f0:	e01a      	b.n	8008128 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	2201      	movs	r2, #1
 80080f6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d005      	beq.n	800810e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	68db      	ldr	r3, [r3, #12]
 8008106:	f043 0202 	orr.w	r2, r3, #2
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	330c      	adds	r3, #12
 8008112:	2202      	movs	r2, #2
 8008114:	4619      	mov	r1, r3
 8008116:	6878      	ldr	r0, [r7, #4]
 8008118:	f000 f8eb 	bl	80082f2 <USBD_CtlSendData>
      break;
 800811c:	e004      	b.n	8008128 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800811e:	6839      	ldr	r1, [r7, #0]
 8008120:	6878      	ldr	r0, [r7, #4]
 8008122:	f000 f875 	bl	8008210 <USBD_CtlError>
      break;
 8008126:	bf00      	nop
  }
}
 8008128:	bf00      	nop
 800812a:	3708      	adds	r7, #8
 800812c:	46bd      	mov	sp, r7
 800812e:	bd80      	pop	{r7, pc}

08008130 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008130:	b580      	push	{r7, lr}
 8008132:	b082      	sub	sp, #8
 8008134:	af00      	add	r7, sp, #0
 8008136:	6078      	str	r0, [r7, #4]
 8008138:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800813a:	683b      	ldr	r3, [r7, #0]
 800813c:	885b      	ldrh	r3, [r3, #2]
 800813e:	2b01      	cmp	r3, #1
 8008140:	d106      	bne.n	8008150 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	2201      	movs	r2, #1
 8008146:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800814a:	6878      	ldr	r0, [r7, #4]
 800814c:	f000 f92b 	bl	80083a6 <USBD_CtlSendStatus>
  }
}
 8008150:	bf00      	nop
 8008152:	3708      	adds	r7, #8
 8008154:	46bd      	mov	sp, r7
 8008156:	bd80      	pop	{r7, pc}

08008158 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008158:	b580      	push	{r7, lr}
 800815a:	b082      	sub	sp, #8
 800815c:	af00      	add	r7, sp, #0
 800815e:	6078      	str	r0, [r7, #4]
 8008160:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008168:	b2db      	uxtb	r3, r3
 800816a:	3b01      	subs	r3, #1
 800816c:	2b02      	cmp	r3, #2
 800816e:	d80b      	bhi.n	8008188 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008170:	683b      	ldr	r3, [r7, #0]
 8008172:	885b      	ldrh	r3, [r3, #2]
 8008174:	2b01      	cmp	r3, #1
 8008176:	d10c      	bne.n	8008192 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	2200      	movs	r2, #0
 800817c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8008180:	6878      	ldr	r0, [r7, #4]
 8008182:	f000 f910 	bl	80083a6 <USBD_CtlSendStatus>
      }
      break;
 8008186:	e004      	b.n	8008192 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8008188:	6839      	ldr	r1, [r7, #0]
 800818a:	6878      	ldr	r0, [r7, #4]
 800818c:	f000 f840 	bl	8008210 <USBD_CtlError>
      break;
 8008190:	e000      	b.n	8008194 <USBD_ClrFeature+0x3c>
      break;
 8008192:	bf00      	nop
  }
}
 8008194:	bf00      	nop
 8008196:	3708      	adds	r7, #8
 8008198:	46bd      	mov	sp, r7
 800819a:	bd80      	pop	{r7, pc}

0800819c <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800819c:	b580      	push	{r7, lr}
 800819e:	b084      	sub	sp, #16
 80081a0:	af00      	add	r7, sp, #0
 80081a2:	6078      	str	r0, [r7, #4]
 80081a4:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80081a6:	683b      	ldr	r3, [r7, #0]
 80081a8:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	781a      	ldrb	r2, [r3, #0]
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	3301      	adds	r3, #1
 80081b6:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	781a      	ldrb	r2, [r3, #0]
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	3301      	adds	r3, #1
 80081c4:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80081c6:	68f8      	ldr	r0, [r7, #12]
 80081c8:	f7ff fabb 	bl	8007742 <SWAPBYTE>
 80081cc:	4603      	mov	r3, r0
 80081ce:	461a      	mov	r2, r3
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	3301      	adds	r3, #1
 80081d8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	3301      	adds	r3, #1
 80081de:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80081e0:	68f8      	ldr	r0, [r7, #12]
 80081e2:	f7ff faae 	bl	8007742 <SWAPBYTE>
 80081e6:	4603      	mov	r3, r0
 80081e8:	461a      	mov	r2, r3
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	3301      	adds	r3, #1
 80081f2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	3301      	adds	r3, #1
 80081f8:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80081fa:	68f8      	ldr	r0, [r7, #12]
 80081fc:	f7ff faa1 	bl	8007742 <SWAPBYTE>
 8008200:	4603      	mov	r3, r0
 8008202:	461a      	mov	r2, r3
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	80da      	strh	r2, [r3, #6]
}
 8008208:	bf00      	nop
 800820a:	3710      	adds	r7, #16
 800820c:	46bd      	mov	sp, r7
 800820e:	bd80      	pop	{r7, pc}

08008210 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008210:	b580      	push	{r7, lr}
 8008212:	b082      	sub	sp, #8
 8008214:	af00      	add	r7, sp, #0
 8008216:	6078      	str	r0, [r7, #4]
 8008218:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800821a:	2180      	movs	r1, #128	; 0x80
 800821c:	6878      	ldr	r0, [r7, #4]
 800821e:	f000 fde1 	bl	8008de4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008222:	2100      	movs	r1, #0
 8008224:	6878      	ldr	r0, [r7, #4]
 8008226:	f000 fddd 	bl	8008de4 <USBD_LL_StallEP>
}
 800822a:	bf00      	nop
 800822c:	3708      	adds	r7, #8
 800822e:	46bd      	mov	sp, r7
 8008230:	bd80      	pop	{r7, pc}

08008232 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008232:	b580      	push	{r7, lr}
 8008234:	b086      	sub	sp, #24
 8008236:	af00      	add	r7, sp, #0
 8008238:	60f8      	str	r0, [r7, #12]
 800823a:	60b9      	str	r1, [r7, #8]
 800823c:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800823e:	2300      	movs	r3, #0
 8008240:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	2b00      	cmp	r3, #0
 8008246:	d036      	beq.n	80082b6 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800824c:	6938      	ldr	r0, [r7, #16]
 800824e:	f000 f836 	bl	80082be <USBD_GetLen>
 8008252:	4603      	mov	r3, r0
 8008254:	3301      	adds	r3, #1
 8008256:	b29b      	uxth	r3, r3
 8008258:	005b      	lsls	r3, r3, #1
 800825a:	b29a      	uxth	r2, r3
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008260:	7dfb      	ldrb	r3, [r7, #23]
 8008262:	68ba      	ldr	r2, [r7, #8]
 8008264:	4413      	add	r3, r2
 8008266:	687a      	ldr	r2, [r7, #4]
 8008268:	7812      	ldrb	r2, [r2, #0]
 800826a:	701a      	strb	r2, [r3, #0]
  idx++;
 800826c:	7dfb      	ldrb	r3, [r7, #23]
 800826e:	3301      	adds	r3, #1
 8008270:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008272:	7dfb      	ldrb	r3, [r7, #23]
 8008274:	68ba      	ldr	r2, [r7, #8]
 8008276:	4413      	add	r3, r2
 8008278:	2203      	movs	r2, #3
 800827a:	701a      	strb	r2, [r3, #0]
  idx++;
 800827c:	7dfb      	ldrb	r3, [r7, #23]
 800827e:	3301      	adds	r3, #1
 8008280:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008282:	e013      	b.n	80082ac <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8008284:	7dfb      	ldrb	r3, [r7, #23]
 8008286:	68ba      	ldr	r2, [r7, #8]
 8008288:	4413      	add	r3, r2
 800828a:	693a      	ldr	r2, [r7, #16]
 800828c:	7812      	ldrb	r2, [r2, #0]
 800828e:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8008290:	693b      	ldr	r3, [r7, #16]
 8008292:	3301      	adds	r3, #1
 8008294:	613b      	str	r3, [r7, #16]
    idx++;
 8008296:	7dfb      	ldrb	r3, [r7, #23]
 8008298:	3301      	adds	r3, #1
 800829a:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800829c:	7dfb      	ldrb	r3, [r7, #23]
 800829e:	68ba      	ldr	r2, [r7, #8]
 80082a0:	4413      	add	r3, r2
 80082a2:	2200      	movs	r2, #0
 80082a4:	701a      	strb	r2, [r3, #0]
    idx++;
 80082a6:	7dfb      	ldrb	r3, [r7, #23]
 80082a8:	3301      	adds	r3, #1
 80082aa:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80082ac:	693b      	ldr	r3, [r7, #16]
 80082ae:	781b      	ldrb	r3, [r3, #0]
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d1e7      	bne.n	8008284 <USBD_GetString+0x52>
 80082b4:	e000      	b.n	80082b8 <USBD_GetString+0x86>
    return;
 80082b6:	bf00      	nop
  }
}
 80082b8:	3718      	adds	r7, #24
 80082ba:	46bd      	mov	sp, r7
 80082bc:	bd80      	pop	{r7, pc}

080082be <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80082be:	b480      	push	{r7}
 80082c0:	b085      	sub	sp, #20
 80082c2:	af00      	add	r7, sp, #0
 80082c4:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80082c6:	2300      	movs	r3, #0
 80082c8:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80082ce:	e005      	b.n	80082dc <USBD_GetLen+0x1e>
  {
    len++;
 80082d0:	7bfb      	ldrb	r3, [r7, #15]
 80082d2:	3301      	adds	r3, #1
 80082d4:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80082d6:	68bb      	ldr	r3, [r7, #8]
 80082d8:	3301      	adds	r3, #1
 80082da:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80082dc:	68bb      	ldr	r3, [r7, #8]
 80082de:	781b      	ldrb	r3, [r3, #0]
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d1f5      	bne.n	80082d0 <USBD_GetLen+0x12>
  }

  return len;
 80082e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80082e6:	4618      	mov	r0, r3
 80082e8:	3714      	adds	r7, #20
 80082ea:	46bd      	mov	sp, r7
 80082ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082f0:	4770      	bx	lr

080082f2 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80082f2:	b580      	push	{r7, lr}
 80082f4:	b084      	sub	sp, #16
 80082f6:	af00      	add	r7, sp, #0
 80082f8:	60f8      	str	r0, [r7, #12]
 80082fa:	60b9      	str	r1, [r7, #8]
 80082fc:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	2202      	movs	r2, #2
 8008302:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	687a      	ldr	r2, [r7, #4]
 800830a:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	687a      	ldr	r2, [r7, #4]
 8008310:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	68ba      	ldr	r2, [r7, #8]
 8008316:	2100      	movs	r1, #0
 8008318:	68f8      	ldr	r0, [r7, #12]
 800831a:	f000 fdec 	bl	8008ef6 <USBD_LL_Transmit>

  return USBD_OK;
 800831e:	2300      	movs	r3, #0
}
 8008320:	4618      	mov	r0, r3
 8008322:	3710      	adds	r7, #16
 8008324:	46bd      	mov	sp, r7
 8008326:	bd80      	pop	{r7, pc}

08008328 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008328:	b580      	push	{r7, lr}
 800832a:	b084      	sub	sp, #16
 800832c:	af00      	add	r7, sp, #0
 800832e:	60f8      	str	r0, [r7, #12]
 8008330:	60b9      	str	r1, [r7, #8]
 8008332:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	68ba      	ldr	r2, [r7, #8]
 8008338:	2100      	movs	r1, #0
 800833a:	68f8      	ldr	r0, [r7, #12]
 800833c:	f000 fddb 	bl	8008ef6 <USBD_LL_Transmit>

  return USBD_OK;
 8008340:	2300      	movs	r3, #0
}
 8008342:	4618      	mov	r0, r3
 8008344:	3710      	adds	r7, #16
 8008346:	46bd      	mov	sp, r7
 8008348:	bd80      	pop	{r7, pc}

0800834a <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800834a:	b580      	push	{r7, lr}
 800834c:	b084      	sub	sp, #16
 800834e:	af00      	add	r7, sp, #0
 8008350:	60f8      	str	r0, [r7, #12]
 8008352:	60b9      	str	r1, [r7, #8]
 8008354:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	2203      	movs	r2, #3
 800835a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	687a      	ldr	r2, [r7, #4]
 8008362:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	687a      	ldr	r2, [r7, #4]
 800836a:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	68ba      	ldr	r2, [r7, #8]
 8008372:	2100      	movs	r1, #0
 8008374:	68f8      	ldr	r0, [r7, #12]
 8008376:	f000 fddf 	bl	8008f38 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800837a:	2300      	movs	r3, #0
}
 800837c:	4618      	mov	r0, r3
 800837e:	3710      	adds	r7, #16
 8008380:	46bd      	mov	sp, r7
 8008382:	bd80      	pop	{r7, pc}

08008384 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8008384:	b580      	push	{r7, lr}
 8008386:	b084      	sub	sp, #16
 8008388:	af00      	add	r7, sp, #0
 800838a:	60f8      	str	r0, [r7, #12]
 800838c:	60b9      	str	r1, [r7, #8]
 800838e:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	68ba      	ldr	r2, [r7, #8]
 8008394:	2100      	movs	r1, #0
 8008396:	68f8      	ldr	r0, [r7, #12]
 8008398:	f000 fdce 	bl	8008f38 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800839c:	2300      	movs	r3, #0
}
 800839e:	4618      	mov	r0, r3
 80083a0:	3710      	adds	r7, #16
 80083a2:	46bd      	mov	sp, r7
 80083a4:	bd80      	pop	{r7, pc}

080083a6 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80083a6:	b580      	push	{r7, lr}
 80083a8:	b082      	sub	sp, #8
 80083aa:	af00      	add	r7, sp, #0
 80083ac:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	2204      	movs	r2, #4
 80083b2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80083b6:	2300      	movs	r3, #0
 80083b8:	2200      	movs	r2, #0
 80083ba:	2100      	movs	r1, #0
 80083bc:	6878      	ldr	r0, [r7, #4]
 80083be:	f000 fd9a 	bl	8008ef6 <USBD_LL_Transmit>

  return USBD_OK;
 80083c2:	2300      	movs	r3, #0
}
 80083c4:	4618      	mov	r0, r3
 80083c6:	3708      	adds	r7, #8
 80083c8:	46bd      	mov	sp, r7
 80083ca:	bd80      	pop	{r7, pc}

080083cc <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80083cc:	b580      	push	{r7, lr}
 80083ce:	b082      	sub	sp, #8
 80083d0:	af00      	add	r7, sp, #0
 80083d2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	2205      	movs	r2, #5
 80083d8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80083dc:	2300      	movs	r3, #0
 80083de:	2200      	movs	r2, #0
 80083e0:	2100      	movs	r1, #0
 80083e2:	6878      	ldr	r0, [r7, #4]
 80083e4:	f000 fda8 	bl	8008f38 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80083e8:	2300      	movs	r3, #0
}
 80083ea:	4618      	mov	r0, r3
 80083ec:	3708      	adds	r7, #8
 80083ee:	46bd      	mov	sp, r7
 80083f0:	bd80      	pop	{r7, pc}
	...

080083f4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80083f4:	b580      	push	{r7, lr}
 80083f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80083f8:	2200      	movs	r2, #0
 80083fa:	4912      	ldr	r1, [pc, #72]	; (8008444 <MX_USB_DEVICE_Init+0x50>)
 80083fc:	4812      	ldr	r0, [pc, #72]	; (8008448 <MX_USB_DEVICE_Init+0x54>)
 80083fe:	f7fe fe8f 	bl	8007120 <USBD_Init>
 8008402:	4603      	mov	r3, r0
 8008404:	2b00      	cmp	r3, #0
 8008406:	d001      	beq.n	800840c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008408:	f7f8 f9ba 	bl	8000780 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800840c:	490f      	ldr	r1, [pc, #60]	; (800844c <MX_USB_DEVICE_Init+0x58>)
 800840e:	480e      	ldr	r0, [pc, #56]	; (8008448 <MX_USB_DEVICE_Init+0x54>)
 8008410:	f7fe feb6 	bl	8007180 <USBD_RegisterClass>
 8008414:	4603      	mov	r3, r0
 8008416:	2b00      	cmp	r3, #0
 8008418:	d001      	beq.n	800841e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800841a:	f7f8 f9b1 	bl	8000780 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800841e:	490c      	ldr	r1, [pc, #48]	; (8008450 <MX_USB_DEVICE_Init+0x5c>)
 8008420:	4809      	ldr	r0, [pc, #36]	; (8008448 <MX_USB_DEVICE_Init+0x54>)
 8008422:	f7fe fdd7 	bl	8006fd4 <USBD_CDC_RegisterInterface>
 8008426:	4603      	mov	r3, r0
 8008428:	2b00      	cmp	r3, #0
 800842a:	d001      	beq.n	8008430 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800842c:	f7f8 f9a8 	bl	8000780 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008430:	4805      	ldr	r0, [pc, #20]	; (8008448 <MX_USB_DEVICE_Init+0x54>)
 8008432:	f7fe fecc 	bl	80071ce <USBD_Start>
 8008436:	4603      	mov	r3, r0
 8008438:	2b00      	cmp	r3, #0
 800843a:	d001      	beq.n	8008440 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800843c:	f7f8 f9a0 	bl	8000780 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008440:	bf00      	nop
 8008442:	bd80      	pop	{r7, pc}
 8008444:	20000158 	.word	0x20000158
 8008448:	20000424 	.word	0x20000424
 800844c:	2000003c 	.word	0x2000003c
 8008450:	20000144 	.word	0x20000144

08008454 <cdcAvailable>:
uint32_t rx_out;			//read buffer
uint32_t rx_len=256;
uint8_t rx_buf[256];

uint32_t cdcAvailable(void)
{
 8008454:	b480      	push	{r7}
 8008456:	b083      	sub	sp, #12
 8008458:	af00      	add	r7, sp, #0
	uint32_t ret;

	ret = (rx_in - rx_out) % rx_len;
 800845a:	4b0a      	ldr	r3, [pc, #40]	; (8008484 <cdcAvailable+0x30>)
 800845c:	681a      	ldr	r2, [r3, #0]
 800845e:	4b0a      	ldr	r3, [pc, #40]	; (8008488 <cdcAvailable+0x34>)
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	1ad3      	subs	r3, r2, r3
 8008464:	4a09      	ldr	r2, [pc, #36]	; (800848c <cdcAvailable+0x38>)
 8008466:	6812      	ldr	r2, [r2, #0]
 8008468:	fbb3 f1f2 	udiv	r1, r3, r2
 800846c:	fb01 f202 	mul.w	r2, r1, r2
 8008470:	1a9b      	subs	r3, r3, r2
 8008472:	607b      	str	r3, [r7, #4]

	return ret;
 8008474:	687b      	ldr	r3, [r7, #4]
}
 8008476:	4618      	mov	r0, r3
 8008478:	370c      	adds	r7, #12
 800847a:	46bd      	mov	sp, r7
 800847c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008480:	4770      	bx	lr
 8008482:	bf00      	nop
 8008484:	200006fc 	.word	0x200006fc
 8008488:	20000700 	.word	0x20000700
 800848c:	20000140 	.word	0x20000140

08008490 <cdcRead>:

uint8_t cdcRead(void)
{
 8008490:	b480      	push	{r7}
 8008492:	b083      	sub	sp, #12
 8008494:	af00      	add	r7, sp, #0
	uint8_t ret;
	ret = rx_buf[rx_out];
 8008496:	4b0f      	ldr	r3, [pc, #60]	; (80084d4 <cdcRead+0x44>)
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	4a0f      	ldr	r2, [pc, #60]	; (80084d8 <cdcRead+0x48>)
 800849c:	5cd3      	ldrb	r3, [r2, r3]
 800849e:	71fb      	strb	r3, [r7, #7]

	if(rx_out != rx_in)
 80084a0:	4b0c      	ldr	r3, [pc, #48]	; (80084d4 <cdcRead+0x44>)
 80084a2:	681a      	ldr	r2, [r3, #0]
 80084a4:	4b0d      	ldr	r3, [pc, #52]	; (80084dc <cdcRead+0x4c>)
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	429a      	cmp	r2, r3
 80084aa:	d00b      	beq.n	80084c4 <cdcRead+0x34>
	{
		rx_out = (rx_out + 1) % rx_len;
 80084ac:	4b09      	ldr	r3, [pc, #36]	; (80084d4 <cdcRead+0x44>)
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	3301      	adds	r3, #1
 80084b2:	4a0b      	ldr	r2, [pc, #44]	; (80084e0 <cdcRead+0x50>)
 80084b4:	6812      	ldr	r2, [r2, #0]
 80084b6:	fbb3 f1f2 	udiv	r1, r3, r2
 80084ba:	fb01 f202 	mul.w	r2, r1, r2
 80084be:	1a9b      	subs	r3, r3, r2
 80084c0:	4a04      	ldr	r2, [pc, #16]	; (80084d4 <cdcRead+0x44>)
 80084c2:	6013      	str	r3, [r2, #0]
	}
	return ret;
 80084c4:	79fb      	ldrb	r3, [r7, #7]
}
 80084c6:	4618      	mov	r0, r3
 80084c8:	370c      	adds	r7, #12
 80084ca:	46bd      	mov	sp, r7
 80084cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084d0:	4770      	bx	lr
 80084d2:	bf00      	nop
 80084d4:	20000700 	.word	0x20000700
 80084d8:	20000704 	.word	0x20000704
 80084dc:	200006fc 	.word	0x200006fc
 80084e0:	20000140 	.word	0x20000140

080084e4 <cdcDataIn>:

void cdcDataIn(uint8_t rx_data)
{
 80084e4:	b480      	push	{r7}
 80084e6:	b085      	sub	sp, #20
 80084e8:	af00      	add	r7, sp, #0
 80084ea:	4603      	mov	r3, r0
 80084ec:	71fb      	strb	r3, [r7, #7]
	uint32_t next_rx_in;
	next_rx_in = (rx_in + 1) % rx_len;
 80084ee:	4b0f      	ldr	r3, [pc, #60]	; (800852c <cdcDataIn+0x48>)
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	3301      	adds	r3, #1
 80084f4:	4a0e      	ldr	r2, [pc, #56]	; (8008530 <cdcDataIn+0x4c>)
 80084f6:	6812      	ldr	r2, [r2, #0]
 80084f8:	fbb3 f1f2 	udiv	r1, r3, r2
 80084fc:	fb01 f202 	mul.w	r2, r1, r2
 8008500:	1a9b      	subs	r3, r3, r2
 8008502:	60fb      	str	r3, [r7, #12]
	rx_buf[rx_in] = rx_data;
 8008504:	4b09      	ldr	r3, [pc, #36]	; (800852c <cdcDataIn+0x48>)
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	490a      	ldr	r1, [pc, #40]	; (8008534 <cdcDataIn+0x50>)
 800850a:	79fa      	ldrb	r2, [r7, #7]
 800850c:	54ca      	strb	r2, [r1, r3]
	if(next_rx_in != rx_out)
 800850e:	4b0a      	ldr	r3, [pc, #40]	; (8008538 <cdcDataIn+0x54>)
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	68fa      	ldr	r2, [r7, #12]
 8008514:	429a      	cmp	r2, r3
 8008516:	d002      	beq.n	800851e <cdcDataIn+0x3a>
	{
		rx_in = next_rx_in;
 8008518:	4a04      	ldr	r2, [pc, #16]	; (800852c <cdcDataIn+0x48>)
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	6013      	str	r3, [r2, #0]
	}
}
 800851e:	bf00      	nop
 8008520:	3714      	adds	r7, #20
 8008522:	46bd      	mov	sp, r7
 8008524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008528:	4770      	bx	lr
 800852a:	bf00      	nop
 800852c:	200006fc 	.word	0x200006fc
 8008530:	20000140 	.word	0x20000140
 8008534:	20000704 	.word	0x20000704
 8008538:	20000700 	.word	0x20000700

0800853c <cdcWrite>:
uint32_t cdcWrite(uint8_t *pData, uint32_t length)
{
 800853c:	b580      	push	{r7, lr}
 800853e:	b084      	sub	sp, #16
 8008540:	af00      	add	r7, sp, #0
 8008542:	6078      	str	r0, [r7, #4]
 8008544:	6039      	str	r1, [r7, #0]
	uint32_t pre_time;
	uint8_t ret;

	pre_time = millis();
 8008546:	f7f8 f8aa 	bl	800069e <millis>
 800854a:	60f8      	str	r0, [r7, #12]
	while(1)
	{
		ret = CDC_Transmit_FS(pData, length);
 800854c:	683b      	ldr	r3, [r7, #0]
 800854e:	b29b      	uxth	r3, r3
 8008550:	4619      	mov	r1, r3
 8008552:	6878      	ldr	r0, [r7, #4]
 8008554:	f000 f916 	bl	8008784 <CDC_Transmit_FS>
 8008558:	4603      	mov	r3, r0
 800855a:	72fb      	strb	r3, [r7, #11]

		if(ret == USBD_OK)
 800855c:	7afb      	ldrb	r3, [r7, #11]
 800855e:	2b00      	cmp	r3, #0
 8008560:	d101      	bne.n	8008566 <cdcWrite+0x2a>
		{
			return length;
 8008562:	683b      	ldr	r3, [r7, #0]
 8008564:	e00e      	b.n	8008584 <cdcWrite+0x48>
		}
		else if(ret == USBD_FAIL)
 8008566:	7afb      	ldrb	r3, [r7, #11]
 8008568:	2b03      	cmp	r3, #3
 800856a:	d101      	bne.n	8008570 <cdcWrite+0x34>
		{
			return 0;
 800856c:	2300      	movs	r3, #0
 800856e:	e009      	b.n	8008584 <cdcWrite+0x48>
		}

		if(millis() - pre_time >= 100)
 8008570:	f7f8 f895 	bl	800069e <millis>
 8008574:	4602      	mov	r2, r0
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	1ad3      	subs	r3, r2, r3
 800857a:	2b63      	cmp	r3, #99	; 0x63
 800857c:	d800      	bhi.n	8008580 <cdcWrite+0x44>
		ret = CDC_Transmit_FS(pData, length);
 800857e:	e7e5      	b.n	800854c <cdcWrite+0x10>
		{
			break;
 8008580:	bf00      	nop
		}

	}
	return 0;
 8008582:	2300      	movs	r3, #0
}
 8008584:	4618      	mov	r0, r3
 8008586:	3710      	adds	r7, #16
 8008588:	46bd      	mov	sp, r7
 800858a:	bd80      	pop	{r7, pc}

0800858c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800858c:	b580      	push	{r7, lr}
 800858e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008590:	2200      	movs	r2, #0
 8008592:	4905      	ldr	r1, [pc, #20]	; (80085a8 <CDC_Init_FS+0x1c>)
 8008594:	4805      	ldr	r0, [pc, #20]	; (80085ac <CDC_Init_FS+0x20>)
 8008596:	f7fe fd32 	bl	8006ffe <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800859a:	4905      	ldr	r1, [pc, #20]	; (80085b0 <CDC_Init_FS+0x24>)
 800859c:	4803      	ldr	r0, [pc, #12]	; (80085ac <CDC_Init_FS+0x20>)
 800859e:	f7fe fd4c 	bl	800703a <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80085a2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80085a4:	4618      	mov	r0, r3
 80085a6:	bd80      	pop	{r7, pc}
 80085a8:	20000c04 	.word	0x20000c04
 80085ac:	20000424 	.word	0x20000424
 80085b0:	20000804 	.word	0x20000804

080085b4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80085b4:	b480      	push	{r7}
 80085b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80085b8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80085ba:	4618      	mov	r0, r3
 80085bc:	46bd      	mov	sp, r7
 80085be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085c2:	4770      	bx	lr

080085c4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80085c4:	b480      	push	{r7}
 80085c6:	b083      	sub	sp, #12
 80085c8:	af00      	add	r7, sp, #0
 80085ca:	4603      	mov	r3, r0
 80085cc:	6039      	str	r1, [r7, #0]
 80085ce:	71fb      	strb	r3, [r7, #7]
 80085d0:	4613      	mov	r3, r2
 80085d2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80085d4:	79fb      	ldrb	r3, [r7, #7]
 80085d6:	2b23      	cmp	r3, #35	; 0x23
 80085d8:	f200 80a3 	bhi.w	8008722 <CDC_Control_FS+0x15e>
 80085dc:	a201      	add	r2, pc, #4	; (adr r2, 80085e4 <CDC_Control_FS+0x20>)
 80085de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085e2:	bf00      	nop
 80085e4:	08008723 	.word	0x08008723
 80085e8:	08008723 	.word	0x08008723
 80085ec:	08008723 	.word	0x08008723
 80085f0:	08008723 	.word	0x08008723
 80085f4:	08008723 	.word	0x08008723
 80085f8:	08008723 	.word	0x08008723
 80085fc:	08008723 	.word	0x08008723
 8008600:	08008723 	.word	0x08008723
 8008604:	08008723 	.word	0x08008723
 8008608:	08008723 	.word	0x08008723
 800860c:	08008723 	.word	0x08008723
 8008610:	08008723 	.word	0x08008723
 8008614:	08008723 	.word	0x08008723
 8008618:	08008723 	.word	0x08008723
 800861c:	08008723 	.word	0x08008723
 8008620:	08008723 	.word	0x08008723
 8008624:	08008723 	.word	0x08008723
 8008628:	08008723 	.word	0x08008723
 800862c:	08008723 	.word	0x08008723
 8008630:	08008723 	.word	0x08008723
 8008634:	08008723 	.word	0x08008723
 8008638:	08008723 	.word	0x08008723
 800863c:	08008723 	.word	0x08008723
 8008640:	08008723 	.word	0x08008723
 8008644:	08008723 	.word	0x08008723
 8008648:	08008723 	.word	0x08008723
 800864c:	08008723 	.word	0x08008723
 8008650:	08008723 	.word	0x08008723
 8008654:	08008723 	.word	0x08008723
 8008658:	08008723 	.word	0x08008723
 800865c:	08008723 	.word	0x08008723
 8008660:	08008723 	.word	0x08008723
 8008664:	08008675 	.word	0x08008675
 8008668:	080086cf 	.word	0x080086cf
 800866c:	08008723 	.word	0x08008723
 8008670:	08008723 	.word	0x08008723
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING: // MCU�?? ?��?��?���?? set
    	LineCoding.bitrate 		 = (uint32_t)(pbuf[0]);
 8008674:	683b      	ldr	r3, [r7, #0]
 8008676:	781b      	ldrb	r3, [r3, #0]
 8008678:	461a      	mov	r2, r3
 800867a:	4b2e      	ldr	r3, [pc, #184]	; (8008734 <CDC_Control_FS+0x170>)
 800867c:	601a      	str	r2, [r3, #0]
    	LineCoding.bitrate 		|= (uint32_t)(pbuf[1]) << 8;
 800867e:	4b2d      	ldr	r3, [pc, #180]	; (8008734 <CDC_Control_FS+0x170>)
 8008680:	681a      	ldr	r2, [r3, #0]
 8008682:	683b      	ldr	r3, [r7, #0]
 8008684:	3301      	adds	r3, #1
 8008686:	781b      	ldrb	r3, [r3, #0]
 8008688:	021b      	lsls	r3, r3, #8
 800868a:	4313      	orrs	r3, r2
 800868c:	4a29      	ldr	r2, [pc, #164]	; (8008734 <CDC_Control_FS+0x170>)
 800868e:	6013      	str	r3, [r2, #0]
    	LineCoding.bitrate 		|= (uint32_t)(pbuf[2]) << 16;
 8008690:	4b28      	ldr	r3, [pc, #160]	; (8008734 <CDC_Control_FS+0x170>)
 8008692:	681a      	ldr	r2, [r3, #0]
 8008694:	683b      	ldr	r3, [r7, #0]
 8008696:	3302      	adds	r3, #2
 8008698:	781b      	ldrb	r3, [r3, #0]
 800869a:	041b      	lsls	r3, r3, #16
 800869c:	4313      	orrs	r3, r2
 800869e:	4a25      	ldr	r2, [pc, #148]	; (8008734 <CDC_Control_FS+0x170>)
 80086a0:	6013      	str	r3, [r2, #0]
    	LineCoding.bitrate 		|= (uint32_t)(pbuf[3]) << 24;
 80086a2:	4b24      	ldr	r3, [pc, #144]	; (8008734 <CDC_Control_FS+0x170>)
 80086a4:	681a      	ldr	r2, [r3, #0]
 80086a6:	683b      	ldr	r3, [r7, #0]
 80086a8:	3303      	adds	r3, #3
 80086aa:	781b      	ldrb	r3, [r3, #0]
 80086ac:	061b      	lsls	r3, r3, #24
 80086ae:	4313      	orrs	r3, r2
 80086b0:	4a20      	ldr	r2, [pc, #128]	; (8008734 <CDC_Control_FS+0x170>)
 80086b2:	6013      	str	r3, [r2, #0]
    	LineCoding.format 		 = pbuf[4];
 80086b4:	683b      	ldr	r3, [r7, #0]
 80086b6:	791a      	ldrb	r2, [r3, #4]
 80086b8:	4b1e      	ldr	r3, [pc, #120]	; (8008734 <CDC_Control_FS+0x170>)
 80086ba:	711a      	strb	r2, [r3, #4]
    	LineCoding.paritytype  = pbuf[5];
 80086bc:	683b      	ldr	r3, [r7, #0]
 80086be:	795a      	ldrb	r2, [r3, #5]
 80086c0:	4b1c      	ldr	r3, [pc, #112]	; (8008734 <CDC_Control_FS+0x170>)
 80086c2:	715a      	strb	r2, [r3, #5]
    	LineCoding.datatype 	 = pbuf[6];
 80086c4:	683b      	ldr	r3, [r7, #0]
 80086c6:	799a      	ldrb	r2, [r3, #6]
 80086c8:	4b1a      	ldr	r3, [pc, #104]	; (8008734 <CDC_Control_FS+0x170>)
 80086ca:	719a      	strb	r2, [r3, #6]
    break;
 80086cc:	e02a      	b.n	8008724 <CDC_Control_FS+0x160>

    case CDC_GET_LINE_CODING: // PC�?? ?��?��?���?? ?��?���??
    	pbuf[0] = (uint8_t)(LineCoding.bitrate);
 80086ce:	4b19      	ldr	r3, [pc, #100]	; (8008734 <CDC_Control_FS+0x170>)
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	b2da      	uxtb	r2, r3
 80086d4:	683b      	ldr	r3, [r7, #0]
 80086d6:	701a      	strb	r2, [r3, #0]
    	pbuf[1] = (uint8_t)(LineCoding.bitrate >> 8);
 80086d8:	4b16      	ldr	r3, [pc, #88]	; (8008734 <CDC_Control_FS+0x170>)
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	0a1a      	lsrs	r2, r3, #8
 80086de:	683b      	ldr	r3, [r7, #0]
 80086e0:	3301      	adds	r3, #1
 80086e2:	b2d2      	uxtb	r2, r2
 80086e4:	701a      	strb	r2, [r3, #0]
    	pbuf[2] = (uint8_t)(LineCoding.bitrate >> 16);
 80086e6:	4b13      	ldr	r3, [pc, #76]	; (8008734 <CDC_Control_FS+0x170>)
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	0c1a      	lsrs	r2, r3, #16
 80086ec:	683b      	ldr	r3, [r7, #0]
 80086ee:	3302      	adds	r3, #2
 80086f0:	b2d2      	uxtb	r2, r2
 80086f2:	701a      	strb	r2, [r3, #0]
    	pbuf[3] = (uint8_t)(LineCoding.bitrate >> 24);
 80086f4:	4b0f      	ldr	r3, [pc, #60]	; (8008734 <CDC_Control_FS+0x170>)
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	0e1a      	lsrs	r2, r3, #24
 80086fa:	683b      	ldr	r3, [r7, #0]
 80086fc:	3303      	adds	r3, #3
 80086fe:	b2d2      	uxtb	r2, r2
 8008700:	701a      	strb	r2, [r3, #0]
    	pbuf[4] = LineCoding.format;
 8008702:	683b      	ldr	r3, [r7, #0]
 8008704:	3304      	adds	r3, #4
 8008706:	4a0b      	ldr	r2, [pc, #44]	; (8008734 <CDC_Control_FS+0x170>)
 8008708:	7912      	ldrb	r2, [r2, #4]
 800870a:	701a      	strb	r2, [r3, #0]
    	pbuf[5] = LineCoding.paritytype;
 800870c:	683b      	ldr	r3, [r7, #0]
 800870e:	3305      	adds	r3, #5
 8008710:	4a08      	ldr	r2, [pc, #32]	; (8008734 <CDC_Control_FS+0x170>)
 8008712:	7952      	ldrb	r2, [r2, #5]
 8008714:	701a      	strb	r2, [r3, #0]
    	pbuf[6] = LineCoding.datatype;
 8008716:	683b      	ldr	r3, [r7, #0]
 8008718:	3306      	adds	r3, #6
 800871a:	4a06      	ldr	r2, [pc, #24]	; (8008734 <CDC_Control_FS+0x170>)
 800871c:	7992      	ldrb	r2, [r2, #6]
 800871e:	701a      	strb	r2, [r3, #0]
    break;
 8008720:	e000      	b.n	8008724 <CDC_Control_FS+0x160>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008722:	bf00      	nop
  }

  return (USBD_OK);
 8008724:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008726:	4618      	mov	r0, r3
 8008728:	370c      	adds	r7, #12
 800872a:	46bd      	mov	sp, r7
 800872c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008730:	4770      	bx	lr
 8008732:	bf00      	nop
 8008734:	200006f4 	.word	0x200006f4

08008738 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008738:	b580      	push	{r7, lr}
 800873a:	b084      	sub	sp, #16
 800873c:	af00      	add	r7, sp, #0
 800873e:	6078      	str	r0, [r7, #4]
 8008740:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008742:	6879      	ldr	r1, [r7, #4]
 8008744:	480e      	ldr	r0, [pc, #56]	; (8008780 <CDC_Receive_FS+0x48>)
 8008746:	f7fe fc78 	bl	800703a <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800874a:	480d      	ldr	r0, [pc, #52]	; (8008780 <CDC_Receive_FS+0x48>)
 800874c:	f7fe fcbe 	bl	80070cc <USBD_CDC_ReceivePacket>

  for(int i = 0 ; i < *Len ; i++)
 8008750:	2300      	movs	r3, #0
 8008752:	60fb      	str	r3, [r7, #12]
 8008754:	e009      	b.n	800876a <CDC_Receive_FS+0x32>
  {
  	cdcDataIn(Buf[i]);// ?��?��?��?�� 발생?�� data in
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	687a      	ldr	r2, [r7, #4]
 800875a:	4413      	add	r3, r2
 800875c:	781b      	ldrb	r3, [r3, #0]
 800875e:	4618      	mov	r0, r3
 8008760:	f7ff fec0 	bl	80084e4 <cdcDataIn>
  for(int i = 0 ; i < *Len ; i++)
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	3301      	adds	r3, #1
 8008768:	60fb      	str	r3, [r7, #12]
 800876a:	683b      	ldr	r3, [r7, #0]
 800876c:	681a      	ldr	r2, [r3, #0]
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	429a      	cmp	r2, r3
 8008772:	d8f0      	bhi.n	8008756 <CDC_Receive_FS+0x1e>
  }
  return (USBD_OK);
 8008774:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008776:	4618      	mov	r0, r3
 8008778:	3710      	adds	r7, #16
 800877a:	46bd      	mov	sp, r7
 800877c:	bd80      	pop	{r7, pc}
 800877e:	bf00      	nop
 8008780:	20000424 	.word	0x20000424

08008784 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8008784:	b580      	push	{r7, lr}
 8008786:	b084      	sub	sp, #16
 8008788:	af00      	add	r7, sp, #0
 800878a:	6078      	str	r0, [r7, #4]
 800878c:	460b      	mov	r3, r1
 800878e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8008790:	2300      	movs	r3, #0
 8008792:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8008794:	4b0d      	ldr	r3, [pc, #52]	; (80087cc <CDC_Transmit_FS+0x48>)
 8008796:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800879a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800879c:	68bb      	ldr	r3, [r7, #8]
 800879e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d001      	beq.n	80087aa <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80087a6:	2301      	movs	r3, #1
 80087a8:	e00b      	b.n	80087c2 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80087aa:	887b      	ldrh	r3, [r7, #2]
 80087ac:	461a      	mov	r2, r3
 80087ae:	6879      	ldr	r1, [r7, #4]
 80087b0:	4806      	ldr	r0, [pc, #24]	; (80087cc <CDC_Transmit_FS+0x48>)
 80087b2:	f7fe fc24 	bl	8006ffe <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80087b6:	4805      	ldr	r0, [pc, #20]	; (80087cc <CDC_Transmit_FS+0x48>)
 80087b8:	f7fe fc58 	bl	800706c <USBD_CDC_TransmitPacket>
 80087bc:	4603      	mov	r3, r0
 80087be:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80087c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80087c2:	4618      	mov	r0, r3
 80087c4:	3710      	adds	r7, #16
 80087c6:	46bd      	mov	sp, r7
 80087c8:	bd80      	pop	{r7, pc}
 80087ca:	bf00      	nop
 80087cc:	20000424 	.word	0x20000424

080087d0 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80087d0:	b480      	push	{r7}
 80087d2:	b087      	sub	sp, #28
 80087d4:	af00      	add	r7, sp, #0
 80087d6:	60f8      	str	r0, [r7, #12]
 80087d8:	60b9      	str	r1, [r7, #8]
 80087da:	4613      	mov	r3, r2
 80087dc:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80087de:	2300      	movs	r3, #0
 80087e0:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80087e2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80087e6:	4618      	mov	r0, r3
 80087e8:	371c      	adds	r7, #28
 80087ea:	46bd      	mov	sp, r7
 80087ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087f0:	4770      	bx	lr
	...

080087f4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80087f4:	b480      	push	{r7}
 80087f6:	b083      	sub	sp, #12
 80087f8:	af00      	add	r7, sp, #0
 80087fa:	4603      	mov	r3, r0
 80087fc:	6039      	str	r1, [r7, #0]
 80087fe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008800:	683b      	ldr	r3, [r7, #0]
 8008802:	2212      	movs	r2, #18
 8008804:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008806:	4b03      	ldr	r3, [pc, #12]	; (8008814 <USBD_FS_DeviceDescriptor+0x20>)
}
 8008808:	4618      	mov	r0, r3
 800880a:	370c      	adds	r7, #12
 800880c:	46bd      	mov	sp, r7
 800880e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008812:	4770      	bx	lr
 8008814:	20000174 	.word	0x20000174

08008818 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008818:	b480      	push	{r7}
 800881a:	b083      	sub	sp, #12
 800881c:	af00      	add	r7, sp, #0
 800881e:	4603      	mov	r3, r0
 8008820:	6039      	str	r1, [r7, #0]
 8008822:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008824:	683b      	ldr	r3, [r7, #0]
 8008826:	2204      	movs	r2, #4
 8008828:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800882a:	4b03      	ldr	r3, [pc, #12]	; (8008838 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800882c:	4618      	mov	r0, r3
 800882e:	370c      	adds	r7, #12
 8008830:	46bd      	mov	sp, r7
 8008832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008836:	4770      	bx	lr
 8008838:	20000188 	.word	0x20000188

0800883c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800883c:	b580      	push	{r7, lr}
 800883e:	b082      	sub	sp, #8
 8008840:	af00      	add	r7, sp, #0
 8008842:	4603      	mov	r3, r0
 8008844:	6039      	str	r1, [r7, #0]
 8008846:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008848:	79fb      	ldrb	r3, [r7, #7]
 800884a:	2b00      	cmp	r3, #0
 800884c:	d105      	bne.n	800885a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800884e:	683a      	ldr	r2, [r7, #0]
 8008850:	4907      	ldr	r1, [pc, #28]	; (8008870 <USBD_FS_ProductStrDescriptor+0x34>)
 8008852:	4808      	ldr	r0, [pc, #32]	; (8008874 <USBD_FS_ProductStrDescriptor+0x38>)
 8008854:	f7ff fced 	bl	8008232 <USBD_GetString>
 8008858:	e004      	b.n	8008864 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800885a:	683a      	ldr	r2, [r7, #0]
 800885c:	4904      	ldr	r1, [pc, #16]	; (8008870 <USBD_FS_ProductStrDescriptor+0x34>)
 800885e:	4805      	ldr	r0, [pc, #20]	; (8008874 <USBD_FS_ProductStrDescriptor+0x38>)
 8008860:	f7ff fce7 	bl	8008232 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008864:	4b02      	ldr	r3, [pc, #8]	; (8008870 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008866:	4618      	mov	r0, r3
 8008868:	3708      	adds	r7, #8
 800886a:	46bd      	mov	sp, r7
 800886c:	bd80      	pop	{r7, pc}
 800886e:	bf00      	nop
 8008870:	20001004 	.word	0x20001004
 8008874:	08009a0c 	.word	0x08009a0c

08008878 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008878:	b580      	push	{r7, lr}
 800887a:	b082      	sub	sp, #8
 800887c:	af00      	add	r7, sp, #0
 800887e:	4603      	mov	r3, r0
 8008880:	6039      	str	r1, [r7, #0]
 8008882:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008884:	683a      	ldr	r2, [r7, #0]
 8008886:	4904      	ldr	r1, [pc, #16]	; (8008898 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008888:	4804      	ldr	r0, [pc, #16]	; (800889c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800888a:	f7ff fcd2 	bl	8008232 <USBD_GetString>
  return USBD_StrDesc;
 800888e:	4b02      	ldr	r3, [pc, #8]	; (8008898 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008890:	4618      	mov	r0, r3
 8008892:	3708      	adds	r7, #8
 8008894:	46bd      	mov	sp, r7
 8008896:	bd80      	pop	{r7, pc}
 8008898:	20001004 	.word	0x20001004
 800889c:	08009a24 	.word	0x08009a24

080088a0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80088a0:	b580      	push	{r7, lr}
 80088a2:	b082      	sub	sp, #8
 80088a4:	af00      	add	r7, sp, #0
 80088a6:	4603      	mov	r3, r0
 80088a8:	6039      	str	r1, [r7, #0]
 80088aa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80088ac:	683b      	ldr	r3, [r7, #0]
 80088ae:	221a      	movs	r2, #26
 80088b0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80088b2:	f000 f843 	bl	800893c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80088b6:	4b02      	ldr	r3, [pc, #8]	; (80088c0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80088b8:	4618      	mov	r0, r3
 80088ba:	3708      	adds	r7, #8
 80088bc:	46bd      	mov	sp, r7
 80088be:	bd80      	pop	{r7, pc}
 80088c0:	2000018c 	.word	0x2000018c

080088c4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80088c4:	b580      	push	{r7, lr}
 80088c6:	b082      	sub	sp, #8
 80088c8:	af00      	add	r7, sp, #0
 80088ca:	4603      	mov	r3, r0
 80088cc:	6039      	str	r1, [r7, #0]
 80088ce:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80088d0:	79fb      	ldrb	r3, [r7, #7]
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d105      	bne.n	80088e2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80088d6:	683a      	ldr	r2, [r7, #0]
 80088d8:	4907      	ldr	r1, [pc, #28]	; (80088f8 <USBD_FS_ConfigStrDescriptor+0x34>)
 80088da:	4808      	ldr	r0, [pc, #32]	; (80088fc <USBD_FS_ConfigStrDescriptor+0x38>)
 80088dc:	f7ff fca9 	bl	8008232 <USBD_GetString>
 80088e0:	e004      	b.n	80088ec <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80088e2:	683a      	ldr	r2, [r7, #0]
 80088e4:	4904      	ldr	r1, [pc, #16]	; (80088f8 <USBD_FS_ConfigStrDescriptor+0x34>)
 80088e6:	4805      	ldr	r0, [pc, #20]	; (80088fc <USBD_FS_ConfigStrDescriptor+0x38>)
 80088e8:	f7ff fca3 	bl	8008232 <USBD_GetString>
  }
  return USBD_StrDesc;
 80088ec:	4b02      	ldr	r3, [pc, #8]	; (80088f8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80088ee:	4618      	mov	r0, r3
 80088f0:	3708      	adds	r7, #8
 80088f2:	46bd      	mov	sp, r7
 80088f4:	bd80      	pop	{r7, pc}
 80088f6:	bf00      	nop
 80088f8:	20001004 	.word	0x20001004
 80088fc:	08009a38 	.word	0x08009a38

08008900 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008900:	b580      	push	{r7, lr}
 8008902:	b082      	sub	sp, #8
 8008904:	af00      	add	r7, sp, #0
 8008906:	4603      	mov	r3, r0
 8008908:	6039      	str	r1, [r7, #0]
 800890a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800890c:	79fb      	ldrb	r3, [r7, #7]
 800890e:	2b00      	cmp	r3, #0
 8008910:	d105      	bne.n	800891e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008912:	683a      	ldr	r2, [r7, #0]
 8008914:	4907      	ldr	r1, [pc, #28]	; (8008934 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008916:	4808      	ldr	r0, [pc, #32]	; (8008938 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008918:	f7ff fc8b 	bl	8008232 <USBD_GetString>
 800891c:	e004      	b.n	8008928 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800891e:	683a      	ldr	r2, [r7, #0]
 8008920:	4904      	ldr	r1, [pc, #16]	; (8008934 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008922:	4805      	ldr	r0, [pc, #20]	; (8008938 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008924:	f7ff fc85 	bl	8008232 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008928:	4b02      	ldr	r3, [pc, #8]	; (8008934 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800892a:	4618      	mov	r0, r3
 800892c:	3708      	adds	r7, #8
 800892e:	46bd      	mov	sp, r7
 8008930:	bd80      	pop	{r7, pc}
 8008932:	bf00      	nop
 8008934:	20001004 	.word	0x20001004
 8008938:	08009a44 	.word	0x08009a44

0800893c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800893c:	b580      	push	{r7, lr}
 800893e:	b084      	sub	sp, #16
 8008940:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008942:	4b0f      	ldr	r3, [pc, #60]	; (8008980 <Get_SerialNum+0x44>)
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008948:	4b0e      	ldr	r3, [pc, #56]	; (8008984 <Get_SerialNum+0x48>)
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800894e:	4b0e      	ldr	r3, [pc, #56]	; (8008988 <Get_SerialNum+0x4c>)
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008954:	68fa      	ldr	r2, [r7, #12]
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	4413      	add	r3, r2
 800895a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	2b00      	cmp	r3, #0
 8008960:	d009      	beq.n	8008976 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008962:	2208      	movs	r2, #8
 8008964:	4909      	ldr	r1, [pc, #36]	; (800898c <Get_SerialNum+0x50>)
 8008966:	68f8      	ldr	r0, [r7, #12]
 8008968:	f000 f814 	bl	8008994 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800896c:	2204      	movs	r2, #4
 800896e:	4908      	ldr	r1, [pc, #32]	; (8008990 <Get_SerialNum+0x54>)
 8008970:	68b8      	ldr	r0, [r7, #8]
 8008972:	f000 f80f 	bl	8008994 <IntToUnicode>
  }
}
 8008976:	bf00      	nop
 8008978:	3710      	adds	r7, #16
 800897a:	46bd      	mov	sp, r7
 800897c:	bd80      	pop	{r7, pc}
 800897e:	bf00      	nop
 8008980:	1fff7a10 	.word	0x1fff7a10
 8008984:	1fff7a14 	.word	0x1fff7a14
 8008988:	1fff7a18 	.word	0x1fff7a18
 800898c:	2000018e 	.word	0x2000018e
 8008990:	2000019e 	.word	0x2000019e

08008994 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008994:	b480      	push	{r7}
 8008996:	b087      	sub	sp, #28
 8008998:	af00      	add	r7, sp, #0
 800899a:	60f8      	str	r0, [r7, #12]
 800899c:	60b9      	str	r1, [r7, #8]
 800899e:	4613      	mov	r3, r2
 80089a0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80089a2:	2300      	movs	r3, #0
 80089a4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80089a6:	2300      	movs	r3, #0
 80089a8:	75fb      	strb	r3, [r7, #23]
 80089aa:	e027      	b.n	80089fc <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	0f1b      	lsrs	r3, r3, #28
 80089b0:	2b09      	cmp	r3, #9
 80089b2:	d80b      	bhi.n	80089cc <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	0f1b      	lsrs	r3, r3, #28
 80089b8:	b2da      	uxtb	r2, r3
 80089ba:	7dfb      	ldrb	r3, [r7, #23]
 80089bc:	005b      	lsls	r3, r3, #1
 80089be:	4619      	mov	r1, r3
 80089c0:	68bb      	ldr	r3, [r7, #8]
 80089c2:	440b      	add	r3, r1
 80089c4:	3230      	adds	r2, #48	; 0x30
 80089c6:	b2d2      	uxtb	r2, r2
 80089c8:	701a      	strb	r2, [r3, #0]
 80089ca:	e00a      	b.n	80089e2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	0f1b      	lsrs	r3, r3, #28
 80089d0:	b2da      	uxtb	r2, r3
 80089d2:	7dfb      	ldrb	r3, [r7, #23]
 80089d4:	005b      	lsls	r3, r3, #1
 80089d6:	4619      	mov	r1, r3
 80089d8:	68bb      	ldr	r3, [r7, #8]
 80089da:	440b      	add	r3, r1
 80089dc:	3237      	adds	r2, #55	; 0x37
 80089de:	b2d2      	uxtb	r2, r2
 80089e0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	011b      	lsls	r3, r3, #4
 80089e6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80089e8:	7dfb      	ldrb	r3, [r7, #23]
 80089ea:	005b      	lsls	r3, r3, #1
 80089ec:	3301      	adds	r3, #1
 80089ee:	68ba      	ldr	r2, [r7, #8]
 80089f0:	4413      	add	r3, r2
 80089f2:	2200      	movs	r2, #0
 80089f4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80089f6:	7dfb      	ldrb	r3, [r7, #23]
 80089f8:	3301      	adds	r3, #1
 80089fa:	75fb      	strb	r3, [r7, #23]
 80089fc:	7dfa      	ldrb	r2, [r7, #23]
 80089fe:	79fb      	ldrb	r3, [r7, #7]
 8008a00:	429a      	cmp	r2, r3
 8008a02:	d3d3      	bcc.n	80089ac <IntToUnicode+0x18>
  }
}
 8008a04:	bf00      	nop
 8008a06:	bf00      	nop
 8008a08:	371c      	adds	r7, #28
 8008a0a:	46bd      	mov	sp, r7
 8008a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a10:	4770      	bx	lr
	...

08008a14 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008a14:	b580      	push	{r7, lr}
 8008a16:	b08a      	sub	sp, #40	; 0x28
 8008a18:	af00      	add	r7, sp, #0
 8008a1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008a1c:	f107 0314 	add.w	r3, r7, #20
 8008a20:	2200      	movs	r2, #0
 8008a22:	601a      	str	r2, [r3, #0]
 8008a24:	605a      	str	r2, [r3, #4]
 8008a26:	609a      	str	r2, [r3, #8]
 8008a28:	60da      	str	r2, [r3, #12]
 8008a2a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008a34:	d13a      	bne.n	8008aac <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008a36:	2300      	movs	r3, #0
 8008a38:	613b      	str	r3, [r7, #16]
 8008a3a:	4b1e      	ldr	r3, [pc, #120]	; (8008ab4 <HAL_PCD_MspInit+0xa0>)
 8008a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a3e:	4a1d      	ldr	r2, [pc, #116]	; (8008ab4 <HAL_PCD_MspInit+0xa0>)
 8008a40:	f043 0301 	orr.w	r3, r3, #1
 8008a44:	6313      	str	r3, [r2, #48]	; 0x30
 8008a46:	4b1b      	ldr	r3, [pc, #108]	; (8008ab4 <HAL_PCD_MspInit+0xa0>)
 8008a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a4a:	f003 0301 	and.w	r3, r3, #1
 8008a4e:	613b      	str	r3, [r7, #16]
 8008a50:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8008a52:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8008a56:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008a58:	2302      	movs	r3, #2
 8008a5a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008a5c:	2300      	movs	r3, #0
 8008a5e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008a60:	2303      	movs	r3, #3
 8008a62:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008a64:	230a      	movs	r3, #10
 8008a66:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008a68:	f107 0314 	add.w	r3, r7, #20
 8008a6c:	4619      	mov	r1, r3
 8008a6e:	4812      	ldr	r0, [pc, #72]	; (8008ab8 <HAL_PCD_MspInit+0xa4>)
 8008a70:	f7f9 f92a 	bl	8001cc8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008a74:	4b0f      	ldr	r3, [pc, #60]	; (8008ab4 <HAL_PCD_MspInit+0xa0>)
 8008a76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a78:	4a0e      	ldr	r2, [pc, #56]	; (8008ab4 <HAL_PCD_MspInit+0xa0>)
 8008a7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008a7e:	6353      	str	r3, [r2, #52]	; 0x34
 8008a80:	2300      	movs	r3, #0
 8008a82:	60fb      	str	r3, [r7, #12]
 8008a84:	4b0b      	ldr	r3, [pc, #44]	; (8008ab4 <HAL_PCD_MspInit+0xa0>)
 8008a86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008a88:	4a0a      	ldr	r2, [pc, #40]	; (8008ab4 <HAL_PCD_MspInit+0xa0>)
 8008a8a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008a8e:	6453      	str	r3, [r2, #68]	; 0x44
 8008a90:	4b08      	ldr	r3, [pc, #32]	; (8008ab4 <HAL_PCD_MspInit+0xa0>)
 8008a92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008a94:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008a98:	60fb      	str	r3, [r7, #12]
 8008a9a:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008a9c:	2200      	movs	r2, #0
 8008a9e:	2100      	movs	r1, #0
 8008aa0:	2043      	movs	r0, #67	; 0x43
 8008aa2:	f7f8 fcd8 	bl	8001456 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008aa6:	2043      	movs	r0, #67	; 0x43
 8008aa8:	f7f8 fcf1 	bl	800148e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008aac:	bf00      	nop
 8008aae:	3728      	adds	r7, #40	; 0x28
 8008ab0:	46bd      	mov	sp, r7
 8008ab2:	bd80      	pop	{r7, pc}
 8008ab4:	40023800 	.word	0x40023800
 8008ab8:	40020000 	.word	0x40020000

08008abc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008abc:	b580      	push	{r7, lr}
 8008abe:	b082      	sub	sp, #8
 8008ac0:	af00      	add	r7, sp, #0
 8008ac2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8008ad0:	4619      	mov	r1, r3
 8008ad2:	4610      	mov	r0, r2
 8008ad4:	f7fe fbc6 	bl	8007264 <USBD_LL_SetupStage>
}
 8008ad8:	bf00      	nop
 8008ada:	3708      	adds	r7, #8
 8008adc:	46bd      	mov	sp, r7
 8008ade:	bd80      	pop	{r7, pc}

08008ae0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008ae0:	b580      	push	{r7, lr}
 8008ae2:	b082      	sub	sp, #8
 8008ae4:	af00      	add	r7, sp, #0
 8008ae6:	6078      	str	r0, [r7, #4]
 8008ae8:	460b      	mov	r3, r1
 8008aea:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8008af2:	78fa      	ldrb	r2, [r7, #3]
 8008af4:	6879      	ldr	r1, [r7, #4]
 8008af6:	4613      	mov	r3, r2
 8008af8:	00db      	lsls	r3, r3, #3
 8008afa:	1a9b      	subs	r3, r3, r2
 8008afc:	009b      	lsls	r3, r3, #2
 8008afe:	440b      	add	r3, r1
 8008b00:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8008b04:	681a      	ldr	r2, [r3, #0]
 8008b06:	78fb      	ldrb	r3, [r7, #3]
 8008b08:	4619      	mov	r1, r3
 8008b0a:	f7fe fc00 	bl	800730e <USBD_LL_DataOutStage>
}
 8008b0e:	bf00      	nop
 8008b10:	3708      	adds	r7, #8
 8008b12:	46bd      	mov	sp, r7
 8008b14:	bd80      	pop	{r7, pc}

08008b16 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008b16:	b580      	push	{r7, lr}
 8008b18:	b082      	sub	sp, #8
 8008b1a:	af00      	add	r7, sp, #0
 8008b1c:	6078      	str	r0, [r7, #4]
 8008b1e:	460b      	mov	r3, r1
 8008b20:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8008b28:	78fa      	ldrb	r2, [r7, #3]
 8008b2a:	6879      	ldr	r1, [r7, #4]
 8008b2c:	4613      	mov	r3, r2
 8008b2e:	00db      	lsls	r3, r3, #3
 8008b30:	1a9b      	subs	r3, r3, r2
 8008b32:	009b      	lsls	r3, r3, #2
 8008b34:	440b      	add	r3, r1
 8008b36:	3348      	adds	r3, #72	; 0x48
 8008b38:	681a      	ldr	r2, [r3, #0]
 8008b3a:	78fb      	ldrb	r3, [r7, #3]
 8008b3c:	4619      	mov	r1, r3
 8008b3e:	f7fe fc49 	bl	80073d4 <USBD_LL_DataInStage>
}
 8008b42:	bf00      	nop
 8008b44:	3708      	adds	r7, #8
 8008b46:	46bd      	mov	sp, r7
 8008b48:	bd80      	pop	{r7, pc}

08008b4a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008b4a:	b580      	push	{r7, lr}
 8008b4c:	b082      	sub	sp, #8
 8008b4e:	af00      	add	r7, sp, #0
 8008b50:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008b58:	4618      	mov	r0, r3
 8008b5a:	f7fe fd5d 	bl	8007618 <USBD_LL_SOF>
}
 8008b5e:	bf00      	nop
 8008b60:	3708      	adds	r7, #8
 8008b62:	46bd      	mov	sp, r7
 8008b64:	bd80      	pop	{r7, pc}

08008b66 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008b66:	b580      	push	{r7, lr}
 8008b68:	b084      	sub	sp, #16
 8008b6a:	af00      	add	r7, sp, #0
 8008b6c:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008b6e:	2301      	movs	r3, #1
 8008b70:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	68db      	ldr	r3, [r3, #12]
 8008b76:	2b02      	cmp	r3, #2
 8008b78:	d001      	beq.n	8008b7e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8008b7a:	f7f7 fe01 	bl	8000780 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008b84:	7bfa      	ldrb	r2, [r7, #15]
 8008b86:	4611      	mov	r1, r2
 8008b88:	4618      	mov	r0, r3
 8008b8a:	f7fe fd07 	bl	800759c <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008b94:	4618      	mov	r0, r3
 8008b96:	f7fe fcb3 	bl	8007500 <USBD_LL_Reset>
}
 8008b9a:	bf00      	nop
 8008b9c:	3710      	adds	r7, #16
 8008b9e:	46bd      	mov	sp, r7
 8008ba0:	bd80      	pop	{r7, pc}
	...

08008ba4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008ba4:	b580      	push	{r7, lr}
 8008ba6:	b082      	sub	sp, #8
 8008ba8:	af00      	add	r7, sp, #0
 8008baa:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008bb2:	4618      	mov	r0, r3
 8008bb4:	f7fe fd02 	bl	80075bc <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	687a      	ldr	r2, [r7, #4]
 8008bc4:	6812      	ldr	r2, [r2, #0]
 8008bc6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008bca:	f043 0301 	orr.w	r3, r3, #1
 8008bce:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	6a1b      	ldr	r3, [r3, #32]
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d005      	beq.n	8008be4 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008bd8:	4b04      	ldr	r3, [pc, #16]	; (8008bec <HAL_PCD_SuspendCallback+0x48>)
 8008bda:	691b      	ldr	r3, [r3, #16]
 8008bdc:	4a03      	ldr	r2, [pc, #12]	; (8008bec <HAL_PCD_SuspendCallback+0x48>)
 8008bde:	f043 0306 	orr.w	r3, r3, #6
 8008be2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008be4:	bf00      	nop
 8008be6:	3708      	adds	r7, #8
 8008be8:	46bd      	mov	sp, r7
 8008bea:	bd80      	pop	{r7, pc}
 8008bec:	e000ed00 	.word	0xe000ed00

08008bf0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008bf0:	b580      	push	{r7, lr}
 8008bf2:	b082      	sub	sp, #8
 8008bf4:	af00      	add	r7, sp, #0
 8008bf6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008bfe:	4618      	mov	r0, r3
 8008c00:	f7fe fcf2 	bl	80075e8 <USBD_LL_Resume>
}
 8008c04:	bf00      	nop
 8008c06:	3708      	adds	r7, #8
 8008c08:	46bd      	mov	sp, r7
 8008c0a:	bd80      	pop	{r7, pc}

08008c0c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008c0c:	b580      	push	{r7, lr}
 8008c0e:	b082      	sub	sp, #8
 8008c10:	af00      	add	r7, sp, #0
 8008c12:	6078      	str	r0, [r7, #4]
 8008c14:	460b      	mov	r3, r1
 8008c16:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008c1e:	78fa      	ldrb	r2, [r7, #3]
 8008c20:	4611      	mov	r1, r2
 8008c22:	4618      	mov	r0, r3
 8008c24:	f7fe fd40 	bl	80076a8 <USBD_LL_IsoOUTIncomplete>
}
 8008c28:	bf00      	nop
 8008c2a:	3708      	adds	r7, #8
 8008c2c:	46bd      	mov	sp, r7
 8008c2e:	bd80      	pop	{r7, pc}

08008c30 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008c30:	b580      	push	{r7, lr}
 8008c32:	b082      	sub	sp, #8
 8008c34:	af00      	add	r7, sp, #0
 8008c36:	6078      	str	r0, [r7, #4]
 8008c38:	460b      	mov	r3, r1
 8008c3a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008c42:	78fa      	ldrb	r2, [r7, #3]
 8008c44:	4611      	mov	r1, r2
 8008c46:	4618      	mov	r0, r3
 8008c48:	f7fe fd08 	bl	800765c <USBD_LL_IsoINIncomplete>
}
 8008c4c:	bf00      	nop
 8008c4e:	3708      	adds	r7, #8
 8008c50:	46bd      	mov	sp, r7
 8008c52:	bd80      	pop	{r7, pc}

08008c54 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008c54:	b580      	push	{r7, lr}
 8008c56:	b082      	sub	sp, #8
 8008c58:	af00      	add	r7, sp, #0
 8008c5a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008c62:	4618      	mov	r0, r3
 8008c64:	f7fe fd46 	bl	80076f4 <USBD_LL_DevConnected>
}
 8008c68:	bf00      	nop
 8008c6a:	3708      	adds	r7, #8
 8008c6c:	46bd      	mov	sp, r7
 8008c6e:	bd80      	pop	{r7, pc}

08008c70 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008c70:	b580      	push	{r7, lr}
 8008c72:	b082      	sub	sp, #8
 8008c74:	af00      	add	r7, sp, #0
 8008c76:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008c7e:	4618      	mov	r0, r3
 8008c80:	f7fe fd43 	bl	800770a <USBD_LL_DevDisconnected>
}
 8008c84:	bf00      	nop
 8008c86:	3708      	adds	r7, #8
 8008c88:	46bd      	mov	sp, r7
 8008c8a:	bd80      	pop	{r7, pc}

08008c8c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008c8c:	b580      	push	{r7, lr}
 8008c8e:	b082      	sub	sp, #8
 8008c90:	af00      	add	r7, sp, #0
 8008c92:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	781b      	ldrb	r3, [r3, #0]
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d13c      	bne.n	8008d16 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8008c9c:	4a20      	ldr	r2, [pc, #128]	; (8008d20 <USBD_LL_Init+0x94>)
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	4a1e      	ldr	r2, [pc, #120]	; (8008d20 <USBD_LL_Init+0x94>)
 8008ca8:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008cac:	4b1c      	ldr	r3, [pc, #112]	; (8008d20 <USBD_LL_Init+0x94>)
 8008cae:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008cb2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8008cb4:	4b1a      	ldr	r3, [pc, #104]	; (8008d20 <USBD_LL_Init+0x94>)
 8008cb6:	2204      	movs	r2, #4
 8008cb8:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8008cba:	4b19      	ldr	r3, [pc, #100]	; (8008d20 <USBD_LL_Init+0x94>)
 8008cbc:	2202      	movs	r2, #2
 8008cbe:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008cc0:	4b17      	ldr	r3, [pc, #92]	; (8008d20 <USBD_LL_Init+0x94>)
 8008cc2:	2200      	movs	r2, #0
 8008cc4:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8008cc6:	4b16      	ldr	r3, [pc, #88]	; (8008d20 <USBD_LL_Init+0x94>)
 8008cc8:	2202      	movs	r2, #2
 8008cca:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008ccc:	4b14      	ldr	r3, [pc, #80]	; (8008d20 <USBD_LL_Init+0x94>)
 8008cce:	2200      	movs	r2, #0
 8008cd0:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8008cd2:	4b13      	ldr	r3, [pc, #76]	; (8008d20 <USBD_LL_Init+0x94>)
 8008cd4:	2200      	movs	r2, #0
 8008cd6:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8008cd8:	4b11      	ldr	r3, [pc, #68]	; (8008d20 <USBD_LL_Init+0x94>)
 8008cda:	2200      	movs	r2, #0
 8008cdc:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8008cde:	4b10      	ldr	r3, [pc, #64]	; (8008d20 <USBD_LL_Init+0x94>)
 8008ce0:	2200      	movs	r2, #0
 8008ce2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8008ce4:	4b0e      	ldr	r3, [pc, #56]	; (8008d20 <USBD_LL_Init+0x94>)
 8008ce6:	2200      	movs	r2, #0
 8008ce8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8008cea:	480d      	ldr	r0, [pc, #52]	; (8008d20 <USBD_LL_Init+0x94>)
 8008cec:	f7f9 f9a3 	bl	8002036 <HAL_PCD_Init>
 8008cf0:	4603      	mov	r3, r0
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d001      	beq.n	8008cfa <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8008cf6:	f7f7 fd43 	bl	8000780 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8008cfa:	2180      	movs	r1, #128	; 0x80
 8008cfc:	4808      	ldr	r0, [pc, #32]	; (8008d20 <USBD_LL_Init+0x94>)
 8008cfe:	f7fa fb00 	bl	8003302 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8008d02:	2240      	movs	r2, #64	; 0x40
 8008d04:	2100      	movs	r1, #0
 8008d06:	4806      	ldr	r0, [pc, #24]	; (8008d20 <USBD_LL_Init+0x94>)
 8008d08:	f7fa fab4 	bl	8003274 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8008d0c:	2280      	movs	r2, #128	; 0x80
 8008d0e:	2101      	movs	r1, #1
 8008d10:	4803      	ldr	r0, [pc, #12]	; (8008d20 <USBD_LL_Init+0x94>)
 8008d12:	f7fa faaf 	bl	8003274 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8008d16:	2300      	movs	r3, #0
}
 8008d18:	4618      	mov	r0, r3
 8008d1a:	3708      	adds	r7, #8
 8008d1c:	46bd      	mov	sp, r7
 8008d1e:	bd80      	pop	{r7, pc}
 8008d20:	20001204 	.word	0x20001204

08008d24 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008d24:	b580      	push	{r7, lr}
 8008d26:	b084      	sub	sp, #16
 8008d28:	af00      	add	r7, sp, #0
 8008d2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008d2c:	2300      	movs	r3, #0
 8008d2e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008d30:	2300      	movs	r3, #0
 8008d32:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008d3a:	4618      	mov	r0, r3
 8008d3c:	f7f9 fa98 	bl	8002270 <HAL_PCD_Start>
 8008d40:	4603      	mov	r3, r0
 8008d42:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008d44:	7bfb      	ldrb	r3, [r7, #15]
 8008d46:	4618      	mov	r0, r3
 8008d48:	f000 f942 	bl	8008fd0 <USBD_Get_USB_Status>
 8008d4c:	4603      	mov	r3, r0
 8008d4e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008d50:	7bbb      	ldrb	r3, [r7, #14]
}
 8008d52:	4618      	mov	r0, r3
 8008d54:	3710      	adds	r7, #16
 8008d56:	46bd      	mov	sp, r7
 8008d58:	bd80      	pop	{r7, pc}

08008d5a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008d5a:	b580      	push	{r7, lr}
 8008d5c:	b084      	sub	sp, #16
 8008d5e:	af00      	add	r7, sp, #0
 8008d60:	6078      	str	r0, [r7, #4]
 8008d62:	4608      	mov	r0, r1
 8008d64:	4611      	mov	r1, r2
 8008d66:	461a      	mov	r2, r3
 8008d68:	4603      	mov	r3, r0
 8008d6a:	70fb      	strb	r3, [r7, #3]
 8008d6c:	460b      	mov	r3, r1
 8008d6e:	70bb      	strb	r3, [r7, #2]
 8008d70:	4613      	mov	r3, r2
 8008d72:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008d74:	2300      	movs	r3, #0
 8008d76:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008d78:	2300      	movs	r3, #0
 8008d7a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008d82:	78bb      	ldrb	r3, [r7, #2]
 8008d84:	883a      	ldrh	r2, [r7, #0]
 8008d86:	78f9      	ldrb	r1, [r7, #3]
 8008d88:	f7f9 fe7c 	bl	8002a84 <HAL_PCD_EP_Open>
 8008d8c:	4603      	mov	r3, r0
 8008d8e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008d90:	7bfb      	ldrb	r3, [r7, #15]
 8008d92:	4618      	mov	r0, r3
 8008d94:	f000 f91c 	bl	8008fd0 <USBD_Get_USB_Status>
 8008d98:	4603      	mov	r3, r0
 8008d9a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008d9c:	7bbb      	ldrb	r3, [r7, #14]
}
 8008d9e:	4618      	mov	r0, r3
 8008da0:	3710      	adds	r7, #16
 8008da2:	46bd      	mov	sp, r7
 8008da4:	bd80      	pop	{r7, pc}

08008da6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008da6:	b580      	push	{r7, lr}
 8008da8:	b084      	sub	sp, #16
 8008daa:	af00      	add	r7, sp, #0
 8008dac:	6078      	str	r0, [r7, #4]
 8008dae:	460b      	mov	r3, r1
 8008db0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008db2:	2300      	movs	r3, #0
 8008db4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008db6:	2300      	movs	r3, #0
 8008db8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008dc0:	78fa      	ldrb	r2, [r7, #3]
 8008dc2:	4611      	mov	r1, r2
 8008dc4:	4618      	mov	r0, r3
 8008dc6:	f7f9 fec5 	bl	8002b54 <HAL_PCD_EP_Close>
 8008dca:	4603      	mov	r3, r0
 8008dcc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008dce:	7bfb      	ldrb	r3, [r7, #15]
 8008dd0:	4618      	mov	r0, r3
 8008dd2:	f000 f8fd 	bl	8008fd0 <USBD_Get_USB_Status>
 8008dd6:	4603      	mov	r3, r0
 8008dd8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008dda:	7bbb      	ldrb	r3, [r7, #14]
}
 8008ddc:	4618      	mov	r0, r3
 8008dde:	3710      	adds	r7, #16
 8008de0:	46bd      	mov	sp, r7
 8008de2:	bd80      	pop	{r7, pc}

08008de4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008de4:	b580      	push	{r7, lr}
 8008de6:	b084      	sub	sp, #16
 8008de8:	af00      	add	r7, sp, #0
 8008dea:	6078      	str	r0, [r7, #4]
 8008dec:	460b      	mov	r3, r1
 8008dee:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008df0:	2300      	movs	r3, #0
 8008df2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008df4:	2300      	movs	r3, #0
 8008df6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008dfe:	78fa      	ldrb	r2, [r7, #3]
 8008e00:	4611      	mov	r1, r2
 8008e02:	4618      	mov	r0, r3
 8008e04:	f7f9 ff9d 	bl	8002d42 <HAL_PCD_EP_SetStall>
 8008e08:	4603      	mov	r3, r0
 8008e0a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008e0c:	7bfb      	ldrb	r3, [r7, #15]
 8008e0e:	4618      	mov	r0, r3
 8008e10:	f000 f8de 	bl	8008fd0 <USBD_Get_USB_Status>
 8008e14:	4603      	mov	r3, r0
 8008e16:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008e18:	7bbb      	ldrb	r3, [r7, #14]
}
 8008e1a:	4618      	mov	r0, r3
 8008e1c:	3710      	adds	r7, #16
 8008e1e:	46bd      	mov	sp, r7
 8008e20:	bd80      	pop	{r7, pc}

08008e22 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008e22:	b580      	push	{r7, lr}
 8008e24:	b084      	sub	sp, #16
 8008e26:	af00      	add	r7, sp, #0
 8008e28:	6078      	str	r0, [r7, #4]
 8008e2a:	460b      	mov	r3, r1
 8008e2c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008e2e:	2300      	movs	r3, #0
 8008e30:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008e32:	2300      	movs	r3, #0
 8008e34:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008e3c:	78fa      	ldrb	r2, [r7, #3]
 8008e3e:	4611      	mov	r1, r2
 8008e40:	4618      	mov	r0, r3
 8008e42:	f7f9 ffe2 	bl	8002e0a <HAL_PCD_EP_ClrStall>
 8008e46:	4603      	mov	r3, r0
 8008e48:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008e4a:	7bfb      	ldrb	r3, [r7, #15]
 8008e4c:	4618      	mov	r0, r3
 8008e4e:	f000 f8bf 	bl	8008fd0 <USBD_Get_USB_Status>
 8008e52:	4603      	mov	r3, r0
 8008e54:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008e56:	7bbb      	ldrb	r3, [r7, #14]
}
 8008e58:	4618      	mov	r0, r3
 8008e5a:	3710      	adds	r7, #16
 8008e5c:	46bd      	mov	sp, r7
 8008e5e:	bd80      	pop	{r7, pc}

08008e60 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008e60:	b480      	push	{r7}
 8008e62:	b085      	sub	sp, #20
 8008e64:	af00      	add	r7, sp, #0
 8008e66:	6078      	str	r0, [r7, #4]
 8008e68:	460b      	mov	r3, r1
 8008e6a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008e72:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008e74:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	da0b      	bge.n	8008e94 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008e7c:	78fb      	ldrb	r3, [r7, #3]
 8008e7e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008e82:	68f9      	ldr	r1, [r7, #12]
 8008e84:	4613      	mov	r3, r2
 8008e86:	00db      	lsls	r3, r3, #3
 8008e88:	1a9b      	subs	r3, r3, r2
 8008e8a:	009b      	lsls	r3, r3, #2
 8008e8c:	440b      	add	r3, r1
 8008e8e:	333e      	adds	r3, #62	; 0x3e
 8008e90:	781b      	ldrb	r3, [r3, #0]
 8008e92:	e00b      	b.n	8008eac <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008e94:	78fb      	ldrb	r3, [r7, #3]
 8008e96:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008e9a:	68f9      	ldr	r1, [r7, #12]
 8008e9c:	4613      	mov	r3, r2
 8008e9e:	00db      	lsls	r3, r3, #3
 8008ea0:	1a9b      	subs	r3, r3, r2
 8008ea2:	009b      	lsls	r3, r3, #2
 8008ea4:	440b      	add	r3, r1
 8008ea6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8008eaa:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008eac:	4618      	mov	r0, r3
 8008eae:	3714      	adds	r7, #20
 8008eb0:	46bd      	mov	sp, r7
 8008eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eb6:	4770      	bx	lr

08008eb8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008eb8:	b580      	push	{r7, lr}
 8008eba:	b084      	sub	sp, #16
 8008ebc:	af00      	add	r7, sp, #0
 8008ebe:	6078      	str	r0, [r7, #4]
 8008ec0:	460b      	mov	r3, r1
 8008ec2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008ec4:	2300      	movs	r3, #0
 8008ec6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008ec8:	2300      	movs	r3, #0
 8008eca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008ed2:	78fa      	ldrb	r2, [r7, #3]
 8008ed4:	4611      	mov	r1, r2
 8008ed6:	4618      	mov	r0, r3
 8008ed8:	f7f9 fdaf 	bl	8002a3a <HAL_PCD_SetAddress>
 8008edc:	4603      	mov	r3, r0
 8008ede:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008ee0:	7bfb      	ldrb	r3, [r7, #15]
 8008ee2:	4618      	mov	r0, r3
 8008ee4:	f000 f874 	bl	8008fd0 <USBD_Get_USB_Status>
 8008ee8:	4603      	mov	r3, r0
 8008eea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008eec:	7bbb      	ldrb	r3, [r7, #14]
}
 8008eee:	4618      	mov	r0, r3
 8008ef0:	3710      	adds	r7, #16
 8008ef2:	46bd      	mov	sp, r7
 8008ef4:	bd80      	pop	{r7, pc}

08008ef6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008ef6:	b580      	push	{r7, lr}
 8008ef8:	b086      	sub	sp, #24
 8008efa:	af00      	add	r7, sp, #0
 8008efc:	60f8      	str	r0, [r7, #12]
 8008efe:	607a      	str	r2, [r7, #4]
 8008f00:	603b      	str	r3, [r7, #0]
 8008f02:	460b      	mov	r3, r1
 8008f04:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008f06:	2300      	movs	r3, #0
 8008f08:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008f0a:	2300      	movs	r3, #0
 8008f0c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008f14:	7af9      	ldrb	r1, [r7, #11]
 8008f16:	683b      	ldr	r3, [r7, #0]
 8008f18:	687a      	ldr	r2, [r7, #4]
 8008f1a:	f7f9 fec8 	bl	8002cae <HAL_PCD_EP_Transmit>
 8008f1e:	4603      	mov	r3, r0
 8008f20:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008f22:	7dfb      	ldrb	r3, [r7, #23]
 8008f24:	4618      	mov	r0, r3
 8008f26:	f000 f853 	bl	8008fd0 <USBD_Get_USB_Status>
 8008f2a:	4603      	mov	r3, r0
 8008f2c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008f2e:	7dbb      	ldrb	r3, [r7, #22]
}
 8008f30:	4618      	mov	r0, r3
 8008f32:	3718      	adds	r7, #24
 8008f34:	46bd      	mov	sp, r7
 8008f36:	bd80      	pop	{r7, pc}

08008f38 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008f38:	b580      	push	{r7, lr}
 8008f3a:	b086      	sub	sp, #24
 8008f3c:	af00      	add	r7, sp, #0
 8008f3e:	60f8      	str	r0, [r7, #12]
 8008f40:	607a      	str	r2, [r7, #4]
 8008f42:	603b      	str	r3, [r7, #0]
 8008f44:	460b      	mov	r3, r1
 8008f46:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008f48:	2300      	movs	r3, #0
 8008f4a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008f4c:	2300      	movs	r3, #0
 8008f4e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008f56:	7af9      	ldrb	r1, [r7, #11]
 8008f58:	683b      	ldr	r3, [r7, #0]
 8008f5a:	687a      	ldr	r2, [r7, #4]
 8008f5c:	f7f9 fe44 	bl	8002be8 <HAL_PCD_EP_Receive>
 8008f60:	4603      	mov	r3, r0
 8008f62:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008f64:	7dfb      	ldrb	r3, [r7, #23]
 8008f66:	4618      	mov	r0, r3
 8008f68:	f000 f832 	bl	8008fd0 <USBD_Get_USB_Status>
 8008f6c:	4603      	mov	r3, r0
 8008f6e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008f70:	7dbb      	ldrb	r3, [r7, #22]
}
 8008f72:	4618      	mov	r0, r3
 8008f74:	3718      	adds	r7, #24
 8008f76:	46bd      	mov	sp, r7
 8008f78:	bd80      	pop	{r7, pc}

08008f7a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008f7a:	b580      	push	{r7, lr}
 8008f7c:	b082      	sub	sp, #8
 8008f7e:	af00      	add	r7, sp, #0
 8008f80:	6078      	str	r0, [r7, #4]
 8008f82:	460b      	mov	r3, r1
 8008f84:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008f8c:	78fa      	ldrb	r2, [r7, #3]
 8008f8e:	4611      	mov	r1, r2
 8008f90:	4618      	mov	r0, r3
 8008f92:	f7f9 fe74 	bl	8002c7e <HAL_PCD_EP_GetRxCount>
 8008f96:	4603      	mov	r3, r0
}
 8008f98:	4618      	mov	r0, r3
 8008f9a:	3708      	adds	r7, #8
 8008f9c:	46bd      	mov	sp, r7
 8008f9e:	bd80      	pop	{r7, pc}

08008fa0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008fa0:	b480      	push	{r7}
 8008fa2:	b083      	sub	sp, #12
 8008fa4:	af00      	add	r7, sp, #0
 8008fa6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008fa8:	4b03      	ldr	r3, [pc, #12]	; (8008fb8 <USBD_static_malloc+0x18>)
}
 8008faa:	4618      	mov	r0, r3
 8008fac:	370c      	adds	r7, #12
 8008fae:	46bd      	mov	sp, r7
 8008fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fb4:	4770      	bx	lr
 8008fb6:	bf00      	nop
 8008fb8:	2000160c 	.word	0x2000160c

08008fbc <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008fbc:	b480      	push	{r7}
 8008fbe:	b083      	sub	sp, #12
 8008fc0:	af00      	add	r7, sp, #0
 8008fc2:	6078      	str	r0, [r7, #4]

}
 8008fc4:	bf00      	nop
 8008fc6:	370c      	adds	r7, #12
 8008fc8:	46bd      	mov	sp, r7
 8008fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fce:	4770      	bx	lr

08008fd0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008fd0:	b480      	push	{r7}
 8008fd2:	b085      	sub	sp, #20
 8008fd4:	af00      	add	r7, sp, #0
 8008fd6:	4603      	mov	r3, r0
 8008fd8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008fda:	2300      	movs	r3, #0
 8008fdc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008fde:	79fb      	ldrb	r3, [r7, #7]
 8008fe0:	2b03      	cmp	r3, #3
 8008fe2:	d817      	bhi.n	8009014 <USBD_Get_USB_Status+0x44>
 8008fe4:	a201      	add	r2, pc, #4	; (adr r2, 8008fec <USBD_Get_USB_Status+0x1c>)
 8008fe6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fea:	bf00      	nop
 8008fec:	08008ffd 	.word	0x08008ffd
 8008ff0:	08009003 	.word	0x08009003
 8008ff4:	08009009 	.word	0x08009009
 8008ff8:	0800900f 	.word	0x0800900f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008ffc:	2300      	movs	r3, #0
 8008ffe:	73fb      	strb	r3, [r7, #15]
    break;
 8009000:	e00b      	b.n	800901a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009002:	2303      	movs	r3, #3
 8009004:	73fb      	strb	r3, [r7, #15]
    break;
 8009006:	e008      	b.n	800901a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009008:	2301      	movs	r3, #1
 800900a:	73fb      	strb	r3, [r7, #15]
    break;
 800900c:	e005      	b.n	800901a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800900e:	2303      	movs	r3, #3
 8009010:	73fb      	strb	r3, [r7, #15]
    break;
 8009012:	e002      	b.n	800901a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009014:	2303      	movs	r3, #3
 8009016:	73fb      	strb	r3, [r7, #15]
    break;
 8009018:	bf00      	nop
  }
  return usb_status;
 800901a:	7bfb      	ldrb	r3, [r7, #15]
}
 800901c:	4618      	mov	r0, r3
 800901e:	3714      	adds	r7, #20
 8009020:	46bd      	mov	sp, r7
 8009022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009026:	4770      	bx	lr

08009028 <main>:
 */

#include "main.h"

int main(void)
{
 8009028:	b580      	push	{r7, lr}
 800902a:	af00      	add	r7, sp, #0

	hwInit();
 800902c:	f7f8 f892 	bl	8001154 <hwInit>
	apInit();
 8009030:	f7f7 faa8 	bl	8000584 <apInit>

	apMain();
 8009034:	f7f7 fab4 	bl	80005a0 <apMain>
	return 0;
 8009038:	2300      	movs	r3, #0
}
 800903a:	4618      	mov	r0, r3
 800903c:	bd80      	pop	{r7, pc}
	...

08009040 <__errno>:
 8009040:	4b01      	ldr	r3, [pc, #4]	; (8009048 <__errno+0x8>)
 8009042:	6818      	ldr	r0, [r3, #0]
 8009044:	4770      	bx	lr
 8009046:	bf00      	nop
 8009048:	200001a8 	.word	0x200001a8

0800904c <__libc_init_array>:
 800904c:	b570      	push	{r4, r5, r6, lr}
 800904e:	4d0d      	ldr	r5, [pc, #52]	; (8009084 <__libc_init_array+0x38>)
 8009050:	4c0d      	ldr	r4, [pc, #52]	; (8009088 <__libc_init_array+0x3c>)
 8009052:	1b64      	subs	r4, r4, r5
 8009054:	10a4      	asrs	r4, r4, #2
 8009056:	2600      	movs	r6, #0
 8009058:	42a6      	cmp	r6, r4
 800905a:	d109      	bne.n	8009070 <__libc_init_array+0x24>
 800905c:	4d0b      	ldr	r5, [pc, #44]	; (800908c <__libc_init_array+0x40>)
 800905e:	4c0c      	ldr	r4, [pc, #48]	; (8009090 <__libc_init_array+0x44>)
 8009060:	f000 fca8 	bl	80099b4 <_init>
 8009064:	1b64      	subs	r4, r4, r5
 8009066:	10a4      	asrs	r4, r4, #2
 8009068:	2600      	movs	r6, #0
 800906a:	42a6      	cmp	r6, r4
 800906c:	d105      	bne.n	800907a <__libc_init_array+0x2e>
 800906e:	bd70      	pop	{r4, r5, r6, pc}
 8009070:	f855 3b04 	ldr.w	r3, [r5], #4
 8009074:	4798      	blx	r3
 8009076:	3601      	adds	r6, #1
 8009078:	e7ee      	b.n	8009058 <__libc_init_array+0xc>
 800907a:	f855 3b04 	ldr.w	r3, [r5], #4
 800907e:	4798      	blx	r3
 8009080:	3601      	adds	r6, #1
 8009082:	e7f2      	b.n	800906a <__libc_init_array+0x1e>
 8009084:	08009ab0 	.word	0x08009ab0
 8009088:	08009ab0 	.word	0x08009ab0
 800908c:	08009ab0 	.word	0x08009ab0
 8009090:	08009ab4 	.word	0x08009ab4

08009094 <memset>:
 8009094:	4402      	add	r2, r0
 8009096:	4603      	mov	r3, r0
 8009098:	4293      	cmp	r3, r2
 800909a:	d100      	bne.n	800909e <memset+0xa>
 800909c:	4770      	bx	lr
 800909e:	f803 1b01 	strb.w	r1, [r3], #1
 80090a2:	e7f9      	b.n	8009098 <memset+0x4>

080090a4 <_vsniprintf_r>:
 80090a4:	b530      	push	{r4, r5, lr}
 80090a6:	4614      	mov	r4, r2
 80090a8:	2c00      	cmp	r4, #0
 80090aa:	b09b      	sub	sp, #108	; 0x6c
 80090ac:	4605      	mov	r5, r0
 80090ae:	461a      	mov	r2, r3
 80090b0:	da05      	bge.n	80090be <_vsniprintf_r+0x1a>
 80090b2:	238b      	movs	r3, #139	; 0x8b
 80090b4:	6003      	str	r3, [r0, #0]
 80090b6:	f04f 30ff 	mov.w	r0, #4294967295
 80090ba:	b01b      	add	sp, #108	; 0x6c
 80090bc:	bd30      	pop	{r4, r5, pc}
 80090be:	f44f 7302 	mov.w	r3, #520	; 0x208
 80090c2:	f8ad 300c 	strh.w	r3, [sp, #12]
 80090c6:	bf14      	ite	ne
 80090c8:	f104 33ff 	addne.w	r3, r4, #4294967295
 80090cc:	4623      	moveq	r3, r4
 80090ce:	9302      	str	r3, [sp, #8]
 80090d0:	9305      	str	r3, [sp, #20]
 80090d2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80090d6:	9100      	str	r1, [sp, #0]
 80090d8:	9104      	str	r1, [sp, #16]
 80090da:	f8ad 300e 	strh.w	r3, [sp, #14]
 80090de:	4669      	mov	r1, sp
 80090e0:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80090e2:	f000 f875 	bl	80091d0 <_svfiprintf_r>
 80090e6:	1c43      	adds	r3, r0, #1
 80090e8:	bfbc      	itt	lt
 80090ea:	238b      	movlt	r3, #139	; 0x8b
 80090ec:	602b      	strlt	r3, [r5, #0]
 80090ee:	2c00      	cmp	r4, #0
 80090f0:	d0e3      	beq.n	80090ba <_vsniprintf_r+0x16>
 80090f2:	9b00      	ldr	r3, [sp, #0]
 80090f4:	2200      	movs	r2, #0
 80090f6:	701a      	strb	r2, [r3, #0]
 80090f8:	e7df      	b.n	80090ba <_vsniprintf_r+0x16>
	...

080090fc <vsniprintf>:
 80090fc:	b507      	push	{r0, r1, r2, lr}
 80090fe:	9300      	str	r3, [sp, #0]
 8009100:	4613      	mov	r3, r2
 8009102:	460a      	mov	r2, r1
 8009104:	4601      	mov	r1, r0
 8009106:	4803      	ldr	r0, [pc, #12]	; (8009114 <vsniprintf+0x18>)
 8009108:	6800      	ldr	r0, [r0, #0]
 800910a:	f7ff ffcb 	bl	80090a4 <_vsniprintf_r>
 800910e:	b003      	add	sp, #12
 8009110:	f85d fb04 	ldr.w	pc, [sp], #4
 8009114:	200001a8 	.word	0x200001a8

08009118 <__ssputs_r>:
 8009118:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800911c:	688e      	ldr	r6, [r1, #8]
 800911e:	429e      	cmp	r6, r3
 8009120:	4682      	mov	sl, r0
 8009122:	460c      	mov	r4, r1
 8009124:	4690      	mov	r8, r2
 8009126:	461f      	mov	r7, r3
 8009128:	d838      	bhi.n	800919c <__ssputs_r+0x84>
 800912a:	898a      	ldrh	r2, [r1, #12]
 800912c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009130:	d032      	beq.n	8009198 <__ssputs_r+0x80>
 8009132:	6825      	ldr	r5, [r4, #0]
 8009134:	6909      	ldr	r1, [r1, #16]
 8009136:	eba5 0901 	sub.w	r9, r5, r1
 800913a:	6965      	ldr	r5, [r4, #20]
 800913c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009140:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009144:	3301      	adds	r3, #1
 8009146:	444b      	add	r3, r9
 8009148:	106d      	asrs	r5, r5, #1
 800914a:	429d      	cmp	r5, r3
 800914c:	bf38      	it	cc
 800914e:	461d      	movcc	r5, r3
 8009150:	0553      	lsls	r3, r2, #21
 8009152:	d531      	bpl.n	80091b8 <__ssputs_r+0xa0>
 8009154:	4629      	mov	r1, r5
 8009156:	f000 fb63 	bl	8009820 <_malloc_r>
 800915a:	4606      	mov	r6, r0
 800915c:	b950      	cbnz	r0, 8009174 <__ssputs_r+0x5c>
 800915e:	230c      	movs	r3, #12
 8009160:	f8ca 3000 	str.w	r3, [sl]
 8009164:	89a3      	ldrh	r3, [r4, #12]
 8009166:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800916a:	81a3      	strh	r3, [r4, #12]
 800916c:	f04f 30ff 	mov.w	r0, #4294967295
 8009170:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009174:	6921      	ldr	r1, [r4, #16]
 8009176:	464a      	mov	r2, r9
 8009178:	f000 fabe 	bl	80096f8 <memcpy>
 800917c:	89a3      	ldrh	r3, [r4, #12]
 800917e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009182:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009186:	81a3      	strh	r3, [r4, #12]
 8009188:	6126      	str	r6, [r4, #16]
 800918a:	6165      	str	r5, [r4, #20]
 800918c:	444e      	add	r6, r9
 800918e:	eba5 0509 	sub.w	r5, r5, r9
 8009192:	6026      	str	r6, [r4, #0]
 8009194:	60a5      	str	r5, [r4, #8]
 8009196:	463e      	mov	r6, r7
 8009198:	42be      	cmp	r6, r7
 800919a:	d900      	bls.n	800919e <__ssputs_r+0x86>
 800919c:	463e      	mov	r6, r7
 800919e:	6820      	ldr	r0, [r4, #0]
 80091a0:	4632      	mov	r2, r6
 80091a2:	4641      	mov	r1, r8
 80091a4:	f000 fab6 	bl	8009714 <memmove>
 80091a8:	68a3      	ldr	r3, [r4, #8]
 80091aa:	1b9b      	subs	r3, r3, r6
 80091ac:	60a3      	str	r3, [r4, #8]
 80091ae:	6823      	ldr	r3, [r4, #0]
 80091b0:	4433      	add	r3, r6
 80091b2:	6023      	str	r3, [r4, #0]
 80091b4:	2000      	movs	r0, #0
 80091b6:	e7db      	b.n	8009170 <__ssputs_r+0x58>
 80091b8:	462a      	mov	r2, r5
 80091ba:	f000 fba5 	bl	8009908 <_realloc_r>
 80091be:	4606      	mov	r6, r0
 80091c0:	2800      	cmp	r0, #0
 80091c2:	d1e1      	bne.n	8009188 <__ssputs_r+0x70>
 80091c4:	6921      	ldr	r1, [r4, #16]
 80091c6:	4650      	mov	r0, sl
 80091c8:	f000 fabe 	bl	8009748 <_free_r>
 80091cc:	e7c7      	b.n	800915e <__ssputs_r+0x46>
	...

080091d0 <_svfiprintf_r>:
 80091d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091d4:	4698      	mov	r8, r3
 80091d6:	898b      	ldrh	r3, [r1, #12]
 80091d8:	061b      	lsls	r3, r3, #24
 80091da:	b09d      	sub	sp, #116	; 0x74
 80091dc:	4607      	mov	r7, r0
 80091de:	460d      	mov	r5, r1
 80091e0:	4614      	mov	r4, r2
 80091e2:	d50e      	bpl.n	8009202 <_svfiprintf_r+0x32>
 80091e4:	690b      	ldr	r3, [r1, #16]
 80091e6:	b963      	cbnz	r3, 8009202 <_svfiprintf_r+0x32>
 80091e8:	2140      	movs	r1, #64	; 0x40
 80091ea:	f000 fb19 	bl	8009820 <_malloc_r>
 80091ee:	6028      	str	r0, [r5, #0]
 80091f0:	6128      	str	r0, [r5, #16]
 80091f2:	b920      	cbnz	r0, 80091fe <_svfiprintf_r+0x2e>
 80091f4:	230c      	movs	r3, #12
 80091f6:	603b      	str	r3, [r7, #0]
 80091f8:	f04f 30ff 	mov.w	r0, #4294967295
 80091fc:	e0d1      	b.n	80093a2 <_svfiprintf_r+0x1d2>
 80091fe:	2340      	movs	r3, #64	; 0x40
 8009200:	616b      	str	r3, [r5, #20]
 8009202:	2300      	movs	r3, #0
 8009204:	9309      	str	r3, [sp, #36]	; 0x24
 8009206:	2320      	movs	r3, #32
 8009208:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800920c:	f8cd 800c 	str.w	r8, [sp, #12]
 8009210:	2330      	movs	r3, #48	; 0x30
 8009212:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80093bc <_svfiprintf_r+0x1ec>
 8009216:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800921a:	f04f 0901 	mov.w	r9, #1
 800921e:	4623      	mov	r3, r4
 8009220:	469a      	mov	sl, r3
 8009222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009226:	b10a      	cbz	r2, 800922c <_svfiprintf_r+0x5c>
 8009228:	2a25      	cmp	r2, #37	; 0x25
 800922a:	d1f9      	bne.n	8009220 <_svfiprintf_r+0x50>
 800922c:	ebba 0b04 	subs.w	fp, sl, r4
 8009230:	d00b      	beq.n	800924a <_svfiprintf_r+0x7a>
 8009232:	465b      	mov	r3, fp
 8009234:	4622      	mov	r2, r4
 8009236:	4629      	mov	r1, r5
 8009238:	4638      	mov	r0, r7
 800923a:	f7ff ff6d 	bl	8009118 <__ssputs_r>
 800923e:	3001      	adds	r0, #1
 8009240:	f000 80aa 	beq.w	8009398 <_svfiprintf_r+0x1c8>
 8009244:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009246:	445a      	add	r2, fp
 8009248:	9209      	str	r2, [sp, #36]	; 0x24
 800924a:	f89a 3000 	ldrb.w	r3, [sl]
 800924e:	2b00      	cmp	r3, #0
 8009250:	f000 80a2 	beq.w	8009398 <_svfiprintf_r+0x1c8>
 8009254:	2300      	movs	r3, #0
 8009256:	f04f 32ff 	mov.w	r2, #4294967295
 800925a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800925e:	f10a 0a01 	add.w	sl, sl, #1
 8009262:	9304      	str	r3, [sp, #16]
 8009264:	9307      	str	r3, [sp, #28]
 8009266:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800926a:	931a      	str	r3, [sp, #104]	; 0x68
 800926c:	4654      	mov	r4, sl
 800926e:	2205      	movs	r2, #5
 8009270:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009274:	4851      	ldr	r0, [pc, #324]	; (80093bc <_svfiprintf_r+0x1ec>)
 8009276:	f7f6 ffb3 	bl	80001e0 <memchr>
 800927a:	9a04      	ldr	r2, [sp, #16]
 800927c:	b9d8      	cbnz	r0, 80092b6 <_svfiprintf_r+0xe6>
 800927e:	06d0      	lsls	r0, r2, #27
 8009280:	bf44      	itt	mi
 8009282:	2320      	movmi	r3, #32
 8009284:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009288:	0711      	lsls	r1, r2, #28
 800928a:	bf44      	itt	mi
 800928c:	232b      	movmi	r3, #43	; 0x2b
 800928e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009292:	f89a 3000 	ldrb.w	r3, [sl]
 8009296:	2b2a      	cmp	r3, #42	; 0x2a
 8009298:	d015      	beq.n	80092c6 <_svfiprintf_r+0xf6>
 800929a:	9a07      	ldr	r2, [sp, #28]
 800929c:	4654      	mov	r4, sl
 800929e:	2000      	movs	r0, #0
 80092a0:	f04f 0c0a 	mov.w	ip, #10
 80092a4:	4621      	mov	r1, r4
 80092a6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80092aa:	3b30      	subs	r3, #48	; 0x30
 80092ac:	2b09      	cmp	r3, #9
 80092ae:	d94e      	bls.n	800934e <_svfiprintf_r+0x17e>
 80092b0:	b1b0      	cbz	r0, 80092e0 <_svfiprintf_r+0x110>
 80092b2:	9207      	str	r2, [sp, #28]
 80092b4:	e014      	b.n	80092e0 <_svfiprintf_r+0x110>
 80092b6:	eba0 0308 	sub.w	r3, r0, r8
 80092ba:	fa09 f303 	lsl.w	r3, r9, r3
 80092be:	4313      	orrs	r3, r2
 80092c0:	9304      	str	r3, [sp, #16]
 80092c2:	46a2      	mov	sl, r4
 80092c4:	e7d2      	b.n	800926c <_svfiprintf_r+0x9c>
 80092c6:	9b03      	ldr	r3, [sp, #12]
 80092c8:	1d19      	adds	r1, r3, #4
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	9103      	str	r1, [sp, #12]
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	bfbb      	ittet	lt
 80092d2:	425b      	neglt	r3, r3
 80092d4:	f042 0202 	orrlt.w	r2, r2, #2
 80092d8:	9307      	strge	r3, [sp, #28]
 80092da:	9307      	strlt	r3, [sp, #28]
 80092dc:	bfb8      	it	lt
 80092de:	9204      	strlt	r2, [sp, #16]
 80092e0:	7823      	ldrb	r3, [r4, #0]
 80092e2:	2b2e      	cmp	r3, #46	; 0x2e
 80092e4:	d10c      	bne.n	8009300 <_svfiprintf_r+0x130>
 80092e6:	7863      	ldrb	r3, [r4, #1]
 80092e8:	2b2a      	cmp	r3, #42	; 0x2a
 80092ea:	d135      	bne.n	8009358 <_svfiprintf_r+0x188>
 80092ec:	9b03      	ldr	r3, [sp, #12]
 80092ee:	1d1a      	adds	r2, r3, #4
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	9203      	str	r2, [sp, #12]
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	bfb8      	it	lt
 80092f8:	f04f 33ff 	movlt.w	r3, #4294967295
 80092fc:	3402      	adds	r4, #2
 80092fe:	9305      	str	r3, [sp, #20]
 8009300:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80093cc <_svfiprintf_r+0x1fc>
 8009304:	7821      	ldrb	r1, [r4, #0]
 8009306:	2203      	movs	r2, #3
 8009308:	4650      	mov	r0, sl
 800930a:	f7f6 ff69 	bl	80001e0 <memchr>
 800930e:	b140      	cbz	r0, 8009322 <_svfiprintf_r+0x152>
 8009310:	2340      	movs	r3, #64	; 0x40
 8009312:	eba0 000a 	sub.w	r0, r0, sl
 8009316:	fa03 f000 	lsl.w	r0, r3, r0
 800931a:	9b04      	ldr	r3, [sp, #16]
 800931c:	4303      	orrs	r3, r0
 800931e:	3401      	adds	r4, #1
 8009320:	9304      	str	r3, [sp, #16]
 8009322:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009326:	4826      	ldr	r0, [pc, #152]	; (80093c0 <_svfiprintf_r+0x1f0>)
 8009328:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800932c:	2206      	movs	r2, #6
 800932e:	f7f6 ff57 	bl	80001e0 <memchr>
 8009332:	2800      	cmp	r0, #0
 8009334:	d038      	beq.n	80093a8 <_svfiprintf_r+0x1d8>
 8009336:	4b23      	ldr	r3, [pc, #140]	; (80093c4 <_svfiprintf_r+0x1f4>)
 8009338:	bb1b      	cbnz	r3, 8009382 <_svfiprintf_r+0x1b2>
 800933a:	9b03      	ldr	r3, [sp, #12]
 800933c:	3307      	adds	r3, #7
 800933e:	f023 0307 	bic.w	r3, r3, #7
 8009342:	3308      	adds	r3, #8
 8009344:	9303      	str	r3, [sp, #12]
 8009346:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009348:	4433      	add	r3, r6
 800934a:	9309      	str	r3, [sp, #36]	; 0x24
 800934c:	e767      	b.n	800921e <_svfiprintf_r+0x4e>
 800934e:	fb0c 3202 	mla	r2, ip, r2, r3
 8009352:	460c      	mov	r4, r1
 8009354:	2001      	movs	r0, #1
 8009356:	e7a5      	b.n	80092a4 <_svfiprintf_r+0xd4>
 8009358:	2300      	movs	r3, #0
 800935a:	3401      	adds	r4, #1
 800935c:	9305      	str	r3, [sp, #20]
 800935e:	4619      	mov	r1, r3
 8009360:	f04f 0c0a 	mov.w	ip, #10
 8009364:	4620      	mov	r0, r4
 8009366:	f810 2b01 	ldrb.w	r2, [r0], #1
 800936a:	3a30      	subs	r2, #48	; 0x30
 800936c:	2a09      	cmp	r2, #9
 800936e:	d903      	bls.n	8009378 <_svfiprintf_r+0x1a8>
 8009370:	2b00      	cmp	r3, #0
 8009372:	d0c5      	beq.n	8009300 <_svfiprintf_r+0x130>
 8009374:	9105      	str	r1, [sp, #20]
 8009376:	e7c3      	b.n	8009300 <_svfiprintf_r+0x130>
 8009378:	fb0c 2101 	mla	r1, ip, r1, r2
 800937c:	4604      	mov	r4, r0
 800937e:	2301      	movs	r3, #1
 8009380:	e7f0      	b.n	8009364 <_svfiprintf_r+0x194>
 8009382:	ab03      	add	r3, sp, #12
 8009384:	9300      	str	r3, [sp, #0]
 8009386:	462a      	mov	r2, r5
 8009388:	4b0f      	ldr	r3, [pc, #60]	; (80093c8 <_svfiprintf_r+0x1f8>)
 800938a:	a904      	add	r1, sp, #16
 800938c:	4638      	mov	r0, r7
 800938e:	f3af 8000 	nop.w
 8009392:	1c42      	adds	r2, r0, #1
 8009394:	4606      	mov	r6, r0
 8009396:	d1d6      	bne.n	8009346 <_svfiprintf_r+0x176>
 8009398:	89ab      	ldrh	r3, [r5, #12]
 800939a:	065b      	lsls	r3, r3, #25
 800939c:	f53f af2c 	bmi.w	80091f8 <_svfiprintf_r+0x28>
 80093a0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80093a2:	b01d      	add	sp, #116	; 0x74
 80093a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80093a8:	ab03      	add	r3, sp, #12
 80093aa:	9300      	str	r3, [sp, #0]
 80093ac:	462a      	mov	r2, r5
 80093ae:	4b06      	ldr	r3, [pc, #24]	; (80093c8 <_svfiprintf_r+0x1f8>)
 80093b0:	a904      	add	r1, sp, #16
 80093b2:	4638      	mov	r0, r7
 80093b4:	f000 f87a 	bl	80094ac <_printf_i>
 80093b8:	e7eb      	b.n	8009392 <_svfiprintf_r+0x1c2>
 80093ba:	bf00      	nop
 80093bc:	08009a74 	.word	0x08009a74
 80093c0:	08009a7e 	.word	0x08009a7e
 80093c4:	00000000 	.word	0x00000000
 80093c8:	08009119 	.word	0x08009119
 80093cc:	08009a7a 	.word	0x08009a7a

080093d0 <_printf_common>:
 80093d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80093d4:	4616      	mov	r6, r2
 80093d6:	4699      	mov	r9, r3
 80093d8:	688a      	ldr	r2, [r1, #8]
 80093da:	690b      	ldr	r3, [r1, #16]
 80093dc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80093e0:	4293      	cmp	r3, r2
 80093e2:	bfb8      	it	lt
 80093e4:	4613      	movlt	r3, r2
 80093e6:	6033      	str	r3, [r6, #0]
 80093e8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80093ec:	4607      	mov	r7, r0
 80093ee:	460c      	mov	r4, r1
 80093f0:	b10a      	cbz	r2, 80093f6 <_printf_common+0x26>
 80093f2:	3301      	adds	r3, #1
 80093f4:	6033      	str	r3, [r6, #0]
 80093f6:	6823      	ldr	r3, [r4, #0]
 80093f8:	0699      	lsls	r1, r3, #26
 80093fa:	bf42      	ittt	mi
 80093fc:	6833      	ldrmi	r3, [r6, #0]
 80093fe:	3302      	addmi	r3, #2
 8009400:	6033      	strmi	r3, [r6, #0]
 8009402:	6825      	ldr	r5, [r4, #0]
 8009404:	f015 0506 	ands.w	r5, r5, #6
 8009408:	d106      	bne.n	8009418 <_printf_common+0x48>
 800940a:	f104 0a19 	add.w	sl, r4, #25
 800940e:	68e3      	ldr	r3, [r4, #12]
 8009410:	6832      	ldr	r2, [r6, #0]
 8009412:	1a9b      	subs	r3, r3, r2
 8009414:	42ab      	cmp	r3, r5
 8009416:	dc26      	bgt.n	8009466 <_printf_common+0x96>
 8009418:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800941c:	1e13      	subs	r3, r2, #0
 800941e:	6822      	ldr	r2, [r4, #0]
 8009420:	bf18      	it	ne
 8009422:	2301      	movne	r3, #1
 8009424:	0692      	lsls	r2, r2, #26
 8009426:	d42b      	bmi.n	8009480 <_printf_common+0xb0>
 8009428:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800942c:	4649      	mov	r1, r9
 800942e:	4638      	mov	r0, r7
 8009430:	47c0      	blx	r8
 8009432:	3001      	adds	r0, #1
 8009434:	d01e      	beq.n	8009474 <_printf_common+0xa4>
 8009436:	6823      	ldr	r3, [r4, #0]
 8009438:	68e5      	ldr	r5, [r4, #12]
 800943a:	6832      	ldr	r2, [r6, #0]
 800943c:	f003 0306 	and.w	r3, r3, #6
 8009440:	2b04      	cmp	r3, #4
 8009442:	bf08      	it	eq
 8009444:	1aad      	subeq	r5, r5, r2
 8009446:	68a3      	ldr	r3, [r4, #8]
 8009448:	6922      	ldr	r2, [r4, #16]
 800944a:	bf0c      	ite	eq
 800944c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009450:	2500      	movne	r5, #0
 8009452:	4293      	cmp	r3, r2
 8009454:	bfc4      	itt	gt
 8009456:	1a9b      	subgt	r3, r3, r2
 8009458:	18ed      	addgt	r5, r5, r3
 800945a:	2600      	movs	r6, #0
 800945c:	341a      	adds	r4, #26
 800945e:	42b5      	cmp	r5, r6
 8009460:	d11a      	bne.n	8009498 <_printf_common+0xc8>
 8009462:	2000      	movs	r0, #0
 8009464:	e008      	b.n	8009478 <_printf_common+0xa8>
 8009466:	2301      	movs	r3, #1
 8009468:	4652      	mov	r2, sl
 800946a:	4649      	mov	r1, r9
 800946c:	4638      	mov	r0, r7
 800946e:	47c0      	blx	r8
 8009470:	3001      	adds	r0, #1
 8009472:	d103      	bne.n	800947c <_printf_common+0xac>
 8009474:	f04f 30ff 	mov.w	r0, #4294967295
 8009478:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800947c:	3501      	adds	r5, #1
 800947e:	e7c6      	b.n	800940e <_printf_common+0x3e>
 8009480:	18e1      	adds	r1, r4, r3
 8009482:	1c5a      	adds	r2, r3, #1
 8009484:	2030      	movs	r0, #48	; 0x30
 8009486:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800948a:	4422      	add	r2, r4
 800948c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009490:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009494:	3302      	adds	r3, #2
 8009496:	e7c7      	b.n	8009428 <_printf_common+0x58>
 8009498:	2301      	movs	r3, #1
 800949a:	4622      	mov	r2, r4
 800949c:	4649      	mov	r1, r9
 800949e:	4638      	mov	r0, r7
 80094a0:	47c0      	blx	r8
 80094a2:	3001      	adds	r0, #1
 80094a4:	d0e6      	beq.n	8009474 <_printf_common+0xa4>
 80094a6:	3601      	adds	r6, #1
 80094a8:	e7d9      	b.n	800945e <_printf_common+0x8e>
	...

080094ac <_printf_i>:
 80094ac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80094b0:	7e0f      	ldrb	r7, [r1, #24]
 80094b2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80094b4:	2f78      	cmp	r7, #120	; 0x78
 80094b6:	4691      	mov	r9, r2
 80094b8:	4680      	mov	r8, r0
 80094ba:	460c      	mov	r4, r1
 80094bc:	469a      	mov	sl, r3
 80094be:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80094c2:	d807      	bhi.n	80094d4 <_printf_i+0x28>
 80094c4:	2f62      	cmp	r7, #98	; 0x62
 80094c6:	d80a      	bhi.n	80094de <_printf_i+0x32>
 80094c8:	2f00      	cmp	r7, #0
 80094ca:	f000 80d8 	beq.w	800967e <_printf_i+0x1d2>
 80094ce:	2f58      	cmp	r7, #88	; 0x58
 80094d0:	f000 80a3 	beq.w	800961a <_printf_i+0x16e>
 80094d4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80094d8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80094dc:	e03a      	b.n	8009554 <_printf_i+0xa8>
 80094de:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80094e2:	2b15      	cmp	r3, #21
 80094e4:	d8f6      	bhi.n	80094d4 <_printf_i+0x28>
 80094e6:	a101      	add	r1, pc, #4	; (adr r1, 80094ec <_printf_i+0x40>)
 80094e8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80094ec:	08009545 	.word	0x08009545
 80094f0:	08009559 	.word	0x08009559
 80094f4:	080094d5 	.word	0x080094d5
 80094f8:	080094d5 	.word	0x080094d5
 80094fc:	080094d5 	.word	0x080094d5
 8009500:	080094d5 	.word	0x080094d5
 8009504:	08009559 	.word	0x08009559
 8009508:	080094d5 	.word	0x080094d5
 800950c:	080094d5 	.word	0x080094d5
 8009510:	080094d5 	.word	0x080094d5
 8009514:	080094d5 	.word	0x080094d5
 8009518:	08009665 	.word	0x08009665
 800951c:	08009589 	.word	0x08009589
 8009520:	08009647 	.word	0x08009647
 8009524:	080094d5 	.word	0x080094d5
 8009528:	080094d5 	.word	0x080094d5
 800952c:	08009687 	.word	0x08009687
 8009530:	080094d5 	.word	0x080094d5
 8009534:	08009589 	.word	0x08009589
 8009538:	080094d5 	.word	0x080094d5
 800953c:	080094d5 	.word	0x080094d5
 8009540:	0800964f 	.word	0x0800964f
 8009544:	682b      	ldr	r3, [r5, #0]
 8009546:	1d1a      	adds	r2, r3, #4
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	602a      	str	r2, [r5, #0]
 800954c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009550:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009554:	2301      	movs	r3, #1
 8009556:	e0a3      	b.n	80096a0 <_printf_i+0x1f4>
 8009558:	6820      	ldr	r0, [r4, #0]
 800955a:	6829      	ldr	r1, [r5, #0]
 800955c:	0606      	lsls	r6, r0, #24
 800955e:	f101 0304 	add.w	r3, r1, #4
 8009562:	d50a      	bpl.n	800957a <_printf_i+0xce>
 8009564:	680e      	ldr	r6, [r1, #0]
 8009566:	602b      	str	r3, [r5, #0]
 8009568:	2e00      	cmp	r6, #0
 800956a:	da03      	bge.n	8009574 <_printf_i+0xc8>
 800956c:	232d      	movs	r3, #45	; 0x2d
 800956e:	4276      	negs	r6, r6
 8009570:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009574:	485e      	ldr	r0, [pc, #376]	; (80096f0 <_printf_i+0x244>)
 8009576:	230a      	movs	r3, #10
 8009578:	e019      	b.n	80095ae <_printf_i+0x102>
 800957a:	680e      	ldr	r6, [r1, #0]
 800957c:	602b      	str	r3, [r5, #0]
 800957e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009582:	bf18      	it	ne
 8009584:	b236      	sxthne	r6, r6
 8009586:	e7ef      	b.n	8009568 <_printf_i+0xbc>
 8009588:	682b      	ldr	r3, [r5, #0]
 800958a:	6820      	ldr	r0, [r4, #0]
 800958c:	1d19      	adds	r1, r3, #4
 800958e:	6029      	str	r1, [r5, #0]
 8009590:	0601      	lsls	r1, r0, #24
 8009592:	d501      	bpl.n	8009598 <_printf_i+0xec>
 8009594:	681e      	ldr	r6, [r3, #0]
 8009596:	e002      	b.n	800959e <_printf_i+0xf2>
 8009598:	0646      	lsls	r6, r0, #25
 800959a:	d5fb      	bpl.n	8009594 <_printf_i+0xe8>
 800959c:	881e      	ldrh	r6, [r3, #0]
 800959e:	4854      	ldr	r0, [pc, #336]	; (80096f0 <_printf_i+0x244>)
 80095a0:	2f6f      	cmp	r7, #111	; 0x6f
 80095a2:	bf0c      	ite	eq
 80095a4:	2308      	moveq	r3, #8
 80095a6:	230a      	movne	r3, #10
 80095a8:	2100      	movs	r1, #0
 80095aa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80095ae:	6865      	ldr	r5, [r4, #4]
 80095b0:	60a5      	str	r5, [r4, #8]
 80095b2:	2d00      	cmp	r5, #0
 80095b4:	bfa2      	ittt	ge
 80095b6:	6821      	ldrge	r1, [r4, #0]
 80095b8:	f021 0104 	bicge.w	r1, r1, #4
 80095bc:	6021      	strge	r1, [r4, #0]
 80095be:	b90e      	cbnz	r6, 80095c4 <_printf_i+0x118>
 80095c0:	2d00      	cmp	r5, #0
 80095c2:	d04d      	beq.n	8009660 <_printf_i+0x1b4>
 80095c4:	4615      	mov	r5, r2
 80095c6:	fbb6 f1f3 	udiv	r1, r6, r3
 80095ca:	fb03 6711 	mls	r7, r3, r1, r6
 80095ce:	5dc7      	ldrb	r7, [r0, r7]
 80095d0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80095d4:	4637      	mov	r7, r6
 80095d6:	42bb      	cmp	r3, r7
 80095d8:	460e      	mov	r6, r1
 80095da:	d9f4      	bls.n	80095c6 <_printf_i+0x11a>
 80095dc:	2b08      	cmp	r3, #8
 80095de:	d10b      	bne.n	80095f8 <_printf_i+0x14c>
 80095e0:	6823      	ldr	r3, [r4, #0]
 80095e2:	07de      	lsls	r6, r3, #31
 80095e4:	d508      	bpl.n	80095f8 <_printf_i+0x14c>
 80095e6:	6923      	ldr	r3, [r4, #16]
 80095e8:	6861      	ldr	r1, [r4, #4]
 80095ea:	4299      	cmp	r1, r3
 80095ec:	bfde      	ittt	le
 80095ee:	2330      	movle	r3, #48	; 0x30
 80095f0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80095f4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80095f8:	1b52      	subs	r2, r2, r5
 80095fa:	6122      	str	r2, [r4, #16]
 80095fc:	f8cd a000 	str.w	sl, [sp]
 8009600:	464b      	mov	r3, r9
 8009602:	aa03      	add	r2, sp, #12
 8009604:	4621      	mov	r1, r4
 8009606:	4640      	mov	r0, r8
 8009608:	f7ff fee2 	bl	80093d0 <_printf_common>
 800960c:	3001      	adds	r0, #1
 800960e:	d14c      	bne.n	80096aa <_printf_i+0x1fe>
 8009610:	f04f 30ff 	mov.w	r0, #4294967295
 8009614:	b004      	add	sp, #16
 8009616:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800961a:	4835      	ldr	r0, [pc, #212]	; (80096f0 <_printf_i+0x244>)
 800961c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009620:	6829      	ldr	r1, [r5, #0]
 8009622:	6823      	ldr	r3, [r4, #0]
 8009624:	f851 6b04 	ldr.w	r6, [r1], #4
 8009628:	6029      	str	r1, [r5, #0]
 800962a:	061d      	lsls	r5, r3, #24
 800962c:	d514      	bpl.n	8009658 <_printf_i+0x1ac>
 800962e:	07df      	lsls	r7, r3, #31
 8009630:	bf44      	itt	mi
 8009632:	f043 0320 	orrmi.w	r3, r3, #32
 8009636:	6023      	strmi	r3, [r4, #0]
 8009638:	b91e      	cbnz	r6, 8009642 <_printf_i+0x196>
 800963a:	6823      	ldr	r3, [r4, #0]
 800963c:	f023 0320 	bic.w	r3, r3, #32
 8009640:	6023      	str	r3, [r4, #0]
 8009642:	2310      	movs	r3, #16
 8009644:	e7b0      	b.n	80095a8 <_printf_i+0xfc>
 8009646:	6823      	ldr	r3, [r4, #0]
 8009648:	f043 0320 	orr.w	r3, r3, #32
 800964c:	6023      	str	r3, [r4, #0]
 800964e:	2378      	movs	r3, #120	; 0x78
 8009650:	4828      	ldr	r0, [pc, #160]	; (80096f4 <_printf_i+0x248>)
 8009652:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009656:	e7e3      	b.n	8009620 <_printf_i+0x174>
 8009658:	0659      	lsls	r1, r3, #25
 800965a:	bf48      	it	mi
 800965c:	b2b6      	uxthmi	r6, r6
 800965e:	e7e6      	b.n	800962e <_printf_i+0x182>
 8009660:	4615      	mov	r5, r2
 8009662:	e7bb      	b.n	80095dc <_printf_i+0x130>
 8009664:	682b      	ldr	r3, [r5, #0]
 8009666:	6826      	ldr	r6, [r4, #0]
 8009668:	6961      	ldr	r1, [r4, #20]
 800966a:	1d18      	adds	r0, r3, #4
 800966c:	6028      	str	r0, [r5, #0]
 800966e:	0635      	lsls	r5, r6, #24
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	d501      	bpl.n	8009678 <_printf_i+0x1cc>
 8009674:	6019      	str	r1, [r3, #0]
 8009676:	e002      	b.n	800967e <_printf_i+0x1d2>
 8009678:	0670      	lsls	r0, r6, #25
 800967a:	d5fb      	bpl.n	8009674 <_printf_i+0x1c8>
 800967c:	8019      	strh	r1, [r3, #0]
 800967e:	2300      	movs	r3, #0
 8009680:	6123      	str	r3, [r4, #16]
 8009682:	4615      	mov	r5, r2
 8009684:	e7ba      	b.n	80095fc <_printf_i+0x150>
 8009686:	682b      	ldr	r3, [r5, #0]
 8009688:	1d1a      	adds	r2, r3, #4
 800968a:	602a      	str	r2, [r5, #0]
 800968c:	681d      	ldr	r5, [r3, #0]
 800968e:	6862      	ldr	r2, [r4, #4]
 8009690:	2100      	movs	r1, #0
 8009692:	4628      	mov	r0, r5
 8009694:	f7f6 fda4 	bl	80001e0 <memchr>
 8009698:	b108      	cbz	r0, 800969e <_printf_i+0x1f2>
 800969a:	1b40      	subs	r0, r0, r5
 800969c:	6060      	str	r0, [r4, #4]
 800969e:	6863      	ldr	r3, [r4, #4]
 80096a0:	6123      	str	r3, [r4, #16]
 80096a2:	2300      	movs	r3, #0
 80096a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80096a8:	e7a8      	b.n	80095fc <_printf_i+0x150>
 80096aa:	6923      	ldr	r3, [r4, #16]
 80096ac:	462a      	mov	r2, r5
 80096ae:	4649      	mov	r1, r9
 80096b0:	4640      	mov	r0, r8
 80096b2:	47d0      	blx	sl
 80096b4:	3001      	adds	r0, #1
 80096b6:	d0ab      	beq.n	8009610 <_printf_i+0x164>
 80096b8:	6823      	ldr	r3, [r4, #0]
 80096ba:	079b      	lsls	r3, r3, #30
 80096bc:	d413      	bmi.n	80096e6 <_printf_i+0x23a>
 80096be:	68e0      	ldr	r0, [r4, #12]
 80096c0:	9b03      	ldr	r3, [sp, #12]
 80096c2:	4298      	cmp	r0, r3
 80096c4:	bfb8      	it	lt
 80096c6:	4618      	movlt	r0, r3
 80096c8:	e7a4      	b.n	8009614 <_printf_i+0x168>
 80096ca:	2301      	movs	r3, #1
 80096cc:	4632      	mov	r2, r6
 80096ce:	4649      	mov	r1, r9
 80096d0:	4640      	mov	r0, r8
 80096d2:	47d0      	blx	sl
 80096d4:	3001      	adds	r0, #1
 80096d6:	d09b      	beq.n	8009610 <_printf_i+0x164>
 80096d8:	3501      	adds	r5, #1
 80096da:	68e3      	ldr	r3, [r4, #12]
 80096dc:	9903      	ldr	r1, [sp, #12]
 80096de:	1a5b      	subs	r3, r3, r1
 80096e0:	42ab      	cmp	r3, r5
 80096e2:	dcf2      	bgt.n	80096ca <_printf_i+0x21e>
 80096e4:	e7eb      	b.n	80096be <_printf_i+0x212>
 80096e6:	2500      	movs	r5, #0
 80096e8:	f104 0619 	add.w	r6, r4, #25
 80096ec:	e7f5      	b.n	80096da <_printf_i+0x22e>
 80096ee:	bf00      	nop
 80096f0:	08009a85 	.word	0x08009a85
 80096f4:	08009a96 	.word	0x08009a96

080096f8 <memcpy>:
 80096f8:	440a      	add	r2, r1
 80096fa:	4291      	cmp	r1, r2
 80096fc:	f100 33ff 	add.w	r3, r0, #4294967295
 8009700:	d100      	bne.n	8009704 <memcpy+0xc>
 8009702:	4770      	bx	lr
 8009704:	b510      	push	{r4, lr}
 8009706:	f811 4b01 	ldrb.w	r4, [r1], #1
 800970a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800970e:	4291      	cmp	r1, r2
 8009710:	d1f9      	bne.n	8009706 <memcpy+0xe>
 8009712:	bd10      	pop	{r4, pc}

08009714 <memmove>:
 8009714:	4288      	cmp	r0, r1
 8009716:	b510      	push	{r4, lr}
 8009718:	eb01 0402 	add.w	r4, r1, r2
 800971c:	d902      	bls.n	8009724 <memmove+0x10>
 800971e:	4284      	cmp	r4, r0
 8009720:	4623      	mov	r3, r4
 8009722:	d807      	bhi.n	8009734 <memmove+0x20>
 8009724:	1e43      	subs	r3, r0, #1
 8009726:	42a1      	cmp	r1, r4
 8009728:	d008      	beq.n	800973c <memmove+0x28>
 800972a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800972e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009732:	e7f8      	b.n	8009726 <memmove+0x12>
 8009734:	4402      	add	r2, r0
 8009736:	4601      	mov	r1, r0
 8009738:	428a      	cmp	r2, r1
 800973a:	d100      	bne.n	800973e <memmove+0x2a>
 800973c:	bd10      	pop	{r4, pc}
 800973e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009742:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009746:	e7f7      	b.n	8009738 <memmove+0x24>

08009748 <_free_r>:
 8009748:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800974a:	2900      	cmp	r1, #0
 800974c:	d044      	beq.n	80097d8 <_free_r+0x90>
 800974e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009752:	9001      	str	r0, [sp, #4]
 8009754:	2b00      	cmp	r3, #0
 8009756:	f1a1 0404 	sub.w	r4, r1, #4
 800975a:	bfb8      	it	lt
 800975c:	18e4      	addlt	r4, r4, r3
 800975e:	f000 f913 	bl	8009988 <__malloc_lock>
 8009762:	4a1e      	ldr	r2, [pc, #120]	; (80097dc <_free_r+0x94>)
 8009764:	9801      	ldr	r0, [sp, #4]
 8009766:	6813      	ldr	r3, [r2, #0]
 8009768:	b933      	cbnz	r3, 8009778 <_free_r+0x30>
 800976a:	6063      	str	r3, [r4, #4]
 800976c:	6014      	str	r4, [r2, #0]
 800976e:	b003      	add	sp, #12
 8009770:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009774:	f000 b90e 	b.w	8009994 <__malloc_unlock>
 8009778:	42a3      	cmp	r3, r4
 800977a:	d908      	bls.n	800978e <_free_r+0x46>
 800977c:	6825      	ldr	r5, [r4, #0]
 800977e:	1961      	adds	r1, r4, r5
 8009780:	428b      	cmp	r3, r1
 8009782:	bf01      	itttt	eq
 8009784:	6819      	ldreq	r1, [r3, #0]
 8009786:	685b      	ldreq	r3, [r3, #4]
 8009788:	1949      	addeq	r1, r1, r5
 800978a:	6021      	streq	r1, [r4, #0]
 800978c:	e7ed      	b.n	800976a <_free_r+0x22>
 800978e:	461a      	mov	r2, r3
 8009790:	685b      	ldr	r3, [r3, #4]
 8009792:	b10b      	cbz	r3, 8009798 <_free_r+0x50>
 8009794:	42a3      	cmp	r3, r4
 8009796:	d9fa      	bls.n	800978e <_free_r+0x46>
 8009798:	6811      	ldr	r1, [r2, #0]
 800979a:	1855      	adds	r5, r2, r1
 800979c:	42a5      	cmp	r5, r4
 800979e:	d10b      	bne.n	80097b8 <_free_r+0x70>
 80097a0:	6824      	ldr	r4, [r4, #0]
 80097a2:	4421      	add	r1, r4
 80097a4:	1854      	adds	r4, r2, r1
 80097a6:	42a3      	cmp	r3, r4
 80097a8:	6011      	str	r1, [r2, #0]
 80097aa:	d1e0      	bne.n	800976e <_free_r+0x26>
 80097ac:	681c      	ldr	r4, [r3, #0]
 80097ae:	685b      	ldr	r3, [r3, #4]
 80097b0:	6053      	str	r3, [r2, #4]
 80097b2:	4421      	add	r1, r4
 80097b4:	6011      	str	r1, [r2, #0]
 80097b6:	e7da      	b.n	800976e <_free_r+0x26>
 80097b8:	d902      	bls.n	80097c0 <_free_r+0x78>
 80097ba:	230c      	movs	r3, #12
 80097bc:	6003      	str	r3, [r0, #0]
 80097be:	e7d6      	b.n	800976e <_free_r+0x26>
 80097c0:	6825      	ldr	r5, [r4, #0]
 80097c2:	1961      	adds	r1, r4, r5
 80097c4:	428b      	cmp	r3, r1
 80097c6:	bf04      	itt	eq
 80097c8:	6819      	ldreq	r1, [r3, #0]
 80097ca:	685b      	ldreq	r3, [r3, #4]
 80097cc:	6063      	str	r3, [r4, #4]
 80097ce:	bf04      	itt	eq
 80097d0:	1949      	addeq	r1, r1, r5
 80097d2:	6021      	streq	r1, [r4, #0]
 80097d4:	6054      	str	r4, [r2, #4]
 80097d6:	e7ca      	b.n	800976e <_free_r+0x26>
 80097d8:	b003      	add	sp, #12
 80097da:	bd30      	pop	{r4, r5, pc}
 80097dc:	2000182c 	.word	0x2000182c

080097e0 <sbrk_aligned>:
 80097e0:	b570      	push	{r4, r5, r6, lr}
 80097e2:	4e0e      	ldr	r6, [pc, #56]	; (800981c <sbrk_aligned+0x3c>)
 80097e4:	460c      	mov	r4, r1
 80097e6:	6831      	ldr	r1, [r6, #0]
 80097e8:	4605      	mov	r5, r0
 80097ea:	b911      	cbnz	r1, 80097f2 <sbrk_aligned+0x12>
 80097ec:	f000 f8bc 	bl	8009968 <_sbrk_r>
 80097f0:	6030      	str	r0, [r6, #0]
 80097f2:	4621      	mov	r1, r4
 80097f4:	4628      	mov	r0, r5
 80097f6:	f000 f8b7 	bl	8009968 <_sbrk_r>
 80097fa:	1c43      	adds	r3, r0, #1
 80097fc:	d00a      	beq.n	8009814 <sbrk_aligned+0x34>
 80097fe:	1cc4      	adds	r4, r0, #3
 8009800:	f024 0403 	bic.w	r4, r4, #3
 8009804:	42a0      	cmp	r0, r4
 8009806:	d007      	beq.n	8009818 <sbrk_aligned+0x38>
 8009808:	1a21      	subs	r1, r4, r0
 800980a:	4628      	mov	r0, r5
 800980c:	f000 f8ac 	bl	8009968 <_sbrk_r>
 8009810:	3001      	adds	r0, #1
 8009812:	d101      	bne.n	8009818 <sbrk_aligned+0x38>
 8009814:	f04f 34ff 	mov.w	r4, #4294967295
 8009818:	4620      	mov	r0, r4
 800981a:	bd70      	pop	{r4, r5, r6, pc}
 800981c:	20001830 	.word	0x20001830

08009820 <_malloc_r>:
 8009820:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009824:	1ccd      	adds	r5, r1, #3
 8009826:	f025 0503 	bic.w	r5, r5, #3
 800982a:	3508      	adds	r5, #8
 800982c:	2d0c      	cmp	r5, #12
 800982e:	bf38      	it	cc
 8009830:	250c      	movcc	r5, #12
 8009832:	2d00      	cmp	r5, #0
 8009834:	4607      	mov	r7, r0
 8009836:	db01      	blt.n	800983c <_malloc_r+0x1c>
 8009838:	42a9      	cmp	r1, r5
 800983a:	d905      	bls.n	8009848 <_malloc_r+0x28>
 800983c:	230c      	movs	r3, #12
 800983e:	603b      	str	r3, [r7, #0]
 8009840:	2600      	movs	r6, #0
 8009842:	4630      	mov	r0, r6
 8009844:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009848:	4e2e      	ldr	r6, [pc, #184]	; (8009904 <_malloc_r+0xe4>)
 800984a:	f000 f89d 	bl	8009988 <__malloc_lock>
 800984e:	6833      	ldr	r3, [r6, #0]
 8009850:	461c      	mov	r4, r3
 8009852:	bb34      	cbnz	r4, 80098a2 <_malloc_r+0x82>
 8009854:	4629      	mov	r1, r5
 8009856:	4638      	mov	r0, r7
 8009858:	f7ff ffc2 	bl	80097e0 <sbrk_aligned>
 800985c:	1c43      	adds	r3, r0, #1
 800985e:	4604      	mov	r4, r0
 8009860:	d14d      	bne.n	80098fe <_malloc_r+0xde>
 8009862:	6834      	ldr	r4, [r6, #0]
 8009864:	4626      	mov	r6, r4
 8009866:	2e00      	cmp	r6, #0
 8009868:	d140      	bne.n	80098ec <_malloc_r+0xcc>
 800986a:	6823      	ldr	r3, [r4, #0]
 800986c:	4631      	mov	r1, r6
 800986e:	4638      	mov	r0, r7
 8009870:	eb04 0803 	add.w	r8, r4, r3
 8009874:	f000 f878 	bl	8009968 <_sbrk_r>
 8009878:	4580      	cmp	r8, r0
 800987a:	d13a      	bne.n	80098f2 <_malloc_r+0xd2>
 800987c:	6821      	ldr	r1, [r4, #0]
 800987e:	3503      	adds	r5, #3
 8009880:	1a6d      	subs	r5, r5, r1
 8009882:	f025 0503 	bic.w	r5, r5, #3
 8009886:	3508      	adds	r5, #8
 8009888:	2d0c      	cmp	r5, #12
 800988a:	bf38      	it	cc
 800988c:	250c      	movcc	r5, #12
 800988e:	4629      	mov	r1, r5
 8009890:	4638      	mov	r0, r7
 8009892:	f7ff ffa5 	bl	80097e0 <sbrk_aligned>
 8009896:	3001      	adds	r0, #1
 8009898:	d02b      	beq.n	80098f2 <_malloc_r+0xd2>
 800989a:	6823      	ldr	r3, [r4, #0]
 800989c:	442b      	add	r3, r5
 800989e:	6023      	str	r3, [r4, #0]
 80098a0:	e00e      	b.n	80098c0 <_malloc_r+0xa0>
 80098a2:	6822      	ldr	r2, [r4, #0]
 80098a4:	1b52      	subs	r2, r2, r5
 80098a6:	d41e      	bmi.n	80098e6 <_malloc_r+0xc6>
 80098a8:	2a0b      	cmp	r2, #11
 80098aa:	d916      	bls.n	80098da <_malloc_r+0xba>
 80098ac:	1961      	adds	r1, r4, r5
 80098ae:	42a3      	cmp	r3, r4
 80098b0:	6025      	str	r5, [r4, #0]
 80098b2:	bf18      	it	ne
 80098b4:	6059      	strne	r1, [r3, #4]
 80098b6:	6863      	ldr	r3, [r4, #4]
 80098b8:	bf08      	it	eq
 80098ba:	6031      	streq	r1, [r6, #0]
 80098bc:	5162      	str	r2, [r4, r5]
 80098be:	604b      	str	r3, [r1, #4]
 80098c0:	4638      	mov	r0, r7
 80098c2:	f104 060b 	add.w	r6, r4, #11
 80098c6:	f000 f865 	bl	8009994 <__malloc_unlock>
 80098ca:	f026 0607 	bic.w	r6, r6, #7
 80098ce:	1d23      	adds	r3, r4, #4
 80098d0:	1af2      	subs	r2, r6, r3
 80098d2:	d0b6      	beq.n	8009842 <_malloc_r+0x22>
 80098d4:	1b9b      	subs	r3, r3, r6
 80098d6:	50a3      	str	r3, [r4, r2]
 80098d8:	e7b3      	b.n	8009842 <_malloc_r+0x22>
 80098da:	6862      	ldr	r2, [r4, #4]
 80098dc:	42a3      	cmp	r3, r4
 80098de:	bf0c      	ite	eq
 80098e0:	6032      	streq	r2, [r6, #0]
 80098e2:	605a      	strne	r2, [r3, #4]
 80098e4:	e7ec      	b.n	80098c0 <_malloc_r+0xa0>
 80098e6:	4623      	mov	r3, r4
 80098e8:	6864      	ldr	r4, [r4, #4]
 80098ea:	e7b2      	b.n	8009852 <_malloc_r+0x32>
 80098ec:	4634      	mov	r4, r6
 80098ee:	6876      	ldr	r6, [r6, #4]
 80098f0:	e7b9      	b.n	8009866 <_malloc_r+0x46>
 80098f2:	230c      	movs	r3, #12
 80098f4:	603b      	str	r3, [r7, #0]
 80098f6:	4638      	mov	r0, r7
 80098f8:	f000 f84c 	bl	8009994 <__malloc_unlock>
 80098fc:	e7a1      	b.n	8009842 <_malloc_r+0x22>
 80098fe:	6025      	str	r5, [r4, #0]
 8009900:	e7de      	b.n	80098c0 <_malloc_r+0xa0>
 8009902:	bf00      	nop
 8009904:	2000182c 	.word	0x2000182c

08009908 <_realloc_r>:
 8009908:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800990c:	4680      	mov	r8, r0
 800990e:	4614      	mov	r4, r2
 8009910:	460e      	mov	r6, r1
 8009912:	b921      	cbnz	r1, 800991e <_realloc_r+0x16>
 8009914:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009918:	4611      	mov	r1, r2
 800991a:	f7ff bf81 	b.w	8009820 <_malloc_r>
 800991e:	b92a      	cbnz	r2, 800992c <_realloc_r+0x24>
 8009920:	f7ff ff12 	bl	8009748 <_free_r>
 8009924:	4625      	mov	r5, r4
 8009926:	4628      	mov	r0, r5
 8009928:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800992c:	f000 f838 	bl	80099a0 <_malloc_usable_size_r>
 8009930:	4284      	cmp	r4, r0
 8009932:	4607      	mov	r7, r0
 8009934:	d802      	bhi.n	800993c <_realloc_r+0x34>
 8009936:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800993a:	d812      	bhi.n	8009962 <_realloc_r+0x5a>
 800993c:	4621      	mov	r1, r4
 800993e:	4640      	mov	r0, r8
 8009940:	f7ff ff6e 	bl	8009820 <_malloc_r>
 8009944:	4605      	mov	r5, r0
 8009946:	2800      	cmp	r0, #0
 8009948:	d0ed      	beq.n	8009926 <_realloc_r+0x1e>
 800994a:	42bc      	cmp	r4, r7
 800994c:	4622      	mov	r2, r4
 800994e:	4631      	mov	r1, r6
 8009950:	bf28      	it	cs
 8009952:	463a      	movcs	r2, r7
 8009954:	f7ff fed0 	bl	80096f8 <memcpy>
 8009958:	4631      	mov	r1, r6
 800995a:	4640      	mov	r0, r8
 800995c:	f7ff fef4 	bl	8009748 <_free_r>
 8009960:	e7e1      	b.n	8009926 <_realloc_r+0x1e>
 8009962:	4635      	mov	r5, r6
 8009964:	e7df      	b.n	8009926 <_realloc_r+0x1e>
	...

08009968 <_sbrk_r>:
 8009968:	b538      	push	{r3, r4, r5, lr}
 800996a:	4d06      	ldr	r5, [pc, #24]	; (8009984 <_sbrk_r+0x1c>)
 800996c:	2300      	movs	r3, #0
 800996e:	4604      	mov	r4, r0
 8009970:	4608      	mov	r0, r1
 8009972:	602b      	str	r3, [r5, #0]
 8009974:	f7f6 ff7a 	bl	800086c <_sbrk>
 8009978:	1c43      	adds	r3, r0, #1
 800997a:	d102      	bne.n	8009982 <_sbrk_r+0x1a>
 800997c:	682b      	ldr	r3, [r5, #0]
 800997e:	b103      	cbz	r3, 8009982 <_sbrk_r+0x1a>
 8009980:	6023      	str	r3, [r4, #0]
 8009982:	bd38      	pop	{r3, r4, r5, pc}
 8009984:	20001834 	.word	0x20001834

08009988 <__malloc_lock>:
 8009988:	4801      	ldr	r0, [pc, #4]	; (8009990 <__malloc_lock+0x8>)
 800998a:	f000 b811 	b.w	80099b0 <__retarget_lock_acquire_recursive>
 800998e:	bf00      	nop
 8009990:	20001838 	.word	0x20001838

08009994 <__malloc_unlock>:
 8009994:	4801      	ldr	r0, [pc, #4]	; (800999c <__malloc_unlock+0x8>)
 8009996:	f000 b80c 	b.w	80099b2 <__retarget_lock_release_recursive>
 800999a:	bf00      	nop
 800999c:	20001838 	.word	0x20001838

080099a0 <_malloc_usable_size_r>:
 80099a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80099a4:	1f18      	subs	r0, r3, #4
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	bfbc      	itt	lt
 80099aa:	580b      	ldrlt	r3, [r1, r0]
 80099ac:	18c0      	addlt	r0, r0, r3
 80099ae:	4770      	bx	lr

080099b0 <__retarget_lock_acquire_recursive>:
 80099b0:	4770      	bx	lr

080099b2 <__retarget_lock_release_recursive>:
 80099b2:	4770      	bx	lr

080099b4 <_init>:
 80099b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80099b6:	bf00      	nop
 80099b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80099ba:	bc08      	pop	{r3}
 80099bc:	469e      	mov	lr, r3
 80099be:	4770      	bx	lr

080099c0 <_fini>:
 80099c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80099c2:	bf00      	nop
 80099c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80099c6:	bc08      	pop	{r3}
 80099c8:	469e      	mov	lr, r3
 80099ca:	4770      	bx	lr
