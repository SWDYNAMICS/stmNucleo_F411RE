
stmf411re_fw.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006644  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  080067dc  080067dc  000167dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006844  08006844  000201a8  2**0
                  CONTENTS
  4 .ARM          00000008  08006844  08006844  00016844  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800684c  0800684c  000201a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800684c  0800684c  0001684c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006850  08006850  00016850  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001a8  20000000  08006854  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001524  200001a8  080069fc  000201a8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200016cc  080069fc  000216cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201a8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000dde6  00000000  00000000  000201d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c6b  00000000  00000000  0002dfbe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bc8  00000000  00000000  00030c30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a50  00000000  00000000  000317f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001969b  00000000  00000000  00032248  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014b03  00000000  00000000  0004b8e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00086eda  00000000  00000000  000603e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e72c0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002d70  00000000  00000000  000e7310  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	200001a8 	.word	0x200001a8
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080067c4 	.word	0x080067c4

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	200001ac 	.word	0x200001ac
 80001d4:	080067c4 	.word	0x080067c4

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b974 	b.w	80004d8 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468e      	mov	lr, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14d      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000216:	428a      	cmp	r2, r1
 8000218:	4694      	mov	ip, r2
 800021a:	d969      	bls.n	80002f0 <__udivmoddi4+0xe8>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b152      	cbz	r2, 8000238 <__udivmoddi4+0x30>
 8000222:	fa01 f302 	lsl.w	r3, r1, r2
 8000226:	f1c2 0120 	rsb	r1, r2, #32
 800022a:	fa20 f101 	lsr.w	r1, r0, r1
 800022e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000232:	ea41 0e03 	orr.w	lr, r1, r3
 8000236:	4094      	lsls	r4, r2
 8000238:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800023c:	0c21      	lsrs	r1, r4, #16
 800023e:	fbbe f6f8 	udiv	r6, lr, r8
 8000242:	fa1f f78c 	uxth.w	r7, ip
 8000246:	fb08 e316 	mls	r3, r8, r6, lr
 800024a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024e:	fb06 f107 	mul.w	r1, r6, r7
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f106 30ff 	add.w	r0, r6, #4294967295
 800025e:	f080 811f 	bcs.w	80004a0 <__udivmoddi4+0x298>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 811c 	bls.w	80004a0 <__udivmoddi4+0x298>
 8000268:	3e02      	subs	r6, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a5b      	subs	r3, r3, r1
 800026e:	b2a4      	uxth	r4, r4
 8000270:	fbb3 f0f8 	udiv	r0, r3, r8
 8000274:	fb08 3310 	mls	r3, r8, r0, r3
 8000278:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800027c:	fb00 f707 	mul.w	r7, r0, r7
 8000280:	42a7      	cmp	r7, r4
 8000282:	d90a      	bls.n	800029a <__udivmoddi4+0x92>
 8000284:	eb1c 0404 	adds.w	r4, ip, r4
 8000288:	f100 33ff 	add.w	r3, r0, #4294967295
 800028c:	f080 810a 	bcs.w	80004a4 <__udivmoddi4+0x29c>
 8000290:	42a7      	cmp	r7, r4
 8000292:	f240 8107 	bls.w	80004a4 <__udivmoddi4+0x29c>
 8000296:	4464      	add	r4, ip
 8000298:	3802      	subs	r0, #2
 800029a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800029e:	1be4      	subs	r4, r4, r7
 80002a0:	2600      	movs	r6, #0
 80002a2:	b11d      	cbz	r5, 80002ac <__udivmoddi4+0xa4>
 80002a4:	40d4      	lsrs	r4, r2
 80002a6:	2300      	movs	r3, #0
 80002a8:	e9c5 4300 	strd	r4, r3, [r5]
 80002ac:	4631      	mov	r1, r6
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d909      	bls.n	80002ca <__udivmoddi4+0xc2>
 80002b6:	2d00      	cmp	r5, #0
 80002b8:	f000 80ef 	beq.w	800049a <__udivmoddi4+0x292>
 80002bc:	2600      	movs	r6, #0
 80002be:	e9c5 0100 	strd	r0, r1, [r5]
 80002c2:	4630      	mov	r0, r6
 80002c4:	4631      	mov	r1, r6
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	fab3 f683 	clz	r6, r3
 80002ce:	2e00      	cmp	r6, #0
 80002d0:	d14a      	bne.n	8000368 <__udivmoddi4+0x160>
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xd4>
 80002d6:	4282      	cmp	r2, r0
 80002d8:	f200 80f9 	bhi.w	80004ce <__udivmoddi4+0x2c6>
 80002dc:	1a84      	subs	r4, r0, r2
 80002de:	eb61 0303 	sbc.w	r3, r1, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	469e      	mov	lr, r3
 80002e6:	2d00      	cmp	r5, #0
 80002e8:	d0e0      	beq.n	80002ac <__udivmoddi4+0xa4>
 80002ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80002ee:	e7dd      	b.n	80002ac <__udivmoddi4+0xa4>
 80002f0:	b902      	cbnz	r2, 80002f4 <__udivmoddi4+0xec>
 80002f2:	deff      	udf	#255	; 0xff
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	2a00      	cmp	r2, #0
 80002fa:	f040 8092 	bne.w	8000422 <__udivmoddi4+0x21a>
 80002fe:	eba1 010c 	sub.w	r1, r1, ip
 8000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000306:	fa1f fe8c 	uxth.w	lr, ip
 800030a:	2601      	movs	r6, #1
 800030c:	0c20      	lsrs	r0, r4, #16
 800030e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000312:	fb07 1113 	mls	r1, r7, r3, r1
 8000316:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800031a:	fb0e f003 	mul.w	r0, lr, r3
 800031e:	4288      	cmp	r0, r1
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x12c>
 8000322:	eb1c 0101 	adds.w	r1, ip, r1
 8000326:	f103 38ff 	add.w	r8, r3, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x12a>
 800032c:	4288      	cmp	r0, r1
 800032e:	f200 80cb 	bhi.w	80004c8 <__udivmoddi4+0x2c0>
 8000332:	4643      	mov	r3, r8
 8000334:	1a09      	subs	r1, r1, r0
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb1 f0f7 	udiv	r0, r1, r7
 800033c:	fb07 1110 	mls	r1, r7, r0, r1
 8000340:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000344:	fb0e fe00 	mul.w	lr, lr, r0
 8000348:	45a6      	cmp	lr, r4
 800034a:	d908      	bls.n	800035e <__udivmoddi4+0x156>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 31ff 	add.w	r1, r0, #4294967295
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x154>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f200 80bb 	bhi.w	80004d2 <__udivmoddi4+0x2ca>
 800035c:	4608      	mov	r0, r1
 800035e:	eba4 040e 	sub.w	r4, r4, lr
 8000362:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000366:	e79c      	b.n	80002a2 <__udivmoddi4+0x9a>
 8000368:	f1c6 0720 	rsb	r7, r6, #32
 800036c:	40b3      	lsls	r3, r6
 800036e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000372:	ea4c 0c03 	orr.w	ip, ip, r3
 8000376:	fa20 f407 	lsr.w	r4, r0, r7
 800037a:	fa01 f306 	lsl.w	r3, r1, r6
 800037e:	431c      	orrs	r4, r3
 8000380:	40f9      	lsrs	r1, r7
 8000382:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000386:	fa00 f306 	lsl.w	r3, r0, r6
 800038a:	fbb1 f8f9 	udiv	r8, r1, r9
 800038e:	0c20      	lsrs	r0, r4, #16
 8000390:	fa1f fe8c 	uxth.w	lr, ip
 8000394:	fb09 1118 	mls	r1, r9, r8, r1
 8000398:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800039c:	fb08 f00e 	mul.w	r0, r8, lr
 80003a0:	4288      	cmp	r0, r1
 80003a2:	fa02 f206 	lsl.w	r2, r2, r6
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b8>
 80003a8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b0:	f080 8088 	bcs.w	80004c4 <__udivmoddi4+0x2bc>
 80003b4:	4288      	cmp	r0, r1
 80003b6:	f240 8085 	bls.w	80004c4 <__udivmoddi4+0x2bc>
 80003ba:	f1a8 0802 	sub.w	r8, r8, #2
 80003be:	4461      	add	r1, ip
 80003c0:	1a09      	subs	r1, r1, r0
 80003c2:	b2a4      	uxth	r4, r4
 80003c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c8:	fb09 1110 	mls	r1, r9, r0, r1
 80003cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d4:	458e      	cmp	lr, r1
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1e2>
 80003d8:	eb1c 0101 	adds.w	r1, ip, r1
 80003dc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003e0:	d26c      	bcs.n	80004bc <__udivmoddi4+0x2b4>
 80003e2:	458e      	cmp	lr, r1
 80003e4:	d96a      	bls.n	80004bc <__udivmoddi4+0x2b4>
 80003e6:	3802      	subs	r0, #2
 80003e8:	4461      	add	r1, ip
 80003ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ee:	fba0 9402 	umull	r9, r4, r0, r2
 80003f2:	eba1 010e 	sub.w	r1, r1, lr
 80003f6:	42a1      	cmp	r1, r4
 80003f8:	46c8      	mov	r8, r9
 80003fa:	46a6      	mov	lr, r4
 80003fc:	d356      	bcc.n	80004ac <__udivmoddi4+0x2a4>
 80003fe:	d053      	beq.n	80004a8 <__udivmoddi4+0x2a0>
 8000400:	b15d      	cbz	r5, 800041a <__udivmoddi4+0x212>
 8000402:	ebb3 0208 	subs.w	r2, r3, r8
 8000406:	eb61 010e 	sbc.w	r1, r1, lr
 800040a:	fa01 f707 	lsl.w	r7, r1, r7
 800040e:	fa22 f306 	lsr.w	r3, r2, r6
 8000412:	40f1      	lsrs	r1, r6
 8000414:	431f      	orrs	r7, r3
 8000416:	e9c5 7100 	strd	r7, r1, [r5]
 800041a:	2600      	movs	r6, #0
 800041c:	4631      	mov	r1, r6
 800041e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000422:	f1c2 0320 	rsb	r3, r2, #32
 8000426:	40d8      	lsrs	r0, r3
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	fa21 f303 	lsr.w	r3, r1, r3
 8000430:	4091      	lsls	r1, r2
 8000432:	4301      	orrs	r1, r0
 8000434:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000440:	fb07 3610 	mls	r6, r7, r0, r3
 8000444:	0c0b      	lsrs	r3, r1, #16
 8000446:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800044a:	fb00 f60e 	mul.w	r6, r0, lr
 800044e:	429e      	cmp	r6, r3
 8000450:	fa04 f402 	lsl.w	r4, r4, r2
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x260>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 38ff 	add.w	r8, r0, #4294967295
 800045e:	d22f      	bcs.n	80004c0 <__udivmoddi4+0x2b8>
 8000460:	429e      	cmp	r6, r3
 8000462:	d92d      	bls.n	80004c0 <__udivmoddi4+0x2b8>
 8000464:	3802      	subs	r0, #2
 8000466:	4463      	add	r3, ip
 8000468:	1b9b      	subs	r3, r3, r6
 800046a:	b289      	uxth	r1, r1
 800046c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000470:	fb07 3316 	mls	r3, r7, r6, r3
 8000474:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000478:	fb06 f30e 	mul.w	r3, r6, lr
 800047c:	428b      	cmp	r3, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x28a>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f106 38ff 	add.w	r8, r6, #4294967295
 8000488:	d216      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 800048a:	428b      	cmp	r3, r1
 800048c:	d914      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800048e:	3e02      	subs	r6, #2
 8000490:	4461      	add	r1, ip
 8000492:	1ac9      	subs	r1, r1, r3
 8000494:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000498:	e738      	b.n	800030c <__udivmoddi4+0x104>
 800049a:	462e      	mov	r6, r5
 800049c:	4628      	mov	r0, r5
 800049e:	e705      	b.n	80002ac <__udivmoddi4+0xa4>
 80004a0:	4606      	mov	r6, r0
 80004a2:	e6e3      	b.n	800026c <__udivmoddi4+0x64>
 80004a4:	4618      	mov	r0, r3
 80004a6:	e6f8      	b.n	800029a <__udivmoddi4+0x92>
 80004a8:	454b      	cmp	r3, r9
 80004aa:	d2a9      	bcs.n	8000400 <__udivmoddi4+0x1f8>
 80004ac:	ebb9 0802 	subs.w	r8, r9, r2
 80004b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b4:	3801      	subs	r0, #1
 80004b6:	e7a3      	b.n	8000400 <__udivmoddi4+0x1f8>
 80004b8:	4646      	mov	r6, r8
 80004ba:	e7ea      	b.n	8000492 <__udivmoddi4+0x28a>
 80004bc:	4620      	mov	r0, r4
 80004be:	e794      	b.n	80003ea <__udivmoddi4+0x1e2>
 80004c0:	4640      	mov	r0, r8
 80004c2:	e7d1      	b.n	8000468 <__udivmoddi4+0x260>
 80004c4:	46d0      	mov	r8, sl
 80004c6:	e77b      	b.n	80003c0 <__udivmoddi4+0x1b8>
 80004c8:	3b02      	subs	r3, #2
 80004ca:	4461      	add	r1, ip
 80004cc:	e732      	b.n	8000334 <__udivmoddi4+0x12c>
 80004ce:	4630      	mov	r0, r6
 80004d0:	e709      	b.n	80002e6 <__udivmoddi4+0xde>
 80004d2:	4464      	add	r4, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e742      	b.n	800035e <__udivmoddi4+0x156>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <apInit>:
extern uint8_t cdcRead(void);
extern void cdcDataIn(uint8_t rx_data);
extern uint32_t cdcWrite(uint8_t *pData, uint32_t length);

void apInit(void)
{
 80004dc:	b480      	push	{r7}
 80004de:	af00      	add	r7, sp, #0

}
 80004e0:	bf00      	nop
 80004e2:	46bd      	mov	sp, r7
 80004e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e8:	4770      	bx	lr
	...

080004ec <apMain>:

void apMain(void)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	b082      	sub	sp, #8
 80004f0:	af00      	add	r7, sp, #0
	uint32_t pre_time;

	pre_time = millis();
 80004f2:	f000 f8a0 	bl	8000636 <millis>
 80004f6:	6078      	str	r0, [r7, #4]


	while (1)
	{
		if(millis() - pre_time >= 500)
 80004f8:	f000 f89d 	bl	8000636 <millis>
 80004fc:	4602      	mov	r2, r0
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	1ad3      	subs	r3, r2, r3
 8000502:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000506:	d305      	bcc.n	8000514 <apMain+0x28>
		{
			pre_time = millis();
 8000508:	f000 f895 	bl	8000636 <millis>
 800050c:	6078      	str	r0, [r7, #4]
			ledToggle(_DEF_LED1);
 800050e:	2000      	movs	r0, #0
 8000510:	f000 fa16 	bl	8000940 <ledToggle>
		}

		if(cdcAvailable() > 0 )
 8000514:	f005 fb88 	bl	8005c28 <cdcAvailable>
 8000518:	4603      	mov	r3, r0
 800051a:	2b00      	cmp	r3, #0
 800051c:	d0ec      	beq.n	80004f8 <apMain+0xc>
		{
			uint8_t rx_data;
			rx_data = cdcRead();
 800051e:	f005 fba1 	bl	8005c64 <cdcRead>
 8000522:	4603      	mov	r3, r0
 8000524:	70fb      	strb	r3, [r7, #3]
			cdcWrite((uint8_t *)"RXDATA: ", 7);
 8000526:	2107      	movs	r1, #7
 8000528:	4806      	ldr	r0, [pc, #24]	; (8000544 <apMain+0x58>)
 800052a:	f005 fbf7 	bl	8005d1c <cdcWrite>
			cdcWrite(&rx_data, 1);
 800052e:	1cfb      	adds	r3, r7, #3
 8000530:	2101      	movs	r1, #1
 8000532:	4618      	mov	r0, r3
 8000534:	f005 fbf2 	bl	8005d1c <cdcWrite>
			cdcWrite((uint8_t *)"\n",2);
 8000538:	2102      	movs	r1, #2
 800053a:	4803      	ldr	r0, [pc, #12]	; (8000548 <apMain+0x5c>)
 800053c:	f005 fbee 	bl	8005d1c <cdcWrite>
		if(millis() - pre_time >= 500)
 8000540:	e7da      	b.n	80004f8 <apMain+0xc>
 8000542:	bf00      	nop
 8000544:	080067dc 	.word	0x080067dc
 8000548:	080067e8 	.word	0x080067e8

0800054c <bspInit>:

#include "bsp.h"
void SystemClock_Config(void);

void bspInit(void)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	b088      	sub	sp, #32
 8000550:	af00      	add	r7, sp, #0
  HAL_Init();
 8000552:	f000 fa1d 	bl	8000990 <HAL_Init>
  SystemClock_Config();
 8000556:	f000 f875 	bl	8000644 <SystemClock_Config>

  __HAL_RCC_GPIOC_CLK_ENABLE();
 800055a:	2300      	movs	r3, #0
 800055c:	60bb      	str	r3, [r7, #8]
 800055e:	4b2e      	ldr	r3, [pc, #184]	; (8000618 <bspInit+0xcc>)
 8000560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000562:	4a2d      	ldr	r2, [pc, #180]	; (8000618 <bspInit+0xcc>)
 8000564:	f043 0304 	orr.w	r3, r3, #4
 8000568:	6313      	str	r3, [r2, #48]	; 0x30
 800056a:	4b2b      	ldr	r3, [pc, #172]	; (8000618 <bspInit+0xcc>)
 800056c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800056e:	f003 0304 	and.w	r3, r3, #4
 8000572:	60bb      	str	r3, [r7, #8]
 8000574:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000576:	2300      	movs	r3, #0
 8000578:	607b      	str	r3, [r7, #4]
 800057a:	4b27      	ldr	r3, [pc, #156]	; (8000618 <bspInit+0xcc>)
 800057c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800057e:	4a26      	ldr	r2, [pc, #152]	; (8000618 <bspInit+0xcc>)
 8000580:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000584:	6313      	str	r3, [r2, #48]	; 0x30
 8000586:	4b24      	ldr	r3, [pc, #144]	; (8000618 <bspInit+0xcc>)
 8000588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800058a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800058e:	607b      	str	r3, [r7, #4]
 8000590:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000592:	2300      	movs	r3, #0
 8000594:	603b      	str	r3, [r7, #0]
 8000596:	4b20      	ldr	r3, [pc, #128]	; (8000618 <bspInit+0xcc>)
 8000598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800059a:	4a1f      	ldr	r2, [pc, #124]	; (8000618 <bspInit+0xcc>)
 800059c:	f043 0301 	orr.w	r3, r3, #1
 80005a0:	6313      	str	r3, [r2, #48]	; 0x30
 80005a2:	4b1d      	ldr	r3, [pc, #116]	; (8000618 <bspInit+0xcc>)
 80005a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005a6:	f003 0301 	and.w	r3, r3, #1
 80005aa:	603b      	str	r3, [r7, #0]
 80005ac:	683b      	ldr	r3, [r7, #0]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005ae:	f107 030c 	add.w	r3, r7, #12
 80005b2:	2200      	movs	r2, #0
 80005b4:	601a      	str	r2, [r3, #0]
 80005b6:	605a      	str	r2, [r3, #4]
 80005b8:	609a      	str	r2, [r3, #8]
 80005ba:	60da      	str	r2, [r3, #12]
 80005bc:	611a      	str	r2, [r3, #16]

	GPIO_InitStruct.Pin = GPIO_PIN_12;
 80005be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005c2:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80005c4:	2311      	movs	r3, #17
 80005c6:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005c8:	2300      	movs	r3, #0
 80005ca:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005cc:	2300      	movs	r3, #0
 80005ce:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005d0:	f107 030c 	add.w	r3, r7, #12
 80005d4:	4619      	mov	r1, r3
 80005d6:	4811      	ldr	r0, [pc, #68]	; (800061c <bspInit+0xd0>)
 80005d8:	f000 fb82 	bl	8000ce0 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 80005dc:	2200      	movs	r2, #0
 80005de:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005e2:	480e      	ldr	r0, [pc, #56]	; (800061c <bspInit+0xd0>)
 80005e4:	f000 fd00 	bl	8000fe8 <HAL_GPIO_WritePin>
	delay(100);
 80005e8:	2064      	movs	r0, #100	; 0x64
 80005ea:	f000 f819 	bl	8000620 <delay>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 80005ee:	2201      	movs	r2, #1
 80005f0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005f4:	4809      	ldr	r0, [pc, #36]	; (800061c <bspInit+0xd0>)
 80005f6:	f000 fcf7 	bl	8000fe8 <HAL_GPIO_WritePin>

	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005fa:	2300      	movs	r3, #0
 80005fc:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005fe:	f107 030c 	add.w	r3, r7, #12
 8000602:	4619      	mov	r1, r3
 8000604:	4805      	ldr	r0, [pc, #20]	; (800061c <bspInit+0xd0>)
 8000606:	f000 fb6b 	bl	8000ce0 <HAL_GPIO_Init>

  MX_USB_DEVICE_Init();
 800060a:	f005 fadd 	bl	8005bc8 <MX_USB_DEVICE_Init>

}
 800060e:	bf00      	nop
 8000610:	3720      	adds	r7, #32
 8000612:	46bd      	mov	sp, r7
 8000614:	bd80      	pop	{r7, pc}
 8000616:	bf00      	nop
 8000618:	40023800 	.word	0x40023800
 800061c:	40020000 	.word	0x40020000

08000620 <delay>:
void delay(uint32_t ms)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b082      	sub	sp, #8
 8000624:	af00      	add	r7, sp, #0
 8000626:	6078      	str	r0, [r7, #4]
  HAL_Delay(ms);
 8000628:	6878      	ldr	r0, [r7, #4]
 800062a:	f000 fa23 	bl	8000a74 <HAL_Delay>
}
 800062e:	bf00      	nop
 8000630:	3708      	adds	r7, #8
 8000632:	46bd      	mov	sp, r7
 8000634:	bd80      	pop	{r7, pc}

08000636 <millis>:
uint32_t millis(void)
{
 8000636:	b580      	push	{r7, lr}
 8000638:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800063a:	f000 fa0f 	bl	8000a5c <HAL_GetTick>
 800063e:	4603      	mov	r3, r0
}
 8000640:	4618      	mov	r0, r3
 8000642:	bd80      	pop	{r7, pc}

08000644 <SystemClock_Config>:




void SystemClock_Config(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b094      	sub	sp, #80	; 0x50
 8000648:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800064a:	f107 0320 	add.w	r3, r7, #32
 800064e:	2230      	movs	r2, #48	; 0x30
 8000650:	2100      	movs	r1, #0
 8000652:	4618      	mov	r0, r3
 8000654:	f006 f8ae 	bl	80067b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000658:	f107 030c 	add.w	r3, r7, #12
 800065c:	2200      	movs	r2, #0
 800065e:	601a      	str	r2, [r3, #0]
 8000660:	605a      	str	r2, [r3, #4]
 8000662:	609a      	str	r2, [r3, #8]
 8000664:	60da      	str	r2, [r3, #12]
 8000666:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000668:	2300      	movs	r3, #0
 800066a:	60bb      	str	r3, [r7, #8]
 800066c:	4b27      	ldr	r3, [pc, #156]	; (800070c <SystemClock_Config+0xc8>)
 800066e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000670:	4a26      	ldr	r2, [pc, #152]	; (800070c <SystemClock_Config+0xc8>)
 8000672:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000676:	6413      	str	r3, [r2, #64]	; 0x40
 8000678:	4b24      	ldr	r3, [pc, #144]	; (800070c <SystemClock_Config+0xc8>)
 800067a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800067c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000680:	60bb      	str	r3, [r7, #8]
 8000682:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000684:	2300      	movs	r3, #0
 8000686:	607b      	str	r3, [r7, #4]
 8000688:	4b21      	ldr	r3, [pc, #132]	; (8000710 <SystemClock_Config+0xcc>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	4a20      	ldr	r2, [pc, #128]	; (8000710 <SystemClock_Config+0xcc>)
 800068e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000692:	6013      	str	r3, [r2, #0]
 8000694:	4b1e      	ldr	r3, [pc, #120]	; (8000710 <SystemClock_Config+0xcc>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800069c:	607b      	str	r3, [r7, #4]
 800069e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006a0:	2301      	movs	r3, #1
 80006a2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006a4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006a8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006aa:	2302      	movs	r3, #2
 80006ac:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006ae:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80006b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80006b4:	2319      	movs	r3, #25
 80006b6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 80006b8:	23c0      	movs	r3, #192	; 0xc0
 80006ba:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006bc:	2302      	movs	r3, #2
 80006be:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80006c0:	2304      	movs	r3, #4
 80006c2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006c4:	f107 0320 	add.w	r3, r7, #32
 80006c8:	4618      	mov	r0, r3
 80006ca:	f001 fe43 	bl	8002354 <HAL_RCC_OscConfig>
 80006ce:	4603      	mov	r3, r0
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d001      	beq.n	80006d8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006d4:	f000 f81e 	bl	8000714 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006d8:	230f      	movs	r3, #15
 80006da:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006dc:	2302      	movs	r3, #2
 80006de:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006e0:	2300      	movs	r3, #0
 80006e2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006e8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006ea:	2300      	movs	r3, #0
 80006ec:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80006ee:	f107 030c 	add.w	r3, r7, #12
 80006f2:	2103      	movs	r1, #3
 80006f4:	4618      	mov	r0, r3
 80006f6:	f002 f8a5 	bl	8002844 <HAL_RCC_ClockConfig>
 80006fa:	4603      	mov	r3, r0
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d001      	beq.n	8000704 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000700:	f000 f808 	bl	8000714 <Error_Handler>
  }
}
 8000704:	bf00      	nop
 8000706:	3750      	adds	r7, #80	; 0x50
 8000708:	46bd      	mov	sp, r7
 800070a:	bd80      	pop	{r7, pc}
 800070c:	40023800 	.word	0x40023800
 8000710:	40007000 	.word	0x40007000

08000714 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000714:	b480      	push	{r7}
 8000716:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000718:	b672      	cpsid	i
}
 800071a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800071c:	e7fe      	b.n	800071c <Error_Handler+0x8>
	...

08000720 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000720:	b480      	push	{r7}
 8000722:	b083      	sub	sp, #12
 8000724:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000726:	2300      	movs	r3, #0
 8000728:	607b      	str	r3, [r7, #4]
 800072a:	4b10      	ldr	r3, [pc, #64]	; (800076c <HAL_MspInit+0x4c>)
 800072c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800072e:	4a0f      	ldr	r2, [pc, #60]	; (800076c <HAL_MspInit+0x4c>)
 8000730:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000734:	6453      	str	r3, [r2, #68]	; 0x44
 8000736:	4b0d      	ldr	r3, [pc, #52]	; (800076c <HAL_MspInit+0x4c>)
 8000738:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800073a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800073e:	607b      	str	r3, [r7, #4]
 8000740:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000742:	2300      	movs	r3, #0
 8000744:	603b      	str	r3, [r7, #0]
 8000746:	4b09      	ldr	r3, [pc, #36]	; (800076c <HAL_MspInit+0x4c>)
 8000748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800074a:	4a08      	ldr	r2, [pc, #32]	; (800076c <HAL_MspInit+0x4c>)
 800074c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000750:	6413      	str	r3, [r2, #64]	; 0x40
 8000752:	4b06      	ldr	r3, [pc, #24]	; (800076c <HAL_MspInit+0x4c>)
 8000754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000756:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800075a:	603b      	str	r3, [r7, #0]
 800075c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800075e:	bf00      	nop
 8000760:	370c      	adds	r7, #12
 8000762:	46bd      	mov	sp, r7
 8000764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000768:	4770      	bx	lr
 800076a:	bf00      	nop
 800076c:	40023800 	.word	0x40023800

08000770 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000770:	b480      	push	{r7}
 8000772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000774:	e7fe      	b.n	8000774 <NMI_Handler+0x4>

08000776 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000776:	b480      	push	{r7}
 8000778:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800077a:	e7fe      	b.n	800077a <HardFault_Handler+0x4>

0800077c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800077c:	b480      	push	{r7}
 800077e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000780:	e7fe      	b.n	8000780 <MemManage_Handler+0x4>

08000782 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000782:	b480      	push	{r7}
 8000784:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000786:	e7fe      	b.n	8000786 <BusFault_Handler+0x4>

08000788 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000788:	b480      	push	{r7}
 800078a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800078c:	e7fe      	b.n	800078c <UsageFault_Handler+0x4>

0800078e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800078e:	b480      	push	{r7}
 8000790:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000792:	bf00      	nop
 8000794:	46bd      	mov	sp, r7
 8000796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800079a:	4770      	bx	lr

0800079c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800079c:	b480      	push	{r7}
 800079e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007a0:	bf00      	nop
 80007a2:	46bd      	mov	sp, r7
 80007a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a8:	4770      	bx	lr

080007aa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007aa:	b480      	push	{r7}
 80007ac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007ae:	bf00      	nop
 80007b0:	46bd      	mov	sp, r7
 80007b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b6:	4770      	bx	lr

080007b8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007bc:	f000 f93a 	bl	8000a34 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007c0:	bf00      	nop
 80007c2:	bd80      	pop	{r7, pc}

080007c4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80007c8:	4802      	ldr	r0, [pc, #8]	; (80007d4 <OTG_FS_IRQHandler+0x10>)
 80007ca:	f000 fd90 	bl	80012ee <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80007ce:	bf00      	nop
 80007d0:	bd80      	pop	{r7, pc}
 80007d2:	bf00      	nop
 80007d4:	200010a4 	.word	0x200010a4

080007d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80007d8:	b480      	push	{r7}
 80007da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80007dc:	4b06      	ldr	r3, [pc, #24]	; (80007f8 <SystemInit+0x20>)
 80007de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80007e2:	4a05      	ldr	r2, [pc, #20]	; (80007f8 <SystemInit+0x20>)
 80007e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80007e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80007ec:	bf00      	nop
 80007ee:	46bd      	mov	sp, r7
 80007f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f4:	4770      	bx	lr
 80007f6:	bf00      	nop
 80007f8:	e000ed00 	.word	0xe000ed00

080007fc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80007fc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000834 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000800:	480d      	ldr	r0, [pc, #52]	; (8000838 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000802:	490e      	ldr	r1, [pc, #56]	; (800083c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000804:	4a0e      	ldr	r2, [pc, #56]	; (8000840 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000806:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000808:	e002      	b.n	8000810 <LoopCopyDataInit>

0800080a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800080a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800080c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800080e:	3304      	adds	r3, #4

08000810 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000810:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000812:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000814:	d3f9      	bcc.n	800080a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000816:	4a0b      	ldr	r2, [pc, #44]	; (8000844 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000818:	4c0b      	ldr	r4, [pc, #44]	; (8000848 <LoopFillZerobss+0x26>)
  movs r3, #0
 800081a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800081c:	e001      	b.n	8000822 <LoopFillZerobss>

0800081e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800081e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000820:	3204      	adds	r2, #4

08000822 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000822:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000824:	d3fb      	bcc.n	800081e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000826:	f7ff ffd7 	bl	80007d8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800082a:	f005 ff9f 	bl	800676c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800082e:	f005 ff91 	bl	8006754 <main>
  bx  lr    
 8000832:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000834:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000838:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800083c:	200001a8 	.word	0x200001a8
  ldr r2, =_sidata
 8000840:	08006854 	.word	0x08006854
  ldr r2, =_sbss
 8000844:	200001a8 	.word	0x200001a8
  ldr r4, =_ebss
 8000848:	200016cc 	.word	0x200016cc

0800084c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800084c:	e7fe      	b.n	800084c <ADC_IRQHandler>
	...

08000850 <ledInit>:
{
	{GPIOC, GPIO_PIN_13, GPIO_PIN_SET, GPIO_PIN_RESET}
};

bool ledInit(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b088      	sub	sp, #32
 8000854:	af00      	add	r7, sp, #0
	bool ret = true;
 8000856:	2301      	movs	r3, #1
 8000858:	76fb      	strb	r3, [r7, #27]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800085a:	1d3b      	adds	r3, r7, #4
 800085c:	2200      	movs	r2, #0
 800085e:	601a      	str	r2, [r3, #0]
 8000860:	605a      	str	r2, [r3, #4]
 8000862:	609a      	str	r2, [r3, #8]
 8000864:	60da      	str	r2, [r3, #12]
 8000866:	611a      	str	r2, [r3, #16]

	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000868:	2300      	movs	r3, #0
 800086a:	603b      	str	r3, [r7, #0]
 800086c:	4b1d      	ldr	r3, [pc, #116]	; (80008e4 <ledInit+0x94>)
 800086e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000870:	4a1c      	ldr	r2, [pc, #112]	; (80008e4 <ledInit+0x94>)
 8000872:	f043 0301 	orr.w	r3, r3, #1
 8000876:	6313      	str	r3, [r2, #48]	; 0x30
 8000878:	4b1a      	ldr	r3, [pc, #104]	; (80008e4 <ledInit+0x94>)
 800087a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087c:	f003 0301 	and.w	r3, r3, #1
 8000880:	603b      	str	r3, [r7, #0]
 8000882:	683b      	ldr	r3, [r7, #0]

	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000884:	2301      	movs	r3, #1
 8000886:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000888:	2300      	movs	r3, #0
 800088a:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800088c:	2300      	movs	r3, #0
 800088e:	613b      	str	r3, [r7, #16]

	for(int i = 0; i < LED_MAX_CHANNEL; i++)
 8000890:	2300      	movs	r3, #0
 8000892:	61fb      	str	r3, [r7, #28]
 8000894:	e01e      	b.n	80008d4 <ledInit+0x84>
	{
		ledOff(i);
 8000896:	69fb      	ldr	r3, [r7, #28]
 8000898:	b2db      	uxtb	r3, r3
 800089a:	4618      	mov	r0, r3
 800089c:	f000 f826 	bl	80008ec <ledOff>
		GPIO_InitStruct.Pin = led_tbl[i].pin;
 80008a0:	4911      	ldr	r1, [pc, #68]	; (80008e8 <ledInit+0x98>)
 80008a2:	69fa      	ldr	r2, [r7, #28]
 80008a4:	4613      	mov	r3, r2
 80008a6:	005b      	lsls	r3, r3, #1
 80008a8:	4413      	add	r3, r2
 80008aa:	009b      	lsls	r3, r3, #2
 80008ac:	440b      	add	r3, r1
 80008ae:	3304      	adds	r3, #4
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	607b      	str	r3, [r7, #4]
		HAL_GPIO_Init(led_tbl[i].port, &GPIO_InitStruct);
 80008b4:	490c      	ldr	r1, [pc, #48]	; (80008e8 <ledInit+0x98>)
 80008b6:	69fa      	ldr	r2, [r7, #28]
 80008b8:	4613      	mov	r3, r2
 80008ba:	005b      	lsls	r3, r3, #1
 80008bc:	4413      	add	r3, r2
 80008be:	009b      	lsls	r3, r3, #2
 80008c0:	440b      	add	r3, r1
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	1d3a      	adds	r2, r7, #4
 80008c6:	4611      	mov	r1, r2
 80008c8:	4618      	mov	r0, r3
 80008ca:	f000 fa09 	bl	8000ce0 <HAL_GPIO_Init>
	for(int i = 0; i < LED_MAX_CHANNEL; i++)
 80008ce:	69fb      	ldr	r3, [r7, #28]
 80008d0:	3301      	adds	r3, #1
 80008d2:	61fb      	str	r3, [r7, #28]
 80008d4:	69fb      	ldr	r3, [r7, #28]
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	dddd      	ble.n	8000896 <ledInit+0x46>
	}
	return ret;
 80008da:	7efb      	ldrb	r3, [r7, #27]
}
 80008dc:	4618      	mov	r0, r3
 80008de:	3720      	adds	r7, #32
 80008e0:	46bd      	mov	sp, r7
 80008e2:	bd80      	pop	{r7, pc}
 80008e4:	40023800 	.word	0x40023800
 80008e8:	20000004 	.word	0x20000004

080008ec <ledOff>:
void ledOn(uint8_t ch)
{
	HAL_GPIO_WritePin(led_tbl[ch].port, led_tbl[ch].pin, led_tbl[ch].on_state);
}
void ledOff(uint8_t ch)
{
 80008ec:	b590      	push	{r4, r7, lr}
 80008ee:	b083      	sub	sp, #12
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	4603      	mov	r3, r0
 80008f4:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(led_tbl[ch].port, led_tbl[ch].pin, led_tbl[ch].off_state);
 80008f6:	79fa      	ldrb	r2, [r7, #7]
 80008f8:	4910      	ldr	r1, [pc, #64]	; (800093c <ledOff+0x50>)
 80008fa:	4613      	mov	r3, r2
 80008fc:	005b      	lsls	r3, r3, #1
 80008fe:	4413      	add	r3, r2
 8000900:	009b      	lsls	r3, r3, #2
 8000902:	440b      	add	r3, r1
 8000904:	6818      	ldr	r0, [r3, #0]
 8000906:	79fa      	ldrb	r2, [r7, #7]
 8000908:	490c      	ldr	r1, [pc, #48]	; (800093c <ledOff+0x50>)
 800090a:	4613      	mov	r3, r2
 800090c:	005b      	lsls	r3, r3, #1
 800090e:	4413      	add	r3, r2
 8000910:	009b      	lsls	r3, r3, #2
 8000912:	440b      	add	r3, r1
 8000914:	3304      	adds	r3, #4
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	b299      	uxth	r1, r3
 800091a:	79fa      	ldrb	r2, [r7, #7]
 800091c:	4c07      	ldr	r4, [pc, #28]	; (800093c <ledOff+0x50>)
 800091e:	4613      	mov	r3, r2
 8000920:	005b      	lsls	r3, r3, #1
 8000922:	4413      	add	r3, r2
 8000924:	009b      	lsls	r3, r3, #2
 8000926:	4423      	add	r3, r4
 8000928:	3309      	adds	r3, #9
 800092a:	781b      	ldrb	r3, [r3, #0]
 800092c:	461a      	mov	r2, r3
 800092e:	f000 fb5b 	bl	8000fe8 <HAL_GPIO_WritePin>
}
 8000932:	bf00      	nop
 8000934:	370c      	adds	r7, #12
 8000936:	46bd      	mov	sp, r7
 8000938:	bd90      	pop	{r4, r7, pc}
 800093a:	bf00      	nop
 800093c:	20000004 	.word	0x20000004

08000940 <ledToggle>:
void ledToggle(uint8_t ch)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b082      	sub	sp, #8
 8000944:	af00      	add	r7, sp, #0
 8000946:	4603      	mov	r3, r0
 8000948:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_TogglePin(led_tbl[ch].port, led_tbl[ch].pin);
 800094a:	79fa      	ldrb	r2, [r7, #7]
 800094c:	490b      	ldr	r1, [pc, #44]	; (800097c <ledToggle+0x3c>)
 800094e:	4613      	mov	r3, r2
 8000950:	005b      	lsls	r3, r3, #1
 8000952:	4413      	add	r3, r2
 8000954:	009b      	lsls	r3, r3, #2
 8000956:	440b      	add	r3, r1
 8000958:	6818      	ldr	r0, [r3, #0]
 800095a:	79fa      	ldrb	r2, [r7, #7]
 800095c:	4907      	ldr	r1, [pc, #28]	; (800097c <ledToggle+0x3c>)
 800095e:	4613      	mov	r3, r2
 8000960:	005b      	lsls	r3, r3, #1
 8000962:	4413      	add	r3, r2
 8000964:	009b      	lsls	r3, r3, #2
 8000966:	440b      	add	r3, r1
 8000968:	3304      	adds	r3, #4
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	b29b      	uxth	r3, r3
 800096e:	4619      	mov	r1, r3
 8000970:	f000 fb53 	bl	800101a <HAL_GPIO_TogglePin>
}
 8000974:	bf00      	nop
 8000976:	3708      	adds	r7, #8
 8000978:	46bd      	mov	sp, r7
 800097a:	bd80      	pop	{r7, pc}
 800097c:	20000004 	.word	0x20000004

08000980 <hwInit>:
 */

#include "hw.h"

void hwInit()
{
 8000980:	b580      	push	{r7, lr}
 8000982:	af00      	add	r7, sp, #0
  bspInit();
 8000984:	f7ff fde2 	bl	800054c <bspInit>
  ledInit();
 8000988:	f7ff ff62 	bl	8000850 <ledInit>
}
 800098c:	bf00      	nop
 800098e:	bd80      	pop	{r7, pc}

08000990 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000994:	4b0e      	ldr	r3, [pc, #56]	; (80009d0 <HAL_Init+0x40>)
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	4a0d      	ldr	r2, [pc, #52]	; (80009d0 <HAL_Init+0x40>)
 800099a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800099e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80009a0:	4b0b      	ldr	r3, [pc, #44]	; (80009d0 <HAL_Init+0x40>)
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	4a0a      	ldr	r2, [pc, #40]	; (80009d0 <HAL_Init+0x40>)
 80009a6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80009aa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009ac:	4b08      	ldr	r3, [pc, #32]	; (80009d0 <HAL_Init+0x40>)
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	4a07      	ldr	r2, [pc, #28]	; (80009d0 <HAL_Init+0x40>)
 80009b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80009b6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009b8:	2003      	movs	r0, #3
 80009ba:	f000 f94f 	bl	8000c5c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80009be:	200f      	movs	r0, #15
 80009c0:	f000 f808 	bl	80009d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009c4:	f7ff feac 	bl	8000720 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009c8:	2300      	movs	r3, #0
}
 80009ca:	4618      	mov	r0, r3
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	bf00      	nop
 80009d0:	40023c00 	.word	0x40023c00

080009d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b082      	sub	sp, #8
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80009dc:	4b12      	ldr	r3, [pc, #72]	; (8000a28 <HAL_InitTick+0x54>)
 80009de:	681a      	ldr	r2, [r3, #0]
 80009e0:	4b12      	ldr	r3, [pc, #72]	; (8000a2c <HAL_InitTick+0x58>)
 80009e2:	781b      	ldrb	r3, [r3, #0]
 80009e4:	4619      	mov	r1, r3
 80009e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80009ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80009f2:	4618      	mov	r0, r3
 80009f4:	f000 f967 	bl	8000cc6 <HAL_SYSTICK_Config>
 80009f8:	4603      	mov	r3, r0
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d001      	beq.n	8000a02 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80009fe:	2301      	movs	r3, #1
 8000a00:	e00e      	b.n	8000a20 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	2b0f      	cmp	r3, #15
 8000a06:	d80a      	bhi.n	8000a1e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a08:	2200      	movs	r2, #0
 8000a0a:	6879      	ldr	r1, [r7, #4]
 8000a0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000a10:	f000 f92f 	bl	8000c72 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a14:	4a06      	ldr	r2, [pc, #24]	; (8000a30 <HAL_InitTick+0x5c>)
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	e000      	b.n	8000a20 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a1e:	2301      	movs	r3, #1
}
 8000a20:	4618      	mov	r0, r3
 8000a22:	3708      	adds	r7, #8
 8000a24:	46bd      	mov	sp, r7
 8000a26:	bd80      	pop	{r7, pc}
 8000a28:	20000000 	.word	0x20000000
 8000a2c:	2000002c 	.word	0x2000002c
 8000a30:	20000028 	.word	0x20000028

08000a34 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a34:	b480      	push	{r7}
 8000a36:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a38:	4b06      	ldr	r3, [pc, #24]	; (8000a54 <HAL_IncTick+0x20>)
 8000a3a:	781b      	ldrb	r3, [r3, #0]
 8000a3c:	461a      	mov	r2, r3
 8000a3e:	4b06      	ldr	r3, [pc, #24]	; (8000a58 <HAL_IncTick+0x24>)
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	4413      	add	r3, r2
 8000a44:	4a04      	ldr	r2, [pc, #16]	; (8000a58 <HAL_IncTick+0x24>)
 8000a46:	6013      	str	r3, [r2, #0]
}
 8000a48:	bf00      	nop
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a50:	4770      	bx	lr
 8000a52:	bf00      	nop
 8000a54:	2000002c 	.word	0x2000002c
 8000a58:	200001c4 	.word	0x200001c4

08000a5c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	af00      	add	r7, sp, #0
  return uwTick;
 8000a60:	4b03      	ldr	r3, [pc, #12]	; (8000a70 <HAL_GetTick+0x14>)
 8000a62:	681b      	ldr	r3, [r3, #0]
}
 8000a64:	4618      	mov	r0, r3
 8000a66:	46bd      	mov	sp, r7
 8000a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6c:	4770      	bx	lr
 8000a6e:	bf00      	nop
 8000a70:	200001c4 	.word	0x200001c4

08000a74 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b084      	sub	sp, #16
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a7c:	f7ff ffee 	bl	8000a5c <HAL_GetTick>
 8000a80:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a86:	68fb      	ldr	r3, [r7, #12]
 8000a88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a8c:	d005      	beq.n	8000a9a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a8e:	4b0a      	ldr	r3, [pc, #40]	; (8000ab8 <HAL_Delay+0x44>)
 8000a90:	781b      	ldrb	r3, [r3, #0]
 8000a92:	461a      	mov	r2, r3
 8000a94:	68fb      	ldr	r3, [r7, #12]
 8000a96:	4413      	add	r3, r2
 8000a98:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000a9a:	bf00      	nop
 8000a9c:	f7ff ffde 	bl	8000a5c <HAL_GetTick>
 8000aa0:	4602      	mov	r2, r0
 8000aa2:	68bb      	ldr	r3, [r7, #8]
 8000aa4:	1ad3      	subs	r3, r2, r3
 8000aa6:	68fa      	ldr	r2, [r7, #12]
 8000aa8:	429a      	cmp	r2, r3
 8000aaa:	d8f7      	bhi.n	8000a9c <HAL_Delay+0x28>
  {
  }
}
 8000aac:	bf00      	nop
 8000aae:	bf00      	nop
 8000ab0:	3710      	adds	r7, #16
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bd80      	pop	{r7, pc}
 8000ab6:	bf00      	nop
 8000ab8:	2000002c 	.word	0x2000002c

08000abc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000abc:	b480      	push	{r7}
 8000abe:	b085      	sub	sp, #20
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	f003 0307 	and.w	r3, r3, #7
 8000aca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000acc:	4b0c      	ldr	r3, [pc, #48]	; (8000b00 <__NVIC_SetPriorityGrouping+0x44>)
 8000ace:	68db      	ldr	r3, [r3, #12]
 8000ad0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ad2:	68ba      	ldr	r2, [r7, #8]
 8000ad4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ad8:	4013      	ands	r3, r2
 8000ada:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000adc:	68fb      	ldr	r3, [r7, #12]
 8000ade:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ae0:	68bb      	ldr	r3, [r7, #8]
 8000ae2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ae4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ae8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000aec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000aee:	4a04      	ldr	r2, [pc, #16]	; (8000b00 <__NVIC_SetPriorityGrouping+0x44>)
 8000af0:	68bb      	ldr	r3, [r7, #8]
 8000af2:	60d3      	str	r3, [r2, #12]
}
 8000af4:	bf00      	nop
 8000af6:	3714      	adds	r7, #20
 8000af8:	46bd      	mov	sp, r7
 8000afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afe:	4770      	bx	lr
 8000b00:	e000ed00 	.word	0xe000ed00

08000b04 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b04:	b480      	push	{r7}
 8000b06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b08:	4b04      	ldr	r3, [pc, #16]	; (8000b1c <__NVIC_GetPriorityGrouping+0x18>)
 8000b0a:	68db      	ldr	r3, [r3, #12]
 8000b0c:	0a1b      	lsrs	r3, r3, #8
 8000b0e:	f003 0307 	and.w	r3, r3, #7
}
 8000b12:	4618      	mov	r0, r3
 8000b14:	46bd      	mov	sp, r7
 8000b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1a:	4770      	bx	lr
 8000b1c:	e000ed00 	.word	0xe000ed00

08000b20 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b20:	b480      	push	{r7}
 8000b22:	b083      	sub	sp, #12
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	4603      	mov	r3, r0
 8000b28:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	db0b      	blt.n	8000b4a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b32:	79fb      	ldrb	r3, [r7, #7]
 8000b34:	f003 021f 	and.w	r2, r3, #31
 8000b38:	4907      	ldr	r1, [pc, #28]	; (8000b58 <__NVIC_EnableIRQ+0x38>)
 8000b3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b3e:	095b      	lsrs	r3, r3, #5
 8000b40:	2001      	movs	r0, #1
 8000b42:	fa00 f202 	lsl.w	r2, r0, r2
 8000b46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000b4a:	bf00      	nop
 8000b4c:	370c      	adds	r7, #12
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop
 8000b58:	e000e100 	.word	0xe000e100

08000b5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	b083      	sub	sp, #12
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	4603      	mov	r3, r0
 8000b64:	6039      	str	r1, [r7, #0]
 8000b66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	db0a      	blt.n	8000b86 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b70:	683b      	ldr	r3, [r7, #0]
 8000b72:	b2da      	uxtb	r2, r3
 8000b74:	490c      	ldr	r1, [pc, #48]	; (8000ba8 <__NVIC_SetPriority+0x4c>)
 8000b76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b7a:	0112      	lsls	r2, r2, #4
 8000b7c:	b2d2      	uxtb	r2, r2
 8000b7e:	440b      	add	r3, r1
 8000b80:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b84:	e00a      	b.n	8000b9c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b86:	683b      	ldr	r3, [r7, #0]
 8000b88:	b2da      	uxtb	r2, r3
 8000b8a:	4908      	ldr	r1, [pc, #32]	; (8000bac <__NVIC_SetPriority+0x50>)
 8000b8c:	79fb      	ldrb	r3, [r7, #7]
 8000b8e:	f003 030f 	and.w	r3, r3, #15
 8000b92:	3b04      	subs	r3, #4
 8000b94:	0112      	lsls	r2, r2, #4
 8000b96:	b2d2      	uxtb	r2, r2
 8000b98:	440b      	add	r3, r1
 8000b9a:	761a      	strb	r2, [r3, #24]
}
 8000b9c:	bf00      	nop
 8000b9e:	370c      	adds	r7, #12
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba6:	4770      	bx	lr
 8000ba8:	e000e100 	.word	0xe000e100
 8000bac:	e000ed00 	.word	0xe000ed00

08000bb0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	b089      	sub	sp, #36	; 0x24
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	60f8      	str	r0, [r7, #12]
 8000bb8:	60b9      	str	r1, [r7, #8]
 8000bba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000bbc:	68fb      	ldr	r3, [r7, #12]
 8000bbe:	f003 0307 	and.w	r3, r3, #7
 8000bc2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000bc4:	69fb      	ldr	r3, [r7, #28]
 8000bc6:	f1c3 0307 	rsb	r3, r3, #7
 8000bca:	2b04      	cmp	r3, #4
 8000bcc:	bf28      	it	cs
 8000bce:	2304      	movcs	r3, #4
 8000bd0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bd2:	69fb      	ldr	r3, [r7, #28]
 8000bd4:	3304      	adds	r3, #4
 8000bd6:	2b06      	cmp	r3, #6
 8000bd8:	d902      	bls.n	8000be0 <NVIC_EncodePriority+0x30>
 8000bda:	69fb      	ldr	r3, [r7, #28]
 8000bdc:	3b03      	subs	r3, #3
 8000bde:	e000      	b.n	8000be2 <NVIC_EncodePriority+0x32>
 8000be0:	2300      	movs	r3, #0
 8000be2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000be4:	f04f 32ff 	mov.w	r2, #4294967295
 8000be8:	69bb      	ldr	r3, [r7, #24]
 8000bea:	fa02 f303 	lsl.w	r3, r2, r3
 8000bee:	43da      	mvns	r2, r3
 8000bf0:	68bb      	ldr	r3, [r7, #8]
 8000bf2:	401a      	ands	r2, r3
 8000bf4:	697b      	ldr	r3, [r7, #20]
 8000bf6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000bf8:	f04f 31ff 	mov.w	r1, #4294967295
 8000bfc:	697b      	ldr	r3, [r7, #20]
 8000bfe:	fa01 f303 	lsl.w	r3, r1, r3
 8000c02:	43d9      	mvns	r1, r3
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c08:	4313      	orrs	r3, r2
         );
}
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	3724      	adds	r7, #36	; 0x24
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c14:	4770      	bx	lr
	...

08000c18 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b082      	sub	sp, #8
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	3b01      	subs	r3, #1
 8000c24:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c28:	d301      	bcc.n	8000c2e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c2a:	2301      	movs	r3, #1
 8000c2c:	e00f      	b.n	8000c4e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c2e:	4a0a      	ldr	r2, [pc, #40]	; (8000c58 <SysTick_Config+0x40>)
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	3b01      	subs	r3, #1
 8000c34:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c36:	210f      	movs	r1, #15
 8000c38:	f04f 30ff 	mov.w	r0, #4294967295
 8000c3c:	f7ff ff8e 	bl	8000b5c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c40:	4b05      	ldr	r3, [pc, #20]	; (8000c58 <SysTick_Config+0x40>)
 8000c42:	2200      	movs	r2, #0
 8000c44:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c46:	4b04      	ldr	r3, [pc, #16]	; (8000c58 <SysTick_Config+0x40>)
 8000c48:	2207      	movs	r2, #7
 8000c4a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c4c:	2300      	movs	r3, #0
}
 8000c4e:	4618      	mov	r0, r3
 8000c50:	3708      	adds	r7, #8
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bd80      	pop	{r7, pc}
 8000c56:	bf00      	nop
 8000c58:	e000e010 	.word	0xe000e010

08000c5c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b082      	sub	sp, #8
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c64:	6878      	ldr	r0, [r7, #4]
 8000c66:	f7ff ff29 	bl	8000abc <__NVIC_SetPriorityGrouping>
}
 8000c6a:	bf00      	nop
 8000c6c:	3708      	adds	r7, #8
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bd80      	pop	{r7, pc}

08000c72 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c72:	b580      	push	{r7, lr}
 8000c74:	b086      	sub	sp, #24
 8000c76:	af00      	add	r7, sp, #0
 8000c78:	4603      	mov	r3, r0
 8000c7a:	60b9      	str	r1, [r7, #8]
 8000c7c:	607a      	str	r2, [r7, #4]
 8000c7e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c80:	2300      	movs	r3, #0
 8000c82:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c84:	f7ff ff3e 	bl	8000b04 <__NVIC_GetPriorityGrouping>
 8000c88:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c8a:	687a      	ldr	r2, [r7, #4]
 8000c8c:	68b9      	ldr	r1, [r7, #8]
 8000c8e:	6978      	ldr	r0, [r7, #20]
 8000c90:	f7ff ff8e 	bl	8000bb0 <NVIC_EncodePriority>
 8000c94:	4602      	mov	r2, r0
 8000c96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c9a:	4611      	mov	r1, r2
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	f7ff ff5d 	bl	8000b5c <__NVIC_SetPriority>
}
 8000ca2:	bf00      	nop
 8000ca4:	3718      	adds	r7, #24
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bd80      	pop	{r7, pc}

08000caa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000caa:	b580      	push	{r7, lr}
 8000cac:	b082      	sub	sp, #8
 8000cae:	af00      	add	r7, sp, #0
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000cb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cb8:	4618      	mov	r0, r3
 8000cba:	f7ff ff31 	bl	8000b20 <__NVIC_EnableIRQ>
}
 8000cbe:	bf00      	nop
 8000cc0:	3708      	adds	r7, #8
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bd80      	pop	{r7, pc}

08000cc6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000cc6:	b580      	push	{r7, lr}
 8000cc8:	b082      	sub	sp, #8
 8000cca:	af00      	add	r7, sp, #0
 8000ccc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000cce:	6878      	ldr	r0, [r7, #4]
 8000cd0:	f7ff ffa2 	bl	8000c18 <SysTick_Config>
 8000cd4:	4603      	mov	r3, r0
}
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	3708      	adds	r7, #8
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}
	...

08000ce0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	b089      	sub	sp, #36	; 0x24
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
 8000ce8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000cea:	2300      	movs	r3, #0
 8000cec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	61fb      	str	r3, [r7, #28]
 8000cfa:	e159      	b.n	8000fb0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000cfc:	2201      	movs	r2, #1
 8000cfe:	69fb      	ldr	r3, [r7, #28]
 8000d00:	fa02 f303 	lsl.w	r3, r2, r3
 8000d04:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d06:	683b      	ldr	r3, [r7, #0]
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	697a      	ldr	r2, [r7, #20]
 8000d0c:	4013      	ands	r3, r2
 8000d0e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000d10:	693a      	ldr	r2, [r7, #16]
 8000d12:	697b      	ldr	r3, [r7, #20]
 8000d14:	429a      	cmp	r2, r3
 8000d16:	f040 8148 	bne.w	8000faa <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d1a:	683b      	ldr	r3, [r7, #0]
 8000d1c:	685b      	ldr	r3, [r3, #4]
 8000d1e:	f003 0303 	and.w	r3, r3, #3
 8000d22:	2b01      	cmp	r3, #1
 8000d24:	d005      	beq.n	8000d32 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d26:	683b      	ldr	r3, [r7, #0]
 8000d28:	685b      	ldr	r3, [r3, #4]
 8000d2a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d2e:	2b02      	cmp	r3, #2
 8000d30:	d130      	bne.n	8000d94 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	689b      	ldr	r3, [r3, #8]
 8000d36:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000d38:	69fb      	ldr	r3, [r7, #28]
 8000d3a:	005b      	lsls	r3, r3, #1
 8000d3c:	2203      	movs	r2, #3
 8000d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d42:	43db      	mvns	r3, r3
 8000d44:	69ba      	ldr	r2, [r7, #24]
 8000d46:	4013      	ands	r3, r2
 8000d48:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d4a:	683b      	ldr	r3, [r7, #0]
 8000d4c:	68da      	ldr	r2, [r3, #12]
 8000d4e:	69fb      	ldr	r3, [r7, #28]
 8000d50:	005b      	lsls	r3, r3, #1
 8000d52:	fa02 f303 	lsl.w	r3, r2, r3
 8000d56:	69ba      	ldr	r2, [r7, #24]
 8000d58:	4313      	orrs	r3, r2
 8000d5a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	69ba      	ldr	r2, [r7, #24]
 8000d60:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	685b      	ldr	r3, [r3, #4]
 8000d66:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d68:	2201      	movs	r2, #1
 8000d6a:	69fb      	ldr	r3, [r7, #28]
 8000d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d70:	43db      	mvns	r3, r3
 8000d72:	69ba      	ldr	r2, [r7, #24]
 8000d74:	4013      	ands	r3, r2
 8000d76:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d78:	683b      	ldr	r3, [r7, #0]
 8000d7a:	685b      	ldr	r3, [r3, #4]
 8000d7c:	091b      	lsrs	r3, r3, #4
 8000d7e:	f003 0201 	and.w	r2, r3, #1
 8000d82:	69fb      	ldr	r3, [r7, #28]
 8000d84:	fa02 f303 	lsl.w	r3, r2, r3
 8000d88:	69ba      	ldr	r2, [r7, #24]
 8000d8a:	4313      	orrs	r3, r2
 8000d8c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	69ba      	ldr	r2, [r7, #24]
 8000d92:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d94:	683b      	ldr	r3, [r7, #0]
 8000d96:	685b      	ldr	r3, [r3, #4]
 8000d98:	f003 0303 	and.w	r3, r3, #3
 8000d9c:	2b03      	cmp	r3, #3
 8000d9e:	d017      	beq.n	8000dd0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	68db      	ldr	r3, [r3, #12]
 8000da4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000da6:	69fb      	ldr	r3, [r7, #28]
 8000da8:	005b      	lsls	r3, r3, #1
 8000daa:	2203      	movs	r2, #3
 8000dac:	fa02 f303 	lsl.w	r3, r2, r3
 8000db0:	43db      	mvns	r3, r3
 8000db2:	69ba      	ldr	r2, [r7, #24]
 8000db4:	4013      	ands	r3, r2
 8000db6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000db8:	683b      	ldr	r3, [r7, #0]
 8000dba:	689a      	ldr	r2, [r3, #8]
 8000dbc:	69fb      	ldr	r3, [r7, #28]
 8000dbe:	005b      	lsls	r3, r3, #1
 8000dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc4:	69ba      	ldr	r2, [r7, #24]
 8000dc6:	4313      	orrs	r3, r2
 8000dc8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	69ba      	ldr	r2, [r7, #24]
 8000dce:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000dd0:	683b      	ldr	r3, [r7, #0]
 8000dd2:	685b      	ldr	r3, [r3, #4]
 8000dd4:	f003 0303 	and.w	r3, r3, #3
 8000dd8:	2b02      	cmp	r3, #2
 8000dda:	d123      	bne.n	8000e24 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000ddc:	69fb      	ldr	r3, [r7, #28]
 8000dde:	08da      	lsrs	r2, r3, #3
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	3208      	adds	r2, #8
 8000de4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000de8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000dea:	69fb      	ldr	r3, [r7, #28]
 8000dec:	f003 0307 	and.w	r3, r3, #7
 8000df0:	009b      	lsls	r3, r3, #2
 8000df2:	220f      	movs	r2, #15
 8000df4:	fa02 f303 	lsl.w	r3, r2, r3
 8000df8:	43db      	mvns	r3, r3
 8000dfa:	69ba      	ldr	r2, [r7, #24]
 8000dfc:	4013      	ands	r3, r2
 8000dfe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000e00:	683b      	ldr	r3, [r7, #0]
 8000e02:	691a      	ldr	r2, [r3, #16]
 8000e04:	69fb      	ldr	r3, [r7, #28]
 8000e06:	f003 0307 	and.w	r3, r3, #7
 8000e0a:	009b      	lsls	r3, r3, #2
 8000e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e10:	69ba      	ldr	r2, [r7, #24]
 8000e12:	4313      	orrs	r3, r2
 8000e14:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000e16:	69fb      	ldr	r3, [r7, #28]
 8000e18:	08da      	lsrs	r2, r3, #3
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	3208      	adds	r2, #8
 8000e1e:	69b9      	ldr	r1, [r7, #24]
 8000e20:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000e2a:	69fb      	ldr	r3, [r7, #28]
 8000e2c:	005b      	lsls	r3, r3, #1
 8000e2e:	2203      	movs	r2, #3
 8000e30:	fa02 f303 	lsl.w	r3, r2, r3
 8000e34:	43db      	mvns	r3, r3
 8000e36:	69ba      	ldr	r2, [r7, #24]
 8000e38:	4013      	ands	r3, r2
 8000e3a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e3c:	683b      	ldr	r3, [r7, #0]
 8000e3e:	685b      	ldr	r3, [r3, #4]
 8000e40:	f003 0203 	and.w	r2, r3, #3
 8000e44:	69fb      	ldr	r3, [r7, #28]
 8000e46:	005b      	lsls	r3, r3, #1
 8000e48:	fa02 f303 	lsl.w	r3, r2, r3
 8000e4c:	69ba      	ldr	r2, [r7, #24]
 8000e4e:	4313      	orrs	r3, r2
 8000e50:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	69ba      	ldr	r2, [r7, #24]
 8000e56:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000e58:	683b      	ldr	r3, [r7, #0]
 8000e5a:	685b      	ldr	r3, [r3, #4]
 8000e5c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	f000 80a2 	beq.w	8000faa <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e66:	2300      	movs	r3, #0
 8000e68:	60fb      	str	r3, [r7, #12]
 8000e6a:	4b57      	ldr	r3, [pc, #348]	; (8000fc8 <HAL_GPIO_Init+0x2e8>)
 8000e6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e6e:	4a56      	ldr	r2, [pc, #344]	; (8000fc8 <HAL_GPIO_Init+0x2e8>)
 8000e70:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e74:	6453      	str	r3, [r2, #68]	; 0x44
 8000e76:	4b54      	ldr	r3, [pc, #336]	; (8000fc8 <HAL_GPIO_Init+0x2e8>)
 8000e78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e7a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e7e:	60fb      	str	r3, [r7, #12]
 8000e80:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000e82:	4a52      	ldr	r2, [pc, #328]	; (8000fcc <HAL_GPIO_Init+0x2ec>)
 8000e84:	69fb      	ldr	r3, [r7, #28]
 8000e86:	089b      	lsrs	r3, r3, #2
 8000e88:	3302      	adds	r3, #2
 8000e8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000e90:	69fb      	ldr	r3, [r7, #28]
 8000e92:	f003 0303 	and.w	r3, r3, #3
 8000e96:	009b      	lsls	r3, r3, #2
 8000e98:	220f      	movs	r2, #15
 8000e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e9e:	43db      	mvns	r3, r3
 8000ea0:	69ba      	ldr	r2, [r7, #24]
 8000ea2:	4013      	ands	r3, r2
 8000ea4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	4a49      	ldr	r2, [pc, #292]	; (8000fd0 <HAL_GPIO_Init+0x2f0>)
 8000eaa:	4293      	cmp	r3, r2
 8000eac:	d019      	beq.n	8000ee2 <HAL_GPIO_Init+0x202>
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	4a48      	ldr	r2, [pc, #288]	; (8000fd4 <HAL_GPIO_Init+0x2f4>)
 8000eb2:	4293      	cmp	r3, r2
 8000eb4:	d013      	beq.n	8000ede <HAL_GPIO_Init+0x1fe>
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	4a47      	ldr	r2, [pc, #284]	; (8000fd8 <HAL_GPIO_Init+0x2f8>)
 8000eba:	4293      	cmp	r3, r2
 8000ebc:	d00d      	beq.n	8000eda <HAL_GPIO_Init+0x1fa>
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	4a46      	ldr	r2, [pc, #280]	; (8000fdc <HAL_GPIO_Init+0x2fc>)
 8000ec2:	4293      	cmp	r3, r2
 8000ec4:	d007      	beq.n	8000ed6 <HAL_GPIO_Init+0x1f6>
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	4a45      	ldr	r2, [pc, #276]	; (8000fe0 <HAL_GPIO_Init+0x300>)
 8000eca:	4293      	cmp	r3, r2
 8000ecc:	d101      	bne.n	8000ed2 <HAL_GPIO_Init+0x1f2>
 8000ece:	2304      	movs	r3, #4
 8000ed0:	e008      	b.n	8000ee4 <HAL_GPIO_Init+0x204>
 8000ed2:	2307      	movs	r3, #7
 8000ed4:	e006      	b.n	8000ee4 <HAL_GPIO_Init+0x204>
 8000ed6:	2303      	movs	r3, #3
 8000ed8:	e004      	b.n	8000ee4 <HAL_GPIO_Init+0x204>
 8000eda:	2302      	movs	r3, #2
 8000edc:	e002      	b.n	8000ee4 <HAL_GPIO_Init+0x204>
 8000ede:	2301      	movs	r3, #1
 8000ee0:	e000      	b.n	8000ee4 <HAL_GPIO_Init+0x204>
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	69fa      	ldr	r2, [r7, #28]
 8000ee6:	f002 0203 	and.w	r2, r2, #3
 8000eea:	0092      	lsls	r2, r2, #2
 8000eec:	4093      	lsls	r3, r2
 8000eee:	69ba      	ldr	r2, [r7, #24]
 8000ef0:	4313      	orrs	r3, r2
 8000ef2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000ef4:	4935      	ldr	r1, [pc, #212]	; (8000fcc <HAL_GPIO_Init+0x2ec>)
 8000ef6:	69fb      	ldr	r3, [r7, #28]
 8000ef8:	089b      	lsrs	r3, r3, #2
 8000efa:	3302      	adds	r3, #2
 8000efc:	69ba      	ldr	r2, [r7, #24]
 8000efe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f02:	4b38      	ldr	r3, [pc, #224]	; (8000fe4 <HAL_GPIO_Init+0x304>)
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f08:	693b      	ldr	r3, [r7, #16]
 8000f0a:	43db      	mvns	r3, r3
 8000f0c:	69ba      	ldr	r2, [r7, #24]
 8000f0e:	4013      	ands	r3, r2
 8000f10:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000f12:	683b      	ldr	r3, [r7, #0]
 8000f14:	685b      	ldr	r3, [r3, #4]
 8000f16:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d003      	beq.n	8000f26 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000f1e:	69ba      	ldr	r2, [r7, #24]
 8000f20:	693b      	ldr	r3, [r7, #16]
 8000f22:	4313      	orrs	r3, r2
 8000f24:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000f26:	4a2f      	ldr	r2, [pc, #188]	; (8000fe4 <HAL_GPIO_Init+0x304>)
 8000f28:	69bb      	ldr	r3, [r7, #24]
 8000f2a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000f2c:	4b2d      	ldr	r3, [pc, #180]	; (8000fe4 <HAL_GPIO_Init+0x304>)
 8000f2e:	685b      	ldr	r3, [r3, #4]
 8000f30:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f32:	693b      	ldr	r3, [r7, #16]
 8000f34:	43db      	mvns	r3, r3
 8000f36:	69ba      	ldr	r2, [r7, #24]
 8000f38:	4013      	ands	r3, r2
 8000f3a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000f3c:	683b      	ldr	r3, [r7, #0]
 8000f3e:	685b      	ldr	r3, [r3, #4]
 8000f40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d003      	beq.n	8000f50 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000f48:	69ba      	ldr	r2, [r7, #24]
 8000f4a:	693b      	ldr	r3, [r7, #16]
 8000f4c:	4313      	orrs	r3, r2
 8000f4e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000f50:	4a24      	ldr	r2, [pc, #144]	; (8000fe4 <HAL_GPIO_Init+0x304>)
 8000f52:	69bb      	ldr	r3, [r7, #24]
 8000f54:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f56:	4b23      	ldr	r3, [pc, #140]	; (8000fe4 <HAL_GPIO_Init+0x304>)
 8000f58:	689b      	ldr	r3, [r3, #8]
 8000f5a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f5c:	693b      	ldr	r3, [r7, #16]
 8000f5e:	43db      	mvns	r3, r3
 8000f60:	69ba      	ldr	r2, [r7, #24]
 8000f62:	4013      	ands	r3, r2
 8000f64:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000f66:	683b      	ldr	r3, [r7, #0]
 8000f68:	685b      	ldr	r3, [r3, #4]
 8000f6a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d003      	beq.n	8000f7a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8000f72:	69ba      	ldr	r2, [r7, #24]
 8000f74:	693b      	ldr	r3, [r7, #16]
 8000f76:	4313      	orrs	r3, r2
 8000f78:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000f7a:	4a1a      	ldr	r2, [pc, #104]	; (8000fe4 <HAL_GPIO_Init+0x304>)
 8000f7c:	69bb      	ldr	r3, [r7, #24]
 8000f7e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000f80:	4b18      	ldr	r3, [pc, #96]	; (8000fe4 <HAL_GPIO_Init+0x304>)
 8000f82:	68db      	ldr	r3, [r3, #12]
 8000f84:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f86:	693b      	ldr	r3, [r7, #16]
 8000f88:	43db      	mvns	r3, r3
 8000f8a:	69ba      	ldr	r2, [r7, #24]
 8000f8c:	4013      	ands	r3, r2
 8000f8e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000f90:	683b      	ldr	r3, [r7, #0]
 8000f92:	685b      	ldr	r3, [r3, #4]
 8000f94:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d003      	beq.n	8000fa4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8000f9c:	69ba      	ldr	r2, [r7, #24]
 8000f9e:	693b      	ldr	r3, [r7, #16]
 8000fa0:	4313      	orrs	r3, r2
 8000fa2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000fa4:	4a0f      	ldr	r2, [pc, #60]	; (8000fe4 <HAL_GPIO_Init+0x304>)
 8000fa6:	69bb      	ldr	r3, [r7, #24]
 8000fa8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000faa:	69fb      	ldr	r3, [r7, #28]
 8000fac:	3301      	adds	r3, #1
 8000fae:	61fb      	str	r3, [r7, #28]
 8000fb0:	69fb      	ldr	r3, [r7, #28]
 8000fb2:	2b0f      	cmp	r3, #15
 8000fb4:	f67f aea2 	bls.w	8000cfc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000fb8:	bf00      	nop
 8000fba:	bf00      	nop
 8000fbc:	3724      	adds	r7, #36	; 0x24
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc4:	4770      	bx	lr
 8000fc6:	bf00      	nop
 8000fc8:	40023800 	.word	0x40023800
 8000fcc:	40013800 	.word	0x40013800
 8000fd0:	40020000 	.word	0x40020000
 8000fd4:	40020400 	.word	0x40020400
 8000fd8:	40020800 	.word	0x40020800
 8000fdc:	40020c00 	.word	0x40020c00
 8000fe0:	40021000 	.word	0x40021000
 8000fe4:	40013c00 	.word	0x40013c00

08000fe8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	b083      	sub	sp, #12
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
 8000ff0:	460b      	mov	r3, r1
 8000ff2:	807b      	strh	r3, [r7, #2]
 8000ff4:	4613      	mov	r3, r2
 8000ff6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000ff8:	787b      	ldrb	r3, [r7, #1]
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d003      	beq.n	8001006 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000ffe:	887a      	ldrh	r2, [r7, #2]
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001004:	e003      	b.n	800100e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001006:	887b      	ldrh	r3, [r7, #2]
 8001008:	041a      	lsls	r2, r3, #16
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	619a      	str	r2, [r3, #24]
}
 800100e:	bf00      	nop
 8001010:	370c      	adds	r7, #12
 8001012:	46bd      	mov	sp, r7
 8001014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001018:	4770      	bx	lr

0800101a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800101a:	b480      	push	{r7}
 800101c:	b085      	sub	sp, #20
 800101e:	af00      	add	r7, sp, #0
 8001020:	6078      	str	r0, [r7, #4]
 8001022:	460b      	mov	r3, r1
 8001024:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	695b      	ldr	r3, [r3, #20]
 800102a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800102c:	887a      	ldrh	r2, [r7, #2]
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	4013      	ands	r3, r2
 8001032:	041a      	lsls	r2, r3, #16
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	43d9      	mvns	r1, r3
 8001038:	887b      	ldrh	r3, [r7, #2]
 800103a:	400b      	ands	r3, r1
 800103c:	431a      	orrs	r2, r3
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	619a      	str	r2, [r3, #24]
}
 8001042:	bf00      	nop
 8001044:	3714      	adds	r7, #20
 8001046:	46bd      	mov	sp, r7
 8001048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104c:	4770      	bx	lr

0800104e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800104e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001050:	b08f      	sub	sp, #60	; 0x3c
 8001052:	af0a      	add	r7, sp, #40	; 0x28
 8001054:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	2b00      	cmp	r3, #0
 800105a:	d101      	bne.n	8001060 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800105c:	2301      	movs	r3, #1
 800105e:	e10f      	b.n	8001280 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 800106c:	b2db      	uxtb	r3, r3
 800106e:	2b00      	cmp	r3, #0
 8001070:	d106      	bne.n	8001080 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	2200      	movs	r2, #0
 8001076:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800107a:	6878      	ldr	r0, [r7, #4]
 800107c:	f005 f860 	bl	8006140 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	2203      	movs	r2, #3
 8001084:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001088:	68bb      	ldr	r3, [r7, #8]
 800108a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800108c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001090:	2b00      	cmp	r3, #0
 8001092:	d102      	bne.n	800109a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	2200      	movs	r2, #0
 8001098:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	4618      	mov	r0, r3
 80010a0:	f001 fe9d 	bl	8002dde <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	603b      	str	r3, [r7, #0]
 80010aa:	687e      	ldr	r6, [r7, #4]
 80010ac:	466d      	mov	r5, sp
 80010ae:	f106 0410 	add.w	r4, r6, #16
 80010b2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80010b4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80010b6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80010b8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80010ba:	e894 0003 	ldmia.w	r4, {r0, r1}
 80010be:	e885 0003 	stmia.w	r5, {r0, r1}
 80010c2:	1d33      	adds	r3, r6, #4
 80010c4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80010c6:	6838      	ldr	r0, [r7, #0]
 80010c8:	f001 fd74 	bl	8002bb4 <USB_CoreInit>
 80010cc:	4603      	mov	r3, r0
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d005      	beq.n	80010de <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	2202      	movs	r2, #2
 80010d6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80010da:	2301      	movs	r3, #1
 80010dc:	e0d0      	b.n	8001280 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	2100      	movs	r1, #0
 80010e4:	4618      	mov	r0, r3
 80010e6:	f001 fe8b 	bl	8002e00 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80010ea:	2300      	movs	r3, #0
 80010ec:	73fb      	strb	r3, [r7, #15]
 80010ee:	e04a      	b.n	8001186 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80010f0:	7bfa      	ldrb	r2, [r7, #15]
 80010f2:	6879      	ldr	r1, [r7, #4]
 80010f4:	4613      	mov	r3, r2
 80010f6:	00db      	lsls	r3, r3, #3
 80010f8:	1a9b      	subs	r3, r3, r2
 80010fa:	009b      	lsls	r3, r3, #2
 80010fc:	440b      	add	r3, r1
 80010fe:	333d      	adds	r3, #61	; 0x3d
 8001100:	2201      	movs	r2, #1
 8001102:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001104:	7bfa      	ldrb	r2, [r7, #15]
 8001106:	6879      	ldr	r1, [r7, #4]
 8001108:	4613      	mov	r3, r2
 800110a:	00db      	lsls	r3, r3, #3
 800110c:	1a9b      	subs	r3, r3, r2
 800110e:	009b      	lsls	r3, r3, #2
 8001110:	440b      	add	r3, r1
 8001112:	333c      	adds	r3, #60	; 0x3c
 8001114:	7bfa      	ldrb	r2, [r7, #15]
 8001116:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001118:	7bfa      	ldrb	r2, [r7, #15]
 800111a:	7bfb      	ldrb	r3, [r7, #15]
 800111c:	b298      	uxth	r0, r3
 800111e:	6879      	ldr	r1, [r7, #4]
 8001120:	4613      	mov	r3, r2
 8001122:	00db      	lsls	r3, r3, #3
 8001124:	1a9b      	subs	r3, r3, r2
 8001126:	009b      	lsls	r3, r3, #2
 8001128:	440b      	add	r3, r1
 800112a:	3342      	adds	r3, #66	; 0x42
 800112c:	4602      	mov	r2, r0
 800112e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001130:	7bfa      	ldrb	r2, [r7, #15]
 8001132:	6879      	ldr	r1, [r7, #4]
 8001134:	4613      	mov	r3, r2
 8001136:	00db      	lsls	r3, r3, #3
 8001138:	1a9b      	subs	r3, r3, r2
 800113a:	009b      	lsls	r3, r3, #2
 800113c:	440b      	add	r3, r1
 800113e:	333f      	adds	r3, #63	; 0x3f
 8001140:	2200      	movs	r2, #0
 8001142:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001144:	7bfa      	ldrb	r2, [r7, #15]
 8001146:	6879      	ldr	r1, [r7, #4]
 8001148:	4613      	mov	r3, r2
 800114a:	00db      	lsls	r3, r3, #3
 800114c:	1a9b      	subs	r3, r3, r2
 800114e:	009b      	lsls	r3, r3, #2
 8001150:	440b      	add	r3, r1
 8001152:	3344      	adds	r3, #68	; 0x44
 8001154:	2200      	movs	r2, #0
 8001156:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001158:	7bfa      	ldrb	r2, [r7, #15]
 800115a:	6879      	ldr	r1, [r7, #4]
 800115c:	4613      	mov	r3, r2
 800115e:	00db      	lsls	r3, r3, #3
 8001160:	1a9b      	subs	r3, r3, r2
 8001162:	009b      	lsls	r3, r3, #2
 8001164:	440b      	add	r3, r1
 8001166:	3348      	adds	r3, #72	; 0x48
 8001168:	2200      	movs	r2, #0
 800116a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800116c:	7bfa      	ldrb	r2, [r7, #15]
 800116e:	6879      	ldr	r1, [r7, #4]
 8001170:	4613      	mov	r3, r2
 8001172:	00db      	lsls	r3, r3, #3
 8001174:	1a9b      	subs	r3, r3, r2
 8001176:	009b      	lsls	r3, r3, #2
 8001178:	440b      	add	r3, r1
 800117a:	3350      	adds	r3, #80	; 0x50
 800117c:	2200      	movs	r2, #0
 800117e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001180:	7bfb      	ldrb	r3, [r7, #15]
 8001182:	3301      	adds	r3, #1
 8001184:	73fb      	strb	r3, [r7, #15]
 8001186:	7bfa      	ldrb	r2, [r7, #15]
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	685b      	ldr	r3, [r3, #4]
 800118c:	429a      	cmp	r2, r3
 800118e:	d3af      	bcc.n	80010f0 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001190:	2300      	movs	r3, #0
 8001192:	73fb      	strb	r3, [r7, #15]
 8001194:	e044      	b.n	8001220 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001196:	7bfa      	ldrb	r2, [r7, #15]
 8001198:	6879      	ldr	r1, [r7, #4]
 800119a:	4613      	mov	r3, r2
 800119c:	00db      	lsls	r3, r3, #3
 800119e:	1a9b      	subs	r3, r3, r2
 80011a0:	009b      	lsls	r3, r3, #2
 80011a2:	440b      	add	r3, r1
 80011a4:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80011a8:	2200      	movs	r2, #0
 80011aa:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80011ac:	7bfa      	ldrb	r2, [r7, #15]
 80011ae:	6879      	ldr	r1, [r7, #4]
 80011b0:	4613      	mov	r3, r2
 80011b2:	00db      	lsls	r3, r3, #3
 80011b4:	1a9b      	subs	r3, r3, r2
 80011b6:	009b      	lsls	r3, r3, #2
 80011b8:	440b      	add	r3, r1
 80011ba:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80011be:	7bfa      	ldrb	r2, [r7, #15]
 80011c0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80011c2:	7bfa      	ldrb	r2, [r7, #15]
 80011c4:	6879      	ldr	r1, [r7, #4]
 80011c6:	4613      	mov	r3, r2
 80011c8:	00db      	lsls	r3, r3, #3
 80011ca:	1a9b      	subs	r3, r3, r2
 80011cc:	009b      	lsls	r3, r3, #2
 80011ce:	440b      	add	r3, r1
 80011d0:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80011d4:	2200      	movs	r2, #0
 80011d6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80011d8:	7bfa      	ldrb	r2, [r7, #15]
 80011da:	6879      	ldr	r1, [r7, #4]
 80011dc:	4613      	mov	r3, r2
 80011de:	00db      	lsls	r3, r3, #3
 80011e0:	1a9b      	subs	r3, r3, r2
 80011e2:	009b      	lsls	r3, r3, #2
 80011e4:	440b      	add	r3, r1
 80011e6:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80011ea:	2200      	movs	r2, #0
 80011ec:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80011ee:	7bfa      	ldrb	r2, [r7, #15]
 80011f0:	6879      	ldr	r1, [r7, #4]
 80011f2:	4613      	mov	r3, r2
 80011f4:	00db      	lsls	r3, r3, #3
 80011f6:	1a9b      	subs	r3, r3, r2
 80011f8:	009b      	lsls	r3, r3, #2
 80011fa:	440b      	add	r3, r1
 80011fc:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001200:	2200      	movs	r2, #0
 8001202:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001204:	7bfa      	ldrb	r2, [r7, #15]
 8001206:	6879      	ldr	r1, [r7, #4]
 8001208:	4613      	mov	r3, r2
 800120a:	00db      	lsls	r3, r3, #3
 800120c:	1a9b      	subs	r3, r3, r2
 800120e:	009b      	lsls	r3, r3, #2
 8001210:	440b      	add	r3, r1
 8001212:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001216:	2200      	movs	r2, #0
 8001218:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800121a:	7bfb      	ldrb	r3, [r7, #15]
 800121c:	3301      	adds	r3, #1
 800121e:	73fb      	strb	r3, [r7, #15]
 8001220:	7bfa      	ldrb	r2, [r7, #15]
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	685b      	ldr	r3, [r3, #4]
 8001226:	429a      	cmp	r2, r3
 8001228:	d3b5      	bcc.n	8001196 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	603b      	str	r3, [r7, #0]
 8001230:	687e      	ldr	r6, [r7, #4]
 8001232:	466d      	mov	r5, sp
 8001234:	f106 0410 	add.w	r4, r6, #16
 8001238:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800123a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800123c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800123e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001240:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001244:	e885 0003 	stmia.w	r5, {r0, r1}
 8001248:	1d33      	adds	r3, r6, #4
 800124a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800124c:	6838      	ldr	r0, [r7, #0]
 800124e:	f001 fe23 	bl	8002e98 <USB_DevInit>
 8001252:	4603      	mov	r3, r0
 8001254:	2b00      	cmp	r3, #0
 8001256:	d005      	beq.n	8001264 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	2202      	movs	r2, #2
 800125c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001260:	2301      	movs	r3, #1
 8001262:	e00d      	b.n	8001280 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	2200      	movs	r2, #0
 8001268:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	2201      	movs	r2, #1
 8001270:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	4618      	mov	r0, r3
 800127a:	f002 fe9f 	bl	8003fbc <USB_DevDisconnect>

  return HAL_OK;
 800127e:	2300      	movs	r3, #0
}
 8001280:	4618      	mov	r0, r3
 8001282:	3714      	adds	r7, #20
 8001284:	46bd      	mov	sp, r7
 8001286:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001288 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b084      	sub	sp, #16
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800129c:	2b01      	cmp	r3, #1
 800129e:	d101      	bne.n	80012a4 <HAL_PCD_Start+0x1c>
 80012a0:	2302      	movs	r3, #2
 80012a2:	e020      	b.n	80012e6 <HAL_PCD_Start+0x5e>
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	2201      	movs	r2, #1
 80012a8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012b0:	2b01      	cmp	r3, #1
 80012b2:	d109      	bne.n	80012c8 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80012b8:	2b01      	cmp	r3, #1
 80012ba:	d005      	beq.n	80012c8 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012c0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	4618      	mov	r0, r3
 80012ce:	f001 fd75 	bl	8002dbc <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	4618      	mov	r0, r3
 80012d8:	f002 fe4f 	bl	8003f7a <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	2200      	movs	r2, #0
 80012e0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80012e4:	2300      	movs	r3, #0
}
 80012e6:	4618      	mov	r0, r3
 80012e8:	3710      	adds	r7, #16
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}

080012ee <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80012ee:	b590      	push	{r4, r7, lr}
 80012f0:	b08d      	sub	sp, #52	; 0x34
 80012f2:	af00      	add	r7, sp, #0
 80012f4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80012fc:	6a3b      	ldr	r3, [r7, #32]
 80012fe:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	4618      	mov	r0, r3
 8001306:	f002 ff0d 	bl	8004124 <USB_GetMode>
 800130a:	4603      	mov	r3, r0
 800130c:	2b00      	cmp	r3, #0
 800130e:	f040 839d 	bne.w	8001a4c <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	4618      	mov	r0, r3
 8001318:	f002 fe71 	bl	8003ffe <USB_ReadInterrupts>
 800131c:	4603      	mov	r3, r0
 800131e:	2b00      	cmp	r3, #0
 8001320:	f000 8393 	beq.w	8001a4a <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	4618      	mov	r0, r3
 800132a:	f002 fe68 	bl	8003ffe <USB_ReadInterrupts>
 800132e:	4603      	mov	r3, r0
 8001330:	f003 0302 	and.w	r3, r3, #2
 8001334:	2b02      	cmp	r3, #2
 8001336:	d107      	bne.n	8001348 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	695a      	ldr	r2, [r3, #20]
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	f002 0202 	and.w	r2, r2, #2
 8001346:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	4618      	mov	r0, r3
 800134e:	f002 fe56 	bl	8003ffe <USB_ReadInterrupts>
 8001352:	4603      	mov	r3, r0
 8001354:	f003 0310 	and.w	r3, r3, #16
 8001358:	2b10      	cmp	r3, #16
 800135a:	d161      	bne.n	8001420 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	699a      	ldr	r2, [r3, #24]
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	f022 0210 	bic.w	r2, r2, #16
 800136a:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 800136c:	6a3b      	ldr	r3, [r7, #32]
 800136e:	6a1b      	ldr	r3, [r3, #32]
 8001370:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8001372:	69bb      	ldr	r3, [r7, #24]
 8001374:	f003 020f 	and.w	r2, r3, #15
 8001378:	4613      	mov	r3, r2
 800137a:	00db      	lsls	r3, r3, #3
 800137c:	1a9b      	subs	r3, r3, r2
 800137e:	009b      	lsls	r3, r3, #2
 8001380:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001384:	687a      	ldr	r2, [r7, #4]
 8001386:	4413      	add	r3, r2
 8001388:	3304      	adds	r3, #4
 800138a:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800138c:	69bb      	ldr	r3, [r7, #24]
 800138e:	0c5b      	lsrs	r3, r3, #17
 8001390:	f003 030f 	and.w	r3, r3, #15
 8001394:	2b02      	cmp	r3, #2
 8001396:	d124      	bne.n	80013e2 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001398:	69ba      	ldr	r2, [r7, #24]
 800139a:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800139e:	4013      	ands	r3, r2
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d035      	beq.n	8001410 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80013a4:	697b      	ldr	r3, [r7, #20]
 80013a6:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 80013a8:	69bb      	ldr	r3, [r7, #24]
 80013aa:	091b      	lsrs	r3, r3, #4
 80013ac:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80013ae:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80013b2:	b29b      	uxth	r3, r3
 80013b4:	461a      	mov	r2, r3
 80013b6:	6a38      	ldr	r0, [r7, #32]
 80013b8:	f002 fc8d 	bl	8003cd6 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80013bc:	697b      	ldr	r3, [r7, #20]
 80013be:	68da      	ldr	r2, [r3, #12]
 80013c0:	69bb      	ldr	r3, [r7, #24]
 80013c2:	091b      	lsrs	r3, r3, #4
 80013c4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80013c8:	441a      	add	r2, r3
 80013ca:	697b      	ldr	r3, [r7, #20]
 80013cc:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80013ce:	697b      	ldr	r3, [r7, #20]
 80013d0:	699a      	ldr	r2, [r3, #24]
 80013d2:	69bb      	ldr	r3, [r7, #24]
 80013d4:	091b      	lsrs	r3, r3, #4
 80013d6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80013da:	441a      	add	r2, r3
 80013dc:	697b      	ldr	r3, [r7, #20]
 80013de:	619a      	str	r2, [r3, #24]
 80013e0:	e016      	b.n	8001410 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 80013e2:	69bb      	ldr	r3, [r7, #24]
 80013e4:	0c5b      	lsrs	r3, r3, #17
 80013e6:	f003 030f 	and.w	r3, r3, #15
 80013ea:	2b06      	cmp	r3, #6
 80013ec:	d110      	bne.n	8001410 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80013f4:	2208      	movs	r2, #8
 80013f6:	4619      	mov	r1, r3
 80013f8:	6a38      	ldr	r0, [r7, #32]
 80013fa:	f002 fc6c 	bl	8003cd6 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80013fe:	697b      	ldr	r3, [r7, #20]
 8001400:	699a      	ldr	r2, [r3, #24]
 8001402:	69bb      	ldr	r3, [r7, #24]
 8001404:	091b      	lsrs	r3, r3, #4
 8001406:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800140a:	441a      	add	r2, r3
 800140c:	697b      	ldr	r3, [r7, #20]
 800140e:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	699a      	ldr	r2, [r3, #24]
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f042 0210 	orr.w	r2, r2, #16
 800141e:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	4618      	mov	r0, r3
 8001426:	f002 fdea 	bl	8003ffe <USB_ReadInterrupts>
 800142a:	4603      	mov	r3, r0
 800142c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001430:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001434:	d16e      	bne.n	8001514 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8001436:	2300      	movs	r3, #0
 8001438:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	4618      	mov	r0, r3
 8001440:	f002 fdf0 	bl	8004024 <USB_ReadDevAllOutEpInterrupt>
 8001444:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8001446:	e062      	b.n	800150e <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001448:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800144a:	f003 0301 	and.w	r3, r3, #1
 800144e:	2b00      	cmp	r3, #0
 8001450:	d057      	beq.n	8001502 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001458:	b2d2      	uxtb	r2, r2
 800145a:	4611      	mov	r1, r2
 800145c:	4618      	mov	r0, r3
 800145e:	f002 fe15 	bl	800408c <USB_ReadDevOutEPInterrupt>
 8001462:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001464:	693b      	ldr	r3, [r7, #16]
 8001466:	f003 0301 	and.w	r3, r3, #1
 800146a:	2b00      	cmp	r3, #0
 800146c:	d00c      	beq.n	8001488 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800146e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001470:	015a      	lsls	r2, r3, #5
 8001472:	69fb      	ldr	r3, [r7, #28]
 8001474:	4413      	add	r3, r2
 8001476:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800147a:	461a      	mov	r2, r3
 800147c:	2301      	movs	r3, #1
 800147e:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001480:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001482:	6878      	ldr	r0, [r7, #4]
 8001484:	f000 fdb0 	bl	8001fe8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001488:	693b      	ldr	r3, [r7, #16]
 800148a:	f003 0308 	and.w	r3, r3, #8
 800148e:	2b00      	cmp	r3, #0
 8001490:	d00c      	beq.n	80014ac <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001494:	015a      	lsls	r2, r3, #5
 8001496:	69fb      	ldr	r3, [r7, #28]
 8001498:	4413      	add	r3, r2
 800149a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800149e:	461a      	mov	r2, r3
 80014a0:	2308      	movs	r3, #8
 80014a2:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80014a4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80014a6:	6878      	ldr	r0, [r7, #4]
 80014a8:	f000 feaa 	bl	8002200 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80014ac:	693b      	ldr	r3, [r7, #16]
 80014ae:	f003 0310 	and.w	r3, r3, #16
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d008      	beq.n	80014c8 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80014b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014b8:	015a      	lsls	r2, r3, #5
 80014ba:	69fb      	ldr	r3, [r7, #28]
 80014bc:	4413      	add	r3, r2
 80014be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80014c2:	461a      	mov	r2, r3
 80014c4:	2310      	movs	r3, #16
 80014c6:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80014c8:	693b      	ldr	r3, [r7, #16]
 80014ca:	f003 0320 	and.w	r3, r3, #32
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d008      	beq.n	80014e4 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80014d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014d4:	015a      	lsls	r2, r3, #5
 80014d6:	69fb      	ldr	r3, [r7, #28]
 80014d8:	4413      	add	r3, r2
 80014da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80014de:	461a      	mov	r2, r3
 80014e0:	2320      	movs	r3, #32
 80014e2:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80014e4:	693b      	ldr	r3, [r7, #16]
 80014e6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d009      	beq.n	8001502 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80014ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014f0:	015a      	lsls	r2, r3, #5
 80014f2:	69fb      	ldr	r3, [r7, #28]
 80014f4:	4413      	add	r3, r2
 80014f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80014fa:	461a      	mov	r2, r3
 80014fc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001500:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001504:	3301      	adds	r3, #1
 8001506:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001508:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800150a:	085b      	lsrs	r3, r3, #1
 800150c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800150e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001510:	2b00      	cmp	r3, #0
 8001512:	d199      	bne.n	8001448 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	4618      	mov	r0, r3
 800151a:	f002 fd70 	bl	8003ffe <USB_ReadInterrupts>
 800151e:	4603      	mov	r3, r0
 8001520:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001524:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001528:	f040 80c0 	bne.w	80016ac <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	4618      	mov	r0, r3
 8001532:	f002 fd91 	bl	8004058 <USB_ReadDevAllInEpInterrupt>
 8001536:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8001538:	2300      	movs	r3, #0
 800153a:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800153c:	e0b2      	b.n	80016a4 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800153e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001540:	f003 0301 	and.w	r3, r3, #1
 8001544:	2b00      	cmp	r3, #0
 8001546:	f000 80a7 	beq.w	8001698 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001550:	b2d2      	uxtb	r2, r2
 8001552:	4611      	mov	r1, r2
 8001554:	4618      	mov	r0, r3
 8001556:	f002 fdb7 	bl	80040c8 <USB_ReadDevInEPInterrupt>
 800155a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800155c:	693b      	ldr	r3, [r7, #16]
 800155e:	f003 0301 	and.w	r3, r3, #1
 8001562:	2b00      	cmp	r3, #0
 8001564:	d057      	beq.n	8001616 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001568:	f003 030f 	and.w	r3, r3, #15
 800156c:	2201      	movs	r2, #1
 800156e:	fa02 f303 	lsl.w	r3, r2, r3
 8001572:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001574:	69fb      	ldr	r3, [r7, #28]
 8001576:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800157a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	43db      	mvns	r3, r3
 8001580:	69f9      	ldr	r1, [r7, #28]
 8001582:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001586:	4013      	ands	r3, r2
 8001588:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800158a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800158c:	015a      	lsls	r2, r3, #5
 800158e:	69fb      	ldr	r3, [r7, #28]
 8001590:	4413      	add	r3, r2
 8001592:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001596:	461a      	mov	r2, r3
 8001598:	2301      	movs	r3, #1
 800159a:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	691b      	ldr	r3, [r3, #16]
 80015a0:	2b01      	cmp	r3, #1
 80015a2:	d132      	bne.n	800160a <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80015a4:	6879      	ldr	r1, [r7, #4]
 80015a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015a8:	4613      	mov	r3, r2
 80015aa:	00db      	lsls	r3, r3, #3
 80015ac:	1a9b      	subs	r3, r3, r2
 80015ae:	009b      	lsls	r3, r3, #2
 80015b0:	440b      	add	r3, r1
 80015b2:	3348      	adds	r3, #72	; 0x48
 80015b4:	6819      	ldr	r1, [r3, #0]
 80015b6:	6878      	ldr	r0, [r7, #4]
 80015b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015ba:	4613      	mov	r3, r2
 80015bc:	00db      	lsls	r3, r3, #3
 80015be:	1a9b      	subs	r3, r3, r2
 80015c0:	009b      	lsls	r3, r3, #2
 80015c2:	4403      	add	r3, r0
 80015c4:	3344      	adds	r3, #68	; 0x44
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	4419      	add	r1, r3
 80015ca:	6878      	ldr	r0, [r7, #4]
 80015cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015ce:	4613      	mov	r3, r2
 80015d0:	00db      	lsls	r3, r3, #3
 80015d2:	1a9b      	subs	r3, r3, r2
 80015d4:	009b      	lsls	r3, r3, #2
 80015d6:	4403      	add	r3, r0
 80015d8:	3348      	adds	r3, #72	; 0x48
 80015da:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80015dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d113      	bne.n	800160a <HAL_PCD_IRQHandler+0x31c>
 80015e2:	6879      	ldr	r1, [r7, #4]
 80015e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015e6:	4613      	mov	r3, r2
 80015e8:	00db      	lsls	r3, r3, #3
 80015ea:	1a9b      	subs	r3, r3, r2
 80015ec:	009b      	lsls	r3, r3, #2
 80015ee:	440b      	add	r3, r1
 80015f0:	3350      	adds	r3, #80	; 0x50
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d108      	bne.n	800160a <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	6818      	ldr	r0, [r3, #0]
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001602:	461a      	mov	r2, r3
 8001604:	2101      	movs	r1, #1
 8001606:	f002 fdbf 	bl	8004188 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800160a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800160c:	b2db      	uxtb	r3, r3
 800160e:	4619      	mov	r1, r3
 8001610:	6878      	ldr	r0, [r7, #4]
 8001612:	f004 fe16 	bl	8006242 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001616:	693b      	ldr	r3, [r7, #16]
 8001618:	f003 0308 	and.w	r3, r3, #8
 800161c:	2b00      	cmp	r3, #0
 800161e:	d008      	beq.n	8001632 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001622:	015a      	lsls	r2, r3, #5
 8001624:	69fb      	ldr	r3, [r7, #28]
 8001626:	4413      	add	r3, r2
 8001628:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800162c:	461a      	mov	r2, r3
 800162e:	2308      	movs	r3, #8
 8001630:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001632:	693b      	ldr	r3, [r7, #16]
 8001634:	f003 0310 	and.w	r3, r3, #16
 8001638:	2b00      	cmp	r3, #0
 800163a:	d008      	beq.n	800164e <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800163c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800163e:	015a      	lsls	r2, r3, #5
 8001640:	69fb      	ldr	r3, [r7, #28]
 8001642:	4413      	add	r3, r2
 8001644:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001648:	461a      	mov	r2, r3
 800164a:	2310      	movs	r3, #16
 800164c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800164e:	693b      	ldr	r3, [r7, #16]
 8001650:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001654:	2b00      	cmp	r3, #0
 8001656:	d008      	beq.n	800166a <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800165a:	015a      	lsls	r2, r3, #5
 800165c:	69fb      	ldr	r3, [r7, #28]
 800165e:	4413      	add	r3, r2
 8001660:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001664:	461a      	mov	r2, r3
 8001666:	2340      	movs	r3, #64	; 0x40
 8001668:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800166a:	693b      	ldr	r3, [r7, #16]
 800166c:	f003 0302 	and.w	r3, r3, #2
 8001670:	2b00      	cmp	r3, #0
 8001672:	d008      	beq.n	8001686 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001676:	015a      	lsls	r2, r3, #5
 8001678:	69fb      	ldr	r3, [r7, #28]
 800167a:	4413      	add	r3, r2
 800167c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001680:	461a      	mov	r2, r3
 8001682:	2302      	movs	r3, #2
 8001684:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001686:	693b      	ldr	r3, [r7, #16]
 8001688:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800168c:	2b00      	cmp	r3, #0
 800168e:	d003      	beq.n	8001698 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001690:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001692:	6878      	ldr	r0, [r7, #4]
 8001694:	f000 fc1b 	bl	8001ece <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800169a:	3301      	adds	r3, #1
 800169c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800169e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016a0:	085b      	lsrs	r3, r3, #1
 80016a2:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80016a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	f47f af49 	bne.w	800153e <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	4618      	mov	r0, r3
 80016b2:	f002 fca4 	bl	8003ffe <USB_ReadInterrupts>
 80016b6:	4603      	mov	r3, r0
 80016b8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80016bc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80016c0:	d122      	bne.n	8001708 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80016c2:	69fb      	ldr	r3, [r7, #28]
 80016c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80016c8:	685b      	ldr	r3, [r3, #4]
 80016ca:	69fa      	ldr	r2, [r7, #28]
 80016cc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80016d0:	f023 0301 	bic.w	r3, r3, #1
 80016d4:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 80016dc:	2b01      	cmp	r3, #1
 80016de:	d108      	bne.n	80016f2 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	2200      	movs	r2, #0
 80016e4:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80016e8:	2100      	movs	r1, #0
 80016ea:	6878      	ldr	r0, [r7, #4]
 80016ec:	f000 fe26 	bl	800233c <HAL_PCDEx_LPM_Callback>
 80016f0:	e002      	b.n	80016f8 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80016f2:	6878      	ldr	r0, [r7, #4]
 80016f4:	f004 fe12 	bl	800631c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	695a      	ldr	r2, [r3, #20]
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8001706:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	4618      	mov	r0, r3
 800170e:	f002 fc76 	bl	8003ffe <USB_ReadInterrupts>
 8001712:	4603      	mov	r3, r0
 8001714:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001718:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800171c:	d112      	bne.n	8001744 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800171e:	69fb      	ldr	r3, [r7, #28]
 8001720:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001724:	689b      	ldr	r3, [r3, #8]
 8001726:	f003 0301 	and.w	r3, r3, #1
 800172a:	2b01      	cmp	r3, #1
 800172c:	d102      	bne.n	8001734 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800172e:	6878      	ldr	r0, [r7, #4]
 8001730:	f004 fdce 	bl	80062d0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	695a      	ldr	r2, [r3, #20]
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8001742:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	4618      	mov	r0, r3
 800174a:	f002 fc58 	bl	8003ffe <USB_ReadInterrupts>
 800174e:	4603      	mov	r3, r0
 8001750:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001754:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001758:	f040 80c7 	bne.w	80018ea <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800175c:	69fb      	ldr	r3, [r7, #28]
 800175e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001762:	685b      	ldr	r3, [r3, #4]
 8001764:	69fa      	ldr	r2, [r7, #28]
 8001766:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800176a:	f023 0301 	bic.w	r3, r3, #1
 800176e:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	2110      	movs	r1, #16
 8001776:	4618      	mov	r0, r3
 8001778:	f001 fcf2 	bl	8003160 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800177c:	2300      	movs	r3, #0
 800177e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001780:	e056      	b.n	8001830 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001782:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001784:	015a      	lsls	r2, r3, #5
 8001786:	69fb      	ldr	r3, [r7, #28]
 8001788:	4413      	add	r3, r2
 800178a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800178e:	461a      	mov	r2, r3
 8001790:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001794:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001796:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001798:	015a      	lsls	r2, r3, #5
 800179a:	69fb      	ldr	r3, [r7, #28]
 800179c:	4413      	add	r3, r2
 800179e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80017a6:	0151      	lsls	r1, r2, #5
 80017a8:	69fa      	ldr	r2, [r7, #28]
 80017aa:	440a      	add	r2, r1
 80017ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80017b0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80017b4:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80017b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017b8:	015a      	lsls	r2, r3, #5
 80017ba:	69fb      	ldr	r3, [r7, #28]
 80017bc:	4413      	add	r3, r2
 80017be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80017c6:	0151      	lsls	r1, r2, #5
 80017c8:	69fa      	ldr	r2, [r7, #28]
 80017ca:	440a      	add	r2, r1
 80017cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80017d0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80017d4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80017d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017d8:	015a      	lsls	r2, r3, #5
 80017da:	69fb      	ldr	r3, [r7, #28]
 80017dc:	4413      	add	r3, r2
 80017de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80017e2:	461a      	mov	r2, r3
 80017e4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80017e8:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80017ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017ec:	015a      	lsls	r2, r3, #5
 80017ee:	69fb      	ldr	r3, [r7, #28]
 80017f0:	4413      	add	r3, r2
 80017f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80017fa:	0151      	lsls	r1, r2, #5
 80017fc:	69fa      	ldr	r2, [r7, #28]
 80017fe:	440a      	add	r2, r1
 8001800:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001804:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001808:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800180a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800180c:	015a      	lsls	r2, r3, #5
 800180e:	69fb      	ldr	r3, [r7, #28]
 8001810:	4413      	add	r3, r2
 8001812:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800181a:	0151      	lsls	r1, r2, #5
 800181c:	69fa      	ldr	r2, [r7, #28]
 800181e:	440a      	add	r2, r1
 8001820:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001824:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001828:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800182a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800182c:	3301      	adds	r3, #1
 800182e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	685b      	ldr	r3, [r3, #4]
 8001834:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001836:	429a      	cmp	r2, r3
 8001838:	d3a3      	bcc.n	8001782 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800183a:	69fb      	ldr	r3, [r7, #28]
 800183c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001840:	69db      	ldr	r3, [r3, #28]
 8001842:	69fa      	ldr	r2, [r7, #28]
 8001844:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001848:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800184c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001852:	2b00      	cmp	r3, #0
 8001854:	d016      	beq.n	8001884 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001856:	69fb      	ldr	r3, [r7, #28]
 8001858:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800185c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001860:	69fa      	ldr	r2, [r7, #28]
 8001862:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001866:	f043 030b 	orr.w	r3, r3, #11
 800186a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800186e:	69fb      	ldr	r3, [r7, #28]
 8001870:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001874:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001876:	69fa      	ldr	r2, [r7, #28]
 8001878:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800187c:	f043 030b 	orr.w	r3, r3, #11
 8001880:	6453      	str	r3, [r2, #68]	; 0x44
 8001882:	e015      	b.n	80018b0 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001884:	69fb      	ldr	r3, [r7, #28]
 8001886:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800188a:	695b      	ldr	r3, [r3, #20]
 800188c:	69fa      	ldr	r2, [r7, #28]
 800188e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001892:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001896:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800189a:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800189c:	69fb      	ldr	r3, [r7, #28]
 800189e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80018a2:	691b      	ldr	r3, [r3, #16]
 80018a4:	69fa      	ldr	r2, [r7, #28]
 80018a6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80018aa:	f043 030b 	orr.w	r3, r3, #11
 80018ae:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80018b0:	69fb      	ldr	r3, [r7, #28]
 80018b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	69fa      	ldr	r2, [r7, #28]
 80018ba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80018be:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80018c2:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	6818      	ldr	r0, [r3, #0]
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	691b      	ldr	r3, [r3, #16]
 80018cc:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80018d4:	461a      	mov	r2, r3
 80018d6:	f002 fc57 	bl	8004188 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	695a      	ldr	r2, [r3, #20]
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80018e8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	4618      	mov	r0, r3
 80018f0:	f002 fb85 	bl	8003ffe <USB_ReadInterrupts>
 80018f4:	4603      	mov	r3, r0
 80018f6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80018fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80018fe:	d124      	bne.n	800194a <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	4618      	mov	r0, r3
 8001906:	f002 fc1b 	bl	8004140 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	4618      	mov	r0, r3
 8001910:	f001 fc83 	bl	800321a <USB_GetDevSpeed>
 8001914:	4603      	mov	r3, r0
 8001916:	461a      	mov	r2, r3
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681c      	ldr	r4, [r3, #0]
 8001920:	f001 f93c 	bl	8002b9c <HAL_RCC_GetHCLKFreq>
 8001924:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800192a:	b2db      	uxtb	r3, r3
 800192c:	461a      	mov	r2, r3
 800192e:	4620      	mov	r0, r4
 8001930:	f001 f9a2 	bl	8002c78 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001934:	6878      	ldr	r0, [r7, #4]
 8001936:	f004 fcac 	bl	8006292 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	695a      	ldr	r2, [r3, #20]
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8001948:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	4618      	mov	r0, r3
 8001950:	f002 fb55 	bl	8003ffe <USB_ReadInterrupts>
 8001954:	4603      	mov	r3, r0
 8001956:	f003 0308 	and.w	r3, r3, #8
 800195a:	2b08      	cmp	r3, #8
 800195c:	d10a      	bne.n	8001974 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800195e:	6878      	ldr	r0, [r7, #4]
 8001960:	f004 fc89 	bl	8006276 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	695a      	ldr	r2, [r3, #20]
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f002 0208 	and.w	r2, r2, #8
 8001972:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	4618      	mov	r0, r3
 800197a:	f002 fb40 	bl	8003ffe <USB_ReadInterrupts>
 800197e:	4603      	mov	r3, r0
 8001980:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001984:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001988:	d10f      	bne.n	80019aa <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800198a:	2300      	movs	r3, #0
 800198c:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800198e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001990:	b2db      	uxtb	r3, r3
 8001992:	4619      	mov	r1, r3
 8001994:	6878      	ldr	r0, [r7, #4]
 8001996:	f004 fce1 	bl	800635c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	695a      	ldr	r2, [r3, #20]
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80019a8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	4618      	mov	r0, r3
 80019b0:	f002 fb25 	bl	8003ffe <USB_ReadInterrupts>
 80019b4:	4603      	mov	r3, r0
 80019b6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019ba:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80019be:	d10f      	bne.n	80019e0 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80019c0:	2300      	movs	r3, #0
 80019c2:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80019c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019c6:	b2db      	uxtb	r3, r3
 80019c8:	4619      	mov	r1, r3
 80019ca:	6878      	ldr	r0, [r7, #4]
 80019cc:	f004 fcb4 	bl	8006338 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	695a      	ldr	r2, [r3, #20]
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80019de:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	4618      	mov	r0, r3
 80019e6:	f002 fb0a 	bl	8003ffe <USB_ReadInterrupts>
 80019ea:	4603      	mov	r3, r0
 80019ec:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80019f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80019f4:	d10a      	bne.n	8001a0c <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80019f6:	6878      	ldr	r0, [r7, #4]
 80019f8:	f004 fcc2 	bl	8006380 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	695a      	ldr	r2, [r3, #20]
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8001a0a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	4618      	mov	r0, r3
 8001a12:	f002 faf4 	bl	8003ffe <USB_ReadInterrupts>
 8001a16:	4603      	mov	r3, r0
 8001a18:	f003 0304 	and.w	r3, r3, #4
 8001a1c:	2b04      	cmp	r3, #4
 8001a1e:	d115      	bne.n	8001a4c <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	685b      	ldr	r3, [r3, #4]
 8001a26:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001a28:	69bb      	ldr	r3, [r7, #24]
 8001a2a:	f003 0304 	and.w	r3, r3, #4
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d002      	beq.n	8001a38 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001a32:	6878      	ldr	r0, [r7, #4]
 8001a34:	f004 fcb2 	bl	800639c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	6859      	ldr	r1, [r3, #4]
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	69ba      	ldr	r2, [r7, #24]
 8001a44:	430a      	orrs	r2, r1
 8001a46:	605a      	str	r2, [r3, #4]
 8001a48:	e000      	b.n	8001a4c <HAL_PCD_IRQHandler+0x75e>
      return;
 8001a4a:	bf00      	nop
    }
  }
}
 8001a4c:	3734      	adds	r7, #52	; 0x34
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd90      	pop	{r4, r7, pc}

08001a52 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001a52:	b580      	push	{r7, lr}
 8001a54:	b082      	sub	sp, #8
 8001a56:	af00      	add	r7, sp, #0
 8001a58:	6078      	str	r0, [r7, #4]
 8001a5a:	460b      	mov	r3, r1
 8001a5c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001a64:	2b01      	cmp	r3, #1
 8001a66:	d101      	bne.n	8001a6c <HAL_PCD_SetAddress+0x1a>
 8001a68:	2302      	movs	r3, #2
 8001a6a:	e013      	b.n	8001a94 <HAL_PCD_SetAddress+0x42>
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	2201      	movs	r2, #1
 8001a70:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	78fa      	ldrb	r2, [r7, #3]
 8001a78:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	78fa      	ldrb	r2, [r7, #3]
 8001a82:	4611      	mov	r1, r2
 8001a84:	4618      	mov	r0, r3
 8001a86:	f002 fa52 	bl	8003f2e <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001a92:	2300      	movs	r3, #0
}
 8001a94:	4618      	mov	r0, r3
 8001a96:	3708      	adds	r7, #8
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bd80      	pop	{r7, pc}

08001a9c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b084      	sub	sp, #16
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
 8001aa4:	4608      	mov	r0, r1
 8001aa6:	4611      	mov	r1, r2
 8001aa8:	461a      	mov	r2, r3
 8001aaa:	4603      	mov	r3, r0
 8001aac:	70fb      	strb	r3, [r7, #3]
 8001aae:	460b      	mov	r3, r1
 8001ab0:	803b      	strh	r3, [r7, #0]
 8001ab2:	4613      	mov	r3, r2
 8001ab4:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001aba:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	da0f      	bge.n	8001ae2 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001ac2:	78fb      	ldrb	r3, [r7, #3]
 8001ac4:	f003 020f 	and.w	r2, r3, #15
 8001ac8:	4613      	mov	r3, r2
 8001aca:	00db      	lsls	r3, r3, #3
 8001acc:	1a9b      	subs	r3, r3, r2
 8001ace:	009b      	lsls	r3, r3, #2
 8001ad0:	3338      	adds	r3, #56	; 0x38
 8001ad2:	687a      	ldr	r2, [r7, #4]
 8001ad4:	4413      	add	r3, r2
 8001ad6:	3304      	adds	r3, #4
 8001ad8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	2201      	movs	r2, #1
 8001ade:	705a      	strb	r2, [r3, #1]
 8001ae0:	e00f      	b.n	8001b02 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001ae2:	78fb      	ldrb	r3, [r7, #3]
 8001ae4:	f003 020f 	and.w	r2, r3, #15
 8001ae8:	4613      	mov	r3, r2
 8001aea:	00db      	lsls	r3, r3, #3
 8001aec:	1a9b      	subs	r3, r3, r2
 8001aee:	009b      	lsls	r3, r3, #2
 8001af0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001af4:	687a      	ldr	r2, [r7, #4]
 8001af6:	4413      	add	r3, r2
 8001af8:	3304      	adds	r3, #4
 8001afa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	2200      	movs	r2, #0
 8001b00:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001b02:	78fb      	ldrb	r3, [r7, #3]
 8001b04:	f003 030f 	and.w	r3, r3, #15
 8001b08:	b2da      	uxtb	r2, r3
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001b0e:	883a      	ldrh	r2, [r7, #0]
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	78ba      	ldrb	r2, [r7, #2]
 8001b18:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	785b      	ldrb	r3, [r3, #1]
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d004      	beq.n	8001b2c <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	781b      	ldrb	r3, [r3, #0]
 8001b26:	b29a      	uxth	r2, r3
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001b2c:	78bb      	ldrb	r3, [r7, #2]
 8001b2e:	2b02      	cmp	r3, #2
 8001b30:	d102      	bne.n	8001b38 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	2200      	movs	r2, #0
 8001b36:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001b3e:	2b01      	cmp	r3, #1
 8001b40:	d101      	bne.n	8001b46 <HAL_PCD_EP_Open+0xaa>
 8001b42:	2302      	movs	r3, #2
 8001b44:	e00e      	b.n	8001b64 <HAL_PCD_EP_Open+0xc8>
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	2201      	movs	r2, #1
 8001b4a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	68f9      	ldr	r1, [r7, #12]
 8001b54:	4618      	mov	r0, r3
 8001b56:	f001 fb85 	bl	8003264 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8001b62:	7afb      	ldrb	r3, [r7, #11]
}
 8001b64:	4618      	mov	r0, r3
 8001b66:	3710      	adds	r7, #16
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	bd80      	pop	{r7, pc}

08001b6c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b084      	sub	sp, #16
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
 8001b74:	460b      	mov	r3, r1
 8001b76:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001b78:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	da0f      	bge.n	8001ba0 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001b80:	78fb      	ldrb	r3, [r7, #3]
 8001b82:	f003 020f 	and.w	r2, r3, #15
 8001b86:	4613      	mov	r3, r2
 8001b88:	00db      	lsls	r3, r3, #3
 8001b8a:	1a9b      	subs	r3, r3, r2
 8001b8c:	009b      	lsls	r3, r3, #2
 8001b8e:	3338      	adds	r3, #56	; 0x38
 8001b90:	687a      	ldr	r2, [r7, #4]
 8001b92:	4413      	add	r3, r2
 8001b94:	3304      	adds	r3, #4
 8001b96:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	2201      	movs	r2, #1
 8001b9c:	705a      	strb	r2, [r3, #1]
 8001b9e:	e00f      	b.n	8001bc0 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001ba0:	78fb      	ldrb	r3, [r7, #3]
 8001ba2:	f003 020f 	and.w	r2, r3, #15
 8001ba6:	4613      	mov	r3, r2
 8001ba8:	00db      	lsls	r3, r3, #3
 8001baa:	1a9b      	subs	r3, r3, r2
 8001bac:	009b      	lsls	r3, r3, #2
 8001bae:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001bb2:	687a      	ldr	r2, [r7, #4]
 8001bb4:	4413      	add	r3, r2
 8001bb6:	3304      	adds	r3, #4
 8001bb8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001bc0:	78fb      	ldrb	r3, [r7, #3]
 8001bc2:	f003 030f 	and.w	r3, r3, #15
 8001bc6:	b2da      	uxtb	r2, r3
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001bd2:	2b01      	cmp	r3, #1
 8001bd4:	d101      	bne.n	8001bda <HAL_PCD_EP_Close+0x6e>
 8001bd6:	2302      	movs	r3, #2
 8001bd8:	e00e      	b.n	8001bf8 <HAL_PCD_EP_Close+0x8c>
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	2201      	movs	r2, #1
 8001bde:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	68f9      	ldr	r1, [r7, #12]
 8001be8:	4618      	mov	r0, r3
 8001bea:	f001 fbc3 	bl	8003374 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8001bf6:	2300      	movs	r3, #0
}
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	3710      	adds	r7, #16
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	bd80      	pop	{r7, pc}

08001c00 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b086      	sub	sp, #24
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	60f8      	str	r0, [r7, #12]
 8001c08:	607a      	str	r2, [r7, #4]
 8001c0a:	603b      	str	r3, [r7, #0]
 8001c0c:	460b      	mov	r3, r1
 8001c0e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001c10:	7afb      	ldrb	r3, [r7, #11]
 8001c12:	f003 020f 	and.w	r2, r3, #15
 8001c16:	4613      	mov	r3, r2
 8001c18:	00db      	lsls	r3, r3, #3
 8001c1a:	1a9b      	subs	r3, r3, r2
 8001c1c:	009b      	lsls	r3, r3, #2
 8001c1e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001c22:	68fa      	ldr	r2, [r7, #12]
 8001c24:	4413      	add	r3, r2
 8001c26:	3304      	adds	r3, #4
 8001c28:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001c2a:	697b      	ldr	r3, [r7, #20]
 8001c2c:	687a      	ldr	r2, [r7, #4]
 8001c2e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001c30:	697b      	ldr	r3, [r7, #20]
 8001c32:	683a      	ldr	r2, [r7, #0]
 8001c34:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8001c36:	697b      	ldr	r3, [r7, #20]
 8001c38:	2200      	movs	r2, #0
 8001c3a:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8001c3c:	697b      	ldr	r3, [r7, #20]
 8001c3e:	2200      	movs	r2, #0
 8001c40:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001c42:	7afb      	ldrb	r3, [r7, #11]
 8001c44:	f003 030f 	and.w	r3, r3, #15
 8001c48:	b2da      	uxtb	r2, r3
 8001c4a:	697b      	ldr	r3, [r7, #20]
 8001c4c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	691b      	ldr	r3, [r3, #16]
 8001c52:	2b01      	cmp	r3, #1
 8001c54:	d102      	bne.n	8001c5c <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001c56:	687a      	ldr	r2, [r7, #4]
 8001c58:	697b      	ldr	r3, [r7, #20]
 8001c5a:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001c5c:	7afb      	ldrb	r3, [r7, #11]
 8001c5e:	f003 030f 	and.w	r3, r3, #15
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d109      	bne.n	8001c7a <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	6818      	ldr	r0, [r3, #0]
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	691b      	ldr	r3, [r3, #16]
 8001c6e:	b2db      	uxtb	r3, r3
 8001c70:	461a      	mov	r2, r3
 8001c72:	6979      	ldr	r1, [r7, #20]
 8001c74:	f001 fe9e 	bl	80039b4 <USB_EP0StartXfer>
 8001c78:	e008      	b.n	8001c8c <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	6818      	ldr	r0, [r3, #0]
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	691b      	ldr	r3, [r3, #16]
 8001c82:	b2db      	uxtb	r3, r3
 8001c84:	461a      	mov	r2, r3
 8001c86:	6979      	ldr	r1, [r7, #20]
 8001c88:	f001 fc50 	bl	800352c <USB_EPStartXfer>
  }

  return HAL_OK;
 8001c8c:	2300      	movs	r3, #0
}
 8001c8e:	4618      	mov	r0, r3
 8001c90:	3718      	adds	r7, #24
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bd80      	pop	{r7, pc}

08001c96 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001c96:	b480      	push	{r7}
 8001c98:	b083      	sub	sp, #12
 8001c9a:	af00      	add	r7, sp, #0
 8001c9c:	6078      	str	r0, [r7, #4]
 8001c9e:	460b      	mov	r3, r1
 8001ca0:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001ca2:	78fb      	ldrb	r3, [r7, #3]
 8001ca4:	f003 020f 	and.w	r2, r3, #15
 8001ca8:	6879      	ldr	r1, [r7, #4]
 8001caa:	4613      	mov	r3, r2
 8001cac:	00db      	lsls	r3, r3, #3
 8001cae:	1a9b      	subs	r3, r3, r2
 8001cb0:	009b      	lsls	r3, r3, #2
 8001cb2:	440b      	add	r3, r1
 8001cb4:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8001cb8:	681b      	ldr	r3, [r3, #0]
}
 8001cba:	4618      	mov	r0, r3
 8001cbc:	370c      	adds	r7, #12
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc4:	4770      	bx	lr

08001cc6 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001cc6:	b580      	push	{r7, lr}
 8001cc8:	b086      	sub	sp, #24
 8001cca:	af00      	add	r7, sp, #0
 8001ccc:	60f8      	str	r0, [r7, #12]
 8001cce:	607a      	str	r2, [r7, #4]
 8001cd0:	603b      	str	r3, [r7, #0]
 8001cd2:	460b      	mov	r3, r1
 8001cd4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001cd6:	7afb      	ldrb	r3, [r7, #11]
 8001cd8:	f003 020f 	and.w	r2, r3, #15
 8001cdc:	4613      	mov	r3, r2
 8001cde:	00db      	lsls	r3, r3, #3
 8001ce0:	1a9b      	subs	r3, r3, r2
 8001ce2:	009b      	lsls	r3, r3, #2
 8001ce4:	3338      	adds	r3, #56	; 0x38
 8001ce6:	68fa      	ldr	r2, [r7, #12]
 8001ce8:	4413      	add	r3, r2
 8001cea:	3304      	adds	r3, #4
 8001cec:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001cee:	697b      	ldr	r3, [r7, #20]
 8001cf0:	687a      	ldr	r2, [r7, #4]
 8001cf2:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001cf4:	697b      	ldr	r3, [r7, #20]
 8001cf6:	683a      	ldr	r2, [r7, #0]
 8001cf8:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8001cfa:	697b      	ldr	r3, [r7, #20]
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8001d00:	697b      	ldr	r3, [r7, #20]
 8001d02:	2201      	movs	r2, #1
 8001d04:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001d06:	7afb      	ldrb	r3, [r7, #11]
 8001d08:	f003 030f 	and.w	r3, r3, #15
 8001d0c:	b2da      	uxtb	r2, r3
 8001d0e:	697b      	ldr	r3, [r7, #20]
 8001d10:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	691b      	ldr	r3, [r3, #16]
 8001d16:	2b01      	cmp	r3, #1
 8001d18:	d102      	bne.n	8001d20 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001d1a:	687a      	ldr	r2, [r7, #4]
 8001d1c:	697b      	ldr	r3, [r7, #20]
 8001d1e:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001d20:	7afb      	ldrb	r3, [r7, #11]
 8001d22:	f003 030f 	and.w	r3, r3, #15
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d109      	bne.n	8001d3e <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	6818      	ldr	r0, [r3, #0]
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	691b      	ldr	r3, [r3, #16]
 8001d32:	b2db      	uxtb	r3, r3
 8001d34:	461a      	mov	r2, r3
 8001d36:	6979      	ldr	r1, [r7, #20]
 8001d38:	f001 fe3c 	bl	80039b4 <USB_EP0StartXfer>
 8001d3c:	e008      	b.n	8001d50 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	6818      	ldr	r0, [r3, #0]
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	691b      	ldr	r3, [r3, #16]
 8001d46:	b2db      	uxtb	r3, r3
 8001d48:	461a      	mov	r2, r3
 8001d4a:	6979      	ldr	r1, [r7, #20]
 8001d4c:	f001 fbee 	bl	800352c <USB_EPStartXfer>
  }

  return HAL_OK;
 8001d50:	2300      	movs	r3, #0
}
 8001d52:	4618      	mov	r0, r3
 8001d54:	3718      	adds	r7, #24
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bd80      	pop	{r7, pc}

08001d5a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001d5a:	b580      	push	{r7, lr}
 8001d5c:	b084      	sub	sp, #16
 8001d5e:	af00      	add	r7, sp, #0
 8001d60:	6078      	str	r0, [r7, #4]
 8001d62:	460b      	mov	r3, r1
 8001d64:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001d66:	78fb      	ldrb	r3, [r7, #3]
 8001d68:	f003 020f 	and.w	r2, r3, #15
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	685b      	ldr	r3, [r3, #4]
 8001d70:	429a      	cmp	r2, r3
 8001d72:	d901      	bls.n	8001d78 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001d74:	2301      	movs	r3, #1
 8001d76:	e050      	b.n	8001e1a <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001d78:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	da0f      	bge.n	8001da0 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001d80:	78fb      	ldrb	r3, [r7, #3]
 8001d82:	f003 020f 	and.w	r2, r3, #15
 8001d86:	4613      	mov	r3, r2
 8001d88:	00db      	lsls	r3, r3, #3
 8001d8a:	1a9b      	subs	r3, r3, r2
 8001d8c:	009b      	lsls	r3, r3, #2
 8001d8e:	3338      	adds	r3, #56	; 0x38
 8001d90:	687a      	ldr	r2, [r7, #4]
 8001d92:	4413      	add	r3, r2
 8001d94:	3304      	adds	r3, #4
 8001d96:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	2201      	movs	r2, #1
 8001d9c:	705a      	strb	r2, [r3, #1]
 8001d9e:	e00d      	b.n	8001dbc <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001da0:	78fa      	ldrb	r2, [r7, #3]
 8001da2:	4613      	mov	r3, r2
 8001da4:	00db      	lsls	r3, r3, #3
 8001da6:	1a9b      	subs	r3, r3, r2
 8001da8:	009b      	lsls	r3, r3, #2
 8001daa:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001dae:	687a      	ldr	r2, [r7, #4]
 8001db0:	4413      	add	r3, r2
 8001db2:	3304      	adds	r3, #4
 8001db4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	2200      	movs	r2, #0
 8001dba:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	2201      	movs	r2, #1
 8001dc0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001dc2:	78fb      	ldrb	r3, [r7, #3]
 8001dc4:	f003 030f 	and.w	r3, r3, #15
 8001dc8:	b2da      	uxtb	r2, r3
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001dd4:	2b01      	cmp	r3, #1
 8001dd6:	d101      	bne.n	8001ddc <HAL_PCD_EP_SetStall+0x82>
 8001dd8:	2302      	movs	r3, #2
 8001dda:	e01e      	b.n	8001e1a <HAL_PCD_EP_SetStall+0xc0>
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	2201      	movs	r2, #1
 8001de0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	68f9      	ldr	r1, [r7, #12]
 8001dea:	4618      	mov	r0, r3
 8001dec:	f001 ffcb 	bl	8003d86 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001df0:	78fb      	ldrb	r3, [r7, #3]
 8001df2:	f003 030f 	and.w	r3, r3, #15
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d10a      	bne.n	8001e10 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	6818      	ldr	r0, [r3, #0]
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	691b      	ldr	r3, [r3, #16]
 8001e02:	b2d9      	uxtb	r1, r3
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001e0a:	461a      	mov	r2, r3
 8001e0c:	f002 f9bc 	bl	8004188 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2200      	movs	r2, #0
 8001e14:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001e18:	2300      	movs	r3, #0
}
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	3710      	adds	r7, #16
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bd80      	pop	{r7, pc}

08001e22 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001e22:	b580      	push	{r7, lr}
 8001e24:	b084      	sub	sp, #16
 8001e26:	af00      	add	r7, sp, #0
 8001e28:	6078      	str	r0, [r7, #4]
 8001e2a:	460b      	mov	r3, r1
 8001e2c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001e2e:	78fb      	ldrb	r3, [r7, #3]
 8001e30:	f003 020f 	and.w	r2, r3, #15
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	685b      	ldr	r3, [r3, #4]
 8001e38:	429a      	cmp	r2, r3
 8001e3a:	d901      	bls.n	8001e40 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001e3c:	2301      	movs	r3, #1
 8001e3e:	e042      	b.n	8001ec6 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001e40:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	da0f      	bge.n	8001e68 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e48:	78fb      	ldrb	r3, [r7, #3]
 8001e4a:	f003 020f 	and.w	r2, r3, #15
 8001e4e:	4613      	mov	r3, r2
 8001e50:	00db      	lsls	r3, r3, #3
 8001e52:	1a9b      	subs	r3, r3, r2
 8001e54:	009b      	lsls	r3, r3, #2
 8001e56:	3338      	adds	r3, #56	; 0x38
 8001e58:	687a      	ldr	r2, [r7, #4]
 8001e5a:	4413      	add	r3, r2
 8001e5c:	3304      	adds	r3, #4
 8001e5e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	2201      	movs	r2, #1
 8001e64:	705a      	strb	r2, [r3, #1]
 8001e66:	e00f      	b.n	8001e88 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001e68:	78fb      	ldrb	r3, [r7, #3]
 8001e6a:	f003 020f 	and.w	r2, r3, #15
 8001e6e:	4613      	mov	r3, r2
 8001e70:	00db      	lsls	r3, r3, #3
 8001e72:	1a9b      	subs	r3, r3, r2
 8001e74:	009b      	lsls	r3, r3, #2
 8001e76:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001e7a:	687a      	ldr	r2, [r7, #4]
 8001e7c:	4413      	add	r3, r2
 8001e7e:	3304      	adds	r3, #4
 8001e80:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	2200      	movs	r2, #0
 8001e86:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001e8e:	78fb      	ldrb	r3, [r7, #3]
 8001e90:	f003 030f 	and.w	r3, r3, #15
 8001e94:	b2da      	uxtb	r2, r3
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001ea0:	2b01      	cmp	r3, #1
 8001ea2:	d101      	bne.n	8001ea8 <HAL_PCD_EP_ClrStall+0x86>
 8001ea4:	2302      	movs	r3, #2
 8001ea6:	e00e      	b.n	8001ec6 <HAL_PCD_EP_ClrStall+0xa4>
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	2201      	movs	r2, #1
 8001eac:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	68f9      	ldr	r1, [r7, #12]
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	f001 ffd3 	bl	8003e62 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001ec4:	2300      	movs	r3, #0
}
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	3710      	adds	r7, #16
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bd80      	pop	{r7, pc}

08001ece <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001ece:	b580      	push	{r7, lr}
 8001ed0:	b08a      	sub	sp, #40	; 0x28
 8001ed2:	af02      	add	r7, sp, #8
 8001ed4:	6078      	str	r0, [r7, #4]
 8001ed6:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001ede:	697b      	ldr	r3, [r7, #20]
 8001ee0:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8001ee2:	683a      	ldr	r2, [r7, #0]
 8001ee4:	4613      	mov	r3, r2
 8001ee6:	00db      	lsls	r3, r3, #3
 8001ee8:	1a9b      	subs	r3, r3, r2
 8001eea:	009b      	lsls	r3, r3, #2
 8001eec:	3338      	adds	r3, #56	; 0x38
 8001eee:	687a      	ldr	r2, [r7, #4]
 8001ef0:	4413      	add	r3, r2
 8001ef2:	3304      	adds	r3, #4
 8001ef4:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	699a      	ldr	r2, [r3, #24]
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	695b      	ldr	r3, [r3, #20]
 8001efe:	429a      	cmp	r2, r3
 8001f00:	d901      	bls.n	8001f06 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8001f02:	2301      	movs	r3, #1
 8001f04:	e06c      	b.n	8001fe0 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	695a      	ldr	r2, [r3, #20]
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	699b      	ldr	r3, [r3, #24]
 8001f0e:	1ad3      	subs	r3, r2, r3
 8001f10:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	689b      	ldr	r3, [r3, #8]
 8001f16:	69fa      	ldr	r2, [r7, #28]
 8001f18:	429a      	cmp	r2, r3
 8001f1a:	d902      	bls.n	8001f22 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	689b      	ldr	r3, [r3, #8]
 8001f20:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8001f22:	69fb      	ldr	r3, [r7, #28]
 8001f24:	3303      	adds	r3, #3
 8001f26:	089b      	lsrs	r3, r3, #2
 8001f28:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001f2a:	e02b      	b.n	8001f84 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	695a      	ldr	r2, [r3, #20]
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	699b      	ldr	r3, [r3, #24]
 8001f34:	1ad3      	subs	r3, r2, r3
 8001f36:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	689b      	ldr	r3, [r3, #8]
 8001f3c:	69fa      	ldr	r2, [r7, #28]
 8001f3e:	429a      	cmp	r2, r3
 8001f40:	d902      	bls.n	8001f48 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	689b      	ldr	r3, [r3, #8]
 8001f46:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8001f48:	69fb      	ldr	r3, [r7, #28]
 8001f4a:	3303      	adds	r3, #3
 8001f4c:	089b      	lsrs	r3, r3, #2
 8001f4e:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	68d9      	ldr	r1, [r3, #12]
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	b2da      	uxtb	r2, r3
 8001f58:	69fb      	ldr	r3, [r7, #28]
 8001f5a:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8001f60:	b2db      	uxtb	r3, r3
 8001f62:	9300      	str	r3, [sp, #0]
 8001f64:	4603      	mov	r3, r0
 8001f66:	6978      	ldr	r0, [r7, #20]
 8001f68:	f001 fe77 	bl	8003c5a <USB_WritePacket>

    ep->xfer_buff  += len;
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	68da      	ldr	r2, [r3, #12]
 8001f70:	69fb      	ldr	r3, [r7, #28]
 8001f72:	441a      	add	r2, r3
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	699a      	ldr	r2, [r3, #24]
 8001f7c:	69fb      	ldr	r3, [r7, #28]
 8001f7e:	441a      	add	r2, r3
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	015a      	lsls	r2, r3, #5
 8001f88:	693b      	ldr	r3, [r7, #16]
 8001f8a:	4413      	add	r3, r2
 8001f8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001f90:	699b      	ldr	r3, [r3, #24]
 8001f92:	b29b      	uxth	r3, r3
 8001f94:	69ba      	ldr	r2, [r7, #24]
 8001f96:	429a      	cmp	r2, r3
 8001f98:	d809      	bhi.n	8001fae <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	699a      	ldr	r2, [r3, #24]
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001fa2:	429a      	cmp	r2, r3
 8001fa4:	d203      	bcs.n	8001fae <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	695b      	ldr	r3, [r3, #20]
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d1be      	bne.n	8001f2c <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	695a      	ldr	r2, [r3, #20]
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	699b      	ldr	r3, [r3, #24]
 8001fb6:	429a      	cmp	r2, r3
 8001fb8:	d811      	bhi.n	8001fde <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	f003 030f 	and.w	r3, r3, #15
 8001fc0:	2201      	movs	r2, #1
 8001fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc6:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001fc8:	693b      	ldr	r3, [r7, #16]
 8001fca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001fce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001fd0:	68bb      	ldr	r3, [r7, #8]
 8001fd2:	43db      	mvns	r3, r3
 8001fd4:	6939      	ldr	r1, [r7, #16]
 8001fd6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001fda:	4013      	ands	r3, r2
 8001fdc:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8001fde:	2300      	movs	r3, #0
}
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	3720      	adds	r7, #32
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	bd80      	pop	{r7, pc}

08001fe8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b086      	sub	sp, #24
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
 8001ff0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001ff8:	697b      	ldr	r3, [r7, #20]
 8001ffa:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8001ffc:	697b      	ldr	r3, [r7, #20]
 8001ffe:	333c      	adds	r3, #60	; 0x3c
 8002000:	3304      	adds	r3, #4
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	015a      	lsls	r2, r3, #5
 800200a:	693b      	ldr	r3, [r7, #16]
 800200c:	4413      	add	r3, r2
 800200e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002012:	689b      	ldr	r3, [r3, #8]
 8002014:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	691b      	ldr	r3, [r3, #16]
 800201a:	2b01      	cmp	r3, #1
 800201c:	f040 80a0 	bne.w	8002160 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002020:	68bb      	ldr	r3, [r7, #8]
 8002022:	f003 0308 	and.w	r3, r3, #8
 8002026:	2b00      	cmp	r3, #0
 8002028:	d015      	beq.n	8002056 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	4a72      	ldr	r2, [pc, #456]	; (80021f8 <PCD_EP_OutXfrComplete_int+0x210>)
 800202e:	4293      	cmp	r3, r2
 8002030:	f240 80dd 	bls.w	80021ee <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002034:	68bb      	ldr	r3, [r7, #8]
 8002036:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800203a:	2b00      	cmp	r3, #0
 800203c:	f000 80d7 	beq.w	80021ee <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	015a      	lsls	r2, r3, #5
 8002044:	693b      	ldr	r3, [r7, #16]
 8002046:	4413      	add	r3, r2
 8002048:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800204c:	461a      	mov	r2, r3
 800204e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002052:	6093      	str	r3, [r2, #8]
 8002054:	e0cb      	b.n	80021ee <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002056:	68bb      	ldr	r3, [r7, #8]
 8002058:	f003 0320 	and.w	r3, r3, #32
 800205c:	2b00      	cmp	r3, #0
 800205e:	d009      	beq.n	8002074 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	015a      	lsls	r2, r3, #5
 8002064:	693b      	ldr	r3, [r7, #16]
 8002066:	4413      	add	r3, r2
 8002068:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800206c:	461a      	mov	r2, r3
 800206e:	2320      	movs	r3, #32
 8002070:	6093      	str	r3, [r2, #8]
 8002072:	e0bc      	b.n	80021ee <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002074:	68bb      	ldr	r3, [r7, #8]
 8002076:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800207a:	2b00      	cmp	r3, #0
 800207c:	f040 80b7 	bne.w	80021ee <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	4a5d      	ldr	r2, [pc, #372]	; (80021f8 <PCD_EP_OutXfrComplete_int+0x210>)
 8002084:	4293      	cmp	r3, r2
 8002086:	d90f      	bls.n	80020a8 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002088:	68bb      	ldr	r3, [r7, #8]
 800208a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800208e:	2b00      	cmp	r3, #0
 8002090:	d00a      	beq.n	80020a8 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	015a      	lsls	r2, r3, #5
 8002096:	693b      	ldr	r3, [r7, #16]
 8002098:	4413      	add	r3, r2
 800209a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800209e:	461a      	mov	r2, r3
 80020a0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80020a4:	6093      	str	r3, [r2, #8]
 80020a6:	e0a2      	b.n	80021ee <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 80020a8:	6879      	ldr	r1, [r7, #4]
 80020aa:	683a      	ldr	r2, [r7, #0]
 80020ac:	4613      	mov	r3, r2
 80020ae:	00db      	lsls	r3, r3, #3
 80020b0:	1a9b      	subs	r3, r3, r2
 80020b2:	009b      	lsls	r3, r3, #2
 80020b4:	440b      	add	r3, r1
 80020b6:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80020ba:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	0159      	lsls	r1, r3, #5
 80020c0:	693b      	ldr	r3, [r7, #16]
 80020c2:	440b      	add	r3, r1
 80020c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80020c8:	691b      	ldr	r3, [r3, #16]
 80020ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 80020ce:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 80020d0:	6878      	ldr	r0, [r7, #4]
 80020d2:	683a      	ldr	r2, [r7, #0]
 80020d4:	4613      	mov	r3, r2
 80020d6:	00db      	lsls	r3, r3, #3
 80020d8:	1a9b      	subs	r3, r3, r2
 80020da:	009b      	lsls	r3, r3, #2
 80020dc:	4403      	add	r3, r0
 80020de:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80020e2:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 80020e4:	6879      	ldr	r1, [r7, #4]
 80020e6:	683a      	ldr	r2, [r7, #0]
 80020e8:	4613      	mov	r3, r2
 80020ea:	00db      	lsls	r3, r3, #3
 80020ec:	1a9b      	subs	r3, r3, r2
 80020ee:	009b      	lsls	r3, r3, #2
 80020f0:	440b      	add	r3, r1
 80020f2:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80020f6:	6819      	ldr	r1, [r3, #0]
 80020f8:	6878      	ldr	r0, [r7, #4]
 80020fa:	683a      	ldr	r2, [r7, #0]
 80020fc:	4613      	mov	r3, r2
 80020fe:	00db      	lsls	r3, r3, #3
 8002100:	1a9b      	subs	r3, r3, r2
 8002102:	009b      	lsls	r3, r3, #2
 8002104:	4403      	add	r3, r0
 8002106:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	4419      	add	r1, r3
 800210e:	6878      	ldr	r0, [r7, #4]
 8002110:	683a      	ldr	r2, [r7, #0]
 8002112:	4613      	mov	r3, r2
 8002114:	00db      	lsls	r3, r3, #3
 8002116:	1a9b      	subs	r3, r3, r2
 8002118:	009b      	lsls	r3, r3, #2
 800211a:	4403      	add	r3, r0
 800211c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002120:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	2b00      	cmp	r3, #0
 8002126:	d114      	bne.n	8002152 <PCD_EP_OutXfrComplete_int+0x16a>
 8002128:	6879      	ldr	r1, [r7, #4]
 800212a:	683a      	ldr	r2, [r7, #0]
 800212c:	4613      	mov	r3, r2
 800212e:	00db      	lsls	r3, r3, #3
 8002130:	1a9b      	subs	r3, r3, r2
 8002132:	009b      	lsls	r3, r3, #2
 8002134:	440b      	add	r3, r1
 8002136:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	2b00      	cmp	r3, #0
 800213e:	d108      	bne.n	8002152 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6818      	ldr	r0, [r3, #0]
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800214a:	461a      	mov	r2, r3
 800214c:	2101      	movs	r1, #1
 800214e:	f002 f81b 	bl	8004188 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	b2db      	uxtb	r3, r3
 8002156:	4619      	mov	r1, r3
 8002158:	6878      	ldr	r0, [r7, #4]
 800215a:	f004 f857 	bl	800620c <HAL_PCD_DataOutStageCallback>
 800215e:	e046      	b.n	80021ee <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	4a26      	ldr	r2, [pc, #152]	; (80021fc <PCD_EP_OutXfrComplete_int+0x214>)
 8002164:	4293      	cmp	r3, r2
 8002166:	d124      	bne.n	80021b2 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002168:	68bb      	ldr	r3, [r7, #8]
 800216a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800216e:	2b00      	cmp	r3, #0
 8002170:	d00a      	beq.n	8002188 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	015a      	lsls	r2, r3, #5
 8002176:	693b      	ldr	r3, [r7, #16]
 8002178:	4413      	add	r3, r2
 800217a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800217e:	461a      	mov	r2, r3
 8002180:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002184:	6093      	str	r3, [r2, #8]
 8002186:	e032      	b.n	80021ee <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002188:	68bb      	ldr	r3, [r7, #8]
 800218a:	f003 0320 	and.w	r3, r3, #32
 800218e:	2b00      	cmp	r3, #0
 8002190:	d008      	beq.n	80021a4 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	015a      	lsls	r2, r3, #5
 8002196:	693b      	ldr	r3, [r7, #16]
 8002198:	4413      	add	r3, r2
 800219a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800219e:	461a      	mov	r2, r3
 80021a0:	2320      	movs	r3, #32
 80021a2:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	b2db      	uxtb	r3, r3
 80021a8:	4619      	mov	r1, r3
 80021aa:	6878      	ldr	r0, [r7, #4]
 80021ac:	f004 f82e 	bl	800620c <HAL_PCD_DataOutStageCallback>
 80021b0:	e01d      	b.n	80021ee <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d114      	bne.n	80021e2 <PCD_EP_OutXfrComplete_int+0x1fa>
 80021b8:	6879      	ldr	r1, [r7, #4]
 80021ba:	683a      	ldr	r2, [r7, #0]
 80021bc:	4613      	mov	r3, r2
 80021be:	00db      	lsls	r3, r3, #3
 80021c0:	1a9b      	subs	r3, r3, r2
 80021c2:	009b      	lsls	r3, r3, #2
 80021c4:	440b      	add	r3, r1
 80021c6:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d108      	bne.n	80021e2 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6818      	ldr	r0, [r3, #0]
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80021da:	461a      	mov	r2, r3
 80021dc:	2100      	movs	r1, #0
 80021de:	f001 ffd3 	bl	8004188 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	b2db      	uxtb	r3, r3
 80021e6:	4619      	mov	r1, r3
 80021e8:	6878      	ldr	r0, [r7, #4]
 80021ea:	f004 f80f 	bl	800620c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80021ee:	2300      	movs	r3, #0
}
 80021f0:	4618      	mov	r0, r3
 80021f2:	3718      	adds	r7, #24
 80021f4:	46bd      	mov	sp, r7
 80021f6:	bd80      	pop	{r7, pc}
 80021f8:	4f54300a 	.word	0x4f54300a
 80021fc:	4f54310a 	.word	0x4f54310a

08002200 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b086      	sub	sp, #24
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
 8002208:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002210:	697b      	ldr	r3, [r7, #20]
 8002212:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002214:	697b      	ldr	r3, [r7, #20]
 8002216:	333c      	adds	r3, #60	; 0x3c
 8002218:	3304      	adds	r3, #4
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	015a      	lsls	r2, r3, #5
 8002222:	693b      	ldr	r3, [r7, #16]
 8002224:	4413      	add	r3, r2
 8002226:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800222a:	689b      	ldr	r3, [r3, #8]
 800222c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	4a15      	ldr	r2, [pc, #84]	; (8002288 <PCD_EP_OutSetupPacket_int+0x88>)
 8002232:	4293      	cmp	r3, r2
 8002234:	d90e      	bls.n	8002254 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002236:	68bb      	ldr	r3, [r7, #8]
 8002238:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800223c:	2b00      	cmp	r3, #0
 800223e:	d009      	beq.n	8002254 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	015a      	lsls	r2, r3, #5
 8002244:	693b      	ldr	r3, [r7, #16]
 8002246:	4413      	add	r3, r2
 8002248:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800224c:	461a      	mov	r2, r3
 800224e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002252:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002254:	6878      	ldr	r0, [r7, #4]
 8002256:	f003 ffc7 	bl	80061e8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	4a0a      	ldr	r2, [pc, #40]	; (8002288 <PCD_EP_OutSetupPacket_int+0x88>)
 800225e:	4293      	cmp	r3, r2
 8002260:	d90c      	bls.n	800227c <PCD_EP_OutSetupPacket_int+0x7c>
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	691b      	ldr	r3, [r3, #16]
 8002266:	2b01      	cmp	r3, #1
 8002268:	d108      	bne.n	800227c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	6818      	ldr	r0, [r3, #0]
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002274:	461a      	mov	r2, r3
 8002276:	2101      	movs	r1, #1
 8002278:	f001 ff86 	bl	8004188 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800227c:	2300      	movs	r3, #0
}
 800227e:	4618      	mov	r0, r3
 8002280:	3718      	adds	r7, #24
 8002282:	46bd      	mov	sp, r7
 8002284:	bd80      	pop	{r7, pc}
 8002286:	bf00      	nop
 8002288:	4f54300a 	.word	0x4f54300a

0800228c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800228c:	b480      	push	{r7}
 800228e:	b085      	sub	sp, #20
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
 8002294:	460b      	mov	r3, r1
 8002296:	70fb      	strb	r3, [r7, #3]
 8002298:	4613      	mov	r3, r2
 800229a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022a2:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80022a4:	78fb      	ldrb	r3, [r7, #3]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d107      	bne.n	80022ba <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80022aa:	883b      	ldrh	r3, [r7, #0]
 80022ac:	0419      	lsls	r1, r3, #16
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	68ba      	ldr	r2, [r7, #8]
 80022b4:	430a      	orrs	r2, r1
 80022b6:	629a      	str	r2, [r3, #40]	; 0x28
 80022b8:	e028      	b.n	800230c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022c0:	0c1b      	lsrs	r3, r3, #16
 80022c2:	68ba      	ldr	r2, [r7, #8]
 80022c4:	4413      	add	r3, r2
 80022c6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80022c8:	2300      	movs	r3, #0
 80022ca:	73fb      	strb	r3, [r7, #15]
 80022cc:	e00d      	b.n	80022ea <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681a      	ldr	r2, [r3, #0]
 80022d2:	7bfb      	ldrb	r3, [r7, #15]
 80022d4:	3340      	adds	r3, #64	; 0x40
 80022d6:	009b      	lsls	r3, r3, #2
 80022d8:	4413      	add	r3, r2
 80022da:	685b      	ldr	r3, [r3, #4]
 80022dc:	0c1b      	lsrs	r3, r3, #16
 80022de:	68ba      	ldr	r2, [r7, #8]
 80022e0:	4413      	add	r3, r2
 80022e2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80022e4:	7bfb      	ldrb	r3, [r7, #15]
 80022e6:	3301      	adds	r3, #1
 80022e8:	73fb      	strb	r3, [r7, #15]
 80022ea:	7bfa      	ldrb	r2, [r7, #15]
 80022ec:	78fb      	ldrb	r3, [r7, #3]
 80022ee:	3b01      	subs	r3, #1
 80022f0:	429a      	cmp	r2, r3
 80022f2:	d3ec      	bcc.n	80022ce <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80022f4:	883b      	ldrh	r3, [r7, #0]
 80022f6:	0418      	lsls	r0, r3, #16
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6819      	ldr	r1, [r3, #0]
 80022fc:	78fb      	ldrb	r3, [r7, #3]
 80022fe:	3b01      	subs	r3, #1
 8002300:	68ba      	ldr	r2, [r7, #8]
 8002302:	4302      	orrs	r2, r0
 8002304:	3340      	adds	r3, #64	; 0x40
 8002306:	009b      	lsls	r3, r3, #2
 8002308:	440b      	add	r3, r1
 800230a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800230c:	2300      	movs	r3, #0
}
 800230e:	4618      	mov	r0, r3
 8002310:	3714      	adds	r7, #20
 8002312:	46bd      	mov	sp, r7
 8002314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002318:	4770      	bx	lr

0800231a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800231a:	b480      	push	{r7}
 800231c:	b083      	sub	sp, #12
 800231e:	af00      	add	r7, sp, #0
 8002320:	6078      	str	r0, [r7, #4]
 8002322:	460b      	mov	r3, r1
 8002324:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	887a      	ldrh	r2, [r7, #2]
 800232c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800232e:	2300      	movs	r3, #0
}
 8002330:	4618      	mov	r0, r3
 8002332:	370c      	adds	r7, #12
 8002334:	46bd      	mov	sp, r7
 8002336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233a:	4770      	bx	lr

0800233c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800233c:	b480      	push	{r7}
 800233e:	b083      	sub	sp, #12
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
 8002344:	460b      	mov	r3, r1
 8002346:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002348:	bf00      	nop
 800234a:	370c      	adds	r7, #12
 800234c:	46bd      	mov	sp, r7
 800234e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002352:	4770      	bx	lr

08002354 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b086      	sub	sp, #24
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2b00      	cmp	r3, #0
 8002360:	d101      	bne.n	8002366 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002362:	2301      	movs	r3, #1
 8002364:	e267      	b.n	8002836 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f003 0301 	and.w	r3, r3, #1
 800236e:	2b00      	cmp	r3, #0
 8002370:	d075      	beq.n	800245e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002372:	4b88      	ldr	r3, [pc, #544]	; (8002594 <HAL_RCC_OscConfig+0x240>)
 8002374:	689b      	ldr	r3, [r3, #8]
 8002376:	f003 030c 	and.w	r3, r3, #12
 800237a:	2b04      	cmp	r3, #4
 800237c:	d00c      	beq.n	8002398 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800237e:	4b85      	ldr	r3, [pc, #532]	; (8002594 <HAL_RCC_OscConfig+0x240>)
 8002380:	689b      	ldr	r3, [r3, #8]
 8002382:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002386:	2b08      	cmp	r3, #8
 8002388:	d112      	bne.n	80023b0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800238a:	4b82      	ldr	r3, [pc, #520]	; (8002594 <HAL_RCC_OscConfig+0x240>)
 800238c:	685b      	ldr	r3, [r3, #4]
 800238e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002392:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002396:	d10b      	bne.n	80023b0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002398:	4b7e      	ldr	r3, [pc, #504]	; (8002594 <HAL_RCC_OscConfig+0x240>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d05b      	beq.n	800245c <HAL_RCC_OscConfig+0x108>
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	685b      	ldr	r3, [r3, #4]
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d157      	bne.n	800245c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80023ac:	2301      	movs	r3, #1
 80023ae:	e242      	b.n	8002836 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	685b      	ldr	r3, [r3, #4]
 80023b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023b8:	d106      	bne.n	80023c8 <HAL_RCC_OscConfig+0x74>
 80023ba:	4b76      	ldr	r3, [pc, #472]	; (8002594 <HAL_RCC_OscConfig+0x240>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	4a75      	ldr	r2, [pc, #468]	; (8002594 <HAL_RCC_OscConfig+0x240>)
 80023c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023c4:	6013      	str	r3, [r2, #0]
 80023c6:	e01d      	b.n	8002404 <HAL_RCC_OscConfig+0xb0>
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	685b      	ldr	r3, [r3, #4]
 80023cc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80023d0:	d10c      	bne.n	80023ec <HAL_RCC_OscConfig+0x98>
 80023d2:	4b70      	ldr	r3, [pc, #448]	; (8002594 <HAL_RCC_OscConfig+0x240>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	4a6f      	ldr	r2, [pc, #444]	; (8002594 <HAL_RCC_OscConfig+0x240>)
 80023d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80023dc:	6013      	str	r3, [r2, #0]
 80023de:	4b6d      	ldr	r3, [pc, #436]	; (8002594 <HAL_RCC_OscConfig+0x240>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	4a6c      	ldr	r2, [pc, #432]	; (8002594 <HAL_RCC_OscConfig+0x240>)
 80023e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023e8:	6013      	str	r3, [r2, #0]
 80023ea:	e00b      	b.n	8002404 <HAL_RCC_OscConfig+0xb0>
 80023ec:	4b69      	ldr	r3, [pc, #420]	; (8002594 <HAL_RCC_OscConfig+0x240>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	4a68      	ldr	r2, [pc, #416]	; (8002594 <HAL_RCC_OscConfig+0x240>)
 80023f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023f6:	6013      	str	r3, [r2, #0]
 80023f8:	4b66      	ldr	r3, [pc, #408]	; (8002594 <HAL_RCC_OscConfig+0x240>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	4a65      	ldr	r2, [pc, #404]	; (8002594 <HAL_RCC_OscConfig+0x240>)
 80023fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002402:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	685b      	ldr	r3, [r3, #4]
 8002408:	2b00      	cmp	r3, #0
 800240a:	d013      	beq.n	8002434 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800240c:	f7fe fb26 	bl	8000a5c <HAL_GetTick>
 8002410:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002412:	e008      	b.n	8002426 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002414:	f7fe fb22 	bl	8000a5c <HAL_GetTick>
 8002418:	4602      	mov	r2, r0
 800241a:	693b      	ldr	r3, [r7, #16]
 800241c:	1ad3      	subs	r3, r2, r3
 800241e:	2b64      	cmp	r3, #100	; 0x64
 8002420:	d901      	bls.n	8002426 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002422:	2303      	movs	r3, #3
 8002424:	e207      	b.n	8002836 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002426:	4b5b      	ldr	r3, [pc, #364]	; (8002594 <HAL_RCC_OscConfig+0x240>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800242e:	2b00      	cmp	r3, #0
 8002430:	d0f0      	beq.n	8002414 <HAL_RCC_OscConfig+0xc0>
 8002432:	e014      	b.n	800245e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002434:	f7fe fb12 	bl	8000a5c <HAL_GetTick>
 8002438:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800243a:	e008      	b.n	800244e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800243c:	f7fe fb0e 	bl	8000a5c <HAL_GetTick>
 8002440:	4602      	mov	r2, r0
 8002442:	693b      	ldr	r3, [r7, #16]
 8002444:	1ad3      	subs	r3, r2, r3
 8002446:	2b64      	cmp	r3, #100	; 0x64
 8002448:	d901      	bls.n	800244e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800244a:	2303      	movs	r3, #3
 800244c:	e1f3      	b.n	8002836 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800244e:	4b51      	ldr	r3, [pc, #324]	; (8002594 <HAL_RCC_OscConfig+0x240>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002456:	2b00      	cmp	r3, #0
 8002458:	d1f0      	bne.n	800243c <HAL_RCC_OscConfig+0xe8>
 800245a:	e000      	b.n	800245e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800245c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f003 0302 	and.w	r3, r3, #2
 8002466:	2b00      	cmp	r3, #0
 8002468:	d063      	beq.n	8002532 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800246a:	4b4a      	ldr	r3, [pc, #296]	; (8002594 <HAL_RCC_OscConfig+0x240>)
 800246c:	689b      	ldr	r3, [r3, #8]
 800246e:	f003 030c 	and.w	r3, r3, #12
 8002472:	2b00      	cmp	r3, #0
 8002474:	d00b      	beq.n	800248e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002476:	4b47      	ldr	r3, [pc, #284]	; (8002594 <HAL_RCC_OscConfig+0x240>)
 8002478:	689b      	ldr	r3, [r3, #8]
 800247a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800247e:	2b08      	cmp	r3, #8
 8002480:	d11c      	bne.n	80024bc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002482:	4b44      	ldr	r3, [pc, #272]	; (8002594 <HAL_RCC_OscConfig+0x240>)
 8002484:	685b      	ldr	r3, [r3, #4]
 8002486:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800248a:	2b00      	cmp	r3, #0
 800248c:	d116      	bne.n	80024bc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800248e:	4b41      	ldr	r3, [pc, #260]	; (8002594 <HAL_RCC_OscConfig+0x240>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f003 0302 	and.w	r3, r3, #2
 8002496:	2b00      	cmp	r3, #0
 8002498:	d005      	beq.n	80024a6 <HAL_RCC_OscConfig+0x152>
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	68db      	ldr	r3, [r3, #12]
 800249e:	2b01      	cmp	r3, #1
 80024a0:	d001      	beq.n	80024a6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80024a2:	2301      	movs	r3, #1
 80024a4:	e1c7      	b.n	8002836 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024a6:	4b3b      	ldr	r3, [pc, #236]	; (8002594 <HAL_RCC_OscConfig+0x240>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	691b      	ldr	r3, [r3, #16]
 80024b2:	00db      	lsls	r3, r3, #3
 80024b4:	4937      	ldr	r1, [pc, #220]	; (8002594 <HAL_RCC_OscConfig+0x240>)
 80024b6:	4313      	orrs	r3, r2
 80024b8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024ba:	e03a      	b.n	8002532 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	68db      	ldr	r3, [r3, #12]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d020      	beq.n	8002506 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80024c4:	4b34      	ldr	r3, [pc, #208]	; (8002598 <HAL_RCC_OscConfig+0x244>)
 80024c6:	2201      	movs	r2, #1
 80024c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024ca:	f7fe fac7 	bl	8000a5c <HAL_GetTick>
 80024ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024d0:	e008      	b.n	80024e4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80024d2:	f7fe fac3 	bl	8000a5c <HAL_GetTick>
 80024d6:	4602      	mov	r2, r0
 80024d8:	693b      	ldr	r3, [r7, #16]
 80024da:	1ad3      	subs	r3, r2, r3
 80024dc:	2b02      	cmp	r3, #2
 80024de:	d901      	bls.n	80024e4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80024e0:	2303      	movs	r3, #3
 80024e2:	e1a8      	b.n	8002836 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024e4:	4b2b      	ldr	r3, [pc, #172]	; (8002594 <HAL_RCC_OscConfig+0x240>)
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f003 0302 	and.w	r3, r3, #2
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d0f0      	beq.n	80024d2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024f0:	4b28      	ldr	r3, [pc, #160]	; (8002594 <HAL_RCC_OscConfig+0x240>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	691b      	ldr	r3, [r3, #16]
 80024fc:	00db      	lsls	r3, r3, #3
 80024fe:	4925      	ldr	r1, [pc, #148]	; (8002594 <HAL_RCC_OscConfig+0x240>)
 8002500:	4313      	orrs	r3, r2
 8002502:	600b      	str	r3, [r1, #0]
 8002504:	e015      	b.n	8002532 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002506:	4b24      	ldr	r3, [pc, #144]	; (8002598 <HAL_RCC_OscConfig+0x244>)
 8002508:	2200      	movs	r2, #0
 800250a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800250c:	f7fe faa6 	bl	8000a5c <HAL_GetTick>
 8002510:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002512:	e008      	b.n	8002526 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002514:	f7fe faa2 	bl	8000a5c <HAL_GetTick>
 8002518:	4602      	mov	r2, r0
 800251a:	693b      	ldr	r3, [r7, #16]
 800251c:	1ad3      	subs	r3, r2, r3
 800251e:	2b02      	cmp	r3, #2
 8002520:	d901      	bls.n	8002526 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002522:	2303      	movs	r3, #3
 8002524:	e187      	b.n	8002836 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002526:	4b1b      	ldr	r3, [pc, #108]	; (8002594 <HAL_RCC_OscConfig+0x240>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f003 0302 	and.w	r3, r3, #2
 800252e:	2b00      	cmp	r3, #0
 8002530:	d1f0      	bne.n	8002514 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f003 0308 	and.w	r3, r3, #8
 800253a:	2b00      	cmp	r3, #0
 800253c:	d036      	beq.n	80025ac <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	695b      	ldr	r3, [r3, #20]
 8002542:	2b00      	cmp	r3, #0
 8002544:	d016      	beq.n	8002574 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002546:	4b15      	ldr	r3, [pc, #84]	; (800259c <HAL_RCC_OscConfig+0x248>)
 8002548:	2201      	movs	r2, #1
 800254a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800254c:	f7fe fa86 	bl	8000a5c <HAL_GetTick>
 8002550:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002552:	e008      	b.n	8002566 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002554:	f7fe fa82 	bl	8000a5c <HAL_GetTick>
 8002558:	4602      	mov	r2, r0
 800255a:	693b      	ldr	r3, [r7, #16]
 800255c:	1ad3      	subs	r3, r2, r3
 800255e:	2b02      	cmp	r3, #2
 8002560:	d901      	bls.n	8002566 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002562:	2303      	movs	r3, #3
 8002564:	e167      	b.n	8002836 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002566:	4b0b      	ldr	r3, [pc, #44]	; (8002594 <HAL_RCC_OscConfig+0x240>)
 8002568:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800256a:	f003 0302 	and.w	r3, r3, #2
 800256e:	2b00      	cmp	r3, #0
 8002570:	d0f0      	beq.n	8002554 <HAL_RCC_OscConfig+0x200>
 8002572:	e01b      	b.n	80025ac <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002574:	4b09      	ldr	r3, [pc, #36]	; (800259c <HAL_RCC_OscConfig+0x248>)
 8002576:	2200      	movs	r2, #0
 8002578:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800257a:	f7fe fa6f 	bl	8000a5c <HAL_GetTick>
 800257e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002580:	e00e      	b.n	80025a0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002582:	f7fe fa6b 	bl	8000a5c <HAL_GetTick>
 8002586:	4602      	mov	r2, r0
 8002588:	693b      	ldr	r3, [r7, #16]
 800258a:	1ad3      	subs	r3, r2, r3
 800258c:	2b02      	cmp	r3, #2
 800258e:	d907      	bls.n	80025a0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002590:	2303      	movs	r3, #3
 8002592:	e150      	b.n	8002836 <HAL_RCC_OscConfig+0x4e2>
 8002594:	40023800 	.word	0x40023800
 8002598:	42470000 	.word	0x42470000
 800259c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025a0:	4b88      	ldr	r3, [pc, #544]	; (80027c4 <HAL_RCC_OscConfig+0x470>)
 80025a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80025a4:	f003 0302 	and.w	r3, r3, #2
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d1ea      	bne.n	8002582 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f003 0304 	and.w	r3, r3, #4
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	f000 8097 	beq.w	80026e8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80025ba:	2300      	movs	r3, #0
 80025bc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80025be:	4b81      	ldr	r3, [pc, #516]	; (80027c4 <HAL_RCC_OscConfig+0x470>)
 80025c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d10f      	bne.n	80025ea <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025ca:	2300      	movs	r3, #0
 80025cc:	60bb      	str	r3, [r7, #8]
 80025ce:	4b7d      	ldr	r3, [pc, #500]	; (80027c4 <HAL_RCC_OscConfig+0x470>)
 80025d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025d2:	4a7c      	ldr	r2, [pc, #496]	; (80027c4 <HAL_RCC_OscConfig+0x470>)
 80025d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025d8:	6413      	str	r3, [r2, #64]	; 0x40
 80025da:	4b7a      	ldr	r3, [pc, #488]	; (80027c4 <HAL_RCC_OscConfig+0x470>)
 80025dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025e2:	60bb      	str	r3, [r7, #8]
 80025e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80025e6:	2301      	movs	r3, #1
 80025e8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025ea:	4b77      	ldr	r3, [pc, #476]	; (80027c8 <HAL_RCC_OscConfig+0x474>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d118      	bne.n	8002628 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80025f6:	4b74      	ldr	r3, [pc, #464]	; (80027c8 <HAL_RCC_OscConfig+0x474>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	4a73      	ldr	r2, [pc, #460]	; (80027c8 <HAL_RCC_OscConfig+0x474>)
 80025fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002600:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002602:	f7fe fa2b 	bl	8000a5c <HAL_GetTick>
 8002606:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002608:	e008      	b.n	800261c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800260a:	f7fe fa27 	bl	8000a5c <HAL_GetTick>
 800260e:	4602      	mov	r2, r0
 8002610:	693b      	ldr	r3, [r7, #16]
 8002612:	1ad3      	subs	r3, r2, r3
 8002614:	2b02      	cmp	r3, #2
 8002616:	d901      	bls.n	800261c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002618:	2303      	movs	r3, #3
 800261a:	e10c      	b.n	8002836 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800261c:	4b6a      	ldr	r3, [pc, #424]	; (80027c8 <HAL_RCC_OscConfig+0x474>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002624:	2b00      	cmp	r3, #0
 8002626:	d0f0      	beq.n	800260a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	689b      	ldr	r3, [r3, #8]
 800262c:	2b01      	cmp	r3, #1
 800262e:	d106      	bne.n	800263e <HAL_RCC_OscConfig+0x2ea>
 8002630:	4b64      	ldr	r3, [pc, #400]	; (80027c4 <HAL_RCC_OscConfig+0x470>)
 8002632:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002634:	4a63      	ldr	r2, [pc, #396]	; (80027c4 <HAL_RCC_OscConfig+0x470>)
 8002636:	f043 0301 	orr.w	r3, r3, #1
 800263a:	6713      	str	r3, [r2, #112]	; 0x70
 800263c:	e01c      	b.n	8002678 <HAL_RCC_OscConfig+0x324>
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	689b      	ldr	r3, [r3, #8]
 8002642:	2b05      	cmp	r3, #5
 8002644:	d10c      	bne.n	8002660 <HAL_RCC_OscConfig+0x30c>
 8002646:	4b5f      	ldr	r3, [pc, #380]	; (80027c4 <HAL_RCC_OscConfig+0x470>)
 8002648:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800264a:	4a5e      	ldr	r2, [pc, #376]	; (80027c4 <HAL_RCC_OscConfig+0x470>)
 800264c:	f043 0304 	orr.w	r3, r3, #4
 8002650:	6713      	str	r3, [r2, #112]	; 0x70
 8002652:	4b5c      	ldr	r3, [pc, #368]	; (80027c4 <HAL_RCC_OscConfig+0x470>)
 8002654:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002656:	4a5b      	ldr	r2, [pc, #364]	; (80027c4 <HAL_RCC_OscConfig+0x470>)
 8002658:	f043 0301 	orr.w	r3, r3, #1
 800265c:	6713      	str	r3, [r2, #112]	; 0x70
 800265e:	e00b      	b.n	8002678 <HAL_RCC_OscConfig+0x324>
 8002660:	4b58      	ldr	r3, [pc, #352]	; (80027c4 <HAL_RCC_OscConfig+0x470>)
 8002662:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002664:	4a57      	ldr	r2, [pc, #348]	; (80027c4 <HAL_RCC_OscConfig+0x470>)
 8002666:	f023 0301 	bic.w	r3, r3, #1
 800266a:	6713      	str	r3, [r2, #112]	; 0x70
 800266c:	4b55      	ldr	r3, [pc, #340]	; (80027c4 <HAL_RCC_OscConfig+0x470>)
 800266e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002670:	4a54      	ldr	r2, [pc, #336]	; (80027c4 <HAL_RCC_OscConfig+0x470>)
 8002672:	f023 0304 	bic.w	r3, r3, #4
 8002676:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	689b      	ldr	r3, [r3, #8]
 800267c:	2b00      	cmp	r3, #0
 800267e:	d015      	beq.n	80026ac <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002680:	f7fe f9ec 	bl	8000a5c <HAL_GetTick>
 8002684:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002686:	e00a      	b.n	800269e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002688:	f7fe f9e8 	bl	8000a5c <HAL_GetTick>
 800268c:	4602      	mov	r2, r0
 800268e:	693b      	ldr	r3, [r7, #16]
 8002690:	1ad3      	subs	r3, r2, r3
 8002692:	f241 3288 	movw	r2, #5000	; 0x1388
 8002696:	4293      	cmp	r3, r2
 8002698:	d901      	bls.n	800269e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800269a:	2303      	movs	r3, #3
 800269c:	e0cb      	b.n	8002836 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800269e:	4b49      	ldr	r3, [pc, #292]	; (80027c4 <HAL_RCC_OscConfig+0x470>)
 80026a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026a2:	f003 0302 	and.w	r3, r3, #2
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d0ee      	beq.n	8002688 <HAL_RCC_OscConfig+0x334>
 80026aa:	e014      	b.n	80026d6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026ac:	f7fe f9d6 	bl	8000a5c <HAL_GetTick>
 80026b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026b2:	e00a      	b.n	80026ca <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80026b4:	f7fe f9d2 	bl	8000a5c <HAL_GetTick>
 80026b8:	4602      	mov	r2, r0
 80026ba:	693b      	ldr	r3, [r7, #16]
 80026bc:	1ad3      	subs	r3, r2, r3
 80026be:	f241 3288 	movw	r2, #5000	; 0x1388
 80026c2:	4293      	cmp	r3, r2
 80026c4:	d901      	bls.n	80026ca <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80026c6:	2303      	movs	r3, #3
 80026c8:	e0b5      	b.n	8002836 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026ca:	4b3e      	ldr	r3, [pc, #248]	; (80027c4 <HAL_RCC_OscConfig+0x470>)
 80026cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026ce:	f003 0302 	and.w	r3, r3, #2
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d1ee      	bne.n	80026b4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80026d6:	7dfb      	ldrb	r3, [r7, #23]
 80026d8:	2b01      	cmp	r3, #1
 80026da:	d105      	bne.n	80026e8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026dc:	4b39      	ldr	r3, [pc, #228]	; (80027c4 <HAL_RCC_OscConfig+0x470>)
 80026de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026e0:	4a38      	ldr	r2, [pc, #224]	; (80027c4 <HAL_RCC_OscConfig+0x470>)
 80026e2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80026e6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	699b      	ldr	r3, [r3, #24]
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	f000 80a1 	beq.w	8002834 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80026f2:	4b34      	ldr	r3, [pc, #208]	; (80027c4 <HAL_RCC_OscConfig+0x470>)
 80026f4:	689b      	ldr	r3, [r3, #8]
 80026f6:	f003 030c 	and.w	r3, r3, #12
 80026fa:	2b08      	cmp	r3, #8
 80026fc:	d05c      	beq.n	80027b8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	699b      	ldr	r3, [r3, #24]
 8002702:	2b02      	cmp	r3, #2
 8002704:	d141      	bne.n	800278a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002706:	4b31      	ldr	r3, [pc, #196]	; (80027cc <HAL_RCC_OscConfig+0x478>)
 8002708:	2200      	movs	r2, #0
 800270a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800270c:	f7fe f9a6 	bl	8000a5c <HAL_GetTick>
 8002710:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002712:	e008      	b.n	8002726 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002714:	f7fe f9a2 	bl	8000a5c <HAL_GetTick>
 8002718:	4602      	mov	r2, r0
 800271a:	693b      	ldr	r3, [r7, #16]
 800271c:	1ad3      	subs	r3, r2, r3
 800271e:	2b02      	cmp	r3, #2
 8002720:	d901      	bls.n	8002726 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002722:	2303      	movs	r3, #3
 8002724:	e087      	b.n	8002836 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002726:	4b27      	ldr	r3, [pc, #156]	; (80027c4 <HAL_RCC_OscConfig+0x470>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800272e:	2b00      	cmp	r3, #0
 8002730:	d1f0      	bne.n	8002714 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	69da      	ldr	r2, [r3, #28]
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6a1b      	ldr	r3, [r3, #32]
 800273a:	431a      	orrs	r2, r3
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002740:	019b      	lsls	r3, r3, #6
 8002742:	431a      	orrs	r2, r3
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002748:	085b      	lsrs	r3, r3, #1
 800274a:	3b01      	subs	r3, #1
 800274c:	041b      	lsls	r3, r3, #16
 800274e:	431a      	orrs	r2, r3
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002754:	061b      	lsls	r3, r3, #24
 8002756:	491b      	ldr	r1, [pc, #108]	; (80027c4 <HAL_RCC_OscConfig+0x470>)
 8002758:	4313      	orrs	r3, r2
 800275a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800275c:	4b1b      	ldr	r3, [pc, #108]	; (80027cc <HAL_RCC_OscConfig+0x478>)
 800275e:	2201      	movs	r2, #1
 8002760:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002762:	f7fe f97b 	bl	8000a5c <HAL_GetTick>
 8002766:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002768:	e008      	b.n	800277c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800276a:	f7fe f977 	bl	8000a5c <HAL_GetTick>
 800276e:	4602      	mov	r2, r0
 8002770:	693b      	ldr	r3, [r7, #16]
 8002772:	1ad3      	subs	r3, r2, r3
 8002774:	2b02      	cmp	r3, #2
 8002776:	d901      	bls.n	800277c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002778:	2303      	movs	r3, #3
 800277a:	e05c      	b.n	8002836 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800277c:	4b11      	ldr	r3, [pc, #68]	; (80027c4 <HAL_RCC_OscConfig+0x470>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002784:	2b00      	cmp	r3, #0
 8002786:	d0f0      	beq.n	800276a <HAL_RCC_OscConfig+0x416>
 8002788:	e054      	b.n	8002834 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800278a:	4b10      	ldr	r3, [pc, #64]	; (80027cc <HAL_RCC_OscConfig+0x478>)
 800278c:	2200      	movs	r2, #0
 800278e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002790:	f7fe f964 	bl	8000a5c <HAL_GetTick>
 8002794:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002796:	e008      	b.n	80027aa <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002798:	f7fe f960 	bl	8000a5c <HAL_GetTick>
 800279c:	4602      	mov	r2, r0
 800279e:	693b      	ldr	r3, [r7, #16]
 80027a0:	1ad3      	subs	r3, r2, r3
 80027a2:	2b02      	cmp	r3, #2
 80027a4:	d901      	bls.n	80027aa <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80027a6:	2303      	movs	r3, #3
 80027a8:	e045      	b.n	8002836 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027aa:	4b06      	ldr	r3, [pc, #24]	; (80027c4 <HAL_RCC_OscConfig+0x470>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d1f0      	bne.n	8002798 <HAL_RCC_OscConfig+0x444>
 80027b6:	e03d      	b.n	8002834 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	699b      	ldr	r3, [r3, #24]
 80027bc:	2b01      	cmp	r3, #1
 80027be:	d107      	bne.n	80027d0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80027c0:	2301      	movs	r3, #1
 80027c2:	e038      	b.n	8002836 <HAL_RCC_OscConfig+0x4e2>
 80027c4:	40023800 	.word	0x40023800
 80027c8:	40007000 	.word	0x40007000
 80027cc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80027d0:	4b1b      	ldr	r3, [pc, #108]	; (8002840 <HAL_RCC_OscConfig+0x4ec>)
 80027d2:	685b      	ldr	r3, [r3, #4]
 80027d4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	699b      	ldr	r3, [r3, #24]
 80027da:	2b01      	cmp	r3, #1
 80027dc:	d028      	beq.n	8002830 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80027e8:	429a      	cmp	r2, r3
 80027ea:	d121      	bne.n	8002830 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027f6:	429a      	cmp	r2, r3
 80027f8:	d11a      	bne.n	8002830 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80027fa:	68fa      	ldr	r2, [r7, #12]
 80027fc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002800:	4013      	ands	r3, r2
 8002802:	687a      	ldr	r2, [r7, #4]
 8002804:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002806:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002808:	4293      	cmp	r3, r2
 800280a:	d111      	bne.n	8002830 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002816:	085b      	lsrs	r3, r3, #1
 8002818:	3b01      	subs	r3, #1
 800281a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800281c:	429a      	cmp	r2, r3
 800281e:	d107      	bne.n	8002830 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800282a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800282c:	429a      	cmp	r2, r3
 800282e:	d001      	beq.n	8002834 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002830:	2301      	movs	r3, #1
 8002832:	e000      	b.n	8002836 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002834:	2300      	movs	r3, #0
}
 8002836:	4618      	mov	r0, r3
 8002838:	3718      	adds	r7, #24
 800283a:	46bd      	mov	sp, r7
 800283c:	bd80      	pop	{r7, pc}
 800283e:	bf00      	nop
 8002840:	40023800 	.word	0x40023800

08002844 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b084      	sub	sp, #16
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
 800284c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	2b00      	cmp	r3, #0
 8002852:	d101      	bne.n	8002858 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002854:	2301      	movs	r3, #1
 8002856:	e0cc      	b.n	80029f2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002858:	4b68      	ldr	r3, [pc, #416]	; (80029fc <HAL_RCC_ClockConfig+0x1b8>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f003 0307 	and.w	r3, r3, #7
 8002860:	683a      	ldr	r2, [r7, #0]
 8002862:	429a      	cmp	r2, r3
 8002864:	d90c      	bls.n	8002880 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002866:	4b65      	ldr	r3, [pc, #404]	; (80029fc <HAL_RCC_ClockConfig+0x1b8>)
 8002868:	683a      	ldr	r2, [r7, #0]
 800286a:	b2d2      	uxtb	r2, r2
 800286c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800286e:	4b63      	ldr	r3, [pc, #396]	; (80029fc <HAL_RCC_ClockConfig+0x1b8>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f003 0307 	and.w	r3, r3, #7
 8002876:	683a      	ldr	r2, [r7, #0]
 8002878:	429a      	cmp	r2, r3
 800287a:	d001      	beq.n	8002880 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800287c:	2301      	movs	r3, #1
 800287e:	e0b8      	b.n	80029f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f003 0302 	and.w	r3, r3, #2
 8002888:	2b00      	cmp	r3, #0
 800288a:	d020      	beq.n	80028ce <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f003 0304 	and.w	r3, r3, #4
 8002894:	2b00      	cmp	r3, #0
 8002896:	d005      	beq.n	80028a4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002898:	4b59      	ldr	r3, [pc, #356]	; (8002a00 <HAL_RCC_ClockConfig+0x1bc>)
 800289a:	689b      	ldr	r3, [r3, #8]
 800289c:	4a58      	ldr	r2, [pc, #352]	; (8002a00 <HAL_RCC_ClockConfig+0x1bc>)
 800289e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80028a2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f003 0308 	and.w	r3, r3, #8
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d005      	beq.n	80028bc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80028b0:	4b53      	ldr	r3, [pc, #332]	; (8002a00 <HAL_RCC_ClockConfig+0x1bc>)
 80028b2:	689b      	ldr	r3, [r3, #8]
 80028b4:	4a52      	ldr	r2, [pc, #328]	; (8002a00 <HAL_RCC_ClockConfig+0x1bc>)
 80028b6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80028ba:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80028bc:	4b50      	ldr	r3, [pc, #320]	; (8002a00 <HAL_RCC_ClockConfig+0x1bc>)
 80028be:	689b      	ldr	r3, [r3, #8]
 80028c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	689b      	ldr	r3, [r3, #8]
 80028c8:	494d      	ldr	r1, [pc, #308]	; (8002a00 <HAL_RCC_ClockConfig+0x1bc>)
 80028ca:	4313      	orrs	r3, r2
 80028cc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f003 0301 	and.w	r3, r3, #1
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d044      	beq.n	8002964 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	685b      	ldr	r3, [r3, #4]
 80028de:	2b01      	cmp	r3, #1
 80028e0:	d107      	bne.n	80028f2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028e2:	4b47      	ldr	r3, [pc, #284]	; (8002a00 <HAL_RCC_ClockConfig+0x1bc>)
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d119      	bne.n	8002922 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028ee:	2301      	movs	r3, #1
 80028f0:	e07f      	b.n	80029f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	685b      	ldr	r3, [r3, #4]
 80028f6:	2b02      	cmp	r3, #2
 80028f8:	d003      	beq.n	8002902 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80028fe:	2b03      	cmp	r3, #3
 8002900:	d107      	bne.n	8002912 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002902:	4b3f      	ldr	r3, [pc, #252]	; (8002a00 <HAL_RCC_ClockConfig+0x1bc>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800290a:	2b00      	cmp	r3, #0
 800290c:	d109      	bne.n	8002922 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800290e:	2301      	movs	r3, #1
 8002910:	e06f      	b.n	80029f2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002912:	4b3b      	ldr	r3, [pc, #236]	; (8002a00 <HAL_RCC_ClockConfig+0x1bc>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f003 0302 	and.w	r3, r3, #2
 800291a:	2b00      	cmp	r3, #0
 800291c:	d101      	bne.n	8002922 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800291e:	2301      	movs	r3, #1
 8002920:	e067      	b.n	80029f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002922:	4b37      	ldr	r3, [pc, #220]	; (8002a00 <HAL_RCC_ClockConfig+0x1bc>)
 8002924:	689b      	ldr	r3, [r3, #8]
 8002926:	f023 0203 	bic.w	r2, r3, #3
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	685b      	ldr	r3, [r3, #4]
 800292e:	4934      	ldr	r1, [pc, #208]	; (8002a00 <HAL_RCC_ClockConfig+0x1bc>)
 8002930:	4313      	orrs	r3, r2
 8002932:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002934:	f7fe f892 	bl	8000a5c <HAL_GetTick>
 8002938:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800293a:	e00a      	b.n	8002952 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800293c:	f7fe f88e 	bl	8000a5c <HAL_GetTick>
 8002940:	4602      	mov	r2, r0
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	1ad3      	subs	r3, r2, r3
 8002946:	f241 3288 	movw	r2, #5000	; 0x1388
 800294a:	4293      	cmp	r3, r2
 800294c:	d901      	bls.n	8002952 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800294e:	2303      	movs	r3, #3
 8002950:	e04f      	b.n	80029f2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002952:	4b2b      	ldr	r3, [pc, #172]	; (8002a00 <HAL_RCC_ClockConfig+0x1bc>)
 8002954:	689b      	ldr	r3, [r3, #8]
 8002956:	f003 020c 	and.w	r2, r3, #12
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	685b      	ldr	r3, [r3, #4]
 800295e:	009b      	lsls	r3, r3, #2
 8002960:	429a      	cmp	r2, r3
 8002962:	d1eb      	bne.n	800293c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002964:	4b25      	ldr	r3, [pc, #148]	; (80029fc <HAL_RCC_ClockConfig+0x1b8>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f003 0307 	and.w	r3, r3, #7
 800296c:	683a      	ldr	r2, [r7, #0]
 800296e:	429a      	cmp	r2, r3
 8002970:	d20c      	bcs.n	800298c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002972:	4b22      	ldr	r3, [pc, #136]	; (80029fc <HAL_RCC_ClockConfig+0x1b8>)
 8002974:	683a      	ldr	r2, [r7, #0]
 8002976:	b2d2      	uxtb	r2, r2
 8002978:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800297a:	4b20      	ldr	r3, [pc, #128]	; (80029fc <HAL_RCC_ClockConfig+0x1b8>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f003 0307 	and.w	r3, r3, #7
 8002982:	683a      	ldr	r2, [r7, #0]
 8002984:	429a      	cmp	r2, r3
 8002986:	d001      	beq.n	800298c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002988:	2301      	movs	r3, #1
 800298a:	e032      	b.n	80029f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f003 0304 	and.w	r3, r3, #4
 8002994:	2b00      	cmp	r3, #0
 8002996:	d008      	beq.n	80029aa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002998:	4b19      	ldr	r3, [pc, #100]	; (8002a00 <HAL_RCC_ClockConfig+0x1bc>)
 800299a:	689b      	ldr	r3, [r3, #8]
 800299c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	68db      	ldr	r3, [r3, #12]
 80029a4:	4916      	ldr	r1, [pc, #88]	; (8002a00 <HAL_RCC_ClockConfig+0x1bc>)
 80029a6:	4313      	orrs	r3, r2
 80029a8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f003 0308 	and.w	r3, r3, #8
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d009      	beq.n	80029ca <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80029b6:	4b12      	ldr	r3, [pc, #72]	; (8002a00 <HAL_RCC_ClockConfig+0x1bc>)
 80029b8:	689b      	ldr	r3, [r3, #8]
 80029ba:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	691b      	ldr	r3, [r3, #16]
 80029c2:	00db      	lsls	r3, r3, #3
 80029c4:	490e      	ldr	r1, [pc, #56]	; (8002a00 <HAL_RCC_ClockConfig+0x1bc>)
 80029c6:	4313      	orrs	r3, r2
 80029c8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80029ca:	f000 f821 	bl	8002a10 <HAL_RCC_GetSysClockFreq>
 80029ce:	4602      	mov	r2, r0
 80029d0:	4b0b      	ldr	r3, [pc, #44]	; (8002a00 <HAL_RCC_ClockConfig+0x1bc>)
 80029d2:	689b      	ldr	r3, [r3, #8]
 80029d4:	091b      	lsrs	r3, r3, #4
 80029d6:	f003 030f 	and.w	r3, r3, #15
 80029da:	490a      	ldr	r1, [pc, #40]	; (8002a04 <HAL_RCC_ClockConfig+0x1c0>)
 80029dc:	5ccb      	ldrb	r3, [r1, r3]
 80029de:	fa22 f303 	lsr.w	r3, r2, r3
 80029e2:	4a09      	ldr	r2, [pc, #36]	; (8002a08 <HAL_RCC_ClockConfig+0x1c4>)
 80029e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80029e6:	4b09      	ldr	r3, [pc, #36]	; (8002a0c <HAL_RCC_ClockConfig+0x1c8>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	4618      	mov	r0, r3
 80029ec:	f7fd fff2 	bl	80009d4 <HAL_InitTick>

  return HAL_OK;
 80029f0:	2300      	movs	r3, #0
}
 80029f2:	4618      	mov	r0, r3
 80029f4:	3710      	adds	r7, #16
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bd80      	pop	{r7, pc}
 80029fa:	bf00      	nop
 80029fc:	40023c00 	.word	0x40023c00
 8002a00:	40023800 	.word	0x40023800
 8002a04:	08006834 	.word	0x08006834
 8002a08:	20000000 	.word	0x20000000
 8002a0c:	20000028 	.word	0x20000028

08002a10 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a10:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002a14:	b090      	sub	sp, #64	; 0x40
 8002a16:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002a18:	2300      	movs	r3, #0
 8002a1a:	637b      	str	r3, [r7, #52]	; 0x34
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002a20:	2300      	movs	r3, #0
 8002a22:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002a24:	2300      	movs	r3, #0
 8002a26:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002a28:	4b59      	ldr	r3, [pc, #356]	; (8002b90 <HAL_RCC_GetSysClockFreq+0x180>)
 8002a2a:	689b      	ldr	r3, [r3, #8]
 8002a2c:	f003 030c 	and.w	r3, r3, #12
 8002a30:	2b08      	cmp	r3, #8
 8002a32:	d00d      	beq.n	8002a50 <HAL_RCC_GetSysClockFreq+0x40>
 8002a34:	2b08      	cmp	r3, #8
 8002a36:	f200 80a1 	bhi.w	8002b7c <HAL_RCC_GetSysClockFreq+0x16c>
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d002      	beq.n	8002a44 <HAL_RCC_GetSysClockFreq+0x34>
 8002a3e:	2b04      	cmp	r3, #4
 8002a40:	d003      	beq.n	8002a4a <HAL_RCC_GetSysClockFreq+0x3a>
 8002a42:	e09b      	b.n	8002b7c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002a44:	4b53      	ldr	r3, [pc, #332]	; (8002b94 <HAL_RCC_GetSysClockFreq+0x184>)
 8002a46:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8002a48:	e09b      	b.n	8002b82 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002a4a:	4b53      	ldr	r3, [pc, #332]	; (8002b98 <HAL_RCC_GetSysClockFreq+0x188>)
 8002a4c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002a4e:	e098      	b.n	8002b82 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002a50:	4b4f      	ldr	r3, [pc, #316]	; (8002b90 <HAL_RCC_GetSysClockFreq+0x180>)
 8002a52:	685b      	ldr	r3, [r3, #4]
 8002a54:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002a58:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002a5a:	4b4d      	ldr	r3, [pc, #308]	; (8002b90 <HAL_RCC_GetSysClockFreq+0x180>)
 8002a5c:	685b      	ldr	r3, [r3, #4]
 8002a5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d028      	beq.n	8002ab8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a66:	4b4a      	ldr	r3, [pc, #296]	; (8002b90 <HAL_RCC_GetSysClockFreq+0x180>)
 8002a68:	685b      	ldr	r3, [r3, #4]
 8002a6a:	099b      	lsrs	r3, r3, #6
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	623b      	str	r3, [r7, #32]
 8002a70:	627a      	str	r2, [r7, #36]	; 0x24
 8002a72:	6a3b      	ldr	r3, [r7, #32]
 8002a74:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002a78:	2100      	movs	r1, #0
 8002a7a:	4b47      	ldr	r3, [pc, #284]	; (8002b98 <HAL_RCC_GetSysClockFreq+0x188>)
 8002a7c:	fb03 f201 	mul.w	r2, r3, r1
 8002a80:	2300      	movs	r3, #0
 8002a82:	fb00 f303 	mul.w	r3, r0, r3
 8002a86:	4413      	add	r3, r2
 8002a88:	4a43      	ldr	r2, [pc, #268]	; (8002b98 <HAL_RCC_GetSysClockFreq+0x188>)
 8002a8a:	fba0 1202 	umull	r1, r2, r0, r2
 8002a8e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002a90:	460a      	mov	r2, r1
 8002a92:	62ba      	str	r2, [r7, #40]	; 0x28
 8002a94:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002a96:	4413      	add	r3, r2
 8002a98:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	61bb      	str	r3, [r7, #24]
 8002aa0:	61fa      	str	r2, [r7, #28]
 8002aa2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002aa6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002aaa:	f7fd fb95 	bl	80001d8 <__aeabi_uldivmod>
 8002aae:	4602      	mov	r2, r0
 8002ab0:	460b      	mov	r3, r1
 8002ab2:	4613      	mov	r3, r2
 8002ab4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002ab6:	e053      	b.n	8002b60 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ab8:	4b35      	ldr	r3, [pc, #212]	; (8002b90 <HAL_RCC_GetSysClockFreq+0x180>)
 8002aba:	685b      	ldr	r3, [r3, #4]
 8002abc:	099b      	lsrs	r3, r3, #6
 8002abe:	2200      	movs	r2, #0
 8002ac0:	613b      	str	r3, [r7, #16]
 8002ac2:	617a      	str	r2, [r7, #20]
 8002ac4:	693b      	ldr	r3, [r7, #16]
 8002ac6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002aca:	f04f 0b00 	mov.w	fp, #0
 8002ace:	4652      	mov	r2, sl
 8002ad0:	465b      	mov	r3, fp
 8002ad2:	f04f 0000 	mov.w	r0, #0
 8002ad6:	f04f 0100 	mov.w	r1, #0
 8002ada:	0159      	lsls	r1, r3, #5
 8002adc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002ae0:	0150      	lsls	r0, r2, #5
 8002ae2:	4602      	mov	r2, r0
 8002ae4:	460b      	mov	r3, r1
 8002ae6:	ebb2 080a 	subs.w	r8, r2, sl
 8002aea:	eb63 090b 	sbc.w	r9, r3, fp
 8002aee:	f04f 0200 	mov.w	r2, #0
 8002af2:	f04f 0300 	mov.w	r3, #0
 8002af6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002afa:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002afe:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002b02:	ebb2 0408 	subs.w	r4, r2, r8
 8002b06:	eb63 0509 	sbc.w	r5, r3, r9
 8002b0a:	f04f 0200 	mov.w	r2, #0
 8002b0e:	f04f 0300 	mov.w	r3, #0
 8002b12:	00eb      	lsls	r3, r5, #3
 8002b14:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002b18:	00e2      	lsls	r2, r4, #3
 8002b1a:	4614      	mov	r4, r2
 8002b1c:	461d      	mov	r5, r3
 8002b1e:	eb14 030a 	adds.w	r3, r4, sl
 8002b22:	603b      	str	r3, [r7, #0]
 8002b24:	eb45 030b 	adc.w	r3, r5, fp
 8002b28:	607b      	str	r3, [r7, #4]
 8002b2a:	f04f 0200 	mov.w	r2, #0
 8002b2e:	f04f 0300 	mov.w	r3, #0
 8002b32:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002b36:	4629      	mov	r1, r5
 8002b38:	028b      	lsls	r3, r1, #10
 8002b3a:	4621      	mov	r1, r4
 8002b3c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002b40:	4621      	mov	r1, r4
 8002b42:	028a      	lsls	r2, r1, #10
 8002b44:	4610      	mov	r0, r2
 8002b46:	4619      	mov	r1, r3
 8002b48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	60bb      	str	r3, [r7, #8]
 8002b4e:	60fa      	str	r2, [r7, #12]
 8002b50:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002b54:	f7fd fb40 	bl	80001d8 <__aeabi_uldivmod>
 8002b58:	4602      	mov	r2, r0
 8002b5a:	460b      	mov	r3, r1
 8002b5c:	4613      	mov	r3, r2
 8002b5e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002b60:	4b0b      	ldr	r3, [pc, #44]	; (8002b90 <HAL_RCC_GetSysClockFreq+0x180>)
 8002b62:	685b      	ldr	r3, [r3, #4]
 8002b64:	0c1b      	lsrs	r3, r3, #16
 8002b66:	f003 0303 	and.w	r3, r3, #3
 8002b6a:	3301      	adds	r3, #1
 8002b6c:	005b      	lsls	r3, r3, #1
 8002b6e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8002b70:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002b72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b74:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b78:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002b7a:	e002      	b.n	8002b82 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002b7c:	4b05      	ldr	r3, [pc, #20]	; (8002b94 <HAL_RCC_GetSysClockFreq+0x184>)
 8002b7e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002b80:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002b84:	4618      	mov	r0, r3
 8002b86:	3740      	adds	r7, #64	; 0x40
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002b8e:	bf00      	nop
 8002b90:	40023800 	.word	0x40023800
 8002b94:	00f42400 	.word	0x00f42400
 8002b98:	017d7840 	.word	0x017d7840

08002b9c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b9c:	b480      	push	{r7}
 8002b9e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ba0:	4b03      	ldr	r3, [pc, #12]	; (8002bb0 <HAL_RCC_GetHCLKFreq+0x14>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
}
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bac:	4770      	bx	lr
 8002bae:	bf00      	nop
 8002bb0:	20000000 	.word	0x20000000

08002bb4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002bb4:	b084      	sub	sp, #16
 8002bb6:	b580      	push	{r7, lr}
 8002bb8:	b084      	sub	sp, #16
 8002bba:	af00      	add	r7, sp, #0
 8002bbc:	6078      	str	r0, [r7, #4]
 8002bbe:	f107 001c 	add.w	r0, r7, #28
 8002bc2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002bc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bc8:	2b01      	cmp	r3, #1
 8002bca:	d122      	bne.n	8002c12 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bd0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	68db      	ldr	r3, [r3, #12]
 8002bdc:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8002be0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002be4:	687a      	ldr	r2, [r7, #4]
 8002be6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	68db      	ldr	r3, [r3, #12]
 8002bec:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8002bf4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002bf6:	2b01      	cmp	r3, #1
 8002bf8:	d105      	bne.n	8002c06 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	68db      	ldr	r3, [r3, #12]
 8002bfe:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8002c06:	6878      	ldr	r0, [r7, #4]
 8002c08:	f001 fb1c 	bl	8004244 <USB_CoreReset>
 8002c0c:	4603      	mov	r3, r0
 8002c0e:	73fb      	strb	r3, [r7, #15]
 8002c10:	e01a      	b.n	8002c48 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	68db      	ldr	r3, [r3, #12]
 8002c16:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8002c1e:	6878      	ldr	r0, [r7, #4]
 8002c20:	f001 fb10 	bl	8004244 <USB_CoreReset>
 8002c24:	4603      	mov	r3, r0
 8002c26:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8002c28:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d106      	bne.n	8002c3c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c32:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	639a      	str	r2, [r3, #56]	; 0x38
 8002c3a:	e005      	b.n	8002c48 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c40:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8002c48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c4a:	2b01      	cmp	r3, #1
 8002c4c:	d10b      	bne.n	8002c66 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	689b      	ldr	r3, [r3, #8]
 8002c52:	f043 0206 	orr.w	r2, r3, #6
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	689b      	ldr	r3, [r3, #8]
 8002c5e:	f043 0220 	orr.w	r2, r3, #32
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8002c66:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c68:	4618      	mov	r0, r3
 8002c6a:	3710      	adds	r7, #16
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002c72:	b004      	add	sp, #16
 8002c74:	4770      	bx	lr
	...

08002c78 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8002c78:	b480      	push	{r7}
 8002c7a:	b087      	sub	sp, #28
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	60f8      	str	r0, [r7, #12]
 8002c80:	60b9      	str	r1, [r7, #8]
 8002c82:	4613      	mov	r3, r2
 8002c84:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8002c86:	79fb      	ldrb	r3, [r7, #7]
 8002c88:	2b02      	cmp	r3, #2
 8002c8a:	d165      	bne.n	8002d58 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8002c8c:	68bb      	ldr	r3, [r7, #8]
 8002c8e:	4a41      	ldr	r2, [pc, #260]	; (8002d94 <USB_SetTurnaroundTime+0x11c>)
 8002c90:	4293      	cmp	r3, r2
 8002c92:	d906      	bls.n	8002ca2 <USB_SetTurnaroundTime+0x2a>
 8002c94:	68bb      	ldr	r3, [r7, #8]
 8002c96:	4a40      	ldr	r2, [pc, #256]	; (8002d98 <USB_SetTurnaroundTime+0x120>)
 8002c98:	4293      	cmp	r3, r2
 8002c9a:	d202      	bcs.n	8002ca2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8002c9c:	230f      	movs	r3, #15
 8002c9e:	617b      	str	r3, [r7, #20]
 8002ca0:	e062      	b.n	8002d68 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8002ca2:	68bb      	ldr	r3, [r7, #8]
 8002ca4:	4a3c      	ldr	r2, [pc, #240]	; (8002d98 <USB_SetTurnaroundTime+0x120>)
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d306      	bcc.n	8002cb8 <USB_SetTurnaroundTime+0x40>
 8002caa:	68bb      	ldr	r3, [r7, #8]
 8002cac:	4a3b      	ldr	r2, [pc, #236]	; (8002d9c <USB_SetTurnaroundTime+0x124>)
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d202      	bcs.n	8002cb8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8002cb2:	230e      	movs	r3, #14
 8002cb4:	617b      	str	r3, [r7, #20]
 8002cb6:	e057      	b.n	8002d68 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8002cb8:	68bb      	ldr	r3, [r7, #8]
 8002cba:	4a38      	ldr	r2, [pc, #224]	; (8002d9c <USB_SetTurnaroundTime+0x124>)
 8002cbc:	4293      	cmp	r3, r2
 8002cbe:	d306      	bcc.n	8002cce <USB_SetTurnaroundTime+0x56>
 8002cc0:	68bb      	ldr	r3, [r7, #8]
 8002cc2:	4a37      	ldr	r2, [pc, #220]	; (8002da0 <USB_SetTurnaroundTime+0x128>)
 8002cc4:	4293      	cmp	r3, r2
 8002cc6:	d202      	bcs.n	8002cce <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8002cc8:	230d      	movs	r3, #13
 8002cca:	617b      	str	r3, [r7, #20]
 8002ccc:	e04c      	b.n	8002d68 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8002cce:	68bb      	ldr	r3, [r7, #8]
 8002cd0:	4a33      	ldr	r2, [pc, #204]	; (8002da0 <USB_SetTurnaroundTime+0x128>)
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d306      	bcc.n	8002ce4 <USB_SetTurnaroundTime+0x6c>
 8002cd6:	68bb      	ldr	r3, [r7, #8]
 8002cd8:	4a32      	ldr	r2, [pc, #200]	; (8002da4 <USB_SetTurnaroundTime+0x12c>)
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d802      	bhi.n	8002ce4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8002cde:	230c      	movs	r3, #12
 8002ce0:	617b      	str	r3, [r7, #20]
 8002ce2:	e041      	b.n	8002d68 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8002ce4:	68bb      	ldr	r3, [r7, #8]
 8002ce6:	4a2f      	ldr	r2, [pc, #188]	; (8002da4 <USB_SetTurnaroundTime+0x12c>)
 8002ce8:	4293      	cmp	r3, r2
 8002cea:	d906      	bls.n	8002cfa <USB_SetTurnaroundTime+0x82>
 8002cec:	68bb      	ldr	r3, [r7, #8]
 8002cee:	4a2e      	ldr	r2, [pc, #184]	; (8002da8 <USB_SetTurnaroundTime+0x130>)
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	d802      	bhi.n	8002cfa <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8002cf4:	230b      	movs	r3, #11
 8002cf6:	617b      	str	r3, [r7, #20]
 8002cf8:	e036      	b.n	8002d68 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8002cfa:	68bb      	ldr	r3, [r7, #8]
 8002cfc:	4a2a      	ldr	r2, [pc, #168]	; (8002da8 <USB_SetTurnaroundTime+0x130>)
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	d906      	bls.n	8002d10 <USB_SetTurnaroundTime+0x98>
 8002d02:	68bb      	ldr	r3, [r7, #8]
 8002d04:	4a29      	ldr	r2, [pc, #164]	; (8002dac <USB_SetTurnaroundTime+0x134>)
 8002d06:	4293      	cmp	r3, r2
 8002d08:	d802      	bhi.n	8002d10 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8002d0a:	230a      	movs	r3, #10
 8002d0c:	617b      	str	r3, [r7, #20]
 8002d0e:	e02b      	b.n	8002d68 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8002d10:	68bb      	ldr	r3, [r7, #8]
 8002d12:	4a26      	ldr	r2, [pc, #152]	; (8002dac <USB_SetTurnaroundTime+0x134>)
 8002d14:	4293      	cmp	r3, r2
 8002d16:	d906      	bls.n	8002d26 <USB_SetTurnaroundTime+0xae>
 8002d18:	68bb      	ldr	r3, [r7, #8]
 8002d1a:	4a25      	ldr	r2, [pc, #148]	; (8002db0 <USB_SetTurnaroundTime+0x138>)
 8002d1c:	4293      	cmp	r3, r2
 8002d1e:	d202      	bcs.n	8002d26 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8002d20:	2309      	movs	r3, #9
 8002d22:	617b      	str	r3, [r7, #20]
 8002d24:	e020      	b.n	8002d68 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8002d26:	68bb      	ldr	r3, [r7, #8]
 8002d28:	4a21      	ldr	r2, [pc, #132]	; (8002db0 <USB_SetTurnaroundTime+0x138>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d306      	bcc.n	8002d3c <USB_SetTurnaroundTime+0xc4>
 8002d2e:	68bb      	ldr	r3, [r7, #8]
 8002d30:	4a20      	ldr	r2, [pc, #128]	; (8002db4 <USB_SetTurnaroundTime+0x13c>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d802      	bhi.n	8002d3c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8002d36:	2308      	movs	r3, #8
 8002d38:	617b      	str	r3, [r7, #20]
 8002d3a:	e015      	b.n	8002d68 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8002d3c:	68bb      	ldr	r3, [r7, #8]
 8002d3e:	4a1d      	ldr	r2, [pc, #116]	; (8002db4 <USB_SetTurnaroundTime+0x13c>)
 8002d40:	4293      	cmp	r3, r2
 8002d42:	d906      	bls.n	8002d52 <USB_SetTurnaroundTime+0xda>
 8002d44:	68bb      	ldr	r3, [r7, #8]
 8002d46:	4a1c      	ldr	r2, [pc, #112]	; (8002db8 <USB_SetTurnaroundTime+0x140>)
 8002d48:	4293      	cmp	r3, r2
 8002d4a:	d202      	bcs.n	8002d52 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8002d4c:	2307      	movs	r3, #7
 8002d4e:	617b      	str	r3, [r7, #20]
 8002d50:	e00a      	b.n	8002d68 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8002d52:	2306      	movs	r3, #6
 8002d54:	617b      	str	r3, [r7, #20]
 8002d56:	e007      	b.n	8002d68 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8002d58:	79fb      	ldrb	r3, [r7, #7]
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d102      	bne.n	8002d64 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8002d5e:	2309      	movs	r3, #9
 8002d60:	617b      	str	r3, [r7, #20]
 8002d62:	e001      	b.n	8002d68 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8002d64:	2309      	movs	r3, #9
 8002d66:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	68db      	ldr	r3, [r3, #12]
 8002d6c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	68da      	ldr	r2, [r3, #12]
 8002d78:	697b      	ldr	r3, [r7, #20]
 8002d7a:	029b      	lsls	r3, r3, #10
 8002d7c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8002d80:	431a      	orrs	r2, r3
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002d86:	2300      	movs	r3, #0
}
 8002d88:	4618      	mov	r0, r3
 8002d8a:	371c      	adds	r7, #28
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d92:	4770      	bx	lr
 8002d94:	00d8acbf 	.word	0x00d8acbf
 8002d98:	00e4e1c0 	.word	0x00e4e1c0
 8002d9c:	00f42400 	.word	0x00f42400
 8002da0:	01067380 	.word	0x01067380
 8002da4:	011a499f 	.word	0x011a499f
 8002da8:	01312cff 	.word	0x01312cff
 8002dac:	014ca43f 	.word	0x014ca43f
 8002db0:	016e3600 	.word	0x016e3600
 8002db4:	01a6ab1f 	.word	0x01a6ab1f
 8002db8:	01e84800 	.word	0x01e84800

08002dbc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8002dbc:	b480      	push	{r7}
 8002dbe:	b083      	sub	sp, #12
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	689b      	ldr	r3, [r3, #8]
 8002dc8:	f043 0201 	orr.w	r2, r3, #1
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8002dd0:	2300      	movs	r3, #0
}
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	370c      	adds	r7, #12
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ddc:	4770      	bx	lr

08002dde <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8002dde:	b480      	push	{r7}
 8002de0:	b083      	sub	sp, #12
 8002de2:	af00      	add	r7, sp, #0
 8002de4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	689b      	ldr	r3, [r3, #8]
 8002dea:	f023 0201 	bic.w	r2, r3, #1
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8002df2:	2300      	movs	r3, #0
}
 8002df4:	4618      	mov	r0, r3
 8002df6:	370c      	adds	r7, #12
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfe:	4770      	bx	lr

08002e00 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b084      	sub	sp, #16
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
 8002e08:	460b      	mov	r3, r1
 8002e0a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	68db      	ldr	r3, [r3, #12]
 8002e14:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8002e1c:	78fb      	ldrb	r3, [r7, #3]
 8002e1e:	2b01      	cmp	r3, #1
 8002e20:	d115      	bne.n	8002e4e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	68db      	ldr	r3, [r3, #12]
 8002e26:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8002e2e:	2001      	movs	r0, #1
 8002e30:	f7fd fe20 	bl	8000a74 <HAL_Delay>
      ms++;
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	3301      	adds	r3, #1
 8002e38:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8002e3a:	6878      	ldr	r0, [r7, #4]
 8002e3c:	f001 f972 	bl	8004124 <USB_GetMode>
 8002e40:	4603      	mov	r3, r0
 8002e42:	2b01      	cmp	r3, #1
 8002e44:	d01e      	beq.n	8002e84 <USB_SetCurrentMode+0x84>
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	2b31      	cmp	r3, #49	; 0x31
 8002e4a:	d9f0      	bls.n	8002e2e <USB_SetCurrentMode+0x2e>
 8002e4c:	e01a      	b.n	8002e84 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8002e4e:	78fb      	ldrb	r3, [r7, #3]
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d115      	bne.n	8002e80 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	68db      	ldr	r3, [r3, #12]
 8002e58:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8002e60:	2001      	movs	r0, #1
 8002e62:	f7fd fe07 	bl	8000a74 <HAL_Delay>
      ms++;
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	3301      	adds	r3, #1
 8002e6a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8002e6c:	6878      	ldr	r0, [r7, #4]
 8002e6e:	f001 f959 	bl	8004124 <USB_GetMode>
 8002e72:	4603      	mov	r3, r0
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d005      	beq.n	8002e84 <USB_SetCurrentMode+0x84>
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	2b31      	cmp	r3, #49	; 0x31
 8002e7c:	d9f0      	bls.n	8002e60 <USB_SetCurrentMode+0x60>
 8002e7e:	e001      	b.n	8002e84 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8002e80:	2301      	movs	r3, #1
 8002e82:	e005      	b.n	8002e90 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	2b32      	cmp	r3, #50	; 0x32
 8002e88:	d101      	bne.n	8002e8e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	e000      	b.n	8002e90 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8002e8e:	2300      	movs	r3, #0
}
 8002e90:	4618      	mov	r0, r3
 8002e92:	3710      	adds	r7, #16
 8002e94:	46bd      	mov	sp, r7
 8002e96:	bd80      	pop	{r7, pc}

08002e98 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002e98:	b084      	sub	sp, #16
 8002e9a:	b580      	push	{r7, lr}
 8002e9c:	b086      	sub	sp, #24
 8002e9e:	af00      	add	r7, sp, #0
 8002ea0:	6078      	str	r0, [r7, #4]
 8002ea2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8002ea6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8002eaa:	2300      	movs	r3, #0
 8002eac:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	613b      	str	r3, [r7, #16]
 8002eb6:	e009      	b.n	8002ecc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8002eb8:	687a      	ldr	r2, [r7, #4]
 8002eba:	693b      	ldr	r3, [r7, #16]
 8002ebc:	3340      	adds	r3, #64	; 0x40
 8002ebe:	009b      	lsls	r3, r3, #2
 8002ec0:	4413      	add	r3, r2
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8002ec6:	693b      	ldr	r3, [r7, #16]
 8002ec8:	3301      	adds	r3, #1
 8002eca:	613b      	str	r3, [r7, #16]
 8002ecc:	693b      	ldr	r3, [r7, #16]
 8002ece:	2b0e      	cmp	r3, #14
 8002ed0:	d9f2      	bls.n	8002eb8 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8002ed2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d11c      	bne.n	8002f12 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ede:	685b      	ldr	r3, [r3, #4]
 8002ee0:	68fa      	ldr	r2, [r7, #12]
 8002ee2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002ee6:	f043 0302 	orr.w	r3, r3, #2
 8002eea:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ef0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002efc:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f08:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	639a      	str	r2, [r3, #56]	; 0x38
 8002f10:	e00b      	b.n	8002f2a <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f16:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f22:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8002f30:	461a      	mov	r2, r3
 8002f32:	2300      	movs	r3, #0
 8002f34:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f3c:	4619      	mov	r1, r3
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f44:	461a      	mov	r2, r3
 8002f46:	680b      	ldr	r3, [r1, #0]
 8002f48:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002f4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f4c:	2b01      	cmp	r3, #1
 8002f4e:	d10c      	bne.n	8002f6a <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8002f50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d104      	bne.n	8002f60 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8002f56:	2100      	movs	r1, #0
 8002f58:	6878      	ldr	r0, [r7, #4]
 8002f5a:	f000 f945 	bl	80031e8 <USB_SetDevSpeed>
 8002f5e:	e008      	b.n	8002f72 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8002f60:	2101      	movs	r1, #1
 8002f62:	6878      	ldr	r0, [r7, #4]
 8002f64:	f000 f940 	bl	80031e8 <USB_SetDevSpeed>
 8002f68:	e003      	b.n	8002f72 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8002f6a:	2103      	movs	r1, #3
 8002f6c:	6878      	ldr	r0, [r7, #4]
 8002f6e:	f000 f93b 	bl	80031e8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8002f72:	2110      	movs	r1, #16
 8002f74:	6878      	ldr	r0, [r7, #4]
 8002f76:	f000 f8f3 	bl	8003160 <USB_FlushTxFifo>
 8002f7a:	4603      	mov	r3, r0
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d001      	beq.n	8002f84 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8002f80:	2301      	movs	r3, #1
 8002f82:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8002f84:	6878      	ldr	r0, [r7, #4]
 8002f86:	f000 f90f 	bl	80031a8 <USB_FlushRxFifo>
 8002f8a:	4603      	mov	r3, r0
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d001      	beq.n	8002f94 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8002f90:	2301      	movs	r3, #1
 8002f92:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f9a:	461a      	mov	r2, r3
 8002f9c:	2300      	movs	r3, #0
 8002f9e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002fa6:	461a      	mov	r2, r3
 8002fa8:	2300      	movs	r3, #0
 8002faa:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002fb2:	461a      	mov	r2, r3
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002fb8:	2300      	movs	r3, #0
 8002fba:	613b      	str	r3, [r7, #16]
 8002fbc:	e043      	b.n	8003046 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8002fbe:	693b      	ldr	r3, [r7, #16]
 8002fc0:	015a      	lsls	r2, r3, #5
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	4413      	add	r3, r2
 8002fc6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002fd0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002fd4:	d118      	bne.n	8003008 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8002fd6:	693b      	ldr	r3, [r7, #16]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d10a      	bne.n	8002ff2 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8002fdc:	693b      	ldr	r3, [r7, #16]
 8002fde:	015a      	lsls	r2, r3, #5
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	4413      	add	r3, r2
 8002fe4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002fe8:	461a      	mov	r2, r3
 8002fea:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002fee:	6013      	str	r3, [r2, #0]
 8002ff0:	e013      	b.n	800301a <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8002ff2:	693b      	ldr	r3, [r7, #16]
 8002ff4:	015a      	lsls	r2, r3, #5
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	4413      	add	r3, r2
 8002ffa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002ffe:	461a      	mov	r2, r3
 8003000:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003004:	6013      	str	r3, [r2, #0]
 8003006:	e008      	b.n	800301a <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003008:	693b      	ldr	r3, [r7, #16]
 800300a:	015a      	lsls	r2, r3, #5
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	4413      	add	r3, r2
 8003010:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003014:	461a      	mov	r2, r3
 8003016:	2300      	movs	r3, #0
 8003018:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800301a:	693b      	ldr	r3, [r7, #16]
 800301c:	015a      	lsls	r2, r3, #5
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	4413      	add	r3, r2
 8003022:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003026:	461a      	mov	r2, r3
 8003028:	2300      	movs	r3, #0
 800302a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800302c:	693b      	ldr	r3, [r7, #16]
 800302e:	015a      	lsls	r2, r3, #5
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	4413      	add	r3, r2
 8003034:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003038:	461a      	mov	r2, r3
 800303a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800303e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003040:	693b      	ldr	r3, [r7, #16]
 8003042:	3301      	adds	r3, #1
 8003044:	613b      	str	r3, [r7, #16]
 8003046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003048:	693a      	ldr	r2, [r7, #16]
 800304a:	429a      	cmp	r2, r3
 800304c:	d3b7      	bcc.n	8002fbe <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800304e:	2300      	movs	r3, #0
 8003050:	613b      	str	r3, [r7, #16]
 8003052:	e043      	b.n	80030dc <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003054:	693b      	ldr	r3, [r7, #16]
 8003056:	015a      	lsls	r2, r3, #5
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	4413      	add	r3, r2
 800305c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003066:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800306a:	d118      	bne.n	800309e <USB_DevInit+0x206>
    {
      if (i == 0U)
 800306c:	693b      	ldr	r3, [r7, #16]
 800306e:	2b00      	cmp	r3, #0
 8003070:	d10a      	bne.n	8003088 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003072:	693b      	ldr	r3, [r7, #16]
 8003074:	015a      	lsls	r2, r3, #5
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	4413      	add	r3, r2
 800307a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800307e:	461a      	mov	r2, r3
 8003080:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003084:	6013      	str	r3, [r2, #0]
 8003086:	e013      	b.n	80030b0 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003088:	693b      	ldr	r3, [r7, #16]
 800308a:	015a      	lsls	r2, r3, #5
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	4413      	add	r3, r2
 8003090:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003094:	461a      	mov	r2, r3
 8003096:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800309a:	6013      	str	r3, [r2, #0]
 800309c:	e008      	b.n	80030b0 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800309e:	693b      	ldr	r3, [r7, #16]
 80030a0:	015a      	lsls	r2, r3, #5
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	4413      	add	r3, r2
 80030a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030aa:	461a      	mov	r2, r3
 80030ac:	2300      	movs	r3, #0
 80030ae:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80030b0:	693b      	ldr	r3, [r7, #16]
 80030b2:	015a      	lsls	r2, r3, #5
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	4413      	add	r3, r2
 80030b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030bc:	461a      	mov	r2, r3
 80030be:	2300      	movs	r3, #0
 80030c0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80030c2:	693b      	ldr	r3, [r7, #16]
 80030c4:	015a      	lsls	r2, r3, #5
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	4413      	add	r3, r2
 80030ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030ce:	461a      	mov	r2, r3
 80030d0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80030d4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80030d6:	693b      	ldr	r3, [r7, #16]
 80030d8:	3301      	adds	r3, #1
 80030da:	613b      	str	r3, [r7, #16]
 80030dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030de:	693a      	ldr	r2, [r7, #16]
 80030e0:	429a      	cmp	r2, r3
 80030e2:	d3b7      	bcc.n	8003054 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80030ea:	691b      	ldr	r3, [r3, #16]
 80030ec:	68fa      	ldr	r2, [r7, #12]
 80030ee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80030f2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80030f6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2200      	movs	r2, #0
 80030fc:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8003104:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003106:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003108:	2b00      	cmp	r3, #0
 800310a:	d105      	bne.n	8003118 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	699b      	ldr	r3, [r3, #24]
 8003110:	f043 0210 	orr.w	r2, r3, #16
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	699a      	ldr	r2, [r3, #24]
 800311c:	4b0f      	ldr	r3, [pc, #60]	; (800315c <USB_DevInit+0x2c4>)
 800311e:	4313      	orrs	r3, r2
 8003120:	687a      	ldr	r2, [r7, #4]
 8003122:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003124:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003126:	2b00      	cmp	r3, #0
 8003128:	d005      	beq.n	8003136 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	699b      	ldr	r3, [r3, #24]
 800312e:	f043 0208 	orr.w	r2, r3, #8
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003136:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003138:	2b01      	cmp	r3, #1
 800313a:	d107      	bne.n	800314c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	699b      	ldr	r3, [r3, #24]
 8003140:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003144:	f043 0304 	orr.w	r3, r3, #4
 8003148:	687a      	ldr	r2, [r7, #4]
 800314a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800314c:	7dfb      	ldrb	r3, [r7, #23]
}
 800314e:	4618      	mov	r0, r3
 8003150:	3718      	adds	r7, #24
 8003152:	46bd      	mov	sp, r7
 8003154:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003158:	b004      	add	sp, #16
 800315a:	4770      	bx	lr
 800315c:	803c3800 	.word	0x803c3800

08003160 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003160:	b480      	push	{r7}
 8003162:	b085      	sub	sp, #20
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
 8003168:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800316a:	2300      	movs	r3, #0
 800316c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	019b      	lsls	r3, r3, #6
 8003172:	f043 0220 	orr.w	r2, r3, #32
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	3301      	adds	r3, #1
 800317e:	60fb      	str	r3, [r7, #12]
 8003180:	4a08      	ldr	r2, [pc, #32]	; (80031a4 <USB_FlushTxFifo+0x44>)
 8003182:	4293      	cmp	r3, r2
 8003184:	d901      	bls.n	800318a <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 8003186:	2303      	movs	r3, #3
 8003188:	e006      	b.n	8003198 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	691b      	ldr	r3, [r3, #16]
 800318e:	f003 0320 	and.w	r3, r3, #32
 8003192:	2b20      	cmp	r3, #32
 8003194:	d0f1      	beq.n	800317a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8003196:	2300      	movs	r3, #0
}
 8003198:	4618      	mov	r0, r3
 800319a:	3714      	adds	r7, #20
 800319c:	46bd      	mov	sp, r7
 800319e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a2:	4770      	bx	lr
 80031a4:	00030d40 	.word	0x00030d40

080031a8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80031a8:	b480      	push	{r7}
 80031aa:	b085      	sub	sp, #20
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80031b0:	2300      	movs	r3, #0
 80031b2:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2210      	movs	r2, #16
 80031b8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	3301      	adds	r3, #1
 80031be:	60fb      	str	r3, [r7, #12]
 80031c0:	4a08      	ldr	r2, [pc, #32]	; (80031e4 <USB_FlushRxFifo+0x3c>)
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d901      	bls.n	80031ca <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 80031c6:	2303      	movs	r3, #3
 80031c8:	e006      	b.n	80031d8 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	691b      	ldr	r3, [r3, #16]
 80031ce:	f003 0310 	and.w	r3, r3, #16
 80031d2:	2b10      	cmp	r3, #16
 80031d4:	d0f1      	beq.n	80031ba <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80031d6:	2300      	movs	r3, #0
}
 80031d8:	4618      	mov	r0, r3
 80031da:	3714      	adds	r7, #20
 80031dc:	46bd      	mov	sp, r7
 80031de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e2:	4770      	bx	lr
 80031e4:	00030d40 	.word	0x00030d40

080031e8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80031e8:	b480      	push	{r7}
 80031ea:	b085      	sub	sp, #20
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
 80031f0:	460b      	mov	r3, r1
 80031f2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80031fe:	681a      	ldr	r2, [r3, #0]
 8003200:	78fb      	ldrb	r3, [r7, #3]
 8003202:	68f9      	ldr	r1, [r7, #12]
 8003204:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003208:	4313      	orrs	r3, r2
 800320a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800320c:	2300      	movs	r3, #0
}
 800320e:	4618      	mov	r0, r3
 8003210:	3714      	adds	r7, #20
 8003212:	46bd      	mov	sp, r7
 8003214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003218:	4770      	bx	lr

0800321a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800321a:	b480      	push	{r7}
 800321c:	b087      	sub	sp, #28
 800321e:	af00      	add	r7, sp, #0
 8003220:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8003226:	693b      	ldr	r3, [r7, #16]
 8003228:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800322c:	689b      	ldr	r3, [r3, #8]
 800322e:	f003 0306 	and.w	r3, r3, #6
 8003232:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	2b00      	cmp	r3, #0
 8003238:	d102      	bne.n	8003240 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800323a:	2300      	movs	r3, #0
 800323c:	75fb      	strb	r3, [r7, #23]
 800323e:	e00a      	b.n	8003256 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	2b02      	cmp	r3, #2
 8003244:	d002      	beq.n	800324c <USB_GetDevSpeed+0x32>
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	2b06      	cmp	r3, #6
 800324a:	d102      	bne.n	8003252 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800324c:	2302      	movs	r3, #2
 800324e:	75fb      	strb	r3, [r7, #23]
 8003250:	e001      	b.n	8003256 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8003252:	230f      	movs	r3, #15
 8003254:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8003256:	7dfb      	ldrb	r3, [r7, #23]
}
 8003258:	4618      	mov	r0, r3
 800325a:	371c      	adds	r7, #28
 800325c:	46bd      	mov	sp, r7
 800325e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003262:	4770      	bx	lr

08003264 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003264:	b480      	push	{r7}
 8003266:	b085      	sub	sp, #20
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
 800326c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	781b      	ldrb	r3, [r3, #0]
 8003276:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	785b      	ldrb	r3, [r3, #1]
 800327c:	2b01      	cmp	r3, #1
 800327e:	d13a      	bne.n	80032f6 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003286:	69da      	ldr	r2, [r3, #28]
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	781b      	ldrb	r3, [r3, #0]
 800328c:	f003 030f 	and.w	r3, r3, #15
 8003290:	2101      	movs	r1, #1
 8003292:	fa01 f303 	lsl.w	r3, r1, r3
 8003296:	b29b      	uxth	r3, r3
 8003298:	68f9      	ldr	r1, [r7, #12]
 800329a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800329e:	4313      	orrs	r3, r2
 80032a0:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80032a2:	68bb      	ldr	r3, [r7, #8]
 80032a4:	015a      	lsls	r2, r3, #5
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	4413      	add	r3, r2
 80032aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d155      	bne.n	8003364 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80032b8:	68bb      	ldr	r3, [r7, #8]
 80032ba:	015a      	lsls	r2, r3, #5
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	4413      	add	r3, r2
 80032c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80032c4:	681a      	ldr	r2, [r3, #0]
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	689b      	ldr	r3, [r3, #8]
 80032ca:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	78db      	ldrb	r3, [r3, #3]
 80032d2:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80032d4:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80032d6:	68bb      	ldr	r3, [r7, #8]
 80032d8:	059b      	lsls	r3, r3, #22
 80032da:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80032dc:	4313      	orrs	r3, r2
 80032de:	68ba      	ldr	r2, [r7, #8]
 80032e0:	0151      	lsls	r1, r2, #5
 80032e2:	68fa      	ldr	r2, [r7, #12]
 80032e4:	440a      	add	r2, r1
 80032e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80032ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80032f2:	6013      	str	r3, [r2, #0]
 80032f4:	e036      	b.n	8003364 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80032fc:	69da      	ldr	r2, [r3, #28]
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	781b      	ldrb	r3, [r3, #0]
 8003302:	f003 030f 	and.w	r3, r3, #15
 8003306:	2101      	movs	r1, #1
 8003308:	fa01 f303 	lsl.w	r3, r1, r3
 800330c:	041b      	lsls	r3, r3, #16
 800330e:	68f9      	ldr	r1, [r7, #12]
 8003310:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003314:	4313      	orrs	r3, r2
 8003316:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8003318:	68bb      	ldr	r3, [r7, #8]
 800331a:	015a      	lsls	r2, r3, #5
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	4413      	add	r3, r2
 8003320:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800332a:	2b00      	cmp	r3, #0
 800332c:	d11a      	bne.n	8003364 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800332e:	68bb      	ldr	r3, [r7, #8]
 8003330:	015a      	lsls	r2, r3, #5
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	4413      	add	r3, r2
 8003336:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800333a:	681a      	ldr	r2, [r3, #0]
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	689b      	ldr	r3, [r3, #8]
 8003340:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	78db      	ldrb	r3, [r3, #3]
 8003348:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800334a:	430b      	orrs	r3, r1
 800334c:	4313      	orrs	r3, r2
 800334e:	68ba      	ldr	r2, [r7, #8]
 8003350:	0151      	lsls	r1, r2, #5
 8003352:	68fa      	ldr	r2, [r7, #12]
 8003354:	440a      	add	r2, r1
 8003356:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800335a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800335e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003362:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8003364:	2300      	movs	r3, #0
}
 8003366:	4618      	mov	r0, r3
 8003368:	3714      	adds	r7, #20
 800336a:	46bd      	mov	sp, r7
 800336c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003370:	4770      	bx	lr
	...

08003374 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003374:	b480      	push	{r7}
 8003376:	b085      	sub	sp, #20
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
 800337c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003382:	683b      	ldr	r3, [r7, #0]
 8003384:	781b      	ldrb	r3, [r3, #0]
 8003386:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	785b      	ldrb	r3, [r3, #1]
 800338c:	2b01      	cmp	r3, #1
 800338e:	d161      	bne.n	8003454 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003390:	68bb      	ldr	r3, [r7, #8]
 8003392:	015a      	lsls	r2, r3, #5
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	4413      	add	r3, r2
 8003398:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80033a2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80033a6:	d11f      	bne.n	80033e8 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80033a8:	68bb      	ldr	r3, [r7, #8]
 80033aa:	015a      	lsls	r2, r3, #5
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	4413      	add	r3, r2
 80033b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	68ba      	ldr	r2, [r7, #8]
 80033b8:	0151      	lsls	r1, r2, #5
 80033ba:	68fa      	ldr	r2, [r7, #12]
 80033bc:	440a      	add	r2, r1
 80033be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80033c2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80033c6:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80033c8:	68bb      	ldr	r3, [r7, #8]
 80033ca:	015a      	lsls	r2, r3, #5
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	4413      	add	r3, r2
 80033d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	68ba      	ldr	r2, [r7, #8]
 80033d8:	0151      	lsls	r1, r2, #5
 80033da:	68fa      	ldr	r2, [r7, #12]
 80033dc:	440a      	add	r2, r1
 80033de:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80033e2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80033e6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80033ee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	781b      	ldrb	r3, [r3, #0]
 80033f4:	f003 030f 	and.w	r3, r3, #15
 80033f8:	2101      	movs	r1, #1
 80033fa:	fa01 f303 	lsl.w	r3, r1, r3
 80033fe:	b29b      	uxth	r3, r3
 8003400:	43db      	mvns	r3, r3
 8003402:	68f9      	ldr	r1, [r7, #12]
 8003404:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003408:	4013      	ands	r3, r2
 800340a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003412:	69da      	ldr	r2, [r3, #28]
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	781b      	ldrb	r3, [r3, #0]
 8003418:	f003 030f 	and.w	r3, r3, #15
 800341c:	2101      	movs	r1, #1
 800341e:	fa01 f303 	lsl.w	r3, r1, r3
 8003422:	b29b      	uxth	r3, r3
 8003424:	43db      	mvns	r3, r3
 8003426:	68f9      	ldr	r1, [r7, #12]
 8003428:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800342c:	4013      	ands	r3, r2
 800342e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8003430:	68bb      	ldr	r3, [r7, #8]
 8003432:	015a      	lsls	r2, r3, #5
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	4413      	add	r3, r2
 8003438:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800343c:	681a      	ldr	r2, [r3, #0]
 800343e:	68bb      	ldr	r3, [r7, #8]
 8003440:	0159      	lsls	r1, r3, #5
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	440b      	add	r3, r1
 8003446:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800344a:	4619      	mov	r1, r3
 800344c:	4b35      	ldr	r3, [pc, #212]	; (8003524 <USB_DeactivateEndpoint+0x1b0>)
 800344e:	4013      	ands	r3, r2
 8003450:	600b      	str	r3, [r1, #0]
 8003452:	e060      	b.n	8003516 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003454:	68bb      	ldr	r3, [r7, #8]
 8003456:	015a      	lsls	r2, r3, #5
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	4413      	add	r3, r2
 800345c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003466:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800346a:	d11f      	bne.n	80034ac <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800346c:	68bb      	ldr	r3, [r7, #8]
 800346e:	015a      	lsls	r2, r3, #5
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	4413      	add	r3, r2
 8003474:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	68ba      	ldr	r2, [r7, #8]
 800347c:	0151      	lsls	r1, r2, #5
 800347e:	68fa      	ldr	r2, [r7, #12]
 8003480:	440a      	add	r2, r1
 8003482:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003486:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800348a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800348c:	68bb      	ldr	r3, [r7, #8]
 800348e:	015a      	lsls	r2, r3, #5
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	4413      	add	r3, r2
 8003494:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	68ba      	ldr	r2, [r7, #8]
 800349c:	0151      	lsls	r1, r2, #5
 800349e:	68fa      	ldr	r2, [r7, #12]
 80034a0:	440a      	add	r2, r1
 80034a2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80034a6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80034aa:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80034b2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	781b      	ldrb	r3, [r3, #0]
 80034b8:	f003 030f 	and.w	r3, r3, #15
 80034bc:	2101      	movs	r1, #1
 80034be:	fa01 f303 	lsl.w	r3, r1, r3
 80034c2:	041b      	lsls	r3, r3, #16
 80034c4:	43db      	mvns	r3, r3
 80034c6:	68f9      	ldr	r1, [r7, #12]
 80034c8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80034cc:	4013      	ands	r3, r2
 80034ce:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80034d6:	69da      	ldr	r2, [r3, #28]
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	781b      	ldrb	r3, [r3, #0]
 80034dc:	f003 030f 	and.w	r3, r3, #15
 80034e0:	2101      	movs	r1, #1
 80034e2:	fa01 f303 	lsl.w	r3, r1, r3
 80034e6:	041b      	lsls	r3, r3, #16
 80034e8:	43db      	mvns	r3, r3
 80034ea:	68f9      	ldr	r1, [r7, #12]
 80034ec:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80034f0:	4013      	ands	r3, r2
 80034f2:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80034f4:	68bb      	ldr	r3, [r7, #8]
 80034f6:	015a      	lsls	r2, r3, #5
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	4413      	add	r3, r2
 80034fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003500:	681a      	ldr	r2, [r3, #0]
 8003502:	68bb      	ldr	r3, [r7, #8]
 8003504:	0159      	lsls	r1, r3, #5
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	440b      	add	r3, r1
 800350a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800350e:	4619      	mov	r1, r3
 8003510:	4b05      	ldr	r3, [pc, #20]	; (8003528 <USB_DeactivateEndpoint+0x1b4>)
 8003512:	4013      	ands	r3, r2
 8003514:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8003516:	2300      	movs	r3, #0
}
 8003518:	4618      	mov	r0, r3
 800351a:	3714      	adds	r7, #20
 800351c:	46bd      	mov	sp, r7
 800351e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003522:	4770      	bx	lr
 8003524:	ec337800 	.word	0xec337800
 8003528:	eff37800 	.word	0xeff37800

0800352c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	b08a      	sub	sp, #40	; 0x28
 8003530:	af02      	add	r7, sp, #8
 8003532:	60f8      	str	r0, [r7, #12]
 8003534:	60b9      	str	r1, [r7, #8]
 8003536:	4613      	mov	r3, r2
 8003538:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800353e:	68bb      	ldr	r3, [r7, #8]
 8003540:	781b      	ldrb	r3, [r3, #0]
 8003542:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003544:	68bb      	ldr	r3, [r7, #8]
 8003546:	785b      	ldrb	r3, [r3, #1]
 8003548:	2b01      	cmp	r3, #1
 800354a:	f040 815c 	bne.w	8003806 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800354e:	68bb      	ldr	r3, [r7, #8]
 8003550:	695b      	ldr	r3, [r3, #20]
 8003552:	2b00      	cmp	r3, #0
 8003554:	d132      	bne.n	80035bc <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003556:	69bb      	ldr	r3, [r7, #24]
 8003558:	015a      	lsls	r2, r3, #5
 800355a:	69fb      	ldr	r3, [r7, #28]
 800355c:	4413      	add	r3, r2
 800355e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003562:	691b      	ldr	r3, [r3, #16]
 8003564:	69ba      	ldr	r2, [r7, #24]
 8003566:	0151      	lsls	r1, r2, #5
 8003568:	69fa      	ldr	r2, [r7, #28]
 800356a:	440a      	add	r2, r1
 800356c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003570:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003574:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003578:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800357a:	69bb      	ldr	r3, [r7, #24]
 800357c:	015a      	lsls	r2, r3, #5
 800357e:	69fb      	ldr	r3, [r7, #28]
 8003580:	4413      	add	r3, r2
 8003582:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003586:	691b      	ldr	r3, [r3, #16]
 8003588:	69ba      	ldr	r2, [r7, #24]
 800358a:	0151      	lsls	r1, r2, #5
 800358c:	69fa      	ldr	r2, [r7, #28]
 800358e:	440a      	add	r2, r1
 8003590:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003594:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003598:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800359a:	69bb      	ldr	r3, [r7, #24]
 800359c:	015a      	lsls	r2, r3, #5
 800359e:	69fb      	ldr	r3, [r7, #28]
 80035a0:	4413      	add	r3, r2
 80035a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80035a6:	691b      	ldr	r3, [r3, #16]
 80035a8:	69ba      	ldr	r2, [r7, #24]
 80035aa:	0151      	lsls	r1, r2, #5
 80035ac:	69fa      	ldr	r2, [r7, #28]
 80035ae:	440a      	add	r2, r1
 80035b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80035b4:	0cdb      	lsrs	r3, r3, #19
 80035b6:	04db      	lsls	r3, r3, #19
 80035b8:	6113      	str	r3, [r2, #16]
 80035ba:	e074      	b.n	80036a6 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80035bc:	69bb      	ldr	r3, [r7, #24]
 80035be:	015a      	lsls	r2, r3, #5
 80035c0:	69fb      	ldr	r3, [r7, #28]
 80035c2:	4413      	add	r3, r2
 80035c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80035c8:	691b      	ldr	r3, [r3, #16]
 80035ca:	69ba      	ldr	r2, [r7, #24]
 80035cc:	0151      	lsls	r1, r2, #5
 80035ce:	69fa      	ldr	r2, [r7, #28]
 80035d0:	440a      	add	r2, r1
 80035d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80035d6:	0cdb      	lsrs	r3, r3, #19
 80035d8:	04db      	lsls	r3, r3, #19
 80035da:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80035dc:	69bb      	ldr	r3, [r7, #24]
 80035de:	015a      	lsls	r2, r3, #5
 80035e0:	69fb      	ldr	r3, [r7, #28]
 80035e2:	4413      	add	r3, r2
 80035e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80035e8:	691b      	ldr	r3, [r3, #16]
 80035ea:	69ba      	ldr	r2, [r7, #24]
 80035ec:	0151      	lsls	r1, r2, #5
 80035ee:	69fa      	ldr	r2, [r7, #28]
 80035f0:	440a      	add	r2, r1
 80035f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80035f6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80035fa:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80035fe:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8003600:	69bb      	ldr	r3, [r7, #24]
 8003602:	015a      	lsls	r2, r3, #5
 8003604:	69fb      	ldr	r3, [r7, #28]
 8003606:	4413      	add	r3, r2
 8003608:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800360c:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800360e:	68bb      	ldr	r3, [r7, #8]
 8003610:	6959      	ldr	r1, [r3, #20]
 8003612:	68bb      	ldr	r3, [r7, #8]
 8003614:	689b      	ldr	r3, [r3, #8]
 8003616:	440b      	add	r3, r1
 8003618:	1e59      	subs	r1, r3, #1
 800361a:	68bb      	ldr	r3, [r7, #8]
 800361c:	689b      	ldr	r3, [r3, #8]
 800361e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003622:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8003624:	4b9d      	ldr	r3, [pc, #628]	; (800389c <USB_EPStartXfer+0x370>)
 8003626:	400b      	ands	r3, r1
 8003628:	69b9      	ldr	r1, [r7, #24]
 800362a:	0148      	lsls	r0, r1, #5
 800362c:	69f9      	ldr	r1, [r7, #28]
 800362e:	4401      	add	r1, r0
 8003630:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003634:	4313      	orrs	r3, r2
 8003636:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8003638:	69bb      	ldr	r3, [r7, #24]
 800363a:	015a      	lsls	r2, r3, #5
 800363c:	69fb      	ldr	r3, [r7, #28]
 800363e:	4413      	add	r3, r2
 8003640:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003644:	691a      	ldr	r2, [r3, #16]
 8003646:	68bb      	ldr	r3, [r7, #8]
 8003648:	695b      	ldr	r3, [r3, #20]
 800364a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800364e:	69b9      	ldr	r1, [r7, #24]
 8003650:	0148      	lsls	r0, r1, #5
 8003652:	69f9      	ldr	r1, [r7, #28]
 8003654:	4401      	add	r1, r0
 8003656:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800365a:	4313      	orrs	r3, r2
 800365c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800365e:	68bb      	ldr	r3, [r7, #8]
 8003660:	78db      	ldrb	r3, [r3, #3]
 8003662:	2b01      	cmp	r3, #1
 8003664:	d11f      	bne.n	80036a6 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8003666:	69bb      	ldr	r3, [r7, #24]
 8003668:	015a      	lsls	r2, r3, #5
 800366a:	69fb      	ldr	r3, [r7, #28]
 800366c:	4413      	add	r3, r2
 800366e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003672:	691b      	ldr	r3, [r3, #16]
 8003674:	69ba      	ldr	r2, [r7, #24]
 8003676:	0151      	lsls	r1, r2, #5
 8003678:	69fa      	ldr	r2, [r7, #28]
 800367a:	440a      	add	r2, r1
 800367c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003680:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8003684:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8003686:	69bb      	ldr	r3, [r7, #24]
 8003688:	015a      	lsls	r2, r3, #5
 800368a:	69fb      	ldr	r3, [r7, #28]
 800368c:	4413      	add	r3, r2
 800368e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003692:	691b      	ldr	r3, [r3, #16]
 8003694:	69ba      	ldr	r2, [r7, #24]
 8003696:	0151      	lsls	r1, r2, #5
 8003698:	69fa      	ldr	r2, [r7, #28]
 800369a:	440a      	add	r2, r1
 800369c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80036a0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80036a4:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80036a6:	79fb      	ldrb	r3, [r7, #7]
 80036a8:	2b01      	cmp	r3, #1
 80036aa:	d14b      	bne.n	8003744 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80036ac:	68bb      	ldr	r3, [r7, #8]
 80036ae:	691b      	ldr	r3, [r3, #16]
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d009      	beq.n	80036c8 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80036b4:	69bb      	ldr	r3, [r7, #24]
 80036b6:	015a      	lsls	r2, r3, #5
 80036b8:	69fb      	ldr	r3, [r7, #28]
 80036ba:	4413      	add	r3, r2
 80036bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036c0:	461a      	mov	r2, r3
 80036c2:	68bb      	ldr	r3, [r7, #8]
 80036c4:	691b      	ldr	r3, [r3, #16]
 80036c6:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80036c8:	68bb      	ldr	r3, [r7, #8]
 80036ca:	78db      	ldrb	r3, [r3, #3]
 80036cc:	2b01      	cmp	r3, #1
 80036ce:	d128      	bne.n	8003722 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80036d0:	69fb      	ldr	r3, [r7, #28]
 80036d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036d6:	689b      	ldr	r3, [r3, #8]
 80036d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d110      	bne.n	8003702 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80036e0:	69bb      	ldr	r3, [r7, #24]
 80036e2:	015a      	lsls	r2, r3, #5
 80036e4:	69fb      	ldr	r3, [r7, #28]
 80036e6:	4413      	add	r3, r2
 80036e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	69ba      	ldr	r2, [r7, #24]
 80036f0:	0151      	lsls	r1, r2, #5
 80036f2:	69fa      	ldr	r2, [r7, #28]
 80036f4:	440a      	add	r2, r1
 80036f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80036fa:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80036fe:	6013      	str	r3, [r2, #0]
 8003700:	e00f      	b.n	8003722 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8003702:	69bb      	ldr	r3, [r7, #24]
 8003704:	015a      	lsls	r2, r3, #5
 8003706:	69fb      	ldr	r3, [r7, #28]
 8003708:	4413      	add	r3, r2
 800370a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	69ba      	ldr	r2, [r7, #24]
 8003712:	0151      	lsls	r1, r2, #5
 8003714:	69fa      	ldr	r2, [r7, #28]
 8003716:	440a      	add	r2, r1
 8003718:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800371c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003720:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003722:	69bb      	ldr	r3, [r7, #24]
 8003724:	015a      	lsls	r2, r3, #5
 8003726:	69fb      	ldr	r3, [r7, #28]
 8003728:	4413      	add	r3, r2
 800372a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	69ba      	ldr	r2, [r7, #24]
 8003732:	0151      	lsls	r1, r2, #5
 8003734:	69fa      	ldr	r2, [r7, #28]
 8003736:	440a      	add	r2, r1
 8003738:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800373c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003740:	6013      	str	r3, [r2, #0]
 8003742:	e12f      	b.n	80039a4 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003744:	69bb      	ldr	r3, [r7, #24]
 8003746:	015a      	lsls	r2, r3, #5
 8003748:	69fb      	ldr	r3, [r7, #28]
 800374a:	4413      	add	r3, r2
 800374c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	69ba      	ldr	r2, [r7, #24]
 8003754:	0151      	lsls	r1, r2, #5
 8003756:	69fa      	ldr	r2, [r7, #28]
 8003758:	440a      	add	r2, r1
 800375a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800375e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003762:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003764:	68bb      	ldr	r3, [r7, #8]
 8003766:	78db      	ldrb	r3, [r3, #3]
 8003768:	2b01      	cmp	r3, #1
 800376a:	d015      	beq.n	8003798 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800376c:	68bb      	ldr	r3, [r7, #8]
 800376e:	695b      	ldr	r3, [r3, #20]
 8003770:	2b00      	cmp	r3, #0
 8003772:	f000 8117 	beq.w	80039a4 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8003776:	69fb      	ldr	r3, [r7, #28]
 8003778:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800377c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800377e:	68bb      	ldr	r3, [r7, #8]
 8003780:	781b      	ldrb	r3, [r3, #0]
 8003782:	f003 030f 	and.w	r3, r3, #15
 8003786:	2101      	movs	r1, #1
 8003788:	fa01 f303 	lsl.w	r3, r1, r3
 800378c:	69f9      	ldr	r1, [r7, #28]
 800378e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003792:	4313      	orrs	r3, r2
 8003794:	634b      	str	r3, [r1, #52]	; 0x34
 8003796:	e105      	b.n	80039a4 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003798:	69fb      	ldr	r3, [r7, #28]
 800379a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800379e:	689b      	ldr	r3, [r3, #8]
 80037a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d110      	bne.n	80037ca <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80037a8:	69bb      	ldr	r3, [r7, #24]
 80037aa:	015a      	lsls	r2, r3, #5
 80037ac:	69fb      	ldr	r3, [r7, #28]
 80037ae:	4413      	add	r3, r2
 80037b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	69ba      	ldr	r2, [r7, #24]
 80037b8:	0151      	lsls	r1, r2, #5
 80037ba:	69fa      	ldr	r2, [r7, #28]
 80037bc:	440a      	add	r2, r1
 80037be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80037c2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80037c6:	6013      	str	r3, [r2, #0]
 80037c8:	e00f      	b.n	80037ea <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80037ca:	69bb      	ldr	r3, [r7, #24]
 80037cc:	015a      	lsls	r2, r3, #5
 80037ce:	69fb      	ldr	r3, [r7, #28]
 80037d0:	4413      	add	r3, r2
 80037d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	69ba      	ldr	r2, [r7, #24]
 80037da:	0151      	lsls	r1, r2, #5
 80037dc:	69fa      	ldr	r2, [r7, #28]
 80037de:	440a      	add	r2, r1
 80037e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80037e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037e8:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80037ea:	68bb      	ldr	r3, [r7, #8]
 80037ec:	68d9      	ldr	r1, [r3, #12]
 80037ee:	68bb      	ldr	r3, [r7, #8]
 80037f0:	781a      	ldrb	r2, [r3, #0]
 80037f2:	68bb      	ldr	r3, [r7, #8]
 80037f4:	695b      	ldr	r3, [r3, #20]
 80037f6:	b298      	uxth	r0, r3
 80037f8:	79fb      	ldrb	r3, [r7, #7]
 80037fa:	9300      	str	r3, [sp, #0]
 80037fc:	4603      	mov	r3, r0
 80037fe:	68f8      	ldr	r0, [r7, #12]
 8003800:	f000 fa2b 	bl	8003c5a <USB_WritePacket>
 8003804:	e0ce      	b.n	80039a4 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8003806:	69bb      	ldr	r3, [r7, #24]
 8003808:	015a      	lsls	r2, r3, #5
 800380a:	69fb      	ldr	r3, [r7, #28]
 800380c:	4413      	add	r3, r2
 800380e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003812:	691b      	ldr	r3, [r3, #16]
 8003814:	69ba      	ldr	r2, [r7, #24]
 8003816:	0151      	lsls	r1, r2, #5
 8003818:	69fa      	ldr	r2, [r7, #28]
 800381a:	440a      	add	r2, r1
 800381c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003820:	0cdb      	lsrs	r3, r3, #19
 8003822:	04db      	lsls	r3, r3, #19
 8003824:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8003826:	69bb      	ldr	r3, [r7, #24]
 8003828:	015a      	lsls	r2, r3, #5
 800382a:	69fb      	ldr	r3, [r7, #28]
 800382c:	4413      	add	r3, r2
 800382e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003832:	691b      	ldr	r3, [r3, #16]
 8003834:	69ba      	ldr	r2, [r7, #24]
 8003836:	0151      	lsls	r1, r2, #5
 8003838:	69fa      	ldr	r2, [r7, #28]
 800383a:	440a      	add	r2, r1
 800383c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003840:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003844:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003848:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800384a:	68bb      	ldr	r3, [r7, #8]
 800384c:	695b      	ldr	r3, [r3, #20]
 800384e:	2b00      	cmp	r3, #0
 8003850:	d126      	bne.n	80038a0 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8003852:	69bb      	ldr	r3, [r7, #24]
 8003854:	015a      	lsls	r2, r3, #5
 8003856:	69fb      	ldr	r3, [r7, #28]
 8003858:	4413      	add	r3, r2
 800385a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800385e:	691a      	ldr	r2, [r3, #16]
 8003860:	68bb      	ldr	r3, [r7, #8]
 8003862:	689b      	ldr	r3, [r3, #8]
 8003864:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003868:	69b9      	ldr	r1, [r7, #24]
 800386a:	0148      	lsls	r0, r1, #5
 800386c:	69f9      	ldr	r1, [r7, #28]
 800386e:	4401      	add	r1, r0
 8003870:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003874:	4313      	orrs	r3, r2
 8003876:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8003878:	69bb      	ldr	r3, [r7, #24]
 800387a:	015a      	lsls	r2, r3, #5
 800387c:	69fb      	ldr	r3, [r7, #28]
 800387e:	4413      	add	r3, r2
 8003880:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003884:	691b      	ldr	r3, [r3, #16]
 8003886:	69ba      	ldr	r2, [r7, #24]
 8003888:	0151      	lsls	r1, r2, #5
 800388a:	69fa      	ldr	r2, [r7, #28]
 800388c:	440a      	add	r2, r1
 800388e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003892:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003896:	6113      	str	r3, [r2, #16]
 8003898:	e036      	b.n	8003908 <USB_EPStartXfer+0x3dc>
 800389a:	bf00      	nop
 800389c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80038a0:	68bb      	ldr	r3, [r7, #8]
 80038a2:	695a      	ldr	r2, [r3, #20]
 80038a4:	68bb      	ldr	r3, [r7, #8]
 80038a6:	689b      	ldr	r3, [r3, #8]
 80038a8:	4413      	add	r3, r2
 80038aa:	1e5a      	subs	r2, r3, #1
 80038ac:	68bb      	ldr	r3, [r7, #8]
 80038ae:	689b      	ldr	r3, [r3, #8]
 80038b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80038b4:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80038b6:	69bb      	ldr	r3, [r7, #24]
 80038b8:	015a      	lsls	r2, r3, #5
 80038ba:	69fb      	ldr	r3, [r7, #28]
 80038bc:	4413      	add	r3, r2
 80038be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038c2:	691a      	ldr	r2, [r3, #16]
 80038c4:	8afb      	ldrh	r3, [r7, #22]
 80038c6:	04d9      	lsls	r1, r3, #19
 80038c8:	4b39      	ldr	r3, [pc, #228]	; (80039b0 <USB_EPStartXfer+0x484>)
 80038ca:	400b      	ands	r3, r1
 80038cc:	69b9      	ldr	r1, [r7, #24]
 80038ce:	0148      	lsls	r0, r1, #5
 80038d0:	69f9      	ldr	r1, [r7, #28]
 80038d2:	4401      	add	r1, r0
 80038d4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80038d8:	4313      	orrs	r3, r2
 80038da:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 80038dc:	69bb      	ldr	r3, [r7, #24]
 80038de:	015a      	lsls	r2, r3, #5
 80038e0:	69fb      	ldr	r3, [r7, #28]
 80038e2:	4413      	add	r3, r2
 80038e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038e8:	691a      	ldr	r2, [r3, #16]
 80038ea:	68bb      	ldr	r3, [r7, #8]
 80038ec:	689b      	ldr	r3, [r3, #8]
 80038ee:	8af9      	ldrh	r1, [r7, #22]
 80038f0:	fb01 f303 	mul.w	r3, r1, r3
 80038f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80038f8:	69b9      	ldr	r1, [r7, #24]
 80038fa:	0148      	lsls	r0, r1, #5
 80038fc:	69f9      	ldr	r1, [r7, #28]
 80038fe:	4401      	add	r1, r0
 8003900:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003904:	4313      	orrs	r3, r2
 8003906:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8003908:	79fb      	ldrb	r3, [r7, #7]
 800390a:	2b01      	cmp	r3, #1
 800390c:	d10d      	bne.n	800392a <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800390e:	68bb      	ldr	r3, [r7, #8]
 8003910:	68db      	ldr	r3, [r3, #12]
 8003912:	2b00      	cmp	r3, #0
 8003914:	d009      	beq.n	800392a <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8003916:	68bb      	ldr	r3, [r7, #8]
 8003918:	68d9      	ldr	r1, [r3, #12]
 800391a:	69bb      	ldr	r3, [r7, #24]
 800391c:	015a      	lsls	r2, r3, #5
 800391e:	69fb      	ldr	r3, [r7, #28]
 8003920:	4413      	add	r3, r2
 8003922:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003926:	460a      	mov	r2, r1
 8003928:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800392a:	68bb      	ldr	r3, [r7, #8]
 800392c:	78db      	ldrb	r3, [r3, #3]
 800392e:	2b01      	cmp	r3, #1
 8003930:	d128      	bne.n	8003984 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003932:	69fb      	ldr	r3, [r7, #28]
 8003934:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003938:	689b      	ldr	r3, [r3, #8]
 800393a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800393e:	2b00      	cmp	r3, #0
 8003940:	d110      	bne.n	8003964 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8003942:	69bb      	ldr	r3, [r7, #24]
 8003944:	015a      	lsls	r2, r3, #5
 8003946:	69fb      	ldr	r3, [r7, #28]
 8003948:	4413      	add	r3, r2
 800394a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	69ba      	ldr	r2, [r7, #24]
 8003952:	0151      	lsls	r1, r2, #5
 8003954:	69fa      	ldr	r2, [r7, #28]
 8003956:	440a      	add	r2, r1
 8003958:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800395c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003960:	6013      	str	r3, [r2, #0]
 8003962:	e00f      	b.n	8003984 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8003964:	69bb      	ldr	r3, [r7, #24]
 8003966:	015a      	lsls	r2, r3, #5
 8003968:	69fb      	ldr	r3, [r7, #28]
 800396a:	4413      	add	r3, r2
 800396c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	69ba      	ldr	r2, [r7, #24]
 8003974:	0151      	lsls	r1, r2, #5
 8003976:	69fa      	ldr	r2, [r7, #28]
 8003978:	440a      	add	r2, r1
 800397a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800397e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003982:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8003984:	69bb      	ldr	r3, [r7, #24]
 8003986:	015a      	lsls	r2, r3, #5
 8003988:	69fb      	ldr	r3, [r7, #28]
 800398a:	4413      	add	r3, r2
 800398c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	69ba      	ldr	r2, [r7, #24]
 8003994:	0151      	lsls	r1, r2, #5
 8003996:	69fa      	ldr	r2, [r7, #28]
 8003998:	440a      	add	r2, r1
 800399a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800399e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80039a2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80039a4:	2300      	movs	r3, #0
}
 80039a6:	4618      	mov	r0, r3
 80039a8:	3720      	adds	r7, #32
 80039aa:	46bd      	mov	sp, r7
 80039ac:	bd80      	pop	{r7, pc}
 80039ae:	bf00      	nop
 80039b0:	1ff80000 	.word	0x1ff80000

080039b4 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80039b4:	b480      	push	{r7}
 80039b6:	b087      	sub	sp, #28
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	60f8      	str	r0, [r7, #12]
 80039bc:	60b9      	str	r1, [r7, #8]
 80039be:	4613      	mov	r3, r2
 80039c0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80039c6:	68bb      	ldr	r3, [r7, #8]
 80039c8:	781b      	ldrb	r3, [r3, #0]
 80039ca:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80039cc:	68bb      	ldr	r3, [r7, #8]
 80039ce:	785b      	ldrb	r3, [r3, #1]
 80039d0:	2b01      	cmp	r3, #1
 80039d2:	f040 80cd 	bne.w	8003b70 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80039d6:	68bb      	ldr	r3, [r7, #8]
 80039d8:	695b      	ldr	r3, [r3, #20]
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d132      	bne.n	8003a44 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80039de:	693b      	ldr	r3, [r7, #16]
 80039e0:	015a      	lsls	r2, r3, #5
 80039e2:	697b      	ldr	r3, [r7, #20]
 80039e4:	4413      	add	r3, r2
 80039e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039ea:	691b      	ldr	r3, [r3, #16]
 80039ec:	693a      	ldr	r2, [r7, #16]
 80039ee:	0151      	lsls	r1, r2, #5
 80039f0:	697a      	ldr	r2, [r7, #20]
 80039f2:	440a      	add	r2, r1
 80039f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80039f8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80039fc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003a00:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003a02:	693b      	ldr	r3, [r7, #16]
 8003a04:	015a      	lsls	r2, r3, #5
 8003a06:	697b      	ldr	r3, [r7, #20]
 8003a08:	4413      	add	r3, r2
 8003a0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a0e:	691b      	ldr	r3, [r3, #16]
 8003a10:	693a      	ldr	r2, [r7, #16]
 8003a12:	0151      	lsls	r1, r2, #5
 8003a14:	697a      	ldr	r2, [r7, #20]
 8003a16:	440a      	add	r2, r1
 8003a18:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003a1c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003a20:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003a22:	693b      	ldr	r3, [r7, #16]
 8003a24:	015a      	lsls	r2, r3, #5
 8003a26:	697b      	ldr	r3, [r7, #20]
 8003a28:	4413      	add	r3, r2
 8003a2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a2e:	691b      	ldr	r3, [r3, #16]
 8003a30:	693a      	ldr	r2, [r7, #16]
 8003a32:	0151      	lsls	r1, r2, #5
 8003a34:	697a      	ldr	r2, [r7, #20]
 8003a36:	440a      	add	r2, r1
 8003a38:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003a3c:	0cdb      	lsrs	r3, r3, #19
 8003a3e:	04db      	lsls	r3, r3, #19
 8003a40:	6113      	str	r3, [r2, #16]
 8003a42:	e04e      	b.n	8003ae2 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003a44:	693b      	ldr	r3, [r7, #16]
 8003a46:	015a      	lsls	r2, r3, #5
 8003a48:	697b      	ldr	r3, [r7, #20]
 8003a4a:	4413      	add	r3, r2
 8003a4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a50:	691b      	ldr	r3, [r3, #16]
 8003a52:	693a      	ldr	r2, [r7, #16]
 8003a54:	0151      	lsls	r1, r2, #5
 8003a56:	697a      	ldr	r2, [r7, #20]
 8003a58:	440a      	add	r2, r1
 8003a5a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003a5e:	0cdb      	lsrs	r3, r3, #19
 8003a60:	04db      	lsls	r3, r3, #19
 8003a62:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003a64:	693b      	ldr	r3, [r7, #16]
 8003a66:	015a      	lsls	r2, r3, #5
 8003a68:	697b      	ldr	r3, [r7, #20]
 8003a6a:	4413      	add	r3, r2
 8003a6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a70:	691b      	ldr	r3, [r3, #16]
 8003a72:	693a      	ldr	r2, [r7, #16]
 8003a74:	0151      	lsls	r1, r2, #5
 8003a76:	697a      	ldr	r2, [r7, #20]
 8003a78:	440a      	add	r2, r1
 8003a7a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003a7e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003a82:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003a86:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8003a88:	68bb      	ldr	r3, [r7, #8]
 8003a8a:	695a      	ldr	r2, [r3, #20]
 8003a8c:	68bb      	ldr	r3, [r7, #8]
 8003a8e:	689b      	ldr	r3, [r3, #8]
 8003a90:	429a      	cmp	r2, r3
 8003a92:	d903      	bls.n	8003a9c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8003a94:	68bb      	ldr	r3, [r7, #8]
 8003a96:	689a      	ldr	r2, [r3, #8]
 8003a98:	68bb      	ldr	r3, [r7, #8]
 8003a9a:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003a9c:	693b      	ldr	r3, [r7, #16]
 8003a9e:	015a      	lsls	r2, r3, #5
 8003aa0:	697b      	ldr	r3, [r7, #20]
 8003aa2:	4413      	add	r3, r2
 8003aa4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003aa8:	691b      	ldr	r3, [r3, #16]
 8003aaa:	693a      	ldr	r2, [r7, #16]
 8003aac:	0151      	lsls	r1, r2, #5
 8003aae:	697a      	ldr	r2, [r7, #20]
 8003ab0:	440a      	add	r2, r1
 8003ab2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003ab6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003aba:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8003abc:	693b      	ldr	r3, [r7, #16]
 8003abe:	015a      	lsls	r2, r3, #5
 8003ac0:	697b      	ldr	r3, [r7, #20]
 8003ac2:	4413      	add	r3, r2
 8003ac4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ac8:	691a      	ldr	r2, [r3, #16]
 8003aca:	68bb      	ldr	r3, [r7, #8]
 8003acc:	695b      	ldr	r3, [r3, #20]
 8003ace:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ad2:	6939      	ldr	r1, [r7, #16]
 8003ad4:	0148      	lsls	r0, r1, #5
 8003ad6:	6979      	ldr	r1, [r7, #20]
 8003ad8:	4401      	add	r1, r0
 8003ada:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003ade:	4313      	orrs	r3, r2
 8003ae0:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8003ae2:	79fb      	ldrb	r3, [r7, #7]
 8003ae4:	2b01      	cmp	r3, #1
 8003ae6:	d11e      	bne.n	8003b26 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8003ae8:	68bb      	ldr	r3, [r7, #8]
 8003aea:	691b      	ldr	r3, [r3, #16]
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d009      	beq.n	8003b04 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8003af0:	693b      	ldr	r3, [r7, #16]
 8003af2:	015a      	lsls	r2, r3, #5
 8003af4:	697b      	ldr	r3, [r7, #20]
 8003af6:	4413      	add	r3, r2
 8003af8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003afc:	461a      	mov	r2, r3
 8003afe:	68bb      	ldr	r3, [r7, #8]
 8003b00:	691b      	ldr	r3, [r3, #16]
 8003b02:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003b04:	693b      	ldr	r3, [r7, #16]
 8003b06:	015a      	lsls	r2, r3, #5
 8003b08:	697b      	ldr	r3, [r7, #20]
 8003b0a:	4413      	add	r3, r2
 8003b0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	693a      	ldr	r2, [r7, #16]
 8003b14:	0151      	lsls	r1, r2, #5
 8003b16:	697a      	ldr	r2, [r7, #20]
 8003b18:	440a      	add	r2, r1
 8003b1a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003b1e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003b22:	6013      	str	r3, [r2, #0]
 8003b24:	e092      	b.n	8003c4c <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003b26:	693b      	ldr	r3, [r7, #16]
 8003b28:	015a      	lsls	r2, r3, #5
 8003b2a:	697b      	ldr	r3, [r7, #20]
 8003b2c:	4413      	add	r3, r2
 8003b2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	693a      	ldr	r2, [r7, #16]
 8003b36:	0151      	lsls	r1, r2, #5
 8003b38:	697a      	ldr	r2, [r7, #20]
 8003b3a:	440a      	add	r2, r1
 8003b3c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003b40:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003b44:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8003b46:	68bb      	ldr	r3, [r7, #8]
 8003b48:	695b      	ldr	r3, [r3, #20]
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d07e      	beq.n	8003c4c <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8003b4e:	697b      	ldr	r3, [r7, #20]
 8003b50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b54:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003b56:	68bb      	ldr	r3, [r7, #8]
 8003b58:	781b      	ldrb	r3, [r3, #0]
 8003b5a:	f003 030f 	and.w	r3, r3, #15
 8003b5e:	2101      	movs	r1, #1
 8003b60:	fa01 f303 	lsl.w	r3, r1, r3
 8003b64:	6979      	ldr	r1, [r7, #20]
 8003b66:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003b6a:	4313      	orrs	r3, r2
 8003b6c:	634b      	str	r3, [r1, #52]	; 0x34
 8003b6e:	e06d      	b.n	8003c4c <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8003b70:	693b      	ldr	r3, [r7, #16]
 8003b72:	015a      	lsls	r2, r3, #5
 8003b74:	697b      	ldr	r3, [r7, #20]
 8003b76:	4413      	add	r3, r2
 8003b78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b7c:	691b      	ldr	r3, [r3, #16]
 8003b7e:	693a      	ldr	r2, [r7, #16]
 8003b80:	0151      	lsls	r1, r2, #5
 8003b82:	697a      	ldr	r2, [r7, #20]
 8003b84:	440a      	add	r2, r1
 8003b86:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003b8a:	0cdb      	lsrs	r3, r3, #19
 8003b8c:	04db      	lsls	r3, r3, #19
 8003b8e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8003b90:	693b      	ldr	r3, [r7, #16]
 8003b92:	015a      	lsls	r2, r3, #5
 8003b94:	697b      	ldr	r3, [r7, #20]
 8003b96:	4413      	add	r3, r2
 8003b98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b9c:	691b      	ldr	r3, [r3, #16]
 8003b9e:	693a      	ldr	r2, [r7, #16]
 8003ba0:	0151      	lsls	r1, r2, #5
 8003ba2:	697a      	ldr	r2, [r7, #20]
 8003ba4:	440a      	add	r2, r1
 8003ba6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003baa:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003bae:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003bb2:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8003bb4:	68bb      	ldr	r3, [r7, #8]
 8003bb6:	695b      	ldr	r3, [r3, #20]
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d003      	beq.n	8003bc4 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8003bbc:	68bb      	ldr	r3, [r7, #8]
 8003bbe:	689a      	ldr	r2, [r3, #8]
 8003bc0:	68bb      	ldr	r3, [r7, #8]
 8003bc2:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8003bc4:	693b      	ldr	r3, [r7, #16]
 8003bc6:	015a      	lsls	r2, r3, #5
 8003bc8:	697b      	ldr	r3, [r7, #20]
 8003bca:	4413      	add	r3, r2
 8003bcc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bd0:	691b      	ldr	r3, [r3, #16]
 8003bd2:	693a      	ldr	r2, [r7, #16]
 8003bd4:	0151      	lsls	r1, r2, #5
 8003bd6:	697a      	ldr	r2, [r7, #20]
 8003bd8:	440a      	add	r2, r1
 8003bda:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003bde:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003be2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8003be4:	693b      	ldr	r3, [r7, #16]
 8003be6:	015a      	lsls	r2, r3, #5
 8003be8:	697b      	ldr	r3, [r7, #20]
 8003bea:	4413      	add	r3, r2
 8003bec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bf0:	691a      	ldr	r2, [r3, #16]
 8003bf2:	68bb      	ldr	r3, [r7, #8]
 8003bf4:	689b      	ldr	r3, [r3, #8]
 8003bf6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003bfa:	6939      	ldr	r1, [r7, #16]
 8003bfc:	0148      	lsls	r0, r1, #5
 8003bfe:	6979      	ldr	r1, [r7, #20]
 8003c00:	4401      	add	r1, r0
 8003c02:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003c06:	4313      	orrs	r3, r2
 8003c08:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8003c0a:	79fb      	ldrb	r3, [r7, #7]
 8003c0c:	2b01      	cmp	r3, #1
 8003c0e:	d10d      	bne.n	8003c2c <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8003c10:	68bb      	ldr	r3, [r7, #8]
 8003c12:	68db      	ldr	r3, [r3, #12]
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d009      	beq.n	8003c2c <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8003c18:	68bb      	ldr	r3, [r7, #8]
 8003c1a:	68d9      	ldr	r1, [r3, #12]
 8003c1c:	693b      	ldr	r3, [r7, #16]
 8003c1e:	015a      	lsls	r2, r3, #5
 8003c20:	697b      	ldr	r3, [r7, #20]
 8003c22:	4413      	add	r3, r2
 8003c24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c28:	460a      	mov	r2, r1
 8003c2a:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8003c2c:	693b      	ldr	r3, [r7, #16]
 8003c2e:	015a      	lsls	r2, r3, #5
 8003c30:	697b      	ldr	r3, [r7, #20]
 8003c32:	4413      	add	r3, r2
 8003c34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	693a      	ldr	r2, [r7, #16]
 8003c3c:	0151      	lsls	r1, r2, #5
 8003c3e:	697a      	ldr	r2, [r7, #20]
 8003c40:	440a      	add	r2, r1
 8003c42:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003c46:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003c4a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8003c4c:	2300      	movs	r3, #0
}
 8003c4e:	4618      	mov	r0, r3
 8003c50:	371c      	adds	r7, #28
 8003c52:	46bd      	mov	sp, r7
 8003c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c58:	4770      	bx	lr

08003c5a <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8003c5a:	b480      	push	{r7}
 8003c5c:	b089      	sub	sp, #36	; 0x24
 8003c5e:	af00      	add	r7, sp, #0
 8003c60:	60f8      	str	r0, [r7, #12]
 8003c62:	60b9      	str	r1, [r7, #8]
 8003c64:	4611      	mov	r1, r2
 8003c66:	461a      	mov	r2, r3
 8003c68:	460b      	mov	r3, r1
 8003c6a:	71fb      	strb	r3, [r7, #7]
 8003c6c:	4613      	mov	r3, r2
 8003c6e:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8003c74:	68bb      	ldr	r3, [r7, #8]
 8003c76:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8003c78:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d123      	bne.n	8003cc8 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8003c80:	88bb      	ldrh	r3, [r7, #4]
 8003c82:	3303      	adds	r3, #3
 8003c84:	089b      	lsrs	r3, r3, #2
 8003c86:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8003c88:	2300      	movs	r3, #0
 8003c8a:	61bb      	str	r3, [r7, #24]
 8003c8c:	e018      	b.n	8003cc0 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8003c8e:	79fb      	ldrb	r3, [r7, #7]
 8003c90:	031a      	lsls	r2, r3, #12
 8003c92:	697b      	ldr	r3, [r7, #20]
 8003c94:	4413      	add	r3, r2
 8003c96:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003c9a:	461a      	mov	r2, r3
 8003c9c:	69fb      	ldr	r3, [r7, #28]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	6013      	str	r3, [r2, #0]
      pSrc++;
 8003ca2:	69fb      	ldr	r3, [r7, #28]
 8003ca4:	3301      	adds	r3, #1
 8003ca6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8003ca8:	69fb      	ldr	r3, [r7, #28]
 8003caa:	3301      	adds	r3, #1
 8003cac:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8003cae:	69fb      	ldr	r3, [r7, #28]
 8003cb0:	3301      	adds	r3, #1
 8003cb2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8003cb4:	69fb      	ldr	r3, [r7, #28]
 8003cb6:	3301      	adds	r3, #1
 8003cb8:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8003cba:	69bb      	ldr	r3, [r7, #24]
 8003cbc:	3301      	adds	r3, #1
 8003cbe:	61bb      	str	r3, [r7, #24]
 8003cc0:	69ba      	ldr	r2, [r7, #24]
 8003cc2:	693b      	ldr	r3, [r7, #16]
 8003cc4:	429a      	cmp	r2, r3
 8003cc6:	d3e2      	bcc.n	8003c8e <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8003cc8:	2300      	movs	r3, #0
}
 8003cca:	4618      	mov	r0, r3
 8003ccc:	3724      	adds	r7, #36	; 0x24
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd4:	4770      	bx	lr

08003cd6 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8003cd6:	b480      	push	{r7}
 8003cd8:	b08b      	sub	sp, #44	; 0x2c
 8003cda:	af00      	add	r7, sp, #0
 8003cdc:	60f8      	str	r0, [r7, #12]
 8003cde:	60b9      	str	r1, [r7, #8]
 8003ce0:	4613      	mov	r3, r2
 8003ce2:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8003ce8:	68bb      	ldr	r3, [r7, #8]
 8003cea:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8003cec:	88fb      	ldrh	r3, [r7, #6]
 8003cee:	089b      	lsrs	r3, r3, #2
 8003cf0:	b29b      	uxth	r3, r3
 8003cf2:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8003cf4:	88fb      	ldrh	r3, [r7, #6]
 8003cf6:	f003 0303 	and.w	r3, r3, #3
 8003cfa:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	623b      	str	r3, [r7, #32]
 8003d00:	e014      	b.n	8003d2c <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8003d02:	69bb      	ldr	r3, [r7, #24]
 8003d04:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d08:	681a      	ldr	r2, [r3, #0]
 8003d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d0c:	601a      	str	r2, [r3, #0]
    pDest++;
 8003d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d10:	3301      	adds	r3, #1
 8003d12:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8003d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d16:	3301      	adds	r3, #1
 8003d18:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8003d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d1c:	3301      	adds	r3, #1
 8003d1e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8003d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d22:	3301      	adds	r3, #1
 8003d24:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8003d26:	6a3b      	ldr	r3, [r7, #32]
 8003d28:	3301      	adds	r3, #1
 8003d2a:	623b      	str	r3, [r7, #32]
 8003d2c:	6a3a      	ldr	r2, [r7, #32]
 8003d2e:	697b      	ldr	r3, [r7, #20]
 8003d30:	429a      	cmp	r2, r3
 8003d32:	d3e6      	bcc.n	8003d02 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8003d34:	8bfb      	ldrh	r3, [r7, #30]
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d01e      	beq.n	8003d78 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8003d3e:	69bb      	ldr	r3, [r7, #24]
 8003d40:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d44:	461a      	mov	r2, r3
 8003d46:	f107 0310 	add.w	r3, r7, #16
 8003d4a:	6812      	ldr	r2, [r2, #0]
 8003d4c:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8003d4e:	693a      	ldr	r2, [r7, #16]
 8003d50:	6a3b      	ldr	r3, [r7, #32]
 8003d52:	b2db      	uxtb	r3, r3
 8003d54:	00db      	lsls	r3, r3, #3
 8003d56:	fa22 f303 	lsr.w	r3, r2, r3
 8003d5a:	b2da      	uxtb	r2, r3
 8003d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d5e:	701a      	strb	r2, [r3, #0]
      i++;
 8003d60:	6a3b      	ldr	r3, [r7, #32]
 8003d62:	3301      	adds	r3, #1
 8003d64:	623b      	str	r3, [r7, #32]
      pDest++;
 8003d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d68:	3301      	adds	r3, #1
 8003d6a:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8003d6c:	8bfb      	ldrh	r3, [r7, #30]
 8003d6e:	3b01      	subs	r3, #1
 8003d70:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8003d72:	8bfb      	ldrh	r3, [r7, #30]
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d1ea      	bne.n	8003d4e <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8003d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	372c      	adds	r7, #44	; 0x2c
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d84:	4770      	bx	lr

08003d86 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003d86:	b480      	push	{r7}
 8003d88:	b085      	sub	sp, #20
 8003d8a:	af00      	add	r7, sp, #0
 8003d8c:	6078      	str	r0, [r7, #4]
 8003d8e:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	781b      	ldrb	r3, [r3, #0]
 8003d98:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003d9a:	683b      	ldr	r3, [r7, #0]
 8003d9c:	785b      	ldrb	r3, [r3, #1]
 8003d9e:	2b01      	cmp	r3, #1
 8003da0:	d12c      	bne.n	8003dfc <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8003da2:	68bb      	ldr	r3, [r7, #8]
 8003da4:	015a      	lsls	r2, r3, #5
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	4413      	add	r3, r2
 8003daa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	db12      	blt.n	8003dda <USB_EPSetStall+0x54>
 8003db4:	68bb      	ldr	r3, [r7, #8]
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d00f      	beq.n	8003dda <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8003dba:	68bb      	ldr	r3, [r7, #8]
 8003dbc:	015a      	lsls	r2, r3, #5
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	4413      	add	r3, r2
 8003dc2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	68ba      	ldr	r2, [r7, #8]
 8003dca:	0151      	lsls	r1, r2, #5
 8003dcc:	68fa      	ldr	r2, [r7, #12]
 8003dce:	440a      	add	r2, r1
 8003dd0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003dd4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003dd8:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8003dda:	68bb      	ldr	r3, [r7, #8]
 8003ddc:	015a      	lsls	r2, r3, #5
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	4413      	add	r3, r2
 8003de2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	68ba      	ldr	r2, [r7, #8]
 8003dea:	0151      	lsls	r1, r2, #5
 8003dec:	68fa      	ldr	r2, [r7, #12]
 8003dee:	440a      	add	r2, r1
 8003df0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003df4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003df8:	6013      	str	r3, [r2, #0]
 8003dfa:	e02b      	b.n	8003e54 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8003dfc:	68bb      	ldr	r3, [r7, #8]
 8003dfe:	015a      	lsls	r2, r3, #5
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	4413      	add	r3, r2
 8003e04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	db12      	blt.n	8003e34 <USB_EPSetStall+0xae>
 8003e0e:	68bb      	ldr	r3, [r7, #8]
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d00f      	beq.n	8003e34 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8003e14:	68bb      	ldr	r3, [r7, #8]
 8003e16:	015a      	lsls	r2, r3, #5
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	4413      	add	r3, r2
 8003e1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	68ba      	ldr	r2, [r7, #8]
 8003e24:	0151      	lsls	r1, r2, #5
 8003e26:	68fa      	ldr	r2, [r7, #12]
 8003e28:	440a      	add	r2, r1
 8003e2a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003e2e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003e32:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8003e34:	68bb      	ldr	r3, [r7, #8]
 8003e36:	015a      	lsls	r2, r3, #5
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	4413      	add	r3, r2
 8003e3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	68ba      	ldr	r2, [r7, #8]
 8003e44:	0151      	lsls	r1, r2, #5
 8003e46:	68fa      	ldr	r2, [r7, #12]
 8003e48:	440a      	add	r2, r1
 8003e4a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003e4e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003e52:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8003e54:	2300      	movs	r3, #0
}
 8003e56:	4618      	mov	r0, r3
 8003e58:	3714      	adds	r7, #20
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e60:	4770      	bx	lr

08003e62 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003e62:	b480      	push	{r7}
 8003e64:	b085      	sub	sp, #20
 8003e66:	af00      	add	r7, sp, #0
 8003e68:	6078      	str	r0, [r7, #4]
 8003e6a:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	781b      	ldrb	r3, [r3, #0]
 8003e74:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	785b      	ldrb	r3, [r3, #1]
 8003e7a:	2b01      	cmp	r3, #1
 8003e7c:	d128      	bne.n	8003ed0 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003e7e:	68bb      	ldr	r3, [r7, #8]
 8003e80:	015a      	lsls	r2, r3, #5
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	4413      	add	r3, r2
 8003e86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	68ba      	ldr	r2, [r7, #8]
 8003e8e:	0151      	lsls	r1, r2, #5
 8003e90:	68fa      	ldr	r2, [r7, #12]
 8003e92:	440a      	add	r2, r1
 8003e94:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003e98:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003e9c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8003e9e:	683b      	ldr	r3, [r7, #0]
 8003ea0:	78db      	ldrb	r3, [r3, #3]
 8003ea2:	2b03      	cmp	r3, #3
 8003ea4:	d003      	beq.n	8003eae <USB_EPClearStall+0x4c>
 8003ea6:	683b      	ldr	r3, [r7, #0]
 8003ea8:	78db      	ldrb	r3, [r3, #3]
 8003eaa:	2b02      	cmp	r3, #2
 8003eac:	d138      	bne.n	8003f20 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8003eae:	68bb      	ldr	r3, [r7, #8]
 8003eb0:	015a      	lsls	r2, r3, #5
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	4413      	add	r3, r2
 8003eb6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	68ba      	ldr	r2, [r7, #8]
 8003ebe:	0151      	lsls	r1, r2, #5
 8003ec0:	68fa      	ldr	r2, [r7, #12]
 8003ec2:	440a      	add	r2, r1
 8003ec4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003ec8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ecc:	6013      	str	r3, [r2, #0]
 8003ece:	e027      	b.n	8003f20 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003ed0:	68bb      	ldr	r3, [r7, #8]
 8003ed2:	015a      	lsls	r2, r3, #5
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	4413      	add	r3, r2
 8003ed8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	68ba      	ldr	r2, [r7, #8]
 8003ee0:	0151      	lsls	r1, r2, #5
 8003ee2:	68fa      	ldr	r2, [r7, #12]
 8003ee4:	440a      	add	r2, r1
 8003ee6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003eea:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003eee:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8003ef0:	683b      	ldr	r3, [r7, #0]
 8003ef2:	78db      	ldrb	r3, [r3, #3]
 8003ef4:	2b03      	cmp	r3, #3
 8003ef6:	d003      	beq.n	8003f00 <USB_EPClearStall+0x9e>
 8003ef8:	683b      	ldr	r3, [r7, #0]
 8003efa:	78db      	ldrb	r3, [r3, #3]
 8003efc:	2b02      	cmp	r3, #2
 8003efe:	d10f      	bne.n	8003f20 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8003f00:	68bb      	ldr	r3, [r7, #8]
 8003f02:	015a      	lsls	r2, r3, #5
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	4413      	add	r3, r2
 8003f08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	68ba      	ldr	r2, [r7, #8]
 8003f10:	0151      	lsls	r1, r2, #5
 8003f12:	68fa      	ldr	r2, [r7, #12]
 8003f14:	440a      	add	r2, r1
 8003f16:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003f1a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f1e:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8003f20:	2300      	movs	r3, #0
}
 8003f22:	4618      	mov	r0, r3
 8003f24:	3714      	adds	r7, #20
 8003f26:	46bd      	mov	sp, r7
 8003f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2c:	4770      	bx	lr

08003f2e <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8003f2e:	b480      	push	{r7}
 8003f30:	b085      	sub	sp, #20
 8003f32:	af00      	add	r7, sp, #0
 8003f34:	6078      	str	r0, [r7, #4]
 8003f36:	460b      	mov	r3, r1
 8003f38:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	68fa      	ldr	r2, [r7, #12]
 8003f48:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003f4c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003f50:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f58:	681a      	ldr	r2, [r3, #0]
 8003f5a:	78fb      	ldrb	r3, [r7, #3]
 8003f5c:	011b      	lsls	r3, r3, #4
 8003f5e:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8003f62:	68f9      	ldr	r1, [r7, #12]
 8003f64:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003f68:	4313      	orrs	r3, r2
 8003f6a:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8003f6c:	2300      	movs	r3, #0
}
 8003f6e:	4618      	mov	r0, r3
 8003f70:	3714      	adds	r7, #20
 8003f72:	46bd      	mov	sp, r7
 8003f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f78:	4770      	bx	lr

08003f7a <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8003f7a:	b480      	push	{r7}
 8003f7c:	b085      	sub	sp, #20
 8003f7e:	af00      	add	r7, sp, #0
 8003f80:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	68fa      	ldr	r2, [r7, #12]
 8003f90:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8003f94:	f023 0303 	bic.w	r3, r3, #3
 8003f98:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003fa0:	685b      	ldr	r3, [r3, #4]
 8003fa2:	68fa      	ldr	r2, [r7, #12]
 8003fa4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003fa8:	f023 0302 	bic.w	r3, r3, #2
 8003fac:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8003fae:	2300      	movs	r3, #0
}
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	3714      	adds	r7, #20
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fba:	4770      	bx	lr

08003fbc <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8003fbc:	b480      	push	{r7}
 8003fbe:	b085      	sub	sp, #20
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	68fa      	ldr	r2, [r7, #12]
 8003fd2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8003fd6:	f023 0303 	bic.w	r3, r3, #3
 8003fda:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003fe2:	685b      	ldr	r3, [r3, #4]
 8003fe4:	68fa      	ldr	r2, [r7, #12]
 8003fe6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003fea:	f043 0302 	orr.w	r3, r3, #2
 8003fee:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8003ff0:	2300      	movs	r3, #0
}
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	3714      	adds	r7, #20
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffc:	4770      	bx	lr

08003ffe <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8003ffe:	b480      	push	{r7}
 8004000:	b085      	sub	sp, #20
 8004002:	af00      	add	r7, sp, #0
 8004004:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	695b      	ldr	r3, [r3, #20]
 800400a:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	699b      	ldr	r3, [r3, #24]
 8004010:	68fa      	ldr	r2, [r7, #12]
 8004012:	4013      	ands	r3, r2
 8004014:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004016:	68fb      	ldr	r3, [r7, #12]
}
 8004018:	4618      	mov	r0, r3
 800401a:	3714      	adds	r7, #20
 800401c:	46bd      	mov	sp, r7
 800401e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004022:	4770      	bx	lr

08004024 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004024:	b480      	push	{r7}
 8004026:	b085      	sub	sp, #20
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004036:	699b      	ldr	r3, [r3, #24]
 8004038:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004040:	69db      	ldr	r3, [r3, #28]
 8004042:	68ba      	ldr	r2, [r7, #8]
 8004044:	4013      	ands	r3, r2
 8004046:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8004048:	68bb      	ldr	r3, [r7, #8]
 800404a:	0c1b      	lsrs	r3, r3, #16
}
 800404c:	4618      	mov	r0, r3
 800404e:	3714      	adds	r7, #20
 8004050:	46bd      	mov	sp, r7
 8004052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004056:	4770      	bx	lr

08004058 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004058:	b480      	push	{r7}
 800405a:	b085      	sub	sp, #20
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800406a:	699b      	ldr	r3, [r3, #24]
 800406c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004074:	69db      	ldr	r3, [r3, #28]
 8004076:	68ba      	ldr	r2, [r7, #8]
 8004078:	4013      	ands	r3, r2
 800407a:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800407c:	68bb      	ldr	r3, [r7, #8]
 800407e:	b29b      	uxth	r3, r3
}
 8004080:	4618      	mov	r0, r3
 8004082:	3714      	adds	r7, #20
 8004084:	46bd      	mov	sp, r7
 8004086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408a:	4770      	bx	lr

0800408c <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800408c:	b480      	push	{r7}
 800408e:	b085      	sub	sp, #20
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
 8004094:	460b      	mov	r3, r1
 8004096:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800409c:	78fb      	ldrb	r3, [r7, #3]
 800409e:	015a      	lsls	r2, r3, #5
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	4413      	add	r3, r2
 80040a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040a8:	689b      	ldr	r3, [r3, #8]
 80040aa:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040b2:	695b      	ldr	r3, [r3, #20]
 80040b4:	68ba      	ldr	r2, [r7, #8]
 80040b6:	4013      	ands	r3, r2
 80040b8:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80040ba:	68bb      	ldr	r3, [r7, #8]
}
 80040bc:	4618      	mov	r0, r3
 80040be:	3714      	adds	r7, #20
 80040c0:	46bd      	mov	sp, r7
 80040c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c6:	4770      	bx	lr

080040c8 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80040c8:	b480      	push	{r7}
 80040ca:	b087      	sub	sp, #28
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
 80040d0:	460b      	mov	r3, r1
 80040d2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80040d8:	697b      	ldr	r3, [r7, #20]
 80040da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040de:	691b      	ldr	r3, [r3, #16]
 80040e0:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80040e2:	697b      	ldr	r3, [r7, #20]
 80040e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040ea:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80040ec:	78fb      	ldrb	r3, [r7, #3]
 80040ee:	f003 030f 	and.w	r3, r3, #15
 80040f2:	68fa      	ldr	r2, [r7, #12]
 80040f4:	fa22 f303 	lsr.w	r3, r2, r3
 80040f8:	01db      	lsls	r3, r3, #7
 80040fa:	b2db      	uxtb	r3, r3
 80040fc:	693a      	ldr	r2, [r7, #16]
 80040fe:	4313      	orrs	r3, r2
 8004100:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8004102:	78fb      	ldrb	r3, [r7, #3]
 8004104:	015a      	lsls	r2, r3, #5
 8004106:	697b      	ldr	r3, [r7, #20]
 8004108:	4413      	add	r3, r2
 800410a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800410e:	689b      	ldr	r3, [r3, #8]
 8004110:	693a      	ldr	r2, [r7, #16]
 8004112:	4013      	ands	r3, r2
 8004114:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004116:	68bb      	ldr	r3, [r7, #8]
}
 8004118:	4618      	mov	r0, r3
 800411a:	371c      	adds	r7, #28
 800411c:	46bd      	mov	sp, r7
 800411e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004122:	4770      	bx	lr

08004124 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004124:	b480      	push	{r7}
 8004126:	b083      	sub	sp, #12
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	695b      	ldr	r3, [r3, #20]
 8004130:	f003 0301 	and.w	r3, r3, #1
}
 8004134:	4618      	mov	r0, r3
 8004136:	370c      	adds	r7, #12
 8004138:	46bd      	mov	sp, r7
 800413a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413e:	4770      	bx	lr

08004140 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8004140:	b480      	push	{r7}
 8004142:	b085      	sub	sp, #20
 8004144:	af00      	add	r7, sp, #0
 8004146:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	68fa      	ldr	r2, [r7, #12]
 8004156:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800415a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800415e:	f023 0307 	bic.w	r3, r3, #7
 8004162:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800416a:	685b      	ldr	r3, [r3, #4]
 800416c:	68fa      	ldr	r2, [r7, #12]
 800416e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004172:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004176:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004178:	2300      	movs	r3, #0
}
 800417a:	4618      	mov	r0, r3
 800417c:	3714      	adds	r7, #20
 800417e:	46bd      	mov	sp, r7
 8004180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004184:	4770      	bx	lr
	...

08004188 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8004188:	b480      	push	{r7}
 800418a:	b087      	sub	sp, #28
 800418c:	af00      	add	r7, sp, #0
 800418e:	60f8      	str	r0, [r7, #12]
 8004190:	460b      	mov	r3, r1
 8004192:	607a      	str	r2, [r7, #4]
 8004194:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	333c      	adds	r3, #60	; 0x3c
 800419e:	3304      	adds	r3, #4
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80041a4:	693b      	ldr	r3, [r7, #16]
 80041a6:	4a26      	ldr	r2, [pc, #152]	; (8004240 <USB_EP0_OutStart+0xb8>)
 80041a8:	4293      	cmp	r3, r2
 80041aa:	d90a      	bls.n	80041c2 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80041ac:	697b      	ldr	r3, [r7, #20]
 80041ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80041b8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80041bc:	d101      	bne.n	80041c2 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80041be:	2300      	movs	r3, #0
 80041c0:	e037      	b.n	8004232 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80041c2:	697b      	ldr	r3, [r7, #20]
 80041c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041c8:	461a      	mov	r2, r3
 80041ca:	2300      	movs	r3, #0
 80041cc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80041ce:	697b      	ldr	r3, [r7, #20]
 80041d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041d4:	691b      	ldr	r3, [r3, #16]
 80041d6:	697a      	ldr	r2, [r7, #20]
 80041d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80041dc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80041e0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80041e2:	697b      	ldr	r3, [r7, #20]
 80041e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041e8:	691b      	ldr	r3, [r3, #16]
 80041ea:	697a      	ldr	r2, [r7, #20]
 80041ec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80041f0:	f043 0318 	orr.w	r3, r3, #24
 80041f4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80041f6:	697b      	ldr	r3, [r7, #20]
 80041f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041fc:	691b      	ldr	r3, [r3, #16]
 80041fe:	697a      	ldr	r2, [r7, #20]
 8004200:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004204:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8004208:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800420a:	7afb      	ldrb	r3, [r7, #11]
 800420c:	2b01      	cmp	r3, #1
 800420e:	d10f      	bne.n	8004230 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8004210:	697b      	ldr	r3, [r7, #20]
 8004212:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004216:	461a      	mov	r2, r3
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800421c:	697b      	ldr	r3, [r7, #20]
 800421e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	697a      	ldr	r2, [r7, #20]
 8004226:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800422a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800422e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004230:	2300      	movs	r3, #0
}
 8004232:	4618      	mov	r0, r3
 8004234:	371c      	adds	r7, #28
 8004236:	46bd      	mov	sp, r7
 8004238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423c:	4770      	bx	lr
 800423e:	bf00      	nop
 8004240:	4f54300a 	.word	0x4f54300a

08004244 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004244:	b480      	push	{r7}
 8004246:	b085      	sub	sp, #20
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800424c:	2300      	movs	r3, #0
 800424e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	3301      	adds	r3, #1
 8004254:	60fb      	str	r3, [r7, #12]
 8004256:	4a13      	ldr	r2, [pc, #76]	; (80042a4 <USB_CoreReset+0x60>)
 8004258:	4293      	cmp	r3, r2
 800425a:	d901      	bls.n	8004260 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 800425c:	2303      	movs	r3, #3
 800425e:	e01a      	b.n	8004296 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	691b      	ldr	r3, [r3, #16]
 8004264:	2b00      	cmp	r3, #0
 8004266:	daf3      	bge.n	8004250 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004268:	2300      	movs	r3, #0
 800426a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	691b      	ldr	r3, [r3, #16]
 8004270:	f043 0201 	orr.w	r2, r3, #1
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	3301      	adds	r3, #1
 800427c:	60fb      	str	r3, [r7, #12]
 800427e:	4a09      	ldr	r2, [pc, #36]	; (80042a4 <USB_CoreReset+0x60>)
 8004280:	4293      	cmp	r3, r2
 8004282:	d901      	bls.n	8004288 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8004284:	2303      	movs	r3, #3
 8004286:	e006      	b.n	8004296 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	691b      	ldr	r3, [r3, #16]
 800428c:	f003 0301 	and.w	r3, r3, #1
 8004290:	2b01      	cmp	r3, #1
 8004292:	d0f1      	beq.n	8004278 <USB_CoreReset+0x34>

  return HAL_OK;
 8004294:	2300      	movs	r3, #0
}
 8004296:	4618      	mov	r0, r3
 8004298:	3714      	adds	r7, #20
 800429a:	46bd      	mov	sp, r7
 800429c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a0:	4770      	bx	lr
 80042a2:	bf00      	nop
 80042a4:	00030d40 	.word	0x00030d40

080042a8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80042a8:	b580      	push	{r7, lr}
 80042aa:	b084      	sub	sp, #16
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
 80042b0:	460b      	mov	r3, r1
 80042b2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80042b4:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80042b8:	f002 fa08 	bl	80066cc <USBD_static_malloc>
 80042bc:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d105      	bne.n	80042d0 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2200      	movs	r2, #0
 80042c8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 80042cc:	2302      	movs	r3, #2
 80042ce:	e066      	b.n	800439e <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	68fa      	ldr	r2, [r7, #12]
 80042d4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	7c1b      	ldrb	r3, [r3, #16]
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d119      	bne.n	8004314 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80042e0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80042e4:	2202      	movs	r2, #2
 80042e6:	2181      	movs	r1, #129	; 0x81
 80042e8:	6878      	ldr	r0, [r7, #4]
 80042ea:	f002 f8cc 	bl	8006486 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	2201      	movs	r2, #1
 80042f2:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80042f4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80042f8:	2202      	movs	r2, #2
 80042fa:	2101      	movs	r1, #1
 80042fc:	6878      	ldr	r0, [r7, #4]
 80042fe:	f002 f8c2 	bl	8006486 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	2201      	movs	r2, #1
 8004306:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	2210      	movs	r2, #16
 800430e:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8004312:	e016      	b.n	8004342 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8004314:	2340      	movs	r3, #64	; 0x40
 8004316:	2202      	movs	r2, #2
 8004318:	2181      	movs	r1, #129	; 0x81
 800431a:	6878      	ldr	r0, [r7, #4]
 800431c:	f002 f8b3 	bl	8006486 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2201      	movs	r2, #1
 8004324:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8004326:	2340      	movs	r3, #64	; 0x40
 8004328:	2202      	movs	r2, #2
 800432a:	2101      	movs	r1, #1
 800432c:	6878      	ldr	r0, [r7, #4]
 800432e:	f002 f8aa 	bl	8006486 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	2201      	movs	r2, #1
 8004336:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	2210      	movs	r2, #16
 800433e:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8004342:	2308      	movs	r3, #8
 8004344:	2203      	movs	r2, #3
 8004346:	2182      	movs	r1, #130	; 0x82
 8004348:	6878      	ldr	r0, [r7, #4]
 800434a:	f002 f89c 	bl	8006486 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	2201      	movs	r2, #1
 8004352:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	2200      	movs	r2, #0
 8004364:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	2200      	movs	r2, #0
 800436c:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	7c1b      	ldrb	r3, [r3, #16]
 8004374:	2b00      	cmp	r3, #0
 8004376:	d109      	bne.n	800438c <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800437e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004382:	2101      	movs	r1, #1
 8004384:	6878      	ldr	r0, [r7, #4]
 8004386:	f002 f96d 	bl	8006664 <USBD_LL_PrepareReceive>
 800438a:	e007      	b.n	800439c <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004392:	2340      	movs	r3, #64	; 0x40
 8004394:	2101      	movs	r1, #1
 8004396:	6878      	ldr	r0, [r7, #4]
 8004398:	f002 f964 	bl	8006664 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800439c:	2300      	movs	r3, #0
}
 800439e:	4618      	mov	r0, r3
 80043a0:	3710      	adds	r7, #16
 80043a2:	46bd      	mov	sp, r7
 80043a4:	bd80      	pop	{r7, pc}

080043a6 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80043a6:	b580      	push	{r7, lr}
 80043a8:	b082      	sub	sp, #8
 80043aa:	af00      	add	r7, sp, #0
 80043ac:	6078      	str	r0, [r7, #4]
 80043ae:	460b      	mov	r3, r1
 80043b0:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80043b2:	2181      	movs	r1, #129	; 0x81
 80043b4:	6878      	ldr	r0, [r7, #4]
 80043b6:	f002 f88c 	bl	80064d2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	2200      	movs	r2, #0
 80043be:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80043c0:	2101      	movs	r1, #1
 80043c2:	6878      	ldr	r0, [r7, #4]
 80043c4:	f002 f885 	bl	80064d2 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2200      	movs	r2, #0
 80043cc:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80043d0:	2182      	movs	r1, #130	; 0x82
 80043d2:	6878      	ldr	r0, [r7, #4]
 80043d4:	f002 f87d 	bl	80064d2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2200      	movs	r2, #0
 80043dc:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2200      	movs	r2, #0
 80043e4:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d00e      	beq.n	8004410 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80043f8:	685b      	ldr	r3, [r3, #4]
 80043fa:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004402:	4618      	mov	r0, r3
 8004404:	f002 f970 	bl	80066e8 <USBD_static_free>
    pdev->pClassData = NULL;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2200      	movs	r2, #0
 800440c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8004410:	2300      	movs	r3, #0
}
 8004412:	4618      	mov	r0, r3
 8004414:	3708      	adds	r7, #8
 8004416:	46bd      	mov	sp, r7
 8004418:	bd80      	pop	{r7, pc}
	...

0800441c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800441c:	b580      	push	{r7, lr}
 800441e:	b086      	sub	sp, #24
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
 8004424:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800442c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800442e:	2300      	movs	r3, #0
 8004430:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8004432:	2300      	movs	r3, #0
 8004434:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8004436:	2300      	movs	r3, #0
 8004438:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800443a:	693b      	ldr	r3, [r7, #16]
 800443c:	2b00      	cmp	r3, #0
 800443e:	d101      	bne.n	8004444 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8004440:	2303      	movs	r3, #3
 8004442:	e0af      	b.n	80045a4 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	781b      	ldrb	r3, [r3, #0]
 8004448:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800444c:	2b00      	cmp	r3, #0
 800444e:	d03f      	beq.n	80044d0 <USBD_CDC_Setup+0xb4>
 8004450:	2b20      	cmp	r3, #32
 8004452:	f040 809f 	bne.w	8004594 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8004456:	683b      	ldr	r3, [r7, #0]
 8004458:	88db      	ldrh	r3, [r3, #6]
 800445a:	2b00      	cmp	r3, #0
 800445c:	d02e      	beq.n	80044bc <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800445e:	683b      	ldr	r3, [r7, #0]
 8004460:	781b      	ldrb	r3, [r3, #0]
 8004462:	b25b      	sxtb	r3, r3
 8004464:	2b00      	cmp	r3, #0
 8004466:	da16      	bge.n	8004496 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800446e:	689b      	ldr	r3, [r3, #8]
 8004470:	683a      	ldr	r2, [r7, #0]
 8004472:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8004474:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8004476:	683a      	ldr	r2, [r7, #0]
 8004478:	88d2      	ldrh	r2, [r2, #6]
 800447a:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	88db      	ldrh	r3, [r3, #6]
 8004480:	2b07      	cmp	r3, #7
 8004482:	bf28      	it	cs
 8004484:	2307      	movcs	r3, #7
 8004486:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8004488:	693b      	ldr	r3, [r7, #16]
 800448a:	89fa      	ldrh	r2, [r7, #14]
 800448c:	4619      	mov	r1, r3
 800448e:	6878      	ldr	r0, [r7, #4]
 8004490:	f001 fb19 	bl	8005ac6 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8004494:	e085      	b.n	80045a2 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 8004496:	683b      	ldr	r3, [r7, #0]
 8004498:	785a      	ldrb	r2, [r3, #1]
 800449a:	693b      	ldr	r3, [r7, #16]
 800449c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 80044a0:	683b      	ldr	r3, [r7, #0]
 80044a2:	88db      	ldrh	r3, [r3, #6]
 80044a4:	b2da      	uxtb	r2, r3
 80044a6:	693b      	ldr	r3, [r7, #16]
 80044a8:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 80044ac:	6939      	ldr	r1, [r7, #16]
 80044ae:	683b      	ldr	r3, [r7, #0]
 80044b0:	88db      	ldrh	r3, [r3, #6]
 80044b2:	461a      	mov	r2, r3
 80044b4:	6878      	ldr	r0, [r7, #4]
 80044b6:	f001 fb32 	bl	8005b1e <USBD_CtlPrepareRx>
      break;
 80044ba:	e072      	b.n	80045a2 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80044c2:	689b      	ldr	r3, [r3, #8]
 80044c4:	683a      	ldr	r2, [r7, #0]
 80044c6:	7850      	ldrb	r0, [r2, #1]
 80044c8:	2200      	movs	r2, #0
 80044ca:	6839      	ldr	r1, [r7, #0]
 80044cc:	4798      	blx	r3
      break;
 80044ce:	e068      	b.n	80045a2 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80044d0:	683b      	ldr	r3, [r7, #0]
 80044d2:	785b      	ldrb	r3, [r3, #1]
 80044d4:	2b0b      	cmp	r3, #11
 80044d6:	d852      	bhi.n	800457e <USBD_CDC_Setup+0x162>
 80044d8:	a201      	add	r2, pc, #4	; (adr r2, 80044e0 <USBD_CDC_Setup+0xc4>)
 80044da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044de:	bf00      	nop
 80044e0:	08004511 	.word	0x08004511
 80044e4:	0800458d 	.word	0x0800458d
 80044e8:	0800457f 	.word	0x0800457f
 80044ec:	0800457f 	.word	0x0800457f
 80044f0:	0800457f 	.word	0x0800457f
 80044f4:	0800457f 	.word	0x0800457f
 80044f8:	0800457f 	.word	0x0800457f
 80044fc:	0800457f 	.word	0x0800457f
 8004500:	0800457f 	.word	0x0800457f
 8004504:	0800457f 	.word	0x0800457f
 8004508:	0800453b 	.word	0x0800453b
 800450c:	08004565 	.word	0x08004565
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004516:	b2db      	uxtb	r3, r3
 8004518:	2b03      	cmp	r3, #3
 800451a:	d107      	bne.n	800452c <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800451c:	f107 030a 	add.w	r3, r7, #10
 8004520:	2202      	movs	r2, #2
 8004522:	4619      	mov	r1, r3
 8004524:	6878      	ldr	r0, [r7, #4]
 8004526:	f001 face 	bl	8005ac6 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800452a:	e032      	b.n	8004592 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800452c:	6839      	ldr	r1, [r7, #0]
 800452e:	6878      	ldr	r0, [r7, #4]
 8004530:	f001 fa58 	bl	80059e4 <USBD_CtlError>
            ret = USBD_FAIL;
 8004534:	2303      	movs	r3, #3
 8004536:	75fb      	strb	r3, [r7, #23]
          break;
 8004538:	e02b      	b.n	8004592 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004540:	b2db      	uxtb	r3, r3
 8004542:	2b03      	cmp	r3, #3
 8004544:	d107      	bne.n	8004556 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8004546:	f107 030d 	add.w	r3, r7, #13
 800454a:	2201      	movs	r2, #1
 800454c:	4619      	mov	r1, r3
 800454e:	6878      	ldr	r0, [r7, #4]
 8004550:	f001 fab9 	bl	8005ac6 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004554:	e01d      	b.n	8004592 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8004556:	6839      	ldr	r1, [r7, #0]
 8004558:	6878      	ldr	r0, [r7, #4]
 800455a:	f001 fa43 	bl	80059e4 <USBD_CtlError>
            ret = USBD_FAIL;
 800455e:	2303      	movs	r3, #3
 8004560:	75fb      	strb	r3, [r7, #23]
          break;
 8004562:	e016      	b.n	8004592 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800456a:	b2db      	uxtb	r3, r3
 800456c:	2b03      	cmp	r3, #3
 800456e:	d00f      	beq.n	8004590 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8004570:	6839      	ldr	r1, [r7, #0]
 8004572:	6878      	ldr	r0, [r7, #4]
 8004574:	f001 fa36 	bl	80059e4 <USBD_CtlError>
            ret = USBD_FAIL;
 8004578:	2303      	movs	r3, #3
 800457a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800457c:	e008      	b.n	8004590 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800457e:	6839      	ldr	r1, [r7, #0]
 8004580:	6878      	ldr	r0, [r7, #4]
 8004582:	f001 fa2f 	bl	80059e4 <USBD_CtlError>
          ret = USBD_FAIL;
 8004586:	2303      	movs	r3, #3
 8004588:	75fb      	strb	r3, [r7, #23]
          break;
 800458a:	e002      	b.n	8004592 <USBD_CDC_Setup+0x176>
          break;
 800458c:	bf00      	nop
 800458e:	e008      	b.n	80045a2 <USBD_CDC_Setup+0x186>
          break;
 8004590:	bf00      	nop
      }
      break;
 8004592:	e006      	b.n	80045a2 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8004594:	6839      	ldr	r1, [r7, #0]
 8004596:	6878      	ldr	r0, [r7, #4]
 8004598:	f001 fa24 	bl	80059e4 <USBD_CtlError>
      ret = USBD_FAIL;
 800459c:	2303      	movs	r3, #3
 800459e:	75fb      	strb	r3, [r7, #23]
      break;
 80045a0:	bf00      	nop
  }

  return (uint8_t)ret;
 80045a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80045a4:	4618      	mov	r0, r3
 80045a6:	3718      	adds	r7, #24
 80045a8:	46bd      	mov	sp, r7
 80045aa:	bd80      	pop	{r7, pc}

080045ac <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80045ac:	b580      	push	{r7, lr}
 80045ae:	b084      	sub	sp, #16
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]
 80045b4:	460b      	mov	r3, r1
 80045b6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80045be:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d101      	bne.n	80045ce <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80045ca:	2303      	movs	r3, #3
 80045cc:	e04f      	b.n	800466e <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80045d4:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80045d6:	78fa      	ldrb	r2, [r7, #3]
 80045d8:	6879      	ldr	r1, [r7, #4]
 80045da:	4613      	mov	r3, r2
 80045dc:	009b      	lsls	r3, r3, #2
 80045de:	4413      	add	r3, r2
 80045e0:	009b      	lsls	r3, r3, #2
 80045e2:	440b      	add	r3, r1
 80045e4:	3318      	adds	r3, #24
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d029      	beq.n	8004640 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80045ec:	78fa      	ldrb	r2, [r7, #3]
 80045ee:	6879      	ldr	r1, [r7, #4]
 80045f0:	4613      	mov	r3, r2
 80045f2:	009b      	lsls	r3, r3, #2
 80045f4:	4413      	add	r3, r2
 80045f6:	009b      	lsls	r3, r3, #2
 80045f8:	440b      	add	r3, r1
 80045fa:	3318      	adds	r3, #24
 80045fc:	681a      	ldr	r2, [r3, #0]
 80045fe:	78f9      	ldrb	r1, [r7, #3]
 8004600:	68f8      	ldr	r0, [r7, #12]
 8004602:	460b      	mov	r3, r1
 8004604:	00db      	lsls	r3, r3, #3
 8004606:	1a5b      	subs	r3, r3, r1
 8004608:	009b      	lsls	r3, r3, #2
 800460a:	4403      	add	r3, r0
 800460c:	3344      	adds	r3, #68	; 0x44
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	fbb2 f1f3 	udiv	r1, r2, r3
 8004614:	fb01 f303 	mul.w	r3, r1, r3
 8004618:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800461a:	2b00      	cmp	r3, #0
 800461c:	d110      	bne.n	8004640 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800461e:	78fa      	ldrb	r2, [r7, #3]
 8004620:	6879      	ldr	r1, [r7, #4]
 8004622:	4613      	mov	r3, r2
 8004624:	009b      	lsls	r3, r3, #2
 8004626:	4413      	add	r3, r2
 8004628:	009b      	lsls	r3, r3, #2
 800462a:	440b      	add	r3, r1
 800462c:	3318      	adds	r3, #24
 800462e:	2200      	movs	r2, #0
 8004630:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8004632:	78f9      	ldrb	r1, [r7, #3]
 8004634:	2300      	movs	r3, #0
 8004636:	2200      	movs	r2, #0
 8004638:	6878      	ldr	r0, [r7, #4]
 800463a:	f001 fff2 	bl	8006622 <USBD_LL_Transmit>
 800463e:	e015      	b.n	800466c <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8004640:	68bb      	ldr	r3, [r7, #8]
 8004642:	2200      	movs	r2, #0
 8004644:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800464e:	691b      	ldr	r3, [r3, #16]
 8004650:	2b00      	cmp	r3, #0
 8004652:	d00b      	beq.n	800466c <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800465a:	691b      	ldr	r3, [r3, #16]
 800465c:	68ba      	ldr	r2, [r7, #8]
 800465e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8004662:	68ba      	ldr	r2, [r7, #8]
 8004664:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8004668:	78fa      	ldrb	r2, [r7, #3]
 800466a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800466c:	2300      	movs	r3, #0
}
 800466e:	4618      	mov	r0, r3
 8004670:	3710      	adds	r7, #16
 8004672:	46bd      	mov	sp, r7
 8004674:	bd80      	pop	{r7, pc}

08004676 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004676:	b580      	push	{r7, lr}
 8004678:	b084      	sub	sp, #16
 800467a:	af00      	add	r7, sp, #0
 800467c:	6078      	str	r0, [r7, #4]
 800467e:	460b      	mov	r3, r1
 8004680:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004688:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004690:	2b00      	cmp	r3, #0
 8004692:	d101      	bne.n	8004698 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8004694:	2303      	movs	r3, #3
 8004696:	e015      	b.n	80046c4 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8004698:	78fb      	ldrb	r3, [r7, #3]
 800469a:	4619      	mov	r1, r3
 800469c:	6878      	ldr	r0, [r7, #4]
 800469e:	f002 f802 	bl	80066a6 <USBD_LL_GetRxDataSize>
 80046a2:	4602      	mov	r2, r0
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80046b0:	68db      	ldr	r3, [r3, #12]
 80046b2:	68fa      	ldr	r2, [r7, #12]
 80046b4:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80046b8:	68fa      	ldr	r2, [r7, #12]
 80046ba:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80046be:	4611      	mov	r1, r2
 80046c0:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80046c2:	2300      	movs	r3, #0
}
 80046c4:	4618      	mov	r0, r3
 80046c6:	3710      	adds	r7, #16
 80046c8:	46bd      	mov	sp, r7
 80046ca:	bd80      	pop	{r7, pc}

080046cc <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80046cc:	b580      	push	{r7, lr}
 80046ce:	b084      	sub	sp, #16
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80046da:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d101      	bne.n	80046e6 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 80046e2:	2303      	movs	r3, #3
 80046e4:	e01b      	b.n	800471e <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d015      	beq.n	800471c <USBD_CDC_EP0_RxReady+0x50>
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80046f6:	2bff      	cmp	r3, #255	; 0xff
 80046f8:	d010      	beq.n	800471c <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004700:	689b      	ldr	r3, [r3, #8]
 8004702:	68fa      	ldr	r2, [r7, #12]
 8004704:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8004708:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800470a:	68fa      	ldr	r2, [r7, #12]
 800470c:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8004710:	b292      	uxth	r2, r2
 8004712:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	22ff      	movs	r2, #255	; 0xff
 8004718:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800471c:	2300      	movs	r3, #0
}
 800471e:	4618      	mov	r0, r3
 8004720:	3710      	adds	r7, #16
 8004722:	46bd      	mov	sp, r7
 8004724:	bd80      	pop	{r7, pc}
	...

08004728 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8004728:	b480      	push	{r7}
 800472a:	b083      	sub	sp, #12
 800472c:	af00      	add	r7, sp, #0
 800472e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2243      	movs	r2, #67	; 0x43
 8004734:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8004736:	4b03      	ldr	r3, [pc, #12]	; (8004744 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8004738:	4618      	mov	r0, r3
 800473a:	370c      	adds	r7, #12
 800473c:	46bd      	mov	sp, r7
 800473e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004742:	4770      	bx	lr
 8004744:	200000b8 	.word	0x200000b8

08004748 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8004748:	b480      	push	{r7}
 800474a:	b083      	sub	sp, #12
 800474c:	af00      	add	r7, sp, #0
 800474e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2243      	movs	r2, #67	; 0x43
 8004754:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8004756:	4b03      	ldr	r3, [pc, #12]	; (8004764 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8004758:	4618      	mov	r0, r3
 800475a:	370c      	adds	r7, #12
 800475c:	46bd      	mov	sp, r7
 800475e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004762:	4770      	bx	lr
 8004764:	20000074 	.word	0x20000074

08004768 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8004768:	b480      	push	{r7}
 800476a:	b083      	sub	sp, #12
 800476c:	af00      	add	r7, sp, #0
 800476e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2243      	movs	r2, #67	; 0x43
 8004774:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8004776:	4b03      	ldr	r3, [pc, #12]	; (8004784 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8004778:	4618      	mov	r0, r3
 800477a:	370c      	adds	r7, #12
 800477c:	46bd      	mov	sp, r7
 800477e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004782:	4770      	bx	lr
 8004784:	200000fc 	.word	0x200000fc

08004788 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8004788:	b480      	push	{r7}
 800478a:	b083      	sub	sp, #12
 800478c:	af00      	add	r7, sp, #0
 800478e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	220a      	movs	r2, #10
 8004794:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8004796:	4b03      	ldr	r3, [pc, #12]	; (80047a4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8004798:	4618      	mov	r0, r3
 800479a:	370c      	adds	r7, #12
 800479c:	46bd      	mov	sp, r7
 800479e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a2:	4770      	bx	lr
 80047a4:	20000030 	.word	0x20000030

080047a8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80047a8:	b480      	push	{r7}
 80047aa:	b083      	sub	sp, #12
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]
 80047b0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80047b2:	683b      	ldr	r3, [r7, #0]
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d101      	bne.n	80047bc <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80047b8:	2303      	movs	r3, #3
 80047ba:	e004      	b.n	80047c6 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	683a      	ldr	r2, [r7, #0]
 80047c0:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 80047c4:	2300      	movs	r3, #0
}
 80047c6:	4618      	mov	r0, r3
 80047c8:	370c      	adds	r7, #12
 80047ca:	46bd      	mov	sp, r7
 80047cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d0:	4770      	bx	lr

080047d2 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80047d2:	b480      	push	{r7}
 80047d4:	b087      	sub	sp, #28
 80047d6:	af00      	add	r7, sp, #0
 80047d8:	60f8      	str	r0, [r7, #12]
 80047da:	60b9      	str	r1, [r7, #8]
 80047dc:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80047e4:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 80047e6:	697b      	ldr	r3, [r7, #20]
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d101      	bne.n	80047f0 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 80047ec:	2303      	movs	r3, #3
 80047ee:	e008      	b.n	8004802 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 80047f0:	697b      	ldr	r3, [r7, #20]
 80047f2:	68ba      	ldr	r2, [r7, #8]
 80047f4:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80047f8:	697b      	ldr	r3, [r7, #20]
 80047fa:	687a      	ldr	r2, [r7, #4]
 80047fc:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8004800:	2300      	movs	r3, #0
}
 8004802:	4618      	mov	r0, r3
 8004804:	371c      	adds	r7, #28
 8004806:	46bd      	mov	sp, r7
 8004808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480c:	4770      	bx	lr

0800480e <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800480e:	b480      	push	{r7}
 8004810:	b085      	sub	sp, #20
 8004812:	af00      	add	r7, sp, #0
 8004814:	6078      	str	r0, [r7, #4]
 8004816:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800481e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	2b00      	cmp	r3, #0
 8004824:	d101      	bne.n	800482a <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 8004826:	2303      	movs	r3, #3
 8004828:	e004      	b.n	8004834 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	683a      	ldr	r2, [r7, #0]
 800482e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8004832:	2300      	movs	r3, #0
}
 8004834:	4618      	mov	r0, r3
 8004836:	3714      	adds	r7, #20
 8004838:	46bd      	mov	sp, r7
 800483a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483e:	4770      	bx	lr

08004840 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8004840:	b580      	push	{r7, lr}
 8004842:	b084      	sub	sp, #16
 8004844:	af00      	add	r7, sp, #0
 8004846:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800484e:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8004850:	2301      	movs	r3, #1
 8004852:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800485a:	2b00      	cmp	r3, #0
 800485c:	d101      	bne.n	8004862 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800485e:	2303      	movs	r3, #3
 8004860:	e01a      	b.n	8004898 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 8004862:	68bb      	ldr	r3, [r7, #8]
 8004864:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004868:	2b00      	cmp	r3, #0
 800486a:	d114      	bne.n	8004896 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800486c:	68bb      	ldr	r3, [r7, #8]
 800486e:	2201      	movs	r2, #1
 8004870:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8004874:	68bb      	ldr	r3, [r7, #8]
 8004876:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800487e:	68bb      	ldr	r3, [r7, #8]
 8004880:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8004884:	68bb      	ldr	r3, [r7, #8]
 8004886:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800488a:	2181      	movs	r1, #129	; 0x81
 800488c:	6878      	ldr	r0, [r7, #4]
 800488e:	f001 fec8 	bl	8006622 <USBD_LL_Transmit>

    ret = USBD_OK;
 8004892:	2300      	movs	r3, #0
 8004894:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8004896:	7bfb      	ldrb	r3, [r7, #15]
}
 8004898:	4618      	mov	r0, r3
 800489a:	3710      	adds	r7, #16
 800489c:	46bd      	mov	sp, r7
 800489e:	bd80      	pop	{r7, pc}

080048a0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80048a0:	b580      	push	{r7, lr}
 80048a2:	b084      	sub	sp, #16
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80048ae:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d101      	bne.n	80048be <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 80048ba:	2303      	movs	r3, #3
 80048bc:	e016      	b.n	80048ec <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	7c1b      	ldrb	r3, [r3, #16]
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d109      	bne.n	80048da <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80048cc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80048d0:	2101      	movs	r1, #1
 80048d2:	6878      	ldr	r0, [r7, #4]
 80048d4:	f001 fec6 	bl	8006664 <USBD_LL_PrepareReceive>
 80048d8:	e007      	b.n	80048ea <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80048e0:	2340      	movs	r3, #64	; 0x40
 80048e2:	2101      	movs	r1, #1
 80048e4:	6878      	ldr	r0, [r7, #4]
 80048e6:	f001 febd 	bl	8006664 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80048ea:	2300      	movs	r3, #0
}
 80048ec:	4618      	mov	r0, r3
 80048ee:	3710      	adds	r7, #16
 80048f0:	46bd      	mov	sp, r7
 80048f2:	bd80      	pop	{r7, pc}

080048f4 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80048f4:	b580      	push	{r7, lr}
 80048f6:	b086      	sub	sp, #24
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	60f8      	str	r0, [r7, #12]
 80048fc:	60b9      	str	r1, [r7, #8]
 80048fe:	4613      	mov	r3, r2
 8004900:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	2b00      	cmp	r3, #0
 8004906:	d101      	bne.n	800490c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8004908:	2303      	movs	r3, #3
 800490a:	e01f      	b.n	800494c <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	2200      	movs	r2, #0
 8004910:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	2200      	movs	r2, #0
 8004918:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	2200      	movs	r2, #0
 8004920:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8004924:	68bb      	ldr	r3, [r7, #8]
 8004926:	2b00      	cmp	r3, #0
 8004928:	d003      	beq.n	8004932 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	68ba      	ldr	r2, [r7, #8]
 800492e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	2201      	movs	r2, #1
 8004936:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	79fa      	ldrb	r2, [r7, #7]
 800493e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8004940:	68f8      	ldr	r0, [r7, #12]
 8004942:	f001 fd39 	bl	80063b8 <USBD_LL_Init>
 8004946:	4603      	mov	r3, r0
 8004948:	75fb      	strb	r3, [r7, #23]

  return ret;
 800494a:	7dfb      	ldrb	r3, [r7, #23]
}
 800494c:	4618      	mov	r0, r3
 800494e:	3718      	adds	r7, #24
 8004950:	46bd      	mov	sp, r7
 8004952:	bd80      	pop	{r7, pc}

08004954 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8004954:	b580      	push	{r7, lr}
 8004956:	b084      	sub	sp, #16
 8004958:	af00      	add	r7, sp, #0
 800495a:	6078      	str	r0, [r7, #4]
 800495c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800495e:	2300      	movs	r3, #0
 8004960:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8004962:	683b      	ldr	r3, [r7, #0]
 8004964:	2b00      	cmp	r3, #0
 8004966:	d101      	bne.n	800496c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8004968:	2303      	movs	r3, #3
 800496a:	e016      	b.n	800499a <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	683a      	ldr	r2, [r7, #0]
 8004970:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800497a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800497c:	2b00      	cmp	r3, #0
 800497e:	d00b      	beq.n	8004998 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004986:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004988:	f107 020e 	add.w	r2, r7, #14
 800498c:	4610      	mov	r0, r2
 800498e:	4798      	blx	r3
 8004990:	4602      	mov	r2, r0
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8004998:	2300      	movs	r3, #0
}
 800499a:	4618      	mov	r0, r3
 800499c:	3710      	adds	r7, #16
 800499e:	46bd      	mov	sp, r7
 80049a0:	bd80      	pop	{r7, pc}

080049a2 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80049a2:	b580      	push	{r7, lr}
 80049a4:	b082      	sub	sp, #8
 80049a6:	af00      	add	r7, sp, #0
 80049a8:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80049aa:	6878      	ldr	r0, [r7, #4]
 80049ac:	f001 fd50 	bl	8006450 <USBD_LL_Start>
 80049b0:	4603      	mov	r3, r0
}
 80049b2:	4618      	mov	r0, r3
 80049b4:	3708      	adds	r7, #8
 80049b6:	46bd      	mov	sp, r7
 80049b8:	bd80      	pop	{r7, pc}

080049ba <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80049ba:	b480      	push	{r7}
 80049bc:	b083      	sub	sp, #12
 80049be:	af00      	add	r7, sp, #0
 80049c0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80049c2:	2300      	movs	r3, #0
}
 80049c4:	4618      	mov	r0, r3
 80049c6:	370c      	adds	r7, #12
 80049c8:	46bd      	mov	sp, r7
 80049ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ce:	4770      	bx	lr

080049d0 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80049d0:	b580      	push	{r7, lr}
 80049d2:	b084      	sub	sp, #16
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	6078      	str	r0, [r7, #4]
 80049d8:	460b      	mov	r3, r1
 80049da:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80049dc:	2303      	movs	r3, #3
 80049de:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d009      	beq.n	80049fe <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	78fa      	ldrb	r2, [r7, #3]
 80049f4:	4611      	mov	r1, r2
 80049f6:	6878      	ldr	r0, [r7, #4]
 80049f8:	4798      	blx	r3
 80049fa:	4603      	mov	r3, r0
 80049fc:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80049fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a00:	4618      	mov	r0, r3
 8004a02:	3710      	adds	r7, #16
 8004a04:	46bd      	mov	sp, r7
 8004a06:	bd80      	pop	{r7, pc}

08004a08 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004a08:	b580      	push	{r7, lr}
 8004a0a:	b082      	sub	sp, #8
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	6078      	str	r0, [r7, #4]
 8004a10:	460b      	mov	r3, r1
 8004a12:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d007      	beq.n	8004a2e <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004a24:	685b      	ldr	r3, [r3, #4]
 8004a26:	78fa      	ldrb	r2, [r7, #3]
 8004a28:	4611      	mov	r1, r2
 8004a2a:	6878      	ldr	r0, [r7, #4]
 8004a2c:	4798      	blx	r3
  }

  return USBD_OK;
 8004a2e:	2300      	movs	r3, #0
}
 8004a30:	4618      	mov	r0, r3
 8004a32:	3708      	adds	r7, #8
 8004a34:	46bd      	mov	sp, r7
 8004a36:	bd80      	pop	{r7, pc}

08004a38 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	b084      	sub	sp, #16
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
 8004a40:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8004a48:	6839      	ldr	r1, [r7, #0]
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	f000 ff90 	bl	8005970 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	2201      	movs	r2, #1
 8004a54:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8004a5e:	461a      	mov	r2, r3
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8004a6c:	f003 031f 	and.w	r3, r3, #31
 8004a70:	2b02      	cmp	r3, #2
 8004a72:	d01a      	beq.n	8004aaa <USBD_LL_SetupStage+0x72>
 8004a74:	2b02      	cmp	r3, #2
 8004a76:	d822      	bhi.n	8004abe <USBD_LL_SetupStage+0x86>
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d002      	beq.n	8004a82 <USBD_LL_SetupStage+0x4a>
 8004a7c:	2b01      	cmp	r3, #1
 8004a7e:	d00a      	beq.n	8004a96 <USBD_LL_SetupStage+0x5e>
 8004a80:	e01d      	b.n	8004abe <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8004a88:	4619      	mov	r1, r3
 8004a8a:	6878      	ldr	r0, [r7, #4]
 8004a8c:	f000 fa62 	bl	8004f54 <USBD_StdDevReq>
 8004a90:	4603      	mov	r3, r0
 8004a92:	73fb      	strb	r3, [r7, #15]
      break;
 8004a94:	e020      	b.n	8004ad8 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8004a9c:	4619      	mov	r1, r3
 8004a9e:	6878      	ldr	r0, [r7, #4]
 8004aa0:	f000 fac6 	bl	8005030 <USBD_StdItfReq>
 8004aa4:	4603      	mov	r3, r0
 8004aa6:	73fb      	strb	r3, [r7, #15]
      break;
 8004aa8:	e016      	b.n	8004ad8 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8004ab0:	4619      	mov	r1, r3
 8004ab2:	6878      	ldr	r0, [r7, #4]
 8004ab4:	f000 fb05 	bl	80050c2 <USBD_StdEPReq>
 8004ab8:	4603      	mov	r3, r0
 8004aba:	73fb      	strb	r3, [r7, #15]
      break;
 8004abc:	e00c      	b.n	8004ad8 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8004ac4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004ac8:	b2db      	uxtb	r3, r3
 8004aca:	4619      	mov	r1, r3
 8004acc:	6878      	ldr	r0, [r7, #4]
 8004ace:	f001 fd1f 	bl	8006510 <USBD_LL_StallEP>
 8004ad2:	4603      	mov	r3, r0
 8004ad4:	73fb      	strb	r3, [r7, #15]
      break;
 8004ad6:	bf00      	nop
  }

  return ret;
 8004ad8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ada:	4618      	mov	r0, r3
 8004adc:	3710      	adds	r7, #16
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	bd80      	pop	{r7, pc}

08004ae2 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8004ae2:	b580      	push	{r7, lr}
 8004ae4:	b086      	sub	sp, #24
 8004ae6:	af00      	add	r7, sp, #0
 8004ae8:	60f8      	str	r0, [r7, #12]
 8004aea:	460b      	mov	r3, r1
 8004aec:	607a      	str	r2, [r7, #4]
 8004aee:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8004af0:	7afb      	ldrb	r3, [r7, #11]
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d138      	bne.n	8004b68 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8004afc:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8004b04:	2b03      	cmp	r3, #3
 8004b06:	d14a      	bne.n	8004b9e <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8004b08:	693b      	ldr	r3, [r7, #16]
 8004b0a:	689a      	ldr	r2, [r3, #8]
 8004b0c:	693b      	ldr	r3, [r7, #16]
 8004b0e:	68db      	ldr	r3, [r3, #12]
 8004b10:	429a      	cmp	r2, r3
 8004b12:	d913      	bls.n	8004b3c <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8004b14:	693b      	ldr	r3, [r7, #16]
 8004b16:	689a      	ldr	r2, [r3, #8]
 8004b18:	693b      	ldr	r3, [r7, #16]
 8004b1a:	68db      	ldr	r3, [r3, #12]
 8004b1c:	1ad2      	subs	r2, r2, r3
 8004b1e:	693b      	ldr	r3, [r7, #16]
 8004b20:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8004b22:	693b      	ldr	r3, [r7, #16]
 8004b24:	68da      	ldr	r2, [r3, #12]
 8004b26:	693b      	ldr	r3, [r7, #16]
 8004b28:	689b      	ldr	r3, [r3, #8]
 8004b2a:	4293      	cmp	r3, r2
 8004b2c:	bf28      	it	cs
 8004b2e:	4613      	movcs	r3, r2
 8004b30:	461a      	mov	r2, r3
 8004b32:	6879      	ldr	r1, [r7, #4]
 8004b34:	68f8      	ldr	r0, [r7, #12]
 8004b36:	f001 f80f 	bl	8005b58 <USBD_CtlContinueRx>
 8004b3a:	e030      	b.n	8004b9e <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004b42:	b2db      	uxtb	r3, r3
 8004b44:	2b03      	cmp	r3, #3
 8004b46:	d10b      	bne.n	8004b60 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004b4e:	691b      	ldr	r3, [r3, #16]
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d005      	beq.n	8004b60 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004b5a:	691b      	ldr	r3, [r3, #16]
 8004b5c:	68f8      	ldr	r0, [r7, #12]
 8004b5e:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8004b60:	68f8      	ldr	r0, [r7, #12]
 8004b62:	f001 f80a 	bl	8005b7a <USBD_CtlSendStatus>
 8004b66:	e01a      	b.n	8004b9e <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004b6e:	b2db      	uxtb	r3, r3
 8004b70:	2b03      	cmp	r3, #3
 8004b72:	d114      	bne.n	8004b9e <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004b7a:	699b      	ldr	r3, [r3, #24]
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d00e      	beq.n	8004b9e <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004b86:	699b      	ldr	r3, [r3, #24]
 8004b88:	7afa      	ldrb	r2, [r7, #11]
 8004b8a:	4611      	mov	r1, r2
 8004b8c:	68f8      	ldr	r0, [r7, #12]
 8004b8e:	4798      	blx	r3
 8004b90:	4603      	mov	r3, r0
 8004b92:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8004b94:	7dfb      	ldrb	r3, [r7, #23]
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d001      	beq.n	8004b9e <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8004b9a:	7dfb      	ldrb	r3, [r7, #23]
 8004b9c:	e000      	b.n	8004ba0 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8004b9e:	2300      	movs	r3, #0
}
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	3718      	adds	r7, #24
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	bd80      	pop	{r7, pc}

08004ba8 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8004ba8:	b580      	push	{r7, lr}
 8004baa:	b086      	sub	sp, #24
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	60f8      	str	r0, [r7, #12]
 8004bb0:	460b      	mov	r3, r1
 8004bb2:	607a      	str	r2, [r7, #4]
 8004bb4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8004bb6:	7afb      	ldrb	r3, [r7, #11]
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d16b      	bne.n	8004c94 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	3314      	adds	r3, #20
 8004bc0:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8004bc8:	2b02      	cmp	r3, #2
 8004bca:	d156      	bne.n	8004c7a <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8004bcc:	693b      	ldr	r3, [r7, #16]
 8004bce:	689a      	ldr	r2, [r3, #8]
 8004bd0:	693b      	ldr	r3, [r7, #16]
 8004bd2:	68db      	ldr	r3, [r3, #12]
 8004bd4:	429a      	cmp	r2, r3
 8004bd6:	d914      	bls.n	8004c02 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8004bd8:	693b      	ldr	r3, [r7, #16]
 8004bda:	689a      	ldr	r2, [r3, #8]
 8004bdc:	693b      	ldr	r3, [r7, #16]
 8004bde:	68db      	ldr	r3, [r3, #12]
 8004be0:	1ad2      	subs	r2, r2, r3
 8004be2:	693b      	ldr	r3, [r7, #16]
 8004be4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8004be6:	693b      	ldr	r3, [r7, #16]
 8004be8:	689b      	ldr	r3, [r3, #8]
 8004bea:	461a      	mov	r2, r3
 8004bec:	6879      	ldr	r1, [r7, #4]
 8004bee:	68f8      	ldr	r0, [r7, #12]
 8004bf0:	f000 ff84 	bl	8005afc <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8004bf4:	2300      	movs	r3, #0
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	2100      	movs	r1, #0
 8004bfa:	68f8      	ldr	r0, [r7, #12]
 8004bfc:	f001 fd32 	bl	8006664 <USBD_LL_PrepareReceive>
 8004c00:	e03b      	b.n	8004c7a <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8004c02:	693b      	ldr	r3, [r7, #16]
 8004c04:	68da      	ldr	r2, [r3, #12]
 8004c06:	693b      	ldr	r3, [r7, #16]
 8004c08:	689b      	ldr	r3, [r3, #8]
 8004c0a:	429a      	cmp	r2, r3
 8004c0c:	d11c      	bne.n	8004c48 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8004c0e:	693b      	ldr	r3, [r7, #16]
 8004c10:	685a      	ldr	r2, [r3, #4]
 8004c12:	693b      	ldr	r3, [r7, #16]
 8004c14:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8004c16:	429a      	cmp	r2, r3
 8004c18:	d316      	bcc.n	8004c48 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8004c1a:	693b      	ldr	r3, [r7, #16]
 8004c1c:	685a      	ldr	r2, [r3, #4]
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8004c24:	429a      	cmp	r2, r3
 8004c26:	d20f      	bcs.n	8004c48 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8004c28:	2200      	movs	r2, #0
 8004c2a:	2100      	movs	r1, #0
 8004c2c:	68f8      	ldr	r0, [r7, #12]
 8004c2e:	f000 ff65 	bl	8005afc <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	2200      	movs	r2, #0
 8004c36:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8004c3a:	2300      	movs	r3, #0
 8004c3c:	2200      	movs	r2, #0
 8004c3e:	2100      	movs	r1, #0
 8004c40:	68f8      	ldr	r0, [r7, #12]
 8004c42:	f001 fd0f 	bl	8006664 <USBD_LL_PrepareReceive>
 8004c46:	e018      	b.n	8004c7a <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004c4e:	b2db      	uxtb	r3, r3
 8004c50:	2b03      	cmp	r3, #3
 8004c52:	d10b      	bne.n	8004c6c <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004c5a:	68db      	ldr	r3, [r3, #12]
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d005      	beq.n	8004c6c <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004c66:	68db      	ldr	r3, [r3, #12]
 8004c68:	68f8      	ldr	r0, [r7, #12]
 8004c6a:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8004c6c:	2180      	movs	r1, #128	; 0x80
 8004c6e:	68f8      	ldr	r0, [r7, #12]
 8004c70:	f001 fc4e 	bl	8006510 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8004c74:	68f8      	ldr	r0, [r7, #12]
 8004c76:	f000 ff93 	bl	8005ba0 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8004c80:	2b01      	cmp	r3, #1
 8004c82:	d122      	bne.n	8004cca <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8004c84:	68f8      	ldr	r0, [r7, #12]
 8004c86:	f7ff fe98 	bl	80049ba <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	2200      	movs	r2, #0
 8004c8e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8004c92:	e01a      	b.n	8004cca <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004c9a:	b2db      	uxtb	r3, r3
 8004c9c:	2b03      	cmp	r3, #3
 8004c9e:	d114      	bne.n	8004cca <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004ca6:	695b      	ldr	r3, [r3, #20]
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d00e      	beq.n	8004cca <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004cb2:	695b      	ldr	r3, [r3, #20]
 8004cb4:	7afa      	ldrb	r2, [r7, #11]
 8004cb6:	4611      	mov	r1, r2
 8004cb8:	68f8      	ldr	r0, [r7, #12]
 8004cba:	4798      	blx	r3
 8004cbc:	4603      	mov	r3, r0
 8004cbe:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8004cc0:	7dfb      	ldrb	r3, [r7, #23]
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d001      	beq.n	8004cca <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8004cc6:	7dfb      	ldrb	r3, [r7, #23]
 8004cc8:	e000      	b.n	8004ccc <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8004cca:	2300      	movs	r3, #0
}
 8004ccc:	4618      	mov	r0, r3
 8004cce:	3718      	adds	r7, #24
 8004cd0:	46bd      	mov	sp, r7
 8004cd2:	bd80      	pop	{r7, pc}

08004cd4 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8004cd4:	b580      	push	{r7, lr}
 8004cd6:	b082      	sub	sp, #8
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	2201      	movs	r2, #1
 8004ce0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2200      	movs	r2, #0
 8004cf0:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d101      	bne.n	8004d08 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8004d04:	2303      	movs	r3, #3
 8004d06:	e02f      	b.n	8004d68 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d00f      	beq.n	8004d32 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004d18:	685b      	ldr	r3, [r3, #4]
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d009      	beq.n	8004d32 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004d24:	685b      	ldr	r3, [r3, #4]
 8004d26:	687a      	ldr	r2, [r7, #4]
 8004d28:	6852      	ldr	r2, [r2, #4]
 8004d2a:	b2d2      	uxtb	r2, r2
 8004d2c:	4611      	mov	r1, r2
 8004d2e:	6878      	ldr	r0, [r7, #4]
 8004d30:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8004d32:	2340      	movs	r3, #64	; 0x40
 8004d34:	2200      	movs	r2, #0
 8004d36:	2100      	movs	r1, #0
 8004d38:	6878      	ldr	r0, [r7, #4]
 8004d3a:	f001 fba4 	bl	8006486 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	2201      	movs	r2, #1
 8004d42:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	2240      	movs	r2, #64	; 0x40
 8004d4a:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8004d4e:	2340      	movs	r3, #64	; 0x40
 8004d50:	2200      	movs	r2, #0
 8004d52:	2180      	movs	r1, #128	; 0x80
 8004d54:	6878      	ldr	r0, [r7, #4]
 8004d56:	f001 fb96 	bl	8006486 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	2201      	movs	r2, #1
 8004d5e:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2240      	movs	r2, #64	; 0x40
 8004d64:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8004d66:	2300      	movs	r3, #0
}
 8004d68:	4618      	mov	r0, r3
 8004d6a:	3708      	adds	r7, #8
 8004d6c:	46bd      	mov	sp, r7
 8004d6e:	bd80      	pop	{r7, pc}

08004d70 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8004d70:	b480      	push	{r7}
 8004d72:	b083      	sub	sp, #12
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	6078      	str	r0, [r7, #4]
 8004d78:	460b      	mov	r3, r1
 8004d7a:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	78fa      	ldrb	r2, [r7, #3]
 8004d80:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8004d82:	2300      	movs	r3, #0
}
 8004d84:	4618      	mov	r0, r3
 8004d86:	370c      	adds	r7, #12
 8004d88:	46bd      	mov	sp, r7
 8004d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8e:	4770      	bx	lr

08004d90 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8004d90:	b480      	push	{r7}
 8004d92:	b083      	sub	sp, #12
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004d9e:	b2da      	uxtb	r2, r3
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	2204      	movs	r2, #4
 8004daa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8004dae:	2300      	movs	r3, #0
}
 8004db0:	4618      	mov	r0, r3
 8004db2:	370c      	adds	r7, #12
 8004db4:	46bd      	mov	sp, r7
 8004db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dba:	4770      	bx	lr

08004dbc <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8004dbc:	b480      	push	{r7}
 8004dbe:	b083      	sub	sp, #12
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004dca:	b2db      	uxtb	r3, r3
 8004dcc:	2b04      	cmp	r3, #4
 8004dce:	d106      	bne.n	8004dde <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8004dd6:	b2da      	uxtb	r2, r3
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8004dde:	2300      	movs	r3, #0
}
 8004de0:	4618      	mov	r0, r3
 8004de2:	370c      	adds	r7, #12
 8004de4:	46bd      	mov	sp, r7
 8004de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dea:	4770      	bx	lr

08004dec <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8004dec:	b580      	push	{r7, lr}
 8004dee:	b082      	sub	sp, #8
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d101      	bne.n	8004e02 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8004dfe:	2303      	movs	r3, #3
 8004e00:	e012      	b.n	8004e28 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004e08:	b2db      	uxtb	r3, r3
 8004e0a:	2b03      	cmp	r3, #3
 8004e0c:	d10b      	bne.n	8004e26 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004e14:	69db      	ldr	r3, [r3, #28]
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d005      	beq.n	8004e26 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004e20:	69db      	ldr	r3, [r3, #28]
 8004e22:	6878      	ldr	r0, [r7, #4]
 8004e24:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8004e26:	2300      	movs	r3, #0
}
 8004e28:	4618      	mov	r0, r3
 8004e2a:	3708      	adds	r7, #8
 8004e2c:	46bd      	mov	sp, r7
 8004e2e:	bd80      	pop	{r7, pc}

08004e30 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8004e30:	b580      	push	{r7, lr}
 8004e32:	b082      	sub	sp, #8
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	6078      	str	r0, [r7, #4]
 8004e38:	460b      	mov	r3, r1
 8004e3a:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d101      	bne.n	8004e4a <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 8004e46:	2303      	movs	r3, #3
 8004e48:	e014      	b.n	8004e74 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004e50:	b2db      	uxtb	r3, r3
 8004e52:	2b03      	cmp	r3, #3
 8004e54:	d10d      	bne.n	8004e72 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004e5c:	6a1b      	ldr	r3, [r3, #32]
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d007      	beq.n	8004e72 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004e68:	6a1b      	ldr	r3, [r3, #32]
 8004e6a:	78fa      	ldrb	r2, [r7, #3]
 8004e6c:	4611      	mov	r1, r2
 8004e6e:	6878      	ldr	r0, [r7, #4]
 8004e70:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8004e72:	2300      	movs	r3, #0
}
 8004e74:	4618      	mov	r0, r3
 8004e76:	3708      	adds	r7, #8
 8004e78:	46bd      	mov	sp, r7
 8004e7a:	bd80      	pop	{r7, pc}

08004e7c <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8004e7c:	b580      	push	{r7, lr}
 8004e7e:	b082      	sub	sp, #8
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]
 8004e84:	460b      	mov	r3, r1
 8004e86:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d101      	bne.n	8004e96 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 8004e92:	2303      	movs	r3, #3
 8004e94:	e014      	b.n	8004ec0 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004e9c:	b2db      	uxtb	r3, r3
 8004e9e:	2b03      	cmp	r3, #3
 8004ea0:	d10d      	bne.n	8004ebe <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004ea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d007      	beq.n	8004ebe <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004eb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eb6:	78fa      	ldrb	r2, [r7, #3]
 8004eb8:	4611      	mov	r1, r2
 8004eba:	6878      	ldr	r0, [r7, #4]
 8004ebc:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8004ebe:	2300      	movs	r3, #0
}
 8004ec0:	4618      	mov	r0, r3
 8004ec2:	3708      	adds	r7, #8
 8004ec4:	46bd      	mov	sp, r7
 8004ec6:	bd80      	pop	{r7, pc}

08004ec8 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8004ec8:	b480      	push	{r7}
 8004eca:	b083      	sub	sp, #12
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8004ed0:	2300      	movs	r3, #0
}
 8004ed2:	4618      	mov	r0, r3
 8004ed4:	370c      	adds	r7, #12
 8004ed6:	46bd      	mov	sp, r7
 8004ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004edc:	4770      	bx	lr

08004ede <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8004ede:	b580      	push	{r7, lr}
 8004ee0:	b082      	sub	sp, #8
 8004ee2:	af00      	add	r7, sp, #0
 8004ee4:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	2201      	movs	r2, #1
 8004eea:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d009      	beq.n	8004f0c <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004efe:	685b      	ldr	r3, [r3, #4]
 8004f00:	687a      	ldr	r2, [r7, #4]
 8004f02:	6852      	ldr	r2, [r2, #4]
 8004f04:	b2d2      	uxtb	r2, r2
 8004f06:	4611      	mov	r1, r2
 8004f08:	6878      	ldr	r0, [r7, #4]
 8004f0a:	4798      	blx	r3
  }

  return USBD_OK;
 8004f0c:	2300      	movs	r3, #0
}
 8004f0e:	4618      	mov	r0, r3
 8004f10:	3708      	adds	r7, #8
 8004f12:	46bd      	mov	sp, r7
 8004f14:	bd80      	pop	{r7, pc}

08004f16 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8004f16:	b480      	push	{r7}
 8004f18:	b087      	sub	sp, #28
 8004f1a:	af00      	add	r7, sp, #0
 8004f1c:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8004f22:	697b      	ldr	r3, [r7, #20]
 8004f24:	781b      	ldrb	r3, [r3, #0]
 8004f26:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8004f28:	697b      	ldr	r3, [r7, #20]
 8004f2a:	3301      	adds	r3, #1
 8004f2c:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8004f2e:	697b      	ldr	r3, [r7, #20]
 8004f30:	781b      	ldrb	r3, [r3, #0]
 8004f32:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8004f34:	8a3b      	ldrh	r3, [r7, #16]
 8004f36:	021b      	lsls	r3, r3, #8
 8004f38:	b21a      	sxth	r2, r3
 8004f3a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8004f3e:	4313      	orrs	r3, r2
 8004f40:	b21b      	sxth	r3, r3
 8004f42:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8004f44:	89fb      	ldrh	r3, [r7, #14]
}
 8004f46:	4618      	mov	r0, r3
 8004f48:	371c      	adds	r7, #28
 8004f4a:	46bd      	mov	sp, r7
 8004f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f50:	4770      	bx	lr
	...

08004f54 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8004f54:	b580      	push	{r7, lr}
 8004f56:	b084      	sub	sp, #16
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	6078      	str	r0, [r7, #4]
 8004f5c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8004f5e:	2300      	movs	r3, #0
 8004f60:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004f62:	683b      	ldr	r3, [r7, #0]
 8004f64:	781b      	ldrb	r3, [r3, #0]
 8004f66:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004f6a:	2b40      	cmp	r3, #64	; 0x40
 8004f6c:	d005      	beq.n	8004f7a <USBD_StdDevReq+0x26>
 8004f6e:	2b40      	cmp	r3, #64	; 0x40
 8004f70:	d853      	bhi.n	800501a <USBD_StdDevReq+0xc6>
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d00b      	beq.n	8004f8e <USBD_StdDevReq+0x3a>
 8004f76:	2b20      	cmp	r3, #32
 8004f78:	d14f      	bne.n	800501a <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004f80:	689b      	ldr	r3, [r3, #8]
 8004f82:	6839      	ldr	r1, [r7, #0]
 8004f84:	6878      	ldr	r0, [r7, #4]
 8004f86:	4798      	blx	r3
 8004f88:	4603      	mov	r3, r0
 8004f8a:	73fb      	strb	r3, [r7, #15]
      break;
 8004f8c:	e04a      	b.n	8005024 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8004f8e:	683b      	ldr	r3, [r7, #0]
 8004f90:	785b      	ldrb	r3, [r3, #1]
 8004f92:	2b09      	cmp	r3, #9
 8004f94:	d83b      	bhi.n	800500e <USBD_StdDevReq+0xba>
 8004f96:	a201      	add	r2, pc, #4	; (adr r2, 8004f9c <USBD_StdDevReq+0x48>)
 8004f98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f9c:	08004ff1 	.word	0x08004ff1
 8004fa0:	08005005 	.word	0x08005005
 8004fa4:	0800500f 	.word	0x0800500f
 8004fa8:	08004ffb 	.word	0x08004ffb
 8004fac:	0800500f 	.word	0x0800500f
 8004fb0:	08004fcf 	.word	0x08004fcf
 8004fb4:	08004fc5 	.word	0x08004fc5
 8004fb8:	0800500f 	.word	0x0800500f
 8004fbc:	08004fe7 	.word	0x08004fe7
 8004fc0:	08004fd9 	.word	0x08004fd9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8004fc4:	6839      	ldr	r1, [r7, #0]
 8004fc6:	6878      	ldr	r0, [r7, #4]
 8004fc8:	f000 f9de 	bl	8005388 <USBD_GetDescriptor>
          break;
 8004fcc:	e024      	b.n	8005018 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8004fce:	6839      	ldr	r1, [r7, #0]
 8004fd0:	6878      	ldr	r0, [r7, #4]
 8004fd2:	f000 fb43 	bl	800565c <USBD_SetAddress>
          break;
 8004fd6:	e01f      	b.n	8005018 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8004fd8:	6839      	ldr	r1, [r7, #0]
 8004fda:	6878      	ldr	r0, [r7, #4]
 8004fdc:	f000 fb82 	bl	80056e4 <USBD_SetConfig>
 8004fe0:	4603      	mov	r3, r0
 8004fe2:	73fb      	strb	r3, [r7, #15]
          break;
 8004fe4:	e018      	b.n	8005018 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8004fe6:	6839      	ldr	r1, [r7, #0]
 8004fe8:	6878      	ldr	r0, [r7, #4]
 8004fea:	f000 fc21 	bl	8005830 <USBD_GetConfig>
          break;
 8004fee:	e013      	b.n	8005018 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8004ff0:	6839      	ldr	r1, [r7, #0]
 8004ff2:	6878      	ldr	r0, [r7, #4]
 8004ff4:	f000 fc52 	bl	800589c <USBD_GetStatus>
          break;
 8004ff8:	e00e      	b.n	8005018 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8004ffa:	6839      	ldr	r1, [r7, #0]
 8004ffc:	6878      	ldr	r0, [r7, #4]
 8004ffe:	f000 fc81 	bl	8005904 <USBD_SetFeature>
          break;
 8005002:	e009      	b.n	8005018 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8005004:	6839      	ldr	r1, [r7, #0]
 8005006:	6878      	ldr	r0, [r7, #4]
 8005008:	f000 fc90 	bl	800592c <USBD_ClrFeature>
          break;
 800500c:	e004      	b.n	8005018 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800500e:	6839      	ldr	r1, [r7, #0]
 8005010:	6878      	ldr	r0, [r7, #4]
 8005012:	f000 fce7 	bl	80059e4 <USBD_CtlError>
          break;
 8005016:	bf00      	nop
      }
      break;
 8005018:	e004      	b.n	8005024 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800501a:	6839      	ldr	r1, [r7, #0]
 800501c:	6878      	ldr	r0, [r7, #4]
 800501e:	f000 fce1 	bl	80059e4 <USBD_CtlError>
      break;
 8005022:	bf00      	nop
  }

  return ret;
 8005024:	7bfb      	ldrb	r3, [r7, #15]
}
 8005026:	4618      	mov	r0, r3
 8005028:	3710      	adds	r7, #16
 800502a:	46bd      	mov	sp, r7
 800502c:	bd80      	pop	{r7, pc}
 800502e:	bf00      	nop

08005030 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005030:	b580      	push	{r7, lr}
 8005032:	b084      	sub	sp, #16
 8005034:	af00      	add	r7, sp, #0
 8005036:	6078      	str	r0, [r7, #4]
 8005038:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800503a:	2300      	movs	r3, #0
 800503c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800503e:	683b      	ldr	r3, [r7, #0]
 8005040:	781b      	ldrb	r3, [r3, #0]
 8005042:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005046:	2b40      	cmp	r3, #64	; 0x40
 8005048:	d005      	beq.n	8005056 <USBD_StdItfReq+0x26>
 800504a:	2b40      	cmp	r3, #64	; 0x40
 800504c:	d82f      	bhi.n	80050ae <USBD_StdItfReq+0x7e>
 800504e:	2b00      	cmp	r3, #0
 8005050:	d001      	beq.n	8005056 <USBD_StdItfReq+0x26>
 8005052:	2b20      	cmp	r3, #32
 8005054:	d12b      	bne.n	80050ae <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800505c:	b2db      	uxtb	r3, r3
 800505e:	3b01      	subs	r3, #1
 8005060:	2b02      	cmp	r3, #2
 8005062:	d81d      	bhi.n	80050a0 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	889b      	ldrh	r3, [r3, #4]
 8005068:	b2db      	uxtb	r3, r3
 800506a:	2b01      	cmp	r3, #1
 800506c:	d813      	bhi.n	8005096 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005074:	689b      	ldr	r3, [r3, #8]
 8005076:	6839      	ldr	r1, [r7, #0]
 8005078:	6878      	ldr	r0, [r7, #4]
 800507a:	4798      	blx	r3
 800507c:	4603      	mov	r3, r0
 800507e:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8005080:	683b      	ldr	r3, [r7, #0]
 8005082:	88db      	ldrh	r3, [r3, #6]
 8005084:	2b00      	cmp	r3, #0
 8005086:	d110      	bne.n	80050aa <USBD_StdItfReq+0x7a>
 8005088:	7bfb      	ldrb	r3, [r7, #15]
 800508a:	2b00      	cmp	r3, #0
 800508c:	d10d      	bne.n	80050aa <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800508e:	6878      	ldr	r0, [r7, #4]
 8005090:	f000 fd73 	bl	8005b7a <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8005094:	e009      	b.n	80050aa <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8005096:	6839      	ldr	r1, [r7, #0]
 8005098:	6878      	ldr	r0, [r7, #4]
 800509a:	f000 fca3 	bl	80059e4 <USBD_CtlError>
          break;
 800509e:	e004      	b.n	80050aa <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 80050a0:	6839      	ldr	r1, [r7, #0]
 80050a2:	6878      	ldr	r0, [r7, #4]
 80050a4:	f000 fc9e 	bl	80059e4 <USBD_CtlError>
          break;
 80050a8:	e000      	b.n	80050ac <USBD_StdItfReq+0x7c>
          break;
 80050aa:	bf00      	nop
      }
      break;
 80050ac:	e004      	b.n	80050b8 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 80050ae:	6839      	ldr	r1, [r7, #0]
 80050b0:	6878      	ldr	r0, [r7, #4]
 80050b2:	f000 fc97 	bl	80059e4 <USBD_CtlError>
      break;
 80050b6:	bf00      	nop
  }

  return ret;
 80050b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80050ba:	4618      	mov	r0, r3
 80050bc:	3710      	adds	r7, #16
 80050be:	46bd      	mov	sp, r7
 80050c0:	bd80      	pop	{r7, pc}

080050c2 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80050c2:	b580      	push	{r7, lr}
 80050c4:	b084      	sub	sp, #16
 80050c6:	af00      	add	r7, sp, #0
 80050c8:	6078      	str	r0, [r7, #4]
 80050ca:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80050cc:	2300      	movs	r3, #0
 80050ce:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 80050d0:	683b      	ldr	r3, [r7, #0]
 80050d2:	889b      	ldrh	r3, [r3, #4]
 80050d4:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80050d6:	683b      	ldr	r3, [r7, #0]
 80050d8:	781b      	ldrb	r3, [r3, #0]
 80050da:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80050de:	2b40      	cmp	r3, #64	; 0x40
 80050e0:	d007      	beq.n	80050f2 <USBD_StdEPReq+0x30>
 80050e2:	2b40      	cmp	r3, #64	; 0x40
 80050e4:	f200 8145 	bhi.w	8005372 <USBD_StdEPReq+0x2b0>
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d00c      	beq.n	8005106 <USBD_StdEPReq+0x44>
 80050ec:	2b20      	cmp	r3, #32
 80050ee:	f040 8140 	bne.w	8005372 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80050f8:	689b      	ldr	r3, [r3, #8]
 80050fa:	6839      	ldr	r1, [r7, #0]
 80050fc:	6878      	ldr	r0, [r7, #4]
 80050fe:	4798      	blx	r3
 8005100:	4603      	mov	r3, r0
 8005102:	73fb      	strb	r3, [r7, #15]
      break;
 8005104:	e13a      	b.n	800537c <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005106:	683b      	ldr	r3, [r7, #0]
 8005108:	785b      	ldrb	r3, [r3, #1]
 800510a:	2b03      	cmp	r3, #3
 800510c:	d007      	beq.n	800511e <USBD_StdEPReq+0x5c>
 800510e:	2b03      	cmp	r3, #3
 8005110:	f300 8129 	bgt.w	8005366 <USBD_StdEPReq+0x2a4>
 8005114:	2b00      	cmp	r3, #0
 8005116:	d07f      	beq.n	8005218 <USBD_StdEPReq+0x156>
 8005118:	2b01      	cmp	r3, #1
 800511a:	d03c      	beq.n	8005196 <USBD_StdEPReq+0xd4>
 800511c:	e123      	b.n	8005366 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005124:	b2db      	uxtb	r3, r3
 8005126:	2b02      	cmp	r3, #2
 8005128:	d002      	beq.n	8005130 <USBD_StdEPReq+0x6e>
 800512a:	2b03      	cmp	r3, #3
 800512c:	d016      	beq.n	800515c <USBD_StdEPReq+0x9a>
 800512e:	e02c      	b.n	800518a <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005130:	7bbb      	ldrb	r3, [r7, #14]
 8005132:	2b00      	cmp	r3, #0
 8005134:	d00d      	beq.n	8005152 <USBD_StdEPReq+0x90>
 8005136:	7bbb      	ldrb	r3, [r7, #14]
 8005138:	2b80      	cmp	r3, #128	; 0x80
 800513a:	d00a      	beq.n	8005152 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800513c:	7bbb      	ldrb	r3, [r7, #14]
 800513e:	4619      	mov	r1, r3
 8005140:	6878      	ldr	r0, [r7, #4]
 8005142:	f001 f9e5 	bl	8006510 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8005146:	2180      	movs	r1, #128	; 0x80
 8005148:	6878      	ldr	r0, [r7, #4]
 800514a:	f001 f9e1 	bl	8006510 <USBD_LL_StallEP>
 800514e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005150:	e020      	b.n	8005194 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8005152:	6839      	ldr	r1, [r7, #0]
 8005154:	6878      	ldr	r0, [r7, #4]
 8005156:	f000 fc45 	bl	80059e4 <USBD_CtlError>
              break;
 800515a:	e01b      	b.n	8005194 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800515c:	683b      	ldr	r3, [r7, #0]
 800515e:	885b      	ldrh	r3, [r3, #2]
 8005160:	2b00      	cmp	r3, #0
 8005162:	d10e      	bne.n	8005182 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8005164:	7bbb      	ldrb	r3, [r7, #14]
 8005166:	2b00      	cmp	r3, #0
 8005168:	d00b      	beq.n	8005182 <USBD_StdEPReq+0xc0>
 800516a:	7bbb      	ldrb	r3, [r7, #14]
 800516c:	2b80      	cmp	r3, #128	; 0x80
 800516e:	d008      	beq.n	8005182 <USBD_StdEPReq+0xc0>
 8005170:	683b      	ldr	r3, [r7, #0]
 8005172:	88db      	ldrh	r3, [r3, #6]
 8005174:	2b00      	cmp	r3, #0
 8005176:	d104      	bne.n	8005182 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8005178:	7bbb      	ldrb	r3, [r7, #14]
 800517a:	4619      	mov	r1, r3
 800517c:	6878      	ldr	r0, [r7, #4]
 800517e:	f001 f9c7 	bl	8006510 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8005182:	6878      	ldr	r0, [r7, #4]
 8005184:	f000 fcf9 	bl	8005b7a <USBD_CtlSendStatus>

              break;
 8005188:	e004      	b.n	8005194 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800518a:	6839      	ldr	r1, [r7, #0]
 800518c:	6878      	ldr	r0, [r7, #4]
 800518e:	f000 fc29 	bl	80059e4 <USBD_CtlError>
              break;
 8005192:	bf00      	nop
          }
          break;
 8005194:	e0ec      	b.n	8005370 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800519c:	b2db      	uxtb	r3, r3
 800519e:	2b02      	cmp	r3, #2
 80051a0:	d002      	beq.n	80051a8 <USBD_StdEPReq+0xe6>
 80051a2:	2b03      	cmp	r3, #3
 80051a4:	d016      	beq.n	80051d4 <USBD_StdEPReq+0x112>
 80051a6:	e030      	b.n	800520a <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80051a8:	7bbb      	ldrb	r3, [r7, #14]
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d00d      	beq.n	80051ca <USBD_StdEPReq+0x108>
 80051ae:	7bbb      	ldrb	r3, [r7, #14]
 80051b0:	2b80      	cmp	r3, #128	; 0x80
 80051b2:	d00a      	beq.n	80051ca <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80051b4:	7bbb      	ldrb	r3, [r7, #14]
 80051b6:	4619      	mov	r1, r3
 80051b8:	6878      	ldr	r0, [r7, #4]
 80051ba:	f001 f9a9 	bl	8006510 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80051be:	2180      	movs	r1, #128	; 0x80
 80051c0:	6878      	ldr	r0, [r7, #4]
 80051c2:	f001 f9a5 	bl	8006510 <USBD_LL_StallEP>
 80051c6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80051c8:	e025      	b.n	8005216 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 80051ca:	6839      	ldr	r1, [r7, #0]
 80051cc:	6878      	ldr	r0, [r7, #4]
 80051ce:	f000 fc09 	bl	80059e4 <USBD_CtlError>
              break;
 80051d2:	e020      	b.n	8005216 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80051d4:	683b      	ldr	r3, [r7, #0]
 80051d6:	885b      	ldrh	r3, [r3, #2]
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d11b      	bne.n	8005214 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80051dc:	7bbb      	ldrb	r3, [r7, #14]
 80051de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d004      	beq.n	80051f0 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80051e6:	7bbb      	ldrb	r3, [r7, #14]
 80051e8:	4619      	mov	r1, r3
 80051ea:	6878      	ldr	r0, [r7, #4]
 80051ec:	f001 f9af 	bl	800654e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80051f0:	6878      	ldr	r0, [r7, #4]
 80051f2:	f000 fcc2 	bl	8005b7a <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80051fc:	689b      	ldr	r3, [r3, #8]
 80051fe:	6839      	ldr	r1, [r7, #0]
 8005200:	6878      	ldr	r0, [r7, #4]
 8005202:	4798      	blx	r3
 8005204:	4603      	mov	r3, r0
 8005206:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8005208:	e004      	b.n	8005214 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800520a:	6839      	ldr	r1, [r7, #0]
 800520c:	6878      	ldr	r0, [r7, #4]
 800520e:	f000 fbe9 	bl	80059e4 <USBD_CtlError>
              break;
 8005212:	e000      	b.n	8005216 <USBD_StdEPReq+0x154>
              break;
 8005214:	bf00      	nop
          }
          break;
 8005216:	e0ab      	b.n	8005370 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800521e:	b2db      	uxtb	r3, r3
 8005220:	2b02      	cmp	r3, #2
 8005222:	d002      	beq.n	800522a <USBD_StdEPReq+0x168>
 8005224:	2b03      	cmp	r3, #3
 8005226:	d032      	beq.n	800528e <USBD_StdEPReq+0x1cc>
 8005228:	e097      	b.n	800535a <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800522a:	7bbb      	ldrb	r3, [r7, #14]
 800522c:	2b00      	cmp	r3, #0
 800522e:	d007      	beq.n	8005240 <USBD_StdEPReq+0x17e>
 8005230:	7bbb      	ldrb	r3, [r7, #14]
 8005232:	2b80      	cmp	r3, #128	; 0x80
 8005234:	d004      	beq.n	8005240 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8005236:	6839      	ldr	r1, [r7, #0]
 8005238:	6878      	ldr	r0, [r7, #4]
 800523a:	f000 fbd3 	bl	80059e4 <USBD_CtlError>
                break;
 800523e:	e091      	b.n	8005364 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005240:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005244:	2b00      	cmp	r3, #0
 8005246:	da0b      	bge.n	8005260 <USBD_StdEPReq+0x19e>
 8005248:	7bbb      	ldrb	r3, [r7, #14]
 800524a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800524e:	4613      	mov	r3, r2
 8005250:	009b      	lsls	r3, r3, #2
 8005252:	4413      	add	r3, r2
 8005254:	009b      	lsls	r3, r3, #2
 8005256:	3310      	adds	r3, #16
 8005258:	687a      	ldr	r2, [r7, #4]
 800525a:	4413      	add	r3, r2
 800525c:	3304      	adds	r3, #4
 800525e:	e00b      	b.n	8005278 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005260:	7bbb      	ldrb	r3, [r7, #14]
 8005262:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005266:	4613      	mov	r3, r2
 8005268:	009b      	lsls	r3, r3, #2
 800526a:	4413      	add	r3, r2
 800526c:	009b      	lsls	r3, r3, #2
 800526e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005272:	687a      	ldr	r2, [r7, #4]
 8005274:	4413      	add	r3, r2
 8005276:	3304      	adds	r3, #4
 8005278:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800527a:	68bb      	ldr	r3, [r7, #8]
 800527c:	2200      	movs	r2, #0
 800527e:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8005280:	68bb      	ldr	r3, [r7, #8]
 8005282:	2202      	movs	r2, #2
 8005284:	4619      	mov	r1, r3
 8005286:	6878      	ldr	r0, [r7, #4]
 8005288:	f000 fc1d 	bl	8005ac6 <USBD_CtlSendData>
              break;
 800528c:	e06a      	b.n	8005364 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800528e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005292:	2b00      	cmp	r3, #0
 8005294:	da11      	bge.n	80052ba <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8005296:	7bbb      	ldrb	r3, [r7, #14]
 8005298:	f003 020f 	and.w	r2, r3, #15
 800529c:	6879      	ldr	r1, [r7, #4]
 800529e:	4613      	mov	r3, r2
 80052a0:	009b      	lsls	r3, r3, #2
 80052a2:	4413      	add	r3, r2
 80052a4:	009b      	lsls	r3, r3, #2
 80052a6:	440b      	add	r3, r1
 80052a8:	3324      	adds	r3, #36	; 0x24
 80052aa:	881b      	ldrh	r3, [r3, #0]
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d117      	bne.n	80052e0 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 80052b0:	6839      	ldr	r1, [r7, #0]
 80052b2:	6878      	ldr	r0, [r7, #4]
 80052b4:	f000 fb96 	bl	80059e4 <USBD_CtlError>
                  break;
 80052b8:	e054      	b.n	8005364 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80052ba:	7bbb      	ldrb	r3, [r7, #14]
 80052bc:	f003 020f 	and.w	r2, r3, #15
 80052c0:	6879      	ldr	r1, [r7, #4]
 80052c2:	4613      	mov	r3, r2
 80052c4:	009b      	lsls	r3, r3, #2
 80052c6:	4413      	add	r3, r2
 80052c8:	009b      	lsls	r3, r3, #2
 80052ca:	440b      	add	r3, r1
 80052cc:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80052d0:	881b      	ldrh	r3, [r3, #0]
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d104      	bne.n	80052e0 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 80052d6:	6839      	ldr	r1, [r7, #0]
 80052d8:	6878      	ldr	r0, [r7, #4]
 80052da:	f000 fb83 	bl	80059e4 <USBD_CtlError>
                  break;
 80052de:	e041      	b.n	8005364 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80052e0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	da0b      	bge.n	8005300 <USBD_StdEPReq+0x23e>
 80052e8:	7bbb      	ldrb	r3, [r7, #14]
 80052ea:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80052ee:	4613      	mov	r3, r2
 80052f0:	009b      	lsls	r3, r3, #2
 80052f2:	4413      	add	r3, r2
 80052f4:	009b      	lsls	r3, r3, #2
 80052f6:	3310      	adds	r3, #16
 80052f8:	687a      	ldr	r2, [r7, #4]
 80052fa:	4413      	add	r3, r2
 80052fc:	3304      	adds	r3, #4
 80052fe:	e00b      	b.n	8005318 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005300:	7bbb      	ldrb	r3, [r7, #14]
 8005302:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005306:	4613      	mov	r3, r2
 8005308:	009b      	lsls	r3, r3, #2
 800530a:	4413      	add	r3, r2
 800530c:	009b      	lsls	r3, r3, #2
 800530e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005312:	687a      	ldr	r2, [r7, #4]
 8005314:	4413      	add	r3, r2
 8005316:	3304      	adds	r3, #4
 8005318:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800531a:	7bbb      	ldrb	r3, [r7, #14]
 800531c:	2b00      	cmp	r3, #0
 800531e:	d002      	beq.n	8005326 <USBD_StdEPReq+0x264>
 8005320:	7bbb      	ldrb	r3, [r7, #14]
 8005322:	2b80      	cmp	r3, #128	; 0x80
 8005324:	d103      	bne.n	800532e <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8005326:	68bb      	ldr	r3, [r7, #8]
 8005328:	2200      	movs	r2, #0
 800532a:	601a      	str	r2, [r3, #0]
 800532c:	e00e      	b.n	800534c <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800532e:	7bbb      	ldrb	r3, [r7, #14]
 8005330:	4619      	mov	r1, r3
 8005332:	6878      	ldr	r0, [r7, #4]
 8005334:	f001 f92a 	bl	800658c <USBD_LL_IsStallEP>
 8005338:	4603      	mov	r3, r0
 800533a:	2b00      	cmp	r3, #0
 800533c:	d003      	beq.n	8005346 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800533e:	68bb      	ldr	r3, [r7, #8]
 8005340:	2201      	movs	r2, #1
 8005342:	601a      	str	r2, [r3, #0]
 8005344:	e002      	b.n	800534c <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8005346:	68bb      	ldr	r3, [r7, #8]
 8005348:	2200      	movs	r2, #0
 800534a:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800534c:	68bb      	ldr	r3, [r7, #8]
 800534e:	2202      	movs	r2, #2
 8005350:	4619      	mov	r1, r3
 8005352:	6878      	ldr	r0, [r7, #4]
 8005354:	f000 fbb7 	bl	8005ac6 <USBD_CtlSendData>
              break;
 8005358:	e004      	b.n	8005364 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800535a:	6839      	ldr	r1, [r7, #0]
 800535c:	6878      	ldr	r0, [r7, #4]
 800535e:	f000 fb41 	bl	80059e4 <USBD_CtlError>
              break;
 8005362:	bf00      	nop
          }
          break;
 8005364:	e004      	b.n	8005370 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8005366:	6839      	ldr	r1, [r7, #0]
 8005368:	6878      	ldr	r0, [r7, #4]
 800536a:	f000 fb3b 	bl	80059e4 <USBD_CtlError>
          break;
 800536e:	bf00      	nop
      }
      break;
 8005370:	e004      	b.n	800537c <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8005372:	6839      	ldr	r1, [r7, #0]
 8005374:	6878      	ldr	r0, [r7, #4]
 8005376:	f000 fb35 	bl	80059e4 <USBD_CtlError>
      break;
 800537a:	bf00      	nop
  }

  return ret;
 800537c:	7bfb      	ldrb	r3, [r7, #15]
}
 800537e:	4618      	mov	r0, r3
 8005380:	3710      	adds	r7, #16
 8005382:	46bd      	mov	sp, r7
 8005384:	bd80      	pop	{r7, pc}
	...

08005388 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005388:	b580      	push	{r7, lr}
 800538a:	b084      	sub	sp, #16
 800538c:	af00      	add	r7, sp, #0
 800538e:	6078      	str	r0, [r7, #4]
 8005390:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005392:	2300      	movs	r3, #0
 8005394:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8005396:	2300      	movs	r3, #0
 8005398:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800539a:	2300      	movs	r3, #0
 800539c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800539e:	683b      	ldr	r3, [r7, #0]
 80053a0:	885b      	ldrh	r3, [r3, #2]
 80053a2:	0a1b      	lsrs	r3, r3, #8
 80053a4:	b29b      	uxth	r3, r3
 80053a6:	3b01      	subs	r3, #1
 80053a8:	2b06      	cmp	r3, #6
 80053aa:	f200 8128 	bhi.w	80055fe <USBD_GetDescriptor+0x276>
 80053ae:	a201      	add	r2, pc, #4	; (adr r2, 80053b4 <USBD_GetDescriptor+0x2c>)
 80053b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053b4:	080053d1 	.word	0x080053d1
 80053b8:	080053e9 	.word	0x080053e9
 80053bc:	08005429 	.word	0x08005429
 80053c0:	080055ff 	.word	0x080055ff
 80053c4:	080055ff 	.word	0x080055ff
 80053c8:	0800559f 	.word	0x0800559f
 80053cc:	080055cb 	.word	0x080055cb
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	687a      	ldr	r2, [r7, #4]
 80053da:	7c12      	ldrb	r2, [r2, #16]
 80053dc:	f107 0108 	add.w	r1, r7, #8
 80053e0:	4610      	mov	r0, r2
 80053e2:	4798      	blx	r3
 80053e4:	60f8      	str	r0, [r7, #12]
      break;
 80053e6:	e112      	b.n	800560e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	7c1b      	ldrb	r3, [r3, #16]
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d10d      	bne.n	800540c <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80053f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053f8:	f107 0208 	add.w	r2, r7, #8
 80053fc:	4610      	mov	r0, r2
 80053fe:	4798      	blx	r3
 8005400:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	3301      	adds	r3, #1
 8005406:	2202      	movs	r2, #2
 8005408:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800540a:	e100      	b.n	800560e <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005412:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005414:	f107 0208 	add.w	r2, r7, #8
 8005418:	4610      	mov	r0, r2
 800541a:	4798      	blx	r3
 800541c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	3301      	adds	r3, #1
 8005422:	2202      	movs	r2, #2
 8005424:	701a      	strb	r2, [r3, #0]
      break;
 8005426:	e0f2      	b.n	800560e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8005428:	683b      	ldr	r3, [r7, #0]
 800542a:	885b      	ldrh	r3, [r3, #2]
 800542c:	b2db      	uxtb	r3, r3
 800542e:	2b05      	cmp	r3, #5
 8005430:	f200 80ac 	bhi.w	800558c <USBD_GetDescriptor+0x204>
 8005434:	a201      	add	r2, pc, #4	; (adr r2, 800543c <USBD_GetDescriptor+0xb4>)
 8005436:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800543a:	bf00      	nop
 800543c:	08005455 	.word	0x08005455
 8005440:	08005489 	.word	0x08005489
 8005444:	080054bd 	.word	0x080054bd
 8005448:	080054f1 	.word	0x080054f1
 800544c:	08005525 	.word	0x08005525
 8005450:	08005559 	.word	0x08005559
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800545a:	685b      	ldr	r3, [r3, #4]
 800545c:	2b00      	cmp	r3, #0
 800545e:	d00b      	beq.n	8005478 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005466:	685b      	ldr	r3, [r3, #4]
 8005468:	687a      	ldr	r2, [r7, #4]
 800546a:	7c12      	ldrb	r2, [r2, #16]
 800546c:	f107 0108 	add.w	r1, r7, #8
 8005470:	4610      	mov	r0, r2
 8005472:	4798      	blx	r3
 8005474:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005476:	e091      	b.n	800559c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005478:	6839      	ldr	r1, [r7, #0]
 800547a:	6878      	ldr	r0, [r7, #4]
 800547c:	f000 fab2 	bl	80059e4 <USBD_CtlError>
            err++;
 8005480:	7afb      	ldrb	r3, [r7, #11]
 8005482:	3301      	adds	r3, #1
 8005484:	72fb      	strb	r3, [r7, #11]
          break;
 8005486:	e089      	b.n	800559c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800548e:	689b      	ldr	r3, [r3, #8]
 8005490:	2b00      	cmp	r3, #0
 8005492:	d00b      	beq.n	80054ac <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800549a:	689b      	ldr	r3, [r3, #8]
 800549c:	687a      	ldr	r2, [r7, #4]
 800549e:	7c12      	ldrb	r2, [r2, #16]
 80054a0:	f107 0108 	add.w	r1, r7, #8
 80054a4:	4610      	mov	r0, r2
 80054a6:	4798      	blx	r3
 80054a8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80054aa:	e077      	b.n	800559c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80054ac:	6839      	ldr	r1, [r7, #0]
 80054ae:	6878      	ldr	r0, [r7, #4]
 80054b0:	f000 fa98 	bl	80059e4 <USBD_CtlError>
            err++;
 80054b4:	7afb      	ldrb	r3, [r7, #11]
 80054b6:	3301      	adds	r3, #1
 80054b8:	72fb      	strb	r3, [r7, #11]
          break;
 80054ba:	e06f      	b.n	800559c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80054c2:	68db      	ldr	r3, [r3, #12]
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d00b      	beq.n	80054e0 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80054ce:	68db      	ldr	r3, [r3, #12]
 80054d0:	687a      	ldr	r2, [r7, #4]
 80054d2:	7c12      	ldrb	r2, [r2, #16]
 80054d4:	f107 0108 	add.w	r1, r7, #8
 80054d8:	4610      	mov	r0, r2
 80054da:	4798      	blx	r3
 80054dc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80054de:	e05d      	b.n	800559c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80054e0:	6839      	ldr	r1, [r7, #0]
 80054e2:	6878      	ldr	r0, [r7, #4]
 80054e4:	f000 fa7e 	bl	80059e4 <USBD_CtlError>
            err++;
 80054e8:	7afb      	ldrb	r3, [r7, #11]
 80054ea:	3301      	adds	r3, #1
 80054ec:	72fb      	strb	r3, [r7, #11]
          break;
 80054ee:	e055      	b.n	800559c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80054f6:	691b      	ldr	r3, [r3, #16]
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d00b      	beq.n	8005514 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005502:	691b      	ldr	r3, [r3, #16]
 8005504:	687a      	ldr	r2, [r7, #4]
 8005506:	7c12      	ldrb	r2, [r2, #16]
 8005508:	f107 0108 	add.w	r1, r7, #8
 800550c:	4610      	mov	r0, r2
 800550e:	4798      	blx	r3
 8005510:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005512:	e043      	b.n	800559c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005514:	6839      	ldr	r1, [r7, #0]
 8005516:	6878      	ldr	r0, [r7, #4]
 8005518:	f000 fa64 	bl	80059e4 <USBD_CtlError>
            err++;
 800551c:	7afb      	ldrb	r3, [r7, #11]
 800551e:	3301      	adds	r3, #1
 8005520:	72fb      	strb	r3, [r7, #11]
          break;
 8005522:	e03b      	b.n	800559c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800552a:	695b      	ldr	r3, [r3, #20]
 800552c:	2b00      	cmp	r3, #0
 800552e:	d00b      	beq.n	8005548 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005536:	695b      	ldr	r3, [r3, #20]
 8005538:	687a      	ldr	r2, [r7, #4]
 800553a:	7c12      	ldrb	r2, [r2, #16]
 800553c:	f107 0108 	add.w	r1, r7, #8
 8005540:	4610      	mov	r0, r2
 8005542:	4798      	blx	r3
 8005544:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005546:	e029      	b.n	800559c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005548:	6839      	ldr	r1, [r7, #0]
 800554a:	6878      	ldr	r0, [r7, #4]
 800554c:	f000 fa4a 	bl	80059e4 <USBD_CtlError>
            err++;
 8005550:	7afb      	ldrb	r3, [r7, #11]
 8005552:	3301      	adds	r3, #1
 8005554:	72fb      	strb	r3, [r7, #11]
          break;
 8005556:	e021      	b.n	800559c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800555e:	699b      	ldr	r3, [r3, #24]
 8005560:	2b00      	cmp	r3, #0
 8005562:	d00b      	beq.n	800557c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800556a:	699b      	ldr	r3, [r3, #24]
 800556c:	687a      	ldr	r2, [r7, #4]
 800556e:	7c12      	ldrb	r2, [r2, #16]
 8005570:	f107 0108 	add.w	r1, r7, #8
 8005574:	4610      	mov	r0, r2
 8005576:	4798      	blx	r3
 8005578:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800557a:	e00f      	b.n	800559c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800557c:	6839      	ldr	r1, [r7, #0]
 800557e:	6878      	ldr	r0, [r7, #4]
 8005580:	f000 fa30 	bl	80059e4 <USBD_CtlError>
            err++;
 8005584:	7afb      	ldrb	r3, [r7, #11]
 8005586:	3301      	adds	r3, #1
 8005588:	72fb      	strb	r3, [r7, #11]
          break;
 800558a:	e007      	b.n	800559c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800558c:	6839      	ldr	r1, [r7, #0]
 800558e:	6878      	ldr	r0, [r7, #4]
 8005590:	f000 fa28 	bl	80059e4 <USBD_CtlError>
          err++;
 8005594:	7afb      	ldrb	r3, [r7, #11]
 8005596:	3301      	adds	r3, #1
 8005598:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800559a:	bf00      	nop
      }
      break;
 800559c:	e037      	b.n	800560e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	7c1b      	ldrb	r3, [r3, #16]
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d109      	bne.n	80055ba <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80055ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055ae:	f107 0208 	add.w	r2, r7, #8
 80055b2:	4610      	mov	r0, r2
 80055b4:	4798      	blx	r3
 80055b6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80055b8:	e029      	b.n	800560e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80055ba:	6839      	ldr	r1, [r7, #0]
 80055bc:	6878      	ldr	r0, [r7, #4]
 80055be:	f000 fa11 	bl	80059e4 <USBD_CtlError>
        err++;
 80055c2:	7afb      	ldrb	r3, [r7, #11]
 80055c4:	3301      	adds	r3, #1
 80055c6:	72fb      	strb	r3, [r7, #11]
      break;
 80055c8:	e021      	b.n	800560e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	7c1b      	ldrb	r3, [r3, #16]
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d10d      	bne.n	80055ee <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80055d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055da:	f107 0208 	add.w	r2, r7, #8
 80055de:	4610      	mov	r0, r2
 80055e0:	4798      	blx	r3
 80055e2:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	3301      	adds	r3, #1
 80055e8:	2207      	movs	r2, #7
 80055ea:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80055ec:	e00f      	b.n	800560e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80055ee:	6839      	ldr	r1, [r7, #0]
 80055f0:	6878      	ldr	r0, [r7, #4]
 80055f2:	f000 f9f7 	bl	80059e4 <USBD_CtlError>
        err++;
 80055f6:	7afb      	ldrb	r3, [r7, #11]
 80055f8:	3301      	adds	r3, #1
 80055fa:	72fb      	strb	r3, [r7, #11]
      break;
 80055fc:	e007      	b.n	800560e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80055fe:	6839      	ldr	r1, [r7, #0]
 8005600:	6878      	ldr	r0, [r7, #4]
 8005602:	f000 f9ef 	bl	80059e4 <USBD_CtlError>
      err++;
 8005606:	7afb      	ldrb	r3, [r7, #11]
 8005608:	3301      	adds	r3, #1
 800560a:	72fb      	strb	r3, [r7, #11]
      break;
 800560c:	bf00      	nop
  }

  if (err != 0U)
 800560e:	7afb      	ldrb	r3, [r7, #11]
 8005610:	2b00      	cmp	r3, #0
 8005612:	d11e      	bne.n	8005652 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8005614:	683b      	ldr	r3, [r7, #0]
 8005616:	88db      	ldrh	r3, [r3, #6]
 8005618:	2b00      	cmp	r3, #0
 800561a:	d016      	beq.n	800564a <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800561c:	893b      	ldrh	r3, [r7, #8]
 800561e:	2b00      	cmp	r3, #0
 8005620:	d00e      	beq.n	8005640 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8005622:	683b      	ldr	r3, [r7, #0]
 8005624:	88da      	ldrh	r2, [r3, #6]
 8005626:	893b      	ldrh	r3, [r7, #8]
 8005628:	4293      	cmp	r3, r2
 800562a:	bf28      	it	cs
 800562c:	4613      	movcs	r3, r2
 800562e:	b29b      	uxth	r3, r3
 8005630:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8005632:	893b      	ldrh	r3, [r7, #8]
 8005634:	461a      	mov	r2, r3
 8005636:	68f9      	ldr	r1, [r7, #12]
 8005638:	6878      	ldr	r0, [r7, #4]
 800563a:	f000 fa44 	bl	8005ac6 <USBD_CtlSendData>
 800563e:	e009      	b.n	8005654 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8005640:	6839      	ldr	r1, [r7, #0]
 8005642:	6878      	ldr	r0, [r7, #4]
 8005644:	f000 f9ce 	bl	80059e4 <USBD_CtlError>
 8005648:	e004      	b.n	8005654 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800564a:	6878      	ldr	r0, [r7, #4]
 800564c:	f000 fa95 	bl	8005b7a <USBD_CtlSendStatus>
 8005650:	e000      	b.n	8005654 <USBD_GetDescriptor+0x2cc>
    return;
 8005652:	bf00      	nop
  }
}
 8005654:	3710      	adds	r7, #16
 8005656:	46bd      	mov	sp, r7
 8005658:	bd80      	pop	{r7, pc}
 800565a:	bf00      	nop

0800565c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800565c:	b580      	push	{r7, lr}
 800565e:	b084      	sub	sp, #16
 8005660:	af00      	add	r7, sp, #0
 8005662:	6078      	str	r0, [r7, #4]
 8005664:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8005666:	683b      	ldr	r3, [r7, #0]
 8005668:	889b      	ldrh	r3, [r3, #4]
 800566a:	2b00      	cmp	r3, #0
 800566c:	d131      	bne.n	80056d2 <USBD_SetAddress+0x76>
 800566e:	683b      	ldr	r3, [r7, #0]
 8005670:	88db      	ldrh	r3, [r3, #6]
 8005672:	2b00      	cmp	r3, #0
 8005674:	d12d      	bne.n	80056d2 <USBD_SetAddress+0x76>
 8005676:	683b      	ldr	r3, [r7, #0]
 8005678:	885b      	ldrh	r3, [r3, #2]
 800567a:	2b7f      	cmp	r3, #127	; 0x7f
 800567c:	d829      	bhi.n	80056d2 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800567e:	683b      	ldr	r3, [r7, #0]
 8005680:	885b      	ldrh	r3, [r3, #2]
 8005682:	b2db      	uxtb	r3, r3
 8005684:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005688:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005690:	b2db      	uxtb	r3, r3
 8005692:	2b03      	cmp	r3, #3
 8005694:	d104      	bne.n	80056a0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8005696:	6839      	ldr	r1, [r7, #0]
 8005698:	6878      	ldr	r0, [r7, #4]
 800569a:	f000 f9a3 	bl	80059e4 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800569e:	e01d      	b.n	80056dc <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	7bfa      	ldrb	r2, [r7, #15]
 80056a4:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80056a8:	7bfb      	ldrb	r3, [r7, #15]
 80056aa:	4619      	mov	r1, r3
 80056ac:	6878      	ldr	r0, [r7, #4]
 80056ae:	f000 ff99 	bl	80065e4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80056b2:	6878      	ldr	r0, [r7, #4]
 80056b4:	f000 fa61 	bl	8005b7a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80056b8:	7bfb      	ldrb	r3, [r7, #15]
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d004      	beq.n	80056c8 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	2202      	movs	r2, #2
 80056c2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80056c6:	e009      	b.n	80056dc <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	2201      	movs	r2, #1
 80056cc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80056d0:	e004      	b.n	80056dc <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80056d2:	6839      	ldr	r1, [r7, #0]
 80056d4:	6878      	ldr	r0, [r7, #4]
 80056d6:	f000 f985 	bl	80059e4 <USBD_CtlError>
  }
}
 80056da:	bf00      	nop
 80056dc:	bf00      	nop
 80056de:	3710      	adds	r7, #16
 80056e0:	46bd      	mov	sp, r7
 80056e2:	bd80      	pop	{r7, pc}

080056e4 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80056e4:	b580      	push	{r7, lr}
 80056e6:	b084      	sub	sp, #16
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	6078      	str	r0, [r7, #4]
 80056ec:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80056ee:	2300      	movs	r3, #0
 80056f0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80056f2:	683b      	ldr	r3, [r7, #0]
 80056f4:	885b      	ldrh	r3, [r3, #2]
 80056f6:	b2da      	uxtb	r2, r3
 80056f8:	4b4c      	ldr	r3, [pc, #304]	; (800582c <USBD_SetConfig+0x148>)
 80056fa:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80056fc:	4b4b      	ldr	r3, [pc, #300]	; (800582c <USBD_SetConfig+0x148>)
 80056fe:	781b      	ldrb	r3, [r3, #0]
 8005700:	2b01      	cmp	r3, #1
 8005702:	d905      	bls.n	8005710 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8005704:	6839      	ldr	r1, [r7, #0]
 8005706:	6878      	ldr	r0, [r7, #4]
 8005708:	f000 f96c 	bl	80059e4 <USBD_CtlError>
    return USBD_FAIL;
 800570c:	2303      	movs	r3, #3
 800570e:	e088      	b.n	8005822 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005716:	b2db      	uxtb	r3, r3
 8005718:	2b02      	cmp	r3, #2
 800571a:	d002      	beq.n	8005722 <USBD_SetConfig+0x3e>
 800571c:	2b03      	cmp	r3, #3
 800571e:	d025      	beq.n	800576c <USBD_SetConfig+0x88>
 8005720:	e071      	b.n	8005806 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8005722:	4b42      	ldr	r3, [pc, #264]	; (800582c <USBD_SetConfig+0x148>)
 8005724:	781b      	ldrb	r3, [r3, #0]
 8005726:	2b00      	cmp	r3, #0
 8005728:	d01c      	beq.n	8005764 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800572a:	4b40      	ldr	r3, [pc, #256]	; (800582c <USBD_SetConfig+0x148>)
 800572c:	781b      	ldrb	r3, [r3, #0]
 800572e:	461a      	mov	r2, r3
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8005734:	4b3d      	ldr	r3, [pc, #244]	; (800582c <USBD_SetConfig+0x148>)
 8005736:	781b      	ldrb	r3, [r3, #0]
 8005738:	4619      	mov	r1, r3
 800573a:	6878      	ldr	r0, [r7, #4]
 800573c:	f7ff f948 	bl	80049d0 <USBD_SetClassConfig>
 8005740:	4603      	mov	r3, r0
 8005742:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8005744:	7bfb      	ldrb	r3, [r7, #15]
 8005746:	2b00      	cmp	r3, #0
 8005748:	d004      	beq.n	8005754 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800574a:	6839      	ldr	r1, [r7, #0]
 800574c:	6878      	ldr	r0, [r7, #4]
 800574e:	f000 f949 	bl	80059e4 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8005752:	e065      	b.n	8005820 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8005754:	6878      	ldr	r0, [r7, #4]
 8005756:	f000 fa10 	bl	8005b7a <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	2203      	movs	r2, #3
 800575e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8005762:	e05d      	b.n	8005820 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8005764:	6878      	ldr	r0, [r7, #4]
 8005766:	f000 fa08 	bl	8005b7a <USBD_CtlSendStatus>
      break;
 800576a:	e059      	b.n	8005820 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800576c:	4b2f      	ldr	r3, [pc, #188]	; (800582c <USBD_SetConfig+0x148>)
 800576e:	781b      	ldrb	r3, [r3, #0]
 8005770:	2b00      	cmp	r3, #0
 8005772:	d112      	bne.n	800579a <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	2202      	movs	r2, #2
 8005778:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800577c:	4b2b      	ldr	r3, [pc, #172]	; (800582c <USBD_SetConfig+0x148>)
 800577e:	781b      	ldrb	r3, [r3, #0]
 8005780:	461a      	mov	r2, r3
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8005786:	4b29      	ldr	r3, [pc, #164]	; (800582c <USBD_SetConfig+0x148>)
 8005788:	781b      	ldrb	r3, [r3, #0]
 800578a:	4619      	mov	r1, r3
 800578c:	6878      	ldr	r0, [r7, #4]
 800578e:	f7ff f93b 	bl	8004a08 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8005792:	6878      	ldr	r0, [r7, #4]
 8005794:	f000 f9f1 	bl	8005b7a <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8005798:	e042      	b.n	8005820 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800579a:	4b24      	ldr	r3, [pc, #144]	; (800582c <USBD_SetConfig+0x148>)
 800579c:	781b      	ldrb	r3, [r3, #0]
 800579e:	461a      	mov	r2, r3
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	685b      	ldr	r3, [r3, #4]
 80057a4:	429a      	cmp	r2, r3
 80057a6:	d02a      	beq.n	80057fe <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	685b      	ldr	r3, [r3, #4]
 80057ac:	b2db      	uxtb	r3, r3
 80057ae:	4619      	mov	r1, r3
 80057b0:	6878      	ldr	r0, [r7, #4]
 80057b2:	f7ff f929 	bl	8004a08 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80057b6:	4b1d      	ldr	r3, [pc, #116]	; (800582c <USBD_SetConfig+0x148>)
 80057b8:	781b      	ldrb	r3, [r3, #0]
 80057ba:	461a      	mov	r2, r3
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80057c0:	4b1a      	ldr	r3, [pc, #104]	; (800582c <USBD_SetConfig+0x148>)
 80057c2:	781b      	ldrb	r3, [r3, #0]
 80057c4:	4619      	mov	r1, r3
 80057c6:	6878      	ldr	r0, [r7, #4]
 80057c8:	f7ff f902 	bl	80049d0 <USBD_SetClassConfig>
 80057cc:	4603      	mov	r3, r0
 80057ce:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80057d0:	7bfb      	ldrb	r3, [r7, #15]
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d00f      	beq.n	80057f6 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 80057d6:	6839      	ldr	r1, [r7, #0]
 80057d8:	6878      	ldr	r0, [r7, #4]
 80057da:	f000 f903 	bl	80059e4 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	685b      	ldr	r3, [r3, #4]
 80057e2:	b2db      	uxtb	r3, r3
 80057e4:	4619      	mov	r1, r3
 80057e6:	6878      	ldr	r0, [r7, #4]
 80057e8:	f7ff f90e 	bl	8004a08 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	2202      	movs	r2, #2
 80057f0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80057f4:	e014      	b.n	8005820 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 80057f6:	6878      	ldr	r0, [r7, #4]
 80057f8:	f000 f9bf 	bl	8005b7a <USBD_CtlSendStatus>
      break;
 80057fc:	e010      	b.n	8005820 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80057fe:	6878      	ldr	r0, [r7, #4]
 8005800:	f000 f9bb 	bl	8005b7a <USBD_CtlSendStatus>
      break;
 8005804:	e00c      	b.n	8005820 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8005806:	6839      	ldr	r1, [r7, #0]
 8005808:	6878      	ldr	r0, [r7, #4]
 800580a:	f000 f8eb 	bl	80059e4 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800580e:	4b07      	ldr	r3, [pc, #28]	; (800582c <USBD_SetConfig+0x148>)
 8005810:	781b      	ldrb	r3, [r3, #0]
 8005812:	4619      	mov	r1, r3
 8005814:	6878      	ldr	r0, [r7, #4]
 8005816:	f7ff f8f7 	bl	8004a08 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800581a:	2303      	movs	r3, #3
 800581c:	73fb      	strb	r3, [r7, #15]
      break;
 800581e:	bf00      	nop
  }

  return ret;
 8005820:	7bfb      	ldrb	r3, [r7, #15]
}
 8005822:	4618      	mov	r0, r3
 8005824:	3710      	adds	r7, #16
 8005826:	46bd      	mov	sp, r7
 8005828:	bd80      	pop	{r7, pc}
 800582a:	bf00      	nop
 800582c:	200001c8 	.word	0x200001c8

08005830 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005830:	b580      	push	{r7, lr}
 8005832:	b082      	sub	sp, #8
 8005834:	af00      	add	r7, sp, #0
 8005836:	6078      	str	r0, [r7, #4]
 8005838:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800583a:	683b      	ldr	r3, [r7, #0]
 800583c:	88db      	ldrh	r3, [r3, #6]
 800583e:	2b01      	cmp	r3, #1
 8005840:	d004      	beq.n	800584c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8005842:	6839      	ldr	r1, [r7, #0]
 8005844:	6878      	ldr	r0, [r7, #4]
 8005846:	f000 f8cd 	bl	80059e4 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800584a:	e023      	b.n	8005894 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005852:	b2db      	uxtb	r3, r3
 8005854:	2b02      	cmp	r3, #2
 8005856:	dc02      	bgt.n	800585e <USBD_GetConfig+0x2e>
 8005858:	2b00      	cmp	r3, #0
 800585a:	dc03      	bgt.n	8005864 <USBD_GetConfig+0x34>
 800585c:	e015      	b.n	800588a <USBD_GetConfig+0x5a>
 800585e:	2b03      	cmp	r3, #3
 8005860:	d00b      	beq.n	800587a <USBD_GetConfig+0x4a>
 8005862:	e012      	b.n	800588a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	2200      	movs	r2, #0
 8005868:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	3308      	adds	r3, #8
 800586e:	2201      	movs	r2, #1
 8005870:	4619      	mov	r1, r3
 8005872:	6878      	ldr	r0, [r7, #4]
 8005874:	f000 f927 	bl	8005ac6 <USBD_CtlSendData>
        break;
 8005878:	e00c      	b.n	8005894 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	3304      	adds	r3, #4
 800587e:	2201      	movs	r2, #1
 8005880:	4619      	mov	r1, r3
 8005882:	6878      	ldr	r0, [r7, #4]
 8005884:	f000 f91f 	bl	8005ac6 <USBD_CtlSendData>
        break;
 8005888:	e004      	b.n	8005894 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800588a:	6839      	ldr	r1, [r7, #0]
 800588c:	6878      	ldr	r0, [r7, #4]
 800588e:	f000 f8a9 	bl	80059e4 <USBD_CtlError>
        break;
 8005892:	bf00      	nop
}
 8005894:	bf00      	nop
 8005896:	3708      	adds	r7, #8
 8005898:	46bd      	mov	sp, r7
 800589a:	bd80      	pop	{r7, pc}

0800589c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800589c:	b580      	push	{r7, lr}
 800589e:	b082      	sub	sp, #8
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	6078      	str	r0, [r7, #4]
 80058a4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80058ac:	b2db      	uxtb	r3, r3
 80058ae:	3b01      	subs	r3, #1
 80058b0:	2b02      	cmp	r3, #2
 80058b2:	d81e      	bhi.n	80058f2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80058b4:	683b      	ldr	r3, [r7, #0]
 80058b6:	88db      	ldrh	r3, [r3, #6]
 80058b8:	2b02      	cmp	r3, #2
 80058ba:	d004      	beq.n	80058c6 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80058bc:	6839      	ldr	r1, [r7, #0]
 80058be:	6878      	ldr	r0, [r7, #4]
 80058c0:	f000 f890 	bl	80059e4 <USBD_CtlError>
        break;
 80058c4:	e01a      	b.n	80058fc <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	2201      	movs	r2, #1
 80058ca:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d005      	beq.n	80058e2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	68db      	ldr	r3, [r3, #12]
 80058da:	f043 0202 	orr.w	r2, r3, #2
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	330c      	adds	r3, #12
 80058e6:	2202      	movs	r2, #2
 80058e8:	4619      	mov	r1, r3
 80058ea:	6878      	ldr	r0, [r7, #4]
 80058ec:	f000 f8eb 	bl	8005ac6 <USBD_CtlSendData>
      break;
 80058f0:	e004      	b.n	80058fc <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80058f2:	6839      	ldr	r1, [r7, #0]
 80058f4:	6878      	ldr	r0, [r7, #4]
 80058f6:	f000 f875 	bl	80059e4 <USBD_CtlError>
      break;
 80058fa:	bf00      	nop
  }
}
 80058fc:	bf00      	nop
 80058fe:	3708      	adds	r7, #8
 8005900:	46bd      	mov	sp, r7
 8005902:	bd80      	pop	{r7, pc}

08005904 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005904:	b580      	push	{r7, lr}
 8005906:	b082      	sub	sp, #8
 8005908:	af00      	add	r7, sp, #0
 800590a:	6078      	str	r0, [r7, #4]
 800590c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800590e:	683b      	ldr	r3, [r7, #0]
 8005910:	885b      	ldrh	r3, [r3, #2]
 8005912:	2b01      	cmp	r3, #1
 8005914:	d106      	bne.n	8005924 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	2201      	movs	r2, #1
 800591a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800591e:	6878      	ldr	r0, [r7, #4]
 8005920:	f000 f92b 	bl	8005b7a <USBD_CtlSendStatus>
  }
}
 8005924:	bf00      	nop
 8005926:	3708      	adds	r7, #8
 8005928:	46bd      	mov	sp, r7
 800592a:	bd80      	pop	{r7, pc}

0800592c <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800592c:	b580      	push	{r7, lr}
 800592e:	b082      	sub	sp, #8
 8005930:	af00      	add	r7, sp, #0
 8005932:	6078      	str	r0, [r7, #4]
 8005934:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800593c:	b2db      	uxtb	r3, r3
 800593e:	3b01      	subs	r3, #1
 8005940:	2b02      	cmp	r3, #2
 8005942:	d80b      	bhi.n	800595c <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005944:	683b      	ldr	r3, [r7, #0]
 8005946:	885b      	ldrh	r3, [r3, #2]
 8005948:	2b01      	cmp	r3, #1
 800594a:	d10c      	bne.n	8005966 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	2200      	movs	r2, #0
 8005950:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8005954:	6878      	ldr	r0, [r7, #4]
 8005956:	f000 f910 	bl	8005b7a <USBD_CtlSendStatus>
      }
      break;
 800595a:	e004      	b.n	8005966 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800595c:	6839      	ldr	r1, [r7, #0]
 800595e:	6878      	ldr	r0, [r7, #4]
 8005960:	f000 f840 	bl	80059e4 <USBD_CtlError>
      break;
 8005964:	e000      	b.n	8005968 <USBD_ClrFeature+0x3c>
      break;
 8005966:	bf00      	nop
  }
}
 8005968:	bf00      	nop
 800596a:	3708      	adds	r7, #8
 800596c:	46bd      	mov	sp, r7
 800596e:	bd80      	pop	{r7, pc}

08005970 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8005970:	b580      	push	{r7, lr}
 8005972:	b084      	sub	sp, #16
 8005974:	af00      	add	r7, sp, #0
 8005976:	6078      	str	r0, [r7, #4]
 8005978:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800597a:	683b      	ldr	r3, [r7, #0]
 800597c:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	781a      	ldrb	r2, [r3, #0]
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	3301      	adds	r3, #1
 800598a:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	781a      	ldrb	r2, [r3, #0]
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	3301      	adds	r3, #1
 8005998:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800599a:	68f8      	ldr	r0, [r7, #12]
 800599c:	f7ff fabb 	bl	8004f16 <SWAPBYTE>
 80059a0:	4603      	mov	r3, r0
 80059a2:	461a      	mov	r2, r3
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	3301      	adds	r3, #1
 80059ac:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	3301      	adds	r3, #1
 80059b2:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80059b4:	68f8      	ldr	r0, [r7, #12]
 80059b6:	f7ff faae 	bl	8004f16 <SWAPBYTE>
 80059ba:	4603      	mov	r3, r0
 80059bc:	461a      	mov	r2, r3
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	3301      	adds	r3, #1
 80059c6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	3301      	adds	r3, #1
 80059cc:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80059ce:	68f8      	ldr	r0, [r7, #12]
 80059d0:	f7ff faa1 	bl	8004f16 <SWAPBYTE>
 80059d4:	4603      	mov	r3, r0
 80059d6:	461a      	mov	r2, r3
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	80da      	strh	r2, [r3, #6]
}
 80059dc:	bf00      	nop
 80059de:	3710      	adds	r7, #16
 80059e0:	46bd      	mov	sp, r7
 80059e2:	bd80      	pop	{r7, pc}

080059e4 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80059e4:	b580      	push	{r7, lr}
 80059e6:	b082      	sub	sp, #8
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	6078      	str	r0, [r7, #4]
 80059ec:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80059ee:	2180      	movs	r1, #128	; 0x80
 80059f0:	6878      	ldr	r0, [r7, #4]
 80059f2:	f000 fd8d 	bl	8006510 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80059f6:	2100      	movs	r1, #0
 80059f8:	6878      	ldr	r0, [r7, #4]
 80059fa:	f000 fd89 	bl	8006510 <USBD_LL_StallEP>
}
 80059fe:	bf00      	nop
 8005a00:	3708      	adds	r7, #8
 8005a02:	46bd      	mov	sp, r7
 8005a04:	bd80      	pop	{r7, pc}

08005a06 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8005a06:	b580      	push	{r7, lr}
 8005a08:	b086      	sub	sp, #24
 8005a0a:	af00      	add	r7, sp, #0
 8005a0c:	60f8      	str	r0, [r7, #12]
 8005a0e:	60b9      	str	r1, [r7, #8]
 8005a10:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8005a12:	2300      	movs	r3, #0
 8005a14:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d036      	beq.n	8005a8a <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8005a20:	6938      	ldr	r0, [r7, #16]
 8005a22:	f000 f836 	bl	8005a92 <USBD_GetLen>
 8005a26:	4603      	mov	r3, r0
 8005a28:	3301      	adds	r3, #1
 8005a2a:	b29b      	uxth	r3, r3
 8005a2c:	005b      	lsls	r3, r3, #1
 8005a2e:	b29a      	uxth	r2, r3
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8005a34:	7dfb      	ldrb	r3, [r7, #23]
 8005a36:	68ba      	ldr	r2, [r7, #8]
 8005a38:	4413      	add	r3, r2
 8005a3a:	687a      	ldr	r2, [r7, #4]
 8005a3c:	7812      	ldrb	r2, [r2, #0]
 8005a3e:	701a      	strb	r2, [r3, #0]
  idx++;
 8005a40:	7dfb      	ldrb	r3, [r7, #23]
 8005a42:	3301      	adds	r3, #1
 8005a44:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8005a46:	7dfb      	ldrb	r3, [r7, #23]
 8005a48:	68ba      	ldr	r2, [r7, #8]
 8005a4a:	4413      	add	r3, r2
 8005a4c:	2203      	movs	r2, #3
 8005a4e:	701a      	strb	r2, [r3, #0]
  idx++;
 8005a50:	7dfb      	ldrb	r3, [r7, #23]
 8005a52:	3301      	adds	r3, #1
 8005a54:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8005a56:	e013      	b.n	8005a80 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8005a58:	7dfb      	ldrb	r3, [r7, #23]
 8005a5a:	68ba      	ldr	r2, [r7, #8]
 8005a5c:	4413      	add	r3, r2
 8005a5e:	693a      	ldr	r2, [r7, #16]
 8005a60:	7812      	ldrb	r2, [r2, #0]
 8005a62:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8005a64:	693b      	ldr	r3, [r7, #16]
 8005a66:	3301      	adds	r3, #1
 8005a68:	613b      	str	r3, [r7, #16]
    idx++;
 8005a6a:	7dfb      	ldrb	r3, [r7, #23]
 8005a6c:	3301      	adds	r3, #1
 8005a6e:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8005a70:	7dfb      	ldrb	r3, [r7, #23]
 8005a72:	68ba      	ldr	r2, [r7, #8]
 8005a74:	4413      	add	r3, r2
 8005a76:	2200      	movs	r2, #0
 8005a78:	701a      	strb	r2, [r3, #0]
    idx++;
 8005a7a:	7dfb      	ldrb	r3, [r7, #23]
 8005a7c:	3301      	adds	r3, #1
 8005a7e:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8005a80:	693b      	ldr	r3, [r7, #16]
 8005a82:	781b      	ldrb	r3, [r3, #0]
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d1e7      	bne.n	8005a58 <USBD_GetString+0x52>
 8005a88:	e000      	b.n	8005a8c <USBD_GetString+0x86>
    return;
 8005a8a:	bf00      	nop
  }
}
 8005a8c:	3718      	adds	r7, #24
 8005a8e:	46bd      	mov	sp, r7
 8005a90:	bd80      	pop	{r7, pc}

08005a92 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8005a92:	b480      	push	{r7}
 8005a94:	b085      	sub	sp, #20
 8005a96:	af00      	add	r7, sp, #0
 8005a98:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8005a9a:	2300      	movs	r3, #0
 8005a9c:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8005aa2:	e005      	b.n	8005ab0 <USBD_GetLen+0x1e>
  {
    len++;
 8005aa4:	7bfb      	ldrb	r3, [r7, #15]
 8005aa6:	3301      	adds	r3, #1
 8005aa8:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8005aaa:	68bb      	ldr	r3, [r7, #8]
 8005aac:	3301      	adds	r3, #1
 8005aae:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8005ab0:	68bb      	ldr	r3, [r7, #8]
 8005ab2:	781b      	ldrb	r3, [r3, #0]
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d1f5      	bne.n	8005aa4 <USBD_GetLen+0x12>
  }

  return len;
 8005ab8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005aba:	4618      	mov	r0, r3
 8005abc:	3714      	adds	r7, #20
 8005abe:	46bd      	mov	sp, r7
 8005ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac4:	4770      	bx	lr

08005ac6 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8005ac6:	b580      	push	{r7, lr}
 8005ac8:	b084      	sub	sp, #16
 8005aca:	af00      	add	r7, sp, #0
 8005acc:	60f8      	str	r0, [r7, #12]
 8005ace:	60b9      	str	r1, [r7, #8]
 8005ad0:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	2202      	movs	r2, #2
 8005ad6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	687a      	ldr	r2, [r7, #4]
 8005ade:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	687a      	ldr	r2, [r7, #4]
 8005ae4:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	68ba      	ldr	r2, [r7, #8]
 8005aea:	2100      	movs	r1, #0
 8005aec:	68f8      	ldr	r0, [r7, #12]
 8005aee:	f000 fd98 	bl	8006622 <USBD_LL_Transmit>

  return USBD_OK;
 8005af2:	2300      	movs	r3, #0
}
 8005af4:	4618      	mov	r0, r3
 8005af6:	3710      	adds	r7, #16
 8005af8:	46bd      	mov	sp, r7
 8005afa:	bd80      	pop	{r7, pc}

08005afc <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8005afc:	b580      	push	{r7, lr}
 8005afe:	b084      	sub	sp, #16
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	60f8      	str	r0, [r7, #12]
 8005b04:	60b9      	str	r1, [r7, #8]
 8005b06:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	68ba      	ldr	r2, [r7, #8]
 8005b0c:	2100      	movs	r1, #0
 8005b0e:	68f8      	ldr	r0, [r7, #12]
 8005b10:	f000 fd87 	bl	8006622 <USBD_LL_Transmit>

  return USBD_OK;
 8005b14:	2300      	movs	r3, #0
}
 8005b16:	4618      	mov	r0, r3
 8005b18:	3710      	adds	r7, #16
 8005b1a:	46bd      	mov	sp, r7
 8005b1c:	bd80      	pop	{r7, pc}

08005b1e <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8005b1e:	b580      	push	{r7, lr}
 8005b20:	b084      	sub	sp, #16
 8005b22:	af00      	add	r7, sp, #0
 8005b24:	60f8      	str	r0, [r7, #12]
 8005b26:	60b9      	str	r1, [r7, #8]
 8005b28:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	2203      	movs	r2, #3
 8005b2e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	687a      	ldr	r2, [r7, #4]
 8005b36:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	687a      	ldr	r2, [r7, #4]
 8005b3e:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	68ba      	ldr	r2, [r7, #8]
 8005b46:	2100      	movs	r1, #0
 8005b48:	68f8      	ldr	r0, [r7, #12]
 8005b4a:	f000 fd8b 	bl	8006664 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8005b4e:	2300      	movs	r3, #0
}
 8005b50:	4618      	mov	r0, r3
 8005b52:	3710      	adds	r7, #16
 8005b54:	46bd      	mov	sp, r7
 8005b56:	bd80      	pop	{r7, pc}

08005b58 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8005b58:	b580      	push	{r7, lr}
 8005b5a:	b084      	sub	sp, #16
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	60f8      	str	r0, [r7, #12]
 8005b60:	60b9      	str	r1, [r7, #8]
 8005b62:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	68ba      	ldr	r2, [r7, #8]
 8005b68:	2100      	movs	r1, #0
 8005b6a:	68f8      	ldr	r0, [r7, #12]
 8005b6c:	f000 fd7a 	bl	8006664 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8005b70:	2300      	movs	r3, #0
}
 8005b72:	4618      	mov	r0, r3
 8005b74:	3710      	adds	r7, #16
 8005b76:	46bd      	mov	sp, r7
 8005b78:	bd80      	pop	{r7, pc}

08005b7a <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8005b7a:	b580      	push	{r7, lr}
 8005b7c:	b082      	sub	sp, #8
 8005b7e:	af00      	add	r7, sp, #0
 8005b80:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	2204      	movs	r2, #4
 8005b86:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8005b8a:	2300      	movs	r3, #0
 8005b8c:	2200      	movs	r2, #0
 8005b8e:	2100      	movs	r1, #0
 8005b90:	6878      	ldr	r0, [r7, #4]
 8005b92:	f000 fd46 	bl	8006622 <USBD_LL_Transmit>

  return USBD_OK;
 8005b96:	2300      	movs	r3, #0
}
 8005b98:	4618      	mov	r0, r3
 8005b9a:	3708      	adds	r7, #8
 8005b9c:	46bd      	mov	sp, r7
 8005b9e:	bd80      	pop	{r7, pc}

08005ba0 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8005ba0:	b580      	push	{r7, lr}
 8005ba2:	b082      	sub	sp, #8
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	2205      	movs	r2, #5
 8005bac:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005bb0:	2300      	movs	r3, #0
 8005bb2:	2200      	movs	r2, #0
 8005bb4:	2100      	movs	r1, #0
 8005bb6:	6878      	ldr	r0, [r7, #4]
 8005bb8:	f000 fd54 	bl	8006664 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8005bbc:	2300      	movs	r3, #0
}
 8005bbe:	4618      	mov	r0, r3
 8005bc0:	3708      	adds	r7, #8
 8005bc2:	46bd      	mov	sp, r7
 8005bc4:	bd80      	pop	{r7, pc}
	...

08005bc8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8005bc8:	b580      	push	{r7, lr}
 8005bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8005bcc:	2200      	movs	r2, #0
 8005bce:	4912      	ldr	r1, [pc, #72]	; (8005c18 <MX_USB_DEVICE_Init+0x50>)
 8005bd0:	4812      	ldr	r0, [pc, #72]	; (8005c1c <MX_USB_DEVICE_Init+0x54>)
 8005bd2:	f7fe fe8f 	bl	80048f4 <USBD_Init>
 8005bd6:	4603      	mov	r3, r0
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d001      	beq.n	8005be0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8005bdc:	f7fa fd9a 	bl	8000714 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8005be0:	490f      	ldr	r1, [pc, #60]	; (8005c20 <MX_USB_DEVICE_Init+0x58>)
 8005be2:	480e      	ldr	r0, [pc, #56]	; (8005c1c <MX_USB_DEVICE_Init+0x54>)
 8005be4:	f7fe feb6 	bl	8004954 <USBD_RegisterClass>
 8005be8:	4603      	mov	r3, r0
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d001      	beq.n	8005bf2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8005bee:	f7fa fd91 	bl	8000714 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8005bf2:	490c      	ldr	r1, [pc, #48]	; (8005c24 <MX_USB_DEVICE_Init+0x5c>)
 8005bf4:	4809      	ldr	r0, [pc, #36]	; (8005c1c <MX_USB_DEVICE_Init+0x54>)
 8005bf6:	f7fe fdd7 	bl	80047a8 <USBD_CDC_RegisterInterface>
 8005bfa:	4603      	mov	r3, r0
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d001      	beq.n	8005c04 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8005c00:	f7fa fd88 	bl	8000714 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8005c04:	4805      	ldr	r0, [pc, #20]	; (8005c1c <MX_USB_DEVICE_Init+0x54>)
 8005c06:	f7fe fecc 	bl	80049a2 <USBD_Start>
 8005c0a:	4603      	mov	r3, r0
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d001      	beq.n	8005c14 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8005c10:	f7fa fd80 	bl	8000714 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8005c14:	bf00      	nop
 8005c16:	bd80      	pop	{r7, pc}
 8005c18:	20000158 	.word	0x20000158
 8005c1c:	200001cc 	.word	0x200001cc
 8005c20:	2000003c 	.word	0x2000003c
 8005c24:	20000144 	.word	0x20000144

08005c28 <cdcAvailable>:
uint32_t rx_out;
uint32_t rx_len=512;
uint8_t rx_buf[512];

uint32_t cdcAvailable(void)
{
 8005c28:	b480      	push	{r7}
 8005c2a:	b083      	sub	sp, #12
 8005c2c:	af00      	add	r7, sp, #0
	uint32_t ret;

	ret = (rx_in - rx_out) % rx_len;
 8005c2e:	4b0a      	ldr	r3, [pc, #40]	; (8005c58 <cdcAvailable+0x30>)
 8005c30:	681a      	ldr	r2, [r3, #0]
 8005c32:	4b0a      	ldr	r3, [pc, #40]	; (8005c5c <cdcAvailable+0x34>)
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	1ad3      	subs	r3, r2, r3
 8005c38:	4a09      	ldr	r2, [pc, #36]	; (8005c60 <cdcAvailable+0x38>)
 8005c3a:	6812      	ldr	r2, [r2, #0]
 8005c3c:	fbb3 f1f2 	udiv	r1, r3, r2
 8005c40:	fb01 f202 	mul.w	r2, r1, r2
 8005c44:	1a9b      	subs	r3, r3, r2
 8005c46:	607b      	str	r3, [r7, #4]

	return ret;
 8005c48:	687b      	ldr	r3, [r7, #4]
}
 8005c4a:	4618      	mov	r0, r3
 8005c4c:	370c      	adds	r7, #12
 8005c4e:	46bd      	mov	sp, r7
 8005c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c54:	4770      	bx	lr
 8005c56:	bf00      	nop
 8005c58:	2000049c 	.word	0x2000049c
 8005c5c:	200004a0 	.word	0x200004a0
 8005c60:	20000140 	.word	0x20000140

08005c64 <cdcRead>:

uint8_t cdcRead(void)
{
 8005c64:	b480      	push	{r7}
 8005c66:	b083      	sub	sp, #12
 8005c68:	af00      	add	r7, sp, #0
	uint8_t ret;
	ret = rx_buf[rx_out];
 8005c6a:	4b0f      	ldr	r3, [pc, #60]	; (8005ca8 <cdcRead+0x44>)
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	4a0f      	ldr	r2, [pc, #60]	; (8005cac <cdcRead+0x48>)
 8005c70:	5cd3      	ldrb	r3, [r2, r3]
 8005c72:	71fb      	strb	r3, [r7, #7]

	if(rx_out != rx_in)
 8005c74:	4b0c      	ldr	r3, [pc, #48]	; (8005ca8 <cdcRead+0x44>)
 8005c76:	681a      	ldr	r2, [r3, #0]
 8005c78:	4b0d      	ldr	r3, [pc, #52]	; (8005cb0 <cdcRead+0x4c>)
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	429a      	cmp	r2, r3
 8005c7e:	d00b      	beq.n	8005c98 <cdcRead+0x34>
	{
		rx_out = (rx_out + 1) % rx_len;
 8005c80:	4b09      	ldr	r3, [pc, #36]	; (8005ca8 <cdcRead+0x44>)
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	3301      	adds	r3, #1
 8005c86:	4a0b      	ldr	r2, [pc, #44]	; (8005cb4 <cdcRead+0x50>)
 8005c88:	6812      	ldr	r2, [r2, #0]
 8005c8a:	fbb3 f1f2 	udiv	r1, r3, r2
 8005c8e:	fb01 f202 	mul.w	r2, r1, r2
 8005c92:	1a9b      	subs	r3, r3, r2
 8005c94:	4a04      	ldr	r2, [pc, #16]	; (8005ca8 <cdcRead+0x44>)
 8005c96:	6013      	str	r3, [r2, #0]
	}
	return ret;
 8005c98:	79fb      	ldrb	r3, [r7, #7]
}
 8005c9a:	4618      	mov	r0, r3
 8005c9c:	370c      	adds	r7, #12
 8005c9e:	46bd      	mov	sp, r7
 8005ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca4:	4770      	bx	lr
 8005ca6:	bf00      	nop
 8005ca8:	200004a0 	.word	0x200004a0
 8005cac:	200004a4 	.word	0x200004a4
 8005cb0:	2000049c 	.word	0x2000049c
 8005cb4:	20000140 	.word	0x20000140

08005cb8 <cdcDataIn>:

void cdcDataIn(uint8_t rx_data)
{
 8005cb8:	b480      	push	{r7}
 8005cba:	b085      	sub	sp, #20
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	4603      	mov	r3, r0
 8005cc0:	71fb      	strb	r3, [r7, #7]
	uint32_t next_rx_in;

	rx_buf[rx_in % rx_len] = rx_data;
 8005cc2:	4b12      	ldr	r3, [pc, #72]	; (8005d0c <cdcDataIn+0x54>)
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	4a12      	ldr	r2, [pc, #72]	; (8005d10 <cdcDataIn+0x58>)
 8005cc8:	6812      	ldr	r2, [r2, #0]
 8005cca:	fbb3 f1f2 	udiv	r1, r3, r2
 8005cce:	fb01 f202 	mul.w	r2, r1, r2
 8005cd2:	1a9b      	subs	r3, r3, r2
 8005cd4:	490f      	ldr	r1, [pc, #60]	; (8005d14 <cdcDataIn+0x5c>)
 8005cd6:	79fa      	ldrb	r2, [r7, #7]
 8005cd8:	54ca      	strb	r2, [r1, r3]

	next_rx_in = (rx_in + 1) % rx_len;
 8005cda:	4b0c      	ldr	r3, [pc, #48]	; (8005d0c <cdcDataIn+0x54>)
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	3301      	adds	r3, #1
 8005ce0:	4a0b      	ldr	r2, [pc, #44]	; (8005d10 <cdcDataIn+0x58>)
 8005ce2:	6812      	ldr	r2, [r2, #0]
 8005ce4:	fbb3 f1f2 	udiv	r1, r3, r2
 8005ce8:	fb01 f202 	mul.w	r2, r1, r2
 8005cec:	1a9b      	subs	r3, r3, r2
 8005cee:	60fb      	str	r3, [r7, #12]

	if(next_rx_in != rx_out)// 다음 증가할 in 인덱스가 out과 다를시
 8005cf0:	4b09      	ldr	r3, [pc, #36]	; (8005d18 <cdcDataIn+0x60>)
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	68fa      	ldr	r2, [r7, #12]
 8005cf6:	429a      	cmp	r2, r3
 8005cf8:	d002      	beq.n	8005d00 <cdcDataIn+0x48>
	{
		rx_in = next_rx_in;
 8005cfa:	4a04      	ldr	r2, [pc, #16]	; (8005d0c <cdcDataIn+0x54>)
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	6013      	str	r3, [r2, #0]
	}
}
 8005d00:	bf00      	nop
 8005d02:	3714      	adds	r7, #20
 8005d04:	46bd      	mov	sp, r7
 8005d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d0a:	4770      	bx	lr
 8005d0c:	2000049c 	.word	0x2000049c
 8005d10:	20000140 	.word	0x20000140
 8005d14:	200004a4 	.word	0x200004a4
 8005d18:	200004a0 	.word	0x200004a0

08005d1c <cdcWrite>:
uint32_t cdcWrite(uint8_t *pData, uint32_t length)
{
 8005d1c:	b580      	push	{r7, lr}
 8005d1e:	b084      	sub	sp, #16
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	6078      	str	r0, [r7, #4]
 8005d24:	6039      	str	r1, [r7, #0]
	 * */

	uint32_t pre_time;
	uint8_t ret;

	pre_time = millis();
 8005d26:	f7fa fc86 	bl	8000636 <millis>
 8005d2a:	60f8      	str	r0, [r7, #12]
	ret = CDC_Transmit_FS(pData, length);
 8005d2c:	683b      	ldr	r3, [r7, #0]
 8005d2e:	b29b      	uxth	r3, r3
 8005d30:	4619      	mov	r1, r3
 8005d32:	6878      	ldr	r0, [r7, #4]
 8005d34:	f000 f8bc 	bl	8005eb0 <CDC_Transmit_FS>
 8005d38:	4603      	mov	r3, r0
 8005d3a:	72fb      	strb	r3, [r7, #11]
	while(1)
	{
		//ret = CDC_Transmit_FS(pData, length);

		if(ret == USBD_OK)
 8005d3c:	7afb      	ldrb	r3, [r7, #11]
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d101      	bne.n	8005d46 <cdcWrite+0x2a>
		{
			return length;
 8005d42:	683b      	ldr	r3, [r7, #0]
 8005d44:	e010      	b.n	8005d68 <cdcWrite+0x4c>
		}
		else if(ret == USBD_FAIL)
 8005d46:	7afb      	ldrb	r3, [r7, #11]
 8005d48:	2b03      	cmp	r3, #3
 8005d4a:	d101      	bne.n	8005d50 <cdcWrite+0x34>
		{
			return 0;
 8005d4c:	2300      	movs	r3, #0
 8005d4e:	e00b      	b.n	8005d68 <cdcWrite+0x4c>
		}

		if(millis() - pre_time >= 5000)
 8005d50:	f7fa fc71 	bl	8000636 <millis>
 8005d54:	4602      	mov	r2, r0
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	1ad3      	subs	r3, r2, r3
 8005d5a:	f241 3287 	movw	r2, #4999	; 0x1387
 8005d5e:	4293      	cmp	r3, r2
 8005d60:	d800      	bhi.n	8005d64 <cdcWrite+0x48>
		if(ret == USBD_OK)
 8005d62:	e7eb      	b.n	8005d3c <cdcWrite+0x20>
		{
			break;
 8005d64:	bf00      	nop
		}

	}
	return 0;
 8005d66:	2300      	movs	r3, #0
}
 8005d68:	4618      	mov	r0, r3
 8005d6a:	3710      	adds	r7, #16
 8005d6c:	46bd      	mov	sp, r7
 8005d6e:	bd80      	pop	{r7, pc}

08005d70 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8005d70:	b580      	push	{r7, lr}
 8005d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8005d74:	2200      	movs	r2, #0
 8005d76:	4905      	ldr	r1, [pc, #20]	; (8005d8c <CDC_Init_FS+0x1c>)
 8005d78:	4805      	ldr	r0, [pc, #20]	; (8005d90 <CDC_Init_FS+0x20>)
 8005d7a:	f7fe fd2a 	bl	80047d2 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8005d7e:	4905      	ldr	r1, [pc, #20]	; (8005d94 <CDC_Init_FS+0x24>)
 8005d80:	4803      	ldr	r0, [pc, #12]	; (8005d90 <CDC_Init_FS+0x20>)
 8005d82:	f7fe fd44 	bl	800480e <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8005d86:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8005d88:	4618      	mov	r0, r3
 8005d8a:	bd80      	pop	{r7, pc}
 8005d8c:	20000aa4 	.word	0x20000aa4
 8005d90:	200001cc 	.word	0x200001cc
 8005d94:	200006a4 	.word	0x200006a4

08005d98 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8005d98:	b480      	push	{r7}
 8005d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8005d9c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8005d9e:	4618      	mov	r0, r3
 8005da0:	46bd      	mov	sp, r7
 8005da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da6:	4770      	bx	lr

08005da8 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8005da8:	b480      	push	{r7}
 8005daa:	b083      	sub	sp, #12
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	4603      	mov	r3, r0
 8005db0:	6039      	str	r1, [r7, #0]
 8005db2:	71fb      	strb	r3, [r7, #7]
 8005db4:	4613      	mov	r3, r2
 8005db6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8005db8:	79fb      	ldrb	r3, [r7, #7]
 8005dba:	2b23      	cmp	r3, #35	; 0x23
 8005dbc:	d84a      	bhi.n	8005e54 <CDC_Control_FS+0xac>
 8005dbe:	a201      	add	r2, pc, #4	; (adr r2, 8005dc4 <CDC_Control_FS+0x1c>)
 8005dc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dc4:	08005e55 	.word	0x08005e55
 8005dc8:	08005e55 	.word	0x08005e55
 8005dcc:	08005e55 	.word	0x08005e55
 8005dd0:	08005e55 	.word	0x08005e55
 8005dd4:	08005e55 	.word	0x08005e55
 8005dd8:	08005e55 	.word	0x08005e55
 8005ddc:	08005e55 	.word	0x08005e55
 8005de0:	08005e55 	.word	0x08005e55
 8005de4:	08005e55 	.word	0x08005e55
 8005de8:	08005e55 	.word	0x08005e55
 8005dec:	08005e55 	.word	0x08005e55
 8005df0:	08005e55 	.word	0x08005e55
 8005df4:	08005e55 	.word	0x08005e55
 8005df8:	08005e55 	.word	0x08005e55
 8005dfc:	08005e55 	.word	0x08005e55
 8005e00:	08005e55 	.word	0x08005e55
 8005e04:	08005e55 	.word	0x08005e55
 8005e08:	08005e55 	.word	0x08005e55
 8005e0c:	08005e55 	.word	0x08005e55
 8005e10:	08005e55 	.word	0x08005e55
 8005e14:	08005e55 	.word	0x08005e55
 8005e18:	08005e55 	.word	0x08005e55
 8005e1c:	08005e55 	.word	0x08005e55
 8005e20:	08005e55 	.word	0x08005e55
 8005e24:	08005e55 	.word	0x08005e55
 8005e28:	08005e55 	.word	0x08005e55
 8005e2c:	08005e55 	.word	0x08005e55
 8005e30:	08005e55 	.word	0x08005e55
 8005e34:	08005e55 	.word	0x08005e55
 8005e38:	08005e55 	.word	0x08005e55
 8005e3c:	08005e55 	.word	0x08005e55
 8005e40:	08005e55 	.word	0x08005e55
 8005e44:	08005e55 	.word	0x08005e55
 8005e48:	08005e55 	.word	0x08005e55
 8005e4c:	08005e55 	.word	0x08005e55
 8005e50:	08005e55 	.word	0x08005e55
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8005e54:	bf00      	nop
  }

  return (USBD_OK);
 8005e56:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8005e58:	4618      	mov	r0, r3
 8005e5a:	370c      	adds	r7, #12
 8005e5c:	46bd      	mov	sp, r7
 8005e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e62:	4770      	bx	lr

08005e64 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8005e64:	b580      	push	{r7, lr}
 8005e66:	b084      	sub	sp, #16
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	6078      	str	r0, [r7, #4]
 8005e6c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8005e6e:	6879      	ldr	r1, [r7, #4]
 8005e70:	480e      	ldr	r0, [pc, #56]	; (8005eac <CDC_Receive_FS+0x48>)
 8005e72:	f7fe fccc 	bl	800480e <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8005e76:	480d      	ldr	r0, [pc, #52]	; (8005eac <CDC_Receive_FS+0x48>)
 8005e78:	f7fe fd12 	bl	80048a0 <USBD_CDC_ReceivePacket>

  for(int i = 0 ; i < *Len ; i++)
 8005e7c:	2300      	movs	r3, #0
 8005e7e:	60fb      	str	r3, [r7, #12]
 8005e80:	e009      	b.n	8005e96 <CDC_Receive_FS+0x32>
  {
  	cdcDataIn(Buf[i]);// 인터럽트 발생시 data in
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	687a      	ldr	r2, [r7, #4]
 8005e86:	4413      	add	r3, r2
 8005e88:	781b      	ldrb	r3, [r3, #0]
 8005e8a:	4618      	mov	r0, r3
 8005e8c:	f7ff ff14 	bl	8005cb8 <cdcDataIn>
  for(int i = 0 ; i < *Len ; i++)
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	3301      	adds	r3, #1
 8005e94:	60fb      	str	r3, [r7, #12]
 8005e96:	683b      	ldr	r3, [r7, #0]
 8005e98:	681a      	ldr	r2, [r3, #0]
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	429a      	cmp	r2, r3
 8005e9e:	d8f0      	bhi.n	8005e82 <CDC_Receive_FS+0x1e>
  }
  return (USBD_OK);
 8005ea0:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8005ea2:	4618      	mov	r0, r3
 8005ea4:	3710      	adds	r7, #16
 8005ea6:	46bd      	mov	sp, r7
 8005ea8:	bd80      	pop	{r7, pc}
 8005eaa:	bf00      	nop
 8005eac:	200001cc 	.word	0x200001cc

08005eb0 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8005eb0:	b580      	push	{r7, lr}
 8005eb2:	b084      	sub	sp, #16
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	6078      	str	r0, [r7, #4]
 8005eb8:	460b      	mov	r3, r1
 8005eba:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8005ebc:	2300      	movs	r3, #0
 8005ebe:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8005ec0:	4b0d      	ldr	r3, [pc, #52]	; (8005ef8 <CDC_Transmit_FS+0x48>)
 8005ec2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005ec6:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8005ec8:	68bb      	ldr	r3, [r7, #8]
 8005eca:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d001      	beq.n	8005ed6 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8005ed2:	2301      	movs	r3, #1
 8005ed4:	e00b      	b.n	8005eee <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8005ed6:	887b      	ldrh	r3, [r7, #2]
 8005ed8:	461a      	mov	r2, r3
 8005eda:	6879      	ldr	r1, [r7, #4]
 8005edc:	4806      	ldr	r0, [pc, #24]	; (8005ef8 <CDC_Transmit_FS+0x48>)
 8005ede:	f7fe fc78 	bl	80047d2 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8005ee2:	4805      	ldr	r0, [pc, #20]	; (8005ef8 <CDC_Transmit_FS+0x48>)
 8005ee4:	f7fe fcac 	bl	8004840 <USBD_CDC_TransmitPacket>
 8005ee8:	4603      	mov	r3, r0
 8005eea:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8005eec:	7bfb      	ldrb	r3, [r7, #15]
}
 8005eee:	4618      	mov	r0, r3
 8005ef0:	3710      	adds	r7, #16
 8005ef2:	46bd      	mov	sp, r7
 8005ef4:	bd80      	pop	{r7, pc}
 8005ef6:	bf00      	nop
 8005ef8:	200001cc 	.word	0x200001cc

08005efc <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8005efc:	b480      	push	{r7}
 8005efe:	b087      	sub	sp, #28
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	60f8      	str	r0, [r7, #12]
 8005f04:	60b9      	str	r1, [r7, #8]
 8005f06:	4613      	mov	r3, r2
 8005f08:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8005f0a:	2300      	movs	r3, #0
 8005f0c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8005f0e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005f12:	4618      	mov	r0, r3
 8005f14:	371c      	adds	r7, #28
 8005f16:	46bd      	mov	sp, r7
 8005f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f1c:	4770      	bx	lr
	...

08005f20 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005f20:	b480      	push	{r7}
 8005f22:	b083      	sub	sp, #12
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	4603      	mov	r3, r0
 8005f28:	6039      	str	r1, [r7, #0]
 8005f2a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8005f2c:	683b      	ldr	r3, [r7, #0]
 8005f2e:	2212      	movs	r2, #18
 8005f30:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8005f32:	4b03      	ldr	r3, [pc, #12]	; (8005f40 <USBD_FS_DeviceDescriptor+0x20>)
}
 8005f34:	4618      	mov	r0, r3
 8005f36:	370c      	adds	r7, #12
 8005f38:	46bd      	mov	sp, r7
 8005f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f3e:	4770      	bx	lr
 8005f40:	20000174 	.word	0x20000174

08005f44 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005f44:	b480      	push	{r7}
 8005f46:	b083      	sub	sp, #12
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	4603      	mov	r3, r0
 8005f4c:	6039      	str	r1, [r7, #0]
 8005f4e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8005f50:	683b      	ldr	r3, [r7, #0]
 8005f52:	2204      	movs	r2, #4
 8005f54:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8005f56:	4b03      	ldr	r3, [pc, #12]	; (8005f64 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8005f58:	4618      	mov	r0, r3
 8005f5a:	370c      	adds	r7, #12
 8005f5c:	46bd      	mov	sp, r7
 8005f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f62:	4770      	bx	lr
 8005f64:	20000188 	.word	0x20000188

08005f68 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005f68:	b580      	push	{r7, lr}
 8005f6a:	b082      	sub	sp, #8
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	4603      	mov	r3, r0
 8005f70:	6039      	str	r1, [r7, #0]
 8005f72:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8005f74:	79fb      	ldrb	r3, [r7, #7]
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d105      	bne.n	8005f86 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8005f7a:	683a      	ldr	r2, [r7, #0]
 8005f7c:	4907      	ldr	r1, [pc, #28]	; (8005f9c <USBD_FS_ProductStrDescriptor+0x34>)
 8005f7e:	4808      	ldr	r0, [pc, #32]	; (8005fa0 <USBD_FS_ProductStrDescriptor+0x38>)
 8005f80:	f7ff fd41 	bl	8005a06 <USBD_GetString>
 8005f84:	e004      	b.n	8005f90 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8005f86:	683a      	ldr	r2, [r7, #0]
 8005f88:	4904      	ldr	r1, [pc, #16]	; (8005f9c <USBD_FS_ProductStrDescriptor+0x34>)
 8005f8a:	4805      	ldr	r0, [pc, #20]	; (8005fa0 <USBD_FS_ProductStrDescriptor+0x38>)
 8005f8c:	f7ff fd3b 	bl	8005a06 <USBD_GetString>
  }
  return USBD_StrDesc;
 8005f90:	4b02      	ldr	r3, [pc, #8]	; (8005f9c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8005f92:	4618      	mov	r0, r3
 8005f94:	3708      	adds	r7, #8
 8005f96:	46bd      	mov	sp, r7
 8005f98:	bd80      	pop	{r7, pc}
 8005f9a:	bf00      	nop
 8005f9c:	20000ea4 	.word	0x20000ea4
 8005fa0:	080067ec 	.word	0x080067ec

08005fa4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005fa4:	b580      	push	{r7, lr}
 8005fa6:	b082      	sub	sp, #8
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	4603      	mov	r3, r0
 8005fac:	6039      	str	r1, [r7, #0]
 8005fae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8005fb0:	683a      	ldr	r2, [r7, #0]
 8005fb2:	4904      	ldr	r1, [pc, #16]	; (8005fc4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8005fb4:	4804      	ldr	r0, [pc, #16]	; (8005fc8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8005fb6:	f7ff fd26 	bl	8005a06 <USBD_GetString>
  return USBD_StrDesc;
 8005fba:	4b02      	ldr	r3, [pc, #8]	; (8005fc4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8005fbc:	4618      	mov	r0, r3
 8005fbe:	3708      	adds	r7, #8
 8005fc0:	46bd      	mov	sp, r7
 8005fc2:	bd80      	pop	{r7, pc}
 8005fc4:	20000ea4 	.word	0x20000ea4
 8005fc8:	08006804 	.word	0x08006804

08005fcc <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005fcc:	b580      	push	{r7, lr}
 8005fce:	b082      	sub	sp, #8
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	4603      	mov	r3, r0
 8005fd4:	6039      	str	r1, [r7, #0]
 8005fd6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8005fd8:	683b      	ldr	r3, [r7, #0]
 8005fda:	221a      	movs	r2, #26
 8005fdc:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8005fde:	f000 f843 	bl	8006068 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8005fe2:	4b02      	ldr	r3, [pc, #8]	; (8005fec <USBD_FS_SerialStrDescriptor+0x20>)
}
 8005fe4:	4618      	mov	r0, r3
 8005fe6:	3708      	adds	r7, #8
 8005fe8:	46bd      	mov	sp, r7
 8005fea:	bd80      	pop	{r7, pc}
 8005fec:	2000018c 	.word	0x2000018c

08005ff0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005ff0:	b580      	push	{r7, lr}
 8005ff2:	b082      	sub	sp, #8
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	4603      	mov	r3, r0
 8005ff8:	6039      	str	r1, [r7, #0]
 8005ffa:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8005ffc:	79fb      	ldrb	r3, [r7, #7]
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d105      	bne.n	800600e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006002:	683a      	ldr	r2, [r7, #0]
 8006004:	4907      	ldr	r1, [pc, #28]	; (8006024 <USBD_FS_ConfigStrDescriptor+0x34>)
 8006006:	4808      	ldr	r0, [pc, #32]	; (8006028 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006008:	f7ff fcfd 	bl	8005a06 <USBD_GetString>
 800600c:	e004      	b.n	8006018 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800600e:	683a      	ldr	r2, [r7, #0]
 8006010:	4904      	ldr	r1, [pc, #16]	; (8006024 <USBD_FS_ConfigStrDescriptor+0x34>)
 8006012:	4805      	ldr	r0, [pc, #20]	; (8006028 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006014:	f7ff fcf7 	bl	8005a06 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006018:	4b02      	ldr	r3, [pc, #8]	; (8006024 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800601a:	4618      	mov	r0, r3
 800601c:	3708      	adds	r7, #8
 800601e:	46bd      	mov	sp, r7
 8006020:	bd80      	pop	{r7, pc}
 8006022:	bf00      	nop
 8006024:	20000ea4 	.word	0x20000ea4
 8006028:	08006818 	.word	0x08006818

0800602c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800602c:	b580      	push	{r7, lr}
 800602e:	b082      	sub	sp, #8
 8006030:	af00      	add	r7, sp, #0
 8006032:	4603      	mov	r3, r0
 8006034:	6039      	str	r1, [r7, #0]
 8006036:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006038:	79fb      	ldrb	r3, [r7, #7]
 800603a:	2b00      	cmp	r3, #0
 800603c:	d105      	bne.n	800604a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800603e:	683a      	ldr	r2, [r7, #0]
 8006040:	4907      	ldr	r1, [pc, #28]	; (8006060 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006042:	4808      	ldr	r0, [pc, #32]	; (8006064 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006044:	f7ff fcdf 	bl	8005a06 <USBD_GetString>
 8006048:	e004      	b.n	8006054 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800604a:	683a      	ldr	r2, [r7, #0]
 800604c:	4904      	ldr	r1, [pc, #16]	; (8006060 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800604e:	4805      	ldr	r0, [pc, #20]	; (8006064 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006050:	f7ff fcd9 	bl	8005a06 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006054:	4b02      	ldr	r3, [pc, #8]	; (8006060 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8006056:	4618      	mov	r0, r3
 8006058:	3708      	adds	r7, #8
 800605a:	46bd      	mov	sp, r7
 800605c:	bd80      	pop	{r7, pc}
 800605e:	bf00      	nop
 8006060:	20000ea4 	.word	0x20000ea4
 8006064:	08006824 	.word	0x08006824

08006068 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8006068:	b580      	push	{r7, lr}
 800606a:	b084      	sub	sp, #16
 800606c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800606e:	4b0f      	ldr	r3, [pc, #60]	; (80060ac <Get_SerialNum+0x44>)
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8006074:	4b0e      	ldr	r3, [pc, #56]	; (80060b0 <Get_SerialNum+0x48>)
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800607a:	4b0e      	ldr	r3, [pc, #56]	; (80060b4 <Get_SerialNum+0x4c>)
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8006080:	68fa      	ldr	r2, [r7, #12]
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	4413      	add	r3, r2
 8006086:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	2b00      	cmp	r3, #0
 800608c:	d009      	beq.n	80060a2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800608e:	2208      	movs	r2, #8
 8006090:	4909      	ldr	r1, [pc, #36]	; (80060b8 <Get_SerialNum+0x50>)
 8006092:	68f8      	ldr	r0, [r7, #12]
 8006094:	f000 f814 	bl	80060c0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8006098:	2204      	movs	r2, #4
 800609a:	4908      	ldr	r1, [pc, #32]	; (80060bc <Get_SerialNum+0x54>)
 800609c:	68b8      	ldr	r0, [r7, #8]
 800609e:	f000 f80f 	bl	80060c0 <IntToUnicode>
  }
}
 80060a2:	bf00      	nop
 80060a4:	3710      	adds	r7, #16
 80060a6:	46bd      	mov	sp, r7
 80060a8:	bd80      	pop	{r7, pc}
 80060aa:	bf00      	nop
 80060ac:	1fff7a10 	.word	0x1fff7a10
 80060b0:	1fff7a14 	.word	0x1fff7a14
 80060b4:	1fff7a18 	.word	0x1fff7a18
 80060b8:	2000018e 	.word	0x2000018e
 80060bc:	2000019e 	.word	0x2000019e

080060c0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80060c0:	b480      	push	{r7}
 80060c2:	b087      	sub	sp, #28
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	60f8      	str	r0, [r7, #12]
 80060c8:	60b9      	str	r1, [r7, #8]
 80060ca:	4613      	mov	r3, r2
 80060cc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80060ce:	2300      	movs	r3, #0
 80060d0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80060d2:	2300      	movs	r3, #0
 80060d4:	75fb      	strb	r3, [r7, #23]
 80060d6:	e027      	b.n	8006128 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	0f1b      	lsrs	r3, r3, #28
 80060dc:	2b09      	cmp	r3, #9
 80060de:	d80b      	bhi.n	80060f8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	0f1b      	lsrs	r3, r3, #28
 80060e4:	b2da      	uxtb	r2, r3
 80060e6:	7dfb      	ldrb	r3, [r7, #23]
 80060e8:	005b      	lsls	r3, r3, #1
 80060ea:	4619      	mov	r1, r3
 80060ec:	68bb      	ldr	r3, [r7, #8]
 80060ee:	440b      	add	r3, r1
 80060f0:	3230      	adds	r2, #48	; 0x30
 80060f2:	b2d2      	uxtb	r2, r2
 80060f4:	701a      	strb	r2, [r3, #0]
 80060f6:	e00a      	b.n	800610e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	0f1b      	lsrs	r3, r3, #28
 80060fc:	b2da      	uxtb	r2, r3
 80060fe:	7dfb      	ldrb	r3, [r7, #23]
 8006100:	005b      	lsls	r3, r3, #1
 8006102:	4619      	mov	r1, r3
 8006104:	68bb      	ldr	r3, [r7, #8]
 8006106:	440b      	add	r3, r1
 8006108:	3237      	adds	r2, #55	; 0x37
 800610a:	b2d2      	uxtb	r2, r2
 800610c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	011b      	lsls	r3, r3, #4
 8006112:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8006114:	7dfb      	ldrb	r3, [r7, #23]
 8006116:	005b      	lsls	r3, r3, #1
 8006118:	3301      	adds	r3, #1
 800611a:	68ba      	ldr	r2, [r7, #8]
 800611c:	4413      	add	r3, r2
 800611e:	2200      	movs	r2, #0
 8006120:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8006122:	7dfb      	ldrb	r3, [r7, #23]
 8006124:	3301      	adds	r3, #1
 8006126:	75fb      	strb	r3, [r7, #23]
 8006128:	7dfa      	ldrb	r2, [r7, #23]
 800612a:	79fb      	ldrb	r3, [r7, #7]
 800612c:	429a      	cmp	r2, r3
 800612e:	d3d3      	bcc.n	80060d8 <IntToUnicode+0x18>
  }
}
 8006130:	bf00      	nop
 8006132:	bf00      	nop
 8006134:	371c      	adds	r7, #28
 8006136:	46bd      	mov	sp, r7
 8006138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800613c:	4770      	bx	lr
	...

08006140 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8006140:	b580      	push	{r7, lr}
 8006142:	b08a      	sub	sp, #40	; 0x28
 8006144:	af00      	add	r7, sp, #0
 8006146:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006148:	f107 0314 	add.w	r3, r7, #20
 800614c:	2200      	movs	r2, #0
 800614e:	601a      	str	r2, [r3, #0]
 8006150:	605a      	str	r2, [r3, #4]
 8006152:	609a      	str	r2, [r3, #8]
 8006154:	60da      	str	r2, [r3, #12]
 8006156:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006160:	d13a      	bne.n	80061d8 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006162:	2300      	movs	r3, #0
 8006164:	613b      	str	r3, [r7, #16]
 8006166:	4b1e      	ldr	r3, [pc, #120]	; (80061e0 <HAL_PCD_MspInit+0xa0>)
 8006168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800616a:	4a1d      	ldr	r2, [pc, #116]	; (80061e0 <HAL_PCD_MspInit+0xa0>)
 800616c:	f043 0301 	orr.w	r3, r3, #1
 8006170:	6313      	str	r3, [r2, #48]	; 0x30
 8006172:	4b1b      	ldr	r3, [pc, #108]	; (80061e0 <HAL_PCD_MspInit+0xa0>)
 8006174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006176:	f003 0301 	and.w	r3, r3, #1
 800617a:	613b      	str	r3, [r7, #16]
 800617c:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800617e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8006182:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006184:	2302      	movs	r3, #2
 8006186:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006188:	2300      	movs	r3, #0
 800618a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800618c:	2303      	movs	r3, #3
 800618e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8006190:	230a      	movs	r3, #10
 8006192:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006194:	f107 0314 	add.w	r3, r7, #20
 8006198:	4619      	mov	r1, r3
 800619a:	4812      	ldr	r0, [pc, #72]	; (80061e4 <HAL_PCD_MspInit+0xa4>)
 800619c:	f7fa fda0 	bl	8000ce0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80061a0:	4b0f      	ldr	r3, [pc, #60]	; (80061e0 <HAL_PCD_MspInit+0xa0>)
 80061a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061a4:	4a0e      	ldr	r2, [pc, #56]	; (80061e0 <HAL_PCD_MspInit+0xa0>)
 80061a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80061aa:	6353      	str	r3, [r2, #52]	; 0x34
 80061ac:	2300      	movs	r3, #0
 80061ae:	60fb      	str	r3, [r7, #12]
 80061b0:	4b0b      	ldr	r3, [pc, #44]	; (80061e0 <HAL_PCD_MspInit+0xa0>)
 80061b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061b4:	4a0a      	ldr	r2, [pc, #40]	; (80061e0 <HAL_PCD_MspInit+0xa0>)
 80061b6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80061ba:	6453      	str	r3, [r2, #68]	; 0x44
 80061bc:	4b08      	ldr	r3, [pc, #32]	; (80061e0 <HAL_PCD_MspInit+0xa0>)
 80061be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80061c4:	60fb      	str	r3, [r7, #12]
 80061c6:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80061c8:	2200      	movs	r2, #0
 80061ca:	2100      	movs	r1, #0
 80061cc:	2043      	movs	r0, #67	; 0x43
 80061ce:	f7fa fd50 	bl	8000c72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80061d2:	2043      	movs	r0, #67	; 0x43
 80061d4:	f7fa fd69 	bl	8000caa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80061d8:	bf00      	nop
 80061da:	3728      	adds	r7, #40	; 0x28
 80061dc:	46bd      	mov	sp, r7
 80061de:	bd80      	pop	{r7, pc}
 80061e0:	40023800 	.word	0x40023800
 80061e4:	40020000 	.word	0x40020000

080061e8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80061e8:	b580      	push	{r7, lr}
 80061ea:	b082      	sub	sp, #8
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80061fc:	4619      	mov	r1, r3
 80061fe:	4610      	mov	r0, r2
 8006200:	f7fe fc1a 	bl	8004a38 <USBD_LL_SetupStage>
}
 8006204:	bf00      	nop
 8006206:	3708      	adds	r7, #8
 8006208:	46bd      	mov	sp, r7
 800620a:	bd80      	pop	{r7, pc}

0800620c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800620c:	b580      	push	{r7, lr}
 800620e:	b082      	sub	sp, #8
 8006210:	af00      	add	r7, sp, #0
 8006212:	6078      	str	r0, [r7, #4]
 8006214:	460b      	mov	r3, r1
 8006216:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800621e:	78fa      	ldrb	r2, [r7, #3]
 8006220:	6879      	ldr	r1, [r7, #4]
 8006222:	4613      	mov	r3, r2
 8006224:	00db      	lsls	r3, r3, #3
 8006226:	1a9b      	subs	r3, r3, r2
 8006228:	009b      	lsls	r3, r3, #2
 800622a:	440b      	add	r3, r1
 800622c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8006230:	681a      	ldr	r2, [r3, #0]
 8006232:	78fb      	ldrb	r3, [r7, #3]
 8006234:	4619      	mov	r1, r3
 8006236:	f7fe fc54 	bl	8004ae2 <USBD_LL_DataOutStage>
}
 800623a:	bf00      	nop
 800623c:	3708      	adds	r7, #8
 800623e:	46bd      	mov	sp, r7
 8006240:	bd80      	pop	{r7, pc}

08006242 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006242:	b580      	push	{r7, lr}
 8006244:	b082      	sub	sp, #8
 8006246:	af00      	add	r7, sp, #0
 8006248:	6078      	str	r0, [r7, #4]
 800624a:	460b      	mov	r3, r1
 800624c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8006254:	78fa      	ldrb	r2, [r7, #3]
 8006256:	6879      	ldr	r1, [r7, #4]
 8006258:	4613      	mov	r3, r2
 800625a:	00db      	lsls	r3, r3, #3
 800625c:	1a9b      	subs	r3, r3, r2
 800625e:	009b      	lsls	r3, r3, #2
 8006260:	440b      	add	r3, r1
 8006262:	3348      	adds	r3, #72	; 0x48
 8006264:	681a      	ldr	r2, [r3, #0]
 8006266:	78fb      	ldrb	r3, [r7, #3]
 8006268:	4619      	mov	r1, r3
 800626a:	f7fe fc9d 	bl	8004ba8 <USBD_LL_DataInStage>
}
 800626e:	bf00      	nop
 8006270:	3708      	adds	r7, #8
 8006272:	46bd      	mov	sp, r7
 8006274:	bd80      	pop	{r7, pc}

08006276 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006276:	b580      	push	{r7, lr}
 8006278:	b082      	sub	sp, #8
 800627a:	af00      	add	r7, sp, #0
 800627c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006284:	4618      	mov	r0, r3
 8006286:	f7fe fdb1 	bl	8004dec <USBD_LL_SOF>
}
 800628a:	bf00      	nop
 800628c:	3708      	adds	r7, #8
 800628e:	46bd      	mov	sp, r7
 8006290:	bd80      	pop	{r7, pc}

08006292 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006292:	b580      	push	{r7, lr}
 8006294:	b084      	sub	sp, #16
 8006296:	af00      	add	r7, sp, #0
 8006298:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800629a:	2301      	movs	r3, #1
 800629c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	68db      	ldr	r3, [r3, #12]
 80062a2:	2b02      	cmp	r3, #2
 80062a4:	d001      	beq.n	80062aa <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80062a6:	f7fa fa35 	bl	8000714 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80062b0:	7bfa      	ldrb	r2, [r7, #15]
 80062b2:	4611      	mov	r1, r2
 80062b4:	4618      	mov	r0, r3
 80062b6:	f7fe fd5b 	bl	8004d70 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80062c0:	4618      	mov	r0, r3
 80062c2:	f7fe fd07 	bl	8004cd4 <USBD_LL_Reset>
}
 80062c6:	bf00      	nop
 80062c8:	3710      	adds	r7, #16
 80062ca:	46bd      	mov	sp, r7
 80062cc:	bd80      	pop	{r7, pc}
	...

080062d0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80062d0:	b580      	push	{r7, lr}
 80062d2:	b082      	sub	sp, #8
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80062de:	4618      	mov	r0, r3
 80062e0:	f7fe fd56 	bl	8004d90 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	687a      	ldr	r2, [r7, #4]
 80062f0:	6812      	ldr	r2, [r2, #0]
 80062f2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80062f6:	f043 0301 	orr.w	r3, r3, #1
 80062fa:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	6a1b      	ldr	r3, [r3, #32]
 8006300:	2b00      	cmp	r3, #0
 8006302:	d005      	beq.n	8006310 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8006304:	4b04      	ldr	r3, [pc, #16]	; (8006318 <HAL_PCD_SuspendCallback+0x48>)
 8006306:	691b      	ldr	r3, [r3, #16]
 8006308:	4a03      	ldr	r2, [pc, #12]	; (8006318 <HAL_PCD_SuspendCallback+0x48>)
 800630a:	f043 0306 	orr.w	r3, r3, #6
 800630e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8006310:	bf00      	nop
 8006312:	3708      	adds	r7, #8
 8006314:	46bd      	mov	sp, r7
 8006316:	bd80      	pop	{r7, pc}
 8006318:	e000ed00 	.word	0xe000ed00

0800631c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800631c:	b580      	push	{r7, lr}
 800631e:	b082      	sub	sp, #8
 8006320:	af00      	add	r7, sp, #0
 8006322:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800632a:	4618      	mov	r0, r3
 800632c:	f7fe fd46 	bl	8004dbc <USBD_LL_Resume>
}
 8006330:	bf00      	nop
 8006332:	3708      	adds	r7, #8
 8006334:	46bd      	mov	sp, r7
 8006336:	bd80      	pop	{r7, pc}

08006338 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006338:	b580      	push	{r7, lr}
 800633a:	b082      	sub	sp, #8
 800633c:	af00      	add	r7, sp, #0
 800633e:	6078      	str	r0, [r7, #4]
 8006340:	460b      	mov	r3, r1
 8006342:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800634a:	78fa      	ldrb	r2, [r7, #3]
 800634c:	4611      	mov	r1, r2
 800634e:	4618      	mov	r0, r3
 8006350:	f7fe fd94 	bl	8004e7c <USBD_LL_IsoOUTIncomplete>
}
 8006354:	bf00      	nop
 8006356:	3708      	adds	r7, #8
 8006358:	46bd      	mov	sp, r7
 800635a:	bd80      	pop	{r7, pc}

0800635c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800635c:	b580      	push	{r7, lr}
 800635e:	b082      	sub	sp, #8
 8006360:	af00      	add	r7, sp, #0
 8006362:	6078      	str	r0, [r7, #4]
 8006364:	460b      	mov	r3, r1
 8006366:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800636e:	78fa      	ldrb	r2, [r7, #3]
 8006370:	4611      	mov	r1, r2
 8006372:	4618      	mov	r0, r3
 8006374:	f7fe fd5c 	bl	8004e30 <USBD_LL_IsoINIncomplete>
}
 8006378:	bf00      	nop
 800637a:	3708      	adds	r7, #8
 800637c:	46bd      	mov	sp, r7
 800637e:	bd80      	pop	{r7, pc}

08006380 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006380:	b580      	push	{r7, lr}
 8006382:	b082      	sub	sp, #8
 8006384:	af00      	add	r7, sp, #0
 8006386:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800638e:	4618      	mov	r0, r3
 8006390:	f7fe fd9a 	bl	8004ec8 <USBD_LL_DevConnected>
}
 8006394:	bf00      	nop
 8006396:	3708      	adds	r7, #8
 8006398:	46bd      	mov	sp, r7
 800639a:	bd80      	pop	{r7, pc}

0800639c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800639c:	b580      	push	{r7, lr}
 800639e:	b082      	sub	sp, #8
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80063aa:	4618      	mov	r0, r3
 80063ac:	f7fe fd97 	bl	8004ede <USBD_LL_DevDisconnected>
}
 80063b0:	bf00      	nop
 80063b2:	3708      	adds	r7, #8
 80063b4:	46bd      	mov	sp, r7
 80063b6:	bd80      	pop	{r7, pc}

080063b8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80063b8:	b580      	push	{r7, lr}
 80063ba:	b082      	sub	sp, #8
 80063bc:	af00      	add	r7, sp, #0
 80063be:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	781b      	ldrb	r3, [r3, #0]
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d13c      	bne.n	8006442 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80063c8:	4a20      	ldr	r2, [pc, #128]	; (800644c <USBD_LL_Init+0x94>)
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	4a1e      	ldr	r2, [pc, #120]	; (800644c <USBD_LL_Init+0x94>)
 80063d4:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80063d8:	4b1c      	ldr	r3, [pc, #112]	; (800644c <USBD_LL_Init+0x94>)
 80063da:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80063de:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80063e0:	4b1a      	ldr	r3, [pc, #104]	; (800644c <USBD_LL_Init+0x94>)
 80063e2:	2204      	movs	r2, #4
 80063e4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80063e6:	4b19      	ldr	r3, [pc, #100]	; (800644c <USBD_LL_Init+0x94>)
 80063e8:	2202      	movs	r2, #2
 80063ea:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80063ec:	4b17      	ldr	r3, [pc, #92]	; (800644c <USBD_LL_Init+0x94>)
 80063ee:	2200      	movs	r2, #0
 80063f0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80063f2:	4b16      	ldr	r3, [pc, #88]	; (800644c <USBD_LL_Init+0x94>)
 80063f4:	2202      	movs	r2, #2
 80063f6:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80063f8:	4b14      	ldr	r3, [pc, #80]	; (800644c <USBD_LL_Init+0x94>)
 80063fa:	2200      	movs	r2, #0
 80063fc:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80063fe:	4b13      	ldr	r3, [pc, #76]	; (800644c <USBD_LL_Init+0x94>)
 8006400:	2200      	movs	r2, #0
 8006402:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8006404:	4b11      	ldr	r3, [pc, #68]	; (800644c <USBD_LL_Init+0x94>)
 8006406:	2200      	movs	r2, #0
 8006408:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800640a:	4b10      	ldr	r3, [pc, #64]	; (800644c <USBD_LL_Init+0x94>)
 800640c:	2200      	movs	r2, #0
 800640e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8006410:	4b0e      	ldr	r3, [pc, #56]	; (800644c <USBD_LL_Init+0x94>)
 8006412:	2200      	movs	r2, #0
 8006414:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8006416:	480d      	ldr	r0, [pc, #52]	; (800644c <USBD_LL_Init+0x94>)
 8006418:	f7fa fe19 	bl	800104e <HAL_PCD_Init>
 800641c:	4603      	mov	r3, r0
 800641e:	2b00      	cmp	r3, #0
 8006420:	d001      	beq.n	8006426 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8006422:	f7fa f977 	bl	8000714 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8006426:	2180      	movs	r1, #128	; 0x80
 8006428:	4808      	ldr	r0, [pc, #32]	; (800644c <USBD_LL_Init+0x94>)
 800642a:	f7fb ff76 	bl	800231a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800642e:	2240      	movs	r2, #64	; 0x40
 8006430:	2100      	movs	r1, #0
 8006432:	4806      	ldr	r0, [pc, #24]	; (800644c <USBD_LL_Init+0x94>)
 8006434:	f7fb ff2a 	bl	800228c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8006438:	2280      	movs	r2, #128	; 0x80
 800643a:	2101      	movs	r1, #1
 800643c:	4803      	ldr	r0, [pc, #12]	; (800644c <USBD_LL_Init+0x94>)
 800643e:	f7fb ff25 	bl	800228c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8006442:	2300      	movs	r3, #0
}
 8006444:	4618      	mov	r0, r3
 8006446:	3708      	adds	r7, #8
 8006448:	46bd      	mov	sp, r7
 800644a:	bd80      	pop	{r7, pc}
 800644c:	200010a4 	.word	0x200010a4

08006450 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8006450:	b580      	push	{r7, lr}
 8006452:	b084      	sub	sp, #16
 8006454:	af00      	add	r7, sp, #0
 8006456:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006458:	2300      	movs	r3, #0
 800645a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800645c:	2300      	movs	r3, #0
 800645e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006466:	4618      	mov	r0, r3
 8006468:	f7fa ff0e 	bl	8001288 <HAL_PCD_Start>
 800646c:	4603      	mov	r3, r0
 800646e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006470:	7bfb      	ldrb	r3, [r7, #15]
 8006472:	4618      	mov	r0, r3
 8006474:	f000 f942 	bl	80066fc <USBD_Get_USB_Status>
 8006478:	4603      	mov	r3, r0
 800647a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800647c:	7bbb      	ldrb	r3, [r7, #14]
}
 800647e:	4618      	mov	r0, r3
 8006480:	3710      	adds	r7, #16
 8006482:	46bd      	mov	sp, r7
 8006484:	bd80      	pop	{r7, pc}

08006486 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8006486:	b580      	push	{r7, lr}
 8006488:	b084      	sub	sp, #16
 800648a:	af00      	add	r7, sp, #0
 800648c:	6078      	str	r0, [r7, #4]
 800648e:	4608      	mov	r0, r1
 8006490:	4611      	mov	r1, r2
 8006492:	461a      	mov	r2, r3
 8006494:	4603      	mov	r3, r0
 8006496:	70fb      	strb	r3, [r7, #3]
 8006498:	460b      	mov	r3, r1
 800649a:	70bb      	strb	r3, [r7, #2]
 800649c:	4613      	mov	r3, r2
 800649e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80064a0:	2300      	movs	r3, #0
 80064a2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80064a4:	2300      	movs	r3, #0
 80064a6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80064ae:	78bb      	ldrb	r3, [r7, #2]
 80064b0:	883a      	ldrh	r2, [r7, #0]
 80064b2:	78f9      	ldrb	r1, [r7, #3]
 80064b4:	f7fb faf2 	bl	8001a9c <HAL_PCD_EP_Open>
 80064b8:	4603      	mov	r3, r0
 80064ba:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80064bc:	7bfb      	ldrb	r3, [r7, #15]
 80064be:	4618      	mov	r0, r3
 80064c0:	f000 f91c 	bl	80066fc <USBD_Get_USB_Status>
 80064c4:	4603      	mov	r3, r0
 80064c6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80064c8:	7bbb      	ldrb	r3, [r7, #14]
}
 80064ca:	4618      	mov	r0, r3
 80064cc:	3710      	adds	r7, #16
 80064ce:	46bd      	mov	sp, r7
 80064d0:	bd80      	pop	{r7, pc}

080064d2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80064d2:	b580      	push	{r7, lr}
 80064d4:	b084      	sub	sp, #16
 80064d6:	af00      	add	r7, sp, #0
 80064d8:	6078      	str	r0, [r7, #4]
 80064da:	460b      	mov	r3, r1
 80064dc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80064de:	2300      	movs	r3, #0
 80064e0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80064e2:	2300      	movs	r3, #0
 80064e4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80064ec:	78fa      	ldrb	r2, [r7, #3]
 80064ee:	4611      	mov	r1, r2
 80064f0:	4618      	mov	r0, r3
 80064f2:	f7fb fb3b 	bl	8001b6c <HAL_PCD_EP_Close>
 80064f6:	4603      	mov	r3, r0
 80064f8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80064fa:	7bfb      	ldrb	r3, [r7, #15]
 80064fc:	4618      	mov	r0, r3
 80064fe:	f000 f8fd 	bl	80066fc <USBD_Get_USB_Status>
 8006502:	4603      	mov	r3, r0
 8006504:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006506:	7bbb      	ldrb	r3, [r7, #14]
}
 8006508:	4618      	mov	r0, r3
 800650a:	3710      	adds	r7, #16
 800650c:	46bd      	mov	sp, r7
 800650e:	bd80      	pop	{r7, pc}

08006510 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006510:	b580      	push	{r7, lr}
 8006512:	b084      	sub	sp, #16
 8006514:	af00      	add	r7, sp, #0
 8006516:	6078      	str	r0, [r7, #4]
 8006518:	460b      	mov	r3, r1
 800651a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800651c:	2300      	movs	r3, #0
 800651e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006520:	2300      	movs	r3, #0
 8006522:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800652a:	78fa      	ldrb	r2, [r7, #3]
 800652c:	4611      	mov	r1, r2
 800652e:	4618      	mov	r0, r3
 8006530:	f7fb fc13 	bl	8001d5a <HAL_PCD_EP_SetStall>
 8006534:	4603      	mov	r3, r0
 8006536:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006538:	7bfb      	ldrb	r3, [r7, #15]
 800653a:	4618      	mov	r0, r3
 800653c:	f000 f8de 	bl	80066fc <USBD_Get_USB_Status>
 8006540:	4603      	mov	r3, r0
 8006542:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006544:	7bbb      	ldrb	r3, [r7, #14]
}
 8006546:	4618      	mov	r0, r3
 8006548:	3710      	adds	r7, #16
 800654a:	46bd      	mov	sp, r7
 800654c:	bd80      	pop	{r7, pc}

0800654e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800654e:	b580      	push	{r7, lr}
 8006550:	b084      	sub	sp, #16
 8006552:	af00      	add	r7, sp, #0
 8006554:	6078      	str	r0, [r7, #4]
 8006556:	460b      	mov	r3, r1
 8006558:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800655a:	2300      	movs	r3, #0
 800655c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800655e:	2300      	movs	r3, #0
 8006560:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006568:	78fa      	ldrb	r2, [r7, #3]
 800656a:	4611      	mov	r1, r2
 800656c:	4618      	mov	r0, r3
 800656e:	f7fb fc58 	bl	8001e22 <HAL_PCD_EP_ClrStall>
 8006572:	4603      	mov	r3, r0
 8006574:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006576:	7bfb      	ldrb	r3, [r7, #15]
 8006578:	4618      	mov	r0, r3
 800657a:	f000 f8bf 	bl	80066fc <USBD_Get_USB_Status>
 800657e:	4603      	mov	r3, r0
 8006580:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006582:	7bbb      	ldrb	r3, [r7, #14]
}
 8006584:	4618      	mov	r0, r3
 8006586:	3710      	adds	r7, #16
 8006588:	46bd      	mov	sp, r7
 800658a:	bd80      	pop	{r7, pc}

0800658c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800658c:	b480      	push	{r7}
 800658e:	b085      	sub	sp, #20
 8006590:	af00      	add	r7, sp, #0
 8006592:	6078      	str	r0, [r7, #4]
 8006594:	460b      	mov	r3, r1
 8006596:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800659e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80065a0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	da0b      	bge.n	80065c0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80065a8:	78fb      	ldrb	r3, [r7, #3]
 80065aa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80065ae:	68f9      	ldr	r1, [r7, #12]
 80065b0:	4613      	mov	r3, r2
 80065b2:	00db      	lsls	r3, r3, #3
 80065b4:	1a9b      	subs	r3, r3, r2
 80065b6:	009b      	lsls	r3, r3, #2
 80065b8:	440b      	add	r3, r1
 80065ba:	333e      	adds	r3, #62	; 0x3e
 80065bc:	781b      	ldrb	r3, [r3, #0]
 80065be:	e00b      	b.n	80065d8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80065c0:	78fb      	ldrb	r3, [r7, #3]
 80065c2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80065c6:	68f9      	ldr	r1, [r7, #12]
 80065c8:	4613      	mov	r3, r2
 80065ca:	00db      	lsls	r3, r3, #3
 80065cc:	1a9b      	subs	r3, r3, r2
 80065ce:	009b      	lsls	r3, r3, #2
 80065d0:	440b      	add	r3, r1
 80065d2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80065d6:	781b      	ldrb	r3, [r3, #0]
  }
}
 80065d8:	4618      	mov	r0, r3
 80065da:	3714      	adds	r7, #20
 80065dc:	46bd      	mov	sp, r7
 80065de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e2:	4770      	bx	lr

080065e4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80065e4:	b580      	push	{r7, lr}
 80065e6:	b084      	sub	sp, #16
 80065e8:	af00      	add	r7, sp, #0
 80065ea:	6078      	str	r0, [r7, #4]
 80065ec:	460b      	mov	r3, r1
 80065ee:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80065f0:	2300      	movs	r3, #0
 80065f2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80065f4:	2300      	movs	r3, #0
 80065f6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80065fe:	78fa      	ldrb	r2, [r7, #3]
 8006600:	4611      	mov	r1, r2
 8006602:	4618      	mov	r0, r3
 8006604:	f7fb fa25 	bl	8001a52 <HAL_PCD_SetAddress>
 8006608:	4603      	mov	r3, r0
 800660a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800660c:	7bfb      	ldrb	r3, [r7, #15]
 800660e:	4618      	mov	r0, r3
 8006610:	f000 f874 	bl	80066fc <USBD_Get_USB_Status>
 8006614:	4603      	mov	r3, r0
 8006616:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006618:	7bbb      	ldrb	r3, [r7, #14]
}
 800661a:	4618      	mov	r0, r3
 800661c:	3710      	adds	r7, #16
 800661e:	46bd      	mov	sp, r7
 8006620:	bd80      	pop	{r7, pc}

08006622 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8006622:	b580      	push	{r7, lr}
 8006624:	b086      	sub	sp, #24
 8006626:	af00      	add	r7, sp, #0
 8006628:	60f8      	str	r0, [r7, #12]
 800662a:	607a      	str	r2, [r7, #4]
 800662c:	603b      	str	r3, [r7, #0]
 800662e:	460b      	mov	r3, r1
 8006630:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006632:	2300      	movs	r3, #0
 8006634:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006636:	2300      	movs	r3, #0
 8006638:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8006640:	7af9      	ldrb	r1, [r7, #11]
 8006642:	683b      	ldr	r3, [r7, #0]
 8006644:	687a      	ldr	r2, [r7, #4]
 8006646:	f7fb fb3e 	bl	8001cc6 <HAL_PCD_EP_Transmit>
 800664a:	4603      	mov	r3, r0
 800664c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800664e:	7dfb      	ldrb	r3, [r7, #23]
 8006650:	4618      	mov	r0, r3
 8006652:	f000 f853 	bl	80066fc <USBD_Get_USB_Status>
 8006656:	4603      	mov	r3, r0
 8006658:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800665a:	7dbb      	ldrb	r3, [r7, #22]
}
 800665c:	4618      	mov	r0, r3
 800665e:	3718      	adds	r7, #24
 8006660:	46bd      	mov	sp, r7
 8006662:	bd80      	pop	{r7, pc}

08006664 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8006664:	b580      	push	{r7, lr}
 8006666:	b086      	sub	sp, #24
 8006668:	af00      	add	r7, sp, #0
 800666a:	60f8      	str	r0, [r7, #12]
 800666c:	607a      	str	r2, [r7, #4]
 800666e:	603b      	str	r3, [r7, #0]
 8006670:	460b      	mov	r3, r1
 8006672:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006674:	2300      	movs	r3, #0
 8006676:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006678:	2300      	movs	r3, #0
 800667a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8006682:	7af9      	ldrb	r1, [r7, #11]
 8006684:	683b      	ldr	r3, [r7, #0]
 8006686:	687a      	ldr	r2, [r7, #4]
 8006688:	f7fb faba 	bl	8001c00 <HAL_PCD_EP_Receive>
 800668c:	4603      	mov	r3, r0
 800668e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006690:	7dfb      	ldrb	r3, [r7, #23]
 8006692:	4618      	mov	r0, r3
 8006694:	f000 f832 	bl	80066fc <USBD_Get_USB_Status>
 8006698:	4603      	mov	r3, r0
 800669a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800669c:	7dbb      	ldrb	r3, [r7, #22]
}
 800669e:	4618      	mov	r0, r3
 80066a0:	3718      	adds	r7, #24
 80066a2:	46bd      	mov	sp, r7
 80066a4:	bd80      	pop	{r7, pc}

080066a6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80066a6:	b580      	push	{r7, lr}
 80066a8:	b082      	sub	sp, #8
 80066aa:	af00      	add	r7, sp, #0
 80066ac:	6078      	str	r0, [r7, #4]
 80066ae:	460b      	mov	r3, r1
 80066b0:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80066b8:	78fa      	ldrb	r2, [r7, #3]
 80066ba:	4611      	mov	r1, r2
 80066bc:	4618      	mov	r0, r3
 80066be:	f7fb faea 	bl	8001c96 <HAL_PCD_EP_GetRxCount>
 80066c2:	4603      	mov	r3, r0
}
 80066c4:	4618      	mov	r0, r3
 80066c6:	3708      	adds	r7, #8
 80066c8:	46bd      	mov	sp, r7
 80066ca:	bd80      	pop	{r7, pc}

080066cc <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80066cc:	b480      	push	{r7}
 80066ce:	b083      	sub	sp, #12
 80066d0:	af00      	add	r7, sp, #0
 80066d2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80066d4:	4b03      	ldr	r3, [pc, #12]	; (80066e4 <USBD_static_malloc+0x18>)
}
 80066d6:	4618      	mov	r0, r3
 80066d8:	370c      	adds	r7, #12
 80066da:	46bd      	mov	sp, r7
 80066dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e0:	4770      	bx	lr
 80066e2:	bf00      	nop
 80066e4:	200014ac 	.word	0x200014ac

080066e8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80066e8:	b480      	push	{r7}
 80066ea:	b083      	sub	sp, #12
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	6078      	str	r0, [r7, #4]

}
 80066f0:	bf00      	nop
 80066f2:	370c      	adds	r7, #12
 80066f4:	46bd      	mov	sp, r7
 80066f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066fa:	4770      	bx	lr

080066fc <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80066fc:	b480      	push	{r7}
 80066fe:	b085      	sub	sp, #20
 8006700:	af00      	add	r7, sp, #0
 8006702:	4603      	mov	r3, r0
 8006704:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006706:	2300      	movs	r3, #0
 8006708:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800670a:	79fb      	ldrb	r3, [r7, #7]
 800670c:	2b03      	cmp	r3, #3
 800670e:	d817      	bhi.n	8006740 <USBD_Get_USB_Status+0x44>
 8006710:	a201      	add	r2, pc, #4	; (adr r2, 8006718 <USBD_Get_USB_Status+0x1c>)
 8006712:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006716:	bf00      	nop
 8006718:	08006729 	.word	0x08006729
 800671c:	0800672f 	.word	0x0800672f
 8006720:	08006735 	.word	0x08006735
 8006724:	0800673b 	.word	0x0800673b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8006728:	2300      	movs	r3, #0
 800672a:	73fb      	strb	r3, [r7, #15]
    break;
 800672c:	e00b      	b.n	8006746 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800672e:	2303      	movs	r3, #3
 8006730:	73fb      	strb	r3, [r7, #15]
    break;
 8006732:	e008      	b.n	8006746 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8006734:	2301      	movs	r3, #1
 8006736:	73fb      	strb	r3, [r7, #15]
    break;
 8006738:	e005      	b.n	8006746 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800673a:	2303      	movs	r3, #3
 800673c:	73fb      	strb	r3, [r7, #15]
    break;
 800673e:	e002      	b.n	8006746 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8006740:	2303      	movs	r3, #3
 8006742:	73fb      	strb	r3, [r7, #15]
    break;
 8006744:	bf00      	nop
  }
  return usb_status;
 8006746:	7bfb      	ldrb	r3, [r7, #15]
}
 8006748:	4618      	mov	r0, r3
 800674a:	3714      	adds	r7, #20
 800674c:	46bd      	mov	sp, r7
 800674e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006752:	4770      	bx	lr

08006754 <main>:
 */

#include "main.h"

int main(void)
{
 8006754:	b580      	push	{r7, lr}
 8006756:	af00      	add	r7, sp, #0

	hwInit();
 8006758:	f7fa f912 	bl	8000980 <hwInit>
	apInit();
 800675c:	f7f9 febe 	bl	80004dc <apInit>

	apMain();
 8006760:	f7f9 fec4 	bl	80004ec <apMain>
	return 0;
 8006764:	2300      	movs	r3, #0
}
 8006766:	4618      	mov	r0, r3
 8006768:	bd80      	pop	{r7, pc}
	...

0800676c <__libc_init_array>:
 800676c:	b570      	push	{r4, r5, r6, lr}
 800676e:	4d0d      	ldr	r5, [pc, #52]	; (80067a4 <__libc_init_array+0x38>)
 8006770:	4c0d      	ldr	r4, [pc, #52]	; (80067a8 <__libc_init_array+0x3c>)
 8006772:	1b64      	subs	r4, r4, r5
 8006774:	10a4      	asrs	r4, r4, #2
 8006776:	2600      	movs	r6, #0
 8006778:	42a6      	cmp	r6, r4
 800677a:	d109      	bne.n	8006790 <__libc_init_array+0x24>
 800677c:	4d0b      	ldr	r5, [pc, #44]	; (80067ac <__libc_init_array+0x40>)
 800677e:	4c0c      	ldr	r4, [pc, #48]	; (80067b0 <__libc_init_array+0x44>)
 8006780:	f000 f820 	bl	80067c4 <_init>
 8006784:	1b64      	subs	r4, r4, r5
 8006786:	10a4      	asrs	r4, r4, #2
 8006788:	2600      	movs	r6, #0
 800678a:	42a6      	cmp	r6, r4
 800678c:	d105      	bne.n	800679a <__libc_init_array+0x2e>
 800678e:	bd70      	pop	{r4, r5, r6, pc}
 8006790:	f855 3b04 	ldr.w	r3, [r5], #4
 8006794:	4798      	blx	r3
 8006796:	3601      	adds	r6, #1
 8006798:	e7ee      	b.n	8006778 <__libc_init_array+0xc>
 800679a:	f855 3b04 	ldr.w	r3, [r5], #4
 800679e:	4798      	blx	r3
 80067a0:	3601      	adds	r6, #1
 80067a2:	e7f2      	b.n	800678a <__libc_init_array+0x1e>
 80067a4:	0800684c 	.word	0x0800684c
 80067a8:	0800684c 	.word	0x0800684c
 80067ac:	0800684c 	.word	0x0800684c
 80067b0:	08006850 	.word	0x08006850

080067b4 <memset>:
 80067b4:	4402      	add	r2, r0
 80067b6:	4603      	mov	r3, r0
 80067b8:	4293      	cmp	r3, r2
 80067ba:	d100      	bne.n	80067be <memset+0xa>
 80067bc:	4770      	bx	lr
 80067be:	f803 1b01 	strb.w	r1, [r3], #1
 80067c2:	e7f9      	b.n	80067b8 <memset+0x4>

080067c4 <_init>:
 80067c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067c6:	bf00      	nop
 80067c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80067ca:	bc08      	pop	{r3}
 80067cc:	469e      	mov	lr, r3
 80067ce:	4770      	bx	lr

080067d0 <_fini>:
 80067d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067d2:	bf00      	nop
 80067d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80067d6:	bc08      	pop	{r3}
 80067d8:	469e      	mov	lr, r3
 80067da:	4770      	bx	lr
