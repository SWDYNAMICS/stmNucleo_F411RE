
stmf411re_fw.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08008000  08008000  00008000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a524  080081a0  080081a0  000081a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000170  080126c4  080126c4  000126c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012834  08012834  0002020c  2**0
                  CONTENTS
  4 .ARM          00000008  08012834  08012834  00012834  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801283c  0801283c  0002020c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801283c  0801283c  0001283c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08012840  08012840  00012840  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000020c  20000000  08012844  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000017f4  2000020c  08012a50  0002020c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001a00  08012a50  00021a00  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016ccb  00000000  00000000  0002023c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004467  00000000  00000000  00036f07  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012f0  00000000  00000000  0003b370  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000010d8  00000000  00000000  0003c660  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001d3bc  00000000  00000000  0003d738  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00022c38  00000000  00000000  0005aaf4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00090887  00000000  00000000  0007d72c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0010dfb3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004e5c  00000000  00000000  0010e004  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080081a0 <__do_global_dtors_aux>:
 80081a0:	b510      	push	{r4, lr}
 80081a2:	4c05      	ldr	r4, [pc, #20]	; (80081b8 <__do_global_dtors_aux+0x18>)
 80081a4:	7823      	ldrb	r3, [r4, #0]
 80081a6:	b933      	cbnz	r3, 80081b6 <__do_global_dtors_aux+0x16>
 80081a8:	4b04      	ldr	r3, [pc, #16]	; (80081bc <__do_global_dtors_aux+0x1c>)
 80081aa:	b113      	cbz	r3, 80081b2 <__do_global_dtors_aux+0x12>
 80081ac:	4804      	ldr	r0, [pc, #16]	; (80081c0 <__do_global_dtors_aux+0x20>)
 80081ae:	f3af 8000 	nop.w
 80081b2:	2301      	movs	r3, #1
 80081b4:	7023      	strb	r3, [r4, #0]
 80081b6:	bd10      	pop	{r4, pc}
 80081b8:	2000020c 	.word	0x2000020c
 80081bc:	00000000 	.word	0x00000000
 80081c0:	080126ac 	.word	0x080126ac

080081c4 <frame_dummy>:
 80081c4:	b508      	push	{r3, lr}
 80081c6:	4b03      	ldr	r3, [pc, #12]	; (80081d4 <frame_dummy+0x10>)
 80081c8:	b11b      	cbz	r3, 80081d2 <frame_dummy+0xe>
 80081ca:	4903      	ldr	r1, [pc, #12]	; (80081d8 <frame_dummy+0x14>)
 80081cc:	4803      	ldr	r0, [pc, #12]	; (80081dc <frame_dummy+0x18>)
 80081ce:	f3af 8000 	nop.w
 80081d2:	bd08      	pop	{r3, pc}
 80081d4:	00000000 	.word	0x00000000
 80081d8:	20000210 	.word	0x20000210
 80081dc:	080126ac 	.word	0x080126ac

080081e0 <memchr>:
 80081e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80081e4:	2a10      	cmp	r2, #16
 80081e6:	db2b      	blt.n	8008240 <memchr+0x60>
 80081e8:	f010 0f07 	tst.w	r0, #7
 80081ec:	d008      	beq.n	8008200 <memchr+0x20>
 80081ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80081f2:	3a01      	subs	r2, #1
 80081f4:	428b      	cmp	r3, r1
 80081f6:	d02d      	beq.n	8008254 <memchr+0x74>
 80081f8:	f010 0f07 	tst.w	r0, #7
 80081fc:	b342      	cbz	r2, 8008250 <memchr+0x70>
 80081fe:	d1f6      	bne.n	80081ee <memchr+0xe>
 8008200:	b4f0      	push	{r4, r5, r6, r7}
 8008202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8008206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800820a:	f022 0407 	bic.w	r4, r2, #7
 800820e:	f07f 0700 	mvns.w	r7, #0
 8008212:	2300      	movs	r3, #0
 8008214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8008218:	3c08      	subs	r4, #8
 800821a:	ea85 0501 	eor.w	r5, r5, r1
 800821e:	ea86 0601 	eor.w	r6, r6, r1
 8008222:	fa85 f547 	uadd8	r5, r5, r7
 8008226:	faa3 f587 	sel	r5, r3, r7
 800822a:	fa86 f647 	uadd8	r6, r6, r7
 800822e:	faa5 f687 	sel	r6, r5, r7
 8008232:	b98e      	cbnz	r6, 8008258 <memchr+0x78>
 8008234:	d1ee      	bne.n	8008214 <memchr+0x34>
 8008236:	bcf0      	pop	{r4, r5, r6, r7}
 8008238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800823c:	f002 0207 	and.w	r2, r2, #7
 8008240:	b132      	cbz	r2, 8008250 <memchr+0x70>
 8008242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8008246:	3a01      	subs	r2, #1
 8008248:	ea83 0301 	eor.w	r3, r3, r1
 800824c:	b113      	cbz	r3, 8008254 <memchr+0x74>
 800824e:	d1f8      	bne.n	8008242 <memchr+0x62>
 8008250:	2000      	movs	r0, #0
 8008252:	4770      	bx	lr
 8008254:	3801      	subs	r0, #1
 8008256:	4770      	bx	lr
 8008258:	2d00      	cmp	r5, #0
 800825a:	bf06      	itte	eq
 800825c:	4635      	moveq	r5, r6
 800825e:	3803      	subeq	r0, #3
 8008260:	3807      	subne	r0, #7
 8008262:	f015 0f01 	tst.w	r5, #1
 8008266:	d107      	bne.n	8008278 <memchr+0x98>
 8008268:	3001      	adds	r0, #1
 800826a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800826e:	bf02      	ittt	eq
 8008270:	3001      	addeq	r0, #1
 8008272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8008276:	3001      	addeq	r0, #1
 8008278:	bcf0      	pop	{r4, r5, r6, r7}
 800827a:	3801      	subs	r0, #1
 800827c:	4770      	bx	lr
 800827e:	bf00      	nop

08008280 <__aeabi_uldivmod>:
 8008280:	b953      	cbnz	r3, 8008298 <__aeabi_uldivmod+0x18>
 8008282:	b94a      	cbnz	r2, 8008298 <__aeabi_uldivmod+0x18>
 8008284:	2900      	cmp	r1, #0
 8008286:	bf08      	it	eq
 8008288:	2800      	cmpeq	r0, #0
 800828a:	bf1c      	itt	ne
 800828c:	f04f 31ff 	movne.w	r1, #4294967295
 8008290:	f04f 30ff 	movne.w	r0, #4294967295
 8008294:	f000 b974 	b.w	8008580 <__aeabi_idiv0>
 8008298:	f1ad 0c08 	sub.w	ip, sp, #8
 800829c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80082a0:	f000 f806 	bl	80082b0 <__udivmoddi4>
 80082a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80082a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80082ac:	b004      	add	sp, #16
 80082ae:	4770      	bx	lr

080082b0 <__udivmoddi4>:
 80082b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80082b4:	9d08      	ldr	r5, [sp, #32]
 80082b6:	4604      	mov	r4, r0
 80082b8:	468e      	mov	lr, r1
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d14d      	bne.n	800835a <__udivmoddi4+0xaa>
 80082be:	428a      	cmp	r2, r1
 80082c0:	4694      	mov	ip, r2
 80082c2:	d969      	bls.n	8008398 <__udivmoddi4+0xe8>
 80082c4:	fab2 f282 	clz	r2, r2
 80082c8:	b152      	cbz	r2, 80082e0 <__udivmoddi4+0x30>
 80082ca:	fa01 f302 	lsl.w	r3, r1, r2
 80082ce:	f1c2 0120 	rsb	r1, r2, #32
 80082d2:	fa20 f101 	lsr.w	r1, r0, r1
 80082d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80082da:	ea41 0e03 	orr.w	lr, r1, r3
 80082de:	4094      	lsls	r4, r2
 80082e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80082e4:	0c21      	lsrs	r1, r4, #16
 80082e6:	fbbe f6f8 	udiv	r6, lr, r8
 80082ea:	fa1f f78c 	uxth.w	r7, ip
 80082ee:	fb08 e316 	mls	r3, r8, r6, lr
 80082f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80082f6:	fb06 f107 	mul.w	r1, r6, r7
 80082fa:	4299      	cmp	r1, r3
 80082fc:	d90a      	bls.n	8008314 <__udivmoddi4+0x64>
 80082fe:	eb1c 0303 	adds.w	r3, ip, r3
 8008302:	f106 30ff 	add.w	r0, r6, #4294967295
 8008306:	f080 811f 	bcs.w	8008548 <__udivmoddi4+0x298>
 800830a:	4299      	cmp	r1, r3
 800830c:	f240 811c 	bls.w	8008548 <__udivmoddi4+0x298>
 8008310:	3e02      	subs	r6, #2
 8008312:	4463      	add	r3, ip
 8008314:	1a5b      	subs	r3, r3, r1
 8008316:	b2a4      	uxth	r4, r4
 8008318:	fbb3 f0f8 	udiv	r0, r3, r8
 800831c:	fb08 3310 	mls	r3, r8, r0, r3
 8008320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8008324:	fb00 f707 	mul.w	r7, r0, r7
 8008328:	42a7      	cmp	r7, r4
 800832a:	d90a      	bls.n	8008342 <__udivmoddi4+0x92>
 800832c:	eb1c 0404 	adds.w	r4, ip, r4
 8008330:	f100 33ff 	add.w	r3, r0, #4294967295
 8008334:	f080 810a 	bcs.w	800854c <__udivmoddi4+0x29c>
 8008338:	42a7      	cmp	r7, r4
 800833a:	f240 8107 	bls.w	800854c <__udivmoddi4+0x29c>
 800833e:	4464      	add	r4, ip
 8008340:	3802      	subs	r0, #2
 8008342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8008346:	1be4      	subs	r4, r4, r7
 8008348:	2600      	movs	r6, #0
 800834a:	b11d      	cbz	r5, 8008354 <__udivmoddi4+0xa4>
 800834c:	40d4      	lsrs	r4, r2
 800834e:	2300      	movs	r3, #0
 8008350:	e9c5 4300 	strd	r4, r3, [r5]
 8008354:	4631      	mov	r1, r6
 8008356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800835a:	428b      	cmp	r3, r1
 800835c:	d909      	bls.n	8008372 <__udivmoddi4+0xc2>
 800835e:	2d00      	cmp	r5, #0
 8008360:	f000 80ef 	beq.w	8008542 <__udivmoddi4+0x292>
 8008364:	2600      	movs	r6, #0
 8008366:	e9c5 0100 	strd	r0, r1, [r5]
 800836a:	4630      	mov	r0, r6
 800836c:	4631      	mov	r1, r6
 800836e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008372:	fab3 f683 	clz	r6, r3
 8008376:	2e00      	cmp	r6, #0
 8008378:	d14a      	bne.n	8008410 <__udivmoddi4+0x160>
 800837a:	428b      	cmp	r3, r1
 800837c:	d302      	bcc.n	8008384 <__udivmoddi4+0xd4>
 800837e:	4282      	cmp	r2, r0
 8008380:	f200 80f9 	bhi.w	8008576 <__udivmoddi4+0x2c6>
 8008384:	1a84      	subs	r4, r0, r2
 8008386:	eb61 0303 	sbc.w	r3, r1, r3
 800838a:	2001      	movs	r0, #1
 800838c:	469e      	mov	lr, r3
 800838e:	2d00      	cmp	r5, #0
 8008390:	d0e0      	beq.n	8008354 <__udivmoddi4+0xa4>
 8008392:	e9c5 4e00 	strd	r4, lr, [r5]
 8008396:	e7dd      	b.n	8008354 <__udivmoddi4+0xa4>
 8008398:	b902      	cbnz	r2, 800839c <__udivmoddi4+0xec>
 800839a:	deff      	udf	#255	; 0xff
 800839c:	fab2 f282 	clz	r2, r2
 80083a0:	2a00      	cmp	r2, #0
 80083a2:	f040 8092 	bne.w	80084ca <__udivmoddi4+0x21a>
 80083a6:	eba1 010c 	sub.w	r1, r1, ip
 80083aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80083ae:	fa1f fe8c 	uxth.w	lr, ip
 80083b2:	2601      	movs	r6, #1
 80083b4:	0c20      	lsrs	r0, r4, #16
 80083b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80083ba:	fb07 1113 	mls	r1, r7, r3, r1
 80083be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80083c2:	fb0e f003 	mul.w	r0, lr, r3
 80083c6:	4288      	cmp	r0, r1
 80083c8:	d908      	bls.n	80083dc <__udivmoddi4+0x12c>
 80083ca:	eb1c 0101 	adds.w	r1, ip, r1
 80083ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80083d2:	d202      	bcs.n	80083da <__udivmoddi4+0x12a>
 80083d4:	4288      	cmp	r0, r1
 80083d6:	f200 80cb 	bhi.w	8008570 <__udivmoddi4+0x2c0>
 80083da:	4643      	mov	r3, r8
 80083dc:	1a09      	subs	r1, r1, r0
 80083de:	b2a4      	uxth	r4, r4
 80083e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80083e4:	fb07 1110 	mls	r1, r7, r0, r1
 80083e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80083ec:	fb0e fe00 	mul.w	lr, lr, r0
 80083f0:	45a6      	cmp	lr, r4
 80083f2:	d908      	bls.n	8008406 <__udivmoddi4+0x156>
 80083f4:	eb1c 0404 	adds.w	r4, ip, r4
 80083f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80083fc:	d202      	bcs.n	8008404 <__udivmoddi4+0x154>
 80083fe:	45a6      	cmp	lr, r4
 8008400:	f200 80bb 	bhi.w	800857a <__udivmoddi4+0x2ca>
 8008404:	4608      	mov	r0, r1
 8008406:	eba4 040e 	sub.w	r4, r4, lr
 800840a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800840e:	e79c      	b.n	800834a <__udivmoddi4+0x9a>
 8008410:	f1c6 0720 	rsb	r7, r6, #32
 8008414:	40b3      	lsls	r3, r6
 8008416:	fa22 fc07 	lsr.w	ip, r2, r7
 800841a:	ea4c 0c03 	orr.w	ip, ip, r3
 800841e:	fa20 f407 	lsr.w	r4, r0, r7
 8008422:	fa01 f306 	lsl.w	r3, r1, r6
 8008426:	431c      	orrs	r4, r3
 8008428:	40f9      	lsrs	r1, r7
 800842a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800842e:	fa00 f306 	lsl.w	r3, r0, r6
 8008432:	fbb1 f8f9 	udiv	r8, r1, r9
 8008436:	0c20      	lsrs	r0, r4, #16
 8008438:	fa1f fe8c 	uxth.w	lr, ip
 800843c:	fb09 1118 	mls	r1, r9, r8, r1
 8008440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8008444:	fb08 f00e 	mul.w	r0, r8, lr
 8008448:	4288      	cmp	r0, r1
 800844a:	fa02 f206 	lsl.w	r2, r2, r6
 800844e:	d90b      	bls.n	8008468 <__udivmoddi4+0x1b8>
 8008450:	eb1c 0101 	adds.w	r1, ip, r1
 8008454:	f108 3aff 	add.w	sl, r8, #4294967295
 8008458:	f080 8088 	bcs.w	800856c <__udivmoddi4+0x2bc>
 800845c:	4288      	cmp	r0, r1
 800845e:	f240 8085 	bls.w	800856c <__udivmoddi4+0x2bc>
 8008462:	f1a8 0802 	sub.w	r8, r8, #2
 8008466:	4461      	add	r1, ip
 8008468:	1a09      	subs	r1, r1, r0
 800846a:	b2a4      	uxth	r4, r4
 800846c:	fbb1 f0f9 	udiv	r0, r1, r9
 8008470:	fb09 1110 	mls	r1, r9, r0, r1
 8008474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8008478:	fb00 fe0e 	mul.w	lr, r0, lr
 800847c:	458e      	cmp	lr, r1
 800847e:	d908      	bls.n	8008492 <__udivmoddi4+0x1e2>
 8008480:	eb1c 0101 	adds.w	r1, ip, r1
 8008484:	f100 34ff 	add.w	r4, r0, #4294967295
 8008488:	d26c      	bcs.n	8008564 <__udivmoddi4+0x2b4>
 800848a:	458e      	cmp	lr, r1
 800848c:	d96a      	bls.n	8008564 <__udivmoddi4+0x2b4>
 800848e:	3802      	subs	r0, #2
 8008490:	4461      	add	r1, ip
 8008492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8008496:	fba0 9402 	umull	r9, r4, r0, r2
 800849a:	eba1 010e 	sub.w	r1, r1, lr
 800849e:	42a1      	cmp	r1, r4
 80084a0:	46c8      	mov	r8, r9
 80084a2:	46a6      	mov	lr, r4
 80084a4:	d356      	bcc.n	8008554 <__udivmoddi4+0x2a4>
 80084a6:	d053      	beq.n	8008550 <__udivmoddi4+0x2a0>
 80084a8:	b15d      	cbz	r5, 80084c2 <__udivmoddi4+0x212>
 80084aa:	ebb3 0208 	subs.w	r2, r3, r8
 80084ae:	eb61 010e 	sbc.w	r1, r1, lr
 80084b2:	fa01 f707 	lsl.w	r7, r1, r7
 80084b6:	fa22 f306 	lsr.w	r3, r2, r6
 80084ba:	40f1      	lsrs	r1, r6
 80084bc:	431f      	orrs	r7, r3
 80084be:	e9c5 7100 	strd	r7, r1, [r5]
 80084c2:	2600      	movs	r6, #0
 80084c4:	4631      	mov	r1, r6
 80084c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80084ca:	f1c2 0320 	rsb	r3, r2, #32
 80084ce:	40d8      	lsrs	r0, r3
 80084d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80084d4:	fa21 f303 	lsr.w	r3, r1, r3
 80084d8:	4091      	lsls	r1, r2
 80084da:	4301      	orrs	r1, r0
 80084dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80084e0:	fa1f fe8c 	uxth.w	lr, ip
 80084e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80084e8:	fb07 3610 	mls	r6, r7, r0, r3
 80084ec:	0c0b      	lsrs	r3, r1, #16
 80084ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80084f2:	fb00 f60e 	mul.w	r6, r0, lr
 80084f6:	429e      	cmp	r6, r3
 80084f8:	fa04 f402 	lsl.w	r4, r4, r2
 80084fc:	d908      	bls.n	8008510 <__udivmoddi4+0x260>
 80084fe:	eb1c 0303 	adds.w	r3, ip, r3
 8008502:	f100 38ff 	add.w	r8, r0, #4294967295
 8008506:	d22f      	bcs.n	8008568 <__udivmoddi4+0x2b8>
 8008508:	429e      	cmp	r6, r3
 800850a:	d92d      	bls.n	8008568 <__udivmoddi4+0x2b8>
 800850c:	3802      	subs	r0, #2
 800850e:	4463      	add	r3, ip
 8008510:	1b9b      	subs	r3, r3, r6
 8008512:	b289      	uxth	r1, r1
 8008514:	fbb3 f6f7 	udiv	r6, r3, r7
 8008518:	fb07 3316 	mls	r3, r7, r6, r3
 800851c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8008520:	fb06 f30e 	mul.w	r3, r6, lr
 8008524:	428b      	cmp	r3, r1
 8008526:	d908      	bls.n	800853a <__udivmoddi4+0x28a>
 8008528:	eb1c 0101 	adds.w	r1, ip, r1
 800852c:	f106 38ff 	add.w	r8, r6, #4294967295
 8008530:	d216      	bcs.n	8008560 <__udivmoddi4+0x2b0>
 8008532:	428b      	cmp	r3, r1
 8008534:	d914      	bls.n	8008560 <__udivmoddi4+0x2b0>
 8008536:	3e02      	subs	r6, #2
 8008538:	4461      	add	r1, ip
 800853a:	1ac9      	subs	r1, r1, r3
 800853c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8008540:	e738      	b.n	80083b4 <__udivmoddi4+0x104>
 8008542:	462e      	mov	r6, r5
 8008544:	4628      	mov	r0, r5
 8008546:	e705      	b.n	8008354 <__udivmoddi4+0xa4>
 8008548:	4606      	mov	r6, r0
 800854a:	e6e3      	b.n	8008314 <__udivmoddi4+0x64>
 800854c:	4618      	mov	r0, r3
 800854e:	e6f8      	b.n	8008342 <__udivmoddi4+0x92>
 8008550:	454b      	cmp	r3, r9
 8008552:	d2a9      	bcs.n	80084a8 <__udivmoddi4+0x1f8>
 8008554:	ebb9 0802 	subs.w	r8, r9, r2
 8008558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800855c:	3801      	subs	r0, #1
 800855e:	e7a3      	b.n	80084a8 <__udivmoddi4+0x1f8>
 8008560:	4646      	mov	r6, r8
 8008562:	e7ea      	b.n	800853a <__udivmoddi4+0x28a>
 8008564:	4620      	mov	r0, r4
 8008566:	e794      	b.n	8008492 <__udivmoddi4+0x1e2>
 8008568:	4640      	mov	r0, r8
 800856a:	e7d1      	b.n	8008510 <__udivmoddi4+0x260>
 800856c:	46d0      	mov	r8, sl
 800856e:	e77b      	b.n	8008468 <__udivmoddi4+0x1b8>
 8008570:	3b02      	subs	r3, #2
 8008572:	4461      	add	r1, ip
 8008574:	e732      	b.n	80083dc <__udivmoddi4+0x12c>
 8008576:	4630      	mov	r0, r6
 8008578:	e709      	b.n	800838e <__udivmoddi4+0xde>
 800857a:	4464      	add	r4, ip
 800857c:	3802      	subs	r0, #2
 800857e:	e742      	b.n	8008406 <__udivmoddi4+0x156>

08008580 <__aeabi_idiv0>:
 8008580:	4770      	bx	lr
 8008582:	bf00      	nop

08008584 <apInit>:
#include "qbuffer.h"



void apInit(void)
{
 8008584:	b580      	push	{r7, lr}
 8008586:	af00      	add	r7, sp, #0
	uartOpen(_DEF_UART1, 57600);
 8008588:	f44f 4161 	mov.w	r1, #57600	; 0xe100
 800858c:	2000      	movs	r0, #0
 800858e:	f001 f83d 	bl	800960c <uartOpen>
	uartOpen(_DEF_UART2, 57600);
 8008592:	f44f 4161 	mov.w	r1, #57600	; 0xe100
 8008596:	2001      	movs	r0, #1
 8008598:	f001 f838 	bl	800960c <uartOpen>

	cliOpen(_DEF_UART1, 57600);
 800859c:	f44f 4161 	mov.w	r1, #57600	; 0xe100
 80085a0:	2000      	movs	r0, #0
 80085a2:	f000 fa63 	bl	8008a6c <cliOpen>
	cliOpenLog(_DEF_UART2, 57600);
 80085a6:	f44f 4161 	mov.w	r1, #57600	; 0xe100
 80085aa:	2001      	movs	r0, #1
 80085ac:	f000 fa80 	bl	8008ab0 <cliOpenLog>
}
 80085b0:	bf00      	nop
 80085b2:	bd80      	pop	{r7, pc}

080085b4 <apMain>:

void apMain(void)
{
 80085b4:	b580      	push	{r7, lr}
 80085b6:	b082      	sub	sp, #8
 80085b8:	af00      	add	r7, sp, #0
	uint32_t pre_time;

	pre_time = millis();
 80085ba:	f000 f868 	bl	800868e <millis>
 80085be:	6078      	str	r0, [r7, #4]
	while (1)
	{
		if(millis() - pre_time >= 500)
 80085c0:	f000 f865 	bl	800868e <millis>
 80085c4:	4602      	mov	r2, r0
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	1ad3      	subs	r3, r2, r3
 80085ca:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80085ce:	d305      	bcc.n	80085dc <apMain+0x28>
		{
			pre_time = millis();
 80085d0:	f000 f85d 	bl	800868e <millis>
 80085d4:	6078      	str	r0, [r7, #4]
			ledToggle(_DEF_LED1);
 80085d6:	2000      	movs	r0, #0
 80085d8:	f000 ff3a 	bl	8009450 <ledToggle>
		}

		if(uartAvailable(_DEF_UART2) > 0)
 80085dc:	2001      	movs	r0, #1
 80085de:	f001 f8ad 	bl	800973c <uartAvailable>
 80085e2:	4603      	mov	r3, r0
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d00a      	beq.n	80085fe <apMain+0x4a>
		{
		  uint8_t rx_data;
		  rx_data = uartRead(_DEF_UART2);
 80085e8:	2001      	movs	r0, #1
 80085ea:	f001 f8d9 	bl	80097a0 <uartRead>
 80085ee:	4603      	mov	r3, r0
 80085f0:	70fb      	strb	r3, [r7, #3]

		  uartPrintf(_DEF_UART2, "rx_data : 0x%X\n", rx_data);
 80085f2:	78fb      	ldrb	r3, [r7, #3]
 80085f4:	461a      	mov	r2, r3
 80085f6:	4903      	ldr	r1, [pc, #12]	; (8008604 <apMain+0x50>)
 80085f8:	2001      	movs	r0, #1
 80085fa:	f001 f91b 	bl	8009834 <uartPrintf>
		}
		cliMain();
 80085fe:	f000 fb1b 	bl	8008c38 <cliMain>
		if(millis() - pre_time >= 500)
 8008602:	e7dd      	b.n	80085c0 <apMain+0xc>
 8008604:	080126c4 	.word	0x080126c4

08008608 <bspInit>:
#include "uart.h"

void SystemClock_Config(void);

void bspInit(void)
{
 8008608:	b580      	push	{r7, lr}
 800860a:	b084      	sub	sp, #16
 800860c:	af00      	add	r7, sp, #0
  HAL_Init();
 800860e:	f001 fa55 	bl	8009abc <HAL_Init>
  SystemClock_Config();
 8008612:	f000 f843 	bl	800869c <SystemClock_Config>

  __HAL_RCC_GPIOC_CLK_ENABLE();
 8008616:	2300      	movs	r3, #0
 8008618:	60fb      	str	r3, [r7, #12]
 800861a:	4b16      	ldr	r3, [pc, #88]	; (8008674 <bspInit+0x6c>)
 800861c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800861e:	4a15      	ldr	r2, [pc, #84]	; (8008674 <bspInit+0x6c>)
 8008620:	f043 0304 	orr.w	r3, r3, #4
 8008624:	6313      	str	r3, [r2, #48]	; 0x30
 8008626:	4b13      	ldr	r3, [pc, #76]	; (8008674 <bspInit+0x6c>)
 8008628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800862a:	f003 0304 	and.w	r3, r3, #4
 800862e:	60fb      	str	r3, [r7, #12]
 8008630:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8008632:	2300      	movs	r3, #0
 8008634:	60bb      	str	r3, [r7, #8]
 8008636:	4b0f      	ldr	r3, [pc, #60]	; (8008674 <bspInit+0x6c>)
 8008638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800863a:	4a0e      	ldr	r2, [pc, #56]	; (8008674 <bspInit+0x6c>)
 800863c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008640:	6313      	str	r3, [r2, #48]	; 0x30
 8008642:	4b0c      	ldr	r3, [pc, #48]	; (8008674 <bspInit+0x6c>)
 8008644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008646:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800864a:	60bb      	str	r3, [r7, #8]
 800864c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800864e:	2300      	movs	r3, #0
 8008650:	607b      	str	r3, [r7, #4]
 8008652:	4b08      	ldr	r3, [pc, #32]	; (8008674 <bspInit+0x6c>)
 8008654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008656:	4a07      	ldr	r2, [pc, #28]	; (8008674 <bspInit+0x6c>)
 8008658:	f043 0301 	orr.w	r3, r3, #1
 800865c:	6313      	str	r3, [r2, #48]	; 0x30
 800865e:	4b05      	ldr	r3, [pc, #20]	; (8008674 <bspInit+0x6c>)
 8008660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008662:	f003 0301 	and.w	r3, r3, #1
 8008666:	607b      	str	r3, [r7, #4]
 8008668:	687b      	ldr	r3, [r7, #4]

}
 800866a:	bf00      	nop
 800866c:	3710      	adds	r7, #16
 800866e:	46bd      	mov	sp, r7
 8008670:	bd80      	pop	{r7, pc}
 8008672:	bf00      	nop
 8008674:	40023800 	.word	0x40023800

08008678 <delay>:
void delay(uint32_t ms)
{
 8008678:	b580      	push	{r7, lr}
 800867a:	b082      	sub	sp, #8
 800867c:	af00      	add	r7, sp, #0
 800867e:	6078      	str	r0, [r7, #4]
  HAL_Delay(ms);
 8008680:	6878      	ldr	r0, [r7, #4]
 8008682:	f001 fa8d 	bl	8009ba0 <HAL_Delay>
}
 8008686:	bf00      	nop
 8008688:	3708      	adds	r7, #8
 800868a:	46bd      	mov	sp, r7
 800868c:	bd80      	pop	{r7, pc}

0800868e <millis>:
uint32_t millis(void)
{
 800868e:	b580      	push	{r7, lr}
 8008690:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8008692:	f001 fa79 	bl	8009b88 <HAL_GetTick>
 8008696:	4603      	mov	r3, r0
}
 8008698:	4618      	mov	r0, r3
 800869a:	bd80      	pop	{r7, pc}

0800869c <SystemClock_Config>:
  return 1;
}


void SystemClock_Config(void)
{
 800869c:	b580      	push	{r7, lr}
 800869e:	b094      	sub	sp, #80	; 0x50
 80086a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80086a2:	f107 0320 	add.w	r3, r7, #32
 80086a6:	2230      	movs	r2, #48	; 0x30
 80086a8:	2100      	movs	r1, #0
 80086aa:	4618      	mov	r0, r3
 80086ac:	f009 fb6e 	bl	8011d8c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80086b0:	f107 030c 	add.w	r3, r7, #12
 80086b4:	2200      	movs	r2, #0
 80086b6:	601a      	str	r2, [r3, #0]
 80086b8:	605a      	str	r2, [r3, #4]
 80086ba:	609a      	str	r2, [r3, #8]
 80086bc:	60da      	str	r2, [r3, #12]
 80086be:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80086c0:	2300      	movs	r3, #0
 80086c2:	60bb      	str	r3, [r7, #8]
 80086c4:	4b28      	ldr	r3, [pc, #160]	; (8008768 <SystemClock_Config+0xcc>)
 80086c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086c8:	4a27      	ldr	r2, [pc, #156]	; (8008768 <SystemClock_Config+0xcc>)
 80086ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80086ce:	6413      	str	r3, [r2, #64]	; 0x40
 80086d0:	4b25      	ldr	r3, [pc, #148]	; (8008768 <SystemClock_Config+0xcc>)
 80086d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80086d8:	60bb      	str	r3, [r7, #8]
 80086da:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80086dc:	2300      	movs	r3, #0
 80086de:	607b      	str	r3, [r7, #4]
 80086e0:	4b22      	ldr	r3, [pc, #136]	; (800876c <SystemClock_Config+0xd0>)
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	4a21      	ldr	r2, [pc, #132]	; (800876c <SystemClock_Config+0xd0>)
 80086e6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80086ea:	6013      	str	r3, [r2, #0]
 80086ec:	4b1f      	ldr	r3, [pc, #124]	; (800876c <SystemClock_Config+0xd0>)
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80086f4:	607b      	str	r3, [r7, #4]
 80086f6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 80086f8:	2305      	movs	r3, #5
 80086fa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80086fc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008700:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8008702:	2301      	movs	r3, #1
 8008704:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8008706:	2302      	movs	r3, #2
 8008708:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800870a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800870e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8008710:	2319      	movs	r3, #25
 8008712:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8008714:	23c0      	movs	r3, #192	; 0xc0
 8008716:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8008718:	2302      	movs	r3, #2
 800871a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800871c:	2304      	movs	r3, #4
 800871e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8008720:	f107 0320 	add.w	r3, r7, #32
 8008724:	4618      	mov	r0, r3
 8008726:	f003 fc21 	bl	800bf6c <HAL_RCC_OscConfig>
 800872a:	4603      	mov	r3, r0
 800872c:	2b00      	cmp	r3, #0
 800872e:	d001      	beq.n	8008734 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8008730:	f000 f81e 	bl	8008770 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8008734:	230f      	movs	r3, #15
 8008736:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8008738:	2302      	movs	r3, #2
 800873a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800873c:	2300      	movs	r3, #0
 800873e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8008740:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008744:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8008746:	2300      	movs	r3, #0
 8008748:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800874a:	f107 030c 	add.w	r3, r7, #12
 800874e:	2103      	movs	r1, #3
 8008750:	4618      	mov	r0, r3
 8008752:	f003 fe83 	bl	800c45c <HAL_RCC_ClockConfig>
 8008756:	4603      	mov	r3, r0
 8008758:	2b00      	cmp	r3, #0
 800875a:	d001      	beq.n	8008760 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800875c:	f000 f808 	bl	8008770 <Error_Handler>
  }
}
 8008760:	bf00      	nop
 8008762:	3750      	adds	r7, #80	; 0x50
 8008764:	46bd      	mov	sp, r7
 8008766:	bd80      	pop	{r7, pc}
 8008768:	40023800 	.word	0x40023800
 800876c:	40007000 	.word	0x40007000

08008770 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8008770:	b480      	push	{r7}
 8008772:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8008774:	b672      	cpsid	i
}
 8008776:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8008778:	e7fe      	b.n	8008778 <Error_Handler+0x8>
	...

0800877c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800877c:	b480      	push	{r7}
 800877e:	b083      	sub	sp, #12
 8008780:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008782:	2300      	movs	r3, #0
 8008784:	607b      	str	r3, [r7, #4]
 8008786:	4b10      	ldr	r3, [pc, #64]	; (80087c8 <HAL_MspInit+0x4c>)
 8008788:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800878a:	4a0f      	ldr	r2, [pc, #60]	; (80087c8 <HAL_MspInit+0x4c>)
 800878c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008790:	6453      	str	r3, [r2, #68]	; 0x44
 8008792:	4b0d      	ldr	r3, [pc, #52]	; (80087c8 <HAL_MspInit+0x4c>)
 8008794:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008796:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800879a:	607b      	str	r3, [r7, #4]
 800879c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800879e:	2300      	movs	r3, #0
 80087a0:	603b      	str	r3, [r7, #0]
 80087a2:	4b09      	ldr	r3, [pc, #36]	; (80087c8 <HAL_MspInit+0x4c>)
 80087a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087a6:	4a08      	ldr	r2, [pc, #32]	; (80087c8 <HAL_MspInit+0x4c>)
 80087a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80087ac:	6413      	str	r3, [r2, #64]	; 0x40
 80087ae:	4b06      	ldr	r3, [pc, #24]	; (80087c8 <HAL_MspInit+0x4c>)
 80087b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80087b6:	603b      	str	r3, [r7, #0]
 80087b8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80087ba:	bf00      	nop
 80087bc:	370c      	adds	r7, #12
 80087be:	46bd      	mov	sp, r7
 80087c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087c4:	4770      	bx	lr
 80087c6:	bf00      	nop
 80087c8:	40023800 	.word	0x40023800

080087cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80087cc:	b480      	push	{r7}
 80087ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80087d0:	e7fe      	b.n	80087d0 <NMI_Handler+0x4>

080087d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80087d2:	b480      	push	{r7}
 80087d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80087d6:	e7fe      	b.n	80087d6 <HardFault_Handler+0x4>

080087d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80087d8:	b480      	push	{r7}
 80087da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80087dc:	e7fe      	b.n	80087dc <MemManage_Handler+0x4>

080087de <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80087de:	b480      	push	{r7}
 80087e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80087e2:	e7fe      	b.n	80087e2 <BusFault_Handler+0x4>

080087e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80087e4:	b480      	push	{r7}
 80087e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80087e8:	e7fe      	b.n	80087e8 <UsageFault_Handler+0x4>

080087ea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80087ea:	b480      	push	{r7}
 80087ec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80087ee:	bf00      	nop
 80087f0:	46bd      	mov	sp, r7
 80087f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087f6:	4770      	bx	lr

080087f8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80087f8:	b480      	push	{r7}
 80087fa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80087fc:	bf00      	nop
 80087fe:	46bd      	mov	sp, r7
 8008800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008804:	4770      	bx	lr

08008806 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8008806:	b480      	push	{r7}
 8008808:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800880a:	bf00      	nop
 800880c:	46bd      	mov	sp, r7
 800880e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008812:	4770      	bx	lr

08008814 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8008814:	b580      	push	{r7, lr}
 8008816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8008818:	f001 f9a2 	bl	8009b60 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800881c:	bf00      	nop
 800881e:	bd80      	pop	{r7, pc}

08008820 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8008820:	b580      	push	{r7, lr}
 8008822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8008824:	4802      	ldr	r0, [pc, #8]	; (8008830 <USART1_IRQHandler+0x10>)
 8008826:	f004 fb3f 	bl	800cea8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800882a:	bf00      	nop
 800882c:	bd80      	pop	{r7, pc}
 800882e:	bf00      	nop
 8008830:	20000314 	.word	0x20000314

08008834 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8008834:	b580      	push	{r7, lr}
 8008836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8008838:	4802      	ldr	r0, [pc, #8]	; (8008844 <DMA2_Stream2_IRQHandler+0x10>)
 800883a:	f001 fd0f 	bl	800a25c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800883e:	bf00      	nop
 8008840:	bd80      	pop	{r7, pc}
 8008842:	bf00      	nop
 8008844:	20000358 	.word	0x20000358

08008848 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8008848:	b580      	push	{r7, lr}
 800884a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800884c:	4802      	ldr	r0, [pc, #8]	; (8008858 <OTG_FS_IRQHandler+0x10>)
 800884e:	f002 fb5a 	bl	800af06 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8008852:	bf00      	nop
 8008854:	bd80      	pop	{r7, pc}
 8008856:	bf00      	nop
 8008858:	200013c8 	.word	0x200013c8

0800885c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800885c:	b580      	push	{r7, lr}
 800885e:	b086      	sub	sp, #24
 8008860:	af00      	add	r7, sp, #0
 8008862:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8008864:	4a14      	ldr	r2, [pc, #80]	; (80088b8 <_sbrk+0x5c>)
 8008866:	4b15      	ldr	r3, [pc, #84]	; (80088bc <_sbrk+0x60>)
 8008868:	1ad3      	subs	r3, r2, r3
 800886a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800886c:	697b      	ldr	r3, [r7, #20]
 800886e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8008870:	4b13      	ldr	r3, [pc, #76]	; (80088c0 <_sbrk+0x64>)
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	2b00      	cmp	r3, #0
 8008876:	d102      	bne.n	800887e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8008878:	4b11      	ldr	r3, [pc, #68]	; (80088c0 <_sbrk+0x64>)
 800887a:	4a12      	ldr	r2, [pc, #72]	; (80088c4 <_sbrk+0x68>)
 800887c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800887e:	4b10      	ldr	r3, [pc, #64]	; (80088c0 <_sbrk+0x64>)
 8008880:	681a      	ldr	r2, [r3, #0]
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	4413      	add	r3, r2
 8008886:	693a      	ldr	r2, [r7, #16]
 8008888:	429a      	cmp	r2, r3
 800888a:	d207      	bcs.n	800889c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800888c:	f009 fa54 	bl	8011d38 <__errno>
 8008890:	4603      	mov	r3, r0
 8008892:	220c      	movs	r2, #12
 8008894:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8008896:	f04f 33ff 	mov.w	r3, #4294967295
 800889a:	e009      	b.n	80088b0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800889c:	4b08      	ldr	r3, [pc, #32]	; (80088c0 <_sbrk+0x64>)
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80088a2:	4b07      	ldr	r3, [pc, #28]	; (80088c0 <_sbrk+0x64>)
 80088a4:	681a      	ldr	r2, [r3, #0]
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	4413      	add	r3, r2
 80088aa:	4a05      	ldr	r2, [pc, #20]	; (80088c0 <_sbrk+0x64>)
 80088ac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80088ae:	68fb      	ldr	r3, [r7, #12]
}
 80088b0:	4618      	mov	r0, r3
 80088b2:	3718      	adds	r7, #24
 80088b4:	46bd      	mov	sp, r7
 80088b6:	bd80      	pop	{r7, pc}
 80088b8:	20020000 	.word	0x20020000
 80088bc:	00000400 	.word	0x00000400
 80088c0:	20000228 	.word	0x20000228
 80088c4:	20001a00 	.word	0x20001a00

080088c8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80088c8:	b480      	push	{r7}
 80088ca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80088cc:	4b07      	ldr	r3, [pc, #28]	; (80088ec <SystemInit+0x24>)
 80088ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80088d2:	4a06      	ldr	r2, [pc, #24]	; (80088ec <SystemInit+0x24>)
 80088d4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80088d8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM || DATA_IN_ExtSDRAM */

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
 80088dc:	4b03      	ldr	r3, [pc, #12]	; (80088ec <SystemInit+0x24>)
 80088de:	4a04      	ldr	r2, [pc, #16]	; (80088f0 <SystemInit+0x28>)
 80088e0:	609a      	str	r2, [r3, #8]
#endif /* USER_VECT_TAB_ADDRESS */
}
 80088e2:	bf00      	nop
 80088e4:	46bd      	mov	sp, r7
 80088e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ea:	4770      	bx	lr
 80088ec:	e000ed00 	.word	0xe000ed00
 80088f0:	08008000 	.word	0x08008000

080088f4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80088f4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800892c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80088f8:	480d      	ldr	r0, [pc, #52]	; (8008930 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80088fa:	490e      	ldr	r1, [pc, #56]	; (8008934 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80088fc:	4a0e      	ldr	r2, [pc, #56]	; (8008938 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80088fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8008900:	e002      	b.n	8008908 <LoopCopyDataInit>

08008902 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8008902:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8008904:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8008906:	3304      	adds	r3, #4

08008908 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8008908:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800890a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800890c:	d3f9      	bcc.n	8008902 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800890e:	4a0b      	ldr	r2, [pc, #44]	; (800893c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8008910:	4c0b      	ldr	r4, [pc, #44]	; (8008940 <LoopFillZerobss+0x26>)
  movs r3, #0
 8008912:	2300      	movs	r3, #0
  b LoopFillZerobss
 8008914:	e001      	b.n	800891a <LoopFillZerobss>

08008916 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8008916:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8008918:	3204      	adds	r2, #4

0800891a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800891a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800891c:	d3fb      	bcc.n	8008916 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800891e:	f7ff ffd3 	bl	80088c8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8008922:	f009 fa0f 	bl	8011d44 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8008926:	f009 f9fb 	bl	8011d20 <main>
  bx  lr    
 800892a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800892c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8008930:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8008934:	2000020c 	.word	0x2000020c
  ldr r2, =_sidata
 8008938:	08012844 	.word	0x08012844
  ldr r2, =_sbss
 800893c:	2000020c 	.word	0x2000020c
  ldr r4, =_ebss
 8008940:	20001a00 	.word	0x20001a00

08008944 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8008944:	e7fe      	b.n	8008944 <ADC_IRQHandler>

08008946 <qbufferCreate>:
{

}

bool qbufferCreate(qbuffer_t *p_node, uint8_t *p_buf, uint32_t length)
{
 8008946:	b480      	push	{r7}
 8008948:	b087      	sub	sp, #28
 800894a:	af00      	add	r7, sp, #0
 800894c:	60f8      	str	r0, [r7, #12]
 800894e:	60b9      	str	r1, [r7, #8]
 8008950:	607a      	str	r2, [r7, #4]
	/*Making buffer is index initializing */
	bool ret = true;
 8008952:	2301      	movs	r3, #1
 8008954:	75fb      	strb	r3, [r7, #23]

	p_node->in 		= 0;
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	2200      	movs	r2, #0
 800895a:	601a      	str	r2, [r3, #0]
	p_node->out	  = 0;
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	2200      	movs	r2, #0
 8008960:	605a      	str	r2, [r3, #4]
	p_node->len   = length;
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	687a      	ldr	r2, [r7, #4]
 8008966:	609a      	str	r2, [r3, #8]
	p_node->p_buf = p_buf;
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	68ba      	ldr	r2, [r7, #8]
 800896c:	60da      	str	r2, [r3, #12]

	return ret;
 800896e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008970:	4618      	mov	r0, r3
 8008972:	371c      	adds	r7, #28
 8008974:	46bd      	mov	sp, r7
 8008976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800897a:	4770      	bx	lr

0800897c <qbufferRead>:
	return ret;
}

/* Read qbuffer and input to p_data. */
bool qbufferRead(qbuffer_t *p_node, uint8_t *p_data, uint32_t length)
{
 800897c:	b480      	push	{r7}
 800897e:	b087      	sub	sp, #28
 8008980:	af00      	add	r7, sp, #0
 8008982:	60f8      	str	r0, [r7, #12]
 8008984:	60b9      	str	r1, [r7, #8]
 8008986:	607a      	str	r2, [r7, #4]
	bool ret = true;
 8008988:	2301      	movs	r3, #1
 800898a:	75fb      	strb	r3, [r7, #23]
	for(int i = 0; i < length; i++)
 800898c:	2300      	movs	r3, #0
 800898e:	613b      	str	r3, [r7, #16]
 8008990:	e026      	b.n	80089e0 <qbufferRead+0x64>
	{
		if(p_node->p_buf != NULL)
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	68db      	ldr	r3, [r3, #12]
 8008996:	2b00      	cmp	r3, #0
 8008998:	d009      	beq.n	80089ae <qbufferRead+0x32>
		{
			p_data[i] = p_node->p_buf[p_node->out];
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	68da      	ldr	r2, [r3, #12]
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	685b      	ldr	r3, [r3, #4]
 80089a2:	441a      	add	r2, r3
 80089a4:	693b      	ldr	r3, [r7, #16]
 80089a6:	68b9      	ldr	r1, [r7, #8]
 80089a8:	440b      	add	r3, r1
 80089aa:	7812      	ldrb	r2, [r2, #0]
 80089ac:	701a      	strb	r2, [r3, #0]
		}
		if(p_node->out != p_node->in)
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	685a      	ldr	r2, [r3, #4]
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	429a      	cmp	r2, r3
 80089b8:	d00c      	beq.n	80089d4 <qbufferRead+0x58>
		{
			/* index update */
			p_node->out = (p_node->out + 1) % p_node->len;
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	685b      	ldr	r3, [r3, #4]
 80089be:	3301      	adds	r3, #1
 80089c0:	68fa      	ldr	r2, [r7, #12]
 80089c2:	6892      	ldr	r2, [r2, #8]
 80089c4:	fbb3 f1f2 	udiv	r1, r3, r2
 80089c8:	fb01 f202 	mul.w	r2, r1, r2
 80089cc:	1a9a      	subs	r2, r3, r2
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	605a      	str	r2, [r3, #4]
 80089d2:	e002      	b.n	80089da <qbufferRead+0x5e>
		}
		else /*when in idx = out idx*/
		{
			ret = false;
 80089d4:	2300      	movs	r3, #0
 80089d6:	75fb      	strb	r3, [r7, #23]
			break;
 80089d8:	e006      	b.n	80089e8 <qbufferRead+0x6c>
	for(int i = 0; i < length; i++)
 80089da:	693b      	ldr	r3, [r7, #16]
 80089dc:	3301      	adds	r3, #1
 80089de:	613b      	str	r3, [r7, #16]
 80089e0:	693b      	ldr	r3, [r7, #16]
 80089e2:	687a      	ldr	r2, [r7, #4]
 80089e4:	429a      	cmp	r2, r3
 80089e6:	d8d4      	bhi.n	8008992 <qbufferRead+0x16>
		}
	}
	return ret;
 80089e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80089ea:	4618      	mov	r0, r3
 80089ec:	371c      	adds	r7, #28
 80089ee:	46bd      	mov	sp, r7
 80089f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089f4:	4770      	bx	lr

080089f6 <qbufferAvailable>:

/*transmit struct pointer, receive current buffer's data number*/
uint32_t qbufferAvailable(qbuffer_t *p_node)
{
 80089f6:	b480      	push	{r7}
 80089f8:	b085      	sub	sp, #20
 80089fa:	af00      	add	r7, sp, #0
 80089fc:	6078      	str	r0, [r7, #4]
	uint32_t ret;

	ret = (p_node->len + p_node->in - p_node->out) % p_node->len;
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	689a      	ldr	r2, [r3, #8]
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	441a      	add	r2, r3
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	685b      	ldr	r3, [r3, #4]
 8008a0c:	1ad3      	subs	r3, r2, r3
 8008a0e:	687a      	ldr	r2, [r7, #4]
 8008a10:	6892      	ldr	r2, [r2, #8]
 8008a12:	fbb3 f1f2 	udiv	r1, r3, r2
 8008a16:	fb01 f202 	mul.w	r2, r1, r2
 8008a1a:	1a9b      	subs	r3, r3, r2
 8008a1c:	60fb      	str	r3, [r7, #12]

	return ret;
 8008a1e:	68fb      	ldr	r3, [r7, #12]
}
 8008a20:	4618      	mov	r0, r3
 8008a22:	3714      	adds	r7, #20
 8008a24:	46bd      	mov	sp, r7
 8008a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a2a:	4770      	bx	lr

08008a2c <cliInit>:




bool cliInit(void)
{
 8008a2c:	b580      	push	{r7, lr}
 8008a2e:	af00      	add	r7, sp, #0
  cli_node.is_open = false;
 8008a30:	4b0d      	ldr	r3, [pc, #52]	; (8008a68 <cliInit+0x3c>)
 8008a32:	2200      	movs	r2, #0
 8008a34:	721a      	strb	r2, [r3, #8]
  cli_node.is_log  = false;
 8008a36:	4b0c      	ldr	r3, [pc, #48]	; (8008a68 <cliInit+0x3c>)
 8008a38:	2200      	movs	r2, #0
 8008a3a:	725a      	strb	r2, [r3, #9]
  cli_node.state   = CLI_RX_IDLE;
 8008a3c:	4b0a      	ldr	r3, [pc, #40]	; (8008a68 <cliInit+0x3c>)
 8008a3e:	2200      	movs	r2, #0
 8008a40:	741a      	strb	r2, [r3, #16]

  cli_node.hist_line_i     = 0;
 8008a42:	4b09      	ldr	r3, [pc, #36]	; (8008a68 <cliInit+0x3c>)
 8008a44:	2200      	movs	r2, #0
 8008a46:	749a      	strb	r2, [r3, #18]
  cli_node.hist_line_last  = 0;
 8008a48:	4b07      	ldr	r3, [pc, #28]	; (8008a68 <cliInit+0x3c>)
 8008a4a:	2200      	movs	r2, #0
 8008a4c:	74da      	strb	r2, [r3, #19]
  cli_node.hist_line_count = 0;
 8008a4e:	4b06      	ldr	r3, [pc, #24]	; (8008a68 <cliInit+0x3c>)
 8008a50:	2200      	movs	r2, #0
 8008a52:	751a      	strb	r2, [r3, #20]
  cli_node.hist_line_new   = false;
 8008a54:	4b04      	ldr	r3, [pc, #16]	; (8008a68 <cliInit+0x3c>)
 8008a56:	2200      	movs	r2, #0
 8008a58:	745a      	strb	r2, [r3, #17]

  cliLineClean(&cli_node);
 8008a5a:	4803      	ldr	r0, [pc, #12]	; (8008a68 <cliInit+0x3c>)
 8008a5c:	f000 fb7a 	bl	8009154 <cliLineClean>

  return true;
 8008a60:	2301      	movs	r3, #1
}
 8008a62:	4618      	mov	r0, r3
 8008a64:	bd80      	pop	{r7, pc}
 8008a66:	bf00      	nop
 8008a68:	2000022c 	.word	0x2000022c

08008a6c <cliOpen>:

bool cliOpen(uint8_t ch, uint32_t baud)
{
 8008a6c:	b580      	push	{r7, lr}
 8008a6e:	b082      	sub	sp, #8
 8008a70:	af00      	add	r7, sp, #0
 8008a72:	4603      	mov	r3, r0
 8008a74:	6039      	str	r1, [r7, #0]
 8008a76:	71fb      	strb	r3, [r7, #7]
  cli_node.ch = ch;
 8008a78:	4a0c      	ldr	r2, [pc, #48]	; (8008aac <cliOpen+0x40>)
 8008a7a:	79fb      	ldrb	r3, [r7, #7]
 8008a7c:	7013      	strb	r3, [r2, #0]
  cli_node.baud = baud;
 8008a7e:	4a0b      	ldr	r2, [pc, #44]	; (8008aac <cliOpen+0x40>)
 8008a80:	683b      	ldr	r3, [r7, #0]
 8008a82:	6053      	str	r3, [r2, #4]

  cli_node.is_open = uartOpen(ch, baud);
 8008a84:	79fb      	ldrb	r3, [r7, #7]
 8008a86:	6839      	ldr	r1, [r7, #0]
 8008a88:	4618      	mov	r0, r3
 8008a8a:	f000 fdbf 	bl	800960c <uartOpen>
 8008a8e:	4603      	mov	r3, r0
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	bf14      	ite	ne
 8008a94:	2301      	movne	r3, #1
 8008a96:	2300      	moveq	r3, #0
 8008a98:	b2da      	uxtb	r2, r3
 8008a9a:	4b04      	ldr	r3, [pc, #16]	; (8008aac <cliOpen+0x40>)
 8008a9c:	721a      	strb	r2, [r3, #8]

  return cli_node.is_open;
 8008a9e:	4b03      	ldr	r3, [pc, #12]	; (8008aac <cliOpen+0x40>)
 8008aa0:	7a1b      	ldrb	r3, [r3, #8]
}
 8008aa2:	4618      	mov	r0, r3
 8008aa4:	3708      	adds	r7, #8
 8008aa6:	46bd      	mov	sp, r7
 8008aa8:	bd80      	pop	{r7, pc}
 8008aaa:	bf00      	nop
 8008aac:	2000022c 	.word	0x2000022c

08008ab0 <cliOpenLog>:

bool cliOpenLog(uint8_t ch, uint32_t baud)
{
 8008ab0:	b580      	push	{r7, lr}
 8008ab2:	b084      	sub	sp, #16
 8008ab4:	af00      	add	r7, sp, #0
 8008ab6:	4603      	mov	r3, r0
 8008ab8:	6039      	str	r1, [r7, #0]
 8008aba:	71fb      	strb	r3, [r7, #7]
  bool ret;

  cli_node.log_ch = ch;
 8008abc:	4a0d      	ldr	r2, [pc, #52]	; (8008af4 <cliOpenLog+0x44>)
 8008abe:	79fb      	ldrb	r3, [r7, #7]
 8008ac0:	7293      	strb	r3, [r2, #10]
  cli_node.log_baud = baud;
 8008ac2:	4a0c      	ldr	r2, [pc, #48]	; (8008af4 <cliOpenLog+0x44>)
 8008ac4:	683b      	ldr	r3, [r7, #0]
 8008ac6:	60d3      	str	r3, [r2, #12]

  ret = uartOpen(ch, baud);
 8008ac8:	79fb      	ldrb	r3, [r7, #7]
 8008aca:	6839      	ldr	r1, [r7, #0]
 8008acc:	4618      	mov	r0, r3
 8008ace:	f000 fd9d 	bl	800960c <uartOpen>
 8008ad2:	4603      	mov	r3, r0
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	bf14      	ite	ne
 8008ad8:	2301      	movne	r3, #1
 8008ada:	2300      	moveq	r3, #0
 8008adc:	73fb      	strb	r3, [r7, #15]

  if (ret == true)
 8008ade:	7bfb      	ldrb	r3, [r7, #15]
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d002      	beq.n	8008aea <cliOpenLog+0x3a>
  {
    cli_node.is_log = true;
 8008ae4:	4b03      	ldr	r3, [pc, #12]	; (8008af4 <cliOpenLog+0x44>)
 8008ae6:	2201      	movs	r2, #1
 8008ae8:	725a      	strb	r2, [r3, #9]
  }
  return ret;
 8008aea:	7bfb      	ldrb	r3, [r7, #15]
}
 8008aec:	4618      	mov	r0, r3
 8008aee:	3710      	adds	r7, #16
 8008af0:	46bd      	mov	sp, r7
 8008af2:	bd80      	pop	{r7, pc}
 8008af4:	2000022c 	.word	0x2000022c

08008af8 <cliShowLog>:
  cli_node.is_log = false;
  return true;
}

void cliShowLog(cli_t *p_cli)
{
 8008af8:	b580      	push	{r7, lr}
 8008afa:	b084      	sub	sp, #16
 8008afc:	af00      	add	r7, sp, #0
 8008afe:	6078      	str	r0, [r7, #4]
  if (cli_node.is_log == true)
 8008b00:	4b37      	ldr	r3, [pc, #220]	; (8008be0 <cliShowLog+0xe8>)
 8008b02:	7a5b      	ldrb	r3, [r3, #9]
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d066      	beq.n	8008bd6 <cliShowLog+0xde>
  {
    uartPrintf(p_cli->log_ch, "Cursor  : %d\n", p_cli->line.cursor);
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	7a9b      	ldrb	r3, [r3, #10]
 8008b0c:	4618      	mov	r0, r3
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	f893 30c2 	ldrb.w	r3, [r3, #194]	; 0xc2
 8008b14:	461a      	mov	r2, r3
 8008b16:	4933      	ldr	r1, [pc, #204]	; (8008be4 <cliShowLog+0xec>)
 8008b18:	f000 fe8c 	bl	8009834 <uartPrintf>
    uartPrintf(p_cli->log_ch, "Count   : %d\n", p_cli->line.count);
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	7a9b      	ldrb	r3, [r3, #10]
 8008b20:	4618      	mov	r0, r3
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
 8008b28:	461a      	mov	r2, r3
 8008b2a:	492f      	ldr	r1, [pc, #188]	; (8008be8 <cliShowLog+0xf0>)
 8008b2c:	f000 fe82 	bl	8009834 <uartPrintf>
    uartPrintf(p_cli->log_ch, "buf_len : %d\n", p_cli->line.buf_len);
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	7a9b      	ldrb	r3, [r3, #10]
 8008b34:	4618      	mov	r0, r3
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 8008b3c:	461a      	mov	r2, r3
 8008b3e:	492b      	ldr	r1, [pc, #172]	; (8008bec <cliShowLog+0xf4>)
 8008b40:	f000 fe78 	bl	8009834 <uartPrintf>
    uartPrintf(p_cli->log_ch, "buf     : %s\n", p_cli->line.buf);
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	7a9b      	ldrb	r3, [r3, #10]
 8008b48:	4618      	mov	r0, r3
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	33a1      	adds	r3, #161	; 0xa1
 8008b4e:	461a      	mov	r2, r3
 8008b50:	4927      	ldr	r1, [pc, #156]	; (8008bf0 <cliShowLog+0xf8>)
 8008b52:	f000 fe6f 	bl	8009834 <uartPrintf>
    uartPrintf(p_cli->log_ch, "line_i  : %d\n", p_cli->hist_line_i);
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	7a9b      	ldrb	r3, [r3, #10]
 8008b5a:	4618      	mov	r0, r3
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	f993 3012 	ldrsb.w	r3, [r3, #18]
 8008b62:	461a      	mov	r2, r3
 8008b64:	4923      	ldr	r1, [pc, #140]	; (8008bf4 <cliShowLog+0xfc>)
 8008b66:	f000 fe65 	bl	8009834 <uartPrintf>
    uartPrintf(p_cli->log_ch, "line_lt : %d\n", p_cli->hist_line_last);
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	7a9b      	ldrb	r3, [r3, #10]
 8008b6e:	4618      	mov	r0, r3
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	7cdb      	ldrb	r3, [r3, #19]
 8008b74:	461a      	mov	r2, r3
 8008b76:	4920      	ldr	r1, [pc, #128]	; (8008bf8 <cliShowLog+0x100>)
 8008b78:	f000 fe5c 	bl	8009834 <uartPrintf>
    uartPrintf(p_cli->log_ch, "line_c  : %d\n", p_cli->hist_line_count);
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	7a9b      	ldrb	r3, [r3, #10]
 8008b80:	4618      	mov	r0, r3
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	7d1b      	ldrb	r3, [r3, #20]
 8008b86:	461a      	mov	r2, r3
 8008b88:	491c      	ldr	r1, [pc, #112]	; (8008bfc <cliShowLog+0x104>)
 8008b8a:	f000 fe53 	bl	8009834 <uartPrintf>

    for (int i=0; i<p_cli->hist_line_count; i++)
 8008b8e:	2300      	movs	r3, #0
 8008b90:	60fb      	str	r3, [r7, #12]
 8008b92:	e014      	b.n	8008bbe <cliShowLog+0xc6>
    {
      uartPrintf(p_cli->log_ch, "buf %d   : %s\n", i, p_cli->line_buf[i].buf);
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	7a9b      	ldrb	r3, [r3, #10]
 8008b98:	4618      	mov	r0, r3
 8008b9a:	68fa      	ldr	r2, [r7, #12]
 8008b9c:	4613      	mov	r3, r2
 8008b9e:	009b      	lsls	r3, r3, #2
 8008ba0:	4413      	add	r3, r2
 8008ba2:	00da      	lsls	r2, r3, #3
 8008ba4:	1ad2      	subs	r2, r2, r3
 8008ba6:	f102 0310 	add.w	r3, r2, #16
 8008baa:	687a      	ldr	r2, [r7, #4]
 8008bac:	4413      	add	r3, r2
 8008bae:	3305      	adds	r3, #5
 8008bb0:	68fa      	ldr	r2, [r7, #12]
 8008bb2:	4913      	ldr	r1, [pc, #76]	; (8008c00 <cliShowLog+0x108>)
 8008bb4:	f000 fe3e 	bl	8009834 <uartPrintf>
    for (int i=0; i<p_cli->hist_line_count; i++)
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	3301      	adds	r3, #1
 8008bbc:	60fb      	str	r3, [r7, #12]
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	7d1b      	ldrb	r3, [r3, #20]
 8008bc2:	461a      	mov	r2, r3
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	4293      	cmp	r3, r2
 8008bc8:	dbe4      	blt.n	8008b94 <cliShowLog+0x9c>
    }
    uartPrintf(p_cli->log_ch, "\n");
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	7a9b      	ldrb	r3, [r3, #10]
 8008bce:	490d      	ldr	r1, [pc, #52]	; (8008c04 <cliShowLog+0x10c>)
 8008bd0:	4618      	mov	r0, r3
 8008bd2:	f000 fe2f 	bl	8009834 <uartPrintf>
  }
}
 8008bd6:	bf00      	nop
 8008bd8:	3710      	adds	r7, #16
 8008bda:	46bd      	mov	sp, r7
 8008bdc:	bd80      	pop	{r7, pc}
 8008bde:	bf00      	nop
 8008be0:	2000022c 	.word	0x2000022c
 8008be4:	080126d4 	.word	0x080126d4
 8008be8:	080126e4 	.word	0x080126e4
 8008bec:	080126f4 	.word	0x080126f4
 8008bf0:	08012704 	.word	0x08012704
 8008bf4:	08012714 	.word	0x08012714
 8008bf8:	08012724 	.word	0x08012724
 8008bfc:	08012734 	.word	0x08012734
 8008c00:	08012744 	.word	0x08012744
 8008c04:	08012754 	.word	0x08012754

08008c08 <cliShowPrompt>:

void cliShowPrompt(cli_t *p_cli)
{
 8008c08:	b580      	push	{r7, lr}
 8008c0a:	b082      	sub	sp, #8
 8008c0c:	af00      	add	r7, sp, #0
 8008c0e:	6078      	str	r0, [r7, #4]
  uartPrintf(p_cli->ch, "\n\r");
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	781b      	ldrb	r3, [r3, #0]
 8008c14:	4906      	ldr	r1, [pc, #24]	; (8008c30 <cliShowPrompt+0x28>)
 8008c16:	4618      	mov	r0, r3
 8008c18:	f000 fe0c 	bl	8009834 <uartPrintf>
  uartPrintf(p_cli->ch, CLI_PROMPT_STR);
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	781b      	ldrb	r3, [r3, #0]
 8008c20:	4904      	ldr	r1, [pc, #16]	; (8008c34 <cliShowPrompt+0x2c>)
 8008c22:	4618      	mov	r0, r3
 8008c24:	f000 fe06 	bl	8009834 <uartPrintf>
}
 8008c28:	bf00      	nop
 8008c2a:	3708      	adds	r7, #8
 8008c2c:	46bd      	mov	sp, r7
 8008c2e:	bd80      	pop	{r7, pc}
 8008c30:	08012758 	.word	0x08012758
 8008c34:	0801275c 	.word	0x0801275c

08008c38 <cliMain>:

bool cliMain(void)
{
 8008c38:	b580      	push	{r7, lr}
 8008c3a:	af00      	add	r7, sp, #0
  if (cli_node.is_open != true)
 8008c3c:	4b0f      	ldr	r3, [pc, #60]	; (8008c7c <cliMain+0x44>)
 8008c3e:	7a1b      	ldrb	r3, [r3, #8]
 8008c40:	f083 0301 	eor.w	r3, r3, #1
 8008c44:	b2db      	uxtb	r3, r3
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d001      	beq.n	8008c4e <cliMain+0x16>
  {
    return false;
 8008c4a:	2300      	movs	r3, #0
 8008c4c:	e013      	b.n	8008c76 <cliMain+0x3e>
  }

  if (uartAvailable(cli_node.ch) > 0)
 8008c4e:	4b0b      	ldr	r3, [pc, #44]	; (8008c7c <cliMain+0x44>)
 8008c50:	781b      	ldrb	r3, [r3, #0]
 8008c52:	4618      	mov	r0, r3
 8008c54:	f000 fd72 	bl	800973c <uartAvailable>
 8008c58:	4603      	mov	r3, r0
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	dd0a      	ble.n	8008c74 <cliMain+0x3c>
  {
    cliUpdate(&cli_node, uartRead(cli_node.ch));
 8008c5e:	4b07      	ldr	r3, [pc, #28]	; (8008c7c <cliMain+0x44>)
 8008c60:	781b      	ldrb	r3, [r3, #0]
 8008c62:	4618      	mov	r0, r3
 8008c64:	f000 fd9c 	bl	80097a0 <uartRead>
 8008c68:	4603      	mov	r3, r0
 8008c6a:	b2db      	uxtb	r3, r3
 8008c6c:	4619      	mov	r1, r3
 8008c6e:	4803      	ldr	r0, [pc, #12]	; (8008c7c <cliMain+0x44>)
 8008c70:	f000 f806 	bl	8008c80 <cliUpdate>
  }

  return true;
 8008c74:	2301      	movs	r3, #1
}
 8008c76:	4618      	mov	r0, r3
 8008c78:	bd80      	pop	{r7, pc}
 8008c7a:	bf00      	nop
 8008c7c:	2000022c 	.word	0x2000022c

08008c80 <cliUpdate>:

bool cliUpdate(cli_t *p_cli, uint8_t rx_data)
{
 8008c80:	b580      	push	{r7, lr}
 8008c82:	b08c      	sub	sp, #48	; 0x30
 8008c84:	af00      	add	r7, sp, #0
 8008c86:	6078      	str	r0, [r7, #4]
 8008c88:	460b      	mov	r3, r1
 8008c8a:	70fb      	strb	r3, [r7, #3]
  bool ret = false;
 8008c8c:	2300      	movs	r3, #0
 8008c8e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t tx_buf[8];
  cli_line_t *line;

  line = &p_cli->line;
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	33a1      	adds	r3, #161	; 0xa1
 8008c96:	61fb      	str	r3, [r7, #28]


  if (p_cli->state == CLI_RX_IDLE)
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	7c1b      	ldrb	r3, [r3, #16]
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	f040 8167 	bne.w	8008f70 <cliUpdate+0x2f0>
  {
    switch(rx_data)
 8008ca2:	78fb      	ldrb	r3, [r7, #3]
 8008ca4:	2b7f      	cmp	r3, #127	; 0x7f
 8008ca6:	d027      	beq.n	8008cf8 <cliUpdate+0x78>
 8008ca8:	2b7f      	cmp	r3, #127	; 0x7f
 8008caa:	f300 80d7 	bgt.w	8008e5c <cliUpdate+0x1dc>
 8008cae:	2b1b      	cmp	r3, #27
 8008cb0:	d01e      	beq.n	8008cf0 <cliUpdate+0x70>
 8008cb2:	2b1b      	cmp	r3, #27
 8008cb4:	f300 80d2 	bgt.w	8008e5c <cliUpdate+0x1dc>
 8008cb8:	2b08      	cmp	r3, #8
 8008cba:	d05f      	beq.n	8008d7c <cliUpdate+0xfc>
 8008cbc:	2b0d      	cmp	r3, #13
 8008cbe:	f040 80cd 	bne.w	8008e5c <cliUpdate+0x1dc>
    {
      // 엔터
      //
      case CLI_KEY_ENTER:
        if (line->count > 0)
 8008cc2:	69fb      	ldr	r3, [r7, #28]
 8008cc4:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d002      	beq.n	8008cd2 <cliUpdate+0x52>
        {
          cliLineAdd(p_cli);
 8008ccc:	6878      	ldr	r0, [r7, #4]
 8008cce:	f000 fa5b 	bl	8009188 <cliLineAdd>
        }

        line->count = 0;
 8008cd2:	69fb      	ldr	r3, [r7, #28]
 8008cd4:	2200      	movs	r2, #0
 8008cd6:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
        line->cursor = 0;
 8008cda:	69fb      	ldr	r3, [r7, #28]
 8008cdc:	2200      	movs	r2, #0
 8008cde:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        line->buf[0] = 0;
 8008ce2:	69fb      	ldr	r3, [r7, #28]
 8008ce4:	2200      	movs	r2, #0
 8008ce6:	701a      	strb	r2, [r3, #0]
        cliShowPrompt(p_cli);
 8008ce8:	6878      	ldr	r0, [r7, #4]
 8008cea:	f7ff ff8d 	bl	8008c08 <cliShowPrompt>
        break;
 8008cee:	e146      	b.n	8008f7e <cliUpdate+0x2fe>


      case CLI_KEY_ESC:
        p_cli->state = CLI_RX_SP1;
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	2201      	movs	r2, #1
 8008cf4:	741a      	strb	r2, [r3, #16]
        break;
 8008cf6:	e142      	b.n	8008f7e <cliUpdate+0x2fe>


      // DEL
      //
      case CLI_KEY_DEL:
        if (line->cursor < line->count)
 8008cf8:	69fb      	ldr	r3, [r7, #28]
 8008cfa:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 8008cfe:	69fb      	ldr	r3, [r7, #28]
 8008d00:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8008d04:	429a      	cmp	r2, r3
 8008d06:	f080 8135 	bcs.w	8008f74 <cliUpdate+0x2f4>
        {
          uint8_t mov_len;

          mov_len = line->count - line->cursor;
 8008d0a:	69fb      	ldr	r3, [r7, #28]
 8008d0c:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8008d10:	69fb      	ldr	r3, [r7, #28]
 8008d12:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8008d16:	1ad3      	subs	r3, r2, r3
 8008d18:	76fb      	strb	r3, [r7, #27]
          for (int i=1; i<mov_len; i++)
 8008d1a:	2301      	movs	r3, #1
 8008d1c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008d1e:	e013      	b.n	8008d48 <cliUpdate+0xc8>
          {
            line->buf[line->cursor + i - 1] = line->buf[line->cursor + i];
 8008d20:	69fb      	ldr	r3, [r7, #28]
 8008d22:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8008d26:	461a      	mov	r2, r3
 8008d28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d2a:	441a      	add	r2, r3
 8008d2c:	69fb      	ldr	r3, [r7, #28]
 8008d2e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8008d32:	4619      	mov	r1, r3
 8008d34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d36:	440b      	add	r3, r1
 8008d38:	3b01      	subs	r3, #1
 8008d3a:	69f9      	ldr	r1, [r7, #28]
 8008d3c:	5c89      	ldrb	r1, [r1, r2]
 8008d3e:	69fa      	ldr	r2, [r7, #28]
 8008d40:	54d1      	strb	r1, [r2, r3]
          for (int i=1; i<mov_len; i++)
 8008d42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d44:	3301      	adds	r3, #1
 8008d46:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008d48:	7efb      	ldrb	r3, [r7, #27]
 8008d4a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008d4c:	429a      	cmp	r2, r3
 8008d4e:	dbe7      	blt.n	8008d20 <cliUpdate+0xa0>
          }

          line->count--;
 8008d50:	69fb      	ldr	r3, [r7, #28]
 8008d52:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8008d56:	3b01      	subs	r3, #1
 8008d58:	b2da      	uxtb	r2, r3
 8008d5a:	69fb      	ldr	r3, [r7, #28]
 8008d5c:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
          line->buf[line->count] = 0;
 8008d60:	69fb      	ldr	r3, [r7, #28]
 8008d62:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8008d66:	461a      	mov	r2, r3
 8008d68:	69fb      	ldr	r3, [r7, #28]
 8008d6a:	2100      	movs	r1, #0
 8008d6c:	5499      	strb	r1, [r3, r2]

          uartPrintf(p_cli->ch, "\x1B[1P");
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	781b      	ldrb	r3, [r3, #0]
 8008d72:	498f      	ldr	r1, [pc, #572]	; (8008fb0 <cliUpdate+0x330>)
 8008d74:	4618      	mov	r0, r3
 8008d76:	f000 fd5d 	bl	8009834 <uartPrintf>
        }
        break;
 8008d7a:	e0fb      	b.n	8008f74 <cliUpdate+0x2f4>


      // 백스페이스
      //
      case CLI_KEY_BACK:
        if (line->count > 0 && line->cursor > 0)
 8008d7c:	69fb      	ldr	r3, [r7, #28]
 8008d7e:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d055      	beq.n	8008e32 <cliUpdate+0x1b2>
 8008d86:	69fb      	ldr	r3, [r7, #28]
 8008d88:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d050      	beq.n	8008e32 <cliUpdate+0x1b2>
        {
          if (line->cursor == line->count)
 8008d90:	69fb      	ldr	r3, [r7, #28]
 8008d92:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 8008d96:	69fb      	ldr	r3, [r7, #28]
 8008d98:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8008d9c:	429a      	cmp	r2, r3
 8008d9e:	d10e      	bne.n	8008dbe <cliUpdate+0x13e>
          {
            line->count--;
 8008da0:	69fb      	ldr	r3, [r7, #28]
 8008da2:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8008da6:	3b01      	subs	r3, #1
 8008da8:	b2da      	uxtb	r2, r3
 8008daa:	69fb      	ldr	r3, [r7, #28]
 8008dac:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
            line->buf[line->count] = 0;
 8008db0:	69fb      	ldr	r3, [r7, #28]
 8008db2:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8008db6:	461a      	mov	r2, r3
 8008db8:	69fb      	ldr	r3, [r7, #28]
 8008dba:	2100      	movs	r1, #0
 8008dbc:	5499      	strb	r1, [r3, r2]
          }

          if (line->cursor < line->count)
 8008dbe:	69fb      	ldr	r3, [r7, #28]
 8008dc0:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 8008dc4:	69fb      	ldr	r3, [r7, #28]
 8008dc6:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8008dca:	429a      	cmp	r2, r3
 8008dcc:	d231      	bcs.n	8008e32 <cliUpdate+0x1b2>
          {
            uint8_t mov_len;

            mov_len = line->count - line->cursor;
 8008dce:	69fb      	ldr	r3, [r7, #28]
 8008dd0:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8008dd4:	69fb      	ldr	r3, [r7, #28]
 8008dd6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8008dda:	1ad3      	subs	r3, r2, r3
 8008ddc:	76bb      	strb	r3, [r7, #26]

            for (int i=0; i<mov_len; i++)
 8008dde:	2300      	movs	r3, #0
 8008de0:	62bb      	str	r3, [r7, #40]	; 0x28
 8008de2:	e013      	b.n	8008e0c <cliUpdate+0x18c>
            {
              line->buf[line->cursor + i - 1] = line->buf[line->cursor + i];
 8008de4:	69fb      	ldr	r3, [r7, #28]
 8008de6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8008dea:	461a      	mov	r2, r3
 8008dec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dee:	441a      	add	r2, r3
 8008df0:	69fb      	ldr	r3, [r7, #28]
 8008df2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8008df6:	4619      	mov	r1, r3
 8008df8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dfa:	440b      	add	r3, r1
 8008dfc:	3b01      	subs	r3, #1
 8008dfe:	69f9      	ldr	r1, [r7, #28]
 8008e00:	5c89      	ldrb	r1, [r1, r2]
 8008e02:	69fa      	ldr	r2, [r7, #28]
 8008e04:	54d1      	strb	r1, [r2, r3]
            for (int i=0; i<mov_len; i++)
 8008e06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e08:	3301      	adds	r3, #1
 8008e0a:	62bb      	str	r3, [r7, #40]	; 0x28
 8008e0c:	7ebb      	ldrb	r3, [r7, #26]
 8008e0e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008e10:	429a      	cmp	r2, r3
 8008e12:	dbe7      	blt.n	8008de4 <cliUpdate+0x164>
            }

            line->count--;
 8008e14:	69fb      	ldr	r3, [r7, #28]
 8008e16:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8008e1a:	3b01      	subs	r3, #1
 8008e1c:	b2da      	uxtb	r2, r3
 8008e1e:	69fb      	ldr	r3, [r7, #28]
 8008e20:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
            line->buf[line->count] = 0;
 8008e24:	69fb      	ldr	r3, [r7, #28]
 8008e26:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8008e2a:	461a      	mov	r2, r3
 8008e2c:	69fb      	ldr	r3, [r7, #28]
 8008e2e:	2100      	movs	r1, #0
 8008e30:	5499      	strb	r1, [r3, r2]
          }
        }

        if (line->cursor > 0)
 8008e32:	69fb      	ldr	r3, [r7, #28]
 8008e34:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	f000 809d 	beq.w	8008f78 <cliUpdate+0x2f8>
        {
          line->cursor--;
 8008e3e:	69fb      	ldr	r3, [r7, #28]
 8008e40:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8008e44:	3b01      	subs	r3, #1
 8008e46:	b2da      	uxtb	r2, r3
 8008e48:	69fb      	ldr	r3, [r7, #28]
 8008e4a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
          uartPrintf(p_cli->ch, "\b \b\x1B[1P");
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	781b      	ldrb	r3, [r3, #0]
 8008e52:	4958      	ldr	r1, [pc, #352]	; (8008fb4 <cliUpdate+0x334>)
 8008e54:	4618      	mov	r0, r3
 8008e56:	f000 fced 	bl	8009834 <uartPrintf>
        }
        break;
 8008e5a:	e08d      	b.n	8008f78 <cliUpdate+0x2f8>


      default:
        if ((line->count + 1) < line->buf_len)
 8008e5c:	69fb      	ldr	r3, [r7, #28]
 8008e5e:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8008e62:	3301      	adds	r3, #1
 8008e64:	69fa      	ldr	r2, [r7, #28]
 8008e66:	f892 2020 	ldrb.w	r2, [r2, #32]
 8008e6a:	4293      	cmp	r3, r2
 8008e6c:	f280 8086 	bge.w	8008f7c <cliUpdate+0x2fc>
        {
          if (line->cursor == line->count)
 8008e70:	69fb      	ldr	r3, [r7, #28]
 8008e72:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 8008e76:	69fb      	ldr	r3, [r7, #28]
 8008e78:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8008e7c:	429a      	cmp	r2, r3
 8008e7e:	d125      	bne.n	8008ecc <cliUpdate+0x24c>
          {
            uartWrite(p_cli->ch, &rx_data, 1);
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	781b      	ldrb	r3, [r3, #0]
 8008e84:	4618      	mov	r0, r3
 8008e86:	1cfb      	adds	r3, r7, #3
 8008e88:	2201      	movs	r2, #1
 8008e8a:	4619      	mov	r1, r3
 8008e8c:	f000 fca8 	bl	80097e0 <uartWrite>

            line->buf[line->cursor] = rx_data;
 8008e90:	69fb      	ldr	r3, [r7, #28]
 8008e92:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8008e96:	461a      	mov	r2, r3
 8008e98:	78f9      	ldrb	r1, [r7, #3]
 8008e9a:	69fb      	ldr	r3, [r7, #28]
 8008e9c:	5499      	strb	r1, [r3, r2]
            line->count++;
 8008e9e:	69fb      	ldr	r3, [r7, #28]
 8008ea0:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8008ea4:	3301      	adds	r3, #1
 8008ea6:	b2da      	uxtb	r2, r3
 8008ea8:	69fb      	ldr	r3, [r7, #28]
 8008eaa:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
            line->cursor++;
 8008eae:	69fb      	ldr	r3, [r7, #28]
 8008eb0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8008eb4:	3301      	adds	r3, #1
 8008eb6:	b2da      	uxtb	r2, r3
 8008eb8:	69fb      	ldr	r3, [r7, #28]
 8008eba:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
            line->buf[line->count] = 0;
 8008ebe:	69fb      	ldr	r3, [r7, #28]
 8008ec0:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8008ec4:	461a      	mov	r2, r3
 8008ec6:	69fb      	ldr	r3, [r7, #28]
 8008ec8:	2100      	movs	r1, #0
 8008eca:	5499      	strb	r1, [r3, r2]
          }
          if (line->cursor < line->count)
 8008ecc:	69fb      	ldr	r3, [r7, #28]
 8008ece:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 8008ed2:	69fb      	ldr	r3, [r7, #28]
 8008ed4:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8008ed8:	429a      	cmp	r2, r3
 8008eda:	d24f      	bcs.n	8008f7c <cliUpdate+0x2fc>
          {
            uint8_t mov_len;

            mov_len = line->count - line->cursor;
 8008edc:	69fb      	ldr	r3, [r7, #28]
 8008ede:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8008ee2:	69fb      	ldr	r3, [r7, #28]
 8008ee4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8008ee8:	1ad3      	subs	r3, r2, r3
 8008eea:	767b      	strb	r3, [r7, #25]
            for (int i=0; i<mov_len; i++)
 8008eec:	2300      	movs	r3, #0
 8008eee:	627b      	str	r3, [r7, #36]	; 0x24
 8008ef0:	e013      	b.n	8008f1a <cliUpdate+0x29a>
            {
              line->buf[line->count - i] = line->buf[line->count - i - 1];
 8008ef2:	69fb      	ldr	r3, [r7, #28]
 8008ef4:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8008ef8:	461a      	mov	r2, r3
 8008efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008efc:	1ad3      	subs	r3, r2, r3
 8008efe:	1e5a      	subs	r2, r3, #1
 8008f00:	69fb      	ldr	r3, [r7, #28]
 8008f02:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8008f06:	4619      	mov	r1, r3
 8008f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f0a:	1acb      	subs	r3, r1, r3
 8008f0c:	69f9      	ldr	r1, [r7, #28]
 8008f0e:	5c89      	ldrb	r1, [r1, r2]
 8008f10:	69fa      	ldr	r2, [r7, #28]
 8008f12:	54d1      	strb	r1, [r2, r3]
            for (int i=0; i<mov_len; i++)
 8008f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f16:	3301      	adds	r3, #1
 8008f18:	627b      	str	r3, [r7, #36]	; 0x24
 8008f1a:	7e7b      	ldrb	r3, [r7, #25]
 8008f1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008f1e:	429a      	cmp	r2, r3
 8008f20:	dbe7      	blt.n	8008ef2 <cliUpdate+0x272>
            }
            line->buf[line->cursor] = rx_data;
 8008f22:	69fb      	ldr	r3, [r7, #28]
 8008f24:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8008f28:	461a      	mov	r2, r3
 8008f2a:	78f9      	ldrb	r1, [r7, #3]
 8008f2c:	69fb      	ldr	r3, [r7, #28]
 8008f2e:	5499      	strb	r1, [r3, r2]
            line->count++;
 8008f30:	69fb      	ldr	r3, [r7, #28]
 8008f32:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8008f36:	3301      	adds	r3, #1
 8008f38:	b2da      	uxtb	r2, r3
 8008f3a:	69fb      	ldr	r3, [r7, #28]
 8008f3c:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
            line->cursor++;
 8008f40:	69fb      	ldr	r3, [r7, #28]
 8008f42:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8008f46:	3301      	adds	r3, #1
 8008f48:	b2da      	uxtb	r2, r3
 8008f4a:	69fb      	ldr	r3, [r7, #28]
 8008f4c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
            line->buf[line->count] = 0;
 8008f50:	69fb      	ldr	r3, [r7, #28]
 8008f52:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8008f56:	461a      	mov	r2, r3
 8008f58:	69fb      	ldr	r3, [r7, #28]
 8008f5a:	2100      	movs	r1, #0
 8008f5c:	5499      	strb	r1, [r3, r2]

            uartPrintf(p_cli->ch, "\x1B[4h%c\x1B[4l", rx_data);
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	781b      	ldrb	r3, [r3, #0]
 8008f62:	4618      	mov	r0, r3
 8008f64:	78fb      	ldrb	r3, [r7, #3]
 8008f66:	461a      	mov	r2, r3
 8008f68:	4913      	ldr	r1, [pc, #76]	; (8008fb8 <cliUpdate+0x338>)
 8008f6a:	f000 fc63 	bl	8009834 <uartPrintf>
          }
        }
        break;
 8008f6e:	e005      	b.n	8008f7c <cliUpdate+0x2fc>
    }
  }
 8008f70:	bf00      	nop
 8008f72:	e004      	b.n	8008f7e <cliUpdate+0x2fe>
        break;
 8008f74:	bf00      	nop
 8008f76:	e002      	b.n	8008f7e <cliUpdate+0x2fe>
        break;
 8008f78:	bf00      	nop
 8008f7a:	e000      	b.n	8008f7e <cliUpdate+0x2fe>
        break;
 8008f7c:	bf00      	nop

  switch(p_cli->state)
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	7c1b      	ldrb	r3, [r3, #16]
 8008f82:	3b01      	subs	r3, #1
 8008f84:	2b03      	cmp	r3, #3
 8008f86:	f200 80d7 	bhi.w	8009138 <cliUpdate+0x4b8>
 8008f8a:	a201      	add	r2, pc, #4	; (adr r2, 8008f90 <cliUpdate+0x310>)
 8008f8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f90:	08008fa1 	.word	0x08008fa1
 8008f94:	08008fa9 	.word	0x08008fa9
 8008f98:	08008fbd 	.word	0x08008fbd
 8008f9c:	0800912f 	.word	0x0800912f
  {
    case CLI_RX_SP1:
      p_cli->state = CLI_RX_SP2;
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	2202      	movs	r2, #2
 8008fa4:	741a      	strb	r2, [r3, #16]
      break;
 8008fa6:	e0c7      	b.n	8009138 <cliUpdate+0x4b8>

    case CLI_RX_SP2:
      p_cli->state = CLI_RX_SP3;
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	2203      	movs	r2, #3
 8008fac:	741a      	strb	r2, [r3, #16]
      break;
 8008fae:	e0c3      	b.n	8009138 <cliUpdate+0x4b8>
 8008fb0:	08012764 	.word	0x08012764
 8008fb4:	0801276c 	.word	0x0801276c
 8008fb8:	08012774 	.word	0x08012774

    case CLI_RX_SP3:
      p_cli->state = CLI_RX_IDLE;
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	2200      	movs	r2, #0
 8008fc0:	741a      	strb	r2, [r3, #16]

      if (rx_data == CLI_KEY_LEFT)
 8008fc2:	78fb      	ldrb	r3, [r7, #3]
 8008fc4:	2b44      	cmp	r3, #68	; 0x44
 8008fc6:	d11b      	bne.n	8009000 <cliUpdate+0x380>
      {
        if (line->cursor > 0)
 8008fc8:	69fb      	ldr	r3, [r7, #28]
 8008fca:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d016      	beq.n	8009000 <cliUpdate+0x380>
        {
          line->cursor--;
 8008fd2:	69fb      	ldr	r3, [r7, #28]
 8008fd4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8008fd8:	3b01      	subs	r3, #1
 8008fda:	b2da      	uxtb	r2, r3
 8008fdc:	69fb      	ldr	r3, [r7, #28]
 8008fde:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
          tx_buf[0] = 0x1B;
 8008fe2:	231b      	movs	r3, #27
 8008fe4:	733b      	strb	r3, [r7, #12]
          tx_buf[1] = 0x5B;
 8008fe6:	235b      	movs	r3, #91	; 0x5b
 8008fe8:	737b      	strb	r3, [r7, #13]
          tx_buf[2] = rx_data;
 8008fea:	78fb      	ldrb	r3, [r7, #3]
 8008fec:	73bb      	strb	r3, [r7, #14]
          uartWrite(p_cli->ch, tx_buf, 3);
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	781b      	ldrb	r3, [r3, #0]
 8008ff2:	4618      	mov	r0, r3
 8008ff4:	f107 030c 	add.w	r3, r7, #12
 8008ff8:	2203      	movs	r2, #3
 8008ffa:	4619      	mov	r1, r3
 8008ffc:	f000 fbf0 	bl	80097e0 <uartWrite>
        }
      }

      if (rx_data == CLI_KEY_RIGHT)
 8009000:	78fb      	ldrb	r3, [r7, #3]
 8009002:	2b43      	cmp	r3, #67	; 0x43
 8009004:	d11e      	bne.n	8009044 <cliUpdate+0x3c4>
      {
        if (line->cursor < line->buf_len)
 8009006:	69fb      	ldr	r3, [r7, #28]
 8009008:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 800900c:	69fb      	ldr	r3, [r7, #28]
 800900e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009012:	429a      	cmp	r2, r3
 8009014:	d207      	bcs.n	8009026 <cliUpdate+0x3a6>
        {
          line->cursor++;
 8009016:	69fb      	ldr	r3, [r7, #28]
 8009018:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800901c:	3301      	adds	r3, #1
 800901e:	b2da      	uxtb	r2, r3
 8009020:	69fb      	ldr	r3, [r7, #28]
 8009022:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        }
        tx_buf[0] = 0x1B;
 8009026:	231b      	movs	r3, #27
 8009028:	733b      	strb	r3, [r7, #12]
        tx_buf[1] = 0x5B;
 800902a:	235b      	movs	r3, #91	; 0x5b
 800902c:	737b      	strb	r3, [r7, #13]
        tx_buf[2] = rx_data;
 800902e:	78fb      	ldrb	r3, [r7, #3]
 8009030:	73bb      	strb	r3, [r7, #14]
        uartWrite(p_cli->ch, tx_buf, 3);
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	781b      	ldrb	r3, [r3, #0]
 8009036:	4618      	mov	r0, r3
 8009038:	f107 030c 	add.w	r3, r7, #12
 800903c:	2203      	movs	r2, #3
 800903e:	4619      	mov	r1, r3
 8009040:	f000 fbce 	bl	80097e0 <uartWrite>
      }

      if (rx_data == CLI_KEY_UP)
 8009044:	78fb      	ldrb	r3, [r7, #3]
 8009046:	2b41      	cmp	r3, #65	; 0x41
 8009048:	d10c      	bne.n	8009064 <cliUpdate+0x3e4>
      {
        cliLineChange(p_cli, true);
 800904a:	2101      	movs	r1, #1
 800904c:	6878      	ldr	r0, [r7, #4]
 800904e:	f000 f8e9 	bl	8009224 <cliLineChange>
        uartPrintf(p_cli->ch, (char *)p_cli->line.buf);
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	781b      	ldrb	r3, [r3, #0]
 8009056:	461a      	mov	r2, r3
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	33a1      	adds	r3, #161	; 0xa1
 800905c:	4619      	mov	r1, r3
 800905e:	4610      	mov	r0, r2
 8009060:	f000 fbe8 	bl	8009834 <uartPrintf>
      }

      if (rx_data == CLI_KEY_DOWN)
 8009064:	78fb      	ldrb	r3, [r7, #3]
 8009066:	2b42      	cmp	r3, #66	; 0x42
 8009068:	d10c      	bne.n	8009084 <cliUpdate+0x404>
      {
        cliLineChange(p_cli, false);
 800906a:	2100      	movs	r1, #0
 800906c:	6878      	ldr	r0, [r7, #4]
 800906e:	f000 f8d9 	bl	8009224 <cliLineChange>
        uartPrintf(p_cli->ch, (char *)p_cli->line.buf);
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	781b      	ldrb	r3, [r3, #0]
 8009076:	461a      	mov	r2, r3
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	33a1      	adds	r3, #161	; 0xa1
 800907c:	4619      	mov	r1, r3
 800907e:	4610      	mov	r0, r2
 8009080:	f000 fbd8 	bl	8009834 <uartPrintf>
      }

      if (rx_data == CLI_KEY_HOME)
 8009084:	78fb      	ldrb	r3, [r7, #3]
 8009086:	2b31      	cmp	r3, #49	; 0x31
 8009088:	d110      	bne.n	80090ac <cliUpdate+0x42c>
      {
        uartPrintf(p_cli->ch, "\x1B[%dD", line->cursor);
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	781b      	ldrb	r3, [r3, #0]
 800908e:	4618      	mov	r0, r3
 8009090:	69fb      	ldr	r3, [r7, #28]
 8009092:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8009096:	461a      	mov	r2, r3
 8009098:	492c      	ldr	r1, [pc, #176]	; (800914c <cliUpdate+0x4cc>)
 800909a:	f000 fbcb 	bl	8009834 <uartPrintf>
        line->cursor = 0;
 800909e:	69fb      	ldr	r3, [r7, #28]
 80090a0:	2200      	movs	r2, #0
 80090a2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        p_cli->state = CLI_RX_SP4;
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	2204      	movs	r2, #4
 80090aa:	741a      	strb	r2, [r3, #16]
      }

      if (rx_data == CLI_KEY_END)
 80090ac:	78fb      	ldrb	r3, [r7, #3]
 80090ae:	2b34      	cmp	r3, #52	; 0x34
 80090b0:	d141      	bne.n	8009136 <cliUpdate+0x4b6>
      {
        uint16_t mov_len;

        if (line->cursor < line->count)
 80090b2:	69fb      	ldr	r3, [r7, #28]
 80090b4:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 80090b8:	69fb      	ldr	r3, [r7, #28]
 80090ba:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 80090be:	429a      	cmp	r2, r3
 80090c0:	d211      	bcs.n	80090e6 <cliUpdate+0x466>
        {
          mov_len = line->count - line->cursor;
 80090c2:	69fb      	ldr	r3, [r7, #28]
 80090c4:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 80090c8:	b29a      	uxth	r2, r3
 80090ca:	69fb      	ldr	r3, [r7, #28]
 80090cc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80090d0:	b29b      	uxth	r3, r3
 80090d2:	1ad3      	subs	r3, r2, r3
 80090d4:	82fb      	strh	r3, [r7, #22]
          uartPrintf(p_cli->ch, "\x1B[%dC", mov_len);
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	781b      	ldrb	r3, [r3, #0]
 80090da:	4618      	mov	r0, r3
 80090dc:	8afb      	ldrh	r3, [r7, #22]
 80090de:	461a      	mov	r2, r3
 80090e0:	491b      	ldr	r1, [pc, #108]	; (8009150 <cliUpdate+0x4d0>)
 80090e2:	f000 fba7 	bl	8009834 <uartPrintf>
        }
        if (line->cursor > line->count)
 80090e6:	69fb      	ldr	r3, [r7, #28]
 80090e8:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 80090ec:	69fb      	ldr	r3, [r7, #28]
 80090ee:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 80090f2:	429a      	cmp	r2, r3
 80090f4:	d911      	bls.n	800911a <cliUpdate+0x49a>
        {
          mov_len = line->cursor - line->count;
 80090f6:	69fb      	ldr	r3, [r7, #28]
 80090f8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80090fc:	b29a      	uxth	r2, r3
 80090fe:	69fb      	ldr	r3, [r7, #28]
 8009100:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8009104:	b29b      	uxth	r3, r3
 8009106:	1ad3      	subs	r3, r2, r3
 8009108:	82fb      	strh	r3, [r7, #22]
          uartPrintf(p_cli->ch, "\x1B[%dD", mov_len);
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	781b      	ldrb	r3, [r3, #0]
 800910e:	4618      	mov	r0, r3
 8009110:	8afb      	ldrh	r3, [r7, #22]
 8009112:	461a      	mov	r2, r3
 8009114:	490d      	ldr	r1, [pc, #52]	; (800914c <cliUpdate+0x4cc>)
 8009116:	f000 fb8d 	bl	8009834 <uartPrintf>
        }
        line->cursor = line->count;
 800911a:	69fb      	ldr	r3, [r7, #28]
 800911c:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8009120:	69fb      	ldr	r3, [r7, #28]
 8009122:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        p_cli->state = CLI_RX_SP4;
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	2204      	movs	r2, #4
 800912a:	741a      	strb	r2, [r3, #16]
      }
      break;
 800912c:	e003      	b.n	8009136 <cliUpdate+0x4b6>

    case CLI_RX_SP4:
      p_cli->state = CLI_RX_IDLE;
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	2200      	movs	r2, #0
 8009132:	741a      	strb	r2, [r3, #16]
      break;
 8009134:	e000      	b.n	8009138 <cliUpdate+0x4b8>
      break;
 8009136:	bf00      	nop
  }



  cliShowLog(p_cli);
 8009138:	6878      	ldr	r0, [r7, #4]
 800913a:	f7ff fcdd 	bl	8008af8 <cliShowLog>

  return ret;
 800913e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8009142:	4618      	mov	r0, r3
 8009144:	3730      	adds	r7, #48	; 0x30
 8009146:	46bd      	mov	sp, r7
 8009148:	bd80      	pop	{r7, pc}
 800914a:	bf00      	nop
 800914c:	08012780 	.word	0x08012780
 8009150:	08012788 	.word	0x08012788

08009154 <cliLineClean>:

void cliLineClean(cli_t *p_cli)
{
 8009154:	b480      	push	{r7}
 8009156:	b083      	sub	sp, #12
 8009158:	af00      	add	r7, sp, #0
 800915a:	6078      	str	r0, [r7, #4]
  p_cli->line.count   = 0;
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	2200      	movs	r2, #0
 8009160:	f883 20c3 	strb.w	r2, [r3, #195]	; 0xc3
  p_cli->line.cursor  = 0;
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	2200      	movs	r2, #0
 8009168:	f883 20c2 	strb.w	r2, [r3, #194]	; 0xc2
  p_cli->line.buf_len = CLI_LINE_BUF_MAX - 1;
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	221f      	movs	r2, #31
 8009170:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1
  p_cli->line.buf[0]  = 0;
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	2200      	movs	r2, #0
 8009178:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
}
 800917c:	bf00      	nop
 800917e:	370c      	adds	r7, #12
 8009180:	46bd      	mov	sp, r7
 8009182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009186:	4770      	bx	lr

08009188 <cliLineAdd>:

void cliLineAdd(cli_t *p_cli)
{
 8009188:	b4f0      	push	{r4, r5, r6, r7}
 800918a:	b082      	sub	sp, #8
 800918c:	af00      	add	r7, sp, #0
 800918e:	6078      	str	r0, [r7, #4]

  p_cli->line_buf[p_cli->hist_line_last] = p_cli->line;
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	7cdb      	ldrb	r3, [r3, #19]
 8009194:	461a      	mov	r2, r3
 8009196:	6879      	ldr	r1, [r7, #4]
 8009198:	4613      	mov	r3, r2
 800919a:	009b      	lsls	r3, r3, #2
 800919c:	4413      	add	r3, r2
 800919e:	00da      	lsls	r2, r3, #3
 80091a0:	1ad2      	subs	r2, r2, r3
 80091a2:	188b      	adds	r3, r1, r2
 80091a4:	f103 0210 	add.w	r2, r3, #16
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	33a1      	adds	r3, #161	; 0xa1
 80091ac:	1d50      	adds	r0, r2, #5
 80091ae:	f103 0420 	add.w	r4, r3, #32
 80091b2:	4602      	mov	r2, r0
 80091b4:	4619      	mov	r1, r3
 80091b6:	f8d1 c000 	ldr.w	ip, [r1]
 80091ba:	684e      	ldr	r6, [r1, #4]
 80091bc:	688d      	ldr	r5, [r1, #8]
 80091be:	68c9      	ldr	r1, [r1, #12]
 80091c0:	f8c2 c000 	str.w	ip, [r2]
 80091c4:	6056      	str	r6, [r2, #4]
 80091c6:	6095      	str	r5, [r2, #8]
 80091c8:	60d1      	str	r1, [r2, #12]
 80091ca:	3310      	adds	r3, #16
 80091cc:	3010      	adds	r0, #16
 80091ce:	42a3      	cmp	r3, r4
 80091d0:	d1ef      	bne.n	80091b2 <cliLineAdd+0x2a>
 80091d2:	4602      	mov	r2, r0
 80091d4:	8819      	ldrh	r1, [r3, #0]
 80091d6:	789b      	ldrb	r3, [r3, #2]
 80091d8:	8011      	strh	r1, [r2, #0]
 80091da:	7093      	strb	r3, [r2, #2]

  if (p_cli->hist_line_count < CLI_LINE_HIS_MAX)
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	7d1b      	ldrb	r3, [r3, #20]
 80091e0:	2b03      	cmp	r3, #3
 80091e2:	d805      	bhi.n	80091f0 <cliLineAdd+0x68>
  {
    p_cli->hist_line_count++;
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	7d1b      	ldrb	r3, [r3, #20]
 80091e8:	3301      	adds	r3, #1
 80091ea:	b2da      	uxtb	r2, r3
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	751a      	strb	r2, [r3, #20]
  }

  p_cli->hist_line_i    = p_cli->hist_line_last;
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	7cdb      	ldrb	r3, [r3, #19]
 80091f4:	b25a      	sxtb	r2, r3
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	749a      	strb	r2, [r3, #18]
  p_cli->hist_line_last = (p_cli->hist_line_last + 1) % CLI_LINE_HIS_MAX;
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	7cdb      	ldrb	r3, [r3, #19]
 80091fe:	3301      	adds	r3, #1
 8009200:	425a      	negs	r2, r3
 8009202:	f003 0303 	and.w	r3, r3, #3
 8009206:	f002 0203 	and.w	r2, r2, #3
 800920a:	bf58      	it	pl
 800920c:	4253      	negpl	r3, r2
 800920e:	b2da      	uxtb	r2, r3
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	74da      	strb	r2, [r3, #19]
  p_cli->hist_line_new  = true;
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	2201      	movs	r2, #1
 8009218:	745a      	strb	r2, [r3, #17]
}
 800921a:	bf00      	nop
 800921c:	3708      	adds	r7, #8
 800921e:	46bd      	mov	sp, r7
 8009220:	bcf0      	pop	{r4, r5, r6, r7}
 8009222:	4770      	bx	lr

08009224 <cliLineChange>:

void cliLineChange(cli_t *p_cli, int8_t key_up)
{
 8009224:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009226:	b085      	sub	sp, #20
 8009228:	af00      	add	r7, sp, #0
 800922a:	6078      	str	r0, [r7, #4]
 800922c:	460b      	mov	r3, r1
 800922e:	70fb      	strb	r3, [r7, #3]
  uint8_t change_i;


  if (p_cli->hist_line_count == 0)
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	7d1b      	ldrb	r3, [r3, #20]
 8009234:	2b00      	cmp	r3, #0
 8009236:	f000 8082 	beq.w	800933e <cliLineChange+0x11a>
  {
    return;
  }


  if (p_cli->line.cursor > 0)
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	f893 30c2 	ldrb.w	r3, [r3, #194]	; 0xc2
 8009240:	2b00      	cmp	r3, #0
 8009242:	d009      	beq.n	8009258 <cliLineChange+0x34>
  {
    uartPrintf(p_cli->ch, "\x1B[%dD", p_cli->line.cursor);
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	781b      	ldrb	r3, [r3, #0]
 8009248:	4618      	mov	r0, r3
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	f893 30c2 	ldrb.w	r3, [r3, #194]	; 0xc2
 8009250:	461a      	mov	r2, r3
 8009252:	493d      	ldr	r1, [pc, #244]	; (8009348 <cliLineChange+0x124>)
 8009254:	f000 faee 	bl	8009834 <uartPrintf>
  }
  if (p_cli->line.count > 0)
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
 800925e:	2b00      	cmp	r3, #0
 8009260:	d009      	beq.n	8009276 <cliLineChange+0x52>
  {
    uartPrintf(p_cli->ch, "\x1B[%dP", p_cli->line.count);
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	781b      	ldrb	r3, [r3, #0]
 8009266:	4618      	mov	r0, r3
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
 800926e:	461a      	mov	r2, r3
 8009270:	4936      	ldr	r1, [pc, #216]	; (800934c <cliLineChange+0x128>)
 8009272:	f000 fadf 	bl	8009834 <uartPrintf>
  }


  if (key_up == true)
 8009276:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800927a:	2b01      	cmp	r3, #1
 800927c:	d11f      	bne.n	80092be <cliLineChange+0x9a>
  {
    if (p_cli->hist_line_new == true)
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	7c5b      	ldrb	r3, [r3, #17]
 8009282:	2b00      	cmp	r3, #0
 8009284:	d004      	beq.n	8009290 <cliLineChange+0x6c>
    {
      p_cli->hist_line_i = p_cli->hist_line_last;
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	7cdb      	ldrb	r3, [r3, #19]
 800928a:	b25a      	sxtb	r2, r3
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	749a      	strb	r2, [r3, #18]
    }
    p_cli->hist_line_i = (p_cli->hist_line_i + p_cli->hist_line_count - 1) % p_cli->hist_line_count;
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	f993 3012 	ldrsb.w	r3, [r3, #18]
 8009296:	461a      	mov	r2, r3
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	7d1b      	ldrb	r3, [r3, #20]
 800929c:	4413      	add	r3, r2
 800929e:	3b01      	subs	r3, #1
 80092a0:	687a      	ldr	r2, [r7, #4]
 80092a2:	7d12      	ldrb	r2, [r2, #20]
 80092a4:	fb93 f1f2 	sdiv	r1, r3, r2
 80092a8:	fb01 f202 	mul.w	r2, r1, r2
 80092ac:	1a9b      	subs	r3, r3, r2
 80092ae:	b25a      	sxtb	r2, r3
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	749a      	strb	r2, [r3, #18]
    change_i = p_cli->hist_line_i;
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	f993 3012 	ldrsb.w	r3, [r3, #18]
 80092ba:	73fb      	strb	r3, [r7, #15]
 80092bc:	e011      	b.n	80092e2 <cliLineChange+0xbe>
  }
  else
  {
    p_cli->hist_line_i = (p_cli->hist_line_i + 1) % p_cli->hist_line_count;
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	f993 3012 	ldrsb.w	r3, [r3, #18]
 80092c4:	3301      	adds	r3, #1
 80092c6:	687a      	ldr	r2, [r7, #4]
 80092c8:	7d12      	ldrb	r2, [r2, #20]
 80092ca:	fb93 f1f2 	sdiv	r1, r3, r2
 80092ce:	fb01 f202 	mul.w	r2, r1, r2
 80092d2:	1a9b      	subs	r3, r3, r2
 80092d4:	b25a      	sxtb	r2, r3
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	749a      	strb	r2, [r3, #18]
    change_i = p_cli->hist_line_i;
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	f993 3012 	ldrsb.w	r3, [r3, #18]
 80092e0:	73fb      	strb	r3, [r7, #15]
  }

  p_cli->line = p_cli->line_buf[change_i];
 80092e2:	7bfa      	ldrb	r2, [r7, #15]
 80092e4:	6879      	ldr	r1, [r7, #4]
 80092e6:	6878      	ldr	r0, [r7, #4]
 80092e8:	4613      	mov	r3, r2
 80092ea:	009b      	lsls	r3, r3, #2
 80092ec:	4413      	add	r3, r2
 80092ee:	00da      	lsls	r2, r3, #3
 80092f0:	1ad2      	subs	r2, r2, r3
 80092f2:	1883      	adds	r3, r0, r2
 80092f4:	3310      	adds	r3, #16
 80092f6:	3305      	adds	r3, #5
 80092f8:	f101 00a1 	add.w	r0, r1, #161	; 0xa1
 80092fc:	f103 0420 	add.w	r4, r3, #32
 8009300:	4602      	mov	r2, r0
 8009302:	4619      	mov	r1, r3
 8009304:	f8d1 c000 	ldr.w	ip, [r1]
 8009308:	684e      	ldr	r6, [r1, #4]
 800930a:	688d      	ldr	r5, [r1, #8]
 800930c:	68c9      	ldr	r1, [r1, #12]
 800930e:	f8c2 c000 	str.w	ip, [r2]
 8009312:	6056      	str	r6, [r2, #4]
 8009314:	6095      	str	r5, [r2, #8]
 8009316:	60d1      	str	r1, [r2, #12]
 8009318:	3310      	adds	r3, #16
 800931a:	3010      	adds	r0, #16
 800931c:	42a3      	cmp	r3, r4
 800931e:	d1ef      	bne.n	8009300 <cliLineChange+0xdc>
 8009320:	4602      	mov	r2, r0
 8009322:	8819      	ldrh	r1, [r3, #0]
 8009324:	789b      	ldrb	r3, [r3, #2]
 8009326:	8011      	strh	r1, [r2, #0]
 8009328:	7093      	strb	r3, [r2, #2]
  p_cli->line.cursor = p_cli->line.count;
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	f893 20c3 	ldrb.w	r2, [r3, #195]	; 0xc3
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	f883 20c2 	strb.w	r2, [r3, #194]	; 0xc2

  p_cli->hist_line_new = false;
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	2200      	movs	r2, #0
 800933a:	745a      	strb	r2, [r3, #17]
 800933c:	e000      	b.n	8009340 <cliLineChange+0x11c>
    return;
 800933e:	bf00      	nop
}
 8009340:	3714      	adds	r7, #20
 8009342:	46bd      	mov	sp, r7
 8009344:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009346:	bf00      	nop
 8009348:	08012780 	.word	0x08012780
 800934c:	08012790 	.word	0x08012790

08009350 <flashInit>:
  {FLASH_SECTOR_6, 0x08040000, 131072},
  {FLASH_SECTOR_7, 0x08060000, 131072}
};

bool flashInit(void)
{
 8009350:	b480      	push	{r7}
 8009352:	af00      	add	r7, sp, #0
  return true;
 8009354:	2301      	movs	r3, #1
}
 8009356:	4618      	mov	r0, r3
 8009358:	46bd      	mov	sp, r7
 800935a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800935e:	4770      	bx	lr

08009360 <ledInit>:
{
	{GPIOC, GPIO_PIN_13, GPIO_PIN_SET, GPIO_PIN_RESET}
};

bool ledInit(void)
{
 8009360:	b580      	push	{r7, lr}
 8009362:	b088      	sub	sp, #32
 8009364:	af00      	add	r7, sp, #0
	bool ret = true;
 8009366:	2301      	movs	r3, #1
 8009368:	76fb      	strb	r3, [r7, #27]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800936a:	1d3b      	adds	r3, r7, #4
 800936c:	2200      	movs	r2, #0
 800936e:	601a      	str	r2, [r3, #0]
 8009370:	605a      	str	r2, [r3, #4]
 8009372:	609a      	str	r2, [r3, #8]
 8009374:	60da      	str	r2, [r3, #12]
 8009376:	611a      	str	r2, [r3, #16]

	__HAL_RCC_GPIOA_CLK_ENABLE();
 8009378:	2300      	movs	r3, #0
 800937a:	603b      	str	r3, [r7, #0]
 800937c:	4b1d      	ldr	r3, [pc, #116]	; (80093f4 <ledInit+0x94>)
 800937e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009380:	4a1c      	ldr	r2, [pc, #112]	; (80093f4 <ledInit+0x94>)
 8009382:	f043 0301 	orr.w	r3, r3, #1
 8009386:	6313      	str	r3, [r2, #48]	; 0x30
 8009388:	4b1a      	ldr	r3, [pc, #104]	; (80093f4 <ledInit+0x94>)
 800938a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800938c:	f003 0301 	and.w	r3, r3, #1
 8009390:	603b      	str	r3, [r7, #0]
 8009392:	683b      	ldr	r3, [r7, #0]

	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009394:	2301      	movs	r3, #1
 8009396:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009398:	2300      	movs	r3, #0
 800939a:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800939c:	2300      	movs	r3, #0
 800939e:	613b      	str	r3, [r7, #16]

	for(int i = 0; i < LED_MAX_CHANNEL; i++)
 80093a0:	2300      	movs	r3, #0
 80093a2:	61fb      	str	r3, [r7, #28]
 80093a4:	e01e      	b.n	80093e4 <ledInit+0x84>
	{
		ledOff(i);
 80093a6:	69fb      	ldr	r3, [r7, #28]
 80093a8:	b2db      	uxtb	r3, r3
 80093aa:	4618      	mov	r0, r3
 80093ac:	f000 f826 	bl	80093fc <ledOff>
		GPIO_InitStruct.Pin = led_tbl[i].pin;
 80093b0:	4911      	ldr	r1, [pc, #68]	; (80093f8 <ledInit+0x98>)
 80093b2:	69fa      	ldr	r2, [r7, #28]
 80093b4:	4613      	mov	r3, r2
 80093b6:	005b      	lsls	r3, r3, #1
 80093b8:	4413      	add	r3, r2
 80093ba:	009b      	lsls	r3, r3, #2
 80093bc:	440b      	add	r3, r1
 80093be:	3304      	adds	r3, #4
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	607b      	str	r3, [r7, #4]
		HAL_GPIO_Init(led_tbl[i].port, &GPIO_InitStruct);
 80093c4:	490c      	ldr	r1, [pc, #48]	; (80093f8 <ledInit+0x98>)
 80093c6:	69fa      	ldr	r2, [r7, #28]
 80093c8:	4613      	mov	r3, r2
 80093ca:	005b      	lsls	r3, r3, #1
 80093cc:	4413      	add	r3, r2
 80093ce:	009b      	lsls	r3, r3, #2
 80093d0:	440b      	add	r3, r1
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	1d3a      	adds	r2, r7, #4
 80093d6:	4611      	mov	r1, r2
 80093d8:	4618      	mov	r0, r3
 80093da:	f001 f9a9 	bl	800a730 <HAL_GPIO_Init>
	for(int i = 0; i < LED_MAX_CHANNEL; i++)
 80093de:	69fb      	ldr	r3, [r7, #28]
 80093e0:	3301      	adds	r3, #1
 80093e2:	61fb      	str	r3, [r7, #28]
 80093e4:	69fb      	ldr	r3, [r7, #28]
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	dddd      	ble.n	80093a6 <ledInit+0x46>
	}
	return ret;
 80093ea:	7efb      	ldrb	r3, [r7, #27]
}
 80093ec:	4618      	mov	r0, r3
 80093ee:	3720      	adds	r7, #32
 80093f0:	46bd      	mov	sp, r7
 80093f2:	bd80      	pop	{r7, pc}
 80093f4:	40023800 	.word	0x40023800
 80093f8:	20000004 	.word	0x20000004

080093fc <ledOff>:
void ledOn(uint8_t ch)
{
	HAL_GPIO_WritePin(led_tbl[ch].port, led_tbl[ch].pin, led_tbl[ch].on_state);
}
void ledOff(uint8_t ch)
{
 80093fc:	b590      	push	{r4, r7, lr}
 80093fe:	b083      	sub	sp, #12
 8009400:	af00      	add	r7, sp, #0
 8009402:	4603      	mov	r3, r0
 8009404:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(led_tbl[ch].port, led_tbl[ch].pin, led_tbl[ch].off_state);
 8009406:	79fa      	ldrb	r2, [r7, #7]
 8009408:	4910      	ldr	r1, [pc, #64]	; (800944c <ledOff+0x50>)
 800940a:	4613      	mov	r3, r2
 800940c:	005b      	lsls	r3, r3, #1
 800940e:	4413      	add	r3, r2
 8009410:	009b      	lsls	r3, r3, #2
 8009412:	440b      	add	r3, r1
 8009414:	6818      	ldr	r0, [r3, #0]
 8009416:	79fa      	ldrb	r2, [r7, #7]
 8009418:	490c      	ldr	r1, [pc, #48]	; (800944c <ledOff+0x50>)
 800941a:	4613      	mov	r3, r2
 800941c:	005b      	lsls	r3, r3, #1
 800941e:	4413      	add	r3, r2
 8009420:	009b      	lsls	r3, r3, #2
 8009422:	440b      	add	r3, r1
 8009424:	3304      	adds	r3, #4
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	b299      	uxth	r1, r3
 800942a:	79fa      	ldrb	r2, [r7, #7]
 800942c:	4c07      	ldr	r4, [pc, #28]	; (800944c <ledOff+0x50>)
 800942e:	4613      	mov	r3, r2
 8009430:	005b      	lsls	r3, r3, #1
 8009432:	4413      	add	r3, r2
 8009434:	009b      	lsls	r3, r3, #2
 8009436:	4423      	add	r3, r4
 8009438:	3309      	adds	r3, #9
 800943a:	781b      	ldrb	r3, [r3, #0]
 800943c:	461a      	mov	r2, r3
 800943e:	f001 fbdf 	bl	800ac00 <HAL_GPIO_WritePin>
}
 8009442:	bf00      	nop
 8009444:	370c      	adds	r7, #12
 8009446:	46bd      	mov	sp, r7
 8009448:	bd90      	pop	{r4, r7, pc}
 800944a:	bf00      	nop
 800944c:	20000004 	.word	0x20000004

08009450 <ledToggle>:
void ledToggle(uint8_t ch)
{
 8009450:	b580      	push	{r7, lr}
 8009452:	b082      	sub	sp, #8
 8009454:	af00      	add	r7, sp, #0
 8009456:	4603      	mov	r3, r0
 8009458:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_TogglePin(led_tbl[ch].port, led_tbl[ch].pin);
 800945a:	79fa      	ldrb	r2, [r7, #7]
 800945c:	490b      	ldr	r1, [pc, #44]	; (800948c <ledToggle+0x3c>)
 800945e:	4613      	mov	r3, r2
 8009460:	005b      	lsls	r3, r3, #1
 8009462:	4413      	add	r3, r2
 8009464:	009b      	lsls	r3, r3, #2
 8009466:	440b      	add	r3, r1
 8009468:	6818      	ldr	r0, [r3, #0]
 800946a:	79fa      	ldrb	r2, [r7, #7]
 800946c:	4907      	ldr	r1, [pc, #28]	; (800948c <ledToggle+0x3c>)
 800946e:	4613      	mov	r3, r2
 8009470:	005b      	lsls	r3, r3, #1
 8009472:	4413      	add	r3, r2
 8009474:	009b      	lsls	r3, r3, #2
 8009476:	440b      	add	r3, r1
 8009478:	3304      	adds	r3, #4
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	b29b      	uxth	r3, r3
 800947e:	4619      	mov	r1, r3
 8009480:	f001 fbd7 	bl	800ac32 <HAL_GPIO_TogglePin>
}
 8009484:	bf00      	nop
 8009486:	3708      	adds	r7, #8
 8009488:	46bd      	mov	sp, r7
 800948a:	bd80      	pop	{r7, pc}
 800948c:	20000004 	.word	0x20000004

08009490 <resetInit>:
#include "rtc.h"

static uint32_t reset_count = 0;

bool resetInit(void)
{
 8009490:	b580      	push	{r7, lr}
 8009492:	b082      	sub	sp, #8
 8009494:	af00      	add	r7, sp, #0
	bool ret = true;
 8009496:	2301      	movs	r3, #1
 8009498:	71fb      	strb	r3, [r7, #7]

	if(RCC->CSR & (1<<26))
 800949a:	4b11      	ldr	r3, [pc, #68]	; (80094e0 <resetInit+0x50>)
 800949c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800949e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d013      	beq.n	80094ce <resetInit+0x3e>
	{
		rtcBackupRegWrite(0, rtcBackupRegRead(0) + 1);
 80094a6:	2000      	movs	r0, #0
 80094a8:	f000 f85a 	bl	8009560 <rtcBackupRegRead>
 80094ac:	4603      	mov	r3, r0
 80094ae:	3301      	adds	r3, #1
 80094b0:	4619      	mov	r1, r3
 80094b2:	2000      	movs	r0, #0
 80094b4:	f000 f844 	bl	8009540 <rtcBackupRegWrite>
		delay(500);
 80094b8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80094bc:	f7ff f8dc 	bl	8008678 <delay>
		/* due to multiple input */
		reset_count = rtcBackupRegRead(0);
 80094c0:	2000      	movs	r0, #0
 80094c2:	f000 f84d 	bl	8009560 <rtcBackupRegRead>
 80094c6:	4603      	mov	r3, r0
 80094c8:	461a      	mov	r2, r3
 80094ca:	4b06      	ldr	r3, [pc, #24]	; (80094e4 <resetInit+0x54>)
 80094cc:	601a      	str	r2, [r3, #0]
		/* one count increase itself */
	}
	rtcBackupRegWrite(0, 0);
 80094ce:	2100      	movs	r1, #0
 80094d0:	2000      	movs	r0, #0
 80094d2:	f000 f835 	bl	8009540 <rtcBackupRegWrite>
	return ret;
 80094d6:	79fb      	ldrb	r3, [r7, #7]
}
 80094d8:	4618      	mov	r0, r3
 80094da:	3708      	adds	r7, #8
 80094dc:	46bd      	mov	sp, r7
 80094de:	bd80      	pop	{r7, pc}
 80094e0:	40023800 	.word	0x40023800
 80094e4:	200002f0 	.word	0x200002f0

080094e8 <rtcInit>:
#include "rtc.h"

static RTC_HandleTypeDef hrtc;

bool rtcInit(void)
{
 80094e8:	b580      	push	{r7, lr}
 80094ea:	b082      	sub	sp, #8
 80094ec:	af00      	add	r7, sp, #0
	bool ret = true;
 80094ee:	2301      	movs	r3, #1
 80094f0:	71fb      	strb	r3, [r7, #7]
	// also need to enable GPIOC -> already declared on "bsp.c"
	hrtc.Instance 						= RTC;
 80094f2:	4b11      	ldr	r3, [pc, #68]	; (8009538 <rtcInit+0x50>)
 80094f4:	4a11      	ldr	r2, [pc, #68]	; (800953c <rtcInit+0x54>)
 80094f6:	601a      	str	r2, [r3, #0]
	hrtc.Init.HourFormat 			= RTC_HOURFORMAT_24;
 80094f8:	4b0f      	ldr	r3, [pc, #60]	; (8009538 <rtcInit+0x50>)
 80094fa:	2200      	movs	r2, #0
 80094fc:	605a      	str	r2, [r3, #4]
	hrtc.Init.AsynchPrediv 		= 127;
 80094fe:	4b0e      	ldr	r3, [pc, #56]	; (8009538 <rtcInit+0x50>)
 8009500:	227f      	movs	r2, #127	; 0x7f
 8009502:	609a      	str	r2, [r3, #8]
	hrtc.Init.SynchPrediv 		= 255;
 8009504:	4b0c      	ldr	r3, [pc, #48]	; (8009538 <rtcInit+0x50>)
 8009506:	22ff      	movs	r2, #255	; 0xff
 8009508:	60da      	str	r2, [r3, #12]
	hrtc.Init.OutPut 					= RTC_OUTPUT_DISABLE;
 800950a:	4b0b      	ldr	r3, [pc, #44]	; (8009538 <rtcInit+0x50>)
 800950c:	2200      	movs	r2, #0
 800950e:	611a      	str	r2, [r3, #16]
	hrtc.Init.OutPutPolarity 	= RTC_OUTPUT_POLARITY_HIGH;
 8009510:	4b09      	ldr	r3, [pc, #36]	; (8009538 <rtcInit+0x50>)
 8009512:	2200      	movs	r2, #0
 8009514:	615a      	str	r2, [r3, #20]
	hrtc.Init.OutPutType	    = RTC_OUTPUT_TYPE_OPENDRAIN;
 8009516:	4b08      	ldr	r3, [pc, #32]	; (8009538 <rtcInit+0x50>)
 8009518:	2200      	movs	r2, #0
 800951a:	619a      	str	r2, [r3, #24]
	if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800951c:	4806      	ldr	r0, [pc, #24]	; (8009538 <rtcInit+0x50>)
 800951e:	f003 fa6d 	bl	800c9fc <HAL_RTC_Init>
 8009522:	4603      	mov	r3, r0
 8009524:	2b00      	cmp	r3, #0
 8009526:	d001      	beq.n	800952c <rtcInit+0x44>
	{
	Error_Handler();
 8009528:	f7ff f922 	bl	8008770 <Error_Handler>
	}
	return ret;
 800952c:	79fb      	ldrb	r3, [r7, #7]
}
 800952e:	4618      	mov	r0, r3
 8009530:	3708      	adds	r7, #8
 8009532:	46bd      	mov	sp, r7
 8009534:	bd80      	pop	{r7, pc}
 8009536:	bf00      	nop
 8009538:	200002f4 	.word	0x200002f4
 800953c:	40002800 	.word	0x40002800

08009540 <rtcBackupRegWrite>:

void rtcBackupRegWrite(uint32_t index, uint32_t data)
{
 8009540:	b580      	push	{r7, lr}
 8009542:	b082      	sub	sp, #8
 8009544:	af00      	add	r7, sp, #0
 8009546:	6078      	str	r0, [r7, #4]
 8009548:	6039      	str	r1, [r7, #0]
	HAL_RTCEx_BKUPWrite(&hrtc, index, data);
 800954a:	683a      	ldr	r2, [r7, #0]
 800954c:	6879      	ldr	r1, [r7, #4]
 800954e:	4803      	ldr	r0, [pc, #12]	; (800955c <rtcBackupRegWrite+0x1c>)
 8009550:	f003 fb39 	bl	800cbc6 <HAL_RTCEx_BKUPWrite>
}
 8009554:	bf00      	nop
 8009556:	3708      	adds	r7, #8
 8009558:	46bd      	mov	sp, r7
 800955a:	bd80      	pop	{r7, pc}
 800955c:	200002f4 	.word	0x200002f4

08009560 <rtcBackupRegRead>:
uint32_t rtcBackupRegRead(uint32_t index)
{
 8009560:	b580      	push	{r7, lr}
 8009562:	b082      	sub	sp, #8
 8009564:	af00      	add	r7, sp, #0
 8009566:	6078      	str	r0, [r7, #4]
	return HAL_RTCEx_BKUPRead(&hrtc, index);
 8009568:	6879      	ldr	r1, [r7, #4]
 800956a:	4804      	ldr	r0, [pc, #16]	; (800957c <rtcBackupRegRead+0x1c>)
 800956c:	f003 fb45 	bl	800cbfa <HAL_RTCEx_BKUPRead>
 8009570:	4603      	mov	r3, r0
}
 8009572:	4618      	mov	r0, r3
 8009574:	3708      	adds	r7, #8
 8009576:	46bd      	mov	sp, r7
 8009578:	bd80      	pop	{r7, pc}
 800957a:	bf00      	nop
 800957c:	200002f4 	.word	0x200002f4

08009580 <HAL_RTC_MspInit>:


void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8009580:	b580      	push	{r7, lr}
 8009582:	b088      	sub	sp, #32
 8009584:	af00      	add	r7, sp, #0
 8009586:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8009588:	f107 0308 	add.w	r3, r7, #8
 800958c:	2200      	movs	r2, #0
 800958e:	601a      	str	r2, [r3, #0]
 8009590:	605a      	str	r2, [r3, #4]
 8009592:	609a      	str	r2, [r3, #8]
 8009594:	60da      	str	r2, [r3, #12]
 8009596:	611a      	str	r2, [r3, #16]
 8009598:	615a      	str	r2, [r3, #20]
  if(rtcHandle->Instance==RTC)
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	4a0c      	ldr	r2, [pc, #48]	; (80095d0 <HAL_RTC_MspInit+0x50>)
 80095a0:	4293      	cmp	r3, r2
 80095a2:	d111      	bne.n	80095c8 <HAL_RTC_MspInit+0x48>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80095a4:	2302      	movs	r3, #2
 80095a6:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80095a8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80095ac:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80095ae:	f107 0308 	add.w	r3, r7, #8
 80095b2:	4618      	mov	r0, r3
 80095b4:	f003 f932 	bl	800c81c <HAL_RCCEx_PeriphCLKConfig>
 80095b8:	4603      	mov	r3, r0
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	d001      	beq.n	80095c2 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 80095be:	f7ff f8d7 	bl	8008770 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 80095c2:	4b04      	ldr	r3, [pc, #16]	; (80095d4 <HAL_RTC_MspInit+0x54>)
 80095c4:	2201      	movs	r2, #1
 80095c6:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80095c8:	bf00      	nop
 80095ca:	3720      	adds	r7, #32
 80095cc:	46bd      	mov	sp, r7
 80095ce:	bd80      	pop	{r7, pc}
 80095d0:	40002800 	.word	0x40002800
 80095d4:	42470e3c 	.word	0x42470e3c

080095d8 <uartInit>:
static qbuffer_t qbuffer[UART_MAX_CHANNEL];
static uint8_t rx_buf[256];
//static uint8_t rx_data[UART_MAX_CHANNEL];

bool uartInit(void)
{
 80095d8:	b480      	push	{r7}
 80095da:	b083      	sub	sp, #12
 80095dc:	af00      	add	r7, sp, #0
	for(int i = 0; i < UART_MAX_CHANNEL; i++)
 80095de:	2300      	movs	r3, #0
 80095e0:	607b      	str	r3, [r7, #4]
 80095e2:	e007      	b.n	80095f4 <uartInit+0x1c>
	{
		is_open[i] = false;
 80095e4:	4a08      	ldr	r2, [pc, #32]	; (8009608 <uartInit+0x30>)
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	4413      	add	r3, r2
 80095ea:	2200      	movs	r2, #0
 80095ec:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < UART_MAX_CHANNEL; i++)
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	3301      	adds	r3, #1
 80095f2:	607b      	str	r3, [r7, #4]
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	2b01      	cmp	r3, #1
 80095f8:	ddf4      	ble.n	80095e4 <uartInit+0xc>
	}
	return false;
 80095fa:	2300      	movs	r3, #0
}
 80095fc:	4618      	mov	r0, r3
 80095fe:	370c      	adds	r7, #12
 8009600:	46bd      	mov	sp, r7
 8009602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009606:	4770      	bx	lr
 8009608:	200003b8 	.word	0x200003b8

0800960c <uartOpen>:

bool uartOpen(uint8_t ch, uint32_t baud)
{
 800960c:	b580      	push	{r7, lr}
 800960e:	b084      	sub	sp, #16
 8009610:	af00      	add	r7, sp, #0
 8009612:	4603      	mov	r3, r0
 8009614:	6039      	str	r1, [r7, #0]
 8009616:	71fb      	strb	r3, [r7, #7]
	bool ret = false;
 8009618:	2300      	movs	r3, #0
 800961a:	73fb      	strb	r3, [r7, #15]

	switch(ch)
 800961c:	79fb      	ldrb	r3, [r7, #7]
 800961e:	2b00      	cmp	r3, #0
 8009620:	d002      	beq.n	8009628 <uartOpen+0x1c>
 8009622:	2b01      	cmp	r3, #1
 8009624:	d007      	beq.n	8009636 <uartOpen+0x2a>
 8009626:	e076      	b.n	8009716 <uartOpen+0x10a>
	{
		case _DEF_UART1:
			is_open[ch] = true;
 8009628:	79fb      	ldrb	r3, [r7, #7]
 800962a:	4a3d      	ldr	r2, [pc, #244]	; (8009720 <uartOpen+0x114>)
 800962c:	2101      	movs	r1, #1
 800962e:	54d1      	strb	r1, [r2, r3]
			ret = true;
 8009630:	2301      	movs	r3, #1
 8009632:	73fb      	strb	r3, [r7, #15]
			break;
 8009634:	e06f      	b.n	8009716 <uartOpen+0x10a>

		case _DEF_UART2:
			huart1.Instance 					= USART1;
 8009636:	4b3b      	ldr	r3, [pc, #236]	; (8009724 <uartOpen+0x118>)
 8009638:	4a3b      	ldr	r2, [pc, #236]	; (8009728 <uartOpen+0x11c>)
 800963a:	601a      	str	r2, [r3, #0]
			huart1.Init.BaudRate 			= baud;
 800963c:	4a39      	ldr	r2, [pc, #228]	; (8009724 <uartOpen+0x118>)
 800963e:	683b      	ldr	r3, [r7, #0]
 8009640:	6053      	str	r3, [r2, #4]
			huart1.Init.WordLength		= UART_WORDLENGTH_8B;
 8009642:	4b38      	ldr	r3, [pc, #224]	; (8009724 <uartOpen+0x118>)
 8009644:	2200      	movs	r2, #0
 8009646:	609a      	str	r2, [r3, #8]
			huart1.Init.StopBits 			= UART_STOPBITS_1;
 8009648:	4b36      	ldr	r3, [pc, #216]	; (8009724 <uartOpen+0x118>)
 800964a:	2200      	movs	r2, #0
 800964c:	60da      	str	r2, [r3, #12]
			huart1.Init.Parity 				= UART_PARITY_NONE;
 800964e:	4b35      	ldr	r3, [pc, #212]	; (8009724 <uartOpen+0x118>)
 8009650:	2200      	movs	r2, #0
 8009652:	611a      	str	r2, [r3, #16]
			huart1.Init.Mode 					= UART_MODE_TX_RX;
 8009654:	4b33      	ldr	r3, [pc, #204]	; (8009724 <uartOpen+0x118>)
 8009656:	220c      	movs	r2, #12
 8009658:	615a      	str	r2, [r3, #20]
			huart1.Init.HwFlowCtl 		= UART_HWCONTROL_NONE;
 800965a:	4b32      	ldr	r3, [pc, #200]	; (8009724 <uartOpen+0x118>)
 800965c:	2200      	movs	r2, #0
 800965e:	619a      	str	r2, [r3, #24]
			huart1.Init.OverSampling 	= UART_OVERSAMPLING_16;
 8009660:	4b30      	ldr	r3, [pc, #192]	; (8009724 <uartOpen+0x118>)
 8009662:	2200      	movs	r2, #0
 8009664:	61da      	str	r2, [r3, #28]

			HAL_UART_DeInit(&huart1);
 8009666:	482f      	ldr	r0, [pc, #188]	; (8009724 <uartOpen+0x118>)
 8009668:	f003 fb2c 	bl	800ccc4 <HAL_UART_DeInit>

			qbufferCreate(&qbuffer[ch], &rx_buf[0], 256);
 800966c:	79fb      	ldrb	r3, [r7, #7]
 800966e:	011b      	lsls	r3, r3, #4
 8009670:	4a2e      	ldr	r2, [pc, #184]	; (800972c <uartOpen+0x120>)
 8009672:	4413      	add	r3, r2
 8009674:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009678:	492d      	ldr	r1, [pc, #180]	; (8009730 <uartOpen+0x124>)
 800967a:	4618      	mov	r0, r3
 800967c:	f7ff f963 	bl	8008946 <qbufferCreate>

      __HAL_RCC_DMA2_CLK_ENABLE();
 8009680:	2300      	movs	r3, #0
 8009682:	60bb      	str	r3, [r7, #8]
 8009684:	4b2b      	ldr	r3, [pc, #172]	; (8009734 <uartOpen+0x128>)
 8009686:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009688:	4a2a      	ldr	r2, [pc, #168]	; (8009734 <uartOpen+0x128>)
 800968a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800968e:	6313      	str	r3, [r2, #48]	; 0x30
 8009690:	4b28      	ldr	r3, [pc, #160]	; (8009734 <uartOpen+0x128>)
 8009692:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009694:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009698:	60bb      	str	r3, [r7, #8]
 800969a:	68bb      	ldr	r3, [r7, #8]
      HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 800969c:	2200      	movs	r2, #0
 800969e:	2100      	movs	r1, #0
 80096a0:	203a      	movs	r0, #58	; 0x3a
 80096a2:	f000 fba0 	bl	8009de6 <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80096a6:	203a      	movs	r0, #58	; 0x3a
 80096a8:	f000 fbb9 	bl	8009e1e <HAL_NVIC_EnableIRQ>

			if (HAL_UART_Init(&huart1) != HAL_OK)
 80096ac:	481d      	ldr	r0, [pc, #116]	; (8009724 <uartOpen+0x118>)
 80096ae:	f003 fabc 	bl	800cc2a <HAL_UART_Init>
 80096b2:	4603      	mov	r3, r0
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	d002      	beq.n	80096be <uartOpen+0xb2>
			{
				ret = false;
 80096b8:	2300      	movs	r3, #0
 80096ba:	73fb      	strb	r3, [r7, #15]
				}
				/* FLUSH */
				qbuffer[ch].in  = qbuffer[ch].len - hdma_usart1_rx.Instance->NDTR;
				qbuffer[ch].out = qbuffer[ch].in;
			}
			break;
 80096bc:	e02a      	b.n	8009714 <uartOpen+0x108>
				ret = true;
 80096be:	2301      	movs	r3, #1
 80096c0:	73fb      	strb	r3, [r7, #15]
				is_open[ch] = true;
 80096c2:	79fb      	ldrb	r3, [r7, #7]
 80096c4:	4a16      	ldr	r2, [pc, #88]	; (8009720 <uartOpen+0x114>)
 80096c6:	2101      	movs	r1, #1
 80096c8:	54d1      	strb	r1, [r2, r3]
				if(HAL_UART_Receive_DMA(&huart1, (uint8_t *)&rx_buf[0], 256) != HAL_OK)
 80096ca:	f44f 7280 	mov.w	r2, #256	; 0x100
 80096ce:	4918      	ldr	r1, [pc, #96]	; (8009730 <uartOpen+0x124>)
 80096d0:	4814      	ldr	r0, [pc, #80]	; (8009724 <uartOpen+0x118>)
 80096d2:	f003 fbb8 	bl	800ce46 <HAL_UART_Receive_DMA>
 80096d6:	4603      	mov	r3, r0
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d001      	beq.n	80096e0 <uartOpen+0xd4>
				  ret = false;
 80096dc:	2300      	movs	r3, #0
 80096de:	73fb      	strb	r3, [r7, #15]
				qbuffer[ch].in  = qbuffer[ch].len - hdma_usart1_rx.Instance->NDTR;
 80096e0:	79fb      	ldrb	r3, [r7, #7]
 80096e2:	4a12      	ldr	r2, [pc, #72]	; (800972c <uartOpen+0x120>)
 80096e4:	011b      	lsls	r3, r3, #4
 80096e6:	4413      	add	r3, r2
 80096e8:	3308      	adds	r3, #8
 80096ea:	6819      	ldr	r1, [r3, #0]
 80096ec:	4b12      	ldr	r3, [pc, #72]	; (8009738 <uartOpen+0x12c>)
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	685a      	ldr	r2, [r3, #4]
 80096f2:	79fb      	ldrb	r3, [r7, #7]
 80096f4:	1a8a      	subs	r2, r1, r2
 80096f6:	490d      	ldr	r1, [pc, #52]	; (800972c <uartOpen+0x120>)
 80096f8:	011b      	lsls	r3, r3, #4
 80096fa:	440b      	add	r3, r1
 80096fc:	601a      	str	r2, [r3, #0]
				qbuffer[ch].out = qbuffer[ch].in;
 80096fe:	79fa      	ldrb	r2, [r7, #7]
 8009700:	79fb      	ldrb	r3, [r7, #7]
 8009702:	490a      	ldr	r1, [pc, #40]	; (800972c <uartOpen+0x120>)
 8009704:	0112      	lsls	r2, r2, #4
 8009706:	440a      	add	r2, r1
 8009708:	6812      	ldr	r2, [r2, #0]
 800970a:	4908      	ldr	r1, [pc, #32]	; (800972c <uartOpen+0x120>)
 800970c:	011b      	lsls	r3, r3, #4
 800970e:	440b      	add	r3, r1
 8009710:	3304      	adds	r3, #4
 8009712:	601a      	str	r2, [r3, #0]
			break;
 8009714:	bf00      	nop
	}

	return ret;
 8009716:	7bfb      	ldrb	r3, [r7, #15]
}
 8009718:	4618      	mov	r0, r3
 800971a:	3710      	adds	r7, #16
 800971c:	46bd      	mov	sp, r7
 800971e:	bd80      	pop	{r7, pc}
 8009720:	200003b8 	.word	0x200003b8
 8009724:	20000314 	.word	0x20000314
 8009728:	40011000 	.word	0x40011000
 800972c:	200003bc 	.word	0x200003bc
 8009730:	200003dc 	.word	0x200003dc
 8009734:	40023800 	.word	0x40023800
 8009738:	20000358 	.word	0x20000358

0800973c <uartAvailable>:
uint32_t uartAvailable(uint8_t ch)
{
 800973c:	b580      	push	{r7, lr}
 800973e:	b084      	sub	sp, #16
 8009740:	af00      	add	r7, sp, #0
 8009742:	4603      	mov	r3, r0
 8009744:	71fb      	strb	r3, [r7, #7]
	uint32_t ret = 0;
 8009746:	2300      	movs	r3, #0
 8009748:	60fb      	str	r3, [r7, #12]


	switch(ch)
 800974a:	79fb      	ldrb	r3, [r7, #7]
 800974c:	2b00      	cmp	r3, #0
 800974e:	d002      	beq.n	8009756 <uartAvailable+0x1a>
 8009750:	2b01      	cmp	r3, #1
 8009752:	d004      	beq.n	800975e <uartAvailable+0x22>
 8009754:	e01b      	b.n	800978e <uartAvailable+0x52>
	{
		case _DEF_UART1: // 첫번째 채널 uart -> 1. cdc 추
			ret = cdcAvailable();
 8009756:	f007 fcc5 	bl	80110e4 <cdcAvailable>
 800975a:	60f8      	str	r0, [r7, #12]
			break;
 800975c:	e017      	b.n	800978e <uartAvailable+0x52>
		case _DEF_UART2:
		  qbuffer[ch].in = qbuffer[ch].len - hdma_usart1_rx.Instance->NDTR;
 800975e:	79fb      	ldrb	r3, [r7, #7]
 8009760:	4a0d      	ldr	r2, [pc, #52]	; (8009798 <uartAvailable+0x5c>)
 8009762:	011b      	lsls	r3, r3, #4
 8009764:	4413      	add	r3, r2
 8009766:	3308      	adds	r3, #8
 8009768:	6819      	ldr	r1, [r3, #0]
 800976a:	4b0c      	ldr	r3, [pc, #48]	; (800979c <uartAvailable+0x60>)
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	685a      	ldr	r2, [r3, #4]
 8009770:	79fb      	ldrb	r3, [r7, #7]
 8009772:	1a8a      	subs	r2, r1, r2
 8009774:	4908      	ldr	r1, [pc, #32]	; (8009798 <uartAvailable+0x5c>)
 8009776:	011b      	lsls	r3, r3, #4
 8009778:	440b      	add	r3, r1
 800977a:	601a      	str	r2, [r3, #0]
		  ret = qbufferAvailable(&qbuffer[ch]);
 800977c:	79fb      	ldrb	r3, [r7, #7]
 800977e:	011b      	lsls	r3, r3, #4
 8009780:	4a05      	ldr	r2, [pc, #20]	; (8009798 <uartAvailable+0x5c>)
 8009782:	4413      	add	r3, r2
 8009784:	4618      	mov	r0, r3
 8009786:	f7ff f936 	bl	80089f6 <qbufferAvailable>
 800978a:	60f8      	str	r0, [r7, #12]
		  break;
 800978c:	bf00      	nop
	}

	return ret;
 800978e:	68fb      	ldr	r3, [r7, #12]
}
 8009790:	4618      	mov	r0, r3
 8009792:	3710      	adds	r7, #16
 8009794:	46bd      	mov	sp, r7
 8009796:	bd80      	pop	{r7, pc}
 8009798:	200003bc 	.word	0x200003bc
 800979c:	20000358 	.word	0x20000358

080097a0 <uartRead>:
uint8_t uartRead(uint8_t ch)
{
 80097a0:	b580      	push	{r7, lr}
 80097a2:	b084      	sub	sp, #16
 80097a4:	af00      	add	r7, sp, #0
 80097a6:	4603      	mov	r3, r0
 80097a8:	71fb      	strb	r3, [r7, #7]
	uint8_t ret;

	switch(ch)
 80097aa:	79fb      	ldrb	r3, [r7, #7]
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d002      	beq.n	80097b6 <uartRead+0x16>
 80097b0:	2b01      	cmp	r3, #1
 80097b2:	d005      	beq.n	80097c0 <uartRead+0x20>
 80097b4:	e00c      	b.n	80097d0 <uartRead+0x30>
	{
		case _DEF_UART1:
			ret = cdcRead();
 80097b6:	f007 fcb3 	bl	8011120 <cdcRead>
 80097ba:	4603      	mov	r3, r0
 80097bc:	73fb      	strb	r3, [r7, #15]
			break;
 80097be:	e007      	b.n	80097d0 <uartRead+0x30>
		case _DEF_UART2:
		  qbufferRead(&qbuffer[_DEF_UART2], &ret, 1);
 80097c0:	f107 030f 	add.w	r3, r7, #15
 80097c4:	2201      	movs	r2, #1
 80097c6:	4619      	mov	r1, r3
 80097c8:	4804      	ldr	r0, [pc, #16]	; (80097dc <uartRead+0x3c>)
 80097ca:	f7ff f8d7 	bl	800897c <qbufferRead>
		  break;
 80097ce:	bf00      	nop
	}

	return ret;
 80097d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80097d2:	4618      	mov	r0, r3
 80097d4:	3710      	adds	r7, #16
 80097d6:	46bd      	mov	sp, r7
 80097d8:	bd80      	pop	{r7, pc}
 80097da:	bf00      	nop
 80097dc:	200003cc 	.word	0x200003cc

080097e0 <uartWrite>:
uint32_t uartWrite(uint8_t ch, uint8_t *pData, uint32_t length)
{
 80097e0:	b580      	push	{r7, lr}
 80097e2:	b086      	sub	sp, #24
 80097e4:	af00      	add	r7, sp, #0
 80097e6:	4603      	mov	r3, r0
 80097e8:	60b9      	str	r1, [r7, #8]
 80097ea:	607a      	str	r2, [r7, #4]
 80097ec:	73fb      	strb	r3, [r7, #15]
	uint32_t ret;
	HAL_StatusTypeDef status;

	switch(ch)
 80097ee:	7bfb      	ldrb	r3, [r7, #15]
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d002      	beq.n	80097fa <uartWrite+0x1a>
 80097f4:	2b01      	cmp	r3, #1
 80097f6:	d006      	beq.n	8009806 <uartWrite+0x26>
 80097f8:	e014      	b.n	8009824 <uartWrite+0x44>
		{
			case _DEF_UART1:
				ret = cdcWrite(pData, length);
 80097fa:	6879      	ldr	r1, [r7, #4]
 80097fc:	68b8      	ldr	r0, [r7, #8]
 80097fe:	f007 fce5 	bl	80111cc <cdcWrite>
 8009802:	6178      	str	r0, [r7, #20]
				break;
 8009804:	e00e      	b.n	8009824 <uartWrite+0x44>

			case _DEF_UART2:
				status = HAL_UART_Transmit(&huart1, pData, length, 100);
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	b29a      	uxth	r2, r3
 800980a:	2364      	movs	r3, #100	; 0x64
 800980c:	68b9      	ldr	r1, [r7, #8]
 800980e:	4808      	ldr	r0, [pc, #32]	; (8009830 <uartWrite+0x50>)
 8009810:	f003 fa87 	bl	800cd22 <HAL_UART_Transmit>
 8009814:	4603      	mov	r3, r0
 8009816:	74fb      	strb	r3, [r7, #19]
				if(status == HAL_OK)
 8009818:	7cfb      	ldrb	r3, [r7, #19]
 800981a:	2b00      	cmp	r3, #0
 800981c:	d101      	bne.n	8009822 <uartWrite+0x42>
				{
					ret = length;
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	617b      	str	r3, [r7, #20]
				}
				break;
 8009822:	bf00      	nop
		}

	return ret;
 8009824:	697b      	ldr	r3, [r7, #20]
}
 8009826:	4618      	mov	r0, r3
 8009828:	3718      	adds	r7, #24
 800982a:	46bd      	mov	sp, r7
 800982c:	bd80      	pop	{r7, pc}
 800982e:	bf00      	nop
 8009830:	20000314 	.word	0x20000314

08009834 <uartPrintf>:
/*
 * 복습할 것 가변인자...*/
uint32_t uartPrintf(uint8_t ch, char* fmt, ...)
{
 8009834:	b40e      	push	{r1, r2, r3}
 8009836:	b580      	push	{r7, lr}
 8009838:	b0c7      	sub	sp, #284	; 0x11c
 800983a:	af00      	add	r7, sp, #0
 800983c:	4602      	mov	r2, r0
 800983e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8009842:	f2a3 1311 	subw	r3, r3, #273	; 0x111
 8009846:	701a      	strb	r2, [r3, #0]
	va_list args;
	int len;
	uint32_t ret;


	va_start(args, fmt); 									// 가변인자 처리 시작
 8009848:	f507 7294 	add.w	r2, r7, #296	; 0x128
 800984c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8009850:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8009854:	601a      	str	r2, [r3, #0]
	len = vsnprintf(buf, 256, fmt, args); //-> 버퍼에 해당 내용을 write
 8009856:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800985a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800985e:	f107 0010 	add.w	r0, r7, #16
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8009868:	f44f 7180 	mov.w	r1, #256	; 0x100
 800986c:	f008 fac2 	bl	8011df4 <vsniprintf>
 8009870:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114

	ret = uartWrite(ch, (uint8_t *)buf, len);
 8009874:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8009878:	f107 0110 	add.w	r1, r7, #16
 800987c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8009880:	f2a3 1311 	subw	r3, r3, #273	; 0x111
 8009884:	781b      	ldrb	r3, [r3, #0]
 8009886:	4618      	mov	r0, r3
 8009888:	f7ff ffaa 	bl	80097e0 <uartWrite>
 800988c:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

	va_end(args);

	return ret;
 8009890:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
}
 8009894:	4618      	mov	r0, r3
 8009896:	f507 778e 	add.w	r7, r7, #284	; 0x11c
 800989a:	46bd      	mov	sp, r7
 800989c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80098a0:	b003      	add	sp, #12
 80098a2:	4770      	bx	lr

080098a4 <HAL_UART_ErrorCallback>:




void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80098a4:	b480      	push	{r7}
 80098a6:	b083      	sub	sp, #12
 80098a8:	af00      	add	r7, sp, #0
 80098aa:	6078      	str	r0, [r7, #4]
  if(huart1.Instance == USART1)
  {

  }
}
 80098ac:	bf00      	nop
 80098ae:	370c      	adds	r7, #12
 80098b0:	46bd      	mov	sp, r7
 80098b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098b6:	4770      	bx	lr

080098b8 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80098b8:	b480      	push	{r7}
 80098ba:	b083      	sub	sp, #12
 80098bc:	af00      	add	r7, sp, #0
 80098be:	6078      	str	r0, [r7, #4]
    /* received 1 byte data will be sent to our buffer
     * and to receive 1byte again, recall HAL_UART_Receive_IT*/
    HAL_UART_Receive_IT(&huart1, (uint8_t *)&rx_data[_DEF_UART2], 1);
  }
#endif
}
 80098c0:	bf00      	nop
 80098c2:	370c      	adds	r7, #12
 80098c4:	46bd      	mov	sp, r7
 80098c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ca:	4770      	bx	lr

080098cc <HAL_UART_MspInit>:




void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80098cc:	b580      	push	{r7, lr}
 80098ce:	b08a      	sub	sp, #40	; 0x28
 80098d0:	af00      	add	r7, sp, #0
 80098d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80098d4:	f107 0314 	add.w	r3, r7, #20
 80098d8:	2200      	movs	r2, #0
 80098da:	601a      	str	r2, [r3, #0]
 80098dc:	605a      	str	r2, [r3, #4]
 80098de:	609a      	str	r2, [r3, #8]
 80098e0:	60da      	str	r2, [r3, #12]
 80098e2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	4a35      	ldr	r2, [pc, #212]	; (80099c0 <HAL_UART_MspInit+0xf4>)
 80098ea:	4293      	cmp	r3, r2
 80098ec:	d163      	bne.n	80099b6 <HAL_UART_MspInit+0xea>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80098ee:	2300      	movs	r3, #0
 80098f0:	613b      	str	r3, [r7, #16]
 80098f2:	4b34      	ldr	r3, [pc, #208]	; (80099c4 <HAL_UART_MspInit+0xf8>)
 80098f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80098f6:	4a33      	ldr	r2, [pc, #204]	; (80099c4 <HAL_UART_MspInit+0xf8>)
 80098f8:	f043 0310 	orr.w	r3, r3, #16
 80098fc:	6453      	str	r3, [r2, #68]	; 0x44
 80098fe:	4b31      	ldr	r3, [pc, #196]	; (80099c4 <HAL_UART_MspInit+0xf8>)
 8009900:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009902:	f003 0310 	and.w	r3, r3, #16
 8009906:	613b      	str	r3, [r7, #16]
 8009908:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800990a:	2300      	movs	r3, #0
 800990c:	60fb      	str	r3, [r7, #12]
 800990e:	4b2d      	ldr	r3, [pc, #180]	; (80099c4 <HAL_UART_MspInit+0xf8>)
 8009910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009912:	4a2c      	ldr	r2, [pc, #176]	; (80099c4 <HAL_UART_MspInit+0xf8>)
 8009914:	f043 0301 	orr.w	r3, r3, #1
 8009918:	6313      	str	r3, [r2, #48]	; 0x30
 800991a:	4b2a      	ldr	r3, [pc, #168]	; (80099c4 <HAL_UART_MspInit+0xf8>)
 800991c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800991e:	f003 0301 	and.w	r3, r3, #1
 8009922:	60fb      	str	r3, [r7, #12]
 8009924:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8009926:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800992a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800992c:	2302      	movs	r3, #2
 800992e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009930:	2300      	movs	r3, #0
 8009932:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009934:	2303      	movs	r3, #3
 8009936:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8009938:	2307      	movs	r3, #7
 800993a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800993c:	f107 0314 	add.w	r3, r7, #20
 8009940:	4619      	mov	r1, r3
 8009942:	4821      	ldr	r0, [pc, #132]	; (80099c8 <HAL_UART_MspInit+0xfc>)
 8009944:	f000 fef4 	bl	800a730 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8009948:	4b20      	ldr	r3, [pc, #128]	; (80099cc <HAL_UART_MspInit+0x100>)
 800994a:	4a21      	ldr	r2, [pc, #132]	; (80099d0 <HAL_UART_MspInit+0x104>)
 800994c:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 800994e:	4b1f      	ldr	r3, [pc, #124]	; (80099cc <HAL_UART_MspInit+0x100>)
 8009950:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8009954:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8009956:	4b1d      	ldr	r3, [pc, #116]	; (80099cc <HAL_UART_MspInit+0x100>)
 8009958:	2200      	movs	r2, #0
 800995a:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800995c:	4b1b      	ldr	r3, [pc, #108]	; (80099cc <HAL_UART_MspInit+0x100>)
 800995e:	2200      	movs	r2, #0
 8009960:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8009962:	4b1a      	ldr	r3, [pc, #104]	; (80099cc <HAL_UART_MspInit+0x100>)
 8009964:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009968:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800996a:	4b18      	ldr	r3, [pc, #96]	; (80099cc <HAL_UART_MspInit+0x100>)
 800996c:	2200      	movs	r2, #0
 800996e:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8009970:	4b16      	ldr	r3, [pc, #88]	; (80099cc <HAL_UART_MspInit+0x100>)
 8009972:	2200      	movs	r2, #0
 8009974:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8009976:	4b15      	ldr	r3, [pc, #84]	; (80099cc <HAL_UART_MspInit+0x100>)
 8009978:	f44f 7280 	mov.w	r2, #256	; 0x100
 800997c:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800997e:	4b13      	ldr	r3, [pc, #76]	; (80099cc <HAL_UART_MspInit+0x100>)
 8009980:	2200      	movs	r2, #0
 8009982:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8009984:	4b11      	ldr	r3, [pc, #68]	; (80099cc <HAL_UART_MspInit+0x100>)
 8009986:	2200      	movs	r2, #0
 8009988:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800998a:	4810      	ldr	r0, [pc, #64]	; (80099cc <HAL_UART_MspInit+0x100>)
 800998c:	f000 fa70 	bl	8009e70 <HAL_DMA_Init>
 8009990:	4603      	mov	r3, r0
 8009992:	2b00      	cmp	r3, #0
 8009994:	d001      	beq.n	800999a <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8009996:	f7fe feeb 	bl	8008770 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	4a0b      	ldr	r2, [pc, #44]	; (80099cc <HAL_UART_MspInit+0x100>)
 800999e:	639a      	str	r2, [r3, #56]	; 0x38
 80099a0:	4a0a      	ldr	r2, [pc, #40]	; (80099cc <HAL_UART_MspInit+0x100>)
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80099a6:	2200      	movs	r2, #0
 80099a8:	2100      	movs	r1, #0
 80099aa:	2025      	movs	r0, #37	; 0x25
 80099ac:	f000 fa1b 	bl	8009de6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80099b0:	2025      	movs	r0, #37	; 0x25
 80099b2:	f000 fa34 	bl	8009e1e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80099b6:	bf00      	nop
 80099b8:	3728      	adds	r7, #40	; 0x28
 80099ba:	46bd      	mov	sp, r7
 80099bc:	bd80      	pop	{r7, pc}
 80099be:	bf00      	nop
 80099c0:	40011000 	.word	0x40011000
 80099c4:	40023800 	.word	0x40023800
 80099c8:	40020000 	.word	0x40020000
 80099cc:	20000358 	.word	0x20000358
 80099d0:	40026440 	.word	0x40026440

080099d4 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 80099d4:	b580      	push	{r7, lr}
 80099d6:	b082      	sub	sp, #8
 80099d8:	af00      	add	r7, sp, #0
 80099da:	6078      	str	r0, [r7, #4]

  if(uartHandle->Instance==USART1)
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	4a0c      	ldr	r2, [pc, #48]	; (8009a14 <HAL_UART_MspDeInit+0x40>)
 80099e2:	4293      	cmp	r3, r2
 80099e4:	d112      	bne.n	8009a0c <HAL_UART_MspDeInit+0x38>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 80099e6:	4b0c      	ldr	r3, [pc, #48]	; (8009a18 <HAL_UART_MspDeInit+0x44>)
 80099e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80099ea:	4a0b      	ldr	r2, [pc, #44]	; (8009a18 <HAL_UART_MspDeInit+0x44>)
 80099ec:	f023 0310 	bic.w	r3, r3, #16
 80099f0:	6453      	str	r3, [r2, #68]	; 0x44

    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9|GPIO_PIN_10);
 80099f2:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80099f6:	4809      	ldr	r0, [pc, #36]	; (8009a1c <HAL_UART_MspDeInit+0x48>)
 80099f8:	f001 f81e 	bl	800aa38 <HAL_GPIO_DeInit>

    /* USART1 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmarx);
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a00:	4618      	mov	r0, r3
 8009a02:	f000 fae3 	bl	8009fcc <HAL_DMA_DeInit>

    /* USART1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 8009a06:	2025      	movs	r0, #37	; 0x25
 8009a08:	f000 fa17 	bl	8009e3a <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART1_MspDeInit 1 */

  /* USER CODE END USART1_MspDeInit 1 */
  }
}
 8009a0c:	bf00      	nop
 8009a0e:	3708      	adds	r7, #8
 8009a10:	46bd      	mov	sp, r7
 8009a12:	bd80      	pop	{r7, pc}
 8009a14:	40011000 	.word	0x40011000
 8009a18:	40023800 	.word	0x40023800
 8009a1c:	40020000 	.word	0x40020000

08009a20 <usbInit>:


#include "usb.h"

bool usbInit(void)
{
 8009a20:	b580      	push	{r7, lr}
 8009a22:	b086      	sub	sp, #24
 8009a24:	af00      	add	r7, sp, #0
	bool ret = true;
 8009a26:	2301      	movs	r3, #1
 8009a28:	75fb      	strb	r3, [r7, #23]

	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009a2a:	463b      	mov	r3, r7
 8009a2c:	2200      	movs	r2, #0
 8009a2e:	601a      	str	r2, [r3, #0]
 8009a30:	605a      	str	r2, [r3, #4]
 8009a32:	609a      	str	r2, [r3, #8]
 8009a34:	60da      	str	r2, [r3, #12]
 8009a36:	611a      	str	r2, [r3, #16]

	GPIO_InitStruct.Pin = GPIO_PIN_12;
 8009a38:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009a3c:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8009a3e:	2311      	movs	r3, #17
 8009a40:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009a42:	2300      	movs	r3, #0
 8009a44:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009a46:	2300      	movs	r3, #0
 8009a48:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009a4a:	463b      	mov	r3, r7
 8009a4c:	4619      	mov	r1, r3
 8009a4e:	4810      	ldr	r0, [pc, #64]	; (8009a90 <usbInit+0x70>)
 8009a50:	f000 fe6e 	bl	800a730 <HAL_GPIO_Init>

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8009a54:	2200      	movs	r2, #0
 8009a56:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8009a5a:	480d      	ldr	r0, [pc, #52]	; (8009a90 <usbInit+0x70>)
 8009a5c:	f001 f8d0 	bl	800ac00 <HAL_GPIO_WritePin>
	delay(200);
 8009a60:	20c8      	movs	r0, #200	; 0xc8
 8009a62:	f7fe fe09 	bl	8008678 <delay>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8009a66:	2201      	movs	r2, #1
 8009a68:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8009a6c:	4808      	ldr	r0, [pc, #32]	; (8009a90 <usbInit+0x70>)
 8009a6e:	f001 f8c7 	bl	800ac00 <HAL_GPIO_WritePin>

	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009a72:	2300      	movs	r3, #0
 8009a74:	607b      	str	r3, [r7, #4]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009a76:	463b      	mov	r3, r7
 8009a78:	4619      	mov	r1, r3
 8009a7a:	4805      	ldr	r0, [pc, #20]	; (8009a90 <usbInit+0x70>)
 8009a7c:	f000 fe58 	bl	800a730 <HAL_GPIO_Init>

	MX_USB_DEVICE_Init();
 8009a80:	f007 fb00 	bl	8011084 <MX_USB_DEVICE_Init>
	return ret;
 8009a84:	7dfb      	ldrb	r3, [r7, #23]
}
 8009a86:	4618      	mov	r0, r3
 8009a88:	3718      	adds	r7, #24
 8009a8a:	46bd      	mov	sp, r7
 8009a8c:	bd80      	pop	{r7, pc}
 8009a8e:	bf00      	nop
 8009a90:	40020000 	.word	0x40020000

08009a94 <hwInit>:
 */

#include "hw.h"

void hwInit()
{
 8009a94:	b580      	push	{r7, lr}
 8009a96:	af00      	add	r7, sp, #0
  bspInit();
 8009a98:	f7fe fdb6 	bl	8008608 <bspInit>
  cliInit();
 8009a9c:	f7fe ffc6 	bl	8008a2c <cliInit>

  rtcInit();
 8009aa0:	f7ff fd22 	bl	80094e8 <rtcInit>
  resetInit();
 8009aa4:	f7ff fcf4 	bl	8009490 <resetInit>
  ledInit();
 8009aa8:	f7ff fc5a 	bl	8009360 <ledInit>
  usbInit();
 8009aac:	f7ff ffb8 	bl	8009a20 <usbInit>
  uartInit();
 8009ab0:	f7ff fd92 	bl	80095d8 <uartInit>
  flashInit();
 8009ab4:	f7ff fc4c 	bl	8009350 <flashInit>

}
 8009ab8:	bf00      	nop
 8009aba:	bd80      	pop	{r7, pc}

08009abc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8009abc:	b580      	push	{r7, lr}
 8009abe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8009ac0:	4b0e      	ldr	r3, [pc, #56]	; (8009afc <HAL_Init+0x40>)
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	4a0d      	ldr	r2, [pc, #52]	; (8009afc <HAL_Init+0x40>)
 8009ac6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009aca:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8009acc:	4b0b      	ldr	r3, [pc, #44]	; (8009afc <HAL_Init+0x40>)
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	4a0a      	ldr	r2, [pc, #40]	; (8009afc <HAL_Init+0x40>)
 8009ad2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8009ad6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8009ad8:	4b08      	ldr	r3, [pc, #32]	; (8009afc <HAL_Init+0x40>)
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	4a07      	ldr	r2, [pc, #28]	; (8009afc <HAL_Init+0x40>)
 8009ade:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009ae2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8009ae4:	2003      	movs	r0, #3
 8009ae6:	f000 f973 	bl	8009dd0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8009aea:	200f      	movs	r0, #15
 8009aec:	f000 f808 	bl	8009b00 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8009af0:	f7fe fe44 	bl	800877c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8009af4:	2300      	movs	r3, #0
}
 8009af6:	4618      	mov	r0, r3
 8009af8:	bd80      	pop	{r7, pc}
 8009afa:	bf00      	nop
 8009afc:	40023c00 	.word	0x40023c00

08009b00 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8009b00:	b580      	push	{r7, lr}
 8009b02:	b082      	sub	sp, #8
 8009b04:	af00      	add	r7, sp, #0
 8009b06:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8009b08:	4b12      	ldr	r3, [pc, #72]	; (8009b54 <HAL_InitTick+0x54>)
 8009b0a:	681a      	ldr	r2, [r3, #0]
 8009b0c:	4b12      	ldr	r3, [pc, #72]	; (8009b58 <HAL_InitTick+0x58>)
 8009b0e:	781b      	ldrb	r3, [r3, #0]
 8009b10:	4619      	mov	r1, r3
 8009b12:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8009b16:	fbb3 f3f1 	udiv	r3, r3, r1
 8009b1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8009b1e:	4618      	mov	r0, r3
 8009b20:	f000 f999 	bl	8009e56 <HAL_SYSTICK_Config>
 8009b24:	4603      	mov	r3, r0
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d001      	beq.n	8009b2e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8009b2a:	2301      	movs	r3, #1
 8009b2c:	e00e      	b.n	8009b4c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	2b0f      	cmp	r3, #15
 8009b32:	d80a      	bhi.n	8009b4a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8009b34:	2200      	movs	r2, #0
 8009b36:	6879      	ldr	r1, [r7, #4]
 8009b38:	f04f 30ff 	mov.w	r0, #4294967295
 8009b3c:	f000 f953 	bl	8009de6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8009b40:	4a06      	ldr	r2, [pc, #24]	; (8009b5c <HAL_InitTick+0x5c>)
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8009b46:	2300      	movs	r3, #0
 8009b48:	e000      	b.n	8009b4c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8009b4a:	2301      	movs	r3, #1
}
 8009b4c:	4618      	mov	r0, r3
 8009b4e:	3708      	adds	r7, #8
 8009b50:	46bd      	mov	sp, r7
 8009b52:	bd80      	pop	{r7, pc}
 8009b54:	20000000 	.word	0x20000000
 8009b58:	2000002c 	.word	0x2000002c
 8009b5c:	20000028 	.word	0x20000028

08009b60 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8009b60:	b480      	push	{r7}
 8009b62:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8009b64:	4b06      	ldr	r3, [pc, #24]	; (8009b80 <HAL_IncTick+0x20>)
 8009b66:	781b      	ldrb	r3, [r3, #0]
 8009b68:	461a      	mov	r2, r3
 8009b6a:	4b06      	ldr	r3, [pc, #24]	; (8009b84 <HAL_IncTick+0x24>)
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	4413      	add	r3, r2
 8009b70:	4a04      	ldr	r2, [pc, #16]	; (8009b84 <HAL_IncTick+0x24>)
 8009b72:	6013      	str	r3, [r2, #0]
}
 8009b74:	bf00      	nop
 8009b76:	46bd      	mov	sp, r7
 8009b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b7c:	4770      	bx	lr
 8009b7e:	bf00      	nop
 8009b80:	2000002c 	.word	0x2000002c
 8009b84:	200004dc 	.word	0x200004dc

08009b88 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8009b88:	b480      	push	{r7}
 8009b8a:	af00      	add	r7, sp, #0
  return uwTick;
 8009b8c:	4b03      	ldr	r3, [pc, #12]	; (8009b9c <HAL_GetTick+0x14>)
 8009b8e:	681b      	ldr	r3, [r3, #0]
}
 8009b90:	4618      	mov	r0, r3
 8009b92:	46bd      	mov	sp, r7
 8009b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b98:	4770      	bx	lr
 8009b9a:	bf00      	nop
 8009b9c:	200004dc 	.word	0x200004dc

08009ba0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8009ba0:	b580      	push	{r7, lr}
 8009ba2:	b084      	sub	sp, #16
 8009ba4:	af00      	add	r7, sp, #0
 8009ba6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8009ba8:	f7ff ffee 	bl	8009b88 <HAL_GetTick>
 8009bac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8009bb2:	68fb      	ldr	r3, [r7, #12]
 8009bb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009bb8:	d005      	beq.n	8009bc6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8009bba:	4b0a      	ldr	r3, [pc, #40]	; (8009be4 <HAL_Delay+0x44>)
 8009bbc:	781b      	ldrb	r3, [r3, #0]
 8009bbe:	461a      	mov	r2, r3
 8009bc0:	68fb      	ldr	r3, [r7, #12]
 8009bc2:	4413      	add	r3, r2
 8009bc4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8009bc6:	bf00      	nop
 8009bc8:	f7ff ffde 	bl	8009b88 <HAL_GetTick>
 8009bcc:	4602      	mov	r2, r0
 8009bce:	68bb      	ldr	r3, [r7, #8]
 8009bd0:	1ad3      	subs	r3, r2, r3
 8009bd2:	68fa      	ldr	r2, [r7, #12]
 8009bd4:	429a      	cmp	r2, r3
 8009bd6:	d8f7      	bhi.n	8009bc8 <HAL_Delay+0x28>
  {
  }
}
 8009bd8:	bf00      	nop
 8009bda:	bf00      	nop
 8009bdc:	3710      	adds	r7, #16
 8009bde:	46bd      	mov	sp, r7
 8009be0:	bd80      	pop	{r7, pc}
 8009be2:	bf00      	nop
 8009be4:	2000002c 	.word	0x2000002c

08009be8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8009be8:	b480      	push	{r7}
 8009bea:	b085      	sub	sp, #20
 8009bec:	af00      	add	r7, sp, #0
 8009bee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	f003 0307 	and.w	r3, r3, #7
 8009bf6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8009bf8:	4b0c      	ldr	r3, [pc, #48]	; (8009c2c <__NVIC_SetPriorityGrouping+0x44>)
 8009bfa:	68db      	ldr	r3, [r3, #12]
 8009bfc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8009bfe:	68ba      	ldr	r2, [r7, #8]
 8009c00:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8009c04:	4013      	ands	r3, r2
 8009c06:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8009c08:	68fb      	ldr	r3, [r7, #12]
 8009c0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8009c0c:	68bb      	ldr	r3, [r7, #8]
 8009c0e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8009c10:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8009c14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009c18:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8009c1a:	4a04      	ldr	r2, [pc, #16]	; (8009c2c <__NVIC_SetPriorityGrouping+0x44>)
 8009c1c:	68bb      	ldr	r3, [r7, #8]
 8009c1e:	60d3      	str	r3, [r2, #12]
}
 8009c20:	bf00      	nop
 8009c22:	3714      	adds	r7, #20
 8009c24:	46bd      	mov	sp, r7
 8009c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c2a:	4770      	bx	lr
 8009c2c:	e000ed00 	.word	0xe000ed00

08009c30 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8009c30:	b480      	push	{r7}
 8009c32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8009c34:	4b04      	ldr	r3, [pc, #16]	; (8009c48 <__NVIC_GetPriorityGrouping+0x18>)
 8009c36:	68db      	ldr	r3, [r3, #12]
 8009c38:	0a1b      	lsrs	r3, r3, #8
 8009c3a:	f003 0307 	and.w	r3, r3, #7
}
 8009c3e:	4618      	mov	r0, r3
 8009c40:	46bd      	mov	sp, r7
 8009c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c46:	4770      	bx	lr
 8009c48:	e000ed00 	.word	0xe000ed00

08009c4c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009c4c:	b480      	push	{r7}
 8009c4e:	b083      	sub	sp, #12
 8009c50:	af00      	add	r7, sp, #0
 8009c52:	4603      	mov	r3, r0
 8009c54:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009c56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	db0b      	blt.n	8009c76 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8009c5e:	79fb      	ldrb	r3, [r7, #7]
 8009c60:	f003 021f 	and.w	r2, r3, #31
 8009c64:	4907      	ldr	r1, [pc, #28]	; (8009c84 <__NVIC_EnableIRQ+0x38>)
 8009c66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009c6a:	095b      	lsrs	r3, r3, #5
 8009c6c:	2001      	movs	r0, #1
 8009c6e:	fa00 f202 	lsl.w	r2, r0, r2
 8009c72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8009c76:	bf00      	nop
 8009c78:	370c      	adds	r7, #12
 8009c7a:	46bd      	mov	sp, r7
 8009c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c80:	4770      	bx	lr
 8009c82:	bf00      	nop
 8009c84:	e000e100 	.word	0xe000e100

08009c88 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8009c88:	b480      	push	{r7}
 8009c8a:	b083      	sub	sp, #12
 8009c8c:	af00      	add	r7, sp, #0
 8009c8e:	4603      	mov	r3, r0
 8009c90:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009c92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	db12      	blt.n	8009cc0 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8009c9a:	79fb      	ldrb	r3, [r7, #7]
 8009c9c:	f003 021f 	and.w	r2, r3, #31
 8009ca0:	490a      	ldr	r1, [pc, #40]	; (8009ccc <__NVIC_DisableIRQ+0x44>)
 8009ca2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009ca6:	095b      	lsrs	r3, r3, #5
 8009ca8:	2001      	movs	r0, #1
 8009caa:	fa00 f202 	lsl.w	r2, r0, r2
 8009cae:	3320      	adds	r3, #32
 8009cb0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8009cb4:	f3bf 8f4f 	dsb	sy
}
 8009cb8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8009cba:	f3bf 8f6f 	isb	sy
}
 8009cbe:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8009cc0:	bf00      	nop
 8009cc2:	370c      	adds	r7, #12
 8009cc4:	46bd      	mov	sp, r7
 8009cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cca:	4770      	bx	lr
 8009ccc:	e000e100 	.word	0xe000e100

08009cd0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8009cd0:	b480      	push	{r7}
 8009cd2:	b083      	sub	sp, #12
 8009cd4:	af00      	add	r7, sp, #0
 8009cd6:	4603      	mov	r3, r0
 8009cd8:	6039      	str	r1, [r7, #0]
 8009cda:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009cdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	db0a      	blt.n	8009cfa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009ce4:	683b      	ldr	r3, [r7, #0]
 8009ce6:	b2da      	uxtb	r2, r3
 8009ce8:	490c      	ldr	r1, [pc, #48]	; (8009d1c <__NVIC_SetPriority+0x4c>)
 8009cea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009cee:	0112      	lsls	r2, r2, #4
 8009cf0:	b2d2      	uxtb	r2, r2
 8009cf2:	440b      	add	r3, r1
 8009cf4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8009cf8:	e00a      	b.n	8009d10 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009cfa:	683b      	ldr	r3, [r7, #0]
 8009cfc:	b2da      	uxtb	r2, r3
 8009cfe:	4908      	ldr	r1, [pc, #32]	; (8009d20 <__NVIC_SetPriority+0x50>)
 8009d00:	79fb      	ldrb	r3, [r7, #7]
 8009d02:	f003 030f 	and.w	r3, r3, #15
 8009d06:	3b04      	subs	r3, #4
 8009d08:	0112      	lsls	r2, r2, #4
 8009d0a:	b2d2      	uxtb	r2, r2
 8009d0c:	440b      	add	r3, r1
 8009d0e:	761a      	strb	r2, [r3, #24]
}
 8009d10:	bf00      	nop
 8009d12:	370c      	adds	r7, #12
 8009d14:	46bd      	mov	sp, r7
 8009d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d1a:	4770      	bx	lr
 8009d1c:	e000e100 	.word	0xe000e100
 8009d20:	e000ed00 	.word	0xe000ed00

08009d24 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8009d24:	b480      	push	{r7}
 8009d26:	b089      	sub	sp, #36	; 0x24
 8009d28:	af00      	add	r7, sp, #0
 8009d2a:	60f8      	str	r0, [r7, #12]
 8009d2c:	60b9      	str	r1, [r7, #8]
 8009d2e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	f003 0307 	and.w	r3, r3, #7
 8009d36:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8009d38:	69fb      	ldr	r3, [r7, #28]
 8009d3a:	f1c3 0307 	rsb	r3, r3, #7
 8009d3e:	2b04      	cmp	r3, #4
 8009d40:	bf28      	it	cs
 8009d42:	2304      	movcs	r3, #4
 8009d44:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8009d46:	69fb      	ldr	r3, [r7, #28]
 8009d48:	3304      	adds	r3, #4
 8009d4a:	2b06      	cmp	r3, #6
 8009d4c:	d902      	bls.n	8009d54 <NVIC_EncodePriority+0x30>
 8009d4e:	69fb      	ldr	r3, [r7, #28]
 8009d50:	3b03      	subs	r3, #3
 8009d52:	e000      	b.n	8009d56 <NVIC_EncodePriority+0x32>
 8009d54:	2300      	movs	r3, #0
 8009d56:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009d58:	f04f 32ff 	mov.w	r2, #4294967295
 8009d5c:	69bb      	ldr	r3, [r7, #24]
 8009d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8009d62:	43da      	mvns	r2, r3
 8009d64:	68bb      	ldr	r3, [r7, #8]
 8009d66:	401a      	ands	r2, r3
 8009d68:	697b      	ldr	r3, [r7, #20]
 8009d6a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8009d6c:	f04f 31ff 	mov.w	r1, #4294967295
 8009d70:	697b      	ldr	r3, [r7, #20]
 8009d72:	fa01 f303 	lsl.w	r3, r1, r3
 8009d76:	43d9      	mvns	r1, r3
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009d7c:	4313      	orrs	r3, r2
         );
}
 8009d7e:	4618      	mov	r0, r3
 8009d80:	3724      	adds	r7, #36	; 0x24
 8009d82:	46bd      	mov	sp, r7
 8009d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d88:	4770      	bx	lr
	...

08009d8c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8009d8c:	b580      	push	{r7, lr}
 8009d8e:	b082      	sub	sp, #8
 8009d90:	af00      	add	r7, sp, #0
 8009d92:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	3b01      	subs	r3, #1
 8009d98:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009d9c:	d301      	bcc.n	8009da2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8009d9e:	2301      	movs	r3, #1
 8009da0:	e00f      	b.n	8009dc2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8009da2:	4a0a      	ldr	r2, [pc, #40]	; (8009dcc <SysTick_Config+0x40>)
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	3b01      	subs	r3, #1
 8009da8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8009daa:	210f      	movs	r1, #15
 8009dac:	f04f 30ff 	mov.w	r0, #4294967295
 8009db0:	f7ff ff8e 	bl	8009cd0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8009db4:	4b05      	ldr	r3, [pc, #20]	; (8009dcc <SysTick_Config+0x40>)
 8009db6:	2200      	movs	r2, #0
 8009db8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8009dba:	4b04      	ldr	r3, [pc, #16]	; (8009dcc <SysTick_Config+0x40>)
 8009dbc:	2207      	movs	r2, #7
 8009dbe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8009dc0:	2300      	movs	r3, #0
}
 8009dc2:	4618      	mov	r0, r3
 8009dc4:	3708      	adds	r7, #8
 8009dc6:	46bd      	mov	sp, r7
 8009dc8:	bd80      	pop	{r7, pc}
 8009dca:	bf00      	nop
 8009dcc:	e000e010 	.word	0xe000e010

08009dd0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8009dd0:	b580      	push	{r7, lr}
 8009dd2:	b082      	sub	sp, #8
 8009dd4:	af00      	add	r7, sp, #0
 8009dd6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8009dd8:	6878      	ldr	r0, [r7, #4]
 8009dda:	f7ff ff05 	bl	8009be8 <__NVIC_SetPriorityGrouping>
}
 8009dde:	bf00      	nop
 8009de0:	3708      	adds	r7, #8
 8009de2:	46bd      	mov	sp, r7
 8009de4:	bd80      	pop	{r7, pc}

08009de6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8009de6:	b580      	push	{r7, lr}
 8009de8:	b086      	sub	sp, #24
 8009dea:	af00      	add	r7, sp, #0
 8009dec:	4603      	mov	r3, r0
 8009dee:	60b9      	str	r1, [r7, #8]
 8009df0:	607a      	str	r2, [r7, #4]
 8009df2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8009df4:	2300      	movs	r3, #0
 8009df6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8009df8:	f7ff ff1a 	bl	8009c30 <__NVIC_GetPriorityGrouping>
 8009dfc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8009dfe:	687a      	ldr	r2, [r7, #4]
 8009e00:	68b9      	ldr	r1, [r7, #8]
 8009e02:	6978      	ldr	r0, [r7, #20]
 8009e04:	f7ff ff8e 	bl	8009d24 <NVIC_EncodePriority>
 8009e08:	4602      	mov	r2, r0
 8009e0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009e0e:	4611      	mov	r1, r2
 8009e10:	4618      	mov	r0, r3
 8009e12:	f7ff ff5d 	bl	8009cd0 <__NVIC_SetPriority>
}
 8009e16:	bf00      	nop
 8009e18:	3718      	adds	r7, #24
 8009e1a:	46bd      	mov	sp, r7
 8009e1c:	bd80      	pop	{r7, pc}

08009e1e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009e1e:	b580      	push	{r7, lr}
 8009e20:	b082      	sub	sp, #8
 8009e22:	af00      	add	r7, sp, #0
 8009e24:	4603      	mov	r3, r0
 8009e26:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8009e28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009e2c:	4618      	mov	r0, r3
 8009e2e:	f7ff ff0d 	bl	8009c4c <__NVIC_EnableIRQ>
}
 8009e32:	bf00      	nop
 8009e34:	3708      	adds	r7, #8
 8009e36:	46bd      	mov	sp, r7
 8009e38:	bd80      	pop	{r7, pc}

08009e3a <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8009e3a:	b580      	push	{r7, lr}
 8009e3c:	b082      	sub	sp, #8
 8009e3e:	af00      	add	r7, sp, #0
 8009e40:	4603      	mov	r3, r0
 8009e42:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8009e44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009e48:	4618      	mov	r0, r3
 8009e4a:	f7ff ff1d 	bl	8009c88 <__NVIC_DisableIRQ>
}
 8009e4e:	bf00      	nop
 8009e50:	3708      	adds	r7, #8
 8009e52:	46bd      	mov	sp, r7
 8009e54:	bd80      	pop	{r7, pc}

08009e56 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8009e56:	b580      	push	{r7, lr}
 8009e58:	b082      	sub	sp, #8
 8009e5a:	af00      	add	r7, sp, #0
 8009e5c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8009e5e:	6878      	ldr	r0, [r7, #4]
 8009e60:	f7ff ff94 	bl	8009d8c <SysTick_Config>
 8009e64:	4603      	mov	r3, r0
}
 8009e66:	4618      	mov	r0, r3
 8009e68:	3708      	adds	r7, #8
 8009e6a:	46bd      	mov	sp, r7
 8009e6c:	bd80      	pop	{r7, pc}
	...

08009e70 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8009e70:	b580      	push	{r7, lr}
 8009e72:	b086      	sub	sp, #24
 8009e74:	af00      	add	r7, sp, #0
 8009e76:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8009e78:	2300      	movs	r3, #0
 8009e7a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8009e7c:	f7ff fe84 	bl	8009b88 <HAL_GetTick>
 8009e80:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	d101      	bne.n	8009e8c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8009e88:	2301      	movs	r3, #1
 8009e8a:	e099      	b.n	8009fc0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	2202      	movs	r2, #2
 8009e90:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	2200      	movs	r2, #0
 8009e98:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	681a      	ldr	r2, [r3, #0]
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	f022 0201 	bic.w	r2, r2, #1
 8009eaa:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8009eac:	e00f      	b.n	8009ece <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8009eae:	f7ff fe6b 	bl	8009b88 <HAL_GetTick>
 8009eb2:	4602      	mov	r2, r0
 8009eb4:	693b      	ldr	r3, [r7, #16]
 8009eb6:	1ad3      	subs	r3, r2, r3
 8009eb8:	2b05      	cmp	r3, #5
 8009eba:	d908      	bls.n	8009ece <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	2220      	movs	r2, #32
 8009ec0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	2203      	movs	r2, #3
 8009ec6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8009eca:	2303      	movs	r3, #3
 8009ecc:	e078      	b.n	8009fc0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	f003 0301 	and.w	r3, r3, #1
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	d1e8      	bne.n	8009eae <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8009ee4:	697a      	ldr	r2, [r7, #20]
 8009ee6:	4b38      	ldr	r3, [pc, #224]	; (8009fc8 <HAL_DMA_Init+0x158>)
 8009ee8:	4013      	ands	r3, r2
 8009eea:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	685a      	ldr	r2, [r3, #4]
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	689b      	ldr	r3, [r3, #8]
 8009ef4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8009efa:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	691b      	ldr	r3, [r3, #16]
 8009f00:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009f06:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	699b      	ldr	r3, [r3, #24]
 8009f0c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009f12:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	6a1b      	ldr	r3, [r3, #32]
 8009f18:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8009f1a:	697a      	ldr	r2, [r7, #20]
 8009f1c:	4313      	orrs	r3, r2
 8009f1e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f24:	2b04      	cmp	r3, #4
 8009f26:	d107      	bne.n	8009f38 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f30:	4313      	orrs	r3, r2
 8009f32:	697a      	ldr	r2, [r7, #20]
 8009f34:	4313      	orrs	r3, r2
 8009f36:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	697a      	ldr	r2, [r7, #20]
 8009f3e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	695b      	ldr	r3, [r3, #20]
 8009f46:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8009f48:	697b      	ldr	r3, [r7, #20]
 8009f4a:	f023 0307 	bic.w	r3, r3, #7
 8009f4e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f54:	697a      	ldr	r2, [r7, #20]
 8009f56:	4313      	orrs	r3, r2
 8009f58:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f5e:	2b04      	cmp	r3, #4
 8009f60:	d117      	bne.n	8009f92 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f66:	697a      	ldr	r2, [r7, #20]
 8009f68:	4313      	orrs	r3, r2
 8009f6a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	d00e      	beq.n	8009f92 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8009f74:	6878      	ldr	r0, [r7, #4]
 8009f76:	f000 fb5f 	bl	800a638 <DMA_CheckFifoParam>
 8009f7a:	4603      	mov	r3, r0
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	d008      	beq.n	8009f92 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	2240      	movs	r2, #64	; 0x40
 8009f84:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	2201      	movs	r2, #1
 8009f8a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8009f8e:	2301      	movs	r3, #1
 8009f90:	e016      	b.n	8009fc0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	697a      	ldr	r2, [r7, #20]
 8009f98:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8009f9a:	6878      	ldr	r0, [r7, #4]
 8009f9c:	f000 fb16 	bl	800a5cc <DMA_CalcBaseAndBitshift>
 8009fa0:	4603      	mov	r3, r0
 8009fa2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009fa8:	223f      	movs	r2, #63	; 0x3f
 8009faa:	409a      	lsls	r2, r3
 8009fac:	68fb      	ldr	r3, [r7, #12]
 8009fae:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	2200      	movs	r2, #0
 8009fb4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	2201      	movs	r2, #1
 8009fba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8009fbe:	2300      	movs	r3, #0
}
 8009fc0:	4618      	mov	r0, r3
 8009fc2:	3718      	adds	r7, #24
 8009fc4:	46bd      	mov	sp, r7
 8009fc6:	bd80      	pop	{r7, pc}
 8009fc8:	f010803f 	.word	0xf010803f

08009fcc <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8009fcc:	b580      	push	{r7, lr}
 8009fce:	b084      	sub	sp, #16
 8009fd0:	af00      	add	r7, sp, #0
 8009fd2:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	d101      	bne.n	8009fde <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8009fda:	2301      	movs	r3, #1
 8009fdc:	e050      	b.n	800a080 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8009fe4:	b2db      	uxtb	r3, r3
 8009fe6:	2b02      	cmp	r3, #2
 8009fe8:	d101      	bne.n	8009fee <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8009fea:	2302      	movs	r3, #2
 8009fec:	e048      	b.n	800a080 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	681a      	ldr	r2, [r3, #0]
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	f022 0201 	bic.w	r2, r2, #1
 8009ffc:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	2200      	movs	r2, #0
 800a004:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	2200      	movs	r2, #0
 800a00c:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	2200      	movs	r2, #0
 800a014:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	2200      	movs	r2, #0
 800a01c:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	681b      	ldr	r3, [r3, #0]
 800a022:	2200      	movs	r2, #0
 800a024:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	2221      	movs	r2, #33	; 0x21
 800a02c:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800a02e:	6878      	ldr	r0, [r7, #4]
 800a030:	f000 facc 	bl	800a5cc <DMA_CalcBaseAndBitshift>
 800a034:	4603      	mov	r3, r0
 800a036:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	2200      	movs	r2, #0
 800a03c:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	2200      	movs	r2, #0
 800a042:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	2200      	movs	r2, #0
 800a048:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	2200      	movs	r2, #0
 800a04e:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	2200      	movs	r2, #0
 800a054:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	2200      	movs	r2, #0
 800a05a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a060:	223f      	movs	r2, #63	; 0x3f
 800a062:	409a      	lsls	r2, r3
 800a064:	68fb      	ldr	r3, [r7, #12]
 800a066:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	2200      	movs	r2, #0
 800a06c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	2200      	movs	r2, #0
 800a072:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	2200      	movs	r2, #0
 800a07a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800a07e:	2300      	movs	r3, #0
}
 800a080:	4618      	mov	r0, r3
 800a082:	3710      	adds	r7, #16
 800a084:	46bd      	mov	sp, r7
 800a086:	bd80      	pop	{r7, pc}

0800a088 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800a088:	b580      	push	{r7, lr}
 800a08a:	b086      	sub	sp, #24
 800a08c:	af00      	add	r7, sp, #0
 800a08e:	60f8      	str	r0, [r7, #12]
 800a090:	60b9      	str	r1, [r7, #8]
 800a092:	607a      	str	r2, [r7, #4]
 800a094:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a096:	2300      	movs	r3, #0
 800a098:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800a09a:	68fb      	ldr	r3, [r7, #12]
 800a09c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a09e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800a0a0:	68fb      	ldr	r3, [r7, #12]
 800a0a2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a0a6:	2b01      	cmp	r3, #1
 800a0a8:	d101      	bne.n	800a0ae <HAL_DMA_Start_IT+0x26>
 800a0aa:	2302      	movs	r3, #2
 800a0ac:	e040      	b.n	800a130 <HAL_DMA_Start_IT+0xa8>
 800a0ae:	68fb      	ldr	r3, [r7, #12]
 800a0b0:	2201      	movs	r2, #1
 800a0b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800a0b6:	68fb      	ldr	r3, [r7, #12]
 800a0b8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a0bc:	b2db      	uxtb	r3, r3
 800a0be:	2b01      	cmp	r3, #1
 800a0c0:	d12f      	bne.n	800a122 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800a0c2:	68fb      	ldr	r3, [r7, #12]
 800a0c4:	2202      	movs	r2, #2
 800a0c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800a0ca:	68fb      	ldr	r3, [r7, #12]
 800a0cc:	2200      	movs	r2, #0
 800a0ce:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800a0d0:	683b      	ldr	r3, [r7, #0]
 800a0d2:	687a      	ldr	r2, [r7, #4]
 800a0d4:	68b9      	ldr	r1, [r7, #8]
 800a0d6:	68f8      	ldr	r0, [r7, #12]
 800a0d8:	f000 fa4a 	bl	800a570 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a0dc:	68fb      	ldr	r3, [r7, #12]
 800a0de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a0e0:	223f      	movs	r2, #63	; 0x3f
 800a0e2:	409a      	lsls	r2, r3
 800a0e4:	693b      	ldr	r3, [r7, #16]
 800a0e6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800a0e8:	68fb      	ldr	r3, [r7, #12]
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	681a      	ldr	r2, [r3, #0]
 800a0ee:	68fb      	ldr	r3, [r7, #12]
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	f042 0216 	orr.w	r2, r2, #22
 800a0f6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800a0f8:	68fb      	ldr	r3, [r7, #12]
 800a0fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	d007      	beq.n	800a110 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	681a      	ldr	r2, [r3, #0]
 800a106:	68fb      	ldr	r3, [r7, #12]
 800a108:	681b      	ldr	r3, [r3, #0]
 800a10a:	f042 0208 	orr.w	r2, r2, #8
 800a10e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800a110:	68fb      	ldr	r3, [r7, #12]
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	681a      	ldr	r2, [r3, #0]
 800a116:	68fb      	ldr	r3, [r7, #12]
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	f042 0201 	orr.w	r2, r2, #1
 800a11e:	601a      	str	r2, [r3, #0]
 800a120:	e005      	b.n	800a12e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800a122:	68fb      	ldr	r3, [r7, #12]
 800a124:	2200      	movs	r2, #0
 800a126:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800a12a:	2302      	movs	r3, #2
 800a12c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800a12e:	7dfb      	ldrb	r3, [r7, #23]
}
 800a130:	4618      	mov	r0, r3
 800a132:	3718      	adds	r7, #24
 800a134:	46bd      	mov	sp, r7
 800a136:	bd80      	pop	{r7, pc}

0800a138 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800a138:	b580      	push	{r7, lr}
 800a13a:	b084      	sub	sp, #16
 800a13c:	af00      	add	r7, sp, #0
 800a13e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a144:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800a146:	f7ff fd1f 	bl	8009b88 <HAL_GetTick>
 800a14a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a152:	b2db      	uxtb	r3, r3
 800a154:	2b02      	cmp	r3, #2
 800a156:	d008      	beq.n	800a16a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	2280      	movs	r2, #128	; 0x80
 800a15c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	2200      	movs	r2, #0
 800a162:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800a166:	2301      	movs	r3, #1
 800a168:	e052      	b.n	800a210 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	681a      	ldr	r2, [r3, #0]
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	681b      	ldr	r3, [r3, #0]
 800a174:	f022 0216 	bic.w	r2, r2, #22
 800a178:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	681b      	ldr	r3, [r3, #0]
 800a17e:	695a      	ldr	r2, [r3, #20]
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a188:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a18e:	2b00      	cmp	r3, #0
 800a190:	d103      	bne.n	800a19a <HAL_DMA_Abort+0x62>
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a196:	2b00      	cmp	r3, #0
 800a198:	d007      	beq.n	800a1aa <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	681b      	ldr	r3, [r3, #0]
 800a19e:	681a      	ldr	r2, [r3, #0]
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	f022 0208 	bic.w	r2, r2, #8
 800a1a8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	681b      	ldr	r3, [r3, #0]
 800a1ae:	681a      	ldr	r2, [r3, #0]
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	681b      	ldr	r3, [r3, #0]
 800a1b4:	f022 0201 	bic.w	r2, r2, #1
 800a1b8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800a1ba:	e013      	b.n	800a1e4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800a1bc:	f7ff fce4 	bl	8009b88 <HAL_GetTick>
 800a1c0:	4602      	mov	r2, r0
 800a1c2:	68bb      	ldr	r3, [r7, #8]
 800a1c4:	1ad3      	subs	r3, r2, r3
 800a1c6:	2b05      	cmp	r3, #5
 800a1c8:	d90c      	bls.n	800a1e4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	2220      	movs	r2, #32
 800a1ce:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	2203      	movs	r2, #3
 800a1d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	2200      	movs	r2, #0
 800a1dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800a1e0:	2303      	movs	r3, #3
 800a1e2:	e015      	b.n	800a210 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	681b      	ldr	r3, [r3, #0]
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	f003 0301 	and.w	r3, r3, #1
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	d1e4      	bne.n	800a1bc <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a1f6:	223f      	movs	r2, #63	; 0x3f
 800a1f8:	409a      	lsls	r2, r3
 800a1fa:	68fb      	ldr	r3, [r7, #12]
 800a1fc:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	2201      	movs	r2, #1
 800a202:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	2200      	movs	r2, #0
 800a20a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800a20e:	2300      	movs	r3, #0
}
 800a210:	4618      	mov	r0, r3
 800a212:	3710      	adds	r7, #16
 800a214:	46bd      	mov	sp, r7
 800a216:	bd80      	pop	{r7, pc}

0800a218 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800a218:	b480      	push	{r7}
 800a21a:	b083      	sub	sp, #12
 800a21c:	af00      	add	r7, sp, #0
 800a21e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a226:	b2db      	uxtb	r3, r3
 800a228:	2b02      	cmp	r3, #2
 800a22a:	d004      	beq.n	800a236 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	2280      	movs	r2, #128	; 0x80
 800a230:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800a232:	2301      	movs	r3, #1
 800a234:	e00c      	b.n	800a250 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	2205      	movs	r2, #5
 800a23a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	681a      	ldr	r2, [r3, #0]
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	f022 0201 	bic.w	r2, r2, #1
 800a24c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800a24e:	2300      	movs	r3, #0
}
 800a250:	4618      	mov	r0, r3
 800a252:	370c      	adds	r7, #12
 800a254:	46bd      	mov	sp, r7
 800a256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a25a:	4770      	bx	lr

0800a25c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800a25c:	b580      	push	{r7, lr}
 800a25e:	b086      	sub	sp, #24
 800a260:	af00      	add	r7, sp, #0
 800a262:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800a264:	2300      	movs	r3, #0
 800a266:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800a268:	4b8e      	ldr	r3, [pc, #568]	; (800a4a4 <HAL_DMA_IRQHandler+0x248>)
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	4a8e      	ldr	r2, [pc, #568]	; (800a4a8 <HAL_DMA_IRQHandler+0x24c>)
 800a26e:	fba2 2303 	umull	r2, r3, r2, r3
 800a272:	0a9b      	lsrs	r3, r3, #10
 800a274:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a27a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800a27c:	693b      	ldr	r3, [r7, #16]
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a286:	2208      	movs	r2, #8
 800a288:	409a      	lsls	r2, r3
 800a28a:	68fb      	ldr	r3, [r7, #12]
 800a28c:	4013      	ands	r3, r2
 800a28e:	2b00      	cmp	r3, #0
 800a290:	d01a      	beq.n	800a2c8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	681b      	ldr	r3, [r3, #0]
 800a298:	f003 0304 	and.w	r3, r3, #4
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	d013      	beq.n	800a2c8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	681a      	ldr	r2, [r3, #0]
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	f022 0204 	bic.w	r2, r2, #4
 800a2ae:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a2b4:	2208      	movs	r2, #8
 800a2b6:	409a      	lsls	r2, r3
 800a2b8:	693b      	ldr	r3, [r7, #16]
 800a2ba:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a2c0:	f043 0201 	orr.w	r2, r3, #1
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a2cc:	2201      	movs	r2, #1
 800a2ce:	409a      	lsls	r2, r3
 800a2d0:	68fb      	ldr	r3, [r7, #12]
 800a2d2:	4013      	ands	r3, r2
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	d012      	beq.n	800a2fe <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	695b      	ldr	r3, [r3, #20]
 800a2de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a2e2:	2b00      	cmp	r3, #0
 800a2e4:	d00b      	beq.n	800a2fe <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a2ea:	2201      	movs	r2, #1
 800a2ec:	409a      	lsls	r2, r3
 800a2ee:	693b      	ldr	r3, [r7, #16]
 800a2f0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a2f6:	f043 0202 	orr.w	r2, r3, #2
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a302:	2204      	movs	r2, #4
 800a304:	409a      	lsls	r2, r3
 800a306:	68fb      	ldr	r3, [r7, #12]
 800a308:	4013      	ands	r3, r2
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	d012      	beq.n	800a334 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	681b      	ldr	r3, [r3, #0]
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	f003 0302 	and.w	r3, r3, #2
 800a318:	2b00      	cmp	r3, #0
 800a31a:	d00b      	beq.n	800a334 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a320:	2204      	movs	r2, #4
 800a322:	409a      	lsls	r2, r3
 800a324:	693b      	ldr	r3, [r7, #16]
 800a326:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a32c:	f043 0204 	orr.w	r2, r3, #4
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a338:	2210      	movs	r2, #16
 800a33a:	409a      	lsls	r2, r3
 800a33c:	68fb      	ldr	r3, [r7, #12]
 800a33e:	4013      	ands	r3, r2
 800a340:	2b00      	cmp	r3, #0
 800a342:	d043      	beq.n	800a3cc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	f003 0308 	and.w	r3, r3, #8
 800a34e:	2b00      	cmp	r3, #0
 800a350:	d03c      	beq.n	800a3cc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a356:	2210      	movs	r2, #16
 800a358:	409a      	lsls	r2, r3
 800a35a:	693b      	ldr	r3, [r7, #16]
 800a35c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a368:	2b00      	cmp	r3, #0
 800a36a:	d018      	beq.n	800a39e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	681b      	ldr	r3, [r3, #0]
 800a372:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a376:	2b00      	cmp	r3, #0
 800a378:	d108      	bne.n	800a38c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a37e:	2b00      	cmp	r3, #0
 800a380:	d024      	beq.n	800a3cc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a386:	6878      	ldr	r0, [r7, #4]
 800a388:	4798      	blx	r3
 800a38a:	e01f      	b.n	800a3cc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a390:	2b00      	cmp	r3, #0
 800a392:	d01b      	beq.n	800a3cc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a398:	6878      	ldr	r0, [r7, #4]
 800a39a:	4798      	blx	r3
 800a39c:	e016      	b.n	800a3cc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	681b      	ldr	r3, [r3, #0]
 800a3a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	d107      	bne.n	800a3bc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	681a      	ldr	r2, [r3, #0]
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	f022 0208 	bic.w	r2, r2, #8
 800a3ba:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3c0:	2b00      	cmp	r3, #0
 800a3c2:	d003      	beq.n	800a3cc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3c8:	6878      	ldr	r0, [r7, #4]
 800a3ca:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a3d0:	2220      	movs	r2, #32
 800a3d2:	409a      	lsls	r2, r3
 800a3d4:	68fb      	ldr	r3, [r7, #12]
 800a3d6:	4013      	ands	r3, r2
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	f000 808f 	beq.w	800a4fc <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	681b      	ldr	r3, [r3, #0]
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	f003 0310 	and.w	r3, r3, #16
 800a3e8:	2b00      	cmp	r3, #0
 800a3ea:	f000 8087 	beq.w	800a4fc <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a3f2:	2220      	movs	r2, #32
 800a3f4:	409a      	lsls	r2, r3
 800a3f6:	693b      	ldr	r3, [r7, #16]
 800a3f8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a400:	b2db      	uxtb	r3, r3
 800a402:	2b05      	cmp	r3, #5
 800a404:	d136      	bne.n	800a474 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	681b      	ldr	r3, [r3, #0]
 800a40a:	681a      	ldr	r2, [r3, #0]
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	f022 0216 	bic.w	r2, r2, #22
 800a414:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	681b      	ldr	r3, [r3, #0]
 800a41a:	695a      	ldr	r2, [r3, #20]
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a424:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	d103      	bne.n	800a436 <HAL_DMA_IRQHandler+0x1da>
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a432:	2b00      	cmp	r3, #0
 800a434:	d007      	beq.n	800a446 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	681a      	ldr	r2, [r3, #0]
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	f022 0208 	bic.w	r2, r2, #8
 800a444:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a44a:	223f      	movs	r2, #63	; 0x3f
 800a44c:	409a      	lsls	r2, r3
 800a44e:	693b      	ldr	r3, [r7, #16]
 800a450:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	2201      	movs	r2, #1
 800a456:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	2200      	movs	r2, #0
 800a45e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a466:	2b00      	cmp	r3, #0
 800a468:	d07e      	beq.n	800a568 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a46e:	6878      	ldr	r0, [r7, #4]
 800a470:	4798      	blx	r3
        }
        return;
 800a472:	e079      	b.n	800a568 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	681b      	ldr	r3, [r3, #0]
 800a47a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a47e:	2b00      	cmp	r3, #0
 800a480:	d01d      	beq.n	800a4be <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	681b      	ldr	r3, [r3, #0]
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	d10d      	bne.n	800a4ac <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a494:	2b00      	cmp	r3, #0
 800a496:	d031      	beq.n	800a4fc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a49c:	6878      	ldr	r0, [r7, #4]
 800a49e:	4798      	blx	r3
 800a4a0:	e02c      	b.n	800a4fc <HAL_DMA_IRQHandler+0x2a0>
 800a4a2:	bf00      	nop
 800a4a4:	20000000 	.word	0x20000000
 800a4a8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	d023      	beq.n	800a4fc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a4b8:	6878      	ldr	r0, [r7, #4]
 800a4ba:	4798      	blx	r3
 800a4bc:	e01e      	b.n	800a4fc <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a4c8:	2b00      	cmp	r3, #0
 800a4ca:	d10f      	bne.n	800a4ec <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	681a      	ldr	r2, [r3, #0]
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	681b      	ldr	r3, [r3, #0]
 800a4d6:	f022 0210 	bic.w	r2, r2, #16
 800a4da:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	2201      	movs	r2, #1
 800a4e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	2200      	movs	r2, #0
 800a4e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	d003      	beq.n	800a4fc <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a4f8:	6878      	ldr	r0, [r7, #4]
 800a4fa:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a500:	2b00      	cmp	r3, #0
 800a502:	d032      	beq.n	800a56a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a508:	f003 0301 	and.w	r3, r3, #1
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	d022      	beq.n	800a556 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	2205      	movs	r2, #5
 800a514:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	681a      	ldr	r2, [r3, #0]
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	f022 0201 	bic.w	r2, r2, #1
 800a526:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800a528:	68bb      	ldr	r3, [r7, #8]
 800a52a:	3301      	adds	r3, #1
 800a52c:	60bb      	str	r3, [r7, #8]
 800a52e:	697a      	ldr	r2, [r7, #20]
 800a530:	429a      	cmp	r2, r3
 800a532:	d307      	bcc.n	800a544 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	681b      	ldr	r3, [r3, #0]
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	f003 0301 	and.w	r3, r3, #1
 800a53e:	2b00      	cmp	r3, #0
 800a540:	d1f2      	bne.n	800a528 <HAL_DMA_IRQHandler+0x2cc>
 800a542:	e000      	b.n	800a546 <HAL_DMA_IRQHandler+0x2ea>
          break;
 800a544:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	2201      	movs	r2, #1
 800a54a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	2200      	movs	r2, #0
 800a552:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a55a:	2b00      	cmp	r3, #0
 800a55c:	d005      	beq.n	800a56a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a562:	6878      	ldr	r0, [r7, #4]
 800a564:	4798      	blx	r3
 800a566:	e000      	b.n	800a56a <HAL_DMA_IRQHandler+0x30e>
        return;
 800a568:	bf00      	nop
    }
  }
}
 800a56a:	3718      	adds	r7, #24
 800a56c:	46bd      	mov	sp, r7
 800a56e:	bd80      	pop	{r7, pc}

0800a570 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800a570:	b480      	push	{r7}
 800a572:	b085      	sub	sp, #20
 800a574:	af00      	add	r7, sp, #0
 800a576:	60f8      	str	r0, [r7, #12]
 800a578:	60b9      	str	r1, [r7, #8]
 800a57a:	607a      	str	r2, [r7, #4]
 800a57c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800a57e:	68fb      	ldr	r3, [r7, #12]
 800a580:	681b      	ldr	r3, [r3, #0]
 800a582:	681a      	ldr	r2, [r3, #0]
 800a584:	68fb      	ldr	r3, [r7, #12]
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800a58c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800a58e:	68fb      	ldr	r3, [r7, #12]
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	683a      	ldr	r2, [r7, #0]
 800a594:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800a596:	68fb      	ldr	r3, [r7, #12]
 800a598:	689b      	ldr	r3, [r3, #8]
 800a59a:	2b40      	cmp	r3, #64	; 0x40
 800a59c:	d108      	bne.n	800a5b0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800a59e:	68fb      	ldr	r3, [r7, #12]
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	687a      	ldr	r2, [r7, #4]
 800a5a4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800a5a6:	68fb      	ldr	r3, [r7, #12]
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	68ba      	ldr	r2, [r7, #8]
 800a5ac:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800a5ae:	e007      	b.n	800a5c0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800a5b0:	68fb      	ldr	r3, [r7, #12]
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	68ba      	ldr	r2, [r7, #8]
 800a5b6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800a5b8:	68fb      	ldr	r3, [r7, #12]
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	687a      	ldr	r2, [r7, #4]
 800a5be:	60da      	str	r2, [r3, #12]
}
 800a5c0:	bf00      	nop
 800a5c2:	3714      	adds	r7, #20
 800a5c4:	46bd      	mov	sp, r7
 800a5c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ca:	4770      	bx	lr

0800a5cc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800a5cc:	b480      	push	{r7}
 800a5ce:	b085      	sub	sp, #20
 800a5d0:	af00      	add	r7, sp, #0
 800a5d2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	b2db      	uxtb	r3, r3
 800a5da:	3b10      	subs	r3, #16
 800a5dc:	4a14      	ldr	r2, [pc, #80]	; (800a630 <DMA_CalcBaseAndBitshift+0x64>)
 800a5de:	fba2 2303 	umull	r2, r3, r2, r3
 800a5e2:	091b      	lsrs	r3, r3, #4
 800a5e4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800a5e6:	4a13      	ldr	r2, [pc, #76]	; (800a634 <DMA_CalcBaseAndBitshift+0x68>)
 800a5e8:	68fb      	ldr	r3, [r7, #12]
 800a5ea:	4413      	add	r3, r2
 800a5ec:	781b      	ldrb	r3, [r3, #0]
 800a5ee:	461a      	mov	r2, r3
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800a5f4:	68fb      	ldr	r3, [r7, #12]
 800a5f6:	2b03      	cmp	r3, #3
 800a5f8:	d909      	bls.n	800a60e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800a602:	f023 0303 	bic.w	r3, r3, #3
 800a606:	1d1a      	adds	r2, r3, #4
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	659a      	str	r2, [r3, #88]	; 0x58
 800a60c:	e007      	b.n	800a61e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	681b      	ldr	r3, [r3, #0]
 800a612:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800a616:	f023 0303 	bic.w	r3, r3, #3
 800a61a:	687a      	ldr	r2, [r7, #4]
 800a61c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800a622:	4618      	mov	r0, r3
 800a624:	3714      	adds	r7, #20
 800a626:	46bd      	mov	sp, r7
 800a628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a62c:	4770      	bx	lr
 800a62e:	bf00      	nop
 800a630:	aaaaaaab 	.word	0xaaaaaaab
 800a634:	080127f8 	.word	0x080127f8

0800a638 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800a638:	b480      	push	{r7}
 800a63a:	b085      	sub	sp, #20
 800a63c:	af00      	add	r7, sp, #0
 800a63e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a640:	2300      	movs	r3, #0
 800a642:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a648:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	699b      	ldr	r3, [r3, #24]
 800a64e:	2b00      	cmp	r3, #0
 800a650:	d11f      	bne.n	800a692 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800a652:	68bb      	ldr	r3, [r7, #8]
 800a654:	2b03      	cmp	r3, #3
 800a656:	d856      	bhi.n	800a706 <DMA_CheckFifoParam+0xce>
 800a658:	a201      	add	r2, pc, #4	; (adr r2, 800a660 <DMA_CheckFifoParam+0x28>)
 800a65a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a65e:	bf00      	nop
 800a660:	0800a671 	.word	0x0800a671
 800a664:	0800a683 	.word	0x0800a683
 800a668:	0800a671 	.word	0x0800a671
 800a66c:	0800a707 	.word	0x0800a707
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a674:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a678:	2b00      	cmp	r3, #0
 800a67a:	d046      	beq.n	800a70a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800a67c:	2301      	movs	r3, #1
 800a67e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800a680:	e043      	b.n	800a70a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a686:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800a68a:	d140      	bne.n	800a70e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800a68c:	2301      	movs	r3, #1
 800a68e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800a690:	e03d      	b.n	800a70e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	699b      	ldr	r3, [r3, #24]
 800a696:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a69a:	d121      	bne.n	800a6e0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800a69c:	68bb      	ldr	r3, [r7, #8]
 800a69e:	2b03      	cmp	r3, #3
 800a6a0:	d837      	bhi.n	800a712 <DMA_CheckFifoParam+0xda>
 800a6a2:	a201      	add	r2, pc, #4	; (adr r2, 800a6a8 <DMA_CheckFifoParam+0x70>)
 800a6a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a6a8:	0800a6b9 	.word	0x0800a6b9
 800a6ac:	0800a6bf 	.word	0x0800a6bf
 800a6b0:	0800a6b9 	.word	0x0800a6b9
 800a6b4:	0800a6d1 	.word	0x0800a6d1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800a6b8:	2301      	movs	r3, #1
 800a6ba:	73fb      	strb	r3, [r7, #15]
      break;
 800a6bc:	e030      	b.n	800a720 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6c2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	d025      	beq.n	800a716 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800a6ca:	2301      	movs	r3, #1
 800a6cc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800a6ce:	e022      	b.n	800a716 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6d4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800a6d8:	d11f      	bne.n	800a71a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800a6da:	2301      	movs	r3, #1
 800a6dc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800a6de:	e01c      	b.n	800a71a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800a6e0:	68bb      	ldr	r3, [r7, #8]
 800a6e2:	2b02      	cmp	r3, #2
 800a6e4:	d903      	bls.n	800a6ee <DMA_CheckFifoParam+0xb6>
 800a6e6:	68bb      	ldr	r3, [r7, #8]
 800a6e8:	2b03      	cmp	r3, #3
 800a6ea:	d003      	beq.n	800a6f4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800a6ec:	e018      	b.n	800a720 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800a6ee:	2301      	movs	r3, #1
 800a6f0:	73fb      	strb	r3, [r7, #15]
      break;
 800a6f2:	e015      	b.n	800a720 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6f8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a6fc:	2b00      	cmp	r3, #0
 800a6fe:	d00e      	beq.n	800a71e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800a700:	2301      	movs	r3, #1
 800a702:	73fb      	strb	r3, [r7, #15]
      break;
 800a704:	e00b      	b.n	800a71e <DMA_CheckFifoParam+0xe6>
      break;
 800a706:	bf00      	nop
 800a708:	e00a      	b.n	800a720 <DMA_CheckFifoParam+0xe8>
      break;
 800a70a:	bf00      	nop
 800a70c:	e008      	b.n	800a720 <DMA_CheckFifoParam+0xe8>
      break;
 800a70e:	bf00      	nop
 800a710:	e006      	b.n	800a720 <DMA_CheckFifoParam+0xe8>
      break;
 800a712:	bf00      	nop
 800a714:	e004      	b.n	800a720 <DMA_CheckFifoParam+0xe8>
      break;
 800a716:	bf00      	nop
 800a718:	e002      	b.n	800a720 <DMA_CheckFifoParam+0xe8>
      break;   
 800a71a:	bf00      	nop
 800a71c:	e000      	b.n	800a720 <DMA_CheckFifoParam+0xe8>
      break;
 800a71e:	bf00      	nop
    }
  } 
  
  return status; 
 800a720:	7bfb      	ldrb	r3, [r7, #15]
}
 800a722:	4618      	mov	r0, r3
 800a724:	3714      	adds	r7, #20
 800a726:	46bd      	mov	sp, r7
 800a728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a72c:	4770      	bx	lr
 800a72e:	bf00      	nop

0800a730 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800a730:	b480      	push	{r7}
 800a732:	b089      	sub	sp, #36	; 0x24
 800a734:	af00      	add	r7, sp, #0
 800a736:	6078      	str	r0, [r7, #4]
 800a738:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800a73a:	2300      	movs	r3, #0
 800a73c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800a73e:	2300      	movs	r3, #0
 800a740:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800a742:	2300      	movs	r3, #0
 800a744:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800a746:	2300      	movs	r3, #0
 800a748:	61fb      	str	r3, [r7, #28]
 800a74a:	e159      	b.n	800aa00 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800a74c:	2201      	movs	r2, #1
 800a74e:	69fb      	ldr	r3, [r7, #28]
 800a750:	fa02 f303 	lsl.w	r3, r2, r3
 800a754:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800a756:	683b      	ldr	r3, [r7, #0]
 800a758:	681b      	ldr	r3, [r3, #0]
 800a75a:	697a      	ldr	r2, [r7, #20]
 800a75c:	4013      	ands	r3, r2
 800a75e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800a760:	693a      	ldr	r2, [r7, #16]
 800a762:	697b      	ldr	r3, [r7, #20]
 800a764:	429a      	cmp	r2, r3
 800a766:	f040 8148 	bne.w	800a9fa <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800a76a:	683b      	ldr	r3, [r7, #0]
 800a76c:	685b      	ldr	r3, [r3, #4]
 800a76e:	f003 0303 	and.w	r3, r3, #3
 800a772:	2b01      	cmp	r3, #1
 800a774:	d005      	beq.n	800a782 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800a776:	683b      	ldr	r3, [r7, #0]
 800a778:	685b      	ldr	r3, [r3, #4]
 800a77a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800a77e:	2b02      	cmp	r3, #2
 800a780:	d130      	bne.n	800a7e4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	689b      	ldr	r3, [r3, #8]
 800a786:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800a788:	69fb      	ldr	r3, [r7, #28]
 800a78a:	005b      	lsls	r3, r3, #1
 800a78c:	2203      	movs	r2, #3
 800a78e:	fa02 f303 	lsl.w	r3, r2, r3
 800a792:	43db      	mvns	r3, r3
 800a794:	69ba      	ldr	r2, [r7, #24]
 800a796:	4013      	ands	r3, r2
 800a798:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800a79a:	683b      	ldr	r3, [r7, #0]
 800a79c:	68da      	ldr	r2, [r3, #12]
 800a79e:	69fb      	ldr	r3, [r7, #28]
 800a7a0:	005b      	lsls	r3, r3, #1
 800a7a2:	fa02 f303 	lsl.w	r3, r2, r3
 800a7a6:	69ba      	ldr	r2, [r7, #24]
 800a7a8:	4313      	orrs	r3, r2
 800a7aa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	69ba      	ldr	r2, [r7, #24]
 800a7b0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	685b      	ldr	r3, [r3, #4]
 800a7b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800a7b8:	2201      	movs	r2, #1
 800a7ba:	69fb      	ldr	r3, [r7, #28]
 800a7bc:	fa02 f303 	lsl.w	r3, r2, r3
 800a7c0:	43db      	mvns	r3, r3
 800a7c2:	69ba      	ldr	r2, [r7, #24]
 800a7c4:	4013      	ands	r3, r2
 800a7c6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800a7c8:	683b      	ldr	r3, [r7, #0]
 800a7ca:	685b      	ldr	r3, [r3, #4]
 800a7cc:	091b      	lsrs	r3, r3, #4
 800a7ce:	f003 0201 	and.w	r2, r3, #1
 800a7d2:	69fb      	ldr	r3, [r7, #28]
 800a7d4:	fa02 f303 	lsl.w	r3, r2, r3
 800a7d8:	69ba      	ldr	r2, [r7, #24]
 800a7da:	4313      	orrs	r3, r2
 800a7dc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	69ba      	ldr	r2, [r7, #24]
 800a7e2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800a7e4:	683b      	ldr	r3, [r7, #0]
 800a7e6:	685b      	ldr	r3, [r3, #4]
 800a7e8:	f003 0303 	and.w	r3, r3, #3
 800a7ec:	2b03      	cmp	r3, #3
 800a7ee:	d017      	beq.n	800a820 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	68db      	ldr	r3, [r3, #12]
 800a7f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800a7f6:	69fb      	ldr	r3, [r7, #28]
 800a7f8:	005b      	lsls	r3, r3, #1
 800a7fa:	2203      	movs	r2, #3
 800a7fc:	fa02 f303 	lsl.w	r3, r2, r3
 800a800:	43db      	mvns	r3, r3
 800a802:	69ba      	ldr	r2, [r7, #24]
 800a804:	4013      	ands	r3, r2
 800a806:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800a808:	683b      	ldr	r3, [r7, #0]
 800a80a:	689a      	ldr	r2, [r3, #8]
 800a80c:	69fb      	ldr	r3, [r7, #28]
 800a80e:	005b      	lsls	r3, r3, #1
 800a810:	fa02 f303 	lsl.w	r3, r2, r3
 800a814:	69ba      	ldr	r2, [r7, #24]
 800a816:	4313      	orrs	r3, r2
 800a818:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	69ba      	ldr	r2, [r7, #24]
 800a81e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800a820:	683b      	ldr	r3, [r7, #0]
 800a822:	685b      	ldr	r3, [r3, #4]
 800a824:	f003 0303 	and.w	r3, r3, #3
 800a828:	2b02      	cmp	r3, #2
 800a82a:	d123      	bne.n	800a874 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800a82c:	69fb      	ldr	r3, [r7, #28]
 800a82e:	08da      	lsrs	r2, r3, #3
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	3208      	adds	r2, #8
 800a834:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a838:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800a83a:	69fb      	ldr	r3, [r7, #28]
 800a83c:	f003 0307 	and.w	r3, r3, #7
 800a840:	009b      	lsls	r3, r3, #2
 800a842:	220f      	movs	r2, #15
 800a844:	fa02 f303 	lsl.w	r3, r2, r3
 800a848:	43db      	mvns	r3, r3
 800a84a:	69ba      	ldr	r2, [r7, #24]
 800a84c:	4013      	ands	r3, r2
 800a84e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800a850:	683b      	ldr	r3, [r7, #0]
 800a852:	691a      	ldr	r2, [r3, #16]
 800a854:	69fb      	ldr	r3, [r7, #28]
 800a856:	f003 0307 	and.w	r3, r3, #7
 800a85a:	009b      	lsls	r3, r3, #2
 800a85c:	fa02 f303 	lsl.w	r3, r2, r3
 800a860:	69ba      	ldr	r2, [r7, #24]
 800a862:	4313      	orrs	r3, r2
 800a864:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800a866:	69fb      	ldr	r3, [r7, #28]
 800a868:	08da      	lsrs	r2, r3, #3
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	3208      	adds	r2, #8
 800a86e:	69b9      	ldr	r1, [r7, #24]
 800a870:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800a87a:	69fb      	ldr	r3, [r7, #28]
 800a87c:	005b      	lsls	r3, r3, #1
 800a87e:	2203      	movs	r2, #3
 800a880:	fa02 f303 	lsl.w	r3, r2, r3
 800a884:	43db      	mvns	r3, r3
 800a886:	69ba      	ldr	r2, [r7, #24]
 800a888:	4013      	ands	r3, r2
 800a88a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800a88c:	683b      	ldr	r3, [r7, #0]
 800a88e:	685b      	ldr	r3, [r3, #4]
 800a890:	f003 0203 	and.w	r2, r3, #3
 800a894:	69fb      	ldr	r3, [r7, #28]
 800a896:	005b      	lsls	r3, r3, #1
 800a898:	fa02 f303 	lsl.w	r3, r2, r3
 800a89c:	69ba      	ldr	r2, [r7, #24]
 800a89e:	4313      	orrs	r3, r2
 800a8a0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	69ba      	ldr	r2, [r7, #24]
 800a8a6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800a8a8:	683b      	ldr	r3, [r7, #0]
 800a8aa:	685b      	ldr	r3, [r3, #4]
 800a8ac:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	f000 80a2 	beq.w	800a9fa <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a8b6:	2300      	movs	r3, #0
 800a8b8:	60fb      	str	r3, [r7, #12]
 800a8ba:	4b57      	ldr	r3, [pc, #348]	; (800aa18 <HAL_GPIO_Init+0x2e8>)
 800a8bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a8be:	4a56      	ldr	r2, [pc, #344]	; (800aa18 <HAL_GPIO_Init+0x2e8>)
 800a8c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a8c4:	6453      	str	r3, [r2, #68]	; 0x44
 800a8c6:	4b54      	ldr	r3, [pc, #336]	; (800aa18 <HAL_GPIO_Init+0x2e8>)
 800a8c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a8ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a8ce:	60fb      	str	r3, [r7, #12]
 800a8d0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800a8d2:	4a52      	ldr	r2, [pc, #328]	; (800aa1c <HAL_GPIO_Init+0x2ec>)
 800a8d4:	69fb      	ldr	r3, [r7, #28]
 800a8d6:	089b      	lsrs	r3, r3, #2
 800a8d8:	3302      	adds	r3, #2
 800a8da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a8de:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800a8e0:	69fb      	ldr	r3, [r7, #28]
 800a8e2:	f003 0303 	and.w	r3, r3, #3
 800a8e6:	009b      	lsls	r3, r3, #2
 800a8e8:	220f      	movs	r2, #15
 800a8ea:	fa02 f303 	lsl.w	r3, r2, r3
 800a8ee:	43db      	mvns	r3, r3
 800a8f0:	69ba      	ldr	r2, [r7, #24]
 800a8f2:	4013      	ands	r3, r2
 800a8f4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	4a49      	ldr	r2, [pc, #292]	; (800aa20 <HAL_GPIO_Init+0x2f0>)
 800a8fa:	4293      	cmp	r3, r2
 800a8fc:	d019      	beq.n	800a932 <HAL_GPIO_Init+0x202>
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	4a48      	ldr	r2, [pc, #288]	; (800aa24 <HAL_GPIO_Init+0x2f4>)
 800a902:	4293      	cmp	r3, r2
 800a904:	d013      	beq.n	800a92e <HAL_GPIO_Init+0x1fe>
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	4a47      	ldr	r2, [pc, #284]	; (800aa28 <HAL_GPIO_Init+0x2f8>)
 800a90a:	4293      	cmp	r3, r2
 800a90c:	d00d      	beq.n	800a92a <HAL_GPIO_Init+0x1fa>
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	4a46      	ldr	r2, [pc, #280]	; (800aa2c <HAL_GPIO_Init+0x2fc>)
 800a912:	4293      	cmp	r3, r2
 800a914:	d007      	beq.n	800a926 <HAL_GPIO_Init+0x1f6>
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	4a45      	ldr	r2, [pc, #276]	; (800aa30 <HAL_GPIO_Init+0x300>)
 800a91a:	4293      	cmp	r3, r2
 800a91c:	d101      	bne.n	800a922 <HAL_GPIO_Init+0x1f2>
 800a91e:	2304      	movs	r3, #4
 800a920:	e008      	b.n	800a934 <HAL_GPIO_Init+0x204>
 800a922:	2307      	movs	r3, #7
 800a924:	e006      	b.n	800a934 <HAL_GPIO_Init+0x204>
 800a926:	2303      	movs	r3, #3
 800a928:	e004      	b.n	800a934 <HAL_GPIO_Init+0x204>
 800a92a:	2302      	movs	r3, #2
 800a92c:	e002      	b.n	800a934 <HAL_GPIO_Init+0x204>
 800a92e:	2301      	movs	r3, #1
 800a930:	e000      	b.n	800a934 <HAL_GPIO_Init+0x204>
 800a932:	2300      	movs	r3, #0
 800a934:	69fa      	ldr	r2, [r7, #28]
 800a936:	f002 0203 	and.w	r2, r2, #3
 800a93a:	0092      	lsls	r2, r2, #2
 800a93c:	4093      	lsls	r3, r2
 800a93e:	69ba      	ldr	r2, [r7, #24]
 800a940:	4313      	orrs	r3, r2
 800a942:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800a944:	4935      	ldr	r1, [pc, #212]	; (800aa1c <HAL_GPIO_Init+0x2ec>)
 800a946:	69fb      	ldr	r3, [r7, #28]
 800a948:	089b      	lsrs	r3, r3, #2
 800a94a:	3302      	adds	r3, #2
 800a94c:	69ba      	ldr	r2, [r7, #24]
 800a94e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800a952:	4b38      	ldr	r3, [pc, #224]	; (800aa34 <HAL_GPIO_Init+0x304>)
 800a954:	681b      	ldr	r3, [r3, #0]
 800a956:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800a958:	693b      	ldr	r3, [r7, #16]
 800a95a:	43db      	mvns	r3, r3
 800a95c:	69ba      	ldr	r2, [r7, #24]
 800a95e:	4013      	ands	r3, r2
 800a960:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800a962:	683b      	ldr	r3, [r7, #0]
 800a964:	685b      	ldr	r3, [r3, #4]
 800a966:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	d003      	beq.n	800a976 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800a96e:	69ba      	ldr	r2, [r7, #24]
 800a970:	693b      	ldr	r3, [r7, #16]
 800a972:	4313      	orrs	r3, r2
 800a974:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800a976:	4a2f      	ldr	r2, [pc, #188]	; (800aa34 <HAL_GPIO_Init+0x304>)
 800a978:	69bb      	ldr	r3, [r7, #24]
 800a97a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800a97c:	4b2d      	ldr	r3, [pc, #180]	; (800aa34 <HAL_GPIO_Init+0x304>)
 800a97e:	685b      	ldr	r3, [r3, #4]
 800a980:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800a982:	693b      	ldr	r3, [r7, #16]
 800a984:	43db      	mvns	r3, r3
 800a986:	69ba      	ldr	r2, [r7, #24]
 800a988:	4013      	ands	r3, r2
 800a98a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800a98c:	683b      	ldr	r3, [r7, #0]
 800a98e:	685b      	ldr	r3, [r3, #4]
 800a990:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a994:	2b00      	cmp	r3, #0
 800a996:	d003      	beq.n	800a9a0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800a998:	69ba      	ldr	r2, [r7, #24]
 800a99a:	693b      	ldr	r3, [r7, #16]
 800a99c:	4313      	orrs	r3, r2
 800a99e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800a9a0:	4a24      	ldr	r2, [pc, #144]	; (800aa34 <HAL_GPIO_Init+0x304>)
 800a9a2:	69bb      	ldr	r3, [r7, #24]
 800a9a4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800a9a6:	4b23      	ldr	r3, [pc, #140]	; (800aa34 <HAL_GPIO_Init+0x304>)
 800a9a8:	689b      	ldr	r3, [r3, #8]
 800a9aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800a9ac:	693b      	ldr	r3, [r7, #16]
 800a9ae:	43db      	mvns	r3, r3
 800a9b0:	69ba      	ldr	r2, [r7, #24]
 800a9b2:	4013      	ands	r3, r2
 800a9b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800a9b6:	683b      	ldr	r3, [r7, #0]
 800a9b8:	685b      	ldr	r3, [r3, #4]
 800a9ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a9be:	2b00      	cmp	r3, #0
 800a9c0:	d003      	beq.n	800a9ca <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800a9c2:	69ba      	ldr	r2, [r7, #24]
 800a9c4:	693b      	ldr	r3, [r7, #16]
 800a9c6:	4313      	orrs	r3, r2
 800a9c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800a9ca:	4a1a      	ldr	r2, [pc, #104]	; (800aa34 <HAL_GPIO_Init+0x304>)
 800a9cc:	69bb      	ldr	r3, [r7, #24]
 800a9ce:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800a9d0:	4b18      	ldr	r3, [pc, #96]	; (800aa34 <HAL_GPIO_Init+0x304>)
 800a9d2:	68db      	ldr	r3, [r3, #12]
 800a9d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800a9d6:	693b      	ldr	r3, [r7, #16]
 800a9d8:	43db      	mvns	r3, r3
 800a9da:	69ba      	ldr	r2, [r7, #24]
 800a9dc:	4013      	ands	r3, r2
 800a9de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800a9e0:	683b      	ldr	r3, [r7, #0]
 800a9e2:	685b      	ldr	r3, [r3, #4]
 800a9e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a9e8:	2b00      	cmp	r3, #0
 800a9ea:	d003      	beq.n	800a9f4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800a9ec:	69ba      	ldr	r2, [r7, #24]
 800a9ee:	693b      	ldr	r3, [r7, #16]
 800a9f0:	4313      	orrs	r3, r2
 800a9f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800a9f4:	4a0f      	ldr	r2, [pc, #60]	; (800aa34 <HAL_GPIO_Init+0x304>)
 800a9f6:	69bb      	ldr	r3, [r7, #24]
 800a9f8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800a9fa:	69fb      	ldr	r3, [r7, #28]
 800a9fc:	3301      	adds	r3, #1
 800a9fe:	61fb      	str	r3, [r7, #28]
 800aa00:	69fb      	ldr	r3, [r7, #28]
 800aa02:	2b0f      	cmp	r3, #15
 800aa04:	f67f aea2 	bls.w	800a74c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800aa08:	bf00      	nop
 800aa0a:	bf00      	nop
 800aa0c:	3724      	adds	r7, #36	; 0x24
 800aa0e:	46bd      	mov	sp, r7
 800aa10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa14:	4770      	bx	lr
 800aa16:	bf00      	nop
 800aa18:	40023800 	.word	0x40023800
 800aa1c:	40013800 	.word	0x40013800
 800aa20:	40020000 	.word	0x40020000
 800aa24:	40020400 	.word	0x40020400
 800aa28:	40020800 	.word	0x40020800
 800aa2c:	40020c00 	.word	0x40020c00
 800aa30:	40021000 	.word	0x40021000
 800aa34:	40013c00 	.word	0x40013c00

0800aa38 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800aa38:	b480      	push	{r7}
 800aa3a:	b087      	sub	sp, #28
 800aa3c:	af00      	add	r7, sp, #0
 800aa3e:	6078      	str	r0, [r7, #4]
 800aa40:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800aa42:	2300      	movs	r3, #0
 800aa44:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 800aa46:	2300      	movs	r3, #0
 800aa48:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 800aa4a:	2300      	movs	r3, #0
 800aa4c:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800aa4e:	2300      	movs	r3, #0
 800aa50:	617b      	str	r3, [r7, #20]
 800aa52:	e0bb      	b.n	800abcc <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800aa54:	2201      	movs	r2, #1
 800aa56:	697b      	ldr	r3, [r7, #20]
 800aa58:	fa02 f303 	lsl.w	r3, r2, r3
 800aa5c:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 800aa5e:	683a      	ldr	r2, [r7, #0]
 800aa60:	693b      	ldr	r3, [r7, #16]
 800aa62:	4013      	ands	r3, r2
 800aa64:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800aa66:	68fa      	ldr	r2, [r7, #12]
 800aa68:	693b      	ldr	r3, [r7, #16]
 800aa6a:	429a      	cmp	r2, r3
 800aa6c:	f040 80ab 	bne.w	800abc6 <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 800aa70:	4a5c      	ldr	r2, [pc, #368]	; (800abe4 <HAL_GPIO_DeInit+0x1ac>)
 800aa72:	697b      	ldr	r3, [r7, #20]
 800aa74:	089b      	lsrs	r3, r3, #2
 800aa76:	3302      	adds	r3, #2
 800aa78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800aa7c:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 800aa7e:	697b      	ldr	r3, [r7, #20]
 800aa80:	f003 0303 	and.w	r3, r3, #3
 800aa84:	009b      	lsls	r3, r3, #2
 800aa86:	220f      	movs	r2, #15
 800aa88:	fa02 f303 	lsl.w	r3, r2, r3
 800aa8c:	68ba      	ldr	r2, [r7, #8]
 800aa8e:	4013      	ands	r3, r2
 800aa90:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	4a54      	ldr	r2, [pc, #336]	; (800abe8 <HAL_GPIO_DeInit+0x1b0>)
 800aa96:	4293      	cmp	r3, r2
 800aa98:	d019      	beq.n	800aace <HAL_GPIO_DeInit+0x96>
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	4a53      	ldr	r2, [pc, #332]	; (800abec <HAL_GPIO_DeInit+0x1b4>)
 800aa9e:	4293      	cmp	r3, r2
 800aaa0:	d013      	beq.n	800aaca <HAL_GPIO_DeInit+0x92>
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	4a52      	ldr	r2, [pc, #328]	; (800abf0 <HAL_GPIO_DeInit+0x1b8>)
 800aaa6:	4293      	cmp	r3, r2
 800aaa8:	d00d      	beq.n	800aac6 <HAL_GPIO_DeInit+0x8e>
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	4a51      	ldr	r2, [pc, #324]	; (800abf4 <HAL_GPIO_DeInit+0x1bc>)
 800aaae:	4293      	cmp	r3, r2
 800aab0:	d007      	beq.n	800aac2 <HAL_GPIO_DeInit+0x8a>
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	4a50      	ldr	r2, [pc, #320]	; (800abf8 <HAL_GPIO_DeInit+0x1c0>)
 800aab6:	4293      	cmp	r3, r2
 800aab8:	d101      	bne.n	800aabe <HAL_GPIO_DeInit+0x86>
 800aaba:	2304      	movs	r3, #4
 800aabc:	e008      	b.n	800aad0 <HAL_GPIO_DeInit+0x98>
 800aabe:	2307      	movs	r3, #7
 800aac0:	e006      	b.n	800aad0 <HAL_GPIO_DeInit+0x98>
 800aac2:	2303      	movs	r3, #3
 800aac4:	e004      	b.n	800aad0 <HAL_GPIO_DeInit+0x98>
 800aac6:	2302      	movs	r3, #2
 800aac8:	e002      	b.n	800aad0 <HAL_GPIO_DeInit+0x98>
 800aaca:	2301      	movs	r3, #1
 800aacc:	e000      	b.n	800aad0 <HAL_GPIO_DeInit+0x98>
 800aace:	2300      	movs	r3, #0
 800aad0:	697a      	ldr	r2, [r7, #20]
 800aad2:	f002 0203 	and.w	r2, r2, #3
 800aad6:	0092      	lsls	r2, r2, #2
 800aad8:	4093      	lsls	r3, r2
 800aada:	68ba      	ldr	r2, [r7, #8]
 800aadc:	429a      	cmp	r2, r3
 800aade:	d132      	bne.n	800ab46 <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 800aae0:	4b46      	ldr	r3, [pc, #280]	; (800abfc <HAL_GPIO_DeInit+0x1c4>)
 800aae2:	681a      	ldr	r2, [r3, #0]
 800aae4:	68fb      	ldr	r3, [r7, #12]
 800aae6:	43db      	mvns	r3, r3
 800aae8:	4944      	ldr	r1, [pc, #272]	; (800abfc <HAL_GPIO_DeInit+0x1c4>)
 800aaea:	4013      	ands	r3, r2
 800aaec:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800aaee:	4b43      	ldr	r3, [pc, #268]	; (800abfc <HAL_GPIO_DeInit+0x1c4>)
 800aaf0:	685a      	ldr	r2, [r3, #4]
 800aaf2:	68fb      	ldr	r3, [r7, #12]
 800aaf4:	43db      	mvns	r3, r3
 800aaf6:	4941      	ldr	r1, [pc, #260]	; (800abfc <HAL_GPIO_DeInit+0x1c4>)
 800aaf8:	4013      	ands	r3, r2
 800aafa:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800aafc:	4b3f      	ldr	r3, [pc, #252]	; (800abfc <HAL_GPIO_DeInit+0x1c4>)
 800aafe:	689a      	ldr	r2, [r3, #8]
 800ab00:	68fb      	ldr	r3, [r7, #12]
 800ab02:	43db      	mvns	r3, r3
 800ab04:	493d      	ldr	r1, [pc, #244]	; (800abfc <HAL_GPIO_DeInit+0x1c4>)
 800ab06:	4013      	ands	r3, r2
 800ab08:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 800ab0a:	4b3c      	ldr	r3, [pc, #240]	; (800abfc <HAL_GPIO_DeInit+0x1c4>)
 800ab0c:	68da      	ldr	r2, [r3, #12]
 800ab0e:	68fb      	ldr	r3, [r7, #12]
 800ab10:	43db      	mvns	r3, r3
 800ab12:	493a      	ldr	r1, [pc, #232]	; (800abfc <HAL_GPIO_DeInit+0x1c4>)
 800ab14:	4013      	ands	r3, r2
 800ab16:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 800ab18:	697b      	ldr	r3, [r7, #20]
 800ab1a:	f003 0303 	and.w	r3, r3, #3
 800ab1e:	009b      	lsls	r3, r3, #2
 800ab20:	220f      	movs	r2, #15
 800ab22:	fa02 f303 	lsl.w	r3, r2, r3
 800ab26:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800ab28:	4a2e      	ldr	r2, [pc, #184]	; (800abe4 <HAL_GPIO_DeInit+0x1ac>)
 800ab2a:	697b      	ldr	r3, [r7, #20]
 800ab2c:	089b      	lsrs	r3, r3, #2
 800ab2e:	3302      	adds	r3, #2
 800ab30:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800ab34:	68bb      	ldr	r3, [r7, #8]
 800ab36:	43da      	mvns	r2, r3
 800ab38:	482a      	ldr	r0, [pc, #168]	; (800abe4 <HAL_GPIO_DeInit+0x1ac>)
 800ab3a:	697b      	ldr	r3, [r7, #20]
 800ab3c:	089b      	lsrs	r3, r3, #2
 800ab3e:	400a      	ands	r2, r1
 800ab40:	3302      	adds	r3, #2
 800ab42:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	681a      	ldr	r2, [r3, #0]
 800ab4a:	697b      	ldr	r3, [r7, #20]
 800ab4c:	005b      	lsls	r3, r3, #1
 800ab4e:	2103      	movs	r1, #3
 800ab50:	fa01 f303 	lsl.w	r3, r1, r3
 800ab54:	43db      	mvns	r3, r3
 800ab56:	401a      	ands	r2, r3
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800ab5c:	697b      	ldr	r3, [r7, #20]
 800ab5e:	08da      	lsrs	r2, r3, #3
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	3208      	adds	r2, #8
 800ab64:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ab68:	697b      	ldr	r3, [r7, #20]
 800ab6a:	f003 0307 	and.w	r3, r3, #7
 800ab6e:	009b      	lsls	r3, r3, #2
 800ab70:	220f      	movs	r2, #15
 800ab72:	fa02 f303 	lsl.w	r3, r2, r3
 800ab76:	43db      	mvns	r3, r3
 800ab78:	697a      	ldr	r2, [r7, #20]
 800ab7a:	08d2      	lsrs	r2, r2, #3
 800ab7c:	4019      	ands	r1, r3
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	3208      	adds	r2, #8
 800ab82:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	68da      	ldr	r2, [r3, #12]
 800ab8a:	697b      	ldr	r3, [r7, #20]
 800ab8c:	005b      	lsls	r3, r3, #1
 800ab8e:	2103      	movs	r1, #3
 800ab90:	fa01 f303 	lsl.w	r3, r1, r3
 800ab94:	43db      	mvns	r3, r3
 800ab96:	401a      	ands	r2, r3
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	685a      	ldr	r2, [r3, #4]
 800aba0:	2101      	movs	r1, #1
 800aba2:	697b      	ldr	r3, [r7, #20]
 800aba4:	fa01 f303 	lsl.w	r3, r1, r3
 800aba8:	43db      	mvns	r3, r3
 800abaa:	401a      	ands	r2, r3
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	689a      	ldr	r2, [r3, #8]
 800abb4:	697b      	ldr	r3, [r7, #20]
 800abb6:	005b      	lsls	r3, r3, #1
 800abb8:	2103      	movs	r1, #3
 800abba:	fa01 f303 	lsl.w	r3, r1, r3
 800abbe:	43db      	mvns	r3, r3
 800abc0:	401a      	ands	r2, r3
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800abc6:	697b      	ldr	r3, [r7, #20]
 800abc8:	3301      	adds	r3, #1
 800abca:	617b      	str	r3, [r7, #20]
 800abcc:	697b      	ldr	r3, [r7, #20]
 800abce:	2b0f      	cmp	r3, #15
 800abd0:	f67f af40 	bls.w	800aa54 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 800abd4:	bf00      	nop
 800abd6:	bf00      	nop
 800abd8:	371c      	adds	r7, #28
 800abda:	46bd      	mov	sp, r7
 800abdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abe0:	4770      	bx	lr
 800abe2:	bf00      	nop
 800abe4:	40013800 	.word	0x40013800
 800abe8:	40020000 	.word	0x40020000
 800abec:	40020400 	.word	0x40020400
 800abf0:	40020800 	.word	0x40020800
 800abf4:	40020c00 	.word	0x40020c00
 800abf8:	40021000 	.word	0x40021000
 800abfc:	40013c00 	.word	0x40013c00

0800ac00 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800ac00:	b480      	push	{r7}
 800ac02:	b083      	sub	sp, #12
 800ac04:	af00      	add	r7, sp, #0
 800ac06:	6078      	str	r0, [r7, #4]
 800ac08:	460b      	mov	r3, r1
 800ac0a:	807b      	strh	r3, [r7, #2]
 800ac0c:	4613      	mov	r3, r2
 800ac0e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800ac10:	787b      	ldrb	r3, [r7, #1]
 800ac12:	2b00      	cmp	r3, #0
 800ac14:	d003      	beq.n	800ac1e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800ac16:	887a      	ldrh	r2, [r7, #2]
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800ac1c:	e003      	b.n	800ac26 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800ac1e:	887b      	ldrh	r3, [r7, #2]
 800ac20:	041a      	lsls	r2, r3, #16
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	619a      	str	r2, [r3, #24]
}
 800ac26:	bf00      	nop
 800ac28:	370c      	adds	r7, #12
 800ac2a:	46bd      	mov	sp, r7
 800ac2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac30:	4770      	bx	lr

0800ac32 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800ac32:	b480      	push	{r7}
 800ac34:	b085      	sub	sp, #20
 800ac36:	af00      	add	r7, sp, #0
 800ac38:	6078      	str	r0, [r7, #4]
 800ac3a:	460b      	mov	r3, r1
 800ac3c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	695b      	ldr	r3, [r3, #20]
 800ac42:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800ac44:	887a      	ldrh	r2, [r7, #2]
 800ac46:	68fb      	ldr	r3, [r7, #12]
 800ac48:	4013      	ands	r3, r2
 800ac4a:	041a      	lsls	r2, r3, #16
 800ac4c:	68fb      	ldr	r3, [r7, #12]
 800ac4e:	43d9      	mvns	r1, r3
 800ac50:	887b      	ldrh	r3, [r7, #2]
 800ac52:	400b      	ands	r3, r1
 800ac54:	431a      	orrs	r2, r3
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	619a      	str	r2, [r3, #24]
}
 800ac5a:	bf00      	nop
 800ac5c:	3714      	adds	r7, #20
 800ac5e:	46bd      	mov	sp, r7
 800ac60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac64:	4770      	bx	lr

0800ac66 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800ac66:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ac68:	b08f      	sub	sp, #60	; 0x3c
 800ac6a:	af0a      	add	r7, sp, #40	; 0x28
 800ac6c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	2b00      	cmp	r3, #0
 800ac72:	d101      	bne.n	800ac78 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800ac74:	2301      	movs	r3, #1
 800ac76:	e10f      	b.n	800ae98 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 800ac84:	b2db      	uxtb	r3, r3
 800ac86:	2b00      	cmp	r3, #0
 800ac88:	d106      	bne.n	800ac98 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	2200      	movs	r2, #0
 800ac8e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800ac92:	6878      	ldr	r0, [r7, #4]
 800ac94:	f006 fd3a 	bl	801170c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	2203      	movs	r2, #3
 800ac9c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800aca0:	68bb      	ldr	r3, [r7, #8]
 800aca2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aca4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aca8:	2b00      	cmp	r3, #0
 800acaa:	d102      	bne.n	800acb2 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	2200      	movs	r2, #0
 800acb0:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	681b      	ldr	r3, [r3, #0]
 800acb6:	4618      	mov	r0, r3
 800acb8:	f003 faef 	bl	800e29a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	681b      	ldr	r3, [r3, #0]
 800acc0:	603b      	str	r3, [r7, #0]
 800acc2:	687e      	ldr	r6, [r7, #4]
 800acc4:	466d      	mov	r5, sp
 800acc6:	f106 0410 	add.w	r4, r6, #16
 800acca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800accc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800acce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800acd0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800acd2:	e894 0003 	ldmia.w	r4, {r0, r1}
 800acd6:	e885 0003 	stmia.w	r5, {r0, r1}
 800acda:	1d33      	adds	r3, r6, #4
 800acdc:	cb0e      	ldmia	r3, {r1, r2, r3}
 800acde:	6838      	ldr	r0, [r7, #0]
 800ace0:	f003 f9c6 	bl	800e070 <USB_CoreInit>
 800ace4:	4603      	mov	r3, r0
 800ace6:	2b00      	cmp	r3, #0
 800ace8:	d005      	beq.n	800acf6 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	2202      	movs	r2, #2
 800acee:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800acf2:	2301      	movs	r3, #1
 800acf4:	e0d0      	b.n	800ae98 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	681b      	ldr	r3, [r3, #0]
 800acfa:	2100      	movs	r1, #0
 800acfc:	4618      	mov	r0, r3
 800acfe:	f003 fadd 	bl	800e2bc <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800ad02:	2300      	movs	r3, #0
 800ad04:	73fb      	strb	r3, [r7, #15]
 800ad06:	e04a      	b.n	800ad9e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800ad08:	7bfa      	ldrb	r2, [r7, #15]
 800ad0a:	6879      	ldr	r1, [r7, #4]
 800ad0c:	4613      	mov	r3, r2
 800ad0e:	00db      	lsls	r3, r3, #3
 800ad10:	1a9b      	subs	r3, r3, r2
 800ad12:	009b      	lsls	r3, r3, #2
 800ad14:	440b      	add	r3, r1
 800ad16:	333d      	adds	r3, #61	; 0x3d
 800ad18:	2201      	movs	r2, #1
 800ad1a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800ad1c:	7bfa      	ldrb	r2, [r7, #15]
 800ad1e:	6879      	ldr	r1, [r7, #4]
 800ad20:	4613      	mov	r3, r2
 800ad22:	00db      	lsls	r3, r3, #3
 800ad24:	1a9b      	subs	r3, r3, r2
 800ad26:	009b      	lsls	r3, r3, #2
 800ad28:	440b      	add	r3, r1
 800ad2a:	333c      	adds	r3, #60	; 0x3c
 800ad2c:	7bfa      	ldrb	r2, [r7, #15]
 800ad2e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800ad30:	7bfa      	ldrb	r2, [r7, #15]
 800ad32:	7bfb      	ldrb	r3, [r7, #15]
 800ad34:	b298      	uxth	r0, r3
 800ad36:	6879      	ldr	r1, [r7, #4]
 800ad38:	4613      	mov	r3, r2
 800ad3a:	00db      	lsls	r3, r3, #3
 800ad3c:	1a9b      	subs	r3, r3, r2
 800ad3e:	009b      	lsls	r3, r3, #2
 800ad40:	440b      	add	r3, r1
 800ad42:	3342      	adds	r3, #66	; 0x42
 800ad44:	4602      	mov	r2, r0
 800ad46:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800ad48:	7bfa      	ldrb	r2, [r7, #15]
 800ad4a:	6879      	ldr	r1, [r7, #4]
 800ad4c:	4613      	mov	r3, r2
 800ad4e:	00db      	lsls	r3, r3, #3
 800ad50:	1a9b      	subs	r3, r3, r2
 800ad52:	009b      	lsls	r3, r3, #2
 800ad54:	440b      	add	r3, r1
 800ad56:	333f      	adds	r3, #63	; 0x3f
 800ad58:	2200      	movs	r2, #0
 800ad5a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800ad5c:	7bfa      	ldrb	r2, [r7, #15]
 800ad5e:	6879      	ldr	r1, [r7, #4]
 800ad60:	4613      	mov	r3, r2
 800ad62:	00db      	lsls	r3, r3, #3
 800ad64:	1a9b      	subs	r3, r3, r2
 800ad66:	009b      	lsls	r3, r3, #2
 800ad68:	440b      	add	r3, r1
 800ad6a:	3344      	adds	r3, #68	; 0x44
 800ad6c:	2200      	movs	r2, #0
 800ad6e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800ad70:	7bfa      	ldrb	r2, [r7, #15]
 800ad72:	6879      	ldr	r1, [r7, #4]
 800ad74:	4613      	mov	r3, r2
 800ad76:	00db      	lsls	r3, r3, #3
 800ad78:	1a9b      	subs	r3, r3, r2
 800ad7a:	009b      	lsls	r3, r3, #2
 800ad7c:	440b      	add	r3, r1
 800ad7e:	3348      	adds	r3, #72	; 0x48
 800ad80:	2200      	movs	r2, #0
 800ad82:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800ad84:	7bfa      	ldrb	r2, [r7, #15]
 800ad86:	6879      	ldr	r1, [r7, #4]
 800ad88:	4613      	mov	r3, r2
 800ad8a:	00db      	lsls	r3, r3, #3
 800ad8c:	1a9b      	subs	r3, r3, r2
 800ad8e:	009b      	lsls	r3, r3, #2
 800ad90:	440b      	add	r3, r1
 800ad92:	3350      	adds	r3, #80	; 0x50
 800ad94:	2200      	movs	r2, #0
 800ad96:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800ad98:	7bfb      	ldrb	r3, [r7, #15]
 800ad9a:	3301      	adds	r3, #1
 800ad9c:	73fb      	strb	r3, [r7, #15]
 800ad9e:	7bfa      	ldrb	r2, [r7, #15]
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	685b      	ldr	r3, [r3, #4]
 800ada4:	429a      	cmp	r2, r3
 800ada6:	d3af      	bcc.n	800ad08 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800ada8:	2300      	movs	r3, #0
 800adaa:	73fb      	strb	r3, [r7, #15]
 800adac:	e044      	b.n	800ae38 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800adae:	7bfa      	ldrb	r2, [r7, #15]
 800adb0:	6879      	ldr	r1, [r7, #4]
 800adb2:	4613      	mov	r3, r2
 800adb4:	00db      	lsls	r3, r3, #3
 800adb6:	1a9b      	subs	r3, r3, r2
 800adb8:	009b      	lsls	r3, r3, #2
 800adba:	440b      	add	r3, r1
 800adbc:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800adc0:	2200      	movs	r2, #0
 800adc2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800adc4:	7bfa      	ldrb	r2, [r7, #15]
 800adc6:	6879      	ldr	r1, [r7, #4]
 800adc8:	4613      	mov	r3, r2
 800adca:	00db      	lsls	r3, r3, #3
 800adcc:	1a9b      	subs	r3, r3, r2
 800adce:	009b      	lsls	r3, r3, #2
 800add0:	440b      	add	r3, r1
 800add2:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800add6:	7bfa      	ldrb	r2, [r7, #15]
 800add8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800adda:	7bfa      	ldrb	r2, [r7, #15]
 800addc:	6879      	ldr	r1, [r7, #4]
 800adde:	4613      	mov	r3, r2
 800ade0:	00db      	lsls	r3, r3, #3
 800ade2:	1a9b      	subs	r3, r3, r2
 800ade4:	009b      	lsls	r3, r3, #2
 800ade6:	440b      	add	r3, r1
 800ade8:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800adec:	2200      	movs	r2, #0
 800adee:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800adf0:	7bfa      	ldrb	r2, [r7, #15]
 800adf2:	6879      	ldr	r1, [r7, #4]
 800adf4:	4613      	mov	r3, r2
 800adf6:	00db      	lsls	r3, r3, #3
 800adf8:	1a9b      	subs	r3, r3, r2
 800adfa:	009b      	lsls	r3, r3, #2
 800adfc:	440b      	add	r3, r1
 800adfe:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800ae02:	2200      	movs	r2, #0
 800ae04:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800ae06:	7bfa      	ldrb	r2, [r7, #15]
 800ae08:	6879      	ldr	r1, [r7, #4]
 800ae0a:	4613      	mov	r3, r2
 800ae0c:	00db      	lsls	r3, r3, #3
 800ae0e:	1a9b      	subs	r3, r3, r2
 800ae10:	009b      	lsls	r3, r3, #2
 800ae12:	440b      	add	r3, r1
 800ae14:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800ae18:	2200      	movs	r2, #0
 800ae1a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800ae1c:	7bfa      	ldrb	r2, [r7, #15]
 800ae1e:	6879      	ldr	r1, [r7, #4]
 800ae20:	4613      	mov	r3, r2
 800ae22:	00db      	lsls	r3, r3, #3
 800ae24:	1a9b      	subs	r3, r3, r2
 800ae26:	009b      	lsls	r3, r3, #2
 800ae28:	440b      	add	r3, r1
 800ae2a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800ae2e:	2200      	movs	r2, #0
 800ae30:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800ae32:	7bfb      	ldrb	r3, [r7, #15]
 800ae34:	3301      	adds	r3, #1
 800ae36:	73fb      	strb	r3, [r7, #15]
 800ae38:	7bfa      	ldrb	r2, [r7, #15]
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	685b      	ldr	r3, [r3, #4]
 800ae3e:	429a      	cmp	r2, r3
 800ae40:	d3b5      	bcc.n	800adae <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	681b      	ldr	r3, [r3, #0]
 800ae46:	603b      	str	r3, [r7, #0]
 800ae48:	687e      	ldr	r6, [r7, #4]
 800ae4a:	466d      	mov	r5, sp
 800ae4c:	f106 0410 	add.w	r4, r6, #16
 800ae50:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ae52:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800ae54:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ae56:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800ae58:	e894 0003 	ldmia.w	r4, {r0, r1}
 800ae5c:	e885 0003 	stmia.w	r5, {r0, r1}
 800ae60:	1d33      	adds	r3, r6, #4
 800ae62:	cb0e      	ldmia	r3, {r1, r2, r3}
 800ae64:	6838      	ldr	r0, [r7, #0]
 800ae66:	f003 fa75 	bl	800e354 <USB_DevInit>
 800ae6a:	4603      	mov	r3, r0
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	d005      	beq.n	800ae7c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	2202      	movs	r2, #2
 800ae74:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800ae78:	2301      	movs	r3, #1
 800ae7a:	e00d      	b.n	800ae98 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	2200      	movs	r2, #0
 800ae80:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	2201      	movs	r2, #1
 800ae88:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	681b      	ldr	r3, [r3, #0]
 800ae90:	4618      	mov	r0, r3
 800ae92:	f004 faf1 	bl	800f478 <USB_DevDisconnect>

  return HAL_OK;
 800ae96:	2300      	movs	r3, #0
}
 800ae98:	4618      	mov	r0, r3
 800ae9a:	3714      	adds	r7, #20
 800ae9c:	46bd      	mov	sp, r7
 800ae9e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800aea0 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800aea0:	b580      	push	{r7, lr}
 800aea2:	b084      	sub	sp, #16
 800aea4:	af00      	add	r7, sp, #0
 800aea6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	681b      	ldr	r3, [r3, #0]
 800aeac:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800aeb4:	2b01      	cmp	r3, #1
 800aeb6:	d101      	bne.n	800aebc <HAL_PCD_Start+0x1c>
 800aeb8:	2302      	movs	r3, #2
 800aeba:	e020      	b.n	800aefe <HAL_PCD_Start+0x5e>
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	2201      	movs	r2, #1
 800aec0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aec8:	2b01      	cmp	r3, #1
 800aeca:	d109      	bne.n	800aee0 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800aed0:	2b01      	cmp	r3, #1
 800aed2:	d005      	beq.n	800aee0 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800aed4:	68fb      	ldr	r3, [r7, #12]
 800aed6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aed8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800aedc:	68fb      	ldr	r3, [r7, #12]
 800aede:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	681b      	ldr	r3, [r3, #0]
 800aee4:	4618      	mov	r0, r3
 800aee6:	f003 f9c7 	bl	800e278 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	681b      	ldr	r3, [r3, #0]
 800aeee:	4618      	mov	r0, r3
 800aef0:	f004 faa1 	bl	800f436 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	2200      	movs	r2, #0
 800aef8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800aefc:	2300      	movs	r3, #0
}
 800aefe:	4618      	mov	r0, r3
 800af00:	3710      	adds	r7, #16
 800af02:	46bd      	mov	sp, r7
 800af04:	bd80      	pop	{r7, pc}

0800af06 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800af06:	b590      	push	{r4, r7, lr}
 800af08:	b08d      	sub	sp, #52	; 0x34
 800af0a:	af00      	add	r7, sp, #0
 800af0c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	681b      	ldr	r3, [r3, #0]
 800af12:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800af14:	6a3b      	ldr	r3, [r7, #32]
 800af16:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	681b      	ldr	r3, [r3, #0]
 800af1c:	4618      	mov	r0, r3
 800af1e:	f004 fb5f 	bl	800f5e0 <USB_GetMode>
 800af22:	4603      	mov	r3, r0
 800af24:	2b00      	cmp	r3, #0
 800af26:	f040 839d 	bne.w	800b664 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	681b      	ldr	r3, [r3, #0]
 800af2e:	4618      	mov	r0, r3
 800af30:	f004 fac3 	bl	800f4ba <USB_ReadInterrupts>
 800af34:	4603      	mov	r3, r0
 800af36:	2b00      	cmp	r3, #0
 800af38:	f000 8393 	beq.w	800b662 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	681b      	ldr	r3, [r3, #0]
 800af40:	4618      	mov	r0, r3
 800af42:	f004 faba 	bl	800f4ba <USB_ReadInterrupts>
 800af46:	4603      	mov	r3, r0
 800af48:	f003 0302 	and.w	r3, r3, #2
 800af4c:	2b02      	cmp	r3, #2
 800af4e:	d107      	bne.n	800af60 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	681b      	ldr	r3, [r3, #0]
 800af54:	695a      	ldr	r2, [r3, #20]
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	681b      	ldr	r3, [r3, #0]
 800af5a:	f002 0202 	and.w	r2, r2, #2
 800af5e:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	681b      	ldr	r3, [r3, #0]
 800af64:	4618      	mov	r0, r3
 800af66:	f004 faa8 	bl	800f4ba <USB_ReadInterrupts>
 800af6a:	4603      	mov	r3, r0
 800af6c:	f003 0310 	and.w	r3, r3, #16
 800af70:	2b10      	cmp	r3, #16
 800af72:	d161      	bne.n	800b038 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	681b      	ldr	r3, [r3, #0]
 800af78:	699a      	ldr	r2, [r3, #24]
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	681b      	ldr	r3, [r3, #0]
 800af7e:	f022 0210 	bic.w	r2, r2, #16
 800af82:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 800af84:	6a3b      	ldr	r3, [r7, #32]
 800af86:	6a1b      	ldr	r3, [r3, #32]
 800af88:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 800af8a:	69bb      	ldr	r3, [r7, #24]
 800af8c:	f003 020f 	and.w	r2, r3, #15
 800af90:	4613      	mov	r3, r2
 800af92:	00db      	lsls	r3, r3, #3
 800af94:	1a9b      	subs	r3, r3, r2
 800af96:	009b      	lsls	r3, r3, #2
 800af98:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800af9c:	687a      	ldr	r2, [r7, #4]
 800af9e:	4413      	add	r3, r2
 800afa0:	3304      	adds	r3, #4
 800afa2:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800afa4:	69bb      	ldr	r3, [r7, #24]
 800afa6:	0c5b      	lsrs	r3, r3, #17
 800afa8:	f003 030f 	and.w	r3, r3, #15
 800afac:	2b02      	cmp	r3, #2
 800afae:	d124      	bne.n	800affa <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 800afb0:	69ba      	ldr	r2, [r7, #24]
 800afb2:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800afb6:	4013      	ands	r3, r2
 800afb8:	2b00      	cmp	r3, #0
 800afba:	d035      	beq.n	800b028 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800afbc:	697b      	ldr	r3, [r7, #20]
 800afbe:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 800afc0:	69bb      	ldr	r3, [r7, #24]
 800afc2:	091b      	lsrs	r3, r3, #4
 800afc4:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800afc6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800afca:	b29b      	uxth	r3, r3
 800afcc:	461a      	mov	r2, r3
 800afce:	6a38      	ldr	r0, [r7, #32]
 800afd0:	f004 f8df 	bl	800f192 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800afd4:	697b      	ldr	r3, [r7, #20]
 800afd6:	68da      	ldr	r2, [r3, #12]
 800afd8:	69bb      	ldr	r3, [r7, #24]
 800afda:	091b      	lsrs	r3, r3, #4
 800afdc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800afe0:	441a      	add	r2, r3
 800afe2:	697b      	ldr	r3, [r7, #20]
 800afe4:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800afe6:	697b      	ldr	r3, [r7, #20]
 800afe8:	699a      	ldr	r2, [r3, #24]
 800afea:	69bb      	ldr	r3, [r7, #24]
 800afec:	091b      	lsrs	r3, r3, #4
 800afee:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800aff2:	441a      	add	r2, r3
 800aff4:	697b      	ldr	r3, [r7, #20]
 800aff6:	619a      	str	r2, [r3, #24]
 800aff8:	e016      	b.n	800b028 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 800affa:	69bb      	ldr	r3, [r7, #24]
 800affc:	0c5b      	lsrs	r3, r3, #17
 800affe:	f003 030f 	and.w	r3, r3, #15
 800b002:	2b06      	cmp	r3, #6
 800b004:	d110      	bne.n	800b028 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800b00c:	2208      	movs	r2, #8
 800b00e:	4619      	mov	r1, r3
 800b010:	6a38      	ldr	r0, [r7, #32]
 800b012:	f004 f8be 	bl	800f192 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800b016:	697b      	ldr	r3, [r7, #20]
 800b018:	699a      	ldr	r2, [r3, #24]
 800b01a:	69bb      	ldr	r3, [r7, #24]
 800b01c:	091b      	lsrs	r3, r3, #4
 800b01e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b022:	441a      	add	r2, r3
 800b024:	697b      	ldr	r3, [r7, #20]
 800b026:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	681b      	ldr	r3, [r3, #0]
 800b02c:	699a      	ldr	r2, [r3, #24]
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	681b      	ldr	r3, [r3, #0]
 800b032:	f042 0210 	orr.w	r2, r2, #16
 800b036:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	681b      	ldr	r3, [r3, #0]
 800b03c:	4618      	mov	r0, r3
 800b03e:	f004 fa3c 	bl	800f4ba <USB_ReadInterrupts>
 800b042:	4603      	mov	r3, r0
 800b044:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800b048:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800b04c:	d16e      	bne.n	800b12c <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 800b04e:	2300      	movs	r3, #0
 800b050:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	681b      	ldr	r3, [r3, #0]
 800b056:	4618      	mov	r0, r3
 800b058:	f004 fa42 	bl	800f4e0 <USB_ReadDevAllOutEpInterrupt>
 800b05c:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800b05e:	e062      	b.n	800b126 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 800b060:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b062:	f003 0301 	and.w	r3, r3, #1
 800b066:	2b00      	cmp	r3, #0
 800b068:	d057      	beq.n	800b11a <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	681b      	ldr	r3, [r3, #0]
 800b06e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b070:	b2d2      	uxtb	r2, r2
 800b072:	4611      	mov	r1, r2
 800b074:	4618      	mov	r0, r3
 800b076:	f004 fa67 	bl	800f548 <USB_ReadDevOutEPInterrupt>
 800b07a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800b07c:	693b      	ldr	r3, [r7, #16]
 800b07e:	f003 0301 	and.w	r3, r3, #1
 800b082:	2b00      	cmp	r3, #0
 800b084:	d00c      	beq.n	800b0a0 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800b086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b088:	015a      	lsls	r2, r3, #5
 800b08a:	69fb      	ldr	r3, [r7, #28]
 800b08c:	4413      	add	r3, r2
 800b08e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b092:	461a      	mov	r2, r3
 800b094:	2301      	movs	r3, #1
 800b096:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800b098:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b09a:	6878      	ldr	r0, [r7, #4]
 800b09c:	f000 fdb0 	bl	800bc00 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800b0a0:	693b      	ldr	r3, [r7, #16]
 800b0a2:	f003 0308 	and.w	r3, r3, #8
 800b0a6:	2b00      	cmp	r3, #0
 800b0a8:	d00c      	beq.n	800b0c4 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800b0aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0ac:	015a      	lsls	r2, r3, #5
 800b0ae:	69fb      	ldr	r3, [r7, #28]
 800b0b0:	4413      	add	r3, r2
 800b0b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b0b6:	461a      	mov	r2, r3
 800b0b8:	2308      	movs	r3, #8
 800b0ba:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800b0bc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b0be:	6878      	ldr	r0, [r7, #4]
 800b0c0:	f000 feaa 	bl	800be18 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800b0c4:	693b      	ldr	r3, [r7, #16]
 800b0c6:	f003 0310 	and.w	r3, r3, #16
 800b0ca:	2b00      	cmp	r3, #0
 800b0cc:	d008      	beq.n	800b0e0 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800b0ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0d0:	015a      	lsls	r2, r3, #5
 800b0d2:	69fb      	ldr	r3, [r7, #28]
 800b0d4:	4413      	add	r3, r2
 800b0d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b0da:	461a      	mov	r2, r3
 800b0dc:	2310      	movs	r3, #16
 800b0de:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800b0e0:	693b      	ldr	r3, [r7, #16]
 800b0e2:	f003 0320 	and.w	r3, r3, #32
 800b0e6:	2b00      	cmp	r3, #0
 800b0e8:	d008      	beq.n	800b0fc <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800b0ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0ec:	015a      	lsls	r2, r3, #5
 800b0ee:	69fb      	ldr	r3, [r7, #28]
 800b0f0:	4413      	add	r3, r2
 800b0f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b0f6:	461a      	mov	r2, r3
 800b0f8:	2320      	movs	r3, #32
 800b0fa:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800b0fc:	693b      	ldr	r3, [r7, #16]
 800b0fe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b102:	2b00      	cmp	r3, #0
 800b104:	d009      	beq.n	800b11a <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800b106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b108:	015a      	lsls	r2, r3, #5
 800b10a:	69fb      	ldr	r3, [r7, #28]
 800b10c:	4413      	add	r3, r2
 800b10e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b112:	461a      	mov	r2, r3
 800b114:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b118:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800b11a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b11c:	3301      	adds	r3, #1
 800b11e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800b120:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b122:	085b      	lsrs	r3, r3, #1
 800b124:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800b126:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b128:	2b00      	cmp	r3, #0
 800b12a:	d199      	bne.n	800b060 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	681b      	ldr	r3, [r3, #0]
 800b130:	4618      	mov	r0, r3
 800b132:	f004 f9c2 	bl	800f4ba <USB_ReadInterrupts>
 800b136:	4603      	mov	r3, r0
 800b138:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b13c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b140:	f040 80c0 	bne.w	800b2c4 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	681b      	ldr	r3, [r3, #0]
 800b148:	4618      	mov	r0, r3
 800b14a:	f004 f9e3 	bl	800f514 <USB_ReadDevAllInEpInterrupt>
 800b14e:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800b150:	2300      	movs	r3, #0
 800b152:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800b154:	e0b2      	b.n	800b2bc <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800b156:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b158:	f003 0301 	and.w	r3, r3, #1
 800b15c:	2b00      	cmp	r3, #0
 800b15e:	f000 80a7 	beq.w	800b2b0 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	681b      	ldr	r3, [r3, #0]
 800b166:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b168:	b2d2      	uxtb	r2, r2
 800b16a:	4611      	mov	r1, r2
 800b16c:	4618      	mov	r0, r3
 800b16e:	f004 fa09 	bl	800f584 <USB_ReadDevInEPInterrupt>
 800b172:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800b174:	693b      	ldr	r3, [r7, #16]
 800b176:	f003 0301 	and.w	r3, r3, #1
 800b17a:	2b00      	cmp	r3, #0
 800b17c:	d057      	beq.n	800b22e <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800b17e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b180:	f003 030f 	and.w	r3, r3, #15
 800b184:	2201      	movs	r2, #1
 800b186:	fa02 f303 	lsl.w	r3, r2, r3
 800b18a:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800b18c:	69fb      	ldr	r3, [r7, #28]
 800b18e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b192:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b194:	68fb      	ldr	r3, [r7, #12]
 800b196:	43db      	mvns	r3, r3
 800b198:	69f9      	ldr	r1, [r7, #28]
 800b19a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b19e:	4013      	ands	r3, r2
 800b1a0:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800b1a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1a4:	015a      	lsls	r2, r3, #5
 800b1a6:	69fb      	ldr	r3, [r7, #28]
 800b1a8:	4413      	add	r3, r2
 800b1aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b1ae:	461a      	mov	r2, r3
 800b1b0:	2301      	movs	r3, #1
 800b1b2:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	691b      	ldr	r3, [r3, #16]
 800b1b8:	2b01      	cmp	r3, #1
 800b1ba:	d132      	bne.n	800b222 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800b1bc:	6879      	ldr	r1, [r7, #4]
 800b1be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b1c0:	4613      	mov	r3, r2
 800b1c2:	00db      	lsls	r3, r3, #3
 800b1c4:	1a9b      	subs	r3, r3, r2
 800b1c6:	009b      	lsls	r3, r3, #2
 800b1c8:	440b      	add	r3, r1
 800b1ca:	3348      	adds	r3, #72	; 0x48
 800b1cc:	6819      	ldr	r1, [r3, #0]
 800b1ce:	6878      	ldr	r0, [r7, #4]
 800b1d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b1d2:	4613      	mov	r3, r2
 800b1d4:	00db      	lsls	r3, r3, #3
 800b1d6:	1a9b      	subs	r3, r3, r2
 800b1d8:	009b      	lsls	r3, r3, #2
 800b1da:	4403      	add	r3, r0
 800b1dc:	3344      	adds	r3, #68	; 0x44
 800b1de:	681b      	ldr	r3, [r3, #0]
 800b1e0:	4419      	add	r1, r3
 800b1e2:	6878      	ldr	r0, [r7, #4]
 800b1e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b1e6:	4613      	mov	r3, r2
 800b1e8:	00db      	lsls	r3, r3, #3
 800b1ea:	1a9b      	subs	r3, r3, r2
 800b1ec:	009b      	lsls	r3, r3, #2
 800b1ee:	4403      	add	r3, r0
 800b1f0:	3348      	adds	r3, #72	; 0x48
 800b1f2:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800b1f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1f6:	2b00      	cmp	r3, #0
 800b1f8:	d113      	bne.n	800b222 <HAL_PCD_IRQHandler+0x31c>
 800b1fa:	6879      	ldr	r1, [r7, #4]
 800b1fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b1fe:	4613      	mov	r3, r2
 800b200:	00db      	lsls	r3, r3, #3
 800b202:	1a9b      	subs	r3, r3, r2
 800b204:	009b      	lsls	r3, r3, #2
 800b206:	440b      	add	r3, r1
 800b208:	3350      	adds	r3, #80	; 0x50
 800b20a:	681b      	ldr	r3, [r3, #0]
 800b20c:	2b00      	cmp	r3, #0
 800b20e:	d108      	bne.n	800b222 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	6818      	ldr	r0, [r3, #0]
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800b21a:	461a      	mov	r2, r3
 800b21c:	2101      	movs	r1, #1
 800b21e:	f004 fa11 	bl	800f644 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800b222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b224:	b2db      	uxtb	r3, r3
 800b226:	4619      	mov	r1, r3
 800b228:	6878      	ldr	r0, [r7, #4]
 800b22a:	f006 faf0 	bl	801180e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800b22e:	693b      	ldr	r3, [r7, #16]
 800b230:	f003 0308 	and.w	r3, r3, #8
 800b234:	2b00      	cmp	r3, #0
 800b236:	d008      	beq.n	800b24a <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800b238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b23a:	015a      	lsls	r2, r3, #5
 800b23c:	69fb      	ldr	r3, [r7, #28]
 800b23e:	4413      	add	r3, r2
 800b240:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b244:	461a      	mov	r2, r3
 800b246:	2308      	movs	r3, #8
 800b248:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800b24a:	693b      	ldr	r3, [r7, #16]
 800b24c:	f003 0310 	and.w	r3, r3, #16
 800b250:	2b00      	cmp	r3, #0
 800b252:	d008      	beq.n	800b266 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800b254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b256:	015a      	lsls	r2, r3, #5
 800b258:	69fb      	ldr	r3, [r7, #28]
 800b25a:	4413      	add	r3, r2
 800b25c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b260:	461a      	mov	r2, r3
 800b262:	2310      	movs	r3, #16
 800b264:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800b266:	693b      	ldr	r3, [r7, #16]
 800b268:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b26c:	2b00      	cmp	r3, #0
 800b26e:	d008      	beq.n	800b282 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800b270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b272:	015a      	lsls	r2, r3, #5
 800b274:	69fb      	ldr	r3, [r7, #28]
 800b276:	4413      	add	r3, r2
 800b278:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b27c:	461a      	mov	r2, r3
 800b27e:	2340      	movs	r3, #64	; 0x40
 800b280:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800b282:	693b      	ldr	r3, [r7, #16]
 800b284:	f003 0302 	and.w	r3, r3, #2
 800b288:	2b00      	cmp	r3, #0
 800b28a:	d008      	beq.n	800b29e <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800b28c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b28e:	015a      	lsls	r2, r3, #5
 800b290:	69fb      	ldr	r3, [r7, #28]
 800b292:	4413      	add	r3, r2
 800b294:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b298:	461a      	mov	r2, r3
 800b29a:	2302      	movs	r3, #2
 800b29c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800b29e:	693b      	ldr	r3, [r7, #16]
 800b2a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b2a4:	2b00      	cmp	r3, #0
 800b2a6:	d003      	beq.n	800b2b0 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800b2a8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b2aa:	6878      	ldr	r0, [r7, #4]
 800b2ac:	f000 fc1b 	bl	800bae6 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800b2b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2b2:	3301      	adds	r3, #1
 800b2b4:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800b2b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2b8:	085b      	lsrs	r3, r3, #1
 800b2ba:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800b2bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2be:	2b00      	cmp	r3, #0
 800b2c0:	f47f af49 	bne.w	800b156 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	681b      	ldr	r3, [r3, #0]
 800b2c8:	4618      	mov	r0, r3
 800b2ca:	f004 f8f6 	bl	800f4ba <USB_ReadInterrupts>
 800b2ce:	4603      	mov	r3, r0
 800b2d0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b2d4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b2d8:	d122      	bne.n	800b320 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800b2da:	69fb      	ldr	r3, [r7, #28]
 800b2dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b2e0:	685b      	ldr	r3, [r3, #4]
 800b2e2:	69fa      	ldr	r2, [r7, #28]
 800b2e4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b2e8:	f023 0301 	bic.w	r3, r3, #1
 800b2ec:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 800b2f4:	2b01      	cmp	r3, #1
 800b2f6:	d108      	bne.n	800b30a <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	2200      	movs	r2, #0
 800b2fc:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800b300:	2100      	movs	r1, #0
 800b302:	6878      	ldr	r0, [r7, #4]
 800b304:	f000 fe26 	bl	800bf54 <HAL_PCDEx_LPM_Callback>
 800b308:	e002      	b.n	800b310 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800b30a:	6878      	ldr	r0, [r7, #4]
 800b30c:	f006 faec 	bl	80118e8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	681b      	ldr	r3, [r3, #0]
 800b314:	695a      	ldr	r2, [r3, #20]
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	681b      	ldr	r3, [r3, #0]
 800b31a:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800b31e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	681b      	ldr	r3, [r3, #0]
 800b324:	4618      	mov	r0, r3
 800b326:	f004 f8c8 	bl	800f4ba <USB_ReadInterrupts>
 800b32a:	4603      	mov	r3, r0
 800b32c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b330:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b334:	d112      	bne.n	800b35c <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800b336:	69fb      	ldr	r3, [r7, #28]
 800b338:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b33c:	689b      	ldr	r3, [r3, #8]
 800b33e:	f003 0301 	and.w	r3, r3, #1
 800b342:	2b01      	cmp	r3, #1
 800b344:	d102      	bne.n	800b34c <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800b346:	6878      	ldr	r0, [r7, #4]
 800b348:	f006 faa8 	bl	801189c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	681b      	ldr	r3, [r3, #0]
 800b350:	695a      	ldr	r2, [r3, #20]
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	681b      	ldr	r3, [r3, #0]
 800b356:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800b35a:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	681b      	ldr	r3, [r3, #0]
 800b360:	4618      	mov	r0, r3
 800b362:	f004 f8aa 	bl	800f4ba <USB_ReadInterrupts>
 800b366:	4603      	mov	r3, r0
 800b368:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800b36c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b370:	f040 80c7 	bne.w	800b502 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800b374:	69fb      	ldr	r3, [r7, #28]
 800b376:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b37a:	685b      	ldr	r3, [r3, #4]
 800b37c:	69fa      	ldr	r2, [r7, #28]
 800b37e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b382:	f023 0301 	bic.w	r3, r3, #1
 800b386:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	681b      	ldr	r3, [r3, #0]
 800b38c:	2110      	movs	r1, #16
 800b38e:	4618      	mov	r0, r3
 800b390:	f003 f944 	bl	800e61c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800b394:	2300      	movs	r3, #0
 800b396:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b398:	e056      	b.n	800b448 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800b39a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b39c:	015a      	lsls	r2, r3, #5
 800b39e:	69fb      	ldr	r3, [r7, #28]
 800b3a0:	4413      	add	r3, r2
 800b3a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b3a6:	461a      	mov	r2, r3
 800b3a8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800b3ac:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800b3ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3b0:	015a      	lsls	r2, r3, #5
 800b3b2:	69fb      	ldr	r3, [r7, #28]
 800b3b4:	4413      	add	r3, r2
 800b3b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b3ba:	681b      	ldr	r3, [r3, #0]
 800b3bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b3be:	0151      	lsls	r1, r2, #5
 800b3c0:	69fa      	ldr	r2, [r7, #28]
 800b3c2:	440a      	add	r2, r1
 800b3c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b3c8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b3cc:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800b3ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3d0:	015a      	lsls	r2, r3, #5
 800b3d2:	69fb      	ldr	r3, [r7, #28]
 800b3d4:	4413      	add	r3, r2
 800b3d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b3da:	681b      	ldr	r3, [r3, #0]
 800b3dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b3de:	0151      	lsls	r1, r2, #5
 800b3e0:	69fa      	ldr	r2, [r7, #28]
 800b3e2:	440a      	add	r2, r1
 800b3e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b3e8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800b3ec:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800b3ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3f0:	015a      	lsls	r2, r3, #5
 800b3f2:	69fb      	ldr	r3, [r7, #28]
 800b3f4:	4413      	add	r3, r2
 800b3f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b3fa:	461a      	mov	r2, r3
 800b3fc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800b400:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800b402:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b404:	015a      	lsls	r2, r3, #5
 800b406:	69fb      	ldr	r3, [r7, #28]
 800b408:	4413      	add	r3, r2
 800b40a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b40e:	681b      	ldr	r3, [r3, #0]
 800b410:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b412:	0151      	lsls	r1, r2, #5
 800b414:	69fa      	ldr	r2, [r7, #28]
 800b416:	440a      	add	r2, r1
 800b418:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b41c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b420:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800b422:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b424:	015a      	lsls	r2, r3, #5
 800b426:	69fb      	ldr	r3, [r7, #28]
 800b428:	4413      	add	r3, r2
 800b42a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b42e:	681b      	ldr	r3, [r3, #0]
 800b430:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b432:	0151      	lsls	r1, r2, #5
 800b434:	69fa      	ldr	r2, [r7, #28]
 800b436:	440a      	add	r2, r1
 800b438:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b43c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800b440:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800b442:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b444:	3301      	adds	r3, #1
 800b446:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	685b      	ldr	r3, [r3, #4]
 800b44c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b44e:	429a      	cmp	r2, r3
 800b450:	d3a3      	bcc.n	800b39a <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800b452:	69fb      	ldr	r3, [r7, #28]
 800b454:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b458:	69db      	ldr	r3, [r3, #28]
 800b45a:	69fa      	ldr	r2, [r7, #28]
 800b45c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b460:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800b464:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b46a:	2b00      	cmp	r3, #0
 800b46c:	d016      	beq.n	800b49c <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800b46e:	69fb      	ldr	r3, [r7, #28]
 800b470:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b474:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b478:	69fa      	ldr	r2, [r7, #28]
 800b47a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b47e:	f043 030b 	orr.w	r3, r3, #11
 800b482:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800b486:	69fb      	ldr	r3, [r7, #28]
 800b488:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b48c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b48e:	69fa      	ldr	r2, [r7, #28]
 800b490:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b494:	f043 030b 	orr.w	r3, r3, #11
 800b498:	6453      	str	r3, [r2, #68]	; 0x44
 800b49a:	e015      	b.n	800b4c8 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800b49c:	69fb      	ldr	r3, [r7, #28]
 800b49e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b4a2:	695b      	ldr	r3, [r3, #20]
 800b4a4:	69fa      	ldr	r2, [r7, #28]
 800b4a6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b4aa:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800b4ae:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800b4b2:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800b4b4:	69fb      	ldr	r3, [r7, #28]
 800b4b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b4ba:	691b      	ldr	r3, [r3, #16]
 800b4bc:	69fa      	ldr	r2, [r7, #28]
 800b4be:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b4c2:	f043 030b 	orr.w	r3, r3, #11
 800b4c6:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800b4c8:	69fb      	ldr	r3, [r7, #28]
 800b4ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b4ce:	681b      	ldr	r3, [r3, #0]
 800b4d0:	69fa      	ldr	r2, [r7, #28]
 800b4d2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b4d6:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800b4da:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	6818      	ldr	r0, [r3, #0]
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	691b      	ldr	r3, [r3, #16]
 800b4e4:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800b4ec:	461a      	mov	r2, r3
 800b4ee:	f004 f8a9 	bl	800f644 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	681b      	ldr	r3, [r3, #0]
 800b4f6:	695a      	ldr	r2, [r3, #20]
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	681b      	ldr	r3, [r3, #0]
 800b4fc:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800b500:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	681b      	ldr	r3, [r3, #0]
 800b506:	4618      	mov	r0, r3
 800b508:	f003 ffd7 	bl	800f4ba <USB_ReadInterrupts>
 800b50c:	4603      	mov	r3, r0
 800b50e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b512:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b516:	d124      	bne.n	800b562 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	681b      	ldr	r3, [r3, #0]
 800b51c:	4618      	mov	r0, r3
 800b51e:	f004 f86d 	bl	800f5fc <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	681b      	ldr	r3, [r3, #0]
 800b526:	4618      	mov	r0, r3
 800b528:	f003 f8d5 	bl	800e6d6 <USB_GetDevSpeed>
 800b52c:	4603      	mov	r3, r0
 800b52e:	461a      	mov	r2, r3
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	681c      	ldr	r4, [r3, #0]
 800b538:	f001 f93c 	bl	800c7b4 <HAL_RCC_GetHCLKFreq>
 800b53c:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800b542:	b2db      	uxtb	r3, r3
 800b544:	461a      	mov	r2, r3
 800b546:	4620      	mov	r0, r4
 800b548:	f002 fdf4 	bl	800e134 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800b54c:	6878      	ldr	r0, [r7, #4]
 800b54e:	f006 f986 	bl	801185e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	681b      	ldr	r3, [r3, #0]
 800b556:	695a      	ldr	r2, [r3, #20]
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	681b      	ldr	r3, [r3, #0]
 800b55c:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800b560:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	681b      	ldr	r3, [r3, #0]
 800b566:	4618      	mov	r0, r3
 800b568:	f003 ffa7 	bl	800f4ba <USB_ReadInterrupts>
 800b56c:	4603      	mov	r3, r0
 800b56e:	f003 0308 	and.w	r3, r3, #8
 800b572:	2b08      	cmp	r3, #8
 800b574:	d10a      	bne.n	800b58c <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800b576:	6878      	ldr	r0, [r7, #4]
 800b578:	f006 f963 	bl	8011842 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	681b      	ldr	r3, [r3, #0]
 800b580:	695a      	ldr	r2, [r3, #20]
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	681b      	ldr	r3, [r3, #0]
 800b586:	f002 0208 	and.w	r2, r2, #8
 800b58a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	681b      	ldr	r3, [r3, #0]
 800b590:	4618      	mov	r0, r3
 800b592:	f003 ff92 	bl	800f4ba <USB_ReadInterrupts>
 800b596:	4603      	mov	r3, r0
 800b598:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b59c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b5a0:	d10f      	bne.n	800b5c2 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800b5a2:	2300      	movs	r3, #0
 800b5a4:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800b5a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5a8:	b2db      	uxtb	r3, r3
 800b5aa:	4619      	mov	r1, r3
 800b5ac:	6878      	ldr	r0, [r7, #4]
 800b5ae:	f006 f9bb 	bl	8011928 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	681b      	ldr	r3, [r3, #0]
 800b5b6:	695a      	ldr	r2, [r3, #20]
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	681b      	ldr	r3, [r3, #0]
 800b5bc:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800b5c0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	681b      	ldr	r3, [r3, #0]
 800b5c6:	4618      	mov	r0, r3
 800b5c8:	f003 ff77 	bl	800f4ba <USB_ReadInterrupts>
 800b5cc:	4603      	mov	r3, r0
 800b5ce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b5d2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b5d6:	d10f      	bne.n	800b5f8 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800b5d8:	2300      	movs	r3, #0
 800b5da:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800b5dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5de:	b2db      	uxtb	r3, r3
 800b5e0:	4619      	mov	r1, r3
 800b5e2:	6878      	ldr	r0, [r7, #4]
 800b5e4:	f006 f98e 	bl	8011904 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	681b      	ldr	r3, [r3, #0]
 800b5ec:	695a      	ldr	r2, [r3, #20]
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	681b      	ldr	r3, [r3, #0]
 800b5f2:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800b5f6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	681b      	ldr	r3, [r3, #0]
 800b5fc:	4618      	mov	r0, r3
 800b5fe:	f003 ff5c 	bl	800f4ba <USB_ReadInterrupts>
 800b602:	4603      	mov	r3, r0
 800b604:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800b608:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b60c:	d10a      	bne.n	800b624 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800b60e:	6878      	ldr	r0, [r7, #4]
 800b610:	f006 f99c 	bl	801194c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	681b      	ldr	r3, [r3, #0]
 800b618:	695a      	ldr	r2, [r3, #20]
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	681b      	ldr	r3, [r3, #0]
 800b61e:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800b622:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	681b      	ldr	r3, [r3, #0]
 800b628:	4618      	mov	r0, r3
 800b62a:	f003 ff46 	bl	800f4ba <USB_ReadInterrupts>
 800b62e:	4603      	mov	r3, r0
 800b630:	f003 0304 	and.w	r3, r3, #4
 800b634:	2b04      	cmp	r3, #4
 800b636:	d115      	bne.n	800b664 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	681b      	ldr	r3, [r3, #0]
 800b63c:	685b      	ldr	r3, [r3, #4]
 800b63e:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800b640:	69bb      	ldr	r3, [r7, #24]
 800b642:	f003 0304 	and.w	r3, r3, #4
 800b646:	2b00      	cmp	r3, #0
 800b648:	d002      	beq.n	800b650 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800b64a:	6878      	ldr	r0, [r7, #4]
 800b64c:	f006 f98c 	bl	8011968 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	681b      	ldr	r3, [r3, #0]
 800b654:	6859      	ldr	r1, [r3, #4]
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	681b      	ldr	r3, [r3, #0]
 800b65a:	69ba      	ldr	r2, [r7, #24]
 800b65c:	430a      	orrs	r2, r1
 800b65e:	605a      	str	r2, [r3, #4]
 800b660:	e000      	b.n	800b664 <HAL_PCD_IRQHandler+0x75e>
      return;
 800b662:	bf00      	nop
    }
  }
}
 800b664:	3734      	adds	r7, #52	; 0x34
 800b666:	46bd      	mov	sp, r7
 800b668:	bd90      	pop	{r4, r7, pc}

0800b66a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800b66a:	b580      	push	{r7, lr}
 800b66c:	b082      	sub	sp, #8
 800b66e:	af00      	add	r7, sp, #0
 800b670:	6078      	str	r0, [r7, #4]
 800b672:	460b      	mov	r3, r1
 800b674:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800b67c:	2b01      	cmp	r3, #1
 800b67e:	d101      	bne.n	800b684 <HAL_PCD_SetAddress+0x1a>
 800b680:	2302      	movs	r3, #2
 800b682:	e013      	b.n	800b6ac <HAL_PCD_SetAddress+0x42>
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	2201      	movs	r2, #1
 800b688:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	78fa      	ldrb	r2, [r7, #3]
 800b690:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	681b      	ldr	r3, [r3, #0]
 800b698:	78fa      	ldrb	r2, [r7, #3]
 800b69a:	4611      	mov	r1, r2
 800b69c:	4618      	mov	r0, r3
 800b69e:	f003 fea4 	bl	800f3ea <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	2200      	movs	r2, #0
 800b6a6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800b6aa:	2300      	movs	r3, #0
}
 800b6ac:	4618      	mov	r0, r3
 800b6ae:	3708      	adds	r7, #8
 800b6b0:	46bd      	mov	sp, r7
 800b6b2:	bd80      	pop	{r7, pc}

0800b6b4 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800b6b4:	b580      	push	{r7, lr}
 800b6b6:	b084      	sub	sp, #16
 800b6b8:	af00      	add	r7, sp, #0
 800b6ba:	6078      	str	r0, [r7, #4]
 800b6bc:	4608      	mov	r0, r1
 800b6be:	4611      	mov	r1, r2
 800b6c0:	461a      	mov	r2, r3
 800b6c2:	4603      	mov	r3, r0
 800b6c4:	70fb      	strb	r3, [r7, #3]
 800b6c6:	460b      	mov	r3, r1
 800b6c8:	803b      	strh	r3, [r7, #0]
 800b6ca:	4613      	mov	r3, r2
 800b6cc:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800b6ce:	2300      	movs	r3, #0
 800b6d0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800b6d2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b6d6:	2b00      	cmp	r3, #0
 800b6d8:	da0f      	bge.n	800b6fa <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800b6da:	78fb      	ldrb	r3, [r7, #3]
 800b6dc:	f003 020f 	and.w	r2, r3, #15
 800b6e0:	4613      	mov	r3, r2
 800b6e2:	00db      	lsls	r3, r3, #3
 800b6e4:	1a9b      	subs	r3, r3, r2
 800b6e6:	009b      	lsls	r3, r3, #2
 800b6e8:	3338      	adds	r3, #56	; 0x38
 800b6ea:	687a      	ldr	r2, [r7, #4]
 800b6ec:	4413      	add	r3, r2
 800b6ee:	3304      	adds	r3, #4
 800b6f0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800b6f2:	68fb      	ldr	r3, [r7, #12]
 800b6f4:	2201      	movs	r2, #1
 800b6f6:	705a      	strb	r2, [r3, #1]
 800b6f8:	e00f      	b.n	800b71a <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800b6fa:	78fb      	ldrb	r3, [r7, #3]
 800b6fc:	f003 020f 	and.w	r2, r3, #15
 800b700:	4613      	mov	r3, r2
 800b702:	00db      	lsls	r3, r3, #3
 800b704:	1a9b      	subs	r3, r3, r2
 800b706:	009b      	lsls	r3, r3, #2
 800b708:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800b70c:	687a      	ldr	r2, [r7, #4]
 800b70e:	4413      	add	r3, r2
 800b710:	3304      	adds	r3, #4
 800b712:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800b714:	68fb      	ldr	r3, [r7, #12]
 800b716:	2200      	movs	r2, #0
 800b718:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800b71a:	78fb      	ldrb	r3, [r7, #3]
 800b71c:	f003 030f 	and.w	r3, r3, #15
 800b720:	b2da      	uxtb	r2, r3
 800b722:	68fb      	ldr	r3, [r7, #12]
 800b724:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800b726:	883a      	ldrh	r2, [r7, #0]
 800b728:	68fb      	ldr	r3, [r7, #12]
 800b72a:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800b72c:	68fb      	ldr	r3, [r7, #12]
 800b72e:	78ba      	ldrb	r2, [r7, #2]
 800b730:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800b732:	68fb      	ldr	r3, [r7, #12]
 800b734:	785b      	ldrb	r3, [r3, #1]
 800b736:	2b00      	cmp	r3, #0
 800b738:	d004      	beq.n	800b744 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800b73a:	68fb      	ldr	r3, [r7, #12]
 800b73c:	781b      	ldrb	r3, [r3, #0]
 800b73e:	b29a      	uxth	r2, r3
 800b740:	68fb      	ldr	r3, [r7, #12]
 800b742:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800b744:	78bb      	ldrb	r3, [r7, #2]
 800b746:	2b02      	cmp	r3, #2
 800b748:	d102      	bne.n	800b750 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800b74a:	68fb      	ldr	r3, [r7, #12]
 800b74c:	2200      	movs	r2, #0
 800b74e:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800b756:	2b01      	cmp	r3, #1
 800b758:	d101      	bne.n	800b75e <HAL_PCD_EP_Open+0xaa>
 800b75a:	2302      	movs	r3, #2
 800b75c:	e00e      	b.n	800b77c <HAL_PCD_EP_Open+0xc8>
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	2201      	movs	r2, #1
 800b762:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	681b      	ldr	r3, [r3, #0]
 800b76a:	68f9      	ldr	r1, [r7, #12]
 800b76c:	4618      	mov	r0, r3
 800b76e:	f002 ffd7 	bl	800e720 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	2200      	movs	r2, #0
 800b776:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 800b77a:	7afb      	ldrb	r3, [r7, #11]
}
 800b77c:	4618      	mov	r0, r3
 800b77e:	3710      	adds	r7, #16
 800b780:	46bd      	mov	sp, r7
 800b782:	bd80      	pop	{r7, pc}

0800b784 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800b784:	b580      	push	{r7, lr}
 800b786:	b084      	sub	sp, #16
 800b788:	af00      	add	r7, sp, #0
 800b78a:	6078      	str	r0, [r7, #4]
 800b78c:	460b      	mov	r3, r1
 800b78e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800b790:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b794:	2b00      	cmp	r3, #0
 800b796:	da0f      	bge.n	800b7b8 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800b798:	78fb      	ldrb	r3, [r7, #3]
 800b79a:	f003 020f 	and.w	r2, r3, #15
 800b79e:	4613      	mov	r3, r2
 800b7a0:	00db      	lsls	r3, r3, #3
 800b7a2:	1a9b      	subs	r3, r3, r2
 800b7a4:	009b      	lsls	r3, r3, #2
 800b7a6:	3338      	adds	r3, #56	; 0x38
 800b7a8:	687a      	ldr	r2, [r7, #4]
 800b7aa:	4413      	add	r3, r2
 800b7ac:	3304      	adds	r3, #4
 800b7ae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800b7b0:	68fb      	ldr	r3, [r7, #12]
 800b7b2:	2201      	movs	r2, #1
 800b7b4:	705a      	strb	r2, [r3, #1]
 800b7b6:	e00f      	b.n	800b7d8 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800b7b8:	78fb      	ldrb	r3, [r7, #3]
 800b7ba:	f003 020f 	and.w	r2, r3, #15
 800b7be:	4613      	mov	r3, r2
 800b7c0:	00db      	lsls	r3, r3, #3
 800b7c2:	1a9b      	subs	r3, r3, r2
 800b7c4:	009b      	lsls	r3, r3, #2
 800b7c6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800b7ca:	687a      	ldr	r2, [r7, #4]
 800b7cc:	4413      	add	r3, r2
 800b7ce:	3304      	adds	r3, #4
 800b7d0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800b7d2:	68fb      	ldr	r3, [r7, #12]
 800b7d4:	2200      	movs	r2, #0
 800b7d6:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800b7d8:	78fb      	ldrb	r3, [r7, #3]
 800b7da:	f003 030f 	and.w	r3, r3, #15
 800b7de:	b2da      	uxtb	r2, r3
 800b7e0:	68fb      	ldr	r3, [r7, #12]
 800b7e2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800b7ea:	2b01      	cmp	r3, #1
 800b7ec:	d101      	bne.n	800b7f2 <HAL_PCD_EP_Close+0x6e>
 800b7ee:	2302      	movs	r3, #2
 800b7f0:	e00e      	b.n	800b810 <HAL_PCD_EP_Close+0x8c>
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	2201      	movs	r2, #1
 800b7f6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	681b      	ldr	r3, [r3, #0]
 800b7fe:	68f9      	ldr	r1, [r7, #12]
 800b800:	4618      	mov	r0, r3
 800b802:	f003 f815 	bl	800e830 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	2200      	movs	r2, #0
 800b80a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800b80e:	2300      	movs	r3, #0
}
 800b810:	4618      	mov	r0, r3
 800b812:	3710      	adds	r7, #16
 800b814:	46bd      	mov	sp, r7
 800b816:	bd80      	pop	{r7, pc}

0800b818 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800b818:	b580      	push	{r7, lr}
 800b81a:	b086      	sub	sp, #24
 800b81c:	af00      	add	r7, sp, #0
 800b81e:	60f8      	str	r0, [r7, #12]
 800b820:	607a      	str	r2, [r7, #4]
 800b822:	603b      	str	r3, [r7, #0]
 800b824:	460b      	mov	r3, r1
 800b826:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800b828:	7afb      	ldrb	r3, [r7, #11]
 800b82a:	f003 020f 	and.w	r2, r3, #15
 800b82e:	4613      	mov	r3, r2
 800b830:	00db      	lsls	r3, r3, #3
 800b832:	1a9b      	subs	r3, r3, r2
 800b834:	009b      	lsls	r3, r3, #2
 800b836:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800b83a:	68fa      	ldr	r2, [r7, #12]
 800b83c:	4413      	add	r3, r2
 800b83e:	3304      	adds	r3, #4
 800b840:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800b842:	697b      	ldr	r3, [r7, #20]
 800b844:	687a      	ldr	r2, [r7, #4]
 800b846:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800b848:	697b      	ldr	r3, [r7, #20]
 800b84a:	683a      	ldr	r2, [r7, #0]
 800b84c:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800b84e:	697b      	ldr	r3, [r7, #20]
 800b850:	2200      	movs	r2, #0
 800b852:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 800b854:	697b      	ldr	r3, [r7, #20]
 800b856:	2200      	movs	r2, #0
 800b858:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800b85a:	7afb      	ldrb	r3, [r7, #11]
 800b85c:	f003 030f 	and.w	r3, r3, #15
 800b860:	b2da      	uxtb	r2, r3
 800b862:	697b      	ldr	r3, [r7, #20]
 800b864:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800b866:	68fb      	ldr	r3, [r7, #12]
 800b868:	691b      	ldr	r3, [r3, #16]
 800b86a:	2b01      	cmp	r3, #1
 800b86c:	d102      	bne.n	800b874 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800b86e:	687a      	ldr	r2, [r7, #4]
 800b870:	697b      	ldr	r3, [r7, #20]
 800b872:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800b874:	7afb      	ldrb	r3, [r7, #11]
 800b876:	f003 030f 	and.w	r3, r3, #15
 800b87a:	2b00      	cmp	r3, #0
 800b87c:	d109      	bne.n	800b892 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800b87e:	68fb      	ldr	r3, [r7, #12]
 800b880:	6818      	ldr	r0, [r3, #0]
 800b882:	68fb      	ldr	r3, [r7, #12]
 800b884:	691b      	ldr	r3, [r3, #16]
 800b886:	b2db      	uxtb	r3, r3
 800b888:	461a      	mov	r2, r3
 800b88a:	6979      	ldr	r1, [r7, #20]
 800b88c:	f003 faf0 	bl	800ee70 <USB_EP0StartXfer>
 800b890:	e008      	b.n	800b8a4 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800b892:	68fb      	ldr	r3, [r7, #12]
 800b894:	6818      	ldr	r0, [r3, #0]
 800b896:	68fb      	ldr	r3, [r7, #12]
 800b898:	691b      	ldr	r3, [r3, #16]
 800b89a:	b2db      	uxtb	r3, r3
 800b89c:	461a      	mov	r2, r3
 800b89e:	6979      	ldr	r1, [r7, #20]
 800b8a0:	f003 f8a2 	bl	800e9e8 <USB_EPStartXfer>
  }

  return HAL_OK;
 800b8a4:	2300      	movs	r3, #0
}
 800b8a6:	4618      	mov	r0, r3
 800b8a8:	3718      	adds	r7, #24
 800b8aa:	46bd      	mov	sp, r7
 800b8ac:	bd80      	pop	{r7, pc}

0800b8ae <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800b8ae:	b480      	push	{r7}
 800b8b0:	b083      	sub	sp, #12
 800b8b2:	af00      	add	r7, sp, #0
 800b8b4:	6078      	str	r0, [r7, #4]
 800b8b6:	460b      	mov	r3, r1
 800b8b8:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800b8ba:	78fb      	ldrb	r3, [r7, #3]
 800b8bc:	f003 020f 	and.w	r2, r3, #15
 800b8c0:	6879      	ldr	r1, [r7, #4]
 800b8c2:	4613      	mov	r3, r2
 800b8c4:	00db      	lsls	r3, r3, #3
 800b8c6:	1a9b      	subs	r3, r3, r2
 800b8c8:	009b      	lsls	r3, r3, #2
 800b8ca:	440b      	add	r3, r1
 800b8cc:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800b8d0:	681b      	ldr	r3, [r3, #0]
}
 800b8d2:	4618      	mov	r0, r3
 800b8d4:	370c      	adds	r7, #12
 800b8d6:	46bd      	mov	sp, r7
 800b8d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8dc:	4770      	bx	lr

0800b8de <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800b8de:	b580      	push	{r7, lr}
 800b8e0:	b086      	sub	sp, #24
 800b8e2:	af00      	add	r7, sp, #0
 800b8e4:	60f8      	str	r0, [r7, #12]
 800b8e6:	607a      	str	r2, [r7, #4]
 800b8e8:	603b      	str	r3, [r7, #0]
 800b8ea:	460b      	mov	r3, r1
 800b8ec:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800b8ee:	7afb      	ldrb	r3, [r7, #11]
 800b8f0:	f003 020f 	and.w	r2, r3, #15
 800b8f4:	4613      	mov	r3, r2
 800b8f6:	00db      	lsls	r3, r3, #3
 800b8f8:	1a9b      	subs	r3, r3, r2
 800b8fa:	009b      	lsls	r3, r3, #2
 800b8fc:	3338      	adds	r3, #56	; 0x38
 800b8fe:	68fa      	ldr	r2, [r7, #12]
 800b900:	4413      	add	r3, r2
 800b902:	3304      	adds	r3, #4
 800b904:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800b906:	697b      	ldr	r3, [r7, #20]
 800b908:	687a      	ldr	r2, [r7, #4]
 800b90a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800b90c:	697b      	ldr	r3, [r7, #20]
 800b90e:	683a      	ldr	r2, [r7, #0]
 800b910:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800b912:	697b      	ldr	r3, [r7, #20]
 800b914:	2200      	movs	r2, #0
 800b916:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 800b918:	697b      	ldr	r3, [r7, #20]
 800b91a:	2201      	movs	r2, #1
 800b91c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800b91e:	7afb      	ldrb	r3, [r7, #11]
 800b920:	f003 030f 	and.w	r3, r3, #15
 800b924:	b2da      	uxtb	r2, r3
 800b926:	697b      	ldr	r3, [r7, #20]
 800b928:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800b92a:	68fb      	ldr	r3, [r7, #12]
 800b92c:	691b      	ldr	r3, [r3, #16]
 800b92e:	2b01      	cmp	r3, #1
 800b930:	d102      	bne.n	800b938 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800b932:	687a      	ldr	r2, [r7, #4]
 800b934:	697b      	ldr	r3, [r7, #20]
 800b936:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800b938:	7afb      	ldrb	r3, [r7, #11]
 800b93a:	f003 030f 	and.w	r3, r3, #15
 800b93e:	2b00      	cmp	r3, #0
 800b940:	d109      	bne.n	800b956 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800b942:	68fb      	ldr	r3, [r7, #12]
 800b944:	6818      	ldr	r0, [r3, #0]
 800b946:	68fb      	ldr	r3, [r7, #12]
 800b948:	691b      	ldr	r3, [r3, #16]
 800b94a:	b2db      	uxtb	r3, r3
 800b94c:	461a      	mov	r2, r3
 800b94e:	6979      	ldr	r1, [r7, #20]
 800b950:	f003 fa8e 	bl	800ee70 <USB_EP0StartXfer>
 800b954:	e008      	b.n	800b968 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800b956:	68fb      	ldr	r3, [r7, #12]
 800b958:	6818      	ldr	r0, [r3, #0]
 800b95a:	68fb      	ldr	r3, [r7, #12]
 800b95c:	691b      	ldr	r3, [r3, #16]
 800b95e:	b2db      	uxtb	r3, r3
 800b960:	461a      	mov	r2, r3
 800b962:	6979      	ldr	r1, [r7, #20]
 800b964:	f003 f840 	bl	800e9e8 <USB_EPStartXfer>
  }

  return HAL_OK;
 800b968:	2300      	movs	r3, #0
}
 800b96a:	4618      	mov	r0, r3
 800b96c:	3718      	adds	r7, #24
 800b96e:	46bd      	mov	sp, r7
 800b970:	bd80      	pop	{r7, pc}

0800b972 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800b972:	b580      	push	{r7, lr}
 800b974:	b084      	sub	sp, #16
 800b976:	af00      	add	r7, sp, #0
 800b978:	6078      	str	r0, [r7, #4]
 800b97a:	460b      	mov	r3, r1
 800b97c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800b97e:	78fb      	ldrb	r3, [r7, #3]
 800b980:	f003 020f 	and.w	r2, r3, #15
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	685b      	ldr	r3, [r3, #4]
 800b988:	429a      	cmp	r2, r3
 800b98a:	d901      	bls.n	800b990 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800b98c:	2301      	movs	r3, #1
 800b98e:	e050      	b.n	800ba32 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800b990:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b994:	2b00      	cmp	r3, #0
 800b996:	da0f      	bge.n	800b9b8 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800b998:	78fb      	ldrb	r3, [r7, #3]
 800b99a:	f003 020f 	and.w	r2, r3, #15
 800b99e:	4613      	mov	r3, r2
 800b9a0:	00db      	lsls	r3, r3, #3
 800b9a2:	1a9b      	subs	r3, r3, r2
 800b9a4:	009b      	lsls	r3, r3, #2
 800b9a6:	3338      	adds	r3, #56	; 0x38
 800b9a8:	687a      	ldr	r2, [r7, #4]
 800b9aa:	4413      	add	r3, r2
 800b9ac:	3304      	adds	r3, #4
 800b9ae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800b9b0:	68fb      	ldr	r3, [r7, #12]
 800b9b2:	2201      	movs	r2, #1
 800b9b4:	705a      	strb	r2, [r3, #1]
 800b9b6:	e00d      	b.n	800b9d4 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800b9b8:	78fa      	ldrb	r2, [r7, #3]
 800b9ba:	4613      	mov	r3, r2
 800b9bc:	00db      	lsls	r3, r3, #3
 800b9be:	1a9b      	subs	r3, r3, r2
 800b9c0:	009b      	lsls	r3, r3, #2
 800b9c2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800b9c6:	687a      	ldr	r2, [r7, #4]
 800b9c8:	4413      	add	r3, r2
 800b9ca:	3304      	adds	r3, #4
 800b9cc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800b9ce:	68fb      	ldr	r3, [r7, #12]
 800b9d0:	2200      	movs	r2, #0
 800b9d2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800b9d4:	68fb      	ldr	r3, [r7, #12]
 800b9d6:	2201      	movs	r2, #1
 800b9d8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800b9da:	78fb      	ldrb	r3, [r7, #3]
 800b9dc:	f003 030f 	and.w	r3, r3, #15
 800b9e0:	b2da      	uxtb	r2, r3
 800b9e2:	68fb      	ldr	r3, [r7, #12]
 800b9e4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800b9ec:	2b01      	cmp	r3, #1
 800b9ee:	d101      	bne.n	800b9f4 <HAL_PCD_EP_SetStall+0x82>
 800b9f0:	2302      	movs	r3, #2
 800b9f2:	e01e      	b.n	800ba32 <HAL_PCD_EP_SetStall+0xc0>
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	2201      	movs	r2, #1
 800b9f8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	681b      	ldr	r3, [r3, #0]
 800ba00:	68f9      	ldr	r1, [r7, #12]
 800ba02:	4618      	mov	r0, r3
 800ba04:	f003 fc1d 	bl	800f242 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800ba08:	78fb      	ldrb	r3, [r7, #3]
 800ba0a:	f003 030f 	and.w	r3, r3, #15
 800ba0e:	2b00      	cmp	r3, #0
 800ba10:	d10a      	bne.n	800ba28 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	6818      	ldr	r0, [r3, #0]
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	691b      	ldr	r3, [r3, #16]
 800ba1a:	b2d9      	uxtb	r1, r3
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800ba22:	461a      	mov	r2, r3
 800ba24:	f003 fe0e 	bl	800f644 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	2200      	movs	r2, #0
 800ba2c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800ba30:	2300      	movs	r3, #0
}
 800ba32:	4618      	mov	r0, r3
 800ba34:	3710      	adds	r7, #16
 800ba36:	46bd      	mov	sp, r7
 800ba38:	bd80      	pop	{r7, pc}

0800ba3a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800ba3a:	b580      	push	{r7, lr}
 800ba3c:	b084      	sub	sp, #16
 800ba3e:	af00      	add	r7, sp, #0
 800ba40:	6078      	str	r0, [r7, #4]
 800ba42:	460b      	mov	r3, r1
 800ba44:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800ba46:	78fb      	ldrb	r3, [r7, #3]
 800ba48:	f003 020f 	and.w	r2, r3, #15
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	685b      	ldr	r3, [r3, #4]
 800ba50:	429a      	cmp	r2, r3
 800ba52:	d901      	bls.n	800ba58 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800ba54:	2301      	movs	r3, #1
 800ba56:	e042      	b.n	800bade <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800ba58:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ba5c:	2b00      	cmp	r3, #0
 800ba5e:	da0f      	bge.n	800ba80 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800ba60:	78fb      	ldrb	r3, [r7, #3]
 800ba62:	f003 020f 	and.w	r2, r3, #15
 800ba66:	4613      	mov	r3, r2
 800ba68:	00db      	lsls	r3, r3, #3
 800ba6a:	1a9b      	subs	r3, r3, r2
 800ba6c:	009b      	lsls	r3, r3, #2
 800ba6e:	3338      	adds	r3, #56	; 0x38
 800ba70:	687a      	ldr	r2, [r7, #4]
 800ba72:	4413      	add	r3, r2
 800ba74:	3304      	adds	r3, #4
 800ba76:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800ba78:	68fb      	ldr	r3, [r7, #12]
 800ba7a:	2201      	movs	r2, #1
 800ba7c:	705a      	strb	r2, [r3, #1]
 800ba7e:	e00f      	b.n	800baa0 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800ba80:	78fb      	ldrb	r3, [r7, #3]
 800ba82:	f003 020f 	and.w	r2, r3, #15
 800ba86:	4613      	mov	r3, r2
 800ba88:	00db      	lsls	r3, r3, #3
 800ba8a:	1a9b      	subs	r3, r3, r2
 800ba8c:	009b      	lsls	r3, r3, #2
 800ba8e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800ba92:	687a      	ldr	r2, [r7, #4]
 800ba94:	4413      	add	r3, r2
 800ba96:	3304      	adds	r3, #4
 800ba98:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800ba9a:	68fb      	ldr	r3, [r7, #12]
 800ba9c:	2200      	movs	r2, #0
 800ba9e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800baa0:	68fb      	ldr	r3, [r7, #12]
 800baa2:	2200      	movs	r2, #0
 800baa4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800baa6:	78fb      	ldrb	r3, [r7, #3]
 800baa8:	f003 030f 	and.w	r3, r3, #15
 800baac:	b2da      	uxtb	r2, r3
 800baae:	68fb      	ldr	r3, [r7, #12]
 800bab0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800bab8:	2b01      	cmp	r3, #1
 800baba:	d101      	bne.n	800bac0 <HAL_PCD_EP_ClrStall+0x86>
 800babc:	2302      	movs	r3, #2
 800babe:	e00e      	b.n	800bade <HAL_PCD_EP_ClrStall+0xa4>
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	2201      	movs	r2, #1
 800bac4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	681b      	ldr	r3, [r3, #0]
 800bacc:	68f9      	ldr	r1, [r7, #12]
 800bace:	4618      	mov	r0, r3
 800bad0:	f003 fc25 	bl	800f31e <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	2200      	movs	r2, #0
 800bad8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800badc:	2300      	movs	r3, #0
}
 800bade:	4618      	mov	r0, r3
 800bae0:	3710      	adds	r7, #16
 800bae2:	46bd      	mov	sp, r7
 800bae4:	bd80      	pop	{r7, pc}

0800bae6 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800bae6:	b580      	push	{r7, lr}
 800bae8:	b08a      	sub	sp, #40	; 0x28
 800baea:	af02      	add	r7, sp, #8
 800baec:	6078      	str	r0, [r7, #4]
 800baee:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	681b      	ldr	r3, [r3, #0]
 800baf4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800baf6:	697b      	ldr	r3, [r7, #20]
 800baf8:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800bafa:	683a      	ldr	r2, [r7, #0]
 800bafc:	4613      	mov	r3, r2
 800bafe:	00db      	lsls	r3, r3, #3
 800bb00:	1a9b      	subs	r3, r3, r2
 800bb02:	009b      	lsls	r3, r3, #2
 800bb04:	3338      	adds	r3, #56	; 0x38
 800bb06:	687a      	ldr	r2, [r7, #4]
 800bb08:	4413      	add	r3, r2
 800bb0a:	3304      	adds	r3, #4
 800bb0c:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800bb0e:	68fb      	ldr	r3, [r7, #12]
 800bb10:	699a      	ldr	r2, [r3, #24]
 800bb12:	68fb      	ldr	r3, [r7, #12]
 800bb14:	695b      	ldr	r3, [r3, #20]
 800bb16:	429a      	cmp	r2, r3
 800bb18:	d901      	bls.n	800bb1e <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800bb1a:	2301      	movs	r3, #1
 800bb1c:	e06c      	b.n	800bbf8 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800bb1e:	68fb      	ldr	r3, [r7, #12]
 800bb20:	695a      	ldr	r2, [r3, #20]
 800bb22:	68fb      	ldr	r3, [r7, #12]
 800bb24:	699b      	ldr	r3, [r3, #24]
 800bb26:	1ad3      	subs	r3, r2, r3
 800bb28:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800bb2a:	68fb      	ldr	r3, [r7, #12]
 800bb2c:	689b      	ldr	r3, [r3, #8]
 800bb2e:	69fa      	ldr	r2, [r7, #28]
 800bb30:	429a      	cmp	r2, r3
 800bb32:	d902      	bls.n	800bb3a <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800bb34:	68fb      	ldr	r3, [r7, #12]
 800bb36:	689b      	ldr	r3, [r3, #8]
 800bb38:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800bb3a:	69fb      	ldr	r3, [r7, #28]
 800bb3c:	3303      	adds	r3, #3
 800bb3e:	089b      	lsrs	r3, r3, #2
 800bb40:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800bb42:	e02b      	b.n	800bb9c <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800bb44:	68fb      	ldr	r3, [r7, #12]
 800bb46:	695a      	ldr	r2, [r3, #20]
 800bb48:	68fb      	ldr	r3, [r7, #12]
 800bb4a:	699b      	ldr	r3, [r3, #24]
 800bb4c:	1ad3      	subs	r3, r2, r3
 800bb4e:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800bb50:	68fb      	ldr	r3, [r7, #12]
 800bb52:	689b      	ldr	r3, [r3, #8]
 800bb54:	69fa      	ldr	r2, [r7, #28]
 800bb56:	429a      	cmp	r2, r3
 800bb58:	d902      	bls.n	800bb60 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800bb5a:	68fb      	ldr	r3, [r7, #12]
 800bb5c:	689b      	ldr	r3, [r3, #8]
 800bb5e:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800bb60:	69fb      	ldr	r3, [r7, #28]
 800bb62:	3303      	adds	r3, #3
 800bb64:	089b      	lsrs	r3, r3, #2
 800bb66:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800bb68:	68fb      	ldr	r3, [r7, #12]
 800bb6a:	68d9      	ldr	r1, [r3, #12]
 800bb6c:	683b      	ldr	r3, [r7, #0]
 800bb6e:	b2da      	uxtb	r2, r3
 800bb70:	69fb      	ldr	r3, [r7, #28]
 800bb72:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800bb78:	b2db      	uxtb	r3, r3
 800bb7a:	9300      	str	r3, [sp, #0]
 800bb7c:	4603      	mov	r3, r0
 800bb7e:	6978      	ldr	r0, [r7, #20]
 800bb80:	f003 fac9 	bl	800f116 <USB_WritePacket>

    ep->xfer_buff  += len;
 800bb84:	68fb      	ldr	r3, [r7, #12]
 800bb86:	68da      	ldr	r2, [r3, #12]
 800bb88:	69fb      	ldr	r3, [r7, #28]
 800bb8a:	441a      	add	r2, r3
 800bb8c:	68fb      	ldr	r3, [r7, #12]
 800bb8e:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800bb90:	68fb      	ldr	r3, [r7, #12]
 800bb92:	699a      	ldr	r2, [r3, #24]
 800bb94:	69fb      	ldr	r3, [r7, #28]
 800bb96:	441a      	add	r2, r3
 800bb98:	68fb      	ldr	r3, [r7, #12]
 800bb9a:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800bb9c:	683b      	ldr	r3, [r7, #0]
 800bb9e:	015a      	lsls	r2, r3, #5
 800bba0:	693b      	ldr	r3, [r7, #16]
 800bba2:	4413      	add	r3, r2
 800bba4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bba8:	699b      	ldr	r3, [r3, #24]
 800bbaa:	b29b      	uxth	r3, r3
 800bbac:	69ba      	ldr	r2, [r7, #24]
 800bbae:	429a      	cmp	r2, r3
 800bbb0:	d809      	bhi.n	800bbc6 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800bbb2:	68fb      	ldr	r3, [r7, #12]
 800bbb4:	699a      	ldr	r2, [r3, #24]
 800bbb6:	68fb      	ldr	r3, [r7, #12]
 800bbb8:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800bbba:	429a      	cmp	r2, r3
 800bbbc:	d203      	bcs.n	800bbc6 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800bbbe:	68fb      	ldr	r3, [r7, #12]
 800bbc0:	695b      	ldr	r3, [r3, #20]
 800bbc2:	2b00      	cmp	r3, #0
 800bbc4:	d1be      	bne.n	800bb44 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800bbc6:	68fb      	ldr	r3, [r7, #12]
 800bbc8:	695a      	ldr	r2, [r3, #20]
 800bbca:	68fb      	ldr	r3, [r7, #12]
 800bbcc:	699b      	ldr	r3, [r3, #24]
 800bbce:	429a      	cmp	r2, r3
 800bbd0:	d811      	bhi.n	800bbf6 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800bbd2:	683b      	ldr	r3, [r7, #0]
 800bbd4:	f003 030f 	and.w	r3, r3, #15
 800bbd8:	2201      	movs	r2, #1
 800bbda:	fa02 f303 	lsl.w	r3, r2, r3
 800bbde:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800bbe0:	693b      	ldr	r3, [r7, #16]
 800bbe2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bbe6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800bbe8:	68bb      	ldr	r3, [r7, #8]
 800bbea:	43db      	mvns	r3, r3
 800bbec:	6939      	ldr	r1, [r7, #16]
 800bbee:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bbf2:	4013      	ands	r3, r2
 800bbf4:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800bbf6:	2300      	movs	r3, #0
}
 800bbf8:	4618      	mov	r0, r3
 800bbfa:	3720      	adds	r7, #32
 800bbfc:	46bd      	mov	sp, r7
 800bbfe:	bd80      	pop	{r7, pc}

0800bc00 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800bc00:	b580      	push	{r7, lr}
 800bc02:	b086      	sub	sp, #24
 800bc04:	af00      	add	r7, sp, #0
 800bc06:	6078      	str	r0, [r7, #4]
 800bc08:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	681b      	ldr	r3, [r3, #0]
 800bc0e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bc10:	697b      	ldr	r3, [r7, #20]
 800bc12:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800bc14:	697b      	ldr	r3, [r7, #20]
 800bc16:	333c      	adds	r3, #60	; 0x3c
 800bc18:	3304      	adds	r3, #4
 800bc1a:	681b      	ldr	r3, [r3, #0]
 800bc1c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800bc1e:	683b      	ldr	r3, [r7, #0]
 800bc20:	015a      	lsls	r2, r3, #5
 800bc22:	693b      	ldr	r3, [r7, #16]
 800bc24:	4413      	add	r3, r2
 800bc26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bc2a:	689b      	ldr	r3, [r3, #8]
 800bc2c:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	691b      	ldr	r3, [r3, #16]
 800bc32:	2b01      	cmp	r3, #1
 800bc34:	f040 80a0 	bne.w	800bd78 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800bc38:	68bb      	ldr	r3, [r7, #8]
 800bc3a:	f003 0308 	and.w	r3, r3, #8
 800bc3e:	2b00      	cmp	r3, #0
 800bc40:	d015      	beq.n	800bc6e <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800bc42:	68fb      	ldr	r3, [r7, #12]
 800bc44:	4a72      	ldr	r2, [pc, #456]	; (800be10 <PCD_EP_OutXfrComplete_int+0x210>)
 800bc46:	4293      	cmp	r3, r2
 800bc48:	f240 80dd 	bls.w	800be06 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800bc4c:	68bb      	ldr	r3, [r7, #8]
 800bc4e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800bc52:	2b00      	cmp	r3, #0
 800bc54:	f000 80d7 	beq.w	800be06 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800bc58:	683b      	ldr	r3, [r7, #0]
 800bc5a:	015a      	lsls	r2, r3, #5
 800bc5c:	693b      	ldr	r3, [r7, #16]
 800bc5e:	4413      	add	r3, r2
 800bc60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bc64:	461a      	mov	r2, r3
 800bc66:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bc6a:	6093      	str	r3, [r2, #8]
 800bc6c:	e0cb      	b.n	800be06 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800bc6e:	68bb      	ldr	r3, [r7, #8]
 800bc70:	f003 0320 	and.w	r3, r3, #32
 800bc74:	2b00      	cmp	r3, #0
 800bc76:	d009      	beq.n	800bc8c <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800bc78:	683b      	ldr	r3, [r7, #0]
 800bc7a:	015a      	lsls	r2, r3, #5
 800bc7c:	693b      	ldr	r3, [r7, #16]
 800bc7e:	4413      	add	r3, r2
 800bc80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bc84:	461a      	mov	r2, r3
 800bc86:	2320      	movs	r3, #32
 800bc88:	6093      	str	r3, [r2, #8]
 800bc8a:	e0bc      	b.n	800be06 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800bc8c:	68bb      	ldr	r3, [r7, #8]
 800bc8e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800bc92:	2b00      	cmp	r3, #0
 800bc94:	f040 80b7 	bne.w	800be06 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800bc98:	68fb      	ldr	r3, [r7, #12]
 800bc9a:	4a5d      	ldr	r2, [pc, #372]	; (800be10 <PCD_EP_OutXfrComplete_int+0x210>)
 800bc9c:	4293      	cmp	r3, r2
 800bc9e:	d90f      	bls.n	800bcc0 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800bca0:	68bb      	ldr	r3, [r7, #8]
 800bca2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800bca6:	2b00      	cmp	r3, #0
 800bca8:	d00a      	beq.n	800bcc0 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800bcaa:	683b      	ldr	r3, [r7, #0]
 800bcac:	015a      	lsls	r2, r3, #5
 800bcae:	693b      	ldr	r3, [r7, #16]
 800bcb0:	4413      	add	r3, r2
 800bcb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bcb6:	461a      	mov	r2, r3
 800bcb8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bcbc:	6093      	str	r3, [r2, #8]
 800bcbe:	e0a2      	b.n	800be06 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 800bcc0:	6879      	ldr	r1, [r7, #4]
 800bcc2:	683a      	ldr	r2, [r7, #0]
 800bcc4:	4613      	mov	r3, r2
 800bcc6:	00db      	lsls	r3, r3, #3
 800bcc8:	1a9b      	subs	r3, r3, r2
 800bcca:	009b      	lsls	r3, r3, #2
 800bccc:	440b      	add	r3, r1
 800bcce:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800bcd2:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800bcd4:	683b      	ldr	r3, [r7, #0]
 800bcd6:	0159      	lsls	r1, r3, #5
 800bcd8:	693b      	ldr	r3, [r7, #16]
 800bcda:	440b      	add	r3, r1
 800bcdc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bce0:	691b      	ldr	r3, [r3, #16]
 800bce2:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 800bce6:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 800bce8:	6878      	ldr	r0, [r7, #4]
 800bcea:	683a      	ldr	r2, [r7, #0]
 800bcec:	4613      	mov	r3, r2
 800bcee:	00db      	lsls	r3, r3, #3
 800bcf0:	1a9b      	subs	r3, r3, r2
 800bcf2:	009b      	lsls	r3, r3, #2
 800bcf4:	4403      	add	r3, r0
 800bcf6:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800bcfa:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 800bcfc:	6879      	ldr	r1, [r7, #4]
 800bcfe:	683a      	ldr	r2, [r7, #0]
 800bd00:	4613      	mov	r3, r2
 800bd02:	00db      	lsls	r3, r3, #3
 800bd04:	1a9b      	subs	r3, r3, r2
 800bd06:	009b      	lsls	r3, r3, #2
 800bd08:	440b      	add	r3, r1
 800bd0a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800bd0e:	6819      	ldr	r1, [r3, #0]
 800bd10:	6878      	ldr	r0, [r7, #4]
 800bd12:	683a      	ldr	r2, [r7, #0]
 800bd14:	4613      	mov	r3, r2
 800bd16:	00db      	lsls	r3, r3, #3
 800bd18:	1a9b      	subs	r3, r3, r2
 800bd1a:	009b      	lsls	r3, r3, #2
 800bd1c:	4403      	add	r3, r0
 800bd1e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800bd22:	681b      	ldr	r3, [r3, #0]
 800bd24:	4419      	add	r1, r3
 800bd26:	6878      	ldr	r0, [r7, #4]
 800bd28:	683a      	ldr	r2, [r7, #0]
 800bd2a:	4613      	mov	r3, r2
 800bd2c:	00db      	lsls	r3, r3, #3
 800bd2e:	1a9b      	subs	r3, r3, r2
 800bd30:	009b      	lsls	r3, r3, #2
 800bd32:	4403      	add	r3, r0
 800bd34:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800bd38:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800bd3a:	683b      	ldr	r3, [r7, #0]
 800bd3c:	2b00      	cmp	r3, #0
 800bd3e:	d114      	bne.n	800bd6a <PCD_EP_OutXfrComplete_int+0x16a>
 800bd40:	6879      	ldr	r1, [r7, #4]
 800bd42:	683a      	ldr	r2, [r7, #0]
 800bd44:	4613      	mov	r3, r2
 800bd46:	00db      	lsls	r3, r3, #3
 800bd48:	1a9b      	subs	r3, r3, r2
 800bd4a:	009b      	lsls	r3, r3, #2
 800bd4c:	440b      	add	r3, r1
 800bd4e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800bd52:	681b      	ldr	r3, [r3, #0]
 800bd54:	2b00      	cmp	r3, #0
 800bd56:	d108      	bne.n	800bd6a <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	6818      	ldr	r0, [r3, #0]
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800bd62:	461a      	mov	r2, r3
 800bd64:	2101      	movs	r1, #1
 800bd66:	f003 fc6d 	bl	800f644 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800bd6a:	683b      	ldr	r3, [r7, #0]
 800bd6c:	b2db      	uxtb	r3, r3
 800bd6e:	4619      	mov	r1, r3
 800bd70:	6878      	ldr	r0, [r7, #4]
 800bd72:	f005 fd31 	bl	80117d8 <HAL_PCD_DataOutStageCallback>
 800bd76:	e046      	b.n	800be06 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800bd78:	68fb      	ldr	r3, [r7, #12]
 800bd7a:	4a26      	ldr	r2, [pc, #152]	; (800be14 <PCD_EP_OutXfrComplete_int+0x214>)
 800bd7c:	4293      	cmp	r3, r2
 800bd7e:	d124      	bne.n	800bdca <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800bd80:	68bb      	ldr	r3, [r7, #8]
 800bd82:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800bd86:	2b00      	cmp	r3, #0
 800bd88:	d00a      	beq.n	800bda0 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800bd8a:	683b      	ldr	r3, [r7, #0]
 800bd8c:	015a      	lsls	r2, r3, #5
 800bd8e:	693b      	ldr	r3, [r7, #16]
 800bd90:	4413      	add	r3, r2
 800bd92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bd96:	461a      	mov	r2, r3
 800bd98:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bd9c:	6093      	str	r3, [r2, #8]
 800bd9e:	e032      	b.n	800be06 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800bda0:	68bb      	ldr	r3, [r7, #8]
 800bda2:	f003 0320 	and.w	r3, r3, #32
 800bda6:	2b00      	cmp	r3, #0
 800bda8:	d008      	beq.n	800bdbc <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800bdaa:	683b      	ldr	r3, [r7, #0]
 800bdac:	015a      	lsls	r2, r3, #5
 800bdae:	693b      	ldr	r3, [r7, #16]
 800bdb0:	4413      	add	r3, r2
 800bdb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bdb6:	461a      	mov	r2, r3
 800bdb8:	2320      	movs	r3, #32
 800bdba:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800bdbc:	683b      	ldr	r3, [r7, #0]
 800bdbe:	b2db      	uxtb	r3, r3
 800bdc0:	4619      	mov	r1, r3
 800bdc2:	6878      	ldr	r0, [r7, #4]
 800bdc4:	f005 fd08 	bl	80117d8 <HAL_PCD_DataOutStageCallback>
 800bdc8:	e01d      	b.n	800be06 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800bdca:	683b      	ldr	r3, [r7, #0]
 800bdcc:	2b00      	cmp	r3, #0
 800bdce:	d114      	bne.n	800bdfa <PCD_EP_OutXfrComplete_int+0x1fa>
 800bdd0:	6879      	ldr	r1, [r7, #4]
 800bdd2:	683a      	ldr	r2, [r7, #0]
 800bdd4:	4613      	mov	r3, r2
 800bdd6:	00db      	lsls	r3, r3, #3
 800bdd8:	1a9b      	subs	r3, r3, r2
 800bdda:	009b      	lsls	r3, r3, #2
 800bddc:	440b      	add	r3, r1
 800bdde:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800bde2:	681b      	ldr	r3, [r3, #0]
 800bde4:	2b00      	cmp	r3, #0
 800bde6:	d108      	bne.n	800bdfa <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	6818      	ldr	r0, [r3, #0]
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800bdf2:	461a      	mov	r2, r3
 800bdf4:	2100      	movs	r1, #0
 800bdf6:	f003 fc25 	bl	800f644 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800bdfa:	683b      	ldr	r3, [r7, #0]
 800bdfc:	b2db      	uxtb	r3, r3
 800bdfe:	4619      	mov	r1, r3
 800be00:	6878      	ldr	r0, [r7, #4]
 800be02:	f005 fce9 	bl	80117d8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800be06:	2300      	movs	r3, #0
}
 800be08:	4618      	mov	r0, r3
 800be0a:	3718      	adds	r7, #24
 800be0c:	46bd      	mov	sp, r7
 800be0e:	bd80      	pop	{r7, pc}
 800be10:	4f54300a 	.word	0x4f54300a
 800be14:	4f54310a 	.word	0x4f54310a

0800be18 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800be18:	b580      	push	{r7, lr}
 800be1a:	b086      	sub	sp, #24
 800be1c:	af00      	add	r7, sp, #0
 800be1e:	6078      	str	r0, [r7, #4]
 800be20:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	681b      	ldr	r3, [r3, #0]
 800be26:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800be28:	697b      	ldr	r3, [r7, #20]
 800be2a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800be2c:	697b      	ldr	r3, [r7, #20]
 800be2e:	333c      	adds	r3, #60	; 0x3c
 800be30:	3304      	adds	r3, #4
 800be32:	681b      	ldr	r3, [r3, #0]
 800be34:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800be36:	683b      	ldr	r3, [r7, #0]
 800be38:	015a      	lsls	r2, r3, #5
 800be3a:	693b      	ldr	r3, [r7, #16]
 800be3c:	4413      	add	r3, r2
 800be3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800be42:	689b      	ldr	r3, [r3, #8]
 800be44:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800be46:	68fb      	ldr	r3, [r7, #12]
 800be48:	4a15      	ldr	r2, [pc, #84]	; (800bea0 <PCD_EP_OutSetupPacket_int+0x88>)
 800be4a:	4293      	cmp	r3, r2
 800be4c:	d90e      	bls.n	800be6c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800be4e:	68bb      	ldr	r3, [r7, #8]
 800be50:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800be54:	2b00      	cmp	r3, #0
 800be56:	d009      	beq.n	800be6c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800be58:	683b      	ldr	r3, [r7, #0]
 800be5a:	015a      	lsls	r2, r3, #5
 800be5c:	693b      	ldr	r3, [r7, #16]
 800be5e:	4413      	add	r3, r2
 800be60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800be64:	461a      	mov	r2, r3
 800be66:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800be6a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800be6c:	6878      	ldr	r0, [r7, #4]
 800be6e:	f005 fca1 	bl	80117b4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800be72:	68fb      	ldr	r3, [r7, #12]
 800be74:	4a0a      	ldr	r2, [pc, #40]	; (800bea0 <PCD_EP_OutSetupPacket_int+0x88>)
 800be76:	4293      	cmp	r3, r2
 800be78:	d90c      	bls.n	800be94 <PCD_EP_OutSetupPacket_int+0x7c>
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	691b      	ldr	r3, [r3, #16]
 800be7e:	2b01      	cmp	r3, #1
 800be80:	d108      	bne.n	800be94 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	6818      	ldr	r0, [r3, #0]
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800be8c:	461a      	mov	r2, r3
 800be8e:	2101      	movs	r1, #1
 800be90:	f003 fbd8 	bl	800f644 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800be94:	2300      	movs	r3, #0
}
 800be96:	4618      	mov	r0, r3
 800be98:	3718      	adds	r7, #24
 800be9a:	46bd      	mov	sp, r7
 800be9c:	bd80      	pop	{r7, pc}
 800be9e:	bf00      	nop
 800bea0:	4f54300a 	.word	0x4f54300a

0800bea4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800bea4:	b480      	push	{r7}
 800bea6:	b085      	sub	sp, #20
 800bea8:	af00      	add	r7, sp, #0
 800beaa:	6078      	str	r0, [r7, #4]
 800beac:	460b      	mov	r3, r1
 800beae:	70fb      	strb	r3, [r7, #3]
 800beb0:	4613      	mov	r3, r2
 800beb2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	681b      	ldr	r3, [r3, #0]
 800beb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800beba:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800bebc:	78fb      	ldrb	r3, [r7, #3]
 800bebe:	2b00      	cmp	r3, #0
 800bec0:	d107      	bne.n	800bed2 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800bec2:	883b      	ldrh	r3, [r7, #0]
 800bec4:	0419      	lsls	r1, r3, #16
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	681b      	ldr	r3, [r3, #0]
 800beca:	68ba      	ldr	r2, [r7, #8]
 800becc:	430a      	orrs	r2, r1
 800bece:	629a      	str	r2, [r3, #40]	; 0x28
 800bed0:	e028      	b.n	800bf24 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	681b      	ldr	r3, [r3, #0]
 800bed6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bed8:	0c1b      	lsrs	r3, r3, #16
 800beda:	68ba      	ldr	r2, [r7, #8]
 800bedc:	4413      	add	r3, r2
 800bede:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800bee0:	2300      	movs	r3, #0
 800bee2:	73fb      	strb	r3, [r7, #15]
 800bee4:	e00d      	b.n	800bf02 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	681a      	ldr	r2, [r3, #0]
 800beea:	7bfb      	ldrb	r3, [r7, #15]
 800beec:	3340      	adds	r3, #64	; 0x40
 800beee:	009b      	lsls	r3, r3, #2
 800bef0:	4413      	add	r3, r2
 800bef2:	685b      	ldr	r3, [r3, #4]
 800bef4:	0c1b      	lsrs	r3, r3, #16
 800bef6:	68ba      	ldr	r2, [r7, #8]
 800bef8:	4413      	add	r3, r2
 800befa:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800befc:	7bfb      	ldrb	r3, [r7, #15]
 800befe:	3301      	adds	r3, #1
 800bf00:	73fb      	strb	r3, [r7, #15]
 800bf02:	7bfa      	ldrb	r2, [r7, #15]
 800bf04:	78fb      	ldrb	r3, [r7, #3]
 800bf06:	3b01      	subs	r3, #1
 800bf08:	429a      	cmp	r2, r3
 800bf0a:	d3ec      	bcc.n	800bee6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800bf0c:	883b      	ldrh	r3, [r7, #0]
 800bf0e:	0418      	lsls	r0, r3, #16
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	6819      	ldr	r1, [r3, #0]
 800bf14:	78fb      	ldrb	r3, [r7, #3]
 800bf16:	3b01      	subs	r3, #1
 800bf18:	68ba      	ldr	r2, [r7, #8]
 800bf1a:	4302      	orrs	r2, r0
 800bf1c:	3340      	adds	r3, #64	; 0x40
 800bf1e:	009b      	lsls	r3, r3, #2
 800bf20:	440b      	add	r3, r1
 800bf22:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800bf24:	2300      	movs	r3, #0
}
 800bf26:	4618      	mov	r0, r3
 800bf28:	3714      	adds	r7, #20
 800bf2a:	46bd      	mov	sp, r7
 800bf2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf30:	4770      	bx	lr

0800bf32 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800bf32:	b480      	push	{r7}
 800bf34:	b083      	sub	sp, #12
 800bf36:	af00      	add	r7, sp, #0
 800bf38:	6078      	str	r0, [r7, #4]
 800bf3a:	460b      	mov	r3, r1
 800bf3c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	681b      	ldr	r3, [r3, #0]
 800bf42:	887a      	ldrh	r2, [r7, #2]
 800bf44:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800bf46:	2300      	movs	r3, #0
}
 800bf48:	4618      	mov	r0, r3
 800bf4a:	370c      	adds	r7, #12
 800bf4c:	46bd      	mov	sp, r7
 800bf4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf52:	4770      	bx	lr

0800bf54 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800bf54:	b480      	push	{r7}
 800bf56:	b083      	sub	sp, #12
 800bf58:	af00      	add	r7, sp, #0
 800bf5a:	6078      	str	r0, [r7, #4]
 800bf5c:	460b      	mov	r3, r1
 800bf5e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800bf60:	bf00      	nop
 800bf62:	370c      	adds	r7, #12
 800bf64:	46bd      	mov	sp, r7
 800bf66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf6a:	4770      	bx	lr

0800bf6c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800bf6c:	b580      	push	{r7, lr}
 800bf6e:	b086      	sub	sp, #24
 800bf70:	af00      	add	r7, sp, #0
 800bf72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	2b00      	cmp	r3, #0
 800bf78:	d101      	bne.n	800bf7e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800bf7a:	2301      	movs	r3, #1
 800bf7c:	e267      	b.n	800c44e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	681b      	ldr	r3, [r3, #0]
 800bf82:	f003 0301 	and.w	r3, r3, #1
 800bf86:	2b00      	cmp	r3, #0
 800bf88:	d075      	beq.n	800c076 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800bf8a:	4b88      	ldr	r3, [pc, #544]	; (800c1ac <HAL_RCC_OscConfig+0x240>)
 800bf8c:	689b      	ldr	r3, [r3, #8]
 800bf8e:	f003 030c 	and.w	r3, r3, #12
 800bf92:	2b04      	cmp	r3, #4
 800bf94:	d00c      	beq.n	800bfb0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800bf96:	4b85      	ldr	r3, [pc, #532]	; (800c1ac <HAL_RCC_OscConfig+0x240>)
 800bf98:	689b      	ldr	r3, [r3, #8]
 800bf9a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800bf9e:	2b08      	cmp	r3, #8
 800bfa0:	d112      	bne.n	800bfc8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800bfa2:	4b82      	ldr	r3, [pc, #520]	; (800c1ac <HAL_RCC_OscConfig+0x240>)
 800bfa4:	685b      	ldr	r3, [r3, #4]
 800bfa6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800bfaa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800bfae:	d10b      	bne.n	800bfc8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800bfb0:	4b7e      	ldr	r3, [pc, #504]	; (800c1ac <HAL_RCC_OscConfig+0x240>)
 800bfb2:	681b      	ldr	r3, [r3, #0]
 800bfb4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bfb8:	2b00      	cmp	r3, #0
 800bfba:	d05b      	beq.n	800c074 <HAL_RCC_OscConfig+0x108>
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	685b      	ldr	r3, [r3, #4]
 800bfc0:	2b00      	cmp	r3, #0
 800bfc2:	d157      	bne.n	800c074 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800bfc4:	2301      	movs	r3, #1
 800bfc6:	e242      	b.n	800c44e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	685b      	ldr	r3, [r3, #4]
 800bfcc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bfd0:	d106      	bne.n	800bfe0 <HAL_RCC_OscConfig+0x74>
 800bfd2:	4b76      	ldr	r3, [pc, #472]	; (800c1ac <HAL_RCC_OscConfig+0x240>)
 800bfd4:	681b      	ldr	r3, [r3, #0]
 800bfd6:	4a75      	ldr	r2, [pc, #468]	; (800c1ac <HAL_RCC_OscConfig+0x240>)
 800bfd8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800bfdc:	6013      	str	r3, [r2, #0]
 800bfde:	e01d      	b.n	800c01c <HAL_RCC_OscConfig+0xb0>
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	685b      	ldr	r3, [r3, #4]
 800bfe4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800bfe8:	d10c      	bne.n	800c004 <HAL_RCC_OscConfig+0x98>
 800bfea:	4b70      	ldr	r3, [pc, #448]	; (800c1ac <HAL_RCC_OscConfig+0x240>)
 800bfec:	681b      	ldr	r3, [r3, #0]
 800bfee:	4a6f      	ldr	r2, [pc, #444]	; (800c1ac <HAL_RCC_OscConfig+0x240>)
 800bff0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800bff4:	6013      	str	r3, [r2, #0]
 800bff6:	4b6d      	ldr	r3, [pc, #436]	; (800c1ac <HAL_RCC_OscConfig+0x240>)
 800bff8:	681b      	ldr	r3, [r3, #0]
 800bffa:	4a6c      	ldr	r2, [pc, #432]	; (800c1ac <HAL_RCC_OscConfig+0x240>)
 800bffc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c000:	6013      	str	r3, [r2, #0]
 800c002:	e00b      	b.n	800c01c <HAL_RCC_OscConfig+0xb0>
 800c004:	4b69      	ldr	r3, [pc, #420]	; (800c1ac <HAL_RCC_OscConfig+0x240>)
 800c006:	681b      	ldr	r3, [r3, #0]
 800c008:	4a68      	ldr	r2, [pc, #416]	; (800c1ac <HAL_RCC_OscConfig+0x240>)
 800c00a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c00e:	6013      	str	r3, [r2, #0]
 800c010:	4b66      	ldr	r3, [pc, #408]	; (800c1ac <HAL_RCC_OscConfig+0x240>)
 800c012:	681b      	ldr	r3, [r3, #0]
 800c014:	4a65      	ldr	r2, [pc, #404]	; (800c1ac <HAL_RCC_OscConfig+0x240>)
 800c016:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800c01a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	685b      	ldr	r3, [r3, #4]
 800c020:	2b00      	cmp	r3, #0
 800c022:	d013      	beq.n	800c04c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c024:	f7fd fdb0 	bl	8009b88 <HAL_GetTick>
 800c028:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c02a:	e008      	b.n	800c03e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800c02c:	f7fd fdac 	bl	8009b88 <HAL_GetTick>
 800c030:	4602      	mov	r2, r0
 800c032:	693b      	ldr	r3, [r7, #16]
 800c034:	1ad3      	subs	r3, r2, r3
 800c036:	2b64      	cmp	r3, #100	; 0x64
 800c038:	d901      	bls.n	800c03e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800c03a:	2303      	movs	r3, #3
 800c03c:	e207      	b.n	800c44e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c03e:	4b5b      	ldr	r3, [pc, #364]	; (800c1ac <HAL_RCC_OscConfig+0x240>)
 800c040:	681b      	ldr	r3, [r3, #0]
 800c042:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c046:	2b00      	cmp	r3, #0
 800c048:	d0f0      	beq.n	800c02c <HAL_RCC_OscConfig+0xc0>
 800c04a:	e014      	b.n	800c076 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c04c:	f7fd fd9c 	bl	8009b88 <HAL_GetTick>
 800c050:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800c052:	e008      	b.n	800c066 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800c054:	f7fd fd98 	bl	8009b88 <HAL_GetTick>
 800c058:	4602      	mov	r2, r0
 800c05a:	693b      	ldr	r3, [r7, #16]
 800c05c:	1ad3      	subs	r3, r2, r3
 800c05e:	2b64      	cmp	r3, #100	; 0x64
 800c060:	d901      	bls.n	800c066 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800c062:	2303      	movs	r3, #3
 800c064:	e1f3      	b.n	800c44e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800c066:	4b51      	ldr	r3, [pc, #324]	; (800c1ac <HAL_RCC_OscConfig+0x240>)
 800c068:	681b      	ldr	r3, [r3, #0]
 800c06a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c06e:	2b00      	cmp	r3, #0
 800c070:	d1f0      	bne.n	800c054 <HAL_RCC_OscConfig+0xe8>
 800c072:	e000      	b.n	800c076 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c074:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	681b      	ldr	r3, [r3, #0]
 800c07a:	f003 0302 	and.w	r3, r3, #2
 800c07e:	2b00      	cmp	r3, #0
 800c080:	d063      	beq.n	800c14a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800c082:	4b4a      	ldr	r3, [pc, #296]	; (800c1ac <HAL_RCC_OscConfig+0x240>)
 800c084:	689b      	ldr	r3, [r3, #8]
 800c086:	f003 030c 	and.w	r3, r3, #12
 800c08a:	2b00      	cmp	r3, #0
 800c08c:	d00b      	beq.n	800c0a6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800c08e:	4b47      	ldr	r3, [pc, #284]	; (800c1ac <HAL_RCC_OscConfig+0x240>)
 800c090:	689b      	ldr	r3, [r3, #8]
 800c092:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800c096:	2b08      	cmp	r3, #8
 800c098:	d11c      	bne.n	800c0d4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800c09a:	4b44      	ldr	r3, [pc, #272]	; (800c1ac <HAL_RCC_OscConfig+0x240>)
 800c09c:	685b      	ldr	r3, [r3, #4]
 800c09e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c0a2:	2b00      	cmp	r3, #0
 800c0a4:	d116      	bne.n	800c0d4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800c0a6:	4b41      	ldr	r3, [pc, #260]	; (800c1ac <HAL_RCC_OscConfig+0x240>)
 800c0a8:	681b      	ldr	r3, [r3, #0]
 800c0aa:	f003 0302 	and.w	r3, r3, #2
 800c0ae:	2b00      	cmp	r3, #0
 800c0b0:	d005      	beq.n	800c0be <HAL_RCC_OscConfig+0x152>
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	68db      	ldr	r3, [r3, #12]
 800c0b6:	2b01      	cmp	r3, #1
 800c0b8:	d001      	beq.n	800c0be <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800c0ba:	2301      	movs	r3, #1
 800c0bc:	e1c7      	b.n	800c44e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c0be:	4b3b      	ldr	r3, [pc, #236]	; (800c1ac <HAL_RCC_OscConfig+0x240>)
 800c0c0:	681b      	ldr	r3, [r3, #0]
 800c0c2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	691b      	ldr	r3, [r3, #16]
 800c0ca:	00db      	lsls	r3, r3, #3
 800c0cc:	4937      	ldr	r1, [pc, #220]	; (800c1ac <HAL_RCC_OscConfig+0x240>)
 800c0ce:	4313      	orrs	r3, r2
 800c0d0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800c0d2:	e03a      	b.n	800c14a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	68db      	ldr	r3, [r3, #12]
 800c0d8:	2b00      	cmp	r3, #0
 800c0da:	d020      	beq.n	800c11e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800c0dc:	4b34      	ldr	r3, [pc, #208]	; (800c1b0 <HAL_RCC_OscConfig+0x244>)
 800c0de:	2201      	movs	r2, #1
 800c0e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c0e2:	f7fd fd51 	bl	8009b88 <HAL_GetTick>
 800c0e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c0e8:	e008      	b.n	800c0fc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800c0ea:	f7fd fd4d 	bl	8009b88 <HAL_GetTick>
 800c0ee:	4602      	mov	r2, r0
 800c0f0:	693b      	ldr	r3, [r7, #16]
 800c0f2:	1ad3      	subs	r3, r2, r3
 800c0f4:	2b02      	cmp	r3, #2
 800c0f6:	d901      	bls.n	800c0fc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800c0f8:	2303      	movs	r3, #3
 800c0fa:	e1a8      	b.n	800c44e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c0fc:	4b2b      	ldr	r3, [pc, #172]	; (800c1ac <HAL_RCC_OscConfig+0x240>)
 800c0fe:	681b      	ldr	r3, [r3, #0]
 800c100:	f003 0302 	and.w	r3, r3, #2
 800c104:	2b00      	cmp	r3, #0
 800c106:	d0f0      	beq.n	800c0ea <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c108:	4b28      	ldr	r3, [pc, #160]	; (800c1ac <HAL_RCC_OscConfig+0x240>)
 800c10a:	681b      	ldr	r3, [r3, #0]
 800c10c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	691b      	ldr	r3, [r3, #16]
 800c114:	00db      	lsls	r3, r3, #3
 800c116:	4925      	ldr	r1, [pc, #148]	; (800c1ac <HAL_RCC_OscConfig+0x240>)
 800c118:	4313      	orrs	r3, r2
 800c11a:	600b      	str	r3, [r1, #0]
 800c11c:	e015      	b.n	800c14a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800c11e:	4b24      	ldr	r3, [pc, #144]	; (800c1b0 <HAL_RCC_OscConfig+0x244>)
 800c120:	2200      	movs	r2, #0
 800c122:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c124:	f7fd fd30 	bl	8009b88 <HAL_GetTick>
 800c128:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800c12a:	e008      	b.n	800c13e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800c12c:	f7fd fd2c 	bl	8009b88 <HAL_GetTick>
 800c130:	4602      	mov	r2, r0
 800c132:	693b      	ldr	r3, [r7, #16]
 800c134:	1ad3      	subs	r3, r2, r3
 800c136:	2b02      	cmp	r3, #2
 800c138:	d901      	bls.n	800c13e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800c13a:	2303      	movs	r3, #3
 800c13c:	e187      	b.n	800c44e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800c13e:	4b1b      	ldr	r3, [pc, #108]	; (800c1ac <HAL_RCC_OscConfig+0x240>)
 800c140:	681b      	ldr	r3, [r3, #0]
 800c142:	f003 0302 	and.w	r3, r3, #2
 800c146:	2b00      	cmp	r3, #0
 800c148:	d1f0      	bne.n	800c12c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	681b      	ldr	r3, [r3, #0]
 800c14e:	f003 0308 	and.w	r3, r3, #8
 800c152:	2b00      	cmp	r3, #0
 800c154:	d036      	beq.n	800c1c4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	695b      	ldr	r3, [r3, #20]
 800c15a:	2b00      	cmp	r3, #0
 800c15c:	d016      	beq.n	800c18c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800c15e:	4b15      	ldr	r3, [pc, #84]	; (800c1b4 <HAL_RCC_OscConfig+0x248>)
 800c160:	2201      	movs	r2, #1
 800c162:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c164:	f7fd fd10 	bl	8009b88 <HAL_GetTick>
 800c168:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800c16a:	e008      	b.n	800c17e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800c16c:	f7fd fd0c 	bl	8009b88 <HAL_GetTick>
 800c170:	4602      	mov	r2, r0
 800c172:	693b      	ldr	r3, [r7, #16]
 800c174:	1ad3      	subs	r3, r2, r3
 800c176:	2b02      	cmp	r3, #2
 800c178:	d901      	bls.n	800c17e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800c17a:	2303      	movs	r3, #3
 800c17c:	e167      	b.n	800c44e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800c17e:	4b0b      	ldr	r3, [pc, #44]	; (800c1ac <HAL_RCC_OscConfig+0x240>)
 800c180:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c182:	f003 0302 	and.w	r3, r3, #2
 800c186:	2b00      	cmp	r3, #0
 800c188:	d0f0      	beq.n	800c16c <HAL_RCC_OscConfig+0x200>
 800c18a:	e01b      	b.n	800c1c4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800c18c:	4b09      	ldr	r3, [pc, #36]	; (800c1b4 <HAL_RCC_OscConfig+0x248>)
 800c18e:	2200      	movs	r2, #0
 800c190:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800c192:	f7fd fcf9 	bl	8009b88 <HAL_GetTick>
 800c196:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800c198:	e00e      	b.n	800c1b8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800c19a:	f7fd fcf5 	bl	8009b88 <HAL_GetTick>
 800c19e:	4602      	mov	r2, r0
 800c1a0:	693b      	ldr	r3, [r7, #16]
 800c1a2:	1ad3      	subs	r3, r2, r3
 800c1a4:	2b02      	cmp	r3, #2
 800c1a6:	d907      	bls.n	800c1b8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800c1a8:	2303      	movs	r3, #3
 800c1aa:	e150      	b.n	800c44e <HAL_RCC_OscConfig+0x4e2>
 800c1ac:	40023800 	.word	0x40023800
 800c1b0:	42470000 	.word	0x42470000
 800c1b4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800c1b8:	4b88      	ldr	r3, [pc, #544]	; (800c3dc <HAL_RCC_OscConfig+0x470>)
 800c1ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c1bc:	f003 0302 	and.w	r3, r3, #2
 800c1c0:	2b00      	cmp	r3, #0
 800c1c2:	d1ea      	bne.n	800c19a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	681b      	ldr	r3, [r3, #0]
 800c1c8:	f003 0304 	and.w	r3, r3, #4
 800c1cc:	2b00      	cmp	r3, #0
 800c1ce:	f000 8097 	beq.w	800c300 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800c1d2:	2300      	movs	r3, #0
 800c1d4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800c1d6:	4b81      	ldr	r3, [pc, #516]	; (800c3dc <HAL_RCC_OscConfig+0x470>)
 800c1d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c1da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c1de:	2b00      	cmp	r3, #0
 800c1e0:	d10f      	bne.n	800c202 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800c1e2:	2300      	movs	r3, #0
 800c1e4:	60bb      	str	r3, [r7, #8]
 800c1e6:	4b7d      	ldr	r3, [pc, #500]	; (800c3dc <HAL_RCC_OscConfig+0x470>)
 800c1e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c1ea:	4a7c      	ldr	r2, [pc, #496]	; (800c3dc <HAL_RCC_OscConfig+0x470>)
 800c1ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c1f0:	6413      	str	r3, [r2, #64]	; 0x40
 800c1f2:	4b7a      	ldr	r3, [pc, #488]	; (800c3dc <HAL_RCC_OscConfig+0x470>)
 800c1f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c1f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c1fa:	60bb      	str	r3, [r7, #8]
 800c1fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800c1fe:	2301      	movs	r3, #1
 800c200:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800c202:	4b77      	ldr	r3, [pc, #476]	; (800c3e0 <HAL_RCC_OscConfig+0x474>)
 800c204:	681b      	ldr	r3, [r3, #0]
 800c206:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c20a:	2b00      	cmp	r3, #0
 800c20c:	d118      	bne.n	800c240 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800c20e:	4b74      	ldr	r3, [pc, #464]	; (800c3e0 <HAL_RCC_OscConfig+0x474>)
 800c210:	681b      	ldr	r3, [r3, #0]
 800c212:	4a73      	ldr	r2, [pc, #460]	; (800c3e0 <HAL_RCC_OscConfig+0x474>)
 800c214:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c218:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800c21a:	f7fd fcb5 	bl	8009b88 <HAL_GetTick>
 800c21e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800c220:	e008      	b.n	800c234 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c222:	f7fd fcb1 	bl	8009b88 <HAL_GetTick>
 800c226:	4602      	mov	r2, r0
 800c228:	693b      	ldr	r3, [r7, #16]
 800c22a:	1ad3      	subs	r3, r2, r3
 800c22c:	2b02      	cmp	r3, #2
 800c22e:	d901      	bls.n	800c234 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800c230:	2303      	movs	r3, #3
 800c232:	e10c      	b.n	800c44e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800c234:	4b6a      	ldr	r3, [pc, #424]	; (800c3e0 <HAL_RCC_OscConfig+0x474>)
 800c236:	681b      	ldr	r3, [r3, #0]
 800c238:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c23c:	2b00      	cmp	r3, #0
 800c23e:	d0f0      	beq.n	800c222 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	689b      	ldr	r3, [r3, #8]
 800c244:	2b01      	cmp	r3, #1
 800c246:	d106      	bne.n	800c256 <HAL_RCC_OscConfig+0x2ea>
 800c248:	4b64      	ldr	r3, [pc, #400]	; (800c3dc <HAL_RCC_OscConfig+0x470>)
 800c24a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c24c:	4a63      	ldr	r2, [pc, #396]	; (800c3dc <HAL_RCC_OscConfig+0x470>)
 800c24e:	f043 0301 	orr.w	r3, r3, #1
 800c252:	6713      	str	r3, [r2, #112]	; 0x70
 800c254:	e01c      	b.n	800c290 <HAL_RCC_OscConfig+0x324>
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	689b      	ldr	r3, [r3, #8]
 800c25a:	2b05      	cmp	r3, #5
 800c25c:	d10c      	bne.n	800c278 <HAL_RCC_OscConfig+0x30c>
 800c25e:	4b5f      	ldr	r3, [pc, #380]	; (800c3dc <HAL_RCC_OscConfig+0x470>)
 800c260:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c262:	4a5e      	ldr	r2, [pc, #376]	; (800c3dc <HAL_RCC_OscConfig+0x470>)
 800c264:	f043 0304 	orr.w	r3, r3, #4
 800c268:	6713      	str	r3, [r2, #112]	; 0x70
 800c26a:	4b5c      	ldr	r3, [pc, #368]	; (800c3dc <HAL_RCC_OscConfig+0x470>)
 800c26c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c26e:	4a5b      	ldr	r2, [pc, #364]	; (800c3dc <HAL_RCC_OscConfig+0x470>)
 800c270:	f043 0301 	orr.w	r3, r3, #1
 800c274:	6713      	str	r3, [r2, #112]	; 0x70
 800c276:	e00b      	b.n	800c290 <HAL_RCC_OscConfig+0x324>
 800c278:	4b58      	ldr	r3, [pc, #352]	; (800c3dc <HAL_RCC_OscConfig+0x470>)
 800c27a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c27c:	4a57      	ldr	r2, [pc, #348]	; (800c3dc <HAL_RCC_OscConfig+0x470>)
 800c27e:	f023 0301 	bic.w	r3, r3, #1
 800c282:	6713      	str	r3, [r2, #112]	; 0x70
 800c284:	4b55      	ldr	r3, [pc, #340]	; (800c3dc <HAL_RCC_OscConfig+0x470>)
 800c286:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c288:	4a54      	ldr	r2, [pc, #336]	; (800c3dc <HAL_RCC_OscConfig+0x470>)
 800c28a:	f023 0304 	bic.w	r3, r3, #4
 800c28e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	689b      	ldr	r3, [r3, #8]
 800c294:	2b00      	cmp	r3, #0
 800c296:	d015      	beq.n	800c2c4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c298:	f7fd fc76 	bl	8009b88 <HAL_GetTick>
 800c29c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c29e:	e00a      	b.n	800c2b6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800c2a0:	f7fd fc72 	bl	8009b88 <HAL_GetTick>
 800c2a4:	4602      	mov	r2, r0
 800c2a6:	693b      	ldr	r3, [r7, #16]
 800c2a8:	1ad3      	subs	r3, r2, r3
 800c2aa:	f241 3288 	movw	r2, #5000	; 0x1388
 800c2ae:	4293      	cmp	r3, r2
 800c2b0:	d901      	bls.n	800c2b6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800c2b2:	2303      	movs	r3, #3
 800c2b4:	e0cb      	b.n	800c44e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c2b6:	4b49      	ldr	r3, [pc, #292]	; (800c3dc <HAL_RCC_OscConfig+0x470>)
 800c2b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c2ba:	f003 0302 	and.w	r3, r3, #2
 800c2be:	2b00      	cmp	r3, #0
 800c2c0:	d0ee      	beq.n	800c2a0 <HAL_RCC_OscConfig+0x334>
 800c2c2:	e014      	b.n	800c2ee <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800c2c4:	f7fd fc60 	bl	8009b88 <HAL_GetTick>
 800c2c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800c2ca:	e00a      	b.n	800c2e2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800c2cc:	f7fd fc5c 	bl	8009b88 <HAL_GetTick>
 800c2d0:	4602      	mov	r2, r0
 800c2d2:	693b      	ldr	r3, [r7, #16]
 800c2d4:	1ad3      	subs	r3, r2, r3
 800c2d6:	f241 3288 	movw	r2, #5000	; 0x1388
 800c2da:	4293      	cmp	r3, r2
 800c2dc:	d901      	bls.n	800c2e2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800c2de:	2303      	movs	r3, #3
 800c2e0:	e0b5      	b.n	800c44e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800c2e2:	4b3e      	ldr	r3, [pc, #248]	; (800c3dc <HAL_RCC_OscConfig+0x470>)
 800c2e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c2e6:	f003 0302 	and.w	r3, r3, #2
 800c2ea:	2b00      	cmp	r3, #0
 800c2ec:	d1ee      	bne.n	800c2cc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800c2ee:	7dfb      	ldrb	r3, [r7, #23]
 800c2f0:	2b01      	cmp	r3, #1
 800c2f2:	d105      	bne.n	800c300 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800c2f4:	4b39      	ldr	r3, [pc, #228]	; (800c3dc <HAL_RCC_OscConfig+0x470>)
 800c2f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c2f8:	4a38      	ldr	r2, [pc, #224]	; (800c3dc <HAL_RCC_OscConfig+0x470>)
 800c2fa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c2fe:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	699b      	ldr	r3, [r3, #24]
 800c304:	2b00      	cmp	r3, #0
 800c306:	f000 80a1 	beq.w	800c44c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800c30a:	4b34      	ldr	r3, [pc, #208]	; (800c3dc <HAL_RCC_OscConfig+0x470>)
 800c30c:	689b      	ldr	r3, [r3, #8]
 800c30e:	f003 030c 	and.w	r3, r3, #12
 800c312:	2b08      	cmp	r3, #8
 800c314:	d05c      	beq.n	800c3d0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	699b      	ldr	r3, [r3, #24]
 800c31a:	2b02      	cmp	r3, #2
 800c31c:	d141      	bne.n	800c3a2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c31e:	4b31      	ldr	r3, [pc, #196]	; (800c3e4 <HAL_RCC_OscConfig+0x478>)
 800c320:	2200      	movs	r2, #0
 800c322:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c324:	f7fd fc30 	bl	8009b88 <HAL_GetTick>
 800c328:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c32a:	e008      	b.n	800c33e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800c32c:	f7fd fc2c 	bl	8009b88 <HAL_GetTick>
 800c330:	4602      	mov	r2, r0
 800c332:	693b      	ldr	r3, [r7, #16]
 800c334:	1ad3      	subs	r3, r2, r3
 800c336:	2b02      	cmp	r3, #2
 800c338:	d901      	bls.n	800c33e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800c33a:	2303      	movs	r3, #3
 800c33c:	e087      	b.n	800c44e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c33e:	4b27      	ldr	r3, [pc, #156]	; (800c3dc <HAL_RCC_OscConfig+0x470>)
 800c340:	681b      	ldr	r3, [r3, #0]
 800c342:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c346:	2b00      	cmp	r3, #0
 800c348:	d1f0      	bne.n	800c32c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	69da      	ldr	r2, [r3, #28]
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	6a1b      	ldr	r3, [r3, #32]
 800c352:	431a      	orrs	r2, r3
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c358:	019b      	lsls	r3, r3, #6
 800c35a:	431a      	orrs	r2, r3
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c360:	085b      	lsrs	r3, r3, #1
 800c362:	3b01      	subs	r3, #1
 800c364:	041b      	lsls	r3, r3, #16
 800c366:	431a      	orrs	r2, r3
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c36c:	061b      	lsls	r3, r3, #24
 800c36e:	491b      	ldr	r1, [pc, #108]	; (800c3dc <HAL_RCC_OscConfig+0x470>)
 800c370:	4313      	orrs	r3, r2
 800c372:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800c374:	4b1b      	ldr	r3, [pc, #108]	; (800c3e4 <HAL_RCC_OscConfig+0x478>)
 800c376:	2201      	movs	r2, #1
 800c378:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c37a:	f7fd fc05 	bl	8009b88 <HAL_GetTick>
 800c37e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800c380:	e008      	b.n	800c394 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800c382:	f7fd fc01 	bl	8009b88 <HAL_GetTick>
 800c386:	4602      	mov	r2, r0
 800c388:	693b      	ldr	r3, [r7, #16]
 800c38a:	1ad3      	subs	r3, r2, r3
 800c38c:	2b02      	cmp	r3, #2
 800c38e:	d901      	bls.n	800c394 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800c390:	2303      	movs	r3, #3
 800c392:	e05c      	b.n	800c44e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800c394:	4b11      	ldr	r3, [pc, #68]	; (800c3dc <HAL_RCC_OscConfig+0x470>)
 800c396:	681b      	ldr	r3, [r3, #0]
 800c398:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c39c:	2b00      	cmp	r3, #0
 800c39e:	d0f0      	beq.n	800c382 <HAL_RCC_OscConfig+0x416>
 800c3a0:	e054      	b.n	800c44c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c3a2:	4b10      	ldr	r3, [pc, #64]	; (800c3e4 <HAL_RCC_OscConfig+0x478>)
 800c3a4:	2200      	movs	r2, #0
 800c3a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c3a8:	f7fd fbee 	bl	8009b88 <HAL_GetTick>
 800c3ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c3ae:	e008      	b.n	800c3c2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800c3b0:	f7fd fbea 	bl	8009b88 <HAL_GetTick>
 800c3b4:	4602      	mov	r2, r0
 800c3b6:	693b      	ldr	r3, [r7, #16]
 800c3b8:	1ad3      	subs	r3, r2, r3
 800c3ba:	2b02      	cmp	r3, #2
 800c3bc:	d901      	bls.n	800c3c2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800c3be:	2303      	movs	r3, #3
 800c3c0:	e045      	b.n	800c44e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c3c2:	4b06      	ldr	r3, [pc, #24]	; (800c3dc <HAL_RCC_OscConfig+0x470>)
 800c3c4:	681b      	ldr	r3, [r3, #0]
 800c3c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c3ca:	2b00      	cmp	r3, #0
 800c3cc:	d1f0      	bne.n	800c3b0 <HAL_RCC_OscConfig+0x444>
 800c3ce:	e03d      	b.n	800c44c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	699b      	ldr	r3, [r3, #24]
 800c3d4:	2b01      	cmp	r3, #1
 800c3d6:	d107      	bne.n	800c3e8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800c3d8:	2301      	movs	r3, #1
 800c3da:	e038      	b.n	800c44e <HAL_RCC_OscConfig+0x4e2>
 800c3dc:	40023800 	.word	0x40023800
 800c3e0:	40007000 	.word	0x40007000
 800c3e4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800c3e8:	4b1b      	ldr	r3, [pc, #108]	; (800c458 <HAL_RCC_OscConfig+0x4ec>)
 800c3ea:	685b      	ldr	r3, [r3, #4]
 800c3ec:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	699b      	ldr	r3, [r3, #24]
 800c3f2:	2b01      	cmp	r3, #1
 800c3f4:	d028      	beq.n	800c448 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800c3f6:	68fb      	ldr	r3, [r7, #12]
 800c3f8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800c400:	429a      	cmp	r2, r3
 800c402:	d121      	bne.n	800c448 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800c404:	68fb      	ldr	r3, [r7, #12]
 800c406:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800c40e:	429a      	cmp	r2, r3
 800c410:	d11a      	bne.n	800c448 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800c412:	68fa      	ldr	r2, [r7, #12]
 800c414:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800c418:	4013      	ands	r3, r2
 800c41a:	687a      	ldr	r2, [r7, #4]
 800c41c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800c41e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800c420:	4293      	cmp	r3, r2
 800c422:	d111      	bne.n	800c448 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800c424:	68fb      	ldr	r3, [r7, #12]
 800c426:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c42e:	085b      	lsrs	r3, r3, #1
 800c430:	3b01      	subs	r3, #1
 800c432:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800c434:	429a      	cmp	r2, r3
 800c436:	d107      	bne.n	800c448 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800c438:	68fb      	ldr	r3, [r7, #12]
 800c43a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c442:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800c444:	429a      	cmp	r2, r3
 800c446:	d001      	beq.n	800c44c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800c448:	2301      	movs	r3, #1
 800c44a:	e000      	b.n	800c44e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800c44c:	2300      	movs	r3, #0
}
 800c44e:	4618      	mov	r0, r3
 800c450:	3718      	adds	r7, #24
 800c452:	46bd      	mov	sp, r7
 800c454:	bd80      	pop	{r7, pc}
 800c456:	bf00      	nop
 800c458:	40023800 	.word	0x40023800

0800c45c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800c45c:	b580      	push	{r7, lr}
 800c45e:	b084      	sub	sp, #16
 800c460:	af00      	add	r7, sp, #0
 800c462:	6078      	str	r0, [r7, #4]
 800c464:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	2b00      	cmp	r3, #0
 800c46a:	d101      	bne.n	800c470 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800c46c:	2301      	movs	r3, #1
 800c46e:	e0cc      	b.n	800c60a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800c470:	4b68      	ldr	r3, [pc, #416]	; (800c614 <HAL_RCC_ClockConfig+0x1b8>)
 800c472:	681b      	ldr	r3, [r3, #0]
 800c474:	f003 0307 	and.w	r3, r3, #7
 800c478:	683a      	ldr	r2, [r7, #0]
 800c47a:	429a      	cmp	r2, r3
 800c47c:	d90c      	bls.n	800c498 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c47e:	4b65      	ldr	r3, [pc, #404]	; (800c614 <HAL_RCC_ClockConfig+0x1b8>)
 800c480:	683a      	ldr	r2, [r7, #0]
 800c482:	b2d2      	uxtb	r2, r2
 800c484:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800c486:	4b63      	ldr	r3, [pc, #396]	; (800c614 <HAL_RCC_ClockConfig+0x1b8>)
 800c488:	681b      	ldr	r3, [r3, #0]
 800c48a:	f003 0307 	and.w	r3, r3, #7
 800c48e:	683a      	ldr	r2, [r7, #0]
 800c490:	429a      	cmp	r2, r3
 800c492:	d001      	beq.n	800c498 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800c494:	2301      	movs	r3, #1
 800c496:	e0b8      	b.n	800c60a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	681b      	ldr	r3, [r3, #0]
 800c49c:	f003 0302 	and.w	r3, r3, #2
 800c4a0:	2b00      	cmp	r3, #0
 800c4a2:	d020      	beq.n	800c4e6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	681b      	ldr	r3, [r3, #0]
 800c4a8:	f003 0304 	and.w	r3, r3, #4
 800c4ac:	2b00      	cmp	r3, #0
 800c4ae:	d005      	beq.n	800c4bc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800c4b0:	4b59      	ldr	r3, [pc, #356]	; (800c618 <HAL_RCC_ClockConfig+0x1bc>)
 800c4b2:	689b      	ldr	r3, [r3, #8]
 800c4b4:	4a58      	ldr	r2, [pc, #352]	; (800c618 <HAL_RCC_ClockConfig+0x1bc>)
 800c4b6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800c4ba:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	681b      	ldr	r3, [r3, #0]
 800c4c0:	f003 0308 	and.w	r3, r3, #8
 800c4c4:	2b00      	cmp	r3, #0
 800c4c6:	d005      	beq.n	800c4d4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800c4c8:	4b53      	ldr	r3, [pc, #332]	; (800c618 <HAL_RCC_ClockConfig+0x1bc>)
 800c4ca:	689b      	ldr	r3, [r3, #8]
 800c4cc:	4a52      	ldr	r2, [pc, #328]	; (800c618 <HAL_RCC_ClockConfig+0x1bc>)
 800c4ce:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800c4d2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800c4d4:	4b50      	ldr	r3, [pc, #320]	; (800c618 <HAL_RCC_ClockConfig+0x1bc>)
 800c4d6:	689b      	ldr	r3, [r3, #8]
 800c4d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	689b      	ldr	r3, [r3, #8]
 800c4e0:	494d      	ldr	r1, [pc, #308]	; (800c618 <HAL_RCC_ClockConfig+0x1bc>)
 800c4e2:	4313      	orrs	r3, r2
 800c4e4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	681b      	ldr	r3, [r3, #0]
 800c4ea:	f003 0301 	and.w	r3, r3, #1
 800c4ee:	2b00      	cmp	r3, #0
 800c4f0:	d044      	beq.n	800c57c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	685b      	ldr	r3, [r3, #4]
 800c4f6:	2b01      	cmp	r3, #1
 800c4f8:	d107      	bne.n	800c50a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c4fa:	4b47      	ldr	r3, [pc, #284]	; (800c618 <HAL_RCC_ClockConfig+0x1bc>)
 800c4fc:	681b      	ldr	r3, [r3, #0]
 800c4fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c502:	2b00      	cmp	r3, #0
 800c504:	d119      	bne.n	800c53a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800c506:	2301      	movs	r3, #1
 800c508:	e07f      	b.n	800c60a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	685b      	ldr	r3, [r3, #4]
 800c50e:	2b02      	cmp	r3, #2
 800c510:	d003      	beq.n	800c51a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800c516:	2b03      	cmp	r3, #3
 800c518:	d107      	bne.n	800c52a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800c51a:	4b3f      	ldr	r3, [pc, #252]	; (800c618 <HAL_RCC_ClockConfig+0x1bc>)
 800c51c:	681b      	ldr	r3, [r3, #0]
 800c51e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c522:	2b00      	cmp	r3, #0
 800c524:	d109      	bne.n	800c53a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800c526:	2301      	movs	r3, #1
 800c528:	e06f      	b.n	800c60a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c52a:	4b3b      	ldr	r3, [pc, #236]	; (800c618 <HAL_RCC_ClockConfig+0x1bc>)
 800c52c:	681b      	ldr	r3, [r3, #0]
 800c52e:	f003 0302 	and.w	r3, r3, #2
 800c532:	2b00      	cmp	r3, #0
 800c534:	d101      	bne.n	800c53a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800c536:	2301      	movs	r3, #1
 800c538:	e067      	b.n	800c60a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800c53a:	4b37      	ldr	r3, [pc, #220]	; (800c618 <HAL_RCC_ClockConfig+0x1bc>)
 800c53c:	689b      	ldr	r3, [r3, #8]
 800c53e:	f023 0203 	bic.w	r2, r3, #3
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	685b      	ldr	r3, [r3, #4]
 800c546:	4934      	ldr	r1, [pc, #208]	; (800c618 <HAL_RCC_ClockConfig+0x1bc>)
 800c548:	4313      	orrs	r3, r2
 800c54a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800c54c:	f7fd fb1c 	bl	8009b88 <HAL_GetTick>
 800c550:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c552:	e00a      	b.n	800c56a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800c554:	f7fd fb18 	bl	8009b88 <HAL_GetTick>
 800c558:	4602      	mov	r2, r0
 800c55a:	68fb      	ldr	r3, [r7, #12]
 800c55c:	1ad3      	subs	r3, r2, r3
 800c55e:	f241 3288 	movw	r2, #5000	; 0x1388
 800c562:	4293      	cmp	r3, r2
 800c564:	d901      	bls.n	800c56a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800c566:	2303      	movs	r3, #3
 800c568:	e04f      	b.n	800c60a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c56a:	4b2b      	ldr	r3, [pc, #172]	; (800c618 <HAL_RCC_ClockConfig+0x1bc>)
 800c56c:	689b      	ldr	r3, [r3, #8]
 800c56e:	f003 020c 	and.w	r2, r3, #12
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	685b      	ldr	r3, [r3, #4]
 800c576:	009b      	lsls	r3, r3, #2
 800c578:	429a      	cmp	r2, r3
 800c57a:	d1eb      	bne.n	800c554 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800c57c:	4b25      	ldr	r3, [pc, #148]	; (800c614 <HAL_RCC_ClockConfig+0x1b8>)
 800c57e:	681b      	ldr	r3, [r3, #0]
 800c580:	f003 0307 	and.w	r3, r3, #7
 800c584:	683a      	ldr	r2, [r7, #0]
 800c586:	429a      	cmp	r2, r3
 800c588:	d20c      	bcs.n	800c5a4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c58a:	4b22      	ldr	r3, [pc, #136]	; (800c614 <HAL_RCC_ClockConfig+0x1b8>)
 800c58c:	683a      	ldr	r2, [r7, #0]
 800c58e:	b2d2      	uxtb	r2, r2
 800c590:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800c592:	4b20      	ldr	r3, [pc, #128]	; (800c614 <HAL_RCC_ClockConfig+0x1b8>)
 800c594:	681b      	ldr	r3, [r3, #0]
 800c596:	f003 0307 	and.w	r3, r3, #7
 800c59a:	683a      	ldr	r2, [r7, #0]
 800c59c:	429a      	cmp	r2, r3
 800c59e:	d001      	beq.n	800c5a4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800c5a0:	2301      	movs	r3, #1
 800c5a2:	e032      	b.n	800c60a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	681b      	ldr	r3, [r3, #0]
 800c5a8:	f003 0304 	and.w	r3, r3, #4
 800c5ac:	2b00      	cmp	r3, #0
 800c5ae:	d008      	beq.n	800c5c2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800c5b0:	4b19      	ldr	r3, [pc, #100]	; (800c618 <HAL_RCC_ClockConfig+0x1bc>)
 800c5b2:	689b      	ldr	r3, [r3, #8]
 800c5b4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	68db      	ldr	r3, [r3, #12]
 800c5bc:	4916      	ldr	r1, [pc, #88]	; (800c618 <HAL_RCC_ClockConfig+0x1bc>)
 800c5be:	4313      	orrs	r3, r2
 800c5c0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	681b      	ldr	r3, [r3, #0]
 800c5c6:	f003 0308 	and.w	r3, r3, #8
 800c5ca:	2b00      	cmp	r3, #0
 800c5cc:	d009      	beq.n	800c5e2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800c5ce:	4b12      	ldr	r3, [pc, #72]	; (800c618 <HAL_RCC_ClockConfig+0x1bc>)
 800c5d0:	689b      	ldr	r3, [r3, #8]
 800c5d2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	691b      	ldr	r3, [r3, #16]
 800c5da:	00db      	lsls	r3, r3, #3
 800c5dc:	490e      	ldr	r1, [pc, #56]	; (800c618 <HAL_RCC_ClockConfig+0x1bc>)
 800c5de:	4313      	orrs	r3, r2
 800c5e0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800c5e2:	f000 f821 	bl	800c628 <HAL_RCC_GetSysClockFreq>
 800c5e6:	4602      	mov	r2, r0
 800c5e8:	4b0b      	ldr	r3, [pc, #44]	; (800c618 <HAL_RCC_ClockConfig+0x1bc>)
 800c5ea:	689b      	ldr	r3, [r3, #8]
 800c5ec:	091b      	lsrs	r3, r3, #4
 800c5ee:	f003 030f 	and.w	r3, r3, #15
 800c5f2:	490a      	ldr	r1, [pc, #40]	; (800c61c <HAL_RCC_ClockConfig+0x1c0>)
 800c5f4:	5ccb      	ldrb	r3, [r1, r3]
 800c5f6:	fa22 f303 	lsr.w	r3, r2, r3
 800c5fa:	4a09      	ldr	r2, [pc, #36]	; (800c620 <HAL_RCC_ClockConfig+0x1c4>)
 800c5fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800c5fe:	4b09      	ldr	r3, [pc, #36]	; (800c624 <HAL_RCC_ClockConfig+0x1c8>)
 800c600:	681b      	ldr	r3, [r3, #0]
 800c602:	4618      	mov	r0, r3
 800c604:	f7fd fa7c 	bl	8009b00 <HAL_InitTick>

  return HAL_OK;
 800c608:	2300      	movs	r3, #0
}
 800c60a:	4618      	mov	r0, r3
 800c60c:	3710      	adds	r7, #16
 800c60e:	46bd      	mov	sp, r7
 800c610:	bd80      	pop	{r7, pc}
 800c612:	bf00      	nop
 800c614:	40023c00 	.word	0x40023c00
 800c618:	40023800 	.word	0x40023800
 800c61c:	080127e0 	.word	0x080127e0
 800c620:	20000000 	.word	0x20000000
 800c624:	20000028 	.word	0x20000028

0800c628 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800c628:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c62c:	b090      	sub	sp, #64	; 0x40
 800c62e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800c630:	2300      	movs	r3, #0
 800c632:	637b      	str	r3, [r7, #52]	; 0x34
 800c634:	2300      	movs	r3, #0
 800c636:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c638:	2300      	movs	r3, #0
 800c63a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 800c63c:	2300      	movs	r3, #0
 800c63e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800c640:	4b59      	ldr	r3, [pc, #356]	; (800c7a8 <HAL_RCC_GetSysClockFreq+0x180>)
 800c642:	689b      	ldr	r3, [r3, #8]
 800c644:	f003 030c 	and.w	r3, r3, #12
 800c648:	2b08      	cmp	r3, #8
 800c64a:	d00d      	beq.n	800c668 <HAL_RCC_GetSysClockFreq+0x40>
 800c64c:	2b08      	cmp	r3, #8
 800c64e:	f200 80a1 	bhi.w	800c794 <HAL_RCC_GetSysClockFreq+0x16c>
 800c652:	2b00      	cmp	r3, #0
 800c654:	d002      	beq.n	800c65c <HAL_RCC_GetSysClockFreq+0x34>
 800c656:	2b04      	cmp	r3, #4
 800c658:	d003      	beq.n	800c662 <HAL_RCC_GetSysClockFreq+0x3a>
 800c65a:	e09b      	b.n	800c794 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800c65c:	4b53      	ldr	r3, [pc, #332]	; (800c7ac <HAL_RCC_GetSysClockFreq+0x184>)
 800c65e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 800c660:	e09b      	b.n	800c79a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800c662:	4b53      	ldr	r3, [pc, #332]	; (800c7b0 <HAL_RCC_GetSysClockFreq+0x188>)
 800c664:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800c666:	e098      	b.n	800c79a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800c668:	4b4f      	ldr	r3, [pc, #316]	; (800c7a8 <HAL_RCC_GetSysClockFreq+0x180>)
 800c66a:	685b      	ldr	r3, [r3, #4]
 800c66c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c670:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800c672:	4b4d      	ldr	r3, [pc, #308]	; (800c7a8 <HAL_RCC_GetSysClockFreq+0x180>)
 800c674:	685b      	ldr	r3, [r3, #4]
 800c676:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c67a:	2b00      	cmp	r3, #0
 800c67c:	d028      	beq.n	800c6d0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800c67e:	4b4a      	ldr	r3, [pc, #296]	; (800c7a8 <HAL_RCC_GetSysClockFreq+0x180>)
 800c680:	685b      	ldr	r3, [r3, #4]
 800c682:	099b      	lsrs	r3, r3, #6
 800c684:	2200      	movs	r2, #0
 800c686:	623b      	str	r3, [r7, #32]
 800c688:	627a      	str	r2, [r7, #36]	; 0x24
 800c68a:	6a3b      	ldr	r3, [r7, #32]
 800c68c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800c690:	2100      	movs	r1, #0
 800c692:	4b47      	ldr	r3, [pc, #284]	; (800c7b0 <HAL_RCC_GetSysClockFreq+0x188>)
 800c694:	fb03 f201 	mul.w	r2, r3, r1
 800c698:	2300      	movs	r3, #0
 800c69a:	fb00 f303 	mul.w	r3, r0, r3
 800c69e:	4413      	add	r3, r2
 800c6a0:	4a43      	ldr	r2, [pc, #268]	; (800c7b0 <HAL_RCC_GetSysClockFreq+0x188>)
 800c6a2:	fba0 1202 	umull	r1, r2, r0, r2
 800c6a6:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c6a8:	460a      	mov	r2, r1
 800c6aa:	62ba      	str	r2, [r7, #40]	; 0x28
 800c6ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c6ae:	4413      	add	r3, r2
 800c6b0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c6b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c6b4:	2200      	movs	r2, #0
 800c6b6:	61bb      	str	r3, [r7, #24]
 800c6b8:	61fa      	str	r2, [r7, #28]
 800c6ba:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800c6be:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800c6c2:	f7fb fddd 	bl	8008280 <__aeabi_uldivmod>
 800c6c6:	4602      	mov	r2, r0
 800c6c8:	460b      	mov	r3, r1
 800c6ca:	4613      	mov	r3, r2
 800c6cc:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c6ce:	e053      	b.n	800c778 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800c6d0:	4b35      	ldr	r3, [pc, #212]	; (800c7a8 <HAL_RCC_GetSysClockFreq+0x180>)
 800c6d2:	685b      	ldr	r3, [r3, #4]
 800c6d4:	099b      	lsrs	r3, r3, #6
 800c6d6:	2200      	movs	r2, #0
 800c6d8:	613b      	str	r3, [r7, #16]
 800c6da:	617a      	str	r2, [r7, #20]
 800c6dc:	693b      	ldr	r3, [r7, #16]
 800c6de:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800c6e2:	f04f 0b00 	mov.w	fp, #0
 800c6e6:	4652      	mov	r2, sl
 800c6e8:	465b      	mov	r3, fp
 800c6ea:	f04f 0000 	mov.w	r0, #0
 800c6ee:	f04f 0100 	mov.w	r1, #0
 800c6f2:	0159      	lsls	r1, r3, #5
 800c6f4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800c6f8:	0150      	lsls	r0, r2, #5
 800c6fa:	4602      	mov	r2, r0
 800c6fc:	460b      	mov	r3, r1
 800c6fe:	ebb2 080a 	subs.w	r8, r2, sl
 800c702:	eb63 090b 	sbc.w	r9, r3, fp
 800c706:	f04f 0200 	mov.w	r2, #0
 800c70a:	f04f 0300 	mov.w	r3, #0
 800c70e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800c712:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800c716:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800c71a:	ebb2 0408 	subs.w	r4, r2, r8
 800c71e:	eb63 0509 	sbc.w	r5, r3, r9
 800c722:	f04f 0200 	mov.w	r2, #0
 800c726:	f04f 0300 	mov.w	r3, #0
 800c72a:	00eb      	lsls	r3, r5, #3
 800c72c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800c730:	00e2      	lsls	r2, r4, #3
 800c732:	4614      	mov	r4, r2
 800c734:	461d      	mov	r5, r3
 800c736:	eb14 030a 	adds.w	r3, r4, sl
 800c73a:	603b      	str	r3, [r7, #0]
 800c73c:	eb45 030b 	adc.w	r3, r5, fp
 800c740:	607b      	str	r3, [r7, #4]
 800c742:	f04f 0200 	mov.w	r2, #0
 800c746:	f04f 0300 	mov.w	r3, #0
 800c74a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800c74e:	4629      	mov	r1, r5
 800c750:	028b      	lsls	r3, r1, #10
 800c752:	4621      	mov	r1, r4
 800c754:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800c758:	4621      	mov	r1, r4
 800c75a:	028a      	lsls	r2, r1, #10
 800c75c:	4610      	mov	r0, r2
 800c75e:	4619      	mov	r1, r3
 800c760:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c762:	2200      	movs	r2, #0
 800c764:	60bb      	str	r3, [r7, #8]
 800c766:	60fa      	str	r2, [r7, #12]
 800c768:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800c76c:	f7fb fd88 	bl	8008280 <__aeabi_uldivmod>
 800c770:	4602      	mov	r2, r0
 800c772:	460b      	mov	r3, r1
 800c774:	4613      	mov	r3, r2
 800c776:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800c778:	4b0b      	ldr	r3, [pc, #44]	; (800c7a8 <HAL_RCC_GetSysClockFreq+0x180>)
 800c77a:	685b      	ldr	r3, [r3, #4]
 800c77c:	0c1b      	lsrs	r3, r3, #16
 800c77e:	f003 0303 	and.w	r3, r3, #3
 800c782:	3301      	adds	r3, #1
 800c784:	005b      	lsls	r3, r3, #1
 800c786:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 800c788:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c78a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c78c:	fbb2 f3f3 	udiv	r3, r2, r3
 800c790:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800c792:	e002      	b.n	800c79a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800c794:	4b05      	ldr	r3, [pc, #20]	; (800c7ac <HAL_RCC_GetSysClockFreq+0x184>)
 800c796:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800c798:	bf00      	nop
    }
  }
  return sysclockfreq;
 800c79a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800c79c:	4618      	mov	r0, r3
 800c79e:	3740      	adds	r7, #64	; 0x40
 800c7a0:	46bd      	mov	sp, r7
 800c7a2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c7a6:	bf00      	nop
 800c7a8:	40023800 	.word	0x40023800
 800c7ac:	00f42400 	.word	0x00f42400
 800c7b0:	017d7840 	.word	0x017d7840

0800c7b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800c7b4:	b480      	push	{r7}
 800c7b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800c7b8:	4b03      	ldr	r3, [pc, #12]	; (800c7c8 <HAL_RCC_GetHCLKFreq+0x14>)
 800c7ba:	681b      	ldr	r3, [r3, #0]
}
 800c7bc:	4618      	mov	r0, r3
 800c7be:	46bd      	mov	sp, r7
 800c7c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7c4:	4770      	bx	lr
 800c7c6:	bf00      	nop
 800c7c8:	20000000 	.word	0x20000000

0800c7cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800c7cc:	b580      	push	{r7, lr}
 800c7ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800c7d0:	f7ff fff0 	bl	800c7b4 <HAL_RCC_GetHCLKFreq>
 800c7d4:	4602      	mov	r2, r0
 800c7d6:	4b05      	ldr	r3, [pc, #20]	; (800c7ec <HAL_RCC_GetPCLK1Freq+0x20>)
 800c7d8:	689b      	ldr	r3, [r3, #8]
 800c7da:	0a9b      	lsrs	r3, r3, #10
 800c7dc:	f003 0307 	and.w	r3, r3, #7
 800c7e0:	4903      	ldr	r1, [pc, #12]	; (800c7f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 800c7e2:	5ccb      	ldrb	r3, [r1, r3]
 800c7e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 800c7e8:	4618      	mov	r0, r3
 800c7ea:	bd80      	pop	{r7, pc}
 800c7ec:	40023800 	.word	0x40023800
 800c7f0:	080127f0 	.word	0x080127f0

0800c7f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800c7f4:	b580      	push	{r7, lr}
 800c7f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800c7f8:	f7ff ffdc 	bl	800c7b4 <HAL_RCC_GetHCLKFreq>
 800c7fc:	4602      	mov	r2, r0
 800c7fe:	4b05      	ldr	r3, [pc, #20]	; (800c814 <HAL_RCC_GetPCLK2Freq+0x20>)
 800c800:	689b      	ldr	r3, [r3, #8]
 800c802:	0b5b      	lsrs	r3, r3, #13
 800c804:	f003 0307 	and.w	r3, r3, #7
 800c808:	4903      	ldr	r1, [pc, #12]	; (800c818 <HAL_RCC_GetPCLK2Freq+0x24>)
 800c80a:	5ccb      	ldrb	r3, [r1, r3]
 800c80c:	fa22 f303 	lsr.w	r3, r2, r3
}
 800c810:	4618      	mov	r0, r3
 800c812:	bd80      	pop	{r7, pc}
 800c814:	40023800 	.word	0x40023800
 800c818:	080127f0 	.word	0x080127f0

0800c81c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800c81c:	b580      	push	{r7, lr}
 800c81e:	b086      	sub	sp, #24
 800c820:	af00      	add	r7, sp, #0
 800c822:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800c824:	2300      	movs	r3, #0
 800c826:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800c828:	2300      	movs	r3, #0
 800c82a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	681b      	ldr	r3, [r3, #0]
 800c830:	f003 0301 	and.w	r3, r3, #1
 800c834:	2b00      	cmp	r3, #0
 800c836:	d105      	bne.n	800c844 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	681b      	ldr	r3, [r3, #0]
 800c83c:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800c840:	2b00      	cmp	r3, #0
 800c842:	d038      	beq.n	800c8b6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800c844:	4b68      	ldr	r3, [pc, #416]	; (800c9e8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800c846:	2200      	movs	r2, #0
 800c848:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800c84a:	f7fd f99d 	bl	8009b88 <HAL_GetTick>
 800c84e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800c850:	e008      	b.n	800c864 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800c852:	f7fd f999 	bl	8009b88 <HAL_GetTick>
 800c856:	4602      	mov	r2, r0
 800c858:	697b      	ldr	r3, [r7, #20]
 800c85a:	1ad3      	subs	r3, r2, r3
 800c85c:	2b02      	cmp	r3, #2
 800c85e:	d901      	bls.n	800c864 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800c860:	2303      	movs	r3, #3
 800c862:	e0bd      	b.n	800c9e0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800c864:	4b61      	ldr	r3, [pc, #388]	; (800c9ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c866:	681b      	ldr	r3, [r3, #0]
 800c868:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c86c:	2b00      	cmp	r3, #0
 800c86e:	d1f0      	bne.n	800c852 <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	685a      	ldr	r2, [r3, #4]
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	689b      	ldr	r3, [r3, #8]
 800c878:	019b      	lsls	r3, r3, #6
 800c87a:	431a      	orrs	r2, r3
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	68db      	ldr	r3, [r3, #12]
 800c880:	071b      	lsls	r3, r3, #28
 800c882:	495a      	ldr	r1, [pc, #360]	; (800c9ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c884:	4313      	orrs	r3, r2
 800c886:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800c88a:	4b57      	ldr	r3, [pc, #348]	; (800c9e8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800c88c:	2201      	movs	r2, #1
 800c88e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800c890:	f7fd f97a 	bl	8009b88 <HAL_GetTick>
 800c894:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800c896:	e008      	b.n	800c8aa <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800c898:	f7fd f976 	bl	8009b88 <HAL_GetTick>
 800c89c:	4602      	mov	r2, r0
 800c89e:	697b      	ldr	r3, [r7, #20]
 800c8a0:	1ad3      	subs	r3, r2, r3
 800c8a2:	2b02      	cmp	r3, #2
 800c8a4:	d901      	bls.n	800c8aa <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800c8a6:	2303      	movs	r3, #3
 800c8a8:	e09a      	b.n	800c9e0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800c8aa:	4b50      	ldr	r3, [pc, #320]	; (800c9ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c8ac:	681b      	ldr	r3, [r3, #0]
 800c8ae:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c8b2:	2b00      	cmp	r3, #0
 800c8b4:	d0f0      	beq.n	800c898 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800c8b6:	687b      	ldr	r3, [r7, #4]
 800c8b8:	681b      	ldr	r3, [r3, #0]
 800c8ba:	f003 0302 	and.w	r3, r3, #2
 800c8be:	2b00      	cmp	r3, #0
 800c8c0:	f000 8083 	beq.w	800c9ca <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800c8c4:	2300      	movs	r3, #0
 800c8c6:	60fb      	str	r3, [r7, #12]
 800c8c8:	4b48      	ldr	r3, [pc, #288]	; (800c9ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c8ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c8cc:	4a47      	ldr	r2, [pc, #284]	; (800c9ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c8ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c8d2:	6413      	str	r3, [r2, #64]	; 0x40
 800c8d4:	4b45      	ldr	r3, [pc, #276]	; (800c9ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c8d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c8d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c8dc:	60fb      	str	r3, [r7, #12]
 800c8de:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800c8e0:	4b43      	ldr	r3, [pc, #268]	; (800c9f0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800c8e2:	681b      	ldr	r3, [r3, #0]
 800c8e4:	4a42      	ldr	r2, [pc, #264]	; (800c9f0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800c8e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c8ea:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800c8ec:	f7fd f94c 	bl	8009b88 <HAL_GetTick>
 800c8f0:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800c8f2:	e008      	b.n	800c906 <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800c8f4:	f7fd f948 	bl	8009b88 <HAL_GetTick>
 800c8f8:	4602      	mov	r2, r0
 800c8fa:	697b      	ldr	r3, [r7, #20]
 800c8fc:	1ad3      	subs	r3, r2, r3
 800c8fe:	2b02      	cmp	r3, #2
 800c900:	d901      	bls.n	800c906 <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 800c902:	2303      	movs	r3, #3
 800c904:	e06c      	b.n	800c9e0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800c906:	4b3a      	ldr	r3, [pc, #232]	; (800c9f0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800c908:	681b      	ldr	r3, [r3, #0]
 800c90a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c90e:	2b00      	cmp	r3, #0
 800c910:	d0f0      	beq.n	800c8f4 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800c912:	4b36      	ldr	r3, [pc, #216]	; (800c9ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c914:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c916:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c91a:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800c91c:	693b      	ldr	r3, [r7, #16]
 800c91e:	2b00      	cmp	r3, #0
 800c920:	d02f      	beq.n	800c982 <HAL_RCCEx_PeriphCLKConfig+0x166>
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	691b      	ldr	r3, [r3, #16]
 800c926:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c92a:	693a      	ldr	r2, [r7, #16]
 800c92c:	429a      	cmp	r2, r3
 800c92e:	d028      	beq.n	800c982 <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800c930:	4b2e      	ldr	r3, [pc, #184]	; (800c9ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c932:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c934:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c938:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800c93a:	4b2e      	ldr	r3, [pc, #184]	; (800c9f4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800c93c:	2201      	movs	r2, #1
 800c93e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800c940:	4b2c      	ldr	r3, [pc, #176]	; (800c9f4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800c942:	2200      	movs	r2, #0
 800c944:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800c946:	4a29      	ldr	r2, [pc, #164]	; (800c9ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c948:	693b      	ldr	r3, [r7, #16]
 800c94a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800c94c:	4b27      	ldr	r3, [pc, #156]	; (800c9ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c94e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c950:	f003 0301 	and.w	r3, r3, #1
 800c954:	2b01      	cmp	r3, #1
 800c956:	d114      	bne.n	800c982 <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800c958:	f7fd f916 	bl	8009b88 <HAL_GetTick>
 800c95c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c95e:	e00a      	b.n	800c976 <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800c960:	f7fd f912 	bl	8009b88 <HAL_GetTick>
 800c964:	4602      	mov	r2, r0
 800c966:	697b      	ldr	r3, [r7, #20]
 800c968:	1ad3      	subs	r3, r2, r3
 800c96a:	f241 3288 	movw	r2, #5000	; 0x1388
 800c96e:	4293      	cmp	r3, r2
 800c970:	d901      	bls.n	800c976 <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 800c972:	2303      	movs	r3, #3
 800c974:	e034      	b.n	800c9e0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c976:	4b1d      	ldr	r3, [pc, #116]	; (800c9ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c978:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c97a:	f003 0302 	and.w	r3, r3, #2
 800c97e:	2b00      	cmp	r3, #0
 800c980:	d0ee      	beq.n	800c960 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	691b      	ldr	r3, [r3, #16]
 800c986:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c98a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c98e:	d10d      	bne.n	800c9ac <HAL_RCCEx_PeriphCLKConfig+0x190>
 800c990:	4b16      	ldr	r3, [pc, #88]	; (800c9ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c992:	689b      	ldr	r3, [r3, #8]
 800c994:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	691b      	ldr	r3, [r3, #16]
 800c99c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800c9a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c9a4:	4911      	ldr	r1, [pc, #68]	; (800c9ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c9a6:	4313      	orrs	r3, r2
 800c9a8:	608b      	str	r3, [r1, #8]
 800c9aa:	e005      	b.n	800c9b8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 800c9ac:	4b0f      	ldr	r3, [pc, #60]	; (800c9ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c9ae:	689b      	ldr	r3, [r3, #8]
 800c9b0:	4a0e      	ldr	r2, [pc, #56]	; (800c9ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c9b2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800c9b6:	6093      	str	r3, [r2, #8]
 800c9b8:	4b0c      	ldr	r3, [pc, #48]	; (800c9ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c9ba:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	691b      	ldr	r3, [r3, #16]
 800c9c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c9c4:	4909      	ldr	r1, [pc, #36]	; (800c9ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c9c6:	4313      	orrs	r3, r2
 800c9c8:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	681b      	ldr	r3, [r3, #0]
 800c9ce:	f003 0308 	and.w	r3, r3, #8
 800c9d2:	2b00      	cmp	r3, #0
 800c9d4:	d003      	beq.n	800c9de <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	7d1a      	ldrb	r2, [r3, #20]
 800c9da:	4b07      	ldr	r3, [pc, #28]	; (800c9f8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 800c9dc:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 800c9de:	2300      	movs	r3, #0
}
 800c9e0:	4618      	mov	r0, r3
 800c9e2:	3718      	adds	r7, #24
 800c9e4:	46bd      	mov	sp, r7
 800c9e6:	bd80      	pop	{r7, pc}
 800c9e8:	42470068 	.word	0x42470068
 800c9ec:	40023800 	.word	0x40023800
 800c9f0:	40007000 	.word	0x40007000
 800c9f4:	42470e40 	.word	0x42470e40
 800c9f8:	424711e0 	.word	0x424711e0

0800c9fc <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800c9fc:	b580      	push	{r7, lr}
 800c9fe:	b082      	sub	sp, #8
 800ca00:	af00      	add	r7, sp, #0
 800ca02:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	2b00      	cmp	r3, #0
 800ca08:	d101      	bne.n	800ca0e <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 800ca0a:	2301      	movs	r3, #1
 800ca0c:	e083      	b.n	800cb16 <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	7f5b      	ldrb	r3, [r3, #29]
 800ca12:	b2db      	uxtb	r3, r3
 800ca14:	2b00      	cmp	r3, #0
 800ca16:	d105      	bne.n	800ca24 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	2200      	movs	r2, #0
 800ca1c:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800ca1e:	6878      	ldr	r0, [r7, #4]
 800ca20:	f7fc fdae 	bl	8009580 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	2202      	movs	r2, #2
 800ca28:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	681b      	ldr	r3, [r3, #0]
 800ca2e:	22ca      	movs	r2, #202	; 0xca
 800ca30:	625a      	str	r2, [r3, #36]	; 0x24
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	681b      	ldr	r3, [r3, #0]
 800ca36:	2253      	movs	r2, #83	; 0x53
 800ca38:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800ca3a:	6878      	ldr	r0, [r7, #4]
 800ca3c:	f000 f897 	bl	800cb6e <RTC_EnterInitMode>
 800ca40:	4603      	mov	r3, r0
 800ca42:	2b00      	cmp	r3, #0
 800ca44:	d008      	beq.n	800ca58 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ca46:	687b      	ldr	r3, [r7, #4]
 800ca48:	681b      	ldr	r3, [r3, #0]
 800ca4a:	22ff      	movs	r2, #255	; 0xff
 800ca4c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	2204      	movs	r2, #4
 800ca52:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 800ca54:	2301      	movs	r3, #1
 800ca56:	e05e      	b.n	800cb16 <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	681b      	ldr	r3, [r3, #0]
 800ca5c:	689b      	ldr	r3, [r3, #8]
 800ca5e:	687a      	ldr	r2, [r7, #4]
 800ca60:	6812      	ldr	r2, [r2, #0]
 800ca62:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800ca66:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ca6a:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	681b      	ldr	r3, [r3, #0]
 800ca70:	6899      	ldr	r1, [r3, #8]
 800ca72:	687b      	ldr	r3, [r7, #4]
 800ca74:	685a      	ldr	r2, [r3, #4]
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	691b      	ldr	r3, [r3, #16]
 800ca7a:	431a      	orrs	r2, r3
 800ca7c:	687b      	ldr	r3, [r7, #4]
 800ca7e:	695b      	ldr	r3, [r3, #20]
 800ca80:	431a      	orrs	r2, r3
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	681b      	ldr	r3, [r3, #0]
 800ca86:	430a      	orrs	r2, r1
 800ca88:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800ca8a:	687b      	ldr	r3, [r7, #4]
 800ca8c:	681b      	ldr	r3, [r3, #0]
 800ca8e:	687a      	ldr	r2, [r7, #4]
 800ca90:	68d2      	ldr	r2, [r2, #12]
 800ca92:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	681b      	ldr	r3, [r3, #0]
 800ca98:	6919      	ldr	r1, [r3, #16]
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	689b      	ldr	r3, [r3, #8]
 800ca9e:	041a      	lsls	r2, r3, #16
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	681b      	ldr	r3, [r3, #0]
 800caa4:	430a      	orrs	r2, r1
 800caa6:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	681b      	ldr	r3, [r3, #0]
 800caac:	68da      	ldr	r2, [r3, #12]
 800caae:	687b      	ldr	r3, [r7, #4]
 800cab0:	681b      	ldr	r3, [r3, #0]
 800cab2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800cab6:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	681b      	ldr	r3, [r3, #0]
 800cabc:	689b      	ldr	r3, [r3, #8]
 800cabe:	f003 0320 	and.w	r3, r3, #32
 800cac2:	2b00      	cmp	r3, #0
 800cac4:	d10e      	bne.n	800cae4 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800cac6:	6878      	ldr	r0, [r7, #4]
 800cac8:	f000 f829 	bl	800cb1e <HAL_RTC_WaitForSynchro>
 800cacc:	4603      	mov	r3, r0
 800cace:	2b00      	cmp	r3, #0
 800cad0:	d008      	beq.n	800cae4 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800cad2:	687b      	ldr	r3, [r7, #4]
 800cad4:	681b      	ldr	r3, [r3, #0]
 800cad6:	22ff      	movs	r2, #255	; 0xff
 800cad8:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	2204      	movs	r2, #4
 800cade:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 800cae0:	2301      	movs	r3, #1
 800cae2:	e018      	b.n	800cb16 <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	681b      	ldr	r3, [r3, #0]
 800cae8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	681b      	ldr	r3, [r3, #0]
 800caee:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800caf2:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	681b      	ldr	r3, [r3, #0]
 800caf8:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	699a      	ldr	r2, [r3, #24]
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	681b      	ldr	r3, [r3, #0]
 800cb02:	430a      	orrs	r2, r1
 800cb04:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	681b      	ldr	r3, [r3, #0]
 800cb0a:	22ff      	movs	r2, #255	; 0xff
 800cb0c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	2201      	movs	r2, #1
 800cb12:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 800cb14:	2300      	movs	r3, #0
  }
}
 800cb16:	4618      	mov	r0, r3
 800cb18:	3708      	adds	r7, #8
 800cb1a:	46bd      	mov	sp, r7
 800cb1c:	bd80      	pop	{r7, pc}

0800cb1e <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 800cb1e:	b580      	push	{r7, lr}
 800cb20:	b084      	sub	sp, #16
 800cb22:	af00      	add	r7, sp, #0
 800cb24:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800cb26:	2300      	movs	r3, #0
 800cb28:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800cb2a:	687b      	ldr	r3, [r7, #4]
 800cb2c:	681b      	ldr	r3, [r3, #0]
 800cb2e:	68da      	ldr	r2, [r3, #12]
 800cb30:	687b      	ldr	r3, [r7, #4]
 800cb32:	681b      	ldr	r3, [r3, #0]
 800cb34:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800cb38:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800cb3a:	f7fd f825 	bl	8009b88 <HAL_GetTick>
 800cb3e:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800cb40:	e009      	b.n	800cb56 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800cb42:	f7fd f821 	bl	8009b88 <HAL_GetTick>
 800cb46:	4602      	mov	r2, r0
 800cb48:	68fb      	ldr	r3, [r7, #12]
 800cb4a:	1ad3      	subs	r3, r2, r3
 800cb4c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800cb50:	d901      	bls.n	800cb56 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800cb52:	2303      	movs	r3, #3
 800cb54:	e007      	b.n	800cb66 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	681b      	ldr	r3, [r3, #0]
 800cb5a:	68db      	ldr	r3, [r3, #12]
 800cb5c:	f003 0320 	and.w	r3, r3, #32
 800cb60:	2b00      	cmp	r3, #0
 800cb62:	d0ee      	beq.n	800cb42 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800cb64:	2300      	movs	r3, #0
}
 800cb66:	4618      	mov	r0, r3
 800cb68:	3710      	adds	r7, #16
 800cb6a:	46bd      	mov	sp, r7
 800cb6c:	bd80      	pop	{r7, pc}

0800cb6e <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 800cb6e:	b580      	push	{r7, lr}
 800cb70:	b084      	sub	sp, #16
 800cb72:	af00      	add	r7, sp, #0
 800cb74:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800cb76:	2300      	movs	r3, #0
 800cb78:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	681b      	ldr	r3, [r3, #0]
 800cb7e:	68db      	ldr	r3, [r3, #12]
 800cb80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cb84:	2b00      	cmp	r3, #0
 800cb86:	d119      	bne.n	800cbbc <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	681b      	ldr	r3, [r3, #0]
 800cb8c:	f04f 32ff 	mov.w	r2, #4294967295
 800cb90:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800cb92:	f7fc fff9 	bl	8009b88 <HAL_GetTick>
 800cb96:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800cb98:	e009      	b.n	800cbae <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800cb9a:	f7fc fff5 	bl	8009b88 <HAL_GetTick>
 800cb9e:	4602      	mov	r2, r0
 800cba0:	68fb      	ldr	r3, [r7, #12]
 800cba2:	1ad3      	subs	r3, r2, r3
 800cba4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800cba8:	d901      	bls.n	800cbae <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 800cbaa:	2303      	movs	r3, #3
 800cbac:	e007      	b.n	800cbbe <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	681b      	ldr	r3, [r3, #0]
 800cbb2:	68db      	ldr	r3, [r3, #12]
 800cbb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cbb8:	2b00      	cmp	r3, #0
 800cbba:	d0ee      	beq.n	800cb9a <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 800cbbc:	2300      	movs	r3, #0
}
 800cbbe:	4618      	mov	r0, r3
 800cbc0:	3710      	adds	r7, #16
 800cbc2:	46bd      	mov	sp, r7
 800cbc4:	bd80      	pop	{r7, pc}

0800cbc6 <HAL_RTCEx_BKUPWrite>:
  *                                 specify the register.
  * @param  Data Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 800cbc6:	b480      	push	{r7}
 800cbc8:	b087      	sub	sp, #28
 800cbca:	af00      	add	r7, sp, #0
 800cbcc:	60f8      	str	r0, [r7, #12]
 800cbce:	60b9      	str	r1, [r7, #8]
 800cbd0:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 800cbd2:	2300      	movs	r3, #0
 800cbd4:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 800cbd6:	68fb      	ldr	r3, [r7, #12]
 800cbd8:	681b      	ldr	r3, [r3, #0]
 800cbda:	3350      	adds	r3, #80	; 0x50
 800cbdc:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 800cbde:	68bb      	ldr	r3, [r7, #8]
 800cbe0:	009b      	lsls	r3, r3, #2
 800cbe2:	697a      	ldr	r2, [r7, #20]
 800cbe4:	4413      	add	r3, r2
 800cbe6:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 800cbe8:	697b      	ldr	r3, [r7, #20]
 800cbea:	687a      	ldr	r2, [r7, #4]
 800cbec:	601a      	str	r2, [r3, #0]
}
 800cbee:	bf00      	nop
 800cbf0:	371c      	adds	r7, #28
 800cbf2:	46bd      	mov	sp, r7
 800cbf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbf8:	4770      	bx	lr

0800cbfa <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx where x can be from 0 to 19 to
  *                                 specify the register.
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 800cbfa:	b480      	push	{r7}
 800cbfc:	b085      	sub	sp, #20
 800cbfe:	af00      	add	r7, sp, #0
 800cc00:	6078      	str	r0, [r7, #4]
 800cc02:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0U;
 800cc04:	2300      	movs	r3, #0
 800cc06:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	681b      	ldr	r3, [r3, #0]
 800cc0c:	3350      	adds	r3, #80	; 0x50
 800cc0e:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 800cc10:	683b      	ldr	r3, [r7, #0]
 800cc12:	009b      	lsls	r3, r3, #2
 800cc14:	68fa      	ldr	r2, [r7, #12]
 800cc16:	4413      	add	r3, r2
 800cc18:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 800cc1a:	68fb      	ldr	r3, [r7, #12]
 800cc1c:	681b      	ldr	r3, [r3, #0]
}
 800cc1e:	4618      	mov	r0, r3
 800cc20:	3714      	adds	r7, #20
 800cc22:	46bd      	mov	sp, r7
 800cc24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc28:	4770      	bx	lr

0800cc2a <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800cc2a:	b580      	push	{r7, lr}
 800cc2c:	b082      	sub	sp, #8
 800cc2e:	af00      	add	r7, sp, #0
 800cc30:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800cc32:	687b      	ldr	r3, [r7, #4]
 800cc34:	2b00      	cmp	r3, #0
 800cc36:	d101      	bne.n	800cc3c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800cc38:	2301      	movs	r3, #1
 800cc3a:	e03f      	b.n	800ccbc <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800cc3c:	687b      	ldr	r3, [r7, #4]
 800cc3e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cc42:	b2db      	uxtb	r3, r3
 800cc44:	2b00      	cmp	r3, #0
 800cc46:	d106      	bne.n	800cc56 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800cc48:	687b      	ldr	r3, [r7, #4]
 800cc4a:	2200      	movs	r2, #0
 800cc4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800cc50:	6878      	ldr	r0, [r7, #4]
 800cc52:	f7fc fe3b 	bl	80098cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	2224      	movs	r2, #36	; 0x24
 800cc5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	681b      	ldr	r3, [r3, #0]
 800cc62:	68da      	ldr	r2, [r3, #12]
 800cc64:	687b      	ldr	r3, [r7, #4]
 800cc66:	681b      	ldr	r3, [r3, #0]
 800cc68:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800cc6c:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800cc6e:	6878      	ldr	r0, [r7, #4]
 800cc70:	f000 ff8a 	bl	800db88 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	681b      	ldr	r3, [r3, #0]
 800cc78:	691a      	ldr	r2, [r3, #16]
 800cc7a:	687b      	ldr	r3, [r7, #4]
 800cc7c:	681b      	ldr	r3, [r3, #0]
 800cc7e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800cc82:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	681b      	ldr	r3, [r3, #0]
 800cc88:	695a      	ldr	r2, [r3, #20]
 800cc8a:	687b      	ldr	r3, [r7, #4]
 800cc8c:	681b      	ldr	r3, [r3, #0]
 800cc8e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800cc92:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800cc94:	687b      	ldr	r3, [r7, #4]
 800cc96:	681b      	ldr	r3, [r3, #0]
 800cc98:	68da      	ldr	r2, [r3, #12]
 800cc9a:	687b      	ldr	r3, [r7, #4]
 800cc9c:	681b      	ldr	r3, [r3, #0]
 800cc9e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800cca2:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cca4:	687b      	ldr	r3, [r7, #4]
 800cca6:	2200      	movs	r2, #0
 800cca8:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	2220      	movs	r2, #32
 800ccae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800ccb2:	687b      	ldr	r3, [r7, #4]
 800ccb4:	2220      	movs	r2, #32
 800ccb6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800ccba:	2300      	movs	r3, #0
}
 800ccbc:	4618      	mov	r0, r3
 800ccbe:	3708      	adds	r7, #8
 800ccc0:	46bd      	mov	sp, r7
 800ccc2:	bd80      	pop	{r7, pc}

0800ccc4 <HAL_UART_DeInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 800ccc4:	b580      	push	{r7, lr}
 800ccc6:	b082      	sub	sp, #8
 800ccc8:	af00      	add	r7, sp, #0
 800ccca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	2b00      	cmp	r3, #0
 800ccd0:	d101      	bne.n	800ccd6 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 800ccd2:	2301      	movs	r3, #1
 800ccd4:	e021      	b.n	800cd1a <HAL_UART_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	2224      	movs	r2, #36	; 0x24
 800ccda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800ccde:	687b      	ldr	r3, [r7, #4]
 800cce0:	681b      	ldr	r3, [r3, #0]
 800cce2:	68da      	ldr	r2, [r3, #12]
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	681b      	ldr	r3, [r3, #0]
 800cce8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800ccec:	60da      	str	r2, [r3, #12]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 800ccee:	6878      	ldr	r0, [r7, #4]
 800ccf0:	f7fc fe70 	bl	80099d4 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	2200      	movs	r2, #0
 800ccf8:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_RESET;
 800ccfa:	687b      	ldr	r3, [r7, #4]
 800ccfc:	2200      	movs	r2, #0
 800ccfe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_RESET;
 800cd02:	687b      	ldr	r3, [r7, #4]
 800cd04:	2200      	movs	r2, #0
 800cd06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cd0a:	687b      	ldr	r3, [r7, #4]
 800cd0c:	2200      	movs	r2, #0
 800cd0e:	631a      	str	r2, [r3, #48]	; 0x30

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	2200      	movs	r2, #0
 800cd14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800cd18:	2300      	movs	r3, #0
}
 800cd1a:	4618      	mov	r0, r3
 800cd1c:	3708      	adds	r7, #8
 800cd1e:	46bd      	mov	sp, r7
 800cd20:	bd80      	pop	{r7, pc}

0800cd22 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800cd22:	b580      	push	{r7, lr}
 800cd24:	b08a      	sub	sp, #40	; 0x28
 800cd26:	af02      	add	r7, sp, #8
 800cd28:	60f8      	str	r0, [r7, #12]
 800cd2a:	60b9      	str	r1, [r7, #8]
 800cd2c:	603b      	str	r3, [r7, #0]
 800cd2e:	4613      	mov	r3, r2
 800cd30:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800cd32:	2300      	movs	r3, #0
 800cd34:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800cd36:	68fb      	ldr	r3, [r7, #12]
 800cd38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cd3c:	b2db      	uxtb	r3, r3
 800cd3e:	2b20      	cmp	r3, #32
 800cd40:	d17c      	bne.n	800ce3c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800cd42:	68bb      	ldr	r3, [r7, #8]
 800cd44:	2b00      	cmp	r3, #0
 800cd46:	d002      	beq.n	800cd4e <HAL_UART_Transmit+0x2c>
 800cd48:	88fb      	ldrh	r3, [r7, #6]
 800cd4a:	2b00      	cmp	r3, #0
 800cd4c:	d101      	bne.n	800cd52 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800cd4e:	2301      	movs	r3, #1
 800cd50:	e075      	b.n	800ce3e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800cd52:	68fb      	ldr	r3, [r7, #12]
 800cd54:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800cd58:	2b01      	cmp	r3, #1
 800cd5a:	d101      	bne.n	800cd60 <HAL_UART_Transmit+0x3e>
 800cd5c:	2302      	movs	r3, #2
 800cd5e:	e06e      	b.n	800ce3e <HAL_UART_Transmit+0x11c>
 800cd60:	68fb      	ldr	r3, [r7, #12]
 800cd62:	2201      	movs	r2, #1
 800cd64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cd68:	68fb      	ldr	r3, [r7, #12]
 800cd6a:	2200      	movs	r2, #0
 800cd6c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800cd6e:	68fb      	ldr	r3, [r7, #12]
 800cd70:	2221      	movs	r2, #33	; 0x21
 800cd72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800cd76:	f7fc ff07 	bl	8009b88 <HAL_GetTick>
 800cd7a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800cd7c:	68fb      	ldr	r3, [r7, #12]
 800cd7e:	88fa      	ldrh	r2, [r7, #6]
 800cd80:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800cd82:	68fb      	ldr	r3, [r7, #12]
 800cd84:	88fa      	ldrh	r2, [r7, #6]
 800cd86:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800cd88:	68fb      	ldr	r3, [r7, #12]
 800cd8a:	689b      	ldr	r3, [r3, #8]
 800cd8c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cd90:	d108      	bne.n	800cda4 <HAL_UART_Transmit+0x82>
 800cd92:	68fb      	ldr	r3, [r7, #12]
 800cd94:	691b      	ldr	r3, [r3, #16]
 800cd96:	2b00      	cmp	r3, #0
 800cd98:	d104      	bne.n	800cda4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800cd9a:	2300      	movs	r3, #0
 800cd9c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800cd9e:	68bb      	ldr	r3, [r7, #8]
 800cda0:	61bb      	str	r3, [r7, #24]
 800cda2:	e003      	b.n	800cdac <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800cda4:	68bb      	ldr	r3, [r7, #8]
 800cda6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800cda8:	2300      	movs	r3, #0
 800cdaa:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800cdac:	68fb      	ldr	r3, [r7, #12]
 800cdae:	2200      	movs	r2, #0
 800cdb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800cdb4:	e02a      	b.n	800ce0c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800cdb6:	683b      	ldr	r3, [r7, #0]
 800cdb8:	9300      	str	r3, [sp, #0]
 800cdba:	697b      	ldr	r3, [r7, #20]
 800cdbc:	2200      	movs	r2, #0
 800cdbe:	2180      	movs	r1, #128	; 0x80
 800cdc0:	68f8      	ldr	r0, [r7, #12]
 800cdc2:	f000 fc17 	bl	800d5f4 <UART_WaitOnFlagUntilTimeout>
 800cdc6:	4603      	mov	r3, r0
 800cdc8:	2b00      	cmp	r3, #0
 800cdca:	d001      	beq.n	800cdd0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800cdcc:	2303      	movs	r3, #3
 800cdce:	e036      	b.n	800ce3e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800cdd0:	69fb      	ldr	r3, [r7, #28]
 800cdd2:	2b00      	cmp	r3, #0
 800cdd4:	d10b      	bne.n	800cdee <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800cdd6:	69bb      	ldr	r3, [r7, #24]
 800cdd8:	881b      	ldrh	r3, [r3, #0]
 800cdda:	461a      	mov	r2, r3
 800cddc:	68fb      	ldr	r3, [r7, #12]
 800cdde:	681b      	ldr	r3, [r3, #0]
 800cde0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800cde4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800cde6:	69bb      	ldr	r3, [r7, #24]
 800cde8:	3302      	adds	r3, #2
 800cdea:	61bb      	str	r3, [r7, #24]
 800cdec:	e007      	b.n	800cdfe <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800cdee:	69fb      	ldr	r3, [r7, #28]
 800cdf0:	781a      	ldrb	r2, [r3, #0]
 800cdf2:	68fb      	ldr	r3, [r7, #12]
 800cdf4:	681b      	ldr	r3, [r3, #0]
 800cdf6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800cdf8:	69fb      	ldr	r3, [r7, #28]
 800cdfa:	3301      	adds	r3, #1
 800cdfc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800cdfe:	68fb      	ldr	r3, [r7, #12]
 800ce00:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800ce02:	b29b      	uxth	r3, r3
 800ce04:	3b01      	subs	r3, #1
 800ce06:	b29a      	uxth	r2, r3
 800ce08:	68fb      	ldr	r3, [r7, #12]
 800ce0a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800ce0c:	68fb      	ldr	r3, [r7, #12]
 800ce0e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800ce10:	b29b      	uxth	r3, r3
 800ce12:	2b00      	cmp	r3, #0
 800ce14:	d1cf      	bne.n	800cdb6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800ce16:	683b      	ldr	r3, [r7, #0]
 800ce18:	9300      	str	r3, [sp, #0]
 800ce1a:	697b      	ldr	r3, [r7, #20]
 800ce1c:	2200      	movs	r2, #0
 800ce1e:	2140      	movs	r1, #64	; 0x40
 800ce20:	68f8      	ldr	r0, [r7, #12]
 800ce22:	f000 fbe7 	bl	800d5f4 <UART_WaitOnFlagUntilTimeout>
 800ce26:	4603      	mov	r3, r0
 800ce28:	2b00      	cmp	r3, #0
 800ce2a:	d001      	beq.n	800ce30 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800ce2c:	2303      	movs	r3, #3
 800ce2e:	e006      	b.n	800ce3e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800ce30:	68fb      	ldr	r3, [r7, #12]
 800ce32:	2220      	movs	r2, #32
 800ce34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800ce38:	2300      	movs	r3, #0
 800ce3a:	e000      	b.n	800ce3e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800ce3c:	2302      	movs	r3, #2
  }
}
 800ce3e:	4618      	mov	r0, r3
 800ce40:	3720      	adds	r7, #32
 800ce42:	46bd      	mov	sp, r7
 800ce44:	bd80      	pop	{r7, pc}

0800ce46 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ce46:	b580      	push	{r7, lr}
 800ce48:	b084      	sub	sp, #16
 800ce4a:	af00      	add	r7, sp, #0
 800ce4c:	60f8      	str	r0, [r7, #12]
 800ce4e:	60b9      	str	r1, [r7, #8]
 800ce50:	4613      	mov	r3, r2
 800ce52:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800ce54:	68fb      	ldr	r3, [r7, #12]
 800ce56:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800ce5a:	b2db      	uxtb	r3, r3
 800ce5c:	2b20      	cmp	r3, #32
 800ce5e:	d11d      	bne.n	800ce9c <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800ce60:	68bb      	ldr	r3, [r7, #8]
 800ce62:	2b00      	cmp	r3, #0
 800ce64:	d002      	beq.n	800ce6c <HAL_UART_Receive_DMA+0x26>
 800ce66:	88fb      	ldrh	r3, [r7, #6]
 800ce68:	2b00      	cmp	r3, #0
 800ce6a:	d101      	bne.n	800ce70 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800ce6c:	2301      	movs	r3, #1
 800ce6e:	e016      	b.n	800ce9e <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800ce70:	68fb      	ldr	r3, [r7, #12]
 800ce72:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ce76:	2b01      	cmp	r3, #1
 800ce78:	d101      	bne.n	800ce7e <HAL_UART_Receive_DMA+0x38>
 800ce7a:	2302      	movs	r3, #2
 800ce7c:	e00f      	b.n	800ce9e <HAL_UART_Receive_DMA+0x58>
 800ce7e:	68fb      	ldr	r3, [r7, #12]
 800ce80:	2201      	movs	r2, #1
 800ce82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ce86:	68fb      	ldr	r3, [r7, #12]
 800ce88:	2200      	movs	r2, #0
 800ce8a:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800ce8c:	88fb      	ldrh	r3, [r7, #6]
 800ce8e:	461a      	mov	r2, r3
 800ce90:	68b9      	ldr	r1, [r7, #8]
 800ce92:	68f8      	ldr	r0, [r7, #12]
 800ce94:	f000 fc1c 	bl	800d6d0 <UART_Start_Receive_DMA>
 800ce98:	4603      	mov	r3, r0
 800ce9a:	e000      	b.n	800ce9e <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 800ce9c:	2302      	movs	r3, #2
  }
}
 800ce9e:	4618      	mov	r0, r3
 800cea0:	3710      	adds	r7, #16
 800cea2:	46bd      	mov	sp, r7
 800cea4:	bd80      	pop	{r7, pc}
	...

0800cea8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800cea8:	b580      	push	{r7, lr}
 800ceaa:	b0ba      	sub	sp, #232	; 0xe8
 800ceac:	af00      	add	r7, sp, #0
 800ceae:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800ceb0:	687b      	ldr	r3, [r7, #4]
 800ceb2:	681b      	ldr	r3, [r3, #0]
 800ceb4:	681b      	ldr	r3, [r3, #0]
 800ceb6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	681b      	ldr	r3, [r3, #0]
 800cebe:	68db      	ldr	r3, [r3, #12]
 800cec0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800cec4:	687b      	ldr	r3, [r7, #4]
 800cec6:	681b      	ldr	r3, [r3, #0]
 800cec8:	695b      	ldr	r3, [r3, #20]
 800ceca:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800cece:	2300      	movs	r3, #0
 800ced0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800ced4:	2300      	movs	r3, #0
 800ced6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800ceda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cede:	f003 030f 	and.w	r3, r3, #15
 800cee2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800cee6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ceea:	2b00      	cmp	r3, #0
 800ceec:	d10f      	bne.n	800cf0e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800ceee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cef2:	f003 0320 	and.w	r3, r3, #32
 800cef6:	2b00      	cmp	r3, #0
 800cef8:	d009      	beq.n	800cf0e <HAL_UART_IRQHandler+0x66>
 800cefa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cefe:	f003 0320 	and.w	r3, r3, #32
 800cf02:	2b00      	cmp	r3, #0
 800cf04:	d003      	beq.n	800cf0e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800cf06:	6878      	ldr	r0, [r7, #4]
 800cf08:	f000 fd83 	bl	800da12 <UART_Receive_IT>
      return;
 800cf0c:	e256      	b.n	800d3bc <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800cf0e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800cf12:	2b00      	cmp	r3, #0
 800cf14:	f000 80de 	beq.w	800d0d4 <HAL_UART_IRQHandler+0x22c>
 800cf18:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800cf1c:	f003 0301 	and.w	r3, r3, #1
 800cf20:	2b00      	cmp	r3, #0
 800cf22:	d106      	bne.n	800cf32 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800cf24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cf28:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800cf2c:	2b00      	cmp	r3, #0
 800cf2e:	f000 80d1 	beq.w	800d0d4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800cf32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cf36:	f003 0301 	and.w	r3, r3, #1
 800cf3a:	2b00      	cmp	r3, #0
 800cf3c:	d00b      	beq.n	800cf56 <HAL_UART_IRQHandler+0xae>
 800cf3e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cf42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cf46:	2b00      	cmp	r3, #0
 800cf48:	d005      	beq.n	800cf56 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cf4e:	f043 0201 	orr.w	r2, r3, #1
 800cf52:	687b      	ldr	r3, [r7, #4]
 800cf54:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800cf56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cf5a:	f003 0304 	and.w	r3, r3, #4
 800cf5e:	2b00      	cmp	r3, #0
 800cf60:	d00b      	beq.n	800cf7a <HAL_UART_IRQHandler+0xd2>
 800cf62:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800cf66:	f003 0301 	and.w	r3, r3, #1
 800cf6a:	2b00      	cmp	r3, #0
 800cf6c:	d005      	beq.n	800cf7a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800cf6e:	687b      	ldr	r3, [r7, #4]
 800cf70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cf72:	f043 0202 	orr.w	r2, r3, #2
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800cf7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cf7e:	f003 0302 	and.w	r3, r3, #2
 800cf82:	2b00      	cmp	r3, #0
 800cf84:	d00b      	beq.n	800cf9e <HAL_UART_IRQHandler+0xf6>
 800cf86:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800cf8a:	f003 0301 	and.w	r3, r3, #1
 800cf8e:	2b00      	cmp	r3, #0
 800cf90:	d005      	beq.n	800cf9e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cf96:	f043 0204 	orr.w	r2, r3, #4
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800cf9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cfa2:	f003 0308 	and.w	r3, r3, #8
 800cfa6:	2b00      	cmp	r3, #0
 800cfa8:	d011      	beq.n	800cfce <HAL_UART_IRQHandler+0x126>
 800cfaa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cfae:	f003 0320 	and.w	r3, r3, #32
 800cfb2:	2b00      	cmp	r3, #0
 800cfb4:	d105      	bne.n	800cfc2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800cfb6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800cfba:	f003 0301 	and.w	r3, r3, #1
 800cfbe:	2b00      	cmp	r3, #0
 800cfc0:	d005      	beq.n	800cfce <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800cfc2:	687b      	ldr	r3, [r7, #4]
 800cfc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cfc6:	f043 0208 	orr.w	r2, r3, #8
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800cfce:	687b      	ldr	r3, [r7, #4]
 800cfd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cfd2:	2b00      	cmp	r3, #0
 800cfd4:	f000 81ed 	beq.w	800d3b2 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800cfd8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cfdc:	f003 0320 	and.w	r3, r3, #32
 800cfe0:	2b00      	cmp	r3, #0
 800cfe2:	d008      	beq.n	800cff6 <HAL_UART_IRQHandler+0x14e>
 800cfe4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cfe8:	f003 0320 	and.w	r3, r3, #32
 800cfec:	2b00      	cmp	r3, #0
 800cfee:	d002      	beq.n	800cff6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800cff0:	6878      	ldr	r0, [r7, #4]
 800cff2:	f000 fd0e 	bl	800da12 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800cff6:	687b      	ldr	r3, [r7, #4]
 800cff8:	681b      	ldr	r3, [r3, #0]
 800cffa:	695b      	ldr	r3, [r3, #20]
 800cffc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d000:	2b40      	cmp	r3, #64	; 0x40
 800d002:	bf0c      	ite	eq
 800d004:	2301      	moveq	r3, #1
 800d006:	2300      	movne	r3, #0
 800d008:	b2db      	uxtb	r3, r3
 800d00a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800d00e:	687b      	ldr	r3, [r7, #4]
 800d010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d012:	f003 0308 	and.w	r3, r3, #8
 800d016:	2b00      	cmp	r3, #0
 800d018:	d103      	bne.n	800d022 <HAL_UART_IRQHandler+0x17a>
 800d01a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800d01e:	2b00      	cmp	r3, #0
 800d020:	d04f      	beq.n	800d0c2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800d022:	6878      	ldr	r0, [r7, #4]
 800d024:	f000 fc16 	bl	800d854 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	681b      	ldr	r3, [r3, #0]
 800d02c:	695b      	ldr	r3, [r3, #20]
 800d02e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d032:	2b40      	cmp	r3, #64	; 0x40
 800d034:	d141      	bne.n	800d0ba <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d036:	687b      	ldr	r3, [r7, #4]
 800d038:	681b      	ldr	r3, [r3, #0]
 800d03a:	3314      	adds	r3, #20
 800d03c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d040:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800d044:	e853 3f00 	ldrex	r3, [r3]
 800d048:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800d04c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800d050:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d054:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800d058:	687b      	ldr	r3, [r7, #4]
 800d05a:	681b      	ldr	r3, [r3, #0]
 800d05c:	3314      	adds	r3, #20
 800d05e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800d062:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800d066:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d06a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800d06e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800d072:	e841 2300 	strex	r3, r2, [r1]
 800d076:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800d07a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800d07e:	2b00      	cmp	r3, #0
 800d080:	d1d9      	bne.n	800d036 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800d082:	687b      	ldr	r3, [r7, #4]
 800d084:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d086:	2b00      	cmp	r3, #0
 800d088:	d013      	beq.n	800d0b2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800d08a:	687b      	ldr	r3, [r7, #4]
 800d08c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d08e:	4a7d      	ldr	r2, [pc, #500]	; (800d284 <HAL_UART_IRQHandler+0x3dc>)
 800d090:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800d092:	687b      	ldr	r3, [r7, #4]
 800d094:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d096:	4618      	mov	r0, r3
 800d098:	f7fd f8be 	bl	800a218 <HAL_DMA_Abort_IT>
 800d09c:	4603      	mov	r3, r0
 800d09e:	2b00      	cmp	r3, #0
 800d0a0:	d016      	beq.n	800d0d0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d0a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d0a8:	687a      	ldr	r2, [r7, #4]
 800d0aa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800d0ac:	4610      	mov	r0, r2
 800d0ae:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d0b0:	e00e      	b.n	800d0d0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800d0b2:	6878      	ldr	r0, [r7, #4]
 800d0b4:	f7fc fbf6 	bl	80098a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d0b8:	e00a      	b.n	800d0d0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800d0ba:	6878      	ldr	r0, [r7, #4]
 800d0bc:	f7fc fbf2 	bl	80098a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d0c0:	e006      	b.n	800d0d0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800d0c2:	6878      	ldr	r0, [r7, #4]
 800d0c4:	f7fc fbee 	bl	80098a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d0c8:	687b      	ldr	r3, [r7, #4]
 800d0ca:	2200      	movs	r2, #0
 800d0cc:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800d0ce:	e170      	b.n	800d3b2 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d0d0:	bf00      	nop
    return;
 800d0d2:	e16e      	b.n	800d3b2 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d0d4:	687b      	ldr	r3, [r7, #4]
 800d0d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d0d8:	2b01      	cmp	r3, #1
 800d0da:	f040 814a 	bne.w	800d372 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800d0de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d0e2:	f003 0310 	and.w	r3, r3, #16
 800d0e6:	2b00      	cmp	r3, #0
 800d0e8:	f000 8143 	beq.w	800d372 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800d0ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d0f0:	f003 0310 	and.w	r3, r3, #16
 800d0f4:	2b00      	cmp	r3, #0
 800d0f6:	f000 813c 	beq.w	800d372 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800d0fa:	2300      	movs	r3, #0
 800d0fc:	60bb      	str	r3, [r7, #8]
 800d0fe:	687b      	ldr	r3, [r7, #4]
 800d100:	681b      	ldr	r3, [r3, #0]
 800d102:	681b      	ldr	r3, [r3, #0]
 800d104:	60bb      	str	r3, [r7, #8]
 800d106:	687b      	ldr	r3, [r7, #4]
 800d108:	681b      	ldr	r3, [r3, #0]
 800d10a:	685b      	ldr	r3, [r3, #4]
 800d10c:	60bb      	str	r3, [r7, #8]
 800d10e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	681b      	ldr	r3, [r3, #0]
 800d114:	695b      	ldr	r3, [r3, #20]
 800d116:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d11a:	2b40      	cmp	r3, #64	; 0x40
 800d11c:	f040 80b4 	bne.w	800d288 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800d120:	687b      	ldr	r3, [r7, #4]
 800d122:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d124:	681b      	ldr	r3, [r3, #0]
 800d126:	685b      	ldr	r3, [r3, #4]
 800d128:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800d12c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800d130:	2b00      	cmp	r3, #0
 800d132:	f000 8140 	beq.w	800d3b6 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800d13a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800d13e:	429a      	cmp	r2, r3
 800d140:	f080 8139 	bcs.w	800d3b6 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800d14a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800d14c:	687b      	ldr	r3, [r7, #4]
 800d14e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d150:	69db      	ldr	r3, [r3, #28]
 800d152:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d156:	f000 8088 	beq.w	800d26a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d15a:	687b      	ldr	r3, [r7, #4]
 800d15c:	681b      	ldr	r3, [r3, #0]
 800d15e:	330c      	adds	r3, #12
 800d160:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d164:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800d168:	e853 3f00 	ldrex	r3, [r3]
 800d16c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800d170:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800d174:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d178:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800d17c:	687b      	ldr	r3, [r7, #4]
 800d17e:	681b      	ldr	r3, [r3, #0]
 800d180:	330c      	adds	r3, #12
 800d182:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800d186:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800d18a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d18e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800d192:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800d196:	e841 2300 	strex	r3, r2, [r1]
 800d19a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800d19e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d1a2:	2b00      	cmp	r3, #0
 800d1a4:	d1d9      	bne.n	800d15a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d1a6:	687b      	ldr	r3, [r7, #4]
 800d1a8:	681b      	ldr	r3, [r3, #0]
 800d1aa:	3314      	adds	r3, #20
 800d1ac:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d1ae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d1b0:	e853 3f00 	ldrex	r3, [r3]
 800d1b4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800d1b6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d1b8:	f023 0301 	bic.w	r3, r3, #1
 800d1bc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	681b      	ldr	r3, [r3, #0]
 800d1c4:	3314      	adds	r3, #20
 800d1c6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800d1ca:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800d1ce:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d1d0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800d1d2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800d1d6:	e841 2300 	strex	r3, r2, [r1]
 800d1da:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800d1dc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d1de:	2b00      	cmp	r3, #0
 800d1e0:	d1e1      	bne.n	800d1a6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d1e2:	687b      	ldr	r3, [r7, #4]
 800d1e4:	681b      	ldr	r3, [r3, #0]
 800d1e6:	3314      	adds	r3, #20
 800d1e8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d1ea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d1ec:	e853 3f00 	ldrex	r3, [r3]
 800d1f0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800d1f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d1f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d1f8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800d1fc:	687b      	ldr	r3, [r7, #4]
 800d1fe:	681b      	ldr	r3, [r3, #0]
 800d200:	3314      	adds	r3, #20
 800d202:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800d206:	66fa      	str	r2, [r7, #108]	; 0x6c
 800d208:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d20a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800d20c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800d20e:	e841 2300 	strex	r3, r2, [r1]
 800d212:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800d214:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d216:	2b00      	cmp	r3, #0
 800d218:	d1e3      	bne.n	800d1e2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800d21a:	687b      	ldr	r3, [r7, #4]
 800d21c:	2220      	movs	r2, #32
 800d21e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d222:	687b      	ldr	r3, [r7, #4]
 800d224:	2200      	movs	r2, #0
 800d226:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d228:	687b      	ldr	r3, [r7, #4]
 800d22a:	681b      	ldr	r3, [r3, #0]
 800d22c:	330c      	adds	r3, #12
 800d22e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d230:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d232:	e853 3f00 	ldrex	r3, [r3]
 800d236:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800d238:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d23a:	f023 0310 	bic.w	r3, r3, #16
 800d23e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800d242:	687b      	ldr	r3, [r7, #4]
 800d244:	681b      	ldr	r3, [r3, #0]
 800d246:	330c      	adds	r3, #12
 800d248:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800d24c:	65ba      	str	r2, [r7, #88]	; 0x58
 800d24e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d250:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800d252:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d254:	e841 2300 	strex	r3, r2, [r1]
 800d258:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800d25a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d25c:	2b00      	cmp	r3, #0
 800d25e:	d1e3      	bne.n	800d228 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800d260:	687b      	ldr	r3, [r7, #4]
 800d262:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d264:	4618      	mov	r0, r3
 800d266:	f7fc ff67 	bl	800a138 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800d26a:	687b      	ldr	r3, [r7, #4]
 800d26c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800d26e:	687b      	ldr	r3, [r7, #4]
 800d270:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800d272:	b29b      	uxth	r3, r3
 800d274:	1ad3      	subs	r3, r2, r3
 800d276:	b29b      	uxth	r3, r3
 800d278:	4619      	mov	r1, r3
 800d27a:	6878      	ldr	r0, [r7, #4]
 800d27c:	f000 f8b6 	bl	800d3ec <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800d280:	e099      	b.n	800d3b6 <HAL_UART_IRQHandler+0x50e>
 800d282:	bf00      	nop
 800d284:	0800d91b 	.word	0x0800d91b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800d288:	687b      	ldr	r3, [r7, #4]
 800d28a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800d28c:	687b      	ldr	r3, [r7, #4]
 800d28e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800d290:	b29b      	uxth	r3, r3
 800d292:	1ad3      	subs	r3, r2, r3
 800d294:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800d298:	687b      	ldr	r3, [r7, #4]
 800d29a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800d29c:	b29b      	uxth	r3, r3
 800d29e:	2b00      	cmp	r3, #0
 800d2a0:	f000 808b 	beq.w	800d3ba <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800d2a4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800d2a8:	2b00      	cmp	r3, #0
 800d2aa:	f000 8086 	beq.w	800d3ba <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800d2ae:	687b      	ldr	r3, [r7, #4]
 800d2b0:	681b      	ldr	r3, [r3, #0]
 800d2b2:	330c      	adds	r3, #12
 800d2b4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d2b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d2b8:	e853 3f00 	ldrex	r3, [r3]
 800d2bc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800d2be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d2c0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800d2c4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	681b      	ldr	r3, [r3, #0]
 800d2cc:	330c      	adds	r3, #12
 800d2ce:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800d2d2:	647a      	str	r2, [r7, #68]	; 0x44
 800d2d4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d2d6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800d2d8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d2da:	e841 2300 	strex	r3, r2, [r1]
 800d2de:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800d2e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d2e2:	2b00      	cmp	r3, #0
 800d2e4:	d1e3      	bne.n	800d2ae <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d2e6:	687b      	ldr	r3, [r7, #4]
 800d2e8:	681b      	ldr	r3, [r3, #0]
 800d2ea:	3314      	adds	r3, #20
 800d2ec:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d2ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2f0:	e853 3f00 	ldrex	r3, [r3]
 800d2f4:	623b      	str	r3, [r7, #32]
   return(result);
 800d2f6:	6a3b      	ldr	r3, [r7, #32]
 800d2f8:	f023 0301 	bic.w	r3, r3, #1
 800d2fc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800d300:	687b      	ldr	r3, [r7, #4]
 800d302:	681b      	ldr	r3, [r3, #0]
 800d304:	3314      	adds	r3, #20
 800d306:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800d30a:	633a      	str	r2, [r7, #48]	; 0x30
 800d30c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d30e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d310:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d312:	e841 2300 	strex	r3, r2, [r1]
 800d316:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800d318:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d31a:	2b00      	cmp	r3, #0
 800d31c:	d1e3      	bne.n	800d2e6 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800d31e:	687b      	ldr	r3, [r7, #4]
 800d320:	2220      	movs	r2, #32
 800d322:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d326:	687b      	ldr	r3, [r7, #4]
 800d328:	2200      	movs	r2, #0
 800d32a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d32c:	687b      	ldr	r3, [r7, #4]
 800d32e:	681b      	ldr	r3, [r3, #0]
 800d330:	330c      	adds	r3, #12
 800d332:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d334:	693b      	ldr	r3, [r7, #16]
 800d336:	e853 3f00 	ldrex	r3, [r3]
 800d33a:	60fb      	str	r3, [r7, #12]
   return(result);
 800d33c:	68fb      	ldr	r3, [r7, #12]
 800d33e:	f023 0310 	bic.w	r3, r3, #16
 800d342:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800d346:	687b      	ldr	r3, [r7, #4]
 800d348:	681b      	ldr	r3, [r3, #0]
 800d34a:	330c      	adds	r3, #12
 800d34c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800d350:	61fa      	str	r2, [r7, #28]
 800d352:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d354:	69b9      	ldr	r1, [r7, #24]
 800d356:	69fa      	ldr	r2, [r7, #28]
 800d358:	e841 2300 	strex	r3, r2, [r1]
 800d35c:	617b      	str	r3, [r7, #20]
   return(result);
 800d35e:	697b      	ldr	r3, [r7, #20]
 800d360:	2b00      	cmp	r3, #0
 800d362:	d1e3      	bne.n	800d32c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800d364:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800d368:	4619      	mov	r1, r3
 800d36a:	6878      	ldr	r0, [r7, #4]
 800d36c:	f000 f83e 	bl	800d3ec <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800d370:	e023      	b.n	800d3ba <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800d372:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d376:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d37a:	2b00      	cmp	r3, #0
 800d37c:	d009      	beq.n	800d392 <HAL_UART_IRQHandler+0x4ea>
 800d37e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d382:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d386:	2b00      	cmp	r3, #0
 800d388:	d003      	beq.n	800d392 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800d38a:	6878      	ldr	r0, [r7, #4]
 800d38c:	f000 fad9 	bl	800d942 <UART_Transmit_IT>
    return;
 800d390:	e014      	b.n	800d3bc <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800d392:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d396:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d39a:	2b00      	cmp	r3, #0
 800d39c:	d00e      	beq.n	800d3bc <HAL_UART_IRQHandler+0x514>
 800d39e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d3a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d3a6:	2b00      	cmp	r3, #0
 800d3a8:	d008      	beq.n	800d3bc <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800d3aa:	6878      	ldr	r0, [r7, #4]
 800d3ac:	f000 fb19 	bl	800d9e2 <UART_EndTransmit_IT>
    return;
 800d3b0:	e004      	b.n	800d3bc <HAL_UART_IRQHandler+0x514>
    return;
 800d3b2:	bf00      	nop
 800d3b4:	e002      	b.n	800d3bc <HAL_UART_IRQHandler+0x514>
      return;
 800d3b6:	bf00      	nop
 800d3b8:	e000      	b.n	800d3bc <HAL_UART_IRQHandler+0x514>
      return;
 800d3ba:	bf00      	nop
  }
}
 800d3bc:	37e8      	adds	r7, #232	; 0xe8
 800d3be:	46bd      	mov	sp, r7
 800d3c0:	bd80      	pop	{r7, pc}
 800d3c2:	bf00      	nop

0800d3c4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800d3c4:	b480      	push	{r7}
 800d3c6:	b083      	sub	sp, #12
 800d3c8:	af00      	add	r7, sp, #0
 800d3ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800d3cc:	bf00      	nop
 800d3ce:	370c      	adds	r7, #12
 800d3d0:	46bd      	mov	sp, r7
 800d3d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3d6:	4770      	bx	lr

0800d3d8 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800d3d8:	b480      	push	{r7}
 800d3da:	b083      	sub	sp, #12
 800d3dc:	af00      	add	r7, sp, #0
 800d3de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800d3e0:	bf00      	nop
 800d3e2:	370c      	adds	r7, #12
 800d3e4:	46bd      	mov	sp, r7
 800d3e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3ea:	4770      	bx	lr

0800d3ec <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800d3ec:	b480      	push	{r7}
 800d3ee:	b083      	sub	sp, #12
 800d3f0:	af00      	add	r7, sp, #0
 800d3f2:	6078      	str	r0, [r7, #4]
 800d3f4:	460b      	mov	r3, r1
 800d3f6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800d3f8:	bf00      	nop
 800d3fa:	370c      	adds	r7, #12
 800d3fc:	46bd      	mov	sp, r7
 800d3fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d402:	4770      	bx	lr

0800d404 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800d404:	b580      	push	{r7, lr}
 800d406:	b09c      	sub	sp, #112	; 0x70
 800d408:	af00      	add	r7, sp, #0
 800d40a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800d40c:	687b      	ldr	r3, [r7, #4]
 800d40e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d410:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800d412:	687b      	ldr	r3, [r7, #4]
 800d414:	681b      	ldr	r3, [r3, #0]
 800d416:	681b      	ldr	r3, [r3, #0]
 800d418:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d41c:	2b00      	cmp	r3, #0
 800d41e:	d172      	bne.n	800d506 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800d420:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d422:	2200      	movs	r2, #0
 800d424:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d426:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d428:	681b      	ldr	r3, [r3, #0]
 800d42a:	330c      	adds	r3, #12
 800d42c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d42e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d430:	e853 3f00 	ldrex	r3, [r3]
 800d434:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800d436:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d438:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d43c:	66bb      	str	r3, [r7, #104]	; 0x68
 800d43e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d440:	681b      	ldr	r3, [r3, #0]
 800d442:	330c      	adds	r3, #12
 800d444:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800d446:	65ba      	str	r2, [r7, #88]	; 0x58
 800d448:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d44a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800d44c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d44e:	e841 2300 	strex	r3, r2, [r1]
 800d452:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800d454:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d456:	2b00      	cmp	r3, #0
 800d458:	d1e5      	bne.n	800d426 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d45a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d45c:	681b      	ldr	r3, [r3, #0]
 800d45e:	3314      	adds	r3, #20
 800d460:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d462:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d464:	e853 3f00 	ldrex	r3, [r3]
 800d468:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800d46a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d46c:	f023 0301 	bic.w	r3, r3, #1
 800d470:	667b      	str	r3, [r7, #100]	; 0x64
 800d472:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d474:	681b      	ldr	r3, [r3, #0]
 800d476:	3314      	adds	r3, #20
 800d478:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800d47a:	647a      	str	r2, [r7, #68]	; 0x44
 800d47c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d47e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800d480:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d482:	e841 2300 	strex	r3, r2, [r1]
 800d486:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800d488:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d48a:	2b00      	cmp	r3, #0
 800d48c:	d1e5      	bne.n	800d45a <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d48e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d490:	681b      	ldr	r3, [r3, #0]
 800d492:	3314      	adds	r3, #20
 800d494:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d498:	e853 3f00 	ldrex	r3, [r3]
 800d49c:	623b      	str	r3, [r7, #32]
   return(result);
 800d49e:	6a3b      	ldr	r3, [r7, #32]
 800d4a0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d4a4:	663b      	str	r3, [r7, #96]	; 0x60
 800d4a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d4a8:	681b      	ldr	r3, [r3, #0]
 800d4aa:	3314      	adds	r3, #20
 800d4ac:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800d4ae:	633a      	str	r2, [r7, #48]	; 0x30
 800d4b0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d4b2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d4b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d4b6:	e841 2300 	strex	r3, r2, [r1]
 800d4ba:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800d4bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4be:	2b00      	cmp	r3, #0
 800d4c0:	d1e5      	bne.n	800d48e <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800d4c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d4c4:	2220      	movs	r2, #32
 800d4c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d4ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d4cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d4ce:	2b01      	cmp	r3, #1
 800d4d0:	d119      	bne.n	800d506 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d4d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d4d4:	681b      	ldr	r3, [r3, #0]
 800d4d6:	330c      	adds	r3, #12
 800d4d8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d4da:	693b      	ldr	r3, [r7, #16]
 800d4dc:	e853 3f00 	ldrex	r3, [r3]
 800d4e0:	60fb      	str	r3, [r7, #12]
   return(result);
 800d4e2:	68fb      	ldr	r3, [r7, #12]
 800d4e4:	f023 0310 	bic.w	r3, r3, #16
 800d4e8:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d4ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d4ec:	681b      	ldr	r3, [r3, #0]
 800d4ee:	330c      	adds	r3, #12
 800d4f0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800d4f2:	61fa      	str	r2, [r7, #28]
 800d4f4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d4f6:	69b9      	ldr	r1, [r7, #24]
 800d4f8:	69fa      	ldr	r2, [r7, #28]
 800d4fa:	e841 2300 	strex	r3, r2, [r1]
 800d4fe:	617b      	str	r3, [r7, #20]
   return(result);
 800d500:	697b      	ldr	r3, [r7, #20]
 800d502:	2b00      	cmp	r3, #0
 800d504:	d1e5      	bne.n	800d4d2 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d506:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d50a:	2b01      	cmp	r3, #1
 800d50c:	d106      	bne.n	800d51c <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d50e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d510:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800d512:	4619      	mov	r1, r3
 800d514:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800d516:	f7ff ff69 	bl	800d3ec <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800d51a:	e002      	b.n	800d522 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 800d51c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800d51e:	f7fc f9cb 	bl	80098b8 <HAL_UART_RxCpltCallback>
}
 800d522:	bf00      	nop
 800d524:	3770      	adds	r7, #112	; 0x70
 800d526:	46bd      	mov	sp, r7
 800d528:	bd80      	pop	{r7, pc}

0800d52a <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800d52a:	b580      	push	{r7, lr}
 800d52c:	b084      	sub	sp, #16
 800d52e:	af00      	add	r7, sp, #0
 800d530:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800d532:	687b      	ldr	r3, [r7, #4]
 800d534:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d536:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d538:	68fb      	ldr	r3, [r7, #12]
 800d53a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d53c:	2b01      	cmp	r3, #1
 800d53e:	d108      	bne.n	800d552 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800d540:	68fb      	ldr	r3, [r7, #12]
 800d542:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800d544:	085b      	lsrs	r3, r3, #1
 800d546:	b29b      	uxth	r3, r3
 800d548:	4619      	mov	r1, r3
 800d54a:	68f8      	ldr	r0, [r7, #12]
 800d54c:	f7ff ff4e 	bl	800d3ec <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800d550:	e002      	b.n	800d558 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 800d552:	68f8      	ldr	r0, [r7, #12]
 800d554:	f7ff ff40 	bl	800d3d8 <HAL_UART_RxHalfCpltCallback>
}
 800d558:	bf00      	nop
 800d55a:	3710      	adds	r7, #16
 800d55c:	46bd      	mov	sp, r7
 800d55e:	bd80      	pop	{r7, pc}

0800d560 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800d560:	b580      	push	{r7, lr}
 800d562:	b084      	sub	sp, #16
 800d564:	af00      	add	r7, sp, #0
 800d566:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800d568:	2300      	movs	r3, #0
 800d56a:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800d56c:	687b      	ldr	r3, [r7, #4]
 800d56e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d570:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800d572:	68bb      	ldr	r3, [r7, #8]
 800d574:	681b      	ldr	r3, [r3, #0]
 800d576:	695b      	ldr	r3, [r3, #20]
 800d578:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d57c:	2b80      	cmp	r3, #128	; 0x80
 800d57e:	bf0c      	ite	eq
 800d580:	2301      	moveq	r3, #1
 800d582:	2300      	movne	r3, #0
 800d584:	b2db      	uxtb	r3, r3
 800d586:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800d588:	68bb      	ldr	r3, [r7, #8]
 800d58a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d58e:	b2db      	uxtb	r3, r3
 800d590:	2b21      	cmp	r3, #33	; 0x21
 800d592:	d108      	bne.n	800d5a6 <UART_DMAError+0x46>
 800d594:	68fb      	ldr	r3, [r7, #12]
 800d596:	2b00      	cmp	r3, #0
 800d598:	d005      	beq.n	800d5a6 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800d59a:	68bb      	ldr	r3, [r7, #8]
 800d59c:	2200      	movs	r2, #0
 800d59e:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800d5a0:	68b8      	ldr	r0, [r7, #8]
 800d5a2:	f000 f92f 	bl	800d804 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800d5a6:	68bb      	ldr	r3, [r7, #8]
 800d5a8:	681b      	ldr	r3, [r3, #0]
 800d5aa:	695b      	ldr	r3, [r3, #20]
 800d5ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d5b0:	2b40      	cmp	r3, #64	; 0x40
 800d5b2:	bf0c      	ite	eq
 800d5b4:	2301      	moveq	r3, #1
 800d5b6:	2300      	movne	r3, #0
 800d5b8:	b2db      	uxtb	r3, r3
 800d5ba:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800d5bc:	68bb      	ldr	r3, [r7, #8]
 800d5be:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800d5c2:	b2db      	uxtb	r3, r3
 800d5c4:	2b22      	cmp	r3, #34	; 0x22
 800d5c6:	d108      	bne.n	800d5da <UART_DMAError+0x7a>
 800d5c8:	68fb      	ldr	r3, [r7, #12]
 800d5ca:	2b00      	cmp	r3, #0
 800d5cc:	d005      	beq.n	800d5da <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800d5ce:	68bb      	ldr	r3, [r7, #8]
 800d5d0:	2200      	movs	r2, #0
 800d5d2:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800d5d4:	68b8      	ldr	r0, [r7, #8]
 800d5d6:	f000 f93d 	bl	800d854 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800d5da:	68bb      	ldr	r3, [r7, #8]
 800d5dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d5de:	f043 0210 	orr.w	r2, r3, #16
 800d5e2:	68bb      	ldr	r3, [r7, #8]
 800d5e4:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800d5e6:	68b8      	ldr	r0, [r7, #8]
 800d5e8:	f7fc f95c 	bl	80098a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d5ec:	bf00      	nop
 800d5ee:	3710      	adds	r7, #16
 800d5f0:	46bd      	mov	sp, r7
 800d5f2:	bd80      	pop	{r7, pc}

0800d5f4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800d5f4:	b580      	push	{r7, lr}
 800d5f6:	b090      	sub	sp, #64	; 0x40
 800d5f8:	af00      	add	r7, sp, #0
 800d5fa:	60f8      	str	r0, [r7, #12]
 800d5fc:	60b9      	str	r1, [r7, #8]
 800d5fe:	603b      	str	r3, [r7, #0]
 800d600:	4613      	mov	r3, r2
 800d602:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d604:	e050      	b.n	800d6a8 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d606:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d608:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d60c:	d04c      	beq.n	800d6a8 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800d60e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d610:	2b00      	cmp	r3, #0
 800d612:	d007      	beq.n	800d624 <UART_WaitOnFlagUntilTimeout+0x30>
 800d614:	f7fc fab8 	bl	8009b88 <HAL_GetTick>
 800d618:	4602      	mov	r2, r0
 800d61a:	683b      	ldr	r3, [r7, #0]
 800d61c:	1ad3      	subs	r3, r2, r3
 800d61e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d620:	429a      	cmp	r2, r3
 800d622:	d241      	bcs.n	800d6a8 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800d624:	68fb      	ldr	r3, [r7, #12]
 800d626:	681b      	ldr	r3, [r3, #0]
 800d628:	330c      	adds	r3, #12
 800d62a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d62c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d62e:	e853 3f00 	ldrex	r3, [r3]
 800d632:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d636:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800d63a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d63c:	68fb      	ldr	r3, [r7, #12]
 800d63e:	681b      	ldr	r3, [r3, #0]
 800d640:	330c      	adds	r3, #12
 800d642:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d644:	637a      	str	r2, [r7, #52]	; 0x34
 800d646:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d648:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d64a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d64c:	e841 2300 	strex	r3, r2, [r1]
 800d650:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800d652:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d654:	2b00      	cmp	r3, #0
 800d656:	d1e5      	bne.n	800d624 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d658:	68fb      	ldr	r3, [r7, #12]
 800d65a:	681b      	ldr	r3, [r3, #0]
 800d65c:	3314      	adds	r3, #20
 800d65e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d660:	697b      	ldr	r3, [r7, #20]
 800d662:	e853 3f00 	ldrex	r3, [r3]
 800d666:	613b      	str	r3, [r7, #16]
   return(result);
 800d668:	693b      	ldr	r3, [r7, #16]
 800d66a:	f023 0301 	bic.w	r3, r3, #1
 800d66e:	63bb      	str	r3, [r7, #56]	; 0x38
 800d670:	68fb      	ldr	r3, [r7, #12]
 800d672:	681b      	ldr	r3, [r3, #0]
 800d674:	3314      	adds	r3, #20
 800d676:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d678:	623a      	str	r2, [r7, #32]
 800d67a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d67c:	69f9      	ldr	r1, [r7, #28]
 800d67e:	6a3a      	ldr	r2, [r7, #32]
 800d680:	e841 2300 	strex	r3, r2, [r1]
 800d684:	61bb      	str	r3, [r7, #24]
   return(result);
 800d686:	69bb      	ldr	r3, [r7, #24]
 800d688:	2b00      	cmp	r3, #0
 800d68a:	d1e5      	bne.n	800d658 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800d68c:	68fb      	ldr	r3, [r7, #12]
 800d68e:	2220      	movs	r2, #32
 800d690:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800d694:	68fb      	ldr	r3, [r7, #12]
 800d696:	2220      	movs	r2, #32
 800d698:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800d69c:	68fb      	ldr	r3, [r7, #12]
 800d69e:	2200      	movs	r2, #0
 800d6a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800d6a4:	2303      	movs	r3, #3
 800d6a6:	e00f      	b.n	800d6c8 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d6a8:	68fb      	ldr	r3, [r7, #12]
 800d6aa:	681b      	ldr	r3, [r3, #0]
 800d6ac:	681a      	ldr	r2, [r3, #0]
 800d6ae:	68bb      	ldr	r3, [r7, #8]
 800d6b0:	4013      	ands	r3, r2
 800d6b2:	68ba      	ldr	r2, [r7, #8]
 800d6b4:	429a      	cmp	r2, r3
 800d6b6:	bf0c      	ite	eq
 800d6b8:	2301      	moveq	r3, #1
 800d6ba:	2300      	movne	r3, #0
 800d6bc:	b2db      	uxtb	r3, r3
 800d6be:	461a      	mov	r2, r3
 800d6c0:	79fb      	ldrb	r3, [r7, #7]
 800d6c2:	429a      	cmp	r2, r3
 800d6c4:	d09f      	beq.n	800d606 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800d6c6:	2300      	movs	r3, #0
}
 800d6c8:	4618      	mov	r0, r3
 800d6ca:	3740      	adds	r7, #64	; 0x40
 800d6cc:	46bd      	mov	sp, r7
 800d6ce:	bd80      	pop	{r7, pc}

0800d6d0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800d6d0:	b580      	push	{r7, lr}
 800d6d2:	b098      	sub	sp, #96	; 0x60
 800d6d4:	af00      	add	r7, sp, #0
 800d6d6:	60f8      	str	r0, [r7, #12]
 800d6d8:	60b9      	str	r1, [r7, #8]
 800d6da:	4613      	mov	r3, r2
 800d6dc:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800d6de:	68ba      	ldr	r2, [r7, #8]
 800d6e0:	68fb      	ldr	r3, [r7, #12]
 800d6e2:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800d6e4:	68fb      	ldr	r3, [r7, #12]
 800d6e6:	88fa      	ldrh	r2, [r7, #6]
 800d6e8:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d6ea:	68fb      	ldr	r3, [r7, #12]
 800d6ec:	2200      	movs	r2, #0
 800d6ee:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800d6f0:	68fb      	ldr	r3, [r7, #12]
 800d6f2:	2222      	movs	r2, #34	; 0x22
 800d6f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800d6f8:	68fb      	ldr	r3, [r7, #12]
 800d6fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d6fc:	4a3e      	ldr	r2, [pc, #248]	; (800d7f8 <UART_Start_Receive_DMA+0x128>)
 800d6fe:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800d700:	68fb      	ldr	r3, [r7, #12]
 800d702:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d704:	4a3d      	ldr	r2, [pc, #244]	; (800d7fc <UART_Start_Receive_DMA+0x12c>)
 800d706:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800d708:	68fb      	ldr	r3, [r7, #12]
 800d70a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d70c:	4a3c      	ldr	r2, [pc, #240]	; (800d800 <UART_Start_Receive_DMA+0x130>)
 800d70e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800d710:	68fb      	ldr	r3, [r7, #12]
 800d712:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d714:	2200      	movs	r2, #0
 800d716:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800d718:	f107 0308 	add.w	r3, r7, #8
 800d71c:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800d71e:	68fb      	ldr	r3, [r7, #12]
 800d720:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800d722:	68fb      	ldr	r3, [r7, #12]
 800d724:	681b      	ldr	r3, [r3, #0]
 800d726:	3304      	adds	r3, #4
 800d728:	4619      	mov	r1, r3
 800d72a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d72c:	681a      	ldr	r2, [r3, #0]
 800d72e:	88fb      	ldrh	r3, [r7, #6]
 800d730:	f7fc fcaa 	bl	800a088 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800d734:	2300      	movs	r3, #0
 800d736:	613b      	str	r3, [r7, #16]
 800d738:	68fb      	ldr	r3, [r7, #12]
 800d73a:	681b      	ldr	r3, [r3, #0]
 800d73c:	681b      	ldr	r3, [r3, #0]
 800d73e:	613b      	str	r3, [r7, #16]
 800d740:	68fb      	ldr	r3, [r7, #12]
 800d742:	681b      	ldr	r3, [r3, #0]
 800d744:	685b      	ldr	r3, [r3, #4]
 800d746:	613b      	str	r3, [r7, #16]
 800d748:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d74a:	68fb      	ldr	r3, [r7, #12]
 800d74c:	2200      	movs	r2, #0
 800d74e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d752:	68fb      	ldr	r3, [r7, #12]
 800d754:	681b      	ldr	r3, [r3, #0]
 800d756:	330c      	adds	r3, #12
 800d758:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d75a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d75c:	e853 3f00 	ldrex	r3, [r3]
 800d760:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800d762:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d764:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d768:	65bb      	str	r3, [r7, #88]	; 0x58
 800d76a:	68fb      	ldr	r3, [r7, #12]
 800d76c:	681b      	ldr	r3, [r3, #0]
 800d76e:	330c      	adds	r3, #12
 800d770:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d772:	64fa      	str	r2, [r7, #76]	; 0x4c
 800d774:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d776:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800d778:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800d77a:	e841 2300 	strex	r3, r2, [r1]
 800d77e:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800d780:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d782:	2b00      	cmp	r3, #0
 800d784:	d1e5      	bne.n	800d752 <UART_Start_Receive_DMA+0x82>

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d786:	68fb      	ldr	r3, [r7, #12]
 800d788:	681b      	ldr	r3, [r3, #0]
 800d78a:	3314      	adds	r3, #20
 800d78c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d78e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d790:	e853 3f00 	ldrex	r3, [r3]
 800d794:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800d796:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d798:	f043 0301 	orr.w	r3, r3, #1
 800d79c:	657b      	str	r3, [r7, #84]	; 0x54
 800d79e:	68fb      	ldr	r3, [r7, #12]
 800d7a0:	681b      	ldr	r3, [r3, #0]
 800d7a2:	3314      	adds	r3, #20
 800d7a4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800d7a6:	63ba      	str	r2, [r7, #56]	; 0x38
 800d7a8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d7aa:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800d7ac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d7ae:	e841 2300 	strex	r3, r2, [r1]
 800d7b2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800d7b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7b6:	2b00      	cmp	r3, #0
 800d7b8:	d1e5      	bne.n	800d786 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d7ba:	68fb      	ldr	r3, [r7, #12]
 800d7bc:	681b      	ldr	r3, [r3, #0]
 800d7be:	3314      	adds	r3, #20
 800d7c0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d7c2:	69bb      	ldr	r3, [r7, #24]
 800d7c4:	e853 3f00 	ldrex	r3, [r3]
 800d7c8:	617b      	str	r3, [r7, #20]
   return(result);
 800d7ca:	697b      	ldr	r3, [r7, #20]
 800d7cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d7d0:	653b      	str	r3, [r7, #80]	; 0x50
 800d7d2:	68fb      	ldr	r3, [r7, #12]
 800d7d4:	681b      	ldr	r3, [r3, #0]
 800d7d6:	3314      	adds	r3, #20
 800d7d8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d7da:	627a      	str	r2, [r7, #36]	; 0x24
 800d7dc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d7de:	6a39      	ldr	r1, [r7, #32]
 800d7e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d7e2:	e841 2300 	strex	r3, r2, [r1]
 800d7e6:	61fb      	str	r3, [r7, #28]
   return(result);
 800d7e8:	69fb      	ldr	r3, [r7, #28]
 800d7ea:	2b00      	cmp	r3, #0
 800d7ec:	d1e5      	bne.n	800d7ba <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 800d7ee:	2300      	movs	r3, #0
}
 800d7f0:	4618      	mov	r0, r3
 800d7f2:	3760      	adds	r7, #96	; 0x60
 800d7f4:	46bd      	mov	sp, r7
 800d7f6:	bd80      	pop	{r7, pc}
 800d7f8:	0800d405 	.word	0x0800d405
 800d7fc:	0800d52b 	.word	0x0800d52b
 800d800:	0800d561 	.word	0x0800d561

0800d804 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800d804:	b480      	push	{r7}
 800d806:	b089      	sub	sp, #36	; 0x24
 800d808:	af00      	add	r7, sp, #0
 800d80a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	681b      	ldr	r3, [r3, #0]
 800d810:	330c      	adds	r3, #12
 800d812:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d814:	68fb      	ldr	r3, [r7, #12]
 800d816:	e853 3f00 	ldrex	r3, [r3]
 800d81a:	60bb      	str	r3, [r7, #8]
   return(result);
 800d81c:	68bb      	ldr	r3, [r7, #8]
 800d81e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800d822:	61fb      	str	r3, [r7, #28]
 800d824:	687b      	ldr	r3, [r7, #4]
 800d826:	681b      	ldr	r3, [r3, #0]
 800d828:	330c      	adds	r3, #12
 800d82a:	69fa      	ldr	r2, [r7, #28]
 800d82c:	61ba      	str	r2, [r7, #24]
 800d82e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d830:	6979      	ldr	r1, [r7, #20]
 800d832:	69ba      	ldr	r2, [r7, #24]
 800d834:	e841 2300 	strex	r3, r2, [r1]
 800d838:	613b      	str	r3, [r7, #16]
   return(result);
 800d83a:	693b      	ldr	r3, [r7, #16]
 800d83c:	2b00      	cmp	r3, #0
 800d83e:	d1e5      	bne.n	800d80c <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d840:	687b      	ldr	r3, [r7, #4]
 800d842:	2220      	movs	r2, #32
 800d844:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800d848:	bf00      	nop
 800d84a:	3724      	adds	r7, #36	; 0x24
 800d84c:	46bd      	mov	sp, r7
 800d84e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d852:	4770      	bx	lr

0800d854 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800d854:	b480      	push	{r7}
 800d856:	b095      	sub	sp, #84	; 0x54
 800d858:	af00      	add	r7, sp, #0
 800d85a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800d85c:	687b      	ldr	r3, [r7, #4]
 800d85e:	681b      	ldr	r3, [r3, #0]
 800d860:	330c      	adds	r3, #12
 800d862:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d864:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d866:	e853 3f00 	ldrex	r3, [r3]
 800d86a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800d86c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d86e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800d872:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d874:	687b      	ldr	r3, [r7, #4]
 800d876:	681b      	ldr	r3, [r3, #0]
 800d878:	330c      	adds	r3, #12
 800d87a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800d87c:	643a      	str	r2, [r7, #64]	; 0x40
 800d87e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d880:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800d882:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d884:	e841 2300 	strex	r3, r2, [r1]
 800d888:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800d88a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d88c:	2b00      	cmp	r3, #0
 800d88e:	d1e5      	bne.n	800d85c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d890:	687b      	ldr	r3, [r7, #4]
 800d892:	681b      	ldr	r3, [r3, #0]
 800d894:	3314      	adds	r3, #20
 800d896:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d898:	6a3b      	ldr	r3, [r7, #32]
 800d89a:	e853 3f00 	ldrex	r3, [r3]
 800d89e:	61fb      	str	r3, [r7, #28]
   return(result);
 800d8a0:	69fb      	ldr	r3, [r7, #28]
 800d8a2:	f023 0301 	bic.w	r3, r3, #1
 800d8a6:	64bb      	str	r3, [r7, #72]	; 0x48
 800d8a8:	687b      	ldr	r3, [r7, #4]
 800d8aa:	681b      	ldr	r3, [r3, #0]
 800d8ac:	3314      	adds	r3, #20
 800d8ae:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d8b0:	62fa      	str	r2, [r7, #44]	; 0x2c
 800d8b2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d8b4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d8b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d8b8:	e841 2300 	strex	r3, r2, [r1]
 800d8bc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d8be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8c0:	2b00      	cmp	r3, #0
 800d8c2:	d1e5      	bne.n	800d890 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d8c4:	687b      	ldr	r3, [r7, #4]
 800d8c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d8c8:	2b01      	cmp	r3, #1
 800d8ca:	d119      	bne.n	800d900 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d8cc:	687b      	ldr	r3, [r7, #4]
 800d8ce:	681b      	ldr	r3, [r3, #0]
 800d8d0:	330c      	adds	r3, #12
 800d8d2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d8d4:	68fb      	ldr	r3, [r7, #12]
 800d8d6:	e853 3f00 	ldrex	r3, [r3]
 800d8da:	60bb      	str	r3, [r7, #8]
   return(result);
 800d8dc:	68bb      	ldr	r3, [r7, #8]
 800d8de:	f023 0310 	bic.w	r3, r3, #16
 800d8e2:	647b      	str	r3, [r7, #68]	; 0x44
 800d8e4:	687b      	ldr	r3, [r7, #4]
 800d8e6:	681b      	ldr	r3, [r3, #0]
 800d8e8:	330c      	adds	r3, #12
 800d8ea:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d8ec:	61ba      	str	r2, [r7, #24]
 800d8ee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d8f0:	6979      	ldr	r1, [r7, #20]
 800d8f2:	69ba      	ldr	r2, [r7, #24]
 800d8f4:	e841 2300 	strex	r3, r2, [r1]
 800d8f8:	613b      	str	r3, [r7, #16]
   return(result);
 800d8fa:	693b      	ldr	r3, [r7, #16]
 800d8fc:	2b00      	cmp	r3, #0
 800d8fe:	d1e5      	bne.n	800d8cc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800d900:	687b      	ldr	r3, [r7, #4]
 800d902:	2220      	movs	r2, #32
 800d904:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d908:	687b      	ldr	r3, [r7, #4]
 800d90a:	2200      	movs	r2, #0
 800d90c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800d90e:	bf00      	nop
 800d910:	3754      	adds	r7, #84	; 0x54
 800d912:	46bd      	mov	sp, r7
 800d914:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d918:	4770      	bx	lr

0800d91a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800d91a:	b580      	push	{r7, lr}
 800d91c:	b084      	sub	sp, #16
 800d91e:	af00      	add	r7, sp, #0
 800d920:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800d922:	687b      	ldr	r3, [r7, #4]
 800d924:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d926:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800d928:	68fb      	ldr	r3, [r7, #12]
 800d92a:	2200      	movs	r2, #0
 800d92c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800d92e:	68fb      	ldr	r3, [r7, #12]
 800d930:	2200      	movs	r2, #0
 800d932:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800d934:	68f8      	ldr	r0, [r7, #12]
 800d936:	f7fb ffb5 	bl	80098a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d93a:	bf00      	nop
 800d93c:	3710      	adds	r7, #16
 800d93e:	46bd      	mov	sp, r7
 800d940:	bd80      	pop	{r7, pc}

0800d942 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800d942:	b480      	push	{r7}
 800d944:	b085      	sub	sp, #20
 800d946:	af00      	add	r7, sp, #0
 800d948:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800d94a:	687b      	ldr	r3, [r7, #4]
 800d94c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d950:	b2db      	uxtb	r3, r3
 800d952:	2b21      	cmp	r3, #33	; 0x21
 800d954:	d13e      	bne.n	800d9d4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d956:	687b      	ldr	r3, [r7, #4]
 800d958:	689b      	ldr	r3, [r3, #8]
 800d95a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d95e:	d114      	bne.n	800d98a <UART_Transmit_IT+0x48>
 800d960:	687b      	ldr	r3, [r7, #4]
 800d962:	691b      	ldr	r3, [r3, #16]
 800d964:	2b00      	cmp	r3, #0
 800d966:	d110      	bne.n	800d98a <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800d968:	687b      	ldr	r3, [r7, #4]
 800d96a:	6a1b      	ldr	r3, [r3, #32]
 800d96c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800d96e:	68fb      	ldr	r3, [r7, #12]
 800d970:	881b      	ldrh	r3, [r3, #0]
 800d972:	461a      	mov	r2, r3
 800d974:	687b      	ldr	r3, [r7, #4]
 800d976:	681b      	ldr	r3, [r3, #0]
 800d978:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800d97c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800d97e:	687b      	ldr	r3, [r7, #4]
 800d980:	6a1b      	ldr	r3, [r3, #32]
 800d982:	1c9a      	adds	r2, r3, #2
 800d984:	687b      	ldr	r3, [r7, #4]
 800d986:	621a      	str	r2, [r3, #32]
 800d988:	e008      	b.n	800d99c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800d98a:	687b      	ldr	r3, [r7, #4]
 800d98c:	6a1b      	ldr	r3, [r3, #32]
 800d98e:	1c59      	adds	r1, r3, #1
 800d990:	687a      	ldr	r2, [r7, #4]
 800d992:	6211      	str	r1, [r2, #32]
 800d994:	781a      	ldrb	r2, [r3, #0]
 800d996:	687b      	ldr	r3, [r7, #4]
 800d998:	681b      	ldr	r3, [r3, #0]
 800d99a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800d99c:	687b      	ldr	r3, [r7, #4]
 800d99e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800d9a0:	b29b      	uxth	r3, r3
 800d9a2:	3b01      	subs	r3, #1
 800d9a4:	b29b      	uxth	r3, r3
 800d9a6:	687a      	ldr	r2, [r7, #4]
 800d9a8:	4619      	mov	r1, r3
 800d9aa:	84d1      	strh	r1, [r2, #38]	; 0x26
 800d9ac:	2b00      	cmp	r3, #0
 800d9ae:	d10f      	bne.n	800d9d0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800d9b0:	687b      	ldr	r3, [r7, #4]
 800d9b2:	681b      	ldr	r3, [r3, #0]
 800d9b4:	68da      	ldr	r2, [r3, #12]
 800d9b6:	687b      	ldr	r3, [r7, #4]
 800d9b8:	681b      	ldr	r3, [r3, #0]
 800d9ba:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800d9be:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800d9c0:	687b      	ldr	r3, [r7, #4]
 800d9c2:	681b      	ldr	r3, [r3, #0]
 800d9c4:	68da      	ldr	r2, [r3, #12]
 800d9c6:	687b      	ldr	r3, [r7, #4]
 800d9c8:	681b      	ldr	r3, [r3, #0]
 800d9ca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d9ce:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800d9d0:	2300      	movs	r3, #0
 800d9d2:	e000      	b.n	800d9d6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800d9d4:	2302      	movs	r3, #2
  }
}
 800d9d6:	4618      	mov	r0, r3
 800d9d8:	3714      	adds	r7, #20
 800d9da:	46bd      	mov	sp, r7
 800d9dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9e0:	4770      	bx	lr

0800d9e2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800d9e2:	b580      	push	{r7, lr}
 800d9e4:	b082      	sub	sp, #8
 800d9e6:	af00      	add	r7, sp, #0
 800d9e8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800d9ea:	687b      	ldr	r3, [r7, #4]
 800d9ec:	681b      	ldr	r3, [r3, #0]
 800d9ee:	68da      	ldr	r2, [r3, #12]
 800d9f0:	687b      	ldr	r3, [r7, #4]
 800d9f2:	681b      	ldr	r3, [r3, #0]
 800d9f4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d9f8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d9fa:	687b      	ldr	r3, [r7, #4]
 800d9fc:	2220      	movs	r2, #32
 800d9fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800da02:	6878      	ldr	r0, [r7, #4]
 800da04:	f7ff fcde 	bl	800d3c4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800da08:	2300      	movs	r3, #0
}
 800da0a:	4618      	mov	r0, r3
 800da0c:	3708      	adds	r7, #8
 800da0e:	46bd      	mov	sp, r7
 800da10:	bd80      	pop	{r7, pc}

0800da12 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800da12:	b580      	push	{r7, lr}
 800da14:	b08c      	sub	sp, #48	; 0x30
 800da16:	af00      	add	r7, sp, #0
 800da18:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800da1a:	687b      	ldr	r3, [r7, #4]
 800da1c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800da20:	b2db      	uxtb	r3, r3
 800da22:	2b22      	cmp	r3, #34	; 0x22
 800da24:	f040 80ab 	bne.w	800db7e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800da28:	687b      	ldr	r3, [r7, #4]
 800da2a:	689b      	ldr	r3, [r3, #8]
 800da2c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800da30:	d117      	bne.n	800da62 <UART_Receive_IT+0x50>
 800da32:	687b      	ldr	r3, [r7, #4]
 800da34:	691b      	ldr	r3, [r3, #16]
 800da36:	2b00      	cmp	r3, #0
 800da38:	d113      	bne.n	800da62 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800da3a:	2300      	movs	r3, #0
 800da3c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800da3e:	687b      	ldr	r3, [r7, #4]
 800da40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800da42:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800da44:	687b      	ldr	r3, [r7, #4]
 800da46:	681b      	ldr	r3, [r3, #0]
 800da48:	685b      	ldr	r3, [r3, #4]
 800da4a:	b29b      	uxth	r3, r3
 800da4c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800da50:	b29a      	uxth	r2, r3
 800da52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da54:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800da56:	687b      	ldr	r3, [r7, #4]
 800da58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800da5a:	1c9a      	adds	r2, r3, #2
 800da5c:	687b      	ldr	r3, [r7, #4]
 800da5e:	629a      	str	r2, [r3, #40]	; 0x28
 800da60:	e026      	b.n	800dab0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800da62:	687b      	ldr	r3, [r7, #4]
 800da64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800da66:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800da68:	2300      	movs	r3, #0
 800da6a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800da6c:	687b      	ldr	r3, [r7, #4]
 800da6e:	689b      	ldr	r3, [r3, #8]
 800da70:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800da74:	d007      	beq.n	800da86 <UART_Receive_IT+0x74>
 800da76:	687b      	ldr	r3, [r7, #4]
 800da78:	689b      	ldr	r3, [r3, #8]
 800da7a:	2b00      	cmp	r3, #0
 800da7c:	d10a      	bne.n	800da94 <UART_Receive_IT+0x82>
 800da7e:	687b      	ldr	r3, [r7, #4]
 800da80:	691b      	ldr	r3, [r3, #16]
 800da82:	2b00      	cmp	r3, #0
 800da84:	d106      	bne.n	800da94 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800da86:	687b      	ldr	r3, [r7, #4]
 800da88:	681b      	ldr	r3, [r3, #0]
 800da8a:	685b      	ldr	r3, [r3, #4]
 800da8c:	b2da      	uxtb	r2, r3
 800da8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da90:	701a      	strb	r2, [r3, #0]
 800da92:	e008      	b.n	800daa6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800da94:	687b      	ldr	r3, [r7, #4]
 800da96:	681b      	ldr	r3, [r3, #0]
 800da98:	685b      	ldr	r3, [r3, #4]
 800da9a:	b2db      	uxtb	r3, r3
 800da9c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800daa0:	b2da      	uxtb	r2, r3
 800daa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800daa4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800daa6:	687b      	ldr	r3, [r7, #4]
 800daa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800daaa:	1c5a      	adds	r2, r3, #1
 800daac:	687b      	ldr	r3, [r7, #4]
 800daae:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800dab0:	687b      	ldr	r3, [r7, #4]
 800dab2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800dab4:	b29b      	uxth	r3, r3
 800dab6:	3b01      	subs	r3, #1
 800dab8:	b29b      	uxth	r3, r3
 800daba:	687a      	ldr	r2, [r7, #4]
 800dabc:	4619      	mov	r1, r3
 800dabe:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800dac0:	2b00      	cmp	r3, #0
 800dac2:	d15a      	bne.n	800db7a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800dac4:	687b      	ldr	r3, [r7, #4]
 800dac6:	681b      	ldr	r3, [r3, #0]
 800dac8:	68da      	ldr	r2, [r3, #12]
 800daca:	687b      	ldr	r3, [r7, #4]
 800dacc:	681b      	ldr	r3, [r3, #0]
 800dace:	f022 0220 	bic.w	r2, r2, #32
 800dad2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800dad4:	687b      	ldr	r3, [r7, #4]
 800dad6:	681b      	ldr	r3, [r3, #0]
 800dad8:	68da      	ldr	r2, [r3, #12]
 800dada:	687b      	ldr	r3, [r7, #4]
 800dadc:	681b      	ldr	r3, [r3, #0]
 800dade:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800dae2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800dae4:	687b      	ldr	r3, [r7, #4]
 800dae6:	681b      	ldr	r3, [r3, #0]
 800dae8:	695a      	ldr	r2, [r3, #20]
 800daea:	687b      	ldr	r3, [r7, #4]
 800daec:	681b      	ldr	r3, [r3, #0]
 800daee:	f022 0201 	bic.w	r2, r2, #1
 800daf2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800daf4:	687b      	ldr	r3, [r7, #4]
 800daf6:	2220      	movs	r2, #32
 800daf8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800dafc:	687b      	ldr	r3, [r7, #4]
 800dafe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800db00:	2b01      	cmp	r3, #1
 800db02:	d135      	bne.n	800db70 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800db04:	687b      	ldr	r3, [r7, #4]
 800db06:	2200      	movs	r2, #0
 800db08:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800db0a:	687b      	ldr	r3, [r7, #4]
 800db0c:	681b      	ldr	r3, [r3, #0]
 800db0e:	330c      	adds	r3, #12
 800db10:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800db12:	697b      	ldr	r3, [r7, #20]
 800db14:	e853 3f00 	ldrex	r3, [r3]
 800db18:	613b      	str	r3, [r7, #16]
   return(result);
 800db1a:	693b      	ldr	r3, [r7, #16]
 800db1c:	f023 0310 	bic.w	r3, r3, #16
 800db20:	627b      	str	r3, [r7, #36]	; 0x24
 800db22:	687b      	ldr	r3, [r7, #4]
 800db24:	681b      	ldr	r3, [r3, #0]
 800db26:	330c      	adds	r3, #12
 800db28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800db2a:	623a      	str	r2, [r7, #32]
 800db2c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800db2e:	69f9      	ldr	r1, [r7, #28]
 800db30:	6a3a      	ldr	r2, [r7, #32]
 800db32:	e841 2300 	strex	r3, r2, [r1]
 800db36:	61bb      	str	r3, [r7, #24]
   return(result);
 800db38:	69bb      	ldr	r3, [r7, #24]
 800db3a:	2b00      	cmp	r3, #0
 800db3c:	d1e5      	bne.n	800db0a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800db3e:	687b      	ldr	r3, [r7, #4]
 800db40:	681b      	ldr	r3, [r3, #0]
 800db42:	681b      	ldr	r3, [r3, #0]
 800db44:	f003 0310 	and.w	r3, r3, #16
 800db48:	2b10      	cmp	r3, #16
 800db4a:	d10a      	bne.n	800db62 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800db4c:	2300      	movs	r3, #0
 800db4e:	60fb      	str	r3, [r7, #12]
 800db50:	687b      	ldr	r3, [r7, #4]
 800db52:	681b      	ldr	r3, [r3, #0]
 800db54:	681b      	ldr	r3, [r3, #0]
 800db56:	60fb      	str	r3, [r7, #12]
 800db58:	687b      	ldr	r3, [r7, #4]
 800db5a:	681b      	ldr	r3, [r3, #0]
 800db5c:	685b      	ldr	r3, [r3, #4]
 800db5e:	60fb      	str	r3, [r7, #12]
 800db60:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800db62:	687b      	ldr	r3, [r7, #4]
 800db64:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800db66:	4619      	mov	r1, r3
 800db68:	6878      	ldr	r0, [r7, #4]
 800db6a:	f7ff fc3f 	bl	800d3ec <HAL_UARTEx_RxEventCallback>
 800db6e:	e002      	b.n	800db76 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800db70:	6878      	ldr	r0, [r7, #4]
 800db72:	f7fb fea1 	bl	80098b8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800db76:	2300      	movs	r3, #0
 800db78:	e002      	b.n	800db80 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800db7a:	2300      	movs	r3, #0
 800db7c:	e000      	b.n	800db80 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800db7e:	2302      	movs	r3, #2
  }
}
 800db80:	4618      	mov	r0, r3
 800db82:	3730      	adds	r7, #48	; 0x30
 800db84:	46bd      	mov	sp, r7
 800db86:	bd80      	pop	{r7, pc}

0800db88 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800db88:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800db8c:	b0c0      	sub	sp, #256	; 0x100
 800db8e:	af00      	add	r7, sp, #0
 800db90:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800db94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800db98:	681b      	ldr	r3, [r3, #0]
 800db9a:	691b      	ldr	r3, [r3, #16]
 800db9c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800dba0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800dba4:	68d9      	ldr	r1, [r3, #12]
 800dba6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800dbaa:	681a      	ldr	r2, [r3, #0]
 800dbac:	ea40 0301 	orr.w	r3, r0, r1
 800dbb0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800dbb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800dbb6:	689a      	ldr	r2, [r3, #8]
 800dbb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800dbbc:	691b      	ldr	r3, [r3, #16]
 800dbbe:	431a      	orrs	r2, r3
 800dbc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800dbc4:	695b      	ldr	r3, [r3, #20]
 800dbc6:	431a      	orrs	r2, r3
 800dbc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800dbcc:	69db      	ldr	r3, [r3, #28]
 800dbce:	4313      	orrs	r3, r2
 800dbd0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800dbd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800dbd8:	681b      	ldr	r3, [r3, #0]
 800dbda:	68db      	ldr	r3, [r3, #12]
 800dbdc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800dbe0:	f021 010c 	bic.w	r1, r1, #12
 800dbe4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800dbe8:	681a      	ldr	r2, [r3, #0]
 800dbea:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800dbee:	430b      	orrs	r3, r1
 800dbf0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800dbf2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800dbf6:	681b      	ldr	r3, [r3, #0]
 800dbf8:	695b      	ldr	r3, [r3, #20]
 800dbfa:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800dbfe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800dc02:	6999      	ldr	r1, [r3, #24]
 800dc04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800dc08:	681a      	ldr	r2, [r3, #0]
 800dc0a:	ea40 0301 	orr.w	r3, r0, r1
 800dc0e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800dc10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800dc14:	681a      	ldr	r2, [r3, #0]
 800dc16:	4b8f      	ldr	r3, [pc, #572]	; (800de54 <UART_SetConfig+0x2cc>)
 800dc18:	429a      	cmp	r2, r3
 800dc1a:	d005      	beq.n	800dc28 <UART_SetConfig+0xa0>
 800dc1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800dc20:	681a      	ldr	r2, [r3, #0]
 800dc22:	4b8d      	ldr	r3, [pc, #564]	; (800de58 <UART_SetConfig+0x2d0>)
 800dc24:	429a      	cmp	r2, r3
 800dc26:	d104      	bne.n	800dc32 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800dc28:	f7fe fde4 	bl	800c7f4 <HAL_RCC_GetPCLK2Freq>
 800dc2c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800dc30:	e003      	b.n	800dc3a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800dc32:	f7fe fdcb 	bl	800c7cc <HAL_RCC_GetPCLK1Freq>
 800dc36:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800dc3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800dc3e:	69db      	ldr	r3, [r3, #28]
 800dc40:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800dc44:	f040 810c 	bne.w	800de60 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800dc48:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800dc4c:	2200      	movs	r2, #0
 800dc4e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800dc52:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800dc56:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800dc5a:	4622      	mov	r2, r4
 800dc5c:	462b      	mov	r3, r5
 800dc5e:	1891      	adds	r1, r2, r2
 800dc60:	65b9      	str	r1, [r7, #88]	; 0x58
 800dc62:	415b      	adcs	r3, r3
 800dc64:	65fb      	str	r3, [r7, #92]	; 0x5c
 800dc66:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800dc6a:	4621      	mov	r1, r4
 800dc6c:	eb12 0801 	adds.w	r8, r2, r1
 800dc70:	4629      	mov	r1, r5
 800dc72:	eb43 0901 	adc.w	r9, r3, r1
 800dc76:	f04f 0200 	mov.w	r2, #0
 800dc7a:	f04f 0300 	mov.w	r3, #0
 800dc7e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800dc82:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800dc86:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800dc8a:	4690      	mov	r8, r2
 800dc8c:	4699      	mov	r9, r3
 800dc8e:	4623      	mov	r3, r4
 800dc90:	eb18 0303 	adds.w	r3, r8, r3
 800dc94:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800dc98:	462b      	mov	r3, r5
 800dc9a:	eb49 0303 	adc.w	r3, r9, r3
 800dc9e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800dca2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800dca6:	685b      	ldr	r3, [r3, #4]
 800dca8:	2200      	movs	r2, #0
 800dcaa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800dcae:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800dcb2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800dcb6:	460b      	mov	r3, r1
 800dcb8:	18db      	adds	r3, r3, r3
 800dcba:	653b      	str	r3, [r7, #80]	; 0x50
 800dcbc:	4613      	mov	r3, r2
 800dcbe:	eb42 0303 	adc.w	r3, r2, r3
 800dcc2:	657b      	str	r3, [r7, #84]	; 0x54
 800dcc4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800dcc8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800dccc:	f7fa fad8 	bl	8008280 <__aeabi_uldivmod>
 800dcd0:	4602      	mov	r2, r0
 800dcd2:	460b      	mov	r3, r1
 800dcd4:	4b61      	ldr	r3, [pc, #388]	; (800de5c <UART_SetConfig+0x2d4>)
 800dcd6:	fba3 2302 	umull	r2, r3, r3, r2
 800dcda:	095b      	lsrs	r3, r3, #5
 800dcdc:	011c      	lsls	r4, r3, #4
 800dcde:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800dce2:	2200      	movs	r2, #0
 800dce4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800dce8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800dcec:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800dcf0:	4642      	mov	r2, r8
 800dcf2:	464b      	mov	r3, r9
 800dcf4:	1891      	adds	r1, r2, r2
 800dcf6:	64b9      	str	r1, [r7, #72]	; 0x48
 800dcf8:	415b      	adcs	r3, r3
 800dcfa:	64fb      	str	r3, [r7, #76]	; 0x4c
 800dcfc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800dd00:	4641      	mov	r1, r8
 800dd02:	eb12 0a01 	adds.w	sl, r2, r1
 800dd06:	4649      	mov	r1, r9
 800dd08:	eb43 0b01 	adc.w	fp, r3, r1
 800dd0c:	f04f 0200 	mov.w	r2, #0
 800dd10:	f04f 0300 	mov.w	r3, #0
 800dd14:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800dd18:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800dd1c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800dd20:	4692      	mov	sl, r2
 800dd22:	469b      	mov	fp, r3
 800dd24:	4643      	mov	r3, r8
 800dd26:	eb1a 0303 	adds.w	r3, sl, r3
 800dd2a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800dd2e:	464b      	mov	r3, r9
 800dd30:	eb4b 0303 	adc.w	r3, fp, r3
 800dd34:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800dd38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800dd3c:	685b      	ldr	r3, [r3, #4]
 800dd3e:	2200      	movs	r2, #0
 800dd40:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800dd44:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800dd48:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800dd4c:	460b      	mov	r3, r1
 800dd4e:	18db      	adds	r3, r3, r3
 800dd50:	643b      	str	r3, [r7, #64]	; 0x40
 800dd52:	4613      	mov	r3, r2
 800dd54:	eb42 0303 	adc.w	r3, r2, r3
 800dd58:	647b      	str	r3, [r7, #68]	; 0x44
 800dd5a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800dd5e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800dd62:	f7fa fa8d 	bl	8008280 <__aeabi_uldivmod>
 800dd66:	4602      	mov	r2, r0
 800dd68:	460b      	mov	r3, r1
 800dd6a:	4611      	mov	r1, r2
 800dd6c:	4b3b      	ldr	r3, [pc, #236]	; (800de5c <UART_SetConfig+0x2d4>)
 800dd6e:	fba3 2301 	umull	r2, r3, r3, r1
 800dd72:	095b      	lsrs	r3, r3, #5
 800dd74:	2264      	movs	r2, #100	; 0x64
 800dd76:	fb02 f303 	mul.w	r3, r2, r3
 800dd7a:	1acb      	subs	r3, r1, r3
 800dd7c:	00db      	lsls	r3, r3, #3
 800dd7e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800dd82:	4b36      	ldr	r3, [pc, #216]	; (800de5c <UART_SetConfig+0x2d4>)
 800dd84:	fba3 2302 	umull	r2, r3, r3, r2
 800dd88:	095b      	lsrs	r3, r3, #5
 800dd8a:	005b      	lsls	r3, r3, #1
 800dd8c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800dd90:	441c      	add	r4, r3
 800dd92:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800dd96:	2200      	movs	r2, #0
 800dd98:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800dd9c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800dda0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800dda4:	4642      	mov	r2, r8
 800dda6:	464b      	mov	r3, r9
 800dda8:	1891      	adds	r1, r2, r2
 800ddaa:	63b9      	str	r1, [r7, #56]	; 0x38
 800ddac:	415b      	adcs	r3, r3
 800ddae:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ddb0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800ddb4:	4641      	mov	r1, r8
 800ddb6:	1851      	adds	r1, r2, r1
 800ddb8:	6339      	str	r1, [r7, #48]	; 0x30
 800ddba:	4649      	mov	r1, r9
 800ddbc:	414b      	adcs	r3, r1
 800ddbe:	637b      	str	r3, [r7, #52]	; 0x34
 800ddc0:	f04f 0200 	mov.w	r2, #0
 800ddc4:	f04f 0300 	mov.w	r3, #0
 800ddc8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800ddcc:	4659      	mov	r1, fp
 800ddce:	00cb      	lsls	r3, r1, #3
 800ddd0:	4651      	mov	r1, sl
 800ddd2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800ddd6:	4651      	mov	r1, sl
 800ddd8:	00ca      	lsls	r2, r1, #3
 800ddda:	4610      	mov	r0, r2
 800dddc:	4619      	mov	r1, r3
 800ddde:	4603      	mov	r3, r0
 800dde0:	4642      	mov	r2, r8
 800dde2:	189b      	adds	r3, r3, r2
 800dde4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800dde8:	464b      	mov	r3, r9
 800ddea:	460a      	mov	r2, r1
 800ddec:	eb42 0303 	adc.w	r3, r2, r3
 800ddf0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800ddf4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ddf8:	685b      	ldr	r3, [r3, #4]
 800ddfa:	2200      	movs	r2, #0
 800ddfc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800de00:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800de04:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800de08:	460b      	mov	r3, r1
 800de0a:	18db      	adds	r3, r3, r3
 800de0c:	62bb      	str	r3, [r7, #40]	; 0x28
 800de0e:	4613      	mov	r3, r2
 800de10:	eb42 0303 	adc.w	r3, r2, r3
 800de14:	62fb      	str	r3, [r7, #44]	; 0x2c
 800de16:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800de1a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800de1e:	f7fa fa2f 	bl	8008280 <__aeabi_uldivmod>
 800de22:	4602      	mov	r2, r0
 800de24:	460b      	mov	r3, r1
 800de26:	4b0d      	ldr	r3, [pc, #52]	; (800de5c <UART_SetConfig+0x2d4>)
 800de28:	fba3 1302 	umull	r1, r3, r3, r2
 800de2c:	095b      	lsrs	r3, r3, #5
 800de2e:	2164      	movs	r1, #100	; 0x64
 800de30:	fb01 f303 	mul.w	r3, r1, r3
 800de34:	1ad3      	subs	r3, r2, r3
 800de36:	00db      	lsls	r3, r3, #3
 800de38:	3332      	adds	r3, #50	; 0x32
 800de3a:	4a08      	ldr	r2, [pc, #32]	; (800de5c <UART_SetConfig+0x2d4>)
 800de3c:	fba2 2303 	umull	r2, r3, r2, r3
 800de40:	095b      	lsrs	r3, r3, #5
 800de42:	f003 0207 	and.w	r2, r3, #7
 800de46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800de4a:	681b      	ldr	r3, [r3, #0]
 800de4c:	4422      	add	r2, r4
 800de4e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800de50:	e105      	b.n	800e05e <UART_SetConfig+0x4d6>
 800de52:	bf00      	nop
 800de54:	40011000 	.word	0x40011000
 800de58:	40011400 	.word	0x40011400
 800de5c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800de60:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800de64:	2200      	movs	r2, #0
 800de66:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800de6a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800de6e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800de72:	4642      	mov	r2, r8
 800de74:	464b      	mov	r3, r9
 800de76:	1891      	adds	r1, r2, r2
 800de78:	6239      	str	r1, [r7, #32]
 800de7a:	415b      	adcs	r3, r3
 800de7c:	627b      	str	r3, [r7, #36]	; 0x24
 800de7e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800de82:	4641      	mov	r1, r8
 800de84:	1854      	adds	r4, r2, r1
 800de86:	4649      	mov	r1, r9
 800de88:	eb43 0501 	adc.w	r5, r3, r1
 800de8c:	f04f 0200 	mov.w	r2, #0
 800de90:	f04f 0300 	mov.w	r3, #0
 800de94:	00eb      	lsls	r3, r5, #3
 800de96:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800de9a:	00e2      	lsls	r2, r4, #3
 800de9c:	4614      	mov	r4, r2
 800de9e:	461d      	mov	r5, r3
 800dea0:	4643      	mov	r3, r8
 800dea2:	18e3      	adds	r3, r4, r3
 800dea4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800dea8:	464b      	mov	r3, r9
 800deaa:	eb45 0303 	adc.w	r3, r5, r3
 800deae:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800deb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800deb6:	685b      	ldr	r3, [r3, #4]
 800deb8:	2200      	movs	r2, #0
 800deba:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800debe:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800dec2:	f04f 0200 	mov.w	r2, #0
 800dec6:	f04f 0300 	mov.w	r3, #0
 800deca:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800dece:	4629      	mov	r1, r5
 800ded0:	008b      	lsls	r3, r1, #2
 800ded2:	4621      	mov	r1, r4
 800ded4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800ded8:	4621      	mov	r1, r4
 800deda:	008a      	lsls	r2, r1, #2
 800dedc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800dee0:	f7fa f9ce 	bl	8008280 <__aeabi_uldivmod>
 800dee4:	4602      	mov	r2, r0
 800dee6:	460b      	mov	r3, r1
 800dee8:	4b60      	ldr	r3, [pc, #384]	; (800e06c <UART_SetConfig+0x4e4>)
 800deea:	fba3 2302 	umull	r2, r3, r3, r2
 800deee:	095b      	lsrs	r3, r3, #5
 800def0:	011c      	lsls	r4, r3, #4
 800def2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800def6:	2200      	movs	r2, #0
 800def8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800defc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800df00:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800df04:	4642      	mov	r2, r8
 800df06:	464b      	mov	r3, r9
 800df08:	1891      	adds	r1, r2, r2
 800df0a:	61b9      	str	r1, [r7, #24]
 800df0c:	415b      	adcs	r3, r3
 800df0e:	61fb      	str	r3, [r7, #28]
 800df10:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800df14:	4641      	mov	r1, r8
 800df16:	1851      	adds	r1, r2, r1
 800df18:	6139      	str	r1, [r7, #16]
 800df1a:	4649      	mov	r1, r9
 800df1c:	414b      	adcs	r3, r1
 800df1e:	617b      	str	r3, [r7, #20]
 800df20:	f04f 0200 	mov.w	r2, #0
 800df24:	f04f 0300 	mov.w	r3, #0
 800df28:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800df2c:	4659      	mov	r1, fp
 800df2e:	00cb      	lsls	r3, r1, #3
 800df30:	4651      	mov	r1, sl
 800df32:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800df36:	4651      	mov	r1, sl
 800df38:	00ca      	lsls	r2, r1, #3
 800df3a:	4610      	mov	r0, r2
 800df3c:	4619      	mov	r1, r3
 800df3e:	4603      	mov	r3, r0
 800df40:	4642      	mov	r2, r8
 800df42:	189b      	adds	r3, r3, r2
 800df44:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800df48:	464b      	mov	r3, r9
 800df4a:	460a      	mov	r2, r1
 800df4c:	eb42 0303 	adc.w	r3, r2, r3
 800df50:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800df54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800df58:	685b      	ldr	r3, [r3, #4]
 800df5a:	2200      	movs	r2, #0
 800df5c:	67bb      	str	r3, [r7, #120]	; 0x78
 800df5e:	67fa      	str	r2, [r7, #124]	; 0x7c
 800df60:	f04f 0200 	mov.w	r2, #0
 800df64:	f04f 0300 	mov.w	r3, #0
 800df68:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800df6c:	4649      	mov	r1, r9
 800df6e:	008b      	lsls	r3, r1, #2
 800df70:	4641      	mov	r1, r8
 800df72:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800df76:	4641      	mov	r1, r8
 800df78:	008a      	lsls	r2, r1, #2
 800df7a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800df7e:	f7fa f97f 	bl	8008280 <__aeabi_uldivmod>
 800df82:	4602      	mov	r2, r0
 800df84:	460b      	mov	r3, r1
 800df86:	4b39      	ldr	r3, [pc, #228]	; (800e06c <UART_SetConfig+0x4e4>)
 800df88:	fba3 1302 	umull	r1, r3, r3, r2
 800df8c:	095b      	lsrs	r3, r3, #5
 800df8e:	2164      	movs	r1, #100	; 0x64
 800df90:	fb01 f303 	mul.w	r3, r1, r3
 800df94:	1ad3      	subs	r3, r2, r3
 800df96:	011b      	lsls	r3, r3, #4
 800df98:	3332      	adds	r3, #50	; 0x32
 800df9a:	4a34      	ldr	r2, [pc, #208]	; (800e06c <UART_SetConfig+0x4e4>)
 800df9c:	fba2 2303 	umull	r2, r3, r2, r3
 800dfa0:	095b      	lsrs	r3, r3, #5
 800dfa2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800dfa6:	441c      	add	r4, r3
 800dfa8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800dfac:	2200      	movs	r2, #0
 800dfae:	673b      	str	r3, [r7, #112]	; 0x70
 800dfb0:	677a      	str	r2, [r7, #116]	; 0x74
 800dfb2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800dfb6:	4642      	mov	r2, r8
 800dfb8:	464b      	mov	r3, r9
 800dfba:	1891      	adds	r1, r2, r2
 800dfbc:	60b9      	str	r1, [r7, #8]
 800dfbe:	415b      	adcs	r3, r3
 800dfc0:	60fb      	str	r3, [r7, #12]
 800dfc2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800dfc6:	4641      	mov	r1, r8
 800dfc8:	1851      	adds	r1, r2, r1
 800dfca:	6039      	str	r1, [r7, #0]
 800dfcc:	4649      	mov	r1, r9
 800dfce:	414b      	adcs	r3, r1
 800dfd0:	607b      	str	r3, [r7, #4]
 800dfd2:	f04f 0200 	mov.w	r2, #0
 800dfd6:	f04f 0300 	mov.w	r3, #0
 800dfda:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800dfde:	4659      	mov	r1, fp
 800dfe0:	00cb      	lsls	r3, r1, #3
 800dfe2:	4651      	mov	r1, sl
 800dfe4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800dfe8:	4651      	mov	r1, sl
 800dfea:	00ca      	lsls	r2, r1, #3
 800dfec:	4610      	mov	r0, r2
 800dfee:	4619      	mov	r1, r3
 800dff0:	4603      	mov	r3, r0
 800dff2:	4642      	mov	r2, r8
 800dff4:	189b      	adds	r3, r3, r2
 800dff6:	66bb      	str	r3, [r7, #104]	; 0x68
 800dff8:	464b      	mov	r3, r9
 800dffa:	460a      	mov	r2, r1
 800dffc:	eb42 0303 	adc.w	r3, r2, r3
 800e000:	66fb      	str	r3, [r7, #108]	; 0x6c
 800e002:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e006:	685b      	ldr	r3, [r3, #4]
 800e008:	2200      	movs	r2, #0
 800e00a:	663b      	str	r3, [r7, #96]	; 0x60
 800e00c:	667a      	str	r2, [r7, #100]	; 0x64
 800e00e:	f04f 0200 	mov.w	r2, #0
 800e012:	f04f 0300 	mov.w	r3, #0
 800e016:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800e01a:	4649      	mov	r1, r9
 800e01c:	008b      	lsls	r3, r1, #2
 800e01e:	4641      	mov	r1, r8
 800e020:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800e024:	4641      	mov	r1, r8
 800e026:	008a      	lsls	r2, r1, #2
 800e028:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800e02c:	f7fa f928 	bl	8008280 <__aeabi_uldivmod>
 800e030:	4602      	mov	r2, r0
 800e032:	460b      	mov	r3, r1
 800e034:	4b0d      	ldr	r3, [pc, #52]	; (800e06c <UART_SetConfig+0x4e4>)
 800e036:	fba3 1302 	umull	r1, r3, r3, r2
 800e03a:	095b      	lsrs	r3, r3, #5
 800e03c:	2164      	movs	r1, #100	; 0x64
 800e03e:	fb01 f303 	mul.w	r3, r1, r3
 800e042:	1ad3      	subs	r3, r2, r3
 800e044:	011b      	lsls	r3, r3, #4
 800e046:	3332      	adds	r3, #50	; 0x32
 800e048:	4a08      	ldr	r2, [pc, #32]	; (800e06c <UART_SetConfig+0x4e4>)
 800e04a:	fba2 2303 	umull	r2, r3, r2, r3
 800e04e:	095b      	lsrs	r3, r3, #5
 800e050:	f003 020f 	and.w	r2, r3, #15
 800e054:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e058:	681b      	ldr	r3, [r3, #0]
 800e05a:	4422      	add	r2, r4
 800e05c:	609a      	str	r2, [r3, #8]
}
 800e05e:	bf00      	nop
 800e060:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800e064:	46bd      	mov	sp, r7
 800e066:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800e06a:	bf00      	nop
 800e06c:	51eb851f 	.word	0x51eb851f

0800e070 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800e070:	b084      	sub	sp, #16
 800e072:	b580      	push	{r7, lr}
 800e074:	b084      	sub	sp, #16
 800e076:	af00      	add	r7, sp, #0
 800e078:	6078      	str	r0, [r7, #4]
 800e07a:	f107 001c 	add.w	r0, r7, #28
 800e07e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800e082:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e084:	2b01      	cmp	r3, #1
 800e086:	d122      	bne.n	800e0ce <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800e088:	687b      	ldr	r3, [r7, #4]
 800e08a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e08c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800e090:	687b      	ldr	r3, [r7, #4]
 800e092:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800e094:	687b      	ldr	r3, [r7, #4]
 800e096:	68db      	ldr	r3, [r3, #12]
 800e098:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800e09c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e0a0:	687a      	ldr	r2, [r7, #4]
 800e0a2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800e0a4:	687b      	ldr	r3, [r7, #4]
 800e0a6:	68db      	ldr	r3, [r3, #12]
 800e0a8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800e0ac:	687b      	ldr	r3, [r7, #4]
 800e0ae:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800e0b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e0b2:	2b01      	cmp	r3, #1
 800e0b4:	d105      	bne.n	800e0c2 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800e0b6:	687b      	ldr	r3, [r7, #4]
 800e0b8:	68db      	ldr	r3, [r3, #12]
 800e0ba:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800e0be:	687b      	ldr	r3, [r7, #4]
 800e0c0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800e0c2:	6878      	ldr	r0, [r7, #4]
 800e0c4:	f001 fb1c 	bl	800f700 <USB_CoreReset>
 800e0c8:	4603      	mov	r3, r0
 800e0ca:	73fb      	strb	r3, [r7, #15]
 800e0cc:	e01a      	b.n	800e104 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800e0ce:	687b      	ldr	r3, [r7, #4]
 800e0d0:	68db      	ldr	r3, [r3, #12]
 800e0d2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800e0d6:	687b      	ldr	r3, [r7, #4]
 800e0d8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800e0da:	6878      	ldr	r0, [r7, #4]
 800e0dc:	f001 fb10 	bl	800f700 <USB_CoreReset>
 800e0e0:	4603      	mov	r3, r0
 800e0e2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800e0e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e0e6:	2b00      	cmp	r3, #0
 800e0e8:	d106      	bne.n	800e0f8 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800e0ea:	687b      	ldr	r3, [r7, #4]
 800e0ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e0ee:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800e0f2:	687b      	ldr	r3, [r7, #4]
 800e0f4:	639a      	str	r2, [r3, #56]	; 0x38
 800e0f6:	e005      	b.n	800e104 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800e0f8:	687b      	ldr	r3, [r7, #4]
 800e0fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e0fc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800e100:	687b      	ldr	r3, [r7, #4]
 800e102:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800e104:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e106:	2b01      	cmp	r3, #1
 800e108:	d10b      	bne.n	800e122 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800e10a:	687b      	ldr	r3, [r7, #4]
 800e10c:	689b      	ldr	r3, [r3, #8]
 800e10e:	f043 0206 	orr.w	r2, r3, #6
 800e112:	687b      	ldr	r3, [r7, #4]
 800e114:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800e116:	687b      	ldr	r3, [r7, #4]
 800e118:	689b      	ldr	r3, [r3, #8]
 800e11a:	f043 0220 	orr.w	r2, r3, #32
 800e11e:	687b      	ldr	r3, [r7, #4]
 800e120:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800e122:	7bfb      	ldrb	r3, [r7, #15]
}
 800e124:	4618      	mov	r0, r3
 800e126:	3710      	adds	r7, #16
 800e128:	46bd      	mov	sp, r7
 800e12a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800e12e:	b004      	add	sp, #16
 800e130:	4770      	bx	lr
	...

0800e134 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800e134:	b480      	push	{r7}
 800e136:	b087      	sub	sp, #28
 800e138:	af00      	add	r7, sp, #0
 800e13a:	60f8      	str	r0, [r7, #12]
 800e13c:	60b9      	str	r1, [r7, #8]
 800e13e:	4613      	mov	r3, r2
 800e140:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800e142:	79fb      	ldrb	r3, [r7, #7]
 800e144:	2b02      	cmp	r3, #2
 800e146:	d165      	bne.n	800e214 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800e148:	68bb      	ldr	r3, [r7, #8]
 800e14a:	4a41      	ldr	r2, [pc, #260]	; (800e250 <USB_SetTurnaroundTime+0x11c>)
 800e14c:	4293      	cmp	r3, r2
 800e14e:	d906      	bls.n	800e15e <USB_SetTurnaroundTime+0x2a>
 800e150:	68bb      	ldr	r3, [r7, #8]
 800e152:	4a40      	ldr	r2, [pc, #256]	; (800e254 <USB_SetTurnaroundTime+0x120>)
 800e154:	4293      	cmp	r3, r2
 800e156:	d202      	bcs.n	800e15e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800e158:	230f      	movs	r3, #15
 800e15a:	617b      	str	r3, [r7, #20]
 800e15c:	e062      	b.n	800e224 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800e15e:	68bb      	ldr	r3, [r7, #8]
 800e160:	4a3c      	ldr	r2, [pc, #240]	; (800e254 <USB_SetTurnaroundTime+0x120>)
 800e162:	4293      	cmp	r3, r2
 800e164:	d306      	bcc.n	800e174 <USB_SetTurnaroundTime+0x40>
 800e166:	68bb      	ldr	r3, [r7, #8]
 800e168:	4a3b      	ldr	r2, [pc, #236]	; (800e258 <USB_SetTurnaroundTime+0x124>)
 800e16a:	4293      	cmp	r3, r2
 800e16c:	d202      	bcs.n	800e174 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800e16e:	230e      	movs	r3, #14
 800e170:	617b      	str	r3, [r7, #20]
 800e172:	e057      	b.n	800e224 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800e174:	68bb      	ldr	r3, [r7, #8]
 800e176:	4a38      	ldr	r2, [pc, #224]	; (800e258 <USB_SetTurnaroundTime+0x124>)
 800e178:	4293      	cmp	r3, r2
 800e17a:	d306      	bcc.n	800e18a <USB_SetTurnaroundTime+0x56>
 800e17c:	68bb      	ldr	r3, [r7, #8]
 800e17e:	4a37      	ldr	r2, [pc, #220]	; (800e25c <USB_SetTurnaroundTime+0x128>)
 800e180:	4293      	cmp	r3, r2
 800e182:	d202      	bcs.n	800e18a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800e184:	230d      	movs	r3, #13
 800e186:	617b      	str	r3, [r7, #20]
 800e188:	e04c      	b.n	800e224 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800e18a:	68bb      	ldr	r3, [r7, #8]
 800e18c:	4a33      	ldr	r2, [pc, #204]	; (800e25c <USB_SetTurnaroundTime+0x128>)
 800e18e:	4293      	cmp	r3, r2
 800e190:	d306      	bcc.n	800e1a0 <USB_SetTurnaroundTime+0x6c>
 800e192:	68bb      	ldr	r3, [r7, #8]
 800e194:	4a32      	ldr	r2, [pc, #200]	; (800e260 <USB_SetTurnaroundTime+0x12c>)
 800e196:	4293      	cmp	r3, r2
 800e198:	d802      	bhi.n	800e1a0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800e19a:	230c      	movs	r3, #12
 800e19c:	617b      	str	r3, [r7, #20]
 800e19e:	e041      	b.n	800e224 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800e1a0:	68bb      	ldr	r3, [r7, #8]
 800e1a2:	4a2f      	ldr	r2, [pc, #188]	; (800e260 <USB_SetTurnaroundTime+0x12c>)
 800e1a4:	4293      	cmp	r3, r2
 800e1a6:	d906      	bls.n	800e1b6 <USB_SetTurnaroundTime+0x82>
 800e1a8:	68bb      	ldr	r3, [r7, #8]
 800e1aa:	4a2e      	ldr	r2, [pc, #184]	; (800e264 <USB_SetTurnaroundTime+0x130>)
 800e1ac:	4293      	cmp	r3, r2
 800e1ae:	d802      	bhi.n	800e1b6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800e1b0:	230b      	movs	r3, #11
 800e1b2:	617b      	str	r3, [r7, #20]
 800e1b4:	e036      	b.n	800e224 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800e1b6:	68bb      	ldr	r3, [r7, #8]
 800e1b8:	4a2a      	ldr	r2, [pc, #168]	; (800e264 <USB_SetTurnaroundTime+0x130>)
 800e1ba:	4293      	cmp	r3, r2
 800e1bc:	d906      	bls.n	800e1cc <USB_SetTurnaroundTime+0x98>
 800e1be:	68bb      	ldr	r3, [r7, #8]
 800e1c0:	4a29      	ldr	r2, [pc, #164]	; (800e268 <USB_SetTurnaroundTime+0x134>)
 800e1c2:	4293      	cmp	r3, r2
 800e1c4:	d802      	bhi.n	800e1cc <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800e1c6:	230a      	movs	r3, #10
 800e1c8:	617b      	str	r3, [r7, #20]
 800e1ca:	e02b      	b.n	800e224 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800e1cc:	68bb      	ldr	r3, [r7, #8]
 800e1ce:	4a26      	ldr	r2, [pc, #152]	; (800e268 <USB_SetTurnaroundTime+0x134>)
 800e1d0:	4293      	cmp	r3, r2
 800e1d2:	d906      	bls.n	800e1e2 <USB_SetTurnaroundTime+0xae>
 800e1d4:	68bb      	ldr	r3, [r7, #8]
 800e1d6:	4a25      	ldr	r2, [pc, #148]	; (800e26c <USB_SetTurnaroundTime+0x138>)
 800e1d8:	4293      	cmp	r3, r2
 800e1da:	d202      	bcs.n	800e1e2 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800e1dc:	2309      	movs	r3, #9
 800e1de:	617b      	str	r3, [r7, #20]
 800e1e0:	e020      	b.n	800e224 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800e1e2:	68bb      	ldr	r3, [r7, #8]
 800e1e4:	4a21      	ldr	r2, [pc, #132]	; (800e26c <USB_SetTurnaroundTime+0x138>)
 800e1e6:	4293      	cmp	r3, r2
 800e1e8:	d306      	bcc.n	800e1f8 <USB_SetTurnaroundTime+0xc4>
 800e1ea:	68bb      	ldr	r3, [r7, #8]
 800e1ec:	4a20      	ldr	r2, [pc, #128]	; (800e270 <USB_SetTurnaroundTime+0x13c>)
 800e1ee:	4293      	cmp	r3, r2
 800e1f0:	d802      	bhi.n	800e1f8 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800e1f2:	2308      	movs	r3, #8
 800e1f4:	617b      	str	r3, [r7, #20]
 800e1f6:	e015      	b.n	800e224 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800e1f8:	68bb      	ldr	r3, [r7, #8]
 800e1fa:	4a1d      	ldr	r2, [pc, #116]	; (800e270 <USB_SetTurnaroundTime+0x13c>)
 800e1fc:	4293      	cmp	r3, r2
 800e1fe:	d906      	bls.n	800e20e <USB_SetTurnaroundTime+0xda>
 800e200:	68bb      	ldr	r3, [r7, #8]
 800e202:	4a1c      	ldr	r2, [pc, #112]	; (800e274 <USB_SetTurnaroundTime+0x140>)
 800e204:	4293      	cmp	r3, r2
 800e206:	d202      	bcs.n	800e20e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800e208:	2307      	movs	r3, #7
 800e20a:	617b      	str	r3, [r7, #20]
 800e20c:	e00a      	b.n	800e224 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800e20e:	2306      	movs	r3, #6
 800e210:	617b      	str	r3, [r7, #20]
 800e212:	e007      	b.n	800e224 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800e214:	79fb      	ldrb	r3, [r7, #7]
 800e216:	2b00      	cmp	r3, #0
 800e218:	d102      	bne.n	800e220 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800e21a:	2309      	movs	r3, #9
 800e21c:	617b      	str	r3, [r7, #20]
 800e21e:	e001      	b.n	800e224 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800e220:	2309      	movs	r3, #9
 800e222:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800e224:	68fb      	ldr	r3, [r7, #12]
 800e226:	68db      	ldr	r3, [r3, #12]
 800e228:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800e22c:	68fb      	ldr	r3, [r7, #12]
 800e22e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800e230:	68fb      	ldr	r3, [r7, #12]
 800e232:	68da      	ldr	r2, [r3, #12]
 800e234:	697b      	ldr	r3, [r7, #20]
 800e236:	029b      	lsls	r3, r3, #10
 800e238:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800e23c:	431a      	orrs	r2, r3
 800e23e:	68fb      	ldr	r3, [r7, #12]
 800e240:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800e242:	2300      	movs	r3, #0
}
 800e244:	4618      	mov	r0, r3
 800e246:	371c      	adds	r7, #28
 800e248:	46bd      	mov	sp, r7
 800e24a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e24e:	4770      	bx	lr
 800e250:	00d8acbf 	.word	0x00d8acbf
 800e254:	00e4e1c0 	.word	0x00e4e1c0
 800e258:	00f42400 	.word	0x00f42400
 800e25c:	01067380 	.word	0x01067380
 800e260:	011a499f 	.word	0x011a499f
 800e264:	01312cff 	.word	0x01312cff
 800e268:	014ca43f 	.word	0x014ca43f
 800e26c:	016e3600 	.word	0x016e3600
 800e270:	01a6ab1f 	.word	0x01a6ab1f
 800e274:	01e84800 	.word	0x01e84800

0800e278 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800e278:	b480      	push	{r7}
 800e27a:	b083      	sub	sp, #12
 800e27c:	af00      	add	r7, sp, #0
 800e27e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800e280:	687b      	ldr	r3, [r7, #4]
 800e282:	689b      	ldr	r3, [r3, #8]
 800e284:	f043 0201 	orr.w	r2, r3, #1
 800e288:	687b      	ldr	r3, [r7, #4]
 800e28a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800e28c:	2300      	movs	r3, #0
}
 800e28e:	4618      	mov	r0, r3
 800e290:	370c      	adds	r7, #12
 800e292:	46bd      	mov	sp, r7
 800e294:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e298:	4770      	bx	lr

0800e29a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800e29a:	b480      	push	{r7}
 800e29c:	b083      	sub	sp, #12
 800e29e:	af00      	add	r7, sp, #0
 800e2a0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800e2a2:	687b      	ldr	r3, [r7, #4]
 800e2a4:	689b      	ldr	r3, [r3, #8]
 800e2a6:	f023 0201 	bic.w	r2, r3, #1
 800e2aa:	687b      	ldr	r3, [r7, #4]
 800e2ac:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800e2ae:	2300      	movs	r3, #0
}
 800e2b0:	4618      	mov	r0, r3
 800e2b2:	370c      	adds	r7, #12
 800e2b4:	46bd      	mov	sp, r7
 800e2b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2ba:	4770      	bx	lr

0800e2bc <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800e2bc:	b580      	push	{r7, lr}
 800e2be:	b084      	sub	sp, #16
 800e2c0:	af00      	add	r7, sp, #0
 800e2c2:	6078      	str	r0, [r7, #4]
 800e2c4:	460b      	mov	r3, r1
 800e2c6:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800e2c8:	2300      	movs	r3, #0
 800e2ca:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800e2cc:	687b      	ldr	r3, [r7, #4]
 800e2ce:	68db      	ldr	r3, [r3, #12]
 800e2d0:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800e2d4:	687b      	ldr	r3, [r7, #4]
 800e2d6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800e2d8:	78fb      	ldrb	r3, [r7, #3]
 800e2da:	2b01      	cmp	r3, #1
 800e2dc:	d115      	bne.n	800e30a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800e2de:	687b      	ldr	r3, [r7, #4]
 800e2e0:	68db      	ldr	r3, [r3, #12]
 800e2e2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800e2e6:	687b      	ldr	r3, [r7, #4]
 800e2e8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800e2ea:	2001      	movs	r0, #1
 800e2ec:	f7fb fc58 	bl	8009ba0 <HAL_Delay>
      ms++;
 800e2f0:	68fb      	ldr	r3, [r7, #12]
 800e2f2:	3301      	adds	r3, #1
 800e2f4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800e2f6:	6878      	ldr	r0, [r7, #4]
 800e2f8:	f001 f972 	bl	800f5e0 <USB_GetMode>
 800e2fc:	4603      	mov	r3, r0
 800e2fe:	2b01      	cmp	r3, #1
 800e300:	d01e      	beq.n	800e340 <USB_SetCurrentMode+0x84>
 800e302:	68fb      	ldr	r3, [r7, #12]
 800e304:	2b31      	cmp	r3, #49	; 0x31
 800e306:	d9f0      	bls.n	800e2ea <USB_SetCurrentMode+0x2e>
 800e308:	e01a      	b.n	800e340 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800e30a:	78fb      	ldrb	r3, [r7, #3]
 800e30c:	2b00      	cmp	r3, #0
 800e30e:	d115      	bne.n	800e33c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800e310:	687b      	ldr	r3, [r7, #4]
 800e312:	68db      	ldr	r3, [r3, #12]
 800e314:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800e318:	687b      	ldr	r3, [r7, #4]
 800e31a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800e31c:	2001      	movs	r0, #1
 800e31e:	f7fb fc3f 	bl	8009ba0 <HAL_Delay>
      ms++;
 800e322:	68fb      	ldr	r3, [r7, #12]
 800e324:	3301      	adds	r3, #1
 800e326:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800e328:	6878      	ldr	r0, [r7, #4]
 800e32a:	f001 f959 	bl	800f5e0 <USB_GetMode>
 800e32e:	4603      	mov	r3, r0
 800e330:	2b00      	cmp	r3, #0
 800e332:	d005      	beq.n	800e340 <USB_SetCurrentMode+0x84>
 800e334:	68fb      	ldr	r3, [r7, #12]
 800e336:	2b31      	cmp	r3, #49	; 0x31
 800e338:	d9f0      	bls.n	800e31c <USB_SetCurrentMode+0x60>
 800e33a:	e001      	b.n	800e340 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800e33c:	2301      	movs	r3, #1
 800e33e:	e005      	b.n	800e34c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800e340:	68fb      	ldr	r3, [r7, #12]
 800e342:	2b32      	cmp	r3, #50	; 0x32
 800e344:	d101      	bne.n	800e34a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800e346:	2301      	movs	r3, #1
 800e348:	e000      	b.n	800e34c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800e34a:	2300      	movs	r3, #0
}
 800e34c:	4618      	mov	r0, r3
 800e34e:	3710      	adds	r7, #16
 800e350:	46bd      	mov	sp, r7
 800e352:	bd80      	pop	{r7, pc}

0800e354 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800e354:	b084      	sub	sp, #16
 800e356:	b580      	push	{r7, lr}
 800e358:	b086      	sub	sp, #24
 800e35a:	af00      	add	r7, sp, #0
 800e35c:	6078      	str	r0, [r7, #4]
 800e35e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800e362:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800e366:	2300      	movs	r3, #0
 800e368:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e36a:	687b      	ldr	r3, [r7, #4]
 800e36c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800e36e:	2300      	movs	r3, #0
 800e370:	613b      	str	r3, [r7, #16]
 800e372:	e009      	b.n	800e388 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800e374:	687a      	ldr	r2, [r7, #4]
 800e376:	693b      	ldr	r3, [r7, #16]
 800e378:	3340      	adds	r3, #64	; 0x40
 800e37a:	009b      	lsls	r3, r3, #2
 800e37c:	4413      	add	r3, r2
 800e37e:	2200      	movs	r2, #0
 800e380:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800e382:	693b      	ldr	r3, [r7, #16]
 800e384:	3301      	adds	r3, #1
 800e386:	613b      	str	r3, [r7, #16]
 800e388:	693b      	ldr	r3, [r7, #16]
 800e38a:	2b0e      	cmp	r3, #14
 800e38c:	d9f2      	bls.n	800e374 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800e38e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e390:	2b00      	cmp	r3, #0
 800e392:	d11c      	bne.n	800e3ce <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800e394:	68fb      	ldr	r3, [r7, #12]
 800e396:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e39a:	685b      	ldr	r3, [r3, #4]
 800e39c:	68fa      	ldr	r2, [r7, #12]
 800e39e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e3a2:	f043 0302 	orr.w	r3, r3, #2
 800e3a6:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800e3a8:	687b      	ldr	r3, [r7, #4]
 800e3aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e3ac:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800e3b0:	687b      	ldr	r3, [r7, #4]
 800e3b2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800e3b4:	687b      	ldr	r3, [r7, #4]
 800e3b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e3b8:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800e3bc:	687b      	ldr	r3, [r7, #4]
 800e3be:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800e3c0:	687b      	ldr	r3, [r7, #4]
 800e3c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e3c4:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800e3c8:	687b      	ldr	r3, [r7, #4]
 800e3ca:	639a      	str	r2, [r3, #56]	; 0x38
 800e3cc:	e00b      	b.n	800e3e6 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800e3ce:	687b      	ldr	r3, [r7, #4]
 800e3d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e3d2:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800e3d6:	687b      	ldr	r3, [r7, #4]
 800e3d8:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800e3da:	687b      	ldr	r3, [r7, #4]
 800e3dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e3de:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800e3e2:	687b      	ldr	r3, [r7, #4]
 800e3e4:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800e3e6:	68fb      	ldr	r3, [r7, #12]
 800e3e8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800e3ec:	461a      	mov	r2, r3
 800e3ee:	2300      	movs	r3, #0
 800e3f0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800e3f2:	68fb      	ldr	r3, [r7, #12]
 800e3f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e3f8:	4619      	mov	r1, r3
 800e3fa:	68fb      	ldr	r3, [r7, #12]
 800e3fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e400:	461a      	mov	r2, r3
 800e402:	680b      	ldr	r3, [r1, #0]
 800e404:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800e406:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e408:	2b01      	cmp	r3, #1
 800e40a:	d10c      	bne.n	800e426 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800e40c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e40e:	2b00      	cmp	r3, #0
 800e410:	d104      	bne.n	800e41c <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800e412:	2100      	movs	r1, #0
 800e414:	6878      	ldr	r0, [r7, #4]
 800e416:	f000 f945 	bl	800e6a4 <USB_SetDevSpeed>
 800e41a:	e008      	b.n	800e42e <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800e41c:	2101      	movs	r1, #1
 800e41e:	6878      	ldr	r0, [r7, #4]
 800e420:	f000 f940 	bl	800e6a4 <USB_SetDevSpeed>
 800e424:	e003      	b.n	800e42e <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800e426:	2103      	movs	r1, #3
 800e428:	6878      	ldr	r0, [r7, #4]
 800e42a:	f000 f93b 	bl	800e6a4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800e42e:	2110      	movs	r1, #16
 800e430:	6878      	ldr	r0, [r7, #4]
 800e432:	f000 f8f3 	bl	800e61c <USB_FlushTxFifo>
 800e436:	4603      	mov	r3, r0
 800e438:	2b00      	cmp	r3, #0
 800e43a:	d001      	beq.n	800e440 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800e43c:	2301      	movs	r3, #1
 800e43e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800e440:	6878      	ldr	r0, [r7, #4]
 800e442:	f000 f90f 	bl	800e664 <USB_FlushRxFifo>
 800e446:	4603      	mov	r3, r0
 800e448:	2b00      	cmp	r3, #0
 800e44a:	d001      	beq.n	800e450 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800e44c:	2301      	movs	r3, #1
 800e44e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800e450:	68fb      	ldr	r3, [r7, #12]
 800e452:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e456:	461a      	mov	r2, r3
 800e458:	2300      	movs	r3, #0
 800e45a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800e45c:	68fb      	ldr	r3, [r7, #12]
 800e45e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e462:	461a      	mov	r2, r3
 800e464:	2300      	movs	r3, #0
 800e466:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800e468:	68fb      	ldr	r3, [r7, #12]
 800e46a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e46e:	461a      	mov	r2, r3
 800e470:	2300      	movs	r3, #0
 800e472:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800e474:	2300      	movs	r3, #0
 800e476:	613b      	str	r3, [r7, #16]
 800e478:	e043      	b.n	800e502 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800e47a:	693b      	ldr	r3, [r7, #16]
 800e47c:	015a      	lsls	r2, r3, #5
 800e47e:	68fb      	ldr	r3, [r7, #12]
 800e480:	4413      	add	r3, r2
 800e482:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e486:	681b      	ldr	r3, [r3, #0]
 800e488:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800e48c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e490:	d118      	bne.n	800e4c4 <USB_DevInit+0x170>
    {
      if (i == 0U)
 800e492:	693b      	ldr	r3, [r7, #16]
 800e494:	2b00      	cmp	r3, #0
 800e496:	d10a      	bne.n	800e4ae <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800e498:	693b      	ldr	r3, [r7, #16]
 800e49a:	015a      	lsls	r2, r3, #5
 800e49c:	68fb      	ldr	r3, [r7, #12]
 800e49e:	4413      	add	r3, r2
 800e4a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e4a4:	461a      	mov	r2, r3
 800e4a6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800e4aa:	6013      	str	r3, [r2, #0]
 800e4ac:	e013      	b.n	800e4d6 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800e4ae:	693b      	ldr	r3, [r7, #16]
 800e4b0:	015a      	lsls	r2, r3, #5
 800e4b2:	68fb      	ldr	r3, [r7, #12]
 800e4b4:	4413      	add	r3, r2
 800e4b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e4ba:	461a      	mov	r2, r3
 800e4bc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800e4c0:	6013      	str	r3, [r2, #0]
 800e4c2:	e008      	b.n	800e4d6 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800e4c4:	693b      	ldr	r3, [r7, #16]
 800e4c6:	015a      	lsls	r2, r3, #5
 800e4c8:	68fb      	ldr	r3, [r7, #12]
 800e4ca:	4413      	add	r3, r2
 800e4cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e4d0:	461a      	mov	r2, r3
 800e4d2:	2300      	movs	r3, #0
 800e4d4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800e4d6:	693b      	ldr	r3, [r7, #16]
 800e4d8:	015a      	lsls	r2, r3, #5
 800e4da:	68fb      	ldr	r3, [r7, #12]
 800e4dc:	4413      	add	r3, r2
 800e4de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e4e2:	461a      	mov	r2, r3
 800e4e4:	2300      	movs	r3, #0
 800e4e6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800e4e8:	693b      	ldr	r3, [r7, #16]
 800e4ea:	015a      	lsls	r2, r3, #5
 800e4ec:	68fb      	ldr	r3, [r7, #12]
 800e4ee:	4413      	add	r3, r2
 800e4f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e4f4:	461a      	mov	r2, r3
 800e4f6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800e4fa:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800e4fc:	693b      	ldr	r3, [r7, #16]
 800e4fe:	3301      	adds	r3, #1
 800e500:	613b      	str	r3, [r7, #16]
 800e502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e504:	693a      	ldr	r2, [r7, #16]
 800e506:	429a      	cmp	r2, r3
 800e508:	d3b7      	bcc.n	800e47a <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800e50a:	2300      	movs	r3, #0
 800e50c:	613b      	str	r3, [r7, #16]
 800e50e:	e043      	b.n	800e598 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800e510:	693b      	ldr	r3, [r7, #16]
 800e512:	015a      	lsls	r2, r3, #5
 800e514:	68fb      	ldr	r3, [r7, #12]
 800e516:	4413      	add	r3, r2
 800e518:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e51c:	681b      	ldr	r3, [r3, #0]
 800e51e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800e522:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e526:	d118      	bne.n	800e55a <USB_DevInit+0x206>
    {
      if (i == 0U)
 800e528:	693b      	ldr	r3, [r7, #16]
 800e52a:	2b00      	cmp	r3, #0
 800e52c:	d10a      	bne.n	800e544 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800e52e:	693b      	ldr	r3, [r7, #16]
 800e530:	015a      	lsls	r2, r3, #5
 800e532:	68fb      	ldr	r3, [r7, #12]
 800e534:	4413      	add	r3, r2
 800e536:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e53a:	461a      	mov	r2, r3
 800e53c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800e540:	6013      	str	r3, [r2, #0]
 800e542:	e013      	b.n	800e56c <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800e544:	693b      	ldr	r3, [r7, #16]
 800e546:	015a      	lsls	r2, r3, #5
 800e548:	68fb      	ldr	r3, [r7, #12]
 800e54a:	4413      	add	r3, r2
 800e54c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e550:	461a      	mov	r2, r3
 800e552:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800e556:	6013      	str	r3, [r2, #0]
 800e558:	e008      	b.n	800e56c <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800e55a:	693b      	ldr	r3, [r7, #16]
 800e55c:	015a      	lsls	r2, r3, #5
 800e55e:	68fb      	ldr	r3, [r7, #12]
 800e560:	4413      	add	r3, r2
 800e562:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e566:	461a      	mov	r2, r3
 800e568:	2300      	movs	r3, #0
 800e56a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800e56c:	693b      	ldr	r3, [r7, #16]
 800e56e:	015a      	lsls	r2, r3, #5
 800e570:	68fb      	ldr	r3, [r7, #12]
 800e572:	4413      	add	r3, r2
 800e574:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e578:	461a      	mov	r2, r3
 800e57a:	2300      	movs	r3, #0
 800e57c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800e57e:	693b      	ldr	r3, [r7, #16]
 800e580:	015a      	lsls	r2, r3, #5
 800e582:	68fb      	ldr	r3, [r7, #12]
 800e584:	4413      	add	r3, r2
 800e586:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e58a:	461a      	mov	r2, r3
 800e58c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800e590:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800e592:	693b      	ldr	r3, [r7, #16]
 800e594:	3301      	adds	r3, #1
 800e596:	613b      	str	r3, [r7, #16]
 800e598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e59a:	693a      	ldr	r2, [r7, #16]
 800e59c:	429a      	cmp	r2, r3
 800e59e:	d3b7      	bcc.n	800e510 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800e5a0:	68fb      	ldr	r3, [r7, #12]
 800e5a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e5a6:	691b      	ldr	r3, [r3, #16]
 800e5a8:	68fa      	ldr	r2, [r7, #12]
 800e5aa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e5ae:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e5b2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800e5b4:	687b      	ldr	r3, [r7, #4]
 800e5b6:	2200      	movs	r2, #0
 800e5b8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800e5ba:	687b      	ldr	r3, [r7, #4]
 800e5bc:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800e5c0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800e5c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e5c4:	2b00      	cmp	r3, #0
 800e5c6:	d105      	bne.n	800e5d4 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800e5c8:	687b      	ldr	r3, [r7, #4]
 800e5ca:	699b      	ldr	r3, [r3, #24]
 800e5cc:	f043 0210 	orr.w	r2, r3, #16
 800e5d0:	687b      	ldr	r3, [r7, #4]
 800e5d2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800e5d4:	687b      	ldr	r3, [r7, #4]
 800e5d6:	699a      	ldr	r2, [r3, #24]
 800e5d8:	4b0f      	ldr	r3, [pc, #60]	; (800e618 <USB_DevInit+0x2c4>)
 800e5da:	4313      	orrs	r3, r2
 800e5dc:	687a      	ldr	r2, [r7, #4]
 800e5de:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800e5e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e5e2:	2b00      	cmp	r3, #0
 800e5e4:	d005      	beq.n	800e5f2 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800e5e6:	687b      	ldr	r3, [r7, #4]
 800e5e8:	699b      	ldr	r3, [r3, #24]
 800e5ea:	f043 0208 	orr.w	r2, r3, #8
 800e5ee:	687b      	ldr	r3, [r7, #4]
 800e5f0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800e5f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e5f4:	2b01      	cmp	r3, #1
 800e5f6:	d107      	bne.n	800e608 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800e5f8:	687b      	ldr	r3, [r7, #4]
 800e5fa:	699b      	ldr	r3, [r3, #24]
 800e5fc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800e600:	f043 0304 	orr.w	r3, r3, #4
 800e604:	687a      	ldr	r2, [r7, #4]
 800e606:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800e608:	7dfb      	ldrb	r3, [r7, #23]
}
 800e60a:	4618      	mov	r0, r3
 800e60c:	3718      	adds	r7, #24
 800e60e:	46bd      	mov	sp, r7
 800e610:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800e614:	b004      	add	sp, #16
 800e616:	4770      	bx	lr
 800e618:	803c3800 	.word	0x803c3800

0800e61c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800e61c:	b480      	push	{r7}
 800e61e:	b085      	sub	sp, #20
 800e620:	af00      	add	r7, sp, #0
 800e622:	6078      	str	r0, [r7, #4]
 800e624:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800e626:	2300      	movs	r3, #0
 800e628:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800e62a:	683b      	ldr	r3, [r7, #0]
 800e62c:	019b      	lsls	r3, r3, #6
 800e62e:	f043 0220 	orr.w	r2, r3, #32
 800e632:	687b      	ldr	r3, [r7, #4]
 800e634:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800e636:	68fb      	ldr	r3, [r7, #12]
 800e638:	3301      	adds	r3, #1
 800e63a:	60fb      	str	r3, [r7, #12]
 800e63c:	4a08      	ldr	r2, [pc, #32]	; (800e660 <USB_FlushTxFifo+0x44>)
 800e63e:	4293      	cmp	r3, r2
 800e640:	d901      	bls.n	800e646 <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 800e642:	2303      	movs	r3, #3
 800e644:	e006      	b.n	800e654 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800e646:	687b      	ldr	r3, [r7, #4]
 800e648:	691b      	ldr	r3, [r3, #16]
 800e64a:	f003 0320 	and.w	r3, r3, #32
 800e64e:	2b20      	cmp	r3, #32
 800e650:	d0f1      	beq.n	800e636 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800e652:	2300      	movs	r3, #0
}
 800e654:	4618      	mov	r0, r3
 800e656:	3714      	adds	r7, #20
 800e658:	46bd      	mov	sp, r7
 800e65a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e65e:	4770      	bx	lr
 800e660:	00030d40 	.word	0x00030d40

0800e664 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800e664:	b480      	push	{r7}
 800e666:	b085      	sub	sp, #20
 800e668:	af00      	add	r7, sp, #0
 800e66a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800e66c:	2300      	movs	r3, #0
 800e66e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800e670:	687b      	ldr	r3, [r7, #4]
 800e672:	2210      	movs	r2, #16
 800e674:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800e676:	68fb      	ldr	r3, [r7, #12]
 800e678:	3301      	adds	r3, #1
 800e67a:	60fb      	str	r3, [r7, #12]
 800e67c:	4a08      	ldr	r2, [pc, #32]	; (800e6a0 <USB_FlushRxFifo+0x3c>)
 800e67e:	4293      	cmp	r3, r2
 800e680:	d901      	bls.n	800e686 <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 800e682:	2303      	movs	r3, #3
 800e684:	e006      	b.n	800e694 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800e686:	687b      	ldr	r3, [r7, #4]
 800e688:	691b      	ldr	r3, [r3, #16]
 800e68a:	f003 0310 	and.w	r3, r3, #16
 800e68e:	2b10      	cmp	r3, #16
 800e690:	d0f1      	beq.n	800e676 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800e692:	2300      	movs	r3, #0
}
 800e694:	4618      	mov	r0, r3
 800e696:	3714      	adds	r7, #20
 800e698:	46bd      	mov	sp, r7
 800e69a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e69e:	4770      	bx	lr
 800e6a0:	00030d40 	.word	0x00030d40

0800e6a4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800e6a4:	b480      	push	{r7}
 800e6a6:	b085      	sub	sp, #20
 800e6a8:	af00      	add	r7, sp, #0
 800e6aa:	6078      	str	r0, [r7, #4]
 800e6ac:	460b      	mov	r3, r1
 800e6ae:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e6b0:	687b      	ldr	r3, [r7, #4]
 800e6b2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800e6b4:	68fb      	ldr	r3, [r7, #12]
 800e6b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e6ba:	681a      	ldr	r2, [r3, #0]
 800e6bc:	78fb      	ldrb	r3, [r7, #3]
 800e6be:	68f9      	ldr	r1, [r7, #12]
 800e6c0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e6c4:	4313      	orrs	r3, r2
 800e6c6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800e6c8:	2300      	movs	r3, #0
}
 800e6ca:	4618      	mov	r0, r3
 800e6cc:	3714      	adds	r7, #20
 800e6ce:	46bd      	mov	sp, r7
 800e6d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6d4:	4770      	bx	lr

0800e6d6 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800e6d6:	b480      	push	{r7}
 800e6d8:	b087      	sub	sp, #28
 800e6da:	af00      	add	r7, sp, #0
 800e6dc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e6de:	687b      	ldr	r3, [r7, #4]
 800e6e0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800e6e2:	693b      	ldr	r3, [r7, #16]
 800e6e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e6e8:	689b      	ldr	r3, [r3, #8]
 800e6ea:	f003 0306 	and.w	r3, r3, #6
 800e6ee:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800e6f0:	68fb      	ldr	r3, [r7, #12]
 800e6f2:	2b00      	cmp	r3, #0
 800e6f4:	d102      	bne.n	800e6fc <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800e6f6:	2300      	movs	r3, #0
 800e6f8:	75fb      	strb	r3, [r7, #23]
 800e6fa:	e00a      	b.n	800e712 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800e6fc:	68fb      	ldr	r3, [r7, #12]
 800e6fe:	2b02      	cmp	r3, #2
 800e700:	d002      	beq.n	800e708 <USB_GetDevSpeed+0x32>
 800e702:	68fb      	ldr	r3, [r7, #12]
 800e704:	2b06      	cmp	r3, #6
 800e706:	d102      	bne.n	800e70e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800e708:	2302      	movs	r3, #2
 800e70a:	75fb      	strb	r3, [r7, #23]
 800e70c:	e001      	b.n	800e712 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800e70e:	230f      	movs	r3, #15
 800e710:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800e712:	7dfb      	ldrb	r3, [r7, #23]
}
 800e714:	4618      	mov	r0, r3
 800e716:	371c      	adds	r7, #28
 800e718:	46bd      	mov	sp, r7
 800e71a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e71e:	4770      	bx	lr

0800e720 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800e720:	b480      	push	{r7}
 800e722:	b085      	sub	sp, #20
 800e724:	af00      	add	r7, sp, #0
 800e726:	6078      	str	r0, [r7, #4]
 800e728:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e72a:	687b      	ldr	r3, [r7, #4]
 800e72c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800e72e:	683b      	ldr	r3, [r7, #0]
 800e730:	781b      	ldrb	r3, [r3, #0]
 800e732:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800e734:	683b      	ldr	r3, [r7, #0]
 800e736:	785b      	ldrb	r3, [r3, #1]
 800e738:	2b01      	cmp	r3, #1
 800e73a:	d13a      	bne.n	800e7b2 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800e73c:	68fb      	ldr	r3, [r7, #12]
 800e73e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e742:	69da      	ldr	r2, [r3, #28]
 800e744:	683b      	ldr	r3, [r7, #0]
 800e746:	781b      	ldrb	r3, [r3, #0]
 800e748:	f003 030f 	and.w	r3, r3, #15
 800e74c:	2101      	movs	r1, #1
 800e74e:	fa01 f303 	lsl.w	r3, r1, r3
 800e752:	b29b      	uxth	r3, r3
 800e754:	68f9      	ldr	r1, [r7, #12]
 800e756:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e75a:	4313      	orrs	r3, r2
 800e75c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800e75e:	68bb      	ldr	r3, [r7, #8]
 800e760:	015a      	lsls	r2, r3, #5
 800e762:	68fb      	ldr	r3, [r7, #12]
 800e764:	4413      	add	r3, r2
 800e766:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e76a:	681b      	ldr	r3, [r3, #0]
 800e76c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e770:	2b00      	cmp	r3, #0
 800e772:	d155      	bne.n	800e820 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800e774:	68bb      	ldr	r3, [r7, #8]
 800e776:	015a      	lsls	r2, r3, #5
 800e778:	68fb      	ldr	r3, [r7, #12]
 800e77a:	4413      	add	r3, r2
 800e77c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e780:	681a      	ldr	r2, [r3, #0]
 800e782:	683b      	ldr	r3, [r7, #0]
 800e784:	689b      	ldr	r3, [r3, #8]
 800e786:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800e78a:	683b      	ldr	r3, [r7, #0]
 800e78c:	78db      	ldrb	r3, [r3, #3]
 800e78e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800e790:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800e792:	68bb      	ldr	r3, [r7, #8]
 800e794:	059b      	lsls	r3, r3, #22
 800e796:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800e798:	4313      	orrs	r3, r2
 800e79a:	68ba      	ldr	r2, [r7, #8]
 800e79c:	0151      	lsls	r1, r2, #5
 800e79e:	68fa      	ldr	r2, [r7, #12]
 800e7a0:	440a      	add	r2, r1
 800e7a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e7a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e7aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e7ae:	6013      	str	r3, [r2, #0]
 800e7b0:	e036      	b.n	800e820 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800e7b2:	68fb      	ldr	r3, [r7, #12]
 800e7b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e7b8:	69da      	ldr	r2, [r3, #28]
 800e7ba:	683b      	ldr	r3, [r7, #0]
 800e7bc:	781b      	ldrb	r3, [r3, #0]
 800e7be:	f003 030f 	and.w	r3, r3, #15
 800e7c2:	2101      	movs	r1, #1
 800e7c4:	fa01 f303 	lsl.w	r3, r1, r3
 800e7c8:	041b      	lsls	r3, r3, #16
 800e7ca:	68f9      	ldr	r1, [r7, #12]
 800e7cc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e7d0:	4313      	orrs	r3, r2
 800e7d2:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800e7d4:	68bb      	ldr	r3, [r7, #8]
 800e7d6:	015a      	lsls	r2, r3, #5
 800e7d8:	68fb      	ldr	r3, [r7, #12]
 800e7da:	4413      	add	r3, r2
 800e7dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e7e0:	681b      	ldr	r3, [r3, #0]
 800e7e2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e7e6:	2b00      	cmp	r3, #0
 800e7e8:	d11a      	bne.n	800e820 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800e7ea:	68bb      	ldr	r3, [r7, #8]
 800e7ec:	015a      	lsls	r2, r3, #5
 800e7ee:	68fb      	ldr	r3, [r7, #12]
 800e7f0:	4413      	add	r3, r2
 800e7f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e7f6:	681a      	ldr	r2, [r3, #0]
 800e7f8:	683b      	ldr	r3, [r7, #0]
 800e7fa:	689b      	ldr	r3, [r3, #8]
 800e7fc:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800e800:	683b      	ldr	r3, [r7, #0]
 800e802:	78db      	ldrb	r3, [r3, #3]
 800e804:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800e806:	430b      	orrs	r3, r1
 800e808:	4313      	orrs	r3, r2
 800e80a:	68ba      	ldr	r2, [r7, #8]
 800e80c:	0151      	lsls	r1, r2, #5
 800e80e:	68fa      	ldr	r2, [r7, #12]
 800e810:	440a      	add	r2, r1
 800e812:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e816:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e81a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e81e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800e820:	2300      	movs	r3, #0
}
 800e822:	4618      	mov	r0, r3
 800e824:	3714      	adds	r7, #20
 800e826:	46bd      	mov	sp, r7
 800e828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e82c:	4770      	bx	lr
	...

0800e830 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800e830:	b480      	push	{r7}
 800e832:	b085      	sub	sp, #20
 800e834:	af00      	add	r7, sp, #0
 800e836:	6078      	str	r0, [r7, #4]
 800e838:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e83a:	687b      	ldr	r3, [r7, #4]
 800e83c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800e83e:	683b      	ldr	r3, [r7, #0]
 800e840:	781b      	ldrb	r3, [r3, #0]
 800e842:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800e844:	683b      	ldr	r3, [r7, #0]
 800e846:	785b      	ldrb	r3, [r3, #1]
 800e848:	2b01      	cmp	r3, #1
 800e84a:	d161      	bne.n	800e910 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800e84c:	68bb      	ldr	r3, [r7, #8]
 800e84e:	015a      	lsls	r2, r3, #5
 800e850:	68fb      	ldr	r3, [r7, #12]
 800e852:	4413      	add	r3, r2
 800e854:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e858:	681b      	ldr	r3, [r3, #0]
 800e85a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800e85e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e862:	d11f      	bne.n	800e8a4 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800e864:	68bb      	ldr	r3, [r7, #8]
 800e866:	015a      	lsls	r2, r3, #5
 800e868:	68fb      	ldr	r3, [r7, #12]
 800e86a:	4413      	add	r3, r2
 800e86c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e870:	681b      	ldr	r3, [r3, #0]
 800e872:	68ba      	ldr	r2, [r7, #8]
 800e874:	0151      	lsls	r1, r2, #5
 800e876:	68fa      	ldr	r2, [r7, #12]
 800e878:	440a      	add	r2, r1
 800e87a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e87e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800e882:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800e884:	68bb      	ldr	r3, [r7, #8]
 800e886:	015a      	lsls	r2, r3, #5
 800e888:	68fb      	ldr	r3, [r7, #12]
 800e88a:	4413      	add	r3, r2
 800e88c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e890:	681b      	ldr	r3, [r3, #0]
 800e892:	68ba      	ldr	r2, [r7, #8]
 800e894:	0151      	lsls	r1, r2, #5
 800e896:	68fa      	ldr	r2, [r7, #12]
 800e898:	440a      	add	r2, r1
 800e89a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e89e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800e8a2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800e8a4:	68fb      	ldr	r3, [r7, #12]
 800e8a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e8aa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e8ac:	683b      	ldr	r3, [r7, #0]
 800e8ae:	781b      	ldrb	r3, [r3, #0]
 800e8b0:	f003 030f 	and.w	r3, r3, #15
 800e8b4:	2101      	movs	r1, #1
 800e8b6:	fa01 f303 	lsl.w	r3, r1, r3
 800e8ba:	b29b      	uxth	r3, r3
 800e8bc:	43db      	mvns	r3, r3
 800e8be:	68f9      	ldr	r1, [r7, #12]
 800e8c0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e8c4:	4013      	ands	r3, r2
 800e8c6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800e8c8:	68fb      	ldr	r3, [r7, #12]
 800e8ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e8ce:	69da      	ldr	r2, [r3, #28]
 800e8d0:	683b      	ldr	r3, [r7, #0]
 800e8d2:	781b      	ldrb	r3, [r3, #0]
 800e8d4:	f003 030f 	and.w	r3, r3, #15
 800e8d8:	2101      	movs	r1, #1
 800e8da:	fa01 f303 	lsl.w	r3, r1, r3
 800e8de:	b29b      	uxth	r3, r3
 800e8e0:	43db      	mvns	r3, r3
 800e8e2:	68f9      	ldr	r1, [r7, #12]
 800e8e4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e8e8:	4013      	ands	r3, r2
 800e8ea:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800e8ec:	68bb      	ldr	r3, [r7, #8]
 800e8ee:	015a      	lsls	r2, r3, #5
 800e8f0:	68fb      	ldr	r3, [r7, #12]
 800e8f2:	4413      	add	r3, r2
 800e8f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e8f8:	681a      	ldr	r2, [r3, #0]
 800e8fa:	68bb      	ldr	r3, [r7, #8]
 800e8fc:	0159      	lsls	r1, r3, #5
 800e8fe:	68fb      	ldr	r3, [r7, #12]
 800e900:	440b      	add	r3, r1
 800e902:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e906:	4619      	mov	r1, r3
 800e908:	4b35      	ldr	r3, [pc, #212]	; (800e9e0 <USB_DeactivateEndpoint+0x1b0>)
 800e90a:	4013      	ands	r3, r2
 800e90c:	600b      	str	r3, [r1, #0]
 800e90e:	e060      	b.n	800e9d2 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800e910:	68bb      	ldr	r3, [r7, #8]
 800e912:	015a      	lsls	r2, r3, #5
 800e914:	68fb      	ldr	r3, [r7, #12]
 800e916:	4413      	add	r3, r2
 800e918:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e91c:	681b      	ldr	r3, [r3, #0]
 800e91e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800e922:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e926:	d11f      	bne.n	800e968 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800e928:	68bb      	ldr	r3, [r7, #8]
 800e92a:	015a      	lsls	r2, r3, #5
 800e92c:	68fb      	ldr	r3, [r7, #12]
 800e92e:	4413      	add	r3, r2
 800e930:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e934:	681b      	ldr	r3, [r3, #0]
 800e936:	68ba      	ldr	r2, [r7, #8]
 800e938:	0151      	lsls	r1, r2, #5
 800e93a:	68fa      	ldr	r2, [r7, #12]
 800e93c:	440a      	add	r2, r1
 800e93e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e942:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800e946:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800e948:	68bb      	ldr	r3, [r7, #8]
 800e94a:	015a      	lsls	r2, r3, #5
 800e94c:	68fb      	ldr	r3, [r7, #12]
 800e94e:	4413      	add	r3, r2
 800e950:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e954:	681b      	ldr	r3, [r3, #0]
 800e956:	68ba      	ldr	r2, [r7, #8]
 800e958:	0151      	lsls	r1, r2, #5
 800e95a:	68fa      	ldr	r2, [r7, #12]
 800e95c:	440a      	add	r2, r1
 800e95e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e962:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800e966:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800e968:	68fb      	ldr	r3, [r7, #12]
 800e96a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e96e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e970:	683b      	ldr	r3, [r7, #0]
 800e972:	781b      	ldrb	r3, [r3, #0]
 800e974:	f003 030f 	and.w	r3, r3, #15
 800e978:	2101      	movs	r1, #1
 800e97a:	fa01 f303 	lsl.w	r3, r1, r3
 800e97e:	041b      	lsls	r3, r3, #16
 800e980:	43db      	mvns	r3, r3
 800e982:	68f9      	ldr	r1, [r7, #12]
 800e984:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e988:	4013      	ands	r3, r2
 800e98a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800e98c:	68fb      	ldr	r3, [r7, #12]
 800e98e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e992:	69da      	ldr	r2, [r3, #28]
 800e994:	683b      	ldr	r3, [r7, #0]
 800e996:	781b      	ldrb	r3, [r3, #0]
 800e998:	f003 030f 	and.w	r3, r3, #15
 800e99c:	2101      	movs	r1, #1
 800e99e:	fa01 f303 	lsl.w	r3, r1, r3
 800e9a2:	041b      	lsls	r3, r3, #16
 800e9a4:	43db      	mvns	r3, r3
 800e9a6:	68f9      	ldr	r1, [r7, #12]
 800e9a8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e9ac:	4013      	ands	r3, r2
 800e9ae:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800e9b0:	68bb      	ldr	r3, [r7, #8]
 800e9b2:	015a      	lsls	r2, r3, #5
 800e9b4:	68fb      	ldr	r3, [r7, #12]
 800e9b6:	4413      	add	r3, r2
 800e9b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e9bc:	681a      	ldr	r2, [r3, #0]
 800e9be:	68bb      	ldr	r3, [r7, #8]
 800e9c0:	0159      	lsls	r1, r3, #5
 800e9c2:	68fb      	ldr	r3, [r7, #12]
 800e9c4:	440b      	add	r3, r1
 800e9c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e9ca:	4619      	mov	r1, r3
 800e9cc:	4b05      	ldr	r3, [pc, #20]	; (800e9e4 <USB_DeactivateEndpoint+0x1b4>)
 800e9ce:	4013      	ands	r3, r2
 800e9d0:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800e9d2:	2300      	movs	r3, #0
}
 800e9d4:	4618      	mov	r0, r3
 800e9d6:	3714      	adds	r7, #20
 800e9d8:	46bd      	mov	sp, r7
 800e9da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9de:	4770      	bx	lr
 800e9e0:	ec337800 	.word	0xec337800
 800e9e4:	eff37800 	.word	0xeff37800

0800e9e8 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800e9e8:	b580      	push	{r7, lr}
 800e9ea:	b08a      	sub	sp, #40	; 0x28
 800e9ec:	af02      	add	r7, sp, #8
 800e9ee:	60f8      	str	r0, [r7, #12]
 800e9f0:	60b9      	str	r1, [r7, #8]
 800e9f2:	4613      	mov	r3, r2
 800e9f4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e9f6:	68fb      	ldr	r3, [r7, #12]
 800e9f8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800e9fa:	68bb      	ldr	r3, [r7, #8]
 800e9fc:	781b      	ldrb	r3, [r3, #0]
 800e9fe:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800ea00:	68bb      	ldr	r3, [r7, #8]
 800ea02:	785b      	ldrb	r3, [r3, #1]
 800ea04:	2b01      	cmp	r3, #1
 800ea06:	f040 815c 	bne.w	800ecc2 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800ea0a:	68bb      	ldr	r3, [r7, #8]
 800ea0c:	695b      	ldr	r3, [r3, #20]
 800ea0e:	2b00      	cmp	r3, #0
 800ea10:	d132      	bne.n	800ea78 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800ea12:	69bb      	ldr	r3, [r7, #24]
 800ea14:	015a      	lsls	r2, r3, #5
 800ea16:	69fb      	ldr	r3, [r7, #28]
 800ea18:	4413      	add	r3, r2
 800ea1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ea1e:	691b      	ldr	r3, [r3, #16]
 800ea20:	69ba      	ldr	r2, [r7, #24]
 800ea22:	0151      	lsls	r1, r2, #5
 800ea24:	69fa      	ldr	r2, [r7, #28]
 800ea26:	440a      	add	r2, r1
 800ea28:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ea2c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800ea30:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800ea34:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800ea36:	69bb      	ldr	r3, [r7, #24]
 800ea38:	015a      	lsls	r2, r3, #5
 800ea3a:	69fb      	ldr	r3, [r7, #28]
 800ea3c:	4413      	add	r3, r2
 800ea3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ea42:	691b      	ldr	r3, [r3, #16]
 800ea44:	69ba      	ldr	r2, [r7, #24]
 800ea46:	0151      	lsls	r1, r2, #5
 800ea48:	69fa      	ldr	r2, [r7, #28]
 800ea4a:	440a      	add	r2, r1
 800ea4c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ea50:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ea54:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800ea56:	69bb      	ldr	r3, [r7, #24]
 800ea58:	015a      	lsls	r2, r3, #5
 800ea5a:	69fb      	ldr	r3, [r7, #28]
 800ea5c:	4413      	add	r3, r2
 800ea5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ea62:	691b      	ldr	r3, [r3, #16]
 800ea64:	69ba      	ldr	r2, [r7, #24]
 800ea66:	0151      	lsls	r1, r2, #5
 800ea68:	69fa      	ldr	r2, [r7, #28]
 800ea6a:	440a      	add	r2, r1
 800ea6c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ea70:	0cdb      	lsrs	r3, r3, #19
 800ea72:	04db      	lsls	r3, r3, #19
 800ea74:	6113      	str	r3, [r2, #16]
 800ea76:	e074      	b.n	800eb62 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800ea78:	69bb      	ldr	r3, [r7, #24]
 800ea7a:	015a      	lsls	r2, r3, #5
 800ea7c:	69fb      	ldr	r3, [r7, #28]
 800ea7e:	4413      	add	r3, r2
 800ea80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ea84:	691b      	ldr	r3, [r3, #16]
 800ea86:	69ba      	ldr	r2, [r7, #24]
 800ea88:	0151      	lsls	r1, r2, #5
 800ea8a:	69fa      	ldr	r2, [r7, #28]
 800ea8c:	440a      	add	r2, r1
 800ea8e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ea92:	0cdb      	lsrs	r3, r3, #19
 800ea94:	04db      	lsls	r3, r3, #19
 800ea96:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800ea98:	69bb      	ldr	r3, [r7, #24]
 800ea9a:	015a      	lsls	r2, r3, #5
 800ea9c:	69fb      	ldr	r3, [r7, #28]
 800ea9e:	4413      	add	r3, r2
 800eaa0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800eaa4:	691b      	ldr	r3, [r3, #16]
 800eaa6:	69ba      	ldr	r2, [r7, #24]
 800eaa8:	0151      	lsls	r1, r2, #5
 800eaaa:	69fa      	ldr	r2, [r7, #28]
 800eaac:	440a      	add	r2, r1
 800eaae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800eab2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800eab6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800eaba:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800eabc:	69bb      	ldr	r3, [r7, #24]
 800eabe:	015a      	lsls	r2, r3, #5
 800eac0:	69fb      	ldr	r3, [r7, #28]
 800eac2:	4413      	add	r3, r2
 800eac4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800eac8:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800eaca:	68bb      	ldr	r3, [r7, #8]
 800eacc:	6959      	ldr	r1, [r3, #20]
 800eace:	68bb      	ldr	r3, [r7, #8]
 800ead0:	689b      	ldr	r3, [r3, #8]
 800ead2:	440b      	add	r3, r1
 800ead4:	1e59      	subs	r1, r3, #1
 800ead6:	68bb      	ldr	r3, [r7, #8]
 800ead8:	689b      	ldr	r3, [r3, #8]
 800eada:	fbb1 f3f3 	udiv	r3, r1, r3
 800eade:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800eae0:	4b9d      	ldr	r3, [pc, #628]	; (800ed58 <USB_EPStartXfer+0x370>)
 800eae2:	400b      	ands	r3, r1
 800eae4:	69b9      	ldr	r1, [r7, #24]
 800eae6:	0148      	lsls	r0, r1, #5
 800eae8:	69f9      	ldr	r1, [r7, #28]
 800eaea:	4401      	add	r1, r0
 800eaec:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800eaf0:	4313      	orrs	r3, r2
 800eaf2:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800eaf4:	69bb      	ldr	r3, [r7, #24]
 800eaf6:	015a      	lsls	r2, r3, #5
 800eaf8:	69fb      	ldr	r3, [r7, #28]
 800eafa:	4413      	add	r3, r2
 800eafc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800eb00:	691a      	ldr	r2, [r3, #16]
 800eb02:	68bb      	ldr	r3, [r7, #8]
 800eb04:	695b      	ldr	r3, [r3, #20]
 800eb06:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800eb0a:	69b9      	ldr	r1, [r7, #24]
 800eb0c:	0148      	lsls	r0, r1, #5
 800eb0e:	69f9      	ldr	r1, [r7, #28]
 800eb10:	4401      	add	r1, r0
 800eb12:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800eb16:	4313      	orrs	r3, r2
 800eb18:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800eb1a:	68bb      	ldr	r3, [r7, #8]
 800eb1c:	78db      	ldrb	r3, [r3, #3]
 800eb1e:	2b01      	cmp	r3, #1
 800eb20:	d11f      	bne.n	800eb62 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800eb22:	69bb      	ldr	r3, [r7, #24]
 800eb24:	015a      	lsls	r2, r3, #5
 800eb26:	69fb      	ldr	r3, [r7, #28]
 800eb28:	4413      	add	r3, r2
 800eb2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800eb2e:	691b      	ldr	r3, [r3, #16]
 800eb30:	69ba      	ldr	r2, [r7, #24]
 800eb32:	0151      	lsls	r1, r2, #5
 800eb34:	69fa      	ldr	r2, [r7, #28]
 800eb36:	440a      	add	r2, r1
 800eb38:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800eb3c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800eb40:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800eb42:	69bb      	ldr	r3, [r7, #24]
 800eb44:	015a      	lsls	r2, r3, #5
 800eb46:	69fb      	ldr	r3, [r7, #28]
 800eb48:	4413      	add	r3, r2
 800eb4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800eb4e:	691b      	ldr	r3, [r3, #16]
 800eb50:	69ba      	ldr	r2, [r7, #24]
 800eb52:	0151      	lsls	r1, r2, #5
 800eb54:	69fa      	ldr	r2, [r7, #28]
 800eb56:	440a      	add	r2, r1
 800eb58:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800eb5c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800eb60:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800eb62:	79fb      	ldrb	r3, [r7, #7]
 800eb64:	2b01      	cmp	r3, #1
 800eb66:	d14b      	bne.n	800ec00 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800eb68:	68bb      	ldr	r3, [r7, #8]
 800eb6a:	691b      	ldr	r3, [r3, #16]
 800eb6c:	2b00      	cmp	r3, #0
 800eb6e:	d009      	beq.n	800eb84 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800eb70:	69bb      	ldr	r3, [r7, #24]
 800eb72:	015a      	lsls	r2, r3, #5
 800eb74:	69fb      	ldr	r3, [r7, #28]
 800eb76:	4413      	add	r3, r2
 800eb78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800eb7c:	461a      	mov	r2, r3
 800eb7e:	68bb      	ldr	r3, [r7, #8]
 800eb80:	691b      	ldr	r3, [r3, #16]
 800eb82:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800eb84:	68bb      	ldr	r3, [r7, #8]
 800eb86:	78db      	ldrb	r3, [r3, #3]
 800eb88:	2b01      	cmp	r3, #1
 800eb8a:	d128      	bne.n	800ebde <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800eb8c:	69fb      	ldr	r3, [r7, #28]
 800eb8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800eb92:	689b      	ldr	r3, [r3, #8]
 800eb94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800eb98:	2b00      	cmp	r3, #0
 800eb9a:	d110      	bne.n	800ebbe <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800eb9c:	69bb      	ldr	r3, [r7, #24]
 800eb9e:	015a      	lsls	r2, r3, #5
 800eba0:	69fb      	ldr	r3, [r7, #28]
 800eba2:	4413      	add	r3, r2
 800eba4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800eba8:	681b      	ldr	r3, [r3, #0]
 800ebaa:	69ba      	ldr	r2, [r7, #24]
 800ebac:	0151      	lsls	r1, r2, #5
 800ebae:	69fa      	ldr	r2, [r7, #28]
 800ebb0:	440a      	add	r2, r1
 800ebb2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ebb6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800ebba:	6013      	str	r3, [r2, #0]
 800ebbc:	e00f      	b.n	800ebde <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800ebbe:	69bb      	ldr	r3, [r7, #24]
 800ebc0:	015a      	lsls	r2, r3, #5
 800ebc2:	69fb      	ldr	r3, [r7, #28]
 800ebc4:	4413      	add	r3, r2
 800ebc6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ebca:	681b      	ldr	r3, [r3, #0]
 800ebcc:	69ba      	ldr	r2, [r7, #24]
 800ebce:	0151      	lsls	r1, r2, #5
 800ebd0:	69fa      	ldr	r2, [r7, #28]
 800ebd2:	440a      	add	r2, r1
 800ebd4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ebd8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ebdc:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800ebde:	69bb      	ldr	r3, [r7, #24]
 800ebe0:	015a      	lsls	r2, r3, #5
 800ebe2:	69fb      	ldr	r3, [r7, #28]
 800ebe4:	4413      	add	r3, r2
 800ebe6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ebea:	681b      	ldr	r3, [r3, #0]
 800ebec:	69ba      	ldr	r2, [r7, #24]
 800ebee:	0151      	lsls	r1, r2, #5
 800ebf0:	69fa      	ldr	r2, [r7, #28]
 800ebf2:	440a      	add	r2, r1
 800ebf4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ebf8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800ebfc:	6013      	str	r3, [r2, #0]
 800ebfe:	e12f      	b.n	800ee60 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800ec00:	69bb      	ldr	r3, [r7, #24]
 800ec02:	015a      	lsls	r2, r3, #5
 800ec04:	69fb      	ldr	r3, [r7, #28]
 800ec06:	4413      	add	r3, r2
 800ec08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ec0c:	681b      	ldr	r3, [r3, #0]
 800ec0e:	69ba      	ldr	r2, [r7, #24]
 800ec10:	0151      	lsls	r1, r2, #5
 800ec12:	69fa      	ldr	r2, [r7, #28]
 800ec14:	440a      	add	r2, r1
 800ec16:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ec1a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800ec1e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800ec20:	68bb      	ldr	r3, [r7, #8]
 800ec22:	78db      	ldrb	r3, [r3, #3]
 800ec24:	2b01      	cmp	r3, #1
 800ec26:	d015      	beq.n	800ec54 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800ec28:	68bb      	ldr	r3, [r7, #8]
 800ec2a:	695b      	ldr	r3, [r3, #20]
 800ec2c:	2b00      	cmp	r3, #0
 800ec2e:	f000 8117 	beq.w	800ee60 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800ec32:	69fb      	ldr	r3, [r7, #28]
 800ec34:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ec38:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ec3a:	68bb      	ldr	r3, [r7, #8]
 800ec3c:	781b      	ldrb	r3, [r3, #0]
 800ec3e:	f003 030f 	and.w	r3, r3, #15
 800ec42:	2101      	movs	r1, #1
 800ec44:	fa01 f303 	lsl.w	r3, r1, r3
 800ec48:	69f9      	ldr	r1, [r7, #28]
 800ec4a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ec4e:	4313      	orrs	r3, r2
 800ec50:	634b      	str	r3, [r1, #52]	; 0x34
 800ec52:	e105      	b.n	800ee60 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800ec54:	69fb      	ldr	r3, [r7, #28]
 800ec56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ec5a:	689b      	ldr	r3, [r3, #8]
 800ec5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ec60:	2b00      	cmp	r3, #0
 800ec62:	d110      	bne.n	800ec86 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800ec64:	69bb      	ldr	r3, [r7, #24]
 800ec66:	015a      	lsls	r2, r3, #5
 800ec68:	69fb      	ldr	r3, [r7, #28]
 800ec6a:	4413      	add	r3, r2
 800ec6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ec70:	681b      	ldr	r3, [r3, #0]
 800ec72:	69ba      	ldr	r2, [r7, #24]
 800ec74:	0151      	lsls	r1, r2, #5
 800ec76:	69fa      	ldr	r2, [r7, #28]
 800ec78:	440a      	add	r2, r1
 800ec7a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ec7e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800ec82:	6013      	str	r3, [r2, #0]
 800ec84:	e00f      	b.n	800eca6 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800ec86:	69bb      	ldr	r3, [r7, #24]
 800ec88:	015a      	lsls	r2, r3, #5
 800ec8a:	69fb      	ldr	r3, [r7, #28]
 800ec8c:	4413      	add	r3, r2
 800ec8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ec92:	681b      	ldr	r3, [r3, #0]
 800ec94:	69ba      	ldr	r2, [r7, #24]
 800ec96:	0151      	lsls	r1, r2, #5
 800ec98:	69fa      	ldr	r2, [r7, #28]
 800ec9a:	440a      	add	r2, r1
 800ec9c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800eca0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800eca4:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800eca6:	68bb      	ldr	r3, [r7, #8]
 800eca8:	68d9      	ldr	r1, [r3, #12]
 800ecaa:	68bb      	ldr	r3, [r7, #8]
 800ecac:	781a      	ldrb	r2, [r3, #0]
 800ecae:	68bb      	ldr	r3, [r7, #8]
 800ecb0:	695b      	ldr	r3, [r3, #20]
 800ecb2:	b298      	uxth	r0, r3
 800ecb4:	79fb      	ldrb	r3, [r7, #7]
 800ecb6:	9300      	str	r3, [sp, #0]
 800ecb8:	4603      	mov	r3, r0
 800ecba:	68f8      	ldr	r0, [r7, #12]
 800ecbc:	f000 fa2b 	bl	800f116 <USB_WritePacket>
 800ecc0:	e0ce      	b.n	800ee60 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800ecc2:	69bb      	ldr	r3, [r7, #24]
 800ecc4:	015a      	lsls	r2, r3, #5
 800ecc6:	69fb      	ldr	r3, [r7, #28]
 800ecc8:	4413      	add	r3, r2
 800ecca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ecce:	691b      	ldr	r3, [r3, #16]
 800ecd0:	69ba      	ldr	r2, [r7, #24]
 800ecd2:	0151      	lsls	r1, r2, #5
 800ecd4:	69fa      	ldr	r2, [r7, #28]
 800ecd6:	440a      	add	r2, r1
 800ecd8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ecdc:	0cdb      	lsrs	r3, r3, #19
 800ecde:	04db      	lsls	r3, r3, #19
 800ece0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800ece2:	69bb      	ldr	r3, [r7, #24]
 800ece4:	015a      	lsls	r2, r3, #5
 800ece6:	69fb      	ldr	r3, [r7, #28]
 800ece8:	4413      	add	r3, r2
 800ecea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ecee:	691b      	ldr	r3, [r3, #16]
 800ecf0:	69ba      	ldr	r2, [r7, #24]
 800ecf2:	0151      	lsls	r1, r2, #5
 800ecf4:	69fa      	ldr	r2, [r7, #28]
 800ecf6:	440a      	add	r2, r1
 800ecf8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ecfc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800ed00:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800ed04:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800ed06:	68bb      	ldr	r3, [r7, #8]
 800ed08:	695b      	ldr	r3, [r3, #20]
 800ed0a:	2b00      	cmp	r3, #0
 800ed0c:	d126      	bne.n	800ed5c <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800ed0e:	69bb      	ldr	r3, [r7, #24]
 800ed10:	015a      	lsls	r2, r3, #5
 800ed12:	69fb      	ldr	r3, [r7, #28]
 800ed14:	4413      	add	r3, r2
 800ed16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ed1a:	691a      	ldr	r2, [r3, #16]
 800ed1c:	68bb      	ldr	r3, [r7, #8]
 800ed1e:	689b      	ldr	r3, [r3, #8]
 800ed20:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ed24:	69b9      	ldr	r1, [r7, #24]
 800ed26:	0148      	lsls	r0, r1, #5
 800ed28:	69f9      	ldr	r1, [r7, #28]
 800ed2a:	4401      	add	r1, r0
 800ed2c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800ed30:	4313      	orrs	r3, r2
 800ed32:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800ed34:	69bb      	ldr	r3, [r7, #24]
 800ed36:	015a      	lsls	r2, r3, #5
 800ed38:	69fb      	ldr	r3, [r7, #28]
 800ed3a:	4413      	add	r3, r2
 800ed3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ed40:	691b      	ldr	r3, [r3, #16]
 800ed42:	69ba      	ldr	r2, [r7, #24]
 800ed44:	0151      	lsls	r1, r2, #5
 800ed46:	69fa      	ldr	r2, [r7, #28]
 800ed48:	440a      	add	r2, r1
 800ed4a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ed4e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ed52:	6113      	str	r3, [r2, #16]
 800ed54:	e036      	b.n	800edc4 <USB_EPStartXfer+0x3dc>
 800ed56:	bf00      	nop
 800ed58:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800ed5c:	68bb      	ldr	r3, [r7, #8]
 800ed5e:	695a      	ldr	r2, [r3, #20]
 800ed60:	68bb      	ldr	r3, [r7, #8]
 800ed62:	689b      	ldr	r3, [r3, #8]
 800ed64:	4413      	add	r3, r2
 800ed66:	1e5a      	subs	r2, r3, #1
 800ed68:	68bb      	ldr	r3, [r7, #8]
 800ed6a:	689b      	ldr	r3, [r3, #8]
 800ed6c:	fbb2 f3f3 	udiv	r3, r2, r3
 800ed70:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800ed72:	69bb      	ldr	r3, [r7, #24]
 800ed74:	015a      	lsls	r2, r3, #5
 800ed76:	69fb      	ldr	r3, [r7, #28]
 800ed78:	4413      	add	r3, r2
 800ed7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ed7e:	691a      	ldr	r2, [r3, #16]
 800ed80:	8afb      	ldrh	r3, [r7, #22]
 800ed82:	04d9      	lsls	r1, r3, #19
 800ed84:	4b39      	ldr	r3, [pc, #228]	; (800ee6c <USB_EPStartXfer+0x484>)
 800ed86:	400b      	ands	r3, r1
 800ed88:	69b9      	ldr	r1, [r7, #24]
 800ed8a:	0148      	lsls	r0, r1, #5
 800ed8c:	69f9      	ldr	r1, [r7, #28]
 800ed8e:	4401      	add	r1, r0
 800ed90:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800ed94:	4313      	orrs	r3, r2
 800ed96:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800ed98:	69bb      	ldr	r3, [r7, #24]
 800ed9a:	015a      	lsls	r2, r3, #5
 800ed9c:	69fb      	ldr	r3, [r7, #28]
 800ed9e:	4413      	add	r3, r2
 800eda0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800eda4:	691a      	ldr	r2, [r3, #16]
 800eda6:	68bb      	ldr	r3, [r7, #8]
 800eda8:	689b      	ldr	r3, [r3, #8]
 800edaa:	8af9      	ldrh	r1, [r7, #22]
 800edac:	fb01 f303 	mul.w	r3, r1, r3
 800edb0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800edb4:	69b9      	ldr	r1, [r7, #24]
 800edb6:	0148      	lsls	r0, r1, #5
 800edb8:	69f9      	ldr	r1, [r7, #28]
 800edba:	4401      	add	r1, r0
 800edbc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800edc0:	4313      	orrs	r3, r2
 800edc2:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800edc4:	79fb      	ldrb	r3, [r7, #7]
 800edc6:	2b01      	cmp	r3, #1
 800edc8:	d10d      	bne.n	800ede6 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800edca:	68bb      	ldr	r3, [r7, #8]
 800edcc:	68db      	ldr	r3, [r3, #12]
 800edce:	2b00      	cmp	r3, #0
 800edd0:	d009      	beq.n	800ede6 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800edd2:	68bb      	ldr	r3, [r7, #8]
 800edd4:	68d9      	ldr	r1, [r3, #12]
 800edd6:	69bb      	ldr	r3, [r7, #24]
 800edd8:	015a      	lsls	r2, r3, #5
 800edda:	69fb      	ldr	r3, [r7, #28]
 800eddc:	4413      	add	r3, r2
 800edde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ede2:	460a      	mov	r2, r1
 800ede4:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800ede6:	68bb      	ldr	r3, [r7, #8]
 800ede8:	78db      	ldrb	r3, [r3, #3]
 800edea:	2b01      	cmp	r3, #1
 800edec:	d128      	bne.n	800ee40 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800edee:	69fb      	ldr	r3, [r7, #28]
 800edf0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800edf4:	689b      	ldr	r3, [r3, #8]
 800edf6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800edfa:	2b00      	cmp	r3, #0
 800edfc:	d110      	bne.n	800ee20 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800edfe:	69bb      	ldr	r3, [r7, #24]
 800ee00:	015a      	lsls	r2, r3, #5
 800ee02:	69fb      	ldr	r3, [r7, #28]
 800ee04:	4413      	add	r3, r2
 800ee06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ee0a:	681b      	ldr	r3, [r3, #0]
 800ee0c:	69ba      	ldr	r2, [r7, #24]
 800ee0e:	0151      	lsls	r1, r2, #5
 800ee10:	69fa      	ldr	r2, [r7, #28]
 800ee12:	440a      	add	r2, r1
 800ee14:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ee18:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800ee1c:	6013      	str	r3, [r2, #0]
 800ee1e:	e00f      	b.n	800ee40 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800ee20:	69bb      	ldr	r3, [r7, #24]
 800ee22:	015a      	lsls	r2, r3, #5
 800ee24:	69fb      	ldr	r3, [r7, #28]
 800ee26:	4413      	add	r3, r2
 800ee28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ee2c:	681b      	ldr	r3, [r3, #0]
 800ee2e:	69ba      	ldr	r2, [r7, #24]
 800ee30:	0151      	lsls	r1, r2, #5
 800ee32:	69fa      	ldr	r2, [r7, #28]
 800ee34:	440a      	add	r2, r1
 800ee36:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ee3a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ee3e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800ee40:	69bb      	ldr	r3, [r7, #24]
 800ee42:	015a      	lsls	r2, r3, #5
 800ee44:	69fb      	ldr	r3, [r7, #28]
 800ee46:	4413      	add	r3, r2
 800ee48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ee4c:	681b      	ldr	r3, [r3, #0]
 800ee4e:	69ba      	ldr	r2, [r7, #24]
 800ee50:	0151      	lsls	r1, r2, #5
 800ee52:	69fa      	ldr	r2, [r7, #28]
 800ee54:	440a      	add	r2, r1
 800ee56:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ee5a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800ee5e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800ee60:	2300      	movs	r3, #0
}
 800ee62:	4618      	mov	r0, r3
 800ee64:	3720      	adds	r7, #32
 800ee66:	46bd      	mov	sp, r7
 800ee68:	bd80      	pop	{r7, pc}
 800ee6a:	bf00      	nop
 800ee6c:	1ff80000 	.word	0x1ff80000

0800ee70 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800ee70:	b480      	push	{r7}
 800ee72:	b087      	sub	sp, #28
 800ee74:	af00      	add	r7, sp, #0
 800ee76:	60f8      	str	r0, [r7, #12]
 800ee78:	60b9      	str	r1, [r7, #8]
 800ee7a:	4613      	mov	r3, r2
 800ee7c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ee7e:	68fb      	ldr	r3, [r7, #12]
 800ee80:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800ee82:	68bb      	ldr	r3, [r7, #8]
 800ee84:	781b      	ldrb	r3, [r3, #0]
 800ee86:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800ee88:	68bb      	ldr	r3, [r7, #8]
 800ee8a:	785b      	ldrb	r3, [r3, #1]
 800ee8c:	2b01      	cmp	r3, #1
 800ee8e:	f040 80cd 	bne.w	800f02c <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800ee92:	68bb      	ldr	r3, [r7, #8]
 800ee94:	695b      	ldr	r3, [r3, #20]
 800ee96:	2b00      	cmp	r3, #0
 800ee98:	d132      	bne.n	800ef00 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800ee9a:	693b      	ldr	r3, [r7, #16]
 800ee9c:	015a      	lsls	r2, r3, #5
 800ee9e:	697b      	ldr	r3, [r7, #20]
 800eea0:	4413      	add	r3, r2
 800eea2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800eea6:	691b      	ldr	r3, [r3, #16]
 800eea8:	693a      	ldr	r2, [r7, #16]
 800eeaa:	0151      	lsls	r1, r2, #5
 800eeac:	697a      	ldr	r2, [r7, #20]
 800eeae:	440a      	add	r2, r1
 800eeb0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800eeb4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800eeb8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800eebc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800eebe:	693b      	ldr	r3, [r7, #16]
 800eec0:	015a      	lsls	r2, r3, #5
 800eec2:	697b      	ldr	r3, [r7, #20]
 800eec4:	4413      	add	r3, r2
 800eec6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800eeca:	691b      	ldr	r3, [r3, #16]
 800eecc:	693a      	ldr	r2, [r7, #16]
 800eece:	0151      	lsls	r1, r2, #5
 800eed0:	697a      	ldr	r2, [r7, #20]
 800eed2:	440a      	add	r2, r1
 800eed4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800eed8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800eedc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800eede:	693b      	ldr	r3, [r7, #16]
 800eee0:	015a      	lsls	r2, r3, #5
 800eee2:	697b      	ldr	r3, [r7, #20]
 800eee4:	4413      	add	r3, r2
 800eee6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800eeea:	691b      	ldr	r3, [r3, #16]
 800eeec:	693a      	ldr	r2, [r7, #16]
 800eeee:	0151      	lsls	r1, r2, #5
 800eef0:	697a      	ldr	r2, [r7, #20]
 800eef2:	440a      	add	r2, r1
 800eef4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800eef8:	0cdb      	lsrs	r3, r3, #19
 800eefa:	04db      	lsls	r3, r3, #19
 800eefc:	6113      	str	r3, [r2, #16]
 800eefe:	e04e      	b.n	800ef9e <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800ef00:	693b      	ldr	r3, [r7, #16]
 800ef02:	015a      	lsls	r2, r3, #5
 800ef04:	697b      	ldr	r3, [r7, #20]
 800ef06:	4413      	add	r3, r2
 800ef08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ef0c:	691b      	ldr	r3, [r3, #16]
 800ef0e:	693a      	ldr	r2, [r7, #16]
 800ef10:	0151      	lsls	r1, r2, #5
 800ef12:	697a      	ldr	r2, [r7, #20]
 800ef14:	440a      	add	r2, r1
 800ef16:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ef1a:	0cdb      	lsrs	r3, r3, #19
 800ef1c:	04db      	lsls	r3, r3, #19
 800ef1e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800ef20:	693b      	ldr	r3, [r7, #16]
 800ef22:	015a      	lsls	r2, r3, #5
 800ef24:	697b      	ldr	r3, [r7, #20]
 800ef26:	4413      	add	r3, r2
 800ef28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ef2c:	691b      	ldr	r3, [r3, #16]
 800ef2e:	693a      	ldr	r2, [r7, #16]
 800ef30:	0151      	lsls	r1, r2, #5
 800ef32:	697a      	ldr	r2, [r7, #20]
 800ef34:	440a      	add	r2, r1
 800ef36:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ef3a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800ef3e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800ef42:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800ef44:	68bb      	ldr	r3, [r7, #8]
 800ef46:	695a      	ldr	r2, [r3, #20]
 800ef48:	68bb      	ldr	r3, [r7, #8]
 800ef4a:	689b      	ldr	r3, [r3, #8]
 800ef4c:	429a      	cmp	r2, r3
 800ef4e:	d903      	bls.n	800ef58 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800ef50:	68bb      	ldr	r3, [r7, #8]
 800ef52:	689a      	ldr	r2, [r3, #8]
 800ef54:	68bb      	ldr	r3, [r7, #8]
 800ef56:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800ef58:	693b      	ldr	r3, [r7, #16]
 800ef5a:	015a      	lsls	r2, r3, #5
 800ef5c:	697b      	ldr	r3, [r7, #20]
 800ef5e:	4413      	add	r3, r2
 800ef60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ef64:	691b      	ldr	r3, [r3, #16]
 800ef66:	693a      	ldr	r2, [r7, #16]
 800ef68:	0151      	lsls	r1, r2, #5
 800ef6a:	697a      	ldr	r2, [r7, #20]
 800ef6c:	440a      	add	r2, r1
 800ef6e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ef72:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ef76:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800ef78:	693b      	ldr	r3, [r7, #16]
 800ef7a:	015a      	lsls	r2, r3, #5
 800ef7c:	697b      	ldr	r3, [r7, #20]
 800ef7e:	4413      	add	r3, r2
 800ef80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ef84:	691a      	ldr	r2, [r3, #16]
 800ef86:	68bb      	ldr	r3, [r7, #8]
 800ef88:	695b      	ldr	r3, [r3, #20]
 800ef8a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ef8e:	6939      	ldr	r1, [r7, #16]
 800ef90:	0148      	lsls	r0, r1, #5
 800ef92:	6979      	ldr	r1, [r7, #20]
 800ef94:	4401      	add	r1, r0
 800ef96:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800ef9a:	4313      	orrs	r3, r2
 800ef9c:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800ef9e:	79fb      	ldrb	r3, [r7, #7]
 800efa0:	2b01      	cmp	r3, #1
 800efa2:	d11e      	bne.n	800efe2 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800efa4:	68bb      	ldr	r3, [r7, #8]
 800efa6:	691b      	ldr	r3, [r3, #16]
 800efa8:	2b00      	cmp	r3, #0
 800efaa:	d009      	beq.n	800efc0 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800efac:	693b      	ldr	r3, [r7, #16]
 800efae:	015a      	lsls	r2, r3, #5
 800efb0:	697b      	ldr	r3, [r7, #20]
 800efb2:	4413      	add	r3, r2
 800efb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800efb8:	461a      	mov	r2, r3
 800efba:	68bb      	ldr	r3, [r7, #8]
 800efbc:	691b      	ldr	r3, [r3, #16]
 800efbe:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800efc0:	693b      	ldr	r3, [r7, #16]
 800efc2:	015a      	lsls	r2, r3, #5
 800efc4:	697b      	ldr	r3, [r7, #20]
 800efc6:	4413      	add	r3, r2
 800efc8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800efcc:	681b      	ldr	r3, [r3, #0]
 800efce:	693a      	ldr	r2, [r7, #16]
 800efd0:	0151      	lsls	r1, r2, #5
 800efd2:	697a      	ldr	r2, [r7, #20]
 800efd4:	440a      	add	r2, r1
 800efd6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800efda:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800efde:	6013      	str	r3, [r2, #0]
 800efe0:	e092      	b.n	800f108 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800efe2:	693b      	ldr	r3, [r7, #16]
 800efe4:	015a      	lsls	r2, r3, #5
 800efe6:	697b      	ldr	r3, [r7, #20]
 800efe8:	4413      	add	r3, r2
 800efea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800efee:	681b      	ldr	r3, [r3, #0]
 800eff0:	693a      	ldr	r2, [r7, #16]
 800eff2:	0151      	lsls	r1, r2, #5
 800eff4:	697a      	ldr	r2, [r7, #20]
 800eff6:	440a      	add	r2, r1
 800eff8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800effc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800f000:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800f002:	68bb      	ldr	r3, [r7, #8]
 800f004:	695b      	ldr	r3, [r3, #20]
 800f006:	2b00      	cmp	r3, #0
 800f008:	d07e      	beq.n	800f108 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800f00a:	697b      	ldr	r3, [r7, #20]
 800f00c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f010:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f012:	68bb      	ldr	r3, [r7, #8]
 800f014:	781b      	ldrb	r3, [r3, #0]
 800f016:	f003 030f 	and.w	r3, r3, #15
 800f01a:	2101      	movs	r1, #1
 800f01c:	fa01 f303 	lsl.w	r3, r1, r3
 800f020:	6979      	ldr	r1, [r7, #20]
 800f022:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f026:	4313      	orrs	r3, r2
 800f028:	634b      	str	r3, [r1, #52]	; 0x34
 800f02a:	e06d      	b.n	800f108 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800f02c:	693b      	ldr	r3, [r7, #16]
 800f02e:	015a      	lsls	r2, r3, #5
 800f030:	697b      	ldr	r3, [r7, #20]
 800f032:	4413      	add	r3, r2
 800f034:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f038:	691b      	ldr	r3, [r3, #16]
 800f03a:	693a      	ldr	r2, [r7, #16]
 800f03c:	0151      	lsls	r1, r2, #5
 800f03e:	697a      	ldr	r2, [r7, #20]
 800f040:	440a      	add	r2, r1
 800f042:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f046:	0cdb      	lsrs	r3, r3, #19
 800f048:	04db      	lsls	r3, r3, #19
 800f04a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800f04c:	693b      	ldr	r3, [r7, #16]
 800f04e:	015a      	lsls	r2, r3, #5
 800f050:	697b      	ldr	r3, [r7, #20]
 800f052:	4413      	add	r3, r2
 800f054:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f058:	691b      	ldr	r3, [r3, #16]
 800f05a:	693a      	ldr	r2, [r7, #16]
 800f05c:	0151      	lsls	r1, r2, #5
 800f05e:	697a      	ldr	r2, [r7, #20]
 800f060:	440a      	add	r2, r1
 800f062:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f066:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800f06a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800f06e:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800f070:	68bb      	ldr	r3, [r7, #8]
 800f072:	695b      	ldr	r3, [r3, #20]
 800f074:	2b00      	cmp	r3, #0
 800f076:	d003      	beq.n	800f080 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 800f078:	68bb      	ldr	r3, [r7, #8]
 800f07a:	689a      	ldr	r2, [r3, #8]
 800f07c:	68bb      	ldr	r3, [r7, #8]
 800f07e:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800f080:	693b      	ldr	r3, [r7, #16]
 800f082:	015a      	lsls	r2, r3, #5
 800f084:	697b      	ldr	r3, [r7, #20]
 800f086:	4413      	add	r3, r2
 800f088:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f08c:	691b      	ldr	r3, [r3, #16]
 800f08e:	693a      	ldr	r2, [r7, #16]
 800f090:	0151      	lsls	r1, r2, #5
 800f092:	697a      	ldr	r2, [r7, #20]
 800f094:	440a      	add	r2, r1
 800f096:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f09a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800f09e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800f0a0:	693b      	ldr	r3, [r7, #16]
 800f0a2:	015a      	lsls	r2, r3, #5
 800f0a4:	697b      	ldr	r3, [r7, #20]
 800f0a6:	4413      	add	r3, r2
 800f0a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f0ac:	691a      	ldr	r2, [r3, #16]
 800f0ae:	68bb      	ldr	r3, [r7, #8]
 800f0b0:	689b      	ldr	r3, [r3, #8]
 800f0b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800f0b6:	6939      	ldr	r1, [r7, #16]
 800f0b8:	0148      	lsls	r0, r1, #5
 800f0ba:	6979      	ldr	r1, [r7, #20]
 800f0bc:	4401      	add	r1, r0
 800f0be:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800f0c2:	4313      	orrs	r3, r2
 800f0c4:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800f0c6:	79fb      	ldrb	r3, [r7, #7]
 800f0c8:	2b01      	cmp	r3, #1
 800f0ca:	d10d      	bne.n	800f0e8 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800f0cc:	68bb      	ldr	r3, [r7, #8]
 800f0ce:	68db      	ldr	r3, [r3, #12]
 800f0d0:	2b00      	cmp	r3, #0
 800f0d2:	d009      	beq.n	800f0e8 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800f0d4:	68bb      	ldr	r3, [r7, #8]
 800f0d6:	68d9      	ldr	r1, [r3, #12]
 800f0d8:	693b      	ldr	r3, [r7, #16]
 800f0da:	015a      	lsls	r2, r3, #5
 800f0dc:	697b      	ldr	r3, [r7, #20]
 800f0de:	4413      	add	r3, r2
 800f0e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f0e4:	460a      	mov	r2, r1
 800f0e6:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800f0e8:	693b      	ldr	r3, [r7, #16]
 800f0ea:	015a      	lsls	r2, r3, #5
 800f0ec:	697b      	ldr	r3, [r7, #20]
 800f0ee:	4413      	add	r3, r2
 800f0f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f0f4:	681b      	ldr	r3, [r3, #0]
 800f0f6:	693a      	ldr	r2, [r7, #16]
 800f0f8:	0151      	lsls	r1, r2, #5
 800f0fa:	697a      	ldr	r2, [r7, #20]
 800f0fc:	440a      	add	r2, r1
 800f0fe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f102:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800f106:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800f108:	2300      	movs	r3, #0
}
 800f10a:	4618      	mov	r0, r3
 800f10c:	371c      	adds	r7, #28
 800f10e:	46bd      	mov	sp, r7
 800f110:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f114:	4770      	bx	lr

0800f116 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800f116:	b480      	push	{r7}
 800f118:	b089      	sub	sp, #36	; 0x24
 800f11a:	af00      	add	r7, sp, #0
 800f11c:	60f8      	str	r0, [r7, #12]
 800f11e:	60b9      	str	r1, [r7, #8]
 800f120:	4611      	mov	r1, r2
 800f122:	461a      	mov	r2, r3
 800f124:	460b      	mov	r3, r1
 800f126:	71fb      	strb	r3, [r7, #7]
 800f128:	4613      	mov	r3, r2
 800f12a:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f12c:	68fb      	ldr	r3, [r7, #12]
 800f12e:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800f130:	68bb      	ldr	r3, [r7, #8]
 800f132:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800f134:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800f138:	2b00      	cmp	r3, #0
 800f13a:	d123      	bne.n	800f184 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800f13c:	88bb      	ldrh	r3, [r7, #4]
 800f13e:	3303      	adds	r3, #3
 800f140:	089b      	lsrs	r3, r3, #2
 800f142:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800f144:	2300      	movs	r3, #0
 800f146:	61bb      	str	r3, [r7, #24]
 800f148:	e018      	b.n	800f17c <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800f14a:	79fb      	ldrb	r3, [r7, #7]
 800f14c:	031a      	lsls	r2, r3, #12
 800f14e:	697b      	ldr	r3, [r7, #20]
 800f150:	4413      	add	r3, r2
 800f152:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f156:	461a      	mov	r2, r3
 800f158:	69fb      	ldr	r3, [r7, #28]
 800f15a:	681b      	ldr	r3, [r3, #0]
 800f15c:	6013      	str	r3, [r2, #0]
      pSrc++;
 800f15e:	69fb      	ldr	r3, [r7, #28]
 800f160:	3301      	adds	r3, #1
 800f162:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800f164:	69fb      	ldr	r3, [r7, #28]
 800f166:	3301      	adds	r3, #1
 800f168:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800f16a:	69fb      	ldr	r3, [r7, #28]
 800f16c:	3301      	adds	r3, #1
 800f16e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800f170:	69fb      	ldr	r3, [r7, #28]
 800f172:	3301      	adds	r3, #1
 800f174:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800f176:	69bb      	ldr	r3, [r7, #24]
 800f178:	3301      	adds	r3, #1
 800f17a:	61bb      	str	r3, [r7, #24]
 800f17c:	69ba      	ldr	r2, [r7, #24]
 800f17e:	693b      	ldr	r3, [r7, #16]
 800f180:	429a      	cmp	r2, r3
 800f182:	d3e2      	bcc.n	800f14a <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800f184:	2300      	movs	r3, #0
}
 800f186:	4618      	mov	r0, r3
 800f188:	3724      	adds	r7, #36	; 0x24
 800f18a:	46bd      	mov	sp, r7
 800f18c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f190:	4770      	bx	lr

0800f192 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800f192:	b480      	push	{r7}
 800f194:	b08b      	sub	sp, #44	; 0x2c
 800f196:	af00      	add	r7, sp, #0
 800f198:	60f8      	str	r0, [r7, #12]
 800f19a:	60b9      	str	r1, [r7, #8]
 800f19c:	4613      	mov	r3, r2
 800f19e:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f1a0:	68fb      	ldr	r3, [r7, #12]
 800f1a2:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800f1a4:	68bb      	ldr	r3, [r7, #8]
 800f1a6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800f1a8:	88fb      	ldrh	r3, [r7, #6]
 800f1aa:	089b      	lsrs	r3, r3, #2
 800f1ac:	b29b      	uxth	r3, r3
 800f1ae:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800f1b0:	88fb      	ldrh	r3, [r7, #6]
 800f1b2:	f003 0303 	and.w	r3, r3, #3
 800f1b6:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800f1b8:	2300      	movs	r3, #0
 800f1ba:	623b      	str	r3, [r7, #32]
 800f1bc:	e014      	b.n	800f1e8 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800f1be:	69bb      	ldr	r3, [r7, #24]
 800f1c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f1c4:	681a      	ldr	r2, [r3, #0]
 800f1c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1c8:	601a      	str	r2, [r3, #0]
    pDest++;
 800f1ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1cc:	3301      	adds	r3, #1
 800f1ce:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800f1d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1d2:	3301      	adds	r3, #1
 800f1d4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800f1d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1d8:	3301      	adds	r3, #1
 800f1da:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800f1dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1de:	3301      	adds	r3, #1
 800f1e0:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800f1e2:	6a3b      	ldr	r3, [r7, #32]
 800f1e4:	3301      	adds	r3, #1
 800f1e6:	623b      	str	r3, [r7, #32]
 800f1e8:	6a3a      	ldr	r2, [r7, #32]
 800f1ea:	697b      	ldr	r3, [r7, #20]
 800f1ec:	429a      	cmp	r2, r3
 800f1ee:	d3e6      	bcc.n	800f1be <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800f1f0:	8bfb      	ldrh	r3, [r7, #30]
 800f1f2:	2b00      	cmp	r3, #0
 800f1f4:	d01e      	beq.n	800f234 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800f1f6:	2300      	movs	r3, #0
 800f1f8:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800f1fa:	69bb      	ldr	r3, [r7, #24]
 800f1fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f200:	461a      	mov	r2, r3
 800f202:	f107 0310 	add.w	r3, r7, #16
 800f206:	6812      	ldr	r2, [r2, #0]
 800f208:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800f20a:	693a      	ldr	r2, [r7, #16]
 800f20c:	6a3b      	ldr	r3, [r7, #32]
 800f20e:	b2db      	uxtb	r3, r3
 800f210:	00db      	lsls	r3, r3, #3
 800f212:	fa22 f303 	lsr.w	r3, r2, r3
 800f216:	b2da      	uxtb	r2, r3
 800f218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f21a:	701a      	strb	r2, [r3, #0]
      i++;
 800f21c:	6a3b      	ldr	r3, [r7, #32]
 800f21e:	3301      	adds	r3, #1
 800f220:	623b      	str	r3, [r7, #32]
      pDest++;
 800f222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f224:	3301      	adds	r3, #1
 800f226:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800f228:	8bfb      	ldrh	r3, [r7, #30]
 800f22a:	3b01      	subs	r3, #1
 800f22c:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800f22e:	8bfb      	ldrh	r3, [r7, #30]
 800f230:	2b00      	cmp	r3, #0
 800f232:	d1ea      	bne.n	800f20a <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800f234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800f236:	4618      	mov	r0, r3
 800f238:	372c      	adds	r7, #44	; 0x2c
 800f23a:	46bd      	mov	sp, r7
 800f23c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f240:	4770      	bx	lr

0800f242 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800f242:	b480      	push	{r7}
 800f244:	b085      	sub	sp, #20
 800f246:	af00      	add	r7, sp, #0
 800f248:	6078      	str	r0, [r7, #4]
 800f24a:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f24c:	687b      	ldr	r3, [r7, #4]
 800f24e:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800f250:	683b      	ldr	r3, [r7, #0]
 800f252:	781b      	ldrb	r3, [r3, #0]
 800f254:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800f256:	683b      	ldr	r3, [r7, #0]
 800f258:	785b      	ldrb	r3, [r3, #1]
 800f25a:	2b01      	cmp	r3, #1
 800f25c:	d12c      	bne.n	800f2b8 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800f25e:	68bb      	ldr	r3, [r7, #8]
 800f260:	015a      	lsls	r2, r3, #5
 800f262:	68fb      	ldr	r3, [r7, #12]
 800f264:	4413      	add	r3, r2
 800f266:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f26a:	681b      	ldr	r3, [r3, #0]
 800f26c:	2b00      	cmp	r3, #0
 800f26e:	db12      	blt.n	800f296 <USB_EPSetStall+0x54>
 800f270:	68bb      	ldr	r3, [r7, #8]
 800f272:	2b00      	cmp	r3, #0
 800f274:	d00f      	beq.n	800f296 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800f276:	68bb      	ldr	r3, [r7, #8]
 800f278:	015a      	lsls	r2, r3, #5
 800f27a:	68fb      	ldr	r3, [r7, #12]
 800f27c:	4413      	add	r3, r2
 800f27e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f282:	681b      	ldr	r3, [r3, #0]
 800f284:	68ba      	ldr	r2, [r7, #8]
 800f286:	0151      	lsls	r1, r2, #5
 800f288:	68fa      	ldr	r2, [r7, #12]
 800f28a:	440a      	add	r2, r1
 800f28c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f290:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800f294:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800f296:	68bb      	ldr	r3, [r7, #8]
 800f298:	015a      	lsls	r2, r3, #5
 800f29a:	68fb      	ldr	r3, [r7, #12]
 800f29c:	4413      	add	r3, r2
 800f29e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f2a2:	681b      	ldr	r3, [r3, #0]
 800f2a4:	68ba      	ldr	r2, [r7, #8]
 800f2a6:	0151      	lsls	r1, r2, #5
 800f2a8:	68fa      	ldr	r2, [r7, #12]
 800f2aa:	440a      	add	r2, r1
 800f2ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f2b0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800f2b4:	6013      	str	r3, [r2, #0]
 800f2b6:	e02b      	b.n	800f310 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800f2b8:	68bb      	ldr	r3, [r7, #8]
 800f2ba:	015a      	lsls	r2, r3, #5
 800f2bc:	68fb      	ldr	r3, [r7, #12]
 800f2be:	4413      	add	r3, r2
 800f2c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f2c4:	681b      	ldr	r3, [r3, #0]
 800f2c6:	2b00      	cmp	r3, #0
 800f2c8:	db12      	blt.n	800f2f0 <USB_EPSetStall+0xae>
 800f2ca:	68bb      	ldr	r3, [r7, #8]
 800f2cc:	2b00      	cmp	r3, #0
 800f2ce:	d00f      	beq.n	800f2f0 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800f2d0:	68bb      	ldr	r3, [r7, #8]
 800f2d2:	015a      	lsls	r2, r3, #5
 800f2d4:	68fb      	ldr	r3, [r7, #12]
 800f2d6:	4413      	add	r3, r2
 800f2d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f2dc:	681b      	ldr	r3, [r3, #0]
 800f2de:	68ba      	ldr	r2, [r7, #8]
 800f2e0:	0151      	lsls	r1, r2, #5
 800f2e2:	68fa      	ldr	r2, [r7, #12]
 800f2e4:	440a      	add	r2, r1
 800f2e6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f2ea:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800f2ee:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800f2f0:	68bb      	ldr	r3, [r7, #8]
 800f2f2:	015a      	lsls	r2, r3, #5
 800f2f4:	68fb      	ldr	r3, [r7, #12]
 800f2f6:	4413      	add	r3, r2
 800f2f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f2fc:	681b      	ldr	r3, [r3, #0]
 800f2fe:	68ba      	ldr	r2, [r7, #8]
 800f300:	0151      	lsls	r1, r2, #5
 800f302:	68fa      	ldr	r2, [r7, #12]
 800f304:	440a      	add	r2, r1
 800f306:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f30a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800f30e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800f310:	2300      	movs	r3, #0
}
 800f312:	4618      	mov	r0, r3
 800f314:	3714      	adds	r7, #20
 800f316:	46bd      	mov	sp, r7
 800f318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f31c:	4770      	bx	lr

0800f31e <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800f31e:	b480      	push	{r7}
 800f320:	b085      	sub	sp, #20
 800f322:	af00      	add	r7, sp, #0
 800f324:	6078      	str	r0, [r7, #4]
 800f326:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f328:	687b      	ldr	r3, [r7, #4]
 800f32a:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800f32c:	683b      	ldr	r3, [r7, #0]
 800f32e:	781b      	ldrb	r3, [r3, #0]
 800f330:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800f332:	683b      	ldr	r3, [r7, #0]
 800f334:	785b      	ldrb	r3, [r3, #1]
 800f336:	2b01      	cmp	r3, #1
 800f338:	d128      	bne.n	800f38c <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800f33a:	68bb      	ldr	r3, [r7, #8]
 800f33c:	015a      	lsls	r2, r3, #5
 800f33e:	68fb      	ldr	r3, [r7, #12]
 800f340:	4413      	add	r3, r2
 800f342:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f346:	681b      	ldr	r3, [r3, #0]
 800f348:	68ba      	ldr	r2, [r7, #8]
 800f34a:	0151      	lsls	r1, r2, #5
 800f34c:	68fa      	ldr	r2, [r7, #12]
 800f34e:	440a      	add	r2, r1
 800f350:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f354:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800f358:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800f35a:	683b      	ldr	r3, [r7, #0]
 800f35c:	78db      	ldrb	r3, [r3, #3]
 800f35e:	2b03      	cmp	r3, #3
 800f360:	d003      	beq.n	800f36a <USB_EPClearStall+0x4c>
 800f362:	683b      	ldr	r3, [r7, #0]
 800f364:	78db      	ldrb	r3, [r3, #3]
 800f366:	2b02      	cmp	r3, #2
 800f368:	d138      	bne.n	800f3dc <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800f36a:	68bb      	ldr	r3, [r7, #8]
 800f36c:	015a      	lsls	r2, r3, #5
 800f36e:	68fb      	ldr	r3, [r7, #12]
 800f370:	4413      	add	r3, r2
 800f372:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f376:	681b      	ldr	r3, [r3, #0]
 800f378:	68ba      	ldr	r2, [r7, #8]
 800f37a:	0151      	lsls	r1, r2, #5
 800f37c:	68fa      	ldr	r2, [r7, #12]
 800f37e:	440a      	add	r2, r1
 800f380:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f384:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f388:	6013      	str	r3, [r2, #0]
 800f38a:	e027      	b.n	800f3dc <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800f38c:	68bb      	ldr	r3, [r7, #8]
 800f38e:	015a      	lsls	r2, r3, #5
 800f390:	68fb      	ldr	r3, [r7, #12]
 800f392:	4413      	add	r3, r2
 800f394:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f398:	681b      	ldr	r3, [r3, #0]
 800f39a:	68ba      	ldr	r2, [r7, #8]
 800f39c:	0151      	lsls	r1, r2, #5
 800f39e:	68fa      	ldr	r2, [r7, #12]
 800f3a0:	440a      	add	r2, r1
 800f3a2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f3a6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800f3aa:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800f3ac:	683b      	ldr	r3, [r7, #0]
 800f3ae:	78db      	ldrb	r3, [r3, #3]
 800f3b0:	2b03      	cmp	r3, #3
 800f3b2:	d003      	beq.n	800f3bc <USB_EPClearStall+0x9e>
 800f3b4:	683b      	ldr	r3, [r7, #0]
 800f3b6:	78db      	ldrb	r3, [r3, #3]
 800f3b8:	2b02      	cmp	r3, #2
 800f3ba:	d10f      	bne.n	800f3dc <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800f3bc:	68bb      	ldr	r3, [r7, #8]
 800f3be:	015a      	lsls	r2, r3, #5
 800f3c0:	68fb      	ldr	r3, [r7, #12]
 800f3c2:	4413      	add	r3, r2
 800f3c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f3c8:	681b      	ldr	r3, [r3, #0]
 800f3ca:	68ba      	ldr	r2, [r7, #8]
 800f3cc:	0151      	lsls	r1, r2, #5
 800f3ce:	68fa      	ldr	r2, [r7, #12]
 800f3d0:	440a      	add	r2, r1
 800f3d2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f3d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f3da:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800f3dc:	2300      	movs	r3, #0
}
 800f3de:	4618      	mov	r0, r3
 800f3e0:	3714      	adds	r7, #20
 800f3e2:	46bd      	mov	sp, r7
 800f3e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3e8:	4770      	bx	lr

0800f3ea <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800f3ea:	b480      	push	{r7}
 800f3ec:	b085      	sub	sp, #20
 800f3ee:	af00      	add	r7, sp, #0
 800f3f0:	6078      	str	r0, [r7, #4]
 800f3f2:	460b      	mov	r3, r1
 800f3f4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f3f6:	687b      	ldr	r3, [r7, #4]
 800f3f8:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800f3fa:	68fb      	ldr	r3, [r7, #12]
 800f3fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f400:	681b      	ldr	r3, [r3, #0]
 800f402:	68fa      	ldr	r2, [r7, #12]
 800f404:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f408:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800f40c:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800f40e:	68fb      	ldr	r3, [r7, #12]
 800f410:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f414:	681a      	ldr	r2, [r3, #0]
 800f416:	78fb      	ldrb	r3, [r7, #3]
 800f418:	011b      	lsls	r3, r3, #4
 800f41a:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800f41e:	68f9      	ldr	r1, [r7, #12]
 800f420:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f424:	4313      	orrs	r3, r2
 800f426:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800f428:	2300      	movs	r3, #0
}
 800f42a:	4618      	mov	r0, r3
 800f42c:	3714      	adds	r7, #20
 800f42e:	46bd      	mov	sp, r7
 800f430:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f434:	4770      	bx	lr

0800f436 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800f436:	b480      	push	{r7}
 800f438:	b085      	sub	sp, #20
 800f43a:	af00      	add	r7, sp, #0
 800f43c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f43e:	687b      	ldr	r3, [r7, #4]
 800f440:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800f442:	68fb      	ldr	r3, [r7, #12]
 800f444:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800f448:	681b      	ldr	r3, [r3, #0]
 800f44a:	68fa      	ldr	r2, [r7, #12]
 800f44c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800f450:	f023 0303 	bic.w	r3, r3, #3
 800f454:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800f456:	68fb      	ldr	r3, [r7, #12]
 800f458:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f45c:	685b      	ldr	r3, [r3, #4]
 800f45e:	68fa      	ldr	r2, [r7, #12]
 800f460:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f464:	f023 0302 	bic.w	r3, r3, #2
 800f468:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800f46a:	2300      	movs	r3, #0
}
 800f46c:	4618      	mov	r0, r3
 800f46e:	3714      	adds	r7, #20
 800f470:	46bd      	mov	sp, r7
 800f472:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f476:	4770      	bx	lr

0800f478 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800f478:	b480      	push	{r7}
 800f47a:	b085      	sub	sp, #20
 800f47c:	af00      	add	r7, sp, #0
 800f47e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f480:	687b      	ldr	r3, [r7, #4]
 800f482:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800f484:	68fb      	ldr	r3, [r7, #12]
 800f486:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800f48a:	681b      	ldr	r3, [r3, #0]
 800f48c:	68fa      	ldr	r2, [r7, #12]
 800f48e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800f492:	f023 0303 	bic.w	r3, r3, #3
 800f496:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800f498:	68fb      	ldr	r3, [r7, #12]
 800f49a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f49e:	685b      	ldr	r3, [r3, #4]
 800f4a0:	68fa      	ldr	r2, [r7, #12]
 800f4a2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f4a6:	f043 0302 	orr.w	r3, r3, #2
 800f4aa:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800f4ac:	2300      	movs	r3, #0
}
 800f4ae:	4618      	mov	r0, r3
 800f4b0:	3714      	adds	r7, #20
 800f4b2:	46bd      	mov	sp, r7
 800f4b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4b8:	4770      	bx	lr

0800f4ba <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800f4ba:	b480      	push	{r7}
 800f4bc:	b085      	sub	sp, #20
 800f4be:	af00      	add	r7, sp, #0
 800f4c0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800f4c2:	687b      	ldr	r3, [r7, #4]
 800f4c4:	695b      	ldr	r3, [r3, #20]
 800f4c6:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800f4c8:	687b      	ldr	r3, [r7, #4]
 800f4ca:	699b      	ldr	r3, [r3, #24]
 800f4cc:	68fa      	ldr	r2, [r7, #12]
 800f4ce:	4013      	ands	r3, r2
 800f4d0:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800f4d2:	68fb      	ldr	r3, [r7, #12]
}
 800f4d4:	4618      	mov	r0, r3
 800f4d6:	3714      	adds	r7, #20
 800f4d8:	46bd      	mov	sp, r7
 800f4da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4de:	4770      	bx	lr

0800f4e0 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800f4e0:	b480      	push	{r7}
 800f4e2:	b085      	sub	sp, #20
 800f4e4:	af00      	add	r7, sp, #0
 800f4e6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f4e8:	687b      	ldr	r3, [r7, #4]
 800f4ea:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800f4ec:	68fb      	ldr	r3, [r7, #12]
 800f4ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f4f2:	699b      	ldr	r3, [r3, #24]
 800f4f4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800f4f6:	68fb      	ldr	r3, [r7, #12]
 800f4f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f4fc:	69db      	ldr	r3, [r3, #28]
 800f4fe:	68ba      	ldr	r2, [r7, #8]
 800f500:	4013      	ands	r3, r2
 800f502:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800f504:	68bb      	ldr	r3, [r7, #8]
 800f506:	0c1b      	lsrs	r3, r3, #16
}
 800f508:	4618      	mov	r0, r3
 800f50a:	3714      	adds	r7, #20
 800f50c:	46bd      	mov	sp, r7
 800f50e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f512:	4770      	bx	lr

0800f514 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800f514:	b480      	push	{r7}
 800f516:	b085      	sub	sp, #20
 800f518:	af00      	add	r7, sp, #0
 800f51a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f51c:	687b      	ldr	r3, [r7, #4]
 800f51e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800f520:	68fb      	ldr	r3, [r7, #12]
 800f522:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f526:	699b      	ldr	r3, [r3, #24]
 800f528:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800f52a:	68fb      	ldr	r3, [r7, #12]
 800f52c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f530:	69db      	ldr	r3, [r3, #28]
 800f532:	68ba      	ldr	r2, [r7, #8]
 800f534:	4013      	ands	r3, r2
 800f536:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800f538:	68bb      	ldr	r3, [r7, #8]
 800f53a:	b29b      	uxth	r3, r3
}
 800f53c:	4618      	mov	r0, r3
 800f53e:	3714      	adds	r7, #20
 800f540:	46bd      	mov	sp, r7
 800f542:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f546:	4770      	bx	lr

0800f548 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800f548:	b480      	push	{r7}
 800f54a:	b085      	sub	sp, #20
 800f54c:	af00      	add	r7, sp, #0
 800f54e:	6078      	str	r0, [r7, #4]
 800f550:	460b      	mov	r3, r1
 800f552:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f554:	687b      	ldr	r3, [r7, #4]
 800f556:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800f558:	78fb      	ldrb	r3, [r7, #3]
 800f55a:	015a      	lsls	r2, r3, #5
 800f55c:	68fb      	ldr	r3, [r7, #12]
 800f55e:	4413      	add	r3, r2
 800f560:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f564:	689b      	ldr	r3, [r3, #8]
 800f566:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800f568:	68fb      	ldr	r3, [r7, #12]
 800f56a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f56e:	695b      	ldr	r3, [r3, #20]
 800f570:	68ba      	ldr	r2, [r7, #8]
 800f572:	4013      	ands	r3, r2
 800f574:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800f576:	68bb      	ldr	r3, [r7, #8]
}
 800f578:	4618      	mov	r0, r3
 800f57a:	3714      	adds	r7, #20
 800f57c:	46bd      	mov	sp, r7
 800f57e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f582:	4770      	bx	lr

0800f584 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800f584:	b480      	push	{r7}
 800f586:	b087      	sub	sp, #28
 800f588:	af00      	add	r7, sp, #0
 800f58a:	6078      	str	r0, [r7, #4]
 800f58c:	460b      	mov	r3, r1
 800f58e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f590:	687b      	ldr	r3, [r7, #4]
 800f592:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800f594:	697b      	ldr	r3, [r7, #20]
 800f596:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f59a:	691b      	ldr	r3, [r3, #16]
 800f59c:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800f59e:	697b      	ldr	r3, [r7, #20]
 800f5a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f5a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f5a6:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800f5a8:	78fb      	ldrb	r3, [r7, #3]
 800f5aa:	f003 030f 	and.w	r3, r3, #15
 800f5ae:	68fa      	ldr	r2, [r7, #12]
 800f5b0:	fa22 f303 	lsr.w	r3, r2, r3
 800f5b4:	01db      	lsls	r3, r3, #7
 800f5b6:	b2db      	uxtb	r3, r3
 800f5b8:	693a      	ldr	r2, [r7, #16]
 800f5ba:	4313      	orrs	r3, r2
 800f5bc:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800f5be:	78fb      	ldrb	r3, [r7, #3]
 800f5c0:	015a      	lsls	r2, r3, #5
 800f5c2:	697b      	ldr	r3, [r7, #20]
 800f5c4:	4413      	add	r3, r2
 800f5c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f5ca:	689b      	ldr	r3, [r3, #8]
 800f5cc:	693a      	ldr	r2, [r7, #16]
 800f5ce:	4013      	ands	r3, r2
 800f5d0:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800f5d2:	68bb      	ldr	r3, [r7, #8]
}
 800f5d4:	4618      	mov	r0, r3
 800f5d6:	371c      	adds	r7, #28
 800f5d8:	46bd      	mov	sp, r7
 800f5da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5de:	4770      	bx	lr

0800f5e0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800f5e0:	b480      	push	{r7}
 800f5e2:	b083      	sub	sp, #12
 800f5e4:	af00      	add	r7, sp, #0
 800f5e6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800f5e8:	687b      	ldr	r3, [r7, #4]
 800f5ea:	695b      	ldr	r3, [r3, #20]
 800f5ec:	f003 0301 	and.w	r3, r3, #1
}
 800f5f0:	4618      	mov	r0, r3
 800f5f2:	370c      	adds	r7, #12
 800f5f4:	46bd      	mov	sp, r7
 800f5f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5fa:	4770      	bx	lr

0800f5fc <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800f5fc:	b480      	push	{r7}
 800f5fe:	b085      	sub	sp, #20
 800f600:	af00      	add	r7, sp, #0
 800f602:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f604:	687b      	ldr	r3, [r7, #4]
 800f606:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800f608:	68fb      	ldr	r3, [r7, #12]
 800f60a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f60e:	681b      	ldr	r3, [r3, #0]
 800f610:	68fa      	ldr	r2, [r7, #12]
 800f612:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f616:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800f61a:	f023 0307 	bic.w	r3, r3, #7
 800f61e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800f620:	68fb      	ldr	r3, [r7, #12]
 800f622:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f626:	685b      	ldr	r3, [r3, #4]
 800f628:	68fa      	ldr	r2, [r7, #12]
 800f62a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f62e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800f632:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800f634:	2300      	movs	r3, #0
}
 800f636:	4618      	mov	r0, r3
 800f638:	3714      	adds	r7, #20
 800f63a:	46bd      	mov	sp, r7
 800f63c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f640:	4770      	bx	lr
	...

0800f644 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800f644:	b480      	push	{r7}
 800f646:	b087      	sub	sp, #28
 800f648:	af00      	add	r7, sp, #0
 800f64a:	60f8      	str	r0, [r7, #12]
 800f64c:	460b      	mov	r3, r1
 800f64e:	607a      	str	r2, [r7, #4]
 800f650:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f652:	68fb      	ldr	r3, [r7, #12]
 800f654:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800f656:	68fb      	ldr	r3, [r7, #12]
 800f658:	333c      	adds	r3, #60	; 0x3c
 800f65a:	3304      	adds	r3, #4
 800f65c:	681b      	ldr	r3, [r3, #0]
 800f65e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800f660:	693b      	ldr	r3, [r7, #16]
 800f662:	4a26      	ldr	r2, [pc, #152]	; (800f6fc <USB_EP0_OutStart+0xb8>)
 800f664:	4293      	cmp	r3, r2
 800f666:	d90a      	bls.n	800f67e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800f668:	697b      	ldr	r3, [r7, #20]
 800f66a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f66e:	681b      	ldr	r3, [r3, #0]
 800f670:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800f674:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800f678:	d101      	bne.n	800f67e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800f67a:	2300      	movs	r3, #0
 800f67c:	e037      	b.n	800f6ee <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800f67e:	697b      	ldr	r3, [r7, #20]
 800f680:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f684:	461a      	mov	r2, r3
 800f686:	2300      	movs	r3, #0
 800f688:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800f68a:	697b      	ldr	r3, [r7, #20]
 800f68c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f690:	691b      	ldr	r3, [r3, #16]
 800f692:	697a      	ldr	r2, [r7, #20]
 800f694:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f698:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800f69c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800f69e:	697b      	ldr	r3, [r7, #20]
 800f6a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f6a4:	691b      	ldr	r3, [r3, #16]
 800f6a6:	697a      	ldr	r2, [r7, #20]
 800f6a8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f6ac:	f043 0318 	orr.w	r3, r3, #24
 800f6b0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800f6b2:	697b      	ldr	r3, [r7, #20]
 800f6b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f6b8:	691b      	ldr	r3, [r3, #16]
 800f6ba:	697a      	ldr	r2, [r7, #20]
 800f6bc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f6c0:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800f6c4:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800f6c6:	7afb      	ldrb	r3, [r7, #11]
 800f6c8:	2b01      	cmp	r3, #1
 800f6ca:	d10f      	bne.n	800f6ec <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800f6cc:	697b      	ldr	r3, [r7, #20]
 800f6ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f6d2:	461a      	mov	r2, r3
 800f6d4:	687b      	ldr	r3, [r7, #4]
 800f6d6:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800f6d8:	697b      	ldr	r3, [r7, #20]
 800f6da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f6de:	681b      	ldr	r3, [r3, #0]
 800f6e0:	697a      	ldr	r2, [r7, #20]
 800f6e2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f6e6:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800f6ea:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800f6ec:	2300      	movs	r3, #0
}
 800f6ee:	4618      	mov	r0, r3
 800f6f0:	371c      	adds	r7, #28
 800f6f2:	46bd      	mov	sp, r7
 800f6f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6f8:	4770      	bx	lr
 800f6fa:	bf00      	nop
 800f6fc:	4f54300a 	.word	0x4f54300a

0800f700 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800f700:	b480      	push	{r7}
 800f702:	b085      	sub	sp, #20
 800f704:	af00      	add	r7, sp, #0
 800f706:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800f708:	2300      	movs	r3, #0
 800f70a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800f70c:	68fb      	ldr	r3, [r7, #12]
 800f70e:	3301      	adds	r3, #1
 800f710:	60fb      	str	r3, [r7, #12]
 800f712:	4a13      	ldr	r2, [pc, #76]	; (800f760 <USB_CoreReset+0x60>)
 800f714:	4293      	cmp	r3, r2
 800f716:	d901      	bls.n	800f71c <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 800f718:	2303      	movs	r3, #3
 800f71a:	e01a      	b.n	800f752 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800f71c:	687b      	ldr	r3, [r7, #4]
 800f71e:	691b      	ldr	r3, [r3, #16]
 800f720:	2b00      	cmp	r3, #0
 800f722:	daf3      	bge.n	800f70c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800f724:	2300      	movs	r3, #0
 800f726:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800f728:	687b      	ldr	r3, [r7, #4]
 800f72a:	691b      	ldr	r3, [r3, #16]
 800f72c:	f043 0201 	orr.w	r2, r3, #1
 800f730:	687b      	ldr	r3, [r7, #4]
 800f732:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800f734:	68fb      	ldr	r3, [r7, #12]
 800f736:	3301      	adds	r3, #1
 800f738:	60fb      	str	r3, [r7, #12]
 800f73a:	4a09      	ldr	r2, [pc, #36]	; (800f760 <USB_CoreReset+0x60>)
 800f73c:	4293      	cmp	r3, r2
 800f73e:	d901      	bls.n	800f744 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 800f740:	2303      	movs	r3, #3
 800f742:	e006      	b.n	800f752 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800f744:	687b      	ldr	r3, [r7, #4]
 800f746:	691b      	ldr	r3, [r3, #16]
 800f748:	f003 0301 	and.w	r3, r3, #1
 800f74c:	2b01      	cmp	r3, #1
 800f74e:	d0f1      	beq.n	800f734 <USB_CoreReset+0x34>

  return HAL_OK;
 800f750:	2300      	movs	r3, #0
}
 800f752:	4618      	mov	r0, r3
 800f754:	3714      	adds	r7, #20
 800f756:	46bd      	mov	sp, r7
 800f758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f75c:	4770      	bx	lr
 800f75e:	bf00      	nop
 800f760:	00030d40 	.word	0x00030d40

0800f764 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800f764:	b580      	push	{r7, lr}
 800f766:	b084      	sub	sp, #16
 800f768:	af00      	add	r7, sp, #0
 800f76a:	6078      	str	r0, [r7, #4]
 800f76c:	460b      	mov	r3, r1
 800f76e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800f770:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800f774:	f002 fa90 	bl	8011c98 <USBD_static_malloc>
 800f778:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800f77a:	68fb      	ldr	r3, [r7, #12]
 800f77c:	2b00      	cmp	r3, #0
 800f77e:	d105      	bne.n	800f78c <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800f780:	687b      	ldr	r3, [r7, #4]
 800f782:	2200      	movs	r2, #0
 800f784:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800f788:	2302      	movs	r3, #2
 800f78a:	e066      	b.n	800f85a <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800f78c:	687b      	ldr	r3, [r7, #4]
 800f78e:	68fa      	ldr	r2, [r7, #12]
 800f790:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f794:	687b      	ldr	r3, [r7, #4]
 800f796:	7c1b      	ldrb	r3, [r3, #16]
 800f798:	2b00      	cmp	r3, #0
 800f79a:	d119      	bne.n	800f7d0 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800f79c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800f7a0:	2202      	movs	r2, #2
 800f7a2:	2181      	movs	r1, #129	; 0x81
 800f7a4:	6878      	ldr	r0, [r7, #4]
 800f7a6:	f002 f954 	bl	8011a52 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800f7aa:	687b      	ldr	r3, [r7, #4]
 800f7ac:	2201      	movs	r2, #1
 800f7ae:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800f7b0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800f7b4:	2202      	movs	r2, #2
 800f7b6:	2101      	movs	r1, #1
 800f7b8:	6878      	ldr	r0, [r7, #4]
 800f7ba:	f002 f94a 	bl	8011a52 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800f7be:	687b      	ldr	r3, [r7, #4]
 800f7c0:	2201      	movs	r2, #1
 800f7c2:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800f7c6:	687b      	ldr	r3, [r7, #4]
 800f7c8:	2210      	movs	r2, #16
 800f7ca:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800f7ce:	e016      	b.n	800f7fe <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800f7d0:	2340      	movs	r3, #64	; 0x40
 800f7d2:	2202      	movs	r2, #2
 800f7d4:	2181      	movs	r1, #129	; 0x81
 800f7d6:	6878      	ldr	r0, [r7, #4]
 800f7d8:	f002 f93b 	bl	8011a52 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800f7dc:	687b      	ldr	r3, [r7, #4]
 800f7de:	2201      	movs	r2, #1
 800f7e0:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800f7e2:	2340      	movs	r3, #64	; 0x40
 800f7e4:	2202      	movs	r2, #2
 800f7e6:	2101      	movs	r1, #1
 800f7e8:	6878      	ldr	r0, [r7, #4]
 800f7ea:	f002 f932 	bl	8011a52 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800f7ee:	687b      	ldr	r3, [r7, #4]
 800f7f0:	2201      	movs	r2, #1
 800f7f2:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800f7f6:	687b      	ldr	r3, [r7, #4]
 800f7f8:	2210      	movs	r2, #16
 800f7fa:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800f7fe:	2308      	movs	r3, #8
 800f800:	2203      	movs	r2, #3
 800f802:	2182      	movs	r1, #130	; 0x82
 800f804:	6878      	ldr	r0, [r7, #4]
 800f806:	f002 f924 	bl	8011a52 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800f80a:	687b      	ldr	r3, [r7, #4]
 800f80c:	2201      	movs	r2, #1
 800f80e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800f812:	687b      	ldr	r3, [r7, #4]
 800f814:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800f818:	681b      	ldr	r3, [r3, #0]
 800f81a:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800f81c:	68fb      	ldr	r3, [r7, #12]
 800f81e:	2200      	movs	r2, #0
 800f820:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800f824:	68fb      	ldr	r3, [r7, #12]
 800f826:	2200      	movs	r2, #0
 800f828:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f82c:	687b      	ldr	r3, [r7, #4]
 800f82e:	7c1b      	ldrb	r3, [r3, #16]
 800f830:	2b00      	cmp	r3, #0
 800f832:	d109      	bne.n	800f848 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800f834:	68fb      	ldr	r3, [r7, #12]
 800f836:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800f83a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800f83e:	2101      	movs	r1, #1
 800f840:	6878      	ldr	r0, [r7, #4]
 800f842:	f002 f9f5 	bl	8011c30 <USBD_LL_PrepareReceive>
 800f846:	e007      	b.n	800f858 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800f848:	68fb      	ldr	r3, [r7, #12]
 800f84a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800f84e:	2340      	movs	r3, #64	; 0x40
 800f850:	2101      	movs	r1, #1
 800f852:	6878      	ldr	r0, [r7, #4]
 800f854:	f002 f9ec 	bl	8011c30 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800f858:	2300      	movs	r3, #0
}
 800f85a:	4618      	mov	r0, r3
 800f85c:	3710      	adds	r7, #16
 800f85e:	46bd      	mov	sp, r7
 800f860:	bd80      	pop	{r7, pc}

0800f862 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800f862:	b580      	push	{r7, lr}
 800f864:	b082      	sub	sp, #8
 800f866:	af00      	add	r7, sp, #0
 800f868:	6078      	str	r0, [r7, #4]
 800f86a:	460b      	mov	r3, r1
 800f86c:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800f86e:	2181      	movs	r1, #129	; 0x81
 800f870:	6878      	ldr	r0, [r7, #4]
 800f872:	f002 f914 	bl	8011a9e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800f876:	687b      	ldr	r3, [r7, #4]
 800f878:	2200      	movs	r2, #0
 800f87a:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800f87c:	2101      	movs	r1, #1
 800f87e:	6878      	ldr	r0, [r7, #4]
 800f880:	f002 f90d 	bl	8011a9e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800f884:	687b      	ldr	r3, [r7, #4]
 800f886:	2200      	movs	r2, #0
 800f888:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800f88c:	2182      	movs	r1, #130	; 0x82
 800f88e:	6878      	ldr	r0, [r7, #4]
 800f890:	f002 f905 	bl	8011a9e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800f894:	687b      	ldr	r3, [r7, #4]
 800f896:	2200      	movs	r2, #0
 800f898:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800f89c:	687b      	ldr	r3, [r7, #4]
 800f89e:	2200      	movs	r2, #0
 800f8a0:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800f8a4:	687b      	ldr	r3, [r7, #4]
 800f8a6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f8aa:	2b00      	cmp	r3, #0
 800f8ac:	d00e      	beq.n	800f8cc <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800f8ae:	687b      	ldr	r3, [r7, #4]
 800f8b0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800f8b4:	685b      	ldr	r3, [r3, #4]
 800f8b6:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800f8b8:	687b      	ldr	r3, [r7, #4]
 800f8ba:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f8be:	4618      	mov	r0, r3
 800f8c0:	f002 f9f8 	bl	8011cb4 <USBD_static_free>
    pdev->pClassData = NULL;
 800f8c4:	687b      	ldr	r3, [r7, #4]
 800f8c6:	2200      	movs	r2, #0
 800f8c8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800f8cc:	2300      	movs	r3, #0
}
 800f8ce:	4618      	mov	r0, r3
 800f8d0:	3708      	adds	r7, #8
 800f8d2:	46bd      	mov	sp, r7
 800f8d4:	bd80      	pop	{r7, pc}
	...

0800f8d8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800f8d8:	b580      	push	{r7, lr}
 800f8da:	b086      	sub	sp, #24
 800f8dc:	af00      	add	r7, sp, #0
 800f8de:	6078      	str	r0, [r7, #4]
 800f8e0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800f8e2:	687b      	ldr	r3, [r7, #4]
 800f8e4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f8e8:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800f8ea:	2300      	movs	r3, #0
 800f8ec:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800f8ee:	2300      	movs	r3, #0
 800f8f0:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800f8f2:	2300      	movs	r3, #0
 800f8f4:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800f8f6:	693b      	ldr	r3, [r7, #16]
 800f8f8:	2b00      	cmp	r3, #0
 800f8fa:	d101      	bne.n	800f900 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800f8fc:	2303      	movs	r3, #3
 800f8fe:	e0af      	b.n	800fa60 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f900:	683b      	ldr	r3, [r7, #0]
 800f902:	781b      	ldrb	r3, [r3, #0]
 800f904:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800f908:	2b00      	cmp	r3, #0
 800f90a:	d03f      	beq.n	800f98c <USBD_CDC_Setup+0xb4>
 800f90c:	2b20      	cmp	r3, #32
 800f90e:	f040 809f 	bne.w	800fa50 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800f912:	683b      	ldr	r3, [r7, #0]
 800f914:	88db      	ldrh	r3, [r3, #6]
 800f916:	2b00      	cmp	r3, #0
 800f918:	d02e      	beq.n	800f978 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800f91a:	683b      	ldr	r3, [r7, #0]
 800f91c:	781b      	ldrb	r3, [r3, #0]
 800f91e:	b25b      	sxtb	r3, r3
 800f920:	2b00      	cmp	r3, #0
 800f922:	da16      	bge.n	800f952 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800f924:	687b      	ldr	r3, [r7, #4]
 800f926:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800f92a:	689b      	ldr	r3, [r3, #8]
 800f92c:	683a      	ldr	r2, [r7, #0]
 800f92e:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800f930:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800f932:	683a      	ldr	r2, [r7, #0]
 800f934:	88d2      	ldrh	r2, [r2, #6]
 800f936:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800f938:	683b      	ldr	r3, [r7, #0]
 800f93a:	88db      	ldrh	r3, [r3, #6]
 800f93c:	2b07      	cmp	r3, #7
 800f93e:	bf28      	it	cs
 800f940:	2307      	movcs	r3, #7
 800f942:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800f944:	693b      	ldr	r3, [r7, #16]
 800f946:	89fa      	ldrh	r2, [r7, #14]
 800f948:	4619      	mov	r1, r3
 800f94a:	6878      	ldr	r0, [r7, #4]
 800f94c:	f001 fb19 	bl	8010f82 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800f950:	e085      	b.n	800fa5e <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800f952:	683b      	ldr	r3, [r7, #0]
 800f954:	785a      	ldrb	r2, [r3, #1]
 800f956:	693b      	ldr	r3, [r7, #16]
 800f958:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800f95c:	683b      	ldr	r3, [r7, #0]
 800f95e:	88db      	ldrh	r3, [r3, #6]
 800f960:	b2da      	uxtb	r2, r3
 800f962:	693b      	ldr	r3, [r7, #16]
 800f964:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800f968:	6939      	ldr	r1, [r7, #16]
 800f96a:	683b      	ldr	r3, [r7, #0]
 800f96c:	88db      	ldrh	r3, [r3, #6]
 800f96e:	461a      	mov	r2, r3
 800f970:	6878      	ldr	r0, [r7, #4]
 800f972:	f001 fb32 	bl	8010fda <USBD_CtlPrepareRx>
      break;
 800f976:	e072      	b.n	800fa5e <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800f978:	687b      	ldr	r3, [r7, #4]
 800f97a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800f97e:	689b      	ldr	r3, [r3, #8]
 800f980:	683a      	ldr	r2, [r7, #0]
 800f982:	7850      	ldrb	r0, [r2, #1]
 800f984:	2200      	movs	r2, #0
 800f986:	6839      	ldr	r1, [r7, #0]
 800f988:	4798      	blx	r3
      break;
 800f98a:	e068      	b.n	800fa5e <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800f98c:	683b      	ldr	r3, [r7, #0]
 800f98e:	785b      	ldrb	r3, [r3, #1]
 800f990:	2b0b      	cmp	r3, #11
 800f992:	d852      	bhi.n	800fa3a <USBD_CDC_Setup+0x162>
 800f994:	a201      	add	r2, pc, #4	; (adr r2, 800f99c <USBD_CDC_Setup+0xc4>)
 800f996:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f99a:	bf00      	nop
 800f99c:	0800f9cd 	.word	0x0800f9cd
 800f9a0:	0800fa49 	.word	0x0800fa49
 800f9a4:	0800fa3b 	.word	0x0800fa3b
 800f9a8:	0800fa3b 	.word	0x0800fa3b
 800f9ac:	0800fa3b 	.word	0x0800fa3b
 800f9b0:	0800fa3b 	.word	0x0800fa3b
 800f9b4:	0800fa3b 	.word	0x0800fa3b
 800f9b8:	0800fa3b 	.word	0x0800fa3b
 800f9bc:	0800fa3b 	.word	0x0800fa3b
 800f9c0:	0800fa3b 	.word	0x0800fa3b
 800f9c4:	0800f9f7 	.word	0x0800f9f7
 800f9c8:	0800fa21 	.word	0x0800fa21
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f9cc:	687b      	ldr	r3, [r7, #4]
 800f9ce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f9d2:	b2db      	uxtb	r3, r3
 800f9d4:	2b03      	cmp	r3, #3
 800f9d6:	d107      	bne.n	800f9e8 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800f9d8:	f107 030a 	add.w	r3, r7, #10
 800f9dc:	2202      	movs	r2, #2
 800f9de:	4619      	mov	r1, r3
 800f9e0:	6878      	ldr	r0, [r7, #4]
 800f9e2:	f001 face 	bl	8010f82 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800f9e6:	e032      	b.n	800fa4e <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800f9e8:	6839      	ldr	r1, [r7, #0]
 800f9ea:	6878      	ldr	r0, [r7, #4]
 800f9ec:	f001 fa58 	bl	8010ea0 <USBD_CtlError>
            ret = USBD_FAIL;
 800f9f0:	2303      	movs	r3, #3
 800f9f2:	75fb      	strb	r3, [r7, #23]
          break;
 800f9f4:	e02b      	b.n	800fa4e <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f9f6:	687b      	ldr	r3, [r7, #4]
 800f9f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f9fc:	b2db      	uxtb	r3, r3
 800f9fe:	2b03      	cmp	r3, #3
 800fa00:	d107      	bne.n	800fa12 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800fa02:	f107 030d 	add.w	r3, r7, #13
 800fa06:	2201      	movs	r2, #1
 800fa08:	4619      	mov	r1, r3
 800fa0a:	6878      	ldr	r0, [r7, #4]
 800fa0c:	f001 fab9 	bl	8010f82 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800fa10:	e01d      	b.n	800fa4e <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800fa12:	6839      	ldr	r1, [r7, #0]
 800fa14:	6878      	ldr	r0, [r7, #4]
 800fa16:	f001 fa43 	bl	8010ea0 <USBD_CtlError>
            ret = USBD_FAIL;
 800fa1a:	2303      	movs	r3, #3
 800fa1c:	75fb      	strb	r3, [r7, #23]
          break;
 800fa1e:	e016      	b.n	800fa4e <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800fa20:	687b      	ldr	r3, [r7, #4]
 800fa22:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fa26:	b2db      	uxtb	r3, r3
 800fa28:	2b03      	cmp	r3, #3
 800fa2a:	d00f      	beq.n	800fa4c <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 800fa2c:	6839      	ldr	r1, [r7, #0]
 800fa2e:	6878      	ldr	r0, [r7, #4]
 800fa30:	f001 fa36 	bl	8010ea0 <USBD_CtlError>
            ret = USBD_FAIL;
 800fa34:	2303      	movs	r3, #3
 800fa36:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800fa38:	e008      	b.n	800fa4c <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800fa3a:	6839      	ldr	r1, [r7, #0]
 800fa3c:	6878      	ldr	r0, [r7, #4]
 800fa3e:	f001 fa2f 	bl	8010ea0 <USBD_CtlError>
          ret = USBD_FAIL;
 800fa42:	2303      	movs	r3, #3
 800fa44:	75fb      	strb	r3, [r7, #23]
          break;
 800fa46:	e002      	b.n	800fa4e <USBD_CDC_Setup+0x176>
          break;
 800fa48:	bf00      	nop
 800fa4a:	e008      	b.n	800fa5e <USBD_CDC_Setup+0x186>
          break;
 800fa4c:	bf00      	nop
      }
      break;
 800fa4e:	e006      	b.n	800fa5e <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 800fa50:	6839      	ldr	r1, [r7, #0]
 800fa52:	6878      	ldr	r0, [r7, #4]
 800fa54:	f001 fa24 	bl	8010ea0 <USBD_CtlError>
      ret = USBD_FAIL;
 800fa58:	2303      	movs	r3, #3
 800fa5a:	75fb      	strb	r3, [r7, #23]
      break;
 800fa5c:	bf00      	nop
  }

  return (uint8_t)ret;
 800fa5e:	7dfb      	ldrb	r3, [r7, #23]
}
 800fa60:	4618      	mov	r0, r3
 800fa62:	3718      	adds	r7, #24
 800fa64:	46bd      	mov	sp, r7
 800fa66:	bd80      	pop	{r7, pc}

0800fa68 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800fa68:	b580      	push	{r7, lr}
 800fa6a:	b084      	sub	sp, #16
 800fa6c:	af00      	add	r7, sp, #0
 800fa6e:	6078      	str	r0, [r7, #4]
 800fa70:	460b      	mov	r3, r1
 800fa72:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800fa74:	687b      	ldr	r3, [r7, #4]
 800fa76:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800fa7a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800fa7c:	687b      	ldr	r3, [r7, #4]
 800fa7e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800fa82:	2b00      	cmp	r3, #0
 800fa84:	d101      	bne.n	800fa8a <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800fa86:	2303      	movs	r3, #3
 800fa88:	e04f      	b.n	800fb2a <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800fa8a:	687b      	ldr	r3, [r7, #4]
 800fa8c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800fa90:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800fa92:	78fa      	ldrb	r2, [r7, #3]
 800fa94:	6879      	ldr	r1, [r7, #4]
 800fa96:	4613      	mov	r3, r2
 800fa98:	009b      	lsls	r3, r3, #2
 800fa9a:	4413      	add	r3, r2
 800fa9c:	009b      	lsls	r3, r3, #2
 800fa9e:	440b      	add	r3, r1
 800faa0:	3318      	adds	r3, #24
 800faa2:	681b      	ldr	r3, [r3, #0]
 800faa4:	2b00      	cmp	r3, #0
 800faa6:	d029      	beq.n	800fafc <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800faa8:	78fa      	ldrb	r2, [r7, #3]
 800faaa:	6879      	ldr	r1, [r7, #4]
 800faac:	4613      	mov	r3, r2
 800faae:	009b      	lsls	r3, r3, #2
 800fab0:	4413      	add	r3, r2
 800fab2:	009b      	lsls	r3, r3, #2
 800fab4:	440b      	add	r3, r1
 800fab6:	3318      	adds	r3, #24
 800fab8:	681a      	ldr	r2, [r3, #0]
 800faba:	78f9      	ldrb	r1, [r7, #3]
 800fabc:	68f8      	ldr	r0, [r7, #12]
 800fabe:	460b      	mov	r3, r1
 800fac0:	00db      	lsls	r3, r3, #3
 800fac2:	1a5b      	subs	r3, r3, r1
 800fac4:	009b      	lsls	r3, r3, #2
 800fac6:	4403      	add	r3, r0
 800fac8:	3344      	adds	r3, #68	; 0x44
 800faca:	681b      	ldr	r3, [r3, #0]
 800facc:	fbb2 f1f3 	udiv	r1, r2, r3
 800fad0:	fb01 f303 	mul.w	r3, r1, r3
 800fad4:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800fad6:	2b00      	cmp	r3, #0
 800fad8:	d110      	bne.n	800fafc <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800fada:	78fa      	ldrb	r2, [r7, #3]
 800fadc:	6879      	ldr	r1, [r7, #4]
 800fade:	4613      	mov	r3, r2
 800fae0:	009b      	lsls	r3, r3, #2
 800fae2:	4413      	add	r3, r2
 800fae4:	009b      	lsls	r3, r3, #2
 800fae6:	440b      	add	r3, r1
 800fae8:	3318      	adds	r3, #24
 800faea:	2200      	movs	r2, #0
 800faec:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800faee:	78f9      	ldrb	r1, [r7, #3]
 800faf0:	2300      	movs	r3, #0
 800faf2:	2200      	movs	r2, #0
 800faf4:	6878      	ldr	r0, [r7, #4]
 800faf6:	f002 f87a 	bl	8011bee <USBD_LL_Transmit>
 800fafa:	e015      	b.n	800fb28 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800fafc:	68bb      	ldr	r3, [r7, #8]
 800fafe:	2200      	movs	r2, #0
 800fb00:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800fb04:	687b      	ldr	r3, [r7, #4]
 800fb06:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800fb0a:	691b      	ldr	r3, [r3, #16]
 800fb0c:	2b00      	cmp	r3, #0
 800fb0e:	d00b      	beq.n	800fb28 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800fb10:	687b      	ldr	r3, [r7, #4]
 800fb12:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800fb16:	691b      	ldr	r3, [r3, #16]
 800fb18:	68ba      	ldr	r2, [r7, #8]
 800fb1a:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800fb1e:	68ba      	ldr	r2, [r7, #8]
 800fb20:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800fb24:	78fa      	ldrb	r2, [r7, #3]
 800fb26:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800fb28:	2300      	movs	r3, #0
}
 800fb2a:	4618      	mov	r0, r3
 800fb2c:	3710      	adds	r7, #16
 800fb2e:	46bd      	mov	sp, r7
 800fb30:	bd80      	pop	{r7, pc}

0800fb32 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800fb32:	b580      	push	{r7, lr}
 800fb34:	b084      	sub	sp, #16
 800fb36:	af00      	add	r7, sp, #0
 800fb38:	6078      	str	r0, [r7, #4]
 800fb3a:	460b      	mov	r3, r1
 800fb3c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800fb3e:	687b      	ldr	r3, [r7, #4]
 800fb40:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800fb44:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800fb46:	687b      	ldr	r3, [r7, #4]
 800fb48:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800fb4c:	2b00      	cmp	r3, #0
 800fb4e:	d101      	bne.n	800fb54 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800fb50:	2303      	movs	r3, #3
 800fb52:	e015      	b.n	800fb80 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800fb54:	78fb      	ldrb	r3, [r7, #3]
 800fb56:	4619      	mov	r1, r3
 800fb58:	6878      	ldr	r0, [r7, #4]
 800fb5a:	f002 f88a 	bl	8011c72 <USBD_LL_GetRxDataSize>
 800fb5e:	4602      	mov	r2, r0
 800fb60:	68fb      	ldr	r3, [r7, #12]
 800fb62:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800fb66:	687b      	ldr	r3, [r7, #4]
 800fb68:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800fb6c:	68db      	ldr	r3, [r3, #12]
 800fb6e:	68fa      	ldr	r2, [r7, #12]
 800fb70:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800fb74:	68fa      	ldr	r2, [r7, #12]
 800fb76:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800fb7a:	4611      	mov	r1, r2
 800fb7c:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800fb7e:	2300      	movs	r3, #0
}
 800fb80:	4618      	mov	r0, r3
 800fb82:	3710      	adds	r7, #16
 800fb84:	46bd      	mov	sp, r7
 800fb86:	bd80      	pop	{r7, pc}

0800fb88 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800fb88:	b580      	push	{r7, lr}
 800fb8a:	b084      	sub	sp, #16
 800fb8c:	af00      	add	r7, sp, #0
 800fb8e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800fb90:	687b      	ldr	r3, [r7, #4]
 800fb92:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800fb96:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800fb98:	68fb      	ldr	r3, [r7, #12]
 800fb9a:	2b00      	cmp	r3, #0
 800fb9c:	d101      	bne.n	800fba2 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800fb9e:	2303      	movs	r3, #3
 800fba0:	e01b      	b.n	800fbda <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800fba2:	687b      	ldr	r3, [r7, #4]
 800fba4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800fba8:	2b00      	cmp	r3, #0
 800fbaa:	d015      	beq.n	800fbd8 <USBD_CDC_EP0_RxReady+0x50>
 800fbac:	68fb      	ldr	r3, [r7, #12]
 800fbae:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800fbb2:	2bff      	cmp	r3, #255	; 0xff
 800fbb4:	d010      	beq.n	800fbd8 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800fbb6:	687b      	ldr	r3, [r7, #4]
 800fbb8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800fbbc:	689b      	ldr	r3, [r3, #8]
 800fbbe:	68fa      	ldr	r2, [r7, #12]
 800fbc0:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800fbc4:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800fbc6:	68fa      	ldr	r2, [r7, #12]
 800fbc8:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800fbcc:	b292      	uxth	r2, r2
 800fbce:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800fbd0:	68fb      	ldr	r3, [r7, #12]
 800fbd2:	22ff      	movs	r2, #255	; 0xff
 800fbd4:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800fbd8:	2300      	movs	r3, #0
}
 800fbda:	4618      	mov	r0, r3
 800fbdc:	3710      	adds	r7, #16
 800fbde:	46bd      	mov	sp, r7
 800fbe0:	bd80      	pop	{r7, pc}
	...

0800fbe4 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800fbe4:	b480      	push	{r7}
 800fbe6:	b083      	sub	sp, #12
 800fbe8:	af00      	add	r7, sp, #0
 800fbea:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800fbec:	687b      	ldr	r3, [r7, #4]
 800fbee:	2243      	movs	r2, #67	; 0x43
 800fbf0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800fbf2:	4b03      	ldr	r3, [pc, #12]	; (800fc00 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800fbf4:	4618      	mov	r0, r3
 800fbf6:	370c      	adds	r7, #12
 800fbf8:	46bd      	mov	sp, r7
 800fbfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbfe:	4770      	bx	lr
 800fc00:	200000b8 	.word	0x200000b8

0800fc04 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800fc04:	b480      	push	{r7}
 800fc06:	b083      	sub	sp, #12
 800fc08:	af00      	add	r7, sp, #0
 800fc0a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800fc0c:	687b      	ldr	r3, [r7, #4]
 800fc0e:	2243      	movs	r2, #67	; 0x43
 800fc10:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800fc12:	4b03      	ldr	r3, [pc, #12]	; (800fc20 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800fc14:	4618      	mov	r0, r3
 800fc16:	370c      	adds	r7, #12
 800fc18:	46bd      	mov	sp, r7
 800fc1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc1e:	4770      	bx	lr
 800fc20:	20000074 	.word	0x20000074

0800fc24 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800fc24:	b480      	push	{r7}
 800fc26:	b083      	sub	sp, #12
 800fc28:	af00      	add	r7, sp, #0
 800fc2a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800fc2c:	687b      	ldr	r3, [r7, #4]
 800fc2e:	2243      	movs	r2, #67	; 0x43
 800fc30:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800fc32:	4b03      	ldr	r3, [pc, #12]	; (800fc40 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800fc34:	4618      	mov	r0, r3
 800fc36:	370c      	adds	r7, #12
 800fc38:	46bd      	mov	sp, r7
 800fc3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc3e:	4770      	bx	lr
 800fc40:	200000fc 	.word	0x200000fc

0800fc44 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800fc44:	b480      	push	{r7}
 800fc46:	b083      	sub	sp, #12
 800fc48:	af00      	add	r7, sp, #0
 800fc4a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800fc4c:	687b      	ldr	r3, [r7, #4]
 800fc4e:	220a      	movs	r2, #10
 800fc50:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800fc52:	4b03      	ldr	r3, [pc, #12]	; (800fc60 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800fc54:	4618      	mov	r0, r3
 800fc56:	370c      	adds	r7, #12
 800fc58:	46bd      	mov	sp, r7
 800fc5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc5e:	4770      	bx	lr
 800fc60:	20000030 	.word	0x20000030

0800fc64 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800fc64:	b480      	push	{r7}
 800fc66:	b083      	sub	sp, #12
 800fc68:	af00      	add	r7, sp, #0
 800fc6a:	6078      	str	r0, [r7, #4]
 800fc6c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800fc6e:	683b      	ldr	r3, [r7, #0]
 800fc70:	2b00      	cmp	r3, #0
 800fc72:	d101      	bne.n	800fc78 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800fc74:	2303      	movs	r3, #3
 800fc76:	e004      	b.n	800fc82 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800fc78:	687b      	ldr	r3, [r7, #4]
 800fc7a:	683a      	ldr	r2, [r7, #0]
 800fc7c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800fc80:	2300      	movs	r3, #0
}
 800fc82:	4618      	mov	r0, r3
 800fc84:	370c      	adds	r7, #12
 800fc86:	46bd      	mov	sp, r7
 800fc88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc8c:	4770      	bx	lr

0800fc8e <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800fc8e:	b480      	push	{r7}
 800fc90:	b087      	sub	sp, #28
 800fc92:	af00      	add	r7, sp, #0
 800fc94:	60f8      	str	r0, [r7, #12]
 800fc96:	60b9      	str	r1, [r7, #8]
 800fc98:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800fc9a:	68fb      	ldr	r3, [r7, #12]
 800fc9c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800fca0:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800fca2:	697b      	ldr	r3, [r7, #20]
 800fca4:	2b00      	cmp	r3, #0
 800fca6:	d101      	bne.n	800fcac <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800fca8:	2303      	movs	r3, #3
 800fcaa:	e008      	b.n	800fcbe <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 800fcac:	697b      	ldr	r3, [r7, #20]
 800fcae:	68ba      	ldr	r2, [r7, #8]
 800fcb0:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800fcb4:	697b      	ldr	r3, [r7, #20]
 800fcb6:	687a      	ldr	r2, [r7, #4]
 800fcb8:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800fcbc:	2300      	movs	r3, #0
}
 800fcbe:	4618      	mov	r0, r3
 800fcc0:	371c      	adds	r7, #28
 800fcc2:	46bd      	mov	sp, r7
 800fcc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcc8:	4770      	bx	lr

0800fcca <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800fcca:	b480      	push	{r7}
 800fccc:	b085      	sub	sp, #20
 800fcce:	af00      	add	r7, sp, #0
 800fcd0:	6078      	str	r0, [r7, #4]
 800fcd2:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800fcd4:	687b      	ldr	r3, [r7, #4]
 800fcd6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800fcda:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800fcdc:	68fb      	ldr	r3, [r7, #12]
 800fcde:	2b00      	cmp	r3, #0
 800fce0:	d101      	bne.n	800fce6 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800fce2:	2303      	movs	r3, #3
 800fce4:	e004      	b.n	800fcf0 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800fce6:	68fb      	ldr	r3, [r7, #12]
 800fce8:	683a      	ldr	r2, [r7, #0]
 800fcea:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800fcee:	2300      	movs	r3, #0
}
 800fcf0:	4618      	mov	r0, r3
 800fcf2:	3714      	adds	r7, #20
 800fcf4:	46bd      	mov	sp, r7
 800fcf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcfa:	4770      	bx	lr

0800fcfc <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800fcfc:	b580      	push	{r7, lr}
 800fcfe:	b084      	sub	sp, #16
 800fd00:	af00      	add	r7, sp, #0
 800fd02:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800fd04:	687b      	ldr	r3, [r7, #4]
 800fd06:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800fd0a:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800fd0c:	2301      	movs	r3, #1
 800fd0e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 800fd10:	687b      	ldr	r3, [r7, #4]
 800fd12:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800fd16:	2b00      	cmp	r3, #0
 800fd18:	d101      	bne.n	800fd1e <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800fd1a:	2303      	movs	r3, #3
 800fd1c:	e01a      	b.n	800fd54 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800fd1e:	68bb      	ldr	r3, [r7, #8]
 800fd20:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800fd24:	2b00      	cmp	r3, #0
 800fd26:	d114      	bne.n	800fd52 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800fd28:	68bb      	ldr	r3, [r7, #8]
 800fd2a:	2201      	movs	r2, #1
 800fd2c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800fd30:	68bb      	ldr	r3, [r7, #8]
 800fd32:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800fd36:	687b      	ldr	r3, [r7, #4]
 800fd38:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800fd3a:	68bb      	ldr	r3, [r7, #8]
 800fd3c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800fd40:	68bb      	ldr	r3, [r7, #8]
 800fd42:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800fd46:	2181      	movs	r1, #129	; 0x81
 800fd48:	6878      	ldr	r0, [r7, #4]
 800fd4a:	f001 ff50 	bl	8011bee <USBD_LL_Transmit>

    ret = USBD_OK;
 800fd4e:	2300      	movs	r3, #0
 800fd50:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800fd52:	7bfb      	ldrb	r3, [r7, #15]
}
 800fd54:	4618      	mov	r0, r3
 800fd56:	3710      	adds	r7, #16
 800fd58:	46bd      	mov	sp, r7
 800fd5a:	bd80      	pop	{r7, pc}

0800fd5c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800fd5c:	b580      	push	{r7, lr}
 800fd5e:	b084      	sub	sp, #16
 800fd60:	af00      	add	r7, sp, #0
 800fd62:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800fd64:	687b      	ldr	r3, [r7, #4]
 800fd66:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800fd6a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800fd6c:	687b      	ldr	r3, [r7, #4]
 800fd6e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800fd72:	2b00      	cmp	r3, #0
 800fd74:	d101      	bne.n	800fd7a <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800fd76:	2303      	movs	r3, #3
 800fd78:	e016      	b.n	800fda8 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800fd7a:	687b      	ldr	r3, [r7, #4]
 800fd7c:	7c1b      	ldrb	r3, [r3, #16]
 800fd7e:	2b00      	cmp	r3, #0
 800fd80:	d109      	bne.n	800fd96 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800fd82:	68fb      	ldr	r3, [r7, #12]
 800fd84:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800fd88:	f44f 7300 	mov.w	r3, #512	; 0x200
 800fd8c:	2101      	movs	r1, #1
 800fd8e:	6878      	ldr	r0, [r7, #4]
 800fd90:	f001 ff4e 	bl	8011c30 <USBD_LL_PrepareReceive>
 800fd94:	e007      	b.n	800fda6 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800fd96:	68fb      	ldr	r3, [r7, #12]
 800fd98:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800fd9c:	2340      	movs	r3, #64	; 0x40
 800fd9e:	2101      	movs	r1, #1
 800fda0:	6878      	ldr	r0, [r7, #4]
 800fda2:	f001 ff45 	bl	8011c30 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800fda6:	2300      	movs	r3, #0
}
 800fda8:	4618      	mov	r0, r3
 800fdaa:	3710      	adds	r7, #16
 800fdac:	46bd      	mov	sp, r7
 800fdae:	bd80      	pop	{r7, pc}

0800fdb0 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800fdb0:	b580      	push	{r7, lr}
 800fdb2:	b086      	sub	sp, #24
 800fdb4:	af00      	add	r7, sp, #0
 800fdb6:	60f8      	str	r0, [r7, #12]
 800fdb8:	60b9      	str	r1, [r7, #8]
 800fdba:	4613      	mov	r3, r2
 800fdbc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800fdbe:	68fb      	ldr	r3, [r7, #12]
 800fdc0:	2b00      	cmp	r3, #0
 800fdc2:	d101      	bne.n	800fdc8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800fdc4:	2303      	movs	r3, #3
 800fdc6:	e01f      	b.n	800fe08 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800fdc8:	68fb      	ldr	r3, [r7, #12]
 800fdca:	2200      	movs	r2, #0
 800fdcc:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800fdd0:	68fb      	ldr	r3, [r7, #12]
 800fdd2:	2200      	movs	r2, #0
 800fdd4:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800fdd8:	68fb      	ldr	r3, [r7, #12]
 800fdda:	2200      	movs	r2, #0
 800fddc:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800fde0:	68bb      	ldr	r3, [r7, #8]
 800fde2:	2b00      	cmp	r3, #0
 800fde4:	d003      	beq.n	800fdee <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800fde6:	68fb      	ldr	r3, [r7, #12]
 800fde8:	68ba      	ldr	r2, [r7, #8]
 800fdea:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800fdee:	68fb      	ldr	r3, [r7, #12]
 800fdf0:	2201      	movs	r2, #1
 800fdf2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800fdf6:	68fb      	ldr	r3, [r7, #12]
 800fdf8:	79fa      	ldrb	r2, [r7, #7]
 800fdfa:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800fdfc:	68f8      	ldr	r0, [r7, #12]
 800fdfe:	f001 fdc1 	bl	8011984 <USBD_LL_Init>
 800fe02:	4603      	mov	r3, r0
 800fe04:	75fb      	strb	r3, [r7, #23]

  return ret;
 800fe06:	7dfb      	ldrb	r3, [r7, #23]
}
 800fe08:	4618      	mov	r0, r3
 800fe0a:	3718      	adds	r7, #24
 800fe0c:	46bd      	mov	sp, r7
 800fe0e:	bd80      	pop	{r7, pc}

0800fe10 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800fe10:	b580      	push	{r7, lr}
 800fe12:	b084      	sub	sp, #16
 800fe14:	af00      	add	r7, sp, #0
 800fe16:	6078      	str	r0, [r7, #4]
 800fe18:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800fe1a:	2300      	movs	r3, #0
 800fe1c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800fe1e:	683b      	ldr	r3, [r7, #0]
 800fe20:	2b00      	cmp	r3, #0
 800fe22:	d101      	bne.n	800fe28 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800fe24:	2303      	movs	r3, #3
 800fe26:	e016      	b.n	800fe56 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800fe28:	687b      	ldr	r3, [r7, #4]
 800fe2a:	683a      	ldr	r2, [r7, #0]
 800fe2c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800fe30:	687b      	ldr	r3, [r7, #4]
 800fe32:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fe36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fe38:	2b00      	cmp	r3, #0
 800fe3a:	d00b      	beq.n	800fe54 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800fe3c:	687b      	ldr	r3, [r7, #4]
 800fe3e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fe42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fe44:	f107 020e 	add.w	r2, r7, #14
 800fe48:	4610      	mov	r0, r2
 800fe4a:	4798      	blx	r3
 800fe4c:	4602      	mov	r2, r0
 800fe4e:	687b      	ldr	r3, [r7, #4]
 800fe50:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800fe54:	2300      	movs	r3, #0
}
 800fe56:	4618      	mov	r0, r3
 800fe58:	3710      	adds	r7, #16
 800fe5a:	46bd      	mov	sp, r7
 800fe5c:	bd80      	pop	{r7, pc}

0800fe5e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800fe5e:	b580      	push	{r7, lr}
 800fe60:	b082      	sub	sp, #8
 800fe62:	af00      	add	r7, sp, #0
 800fe64:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800fe66:	6878      	ldr	r0, [r7, #4]
 800fe68:	f001 fdd8 	bl	8011a1c <USBD_LL_Start>
 800fe6c:	4603      	mov	r3, r0
}
 800fe6e:	4618      	mov	r0, r3
 800fe70:	3708      	adds	r7, #8
 800fe72:	46bd      	mov	sp, r7
 800fe74:	bd80      	pop	{r7, pc}

0800fe76 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800fe76:	b480      	push	{r7}
 800fe78:	b083      	sub	sp, #12
 800fe7a:	af00      	add	r7, sp, #0
 800fe7c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800fe7e:	2300      	movs	r3, #0
}
 800fe80:	4618      	mov	r0, r3
 800fe82:	370c      	adds	r7, #12
 800fe84:	46bd      	mov	sp, r7
 800fe86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe8a:	4770      	bx	lr

0800fe8c <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800fe8c:	b580      	push	{r7, lr}
 800fe8e:	b084      	sub	sp, #16
 800fe90:	af00      	add	r7, sp, #0
 800fe92:	6078      	str	r0, [r7, #4]
 800fe94:	460b      	mov	r3, r1
 800fe96:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800fe98:	2303      	movs	r3, #3
 800fe9a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800fe9c:	687b      	ldr	r3, [r7, #4]
 800fe9e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fea2:	2b00      	cmp	r3, #0
 800fea4:	d009      	beq.n	800feba <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800fea6:	687b      	ldr	r3, [r7, #4]
 800fea8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800feac:	681b      	ldr	r3, [r3, #0]
 800feae:	78fa      	ldrb	r2, [r7, #3]
 800feb0:	4611      	mov	r1, r2
 800feb2:	6878      	ldr	r0, [r7, #4]
 800feb4:	4798      	blx	r3
 800feb6:	4603      	mov	r3, r0
 800feb8:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800feba:	7bfb      	ldrb	r3, [r7, #15]
}
 800febc:	4618      	mov	r0, r3
 800febe:	3710      	adds	r7, #16
 800fec0:	46bd      	mov	sp, r7
 800fec2:	bd80      	pop	{r7, pc}

0800fec4 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800fec4:	b580      	push	{r7, lr}
 800fec6:	b082      	sub	sp, #8
 800fec8:	af00      	add	r7, sp, #0
 800feca:	6078      	str	r0, [r7, #4]
 800fecc:	460b      	mov	r3, r1
 800fece:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800fed0:	687b      	ldr	r3, [r7, #4]
 800fed2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fed6:	2b00      	cmp	r3, #0
 800fed8:	d007      	beq.n	800feea <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800feda:	687b      	ldr	r3, [r7, #4]
 800fedc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fee0:	685b      	ldr	r3, [r3, #4]
 800fee2:	78fa      	ldrb	r2, [r7, #3]
 800fee4:	4611      	mov	r1, r2
 800fee6:	6878      	ldr	r0, [r7, #4]
 800fee8:	4798      	blx	r3
  }

  return USBD_OK;
 800feea:	2300      	movs	r3, #0
}
 800feec:	4618      	mov	r0, r3
 800feee:	3708      	adds	r7, #8
 800fef0:	46bd      	mov	sp, r7
 800fef2:	bd80      	pop	{r7, pc}

0800fef4 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800fef4:	b580      	push	{r7, lr}
 800fef6:	b084      	sub	sp, #16
 800fef8:	af00      	add	r7, sp, #0
 800fefa:	6078      	str	r0, [r7, #4]
 800fefc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800fefe:	687b      	ldr	r3, [r7, #4]
 800ff00:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800ff04:	6839      	ldr	r1, [r7, #0]
 800ff06:	4618      	mov	r0, r3
 800ff08:	f000 ff90 	bl	8010e2c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800ff0c:	687b      	ldr	r3, [r7, #4]
 800ff0e:	2201      	movs	r2, #1
 800ff10:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800ff14:	687b      	ldr	r3, [r7, #4]
 800ff16:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800ff1a:	461a      	mov	r2, r3
 800ff1c:	687b      	ldr	r3, [r7, #4]
 800ff1e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800ff22:	687b      	ldr	r3, [r7, #4]
 800ff24:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800ff28:	f003 031f 	and.w	r3, r3, #31
 800ff2c:	2b02      	cmp	r3, #2
 800ff2e:	d01a      	beq.n	800ff66 <USBD_LL_SetupStage+0x72>
 800ff30:	2b02      	cmp	r3, #2
 800ff32:	d822      	bhi.n	800ff7a <USBD_LL_SetupStage+0x86>
 800ff34:	2b00      	cmp	r3, #0
 800ff36:	d002      	beq.n	800ff3e <USBD_LL_SetupStage+0x4a>
 800ff38:	2b01      	cmp	r3, #1
 800ff3a:	d00a      	beq.n	800ff52 <USBD_LL_SetupStage+0x5e>
 800ff3c:	e01d      	b.n	800ff7a <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800ff3e:	687b      	ldr	r3, [r7, #4]
 800ff40:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800ff44:	4619      	mov	r1, r3
 800ff46:	6878      	ldr	r0, [r7, #4]
 800ff48:	f000 fa62 	bl	8010410 <USBD_StdDevReq>
 800ff4c:	4603      	mov	r3, r0
 800ff4e:	73fb      	strb	r3, [r7, #15]
      break;
 800ff50:	e020      	b.n	800ff94 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800ff52:	687b      	ldr	r3, [r7, #4]
 800ff54:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800ff58:	4619      	mov	r1, r3
 800ff5a:	6878      	ldr	r0, [r7, #4]
 800ff5c:	f000 fac6 	bl	80104ec <USBD_StdItfReq>
 800ff60:	4603      	mov	r3, r0
 800ff62:	73fb      	strb	r3, [r7, #15]
      break;
 800ff64:	e016      	b.n	800ff94 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800ff66:	687b      	ldr	r3, [r7, #4]
 800ff68:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800ff6c:	4619      	mov	r1, r3
 800ff6e:	6878      	ldr	r0, [r7, #4]
 800ff70:	f000 fb05 	bl	801057e <USBD_StdEPReq>
 800ff74:	4603      	mov	r3, r0
 800ff76:	73fb      	strb	r3, [r7, #15]
      break;
 800ff78:	e00c      	b.n	800ff94 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800ff7a:	687b      	ldr	r3, [r7, #4]
 800ff7c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800ff80:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800ff84:	b2db      	uxtb	r3, r3
 800ff86:	4619      	mov	r1, r3
 800ff88:	6878      	ldr	r0, [r7, #4]
 800ff8a:	f001 fda7 	bl	8011adc <USBD_LL_StallEP>
 800ff8e:	4603      	mov	r3, r0
 800ff90:	73fb      	strb	r3, [r7, #15]
      break;
 800ff92:	bf00      	nop
  }

  return ret;
 800ff94:	7bfb      	ldrb	r3, [r7, #15]
}
 800ff96:	4618      	mov	r0, r3
 800ff98:	3710      	adds	r7, #16
 800ff9a:	46bd      	mov	sp, r7
 800ff9c:	bd80      	pop	{r7, pc}

0800ff9e <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800ff9e:	b580      	push	{r7, lr}
 800ffa0:	b086      	sub	sp, #24
 800ffa2:	af00      	add	r7, sp, #0
 800ffa4:	60f8      	str	r0, [r7, #12]
 800ffa6:	460b      	mov	r3, r1
 800ffa8:	607a      	str	r2, [r7, #4]
 800ffaa:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800ffac:	7afb      	ldrb	r3, [r7, #11]
 800ffae:	2b00      	cmp	r3, #0
 800ffb0:	d138      	bne.n	8010024 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800ffb2:	68fb      	ldr	r3, [r7, #12]
 800ffb4:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800ffb8:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800ffba:	68fb      	ldr	r3, [r7, #12]
 800ffbc:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800ffc0:	2b03      	cmp	r3, #3
 800ffc2:	d14a      	bne.n	801005a <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800ffc4:	693b      	ldr	r3, [r7, #16]
 800ffc6:	689a      	ldr	r2, [r3, #8]
 800ffc8:	693b      	ldr	r3, [r7, #16]
 800ffca:	68db      	ldr	r3, [r3, #12]
 800ffcc:	429a      	cmp	r2, r3
 800ffce:	d913      	bls.n	800fff8 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800ffd0:	693b      	ldr	r3, [r7, #16]
 800ffd2:	689a      	ldr	r2, [r3, #8]
 800ffd4:	693b      	ldr	r3, [r7, #16]
 800ffd6:	68db      	ldr	r3, [r3, #12]
 800ffd8:	1ad2      	subs	r2, r2, r3
 800ffda:	693b      	ldr	r3, [r7, #16]
 800ffdc:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800ffde:	693b      	ldr	r3, [r7, #16]
 800ffe0:	68da      	ldr	r2, [r3, #12]
 800ffe2:	693b      	ldr	r3, [r7, #16]
 800ffe4:	689b      	ldr	r3, [r3, #8]
 800ffe6:	4293      	cmp	r3, r2
 800ffe8:	bf28      	it	cs
 800ffea:	4613      	movcs	r3, r2
 800ffec:	461a      	mov	r2, r3
 800ffee:	6879      	ldr	r1, [r7, #4]
 800fff0:	68f8      	ldr	r0, [r7, #12]
 800fff2:	f001 f80f 	bl	8011014 <USBD_CtlContinueRx>
 800fff6:	e030      	b.n	801005a <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fff8:	68fb      	ldr	r3, [r7, #12]
 800fffa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fffe:	b2db      	uxtb	r3, r3
 8010000:	2b03      	cmp	r3, #3
 8010002:	d10b      	bne.n	801001c <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8010004:	68fb      	ldr	r3, [r7, #12]
 8010006:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801000a:	691b      	ldr	r3, [r3, #16]
 801000c:	2b00      	cmp	r3, #0
 801000e:	d005      	beq.n	801001c <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8010010:	68fb      	ldr	r3, [r7, #12]
 8010012:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010016:	691b      	ldr	r3, [r3, #16]
 8010018:	68f8      	ldr	r0, [r7, #12]
 801001a:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 801001c:	68f8      	ldr	r0, [r7, #12]
 801001e:	f001 f80a 	bl	8011036 <USBD_CtlSendStatus>
 8010022:	e01a      	b.n	801005a <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010024:	68fb      	ldr	r3, [r7, #12]
 8010026:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801002a:	b2db      	uxtb	r3, r3
 801002c:	2b03      	cmp	r3, #3
 801002e:	d114      	bne.n	801005a <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8010030:	68fb      	ldr	r3, [r7, #12]
 8010032:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010036:	699b      	ldr	r3, [r3, #24]
 8010038:	2b00      	cmp	r3, #0
 801003a:	d00e      	beq.n	801005a <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 801003c:	68fb      	ldr	r3, [r7, #12]
 801003e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010042:	699b      	ldr	r3, [r3, #24]
 8010044:	7afa      	ldrb	r2, [r7, #11]
 8010046:	4611      	mov	r1, r2
 8010048:	68f8      	ldr	r0, [r7, #12]
 801004a:	4798      	blx	r3
 801004c:	4603      	mov	r3, r0
 801004e:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8010050:	7dfb      	ldrb	r3, [r7, #23]
 8010052:	2b00      	cmp	r3, #0
 8010054:	d001      	beq.n	801005a <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8010056:	7dfb      	ldrb	r3, [r7, #23]
 8010058:	e000      	b.n	801005c <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 801005a:	2300      	movs	r3, #0
}
 801005c:	4618      	mov	r0, r3
 801005e:	3718      	adds	r7, #24
 8010060:	46bd      	mov	sp, r7
 8010062:	bd80      	pop	{r7, pc}

08010064 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8010064:	b580      	push	{r7, lr}
 8010066:	b086      	sub	sp, #24
 8010068:	af00      	add	r7, sp, #0
 801006a:	60f8      	str	r0, [r7, #12]
 801006c:	460b      	mov	r3, r1
 801006e:	607a      	str	r2, [r7, #4]
 8010070:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8010072:	7afb      	ldrb	r3, [r7, #11]
 8010074:	2b00      	cmp	r3, #0
 8010076:	d16b      	bne.n	8010150 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8010078:	68fb      	ldr	r3, [r7, #12]
 801007a:	3314      	adds	r3, #20
 801007c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 801007e:	68fb      	ldr	r3, [r7, #12]
 8010080:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8010084:	2b02      	cmp	r3, #2
 8010086:	d156      	bne.n	8010136 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8010088:	693b      	ldr	r3, [r7, #16]
 801008a:	689a      	ldr	r2, [r3, #8]
 801008c:	693b      	ldr	r3, [r7, #16]
 801008e:	68db      	ldr	r3, [r3, #12]
 8010090:	429a      	cmp	r2, r3
 8010092:	d914      	bls.n	80100be <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8010094:	693b      	ldr	r3, [r7, #16]
 8010096:	689a      	ldr	r2, [r3, #8]
 8010098:	693b      	ldr	r3, [r7, #16]
 801009a:	68db      	ldr	r3, [r3, #12]
 801009c:	1ad2      	subs	r2, r2, r3
 801009e:	693b      	ldr	r3, [r7, #16]
 80100a0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80100a2:	693b      	ldr	r3, [r7, #16]
 80100a4:	689b      	ldr	r3, [r3, #8]
 80100a6:	461a      	mov	r2, r3
 80100a8:	6879      	ldr	r1, [r7, #4]
 80100aa:	68f8      	ldr	r0, [r7, #12]
 80100ac:	f000 ff84 	bl	8010fb8 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80100b0:	2300      	movs	r3, #0
 80100b2:	2200      	movs	r2, #0
 80100b4:	2100      	movs	r1, #0
 80100b6:	68f8      	ldr	r0, [r7, #12]
 80100b8:	f001 fdba 	bl	8011c30 <USBD_LL_PrepareReceive>
 80100bc:	e03b      	b.n	8010136 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80100be:	693b      	ldr	r3, [r7, #16]
 80100c0:	68da      	ldr	r2, [r3, #12]
 80100c2:	693b      	ldr	r3, [r7, #16]
 80100c4:	689b      	ldr	r3, [r3, #8]
 80100c6:	429a      	cmp	r2, r3
 80100c8:	d11c      	bne.n	8010104 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80100ca:	693b      	ldr	r3, [r7, #16]
 80100cc:	685a      	ldr	r2, [r3, #4]
 80100ce:	693b      	ldr	r3, [r7, #16]
 80100d0:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80100d2:	429a      	cmp	r2, r3
 80100d4:	d316      	bcc.n	8010104 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80100d6:	693b      	ldr	r3, [r7, #16]
 80100d8:	685a      	ldr	r2, [r3, #4]
 80100da:	68fb      	ldr	r3, [r7, #12]
 80100dc:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80100e0:	429a      	cmp	r2, r3
 80100e2:	d20f      	bcs.n	8010104 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80100e4:	2200      	movs	r2, #0
 80100e6:	2100      	movs	r1, #0
 80100e8:	68f8      	ldr	r0, [r7, #12]
 80100ea:	f000 ff65 	bl	8010fb8 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80100ee:	68fb      	ldr	r3, [r7, #12]
 80100f0:	2200      	movs	r2, #0
 80100f2:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80100f6:	2300      	movs	r3, #0
 80100f8:	2200      	movs	r2, #0
 80100fa:	2100      	movs	r1, #0
 80100fc:	68f8      	ldr	r0, [r7, #12]
 80100fe:	f001 fd97 	bl	8011c30 <USBD_LL_PrepareReceive>
 8010102:	e018      	b.n	8010136 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010104:	68fb      	ldr	r3, [r7, #12]
 8010106:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801010a:	b2db      	uxtb	r3, r3
 801010c:	2b03      	cmp	r3, #3
 801010e:	d10b      	bne.n	8010128 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8010110:	68fb      	ldr	r3, [r7, #12]
 8010112:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010116:	68db      	ldr	r3, [r3, #12]
 8010118:	2b00      	cmp	r3, #0
 801011a:	d005      	beq.n	8010128 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 801011c:	68fb      	ldr	r3, [r7, #12]
 801011e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010122:	68db      	ldr	r3, [r3, #12]
 8010124:	68f8      	ldr	r0, [r7, #12]
 8010126:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8010128:	2180      	movs	r1, #128	; 0x80
 801012a:	68f8      	ldr	r0, [r7, #12]
 801012c:	f001 fcd6 	bl	8011adc <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8010130:	68f8      	ldr	r0, [r7, #12]
 8010132:	f000 ff93 	bl	801105c <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8010136:	68fb      	ldr	r3, [r7, #12]
 8010138:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 801013c:	2b01      	cmp	r3, #1
 801013e:	d122      	bne.n	8010186 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8010140:	68f8      	ldr	r0, [r7, #12]
 8010142:	f7ff fe98 	bl	800fe76 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8010146:	68fb      	ldr	r3, [r7, #12]
 8010148:	2200      	movs	r2, #0
 801014a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 801014e:	e01a      	b.n	8010186 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010150:	68fb      	ldr	r3, [r7, #12]
 8010152:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010156:	b2db      	uxtb	r3, r3
 8010158:	2b03      	cmp	r3, #3
 801015a:	d114      	bne.n	8010186 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 801015c:	68fb      	ldr	r3, [r7, #12]
 801015e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010162:	695b      	ldr	r3, [r3, #20]
 8010164:	2b00      	cmp	r3, #0
 8010166:	d00e      	beq.n	8010186 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8010168:	68fb      	ldr	r3, [r7, #12]
 801016a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801016e:	695b      	ldr	r3, [r3, #20]
 8010170:	7afa      	ldrb	r2, [r7, #11]
 8010172:	4611      	mov	r1, r2
 8010174:	68f8      	ldr	r0, [r7, #12]
 8010176:	4798      	blx	r3
 8010178:	4603      	mov	r3, r0
 801017a:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 801017c:	7dfb      	ldrb	r3, [r7, #23]
 801017e:	2b00      	cmp	r3, #0
 8010180:	d001      	beq.n	8010186 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8010182:	7dfb      	ldrb	r3, [r7, #23]
 8010184:	e000      	b.n	8010188 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8010186:	2300      	movs	r3, #0
}
 8010188:	4618      	mov	r0, r3
 801018a:	3718      	adds	r7, #24
 801018c:	46bd      	mov	sp, r7
 801018e:	bd80      	pop	{r7, pc}

08010190 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8010190:	b580      	push	{r7, lr}
 8010192:	b082      	sub	sp, #8
 8010194:	af00      	add	r7, sp, #0
 8010196:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8010198:	687b      	ldr	r3, [r7, #4]
 801019a:	2201      	movs	r2, #1
 801019c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80101a0:	687b      	ldr	r3, [r7, #4]
 80101a2:	2200      	movs	r2, #0
 80101a4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80101a8:	687b      	ldr	r3, [r7, #4]
 80101aa:	2200      	movs	r2, #0
 80101ac:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80101ae:	687b      	ldr	r3, [r7, #4]
 80101b0:	2200      	movs	r2, #0
 80101b2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 80101b6:	687b      	ldr	r3, [r7, #4]
 80101b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80101bc:	2b00      	cmp	r3, #0
 80101be:	d101      	bne.n	80101c4 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 80101c0:	2303      	movs	r3, #3
 80101c2:	e02f      	b.n	8010224 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 80101c4:	687b      	ldr	r3, [r7, #4]
 80101c6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80101ca:	2b00      	cmp	r3, #0
 80101cc:	d00f      	beq.n	80101ee <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 80101ce:	687b      	ldr	r3, [r7, #4]
 80101d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80101d4:	685b      	ldr	r3, [r3, #4]
 80101d6:	2b00      	cmp	r3, #0
 80101d8:	d009      	beq.n	80101ee <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80101da:	687b      	ldr	r3, [r7, #4]
 80101dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80101e0:	685b      	ldr	r3, [r3, #4]
 80101e2:	687a      	ldr	r2, [r7, #4]
 80101e4:	6852      	ldr	r2, [r2, #4]
 80101e6:	b2d2      	uxtb	r2, r2
 80101e8:	4611      	mov	r1, r2
 80101ea:	6878      	ldr	r0, [r7, #4]
 80101ec:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80101ee:	2340      	movs	r3, #64	; 0x40
 80101f0:	2200      	movs	r2, #0
 80101f2:	2100      	movs	r1, #0
 80101f4:	6878      	ldr	r0, [r7, #4]
 80101f6:	f001 fc2c 	bl	8011a52 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80101fa:	687b      	ldr	r3, [r7, #4]
 80101fc:	2201      	movs	r2, #1
 80101fe:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8010202:	687b      	ldr	r3, [r7, #4]
 8010204:	2240      	movs	r2, #64	; 0x40
 8010206:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 801020a:	2340      	movs	r3, #64	; 0x40
 801020c:	2200      	movs	r2, #0
 801020e:	2180      	movs	r1, #128	; 0x80
 8010210:	6878      	ldr	r0, [r7, #4]
 8010212:	f001 fc1e 	bl	8011a52 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8010216:	687b      	ldr	r3, [r7, #4]
 8010218:	2201      	movs	r2, #1
 801021a:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 801021c:	687b      	ldr	r3, [r7, #4]
 801021e:	2240      	movs	r2, #64	; 0x40
 8010220:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8010222:	2300      	movs	r3, #0
}
 8010224:	4618      	mov	r0, r3
 8010226:	3708      	adds	r7, #8
 8010228:	46bd      	mov	sp, r7
 801022a:	bd80      	pop	{r7, pc}

0801022c <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 801022c:	b480      	push	{r7}
 801022e:	b083      	sub	sp, #12
 8010230:	af00      	add	r7, sp, #0
 8010232:	6078      	str	r0, [r7, #4]
 8010234:	460b      	mov	r3, r1
 8010236:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8010238:	687b      	ldr	r3, [r7, #4]
 801023a:	78fa      	ldrb	r2, [r7, #3]
 801023c:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 801023e:	2300      	movs	r3, #0
}
 8010240:	4618      	mov	r0, r3
 8010242:	370c      	adds	r7, #12
 8010244:	46bd      	mov	sp, r7
 8010246:	f85d 7b04 	ldr.w	r7, [sp], #4
 801024a:	4770      	bx	lr

0801024c <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 801024c:	b480      	push	{r7}
 801024e:	b083      	sub	sp, #12
 8010250:	af00      	add	r7, sp, #0
 8010252:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8010254:	687b      	ldr	r3, [r7, #4]
 8010256:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801025a:	b2da      	uxtb	r2, r3
 801025c:	687b      	ldr	r3, [r7, #4]
 801025e:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8010262:	687b      	ldr	r3, [r7, #4]
 8010264:	2204      	movs	r2, #4
 8010266:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 801026a:	2300      	movs	r3, #0
}
 801026c:	4618      	mov	r0, r3
 801026e:	370c      	adds	r7, #12
 8010270:	46bd      	mov	sp, r7
 8010272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010276:	4770      	bx	lr

08010278 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8010278:	b480      	push	{r7}
 801027a:	b083      	sub	sp, #12
 801027c:	af00      	add	r7, sp, #0
 801027e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8010280:	687b      	ldr	r3, [r7, #4]
 8010282:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010286:	b2db      	uxtb	r3, r3
 8010288:	2b04      	cmp	r3, #4
 801028a:	d106      	bne.n	801029a <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 801028c:	687b      	ldr	r3, [r7, #4]
 801028e:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8010292:	b2da      	uxtb	r2, r3
 8010294:	687b      	ldr	r3, [r7, #4]
 8010296:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 801029a:	2300      	movs	r3, #0
}
 801029c:	4618      	mov	r0, r3
 801029e:	370c      	adds	r7, #12
 80102a0:	46bd      	mov	sp, r7
 80102a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102a6:	4770      	bx	lr

080102a8 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80102a8:	b580      	push	{r7, lr}
 80102aa:	b082      	sub	sp, #8
 80102ac:	af00      	add	r7, sp, #0
 80102ae:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 80102b0:	687b      	ldr	r3, [r7, #4]
 80102b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80102b6:	2b00      	cmp	r3, #0
 80102b8:	d101      	bne.n	80102be <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 80102ba:	2303      	movs	r3, #3
 80102bc:	e012      	b.n	80102e4 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80102be:	687b      	ldr	r3, [r7, #4]
 80102c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80102c4:	b2db      	uxtb	r3, r3
 80102c6:	2b03      	cmp	r3, #3
 80102c8:	d10b      	bne.n	80102e2 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 80102ca:	687b      	ldr	r3, [r7, #4]
 80102cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80102d0:	69db      	ldr	r3, [r3, #28]
 80102d2:	2b00      	cmp	r3, #0
 80102d4:	d005      	beq.n	80102e2 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 80102d6:	687b      	ldr	r3, [r7, #4]
 80102d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80102dc:	69db      	ldr	r3, [r3, #28]
 80102de:	6878      	ldr	r0, [r7, #4]
 80102e0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80102e2:	2300      	movs	r3, #0
}
 80102e4:	4618      	mov	r0, r3
 80102e6:	3708      	adds	r7, #8
 80102e8:	46bd      	mov	sp, r7
 80102ea:	bd80      	pop	{r7, pc}

080102ec <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80102ec:	b580      	push	{r7, lr}
 80102ee:	b082      	sub	sp, #8
 80102f0:	af00      	add	r7, sp, #0
 80102f2:	6078      	str	r0, [r7, #4]
 80102f4:	460b      	mov	r3, r1
 80102f6:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 80102f8:	687b      	ldr	r3, [r7, #4]
 80102fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80102fe:	2b00      	cmp	r3, #0
 8010300:	d101      	bne.n	8010306 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 8010302:	2303      	movs	r3, #3
 8010304:	e014      	b.n	8010330 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010306:	687b      	ldr	r3, [r7, #4]
 8010308:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801030c:	b2db      	uxtb	r3, r3
 801030e:	2b03      	cmp	r3, #3
 8010310:	d10d      	bne.n	801032e <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 8010312:	687b      	ldr	r3, [r7, #4]
 8010314:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010318:	6a1b      	ldr	r3, [r3, #32]
 801031a:	2b00      	cmp	r3, #0
 801031c:	d007      	beq.n	801032e <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 801031e:	687b      	ldr	r3, [r7, #4]
 8010320:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010324:	6a1b      	ldr	r3, [r3, #32]
 8010326:	78fa      	ldrb	r2, [r7, #3]
 8010328:	4611      	mov	r1, r2
 801032a:	6878      	ldr	r0, [r7, #4]
 801032c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 801032e:	2300      	movs	r3, #0
}
 8010330:	4618      	mov	r0, r3
 8010332:	3708      	adds	r7, #8
 8010334:	46bd      	mov	sp, r7
 8010336:	bd80      	pop	{r7, pc}

08010338 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8010338:	b580      	push	{r7, lr}
 801033a:	b082      	sub	sp, #8
 801033c:	af00      	add	r7, sp, #0
 801033e:	6078      	str	r0, [r7, #4]
 8010340:	460b      	mov	r3, r1
 8010342:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8010344:	687b      	ldr	r3, [r7, #4]
 8010346:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801034a:	2b00      	cmp	r3, #0
 801034c:	d101      	bne.n	8010352 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 801034e:	2303      	movs	r3, #3
 8010350:	e014      	b.n	801037c <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010352:	687b      	ldr	r3, [r7, #4]
 8010354:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010358:	b2db      	uxtb	r3, r3
 801035a:	2b03      	cmp	r3, #3
 801035c:	d10d      	bne.n	801037a <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 801035e:	687b      	ldr	r3, [r7, #4]
 8010360:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010366:	2b00      	cmp	r3, #0
 8010368:	d007      	beq.n	801037a <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 801036a:	687b      	ldr	r3, [r7, #4]
 801036c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010372:	78fa      	ldrb	r2, [r7, #3]
 8010374:	4611      	mov	r1, r2
 8010376:	6878      	ldr	r0, [r7, #4]
 8010378:	4798      	blx	r3
    }
  }

  return USBD_OK;
 801037a:	2300      	movs	r3, #0
}
 801037c:	4618      	mov	r0, r3
 801037e:	3708      	adds	r7, #8
 8010380:	46bd      	mov	sp, r7
 8010382:	bd80      	pop	{r7, pc}

08010384 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8010384:	b480      	push	{r7}
 8010386:	b083      	sub	sp, #12
 8010388:	af00      	add	r7, sp, #0
 801038a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 801038c:	2300      	movs	r3, #0
}
 801038e:	4618      	mov	r0, r3
 8010390:	370c      	adds	r7, #12
 8010392:	46bd      	mov	sp, r7
 8010394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010398:	4770      	bx	lr

0801039a <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 801039a:	b580      	push	{r7, lr}
 801039c:	b082      	sub	sp, #8
 801039e:	af00      	add	r7, sp, #0
 80103a0:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80103a2:	687b      	ldr	r3, [r7, #4]
 80103a4:	2201      	movs	r2, #1
 80103a6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 80103aa:	687b      	ldr	r3, [r7, #4]
 80103ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80103b0:	2b00      	cmp	r3, #0
 80103b2:	d009      	beq.n	80103c8 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80103b4:	687b      	ldr	r3, [r7, #4]
 80103b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80103ba:	685b      	ldr	r3, [r3, #4]
 80103bc:	687a      	ldr	r2, [r7, #4]
 80103be:	6852      	ldr	r2, [r2, #4]
 80103c0:	b2d2      	uxtb	r2, r2
 80103c2:	4611      	mov	r1, r2
 80103c4:	6878      	ldr	r0, [r7, #4]
 80103c6:	4798      	blx	r3
  }

  return USBD_OK;
 80103c8:	2300      	movs	r3, #0
}
 80103ca:	4618      	mov	r0, r3
 80103cc:	3708      	adds	r7, #8
 80103ce:	46bd      	mov	sp, r7
 80103d0:	bd80      	pop	{r7, pc}

080103d2 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80103d2:	b480      	push	{r7}
 80103d4:	b087      	sub	sp, #28
 80103d6:	af00      	add	r7, sp, #0
 80103d8:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80103da:	687b      	ldr	r3, [r7, #4]
 80103dc:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80103de:	697b      	ldr	r3, [r7, #20]
 80103e0:	781b      	ldrb	r3, [r3, #0]
 80103e2:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80103e4:	697b      	ldr	r3, [r7, #20]
 80103e6:	3301      	adds	r3, #1
 80103e8:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80103ea:	697b      	ldr	r3, [r7, #20]
 80103ec:	781b      	ldrb	r3, [r3, #0]
 80103ee:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80103f0:	8a3b      	ldrh	r3, [r7, #16]
 80103f2:	021b      	lsls	r3, r3, #8
 80103f4:	b21a      	sxth	r2, r3
 80103f6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80103fa:	4313      	orrs	r3, r2
 80103fc:	b21b      	sxth	r3, r3
 80103fe:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8010400:	89fb      	ldrh	r3, [r7, #14]
}
 8010402:	4618      	mov	r0, r3
 8010404:	371c      	adds	r7, #28
 8010406:	46bd      	mov	sp, r7
 8010408:	f85d 7b04 	ldr.w	r7, [sp], #4
 801040c:	4770      	bx	lr
	...

08010410 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010410:	b580      	push	{r7, lr}
 8010412:	b084      	sub	sp, #16
 8010414:	af00      	add	r7, sp, #0
 8010416:	6078      	str	r0, [r7, #4]
 8010418:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801041a:	2300      	movs	r3, #0
 801041c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801041e:	683b      	ldr	r3, [r7, #0]
 8010420:	781b      	ldrb	r3, [r3, #0]
 8010422:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8010426:	2b40      	cmp	r3, #64	; 0x40
 8010428:	d005      	beq.n	8010436 <USBD_StdDevReq+0x26>
 801042a:	2b40      	cmp	r3, #64	; 0x40
 801042c:	d853      	bhi.n	80104d6 <USBD_StdDevReq+0xc6>
 801042e:	2b00      	cmp	r3, #0
 8010430:	d00b      	beq.n	801044a <USBD_StdDevReq+0x3a>
 8010432:	2b20      	cmp	r3, #32
 8010434:	d14f      	bne.n	80104d6 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8010436:	687b      	ldr	r3, [r7, #4]
 8010438:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801043c:	689b      	ldr	r3, [r3, #8]
 801043e:	6839      	ldr	r1, [r7, #0]
 8010440:	6878      	ldr	r0, [r7, #4]
 8010442:	4798      	blx	r3
 8010444:	4603      	mov	r3, r0
 8010446:	73fb      	strb	r3, [r7, #15]
      break;
 8010448:	e04a      	b.n	80104e0 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801044a:	683b      	ldr	r3, [r7, #0]
 801044c:	785b      	ldrb	r3, [r3, #1]
 801044e:	2b09      	cmp	r3, #9
 8010450:	d83b      	bhi.n	80104ca <USBD_StdDevReq+0xba>
 8010452:	a201      	add	r2, pc, #4	; (adr r2, 8010458 <USBD_StdDevReq+0x48>)
 8010454:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010458:	080104ad 	.word	0x080104ad
 801045c:	080104c1 	.word	0x080104c1
 8010460:	080104cb 	.word	0x080104cb
 8010464:	080104b7 	.word	0x080104b7
 8010468:	080104cb 	.word	0x080104cb
 801046c:	0801048b 	.word	0x0801048b
 8010470:	08010481 	.word	0x08010481
 8010474:	080104cb 	.word	0x080104cb
 8010478:	080104a3 	.word	0x080104a3
 801047c:	08010495 	.word	0x08010495
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8010480:	6839      	ldr	r1, [r7, #0]
 8010482:	6878      	ldr	r0, [r7, #4]
 8010484:	f000 f9de 	bl	8010844 <USBD_GetDescriptor>
          break;
 8010488:	e024      	b.n	80104d4 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 801048a:	6839      	ldr	r1, [r7, #0]
 801048c:	6878      	ldr	r0, [r7, #4]
 801048e:	f000 fb43 	bl	8010b18 <USBD_SetAddress>
          break;
 8010492:	e01f      	b.n	80104d4 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8010494:	6839      	ldr	r1, [r7, #0]
 8010496:	6878      	ldr	r0, [r7, #4]
 8010498:	f000 fb82 	bl	8010ba0 <USBD_SetConfig>
 801049c:	4603      	mov	r3, r0
 801049e:	73fb      	strb	r3, [r7, #15]
          break;
 80104a0:	e018      	b.n	80104d4 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80104a2:	6839      	ldr	r1, [r7, #0]
 80104a4:	6878      	ldr	r0, [r7, #4]
 80104a6:	f000 fc21 	bl	8010cec <USBD_GetConfig>
          break;
 80104aa:	e013      	b.n	80104d4 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80104ac:	6839      	ldr	r1, [r7, #0]
 80104ae:	6878      	ldr	r0, [r7, #4]
 80104b0:	f000 fc52 	bl	8010d58 <USBD_GetStatus>
          break;
 80104b4:	e00e      	b.n	80104d4 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80104b6:	6839      	ldr	r1, [r7, #0]
 80104b8:	6878      	ldr	r0, [r7, #4]
 80104ba:	f000 fc81 	bl	8010dc0 <USBD_SetFeature>
          break;
 80104be:	e009      	b.n	80104d4 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80104c0:	6839      	ldr	r1, [r7, #0]
 80104c2:	6878      	ldr	r0, [r7, #4]
 80104c4:	f000 fc90 	bl	8010de8 <USBD_ClrFeature>
          break;
 80104c8:	e004      	b.n	80104d4 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 80104ca:	6839      	ldr	r1, [r7, #0]
 80104cc:	6878      	ldr	r0, [r7, #4]
 80104ce:	f000 fce7 	bl	8010ea0 <USBD_CtlError>
          break;
 80104d2:	bf00      	nop
      }
      break;
 80104d4:	e004      	b.n	80104e0 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 80104d6:	6839      	ldr	r1, [r7, #0]
 80104d8:	6878      	ldr	r0, [r7, #4]
 80104da:	f000 fce1 	bl	8010ea0 <USBD_CtlError>
      break;
 80104de:	bf00      	nop
  }

  return ret;
 80104e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80104e2:	4618      	mov	r0, r3
 80104e4:	3710      	adds	r7, #16
 80104e6:	46bd      	mov	sp, r7
 80104e8:	bd80      	pop	{r7, pc}
 80104ea:	bf00      	nop

080104ec <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80104ec:	b580      	push	{r7, lr}
 80104ee:	b084      	sub	sp, #16
 80104f0:	af00      	add	r7, sp, #0
 80104f2:	6078      	str	r0, [r7, #4]
 80104f4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80104f6:	2300      	movs	r3, #0
 80104f8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80104fa:	683b      	ldr	r3, [r7, #0]
 80104fc:	781b      	ldrb	r3, [r3, #0]
 80104fe:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8010502:	2b40      	cmp	r3, #64	; 0x40
 8010504:	d005      	beq.n	8010512 <USBD_StdItfReq+0x26>
 8010506:	2b40      	cmp	r3, #64	; 0x40
 8010508:	d82f      	bhi.n	801056a <USBD_StdItfReq+0x7e>
 801050a:	2b00      	cmp	r3, #0
 801050c:	d001      	beq.n	8010512 <USBD_StdItfReq+0x26>
 801050e:	2b20      	cmp	r3, #32
 8010510:	d12b      	bne.n	801056a <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8010512:	687b      	ldr	r3, [r7, #4]
 8010514:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010518:	b2db      	uxtb	r3, r3
 801051a:	3b01      	subs	r3, #1
 801051c:	2b02      	cmp	r3, #2
 801051e:	d81d      	bhi.n	801055c <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8010520:	683b      	ldr	r3, [r7, #0]
 8010522:	889b      	ldrh	r3, [r3, #4]
 8010524:	b2db      	uxtb	r3, r3
 8010526:	2b01      	cmp	r3, #1
 8010528:	d813      	bhi.n	8010552 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 801052a:	687b      	ldr	r3, [r7, #4]
 801052c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010530:	689b      	ldr	r3, [r3, #8]
 8010532:	6839      	ldr	r1, [r7, #0]
 8010534:	6878      	ldr	r0, [r7, #4]
 8010536:	4798      	blx	r3
 8010538:	4603      	mov	r3, r0
 801053a:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 801053c:	683b      	ldr	r3, [r7, #0]
 801053e:	88db      	ldrh	r3, [r3, #6]
 8010540:	2b00      	cmp	r3, #0
 8010542:	d110      	bne.n	8010566 <USBD_StdItfReq+0x7a>
 8010544:	7bfb      	ldrb	r3, [r7, #15]
 8010546:	2b00      	cmp	r3, #0
 8010548:	d10d      	bne.n	8010566 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 801054a:	6878      	ldr	r0, [r7, #4]
 801054c:	f000 fd73 	bl	8011036 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8010550:	e009      	b.n	8010566 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8010552:	6839      	ldr	r1, [r7, #0]
 8010554:	6878      	ldr	r0, [r7, #4]
 8010556:	f000 fca3 	bl	8010ea0 <USBD_CtlError>
          break;
 801055a:	e004      	b.n	8010566 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 801055c:	6839      	ldr	r1, [r7, #0]
 801055e:	6878      	ldr	r0, [r7, #4]
 8010560:	f000 fc9e 	bl	8010ea0 <USBD_CtlError>
          break;
 8010564:	e000      	b.n	8010568 <USBD_StdItfReq+0x7c>
          break;
 8010566:	bf00      	nop
      }
      break;
 8010568:	e004      	b.n	8010574 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 801056a:	6839      	ldr	r1, [r7, #0]
 801056c:	6878      	ldr	r0, [r7, #4]
 801056e:	f000 fc97 	bl	8010ea0 <USBD_CtlError>
      break;
 8010572:	bf00      	nop
  }

  return ret;
 8010574:	7bfb      	ldrb	r3, [r7, #15]
}
 8010576:	4618      	mov	r0, r3
 8010578:	3710      	adds	r7, #16
 801057a:	46bd      	mov	sp, r7
 801057c:	bd80      	pop	{r7, pc}

0801057e <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801057e:	b580      	push	{r7, lr}
 8010580:	b084      	sub	sp, #16
 8010582:	af00      	add	r7, sp, #0
 8010584:	6078      	str	r0, [r7, #4]
 8010586:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8010588:	2300      	movs	r3, #0
 801058a:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 801058c:	683b      	ldr	r3, [r7, #0]
 801058e:	889b      	ldrh	r3, [r3, #4]
 8010590:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8010592:	683b      	ldr	r3, [r7, #0]
 8010594:	781b      	ldrb	r3, [r3, #0]
 8010596:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801059a:	2b40      	cmp	r3, #64	; 0x40
 801059c:	d007      	beq.n	80105ae <USBD_StdEPReq+0x30>
 801059e:	2b40      	cmp	r3, #64	; 0x40
 80105a0:	f200 8145 	bhi.w	801082e <USBD_StdEPReq+0x2b0>
 80105a4:	2b00      	cmp	r3, #0
 80105a6:	d00c      	beq.n	80105c2 <USBD_StdEPReq+0x44>
 80105a8:	2b20      	cmp	r3, #32
 80105aa:	f040 8140 	bne.w	801082e <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80105ae:	687b      	ldr	r3, [r7, #4]
 80105b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80105b4:	689b      	ldr	r3, [r3, #8]
 80105b6:	6839      	ldr	r1, [r7, #0]
 80105b8:	6878      	ldr	r0, [r7, #4]
 80105ba:	4798      	blx	r3
 80105bc:	4603      	mov	r3, r0
 80105be:	73fb      	strb	r3, [r7, #15]
      break;
 80105c0:	e13a      	b.n	8010838 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80105c2:	683b      	ldr	r3, [r7, #0]
 80105c4:	785b      	ldrb	r3, [r3, #1]
 80105c6:	2b03      	cmp	r3, #3
 80105c8:	d007      	beq.n	80105da <USBD_StdEPReq+0x5c>
 80105ca:	2b03      	cmp	r3, #3
 80105cc:	f300 8129 	bgt.w	8010822 <USBD_StdEPReq+0x2a4>
 80105d0:	2b00      	cmp	r3, #0
 80105d2:	d07f      	beq.n	80106d4 <USBD_StdEPReq+0x156>
 80105d4:	2b01      	cmp	r3, #1
 80105d6:	d03c      	beq.n	8010652 <USBD_StdEPReq+0xd4>
 80105d8:	e123      	b.n	8010822 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80105da:	687b      	ldr	r3, [r7, #4]
 80105dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80105e0:	b2db      	uxtb	r3, r3
 80105e2:	2b02      	cmp	r3, #2
 80105e4:	d002      	beq.n	80105ec <USBD_StdEPReq+0x6e>
 80105e6:	2b03      	cmp	r3, #3
 80105e8:	d016      	beq.n	8010618 <USBD_StdEPReq+0x9a>
 80105ea:	e02c      	b.n	8010646 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80105ec:	7bbb      	ldrb	r3, [r7, #14]
 80105ee:	2b00      	cmp	r3, #0
 80105f0:	d00d      	beq.n	801060e <USBD_StdEPReq+0x90>
 80105f2:	7bbb      	ldrb	r3, [r7, #14]
 80105f4:	2b80      	cmp	r3, #128	; 0x80
 80105f6:	d00a      	beq.n	801060e <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80105f8:	7bbb      	ldrb	r3, [r7, #14]
 80105fa:	4619      	mov	r1, r3
 80105fc:	6878      	ldr	r0, [r7, #4]
 80105fe:	f001 fa6d 	bl	8011adc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8010602:	2180      	movs	r1, #128	; 0x80
 8010604:	6878      	ldr	r0, [r7, #4]
 8010606:	f001 fa69 	bl	8011adc <USBD_LL_StallEP>
 801060a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 801060c:	e020      	b.n	8010650 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 801060e:	6839      	ldr	r1, [r7, #0]
 8010610:	6878      	ldr	r0, [r7, #4]
 8010612:	f000 fc45 	bl	8010ea0 <USBD_CtlError>
              break;
 8010616:	e01b      	b.n	8010650 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8010618:	683b      	ldr	r3, [r7, #0]
 801061a:	885b      	ldrh	r3, [r3, #2]
 801061c:	2b00      	cmp	r3, #0
 801061e:	d10e      	bne.n	801063e <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8010620:	7bbb      	ldrb	r3, [r7, #14]
 8010622:	2b00      	cmp	r3, #0
 8010624:	d00b      	beq.n	801063e <USBD_StdEPReq+0xc0>
 8010626:	7bbb      	ldrb	r3, [r7, #14]
 8010628:	2b80      	cmp	r3, #128	; 0x80
 801062a:	d008      	beq.n	801063e <USBD_StdEPReq+0xc0>
 801062c:	683b      	ldr	r3, [r7, #0]
 801062e:	88db      	ldrh	r3, [r3, #6]
 8010630:	2b00      	cmp	r3, #0
 8010632:	d104      	bne.n	801063e <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8010634:	7bbb      	ldrb	r3, [r7, #14]
 8010636:	4619      	mov	r1, r3
 8010638:	6878      	ldr	r0, [r7, #4]
 801063a:	f001 fa4f 	bl	8011adc <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 801063e:	6878      	ldr	r0, [r7, #4]
 8010640:	f000 fcf9 	bl	8011036 <USBD_CtlSendStatus>

              break;
 8010644:	e004      	b.n	8010650 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8010646:	6839      	ldr	r1, [r7, #0]
 8010648:	6878      	ldr	r0, [r7, #4]
 801064a:	f000 fc29 	bl	8010ea0 <USBD_CtlError>
              break;
 801064e:	bf00      	nop
          }
          break;
 8010650:	e0ec      	b.n	801082c <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8010652:	687b      	ldr	r3, [r7, #4]
 8010654:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010658:	b2db      	uxtb	r3, r3
 801065a:	2b02      	cmp	r3, #2
 801065c:	d002      	beq.n	8010664 <USBD_StdEPReq+0xe6>
 801065e:	2b03      	cmp	r3, #3
 8010660:	d016      	beq.n	8010690 <USBD_StdEPReq+0x112>
 8010662:	e030      	b.n	80106c6 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8010664:	7bbb      	ldrb	r3, [r7, #14]
 8010666:	2b00      	cmp	r3, #0
 8010668:	d00d      	beq.n	8010686 <USBD_StdEPReq+0x108>
 801066a:	7bbb      	ldrb	r3, [r7, #14]
 801066c:	2b80      	cmp	r3, #128	; 0x80
 801066e:	d00a      	beq.n	8010686 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8010670:	7bbb      	ldrb	r3, [r7, #14]
 8010672:	4619      	mov	r1, r3
 8010674:	6878      	ldr	r0, [r7, #4]
 8010676:	f001 fa31 	bl	8011adc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 801067a:	2180      	movs	r1, #128	; 0x80
 801067c:	6878      	ldr	r0, [r7, #4]
 801067e:	f001 fa2d 	bl	8011adc <USBD_LL_StallEP>
 8010682:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8010684:	e025      	b.n	80106d2 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8010686:	6839      	ldr	r1, [r7, #0]
 8010688:	6878      	ldr	r0, [r7, #4]
 801068a:	f000 fc09 	bl	8010ea0 <USBD_CtlError>
              break;
 801068e:	e020      	b.n	80106d2 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8010690:	683b      	ldr	r3, [r7, #0]
 8010692:	885b      	ldrh	r3, [r3, #2]
 8010694:	2b00      	cmp	r3, #0
 8010696:	d11b      	bne.n	80106d0 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8010698:	7bbb      	ldrb	r3, [r7, #14]
 801069a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801069e:	2b00      	cmp	r3, #0
 80106a0:	d004      	beq.n	80106ac <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80106a2:	7bbb      	ldrb	r3, [r7, #14]
 80106a4:	4619      	mov	r1, r3
 80106a6:	6878      	ldr	r0, [r7, #4]
 80106a8:	f001 fa37 	bl	8011b1a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80106ac:	6878      	ldr	r0, [r7, #4]
 80106ae:	f000 fcc2 	bl	8011036 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80106b2:	687b      	ldr	r3, [r7, #4]
 80106b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80106b8:	689b      	ldr	r3, [r3, #8]
 80106ba:	6839      	ldr	r1, [r7, #0]
 80106bc:	6878      	ldr	r0, [r7, #4]
 80106be:	4798      	blx	r3
 80106c0:	4603      	mov	r3, r0
 80106c2:	73fb      	strb	r3, [r7, #15]
              }
              break;
 80106c4:	e004      	b.n	80106d0 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 80106c6:	6839      	ldr	r1, [r7, #0]
 80106c8:	6878      	ldr	r0, [r7, #4]
 80106ca:	f000 fbe9 	bl	8010ea0 <USBD_CtlError>
              break;
 80106ce:	e000      	b.n	80106d2 <USBD_StdEPReq+0x154>
              break;
 80106d0:	bf00      	nop
          }
          break;
 80106d2:	e0ab      	b.n	801082c <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80106d4:	687b      	ldr	r3, [r7, #4]
 80106d6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80106da:	b2db      	uxtb	r3, r3
 80106dc:	2b02      	cmp	r3, #2
 80106de:	d002      	beq.n	80106e6 <USBD_StdEPReq+0x168>
 80106e0:	2b03      	cmp	r3, #3
 80106e2:	d032      	beq.n	801074a <USBD_StdEPReq+0x1cc>
 80106e4:	e097      	b.n	8010816 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80106e6:	7bbb      	ldrb	r3, [r7, #14]
 80106e8:	2b00      	cmp	r3, #0
 80106ea:	d007      	beq.n	80106fc <USBD_StdEPReq+0x17e>
 80106ec:	7bbb      	ldrb	r3, [r7, #14]
 80106ee:	2b80      	cmp	r3, #128	; 0x80
 80106f0:	d004      	beq.n	80106fc <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 80106f2:	6839      	ldr	r1, [r7, #0]
 80106f4:	6878      	ldr	r0, [r7, #4]
 80106f6:	f000 fbd3 	bl	8010ea0 <USBD_CtlError>
                break;
 80106fa:	e091      	b.n	8010820 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80106fc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8010700:	2b00      	cmp	r3, #0
 8010702:	da0b      	bge.n	801071c <USBD_StdEPReq+0x19e>
 8010704:	7bbb      	ldrb	r3, [r7, #14]
 8010706:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801070a:	4613      	mov	r3, r2
 801070c:	009b      	lsls	r3, r3, #2
 801070e:	4413      	add	r3, r2
 8010710:	009b      	lsls	r3, r3, #2
 8010712:	3310      	adds	r3, #16
 8010714:	687a      	ldr	r2, [r7, #4]
 8010716:	4413      	add	r3, r2
 8010718:	3304      	adds	r3, #4
 801071a:	e00b      	b.n	8010734 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 801071c:	7bbb      	ldrb	r3, [r7, #14]
 801071e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8010722:	4613      	mov	r3, r2
 8010724:	009b      	lsls	r3, r3, #2
 8010726:	4413      	add	r3, r2
 8010728:	009b      	lsls	r3, r3, #2
 801072a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 801072e:	687a      	ldr	r2, [r7, #4]
 8010730:	4413      	add	r3, r2
 8010732:	3304      	adds	r3, #4
 8010734:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8010736:	68bb      	ldr	r3, [r7, #8]
 8010738:	2200      	movs	r2, #0
 801073a:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 801073c:	68bb      	ldr	r3, [r7, #8]
 801073e:	2202      	movs	r2, #2
 8010740:	4619      	mov	r1, r3
 8010742:	6878      	ldr	r0, [r7, #4]
 8010744:	f000 fc1d 	bl	8010f82 <USBD_CtlSendData>
              break;
 8010748:	e06a      	b.n	8010820 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 801074a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801074e:	2b00      	cmp	r3, #0
 8010750:	da11      	bge.n	8010776 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8010752:	7bbb      	ldrb	r3, [r7, #14]
 8010754:	f003 020f 	and.w	r2, r3, #15
 8010758:	6879      	ldr	r1, [r7, #4]
 801075a:	4613      	mov	r3, r2
 801075c:	009b      	lsls	r3, r3, #2
 801075e:	4413      	add	r3, r2
 8010760:	009b      	lsls	r3, r3, #2
 8010762:	440b      	add	r3, r1
 8010764:	3324      	adds	r3, #36	; 0x24
 8010766:	881b      	ldrh	r3, [r3, #0]
 8010768:	2b00      	cmp	r3, #0
 801076a:	d117      	bne.n	801079c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 801076c:	6839      	ldr	r1, [r7, #0]
 801076e:	6878      	ldr	r0, [r7, #4]
 8010770:	f000 fb96 	bl	8010ea0 <USBD_CtlError>
                  break;
 8010774:	e054      	b.n	8010820 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8010776:	7bbb      	ldrb	r3, [r7, #14]
 8010778:	f003 020f 	and.w	r2, r3, #15
 801077c:	6879      	ldr	r1, [r7, #4]
 801077e:	4613      	mov	r3, r2
 8010780:	009b      	lsls	r3, r3, #2
 8010782:	4413      	add	r3, r2
 8010784:	009b      	lsls	r3, r3, #2
 8010786:	440b      	add	r3, r1
 8010788:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 801078c:	881b      	ldrh	r3, [r3, #0]
 801078e:	2b00      	cmp	r3, #0
 8010790:	d104      	bne.n	801079c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8010792:	6839      	ldr	r1, [r7, #0]
 8010794:	6878      	ldr	r0, [r7, #4]
 8010796:	f000 fb83 	bl	8010ea0 <USBD_CtlError>
                  break;
 801079a:	e041      	b.n	8010820 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801079c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80107a0:	2b00      	cmp	r3, #0
 80107a2:	da0b      	bge.n	80107bc <USBD_StdEPReq+0x23e>
 80107a4:	7bbb      	ldrb	r3, [r7, #14]
 80107a6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80107aa:	4613      	mov	r3, r2
 80107ac:	009b      	lsls	r3, r3, #2
 80107ae:	4413      	add	r3, r2
 80107b0:	009b      	lsls	r3, r3, #2
 80107b2:	3310      	adds	r3, #16
 80107b4:	687a      	ldr	r2, [r7, #4]
 80107b6:	4413      	add	r3, r2
 80107b8:	3304      	adds	r3, #4
 80107ba:	e00b      	b.n	80107d4 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80107bc:	7bbb      	ldrb	r3, [r7, #14]
 80107be:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80107c2:	4613      	mov	r3, r2
 80107c4:	009b      	lsls	r3, r3, #2
 80107c6:	4413      	add	r3, r2
 80107c8:	009b      	lsls	r3, r3, #2
 80107ca:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80107ce:	687a      	ldr	r2, [r7, #4]
 80107d0:	4413      	add	r3, r2
 80107d2:	3304      	adds	r3, #4
 80107d4:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80107d6:	7bbb      	ldrb	r3, [r7, #14]
 80107d8:	2b00      	cmp	r3, #0
 80107da:	d002      	beq.n	80107e2 <USBD_StdEPReq+0x264>
 80107dc:	7bbb      	ldrb	r3, [r7, #14]
 80107de:	2b80      	cmp	r3, #128	; 0x80
 80107e0:	d103      	bne.n	80107ea <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 80107e2:	68bb      	ldr	r3, [r7, #8]
 80107e4:	2200      	movs	r2, #0
 80107e6:	601a      	str	r2, [r3, #0]
 80107e8:	e00e      	b.n	8010808 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80107ea:	7bbb      	ldrb	r3, [r7, #14]
 80107ec:	4619      	mov	r1, r3
 80107ee:	6878      	ldr	r0, [r7, #4]
 80107f0:	f001 f9b2 	bl	8011b58 <USBD_LL_IsStallEP>
 80107f4:	4603      	mov	r3, r0
 80107f6:	2b00      	cmp	r3, #0
 80107f8:	d003      	beq.n	8010802 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 80107fa:	68bb      	ldr	r3, [r7, #8]
 80107fc:	2201      	movs	r2, #1
 80107fe:	601a      	str	r2, [r3, #0]
 8010800:	e002      	b.n	8010808 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8010802:	68bb      	ldr	r3, [r7, #8]
 8010804:	2200      	movs	r2, #0
 8010806:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8010808:	68bb      	ldr	r3, [r7, #8]
 801080a:	2202      	movs	r2, #2
 801080c:	4619      	mov	r1, r3
 801080e:	6878      	ldr	r0, [r7, #4]
 8010810:	f000 fbb7 	bl	8010f82 <USBD_CtlSendData>
              break;
 8010814:	e004      	b.n	8010820 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8010816:	6839      	ldr	r1, [r7, #0]
 8010818:	6878      	ldr	r0, [r7, #4]
 801081a:	f000 fb41 	bl	8010ea0 <USBD_CtlError>
              break;
 801081e:	bf00      	nop
          }
          break;
 8010820:	e004      	b.n	801082c <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8010822:	6839      	ldr	r1, [r7, #0]
 8010824:	6878      	ldr	r0, [r7, #4]
 8010826:	f000 fb3b 	bl	8010ea0 <USBD_CtlError>
          break;
 801082a:	bf00      	nop
      }
      break;
 801082c:	e004      	b.n	8010838 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 801082e:	6839      	ldr	r1, [r7, #0]
 8010830:	6878      	ldr	r0, [r7, #4]
 8010832:	f000 fb35 	bl	8010ea0 <USBD_CtlError>
      break;
 8010836:	bf00      	nop
  }

  return ret;
 8010838:	7bfb      	ldrb	r3, [r7, #15]
}
 801083a:	4618      	mov	r0, r3
 801083c:	3710      	adds	r7, #16
 801083e:	46bd      	mov	sp, r7
 8010840:	bd80      	pop	{r7, pc}
	...

08010844 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010844:	b580      	push	{r7, lr}
 8010846:	b084      	sub	sp, #16
 8010848:	af00      	add	r7, sp, #0
 801084a:	6078      	str	r0, [r7, #4]
 801084c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 801084e:	2300      	movs	r3, #0
 8010850:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8010852:	2300      	movs	r3, #0
 8010854:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8010856:	2300      	movs	r3, #0
 8010858:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 801085a:	683b      	ldr	r3, [r7, #0]
 801085c:	885b      	ldrh	r3, [r3, #2]
 801085e:	0a1b      	lsrs	r3, r3, #8
 8010860:	b29b      	uxth	r3, r3
 8010862:	3b01      	subs	r3, #1
 8010864:	2b06      	cmp	r3, #6
 8010866:	f200 8128 	bhi.w	8010aba <USBD_GetDescriptor+0x276>
 801086a:	a201      	add	r2, pc, #4	; (adr r2, 8010870 <USBD_GetDescriptor+0x2c>)
 801086c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010870:	0801088d 	.word	0x0801088d
 8010874:	080108a5 	.word	0x080108a5
 8010878:	080108e5 	.word	0x080108e5
 801087c:	08010abb 	.word	0x08010abb
 8010880:	08010abb 	.word	0x08010abb
 8010884:	08010a5b 	.word	0x08010a5b
 8010888:	08010a87 	.word	0x08010a87
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 801088c:	687b      	ldr	r3, [r7, #4]
 801088e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010892:	681b      	ldr	r3, [r3, #0]
 8010894:	687a      	ldr	r2, [r7, #4]
 8010896:	7c12      	ldrb	r2, [r2, #16]
 8010898:	f107 0108 	add.w	r1, r7, #8
 801089c:	4610      	mov	r0, r2
 801089e:	4798      	blx	r3
 80108a0:	60f8      	str	r0, [r7, #12]
      break;
 80108a2:	e112      	b.n	8010aca <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80108a4:	687b      	ldr	r3, [r7, #4]
 80108a6:	7c1b      	ldrb	r3, [r3, #16]
 80108a8:	2b00      	cmp	r3, #0
 80108aa:	d10d      	bne.n	80108c8 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80108ac:	687b      	ldr	r3, [r7, #4]
 80108ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80108b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80108b4:	f107 0208 	add.w	r2, r7, #8
 80108b8:	4610      	mov	r0, r2
 80108ba:	4798      	blx	r3
 80108bc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80108be:	68fb      	ldr	r3, [r7, #12]
 80108c0:	3301      	adds	r3, #1
 80108c2:	2202      	movs	r2, #2
 80108c4:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80108c6:	e100      	b.n	8010aca <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80108c8:	687b      	ldr	r3, [r7, #4]
 80108ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80108ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80108d0:	f107 0208 	add.w	r2, r7, #8
 80108d4:	4610      	mov	r0, r2
 80108d6:	4798      	blx	r3
 80108d8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80108da:	68fb      	ldr	r3, [r7, #12]
 80108dc:	3301      	adds	r3, #1
 80108de:	2202      	movs	r2, #2
 80108e0:	701a      	strb	r2, [r3, #0]
      break;
 80108e2:	e0f2      	b.n	8010aca <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80108e4:	683b      	ldr	r3, [r7, #0]
 80108e6:	885b      	ldrh	r3, [r3, #2]
 80108e8:	b2db      	uxtb	r3, r3
 80108ea:	2b05      	cmp	r3, #5
 80108ec:	f200 80ac 	bhi.w	8010a48 <USBD_GetDescriptor+0x204>
 80108f0:	a201      	add	r2, pc, #4	; (adr r2, 80108f8 <USBD_GetDescriptor+0xb4>)
 80108f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80108f6:	bf00      	nop
 80108f8:	08010911 	.word	0x08010911
 80108fc:	08010945 	.word	0x08010945
 8010900:	08010979 	.word	0x08010979
 8010904:	080109ad 	.word	0x080109ad
 8010908:	080109e1 	.word	0x080109e1
 801090c:	08010a15 	.word	0x08010a15
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8010910:	687b      	ldr	r3, [r7, #4]
 8010912:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010916:	685b      	ldr	r3, [r3, #4]
 8010918:	2b00      	cmp	r3, #0
 801091a:	d00b      	beq.n	8010934 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 801091c:	687b      	ldr	r3, [r7, #4]
 801091e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010922:	685b      	ldr	r3, [r3, #4]
 8010924:	687a      	ldr	r2, [r7, #4]
 8010926:	7c12      	ldrb	r2, [r2, #16]
 8010928:	f107 0108 	add.w	r1, r7, #8
 801092c:	4610      	mov	r0, r2
 801092e:	4798      	blx	r3
 8010930:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8010932:	e091      	b.n	8010a58 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8010934:	6839      	ldr	r1, [r7, #0]
 8010936:	6878      	ldr	r0, [r7, #4]
 8010938:	f000 fab2 	bl	8010ea0 <USBD_CtlError>
            err++;
 801093c:	7afb      	ldrb	r3, [r7, #11]
 801093e:	3301      	adds	r3, #1
 8010940:	72fb      	strb	r3, [r7, #11]
          break;
 8010942:	e089      	b.n	8010a58 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8010944:	687b      	ldr	r3, [r7, #4]
 8010946:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801094a:	689b      	ldr	r3, [r3, #8]
 801094c:	2b00      	cmp	r3, #0
 801094e:	d00b      	beq.n	8010968 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8010950:	687b      	ldr	r3, [r7, #4]
 8010952:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010956:	689b      	ldr	r3, [r3, #8]
 8010958:	687a      	ldr	r2, [r7, #4]
 801095a:	7c12      	ldrb	r2, [r2, #16]
 801095c:	f107 0108 	add.w	r1, r7, #8
 8010960:	4610      	mov	r0, r2
 8010962:	4798      	blx	r3
 8010964:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8010966:	e077      	b.n	8010a58 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8010968:	6839      	ldr	r1, [r7, #0]
 801096a:	6878      	ldr	r0, [r7, #4]
 801096c:	f000 fa98 	bl	8010ea0 <USBD_CtlError>
            err++;
 8010970:	7afb      	ldrb	r3, [r7, #11]
 8010972:	3301      	adds	r3, #1
 8010974:	72fb      	strb	r3, [r7, #11]
          break;
 8010976:	e06f      	b.n	8010a58 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8010978:	687b      	ldr	r3, [r7, #4]
 801097a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801097e:	68db      	ldr	r3, [r3, #12]
 8010980:	2b00      	cmp	r3, #0
 8010982:	d00b      	beq.n	801099c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8010984:	687b      	ldr	r3, [r7, #4]
 8010986:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801098a:	68db      	ldr	r3, [r3, #12]
 801098c:	687a      	ldr	r2, [r7, #4]
 801098e:	7c12      	ldrb	r2, [r2, #16]
 8010990:	f107 0108 	add.w	r1, r7, #8
 8010994:	4610      	mov	r0, r2
 8010996:	4798      	blx	r3
 8010998:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801099a:	e05d      	b.n	8010a58 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 801099c:	6839      	ldr	r1, [r7, #0]
 801099e:	6878      	ldr	r0, [r7, #4]
 80109a0:	f000 fa7e 	bl	8010ea0 <USBD_CtlError>
            err++;
 80109a4:	7afb      	ldrb	r3, [r7, #11]
 80109a6:	3301      	adds	r3, #1
 80109a8:	72fb      	strb	r3, [r7, #11]
          break;
 80109aa:	e055      	b.n	8010a58 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80109ac:	687b      	ldr	r3, [r7, #4]
 80109ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80109b2:	691b      	ldr	r3, [r3, #16]
 80109b4:	2b00      	cmp	r3, #0
 80109b6:	d00b      	beq.n	80109d0 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80109b8:	687b      	ldr	r3, [r7, #4]
 80109ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80109be:	691b      	ldr	r3, [r3, #16]
 80109c0:	687a      	ldr	r2, [r7, #4]
 80109c2:	7c12      	ldrb	r2, [r2, #16]
 80109c4:	f107 0108 	add.w	r1, r7, #8
 80109c8:	4610      	mov	r0, r2
 80109ca:	4798      	blx	r3
 80109cc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80109ce:	e043      	b.n	8010a58 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80109d0:	6839      	ldr	r1, [r7, #0]
 80109d2:	6878      	ldr	r0, [r7, #4]
 80109d4:	f000 fa64 	bl	8010ea0 <USBD_CtlError>
            err++;
 80109d8:	7afb      	ldrb	r3, [r7, #11]
 80109da:	3301      	adds	r3, #1
 80109dc:	72fb      	strb	r3, [r7, #11]
          break;
 80109de:	e03b      	b.n	8010a58 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80109e0:	687b      	ldr	r3, [r7, #4]
 80109e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80109e6:	695b      	ldr	r3, [r3, #20]
 80109e8:	2b00      	cmp	r3, #0
 80109ea:	d00b      	beq.n	8010a04 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80109ec:	687b      	ldr	r3, [r7, #4]
 80109ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80109f2:	695b      	ldr	r3, [r3, #20]
 80109f4:	687a      	ldr	r2, [r7, #4]
 80109f6:	7c12      	ldrb	r2, [r2, #16]
 80109f8:	f107 0108 	add.w	r1, r7, #8
 80109fc:	4610      	mov	r0, r2
 80109fe:	4798      	blx	r3
 8010a00:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8010a02:	e029      	b.n	8010a58 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8010a04:	6839      	ldr	r1, [r7, #0]
 8010a06:	6878      	ldr	r0, [r7, #4]
 8010a08:	f000 fa4a 	bl	8010ea0 <USBD_CtlError>
            err++;
 8010a0c:	7afb      	ldrb	r3, [r7, #11]
 8010a0e:	3301      	adds	r3, #1
 8010a10:	72fb      	strb	r3, [r7, #11]
          break;
 8010a12:	e021      	b.n	8010a58 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8010a14:	687b      	ldr	r3, [r7, #4]
 8010a16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010a1a:	699b      	ldr	r3, [r3, #24]
 8010a1c:	2b00      	cmp	r3, #0
 8010a1e:	d00b      	beq.n	8010a38 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8010a20:	687b      	ldr	r3, [r7, #4]
 8010a22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010a26:	699b      	ldr	r3, [r3, #24]
 8010a28:	687a      	ldr	r2, [r7, #4]
 8010a2a:	7c12      	ldrb	r2, [r2, #16]
 8010a2c:	f107 0108 	add.w	r1, r7, #8
 8010a30:	4610      	mov	r0, r2
 8010a32:	4798      	blx	r3
 8010a34:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8010a36:	e00f      	b.n	8010a58 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8010a38:	6839      	ldr	r1, [r7, #0]
 8010a3a:	6878      	ldr	r0, [r7, #4]
 8010a3c:	f000 fa30 	bl	8010ea0 <USBD_CtlError>
            err++;
 8010a40:	7afb      	ldrb	r3, [r7, #11]
 8010a42:	3301      	adds	r3, #1
 8010a44:	72fb      	strb	r3, [r7, #11]
          break;
 8010a46:	e007      	b.n	8010a58 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8010a48:	6839      	ldr	r1, [r7, #0]
 8010a4a:	6878      	ldr	r0, [r7, #4]
 8010a4c:	f000 fa28 	bl	8010ea0 <USBD_CtlError>
          err++;
 8010a50:	7afb      	ldrb	r3, [r7, #11]
 8010a52:	3301      	adds	r3, #1
 8010a54:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8010a56:	bf00      	nop
      }
      break;
 8010a58:	e037      	b.n	8010aca <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8010a5a:	687b      	ldr	r3, [r7, #4]
 8010a5c:	7c1b      	ldrb	r3, [r3, #16]
 8010a5e:	2b00      	cmp	r3, #0
 8010a60:	d109      	bne.n	8010a76 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8010a62:	687b      	ldr	r3, [r7, #4]
 8010a64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010a68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010a6a:	f107 0208 	add.w	r2, r7, #8
 8010a6e:	4610      	mov	r0, r2
 8010a70:	4798      	blx	r3
 8010a72:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8010a74:	e029      	b.n	8010aca <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8010a76:	6839      	ldr	r1, [r7, #0]
 8010a78:	6878      	ldr	r0, [r7, #4]
 8010a7a:	f000 fa11 	bl	8010ea0 <USBD_CtlError>
        err++;
 8010a7e:	7afb      	ldrb	r3, [r7, #11]
 8010a80:	3301      	adds	r3, #1
 8010a82:	72fb      	strb	r3, [r7, #11]
      break;
 8010a84:	e021      	b.n	8010aca <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8010a86:	687b      	ldr	r3, [r7, #4]
 8010a88:	7c1b      	ldrb	r3, [r3, #16]
 8010a8a:	2b00      	cmp	r3, #0
 8010a8c:	d10d      	bne.n	8010aaa <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8010a8e:	687b      	ldr	r3, [r7, #4]
 8010a90:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010a96:	f107 0208 	add.w	r2, r7, #8
 8010a9a:	4610      	mov	r0, r2
 8010a9c:	4798      	blx	r3
 8010a9e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8010aa0:	68fb      	ldr	r3, [r7, #12]
 8010aa2:	3301      	adds	r3, #1
 8010aa4:	2207      	movs	r2, #7
 8010aa6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8010aa8:	e00f      	b.n	8010aca <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8010aaa:	6839      	ldr	r1, [r7, #0]
 8010aac:	6878      	ldr	r0, [r7, #4]
 8010aae:	f000 f9f7 	bl	8010ea0 <USBD_CtlError>
        err++;
 8010ab2:	7afb      	ldrb	r3, [r7, #11]
 8010ab4:	3301      	adds	r3, #1
 8010ab6:	72fb      	strb	r3, [r7, #11]
      break;
 8010ab8:	e007      	b.n	8010aca <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8010aba:	6839      	ldr	r1, [r7, #0]
 8010abc:	6878      	ldr	r0, [r7, #4]
 8010abe:	f000 f9ef 	bl	8010ea0 <USBD_CtlError>
      err++;
 8010ac2:	7afb      	ldrb	r3, [r7, #11]
 8010ac4:	3301      	adds	r3, #1
 8010ac6:	72fb      	strb	r3, [r7, #11]
      break;
 8010ac8:	bf00      	nop
  }

  if (err != 0U)
 8010aca:	7afb      	ldrb	r3, [r7, #11]
 8010acc:	2b00      	cmp	r3, #0
 8010ace:	d11e      	bne.n	8010b0e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8010ad0:	683b      	ldr	r3, [r7, #0]
 8010ad2:	88db      	ldrh	r3, [r3, #6]
 8010ad4:	2b00      	cmp	r3, #0
 8010ad6:	d016      	beq.n	8010b06 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8010ad8:	893b      	ldrh	r3, [r7, #8]
 8010ada:	2b00      	cmp	r3, #0
 8010adc:	d00e      	beq.n	8010afc <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8010ade:	683b      	ldr	r3, [r7, #0]
 8010ae0:	88da      	ldrh	r2, [r3, #6]
 8010ae2:	893b      	ldrh	r3, [r7, #8]
 8010ae4:	4293      	cmp	r3, r2
 8010ae6:	bf28      	it	cs
 8010ae8:	4613      	movcs	r3, r2
 8010aea:	b29b      	uxth	r3, r3
 8010aec:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8010aee:	893b      	ldrh	r3, [r7, #8]
 8010af0:	461a      	mov	r2, r3
 8010af2:	68f9      	ldr	r1, [r7, #12]
 8010af4:	6878      	ldr	r0, [r7, #4]
 8010af6:	f000 fa44 	bl	8010f82 <USBD_CtlSendData>
 8010afa:	e009      	b.n	8010b10 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8010afc:	6839      	ldr	r1, [r7, #0]
 8010afe:	6878      	ldr	r0, [r7, #4]
 8010b00:	f000 f9ce 	bl	8010ea0 <USBD_CtlError>
 8010b04:	e004      	b.n	8010b10 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8010b06:	6878      	ldr	r0, [r7, #4]
 8010b08:	f000 fa95 	bl	8011036 <USBD_CtlSendStatus>
 8010b0c:	e000      	b.n	8010b10 <USBD_GetDescriptor+0x2cc>
    return;
 8010b0e:	bf00      	nop
  }
}
 8010b10:	3710      	adds	r7, #16
 8010b12:	46bd      	mov	sp, r7
 8010b14:	bd80      	pop	{r7, pc}
 8010b16:	bf00      	nop

08010b18 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010b18:	b580      	push	{r7, lr}
 8010b1a:	b084      	sub	sp, #16
 8010b1c:	af00      	add	r7, sp, #0
 8010b1e:	6078      	str	r0, [r7, #4]
 8010b20:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8010b22:	683b      	ldr	r3, [r7, #0]
 8010b24:	889b      	ldrh	r3, [r3, #4]
 8010b26:	2b00      	cmp	r3, #0
 8010b28:	d131      	bne.n	8010b8e <USBD_SetAddress+0x76>
 8010b2a:	683b      	ldr	r3, [r7, #0]
 8010b2c:	88db      	ldrh	r3, [r3, #6]
 8010b2e:	2b00      	cmp	r3, #0
 8010b30:	d12d      	bne.n	8010b8e <USBD_SetAddress+0x76>
 8010b32:	683b      	ldr	r3, [r7, #0]
 8010b34:	885b      	ldrh	r3, [r3, #2]
 8010b36:	2b7f      	cmp	r3, #127	; 0x7f
 8010b38:	d829      	bhi.n	8010b8e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8010b3a:	683b      	ldr	r3, [r7, #0]
 8010b3c:	885b      	ldrh	r3, [r3, #2]
 8010b3e:	b2db      	uxtb	r3, r3
 8010b40:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010b44:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010b46:	687b      	ldr	r3, [r7, #4]
 8010b48:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010b4c:	b2db      	uxtb	r3, r3
 8010b4e:	2b03      	cmp	r3, #3
 8010b50:	d104      	bne.n	8010b5c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8010b52:	6839      	ldr	r1, [r7, #0]
 8010b54:	6878      	ldr	r0, [r7, #4]
 8010b56:	f000 f9a3 	bl	8010ea0 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010b5a:	e01d      	b.n	8010b98 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8010b5c:	687b      	ldr	r3, [r7, #4]
 8010b5e:	7bfa      	ldrb	r2, [r7, #15]
 8010b60:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8010b64:	7bfb      	ldrb	r3, [r7, #15]
 8010b66:	4619      	mov	r1, r3
 8010b68:	6878      	ldr	r0, [r7, #4]
 8010b6a:	f001 f821 	bl	8011bb0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8010b6e:	6878      	ldr	r0, [r7, #4]
 8010b70:	f000 fa61 	bl	8011036 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8010b74:	7bfb      	ldrb	r3, [r7, #15]
 8010b76:	2b00      	cmp	r3, #0
 8010b78:	d004      	beq.n	8010b84 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8010b7a:	687b      	ldr	r3, [r7, #4]
 8010b7c:	2202      	movs	r2, #2
 8010b7e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010b82:	e009      	b.n	8010b98 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8010b84:	687b      	ldr	r3, [r7, #4]
 8010b86:	2201      	movs	r2, #1
 8010b88:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010b8c:	e004      	b.n	8010b98 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8010b8e:	6839      	ldr	r1, [r7, #0]
 8010b90:	6878      	ldr	r0, [r7, #4]
 8010b92:	f000 f985 	bl	8010ea0 <USBD_CtlError>
  }
}
 8010b96:	bf00      	nop
 8010b98:	bf00      	nop
 8010b9a:	3710      	adds	r7, #16
 8010b9c:	46bd      	mov	sp, r7
 8010b9e:	bd80      	pop	{r7, pc}

08010ba0 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010ba0:	b580      	push	{r7, lr}
 8010ba2:	b084      	sub	sp, #16
 8010ba4:	af00      	add	r7, sp, #0
 8010ba6:	6078      	str	r0, [r7, #4]
 8010ba8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8010baa:	2300      	movs	r3, #0
 8010bac:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8010bae:	683b      	ldr	r3, [r7, #0]
 8010bb0:	885b      	ldrh	r3, [r3, #2]
 8010bb2:	b2da      	uxtb	r2, r3
 8010bb4:	4b4c      	ldr	r3, [pc, #304]	; (8010ce8 <USBD_SetConfig+0x148>)
 8010bb6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8010bb8:	4b4b      	ldr	r3, [pc, #300]	; (8010ce8 <USBD_SetConfig+0x148>)
 8010bba:	781b      	ldrb	r3, [r3, #0]
 8010bbc:	2b01      	cmp	r3, #1
 8010bbe:	d905      	bls.n	8010bcc <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8010bc0:	6839      	ldr	r1, [r7, #0]
 8010bc2:	6878      	ldr	r0, [r7, #4]
 8010bc4:	f000 f96c 	bl	8010ea0 <USBD_CtlError>
    return USBD_FAIL;
 8010bc8:	2303      	movs	r3, #3
 8010bca:	e088      	b.n	8010cde <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8010bcc:	687b      	ldr	r3, [r7, #4]
 8010bce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010bd2:	b2db      	uxtb	r3, r3
 8010bd4:	2b02      	cmp	r3, #2
 8010bd6:	d002      	beq.n	8010bde <USBD_SetConfig+0x3e>
 8010bd8:	2b03      	cmp	r3, #3
 8010bda:	d025      	beq.n	8010c28 <USBD_SetConfig+0x88>
 8010bdc:	e071      	b.n	8010cc2 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8010bde:	4b42      	ldr	r3, [pc, #264]	; (8010ce8 <USBD_SetConfig+0x148>)
 8010be0:	781b      	ldrb	r3, [r3, #0]
 8010be2:	2b00      	cmp	r3, #0
 8010be4:	d01c      	beq.n	8010c20 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8010be6:	4b40      	ldr	r3, [pc, #256]	; (8010ce8 <USBD_SetConfig+0x148>)
 8010be8:	781b      	ldrb	r3, [r3, #0]
 8010bea:	461a      	mov	r2, r3
 8010bec:	687b      	ldr	r3, [r7, #4]
 8010bee:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8010bf0:	4b3d      	ldr	r3, [pc, #244]	; (8010ce8 <USBD_SetConfig+0x148>)
 8010bf2:	781b      	ldrb	r3, [r3, #0]
 8010bf4:	4619      	mov	r1, r3
 8010bf6:	6878      	ldr	r0, [r7, #4]
 8010bf8:	f7ff f948 	bl	800fe8c <USBD_SetClassConfig>
 8010bfc:	4603      	mov	r3, r0
 8010bfe:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8010c00:	7bfb      	ldrb	r3, [r7, #15]
 8010c02:	2b00      	cmp	r3, #0
 8010c04:	d004      	beq.n	8010c10 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8010c06:	6839      	ldr	r1, [r7, #0]
 8010c08:	6878      	ldr	r0, [r7, #4]
 8010c0a:	f000 f949 	bl	8010ea0 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8010c0e:	e065      	b.n	8010cdc <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8010c10:	6878      	ldr	r0, [r7, #4]
 8010c12:	f000 fa10 	bl	8011036 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8010c16:	687b      	ldr	r3, [r7, #4]
 8010c18:	2203      	movs	r2, #3
 8010c1a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8010c1e:	e05d      	b.n	8010cdc <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8010c20:	6878      	ldr	r0, [r7, #4]
 8010c22:	f000 fa08 	bl	8011036 <USBD_CtlSendStatus>
      break;
 8010c26:	e059      	b.n	8010cdc <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8010c28:	4b2f      	ldr	r3, [pc, #188]	; (8010ce8 <USBD_SetConfig+0x148>)
 8010c2a:	781b      	ldrb	r3, [r3, #0]
 8010c2c:	2b00      	cmp	r3, #0
 8010c2e:	d112      	bne.n	8010c56 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8010c30:	687b      	ldr	r3, [r7, #4]
 8010c32:	2202      	movs	r2, #2
 8010c34:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8010c38:	4b2b      	ldr	r3, [pc, #172]	; (8010ce8 <USBD_SetConfig+0x148>)
 8010c3a:	781b      	ldrb	r3, [r3, #0]
 8010c3c:	461a      	mov	r2, r3
 8010c3e:	687b      	ldr	r3, [r7, #4]
 8010c40:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8010c42:	4b29      	ldr	r3, [pc, #164]	; (8010ce8 <USBD_SetConfig+0x148>)
 8010c44:	781b      	ldrb	r3, [r3, #0]
 8010c46:	4619      	mov	r1, r3
 8010c48:	6878      	ldr	r0, [r7, #4]
 8010c4a:	f7ff f93b 	bl	800fec4 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8010c4e:	6878      	ldr	r0, [r7, #4]
 8010c50:	f000 f9f1 	bl	8011036 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8010c54:	e042      	b.n	8010cdc <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8010c56:	4b24      	ldr	r3, [pc, #144]	; (8010ce8 <USBD_SetConfig+0x148>)
 8010c58:	781b      	ldrb	r3, [r3, #0]
 8010c5a:	461a      	mov	r2, r3
 8010c5c:	687b      	ldr	r3, [r7, #4]
 8010c5e:	685b      	ldr	r3, [r3, #4]
 8010c60:	429a      	cmp	r2, r3
 8010c62:	d02a      	beq.n	8010cba <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8010c64:	687b      	ldr	r3, [r7, #4]
 8010c66:	685b      	ldr	r3, [r3, #4]
 8010c68:	b2db      	uxtb	r3, r3
 8010c6a:	4619      	mov	r1, r3
 8010c6c:	6878      	ldr	r0, [r7, #4]
 8010c6e:	f7ff f929 	bl	800fec4 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8010c72:	4b1d      	ldr	r3, [pc, #116]	; (8010ce8 <USBD_SetConfig+0x148>)
 8010c74:	781b      	ldrb	r3, [r3, #0]
 8010c76:	461a      	mov	r2, r3
 8010c78:	687b      	ldr	r3, [r7, #4]
 8010c7a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8010c7c:	4b1a      	ldr	r3, [pc, #104]	; (8010ce8 <USBD_SetConfig+0x148>)
 8010c7e:	781b      	ldrb	r3, [r3, #0]
 8010c80:	4619      	mov	r1, r3
 8010c82:	6878      	ldr	r0, [r7, #4]
 8010c84:	f7ff f902 	bl	800fe8c <USBD_SetClassConfig>
 8010c88:	4603      	mov	r3, r0
 8010c8a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8010c8c:	7bfb      	ldrb	r3, [r7, #15]
 8010c8e:	2b00      	cmp	r3, #0
 8010c90:	d00f      	beq.n	8010cb2 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8010c92:	6839      	ldr	r1, [r7, #0]
 8010c94:	6878      	ldr	r0, [r7, #4]
 8010c96:	f000 f903 	bl	8010ea0 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8010c9a:	687b      	ldr	r3, [r7, #4]
 8010c9c:	685b      	ldr	r3, [r3, #4]
 8010c9e:	b2db      	uxtb	r3, r3
 8010ca0:	4619      	mov	r1, r3
 8010ca2:	6878      	ldr	r0, [r7, #4]
 8010ca4:	f7ff f90e 	bl	800fec4 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8010ca8:	687b      	ldr	r3, [r7, #4]
 8010caa:	2202      	movs	r2, #2
 8010cac:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8010cb0:	e014      	b.n	8010cdc <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8010cb2:	6878      	ldr	r0, [r7, #4]
 8010cb4:	f000 f9bf 	bl	8011036 <USBD_CtlSendStatus>
      break;
 8010cb8:	e010      	b.n	8010cdc <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8010cba:	6878      	ldr	r0, [r7, #4]
 8010cbc:	f000 f9bb 	bl	8011036 <USBD_CtlSendStatus>
      break;
 8010cc0:	e00c      	b.n	8010cdc <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8010cc2:	6839      	ldr	r1, [r7, #0]
 8010cc4:	6878      	ldr	r0, [r7, #4]
 8010cc6:	f000 f8eb 	bl	8010ea0 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8010cca:	4b07      	ldr	r3, [pc, #28]	; (8010ce8 <USBD_SetConfig+0x148>)
 8010ccc:	781b      	ldrb	r3, [r3, #0]
 8010cce:	4619      	mov	r1, r3
 8010cd0:	6878      	ldr	r0, [r7, #4]
 8010cd2:	f7ff f8f7 	bl	800fec4 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8010cd6:	2303      	movs	r3, #3
 8010cd8:	73fb      	strb	r3, [r7, #15]
      break;
 8010cda:	bf00      	nop
  }

  return ret;
 8010cdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8010cde:	4618      	mov	r0, r3
 8010ce0:	3710      	adds	r7, #16
 8010ce2:	46bd      	mov	sp, r7
 8010ce4:	bd80      	pop	{r7, pc}
 8010ce6:	bf00      	nop
 8010ce8:	200004e0 	.word	0x200004e0

08010cec <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010cec:	b580      	push	{r7, lr}
 8010cee:	b082      	sub	sp, #8
 8010cf0:	af00      	add	r7, sp, #0
 8010cf2:	6078      	str	r0, [r7, #4]
 8010cf4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8010cf6:	683b      	ldr	r3, [r7, #0]
 8010cf8:	88db      	ldrh	r3, [r3, #6]
 8010cfa:	2b01      	cmp	r3, #1
 8010cfc:	d004      	beq.n	8010d08 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8010cfe:	6839      	ldr	r1, [r7, #0]
 8010d00:	6878      	ldr	r0, [r7, #4]
 8010d02:	f000 f8cd 	bl	8010ea0 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8010d06:	e023      	b.n	8010d50 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8010d08:	687b      	ldr	r3, [r7, #4]
 8010d0a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010d0e:	b2db      	uxtb	r3, r3
 8010d10:	2b02      	cmp	r3, #2
 8010d12:	dc02      	bgt.n	8010d1a <USBD_GetConfig+0x2e>
 8010d14:	2b00      	cmp	r3, #0
 8010d16:	dc03      	bgt.n	8010d20 <USBD_GetConfig+0x34>
 8010d18:	e015      	b.n	8010d46 <USBD_GetConfig+0x5a>
 8010d1a:	2b03      	cmp	r3, #3
 8010d1c:	d00b      	beq.n	8010d36 <USBD_GetConfig+0x4a>
 8010d1e:	e012      	b.n	8010d46 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8010d20:	687b      	ldr	r3, [r7, #4]
 8010d22:	2200      	movs	r2, #0
 8010d24:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8010d26:	687b      	ldr	r3, [r7, #4]
 8010d28:	3308      	adds	r3, #8
 8010d2a:	2201      	movs	r2, #1
 8010d2c:	4619      	mov	r1, r3
 8010d2e:	6878      	ldr	r0, [r7, #4]
 8010d30:	f000 f927 	bl	8010f82 <USBD_CtlSendData>
        break;
 8010d34:	e00c      	b.n	8010d50 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8010d36:	687b      	ldr	r3, [r7, #4]
 8010d38:	3304      	adds	r3, #4
 8010d3a:	2201      	movs	r2, #1
 8010d3c:	4619      	mov	r1, r3
 8010d3e:	6878      	ldr	r0, [r7, #4]
 8010d40:	f000 f91f 	bl	8010f82 <USBD_CtlSendData>
        break;
 8010d44:	e004      	b.n	8010d50 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8010d46:	6839      	ldr	r1, [r7, #0]
 8010d48:	6878      	ldr	r0, [r7, #4]
 8010d4a:	f000 f8a9 	bl	8010ea0 <USBD_CtlError>
        break;
 8010d4e:	bf00      	nop
}
 8010d50:	bf00      	nop
 8010d52:	3708      	adds	r7, #8
 8010d54:	46bd      	mov	sp, r7
 8010d56:	bd80      	pop	{r7, pc}

08010d58 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010d58:	b580      	push	{r7, lr}
 8010d5a:	b082      	sub	sp, #8
 8010d5c:	af00      	add	r7, sp, #0
 8010d5e:	6078      	str	r0, [r7, #4]
 8010d60:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8010d62:	687b      	ldr	r3, [r7, #4]
 8010d64:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010d68:	b2db      	uxtb	r3, r3
 8010d6a:	3b01      	subs	r3, #1
 8010d6c:	2b02      	cmp	r3, #2
 8010d6e:	d81e      	bhi.n	8010dae <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8010d70:	683b      	ldr	r3, [r7, #0]
 8010d72:	88db      	ldrh	r3, [r3, #6]
 8010d74:	2b02      	cmp	r3, #2
 8010d76:	d004      	beq.n	8010d82 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8010d78:	6839      	ldr	r1, [r7, #0]
 8010d7a:	6878      	ldr	r0, [r7, #4]
 8010d7c:	f000 f890 	bl	8010ea0 <USBD_CtlError>
        break;
 8010d80:	e01a      	b.n	8010db8 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8010d82:	687b      	ldr	r3, [r7, #4]
 8010d84:	2201      	movs	r2, #1
 8010d86:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8010d88:	687b      	ldr	r3, [r7, #4]
 8010d8a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8010d8e:	2b00      	cmp	r3, #0
 8010d90:	d005      	beq.n	8010d9e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8010d92:	687b      	ldr	r3, [r7, #4]
 8010d94:	68db      	ldr	r3, [r3, #12]
 8010d96:	f043 0202 	orr.w	r2, r3, #2
 8010d9a:	687b      	ldr	r3, [r7, #4]
 8010d9c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8010d9e:	687b      	ldr	r3, [r7, #4]
 8010da0:	330c      	adds	r3, #12
 8010da2:	2202      	movs	r2, #2
 8010da4:	4619      	mov	r1, r3
 8010da6:	6878      	ldr	r0, [r7, #4]
 8010da8:	f000 f8eb 	bl	8010f82 <USBD_CtlSendData>
      break;
 8010dac:	e004      	b.n	8010db8 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8010dae:	6839      	ldr	r1, [r7, #0]
 8010db0:	6878      	ldr	r0, [r7, #4]
 8010db2:	f000 f875 	bl	8010ea0 <USBD_CtlError>
      break;
 8010db6:	bf00      	nop
  }
}
 8010db8:	bf00      	nop
 8010dba:	3708      	adds	r7, #8
 8010dbc:	46bd      	mov	sp, r7
 8010dbe:	bd80      	pop	{r7, pc}

08010dc0 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010dc0:	b580      	push	{r7, lr}
 8010dc2:	b082      	sub	sp, #8
 8010dc4:	af00      	add	r7, sp, #0
 8010dc6:	6078      	str	r0, [r7, #4]
 8010dc8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8010dca:	683b      	ldr	r3, [r7, #0]
 8010dcc:	885b      	ldrh	r3, [r3, #2]
 8010dce:	2b01      	cmp	r3, #1
 8010dd0:	d106      	bne.n	8010de0 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8010dd2:	687b      	ldr	r3, [r7, #4]
 8010dd4:	2201      	movs	r2, #1
 8010dd6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8010dda:	6878      	ldr	r0, [r7, #4]
 8010ddc:	f000 f92b 	bl	8011036 <USBD_CtlSendStatus>
  }
}
 8010de0:	bf00      	nop
 8010de2:	3708      	adds	r7, #8
 8010de4:	46bd      	mov	sp, r7
 8010de6:	bd80      	pop	{r7, pc}

08010de8 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010de8:	b580      	push	{r7, lr}
 8010dea:	b082      	sub	sp, #8
 8010dec:	af00      	add	r7, sp, #0
 8010dee:	6078      	str	r0, [r7, #4]
 8010df0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8010df2:	687b      	ldr	r3, [r7, #4]
 8010df4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010df8:	b2db      	uxtb	r3, r3
 8010dfa:	3b01      	subs	r3, #1
 8010dfc:	2b02      	cmp	r3, #2
 8010dfe:	d80b      	bhi.n	8010e18 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8010e00:	683b      	ldr	r3, [r7, #0]
 8010e02:	885b      	ldrh	r3, [r3, #2]
 8010e04:	2b01      	cmp	r3, #1
 8010e06:	d10c      	bne.n	8010e22 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8010e08:	687b      	ldr	r3, [r7, #4]
 8010e0a:	2200      	movs	r2, #0
 8010e0c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8010e10:	6878      	ldr	r0, [r7, #4]
 8010e12:	f000 f910 	bl	8011036 <USBD_CtlSendStatus>
      }
      break;
 8010e16:	e004      	b.n	8010e22 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8010e18:	6839      	ldr	r1, [r7, #0]
 8010e1a:	6878      	ldr	r0, [r7, #4]
 8010e1c:	f000 f840 	bl	8010ea0 <USBD_CtlError>
      break;
 8010e20:	e000      	b.n	8010e24 <USBD_ClrFeature+0x3c>
      break;
 8010e22:	bf00      	nop
  }
}
 8010e24:	bf00      	nop
 8010e26:	3708      	adds	r7, #8
 8010e28:	46bd      	mov	sp, r7
 8010e2a:	bd80      	pop	{r7, pc}

08010e2c <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8010e2c:	b580      	push	{r7, lr}
 8010e2e:	b084      	sub	sp, #16
 8010e30:	af00      	add	r7, sp, #0
 8010e32:	6078      	str	r0, [r7, #4]
 8010e34:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8010e36:	683b      	ldr	r3, [r7, #0]
 8010e38:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8010e3a:	68fb      	ldr	r3, [r7, #12]
 8010e3c:	781a      	ldrb	r2, [r3, #0]
 8010e3e:	687b      	ldr	r3, [r7, #4]
 8010e40:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8010e42:	68fb      	ldr	r3, [r7, #12]
 8010e44:	3301      	adds	r3, #1
 8010e46:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8010e48:	68fb      	ldr	r3, [r7, #12]
 8010e4a:	781a      	ldrb	r2, [r3, #0]
 8010e4c:	687b      	ldr	r3, [r7, #4]
 8010e4e:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8010e50:	68fb      	ldr	r3, [r7, #12]
 8010e52:	3301      	adds	r3, #1
 8010e54:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8010e56:	68f8      	ldr	r0, [r7, #12]
 8010e58:	f7ff fabb 	bl	80103d2 <SWAPBYTE>
 8010e5c:	4603      	mov	r3, r0
 8010e5e:	461a      	mov	r2, r3
 8010e60:	687b      	ldr	r3, [r7, #4]
 8010e62:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8010e64:	68fb      	ldr	r3, [r7, #12]
 8010e66:	3301      	adds	r3, #1
 8010e68:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8010e6a:	68fb      	ldr	r3, [r7, #12]
 8010e6c:	3301      	adds	r3, #1
 8010e6e:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8010e70:	68f8      	ldr	r0, [r7, #12]
 8010e72:	f7ff faae 	bl	80103d2 <SWAPBYTE>
 8010e76:	4603      	mov	r3, r0
 8010e78:	461a      	mov	r2, r3
 8010e7a:	687b      	ldr	r3, [r7, #4]
 8010e7c:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8010e7e:	68fb      	ldr	r3, [r7, #12]
 8010e80:	3301      	adds	r3, #1
 8010e82:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8010e84:	68fb      	ldr	r3, [r7, #12]
 8010e86:	3301      	adds	r3, #1
 8010e88:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8010e8a:	68f8      	ldr	r0, [r7, #12]
 8010e8c:	f7ff faa1 	bl	80103d2 <SWAPBYTE>
 8010e90:	4603      	mov	r3, r0
 8010e92:	461a      	mov	r2, r3
 8010e94:	687b      	ldr	r3, [r7, #4]
 8010e96:	80da      	strh	r2, [r3, #6]
}
 8010e98:	bf00      	nop
 8010e9a:	3710      	adds	r7, #16
 8010e9c:	46bd      	mov	sp, r7
 8010e9e:	bd80      	pop	{r7, pc}

08010ea0 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010ea0:	b580      	push	{r7, lr}
 8010ea2:	b082      	sub	sp, #8
 8010ea4:	af00      	add	r7, sp, #0
 8010ea6:	6078      	str	r0, [r7, #4]
 8010ea8:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8010eaa:	2180      	movs	r1, #128	; 0x80
 8010eac:	6878      	ldr	r0, [r7, #4]
 8010eae:	f000 fe15 	bl	8011adc <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8010eb2:	2100      	movs	r1, #0
 8010eb4:	6878      	ldr	r0, [r7, #4]
 8010eb6:	f000 fe11 	bl	8011adc <USBD_LL_StallEP>
}
 8010eba:	bf00      	nop
 8010ebc:	3708      	adds	r7, #8
 8010ebe:	46bd      	mov	sp, r7
 8010ec0:	bd80      	pop	{r7, pc}

08010ec2 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8010ec2:	b580      	push	{r7, lr}
 8010ec4:	b086      	sub	sp, #24
 8010ec6:	af00      	add	r7, sp, #0
 8010ec8:	60f8      	str	r0, [r7, #12]
 8010eca:	60b9      	str	r1, [r7, #8]
 8010ecc:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8010ece:	2300      	movs	r3, #0
 8010ed0:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8010ed2:	68fb      	ldr	r3, [r7, #12]
 8010ed4:	2b00      	cmp	r3, #0
 8010ed6:	d036      	beq.n	8010f46 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8010ed8:	68fb      	ldr	r3, [r7, #12]
 8010eda:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8010edc:	6938      	ldr	r0, [r7, #16]
 8010ede:	f000 f836 	bl	8010f4e <USBD_GetLen>
 8010ee2:	4603      	mov	r3, r0
 8010ee4:	3301      	adds	r3, #1
 8010ee6:	b29b      	uxth	r3, r3
 8010ee8:	005b      	lsls	r3, r3, #1
 8010eea:	b29a      	uxth	r2, r3
 8010eec:	687b      	ldr	r3, [r7, #4]
 8010eee:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8010ef0:	7dfb      	ldrb	r3, [r7, #23]
 8010ef2:	68ba      	ldr	r2, [r7, #8]
 8010ef4:	4413      	add	r3, r2
 8010ef6:	687a      	ldr	r2, [r7, #4]
 8010ef8:	7812      	ldrb	r2, [r2, #0]
 8010efa:	701a      	strb	r2, [r3, #0]
  idx++;
 8010efc:	7dfb      	ldrb	r3, [r7, #23]
 8010efe:	3301      	adds	r3, #1
 8010f00:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8010f02:	7dfb      	ldrb	r3, [r7, #23]
 8010f04:	68ba      	ldr	r2, [r7, #8]
 8010f06:	4413      	add	r3, r2
 8010f08:	2203      	movs	r2, #3
 8010f0a:	701a      	strb	r2, [r3, #0]
  idx++;
 8010f0c:	7dfb      	ldrb	r3, [r7, #23]
 8010f0e:	3301      	adds	r3, #1
 8010f10:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8010f12:	e013      	b.n	8010f3c <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8010f14:	7dfb      	ldrb	r3, [r7, #23]
 8010f16:	68ba      	ldr	r2, [r7, #8]
 8010f18:	4413      	add	r3, r2
 8010f1a:	693a      	ldr	r2, [r7, #16]
 8010f1c:	7812      	ldrb	r2, [r2, #0]
 8010f1e:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8010f20:	693b      	ldr	r3, [r7, #16]
 8010f22:	3301      	adds	r3, #1
 8010f24:	613b      	str	r3, [r7, #16]
    idx++;
 8010f26:	7dfb      	ldrb	r3, [r7, #23]
 8010f28:	3301      	adds	r3, #1
 8010f2a:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8010f2c:	7dfb      	ldrb	r3, [r7, #23]
 8010f2e:	68ba      	ldr	r2, [r7, #8]
 8010f30:	4413      	add	r3, r2
 8010f32:	2200      	movs	r2, #0
 8010f34:	701a      	strb	r2, [r3, #0]
    idx++;
 8010f36:	7dfb      	ldrb	r3, [r7, #23]
 8010f38:	3301      	adds	r3, #1
 8010f3a:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8010f3c:	693b      	ldr	r3, [r7, #16]
 8010f3e:	781b      	ldrb	r3, [r3, #0]
 8010f40:	2b00      	cmp	r3, #0
 8010f42:	d1e7      	bne.n	8010f14 <USBD_GetString+0x52>
 8010f44:	e000      	b.n	8010f48 <USBD_GetString+0x86>
    return;
 8010f46:	bf00      	nop
  }
}
 8010f48:	3718      	adds	r7, #24
 8010f4a:	46bd      	mov	sp, r7
 8010f4c:	bd80      	pop	{r7, pc}

08010f4e <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8010f4e:	b480      	push	{r7}
 8010f50:	b085      	sub	sp, #20
 8010f52:	af00      	add	r7, sp, #0
 8010f54:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8010f56:	2300      	movs	r3, #0
 8010f58:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8010f5a:	687b      	ldr	r3, [r7, #4]
 8010f5c:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8010f5e:	e005      	b.n	8010f6c <USBD_GetLen+0x1e>
  {
    len++;
 8010f60:	7bfb      	ldrb	r3, [r7, #15]
 8010f62:	3301      	adds	r3, #1
 8010f64:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8010f66:	68bb      	ldr	r3, [r7, #8]
 8010f68:	3301      	adds	r3, #1
 8010f6a:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8010f6c:	68bb      	ldr	r3, [r7, #8]
 8010f6e:	781b      	ldrb	r3, [r3, #0]
 8010f70:	2b00      	cmp	r3, #0
 8010f72:	d1f5      	bne.n	8010f60 <USBD_GetLen+0x12>
  }

  return len;
 8010f74:	7bfb      	ldrb	r3, [r7, #15]
}
 8010f76:	4618      	mov	r0, r3
 8010f78:	3714      	adds	r7, #20
 8010f7a:	46bd      	mov	sp, r7
 8010f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f80:	4770      	bx	lr

08010f82 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8010f82:	b580      	push	{r7, lr}
 8010f84:	b084      	sub	sp, #16
 8010f86:	af00      	add	r7, sp, #0
 8010f88:	60f8      	str	r0, [r7, #12]
 8010f8a:	60b9      	str	r1, [r7, #8]
 8010f8c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8010f8e:	68fb      	ldr	r3, [r7, #12]
 8010f90:	2202      	movs	r2, #2
 8010f92:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8010f96:	68fb      	ldr	r3, [r7, #12]
 8010f98:	687a      	ldr	r2, [r7, #4]
 8010f9a:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8010f9c:	68fb      	ldr	r3, [r7, #12]
 8010f9e:	687a      	ldr	r2, [r7, #4]
 8010fa0:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8010fa2:	687b      	ldr	r3, [r7, #4]
 8010fa4:	68ba      	ldr	r2, [r7, #8]
 8010fa6:	2100      	movs	r1, #0
 8010fa8:	68f8      	ldr	r0, [r7, #12]
 8010faa:	f000 fe20 	bl	8011bee <USBD_LL_Transmit>

  return USBD_OK;
 8010fae:	2300      	movs	r3, #0
}
 8010fb0:	4618      	mov	r0, r3
 8010fb2:	3710      	adds	r7, #16
 8010fb4:	46bd      	mov	sp, r7
 8010fb6:	bd80      	pop	{r7, pc}

08010fb8 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8010fb8:	b580      	push	{r7, lr}
 8010fba:	b084      	sub	sp, #16
 8010fbc:	af00      	add	r7, sp, #0
 8010fbe:	60f8      	str	r0, [r7, #12]
 8010fc0:	60b9      	str	r1, [r7, #8]
 8010fc2:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8010fc4:	687b      	ldr	r3, [r7, #4]
 8010fc6:	68ba      	ldr	r2, [r7, #8]
 8010fc8:	2100      	movs	r1, #0
 8010fca:	68f8      	ldr	r0, [r7, #12]
 8010fcc:	f000 fe0f 	bl	8011bee <USBD_LL_Transmit>

  return USBD_OK;
 8010fd0:	2300      	movs	r3, #0
}
 8010fd2:	4618      	mov	r0, r3
 8010fd4:	3710      	adds	r7, #16
 8010fd6:	46bd      	mov	sp, r7
 8010fd8:	bd80      	pop	{r7, pc}

08010fda <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8010fda:	b580      	push	{r7, lr}
 8010fdc:	b084      	sub	sp, #16
 8010fde:	af00      	add	r7, sp, #0
 8010fe0:	60f8      	str	r0, [r7, #12]
 8010fe2:	60b9      	str	r1, [r7, #8]
 8010fe4:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8010fe6:	68fb      	ldr	r3, [r7, #12]
 8010fe8:	2203      	movs	r2, #3
 8010fea:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8010fee:	68fb      	ldr	r3, [r7, #12]
 8010ff0:	687a      	ldr	r2, [r7, #4]
 8010ff2:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8010ff6:	68fb      	ldr	r3, [r7, #12]
 8010ff8:	687a      	ldr	r2, [r7, #4]
 8010ffa:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8010ffe:	687b      	ldr	r3, [r7, #4]
 8011000:	68ba      	ldr	r2, [r7, #8]
 8011002:	2100      	movs	r1, #0
 8011004:	68f8      	ldr	r0, [r7, #12]
 8011006:	f000 fe13 	bl	8011c30 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801100a:	2300      	movs	r3, #0
}
 801100c:	4618      	mov	r0, r3
 801100e:	3710      	adds	r7, #16
 8011010:	46bd      	mov	sp, r7
 8011012:	bd80      	pop	{r7, pc}

08011014 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8011014:	b580      	push	{r7, lr}
 8011016:	b084      	sub	sp, #16
 8011018:	af00      	add	r7, sp, #0
 801101a:	60f8      	str	r0, [r7, #12]
 801101c:	60b9      	str	r1, [r7, #8]
 801101e:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8011020:	687b      	ldr	r3, [r7, #4]
 8011022:	68ba      	ldr	r2, [r7, #8]
 8011024:	2100      	movs	r1, #0
 8011026:	68f8      	ldr	r0, [r7, #12]
 8011028:	f000 fe02 	bl	8011c30 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801102c:	2300      	movs	r3, #0
}
 801102e:	4618      	mov	r0, r3
 8011030:	3710      	adds	r7, #16
 8011032:	46bd      	mov	sp, r7
 8011034:	bd80      	pop	{r7, pc}

08011036 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8011036:	b580      	push	{r7, lr}
 8011038:	b082      	sub	sp, #8
 801103a:	af00      	add	r7, sp, #0
 801103c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 801103e:	687b      	ldr	r3, [r7, #4]
 8011040:	2204      	movs	r2, #4
 8011042:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8011046:	2300      	movs	r3, #0
 8011048:	2200      	movs	r2, #0
 801104a:	2100      	movs	r1, #0
 801104c:	6878      	ldr	r0, [r7, #4]
 801104e:	f000 fdce 	bl	8011bee <USBD_LL_Transmit>

  return USBD_OK;
 8011052:	2300      	movs	r3, #0
}
 8011054:	4618      	mov	r0, r3
 8011056:	3708      	adds	r7, #8
 8011058:	46bd      	mov	sp, r7
 801105a:	bd80      	pop	{r7, pc}

0801105c <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 801105c:	b580      	push	{r7, lr}
 801105e:	b082      	sub	sp, #8
 8011060:	af00      	add	r7, sp, #0
 8011062:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8011064:	687b      	ldr	r3, [r7, #4]
 8011066:	2205      	movs	r2, #5
 8011068:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801106c:	2300      	movs	r3, #0
 801106e:	2200      	movs	r2, #0
 8011070:	2100      	movs	r1, #0
 8011072:	6878      	ldr	r0, [r7, #4]
 8011074:	f000 fddc 	bl	8011c30 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8011078:	2300      	movs	r3, #0
}
 801107a:	4618      	mov	r0, r3
 801107c:	3708      	adds	r7, #8
 801107e:	46bd      	mov	sp, r7
 8011080:	bd80      	pop	{r7, pc}
	...

08011084 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8011084:	b580      	push	{r7, lr}
 8011086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8011088:	2200      	movs	r2, #0
 801108a:	4912      	ldr	r1, [pc, #72]	; (80110d4 <MX_USB_DEVICE_Init+0x50>)
 801108c:	4812      	ldr	r0, [pc, #72]	; (80110d8 <MX_USB_DEVICE_Init+0x54>)
 801108e:	f7fe fe8f 	bl	800fdb0 <USBD_Init>
 8011092:	4603      	mov	r3, r0
 8011094:	2b00      	cmp	r3, #0
 8011096:	d001      	beq.n	801109c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8011098:	f7f7 fb6a 	bl	8008770 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 801109c:	490f      	ldr	r1, [pc, #60]	; (80110dc <MX_USB_DEVICE_Init+0x58>)
 801109e:	480e      	ldr	r0, [pc, #56]	; (80110d8 <MX_USB_DEVICE_Init+0x54>)
 80110a0:	f7fe feb6 	bl	800fe10 <USBD_RegisterClass>
 80110a4:	4603      	mov	r3, r0
 80110a6:	2b00      	cmp	r3, #0
 80110a8:	d001      	beq.n	80110ae <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80110aa:	f7f7 fb61 	bl	8008770 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80110ae:	490c      	ldr	r1, [pc, #48]	; (80110e0 <MX_USB_DEVICE_Init+0x5c>)
 80110b0:	4809      	ldr	r0, [pc, #36]	; (80110d8 <MX_USB_DEVICE_Init+0x54>)
 80110b2:	f7fe fdd7 	bl	800fc64 <USBD_CDC_RegisterInterface>
 80110b6:	4603      	mov	r3, r0
 80110b8:	2b00      	cmp	r3, #0
 80110ba:	d001      	beq.n	80110c0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80110bc:	f7f7 fb58 	bl	8008770 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80110c0:	4805      	ldr	r0, [pc, #20]	; (80110d8 <MX_USB_DEVICE_Init+0x54>)
 80110c2:	f7fe fecc 	bl	800fe5e <USBD_Start>
 80110c6:	4603      	mov	r3, r0
 80110c8:	2b00      	cmp	r3, #0
 80110ca:	d001      	beq.n	80110d0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80110cc:	f7f7 fb50 	bl	8008770 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80110d0:	bf00      	nop
 80110d2:	bd80      	pop	{r7, pc}
 80110d4:	20000158 	.word	0x20000158
 80110d8:	200004e4 	.word	0x200004e4
 80110dc:	2000003c 	.word	0x2000003c
 80110e0:	20000144 	.word	0x20000144

080110e4 <cdcAvailable>:
uint32_t  rx_len=512;
uint8_t   rx_buf[512];
bool      rx_full = false;

uint32_t cdcAvailable(void)
{
 80110e4:	b480      	push	{r7}
 80110e6:	b083      	sub	sp, #12
 80110e8:	af00      	add	r7, sp, #0
	uint32_t ret;

	ret = (rx_in - rx_out) % rx_len;
 80110ea:	4b0a      	ldr	r3, [pc, #40]	; (8011114 <cdcAvailable+0x30>)
 80110ec:	681a      	ldr	r2, [r3, #0]
 80110ee:	4b0a      	ldr	r3, [pc, #40]	; (8011118 <cdcAvailable+0x34>)
 80110f0:	681b      	ldr	r3, [r3, #0]
 80110f2:	1ad3      	subs	r3, r2, r3
 80110f4:	4a09      	ldr	r2, [pc, #36]	; (801111c <cdcAvailable+0x38>)
 80110f6:	6812      	ldr	r2, [r2, #0]
 80110f8:	fbb3 f1f2 	udiv	r1, r3, r2
 80110fc:	fb01 f202 	mul.w	r2, r1, r2
 8011100:	1a9b      	subs	r3, r3, r2
 8011102:	607b      	str	r3, [r7, #4]

	return ret;
 8011104:	687b      	ldr	r3, [r7, #4]
}
 8011106:	4618      	mov	r0, r3
 8011108:	370c      	adds	r7, #12
 801110a:	46bd      	mov	sp, r7
 801110c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011110:	4770      	bx	lr
 8011112:	bf00      	nop
 8011114:	200007bc 	.word	0x200007bc
 8011118:	200007c0 	.word	0x200007c0
 801111c:	20000140 	.word	0x20000140

08011120 <cdcRead>:

uint8_t cdcRead(void)
{
 8011120:	b480      	push	{r7}
 8011122:	b083      	sub	sp, #12
 8011124:	af00      	add	r7, sp, #0
  /* 1. Read Data and return
   * 2. rx_out index increase
   * */
	uint8_t ret;
	ret = rx_buf[rx_out];
 8011126:	4b0f      	ldr	r3, [pc, #60]	; (8011164 <cdcRead+0x44>)
 8011128:	681b      	ldr	r3, [r3, #0]
 801112a:	4a0f      	ldr	r2, [pc, #60]	; (8011168 <cdcRead+0x48>)
 801112c:	5cd3      	ldrb	r3, [r2, r3]
 801112e:	71fb      	strb	r3, [r7, #7]

	if(rx_out != rx_in)
 8011130:	4b0c      	ldr	r3, [pc, #48]	; (8011164 <cdcRead+0x44>)
 8011132:	681a      	ldr	r2, [r3, #0]
 8011134:	4b0d      	ldr	r3, [pc, #52]	; (801116c <cdcRead+0x4c>)
 8011136:	681b      	ldr	r3, [r3, #0]
 8011138:	429a      	cmp	r2, r3
 801113a:	d00b      	beq.n	8011154 <cdcRead+0x34>
	{
		rx_out = (rx_out + 1) % rx_len;
 801113c:	4b09      	ldr	r3, [pc, #36]	; (8011164 <cdcRead+0x44>)
 801113e:	681b      	ldr	r3, [r3, #0]
 8011140:	3301      	adds	r3, #1
 8011142:	4a0b      	ldr	r2, [pc, #44]	; (8011170 <cdcRead+0x50>)
 8011144:	6812      	ldr	r2, [r2, #0]
 8011146:	fbb3 f1f2 	udiv	r1, r3, r2
 801114a:	fb01 f202 	mul.w	r2, r1, r2
 801114e:	1a9b      	subs	r3, r3, r2
 8011150:	4a04      	ldr	r2, [pc, #16]	; (8011164 <cdcRead+0x44>)
 8011152:	6013      	str	r3, [r2, #0]
	}
	return ret;
 8011154:	79fb      	ldrb	r3, [r7, #7]
}
 8011156:	4618      	mov	r0, r3
 8011158:	370c      	adds	r7, #12
 801115a:	46bd      	mov	sp, r7
 801115c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011160:	4770      	bx	lr
 8011162:	bf00      	nop
 8011164:	200007c0 	.word	0x200007c0
 8011168:	200007c4 	.word	0x200007c4
 801116c:	200007bc 	.word	0x200007bc
 8011170:	20000140 	.word	0x20000140

08011174 <cdcDataIn>:

void cdcDataIn(uint8_t rx_data)
{
 8011174:	b480      	push	{r7}
 8011176:	b085      	sub	sp, #20
 8011178:	af00      	add	r7, sp, #0
 801117a:	4603      	mov	r3, r0
 801117c:	71fb      	strb	r3, [r7, #7]
	uint32_t next_rx_in;
	next_rx_in = (rx_in + 1) % rx_len;
 801117e:	4b0f      	ldr	r3, [pc, #60]	; (80111bc <cdcDataIn+0x48>)
 8011180:	681b      	ldr	r3, [r3, #0]
 8011182:	3301      	adds	r3, #1
 8011184:	4a0e      	ldr	r2, [pc, #56]	; (80111c0 <cdcDataIn+0x4c>)
 8011186:	6812      	ldr	r2, [r2, #0]
 8011188:	fbb3 f1f2 	udiv	r1, r3, r2
 801118c:	fb01 f202 	mul.w	r2, r1, r2
 8011190:	1a9b      	subs	r3, r3, r2
 8011192:	60fb      	str	r3, [r7, #12]
	rx_buf[rx_in] = rx_data;
 8011194:	4b09      	ldr	r3, [pc, #36]	; (80111bc <cdcDataIn+0x48>)
 8011196:	681b      	ldr	r3, [r3, #0]
 8011198:	490a      	ldr	r1, [pc, #40]	; (80111c4 <cdcDataIn+0x50>)
 801119a:	79fa      	ldrb	r2, [r7, #7]
 801119c:	54ca      	strb	r2, [r1, r3]
	if(next_rx_in != rx_out)
 801119e:	4b0a      	ldr	r3, [pc, #40]	; (80111c8 <cdcDataIn+0x54>)
 80111a0:	681b      	ldr	r3, [r3, #0]
 80111a2:	68fa      	ldr	r2, [r7, #12]
 80111a4:	429a      	cmp	r2, r3
 80111a6:	d002      	beq.n	80111ae <cdcDataIn+0x3a>
	{
		rx_in = next_rx_in;
 80111a8:	4a04      	ldr	r2, [pc, #16]	; (80111bc <cdcDataIn+0x48>)
 80111aa:	68fb      	ldr	r3, [r7, #12]
 80111ac:	6013      	str	r3, [r2, #0]
	}
}
 80111ae:	bf00      	nop
 80111b0:	3714      	adds	r7, #20
 80111b2:	46bd      	mov	sp, r7
 80111b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111b8:	4770      	bx	lr
 80111ba:	bf00      	nop
 80111bc:	200007bc 	.word	0x200007bc
 80111c0:	20000140 	.word	0x20000140
 80111c4:	200007c4 	.word	0x200007c4
 80111c8:	200007c0 	.word	0x200007c0

080111cc <cdcWrite>:
uint32_t cdcWrite(uint8_t *pData, uint32_t length)
{
 80111cc:	b580      	push	{r7, lr}
 80111ce:	b084      	sub	sp, #16
 80111d0:	af00      	add	r7, sp, #0
 80111d2:	6078      	str	r0, [r7, #4]
 80111d4:	6039      	str	r1, [r7, #0]
  /* 1. basically transmit..
   * */
	uint32_t pre_time;
	uint8_t ret;

	pre_time = millis();
 80111d6:	f7f7 fa5a 	bl	800868e <millis>
 80111da:	60f8      	str	r0, [r7, #12]
	while(1)
	{
		ret = CDC_Transmit_FS(pData, length);
 80111dc:	683b      	ldr	r3, [r7, #0]
 80111de:	b29b      	uxth	r3, r3
 80111e0:	4619      	mov	r1, r3
 80111e2:	6878      	ldr	r0, [r7, #4]
 80111e4:	f000 f94a 	bl	801147c <CDC_Transmit_FS>
 80111e8:	4603      	mov	r3, r0
 80111ea:	72fb      	strb	r3, [r7, #11]

		if(ret == USBD_OK)
 80111ec:	7afb      	ldrb	r3, [r7, #11]
 80111ee:	2b00      	cmp	r3, #0
 80111f0:	d101      	bne.n	80111f6 <cdcWrite+0x2a>
		{
			return length;
 80111f2:	683b      	ldr	r3, [r7, #0]
 80111f4:	e00e      	b.n	8011214 <cdcWrite+0x48>
		}
		else if(ret == USBD_FAIL)
 80111f6:	7afb      	ldrb	r3, [r7, #11]
 80111f8:	2b03      	cmp	r3, #3
 80111fa:	d101      	bne.n	8011200 <cdcWrite+0x34>
		{
			return 0;
 80111fc:	2300      	movs	r3, #0
 80111fe:	e009      	b.n	8011214 <cdcWrite+0x48>
		}

		if(millis() - pre_time >= 100)
 8011200:	f7f7 fa45 	bl	800868e <millis>
 8011204:	4602      	mov	r2, r0
 8011206:	68fb      	ldr	r3, [r7, #12]
 8011208:	1ad3      	subs	r3, r2, r3
 801120a:	2b63      	cmp	r3, #99	; 0x63
 801120c:	d800      	bhi.n	8011210 <cdcWrite+0x44>
		ret = CDC_Transmit_FS(pData, length);
 801120e:	e7e5      	b.n	80111dc <cdcWrite+0x10>
		{
		  //time out
			break;
 8011210:	bf00      	nop
		}

	}
	return 0;
 8011212:	2300      	movs	r3, #0
}
 8011214:	4618      	mov	r0, r3
 8011216:	3710      	adds	r7, #16
 8011218:	46bd      	mov	sp, r7
 801121a:	bd80      	pop	{r7, pc}

0801121c <USBD_CDC_SOF>:
{
	return LineCoding.bitrate;
}

uint8_t USBD_CDC_SOF(struct _USBD_HandleTypeDef *pdev)
{
 801121c:	b590      	push	{r4, r7, lr}
 801121e:	b085      	sub	sp, #20
 8011220:	af00      	add	r7, sp, #0
 8011222:	6078      	str	r0, [r7, #4]
  if(rx_full == true)
 8011224:	4b0c      	ldr	r3, [pc, #48]	; (8011258 <USBD_CDC_SOF+0x3c>)
 8011226:	781b      	ldrb	r3, [r3, #0]
 8011228:	2b00      	cmp	r3, #0
 801122a:	d010      	beq.n	801124e <USBD_CDC_SOF+0x32>
  {
    uint32_t buf_len;

    //Empty space amount of received buffer
    buf_len = (rx_len - cdcAvailable()) - 1; // for write one space -> -1
 801122c:	4b0b      	ldr	r3, [pc, #44]	; (801125c <USBD_CDC_SOF+0x40>)
 801122e:	681c      	ldr	r4, [r3, #0]
 8011230:	f7ff ff58 	bl	80110e4 <cdcAvailable>
 8011234:	4603      	mov	r3, r0
 8011236:	1ae3      	subs	r3, r4, r3
 8011238:	3b01      	subs	r3, #1
 801123a:	60fb      	str	r3, [r7, #12]

    if(buf_len >= USB_FS_MAX_PACKET_SIZE)
 801123c:	68fb      	ldr	r3, [r7, #12]
 801123e:	2b3f      	cmp	r3, #63	; 0x3f
 8011240:	d905      	bls.n	801124e <USBD_CDC_SOF+0x32>
    {
      //USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]); only one is enough
      USBD_CDC_ReceivePacket(pdev);
 8011242:	6878      	ldr	r0, [r7, #4]
 8011244:	f7fe fd8a 	bl	800fd5c <USBD_CDC_ReceivePacket>
      rx_full = false;
 8011248:	4b03      	ldr	r3, [pc, #12]	; (8011258 <USBD_CDC_SOF+0x3c>)
 801124a:	2200      	movs	r2, #0
 801124c:	701a      	strb	r2, [r3, #0]
    }

  }
  return 0;
 801124e:	2300      	movs	r3, #0
}
 8011250:	4618      	mov	r0, r3
 8011252:	3714      	adds	r7, #20
 8011254:	46bd      	mov	sp, r7
 8011256:	bd90      	pop	{r4, r7, pc}
 8011258:	200009c4 	.word	0x200009c4
 801125c:	20000140 	.word	0x20000140

08011260 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8011260:	b580      	push	{r7, lr}
 8011262:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8011264:	2200      	movs	r2, #0
 8011266:	4905      	ldr	r1, [pc, #20]	; (801127c <CDC_Init_FS+0x1c>)
 8011268:	4805      	ldr	r0, [pc, #20]	; (8011280 <CDC_Init_FS+0x20>)
 801126a:	f7fe fd10 	bl	800fc8e <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 801126e:	4905      	ldr	r1, [pc, #20]	; (8011284 <CDC_Init_FS+0x24>)
 8011270:	4803      	ldr	r0, [pc, #12]	; (8011280 <CDC_Init_FS+0x20>)
 8011272:	f7fe fd2a 	bl	800fcca <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8011276:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8011278:	4618      	mov	r0, r3
 801127a:	bd80      	pop	{r7, pc}
 801127c:	20000dc8 	.word	0x20000dc8
 8011280:	200004e4 	.word	0x200004e4
 8011284:	200009c8 	.word	0x200009c8

08011288 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8011288:	b480      	push	{r7}
 801128a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 801128c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 801128e:	4618      	mov	r0, r3
 8011290:	46bd      	mov	sp, r7
 8011292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011296:	4770      	bx	lr

08011298 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8011298:	b480      	push	{r7}
 801129a:	b083      	sub	sp, #12
 801129c:	af00      	add	r7, sp, #0
 801129e:	4603      	mov	r3, r0
 80112a0:	6039      	str	r1, [r7, #0]
 80112a2:	71fb      	strb	r3, [r7, #7]
 80112a4:	4613      	mov	r3, r2
 80112a6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80112a8:	79fb      	ldrb	r3, [r7, #7]
 80112aa:	2b23      	cmp	r3, #35	; 0x23
 80112ac:	f200 80a3 	bhi.w	80113f6 <CDC_Control_FS+0x15e>
 80112b0:	a201      	add	r2, pc, #4	; (adr r2, 80112b8 <CDC_Control_FS+0x20>)
 80112b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80112b6:	bf00      	nop
 80112b8:	080113f7 	.word	0x080113f7
 80112bc:	080113f7 	.word	0x080113f7
 80112c0:	080113f7 	.word	0x080113f7
 80112c4:	080113f7 	.word	0x080113f7
 80112c8:	080113f7 	.word	0x080113f7
 80112cc:	080113f7 	.word	0x080113f7
 80112d0:	080113f7 	.word	0x080113f7
 80112d4:	080113f7 	.word	0x080113f7
 80112d8:	080113f7 	.word	0x080113f7
 80112dc:	080113f7 	.word	0x080113f7
 80112e0:	080113f7 	.word	0x080113f7
 80112e4:	080113f7 	.word	0x080113f7
 80112e8:	080113f7 	.word	0x080113f7
 80112ec:	080113f7 	.word	0x080113f7
 80112f0:	080113f7 	.word	0x080113f7
 80112f4:	080113f7 	.word	0x080113f7
 80112f8:	080113f7 	.word	0x080113f7
 80112fc:	080113f7 	.word	0x080113f7
 8011300:	080113f7 	.word	0x080113f7
 8011304:	080113f7 	.word	0x080113f7
 8011308:	080113f7 	.word	0x080113f7
 801130c:	080113f7 	.word	0x080113f7
 8011310:	080113f7 	.word	0x080113f7
 8011314:	080113f7 	.word	0x080113f7
 8011318:	080113f7 	.word	0x080113f7
 801131c:	080113f7 	.word	0x080113f7
 8011320:	080113f7 	.word	0x080113f7
 8011324:	080113f7 	.word	0x080113f7
 8011328:	080113f7 	.word	0x080113f7
 801132c:	080113f7 	.word	0x080113f7
 8011330:	080113f7 	.word	0x080113f7
 8011334:	080113f7 	.word	0x080113f7
 8011338:	08011349 	.word	0x08011349
 801133c:	080113a3 	.word	0x080113a3
 8011340:	080113f7 	.word	0x080113f7
 8011344:	080113f7 	.word	0x080113f7
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING: // MCU�?? ?��?��?���?? set
    	LineCoding.bitrate 		 = (uint32_t)(pbuf[0]);
 8011348:	683b      	ldr	r3, [r7, #0]
 801134a:	781b      	ldrb	r3, [r3, #0]
 801134c:	461a      	mov	r2, r3
 801134e:	4b2e      	ldr	r3, [pc, #184]	; (8011408 <CDC_Control_FS+0x170>)
 8011350:	601a      	str	r2, [r3, #0]
    	LineCoding.bitrate 		|= (uint32_t)(pbuf[1]) << 8;
 8011352:	4b2d      	ldr	r3, [pc, #180]	; (8011408 <CDC_Control_FS+0x170>)
 8011354:	681a      	ldr	r2, [r3, #0]
 8011356:	683b      	ldr	r3, [r7, #0]
 8011358:	3301      	adds	r3, #1
 801135a:	781b      	ldrb	r3, [r3, #0]
 801135c:	021b      	lsls	r3, r3, #8
 801135e:	4313      	orrs	r3, r2
 8011360:	4a29      	ldr	r2, [pc, #164]	; (8011408 <CDC_Control_FS+0x170>)
 8011362:	6013      	str	r3, [r2, #0]
    	LineCoding.bitrate 		|= (uint32_t)(pbuf[2]) << 16;
 8011364:	4b28      	ldr	r3, [pc, #160]	; (8011408 <CDC_Control_FS+0x170>)
 8011366:	681a      	ldr	r2, [r3, #0]
 8011368:	683b      	ldr	r3, [r7, #0]
 801136a:	3302      	adds	r3, #2
 801136c:	781b      	ldrb	r3, [r3, #0]
 801136e:	041b      	lsls	r3, r3, #16
 8011370:	4313      	orrs	r3, r2
 8011372:	4a25      	ldr	r2, [pc, #148]	; (8011408 <CDC_Control_FS+0x170>)
 8011374:	6013      	str	r3, [r2, #0]
    	LineCoding.bitrate 		|= (uint32_t)(pbuf[3]) << 24;
 8011376:	4b24      	ldr	r3, [pc, #144]	; (8011408 <CDC_Control_FS+0x170>)
 8011378:	681a      	ldr	r2, [r3, #0]
 801137a:	683b      	ldr	r3, [r7, #0]
 801137c:	3303      	adds	r3, #3
 801137e:	781b      	ldrb	r3, [r3, #0]
 8011380:	061b      	lsls	r3, r3, #24
 8011382:	4313      	orrs	r3, r2
 8011384:	4a20      	ldr	r2, [pc, #128]	; (8011408 <CDC_Control_FS+0x170>)
 8011386:	6013      	str	r3, [r2, #0]
    	LineCoding.format 		 = pbuf[4];
 8011388:	683b      	ldr	r3, [r7, #0]
 801138a:	791a      	ldrb	r2, [r3, #4]
 801138c:	4b1e      	ldr	r3, [pc, #120]	; (8011408 <CDC_Control_FS+0x170>)
 801138e:	711a      	strb	r2, [r3, #4]
    	LineCoding.paritytype  = pbuf[5];
 8011390:	683b      	ldr	r3, [r7, #0]
 8011392:	795a      	ldrb	r2, [r3, #5]
 8011394:	4b1c      	ldr	r3, [pc, #112]	; (8011408 <CDC_Control_FS+0x170>)
 8011396:	715a      	strb	r2, [r3, #5]
    	LineCoding.datatype 	 = pbuf[6];
 8011398:	683b      	ldr	r3, [r7, #0]
 801139a:	799a      	ldrb	r2, [r3, #6]
 801139c:	4b1a      	ldr	r3, [pc, #104]	; (8011408 <CDC_Control_FS+0x170>)
 801139e:	719a      	strb	r2, [r3, #6]
    break;
 80113a0:	e02a      	b.n	80113f8 <CDC_Control_FS+0x160>

    case CDC_GET_LINE_CODING: // PC�?? ?��?��?���?? ?��?���??
    	pbuf[0] = (uint8_t)(LineCoding.bitrate);
 80113a2:	4b19      	ldr	r3, [pc, #100]	; (8011408 <CDC_Control_FS+0x170>)
 80113a4:	681b      	ldr	r3, [r3, #0]
 80113a6:	b2da      	uxtb	r2, r3
 80113a8:	683b      	ldr	r3, [r7, #0]
 80113aa:	701a      	strb	r2, [r3, #0]
    	pbuf[1] = (uint8_t)(LineCoding.bitrate >> 8);
 80113ac:	4b16      	ldr	r3, [pc, #88]	; (8011408 <CDC_Control_FS+0x170>)
 80113ae:	681b      	ldr	r3, [r3, #0]
 80113b0:	0a1a      	lsrs	r2, r3, #8
 80113b2:	683b      	ldr	r3, [r7, #0]
 80113b4:	3301      	adds	r3, #1
 80113b6:	b2d2      	uxtb	r2, r2
 80113b8:	701a      	strb	r2, [r3, #0]
    	pbuf[2] = (uint8_t)(LineCoding.bitrate >> 16);
 80113ba:	4b13      	ldr	r3, [pc, #76]	; (8011408 <CDC_Control_FS+0x170>)
 80113bc:	681b      	ldr	r3, [r3, #0]
 80113be:	0c1a      	lsrs	r2, r3, #16
 80113c0:	683b      	ldr	r3, [r7, #0]
 80113c2:	3302      	adds	r3, #2
 80113c4:	b2d2      	uxtb	r2, r2
 80113c6:	701a      	strb	r2, [r3, #0]
    	pbuf[3] = (uint8_t)(LineCoding.bitrate >> 24);
 80113c8:	4b0f      	ldr	r3, [pc, #60]	; (8011408 <CDC_Control_FS+0x170>)
 80113ca:	681b      	ldr	r3, [r3, #0]
 80113cc:	0e1a      	lsrs	r2, r3, #24
 80113ce:	683b      	ldr	r3, [r7, #0]
 80113d0:	3303      	adds	r3, #3
 80113d2:	b2d2      	uxtb	r2, r2
 80113d4:	701a      	strb	r2, [r3, #0]
    	pbuf[4] = LineCoding.format;
 80113d6:	683b      	ldr	r3, [r7, #0]
 80113d8:	3304      	adds	r3, #4
 80113da:	4a0b      	ldr	r2, [pc, #44]	; (8011408 <CDC_Control_FS+0x170>)
 80113dc:	7912      	ldrb	r2, [r2, #4]
 80113de:	701a      	strb	r2, [r3, #0]
    	pbuf[5] = LineCoding.paritytype;
 80113e0:	683b      	ldr	r3, [r7, #0]
 80113e2:	3305      	adds	r3, #5
 80113e4:	4a08      	ldr	r2, [pc, #32]	; (8011408 <CDC_Control_FS+0x170>)
 80113e6:	7952      	ldrb	r2, [r2, #5]
 80113e8:	701a      	strb	r2, [r3, #0]
    	pbuf[6] = LineCoding.datatype;
 80113ea:	683b      	ldr	r3, [r7, #0]
 80113ec:	3306      	adds	r3, #6
 80113ee:	4a06      	ldr	r2, [pc, #24]	; (8011408 <CDC_Control_FS+0x170>)
 80113f0:	7992      	ldrb	r2, [r2, #6]
 80113f2:	701a      	strb	r2, [r3, #0]
    break;
 80113f4:	e000      	b.n	80113f8 <CDC_Control_FS+0x160>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80113f6:	bf00      	nop
  }

  return (USBD_OK);
 80113f8:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80113fa:	4618      	mov	r0, r3
 80113fc:	370c      	adds	r7, #12
 80113fe:	46bd      	mov	sp, r7
 8011400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011404:	4770      	bx	lr
 8011406:	bf00      	nop
 8011408:	200007b4 	.word	0x200007b4

0801140c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 801140c:	b590      	push	{r4, r7, lr}
 801140e:	b085      	sub	sp, #20
 8011410:	af00      	add	r7, sp, #0
 8011412:	6078      	str	r0, [r7, #4]
 8011414:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */

  for(int i=0; i<*Len; i++)
 8011416:	2300      	movs	r3, #0
 8011418:	60fb      	str	r3, [r7, #12]
 801141a:	e009      	b.n	8011430 <CDC_Receive_FS+0x24>
  {
    cdcDataIn(Buf[i]);
 801141c:	68fb      	ldr	r3, [r7, #12]
 801141e:	687a      	ldr	r2, [r7, #4]
 8011420:	4413      	add	r3, r2
 8011422:	781b      	ldrb	r3, [r3, #0]
 8011424:	4618      	mov	r0, r3
 8011426:	f7ff fea5 	bl	8011174 <cdcDataIn>
  for(int i=0; i<*Len; i++)
 801142a:	68fb      	ldr	r3, [r7, #12]
 801142c:	3301      	adds	r3, #1
 801142e:	60fb      	str	r3, [r7, #12]
 8011430:	683b      	ldr	r3, [r7, #0]
 8011432:	681a      	ldr	r2, [r3, #0]
 8011434:	68fb      	ldr	r3, [r7, #12]
 8011436:	429a      	cmp	r2, r3
 8011438:	d8f0      	bhi.n	801141c <CDC_Receive_FS+0x10>
  }
  uint32_t buf_len;

  //Empty space amount of received buffer
  buf_len = (rx_len - cdcAvailable()) - 1; // for write one space -> -1
 801143a:	4b0d      	ldr	r3, [pc, #52]	; (8011470 <CDC_Receive_FS+0x64>)
 801143c:	681c      	ldr	r4, [r3, #0]
 801143e:	f7ff fe51 	bl	80110e4 <cdcAvailable>
 8011442:	4603      	mov	r3, r0
 8011444:	1ae3      	subs	r3, r4, r3
 8011446:	3b01      	subs	r3, #1
 8011448:	60bb      	str	r3, [r7, #8]

  if(buf_len >= USB_FS_MAX_PACKET_SIZE)
 801144a:	68bb      	ldr	r3, [r7, #8]
 801144c:	2b3f      	cmp	r3, #63	; 0x3f
 801144e:	d907      	bls.n	8011460 <CDC_Receive_FS+0x54>
  {
    USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8011450:	6879      	ldr	r1, [r7, #4]
 8011452:	4808      	ldr	r0, [pc, #32]	; (8011474 <CDC_Receive_FS+0x68>)
 8011454:	f7fe fc39 	bl	800fcca <USBD_CDC_SetRxBuffer>
    USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8011458:	4806      	ldr	r0, [pc, #24]	; (8011474 <CDC_Receive_FS+0x68>)
 801145a:	f7fe fc7f 	bl	800fd5c <USBD_CDC_ReceivePacket>
 801145e:	e002      	b.n	8011466 <CDC_Receive_FS+0x5a>
  }
  else
  {
    /*buffer not enough space.. please wait*/
    rx_full = true;
 8011460:	4b05      	ldr	r3, [pc, #20]	; (8011478 <CDC_Receive_FS+0x6c>)
 8011462:	2201      	movs	r2, #1
 8011464:	701a      	strb	r2, [r3, #0]
  }

  return (USBD_OK);
 8011466:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8011468:	4618      	mov	r0, r3
 801146a:	3714      	adds	r7, #20
 801146c:	46bd      	mov	sp, r7
 801146e:	bd90      	pop	{r4, r7, pc}
 8011470:	20000140 	.word	0x20000140
 8011474:	200004e4 	.word	0x200004e4
 8011478:	200009c4 	.word	0x200009c4

0801147c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 801147c:	b580      	push	{r7, lr}
 801147e:	b084      	sub	sp, #16
 8011480:	af00      	add	r7, sp, #0
 8011482:	6078      	str	r0, [r7, #4]
 8011484:	460b      	mov	r3, r1
 8011486:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8011488:	2300      	movs	r3, #0
 801148a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 801148c:	4b0d      	ldr	r3, [pc, #52]	; (80114c4 <CDC_Transmit_FS+0x48>)
 801148e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011492:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8011494:	68bb      	ldr	r3, [r7, #8]
 8011496:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 801149a:	2b00      	cmp	r3, #0
 801149c:	d001      	beq.n	80114a2 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 801149e:	2301      	movs	r3, #1
 80114a0:	e00b      	b.n	80114ba <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80114a2:	887b      	ldrh	r3, [r7, #2]
 80114a4:	461a      	mov	r2, r3
 80114a6:	6879      	ldr	r1, [r7, #4]
 80114a8:	4806      	ldr	r0, [pc, #24]	; (80114c4 <CDC_Transmit_FS+0x48>)
 80114aa:	f7fe fbf0 	bl	800fc8e <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80114ae:	4805      	ldr	r0, [pc, #20]	; (80114c4 <CDC_Transmit_FS+0x48>)
 80114b0:	f7fe fc24 	bl	800fcfc <USBD_CDC_TransmitPacket>
 80114b4:	4603      	mov	r3, r0
 80114b6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80114b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80114ba:	4618      	mov	r0, r3
 80114bc:	3710      	adds	r7, #16
 80114be:	46bd      	mov	sp, r7
 80114c0:	bd80      	pop	{r7, pc}
 80114c2:	bf00      	nop
 80114c4:	200004e4 	.word	0x200004e4

080114c8 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80114c8:	b480      	push	{r7}
 80114ca:	b087      	sub	sp, #28
 80114cc:	af00      	add	r7, sp, #0
 80114ce:	60f8      	str	r0, [r7, #12]
 80114d0:	60b9      	str	r1, [r7, #8]
 80114d2:	4613      	mov	r3, r2
 80114d4:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80114d6:	2300      	movs	r3, #0
 80114d8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80114da:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80114de:	4618      	mov	r0, r3
 80114e0:	371c      	adds	r7, #28
 80114e2:	46bd      	mov	sp, r7
 80114e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114e8:	4770      	bx	lr
	...

080114ec <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80114ec:	b480      	push	{r7}
 80114ee:	b083      	sub	sp, #12
 80114f0:	af00      	add	r7, sp, #0
 80114f2:	4603      	mov	r3, r0
 80114f4:	6039      	str	r1, [r7, #0]
 80114f6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80114f8:	683b      	ldr	r3, [r7, #0]
 80114fa:	2212      	movs	r2, #18
 80114fc:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80114fe:	4b03      	ldr	r3, [pc, #12]	; (801150c <USBD_FS_DeviceDescriptor+0x20>)
}
 8011500:	4618      	mov	r0, r3
 8011502:	370c      	adds	r7, #12
 8011504:	46bd      	mov	sp, r7
 8011506:	f85d 7b04 	ldr.w	r7, [sp], #4
 801150a:	4770      	bx	lr
 801150c:	20000174 	.word	0x20000174

08011510 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011510:	b480      	push	{r7}
 8011512:	b083      	sub	sp, #12
 8011514:	af00      	add	r7, sp, #0
 8011516:	4603      	mov	r3, r0
 8011518:	6039      	str	r1, [r7, #0]
 801151a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 801151c:	683b      	ldr	r3, [r7, #0]
 801151e:	2204      	movs	r2, #4
 8011520:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8011522:	4b03      	ldr	r3, [pc, #12]	; (8011530 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8011524:	4618      	mov	r0, r3
 8011526:	370c      	adds	r7, #12
 8011528:	46bd      	mov	sp, r7
 801152a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801152e:	4770      	bx	lr
 8011530:	20000188 	.word	0x20000188

08011534 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011534:	b580      	push	{r7, lr}
 8011536:	b082      	sub	sp, #8
 8011538:	af00      	add	r7, sp, #0
 801153a:	4603      	mov	r3, r0
 801153c:	6039      	str	r1, [r7, #0]
 801153e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8011540:	79fb      	ldrb	r3, [r7, #7]
 8011542:	2b00      	cmp	r3, #0
 8011544:	d105      	bne.n	8011552 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8011546:	683a      	ldr	r2, [r7, #0]
 8011548:	4907      	ldr	r1, [pc, #28]	; (8011568 <USBD_FS_ProductStrDescriptor+0x34>)
 801154a:	4808      	ldr	r0, [pc, #32]	; (801156c <USBD_FS_ProductStrDescriptor+0x38>)
 801154c:	f7ff fcb9 	bl	8010ec2 <USBD_GetString>
 8011550:	e004      	b.n	801155c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8011552:	683a      	ldr	r2, [r7, #0]
 8011554:	4904      	ldr	r1, [pc, #16]	; (8011568 <USBD_FS_ProductStrDescriptor+0x34>)
 8011556:	4805      	ldr	r0, [pc, #20]	; (801156c <USBD_FS_ProductStrDescriptor+0x38>)
 8011558:	f7ff fcb3 	bl	8010ec2 <USBD_GetString>
  }
  return USBD_StrDesc;
 801155c:	4b02      	ldr	r3, [pc, #8]	; (8011568 <USBD_FS_ProductStrDescriptor+0x34>)
}
 801155e:	4618      	mov	r0, r3
 8011560:	3708      	adds	r7, #8
 8011562:	46bd      	mov	sp, r7
 8011564:	bd80      	pop	{r7, pc}
 8011566:	bf00      	nop
 8011568:	200011c8 	.word	0x200011c8
 801156c:	08012798 	.word	0x08012798

08011570 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011570:	b580      	push	{r7, lr}
 8011572:	b082      	sub	sp, #8
 8011574:	af00      	add	r7, sp, #0
 8011576:	4603      	mov	r3, r0
 8011578:	6039      	str	r1, [r7, #0]
 801157a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 801157c:	683a      	ldr	r2, [r7, #0]
 801157e:	4904      	ldr	r1, [pc, #16]	; (8011590 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8011580:	4804      	ldr	r0, [pc, #16]	; (8011594 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8011582:	f7ff fc9e 	bl	8010ec2 <USBD_GetString>
  return USBD_StrDesc;
 8011586:	4b02      	ldr	r3, [pc, #8]	; (8011590 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8011588:	4618      	mov	r0, r3
 801158a:	3708      	adds	r7, #8
 801158c:	46bd      	mov	sp, r7
 801158e:	bd80      	pop	{r7, pc}
 8011590:	200011c8 	.word	0x200011c8
 8011594:	080127b0 	.word	0x080127b0

08011598 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011598:	b580      	push	{r7, lr}
 801159a:	b082      	sub	sp, #8
 801159c:	af00      	add	r7, sp, #0
 801159e:	4603      	mov	r3, r0
 80115a0:	6039      	str	r1, [r7, #0]
 80115a2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80115a4:	683b      	ldr	r3, [r7, #0]
 80115a6:	221a      	movs	r2, #26
 80115a8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80115aa:	f000 f843 	bl	8011634 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80115ae:	4b02      	ldr	r3, [pc, #8]	; (80115b8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80115b0:	4618      	mov	r0, r3
 80115b2:	3708      	adds	r7, #8
 80115b4:	46bd      	mov	sp, r7
 80115b6:	bd80      	pop	{r7, pc}
 80115b8:	2000018c 	.word	0x2000018c

080115bc <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80115bc:	b580      	push	{r7, lr}
 80115be:	b082      	sub	sp, #8
 80115c0:	af00      	add	r7, sp, #0
 80115c2:	4603      	mov	r3, r0
 80115c4:	6039      	str	r1, [r7, #0]
 80115c6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80115c8:	79fb      	ldrb	r3, [r7, #7]
 80115ca:	2b00      	cmp	r3, #0
 80115cc:	d105      	bne.n	80115da <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80115ce:	683a      	ldr	r2, [r7, #0]
 80115d0:	4907      	ldr	r1, [pc, #28]	; (80115f0 <USBD_FS_ConfigStrDescriptor+0x34>)
 80115d2:	4808      	ldr	r0, [pc, #32]	; (80115f4 <USBD_FS_ConfigStrDescriptor+0x38>)
 80115d4:	f7ff fc75 	bl	8010ec2 <USBD_GetString>
 80115d8:	e004      	b.n	80115e4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80115da:	683a      	ldr	r2, [r7, #0]
 80115dc:	4904      	ldr	r1, [pc, #16]	; (80115f0 <USBD_FS_ConfigStrDescriptor+0x34>)
 80115de:	4805      	ldr	r0, [pc, #20]	; (80115f4 <USBD_FS_ConfigStrDescriptor+0x38>)
 80115e0:	f7ff fc6f 	bl	8010ec2 <USBD_GetString>
  }
  return USBD_StrDesc;
 80115e4:	4b02      	ldr	r3, [pc, #8]	; (80115f0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80115e6:	4618      	mov	r0, r3
 80115e8:	3708      	adds	r7, #8
 80115ea:	46bd      	mov	sp, r7
 80115ec:	bd80      	pop	{r7, pc}
 80115ee:	bf00      	nop
 80115f0:	200011c8 	.word	0x200011c8
 80115f4:	080127c4 	.word	0x080127c4

080115f8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80115f8:	b580      	push	{r7, lr}
 80115fa:	b082      	sub	sp, #8
 80115fc:	af00      	add	r7, sp, #0
 80115fe:	4603      	mov	r3, r0
 8011600:	6039      	str	r1, [r7, #0]
 8011602:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8011604:	79fb      	ldrb	r3, [r7, #7]
 8011606:	2b00      	cmp	r3, #0
 8011608:	d105      	bne.n	8011616 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801160a:	683a      	ldr	r2, [r7, #0]
 801160c:	4907      	ldr	r1, [pc, #28]	; (801162c <USBD_FS_InterfaceStrDescriptor+0x34>)
 801160e:	4808      	ldr	r0, [pc, #32]	; (8011630 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8011610:	f7ff fc57 	bl	8010ec2 <USBD_GetString>
 8011614:	e004      	b.n	8011620 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8011616:	683a      	ldr	r2, [r7, #0]
 8011618:	4904      	ldr	r1, [pc, #16]	; (801162c <USBD_FS_InterfaceStrDescriptor+0x34>)
 801161a:	4805      	ldr	r0, [pc, #20]	; (8011630 <USBD_FS_InterfaceStrDescriptor+0x38>)
 801161c:	f7ff fc51 	bl	8010ec2 <USBD_GetString>
  }
  return USBD_StrDesc;
 8011620:	4b02      	ldr	r3, [pc, #8]	; (801162c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8011622:	4618      	mov	r0, r3
 8011624:	3708      	adds	r7, #8
 8011626:	46bd      	mov	sp, r7
 8011628:	bd80      	pop	{r7, pc}
 801162a:	bf00      	nop
 801162c:	200011c8 	.word	0x200011c8
 8011630:	080127d0 	.word	0x080127d0

08011634 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8011634:	b580      	push	{r7, lr}
 8011636:	b084      	sub	sp, #16
 8011638:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801163a:	4b0f      	ldr	r3, [pc, #60]	; (8011678 <Get_SerialNum+0x44>)
 801163c:	681b      	ldr	r3, [r3, #0]
 801163e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8011640:	4b0e      	ldr	r3, [pc, #56]	; (801167c <Get_SerialNum+0x48>)
 8011642:	681b      	ldr	r3, [r3, #0]
 8011644:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8011646:	4b0e      	ldr	r3, [pc, #56]	; (8011680 <Get_SerialNum+0x4c>)
 8011648:	681b      	ldr	r3, [r3, #0]
 801164a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 801164c:	68fa      	ldr	r2, [r7, #12]
 801164e:	687b      	ldr	r3, [r7, #4]
 8011650:	4413      	add	r3, r2
 8011652:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8011654:	68fb      	ldr	r3, [r7, #12]
 8011656:	2b00      	cmp	r3, #0
 8011658:	d009      	beq.n	801166e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801165a:	2208      	movs	r2, #8
 801165c:	4909      	ldr	r1, [pc, #36]	; (8011684 <Get_SerialNum+0x50>)
 801165e:	68f8      	ldr	r0, [r7, #12]
 8011660:	f000 f814 	bl	801168c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8011664:	2204      	movs	r2, #4
 8011666:	4908      	ldr	r1, [pc, #32]	; (8011688 <Get_SerialNum+0x54>)
 8011668:	68b8      	ldr	r0, [r7, #8]
 801166a:	f000 f80f 	bl	801168c <IntToUnicode>
  }
}
 801166e:	bf00      	nop
 8011670:	3710      	adds	r7, #16
 8011672:	46bd      	mov	sp, r7
 8011674:	bd80      	pop	{r7, pc}
 8011676:	bf00      	nop
 8011678:	1fff7a10 	.word	0x1fff7a10
 801167c:	1fff7a14 	.word	0x1fff7a14
 8011680:	1fff7a18 	.word	0x1fff7a18
 8011684:	2000018e 	.word	0x2000018e
 8011688:	2000019e 	.word	0x2000019e

0801168c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 801168c:	b480      	push	{r7}
 801168e:	b087      	sub	sp, #28
 8011690:	af00      	add	r7, sp, #0
 8011692:	60f8      	str	r0, [r7, #12]
 8011694:	60b9      	str	r1, [r7, #8]
 8011696:	4613      	mov	r3, r2
 8011698:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 801169a:	2300      	movs	r3, #0
 801169c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 801169e:	2300      	movs	r3, #0
 80116a0:	75fb      	strb	r3, [r7, #23]
 80116a2:	e027      	b.n	80116f4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80116a4:	68fb      	ldr	r3, [r7, #12]
 80116a6:	0f1b      	lsrs	r3, r3, #28
 80116a8:	2b09      	cmp	r3, #9
 80116aa:	d80b      	bhi.n	80116c4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80116ac:	68fb      	ldr	r3, [r7, #12]
 80116ae:	0f1b      	lsrs	r3, r3, #28
 80116b0:	b2da      	uxtb	r2, r3
 80116b2:	7dfb      	ldrb	r3, [r7, #23]
 80116b4:	005b      	lsls	r3, r3, #1
 80116b6:	4619      	mov	r1, r3
 80116b8:	68bb      	ldr	r3, [r7, #8]
 80116ba:	440b      	add	r3, r1
 80116bc:	3230      	adds	r2, #48	; 0x30
 80116be:	b2d2      	uxtb	r2, r2
 80116c0:	701a      	strb	r2, [r3, #0]
 80116c2:	e00a      	b.n	80116da <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80116c4:	68fb      	ldr	r3, [r7, #12]
 80116c6:	0f1b      	lsrs	r3, r3, #28
 80116c8:	b2da      	uxtb	r2, r3
 80116ca:	7dfb      	ldrb	r3, [r7, #23]
 80116cc:	005b      	lsls	r3, r3, #1
 80116ce:	4619      	mov	r1, r3
 80116d0:	68bb      	ldr	r3, [r7, #8]
 80116d2:	440b      	add	r3, r1
 80116d4:	3237      	adds	r2, #55	; 0x37
 80116d6:	b2d2      	uxtb	r2, r2
 80116d8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80116da:	68fb      	ldr	r3, [r7, #12]
 80116dc:	011b      	lsls	r3, r3, #4
 80116de:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80116e0:	7dfb      	ldrb	r3, [r7, #23]
 80116e2:	005b      	lsls	r3, r3, #1
 80116e4:	3301      	adds	r3, #1
 80116e6:	68ba      	ldr	r2, [r7, #8]
 80116e8:	4413      	add	r3, r2
 80116ea:	2200      	movs	r2, #0
 80116ec:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80116ee:	7dfb      	ldrb	r3, [r7, #23]
 80116f0:	3301      	adds	r3, #1
 80116f2:	75fb      	strb	r3, [r7, #23]
 80116f4:	7dfa      	ldrb	r2, [r7, #23]
 80116f6:	79fb      	ldrb	r3, [r7, #7]
 80116f8:	429a      	cmp	r2, r3
 80116fa:	d3d3      	bcc.n	80116a4 <IntToUnicode+0x18>
  }
}
 80116fc:	bf00      	nop
 80116fe:	bf00      	nop
 8011700:	371c      	adds	r7, #28
 8011702:	46bd      	mov	sp, r7
 8011704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011708:	4770      	bx	lr
	...

0801170c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 801170c:	b580      	push	{r7, lr}
 801170e:	b08a      	sub	sp, #40	; 0x28
 8011710:	af00      	add	r7, sp, #0
 8011712:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8011714:	f107 0314 	add.w	r3, r7, #20
 8011718:	2200      	movs	r2, #0
 801171a:	601a      	str	r2, [r3, #0]
 801171c:	605a      	str	r2, [r3, #4]
 801171e:	609a      	str	r2, [r3, #8]
 8011720:	60da      	str	r2, [r3, #12]
 8011722:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8011724:	687b      	ldr	r3, [r7, #4]
 8011726:	681b      	ldr	r3, [r3, #0]
 8011728:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801172c:	d13a      	bne.n	80117a4 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 801172e:	2300      	movs	r3, #0
 8011730:	613b      	str	r3, [r7, #16]
 8011732:	4b1e      	ldr	r3, [pc, #120]	; (80117ac <HAL_PCD_MspInit+0xa0>)
 8011734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011736:	4a1d      	ldr	r2, [pc, #116]	; (80117ac <HAL_PCD_MspInit+0xa0>)
 8011738:	f043 0301 	orr.w	r3, r3, #1
 801173c:	6313      	str	r3, [r2, #48]	; 0x30
 801173e:	4b1b      	ldr	r3, [pc, #108]	; (80117ac <HAL_PCD_MspInit+0xa0>)
 8011740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011742:	f003 0301 	and.w	r3, r3, #1
 8011746:	613b      	str	r3, [r7, #16]
 8011748:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 801174a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 801174e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8011750:	2302      	movs	r3, #2
 8011752:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011754:	2300      	movs	r3, #0
 8011756:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8011758:	2303      	movs	r3, #3
 801175a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 801175c:	230a      	movs	r3, #10
 801175e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8011760:	f107 0314 	add.w	r3, r7, #20
 8011764:	4619      	mov	r1, r3
 8011766:	4812      	ldr	r0, [pc, #72]	; (80117b0 <HAL_PCD_MspInit+0xa4>)
 8011768:	f7f8 ffe2 	bl	800a730 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 801176c:	4b0f      	ldr	r3, [pc, #60]	; (80117ac <HAL_PCD_MspInit+0xa0>)
 801176e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011770:	4a0e      	ldr	r2, [pc, #56]	; (80117ac <HAL_PCD_MspInit+0xa0>)
 8011772:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011776:	6353      	str	r3, [r2, #52]	; 0x34
 8011778:	2300      	movs	r3, #0
 801177a:	60fb      	str	r3, [r7, #12]
 801177c:	4b0b      	ldr	r3, [pc, #44]	; (80117ac <HAL_PCD_MspInit+0xa0>)
 801177e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011780:	4a0a      	ldr	r2, [pc, #40]	; (80117ac <HAL_PCD_MspInit+0xa0>)
 8011782:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8011786:	6453      	str	r3, [r2, #68]	; 0x44
 8011788:	4b08      	ldr	r3, [pc, #32]	; (80117ac <HAL_PCD_MspInit+0xa0>)
 801178a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801178c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8011790:	60fb      	str	r3, [r7, #12]
 8011792:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8011794:	2200      	movs	r2, #0
 8011796:	2100      	movs	r1, #0
 8011798:	2043      	movs	r0, #67	; 0x43
 801179a:	f7f8 fb24 	bl	8009de6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 801179e:	2043      	movs	r0, #67	; 0x43
 80117a0:	f7f8 fb3d 	bl	8009e1e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80117a4:	bf00      	nop
 80117a6:	3728      	adds	r7, #40	; 0x28
 80117a8:	46bd      	mov	sp, r7
 80117aa:	bd80      	pop	{r7, pc}
 80117ac:	40023800 	.word	0x40023800
 80117b0:	40020000 	.word	0x40020000

080117b4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80117b4:	b580      	push	{r7, lr}
 80117b6:	b082      	sub	sp, #8
 80117b8:	af00      	add	r7, sp, #0
 80117ba:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80117bc:	687b      	ldr	r3, [r7, #4]
 80117be:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 80117c2:	687b      	ldr	r3, [r7, #4]
 80117c4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80117c8:	4619      	mov	r1, r3
 80117ca:	4610      	mov	r0, r2
 80117cc:	f7fe fb92 	bl	800fef4 <USBD_LL_SetupStage>
}
 80117d0:	bf00      	nop
 80117d2:	3708      	adds	r7, #8
 80117d4:	46bd      	mov	sp, r7
 80117d6:	bd80      	pop	{r7, pc}

080117d8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80117d8:	b580      	push	{r7, lr}
 80117da:	b082      	sub	sp, #8
 80117dc:	af00      	add	r7, sp, #0
 80117de:	6078      	str	r0, [r7, #4]
 80117e0:	460b      	mov	r3, r1
 80117e2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80117e4:	687b      	ldr	r3, [r7, #4]
 80117e6:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80117ea:	78fa      	ldrb	r2, [r7, #3]
 80117ec:	6879      	ldr	r1, [r7, #4]
 80117ee:	4613      	mov	r3, r2
 80117f0:	00db      	lsls	r3, r3, #3
 80117f2:	1a9b      	subs	r3, r3, r2
 80117f4:	009b      	lsls	r3, r3, #2
 80117f6:	440b      	add	r3, r1
 80117f8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80117fc:	681a      	ldr	r2, [r3, #0]
 80117fe:	78fb      	ldrb	r3, [r7, #3]
 8011800:	4619      	mov	r1, r3
 8011802:	f7fe fbcc 	bl	800ff9e <USBD_LL_DataOutStage>
}
 8011806:	bf00      	nop
 8011808:	3708      	adds	r7, #8
 801180a:	46bd      	mov	sp, r7
 801180c:	bd80      	pop	{r7, pc}

0801180e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801180e:	b580      	push	{r7, lr}
 8011810:	b082      	sub	sp, #8
 8011812:	af00      	add	r7, sp, #0
 8011814:	6078      	str	r0, [r7, #4]
 8011816:	460b      	mov	r3, r1
 8011818:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801181a:	687b      	ldr	r3, [r7, #4]
 801181c:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8011820:	78fa      	ldrb	r2, [r7, #3]
 8011822:	6879      	ldr	r1, [r7, #4]
 8011824:	4613      	mov	r3, r2
 8011826:	00db      	lsls	r3, r3, #3
 8011828:	1a9b      	subs	r3, r3, r2
 801182a:	009b      	lsls	r3, r3, #2
 801182c:	440b      	add	r3, r1
 801182e:	3348      	adds	r3, #72	; 0x48
 8011830:	681a      	ldr	r2, [r3, #0]
 8011832:	78fb      	ldrb	r3, [r7, #3]
 8011834:	4619      	mov	r1, r3
 8011836:	f7fe fc15 	bl	8010064 <USBD_LL_DataInStage>
}
 801183a:	bf00      	nop
 801183c:	3708      	adds	r7, #8
 801183e:	46bd      	mov	sp, r7
 8011840:	bd80      	pop	{r7, pc}

08011842 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011842:	b580      	push	{r7, lr}
 8011844:	b082      	sub	sp, #8
 8011846:	af00      	add	r7, sp, #0
 8011848:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801184a:	687b      	ldr	r3, [r7, #4]
 801184c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8011850:	4618      	mov	r0, r3
 8011852:	f7fe fd29 	bl	80102a8 <USBD_LL_SOF>
}
 8011856:	bf00      	nop
 8011858:	3708      	adds	r7, #8
 801185a:	46bd      	mov	sp, r7
 801185c:	bd80      	pop	{r7, pc}

0801185e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801185e:	b580      	push	{r7, lr}
 8011860:	b084      	sub	sp, #16
 8011862:	af00      	add	r7, sp, #0
 8011864:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8011866:	2301      	movs	r3, #1
 8011868:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 801186a:	687b      	ldr	r3, [r7, #4]
 801186c:	68db      	ldr	r3, [r3, #12]
 801186e:	2b02      	cmp	r3, #2
 8011870:	d001      	beq.n	8011876 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8011872:	f7f6 ff7d 	bl	8008770 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8011876:	687b      	ldr	r3, [r7, #4]
 8011878:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801187c:	7bfa      	ldrb	r2, [r7, #15]
 801187e:	4611      	mov	r1, r2
 8011880:	4618      	mov	r0, r3
 8011882:	f7fe fcd3 	bl	801022c <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8011886:	687b      	ldr	r3, [r7, #4]
 8011888:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801188c:	4618      	mov	r0, r3
 801188e:	f7fe fc7f 	bl	8010190 <USBD_LL_Reset>
}
 8011892:	bf00      	nop
 8011894:	3710      	adds	r7, #16
 8011896:	46bd      	mov	sp, r7
 8011898:	bd80      	pop	{r7, pc}
	...

0801189c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801189c:	b580      	push	{r7, lr}
 801189e:	b082      	sub	sp, #8
 80118a0:	af00      	add	r7, sp, #0
 80118a2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80118a4:	687b      	ldr	r3, [r7, #4]
 80118a6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80118aa:	4618      	mov	r0, r3
 80118ac:	f7fe fcce 	bl	801024c <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80118b0:	687b      	ldr	r3, [r7, #4]
 80118b2:	681b      	ldr	r3, [r3, #0]
 80118b4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80118b8:	681b      	ldr	r3, [r3, #0]
 80118ba:	687a      	ldr	r2, [r7, #4]
 80118bc:	6812      	ldr	r2, [r2, #0]
 80118be:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80118c2:	f043 0301 	orr.w	r3, r3, #1
 80118c6:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80118c8:	687b      	ldr	r3, [r7, #4]
 80118ca:	6a1b      	ldr	r3, [r3, #32]
 80118cc:	2b00      	cmp	r3, #0
 80118ce:	d005      	beq.n	80118dc <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80118d0:	4b04      	ldr	r3, [pc, #16]	; (80118e4 <HAL_PCD_SuspendCallback+0x48>)
 80118d2:	691b      	ldr	r3, [r3, #16]
 80118d4:	4a03      	ldr	r2, [pc, #12]	; (80118e4 <HAL_PCD_SuspendCallback+0x48>)
 80118d6:	f043 0306 	orr.w	r3, r3, #6
 80118da:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80118dc:	bf00      	nop
 80118de:	3708      	adds	r7, #8
 80118e0:	46bd      	mov	sp, r7
 80118e2:	bd80      	pop	{r7, pc}
 80118e4:	e000ed00 	.word	0xe000ed00

080118e8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80118e8:	b580      	push	{r7, lr}
 80118ea:	b082      	sub	sp, #8
 80118ec:	af00      	add	r7, sp, #0
 80118ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80118f0:	687b      	ldr	r3, [r7, #4]
 80118f2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80118f6:	4618      	mov	r0, r3
 80118f8:	f7fe fcbe 	bl	8010278 <USBD_LL_Resume>
}
 80118fc:	bf00      	nop
 80118fe:	3708      	adds	r7, #8
 8011900:	46bd      	mov	sp, r7
 8011902:	bd80      	pop	{r7, pc}

08011904 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011904:	b580      	push	{r7, lr}
 8011906:	b082      	sub	sp, #8
 8011908:	af00      	add	r7, sp, #0
 801190a:	6078      	str	r0, [r7, #4]
 801190c:	460b      	mov	r3, r1
 801190e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8011910:	687b      	ldr	r3, [r7, #4]
 8011912:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8011916:	78fa      	ldrb	r2, [r7, #3]
 8011918:	4611      	mov	r1, r2
 801191a:	4618      	mov	r0, r3
 801191c:	f7fe fd0c 	bl	8010338 <USBD_LL_IsoOUTIncomplete>
}
 8011920:	bf00      	nop
 8011922:	3708      	adds	r7, #8
 8011924:	46bd      	mov	sp, r7
 8011926:	bd80      	pop	{r7, pc}

08011928 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011928:	b580      	push	{r7, lr}
 801192a:	b082      	sub	sp, #8
 801192c:	af00      	add	r7, sp, #0
 801192e:	6078      	str	r0, [r7, #4]
 8011930:	460b      	mov	r3, r1
 8011932:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8011934:	687b      	ldr	r3, [r7, #4]
 8011936:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801193a:	78fa      	ldrb	r2, [r7, #3]
 801193c:	4611      	mov	r1, r2
 801193e:	4618      	mov	r0, r3
 8011940:	f7fe fcd4 	bl	80102ec <USBD_LL_IsoINIncomplete>
}
 8011944:	bf00      	nop
 8011946:	3708      	adds	r7, #8
 8011948:	46bd      	mov	sp, r7
 801194a:	bd80      	pop	{r7, pc}

0801194c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801194c:	b580      	push	{r7, lr}
 801194e:	b082      	sub	sp, #8
 8011950:	af00      	add	r7, sp, #0
 8011952:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8011954:	687b      	ldr	r3, [r7, #4]
 8011956:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801195a:	4618      	mov	r0, r3
 801195c:	f7fe fd12 	bl	8010384 <USBD_LL_DevConnected>
}
 8011960:	bf00      	nop
 8011962:	3708      	adds	r7, #8
 8011964:	46bd      	mov	sp, r7
 8011966:	bd80      	pop	{r7, pc}

08011968 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011968:	b580      	push	{r7, lr}
 801196a:	b082      	sub	sp, #8
 801196c:	af00      	add	r7, sp, #0
 801196e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8011970:	687b      	ldr	r3, [r7, #4]
 8011972:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8011976:	4618      	mov	r0, r3
 8011978:	f7fe fd0f 	bl	801039a <USBD_LL_DevDisconnected>
}
 801197c:	bf00      	nop
 801197e:	3708      	adds	r7, #8
 8011980:	46bd      	mov	sp, r7
 8011982:	bd80      	pop	{r7, pc}

08011984 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8011984:	b580      	push	{r7, lr}
 8011986:	b082      	sub	sp, #8
 8011988:	af00      	add	r7, sp, #0
 801198a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 801198c:	687b      	ldr	r3, [r7, #4]
 801198e:	781b      	ldrb	r3, [r3, #0]
 8011990:	2b00      	cmp	r3, #0
 8011992:	d13c      	bne.n	8011a0e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8011994:	4a20      	ldr	r2, [pc, #128]	; (8011a18 <USBD_LL_Init+0x94>)
 8011996:	687b      	ldr	r3, [r7, #4]
 8011998:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 801199c:	687b      	ldr	r3, [r7, #4]
 801199e:	4a1e      	ldr	r2, [pc, #120]	; (8011a18 <USBD_LL_Init+0x94>)
 80119a0:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80119a4:	4b1c      	ldr	r3, [pc, #112]	; (8011a18 <USBD_LL_Init+0x94>)
 80119a6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80119aa:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80119ac:	4b1a      	ldr	r3, [pc, #104]	; (8011a18 <USBD_LL_Init+0x94>)
 80119ae:	2204      	movs	r2, #4
 80119b0:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80119b2:	4b19      	ldr	r3, [pc, #100]	; (8011a18 <USBD_LL_Init+0x94>)
 80119b4:	2202      	movs	r2, #2
 80119b6:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80119b8:	4b17      	ldr	r3, [pc, #92]	; (8011a18 <USBD_LL_Init+0x94>)
 80119ba:	2200      	movs	r2, #0
 80119bc:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80119be:	4b16      	ldr	r3, [pc, #88]	; (8011a18 <USBD_LL_Init+0x94>)
 80119c0:	2202      	movs	r2, #2
 80119c2:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80119c4:	4b14      	ldr	r3, [pc, #80]	; (8011a18 <USBD_LL_Init+0x94>)
 80119c6:	2201      	movs	r2, #1
 80119c8:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80119ca:	4b13      	ldr	r3, [pc, #76]	; (8011a18 <USBD_LL_Init+0x94>)
 80119cc:	2200      	movs	r2, #0
 80119ce:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80119d0:	4b11      	ldr	r3, [pc, #68]	; (8011a18 <USBD_LL_Init+0x94>)
 80119d2:	2200      	movs	r2, #0
 80119d4:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80119d6:	4b10      	ldr	r3, [pc, #64]	; (8011a18 <USBD_LL_Init+0x94>)
 80119d8:	2200      	movs	r2, #0
 80119da:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80119dc:	4b0e      	ldr	r3, [pc, #56]	; (8011a18 <USBD_LL_Init+0x94>)
 80119de:	2200      	movs	r2, #0
 80119e0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80119e2:	480d      	ldr	r0, [pc, #52]	; (8011a18 <USBD_LL_Init+0x94>)
 80119e4:	f7f9 f93f 	bl	800ac66 <HAL_PCD_Init>
 80119e8:	4603      	mov	r3, r0
 80119ea:	2b00      	cmp	r3, #0
 80119ec:	d001      	beq.n	80119f2 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80119ee:	f7f6 febf 	bl	8008770 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80119f2:	2180      	movs	r1, #128	; 0x80
 80119f4:	4808      	ldr	r0, [pc, #32]	; (8011a18 <USBD_LL_Init+0x94>)
 80119f6:	f7fa fa9c 	bl	800bf32 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80119fa:	2240      	movs	r2, #64	; 0x40
 80119fc:	2100      	movs	r1, #0
 80119fe:	4806      	ldr	r0, [pc, #24]	; (8011a18 <USBD_LL_Init+0x94>)
 8011a00:	f7fa fa50 	bl	800bea4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8011a04:	2280      	movs	r2, #128	; 0x80
 8011a06:	2101      	movs	r1, #1
 8011a08:	4803      	ldr	r0, [pc, #12]	; (8011a18 <USBD_LL_Init+0x94>)
 8011a0a:	f7fa fa4b 	bl	800bea4 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8011a0e:	2300      	movs	r3, #0
}
 8011a10:	4618      	mov	r0, r3
 8011a12:	3708      	adds	r7, #8
 8011a14:	46bd      	mov	sp, r7
 8011a16:	bd80      	pop	{r7, pc}
 8011a18:	200013c8 	.word	0x200013c8

08011a1c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8011a1c:	b580      	push	{r7, lr}
 8011a1e:	b084      	sub	sp, #16
 8011a20:	af00      	add	r7, sp, #0
 8011a22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011a24:	2300      	movs	r3, #0
 8011a26:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011a28:	2300      	movs	r3, #0
 8011a2a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8011a2c:	687b      	ldr	r3, [r7, #4]
 8011a2e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8011a32:	4618      	mov	r0, r3
 8011a34:	f7f9 fa34 	bl	800aea0 <HAL_PCD_Start>
 8011a38:	4603      	mov	r3, r0
 8011a3a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011a3c:	7bfb      	ldrb	r3, [r7, #15]
 8011a3e:	4618      	mov	r0, r3
 8011a40:	f000 f942 	bl	8011cc8 <USBD_Get_USB_Status>
 8011a44:	4603      	mov	r3, r0
 8011a46:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011a48:	7bbb      	ldrb	r3, [r7, #14]
}
 8011a4a:	4618      	mov	r0, r3
 8011a4c:	3710      	adds	r7, #16
 8011a4e:	46bd      	mov	sp, r7
 8011a50:	bd80      	pop	{r7, pc}

08011a52 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8011a52:	b580      	push	{r7, lr}
 8011a54:	b084      	sub	sp, #16
 8011a56:	af00      	add	r7, sp, #0
 8011a58:	6078      	str	r0, [r7, #4]
 8011a5a:	4608      	mov	r0, r1
 8011a5c:	4611      	mov	r1, r2
 8011a5e:	461a      	mov	r2, r3
 8011a60:	4603      	mov	r3, r0
 8011a62:	70fb      	strb	r3, [r7, #3]
 8011a64:	460b      	mov	r3, r1
 8011a66:	70bb      	strb	r3, [r7, #2]
 8011a68:	4613      	mov	r3, r2
 8011a6a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011a6c:	2300      	movs	r3, #0
 8011a6e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011a70:	2300      	movs	r3, #0
 8011a72:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8011a74:	687b      	ldr	r3, [r7, #4]
 8011a76:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8011a7a:	78bb      	ldrb	r3, [r7, #2]
 8011a7c:	883a      	ldrh	r2, [r7, #0]
 8011a7e:	78f9      	ldrb	r1, [r7, #3]
 8011a80:	f7f9 fe18 	bl	800b6b4 <HAL_PCD_EP_Open>
 8011a84:	4603      	mov	r3, r0
 8011a86:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011a88:	7bfb      	ldrb	r3, [r7, #15]
 8011a8a:	4618      	mov	r0, r3
 8011a8c:	f000 f91c 	bl	8011cc8 <USBD_Get_USB_Status>
 8011a90:	4603      	mov	r3, r0
 8011a92:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011a94:	7bbb      	ldrb	r3, [r7, #14]
}
 8011a96:	4618      	mov	r0, r3
 8011a98:	3710      	adds	r7, #16
 8011a9a:	46bd      	mov	sp, r7
 8011a9c:	bd80      	pop	{r7, pc}

08011a9e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011a9e:	b580      	push	{r7, lr}
 8011aa0:	b084      	sub	sp, #16
 8011aa2:	af00      	add	r7, sp, #0
 8011aa4:	6078      	str	r0, [r7, #4]
 8011aa6:	460b      	mov	r3, r1
 8011aa8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011aaa:	2300      	movs	r3, #0
 8011aac:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011aae:	2300      	movs	r3, #0
 8011ab0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8011ab2:	687b      	ldr	r3, [r7, #4]
 8011ab4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8011ab8:	78fa      	ldrb	r2, [r7, #3]
 8011aba:	4611      	mov	r1, r2
 8011abc:	4618      	mov	r0, r3
 8011abe:	f7f9 fe61 	bl	800b784 <HAL_PCD_EP_Close>
 8011ac2:	4603      	mov	r3, r0
 8011ac4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011ac6:	7bfb      	ldrb	r3, [r7, #15]
 8011ac8:	4618      	mov	r0, r3
 8011aca:	f000 f8fd 	bl	8011cc8 <USBD_Get_USB_Status>
 8011ace:	4603      	mov	r3, r0
 8011ad0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011ad2:	7bbb      	ldrb	r3, [r7, #14]
}
 8011ad4:	4618      	mov	r0, r3
 8011ad6:	3710      	adds	r7, #16
 8011ad8:	46bd      	mov	sp, r7
 8011ada:	bd80      	pop	{r7, pc}

08011adc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011adc:	b580      	push	{r7, lr}
 8011ade:	b084      	sub	sp, #16
 8011ae0:	af00      	add	r7, sp, #0
 8011ae2:	6078      	str	r0, [r7, #4]
 8011ae4:	460b      	mov	r3, r1
 8011ae6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011ae8:	2300      	movs	r3, #0
 8011aea:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011aec:	2300      	movs	r3, #0
 8011aee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8011af0:	687b      	ldr	r3, [r7, #4]
 8011af2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8011af6:	78fa      	ldrb	r2, [r7, #3]
 8011af8:	4611      	mov	r1, r2
 8011afa:	4618      	mov	r0, r3
 8011afc:	f7f9 ff39 	bl	800b972 <HAL_PCD_EP_SetStall>
 8011b00:	4603      	mov	r3, r0
 8011b02:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011b04:	7bfb      	ldrb	r3, [r7, #15]
 8011b06:	4618      	mov	r0, r3
 8011b08:	f000 f8de 	bl	8011cc8 <USBD_Get_USB_Status>
 8011b0c:	4603      	mov	r3, r0
 8011b0e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011b10:	7bbb      	ldrb	r3, [r7, #14]
}
 8011b12:	4618      	mov	r0, r3
 8011b14:	3710      	adds	r7, #16
 8011b16:	46bd      	mov	sp, r7
 8011b18:	bd80      	pop	{r7, pc}

08011b1a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011b1a:	b580      	push	{r7, lr}
 8011b1c:	b084      	sub	sp, #16
 8011b1e:	af00      	add	r7, sp, #0
 8011b20:	6078      	str	r0, [r7, #4]
 8011b22:	460b      	mov	r3, r1
 8011b24:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011b26:	2300      	movs	r3, #0
 8011b28:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011b2a:	2300      	movs	r3, #0
 8011b2c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8011b2e:	687b      	ldr	r3, [r7, #4]
 8011b30:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8011b34:	78fa      	ldrb	r2, [r7, #3]
 8011b36:	4611      	mov	r1, r2
 8011b38:	4618      	mov	r0, r3
 8011b3a:	f7f9 ff7e 	bl	800ba3a <HAL_PCD_EP_ClrStall>
 8011b3e:	4603      	mov	r3, r0
 8011b40:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011b42:	7bfb      	ldrb	r3, [r7, #15]
 8011b44:	4618      	mov	r0, r3
 8011b46:	f000 f8bf 	bl	8011cc8 <USBD_Get_USB_Status>
 8011b4a:	4603      	mov	r3, r0
 8011b4c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011b4e:	7bbb      	ldrb	r3, [r7, #14]
}
 8011b50:	4618      	mov	r0, r3
 8011b52:	3710      	adds	r7, #16
 8011b54:	46bd      	mov	sp, r7
 8011b56:	bd80      	pop	{r7, pc}

08011b58 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011b58:	b480      	push	{r7}
 8011b5a:	b085      	sub	sp, #20
 8011b5c:	af00      	add	r7, sp, #0
 8011b5e:	6078      	str	r0, [r7, #4]
 8011b60:	460b      	mov	r3, r1
 8011b62:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8011b64:	687b      	ldr	r3, [r7, #4]
 8011b66:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8011b6a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8011b6c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8011b70:	2b00      	cmp	r3, #0
 8011b72:	da0b      	bge.n	8011b8c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8011b74:	78fb      	ldrb	r3, [r7, #3]
 8011b76:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8011b7a:	68f9      	ldr	r1, [r7, #12]
 8011b7c:	4613      	mov	r3, r2
 8011b7e:	00db      	lsls	r3, r3, #3
 8011b80:	1a9b      	subs	r3, r3, r2
 8011b82:	009b      	lsls	r3, r3, #2
 8011b84:	440b      	add	r3, r1
 8011b86:	333e      	adds	r3, #62	; 0x3e
 8011b88:	781b      	ldrb	r3, [r3, #0]
 8011b8a:	e00b      	b.n	8011ba4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8011b8c:	78fb      	ldrb	r3, [r7, #3]
 8011b8e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8011b92:	68f9      	ldr	r1, [r7, #12]
 8011b94:	4613      	mov	r3, r2
 8011b96:	00db      	lsls	r3, r3, #3
 8011b98:	1a9b      	subs	r3, r3, r2
 8011b9a:	009b      	lsls	r3, r3, #2
 8011b9c:	440b      	add	r3, r1
 8011b9e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8011ba2:	781b      	ldrb	r3, [r3, #0]
  }
}
 8011ba4:	4618      	mov	r0, r3
 8011ba6:	3714      	adds	r7, #20
 8011ba8:	46bd      	mov	sp, r7
 8011baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bae:	4770      	bx	lr

08011bb0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8011bb0:	b580      	push	{r7, lr}
 8011bb2:	b084      	sub	sp, #16
 8011bb4:	af00      	add	r7, sp, #0
 8011bb6:	6078      	str	r0, [r7, #4]
 8011bb8:	460b      	mov	r3, r1
 8011bba:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011bbc:	2300      	movs	r3, #0
 8011bbe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011bc0:	2300      	movs	r3, #0
 8011bc2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8011bc4:	687b      	ldr	r3, [r7, #4]
 8011bc6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8011bca:	78fa      	ldrb	r2, [r7, #3]
 8011bcc:	4611      	mov	r1, r2
 8011bce:	4618      	mov	r0, r3
 8011bd0:	f7f9 fd4b 	bl	800b66a <HAL_PCD_SetAddress>
 8011bd4:	4603      	mov	r3, r0
 8011bd6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011bd8:	7bfb      	ldrb	r3, [r7, #15]
 8011bda:	4618      	mov	r0, r3
 8011bdc:	f000 f874 	bl	8011cc8 <USBD_Get_USB_Status>
 8011be0:	4603      	mov	r3, r0
 8011be2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011be4:	7bbb      	ldrb	r3, [r7, #14]
}
 8011be6:	4618      	mov	r0, r3
 8011be8:	3710      	adds	r7, #16
 8011bea:	46bd      	mov	sp, r7
 8011bec:	bd80      	pop	{r7, pc}

08011bee <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8011bee:	b580      	push	{r7, lr}
 8011bf0:	b086      	sub	sp, #24
 8011bf2:	af00      	add	r7, sp, #0
 8011bf4:	60f8      	str	r0, [r7, #12]
 8011bf6:	607a      	str	r2, [r7, #4]
 8011bf8:	603b      	str	r3, [r7, #0]
 8011bfa:	460b      	mov	r3, r1
 8011bfc:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011bfe:	2300      	movs	r3, #0
 8011c00:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011c02:	2300      	movs	r3, #0
 8011c04:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8011c06:	68fb      	ldr	r3, [r7, #12]
 8011c08:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8011c0c:	7af9      	ldrb	r1, [r7, #11]
 8011c0e:	683b      	ldr	r3, [r7, #0]
 8011c10:	687a      	ldr	r2, [r7, #4]
 8011c12:	f7f9 fe64 	bl	800b8de <HAL_PCD_EP_Transmit>
 8011c16:	4603      	mov	r3, r0
 8011c18:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011c1a:	7dfb      	ldrb	r3, [r7, #23]
 8011c1c:	4618      	mov	r0, r3
 8011c1e:	f000 f853 	bl	8011cc8 <USBD_Get_USB_Status>
 8011c22:	4603      	mov	r3, r0
 8011c24:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8011c26:	7dbb      	ldrb	r3, [r7, #22]
}
 8011c28:	4618      	mov	r0, r3
 8011c2a:	3718      	adds	r7, #24
 8011c2c:	46bd      	mov	sp, r7
 8011c2e:	bd80      	pop	{r7, pc}

08011c30 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8011c30:	b580      	push	{r7, lr}
 8011c32:	b086      	sub	sp, #24
 8011c34:	af00      	add	r7, sp, #0
 8011c36:	60f8      	str	r0, [r7, #12]
 8011c38:	607a      	str	r2, [r7, #4]
 8011c3a:	603b      	str	r3, [r7, #0]
 8011c3c:	460b      	mov	r3, r1
 8011c3e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011c40:	2300      	movs	r3, #0
 8011c42:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011c44:	2300      	movs	r3, #0
 8011c46:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8011c48:	68fb      	ldr	r3, [r7, #12]
 8011c4a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8011c4e:	7af9      	ldrb	r1, [r7, #11]
 8011c50:	683b      	ldr	r3, [r7, #0]
 8011c52:	687a      	ldr	r2, [r7, #4]
 8011c54:	f7f9 fde0 	bl	800b818 <HAL_PCD_EP_Receive>
 8011c58:	4603      	mov	r3, r0
 8011c5a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011c5c:	7dfb      	ldrb	r3, [r7, #23]
 8011c5e:	4618      	mov	r0, r3
 8011c60:	f000 f832 	bl	8011cc8 <USBD_Get_USB_Status>
 8011c64:	4603      	mov	r3, r0
 8011c66:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8011c68:	7dbb      	ldrb	r3, [r7, #22]
}
 8011c6a:	4618      	mov	r0, r3
 8011c6c:	3718      	adds	r7, #24
 8011c6e:	46bd      	mov	sp, r7
 8011c70:	bd80      	pop	{r7, pc}

08011c72 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011c72:	b580      	push	{r7, lr}
 8011c74:	b082      	sub	sp, #8
 8011c76:	af00      	add	r7, sp, #0
 8011c78:	6078      	str	r0, [r7, #4]
 8011c7a:	460b      	mov	r3, r1
 8011c7c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8011c7e:	687b      	ldr	r3, [r7, #4]
 8011c80:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8011c84:	78fa      	ldrb	r2, [r7, #3]
 8011c86:	4611      	mov	r1, r2
 8011c88:	4618      	mov	r0, r3
 8011c8a:	f7f9 fe10 	bl	800b8ae <HAL_PCD_EP_GetRxCount>
 8011c8e:	4603      	mov	r3, r0
}
 8011c90:	4618      	mov	r0, r3
 8011c92:	3708      	adds	r7, #8
 8011c94:	46bd      	mov	sp, r7
 8011c96:	bd80      	pop	{r7, pc}

08011c98 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8011c98:	b480      	push	{r7}
 8011c9a:	b083      	sub	sp, #12
 8011c9c:	af00      	add	r7, sp, #0
 8011c9e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8011ca0:	4b03      	ldr	r3, [pc, #12]	; (8011cb0 <USBD_static_malloc+0x18>)
}
 8011ca2:	4618      	mov	r0, r3
 8011ca4:	370c      	adds	r7, #12
 8011ca6:	46bd      	mov	sp, r7
 8011ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cac:	4770      	bx	lr
 8011cae:	bf00      	nop
 8011cb0:	200017d0 	.word	0x200017d0

08011cb4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8011cb4:	b480      	push	{r7}
 8011cb6:	b083      	sub	sp, #12
 8011cb8:	af00      	add	r7, sp, #0
 8011cba:	6078      	str	r0, [r7, #4]

}
 8011cbc:	bf00      	nop
 8011cbe:	370c      	adds	r7, #12
 8011cc0:	46bd      	mov	sp, r7
 8011cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cc6:	4770      	bx	lr

08011cc8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8011cc8:	b480      	push	{r7}
 8011cca:	b085      	sub	sp, #20
 8011ccc:	af00      	add	r7, sp, #0
 8011cce:	4603      	mov	r3, r0
 8011cd0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011cd2:	2300      	movs	r3, #0
 8011cd4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8011cd6:	79fb      	ldrb	r3, [r7, #7]
 8011cd8:	2b03      	cmp	r3, #3
 8011cda:	d817      	bhi.n	8011d0c <USBD_Get_USB_Status+0x44>
 8011cdc:	a201      	add	r2, pc, #4	; (adr r2, 8011ce4 <USBD_Get_USB_Status+0x1c>)
 8011cde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011ce2:	bf00      	nop
 8011ce4:	08011cf5 	.word	0x08011cf5
 8011ce8:	08011cfb 	.word	0x08011cfb
 8011cec:	08011d01 	.word	0x08011d01
 8011cf0:	08011d07 	.word	0x08011d07
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8011cf4:	2300      	movs	r3, #0
 8011cf6:	73fb      	strb	r3, [r7, #15]
    break;
 8011cf8:	e00b      	b.n	8011d12 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8011cfa:	2303      	movs	r3, #3
 8011cfc:	73fb      	strb	r3, [r7, #15]
    break;
 8011cfe:	e008      	b.n	8011d12 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8011d00:	2301      	movs	r3, #1
 8011d02:	73fb      	strb	r3, [r7, #15]
    break;
 8011d04:	e005      	b.n	8011d12 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8011d06:	2303      	movs	r3, #3
 8011d08:	73fb      	strb	r3, [r7, #15]
    break;
 8011d0a:	e002      	b.n	8011d12 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8011d0c:	2303      	movs	r3, #3
 8011d0e:	73fb      	strb	r3, [r7, #15]
    break;
 8011d10:	bf00      	nop
  }
  return usb_status;
 8011d12:	7bfb      	ldrb	r3, [r7, #15]
}
 8011d14:	4618      	mov	r0, r3
 8011d16:	3714      	adds	r7, #20
 8011d18:	46bd      	mov	sp, r7
 8011d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d1e:	4770      	bx	lr

08011d20 <main>:
 */

#include "main.h"

int main(void)
{
 8011d20:	b580      	push	{r7, lr}
 8011d22:	af00      	add	r7, sp, #0

	hwInit();
 8011d24:	f7f7 feb6 	bl	8009a94 <hwInit>
	apInit();
 8011d28:	f7f6 fc2c 	bl	8008584 <apInit>

	apMain();
 8011d2c:	f7f6 fc42 	bl	80085b4 <apMain>
	return 0;
 8011d30:	2300      	movs	r3, #0
}
 8011d32:	4618      	mov	r0, r3
 8011d34:	bd80      	pop	{r7, pc}
	...

08011d38 <__errno>:
 8011d38:	4b01      	ldr	r3, [pc, #4]	; (8011d40 <__errno+0x8>)
 8011d3a:	6818      	ldr	r0, [r3, #0]
 8011d3c:	4770      	bx	lr
 8011d3e:	bf00      	nop
 8011d40:	200001a8 	.word	0x200001a8

08011d44 <__libc_init_array>:
 8011d44:	b570      	push	{r4, r5, r6, lr}
 8011d46:	4d0d      	ldr	r5, [pc, #52]	; (8011d7c <__libc_init_array+0x38>)
 8011d48:	4c0d      	ldr	r4, [pc, #52]	; (8011d80 <__libc_init_array+0x3c>)
 8011d4a:	1b64      	subs	r4, r4, r5
 8011d4c:	10a4      	asrs	r4, r4, #2
 8011d4e:	2600      	movs	r6, #0
 8011d50:	42a6      	cmp	r6, r4
 8011d52:	d109      	bne.n	8011d68 <__libc_init_array+0x24>
 8011d54:	4d0b      	ldr	r5, [pc, #44]	; (8011d84 <__libc_init_array+0x40>)
 8011d56:	4c0c      	ldr	r4, [pc, #48]	; (8011d88 <__libc_init_array+0x44>)
 8011d58:	f000 fca8 	bl	80126ac <_init>
 8011d5c:	1b64      	subs	r4, r4, r5
 8011d5e:	10a4      	asrs	r4, r4, #2
 8011d60:	2600      	movs	r6, #0
 8011d62:	42a6      	cmp	r6, r4
 8011d64:	d105      	bne.n	8011d72 <__libc_init_array+0x2e>
 8011d66:	bd70      	pop	{r4, r5, r6, pc}
 8011d68:	f855 3b04 	ldr.w	r3, [r5], #4
 8011d6c:	4798      	blx	r3
 8011d6e:	3601      	adds	r6, #1
 8011d70:	e7ee      	b.n	8011d50 <__libc_init_array+0xc>
 8011d72:	f855 3b04 	ldr.w	r3, [r5], #4
 8011d76:	4798      	blx	r3
 8011d78:	3601      	adds	r6, #1
 8011d7a:	e7f2      	b.n	8011d62 <__libc_init_array+0x1e>
 8011d7c:	0801283c 	.word	0x0801283c
 8011d80:	0801283c 	.word	0x0801283c
 8011d84:	0801283c 	.word	0x0801283c
 8011d88:	08012840 	.word	0x08012840

08011d8c <memset>:
 8011d8c:	4402      	add	r2, r0
 8011d8e:	4603      	mov	r3, r0
 8011d90:	4293      	cmp	r3, r2
 8011d92:	d100      	bne.n	8011d96 <memset+0xa>
 8011d94:	4770      	bx	lr
 8011d96:	f803 1b01 	strb.w	r1, [r3], #1
 8011d9a:	e7f9      	b.n	8011d90 <memset+0x4>

08011d9c <_vsniprintf_r>:
 8011d9c:	b530      	push	{r4, r5, lr}
 8011d9e:	4614      	mov	r4, r2
 8011da0:	2c00      	cmp	r4, #0
 8011da2:	b09b      	sub	sp, #108	; 0x6c
 8011da4:	4605      	mov	r5, r0
 8011da6:	461a      	mov	r2, r3
 8011da8:	da05      	bge.n	8011db6 <_vsniprintf_r+0x1a>
 8011daa:	238b      	movs	r3, #139	; 0x8b
 8011dac:	6003      	str	r3, [r0, #0]
 8011dae:	f04f 30ff 	mov.w	r0, #4294967295
 8011db2:	b01b      	add	sp, #108	; 0x6c
 8011db4:	bd30      	pop	{r4, r5, pc}
 8011db6:	f44f 7302 	mov.w	r3, #520	; 0x208
 8011dba:	f8ad 300c 	strh.w	r3, [sp, #12]
 8011dbe:	bf14      	ite	ne
 8011dc0:	f104 33ff 	addne.w	r3, r4, #4294967295
 8011dc4:	4623      	moveq	r3, r4
 8011dc6:	9302      	str	r3, [sp, #8]
 8011dc8:	9305      	str	r3, [sp, #20]
 8011dca:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8011dce:	9100      	str	r1, [sp, #0]
 8011dd0:	9104      	str	r1, [sp, #16]
 8011dd2:	f8ad 300e 	strh.w	r3, [sp, #14]
 8011dd6:	4669      	mov	r1, sp
 8011dd8:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8011dda:	f000 f875 	bl	8011ec8 <_svfiprintf_r>
 8011dde:	1c43      	adds	r3, r0, #1
 8011de0:	bfbc      	itt	lt
 8011de2:	238b      	movlt	r3, #139	; 0x8b
 8011de4:	602b      	strlt	r3, [r5, #0]
 8011de6:	2c00      	cmp	r4, #0
 8011de8:	d0e3      	beq.n	8011db2 <_vsniprintf_r+0x16>
 8011dea:	9b00      	ldr	r3, [sp, #0]
 8011dec:	2200      	movs	r2, #0
 8011dee:	701a      	strb	r2, [r3, #0]
 8011df0:	e7df      	b.n	8011db2 <_vsniprintf_r+0x16>
	...

08011df4 <vsniprintf>:
 8011df4:	b507      	push	{r0, r1, r2, lr}
 8011df6:	9300      	str	r3, [sp, #0]
 8011df8:	4613      	mov	r3, r2
 8011dfa:	460a      	mov	r2, r1
 8011dfc:	4601      	mov	r1, r0
 8011dfe:	4803      	ldr	r0, [pc, #12]	; (8011e0c <vsniprintf+0x18>)
 8011e00:	6800      	ldr	r0, [r0, #0]
 8011e02:	f7ff ffcb 	bl	8011d9c <_vsniprintf_r>
 8011e06:	b003      	add	sp, #12
 8011e08:	f85d fb04 	ldr.w	pc, [sp], #4
 8011e0c:	200001a8 	.word	0x200001a8

08011e10 <__ssputs_r>:
 8011e10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011e14:	688e      	ldr	r6, [r1, #8]
 8011e16:	429e      	cmp	r6, r3
 8011e18:	4682      	mov	sl, r0
 8011e1a:	460c      	mov	r4, r1
 8011e1c:	4690      	mov	r8, r2
 8011e1e:	461f      	mov	r7, r3
 8011e20:	d838      	bhi.n	8011e94 <__ssputs_r+0x84>
 8011e22:	898a      	ldrh	r2, [r1, #12]
 8011e24:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8011e28:	d032      	beq.n	8011e90 <__ssputs_r+0x80>
 8011e2a:	6825      	ldr	r5, [r4, #0]
 8011e2c:	6909      	ldr	r1, [r1, #16]
 8011e2e:	eba5 0901 	sub.w	r9, r5, r1
 8011e32:	6965      	ldr	r5, [r4, #20]
 8011e34:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011e38:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8011e3c:	3301      	adds	r3, #1
 8011e3e:	444b      	add	r3, r9
 8011e40:	106d      	asrs	r5, r5, #1
 8011e42:	429d      	cmp	r5, r3
 8011e44:	bf38      	it	cc
 8011e46:	461d      	movcc	r5, r3
 8011e48:	0553      	lsls	r3, r2, #21
 8011e4a:	d531      	bpl.n	8011eb0 <__ssputs_r+0xa0>
 8011e4c:	4629      	mov	r1, r5
 8011e4e:	f000 fb63 	bl	8012518 <_malloc_r>
 8011e52:	4606      	mov	r6, r0
 8011e54:	b950      	cbnz	r0, 8011e6c <__ssputs_r+0x5c>
 8011e56:	230c      	movs	r3, #12
 8011e58:	f8ca 3000 	str.w	r3, [sl]
 8011e5c:	89a3      	ldrh	r3, [r4, #12]
 8011e5e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011e62:	81a3      	strh	r3, [r4, #12]
 8011e64:	f04f 30ff 	mov.w	r0, #4294967295
 8011e68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011e6c:	6921      	ldr	r1, [r4, #16]
 8011e6e:	464a      	mov	r2, r9
 8011e70:	f000 fabe 	bl	80123f0 <memcpy>
 8011e74:	89a3      	ldrh	r3, [r4, #12]
 8011e76:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8011e7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011e7e:	81a3      	strh	r3, [r4, #12]
 8011e80:	6126      	str	r6, [r4, #16]
 8011e82:	6165      	str	r5, [r4, #20]
 8011e84:	444e      	add	r6, r9
 8011e86:	eba5 0509 	sub.w	r5, r5, r9
 8011e8a:	6026      	str	r6, [r4, #0]
 8011e8c:	60a5      	str	r5, [r4, #8]
 8011e8e:	463e      	mov	r6, r7
 8011e90:	42be      	cmp	r6, r7
 8011e92:	d900      	bls.n	8011e96 <__ssputs_r+0x86>
 8011e94:	463e      	mov	r6, r7
 8011e96:	6820      	ldr	r0, [r4, #0]
 8011e98:	4632      	mov	r2, r6
 8011e9a:	4641      	mov	r1, r8
 8011e9c:	f000 fab6 	bl	801240c <memmove>
 8011ea0:	68a3      	ldr	r3, [r4, #8]
 8011ea2:	1b9b      	subs	r3, r3, r6
 8011ea4:	60a3      	str	r3, [r4, #8]
 8011ea6:	6823      	ldr	r3, [r4, #0]
 8011ea8:	4433      	add	r3, r6
 8011eaa:	6023      	str	r3, [r4, #0]
 8011eac:	2000      	movs	r0, #0
 8011eae:	e7db      	b.n	8011e68 <__ssputs_r+0x58>
 8011eb0:	462a      	mov	r2, r5
 8011eb2:	f000 fba5 	bl	8012600 <_realloc_r>
 8011eb6:	4606      	mov	r6, r0
 8011eb8:	2800      	cmp	r0, #0
 8011eba:	d1e1      	bne.n	8011e80 <__ssputs_r+0x70>
 8011ebc:	6921      	ldr	r1, [r4, #16]
 8011ebe:	4650      	mov	r0, sl
 8011ec0:	f000 fabe 	bl	8012440 <_free_r>
 8011ec4:	e7c7      	b.n	8011e56 <__ssputs_r+0x46>
	...

08011ec8 <_svfiprintf_r>:
 8011ec8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011ecc:	4698      	mov	r8, r3
 8011ece:	898b      	ldrh	r3, [r1, #12]
 8011ed0:	061b      	lsls	r3, r3, #24
 8011ed2:	b09d      	sub	sp, #116	; 0x74
 8011ed4:	4607      	mov	r7, r0
 8011ed6:	460d      	mov	r5, r1
 8011ed8:	4614      	mov	r4, r2
 8011eda:	d50e      	bpl.n	8011efa <_svfiprintf_r+0x32>
 8011edc:	690b      	ldr	r3, [r1, #16]
 8011ede:	b963      	cbnz	r3, 8011efa <_svfiprintf_r+0x32>
 8011ee0:	2140      	movs	r1, #64	; 0x40
 8011ee2:	f000 fb19 	bl	8012518 <_malloc_r>
 8011ee6:	6028      	str	r0, [r5, #0]
 8011ee8:	6128      	str	r0, [r5, #16]
 8011eea:	b920      	cbnz	r0, 8011ef6 <_svfiprintf_r+0x2e>
 8011eec:	230c      	movs	r3, #12
 8011eee:	603b      	str	r3, [r7, #0]
 8011ef0:	f04f 30ff 	mov.w	r0, #4294967295
 8011ef4:	e0d1      	b.n	801209a <_svfiprintf_r+0x1d2>
 8011ef6:	2340      	movs	r3, #64	; 0x40
 8011ef8:	616b      	str	r3, [r5, #20]
 8011efa:	2300      	movs	r3, #0
 8011efc:	9309      	str	r3, [sp, #36]	; 0x24
 8011efe:	2320      	movs	r3, #32
 8011f00:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011f04:	f8cd 800c 	str.w	r8, [sp, #12]
 8011f08:	2330      	movs	r3, #48	; 0x30
 8011f0a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80120b4 <_svfiprintf_r+0x1ec>
 8011f0e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011f12:	f04f 0901 	mov.w	r9, #1
 8011f16:	4623      	mov	r3, r4
 8011f18:	469a      	mov	sl, r3
 8011f1a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011f1e:	b10a      	cbz	r2, 8011f24 <_svfiprintf_r+0x5c>
 8011f20:	2a25      	cmp	r2, #37	; 0x25
 8011f22:	d1f9      	bne.n	8011f18 <_svfiprintf_r+0x50>
 8011f24:	ebba 0b04 	subs.w	fp, sl, r4
 8011f28:	d00b      	beq.n	8011f42 <_svfiprintf_r+0x7a>
 8011f2a:	465b      	mov	r3, fp
 8011f2c:	4622      	mov	r2, r4
 8011f2e:	4629      	mov	r1, r5
 8011f30:	4638      	mov	r0, r7
 8011f32:	f7ff ff6d 	bl	8011e10 <__ssputs_r>
 8011f36:	3001      	adds	r0, #1
 8011f38:	f000 80aa 	beq.w	8012090 <_svfiprintf_r+0x1c8>
 8011f3c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011f3e:	445a      	add	r2, fp
 8011f40:	9209      	str	r2, [sp, #36]	; 0x24
 8011f42:	f89a 3000 	ldrb.w	r3, [sl]
 8011f46:	2b00      	cmp	r3, #0
 8011f48:	f000 80a2 	beq.w	8012090 <_svfiprintf_r+0x1c8>
 8011f4c:	2300      	movs	r3, #0
 8011f4e:	f04f 32ff 	mov.w	r2, #4294967295
 8011f52:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011f56:	f10a 0a01 	add.w	sl, sl, #1
 8011f5a:	9304      	str	r3, [sp, #16]
 8011f5c:	9307      	str	r3, [sp, #28]
 8011f5e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011f62:	931a      	str	r3, [sp, #104]	; 0x68
 8011f64:	4654      	mov	r4, sl
 8011f66:	2205      	movs	r2, #5
 8011f68:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011f6c:	4851      	ldr	r0, [pc, #324]	; (80120b4 <_svfiprintf_r+0x1ec>)
 8011f6e:	f7f6 f937 	bl	80081e0 <memchr>
 8011f72:	9a04      	ldr	r2, [sp, #16]
 8011f74:	b9d8      	cbnz	r0, 8011fae <_svfiprintf_r+0xe6>
 8011f76:	06d0      	lsls	r0, r2, #27
 8011f78:	bf44      	itt	mi
 8011f7a:	2320      	movmi	r3, #32
 8011f7c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011f80:	0711      	lsls	r1, r2, #28
 8011f82:	bf44      	itt	mi
 8011f84:	232b      	movmi	r3, #43	; 0x2b
 8011f86:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011f8a:	f89a 3000 	ldrb.w	r3, [sl]
 8011f8e:	2b2a      	cmp	r3, #42	; 0x2a
 8011f90:	d015      	beq.n	8011fbe <_svfiprintf_r+0xf6>
 8011f92:	9a07      	ldr	r2, [sp, #28]
 8011f94:	4654      	mov	r4, sl
 8011f96:	2000      	movs	r0, #0
 8011f98:	f04f 0c0a 	mov.w	ip, #10
 8011f9c:	4621      	mov	r1, r4
 8011f9e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011fa2:	3b30      	subs	r3, #48	; 0x30
 8011fa4:	2b09      	cmp	r3, #9
 8011fa6:	d94e      	bls.n	8012046 <_svfiprintf_r+0x17e>
 8011fa8:	b1b0      	cbz	r0, 8011fd8 <_svfiprintf_r+0x110>
 8011faa:	9207      	str	r2, [sp, #28]
 8011fac:	e014      	b.n	8011fd8 <_svfiprintf_r+0x110>
 8011fae:	eba0 0308 	sub.w	r3, r0, r8
 8011fb2:	fa09 f303 	lsl.w	r3, r9, r3
 8011fb6:	4313      	orrs	r3, r2
 8011fb8:	9304      	str	r3, [sp, #16]
 8011fba:	46a2      	mov	sl, r4
 8011fbc:	e7d2      	b.n	8011f64 <_svfiprintf_r+0x9c>
 8011fbe:	9b03      	ldr	r3, [sp, #12]
 8011fc0:	1d19      	adds	r1, r3, #4
 8011fc2:	681b      	ldr	r3, [r3, #0]
 8011fc4:	9103      	str	r1, [sp, #12]
 8011fc6:	2b00      	cmp	r3, #0
 8011fc8:	bfbb      	ittet	lt
 8011fca:	425b      	neglt	r3, r3
 8011fcc:	f042 0202 	orrlt.w	r2, r2, #2
 8011fd0:	9307      	strge	r3, [sp, #28]
 8011fd2:	9307      	strlt	r3, [sp, #28]
 8011fd4:	bfb8      	it	lt
 8011fd6:	9204      	strlt	r2, [sp, #16]
 8011fd8:	7823      	ldrb	r3, [r4, #0]
 8011fda:	2b2e      	cmp	r3, #46	; 0x2e
 8011fdc:	d10c      	bne.n	8011ff8 <_svfiprintf_r+0x130>
 8011fde:	7863      	ldrb	r3, [r4, #1]
 8011fe0:	2b2a      	cmp	r3, #42	; 0x2a
 8011fe2:	d135      	bne.n	8012050 <_svfiprintf_r+0x188>
 8011fe4:	9b03      	ldr	r3, [sp, #12]
 8011fe6:	1d1a      	adds	r2, r3, #4
 8011fe8:	681b      	ldr	r3, [r3, #0]
 8011fea:	9203      	str	r2, [sp, #12]
 8011fec:	2b00      	cmp	r3, #0
 8011fee:	bfb8      	it	lt
 8011ff0:	f04f 33ff 	movlt.w	r3, #4294967295
 8011ff4:	3402      	adds	r4, #2
 8011ff6:	9305      	str	r3, [sp, #20]
 8011ff8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80120c4 <_svfiprintf_r+0x1fc>
 8011ffc:	7821      	ldrb	r1, [r4, #0]
 8011ffe:	2203      	movs	r2, #3
 8012000:	4650      	mov	r0, sl
 8012002:	f7f6 f8ed 	bl	80081e0 <memchr>
 8012006:	b140      	cbz	r0, 801201a <_svfiprintf_r+0x152>
 8012008:	2340      	movs	r3, #64	; 0x40
 801200a:	eba0 000a 	sub.w	r0, r0, sl
 801200e:	fa03 f000 	lsl.w	r0, r3, r0
 8012012:	9b04      	ldr	r3, [sp, #16]
 8012014:	4303      	orrs	r3, r0
 8012016:	3401      	adds	r4, #1
 8012018:	9304      	str	r3, [sp, #16]
 801201a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801201e:	4826      	ldr	r0, [pc, #152]	; (80120b8 <_svfiprintf_r+0x1f0>)
 8012020:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8012024:	2206      	movs	r2, #6
 8012026:	f7f6 f8db 	bl	80081e0 <memchr>
 801202a:	2800      	cmp	r0, #0
 801202c:	d038      	beq.n	80120a0 <_svfiprintf_r+0x1d8>
 801202e:	4b23      	ldr	r3, [pc, #140]	; (80120bc <_svfiprintf_r+0x1f4>)
 8012030:	bb1b      	cbnz	r3, 801207a <_svfiprintf_r+0x1b2>
 8012032:	9b03      	ldr	r3, [sp, #12]
 8012034:	3307      	adds	r3, #7
 8012036:	f023 0307 	bic.w	r3, r3, #7
 801203a:	3308      	adds	r3, #8
 801203c:	9303      	str	r3, [sp, #12]
 801203e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012040:	4433      	add	r3, r6
 8012042:	9309      	str	r3, [sp, #36]	; 0x24
 8012044:	e767      	b.n	8011f16 <_svfiprintf_r+0x4e>
 8012046:	fb0c 3202 	mla	r2, ip, r2, r3
 801204a:	460c      	mov	r4, r1
 801204c:	2001      	movs	r0, #1
 801204e:	e7a5      	b.n	8011f9c <_svfiprintf_r+0xd4>
 8012050:	2300      	movs	r3, #0
 8012052:	3401      	adds	r4, #1
 8012054:	9305      	str	r3, [sp, #20]
 8012056:	4619      	mov	r1, r3
 8012058:	f04f 0c0a 	mov.w	ip, #10
 801205c:	4620      	mov	r0, r4
 801205e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012062:	3a30      	subs	r2, #48	; 0x30
 8012064:	2a09      	cmp	r2, #9
 8012066:	d903      	bls.n	8012070 <_svfiprintf_r+0x1a8>
 8012068:	2b00      	cmp	r3, #0
 801206a:	d0c5      	beq.n	8011ff8 <_svfiprintf_r+0x130>
 801206c:	9105      	str	r1, [sp, #20]
 801206e:	e7c3      	b.n	8011ff8 <_svfiprintf_r+0x130>
 8012070:	fb0c 2101 	mla	r1, ip, r1, r2
 8012074:	4604      	mov	r4, r0
 8012076:	2301      	movs	r3, #1
 8012078:	e7f0      	b.n	801205c <_svfiprintf_r+0x194>
 801207a:	ab03      	add	r3, sp, #12
 801207c:	9300      	str	r3, [sp, #0]
 801207e:	462a      	mov	r2, r5
 8012080:	4b0f      	ldr	r3, [pc, #60]	; (80120c0 <_svfiprintf_r+0x1f8>)
 8012082:	a904      	add	r1, sp, #16
 8012084:	4638      	mov	r0, r7
 8012086:	f3af 8000 	nop.w
 801208a:	1c42      	adds	r2, r0, #1
 801208c:	4606      	mov	r6, r0
 801208e:	d1d6      	bne.n	801203e <_svfiprintf_r+0x176>
 8012090:	89ab      	ldrh	r3, [r5, #12]
 8012092:	065b      	lsls	r3, r3, #25
 8012094:	f53f af2c 	bmi.w	8011ef0 <_svfiprintf_r+0x28>
 8012098:	9809      	ldr	r0, [sp, #36]	; 0x24
 801209a:	b01d      	add	sp, #116	; 0x74
 801209c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80120a0:	ab03      	add	r3, sp, #12
 80120a2:	9300      	str	r3, [sp, #0]
 80120a4:	462a      	mov	r2, r5
 80120a6:	4b06      	ldr	r3, [pc, #24]	; (80120c0 <_svfiprintf_r+0x1f8>)
 80120a8:	a904      	add	r1, sp, #16
 80120aa:	4638      	mov	r0, r7
 80120ac:	f000 f87a 	bl	80121a4 <_printf_i>
 80120b0:	e7eb      	b.n	801208a <_svfiprintf_r+0x1c2>
 80120b2:	bf00      	nop
 80120b4:	08012800 	.word	0x08012800
 80120b8:	0801280a 	.word	0x0801280a
 80120bc:	00000000 	.word	0x00000000
 80120c0:	08011e11 	.word	0x08011e11
 80120c4:	08012806 	.word	0x08012806

080120c8 <_printf_common>:
 80120c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80120cc:	4616      	mov	r6, r2
 80120ce:	4699      	mov	r9, r3
 80120d0:	688a      	ldr	r2, [r1, #8]
 80120d2:	690b      	ldr	r3, [r1, #16]
 80120d4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80120d8:	4293      	cmp	r3, r2
 80120da:	bfb8      	it	lt
 80120dc:	4613      	movlt	r3, r2
 80120de:	6033      	str	r3, [r6, #0]
 80120e0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80120e4:	4607      	mov	r7, r0
 80120e6:	460c      	mov	r4, r1
 80120e8:	b10a      	cbz	r2, 80120ee <_printf_common+0x26>
 80120ea:	3301      	adds	r3, #1
 80120ec:	6033      	str	r3, [r6, #0]
 80120ee:	6823      	ldr	r3, [r4, #0]
 80120f0:	0699      	lsls	r1, r3, #26
 80120f2:	bf42      	ittt	mi
 80120f4:	6833      	ldrmi	r3, [r6, #0]
 80120f6:	3302      	addmi	r3, #2
 80120f8:	6033      	strmi	r3, [r6, #0]
 80120fa:	6825      	ldr	r5, [r4, #0]
 80120fc:	f015 0506 	ands.w	r5, r5, #6
 8012100:	d106      	bne.n	8012110 <_printf_common+0x48>
 8012102:	f104 0a19 	add.w	sl, r4, #25
 8012106:	68e3      	ldr	r3, [r4, #12]
 8012108:	6832      	ldr	r2, [r6, #0]
 801210a:	1a9b      	subs	r3, r3, r2
 801210c:	42ab      	cmp	r3, r5
 801210e:	dc26      	bgt.n	801215e <_printf_common+0x96>
 8012110:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8012114:	1e13      	subs	r3, r2, #0
 8012116:	6822      	ldr	r2, [r4, #0]
 8012118:	bf18      	it	ne
 801211a:	2301      	movne	r3, #1
 801211c:	0692      	lsls	r2, r2, #26
 801211e:	d42b      	bmi.n	8012178 <_printf_common+0xb0>
 8012120:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8012124:	4649      	mov	r1, r9
 8012126:	4638      	mov	r0, r7
 8012128:	47c0      	blx	r8
 801212a:	3001      	adds	r0, #1
 801212c:	d01e      	beq.n	801216c <_printf_common+0xa4>
 801212e:	6823      	ldr	r3, [r4, #0]
 8012130:	68e5      	ldr	r5, [r4, #12]
 8012132:	6832      	ldr	r2, [r6, #0]
 8012134:	f003 0306 	and.w	r3, r3, #6
 8012138:	2b04      	cmp	r3, #4
 801213a:	bf08      	it	eq
 801213c:	1aad      	subeq	r5, r5, r2
 801213e:	68a3      	ldr	r3, [r4, #8]
 8012140:	6922      	ldr	r2, [r4, #16]
 8012142:	bf0c      	ite	eq
 8012144:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8012148:	2500      	movne	r5, #0
 801214a:	4293      	cmp	r3, r2
 801214c:	bfc4      	itt	gt
 801214e:	1a9b      	subgt	r3, r3, r2
 8012150:	18ed      	addgt	r5, r5, r3
 8012152:	2600      	movs	r6, #0
 8012154:	341a      	adds	r4, #26
 8012156:	42b5      	cmp	r5, r6
 8012158:	d11a      	bne.n	8012190 <_printf_common+0xc8>
 801215a:	2000      	movs	r0, #0
 801215c:	e008      	b.n	8012170 <_printf_common+0xa8>
 801215e:	2301      	movs	r3, #1
 8012160:	4652      	mov	r2, sl
 8012162:	4649      	mov	r1, r9
 8012164:	4638      	mov	r0, r7
 8012166:	47c0      	blx	r8
 8012168:	3001      	adds	r0, #1
 801216a:	d103      	bne.n	8012174 <_printf_common+0xac>
 801216c:	f04f 30ff 	mov.w	r0, #4294967295
 8012170:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012174:	3501      	adds	r5, #1
 8012176:	e7c6      	b.n	8012106 <_printf_common+0x3e>
 8012178:	18e1      	adds	r1, r4, r3
 801217a:	1c5a      	adds	r2, r3, #1
 801217c:	2030      	movs	r0, #48	; 0x30
 801217e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8012182:	4422      	add	r2, r4
 8012184:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8012188:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801218c:	3302      	adds	r3, #2
 801218e:	e7c7      	b.n	8012120 <_printf_common+0x58>
 8012190:	2301      	movs	r3, #1
 8012192:	4622      	mov	r2, r4
 8012194:	4649      	mov	r1, r9
 8012196:	4638      	mov	r0, r7
 8012198:	47c0      	blx	r8
 801219a:	3001      	adds	r0, #1
 801219c:	d0e6      	beq.n	801216c <_printf_common+0xa4>
 801219e:	3601      	adds	r6, #1
 80121a0:	e7d9      	b.n	8012156 <_printf_common+0x8e>
	...

080121a4 <_printf_i>:
 80121a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80121a8:	7e0f      	ldrb	r7, [r1, #24]
 80121aa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80121ac:	2f78      	cmp	r7, #120	; 0x78
 80121ae:	4691      	mov	r9, r2
 80121b0:	4680      	mov	r8, r0
 80121b2:	460c      	mov	r4, r1
 80121b4:	469a      	mov	sl, r3
 80121b6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80121ba:	d807      	bhi.n	80121cc <_printf_i+0x28>
 80121bc:	2f62      	cmp	r7, #98	; 0x62
 80121be:	d80a      	bhi.n	80121d6 <_printf_i+0x32>
 80121c0:	2f00      	cmp	r7, #0
 80121c2:	f000 80d8 	beq.w	8012376 <_printf_i+0x1d2>
 80121c6:	2f58      	cmp	r7, #88	; 0x58
 80121c8:	f000 80a3 	beq.w	8012312 <_printf_i+0x16e>
 80121cc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80121d0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80121d4:	e03a      	b.n	801224c <_printf_i+0xa8>
 80121d6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80121da:	2b15      	cmp	r3, #21
 80121dc:	d8f6      	bhi.n	80121cc <_printf_i+0x28>
 80121de:	a101      	add	r1, pc, #4	; (adr r1, 80121e4 <_printf_i+0x40>)
 80121e0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80121e4:	0801223d 	.word	0x0801223d
 80121e8:	08012251 	.word	0x08012251
 80121ec:	080121cd 	.word	0x080121cd
 80121f0:	080121cd 	.word	0x080121cd
 80121f4:	080121cd 	.word	0x080121cd
 80121f8:	080121cd 	.word	0x080121cd
 80121fc:	08012251 	.word	0x08012251
 8012200:	080121cd 	.word	0x080121cd
 8012204:	080121cd 	.word	0x080121cd
 8012208:	080121cd 	.word	0x080121cd
 801220c:	080121cd 	.word	0x080121cd
 8012210:	0801235d 	.word	0x0801235d
 8012214:	08012281 	.word	0x08012281
 8012218:	0801233f 	.word	0x0801233f
 801221c:	080121cd 	.word	0x080121cd
 8012220:	080121cd 	.word	0x080121cd
 8012224:	0801237f 	.word	0x0801237f
 8012228:	080121cd 	.word	0x080121cd
 801222c:	08012281 	.word	0x08012281
 8012230:	080121cd 	.word	0x080121cd
 8012234:	080121cd 	.word	0x080121cd
 8012238:	08012347 	.word	0x08012347
 801223c:	682b      	ldr	r3, [r5, #0]
 801223e:	1d1a      	adds	r2, r3, #4
 8012240:	681b      	ldr	r3, [r3, #0]
 8012242:	602a      	str	r2, [r5, #0]
 8012244:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012248:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801224c:	2301      	movs	r3, #1
 801224e:	e0a3      	b.n	8012398 <_printf_i+0x1f4>
 8012250:	6820      	ldr	r0, [r4, #0]
 8012252:	6829      	ldr	r1, [r5, #0]
 8012254:	0606      	lsls	r6, r0, #24
 8012256:	f101 0304 	add.w	r3, r1, #4
 801225a:	d50a      	bpl.n	8012272 <_printf_i+0xce>
 801225c:	680e      	ldr	r6, [r1, #0]
 801225e:	602b      	str	r3, [r5, #0]
 8012260:	2e00      	cmp	r6, #0
 8012262:	da03      	bge.n	801226c <_printf_i+0xc8>
 8012264:	232d      	movs	r3, #45	; 0x2d
 8012266:	4276      	negs	r6, r6
 8012268:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801226c:	485e      	ldr	r0, [pc, #376]	; (80123e8 <_printf_i+0x244>)
 801226e:	230a      	movs	r3, #10
 8012270:	e019      	b.n	80122a6 <_printf_i+0x102>
 8012272:	680e      	ldr	r6, [r1, #0]
 8012274:	602b      	str	r3, [r5, #0]
 8012276:	f010 0f40 	tst.w	r0, #64	; 0x40
 801227a:	bf18      	it	ne
 801227c:	b236      	sxthne	r6, r6
 801227e:	e7ef      	b.n	8012260 <_printf_i+0xbc>
 8012280:	682b      	ldr	r3, [r5, #0]
 8012282:	6820      	ldr	r0, [r4, #0]
 8012284:	1d19      	adds	r1, r3, #4
 8012286:	6029      	str	r1, [r5, #0]
 8012288:	0601      	lsls	r1, r0, #24
 801228a:	d501      	bpl.n	8012290 <_printf_i+0xec>
 801228c:	681e      	ldr	r6, [r3, #0]
 801228e:	e002      	b.n	8012296 <_printf_i+0xf2>
 8012290:	0646      	lsls	r6, r0, #25
 8012292:	d5fb      	bpl.n	801228c <_printf_i+0xe8>
 8012294:	881e      	ldrh	r6, [r3, #0]
 8012296:	4854      	ldr	r0, [pc, #336]	; (80123e8 <_printf_i+0x244>)
 8012298:	2f6f      	cmp	r7, #111	; 0x6f
 801229a:	bf0c      	ite	eq
 801229c:	2308      	moveq	r3, #8
 801229e:	230a      	movne	r3, #10
 80122a0:	2100      	movs	r1, #0
 80122a2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80122a6:	6865      	ldr	r5, [r4, #4]
 80122a8:	60a5      	str	r5, [r4, #8]
 80122aa:	2d00      	cmp	r5, #0
 80122ac:	bfa2      	ittt	ge
 80122ae:	6821      	ldrge	r1, [r4, #0]
 80122b0:	f021 0104 	bicge.w	r1, r1, #4
 80122b4:	6021      	strge	r1, [r4, #0]
 80122b6:	b90e      	cbnz	r6, 80122bc <_printf_i+0x118>
 80122b8:	2d00      	cmp	r5, #0
 80122ba:	d04d      	beq.n	8012358 <_printf_i+0x1b4>
 80122bc:	4615      	mov	r5, r2
 80122be:	fbb6 f1f3 	udiv	r1, r6, r3
 80122c2:	fb03 6711 	mls	r7, r3, r1, r6
 80122c6:	5dc7      	ldrb	r7, [r0, r7]
 80122c8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80122cc:	4637      	mov	r7, r6
 80122ce:	42bb      	cmp	r3, r7
 80122d0:	460e      	mov	r6, r1
 80122d2:	d9f4      	bls.n	80122be <_printf_i+0x11a>
 80122d4:	2b08      	cmp	r3, #8
 80122d6:	d10b      	bne.n	80122f0 <_printf_i+0x14c>
 80122d8:	6823      	ldr	r3, [r4, #0]
 80122da:	07de      	lsls	r6, r3, #31
 80122dc:	d508      	bpl.n	80122f0 <_printf_i+0x14c>
 80122de:	6923      	ldr	r3, [r4, #16]
 80122e0:	6861      	ldr	r1, [r4, #4]
 80122e2:	4299      	cmp	r1, r3
 80122e4:	bfde      	ittt	le
 80122e6:	2330      	movle	r3, #48	; 0x30
 80122e8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80122ec:	f105 35ff 	addle.w	r5, r5, #4294967295
 80122f0:	1b52      	subs	r2, r2, r5
 80122f2:	6122      	str	r2, [r4, #16]
 80122f4:	f8cd a000 	str.w	sl, [sp]
 80122f8:	464b      	mov	r3, r9
 80122fa:	aa03      	add	r2, sp, #12
 80122fc:	4621      	mov	r1, r4
 80122fe:	4640      	mov	r0, r8
 8012300:	f7ff fee2 	bl	80120c8 <_printf_common>
 8012304:	3001      	adds	r0, #1
 8012306:	d14c      	bne.n	80123a2 <_printf_i+0x1fe>
 8012308:	f04f 30ff 	mov.w	r0, #4294967295
 801230c:	b004      	add	sp, #16
 801230e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012312:	4835      	ldr	r0, [pc, #212]	; (80123e8 <_printf_i+0x244>)
 8012314:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8012318:	6829      	ldr	r1, [r5, #0]
 801231a:	6823      	ldr	r3, [r4, #0]
 801231c:	f851 6b04 	ldr.w	r6, [r1], #4
 8012320:	6029      	str	r1, [r5, #0]
 8012322:	061d      	lsls	r5, r3, #24
 8012324:	d514      	bpl.n	8012350 <_printf_i+0x1ac>
 8012326:	07df      	lsls	r7, r3, #31
 8012328:	bf44      	itt	mi
 801232a:	f043 0320 	orrmi.w	r3, r3, #32
 801232e:	6023      	strmi	r3, [r4, #0]
 8012330:	b91e      	cbnz	r6, 801233a <_printf_i+0x196>
 8012332:	6823      	ldr	r3, [r4, #0]
 8012334:	f023 0320 	bic.w	r3, r3, #32
 8012338:	6023      	str	r3, [r4, #0]
 801233a:	2310      	movs	r3, #16
 801233c:	e7b0      	b.n	80122a0 <_printf_i+0xfc>
 801233e:	6823      	ldr	r3, [r4, #0]
 8012340:	f043 0320 	orr.w	r3, r3, #32
 8012344:	6023      	str	r3, [r4, #0]
 8012346:	2378      	movs	r3, #120	; 0x78
 8012348:	4828      	ldr	r0, [pc, #160]	; (80123ec <_printf_i+0x248>)
 801234a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801234e:	e7e3      	b.n	8012318 <_printf_i+0x174>
 8012350:	0659      	lsls	r1, r3, #25
 8012352:	bf48      	it	mi
 8012354:	b2b6      	uxthmi	r6, r6
 8012356:	e7e6      	b.n	8012326 <_printf_i+0x182>
 8012358:	4615      	mov	r5, r2
 801235a:	e7bb      	b.n	80122d4 <_printf_i+0x130>
 801235c:	682b      	ldr	r3, [r5, #0]
 801235e:	6826      	ldr	r6, [r4, #0]
 8012360:	6961      	ldr	r1, [r4, #20]
 8012362:	1d18      	adds	r0, r3, #4
 8012364:	6028      	str	r0, [r5, #0]
 8012366:	0635      	lsls	r5, r6, #24
 8012368:	681b      	ldr	r3, [r3, #0]
 801236a:	d501      	bpl.n	8012370 <_printf_i+0x1cc>
 801236c:	6019      	str	r1, [r3, #0]
 801236e:	e002      	b.n	8012376 <_printf_i+0x1d2>
 8012370:	0670      	lsls	r0, r6, #25
 8012372:	d5fb      	bpl.n	801236c <_printf_i+0x1c8>
 8012374:	8019      	strh	r1, [r3, #0]
 8012376:	2300      	movs	r3, #0
 8012378:	6123      	str	r3, [r4, #16]
 801237a:	4615      	mov	r5, r2
 801237c:	e7ba      	b.n	80122f4 <_printf_i+0x150>
 801237e:	682b      	ldr	r3, [r5, #0]
 8012380:	1d1a      	adds	r2, r3, #4
 8012382:	602a      	str	r2, [r5, #0]
 8012384:	681d      	ldr	r5, [r3, #0]
 8012386:	6862      	ldr	r2, [r4, #4]
 8012388:	2100      	movs	r1, #0
 801238a:	4628      	mov	r0, r5
 801238c:	f7f5 ff28 	bl	80081e0 <memchr>
 8012390:	b108      	cbz	r0, 8012396 <_printf_i+0x1f2>
 8012392:	1b40      	subs	r0, r0, r5
 8012394:	6060      	str	r0, [r4, #4]
 8012396:	6863      	ldr	r3, [r4, #4]
 8012398:	6123      	str	r3, [r4, #16]
 801239a:	2300      	movs	r3, #0
 801239c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80123a0:	e7a8      	b.n	80122f4 <_printf_i+0x150>
 80123a2:	6923      	ldr	r3, [r4, #16]
 80123a4:	462a      	mov	r2, r5
 80123a6:	4649      	mov	r1, r9
 80123a8:	4640      	mov	r0, r8
 80123aa:	47d0      	blx	sl
 80123ac:	3001      	adds	r0, #1
 80123ae:	d0ab      	beq.n	8012308 <_printf_i+0x164>
 80123b0:	6823      	ldr	r3, [r4, #0]
 80123b2:	079b      	lsls	r3, r3, #30
 80123b4:	d413      	bmi.n	80123de <_printf_i+0x23a>
 80123b6:	68e0      	ldr	r0, [r4, #12]
 80123b8:	9b03      	ldr	r3, [sp, #12]
 80123ba:	4298      	cmp	r0, r3
 80123bc:	bfb8      	it	lt
 80123be:	4618      	movlt	r0, r3
 80123c0:	e7a4      	b.n	801230c <_printf_i+0x168>
 80123c2:	2301      	movs	r3, #1
 80123c4:	4632      	mov	r2, r6
 80123c6:	4649      	mov	r1, r9
 80123c8:	4640      	mov	r0, r8
 80123ca:	47d0      	blx	sl
 80123cc:	3001      	adds	r0, #1
 80123ce:	d09b      	beq.n	8012308 <_printf_i+0x164>
 80123d0:	3501      	adds	r5, #1
 80123d2:	68e3      	ldr	r3, [r4, #12]
 80123d4:	9903      	ldr	r1, [sp, #12]
 80123d6:	1a5b      	subs	r3, r3, r1
 80123d8:	42ab      	cmp	r3, r5
 80123da:	dcf2      	bgt.n	80123c2 <_printf_i+0x21e>
 80123dc:	e7eb      	b.n	80123b6 <_printf_i+0x212>
 80123de:	2500      	movs	r5, #0
 80123e0:	f104 0619 	add.w	r6, r4, #25
 80123e4:	e7f5      	b.n	80123d2 <_printf_i+0x22e>
 80123e6:	bf00      	nop
 80123e8:	08012811 	.word	0x08012811
 80123ec:	08012822 	.word	0x08012822

080123f0 <memcpy>:
 80123f0:	440a      	add	r2, r1
 80123f2:	4291      	cmp	r1, r2
 80123f4:	f100 33ff 	add.w	r3, r0, #4294967295
 80123f8:	d100      	bne.n	80123fc <memcpy+0xc>
 80123fa:	4770      	bx	lr
 80123fc:	b510      	push	{r4, lr}
 80123fe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012402:	f803 4f01 	strb.w	r4, [r3, #1]!
 8012406:	4291      	cmp	r1, r2
 8012408:	d1f9      	bne.n	80123fe <memcpy+0xe>
 801240a:	bd10      	pop	{r4, pc}

0801240c <memmove>:
 801240c:	4288      	cmp	r0, r1
 801240e:	b510      	push	{r4, lr}
 8012410:	eb01 0402 	add.w	r4, r1, r2
 8012414:	d902      	bls.n	801241c <memmove+0x10>
 8012416:	4284      	cmp	r4, r0
 8012418:	4623      	mov	r3, r4
 801241a:	d807      	bhi.n	801242c <memmove+0x20>
 801241c:	1e43      	subs	r3, r0, #1
 801241e:	42a1      	cmp	r1, r4
 8012420:	d008      	beq.n	8012434 <memmove+0x28>
 8012422:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012426:	f803 2f01 	strb.w	r2, [r3, #1]!
 801242a:	e7f8      	b.n	801241e <memmove+0x12>
 801242c:	4402      	add	r2, r0
 801242e:	4601      	mov	r1, r0
 8012430:	428a      	cmp	r2, r1
 8012432:	d100      	bne.n	8012436 <memmove+0x2a>
 8012434:	bd10      	pop	{r4, pc}
 8012436:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801243a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801243e:	e7f7      	b.n	8012430 <memmove+0x24>

08012440 <_free_r>:
 8012440:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8012442:	2900      	cmp	r1, #0
 8012444:	d044      	beq.n	80124d0 <_free_r+0x90>
 8012446:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801244a:	9001      	str	r0, [sp, #4]
 801244c:	2b00      	cmp	r3, #0
 801244e:	f1a1 0404 	sub.w	r4, r1, #4
 8012452:	bfb8      	it	lt
 8012454:	18e4      	addlt	r4, r4, r3
 8012456:	f000 f913 	bl	8012680 <__malloc_lock>
 801245a:	4a1e      	ldr	r2, [pc, #120]	; (80124d4 <_free_r+0x94>)
 801245c:	9801      	ldr	r0, [sp, #4]
 801245e:	6813      	ldr	r3, [r2, #0]
 8012460:	b933      	cbnz	r3, 8012470 <_free_r+0x30>
 8012462:	6063      	str	r3, [r4, #4]
 8012464:	6014      	str	r4, [r2, #0]
 8012466:	b003      	add	sp, #12
 8012468:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801246c:	f000 b90e 	b.w	801268c <__malloc_unlock>
 8012470:	42a3      	cmp	r3, r4
 8012472:	d908      	bls.n	8012486 <_free_r+0x46>
 8012474:	6825      	ldr	r5, [r4, #0]
 8012476:	1961      	adds	r1, r4, r5
 8012478:	428b      	cmp	r3, r1
 801247a:	bf01      	itttt	eq
 801247c:	6819      	ldreq	r1, [r3, #0]
 801247e:	685b      	ldreq	r3, [r3, #4]
 8012480:	1949      	addeq	r1, r1, r5
 8012482:	6021      	streq	r1, [r4, #0]
 8012484:	e7ed      	b.n	8012462 <_free_r+0x22>
 8012486:	461a      	mov	r2, r3
 8012488:	685b      	ldr	r3, [r3, #4]
 801248a:	b10b      	cbz	r3, 8012490 <_free_r+0x50>
 801248c:	42a3      	cmp	r3, r4
 801248e:	d9fa      	bls.n	8012486 <_free_r+0x46>
 8012490:	6811      	ldr	r1, [r2, #0]
 8012492:	1855      	adds	r5, r2, r1
 8012494:	42a5      	cmp	r5, r4
 8012496:	d10b      	bne.n	80124b0 <_free_r+0x70>
 8012498:	6824      	ldr	r4, [r4, #0]
 801249a:	4421      	add	r1, r4
 801249c:	1854      	adds	r4, r2, r1
 801249e:	42a3      	cmp	r3, r4
 80124a0:	6011      	str	r1, [r2, #0]
 80124a2:	d1e0      	bne.n	8012466 <_free_r+0x26>
 80124a4:	681c      	ldr	r4, [r3, #0]
 80124a6:	685b      	ldr	r3, [r3, #4]
 80124a8:	6053      	str	r3, [r2, #4]
 80124aa:	4421      	add	r1, r4
 80124ac:	6011      	str	r1, [r2, #0]
 80124ae:	e7da      	b.n	8012466 <_free_r+0x26>
 80124b0:	d902      	bls.n	80124b8 <_free_r+0x78>
 80124b2:	230c      	movs	r3, #12
 80124b4:	6003      	str	r3, [r0, #0]
 80124b6:	e7d6      	b.n	8012466 <_free_r+0x26>
 80124b8:	6825      	ldr	r5, [r4, #0]
 80124ba:	1961      	adds	r1, r4, r5
 80124bc:	428b      	cmp	r3, r1
 80124be:	bf04      	itt	eq
 80124c0:	6819      	ldreq	r1, [r3, #0]
 80124c2:	685b      	ldreq	r3, [r3, #4]
 80124c4:	6063      	str	r3, [r4, #4]
 80124c6:	bf04      	itt	eq
 80124c8:	1949      	addeq	r1, r1, r5
 80124ca:	6021      	streq	r1, [r4, #0]
 80124cc:	6054      	str	r4, [r2, #4]
 80124ce:	e7ca      	b.n	8012466 <_free_r+0x26>
 80124d0:	b003      	add	sp, #12
 80124d2:	bd30      	pop	{r4, r5, pc}
 80124d4:	200019f0 	.word	0x200019f0

080124d8 <sbrk_aligned>:
 80124d8:	b570      	push	{r4, r5, r6, lr}
 80124da:	4e0e      	ldr	r6, [pc, #56]	; (8012514 <sbrk_aligned+0x3c>)
 80124dc:	460c      	mov	r4, r1
 80124de:	6831      	ldr	r1, [r6, #0]
 80124e0:	4605      	mov	r5, r0
 80124e2:	b911      	cbnz	r1, 80124ea <sbrk_aligned+0x12>
 80124e4:	f000 f8bc 	bl	8012660 <_sbrk_r>
 80124e8:	6030      	str	r0, [r6, #0]
 80124ea:	4621      	mov	r1, r4
 80124ec:	4628      	mov	r0, r5
 80124ee:	f000 f8b7 	bl	8012660 <_sbrk_r>
 80124f2:	1c43      	adds	r3, r0, #1
 80124f4:	d00a      	beq.n	801250c <sbrk_aligned+0x34>
 80124f6:	1cc4      	adds	r4, r0, #3
 80124f8:	f024 0403 	bic.w	r4, r4, #3
 80124fc:	42a0      	cmp	r0, r4
 80124fe:	d007      	beq.n	8012510 <sbrk_aligned+0x38>
 8012500:	1a21      	subs	r1, r4, r0
 8012502:	4628      	mov	r0, r5
 8012504:	f000 f8ac 	bl	8012660 <_sbrk_r>
 8012508:	3001      	adds	r0, #1
 801250a:	d101      	bne.n	8012510 <sbrk_aligned+0x38>
 801250c:	f04f 34ff 	mov.w	r4, #4294967295
 8012510:	4620      	mov	r0, r4
 8012512:	bd70      	pop	{r4, r5, r6, pc}
 8012514:	200019f4 	.word	0x200019f4

08012518 <_malloc_r>:
 8012518:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801251c:	1ccd      	adds	r5, r1, #3
 801251e:	f025 0503 	bic.w	r5, r5, #3
 8012522:	3508      	adds	r5, #8
 8012524:	2d0c      	cmp	r5, #12
 8012526:	bf38      	it	cc
 8012528:	250c      	movcc	r5, #12
 801252a:	2d00      	cmp	r5, #0
 801252c:	4607      	mov	r7, r0
 801252e:	db01      	blt.n	8012534 <_malloc_r+0x1c>
 8012530:	42a9      	cmp	r1, r5
 8012532:	d905      	bls.n	8012540 <_malloc_r+0x28>
 8012534:	230c      	movs	r3, #12
 8012536:	603b      	str	r3, [r7, #0]
 8012538:	2600      	movs	r6, #0
 801253a:	4630      	mov	r0, r6
 801253c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012540:	4e2e      	ldr	r6, [pc, #184]	; (80125fc <_malloc_r+0xe4>)
 8012542:	f000 f89d 	bl	8012680 <__malloc_lock>
 8012546:	6833      	ldr	r3, [r6, #0]
 8012548:	461c      	mov	r4, r3
 801254a:	bb34      	cbnz	r4, 801259a <_malloc_r+0x82>
 801254c:	4629      	mov	r1, r5
 801254e:	4638      	mov	r0, r7
 8012550:	f7ff ffc2 	bl	80124d8 <sbrk_aligned>
 8012554:	1c43      	adds	r3, r0, #1
 8012556:	4604      	mov	r4, r0
 8012558:	d14d      	bne.n	80125f6 <_malloc_r+0xde>
 801255a:	6834      	ldr	r4, [r6, #0]
 801255c:	4626      	mov	r6, r4
 801255e:	2e00      	cmp	r6, #0
 8012560:	d140      	bne.n	80125e4 <_malloc_r+0xcc>
 8012562:	6823      	ldr	r3, [r4, #0]
 8012564:	4631      	mov	r1, r6
 8012566:	4638      	mov	r0, r7
 8012568:	eb04 0803 	add.w	r8, r4, r3
 801256c:	f000 f878 	bl	8012660 <_sbrk_r>
 8012570:	4580      	cmp	r8, r0
 8012572:	d13a      	bne.n	80125ea <_malloc_r+0xd2>
 8012574:	6821      	ldr	r1, [r4, #0]
 8012576:	3503      	adds	r5, #3
 8012578:	1a6d      	subs	r5, r5, r1
 801257a:	f025 0503 	bic.w	r5, r5, #3
 801257e:	3508      	adds	r5, #8
 8012580:	2d0c      	cmp	r5, #12
 8012582:	bf38      	it	cc
 8012584:	250c      	movcc	r5, #12
 8012586:	4629      	mov	r1, r5
 8012588:	4638      	mov	r0, r7
 801258a:	f7ff ffa5 	bl	80124d8 <sbrk_aligned>
 801258e:	3001      	adds	r0, #1
 8012590:	d02b      	beq.n	80125ea <_malloc_r+0xd2>
 8012592:	6823      	ldr	r3, [r4, #0]
 8012594:	442b      	add	r3, r5
 8012596:	6023      	str	r3, [r4, #0]
 8012598:	e00e      	b.n	80125b8 <_malloc_r+0xa0>
 801259a:	6822      	ldr	r2, [r4, #0]
 801259c:	1b52      	subs	r2, r2, r5
 801259e:	d41e      	bmi.n	80125de <_malloc_r+0xc6>
 80125a0:	2a0b      	cmp	r2, #11
 80125a2:	d916      	bls.n	80125d2 <_malloc_r+0xba>
 80125a4:	1961      	adds	r1, r4, r5
 80125a6:	42a3      	cmp	r3, r4
 80125a8:	6025      	str	r5, [r4, #0]
 80125aa:	bf18      	it	ne
 80125ac:	6059      	strne	r1, [r3, #4]
 80125ae:	6863      	ldr	r3, [r4, #4]
 80125b0:	bf08      	it	eq
 80125b2:	6031      	streq	r1, [r6, #0]
 80125b4:	5162      	str	r2, [r4, r5]
 80125b6:	604b      	str	r3, [r1, #4]
 80125b8:	4638      	mov	r0, r7
 80125ba:	f104 060b 	add.w	r6, r4, #11
 80125be:	f000 f865 	bl	801268c <__malloc_unlock>
 80125c2:	f026 0607 	bic.w	r6, r6, #7
 80125c6:	1d23      	adds	r3, r4, #4
 80125c8:	1af2      	subs	r2, r6, r3
 80125ca:	d0b6      	beq.n	801253a <_malloc_r+0x22>
 80125cc:	1b9b      	subs	r3, r3, r6
 80125ce:	50a3      	str	r3, [r4, r2]
 80125d0:	e7b3      	b.n	801253a <_malloc_r+0x22>
 80125d2:	6862      	ldr	r2, [r4, #4]
 80125d4:	42a3      	cmp	r3, r4
 80125d6:	bf0c      	ite	eq
 80125d8:	6032      	streq	r2, [r6, #0]
 80125da:	605a      	strne	r2, [r3, #4]
 80125dc:	e7ec      	b.n	80125b8 <_malloc_r+0xa0>
 80125de:	4623      	mov	r3, r4
 80125e0:	6864      	ldr	r4, [r4, #4]
 80125e2:	e7b2      	b.n	801254a <_malloc_r+0x32>
 80125e4:	4634      	mov	r4, r6
 80125e6:	6876      	ldr	r6, [r6, #4]
 80125e8:	e7b9      	b.n	801255e <_malloc_r+0x46>
 80125ea:	230c      	movs	r3, #12
 80125ec:	603b      	str	r3, [r7, #0]
 80125ee:	4638      	mov	r0, r7
 80125f0:	f000 f84c 	bl	801268c <__malloc_unlock>
 80125f4:	e7a1      	b.n	801253a <_malloc_r+0x22>
 80125f6:	6025      	str	r5, [r4, #0]
 80125f8:	e7de      	b.n	80125b8 <_malloc_r+0xa0>
 80125fa:	bf00      	nop
 80125fc:	200019f0 	.word	0x200019f0

08012600 <_realloc_r>:
 8012600:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012604:	4680      	mov	r8, r0
 8012606:	4614      	mov	r4, r2
 8012608:	460e      	mov	r6, r1
 801260a:	b921      	cbnz	r1, 8012616 <_realloc_r+0x16>
 801260c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012610:	4611      	mov	r1, r2
 8012612:	f7ff bf81 	b.w	8012518 <_malloc_r>
 8012616:	b92a      	cbnz	r2, 8012624 <_realloc_r+0x24>
 8012618:	f7ff ff12 	bl	8012440 <_free_r>
 801261c:	4625      	mov	r5, r4
 801261e:	4628      	mov	r0, r5
 8012620:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012624:	f000 f838 	bl	8012698 <_malloc_usable_size_r>
 8012628:	4284      	cmp	r4, r0
 801262a:	4607      	mov	r7, r0
 801262c:	d802      	bhi.n	8012634 <_realloc_r+0x34>
 801262e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8012632:	d812      	bhi.n	801265a <_realloc_r+0x5a>
 8012634:	4621      	mov	r1, r4
 8012636:	4640      	mov	r0, r8
 8012638:	f7ff ff6e 	bl	8012518 <_malloc_r>
 801263c:	4605      	mov	r5, r0
 801263e:	2800      	cmp	r0, #0
 8012640:	d0ed      	beq.n	801261e <_realloc_r+0x1e>
 8012642:	42bc      	cmp	r4, r7
 8012644:	4622      	mov	r2, r4
 8012646:	4631      	mov	r1, r6
 8012648:	bf28      	it	cs
 801264a:	463a      	movcs	r2, r7
 801264c:	f7ff fed0 	bl	80123f0 <memcpy>
 8012650:	4631      	mov	r1, r6
 8012652:	4640      	mov	r0, r8
 8012654:	f7ff fef4 	bl	8012440 <_free_r>
 8012658:	e7e1      	b.n	801261e <_realloc_r+0x1e>
 801265a:	4635      	mov	r5, r6
 801265c:	e7df      	b.n	801261e <_realloc_r+0x1e>
	...

08012660 <_sbrk_r>:
 8012660:	b538      	push	{r3, r4, r5, lr}
 8012662:	4d06      	ldr	r5, [pc, #24]	; (801267c <_sbrk_r+0x1c>)
 8012664:	2300      	movs	r3, #0
 8012666:	4604      	mov	r4, r0
 8012668:	4608      	mov	r0, r1
 801266a:	602b      	str	r3, [r5, #0]
 801266c:	f7f6 f8f6 	bl	800885c <_sbrk>
 8012670:	1c43      	adds	r3, r0, #1
 8012672:	d102      	bne.n	801267a <_sbrk_r+0x1a>
 8012674:	682b      	ldr	r3, [r5, #0]
 8012676:	b103      	cbz	r3, 801267a <_sbrk_r+0x1a>
 8012678:	6023      	str	r3, [r4, #0]
 801267a:	bd38      	pop	{r3, r4, r5, pc}
 801267c:	200019f8 	.word	0x200019f8

08012680 <__malloc_lock>:
 8012680:	4801      	ldr	r0, [pc, #4]	; (8012688 <__malloc_lock+0x8>)
 8012682:	f000 b811 	b.w	80126a8 <__retarget_lock_acquire_recursive>
 8012686:	bf00      	nop
 8012688:	200019fc 	.word	0x200019fc

0801268c <__malloc_unlock>:
 801268c:	4801      	ldr	r0, [pc, #4]	; (8012694 <__malloc_unlock+0x8>)
 801268e:	f000 b80c 	b.w	80126aa <__retarget_lock_release_recursive>
 8012692:	bf00      	nop
 8012694:	200019fc 	.word	0x200019fc

08012698 <_malloc_usable_size_r>:
 8012698:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801269c:	1f18      	subs	r0, r3, #4
 801269e:	2b00      	cmp	r3, #0
 80126a0:	bfbc      	itt	lt
 80126a2:	580b      	ldrlt	r3, [r1, r0]
 80126a4:	18c0      	addlt	r0, r0, r3
 80126a6:	4770      	bx	lr

080126a8 <__retarget_lock_acquire_recursive>:
 80126a8:	4770      	bx	lr

080126aa <__retarget_lock_release_recursive>:
 80126aa:	4770      	bx	lr

080126ac <_init>:
 80126ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80126ae:	bf00      	nop
 80126b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80126b2:	bc08      	pop	{r3}
 80126b4:	469e      	mov	lr, r3
 80126b6:	4770      	bx	lr

080126b8 <_fini>:
 80126b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80126ba:	bf00      	nop
 80126bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80126be:	bc08      	pop	{r3}
 80126c0:	469e      	mov	lr, r3
 80126c2:	4770      	bx	lr
