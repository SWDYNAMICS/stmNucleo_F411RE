
stmf411re_fw.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008c14  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  08008dac  08008dac  00018dac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008e14  08008e14  000201a8  2**0
                  CONTENTS
  4 .ARM          00000008  08008e14  08008e14  00018e14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008e1c  08008e1c  000201a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008e1c  08008e1c  00018e1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008e20  08008e20  00018e20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001a8  20000000  08008e24  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000171c  200001a8  08008fcc  000201a8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200018c4  08008fcc  000218c4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201a8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015e6b  00000000  00000000  000201d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003f92  00000000  00000000  00036043  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001220  00000000  00000000  00039fd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001038  00000000  00000000  0003b1f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c571  00000000  00000000  0003c230  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002048b  00000000  00000000  000587a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008fefc  00000000  00000000  00078c2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00108b28  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000047c4  00000000  00000000  00108b78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	200001a8 	.word	0x200001a8
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08008d94 	.word	0x08008d94

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	200001ac 	.word	0x200001ac
 80001d4:	08008d94 	.word	0x08008d94

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b974 	b.w	80004d8 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468e      	mov	lr, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14d      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000216:	428a      	cmp	r2, r1
 8000218:	4694      	mov	ip, r2
 800021a:	d969      	bls.n	80002f0 <__udivmoddi4+0xe8>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b152      	cbz	r2, 8000238 <__udivmoddi4+0x30>
 8000222:	fa01 f302 	lsl.w	r3, r1, r2
 8000226:	f1c2 0120 	rsb	r1, r2, #32
 800022a:	fa20 f101 	lsr.w	r1, r0, r1
 800022e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000232:	ea41 0e03 	orr.w	lr, r1, r3
 8000236:	4094      	lsls	r4, r2
 8000238:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800023c:	0c21      	lsrs	r1, r4, #16
 800023e:	fbbe f6f8 	udiv	r6, lr, r8
 8000242:	fa1f f78c 	uxth.w	r7, ip
 8000246:	fb08 e316 	mls	r3, r8, r6, lr
 800024a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024e:	fb06 f107 	mul.w	r1, r6, r7
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f106 30ff 	add.w	r0, r6, #4294967295
 800025e:	f080 811f 	bcs.w	80004a0 <__udivmoddi4+0x298>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 811c 	bls.w	80004a0 <__udivmoddi4+0x298>
 8000268:	3e02      	subs	r6, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a5b      	subs	r3, r3, r1
 800026e:	b2a4      	uxth	r4, r4
 8000270:	fbb3 f0f8 	udiv	r0, r3, r8
 8000274:	fb08 3310 	mls	r3, r8, r0, r3
 8000278:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800027c:	fb00 f707 	mul.w	r7, r0, r7
 8000280:	42a7      	cmp	r7, r4
 8000282:	d90a      	bls.n	800029a <__udivmoddi4+0x92>
 8000284:	eb1c 0404 	adds.w	r4, ip, r4
 8000288:	f100 33ff 	add.w	r3, r0, #4294967295
 800028c:	f080 810a 	bcs.w	80004a4 <__udivmoddi4+0x29c>
 8000290:	42a7      	cmp	r7, r4
 8000292:	f240 8107 	bls.w	80004a4 <__udivmoddi4+0x29c>
 8000296:	4464      	add	r4, ip
 8000298:	3802      	subs	r0, #2
 800029a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800029e:	1be4      	subs	r4, r4, r7
 80002a0:	2600      	movs	r6, #0
 80002a2:	b11d      	cbz	r5, 80002ac <__udivmoddi4+0xa4>
 80002a4:	40d4      	lsrs	r4, r2
 80002a6:	2300      	movs	r3, #0
 80002a8:	e9c5 4300 	strd	r4, r3, [r5]
 80002ac:	4631      	mov	r1, r6
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d909      	bls.n	80002ca <__udivmoddi4+0xc2>
 80002b6:	2d00      	cmp	r5, #0
 80002b8:	f000 80ef 	beq.w	800049a <__udivmoddi4+0x292>
 80002bc:	2600      	movs	r6, #0
 80002be:	e9c5 0100 	strd	r0, r1, [r5]
 80002c2:	4630      	mov	r0, r6
 80002c4:	4631      	mov	r1, r6
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	fab3 f683 	clz	r6, r3
 80002ce:	2e00      	cmp	r6, #0
 80002d0:	d14a      	bne.n	8000368 <__udivmoddi4+0x160>
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xd4>
 80002d6:	4282      	cmp	r2, r0
 80002d8:	f200 80f9 	bhi.w	80004ce <__udivmoddi4+0x2c6>
 80002dc:	1a84      	subs	r4, r0, r2
 80002de:	eb61 0303 	sbc.w	r3, r1, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	469e      	mov	lr, r3
 80002e6:	2d00      	cmp	r5, #0
 80002e8:	d0e0      	beq.n	80002ac <__udivmoddi4+0xa4>
 80002ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80002ee:	e7dd      	b.n	80002ac <__udivmoddi4+0xa4>
 80002f0:	b902      	cbnz	r2, 80002f4 <__udivmoddi4+0xec>
 80002f2:	deff      	udf	#255	; 0xff
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	2a00      	cmp	r2, #0
 80002fa:	f040 8092 	bne.w	8000422 <__udivmoddi4+0x21a>
 80002fe:	eba1 010c 	sub.w	r1, r1, ip
 8000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000306:	fa1f fe8c 	uxth.w	lr, ip
 800030a:	2601      	movs	r6, #1
 800030c:	0c20      	lsrs	r0, r4, #16
 800030e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000312:	fb07 1113 	mls	r1, r7, r3, r1
 8000316:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800031a:	fb0e f003 	mul.w	r0, lr, r3
 800031e:	4288      	cmp	r0, r1
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x12c>
 8000322:	eb1c 0101 	adds.w	r1, ip, r1
 8000326:	f103 38ff 	add.w	r8, r3, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x12a>
 800032c:	4288      	cmp	r0, r1
 800032e:	f200 80cb 	bhi.w	80004c8 <__udivmoddi4+0x2c0>
 8000332:	4643      	mov	r3, r8
 8000334:	1a09      	subs	r1, r1, r0
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb1 f0f7 	udiv	r0, r1, r7
 800033c:	fb07 1110 	mls	r1, r7, r0, r1
 8000340:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000344:	fb0e fe00 	mul.w	lr, lr, r0
 8000348:	45a6      	cmp	lr, r4
 800034a:	d908      	bls.n	800035e <__udivmoddi4+0x156>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 31ff 	add.w	r1, r0, #4294967295
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x154>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f200 80bb 	bhi.w	80004d2 <__udivmoddi4+0x2ca>
 800035c:	4608      	mov	r0, r1
 800035e:	eba4 040e 	sub.w	r4, r4, lr
 8000362:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000366:	e79c      	b.n	80002a2 <__udivmoddi4+0x9a>
 8000368:	f1c6 0720 	rsb	r7, r6, #32
 800036c:	40b3      	lsls	r3, r6
 800036e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000372:	ea4c 0c03 	orr.w	ip, ip, r3
 8000376:	fa20 f407 	lsr.w	r4, r0, r7
 800037a:	fa01 f306 	lsl.w	r3, r1, r6
 800037e:	431c      	orrs	r4, r3
 8000380:	40f9      	lsrs	r1, r7
 8000382:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000386:	fa00 f306 	lsl.w	r3, r0, r6
 800038a:	fbb1 f8f9 	udiv	r8, r1, r9
 800038e:	0c20      	lsrs	r0, r4, #16
 8000390:	fa1f fe8c 	uxth.w	lr, ip
 8000394:	fb09 1118 	mls	r1, r9, r8, r1
 8000398:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800039c:	fb08 f00e 	mul.w	r0, r8, lr
 80003a0:	4288      	cmp	r0, r1
 80003a2:	fa02 f206 	lsl.w	r2, r2, r6
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b8>
 80003a8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b0:	f080 8088 	bcs.w	80004c4 <__udivmoddi4+0x2bc>
 80003b4:	4288      	cmp	r0, r1
 80003b6:	f240 8085 	bls.w	80004c4 <__udivmoddi4+0x2bc>
 80003ba:	f1a8 0802 	sub.w	r8, r8, #2
 80003be:	4461      	add	r1, ip
 80003c0:	1a09      	subs	r1, r1, r0
 80003c2:	b2a4      	uxth	r4, r4
 80003c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c8:	fb09 1110 	mls	r1, r9, r0, r1
 80003cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d4:	458e      	cmp	lr, r1
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1e2>
 80003d8:	eb1c 0101 	adds.w	r1, ip, r1
 80003dc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003e0:	d26c      	bcs.n	80004bc <__udivmoddi4+0x2b4>
 80003e2:	458e      	cmp	lr, r1
 80003e4:	d96a      	bls.n	80004bc <__udivmoddi4+0x2b4>
 80003e6:	3802      	subs	r0, #2
 80003e8:	4461      	add	r1, ip
 80003ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ee:	fba0 9402 	umull	r9, r4, r0, r2
 80003f2:	eba1 010e 	sub.w	r1, r1, lr
 80003f6:	42a1      	cmp	r1, r4
 80003f8:	46c8      	mov	r8, r9
 80003fa:	46a6      	mov	lr, r4
 80003fc:	d356      	bcc.n	80004ac <__udivmoddi4+0x2a4>
 80003fe:	d053      	beq.n	80004a8 <__udivmoddi4+0x2a0>
 8000400:	b15d      	cbz	r5, 800041a <__udivmoddi4+0x212>
 8000402:	ebb3 0208 	subs.w	r2, r3, r8
 8000406:	eb61 010e 	sbc.w	r1, r1, lr
 800040a:	fa01 f707 	lsl.w	r7, r1, r7
 800040e:	fa22 f306 	lsr.w	r3, r2, r6
 8000412:	40f1      	lsrs	r1, r6
 8000414:	431f      	orrs	r7, r3
 8000416:	e9c5 7100 	strd	r7, r1, [r5]
 800041a:	2600      	movs	r6, #0
 800041c:	4631      	mov	r1, r6
 800041e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000422:	f1c2 0320 	rsb	r3, r2, #32
 8000426:	40d8      	lsrs	r0, r3
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	fa21 f303 	lsr.w	r3, r1, r3
 8000430:	4091      	lsls	r1, r2
 8000432:	4301      	orrs	r1, r0
 8000434:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000440:	fb07 3610 	mls	r6, r7, r0, r3
 8000444:	0c0b      	lsrs	r3, r1, #16
 8000446:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800044a:	fb00 f60e 	mul.w	r6, r0, lr
 800044e:	429e      	cmp	r6, r3
 8000450:	fa04 f402 	lsl.w	r4, r4, r2
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x260>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 38ff 	add.w	r8, r0, #4294967295
 800045e:	d22f      	bcs.n	80004c0 <__udivmoddi4+0x2b8>
 8000460:	429e      	cmp	r6, r3
 8000462:	d92d      	bls.n	80004c0 <__udivmoddi4+0x2b8>
 8000464:	3802      	subs	r0, #2
 8000466:	4463      	add	r3, ip
 8000468:	1b9b      	subs	r3, r3, r6
 800046a:	b289      	uxth	r1, r1
 800046c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000470:	fb07 3316 	mls	r3, r7, r6, r3
 8000474:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000478:	fb06 f30e 	mul.w	r3, r6, lr
 800047c:	428b      	cmp	r3, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x28a>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f106 38ff 	add.w	r8, r6, #4294967295
 8000488:	d216      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 800048a:	428b      	cmp	r3, r1
 800048c:	d914      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800048e:	3e02      	subs	r6, #2
 8000490:	4461      	add	r1, ip
 8000492:	1ac9      	subs	r1, r1, r3
 8000494:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000498:	e738      	b.n	800030c <__udivmoddi4+0x104>
 800049a:	462e      	mov	r6, r5
 800049c:	4628      	mov	r0, r5
 800049e:	e705      	b.n	80002ac <__udivmoddi4+0xa4>
 80004a0:	4606      	mov	r6, r0
 80004a2:	e6e3      	b.n	800026c <__udivmoddi4+0x64>
 80004a4:	4618      	mov	r0, r3
 80004a6:	e6f8      	b.n	800029a <__udivmoddi4+0x92>
 80004a8:	454b      	cmp	r3, r9
 80004aa:	d2a9      	bcs.n	8000400 <__udivmoddi4+0x1f8>
 80004ac:	ebb9 0802 	subs.w	r8, r9, r2
 80004b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b4:	3801      	subs	r0, #1
 80004b6:	e7a3      	b.n	8000400 <__udivmoddi4+0x1f8>
 80004b8:	4646      	mov	r6, r8
 80004ba:	e7ea      	b.n	8000492 <__udivmoddi4+0x28a>
 80004bc:	4620      	mov	r0, r4
 80004be:	e794      	b.n	80003ea <__udivmoddi4+0x1e2>
 80004c0:	4640      	mov	r0, r8
 80004c2:	e7d1      	b.n	8000468 <__udivmoddi4+0x260>
 80004c4:	46d0      	mov	r8, sl
 80004c6:	e77b      	b.n	80003c0 <__udivmoddi4+0x1b8>
 80004c8:	3b02      	subs	r3, #2
 80004ca:	4461      	add	r1, ip
 80004cc:	e732      	b.n	8000334 <__udivmoddi4+0x12c>
 80004ce:	4630      	mov	r0, r6
 80004d0:	e709      	b.n	80002e6 <__udivmoddi4+0xde>
 80004d2:	4464      	add	r4, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e742      	b.n	800035e <__udivmoddi4+0x156>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <apInit>:
#include "qbuffer.h"



void apInit(void)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	af00      	add	r7, sp, #0
	uartOpen(_DEF_UART1, 57600);
 80004e0:	f44f 4161 	mov.w	r1, #57600	; 0xe100
 80004e4:	2000      	movs	r0, #0
 80004e6:	f000 faf3 	bl	8000ad0 <uartOpen>
	uartOpen(_DEF_UART2, 57600);
 80004ea:	f44f 4161 	mov.w	r1, #57600	; 0xe100
 80004ee:	2001      	movs	r0, #1
 80004f0:	f000 faee 	bl	8000ad0 <uartOpen>
}
 80004f4:	bf00      	nop
 80004f6:	bd80      	pop	{r7, pc}

080004f8 <apMain>:

void apMain(void)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b082      	sub	sp, #8
 80004fc:	af00      	add	r7, sp, #0
	uint32_t pre_time;

	pre_time = millis();
 80004fe:	f000 f854 	bl	80005aa <millis>
 8000502:	6078      	str	r0, [r7, #4]
	while (1)
	{
		if(millis() - pre_time >= 500)
 8000504:	f000 f851 	bl	80005aa <millis>
 8000508:	4602      	mov	r2, r0
 800050a:	687b      	ldr	r3, [r7, #4]
 800050c:	1ad3      	subs	r3, r2, r3
 800050e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000512:	d3f7      	bcc.n	8000504 <apMain+0xc>
		{
			pre_time = millis();
 8000514:	f000 f849 	bl	80005aa <millis>
 8000518:	6078      	str	r0, [r7, #4]
			ledToggle(_DEF_LED1);
 800051a:	2000      	movs	r0, #0
 800051c:	f000 f9fa 	bl	8000914 <ledToggle>
		if(millis() - pre_time >= 500)
 8000520:	e7f0      	b.n	8000504 <apMain+0xc>
	...

08000524 <bspInit>:
#include "uart.h"

void SystemClock_Config(void);

void bspInit(void)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	b084      	sub	sp, #16
 8000528:	af00      	add	r7, sp, #0
  HAL_Init();
 800052a:	f000 fc71 	bl	8000e10 <HAL_Init>
  SystemClock_Config();
 800052e:	f000 f843 	bl	80005b8 <SystemClock_Config>

  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000532:	2300      	movs	r3, #0
 8000534:	60fb      	str	r3, [r7, #12]
 8000536:	4b16      	ldr	r3, [pc, #88]	; (8000590 <bspInit+0x6c>)
 8000538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800053a:	4a15      	ldr	r2, [pc, #84]	; (8000590 <bspInit+0x6c>)
 800053c:	f043 0304 	orr.w	r3, r3, #4
 8000540:	6313      	str	r3, [r2, #48]	; 0x30
 8000542:	4b13      	ldr	r3, [pc, #76]	; (8000590 <bspInit+0x6c>)
 8000544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000546:	f003 0304 	and.w	r3, r3, #4
 800054a:	60fb      	str	r3, [r7, #12]
 800054c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800054e:	2300      	movs	r3, #0
 8000550:	60bb      	str	r3, [r7, #8]
 8000552:	4b0f      	ldr	r3, [pc, #60]	; (8000590 <bspInit+0x6c>)
 8000554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000556:	4a0e      	ldr	r2, [pc, #56]	; (8000590 <bspInit+0x6c>)
 8000558:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800055c:	6313      	str	r3, [r2, #48]	; 0x30
 800055e:	4b0c      	ldr	r3, [pc, #48]	; (8000590 <bspInit+0x6c>)
 8000560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000562:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000566:	60bb      	str	r3, [r7, #8]
 8000568:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800056a:	2300      	movs	r3, #0
 800056c:	607b      	str	r3, [r7, #4]
 800056e:	4b08      	ldr	r3, [pc, #32]	; (8000590 <bspInit+0x6c>)
 8000570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000572:	4a07      	ldr	r2, [pc, #28]	; (8000590 <bspInit+0x6c>)
 8000574:	f043 0301 	orr.w	r3, r3, #1
 8000578:	6313      	str	r3, [r2, #48]	; 0x30
 800057a:	4b05      	ldr	r3, [pc, #20]	; (8000590 <bspInit+0x6c>)
 800057c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800057e:	f003 0301 	and.w	r3, r3, #1
 8000582:	607b      	str	r3, [r7, #4]
 8000584:	687b      	ldr	r3, [r7, #4]

}
 8000586:	bf00      	nop
 8000588:	3710      	adds	r7, #16
 800058a:	46bd      	mov	sp, r7
 800058c:	bd80      	pop	{r7, pc}
 800058e:	bf00      	nop
 8000590:	40023800 	.word	0x40023800

08000594 <delay>:
void delay(uint32_t ms)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b082      	sub	sp, #8
 8000598:	af00      	add	r7, sp, #0
 800059a:	6078      	str	r0, [r7, #4]
  HAL_Delay(ms);
 800059c:	6878      	ldr	r0, [r7, #4]
 800059e:	f000 fca9 	bl	8000ef4 <HAL_Delay>
}
 80005a2:	bf00      	nop
 80005a4:	3708      	adds	r7, #8
 80005a6:	46bd      	mov	sp, r7
 80005a8:	bd80      	pop	{r7, pc}

080005aa <millis>:
uint32_t millis(void)
{
 80005aa:	b580      	push	{r7, lr}
 80005ac:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80005ae:	f000 fc95 	bl	8000edc <HAL_GetTick>
 80005b2:	4603      	mov	r3, r0
}
 80005b4:	4618      	mov	r0, r3
 80005b6:	bd80      	pop	{r7, pc}

080005b8 <SystemClock_Config>:
  return 1;
}


void SystemClock_Config(void)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b094      	sub	sp, #80	; 0x50
 80005bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005be:	f107 0320 	add.w	r3, r7, #32
 80005c2:	2230      	movs	r2, #48	; 0x30
 80005c4:	2100      	movs	r1, #0
 80005c6:	4618      	mov	r0, r3
 80005c8:	f008 fbdc 	bl	8008d84 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005cc:	f107 030c 	add.w	r3, r7, #12
 80005d0:	2200      	movs	r2, #0
 80005d2:	601a      	str	r2, [r3, #0]
 80005d4:	605a      	str	r2, [r3, #4]
 80005d6:	609a      	str	r2, [r3, #8]
 80005d8:	60da      	str	r2, [r3, #12]
 80005da:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005dc:	2300      	movs	r3, #0
 80005de:	60bb      	str	r3, [r7, #8]
 80005e0:	4b28      	ldr	r3, [pc, #160]	; (8000684 <SystemClock_Config+0xcc>)
 80005e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005e4:	4a27      	ldr	r2, [pc, #156]	; (8000684 <SystemClock_Config+0xcc>)
 80005e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005ea:	6413      	str	r3, [r2, #64]	; 0x40
 80005ec:	4b25      	ldr	r3, [pc, #148]	; (8000684 <SystemClock_Config+0xcc>)
 80005ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005f4:	60bb      	str	r3, [r7, #8]
 80005f6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005f8:	2300      	movs	r3, #0
 80005fa:	607b      	str	r3, [r7, #4]
 80005fc:	4b22      	ldr	r3, [pc, #136]	; (8000688 <SystemClock_Config+0xd0>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	4a21      	ldr	r2, [pc, #132]	; (8000688 <SystemClock_Config+0xd0>)
 8000602:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000606:	6013      	str	r3, [r2, #0]
 8000608:	4b1f      	ldr	r3, [pc, #124]	; (8000688 <SystemClock_Config+0xd0>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000610:	607b      	str	r3, [r7, #4]
 8000612:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8000614:	2305      	movs	r3, #5
 8000616:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000618:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800061c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800061e:	2301      	movs	r3, #1
 8000620:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000622:	2302      	movs	r3, #2
 8000624:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000626:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800062a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 800062c:	2319      	movs	r3, #25
 800062e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000630:	23c0      	movs	r3, #192	; 0xc0
 8000632:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000634:	2302      	movs	r3, #2
 8000636:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000638:	2304      	movs	r3, #4
 800063a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800063c:	f107 0320 	add.w	r3, r7, #32
 8000640:	4618      	mov	r0, r3
 8000642:	f002 fe3d 	bl	80032c0 <HAL_RCC_OscConfig>
 8000646:	4603      	mov	r3, r0
 8000648:	2b00      	cmp	r3, #0
 800064a:	d001      	beq.n	8000650 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800064c:	f000 f81e 	bl	800068c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000650:	230f      	movs	r3, #15
 8000652:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000654:	2302      	movs	r3, #2
 8000656:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000658:	2300      	movs	r3, #0
 800065a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800065c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000660:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000662:	2300      	movs	r3, #0
 8000664:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000666:	f107 030c 	add.w	r3, r7, #12
 800066a:	2103      	movs	r1, #3
 800066c:	4618      	mov	r0, r3
 800066e:	f003 f89f 	bl	80037b0 <HAL_RCC_ClockConfig>
 8000672:	4603      	mov	r3, r0
 8000674:	2b00      	cmp	r3, #0
 8000676:	d001      	beq.n	800067c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000678:	f000 f808 	bl	800068c <Error_Handler>
  }
}
 800067c:	bf00      	nop
 800067e:	3750      	adds	r7, #80	; 0x50
 8000680:	46bd      	mov	sp, r7
 8000682:	bd80      	pop	{r7, pc}
 8000684:	40023800 	.word	0x40023800
 8000688:	40007000 	.word	0x40007000

0800068c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800068c:	b480      	push	{r7}
 800068e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000690:	b672      	cpsid	i
}
 8000692:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000694:	e7fe      	b.n	8000694 <Error_Handler+0x8>
	...

08000698 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000698:	b480      	push	{r7}
 800069a:	b083      	sub	sp, #12
 800069c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800069e:	2300      	movs	r3, #0
 80006a0:	607b      	str	r3, [r7, #4]
 80006a2:	4b10      	ldr	r3, [pc, #64]	; (80006e4 <HAL_MspInit+0x4c>)
 80006a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006a6:	4a0f      	ldr	r2, [pc, #60]	; (80006e4 <HAL_MspInit+0x4c>)
 80006a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006ac:	6453      	str	r3, [r2, #68]	; 0x44
 80006ae:	4b0d      	ldr	r3, [pc, #52]	; (80006e4 <HAL_MspInit+0x4c>)
 80006b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006b6:	607b      	str	r3, [r7, #4]
 80006b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006ba:	2300      	movs	r3, #0
 80006bc:	603b      	str	r3, [r7, #0]
 80006be:	4b09      	ldr	r3, [pc, #36]	; (80006e4 <HAL_MspInit+0x4c>)
 80006c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006c2:	4a08      	ldr	r2, [pc, #32]	; (80006e4 <HAL_MspInit+0x4c>)
 80006c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006c8:	6413      	str	r3, [r2, #64]	; 0x40
 80006ca:	4b06      	ldr	r3, [pc, #24]	; (80006e4 <HAL_MspInit+0x4c>)
 80006cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006d2:	603b      	str	r3, [r7, #0]
 80006d4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006d6:	bf00      	nop
 80006d8:	370c      	adds	r7, #12
 80006da:	46bd      	mov	sp, r7
 80006dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e0:	4770      	bx	lr
 80006e2:	bf00      	nop
 80006e4:	40023800 	.word	0x40023800

080006e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006e8:	b480      	push	{r7}
 80006ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80006ec:	e7fe      	b.n	80006ec <NMI_Handler+0x4>

080006ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006ee:	b480      	push	{r7}
 80006f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006f2:	e7fe      	b.n	80006f2 <HardFault_Handler+0x4>

080006f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006f4:	b480      	push	{r7}
 80006f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006f8:	e7fe      	b.n	80006f8 <MemManage_Handler+0x4>

080006fa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006fa:	b480      	push	{r7}
 80006fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006fe:	e7fe      	b.n	80006fe <BusFault_Handler+0x4>

08000700 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000700:	b480      	push	{r7}
 8000702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000704:	e7fe      	b.n	8000704 <UsageFault_Handler+0x4>

08000706 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000706:	b480      	push	{r7}
 8000708:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800070a:	bf00      	nop
 800070c:	46bd      	mov	sp, r7
 800070e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000712:	4770      	bx	lr

08000714 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000714:	b480      	push	{r7}
 8000716:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000718:	bf00      	nop
 800071a:	46bd      	mov	sp, r7
 800071c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000720:	4770      	bx	lr

08000722 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000722:	b480      	push	{r7}
 8000724:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000726:	bf00      	nop
 8000728:	46bd      	mov	sp, r7
 800072a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800072e:	4770      	bx	lr

08000730 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000734:	f000 fbbe 	bl	8000eb4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000738:	bf00      	nop
 800073a:	bd80      	pop	{r7, pc}

0800073c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000740:	4802      	ldr	r0, [pc, #8]	; (800074c <USART1_IRQHandler+0x10>)
 8000742:	f003 fcc9 	bl	80040d8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000746:	bf00      	nop
 8000748:	bd80      	pop	{r7, pc}
 800074a:	bf00      	nop
 800074c:	200001e8 	.word	0x200001e8

08000750 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000754:	4802      	ldr	r0, [pc, #8]	; (8000760 <DMA2_Stream2_IRQHandler+0x10>)
 8000756:	f000 ff2b 	bl	80015b0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800075a:	bf00      	nop
 800075c:	bd80      	pop	{r7, pc}
 800075e:	bf00      	nop
 8000760:	2000022c 	.word	0x2000022c

08000764 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000768:	4802      	ldr	r0, [pc, #8]	; (8000774 <OTG_FS_IRQHandler+0x10>)
 800076a:	f001 fd76 	bl	800225a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800076e:	bf00      	nop
 8000770:	bd80      	pop	{r7, pc}
 8000772:	bf00      	nop
 8000774:	2000129c 	.word	0x2000129c

08000778 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000778:	b480      	push	{r7}
 800077a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800077c:	4b06      	ldr	r3, [pc, #24]	; (8000798 <SystemInit+0x20>)
 800077e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000782:	4a05      	ldr	r2, [pc, #20]	; (8000798 <SystemInit+0x20>)
 8000784:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000788:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800078c:	bf00      	nop
 800078e:	46bd      	mov	sp, r7
 8000790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000794:	4770      	bx	lr
 8000796:	bf00      	nop
 8000798:	e000ed00 	.word	0xe000ed00

0800079c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800079c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80007d4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80007a0:	480d      	ldr	r0, [pc, #52]	; (80007d8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80007a2:	490e      	ldr	r1, [pc, #56]	; (80007dc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80007a4:	4a0e      	ldr	r2, [pc, #56]	; (80007e0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80007a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007a8:	e002      	b.n	80007b0 <LoopCopyDataInit>

080007aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007ae:	3304      	adds	r3, #4

080007b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007b4:	d3f9      	bcc.n	80007aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007b6:	4a0b      	ldr	r2, [pc, #44]	; (80007e4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80007b8:	4c0b      	ldr	r4, [pc, #44]	; (80007e8 <LoopFillZerobss+0x26>)
  movs r3, #0
 80007ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007bc:	e001      	b.n	80007c2 <LoopFillZerobss>

080007be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007c0:	3204      	adds	r2, #4

080007c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007c4:	d3fb      	bcc.n	80007be <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80007c6:	f7ff ffd7 	bl	8000778 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80007ca:	f008 fab7 	bl	8008d3c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80007ce:	f008 faa9 	bl	8008d24 <main>
  bx  lr    
 80007d2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80007d4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80007d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007dc:	200001a8 	.word	0x200001a8
  ldr r2, =_sidata
 80007e0:	08008e24 	.word	0x08008e24
  ldr r2, =_sbss
 80007e4:	200001a8 	.word	0x200001a8
  ldr r4, =_ebss
 80007e8:	200018c4 	.word	0x200018c4

080007ec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80007ec:	e7fe      	b.n	80007ec <ADC_IRQHandler>

080007ee <qbufferCreate>:
{

}

bool qbufferCreate(qbuffer_t *p_node, uint8_t *p_buf, uint32_t length)
{
 80007ee:	b480      	push	{r7}
 80007f0:	b087      	sub	sp, #28
 80007f2:	af00      	add	r7, sp, #0
 80007f4:	60f8      	str	r0, [r7, #12]
 80007f6:	60b9      	str	r1, [r7, #8]
 80007f8:	607a      	str	r2, [r7, #4]
	/*Making buffer is index initializing */
	bool ret = true;
 80007fa:	2301      	movs	r3, #1
 80007fc:	75fb      	strb	r3, [r7, #23]

	p_node->in 		= 0;
 80007fe:	68fb      	ldr	r3, [r7, #12]
 8000800:	2200      	movs	r2, #0
 8000802:	601a      	str	r2, [r3, #0]
	p_node->out	  = 0;
 8000804:	68fb      	ldr	r3, [r7, #12]
 8000806:	2200      	movs	r2, #0
 8000808:	605a      	str	r2, [r3, #4]
	p_node->len   = length;
 800080a:	68fb      	ldr	r3, [r7, #12]
 800080c:	687a      	ldr	r2, [r7, #4]
 800080e:	609a      	str	r2, [r3, #8]
	p_node->p_buf = p_buf;
 8000810:	68fb      	ldr	r3, [r7, #12]
 8000812:	68ba      	ldr	r2, [r7, #8]
 8000814:	60da      	str	r2, [r3, #12]

	return ret;
 8000816:	7dfb      	ldrb	r3, [r7, #23]
}
 8000818:	4618      	mov	r0, r3
 800081a:	371c      	adds	r7, #28
 800081c:	46bd      	mov	sp, r7
 800081e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000822:	4770      	bx	lr

08000824 <ledInit>:
{
	{GPIOC, GPIO_PIN_13, GPIO_PIN_SET, GPIO_PIN_RESET}
};

bool ledInit(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b088      	sub	sp, #32
 8000828:	af00      	add	r7, sp, #0
	bool ret = true;
 800082a:	2301      	movs	r3, #1
 800082c:	76fb      	strb	r3, [r7, #27]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800082e:	1d3b      	adds	r3, r7, #4
 8000830:	2200      	movs	r2, #0
 8000832:	601a      	str	r2, [r3, #0]
 8000834:	605a      	str	r2, [r3, #4]
 8000836:	609a      	str	r2, [r3, #8]
 8000838:	60da      	str	r2, [r3, #12]
 800083a:	611a      	str	r2, [r3, #16]

	__HAL_RCC_GPIOA_CLK_ENABLE();
 800083c:	2300      	movs	r3, #0
 800083e:	603b      	str	r3, [r7, #0]
 8000840:	4b1d      	ldr	r3, [pc, #116]	; (80008b8 <ledInit+0x94>)
 8000842:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000844:	4a1c      	ldr	r2, [pc, #112]	; (80008b8 <ledInit+0x94>)
 8000846:	f043 0301 	orr.w	r3, r3, #1
 800084a:	6313      	str	r3, [r2, #48]	; 0x30
 800084c:	4b1a      	ldr	r3, [pc, #104]	; (80008b8 <ledInit+0x94>)
 800084e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000850:	f003 0301 	and.w	r3, r3, #1
 8000854:	603b      	str	r3, [r7, #0]
 8000856:	683b      	ldr	r3, [r7, #0]

	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000858:	2301      	movs	r3, #1
 800085a:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085c:	2300      	movs	r3, #0
 800085e:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000860:	2300      	movs	r3, #0
 8000862:	613b      	str	r3, [r7, #16]

	for(int i = 0; i < LED_MAX_CHANNEL; i++)
 8000864:	2300      	movs	r3, #0
 8000866:	61fb      	str	r3, [r7, #28]
 8000868:	e01e      	b.n	80008a8 <ledInit+0x84>
	{
		ledOff(i);
 800086a:	69fb      	ldr	r3, [r7, #28]
 800086c:	b2db      	uxtb	r3, r3
 800086e:	4618      	mov	r0, r3
 8000870:	f000 f826 	bl	80008c0 <ledOff>
		GPIO_InitStruct.Pin = led_tbl[i].pin;
 8000874:	4911      	ldr	r1, [pc, #68]	; (80008bc <ledInit+0x98>)
 8000876:	69fa      	ldr	r2, [r7, #28]
 8000878:	4613      	mov	r3, r2
 800087a:	005b      	lsls	r3, r3, #1
 800087c:	4413      	add	r3, r2
 800087e:	009b      	lsls	r3, r3, #2
 8000880:	440b      	add	r3, r1
 8000882:	3304      	adds	r3, #4
 8000884:	681b      	ldr	r3, [r3, #0]
 8000886:	607b      	str	r3, [r7, #4]
		HAL_GPIO_Init(led_tbl[i].port, &GPIO_InitStruct);
 8000888:	490c      	ldr	r1, [pc, #48]	; (80008bc <ledInit+0x98>)
 800088a:	69fa      	ldr	r2, [r7, #28]
 800088c:	4613      	mov	r3, r2
 800088e:	005b      	lsls	r3, r3, #1
 8000890:	4413      	add	r3, r2
 8000892:	009b      	lsls	r3, r3, #2
 8000894:	440b      	add	r3, r1
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	1d3a      	adds	r2, r7, #4
 800089a:	4611      	mov	r1, r2
 800089c:	4618      	mov	r0, r3
 800089e:	f001 f8f1 	bl	8001a84 <HAL_GPIO_Init>
	for(int i = 0; i < LED_MAX_CHANNEL; i++)
 80008a2:	69fb      	ldr	r3, [r7, #28]
 80008a4:	3301      	adds	r3, #1
 80008a6:	61fb      	str	r3, [r7, #28]
 80008a8:	69fb      	ldr	r3, [r7, #28]
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	dddd      	ble.n	800086a <ledInit+0x46>
	}
	return ret;
 80008ae:	7efb      	ldrb	r3, [r7, #27]
}
 80008b0:	4618      	mov	r0, r3
 80008b2:	3720      	adds	r7, #32
 80008b4:	46bd      	mov	sp, r7
 80008b6:	bd80      	pop	{r7, pc}
 80008b8:	40023800 	.word	0x40023800
 80008bc:	20000004 	.word	0x20000004

080008c0 <ledOff>:
void ledOn(uint8_t ch)
{
	HAL_GPIO_WritePin(led_tbl[ch].port, led_tbl[ch].pin, led_tbl[ch].on_state);
}
void ledOff(uint8_t ch)
{
 80008c0:	b590      	push	{r4, r7, lr}
 80008c2:	b083      	sub	sp, #12
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	4603      	mov	r3, r0
 80008c8:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(led_tbl[ch].port, led_tbl[ch].pin, led_tbl[ch].off_state);
 80008ca:	79fa      	ldrb	r2, [r7, #7]
 80008cc:	4910      	ldr	r1, [pc, #64]	; (8000910 <ledOff+0x50>)
 80008ce:	4613      	mov	r3, r2
 80008d0:	005b      	lsls	r3, r3, #1
 80008d2:	4413      	add	r3, r2
 80008d4:	009b      	lsls	r3, r3, #2
 80008d6:	440b      	add	r3, r1
 80008d8:	6818      	ldr	r0, [r3, #0]
 80008da:	79fa      	ldrb	r2, [r7, #7]
 80008dc:	490c      	ldr	r1, [pc, #48]	; (8000910 <ledOff+0x50>)
 80008de:	4613      	mov	r3, r2
 80008e0:	005b      	lsls	r3, r3, #1
 80008e2:	4413      	add	r3, r2
 80008e4:	009b      	lsls	r3, r3, #2
 80008e6:	440b      	add	r3, r1
 80008e8:	3304      	adds	r3, #4
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	b299      	uxth	r1, r3
 80008ee:	79fa      	ldrb	r2, [r7, #7]
 80008f0:	4c07      	ldr	r4, [pc, #28]	; (8000910 <ledOff+0x50>)
 80008f2:	4613      	mov	r3, r2
 80008f4:	005b      	lsls	r3, r3, #1
 80008f6:	4413      	add	r3, r2
 80008f8:	009b      	lsls	r3, r3, #2
 80008fa:	4423      	add	r3, r4
 80008fc:	3309      	adds	r3, #9
 80008fe:	781b      	ldrb	r3, [r3, #0]
 8000900:	461a      	mov	r2, r3
 8000902:	f001 fb27 	bl	8001f54 <HAL_GPIO_WritePin>
}
 8000906:	bf00      	nop
 8000908:	370c      	adds	r7, #12
 800090a:	46bd      	mov	sp, r7
 800090c:	bd90      	pop	{r4, r7, pc}
 800090e:	bf00      	nop
 8000910:	20000004 	.word	0x20000004

08000914 <ledToggle>:
void ledToggle(uint8_t ch)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b082      	sub	sp, #8
 8000918:	af00      	add	r7, sp, #0
 800091a:	4603      	mov	r3, r0
 800091c:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_TogglePin(led_tbl[ch].port, led_tbl[ch].pin);
 800091e:	79fa      	ldrb	r2, [r7, #7]
 8000920:	490b      	ldr	r1, [pc, #44]	; (8000950 <ledToggle+0x3c>)
 8000922:	4613      	mov	r3, r2
 8000924:	005b      	lsls	r3, r3, #1
 8000926:	4413      	add	r3, r2
 8000928:	009b      	lsls	r3, r3, #2
 800092a:	440b      	add	r3, r1
 800092c:	6818      	ldr	r0, [r3, #0]
 800092e:	79fa      	ldrb	r2, [r7, #7]
 8000930:	4907      	ldr	r1, [pc, #28]	; (8000950 <ledToggle+0x3c>)
 8000932:	4613      	mov	r3, r2
 8000934:	005b      	lsls	r3, r3, #1
 8000936:	4413      	add	r3, r2
 8000938:	009b      	lsls	r3, r3, #2
 800093a:	440b      	add	r3, r1
 800093c:	3304      	adds	r3, #4
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	b29b      	uxth	r3, r3
 8000942:	4619      	mov	r1, r3
 8000944:	f001 fb1f 	bl	8001f86 <HAL_GPIO_TogglePin>
}
 8000948:	bf00      	nop
 800094a:	3708      	adds	r7, #8
 800094c:	46bd      	mov	sp, r7
 800094e:	bd80      	pop	{r7, pc}
 8000950:	20000004 	.word	0x20000004

08000954 <resetInit>:
#include "rtc.h"

static uint32_t reset_count = 0;

bool resetInit(void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b082      	sub	sp, #8
 8000958:	af00      	add	r7, sp, #0
	bool ret = true;
 800095a:	2301      	movs	r3, #1
 800095c:	71fb      	strb	r3, [r7, #7]

	if(RCC->CSR & (1<<26))
 800095e:	4b11      	ldr	r3, [pc, #68]	; (80009a4 <resetInit+0x50>)
 8000960:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000962:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000966:	2b00      	cmp	r3, #0
 8000968:	d013      	beq.n	8000992 <resetInit+0x3e>
	{
		rtcBackupRegWrite(0, rtcBackupRegRead(0) + 1);
 800096a:	2000      	movs	r0, #0
 800096c:	f000 f85a 	bl	8000a24 <rtcBackupRegRead>
 8000970:	4603      	mov	r3, r0
 8000972:	3301      	adds	r3, #1
 8000974:	4619      	mov	r1, r3
 8000976:	2000      	movs	r0, #0
 8000978:	f000 f844 	bl	8000a04 <rtcBackupRegWrite>
		delay(500);
 800097c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000980:	f7ff fe08 	bl	8000594 <delay>
		/* due to multiple input */
		reset_count = rtcBackupRegRead(0);
 8000984:	2000      	movs	r0, #0
 8000986:	f000 f84d 	bl	8000a24 <rtcBackupRegRead>
 800098a:	4603      	mov	r3, r0
 800098c:	461a      	mov	r2, r3
 800098e:	4b06      	ldr	r3, [pc, #24]	; (80009a8 <resetInit+0x54>)
 8000990:	601a      	str	r2, [r3, #0]
		/* one count increase itself */
	}
	rtcBackupRegWrite(0, 0);
 8000992:	2100      	movs	r1, #0
 8000994:	2000      	movs	r0, #0
 8000996:	f000 f835 	bl	8000a04 <rtcBackupRegWrite>
	return ret;
 800099a:	79fb      	ldrb	r3, [r7, #7]
}
 800099c:	4618      	mov	r0, r3
 800099e:	3708      	adds	r7, #8
 80009a0:	46bd      	mov	sp, r7
 80009a2:	bd80      	pop	{r7, pc}
 80009a4:	40023800 	.word	0x40023800
 80009a8:	200001c4 	.word	0x200001c4

080009ac <rtcInit>:
#include "rtc.h"

static RTC_HandleTypeDef hrtc;

bool rtcInit(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b082      	sub	sp, #8
 80009b0:	af00      	add	r7, sp, #0
	bool ret = true;
 80009b2:	2301      	movs	r3, #1
 80009b4:	71fb      	strb	r3, [r7, #7]
	// also need to enable GPIOC -> already declared on "bsp.c"
	hrtc.Instance 						= RTC;
 80009b6:	4b11      	ldr	r3, [pc, #68]	; (80009fc <rtcInit+0x50>)
 80009b8:	4a11      	ldr	r2, [pc, #68]	; (8000a00 <rtcInit+0x54>)
 80009ba:	601a      	str	r2, [r3, #0]
	hrtc.Init.HourFormat 			= RTC_HOURFORMAT_24;
 80009bc:	4b0f      	ldr	r3, [pc, #60]	; (80009fc <rtcInit+0x50>)
 80009be:	2200      	movs	r2, #0
 80009c0:	605a      	str	r2, [r3, #4]
	hrtc.Init.AsynchPrediv 		= 127;
 80009c2:	4b0e      	ldr	r3, [pc, #56]	; (80009fc <rtcInit+0x50>)
 80009c4:	227f      	movs	r2, #127	; 0x7f
 80009c6:	609a      	str	r2, [r3, #8]
	hrtc.Init.SynchPrediv 		= 255;
 80009c8:	4b0c      	ldr	r3, [pc, #48]	; (80009fc <rtcInit+0x50>)
 80009ca:	22ff      	movs	r2, #255	; 0xff
 80009cc:	60da      	str	r2, [r3, #12]
	hrtc.Init.OutPut 					= RTC_OUTPUT_DISABLE;
 80009ce:	4b0b      	ldr	r3, [pc, #44]	; (80009fc <rtcInit+0x50>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	611a      	str	r2, [r3, #16]
	hrtc.Init.OutPutPolarity 	= RTC_OUTPUT_POLARITY_HIGH;
 80009d4:	4b09      	ldr	r3, [pc, #36]	; (80009fc <rtcInit+0x50>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	615a      	str	r2, [r3, #20]
	hrtc.Init.OutPutType	    = RTC_OUTPUT_TYPE_OPENDRAIN;
 80009da:	4b08      	ldr	r3, [pc, #32]	; (80009fc <rtcInit+0x50>)
 80009dc:	2200      	movs	r2, #0
 80009de:	619a      	str	r2, [r3, #24]
	if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80009e0:	4806      	ldr	r0, [pc, #24]	; (80009fc <rtcInit+0x50>)
 80009e2:	f003 f9b5 	bl	8003d50 <HAL_RTC_Init>
 80009e6:	4603      	mov	r3, r0
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d001      	beq.n	80009f0 <rtcInit+0x44>
	{
	Error_Handler();
 80009ec:	f7ff fe4e 	bl	800068c <Error_Handler>
	}
	return ret;
 80009f0:	79fb      	ldrb	r3, [r7, #7]
}
 80009f2:	4618      	mov	r0, r3
 80009f4:	3708      	adds	r7, #8
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bd80      	pop	{r7, pc}
 80009fa:	bf00      	nop
 80009fc:	200001c8 	.word	0x200001c8
 8000a00:	40002800 	.word	0x40002800

08000a04 <rtcBackupRegWrite>:

void rtcBackupRegWrite(uint32_t index, uint32_t data)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b082      	sub	sp, #8
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
 8000a0c:	6039      	str	r1, [r7, #0]
	HAL_RTCEx_BKUPWrite(&hrtc, index, data);
 8000a0e:	683a      	ldr	r2, [r7, #0]
 8000a10:	6879      	ldr	r1, [r7, #4]
 8000a12:	4803      	ldr	r0, [pc, #12]	; (8000a20 <rtcBackupRegWrite+0x1c>)
 8000a14:	f003 fa81 	bl	8003f1a <HAL_RTCEx_BKUPWrite>
}
 8000a18:	bf00      	nop
 8000a1a:	3708      	adds	r7, #8
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	bd80      	pop	{r7, pc}
 8000a20:	200001c8 	.word	0x200001c8

08000a24 <rtcBackupRegRead>:
uint32_t rtcBackupRegRead(uint32_t index)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b082      	sub	sp, #8
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
	return HAL_RTCEx_BKUPRead(&hrtc, index);
 8000a2c:	6879      	ldr	r1, [r7, #4]
 8000a2e:	4804      	ldr	r0, [pc, #16]	; (8000a40 <rtcBackupRegRead+0x1c>)
 8000a30:	f003 fa8d 	bl	8003f4e <HAL_RTCEx_BKUPRead>
 8000a34:	4603      	mov	r3, r0
}
 8000a36:	4618      	mov	r0, r3
 8000a38:	3708      	adds	r7, #8
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	bf00      	nop
 8000a40:	200001c8 	.word	0x200001c8

08000a44 <HAL_RTC_MspInit>:


void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b088      	sub	sp, #32
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a4c:	f107 0308 	add.w	r3, r7, #8
 8000a50:	2200      	movs	r2, #0
 8000a52:	601a      	str	r2, [r3, #0]
 8000a54:	605a      	str	r2, [r3, #4]
 8000a56:	609a      	str	r2, [r3, #8]
 8000a58:	60da      	str	r2, [r3, #12]
 8000a5a:	611a      	str	r2, [r3, #16]
 8000a5c:	615a      	str	r2, [r3, #20]
  if(rtcHandle->Instance==RTC)
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	4a0c      	ldr	r2, [pc, #48]	; (8000a94 <HAL_RTC_MspInit+0x50>)
 8000a64:	4293      	cmp	r3, r2
 8000a66:	d111      	bne.n	8000a8c <HAL_RTC_MspInit+0x48>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000a68:	2302      	movs	r3, #2
 8000a6a:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000a6c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a70:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a72:	f107 0308 	add.w	r3, r7, #8
 8000a76:	4618      	mov	r0, r3
 8000a78:	f003 f87a 	bl	8003b70 <HAL_RCCEx_PeriphCLKConfig>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d001      	beq.n	8000a86 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8000a82:	f7ff fe03 	bl	800068c <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000a86:	4b04      	ldr	r3, [pc, #16]	; (8000a98 <HAL_RTC_MspInit+0x54>)
 8000a88:	2201      	movs	r2, #1
 8000a8a:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8000a8c:	bf00      	nop
 8000a8e:	3720      	adds	r7, #32
 8000a90:	46bd      	mov	sp, r7
 8000a92:	bd80      	pop	{r7, pc}
 8000a94:	40002800 	.word	0x40002800
 8000a98:	42470e3c 	.word	0x42470e3c

08000a9c <uartInit>:
static qbuffer_t qbuffer[UART_MAX_CHANNEL];
static uint8_t rx_buf[256];
//static uint8_t rx_data[UART_MAX_CHANNEL];

bool uartInit(void)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	b083      	sub	sp, #12
 8000aa0:	af00      	add	r7, sp, #0
	for(int i = 0; i < UART_MAX_CHANNEL; i++)
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	607b      	str	r3, [r7, #4]
 8000aa6:	e007      	b.n	8000ab8 <uartInit+0x1c>
	{
		is_open[i] = false;
 8000aa8:	4a08      	ldr	r2, [pc, #32]	; (8000acc <uartInit+0x30>)
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	4413      	add	r3, r2
 8000aae:	2200      	movs	r2, #0
 8000ab0:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < UART_MAX_CHANNEL; i++)
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	3301      	adds	r3, #1
 8000ab6:	607b      	str	r3, [r7, #4]
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	2b01      	cmp	r3, #1
 8000abc:	ddf4      	ble.n	8000aa8 <uartInit+0xc>
	}
	return false;
 8000abe:	2300      	movs	r3, #0
}
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	370c      	adds	r7, #12
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aca:	4770      	bx	lr
 8000acc:	2000028c 	.word	0x2000028c

08000ad0 <uartOpen>:

bool uartOpen(uint8_t ch, uint32_t baud)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b084      	sub	sp, #16
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	6039      	str	r1, [r7, #0]
 8000ada:	71fb      	strb	r3, [r7, #7]
	bool ret = false;
 8000adc:	2300      	movs	r3, #0
 8000ade:	73fb      	strb	r3, [r7, #15]

	switch(ch)
 8000ae0:	79fb      	ldrb	r3, [r7, #7]
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d002      	beq.n	8000aec <uartOpen+0x1c>
 8000ae6:	2b01      	cmp	r3, #1
 8000ae8:	d007      	beq.n	8000afa <uartOpen+0x2a>
 8000aea:	e076      	b.n	8000bda <uartOpen+0x10a>
	{
		case _DEF_UART1:
			is_open[ch] = true;
 8000aec:	79fb      	ldrb	r3, [r7, #7]
 8000aee:	4a3d      	ldr	r2, [pc, #244]	; (8000be4 <uartOpen+0x114>)
 8000af0:	2101      	movs	r1, #1
 8000af2:	54d1      	strb	r1, [r2, r3]
			ret = true;
 8000af4:	2301      	movs	r3, #1
 8000af6:	73fb      	strb	r3, [r7, #15]
			break;
 8000af8:	e06f      	b.n	8000bda <uartOpen+0x10a>

		case _DEF_UART2:
			huart1.Instance 					= USART1;
 8000afa:	4b3b      	ldr	r3, [pc, #236]	; (8000be8 <uartOpen+0x118>)
 8000afc:	4a3b      	ldr	r2, [pc, #236]	; (8000bec <uartOpen+0x11c>)
 8000afe:	601a      	str	r2, [r3, #0]
			huart1.Init.BaudRate 			= baud;
 8000b00:	4a39      	ldr	r2, [pc, #228]	; (8000be8 <uartOpen+0x118>)
 8000b02:	683b      	ldr	r3, [r7, #0]
 8000b04:	6053      	str	r3, [r2, #4]
			huart1.Init.WordLength		= UART_WORDLENGTH_8B;
 8000b06:	4b38      	ldr	r3, [pc, #224]	; (8000be8 <uartOpen+0x118>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	609a      	str	r2, [r3, #8]
			huart1.Init.StopBits 			= UART_STOPBITS_1;
 8000b0c:	4b36      	ldr	r3, [pc, #216]	; (8000be8 <uartOpen+0x118>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	60da      	str	r2, [r3, #12]
			huart1.Init.Parity 				= UART_PARITY_NONE;
 8000b12:	4b35      	ldr	r3, [pc, #212]	; (8000be8 <uartOpen+0x118>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	611a      	str	r2, [r3, #16]
			huart1.Init.Mode 					= UART_MODE_TX_RX;
 8000b18:	4b33      	ldr	r3, [pc, #204]	; (8000be8 <uartOpen+0x118>)
 8000b1a:	220c      	movs	r2, #12
 8000b1c:	615a      	str	r2, [r3, #20]
			huart1.Init.HwFlowCtl 		= UART_HWCONTROL_NONE;
 8000b1e:	4b32      	ldr	r3, [pc, #200]	; (8000be8 <uartOpen+0x118>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	619a      	str	r2, [r3, #24]
			huart1.Init.OverSampling 	= UART_OVERSAMPLING_16;
 8000b24:	4b30      	ldr	r3, [pc, #192]	; (8000be8 <uartOpen+0x118>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	61da      	str	r2, [r3, #28]

			HAL_UART_DeInit(&huart1);
 8000b2a:	482f      	ldr	r0, [pc, #188]	; (8000be8 <uartOpen+0x118>)
 8000b2c:	f003 fa74 	bl	8004018 <HAL_UART_DeInit>

			qbufferCreate(&qbuffer[ch], &rx_buf[0], 256);
 8000b30:	79fb      	ldrb	r3, [r7, #7]
 8000b32:	011b      	lsls	r3, r3, #4
 8000b34:	4a2e      	ldr	r2, [pc, #184]	; (8000bf0 <uartOpen+0x120>)
 8000b36:	4413      	add	r3, r2
 8000b38:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b3c:	492d      	ldr	r1, [pc, #180]	; (8000bf4 <uartOpen+0x124>)
 8000b3e:	4618      	mov	r0, r3
 8000b40:	f7ff fe55 	bl	80007ee <qbufferCreate>

      __HAL_RCC_DMA2_CLK_ENABLE();
 8000b44:	2300      	movs	r3, #0
 8000b46:	60bb      	str	r3, [r7, #8]
 8000b48:	4b2b      	ldr	r3, [pc, #172]	; (8000bf8 <uartOpen+0x128>)
 8000b4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b4c:	4a2a      	ldr	r2, [pc, #168]	; (8000bf8 <uartOpen+0x128>)
 8000b4e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000b52:	6313      	str	r3, [r2, #48]	; 0x30
 8000b54:	4b28      	ldr	r3, [pc, #160]	; (8000bf8 <uartOpen+0x128>)
 8000b56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b58:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000b5c:	60bb      	str	r3, [r7, #8]
 8000b5e:	68bb      	ldr	r3, [r7, #8]
      HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8000b60:	2200      	movs	r2, #0
 8000b62:	2100      	movs	r1, #0
 8000b64:	203a      	movs	r0, #58	; 0x3a
 8000b66:	f000 fae8 	bl	800113a <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8000b6a:	203a      	movs	r0, #58	; 0x3a
 8000b6c:	f000 fb01 	bl	8001172 <HAL_NVIC_EnableIRQ>

			if (HAL_UART_Init(&huart1) != HAL_OK)
 8000b70:	481d      	ldr	r0, [pc, #116]	; (8000be8 <uartOpen+0x118>)
 8000b72:	f003 fa04 	bl	8003f7e <HAL_UART_Init>
 8000b76:	4603      	mov	r3, r0
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d002      	beq.n	8000b82 <uartOpen+0xb2>
			{
				ret = false;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	73fb      	strb	r3, [r7, #15]
				}
				/* FLUSH */
				qbuffer[ch].in  = qbuffer[ch].len - hdma_usart1_rx.Instance->NDTR;
				qbuffer[ch].out = qbuffer[ch].in;
			}
			break;
 8000b80:	e02a      	b.n	8000bd8 <uartOpen+0x108>
				ret = true;
 8000b82:	2301      	movs	r3, #1
 8000b84:	73fb      	strb	r3, [r7, #15]
				is_open[ch] = true;
 8000b86:	79fb      	ldrb	r3, [r7, #7]
 8000b88:	4a16      	ldr	r2, [pc, #88]	; (8000be4 <uartOpen+0x114>)
 8000b8a:	2101      	movs	r1, #1
 8000b8c:	54d1      	strb	r1, [r2, r3]
				if(HAL_UART_Receive_DMA(&huart1, (uint8_t *)&rx_buf[0], 256) != HAL_OK)
 8000b8e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b92:	4918      	ldr	r1, [pc, #96]	; (8000bf4 <uartOpen+0x124>)
 8000b94:	4814      	ldr	r0, [pc, #80]	; (8000be8 <uartOpen+0x118>)
 8000b96:	f003 fa6e 	bl	8004076 <HAL_UART_Receive_DMA>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d001      	beq.n	8000ba4 <uartOpen+0xd4>
				  ret = false;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	73fb      	strb	r3, [r7, #15]
				qbuffer[ch].in  = qbuffer[ch].len - hdma_usart1_rx.Instance->NDTR;
 8000ba4:	79fb      	ldrb	r3, [r7, #7]
 8000ba6:	4a12      	ldr	r2, [pc, #72]	; (8000bf0 <uartOpen+0x120>)
 8000ba8:	011b      	lsls	r3, r3, #4
 8000baa:	4413      	add	r3, r2
 8000bac:	3308      	adds	r3, #8
 8000bae:	6819      	ldr	r1, [r3, #0]
 8000bb0:	4b12      	ldr	r3, [pc, #72]	; (8000bfc <uartOpen+0x12c>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	685a      	ldr	r2, [r3, #4]
 8000bb6:	79fb      	ldrb	r3, [r7, #7]
 8000bb8:	1a8a      	subs	r2, r1, r2
 8000bba:	490d      	ldr	r1, [pc, #52]	; (8000bf0 <uartOpen+0x120>)
 8000bbc:	011b      	lsls	r3, r3, #4
 8000bbe:	440b      	add	r3, r1
 8000bc0:	601a      	str	r2, [r3, #0]
				qbuffer[ch].out = qbuffer[ch].in;
 8000bc2:	79fa      	ldrb	r2, [r7, #7]
 8000bc4:	79fb      	ldrb	r3, [r7, #7]
 8000bc6:	490a      	ldr	r1, [pc, #40]	; (8000bf0 <uartOpen+0x120>)
 8000bc8:	0112      	lsls	r2, r2, #4
 8000bca:	440a      	add	r2, r1
 8000bcc:	6812      	ldr	r2, [r2, #0]
 8000bce:	4908      	ldr	r1, [pc, #32]	; (8000bf0 <uartOpen+0x120>)
 8000bd0:	011b      	lsls	r3, r3, #4
 8000bd2:	440b      	add	r3, r1
 8000bd4:	3304      	adds	r3, #4
 8000bd6:	601a      	str	r2, [r3, #0]
			break;
 8000bd8:	bf00      	nop
	}

	return ret;
 8000bda:	7bfb      	ldrb	r3, [r7, #15]
}
 8000bdc:	4618      	mov	r0, r3
 8000bde:	3710      	adds	r7, #16
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bd80      	pop	{r7, pc}
 8000be4:	2000028c 	.word	0x2000028c
 8000be8:	200001e8 	.word	0x200001e8
 8000bec:	40011000 	.word	0x40011000
 8000bf0:	20000290 	.word	0x20000290
 8000bf4:	200002b0 	.word	0x200002b0
 8000bf8:	40023800 	.word	0x40023800
 8000bfc:	2000022c 	.word	0x2000022c

08000c00 <HAL_UART_ErrorCallback>:




void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8000c00:	b480      	push	{r7}
 8000c02:	b083      	sub	sp, #12
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
  if(huart1.Instance == USART1)
  {

  }
}
 8000c08:	bf00      	nop
 8000c0a:	370c      	adds	r7, #12
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c12:	4770      	bx	lr

08000c14 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000c14:	b480      	push	{r7}
 8000c16:	b083      	sub	sp, #12
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
    /* received 1 byte data will be sent to our buffer
     * and to receive 1byte again, recall HAL_UART_Receive_IT*/
    HAL_UART_Receive_IT(&huart1, (uint8_t *)&rx_data[_DEF_UART2], 1);
  }
#endif
}
 8000c1c:	bf00      	nop
 8000c1e:	370c      	adds	r7, #12
 8000c20:	46bd      	mov	sp, r7
 8000c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c26:	4770      	bx	lr

08000c28 <HAL_UART_MspInit>:




void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b08a      	sub	sp, #40	; 0x28
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c30:	f107 0314 	add.w	r3, r7, #20
 8000c34:	2200      	movs	r2, #0
 8000c36:	601a      	str	r2, [r3, #0]
 8000c38:	605a      	str	r2, [r3, #4]
 8000c3a:	609a      	str	r2, [r3, #8]
 8000c3c:	60da      	str	r2, [r3, #12]
 8000c3e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	4a35      	ldr	r2, [pc, #212]	; (8000d1c <HAL_UART_MspInit+0xf4>)
 8000c46:	4293      	cmp	r3, r2
 8000c48:	d163      	bne.n	8000d12 <HAL_UART_MspInit+0xea>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	613b      	str	r3, [r7, #16]
 8000c4e:	4b34      	ldr	r3, [pc, #208]	; (8000d20 <HAL_UART_MspInit+0xf8>)
 8000c50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c52:	4a33      	ldr	r2, [pc, #204]	; (8000d20 <HAL_UART_MspInit+0xf8>)
 8000c54:	f043 0310 	orr.w	r3, r3, #16
 8000c58:	6453      	str	r3, [r2, #68]	; 0x44
 8000c5a:	4b31      	ldr	r3, [pc, #196]	; (8000d20 <HAL_UART_MspInit+0xf8>)
 8000c5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c5e:	f003 0310 	and.w	r3, r3, #16
 8000c62:	613b      	str	r3, [r7, #16]
 8000c64:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c66:	2300      	movs	r3, #0
 8000c68:	60fb      	str	r3, [r7, #12]
 8000c6a:	4b2d      	ldr	r3, [pc, #180]	; (8000d20 <HAL_UART_MspInit+0xf8>)
 8000c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c6e:	4a2c      	ldr	r2, [pc, #176]	; (8000d20 <HAL_UART_MspInit+0xf8>)
 8000c70:	f043 0301 	orr.w	r3, r3, #1
 8000c74:	6313      	str	r3, [r2, #48]	; 0x30
 8000c76:	4b2a      	ldr	r3, [pc, #168]	; (8000d20 <HAL_UART_MspInit+0xf8>)
 8000c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c7a:	f003 0301 	and.w	r3, r3, #1
 8000c7e:	60fb      	str	r3, [r7, #12]
 8000c80:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000c82:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000c86:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c88:	2302      	movs	r3, #2
 8000c8a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c90:	2303      	movs	r3, #3
 8000c92:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000c94:	2307      	movs	r3, #7
 8000c96:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c98:	f107 0314 	add.w	r3, r7, #20
 8000c9c:	4619      	mov	r1, r3
 8000c9e:	4821      	ldr	r0, [pc, #132]	; (8000d24 <HAL_UART_MspInit+0xfc>)
 8000ca0:	f000 fef0 	bl	8001a84 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8000ca4:	4b20      	ldr	r3, [pc, #128]	; (8000d28 <HAL_UART_MspInit+0x100>)
 8000ca6:	4a21      	ldr	r2, [pc, #132]	; (8000d2c <HAL_UART_MspInit+0x104>)
 8000ca8:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8000caa:	4b1f      	ldr	r3, [pc, #124]	; (8000d28 <HAL_UART_MspInit+0x100>)
 8000cac:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000cb0:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000cb2:	4b1d      	ldr	r3, [pc, #116]	; (8000d28 <HAL_UART_MspInit+0x100>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000cb8:	4b1b      	ldr	r3, [pc, #108]	; (8000d28 <HAL_UART_MspInit+0x100>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000cbe:	4b1a      	ldr	r3, [pc, #104]	; (8000d28 <HAL_UART_MspInit+0x100>)
 8000cc0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000cc4:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000cc6:	4b18      	ldr	r3, [pc, #96]	; (8000d28 <HAL_UART_MspInit+0x100>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000ccc:	4b16      	ldr	r3, [pc, #88]	; (8000d28 <HAL_UART_MspInit+0x100>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8000cd2:	4b15      	ldr	r3, [pc, #84]	; (8000d28 <HAL_UART_MspInit+0x100>)
 8000cd4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000cd8:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000cda:	4b13      	ldr	r3, [pc, #76]	; (8000d28 <HAL_UART_MspInit+0x100>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000ce0:	4b11      	ldr	r3, [pc, #68]	; (8000d28 <HAL_UART_MspInit+0x100>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000ce6:	4810      	ldr	r0, [pc, #64]	; (8000d28 <HAL_UART_MspInit+0x100>)
 8000ce8:	f000 fa6c 	bl	80011c4 <HAL_DMA_Init>
 8000cec:	4603      	mov	r3, r0
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d001      	beq.n	8000cf6 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8000cf2:	f7ff fccb 	bl	800068c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	4a0b      	ldr	r2, [pc, #44]	; (8000d28 <HAL_UART_MspInit+0x100>)
 8000cfa:	639a      	str	r2, [r3, #56]	; 0x38
 8000cfc:	4a0a      	ldr	r2, [pc, #40]	; (8000d28 <HAL_UART_MspInit+0x100>)
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000d02:	2200      	movs	r2, #0
 8000d04:	2100      	movs	r1, #0
 8000d06:	2025      	movs	r0, #37	; 0x25
 8000d08:	f000 fa17 	bl	800113a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000d0c:	2025      	movs	r0, #37	; 0x25
 8000d0e:	f000 fa30 	bl	8001172 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000d12:	bf00      	nop
 8000d14:	3728      	adds	r7, #40	; 0x28
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	bf00      	nop
 8000d1c:	40011000 	.word	0x40011000
 8000d20:	40023800 	.word	0x40023800
 8000d24:	40020000 	.word	0x40020000
 8000d28:	2000022c 	.word	0x2000022c
 8000d2c:	40026440 	.word	0x40026440

08000d30 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b082      	sub	sp, #8
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]

  if(uartHandle->Instance==USART1)
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	4a0c      	ldr	r2, [pc, #48]	; (8000d70 <HAL_UART_MspDeInit+0x40>)
 8000d3e:	4293      	cmp	r3, r2
 8000d40:	d112      	bne.n	8000d68 <HAL_UART_MspDeInit+0x38>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 8000d42:	4b0c      	ldr	r3, [pc, #48]	; (8000d74 <HAL_UART_MspDeInit+0x44>)
 8000d44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d46:	4a0b      	ldr	r2, [pc, #44]	; (8000d74 <HAL_UART_MspDeInit+0x44>)
 8000d48:	f023 0310 	bic.w	r3, r3, #16
 8000d4c:	6453      	str	r3, [r2, #68]	; 0x44

    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9|GPIO_PIN_10);
 8000d4e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8000d52:	4809      	ldr	r0, [pc, #36]	; (8000d78 <HAL_UART_MspDeInit+0x48>)
 8000d54:	f001 f81a 	bl	8001d8c <HAL_GPIO_DeInit>

    /* USART1 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmarx);
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	f000 fadf 	bl	8001320 <HAL_DMA_DeInit>

    /* USART1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 8000d62:	2025      	movs	r0, #37	; 0x25
 8000d64:	f000 fa13 	bl	800118e <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART1_MspDeInit 1 */

  /* USER CODE END USART1_MspDeInit 1 */
  }
}
 8000d68:	bf00      	nop
 8000d6a:	3708      	adds	r7, #8
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	bd80      	pop	{r7, pc}
 8000d70:	40011000 	.word	0x40011000
 8000d74:	40023800 	.word	0x40023800
 8000d78:	40020000 	.word	0x40020000

08000d7c <usbInit>:


#include "usb.h"

bool usbInit(void)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b086      	sub	sp, #24
 8000d80:	af00      	add	r7, sp, #0
	bool ret = true;
 8000d82:	2301      	movs	r3, #1
 8000d84:	75fb      	strb	r3, [r7, #23]

	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d86:	463b      	mov	r3, r7
 8000d88:	2200      	movs	r2, #0
 8000d8a:	601a      	str	r2, [r3, #0]
 8000d8c:	605a      	str	r2, [r3, #4]
 8000d8e:	609a      	str	r2, [r3, #8]
 8000d90:	60da      	str	r2, [r3, #12]
 8000d92:	611a      	str	r2, [r3, #16]

	GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000d94:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d98:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000d9a:	2311      	movs	r3, #17
 8000d9c:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000da2:	2300      	movs	r3, #0
 8000da4:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000da6:	463b      	mov	r3, r7
 8000da8:	4619      	mov	r1, r3
 8000daa:	4810      	ldr	r0, [pc, #64]	; (8000dec <usbInit+0x70>)
 8000dac:	f000 fe6a 	bl	8001a84 <HAL_GPIO_Init>

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8000db0:	2200      	movs	r2, #0
 8000db2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000db6:	480d      	ldr	r0, [pc, #52]	; (8000dec <usbInit+0x70>)
 8000db8:	f001 f8cc 	bl	8001f54 <HAL_GPIO_WritePin>
	delay(100);
 8000dbc:	2064      	movs	r0, #100	; 0x64
 8000dbe:	f7ff fbe9 	bl	8000594 <delay>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8000dc2:	2201      	movs	r2, #1
 8000dc4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000dc8:	4808      	ldr	r0, [pc, #32]	; (8000dec <usbInit+0x70>)
 8000dca:	f001 f8c3 	bl	8001f54 <HAL_GPIO_WritePin>

	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	607b      	str	r3, [r7, #4]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dd2:	463b      	mov	r3, r7
 8000dd4:	4619      	mov	r1, r3
 8000dd6:	4805      	ldr	r0, [pc, #20]	; (8000dec <usbInit+0x70>)
 8000dd8:	f000 fe54 	bl	8001a84 <HAL_GPIO_Init>

	MX_USB_DEVICE_Init();
 8000ddc:	f007 f9cc 	bl	8008178 <MX_USB_DEVICE_Init>
	return ret;
 8000de0:	7dfb      	ldrb	r3, [r7, #23]
}
 8000de2:	4618      	mov	r0, r3
 8000de4:	3718      	adds	r7, #24
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bd80      	pop	{r7, pc}
 8000dea:	bf00      	nop
 8000dec:	40020000 	.word	0x40020000

08000df0 <hwInit>:
 */

#include "hw.h"

void hwInit()
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	af00      	add	r7, sp, #0
  bspInit();
 8000df4:	f7ff fb96 	bl	8000524 <bspInit>
  rtcInit();
 8000df8:	f7ff fdd8 	bl	80009ac <rtcInit>

  resetInit();
 8000dfc:	f7ff fdaa 	bl	8000954 <resetInit>
  ledInit();
 8000e00:	f7ff fd10 	bl	8000824 <ledInit>
  usbInit();
 8000e04:	f7ff ffba 	bl	8000d7c <usbInit>
  uartInit();
 8000e08:	f7ff fe48 	bl	8000a9c <uartInit>
}
 8000e0c:	bf00      	nop
 8000e0e:	bd80      	pop	{r7, pc}

08000e10 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e14:	4b0e      	ldr	r3, [pc, #56]	; (8000e50 <HAL_Init+0x40>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	4a0d      	ldr	r2, [pc, #52]	; (8000e50 <HAL_Init+0x40>)
 8000e1a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e1e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e20:	4b0b      	ldr	r3, [pc, #44]	; (8000e50 <HAL_Init+0x40>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	4a0a      	ldr	r2, [pc, #40]	; (8000e50 <HAL_Init+0x40>)
 8000e26:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e2a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e2c:	4b08      	ldr	r3, [pc, #32]	; (8000e50 <HAL_Init+0x40>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	4a07      	ldr	r2, [pc, #28]	; (8000e50 <HAL_Init+0x40>)
 8000e32:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e36:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e38:	2003      	movs	r0, #3
 8000e3a:	f000 f973 	bl	8001124 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e3e:	200f      	movs	r0, #15
 8000e40:	f000 f808 	bl	8000e54 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e44:	f7ff fc28 	bl	8000698 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e48:	2300      	movs	r3, #0
}
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	bd80      	pop	{r7, pc}
 8000e4e:	bf00      	nop
 8000e50:	40023c00 	.word	0x40023c00

08000e54 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b082      	sub	sp, #8
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e5c:	4b12      	ldr	r3, [pc, #72]	; (8000ea8 <HAL_InitTick+0x54>)
 8000e5e:	681a      	ldr	r2, [r3, #0]
 8000e60:	4b12      	ldr	r3, [pc, #72]	; (8000eac <HAL_InitTick+0x58>)
 8000e62:	781b      	ldrb	r3, [r3, #0]
 8000e64:	4619      	mov	r1, r3
 8000e66:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e6a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e72:	4618      	mov	r0, r3
 8000e74:	f000 f999 	bl	80011aa <HAL_SYSTICK_Config>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d001      	beq.n	8000e82 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e7e:	2301      	movs	r3, #1
 8000e80:	e00e      	b.n	8000ea0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	2b0f      	cmp	r3, #15
 8000e86:	d80a      	bhi.n	8000e9e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e88:	2200      	movs	r2, #0
 8000e8a:	6879      	ldr	r1, [r7, #4]
 8000e8c:	f04f 30ff 	mov.w	r0, #4294967295
 8000e90:	f000 f953 	bl	800113a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e94:	4a06      	ldr	r2, [pc, #24]	; (8000eb0 <HAL_InitTick+0x5c>)
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	e000      	b.n	8000ea0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e9e:	2301      	movs	r3, #1
}
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	3708      	adds	r7, #8
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	bd80      	pop	{r7, pc}
 8000ea8:	20000000 	.word	0x20000000
 8000eac:	2000002c 	.word	0x2000002c
 8000eb0:	20000028 	.word	0x20000028

08000eb4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000eb8:	4b06      	ldr	r3, [pc, #24]	; (8000ed4 <HAL_IncTick+0x20>)
 8000eba:	781b      	ldrb	r3, [r3, #0]
 8000ebc:	461a      	mov	r2, r3
 8000ebe:	4b06      	ldr	r3, [pc, #24]	; (8000ed8 <HAL_IncTick+0x24>)
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	4413      	add	r3, r2
 8000ec4:	4a04      	ldr	r2, [pc, #16]	; (8000ed8 <HAL_IncTick+0x24>)
 8000ec6:	6013      	str	r3, [r2, #0]
}
 8000ec8:	bf00      	nop
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed0:	4770      	bx	lr
 8000ed2:	bf00      	nop
 8000ed4:	2000002c 	.word	0x2000002c
 8000ed8:	200003b0 	.word	0x200003b0

08000edc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000edc:	b480      	push	{r7}
 8000ede:	af00      	add	r7, sp, #0
  return uwTick;
 8000ee0:	4b03      	ldr	r3, [pc, #12]	; (8000ef0 <HAL_GetTick+0x14>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
}
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eec:	4770      	bx	lr
 8000eee:	bf00      	nop
 8000ef0:	200003b0 	.word	0x200003b0

08000ef4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b084      	sub	sp, #16
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000efc:	f7ff ffee 	bl	8000edc <HAL_GetTick>
 8000f00:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f06:	68fb      	ldr	r3, [r7, #12]
 8000f08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f0c:	d005      	beq.n	8000f1a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f0e:	4b0a      	ldr	r3, [pc, #40]	; (8000f38 <HAL_Delay+0x44>)
 8000f10:	781b      	ldrb	r3, [r3, #0]
 8000f12:	461a      	mov	r2, r3
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	4413      	add	r3, r2
 8000f18:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f1a:	bf00      	nop
 8000f1c:	f7ff ffde 	bl	8000edc <HAL_GetTick>
 8000f20:	4602      	mov	r2, r0
 8000f22:	68bb      	ldr	r3, [r7, #8]
 8000f24:	1ad3      	subs	r3, r2, r3
 8000f26:	68fa      	ldr	r2, [r7, #12]
 8000f28:	429a      	cmp	r2, r3
 8000f2a:	d8f7      	bhi.n	8000f1c <HAL_Delay+0x28>
  {
  }
}
 8000f2c:	bf00      	nop
 8000f2e:	bf00      	nop
 8000f30:	3710      	adds	r7, #16
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	bf00      	nop
 8000f38:	2000002c 	.word	0x2000002c

08000f3c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	b085      	sub	sp, #20
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	f003 0307 	and.w	r3, r3, #7
 8000f4a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f4c:	4b0c      	ldr	r3, [pc, #48]	; (8000f80 <__NVIC_SetPriorityGrouping+0x44>)
 8000f4e:	68db      	ldr	r3, [r3, #12]
 8000f50:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f52:	68ba      	ldr	r2, [r7, #8]
 8000f54:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f58:	4013      	ands	r3, r2
 8000f5a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f60:	68bb      	ldr	r3, [r7, #8]
 8000f62:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f64:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f6e:	4a04      	ldr	r2, [pc, #16]	; (8000f80 <__NVIC_SetPriorityGrouping+0x44>)
 8000f70:	68bb      	ldr	r3, [r7, #8]
 8000f72:	60d3      	str	r3, [r2, #12]
}
 8000f74:	bf00      	nop
 8000f76:	3714      	adds	r7, #20
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7e:	4770      	bx	lr
 8000f80:	e000ed00 	.word	0xe000ed00

08000f84 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f84:	b480      	push	{r7}
 8000f86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f88:	4b04      	ldr	r3, [pc, #16]	; (8000f9c <__NVIC_GetPriorityGrouping+0x18>)
 8000f8a:	68db      	ldr	r3, [r3, #12]
 8000f8c:	0a1b      	lsrs	r3, r3, #8
 8000f8e:	f003 0307 	and.w	r3, r3, #7
}
 8000f92:	4618      	mov	r0, r3
 8000f94:	46bd      	mov	sp, r7
 8000f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9a:	4770      	bx	lr
 8000f9c:	e000ed00 	.word	0xe000ed00

08000fa0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	b083      	sub	sp, #12
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000faa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	db0b      	blt.n	8000fca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fb2:	79fb      	ldrb	r3, [r7, #7]
 8000fb4:	f003 021f 	and.w	r2, r3, #31
 8000fb8:	4907      	ldr	r1, [pc, #28]	; (8000fd8 <__NVIC_EnableIRQ+0x38>)
 8000fba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fbe:	095b      	lsrs	r3, r3, #5
 8000fc0:	2001      	movs	r0, #1
 8000fc2:	fa00 f202 	lsl.w	r2, r0, r2
 8000fc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000fca:	bf00      	nop
 8000fcc:	370c      	adds	r7, #12
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd4:	4770      	bx	lr
 8000fd6:	bf00      	nop
 8000fd8:	e000e100 	.word	0xe000e100

08000fdc <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	b083      	sub	sp, #12
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fe6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	db12      	blt.n	8001014 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fee:	79fb      	ldrb	r3, [r7, #7]
 8000ff0:	f003 021f 	and.w	r2, r3, #31
 8000ff4:	490a      	ldr	r1, [pc, #40]	; (8001020 <__NVIC_DisableIRQ+0x44>)
 8000ff6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ffa:	095b      	lsrs	r3, r3, #5
 8000ffc:	2001      	movs	r0, #1
 8000ffe:	fa00 f202 	lsl.w	r2, r0, r2
 8001002:	3320      	adds	r3, #32
 8001004:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001008:	f3bf 8f4f 	dsb	sy
}
 800100c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800100e:	f3bf 8f6f 	isb	sy
}
 8001012:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8001014:	bf00      	nop
 8001016:	370c      	adds	r7, #12
 8001018:	46bd      	mov	sp, r7
 800101a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101e:	4770      	bx	lr
 8001020:	e000e100 	.word	0xe000e100

08001024 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001024:	b480      	push	{r7}
 8001026:	b083      	sub	sp, #12
 8001028:	af00      	add	r7, sp, #0
 800102a:	4603      	mov	r3, r0
 800102c:	6039      	str	r1, [r7, #0]
 800102e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001030:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001034:	2b00      	cmp	r3, #0
 8001036:	db0a      	blt.n	800104e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	b2da      	uxtb	r2, r3
 800103c:	490c      	ldr	r1, [pc, #48]	; (8001070 <__NVIC_SetPriority+0x4c>)
 800103e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001042:	0112      	lsls	r2, r2, #4
 8001044:	b2d2      	uxtb	r2, r2
 8001046:	440b      	add	r3, r1
 8001048:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800104c:	e00a      	b.n	8001064 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800104e:	683b      	ldr	r3, [r7, #0]
 8001050:	b2da      	uxtb	r2, r3
 8001052:	4908      	ldr	r1, [pc, #32]	; (8001074 <__NVIC_SetPriority+0x50>)
 8001054:	79fb      	ldrb	r3, [r7, #7]
 8001056:	f003 030f 	and.w	r3, r3, #15
 800105a:	3b04      	subs	r3, #4
 800105c:	0112      	lsls	r2, r2, #4
 800105e:	b2d2      	uxtb	r2, r2
 8001060:	440b      	add	r3, r1
 8001062:	761a      	strb	r2, [r3, #24]
}
 8001064:	bf00      	nop
 8001066:	370c      	adds	r7, #12
 8001068:	46bd      	mov	sp, r7
 800106a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106e:	4770      	bx	lr
 8001070:	e000e100 	.word	0xe000e100
 8001074:	e000ed00 	.word	0xe000ed00

08001078 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001078:	b480      	push	{r7}
 800107a:	b089      	sub	sp, #36	; 0x24
 800107c:	af00      	add	r7, sp, #0
 800107e:	60f8      	str	r0, [r7, #12]
 8001080:	60b9      	str	r1, [r7, #8]
 8001082:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	f003 0307 	and.w	r3, r3, #7
 800108a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800108c:	69fb      	ldr	r3, [r7, #28]
 800108e:	f1c3 0307 	rsb	r3, r3, #7
 8001092:	2b04      	cmp	r3, #4
 8001094:	bf28      	it	cs
 8001096:	2304      	movcs	r3, #4
 8001098:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800109a:	69fb      	ldr	r3, [r7, #28]
 800109c:	3304      	adds	r3, #4
 800109e:	2b06      	cmp	r3, #6
 80010a0:	d902      	bls.n	80010a8 <NVIC_EncodePriority+0x30>
 80010a2:	69fb      	ldr	r3, [r7, #28]
 80010a4:	3b03      	subs	r3, #3
 80010a6:	e000      	b.n	80010aa <NVIC_EncodePriority+0x32>
 80010a8:	2300      	movs	r3, #0
 80010aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010ac:	f04f 32ff 	mov.w	r2, #4294967295
 80010b0:	69bb      	ldr	r3, [r7, #24]
 80010b2:	fa02 f303 	lsl.w	r3, r2, r3
 80010b6:	43da      	mvns	r2, r3
 80010b8:	68bb      	ldr	r3, [r7, #8]
 80010ba:	401a      	ands	r2, r3
 80010bc:	697b      	ldr	r3, [r7, #20]
 80010be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010c0:	f04f 31ff 	mov.w	r1, #4294967295
 80010c4:	697b      	ldr	r3, [r7, #20]
 80010c6:	fa01 f303 	lsl.w	r3, r1, r3
 80010ca:	43d9      	mvns	r1, r3
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010d0:	4313      	orrs	r3, r2
         );
}
 80010d2:	4618      	mov	r0, r3
 80010d4:	3724      	adds	r7, #36	; 0x24
 80010d6:	46bd      	mov	sp, r7
 80010d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010dc:	4770      	bx	lr
	...

080010e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b082      	sub	sp, #8
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	3b01      	subs	r3, #1
 80010ec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80010f0:	d301      	bcc.n	80010f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010f2:	2301      	movs	r3, #1
 80010f4:	e00f      	b.n	8001116 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010f6:	4a0a      	ldr	r2, [pc, #40]	; (8001120 <SysTick_Config+0x40>)
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	3b01      	subs	r3, #1
 80010fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010fe:	210f      	movs	r1, #15
 8001100:	f04f 30ff 	mov.w	r0, #4294967295
 8001104:	f7ff ff8e 	bl	8001024 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001108:	4b05      	ldr	r3, [pc, #20]	; (8001120 <SysTick_Config+0x40>)
 800110a:	2200      	movs	r2, #0
 800110c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800110e:	4b04      	ldr	r3, [pc, #16]	; (8001120 <SysTick_Config+0x40>)
 8001110:	2207      	movs	r2, #7
 8001112:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001114:	2300      	movs	r3, #0
}
 8001116:	4618      	mov	r0, r3
 8001118:	3708      	adds	r7, #8
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}
 800111e:	bf00      	nop
 8001120:	e000e010 	.word	0xe000e010

08001124 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b082      	sub	sp, #8
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800112c:	6878      	ldr	r0, [r7, #4]
 800112e:	f7ff ff05 	bl	8000f3c <__NVIC_SetPriorityGrouping>
}
 8001132:	bf00      	nop
 8001134:	3708      	adds	r7, #8
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}

0800113a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800113a:	b580      	push	{r7, lr}
 800113c:	b086      	sub	sp, #24
 800113e:	af00      	add	r7, sp, #0
 8001140:	4603      	mov	r3, r0
 8001142:	60b9      	str	r1, [r7, #8]
 8001144:	607a      	str	r2, [r7, #4]
 8001146:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001148:	2300      	movs	r3, #0
 800114a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800114c:	f7ff ff1a 	bl	8000f84 <__NVIC_GetPriorityGrouping>
 8001150:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001152:	687a      	ldr	r2, [r7, #4]
 8001154:	68b9      	ldr	r1, [r7, #8]
 8001156:	6978      	ldr	r0, [r7, #20]
 8001158:	f7ff ff8e 	bl	8001078 <NVIC_EncodePriority>
 800115c:	4602      	mov	r2, r0
 800115e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001162:	4611      	mov	r1, r2
 8001164:	4618      	mov	r0, r3
 8001166:	f7ff ff5d 	bl	8001024 <__NVIC_SetPriority>
}
 800116a:	bf00      	nop
 800116c:	3718      	adds	r7, #24
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}

08001172 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001172:	b580      	push	{r7, lr}
 8001174:	b082      	sub	sp, #8
 8001176:	af00      	add	r7, sp, #0
 8001178:	4603      	mov	r3, r0
 800117a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800117c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001180:	4618      	mov	r0, r3
 8001182:	f7ff ff0d 	bl	8000fa0 <__NVIC_EnableIRQ>
}
 8001186:	bf00      	nop
 8001188:	3708      	adds	r7, #8
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}

0800118e <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800118e:	b580      	push	{r7, lr}
 8001190:	b082      	sub	sp, #8
 8001192:	af00      	add	r7, sp, #0
 8001194:	4603      	mov	r3, r0
 8001196:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8001198:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800119c:	4618      	mov	r0, r3
 800119e:	f7ff ff1d 	bl	8000fdc <__NVIC_DisableIRQ>
}
 80011a2:	bf00      	nop
 80011a4:	3708      	adds	r7, #8
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}

080011aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011aa:	b580      	push	{r7, lr}
 80011ac:	b082      	sub	sp, #8
 80011ae:	af00      	add	r7, sp, #0
 80011b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011b2:	6878      	ldr	r0, [r7, #4]
 80011b4:	f7ff ff94 	bl	80010e0 <SysTick_Config>
 80011b8:	4603      	mov	r3, r0
}
 80011ba:	4618      	mov	r0, r3
 80011bc:	3708      	adds	r7, #8
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}
	...

080011c4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b086      	sub	sp, #24
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80011cc:	2300      	movs	r3, #0
 80011ce:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80011d0:	f7ff fe84 	bl	8000edc <HAL_GetTick>
 80011d4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d101      	bne.n	80011e0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80011dc:	2301      	movs	r3, #1
 80011de:	e099      	b.n	8001314 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	2202      	movs	r2, #2
 80011e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	2200      	movs	r2, #0
 80011ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	681a      	ldr	r2, [r3, #0]
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	f022 0201 	bic.w	r2, r2, #1
 80011fe:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001200:	e00f      	b.n	8001222 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001202:	f7ff fe6b 	bl	8000edc <HAL_GetTick>
 8001206:	4602      	mov	r2, r0
 8001208:	693b      	ldr	r3, [r7, #16]
 800120a:	1ad3      	subs	r3, r2, r3
 800120c:	2b05      	cmp	r3, #5
 800120e:	d908      	bls.n	8001222 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	2220      	movs	r2, #32
 8001214:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	2203      	movs	r2, #3
 800121a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800121e:	2303      	movs	r3, #3
 8001220:	e078      	b.n	8001314 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	f003 0301 	and.w	r3, r3, #1
 800122c:	2b00      	cmp	r3, #0
 800122e:	d1e8      	bne.n	8001202 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001238:	697a      	ldr	r2, [r7, #20]
 800123a:	4b38      	ldr	r3, [pc, #224]	; (800131c <HAL_DMA_Init+0x158>)
 800123c:	4013      	ands	r3, r2
 800123e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	685a      	ldr	r2, [r3, #4]
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	689b      	ldr	r3, [r3, #8]
 8001248:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800124e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	691b      	ldr	r3, [r3, #16]
 8001254:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800125a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	699b      	ldr	r3, [r3, #24]
 8001260:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001266:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	6a1b      	ldr	r3, [r3, #32]
 800126c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800126e:	697a      	ldr	r2, [r7, #20]
 8001270:	4313      	orrs	r3, r2
 8001272:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001278:	2b04      	cmp	r3, #4
 800127a:	d107      	bne.n	800128c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001284:	4313      	orrs	r3, r2
 8001286:	697a      	ldr	r2, [r7, #20]
 8001288:	4313      	orrs	r3, r2
 800128a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	697a      	ldr	r2, [r7, #20]
 8001292:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	695b      	ldr	r3, [r3, #20]
 800129a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800129c:	697b      	ldr	r3, [r7, #20]
 800129e:	f023 0307 	bic.w	r3, r3, #7
 80012a2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012a8:	697a      	ldr	r2, [r7, #20]
 80012aa:	4313      	orrs	r3, r2
 80012ac:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012b2:	2b04      	cmp	r3, #4
 80012b4:	d117      	bne.n	80012e6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012ba:	697a      	ldr	r2, [r7, #20]
 80012bc:	4313      	orrs	r3, r2
 80012be:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d00e      	beq.n	80012e6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80012c8:	6878      	ldr	r0, [r7, #4]
 80012ca:	f000 fb5f 	bl	800198c <DMA_CheckFifoParam>
 80012ce:	4603      	mov	r3, r0
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d008      	beq.n	80012e6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	2240      	movs	r2, #64	; 0x40
 80012d8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	2201      	movs	r2, #1
 80012de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80012e2:	2301      	movs	r3, #1
 80012e4:	e016      	b.n	8001314 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	697a      	ldr	r2, [r7, #20]
 80012ec:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80012ee:	6878      	ldr	r0, [r7, #4]
 80012f0:	f000 fb16 	bl	8001920 <DMA_CalcBaseAndBitshift>
 80012f4:	4603      	mov	r3, r0
 80012f6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012fc:	223f      	movs	r2, #63	; 0x3f
 80012fe:	409a      	lsls	r2, r3
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	2200      	movs	r2, #0
 8001308:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	2201      	movs	r2, #1
 800130e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001312:	2300      	movs	r3, #0
}
 8001314:	4618      	mov	r0, r3
 8001316:	3718      	adds	r7, #24
 8001318:	46bd      	mov	sp, r7
 800131a:	bd80      	pop	{r7, pc}
 800131c:	f010803f 	.word	0xf010803f

08001320 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b084      	sub	sp, #16
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	2b00      	cmp	r3, #0
 800132c:	d101      	bne.n	8001332 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 800132e:	2301      	movs	r3, #1
 8001330:	e050      	b.n	80013d4 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001338:	b2db      	uxtb	r3, r3
 800133a:	2b02      	cmp	r3, #2
 800133c:	d101      	bne.n	8001342 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 800133e:	2302      	movs	r3, #2
 8001340:	e048      	b.n	80013d4 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	681a      	ldr	r2, [r3, #0]
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	f022 0201 	bic.w	r2, r2, #1
 8001350:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	2200      	movs	r2, #0
 8001358:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	2200      	movs	r2, #0
 8001360:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	2200      	movs	r2, #0
 8001368:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	2200      	movs	r2, #0
 8001370:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	2200      	movs	r2, #0
 8001378:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	2221      	movs	r2, #33	; 0x21
 8001380:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001382:	6878      	ldr	r0, [r7, #4]
 8001384:	f000 facc 	bl	8001920 <DMA_CalcBaseAndBitshift>
 8001388:	4603      	mov	r3, r0
 800138a:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	2200      	movs	r2, #0
 8001390:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	2200      	movs	r2, #0
 8001396:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	2200      	movs	r2, #0
 800139c:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	2200      	movs	r2, #0
 80013a2:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	2200      	movs	r2, #0
 80013a8:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	2200      	movs	r2, #0
 80013ae:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013b4:	223f      	movs	r2, #63	; 0x3f
 80013b6:	409a      	lsls	r2, r3
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	2200      	movs	r2, #0
 80013c0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	2200      	movs	r2, #0
 80013c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	2200      	movs	r2, #0
 80013ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80013d2:	2300      	movs	r3, #0
}
 80013d4:	4618      	mov	r0, r3
 80013d6:	3710      	adds	r7, #16
 80013d8:	46bd      	mov	sp, r7
 80013da:	bd80      	pop	{r7, pc}

080013dc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b086      	sub	sp, #24
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	60f8      	str	r0, [r7, #12]
 80013e4:	60b9      	str	r1, [r7, #8]
 80013e6:	607a      	str	r2, [r7, #4]
 80013e8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80013ea:	2300      	movs	r3, #0
 80013ec:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013f2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80013fa:	2b01      	cmp	r3, #1
 80013fc:	d101      	bne.n	8001402 <HAL_DMA_Start_IT+0x26>
 80013fe:	2302      	movs	r3, #2
 8001400:	e040      	b.n	8001484 <HAL_DMA_Start_IT+0xa8>
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	2201      	movs	r2, #1
 8001406:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001410:	b2db      	uxtb	r3, r3
 8001412:	2b01      	cmp	r3, #1
 8001414:	d12f      	bne.n	8001476 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	2202      	movs	r2, #2
 800141a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	2200      	movs	r2, #0
 8001422:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	687a      	ldr	r2, [r7, #4]
 8001428:	68b9      	ldr	r1, [r7, #8]
 800142a:	68f8      	ldr	r0, [r7, #12]
 800142c:	f000 fa4a 	bl	80018c4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001434:	223f      	movs	r2, #63	; 0x3f
 8001436:	409a      	lsls	r2, r3
 8001438:	693b      	ldr	r3, [r7, #16]
 800143a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	681a      	ldr	r2, [r3, #0]
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	f042 0216 	orr.w	r2, r2, #22
 800144a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001450:	2b00      	cmp	r3, #0
 8001452:	d007      	beq.n	8001464 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	681a      	ldr	r2, [r3, #0]
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	f042 0208 	orr.w	r2, r2, #8
 8001462:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	681a      	ldr	r2, [r3, #0]
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	f042 0201 	orr.w	r2, r2, #1
 8001472:	601a      	str	r2, [r3, #0]
 8001474:	e005      	b.n	8001482 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	2200      	movs	r2, #0
 800147a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800147e:	2302      	movs	r3, #2
 8001480:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001482:	7dfb      	ldrb	r3, [r7, #23]
}
 8001484:	4618      	mov	r0, r3
 8001486:	3718      	adds	r7, #24
 8001488:	46bd      	mov	sp, r7
 800148a:	bd80      	pop	{r7, pc}

0800148c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b084      	sub	sp, #16
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001498:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800149a:	f7ff fd1f 	bl	8000edc <HAL_GetTick>
 800149e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80014a6:	b2db      	uxtb	r3, r3
 80014a8:	2b02      	cmp	r3, #2
 80014aa:	d008      	beq.n	80014be <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	2280      	movs	r2, #128	; 0x80
 80014b0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	2200      	movs	r2, #0
 80014b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80014ba:	2301      	movs	r3, #1
 80014bc:	e052      	b.n	8001564 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	681a      	ldr	r2, [r3, #0]
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	f022 0216 	bic.w	r2, r2, #22
 80014cc:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	695a      	ldr	r2, [r3, #20]
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80014dc:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d103      	bne.n	80014ee <HAL_DMA_Abort+0x62>
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d007      	beq.n	80014fe <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	681a      	ldr	r2, [r3, #0]
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f022 0208 	bic.w	r2, r2, #8
 80014fc:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	681a      	ldr	r2, [r3, #0]
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f022 0201 	bic.w	r2, r2, #1
 800150c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800150e:	e013      	b.n	8001538 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001510:	f7ff fce4 	bl	8000edc <HAL_GetTick>
 8001514:	4602      	mov	r2, r0
 8001516:	68bb      	ldr	r3, [r7, #8]
 8001518:	1ad3      	subs	r3, r2, r3
 800151a:	2b05      	cmp	r3, #5
 800151c:	d90c      	bls.n	8001538 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	2220      	movs	r2, #32
 8001522:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	2203      	movs	r2, #3
 8001528:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	2200      	movs	r2, #0
 8001530:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001534:	2303      	movs	r3, #3
 8001536:	e015      	b.n	8001564 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f003 0301 	and.w	r3, r3, #1
 8001542:	2b00      	cmp	r3, #0
 8001544:	d1e4      	bne.n	8001510 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800154a:	223f      	movs	r2, #63	; 0x3f
 800154c:	409a      	lsls	r2, r3
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	2201      	movs	r2, #1
 8001556:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	2200      	movs	r2, #0
 800155e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001562:	2300      	movs	r3, #0
}
 8001564:	4618      	mov	r0, r3
 8001566:	3710      	adds	r7, #16
 8001568:	46bd      	mov	sp, r7
 800156a:	bd80      	pop	{r7, pc}

0800156c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800156c:	b480      	push	{r7}
 800156e:	b083      	sub	sp, #12
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800157a:	b2db      	uxtb	r3, r3
 800157c:	2b02      	cmp	r3, #2
 800157e:	d004      	beq.n	800158a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	2280      	movs	r2, #128	; 0x80
 8001584:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001586:	2301      	movs	r3, #1
 8001588:	e00c      	b.n	80015a4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	2205      	movs	r2, #5
 800158e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	681a      	ldr	r2, [r3, #0]
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f022 0201 	bic.w	r2, r2, #1
 80015a0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80015a2:	2300      	movs	r3, #0
}
 80015a4:	4618      	mov	r0, r3
 80015a6:	370c      	adds	r7, #12
 80015a8:	46bd      	mov	sp, r7
 80015aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ae:	4770      	bx	lr

080015b0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b086      	sub	sp, #24
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80015b8:	2300      	movs	r3, #0
 80015ba:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80015bc:	4b8e      	ldr	r3, [pc, #568]	; (80017f8 <HAL_DMA_IRQHandler+0x248>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	4a8e      	ldr	r2, [pc, #568]	; (80017fc <HAL_DMA_IRQHandler+0x24c>)
 80015c2:	fba2 2303 	umull	r2, r3, r2, r3
 80015c6:	0a9b      	lsrs	r3, r3, #10
 80015c8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015ce:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80015d0:	693b      	ldr	r3, [r7, #16]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015da:	2208      	movs	r2, #8
 80015dc:	409a      	lsls	r2, r3
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	4013      	ands	r3, r2
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d01a      	beq.n	800161c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f003 0304 	and.w	r3, r3, #4
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d013      	beq.n	800161c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	681a      	ldr	r2, [r3, #0]
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f022 0204 	bic.w	r2, r2, #4
 8001602:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001608:	2208      	movs	r2, #8
 800160a:	409a      	lsls	r2, r3
 800160c:	693b      	ldr	r3, [r7, #16]
 800160e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001614:	f043 0201 	orr.w	r2, r3, #1
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001620:	2201      	movs	r2, #1
 8001622:	409a      	lsls	r2, r3
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	4013      	ands	r3, r2
 8001628:	2b00      	cmp	r3, #0
 800162a:	d012      	beq.n	8001652 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	695b      	ldr	r3, [r3, #20]
 8001632:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001636:	2b00      	cmp	r3, #0
 8001638:	d00b      	beq.n	8001652 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800163e:	2201      	movs	r2, #1
 8001640:	409a      	lsls	r2, r3
 8001642:	693b      	ldr	r3, [r7, #16]
 8001644:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800164a:	f043 0202 	orr.w	r2, r3, #2
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001656:	2204      	movs	r2, #4
 8001658:	409a      	lsls	r2, r3
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	4013      	ands	r3, r2
 800165e:	2b00      	cmp	r3, #0
 8001660:	d012      	beq.n	8001688 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f003 0302 	and.w	r3, r3, #2
 800166c:	2b00      	cmp	r3, #0
 800166e:	d00b      	beq.n	8001688 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001674:	2204      	movs	r2, #4
 8001676:	409a      	lsls	r2, r3
 8001678:	693b      	ldr	r3, [r7, #16]
 800167a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001680:	f043 0204 	orr.w	r2, r3, #4
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800168c:	2210      	movs	r2, #16
 800168e:	409a      	lsls	r2, r3
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	4013      	ands	r3, r2
 8001694:	2b00      	cmp	r3, #0
 8001696:	d043      	beq.n	8001720 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f003 0308 	and.w	r3, r3, #8
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d03c      	beq.n	8001720 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016aa:	2210      	movs	r2, #16
 80016ac:	409a      	lsls	r2, r3
 80016ae:	693b      	ldr	r3, [r7, #16]
 80016b0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d018      	beq.n	80016f2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d108      	bne.n	80016e0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d024      	beq.n	8001720 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016da:	6878      	ldr	r0, [r7, #4]
 80016dc:	4798      	blx	r3
 80016de:	e01f      	b.n	8001720 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d01b      	beq.n	8001720 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80016ec:	6878      	ldr	r0, [r7, #4]
 80016ee:	4798      	blx	r3
 80016f0:	e016      	b.n	8001720 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d107      	bne.n	8001710 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	681a      	ldr	r2, [r3, #0]
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f022 0208 	bic.w	r2, r2, #8
 800170e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001714:	2b00      	cmp	r3, #0
 8001716:	d003      	beq.n	8001720 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800171c:	6878      	ldr	r0, [r7, #4]
 800171e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001724:	2220      	movs	r2, #32
 8001726:	409a      	lsls	r2, r3
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	4013      	ands	r3, r2
 800172c:	2b00      	cmp	r3, #0
 800172e:	f000 808f 	beq.w	8001850 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f003 0310 	and.w	r3, r3, #16
 800173c:	2b00      	cmp	r3, #0
 800173e:	f000 8087 	beq.w	8001850 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001746:	2220      	movs	r2, #32
 8001748:	409a      	lsls	r2, r3
 800174a:	693b      	ldr	r3, [r7, #16]
 800174c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001754:	b2db      	uxtb	r3, r3
 8001756:	2b05      	cmp	r3, #5
 8001758:	d136      	bne.n	80017c8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	681a      	ldr	r2, [r3, #0]
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f022 0216 	bic.w	r2, r2, #22
 8001768:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	695a      	ldr	r2, [r3, #20]
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001778:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800177e:	2b00      	cmp	r3, #0
 8001780:	d103      	bne.n	800178a <HAL_DMA_IRQHandler+0x1da>
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001786:	2b00      	cmp	r3, #0
 8001788:	d007      	beq.n	800179a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	681a      	ldr	r2, [r3, #0]
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f022 0208 	bic.w	r2, r2, #8
 8001798:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800179e:	223f      	movs	r2, #63	; 0x3f
 80017a0:	409a      	lsls	r2, r3
 80017a2:	693b      	ldr	r3, [r7, #16]
 80017a4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	2201      	movs	r2, #1
 80017aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	2200      	movs	r2, #0
 80017b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d07e      	beq.n	80018bc <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80017c2:	6878      	ldr	r0, [r7, #4]
 80017c4:	4798      	blx	r3
        }
        return;
 80017c6:	e079      	b.n	80018bc <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d01d      	beq.n	8001812 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d10d      	bne.n	8001800 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d031      	beq.n	8001850 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017f0:	6878      	ldr	r0, [r7, #4]
 80017f2:	4798      	blx	r3
 80017f4:	e02c      	b.n	8001850 <HAL_DMA_IRQHandler+0x2a0>
 80017f6:	bf00      	nop
 80017f8:	20000000 	.word	0x20000000
 80017fc:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001804:	2b00      	cmp	r3, #0
 8001806:	d023      	beq.n	8001850 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800180c:	6878      	ldr	r0, [r7, #4]
 800180e:	4798      	blx	r3
 8001810:	e01e      	b.n	8001850 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800181c:	2b00      	cmp	r3, #0
 800181e:	d10f      	bne.n	8001840 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	681a      	ldr	r2, [r3, #0]
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f022 0210 	bic.w	r2, r2, #16
 800182e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	2201      	movs	r2, #1
 8001834:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	2200      	movs	r2, #0
 800183c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001844:	2b00      	cmp	r3, #0
 8001846:	d003      	beq.n	8001850 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800184c:	6878      	ldr	r0, [r7, #4]
 800184e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001854:	2b00      	cmp	r3, #0
 8001856:	d032      	beq.n	80018be <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800185c:	f003 0301 	and.w	r3, r3, #1
 8001860:	2b00      	cmp	r3, #0
 8001862:	d022      	beq.n	80018aa <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	2205      	movs	r2, #5
 8001868:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	681a      	ldr	r2, [r3, #0]
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f022 0201 	bic.w	r2, r2, #1
 800187a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800187c:	68bb      	ldr	r3, [r7, #8]
 800187e:	3301      	adds	r3, #1
 8001880:	60bb      	str	r3, [r7, #8]
 8001882:	697a      	ldr	r2, [r7, #20]
 8001884:	429a      	cmp	r2, r3
 8001886:	d307      	bcc.n	8001898 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f003 0301 	and.w	r3, r3, #1
 8001892:	2b00      	cmp	r3, #0
 8001894:	d1f2      	bne.n	800187c <HAL_DMA_IRQHandler+0x2cc>
 8001896:	e000      	b.n	800189a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001898:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	2201      	movs	r2, #1
 800189e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	2200      	movs	r2, #0
 80018a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d005      	beq.n	80018be <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018b6:	6878      	ldr	r0, [r7, #4]
 80018b8:	4798      	blx	r3
 80018ba:	e000      	b.n	80018be <HAL_DMA_IRQHandler+0x30e>
        return;
 80018bc:	bf00      	nop
    }
  }
}
 80018be:	3718      	adds	r7, #24
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bd80      	pop	{r7, pc}

080018c4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80018c4:	b480      	push	{r7}
 80018c6:	b085      	sub	sp, #20
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	60f8      	str	r0, [r7, #12]
 80018cc:	60b9      	str	r1, [r7, #8]
 80018ce:	607a      	str	r2, [r7, #4]
 80018d0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	681a      	ldr	r2, [r3, #0]
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80018e0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	683a      	ldr	r2, [r7, #0]
 80018e8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	689b      	ldr	r3, [r3, #8]
 80018ee:	2b40      	cmp	r3, #64	; 0x40
 80018f0:	d108      	bne.n	8001904 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	687a      	ldr	r2, [r7, #4]
 80018f8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	68ba      	ldr	r2, [r7, #8]
 8001900:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001902:	e007      	b.n	8001914 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	68ba      	ldr	r2, [r7, #8]
 800190a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	687a      	ldr	r2, [r7, #4]
 8001912:	60da      	str	r2, [r3, #12]
}
 8001914:	bf00      	nop
 8001916:	3714      	adds	r7, #20
 8001918:	46bd      	mov	sp, r7
 800191a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191e:	4770      	bx	lr

08001920 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001920:	b480      	push	{r7}
 8001922:	b085      	sub	sp, #20
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	b2db      	uxtb	r3, r3
 800192e:	3b10      	subs	r3, #16
 8001930:	4a14      	ldr	r2, [pc, #80]	; (8001984 <DMA_CalcBaseAndBitshift+0x64>)
 8001932:	fba2 2303 	umull	r2, r3, r2, r3
 8001936:	091b      	lsrs	r3, r3, #4
 8001938:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800193a:	4a13      	ldr	r2, [pc, #76]	; (8001988 <DMA_CalcBaseAndBitshift+0x68>)
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	4413      	add	r3, r2
 8001940:	781b      	ldrb	r3, [r3, #0]
 8001942:	461a      	mov	r2, r3
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	2b03      	cmp	r3, #3
 800194c:	d909      	bls.n	8001962 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001956:	f023 0303 	bic.w	r3, r3, #3
 800195a:	1d1a      	adds	r2, r3, #4
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	659a      	str	r2, [r3, #88]	; 0x58
 8001960:	e007      	b.n	8001972 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800196a:	f023 0303 	bic.w	r3, r3, #3
 800196e:	687a      	ldr	r2, [r7, #4]
 8001970:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001976:	4618      	mov	r0, r3
 8001978:	3714      	adds	r7, #20
 800197a:	46bd      	mov	sp, r7
 800197c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001980:	4770      	bx	lr
 8001982:	bf00      	nop
 8001984:	aaaaaaab 	.word	0xaaaaaaab
 8001988:	08008e0c 	.word	0x08008e0c

0800198c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800198c:	b480      	push	{r7}
 800198e:	b085      	sub	sp, #20
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001994:	2300      	movs	r3, #0
 8001996:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800199c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	699b      	ldr	r3, [r3, #24]
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d11f      	bne.n	80019e6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80019a6:	68bb      	ldr	r3, [r7, #8]
 80019a8:	2b03      	cmp	r3, #3
 80019aa:	d856      	bhi.n	8001a5a <DMA_CheckFifoParam+0xce>
 80019ac:	a201      	add	r2, pc, #4	; (adr r2, 80019b4 <DMA_CheckFifoParam+0x28>)
 80019ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019b2:	bf00      	nop
 80019b4:	080019c5 	.word	0x080019c5
 80019b8:	080019d7 	.word	0x080019d7
 80019bc:	080019c5 	.word	0x080019c5
 80019c0:	08001a5b 	.word	0x08001a5b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019c8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d046      	beq.n	8001a5e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80019d0:	2301      	movs	r3, #1
 80019d2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80019d4:	e043      	b.n	8001a5e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019da:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80019de:	d140      	bne.n	8001a62 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80019e0:	2301      	movs	r3, #1
 80019e2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80019e4:	e03d      	b.n	8001a62 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	699b      	ldr	r3, [r3, #24]
 80019ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80019ee:	d121      	bne.n	8001a34 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80019f0:	68bb      	ldr	r3, [r7, #8]
 80019f2:	2b03      	cmp	r3, #3
 80019f4:	d837      	bhi.n	8001a66 <DMA_CheckFifoParam+0xda>
 80019f6:	a201      	add	r2, pc, #4	; (adr r2, 80019fc <DMA_CheckFifoParam+0x70>)
 80019f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019fc:	08001a0d 	.word	0x08001a0d
 8001a00:	08001a13 	.word	0x08001a13
 8001a04:	08001a0d 	.word	0x08001a0d
 8001a08:	08001a25 	.word	0x08001a25
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001a0c:	2301      	movs	r3, #1
 8001a0e:	73fb      	strb	r3, [r7, #15]
      break;
 8001a10:	e030      	b.n	8001a74 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a16:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d025      	beq.n	8001a6a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001a1e:	2301      	movs	r3, #1
 8001a20:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001a22:	e022      	b.n	8001a6a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a28:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001a2c:	d11f      	bne.n	8001a6e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001a2e:	2301      	movs	r3, #1
 8001a30:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001a32:	e01c      	b.n	8001a6e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001a34:	68bb      	ldr	r3, [r7, #8]
 8001a36:	2b02      	cmp	r3, #2
 8001a38:	d903      	bls.n	8001a42 <DMA_CheckFifoParam+0xb6>
 8001a3a:	68bb      	ldr	r3, [r7, #8]
 8001a3c:	2b03      	cmp	r3, #3
 8001a3e:	d003      	beq.n	8001a48 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001a40:	e018      	b.n	8001a74 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001a42:	2301      	movs	r3, #1
 8001a44:	73fb      	strb	r3, [r7, #15]
      break;
 8001a46:	e015      	b.n	8001a74 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a4c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d00e      	beq.n	8001a72 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001a54:	2301      	movs	r3, #1
 8001a56:	73fb      	strb	r3, [r7, #15]
      break;
 8001a58:	e00b      	b.n	8001a72 <DMA_CheckFifoParam+0xe6>
      break;
 8001a5a:	bf00      	nop
 8001a5c:	e00a      	b.n	8001a74 <DMA_CheckFifoParam+0xe8>
      break;
 8001a5e:	bf00      	nop
 8001a60:	e008      	b.n	8001a74 <DMA_CheckFifoParam+0xe8>
      break;
 8001a62:	bf00      	nop
 8001a64:	e006      	b.n	8001a74 <DMA_CheckFifoParam+0xe8>
      break;
 8001a66:	bf00      	nop
 8001a68:	e004      	b.n	8001a74 <DMA_CheckFifoParam+0xe8>
      break;
 8001a6a:	bf00      	nop
 8001a6c:	e002      	b.n	8001a74 <DMA_CheckFifoParam+0xe8>
      break;   
 8001a6e:	bf00      	nop
 8001a70:	e000      	b.n	8001a74 <DMA_CheckFifoParam+0xe8>
      break;
 8001a72:	bf00      	nop
    }
  } 
  
  return status; 
 8001a74:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a76:	4618      	mov	r0, r3
 8001a78:	3714      	adds	r7, #20
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a80:	4770      	bx	lr
 8001a82:	bf00      	nop

08001a84 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a84:	b480      	push	{r7}
 8001a86:	b089      	sub	sp, #36	; 0x24
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
 8001a8c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001a92:	2300      	movs	r3, #0
 8001a94:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001a96:	2300      	movs	r3, #0
 8001a98:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	61fb      	str	r3, [r7, #28]
 8001a9e:	e159      	b.n	8001d54 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001aa0:	2201      	movs	r2, #1
 8001aa2:	69fb      	ldr	r3, [r7, #28]
 8001aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	697a      	ldr	r2, [r7, #20]
 8001ab0:	4013      	ands	r3, r2
 8001ab2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001ab4:	693a      	ldr	r2, [r7, #16]
 8001ab6:	697b      	ldr	r3, [r7, #20]
 8001ab8:	429a      	cmp	r2, r3
 8001aba:	f040 8148 	bne.w	8001d4e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001abe:	683b      	ldr	r3, [r7, #0]
 8001ac0:	685b      	ldr	r3, [r3, #4]
 8001ac2:	f003 0303 	and.w	r3, r3, #3
 8001ac6:	2b01      	cmp	r3, #1
 8001ac8:	d005      	beq.n	8001ad6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	685b      	ldr	r3, [r3, #4]
 8001ace:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ad2:	2b02      	cmp	r3, #2
 8001ad4:	d130      	bne.n	8001b38 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	689b      	ldr	r3, [r3, #8]
 8001ada:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001adc:	69fb      	ldr	r3, [r7, #28]
 8001ade:	005b      	lsls	r3, r3, #1
 8001ae0:	2203      	movs	r2, #3
 8001ae2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae6:	43db      	mvns	r3, r3
 8001ae8:	69ba      	ldr	r2, [r7, #24]
 8001aea:	4013      	ands	r3, r2
 8001aec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001aee:	683b      	ldr	r3, [r7, #0]
 8001af0:	68da      	ldr	r2, [r3, #12]
 8001af2:	69fb      	ldr	r3, [r7, #28]
 8001af4:	005b      	lsls	r3, r3, #1
 8001af6:	fa02 f303 	lsl.w	r3, r2, r3
 8001afa:	69ba      	ldr	r2, [r7, #24]
 8001afc:	4313      	orrs	r3, r2
 8001afe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	69ba      	ldr	r2, [r7, #24]
 8001b04:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	685b      	ldr	r3, [r3, #4]
 8001b0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b0c:	2201      	movs	r2, #1
 8001b0e:	69fb      	ldr	r3, [r7, #28]
 8001b10:	fa02 f303 	lsl.w	r3, r2, r3
 8001b14:	43db      	mvns	r3, r3
 8001b16:	69ba      	ldr	r2, [r7, #24]
 8001b18:	4013      	ands	r3, r2
 8001b1a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	091b      	lsrs	r3, r3, #4
 8001b22:	f003 0201 	and.w	r2, r3, #1
 8001b26:	69fb      	ldr	r3, [r7, #28]
 8001b28:	fa02 f303 	lsl.w	r3, r2, r3
 8001b2c:	69ba      	ldr	r2, [r7, #24]
 8001b2e:	4313      	orrs	r3, r2
 8001b30:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	69ba      	ldr	r2, [r7, #24]
 8001b36:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	685b      	ldr	r3, [r3, #4]
 8001b3c:	f003 0303 	and.w	r3, r3, #3
 8001b40:	2b03      	cmp	r3, #3
 8001b42:	d017      	beq.n	8001b74 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	68db      	ldr	r3, [r3, #12]
 8001b48:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001b4a:	69fb      	ldr	r3, [r7, #28]
 8001b4c:	005b      	lsls	r3, r3, #1
 8001b4e:	2203      	movs	r2, #3
 8001b50:	fa02 f303 	lsl.w	r3, r2, r3
 8001b54:	43db      	mvns	r3, r3
 8001b56:	69ba      	ldr	r2, [r7, #24]
 8001b58:	4013      	ands	r3, r2
 8001b5a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	689a      	ldr	r2, [r3, #8]
 8001b60:	69fb      	ldr	r3, [r7, #28]
 8001b62:	005b      	lsls	r3, r3, #1
 8001b64:	fa02 f303 	lsl.w	r3, r2, r3
 8001b68:	69ba      	ldr	r2, [r7, #24]
 8001b6a:	4313      	orrs	r3, r2
 8001b6c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	69ba      	ldr	r2, [r7, #24]
 8001b72:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	685b      	ldr	r3, [r3, #4]
 8001b78:	f003 0303 	and.w	r3, r3, #3
 8001b7c:	2b02      	cmp	r3, #2
 8001b7e:	d123      	bne.n	8001bc8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001b80:	69fb      	ldr	r3, [r7, #28]
 8001b82:	08da      	lsrs	r2, r3, #3
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	3208      	adds	r2, #8
 8001b88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b8c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001b8e:	69fb      	ldr	r3, [r7, #28]
 8001b90:	f003 0307 	and.w	r3, r3, #7
 8001b94:	009b      	lsls	r3, r3, #2
 8001b96:	220f      	movs	r2, #15
 8001b98:	fa02 f303 	lsl.w	r3, r2, r3
 8001b9c:	43db      	mvns	r3, r3
 8001b9e:	69ba      	ldr	r2, [r7, #24]
 8001ba0:	4013      	ands	r3, r2
 8001ba2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	691a      	ldr	r2, [r3, #16]
 8001ba8:	69fb      	ldr	r3, [r7, #28]
 8001baa:	f003 0307 	and.w	r3, r3, #7
 8001bae:	009b      	lsls	r3, r3, #2
 8001bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb4:	69ba      	ldr	r2, [r7, #24]
 8001bb6:	4313      	orrs	r3, r2
 8001bb8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001bba:	69fb      	ldr	r3, [r7, #28]
 8001bbc:	08da      	lsrs	r2, r3, #3
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	3208      	adds	r2, #8
 8001bc2:	69b9      	ldr	r1, [r7, #24]
 8001bc4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001bce:	69fb      	ldr	r3, [r7, #28]
 8001bd0:	005b      	lsls	r3, r3, #1
 8001bd2:	2203      	movs	r2, #3
 8001bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd8:	43db      	mvns	r3, r3
 8001bda:	69ba      	ldr	r2, [r7, #24]
 8001bdc:	4013      	ands	r3, r2
 8001bde:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	685b      	ldr	r3, [r3, #4]
 8001be4:	f003 0203 	and.w	r2, r3, #3
 8001be8:	69fb      	ldr	r3, [r7, #28]
 8001bea:	005b      	lsls	r3, r3, #1
 8001bec:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf0:	69ba      	ldr	r2, [r7, #24]
 8001bf2:	4313      	orrs	r3, r2
 8001bf4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	69ba      	ldr	r2, [r7, #24]
 8001bfa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	685b      	ldr	r3, [r3, #4]
 8001c00:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	f000 80a2 	beq.w	8001d4e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	60fb      	str	r3, [r7, #12]
 8001c0e:	4b57      	ldr	r3, [pc, #348]	; (8001d6c <HAL_GPIO_Init+0x2e8>)
 8001c10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c12:	4a56      	ldr	r2, [pc, #344]	; (8001d6c <HAL_GPIO_Init+0x2e8>)
 8001c14:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c18:	6453      	str	r3, [r2, #68]	; 0x44
 8001c1a:	4b54      	ldr	r3, [pc, #336]	; (8001d6c <HAL_GPIO_Init+0x2e8>)
 8001c1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c22:	60fb      	str	r3, [r7, #12]
 8001c24:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001c26:	4a52      	ldr	r2, [pc, #328]	; (8001d70 <HAL_GPIO_Init+0x2ec>)
 8001c28:	69fb      	ldr	r3, [r7, #28]
 8001c2a:	089b      	lsrs	r3, r3, #2
 8001c2c:	3302      	adds	r3, #2
 8001c2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c32:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001c34:	69fb      	ldr	r3, [r7, #28]
 8001c36:	f003 0303 	and.w	r3, r3, #3
 8001c3a:	009b      	lsls	r3, r3, #2
 8001c3c:	220f      	movs	r2, #15
 8001c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c42:	43db      	mvns	r3, r3
 8001c44:	69ba      	ldr	r2, [r7, #24]
 8001c46:	4013      	ands	r3, r2
 8001c48:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	4a49      	ldr	r2, [pc, #292]	; (8001d74 <HAL_GPIO_Init+0x2f0>)
 8001c4e:	4293      	cmp	r3, r2
 8001c50:	d019      	beq.n	8001c86 <HAL_GPIO_Init+0x202>
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	4a48      	ldr	r2, [pc, #288]	; (8001d78 <HAL_GPIO_Init+0x2f4>)
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d013      	beq.n	8001c82 <HAL_GPIO_Init+0x1fe>
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	4a47      	ldr	r2, [pc, #284]	; (8001d7c <HAL_GPIO_Init+0x2f8>)
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d00d      	beq.n	8001c7e <HAL_GPIO_Init+0x1fa>
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	4a46      	ldr	r2, [pc, #280]	; (8001d80 <HAL_GPIO_Init+0x2fc>)
 8001c66:	4293      	cmp	r3, r2
 8001c68:	d007      	beq.n	8001c7a <HAL_GPIO_Init+0x1f6>
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	4a45      	ldr	r2, [pc, #276]	; (8001d84 <HAL_GPIO_Init+0x300>)
 8001c6e:	4293      	cmp	r3, r2
 8001c70:	d101      	bne.n	8001c76 <HAL_GPIO_Init+0x1f2>
 8001c72:	2304      	movs	r3, #4
 8001c74:	e008      	b.n	8001c88 <HAL_GPIO_Init+0x204>
 8001c76:	2307      	movs	r3, #7
 8001c78:	e006      	b.n	8001c88 <HAL_GPIO_Init+0x204>
 8001c7a:	2303      	movs	r3, #3
 8001c7c:	e004      	b.n	8001c88 <HAL_GPIO_Init+0x204>
 8001c7e:	2302      	movs	r3, #2
 8001c80:	e002      	b.n	8001c88 <HAL_GPIO_Init+0x204>
 8001c82:	2301      	movs	r3, #1
 8001c84:	e000      	b.n	8001c88 <HAL_GPIO_Init+0x204>
 8001c86:	2300      	movs	r3, #0
 8001c88:	69fa      	ldr	r2, [r7, #28]
 8001c8a:	f002 0203 	and.w	r2, r2, #3
 8001c8e:	0092      	lsls	r2, r2, #2
 8001c90:	4093      	lsls	r3, r2
 8001c92:	69ba      	ldr	r2, [r7, #24]
 8001c94:	4313      	orrs	r3, r2
 8001c96:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001c98:	4935      	ldr	r1, [pc, #212]	; (8001d70 <HAL_GPIO_Init+0x2ec>)
 8001c9a:	69fb      	ldr	r3, [r7, #28]
 8001c9c:	089b      	lsrs	r3, r3, #2
 8001c9e:	3302      	adds	r3, #2
 8001ca0:	69ba      	ldr	r2, [r7, #24]
 8001ca2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001ca6:	4b38      	ldr	r3, [pc, #224]	; (8001d88 <HAL_GPIO_Init+0x304>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cac:	693b      	ldr	r3, [r7, #16]
 8001cae:	43db      	mvns	r3, r3
 8001cb0:	69ba      	ldr	r2, [r7, #24]
 8001cb2:	4013      	ands	r3, r2
 8001cb4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	685b      	ldr	r3, [r3, #4]
 8001cba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d003      	beq.n	8001cca <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001cc2:	69ba      	ldr	r2, [r7, #24]
 8001cc4:	693b      	ldr	r3, [r7, #16]
 8001cc6:	4313      	orrs	r3, r2
 8001cc8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001cca:	4a2f      	ldr	r2, [pc, #188]	; (8001d88 <HAL_GPIO_Init+0x304>)
 8001ccc:	69bb      	ldr	r3, [r7, #24]
 8001cce:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001cd0:	4b2d      	ldr	r3, [pc, #180]	; (8001d88 <HAL_GPIO_Init+0x304>)
 8001cd2:	685b      	ldr	r3, [r3, #4]
 8001cd4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cd6:	693b      	ldr	r3, [r7, #16]
 8001cd8:	43db      	mvns	r3, r3
 8001cda:	69ba      	ldr	r2, [r7, #24]
 8001cdc:	4013      	ands	r3, r2
 8001cde:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	685b      	ldr	r3, [r3, #4]
 8001ce4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d003      	beq.n	8001cf4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001cec:	69ba      	ldr	r2, [r7, #24]
 8001cee:	693b      	ldr	r3, [r7, #16]
 8001cf0:	4313      	orrs	r3, r2
 8001cf2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001cf4:	4a24      	ldr	r2, [pc, #144]	; (8001d88 <HAL_GPIO_Init+0x304>)
 8001cf6:	69bb      	ldr	r3, [r7, #24]
 8001cf8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001cfa:	4b23      	ldr	r3, [pc, #140]	; (8001d88 <HAL_GPIO_Init+0x304>)
 8001cfc:	689b      	ldr	r3, [r3, #8]
 8001cfe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d00:	693b      	ldr	r3, [r7, #16]
 8001d02:	43db      	mvns	r3, r3
 8001d04:	69ba      	ldr	r2, [r7, #24]
 8001d06:	4013      	ands	r3, r2
 8001d08:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	685b      	ldr	r3, [r3, #4]
 8001d0e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d003      	beq.n	8001d1e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001d16:	69ba      	ldr	r2, [r7, #24]
 8001d18:	693b      	ldr	r3, [r7, #16]
 8001d1a:	4313      	orrs	r3, r2
 8001d1c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001d1e:	4a1a      	ldr	r2, [pc, #104]	; (8001d88 <HAL_GPIO_Init+0x304>)
 8001d20:	69bb      	ldr	r3, [r7, #24]
 8001d22:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001d24:	4b18      	ldr	r3, [pc, #96]	; (8001d88 <HAL_GPIO_Init+0x304>)
 8001d26:	68db      	ldr	r3, [r3, #12]
 8001d28:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d2a:	693b      	ldr	r3, [r7, #16]
 8001d2c:	43db      	mvns	r3, r3
 8001d2e:	69ba      	ldr	r2, [r7, #24]
 8001d30:	4013      	ands	r3, r2
 8001d32:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	685b      	ldr	r3, [r3, #4]
 8001d38:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d003      	beq.n	8001d48 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001d40:	69ba      	ldr	r2, [r7, #24]
 8001d42:	693b      	ldr	r3, [r7, #16]
 8001d44:	4313      	orrs	r3, r2
 8001d46:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001d48:	4a0f      	ldr	r2, [pc, #60]	; (8001d88 <HAL_GPIO_Init+0x304>)
 8001d4a:	69bb      	ldr	r3, [r7, #24]
 8001d4c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d4e:	69fb      	ldr	r3, [r7, #28]
 8001d50:	3301      	adds	r3, #1
 8001d52:	61fb      	str	r3, [r7, #28]
 8001d54:	69fb      	ldr	r3, [r7, #28]
 8001d56:	2b0f      	cmp	r3, #15
 8001d58:	f67f aea2 	bls.w	8001aa0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001d5c:	bf00      	nop
 8001d5e:	bf00      	nop
 8001d60:	3724      	adds	r7, #36	; 0x24
 8001d62:	46bd      	mov	sp, r7
 8001d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d68:	4770      	bx	lr
 8001d6a:	bf00      	nop
 8001d6c:	40023800 	.word	0x40023800
 8001d70:	40013800 	.word	0x40013800
 8001d74:	40020000 	.word	0x40020000
 8001d78:	40020400 	.word	0x40020400
 8001d7c:	40020800 	.word	0x40020800
 8001d80:	40020c00 	.word	0x40020c00
 8001d84:	40021000 	.word	0x40021000
 8001d88:	40013c00 	.word	0x40013c00

08001d8c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	b087      	sub	sp, #28
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
 8001d94:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001d96:	2300      	movs	r3, #0
 8001d98:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8001d9e:	2300      	movs	r3, #0
 8001da0:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001da2:	2300      	movs	r3, #0
 8001da4:	617b      	str	r3, [r7, #20]
 8001da6:	e0bb      	b.n	8001f20 <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001da8:	2201      	movs	r2, #1
 8001daa:	697b      	ldr	r3, [r7, #20]
 8001dac:	fa02 f303 	lsl.w	r3, r2, r3
 8001db0:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8001db2:	683a      	ldr	r2, [r7, #0]
 8001db4:	693b      	ldr	r3, [r7, #16]
 8001db6:	4013      	ands	r3, r2
 8001db8:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8001dba:	68fa      	ldr	r2, [r7, #12]
 8001dbc:	693b      	ldr	r3, [r7, #16]
 8001dbe:	429a      	cmp	r2, r3
 8001dc0:	f040 80ab 	bne.w	8001f1a <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8001dc4:	4a5c      	ldr	r2, [pc, #368]	; (8001f38 <HAL_GPIO_DeInit+0x1ac>)
 8001dc6:	697b      	ldr	r3, [r7, #20]
 8001dc8:	089b      	lsrs	r3, r3, #2
 8001dca:	3302      	adds	r3, #2
 8001dcc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dd0:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8001dd2:	697b      	ldr	r3, [r7, #20]
 8001dd4:	f003 0303 	and.w	r3, r3, #3
 8001dd8:	009b      	lsls	r3, r3, #2
 8001dda:	220f      	movs	r2, #15
 8001ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8001de0:	68ba      	ldr	r2, [r7, #8]
 8001de2:	4013      	ands	r3, r2
 8001de4:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	4a54      	ldr	r2, [pc, #336]	; (8001f3c <HAL_GPIO_DeInit+0x1b0>)
 8001dea:	4293      	cmp	r3, r2
 8001dec:	d019      	beq.n	8001e22 <HAL_GPIO_DeInit+0x96>
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	4a53      	ldr	r2, [pc, #332]	; (8001f40 <HAL_GPIO_DeInit+0x1b4>)
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d013      	beq.n	8001e1e <HAL_GPIO_DeInit+0x92>
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	4a52      	ldr	r2, [pc, #328]	; (8001f44 <HAL_GPIO_DeInit+0x1b8>)
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d00d      	beq.n	8001e1a <HAL_GPIO_DeInit+0x8e>
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	4a51      	ldr	r2, [pc, #324]	; (8001f48 <HAL_GPIO_DeInit+0x1bc>)
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d007      	beq.n	8001e16 <HAL_GPIO_DeInit+0x8a>
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	4a50      	ldr	r2, [pc, #320]	; (8001f4c <HAL_GPIO_DeInit+0x1c0>)
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d101      	bne.n	8001e12 <HAL_GPIO_DeInit+0x86>
 8001e0e:	2304      	movs	r3, #4
 8001e10:	e008      	b.n	8001e24 <HAL_GPIO_DeInit+0x98>
 8001e12:	2307      	movs	r3, #7
 8001e14:	e006      	b.n	8001e24 <HAL_GPIO_DeInit+0x98>
 8001e16:	2303      	movs	r3, #3
 8001e18:	e004      	b.n	8001e24 <HAL_GPIO_DeInit+0x98>
 8001e1a:	2302      	movs	r3, #2
 8001e1c:	e002      	b.n	8001e24 <HAL_GPIO_DeInit+0x98>
 8001e1e:	2301      	movs	r3, #1
 8001e20:	e000      	b.n	8001e24 <HAL_GPIO_DeInit+0x98>
 8001e22:	2300      	movs	r3, #0
 8001e24:	697a      	ldr	r2, [r7, #20]
 8001e26:	f002 0203 	and.w	r2, r2, #3
 8001e2a:	0092      	lsls	r2, r2, #2
 8001e2c:	4093      	lsls	r3, r2
 8001e2e:	68ba      	ldr	r2, [r7, #8]
 8001e30:	429a      	cmp	r2, r3
 8001e32:	d132      	bne.n	8001e9a <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8001e34:	4b46      	ldr	r3, [pc, #280]	; (8001f50 <HAL_GPIO_DeInit+0x1c4>)
 8001e36:	681a      	ldr	r2, [r3, #0]
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	43db      	mvns	r3, r3
 8001e3c:	4944      	ldr	r1, [pc, #272]	; (8001f50 <HAL_GPIO_DeInit+0x1c4>)
 8001e3e:	4013      	ands	r3, r2
 8001e40:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8001e42:	4b43      	ldr	r3, [pc, #268]	; (8001f50 <HAL_GPIO_DeInit+0x1c4>)
 8001e44:	685a      	ldr	r2, [r3, #4]
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	43db      	mvns	r3, r3
 8001e4a:	4941      	ldr	r1, [pc, #260]	; (8001f50 <HAL_GPIO_DeInit+0x1c4>)
 8001e4c:	4013      	ands	r3, r2
 8001e4e:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8001e50:	4b3f      	ldr	r3, [pc, #252]	; (8001f50 <HAL_GPIO_DeInit+0x1c4>)
 8001e52:	689a      	ldr	r2, [r3, #8]
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	43db      	mvns	r3, r3
 8001e58:	493d      	ldr	r1, [pc, #244]	; (8001f50 <HAL_GPIO_DeInit+0x1c4>)
 8001e5a:	4013      	ands	r3, r2
 8001e5c:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8001e5e:	4b3c      	ldr	r3, [pc, #240]	; (8001f50 <HAL_GPIO_DeInit+0x1c4>)
 8001e60:	68da      	ldr	r2, [r3, #12]
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	43db      	mvns	r3, r3
 8001e66:	493a      	ldr	r1, [pc, #232]	; (8001f50 <HAL_GPIO_DeInit+0x1c4>)
 8001e68:	4013      	ands	r3, r2
 8001e6a:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8001e6c:	697b      	ldr	r3, [r7, #20]
 8001e6e:	f003 0303 	and.w	r3, r3, #3
 8001e72:	009b      	lsls	r3, r3, #2
 8001e74:	220f      	movs	r2, #15
 8001e76:	fa02 f303 	lsl.w	r3, r2, r3
 8001e7a:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8001e7c:	4a2e      	ldr	r2, [pc, #184]	; (8001f38 <HAL_GPIO_DeInit+0x1ac>)
 8001e7e:	697b      	ldr	r3, [r7, #20]
 8001e80:	089b      	lsrs	r3, r3, #2
 8001e82:	3302      	adds	r3, #2
 8001e84:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001e88:	68bb      	ldr	r3, [r7, #8]
 8001e8a:	43da      	mvns	r2, r3
 8001e8c:	482a      	ldr	r0, [pc, #168]	; (8001f38 <HAL_GPIO_DeInit+0x1ac>)
 8001e8e:	697b      	ldr	r3, [r7, #20]
 8001e90:	089b      	lsrs	r3, r3, #2
 8001e92:	400a      	ands	r2, r1
 8001e94:	3302      	adds	r3, #2
 8001e96:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681a      	ldr	r2, [r3, #0]
 8001e9e:	697b      	ldr	r3, [r7, #20]
 8001ea0:	005b      	lsls	r3, r3, #1
 8001ea2:	2103      	movs	r1, #3
 8001ea4:	fa01 f303 	lsl.w	r3, r1, r3
 8001ea8:	43db      	mvns	r3, r3
 8001eaa:	401a      	ands	r2, r3
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001eb0:	697b      	ldr	r3, [r7, #20]
 8001eb2:	08da      	lsrs	r2, r3, #3
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	3208      	adds	r2, #8
 8001eb8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001ebc:	697b      	ldr	r3, [r7, #20]
 8001ebe:	f003 0307 	and.w	r3, r3, #7
 8001ec2:	009b      	lsls	r3, r3, #2
 8001ec4:	220f      	movs	r2, #15
 8001ec6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eca:	43db      	mvns	r3, r3
 8001ecc:	697a      	ldr	r2, [r7, #20]
 8001ece:	08d2      	lsrs	r2, r2, #3
 8001ed0:	4019      	ands	r1, r3
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	3208      	adds	r2, #8
 8001ed6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	68da      	ldr	r2, [r3, #12]
 8001ede:	697b      	ldr	r3, [r7, #20]
 8001ee0:	005b      	lsls	r3, r3, #1
 8001ee2:	2103      	movs	r1, #3
 8001ee4:	fa01 f303 	lsl.w	r3, r1, r3
 8001ee8:	43db      	mvns	r3, r3
 8001eea:	401a      	ands	r2, r3
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	685a      	ldr	r2, [r3, #4]
 8001ef4:	2101      	movs	r1, #1
 8001ef6:	697b      	ldr	r3, [r7, #20]
 8001ef8:	fa01 f303 	lsl.w	r3, r1, r3
 8001efc:	43db      	mvns	r3, r3
 8001efe:	401a      	ands	r2, r3
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	689a      	ldr	r2, [r3, #8]
 8001f08:	697b      	ldr	r3, [r7, #20]
 8001f0a:	005b      	lsls	r3, r3, #1
 8001f0c:	2103      	movs	r1, #3
 8001f0e:	fa01 f303 	lsl.w	r3, r1, r3
 8001f12:	43db      	mvns	r3, r3
 8001f14:	401a      	ands	r2, r3
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f1a:	697b      	ldr	r3, [r7, #20]
 8001f1c:	3301      	adds	r3, #1
 8001f1e:	617b      	str	r3, [r7, #20]
 8001f20:	697b      	ldr	r3, [r7, #20]
 8001f22:	2b0f      	cmp	r3, #15
 8001f24:	f67f af40 	bls.w	8001da8 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8001f28:	bf00      	nop
 8001f2a:	bf00      	nop
 8001f2c:	371c      	adds	r7, #28
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f34:	4770      	bx	lr
 8001f36:	bf00      	nop
 8001f38:	40013800 	.word	0x40013800
 8001f3c:	40020000 	.word	0x40020000
 8001f40:	40020400 	.word	0x40020400
 8001f44:	40020800 	.word	0x40020800
 8001f48:	40020c00 	.word	0x40020c00
 8001f4c:	40021000 	.word	0x40021000
 8001f50:	40013c00 	.word	0x40013c00

08001f54 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f54:	b480      	push	{r7}
 8001f56:	b083      	sub	sp, #12
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
 8001f5c:	460b      	mov	r3, r1
 8001f5e:	807b      	strh	r3, [r7, #2]
 8001f60:	4613      	mov	r3, r2
 8001f62:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f64:	787b      	ldrb	r3, [r7, #1]
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d003      	beq.n	8001f72 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f6a:	887a      	ldrh	r2, [r7, #2]
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001f70:	e003      	b.n	8001f7a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001f72:	887b      	ldrh	r3, [r7, #2]
 8001f74:	041a      	lsls	r2, r3, #16
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	619a      	str	r2, [r3, #24]
}
 8001f7a:	bf00      	nop
 8001f7c:	370c      	adds	r7, #12
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f84:	4770      	bx	lr

08001f86 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001f86:	b480      	push	{r7}
 8001f88:	b085      	sub	sp, #20
 8001f8a:	af00      	add	r7, sp, #0
 8001f8c:	6078      	str	r0, [r7, #4]
 8001f8e:	460b      	mov	r3, r1
 8001f90:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	695b      	ldr	r3, [r3, #20]
 8001f96:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001f98:	887a      	ldrh	r2, [r7, #2]
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	4013      	ands	r3, r2
 8001f9e:	041a      	lsls	r2, r3, #16
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	43d9      	mvns	r1, r3
 8001fa4:	887b      	ldrh	r3, [r7, #2]
 8001fa6:	400b      	ands	r3, r1
 8001fa8:	431a      	orrs	r2, r3
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	619a      	str	r2, [r3, #24]
}
 8001fae:	bf00      	nop
 8001fb0:	3714      	adds	r7, #20
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb8:	4770      	bx	lr

08001fba <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001fba:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001fbc:	b08f      	sub	sp, #60	; 0x3c
 8001fbe:	af0a      	add	r7, sp, #40	; 0x28
 8001fc0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d101      	bne.n	8001fcc <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001fc8:	2301      	movs	r3, #1
 8001fca:	e10f      	b.n	80021ec <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8001fd8:	b2db      	uxtb	r3, r3
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d106      	bne.n	8001fec <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001fe6:	6878      	ldr	r0, [r7, #4]
 8001fe8:	f006 fb92 	bl	8008710 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	2203      	movs	r2, #3
 8001ff0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001ff4:	68bb      	ldr	r3, [r7, #8]
 8001ff6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ff8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d102      	bne.n	8002006 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	2200      	movs	r2, #0
 8002004:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	4618      	mov	r0, r3
 800200c:	f003 f9ef 	bl	80053ee <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	603b      	str	r3, [r7, #0]
 8002016:	687e      	ldr	r6, [r7, #4]
 8002018:	466d      	mov	r5, sp
 800201a:	f106 0410 	add.w	r4, r6, #16
 800201e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002020:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002022:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002024:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002026:	e894 0003 	ldmia.w	r4, {r0, r1}
 800202a:	e885 0003 	stmia.w	r5, {r0, r1}
 800202e:	1d33      	adds	r3, r6, #4
 8002030:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002032:	6838      	ldr	r0, [r7, #0]
 8002034:	f003 f8c6 	bl	80051c4 <USB_CoreInit>
 8002038:	4603      	mov	r3, r0
 800203a:	2b00      	cmp	r3, #0
 800203c:	d005      	beq.n	800204a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	2202      	movs	r2, #2
 8002042:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002046:	2301      	movs	r3, #1
 8002048:	e0d0      	b.n	80021ec <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	2100      	movs	r1, #0
 8002050:	4618      	mov	r0, r3
 8002052:	f003 f9dd 	bl	8005410 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002056:	2300      	movs	r3, #0
 8002058:	73fb      	strb	r3, [r7, #15]
 800205a:	e04a      	b.n	80020f2 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800205c:	7bfa      	ldrb	r2, [r7, #15]
 800205e:	6879      	ldr	r1, [r7, #4]
 8002060:	4613      	mov	r3, r2
 8002062:	00db      	lsls	r3, r3, #3
 8002064:	1a9b      	subs	r3, r3, r2
 8002066:	009b      	lsls	r3, r3, #2
 8002068:	440b      	add	r3, r1
 800206a:	333d      	adds	r3, #61	; 0x3d
 800206c:	2201      	movs	r2, #1
 800206e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002070:	7bfa      	ldrb	r2, [r7, #15]
 8002072:	6879      	ldr	r1, [r7, #4]
 8002074:	4613      	mov	r3, r2
 8002076:	00db      	lsls	r3, r3, #3
 8002078:	1a9b      	subs	r3, r3, r2
 800207a:	009b      	lsls	r3, r3, #2
 800207c:	440b      	add	r3, r1
 800207e:	333c      	adds	r3, #60	; 0x3c
 8002080:	7bfa      	ldrb	r2, [r7, #15]
 8002082:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002084:	7bfa      	ldrb	r2, [r7, #15]
 8002086:	7bfb      	ldrb	r3, [r7, #15]
 8002088:	b298      	uxth	r0, r3
 800208a:	6879      	ldr	r1, [r7, #4]
 800208c:	4613      	mov	r3, r2
 800208e:	00db      	lsls	r3, r3, #3
 8002090:	1a9b      	subs	r3, r3, r2
 8002092:	009b      	lsls	r3, r3, #2
 8002094:	440b      	add	r3, r1
 8002096:	3342      	adds	r3, #66	; 0x42
 8002098:	4602      	mov	r2, r0
 800209a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800209c:	7bfa      	ldrb	r2, [r7, #15]
 800209e:	6879      	ldr	r1, [r7, #4]
 80020a0:	4613      	mov	r3, r2
 80020a2:	00db      	lsls	r3, r3, #3
 80020a4:	1a9b      	subs	r3, r3, r2
 80020a6:	009b      	lsls	r3, r3, #2
 80020a8:	440b      	add	r3, r1
 80020aa:	333f      	adds	r3, #63	; 0x3f
 80020ac:	2200      	movs	r2, #0
 80020ae:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80020b0:	7bfa      	ldrb	r2, [r7, #15]
 80020b2:	6879      	ldr	r1, [r7, #4]
 80020b4:	4613      	mov	r3, r2
 80020b6:	00db      	lsls	r3, r3, #3
 80020b8:	1a9b      	subs	r3, r3, r2
 80020ba:	009b      	lsls	r3, r3, #2
 80020bc:	440b      	add	r3, r1
 80020be:	3344      	adds	r3, #68	; 0x44
 80020c0:	2200      	movs	r2, #0
 80020c2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80020c4:	7bfa      	ldrb	r2, [r7, #15]
 80020c6:	6879      	ldr	r1, [r7, #4]
 80020c8:	4613      	mov	r3, r2
 80020ca:	00db      	lsls	r3, r3, #3
 80020cc:	1a9b      	subs	r3, r3, r2
 80020ce:	009b      	lsls	r3, r3, #2
 80020d0:	440b      	add	r3, r1
 80020d2:	3348      	adds	r3, #72	; 0x48
 80020d4:	2200      	movs	r2, #0
 80020d6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80020d8:	7bfa      	ldrb	r2, [r7, #15]
 80020da:	6879      	ldr	r1, [r7, #4]
 80020dc:	4613      	mov	r3, r2
 80020de:	00db      	lsls	r3, r3, #3
 80020e0:	1a9b      	subs	r3, r3, r2
 80020e2:	009b      	lsls	r3, r3, #2
 80020e4:	440b      	add	r3, r1
 80020e6:	3350      	adds	r3, #80	; 0x50
 80020e8:	2200      	movs	r2, #0
 80020ea:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80020ec:	7bfb      	ldrb	r3, [r7, #15]
 80020ee:	3301      	adds	r3, #1
 80020f0:	73fb      	strb	r3, [r7, #15]
 80020f2:	7bfa      	ldrb	r2, [r7, #15]
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	685b      	ldr	r3, [r3, #4]
 80020f8:	429a      	cmp	r2, r3
 80020fa:	d3af      	bcc.n	800205c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80020fc:	2300      	movs	r3, #0
 80020fe:	73fb      	strb	r3, [r7, #15]
 8002100:	e044      	b.n	800218c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002102:	7bfa      	ldrb	r2, [r7, #15]
 8002104:	6879      	ldr	r1, [r7, #4]
 8002106:	4613      	mov	r3, r2
 8002108:	00db      	lsls	r3, r3, #3
 800210a:	1a9b      	subs	r3, r3, r2
 800210c:	009b      	lsls	r3, r3, #2
 800210e:	440b      	add	r3, r1
 8002110:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8002114:	2200      	movs	r2, #0
 8002116:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002118:	7bfa      	ldrb	r2, [r7, #15]
 800211a:	6879      	ldr	r1, [r7, #4]
 800211c:	4613      	mov	r3, r2
 800211e:	00db      	lsls	r3, r3, #3
 8002120:	1a9b      	subs	r3, r3, r2
 8002122:	009b      	lsls	r3, r3, #2
 8002124:	440b      	add	r3, r1
 8002126:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800212a:	7bfa      	ldrb	r2, [r7, #15]
 800212c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800212e:	7bfa      	ldrb	r2, [r7, #15]
 8002130:	6879      	ldr	r1, [r7, #4]
 8002132:	4613      	mov	r3, r2
 8002134:	00db      	lsls	r3, r3, #3
 8002136:	1a9b      	subs	r3, r3, r2
 8002138:	009b      	lsls	r3, r3, #2
 800213a:	440b      	add	r3, r1
 800213c:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002140:	2200      	movs	r2, #0
 8002142:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002144:	7bfa      	ldrb	r2, [r7, #15]
 8002146:	6879      	ldr	r1, [r7, #4]
 8002148:	4613      	mov	r3, r2
 800214a:	00db      	lsls	r3, r3, #3
 800214c:	1a9b      	subs	r3, r3, r2
 800214e:	009b      	lsls	r3, r3, #2
 8002150:	440b      	add	r3, r1
 8002152:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002156:	2200      	movs	r2, #0
 8002158:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800215a:	7bfa      	ldrb	r2, [r7, #15]
 800215c:	6879      	ldr	r1, [r7, #4]
 800215e:	4613      	mov	r3, r2
 8002160:	00db      	lsls	r3, r3, #3
 8002162:	1a9b      	subs	r3, r3, r2
 8002164:	009b      	lsls	r3, r3, #2
 8002166:	440b      	add	r3, r1
 8002168:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800216c:	2200      	movs	r2, #0
 800216e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002170:	7bfa      	ldrb	r2, [r7, #15]
 8002172:	6879      	ldr	r1, [r7, #4]
 8002174:	4613      	mov	r3, r2
 8002176:	00db      	lsls	r3, r3, #3
 8002178:	1a9b      	subs	r3, r3, r2
 800217a:	009b      	lsls	r3, r3, #2
 800217c:	440b      	add	r3, r1
 800217e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002182:	2200      	movs	r2, #0
 8002184:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002186:	7bfb      	ldrb	r3, [r7, #15]
 8002188:	3301      	adds	r3, #1
 800218a:	73fb      	strb	r3, [r7, #15]
 800218c:	7bfa      	ldrb	r2, [r7, #15]
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	685b      	ldr	r3, [r3, #4]
 8002192:	429a      	cmp	r2, r3
 8002194:	d3b5      	bcc.n	8002102 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	603b      	str	r3, [r7, #0]
 800219c:	687e      	ldr	r6, [r7, #4]
 800219e:	466d      	mov	r5, sp
 80021a0:	f106 0410 	add.w	r4, r6, #16
 80021a4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80021a6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80021a8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80021aa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80021ac:	e894 0003 	ldmia.w	r4, {r0, r1}
 80021b0:	e885 0003 	stmia.w	r5, {r0, r1}
 80021b4:	1d33      	adds	r3, r6, #4
 80021b6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80021b8:	6838      	ldr	r0, [r7, #0]
 80021ba:	f003 f975 	bl	80054a8 <USB_DevInit>
 80021be:	4603      	mov	r3, r0
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d005      	beq.n	80021d0 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2202      	movs	r2, #2
 80021c8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80021cc:	2301      	movs	r3, #1
 80021ce:	e00d      	b.n	80021ec <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2200      	movs	r2, #0
 80021d4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	2201      	movs	r2, #1
 80021dc:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	4618      	mov	r0, r3
 80021e6:	f004 f9f1 	bl	80065cc <USB_DevDisconnect>

  return HAL_OK;
 80021ea:	2300      	movs	r3, #0
}
 80021ec:	4618      	mov	r0, r3
 80021ee:	3714      	adds	r7, #20
 80021f0:	46bd      	mov	sp, r7
 80021f2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080021f4 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b084      	sub	sp, #16
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002208:	2b01      	cmp	r3, #1
 800220a:	d101      	bne.n	8002210 <HAL_PCD_Start+0x1c>
 800220c:	2302      	movs	r3, #2
 800220e:	e020      	b.n	8002252 <HAL_PCD_Start+0x5e>
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2201      	movs	r2, #1
 8002214:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800221c:	2b01      	cmp	r3, #1
 800221e:	d109      	bne.n	8002234 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002224:	2b01      	cmp	r3, #1
 8002226:	d005      	beq.n	8002234 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800222c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	4618      	mov	r0, r3
 800223a:	f003 f8c7 	bl	80053cc <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	4618      	mov	r0, r3
 8002244:	f004 f9a1 	bl	800658a <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2200      	movs	r2, #0
 800224c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002250:	2300      	movs	r3, #0
}
 8002252:	4618      	mov	r0, r3
 8002254:	3710      	adds	r7, #16
 8002256:	46bd      	mov	sp, r7
 8002258:	bd80      	pop	{r7, pc}

0800225a <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800225a:	b590      	push	{r4, r7, lr}
 800225c:	b08d      	sub	sp, #52	; 0x34
 800225e:	af00      	add	r7, sp, #0
 8002260:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002268:	6a3b      	ldr	r3, [r7, #32]
 800226a:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4618      	mov	r0, r3
 8002272:	f004 fa5f 	bl	8006734 <USB_GetMode>
 8002276:	4603      	mov	r3, r0
 8002278:	2b00      	cmp	r3, #0
 800227a:	f040 839d 	bne.w	80029b8 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	4618      	mov	r0, r3
 8002284:	f004 f9c3 	bl	800660e <USB_ReadInterrupts>
 8002288:	4603      	mov	r3, r0
 800228a:	2b00      	cmp	r3, #0
 800228c:	f000 8393 	beq.w	80029b6 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	4618      	mov	r0, r3
 8002296:	f004 f9ba 	bl	800660e <USB_ReadInterrupts>
 800229a:	4603      	mov	r3, r0
 800229c:	f003 0302 	and.w	r3, r3, #2
 80022a0:	2b02      	cmp	r3, #2
 80022a2:	d107      	bne.n	80022b4 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	695a      	ldr	r2, [r3, #20]
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f002 0202 	and.w	r2, r2, #2
 80022b2:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	4618      	mov	r0, r3
 80022ba:	f004 f9a8 	bl	800660e <USB_ReadInterrupts>
 80022be:	4603      	mov	r3, r0
 80022c0:	f003 0310 	and.w	r3, r3, #16
 80022c4:	2b10      	cmp	r3, #16
 80022c6:	d161      	bne.n	800238c <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	699a      	ldr	r2, [r3, #24]
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f022 0210 	bic.w	r2, r2, #16
 80022d6:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 80022d8:	6a3b      	ldr	r3, [r7, #32]
 80022da:	6a1b      	ldr	r3, [r3, #32]
 80022dc:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 80022de:	69bb      	ldr	r3, [r7, #24]
 80022e0:	f003 020f 	and.w	r2, r3, #15
 80022e4:	4613      	mov	r3, r2
 80022e6:	00db      	lsls	r3, r3, #3
 80022e8:	1a9b      	subs	r3, r3, r2
 80022ea:	009b      	lsls	r3, r3, #2
 80022ec:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80022f0:	687a      	ldr	r2, [r7, #4]
 80022f2:	4413      	add	r3, r2
 80022f4:	3304      	adds	r3, #4
 80022f6:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80022f8:	69bb      	ldr	r3, [r7, #24]
 80022fa:	0c5b      	lsrs	r3, r3, #17
 80022fc:	f003 030f 	and.w	r3, r3, #15
 8002300:	2b02      	cmp	r3, #2
 8002302:	d124      	bne.n	800234e <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002304:	69ba      	ldr	r2, [r7, #24]
 8002306:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800230a:	4013      	ands	r3, r2
 800230c:	2b00      	cmp	r3, #0
 800230e:	d035      	beq.n	800237c <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002310:	697b      	ldr	r3, [r7, #20]
 8002312:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002314:	69bb      	ldr	r3, [r7, #24]
 8002316:	091b      	lsrs	r3, r3, #4
 8002318:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800231a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800231e:	b29b      	uxth	r3, r3
 8002320:	461a      	mov	r2, r3
 8002322:	6a38      	ldr	r0, [r7, #32]
 8002324:	f003 ffdf 	bl	80062e6 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002328:	697b      	ldr	r3, [r7, #20]
 800232a:	68da      	ldr	r2, [r3, #12]
 800232c:	69bb      	ldr	r3, [r7, #24]
 800232e:	091b      	lsrs	r3, r3, #4
 8002330:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002334:	441a      	add	r2, r3
 8002336:	697b      	ldr	r3, [r7, #20]
 8002338:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800233a:	697b      	ldr	r3, [r7, #20]
 800233c:	699a      	ldr	r2, [r3, #24]
 800233e:	69bb      	ldr	r3, [r7, #24]
 8002340:	091b      	lsrs	r3, r3, #4
 8002342:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002346:	441a      	add	r2, r3
 8002348:	697b      	ldr	r3, [r7, #20]
 800234a:	619a      	str	r2, [r3, #24]
 800234c:	e016      	b.n	800237c <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 800234e:	69bb      	ldr	r3, [r7, #24]
 8002350:	0c5b      	lsrs	r3, r3, #17
 8002352:	f003 030f 	and.w	r3, r3, #15
 8002356:	2b06      	cmp	r3, #6
 8002358:	d110      	bne.n	800237c <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002360:	2208      	movs	r2, #8
 8002362:	4619      	mov	r1, r3
 8002364:	6a38      	ldr	r0, [r7, #32]
 8002366:	f003 ffbe 	bl	80062e6 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800236a:	697b      	ldr	r3, [r7, #20]
 800236c:	699a      	ldr	r2, [r3, #24]
 800236e:	69bb      	ldr	r3, [r7, #24]
 8002370:	091b      	lsrs	r3, r3, #4
 8002372:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002376:	441a      	add	r2, r3
 8002378:	697b      	ldr	r3, [r7, #20]
 800237a:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	699a      	ldr	r2, [r3, #24]
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f042 0210 	orr.w	r2, r2, #16
 800238a:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	4618      	mov	r0, r3
 8002392:	f004 f93c 	bl	800660e <USB_ReadInterrupts>
 8002396:	4603      	mov	r3, r0
 8002398:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800239c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80023a0:	d16e      	bne.n	8002480 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 80023a2:	2300      	movs	r3, #0
 80023a4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	4618      	mov	r0, r3
 80023ac:	f004 f942 	bl	8006634 <USB_ReadDevAllOutEpInterrupt>
 80023b0:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80023b2:	e062      	b.n	800247a <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 80023b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023b6:	f003 0301 	and.w	r3, r3, #1
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d057      	beq.n	800246e <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023c4:	b2d2      	uxtb	r2, r2
 80023c6:	4611      	mov	r1, r2
 80023c8:	4618      	mov	r0, r3
 80023ca:	f004 f967 	bl	800669c <USB_ReadDevOutEPInterrupt>
 80023ce:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80023d0:	693b      	ldr	r3, [r7, #16]
 80023d2:	f003 0301 	and.w	r3, r3, #1
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d00c      	beq.n	80023f4 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80023da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023dc:	015a      	lsls	r2, r3, #5
 80023de:	69fb      	ldr	r3, [r7, #28]
 80023e0:	4413      	add	r3, r2
 80023e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80023e6:	461a      	mov	r2, r3
 80023e8:	2301      	movs	r3, #1
 80023ea:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80023ec:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80023ee:	6878      	ldr	r0, [r7, #4]
 80023f0:	f000 fdb0 	bl	8002f54 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80023f4:	693b      	ldr	r3, [r7, #16]
 80023f6:	f003 0308 	and.w	r3, r3, #8
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d00c      	beq.n	8002418 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80023fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002400:	015a      	lsls	r2, r3, #5
 8002402:	69fb      	ldr	r3, [r7, #28]
 8002404:	4413      	add	r3, r2
 8002406:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800240a:	461a      	mov	r2, r3
 800240c:	2308      	movs	r3, #8
 800240e:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002410:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002412:	6878      	ldr	r0, [r7, #4]
 8002414:	f000 feaa 	bl	800316c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002418:	693b      	ldr	r3, [r7, #16]
 800241a:	f003 0310 	and.w	r3, r3, #16
 800241e:	2b00      	cmp	r3, #0
 8002420:	d008      	beq.n	8002434 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002424:	015a      	lsls	r2, r3, #5
 8002426:	69fb      	ldr	r3, [r7, #28]
 8002428:	4413      	add	r3, r2
 800242a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800242e:	461a      	mov	r2, r3
 8002430:	2310      	movs	r3, #16
 8002432:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002434:	693b      	ldr	r3, [r7, #16]
 8002436:	f003 0320 	and.w	r3, r3, #32
 800243a:	2b00      	cmp	r3, #0
 800243c:	d008      	beq.n	8002450 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800243e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002440:	015a      	lsls	r2, r3, #5
 8002442:	69fb      	ldr	r3, [r7, #28]
 8002444:	4413      	add	r3, r2
 8002446:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800244a:	461a      	mov	r2, r3
 800244c:	2320      	movs	r3, #32
 800244e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002450:	693b      	ldr	r3, [r7, #16]
 8002452:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002456:	2b00      	cmp	r3, #0
 8002458:	d009      	beq.n	800246e <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800245a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800245c:	015a      	lsls	r2, r3, #5
 800245e:	69fb      	ldr	r3, [r7, #28]
 8002460:	4413      	add	r3, r2
 8002462:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002466:	461a      	mov	r2, r3
 8002468:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800246c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800246e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002470:	3301      	adds	r3, #1
 8002472:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002474:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002476:	085b      	lsrs	r3, r3, #1
 8002478:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800247a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800247c:	2b00      	cmp	r3, #0
 800247e:	d199      	bne.n	80023b4 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	4618      	mov	r0, r3
 8002486:	f004 f8c2 	bl	800660e <USB_ReadInterrupts>
 800248a:	4603      	mov	r3, r0
 800248c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002490:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002494:	f040 80c0 	bne.w	8002618 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	4618      	mov	r0, r3
 800249e:	f004 f8e3 	bl	8006668 <USB_ReadDevAllInEpInterrupt>
 80024a2:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80024a4:	2300      	movs	r3, #0
 80024a6:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80024a8:	e0b2      	b.n	8002610 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80024aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024ac:	f003 0301 	and.w	r3, r3, #1
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	f000 80a7 	beq.w	8002604 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024bc:	b2d2      	uxtb	r2, r2
 80024be:	4611      	mov	r1, r2
 80024c0:	4618      	mov	r0, r3
 80024c2:	f004 f909 	bl	80066d8 <USB_ReadDevInEPInterrupt>
 80024c6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80024c8:	693b      	ldr	r3, [r7, #16]
 80024ca:	f003 0301 	and.w	r3, r3, #1
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d057      	beq.n	8002582 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80024d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024d4:	f003 030f 	and.w	r3, r3, #15
 80024d8:	2201      	movs	r2, #1
 80024da:	fa02 f303 	lsl.w	r3, r2, r3
 80024de:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80024e0:	69fb      	ldr	r3, [r7, #28]
 80024e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80024e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	43db      	mvns	r3, r3
 80024ec:	69f9      	ldr	r1, [r7, #28]
 80024ee:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80024f2:	4013      	ands	r3, r2
 80024f4:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80024f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024f8:	015a      	lsls	r2, r3, #5
 80024fa:	69fb      	ldr	r3, [r7, #28]
 80024fc:	4413      	add	r3, r2
 80024fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002502:	461a      	mov	r2, r3
 8002504:	2301      	movs	r3, #1
 8002506:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	691b      	ldr	r3, [r3, #16]
 800250c:	2b01      	cmp	r3, #1
 800250e:	d132      	bne.n	8002576 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002510:	6879      	ldr	r1, [r7, #4]
 8002512:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002514:	4613      	mov	r3, r2
 8002516:	00db      	lsls	r3, r3, #3
 8002518:	1a9b      	subs	r3, r3, r2
 800251a:	009b      	lsls	r3, r3, #2
 800251c:	440b      	add	r3, r1
 800251e:	3348      	adds	r3, #72	; 0x48
 8002520:	6819      	ldr	r1, [r3, #0]
 8002522:	6878      	ldr	r0, [r7, #4]
 8002524:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002526:	4613      	mov	r3, r2
 8002528:	00db      	lsls	r3, r3, #3
 800252a:	1a9b      	subs	r3, r3, r2
 800252c:	009b      	lsls	r3, r3, #2
 800252e:	4403      	add	r3, r0
 8002530:	3344      	adds	r3, #68	; 0x44
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	4419      	add	r1, r3
 8002536:	6878      	ldr	r0, [r7, #4]
 8002538:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800253a:	4613      	mov	r3, r2
 800253c:	00db      	lsls	r3, r3, #3
 800253e:	1a9b      	subs	r3, r3, r2
 8002540:	009b      	lsls	r3, r3, #2
 8002542:	4403      	add	r3, r0
 8002544:	3348      	adds	r3, #72	; 0x48
 8002546:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800254a:	2b00      	cmp	r3, #0
 800254c:	d113      	bne.n	8002576 <HAL_PCD_IRQHandler+0x31c>
 800254e:	6879      	ldr	r1, [r7, #4]
 8002550:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002552:	4613      	mov	r3, r2
 8002554:	00db      	lsls	r3, r3, #3
 8002556:	1a9b      	subs	r3, r3, r2
 8002558:	009b      	lsls	r3, r3, #2
 800255a:	440b      	add	r3, r1
 800255c:	3350      	adds	r3, #80	; 0x50
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	2b00      	cmp	r3, #0
 8002562:	d108      	bne.n	8002576 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6818      	ldr	r0, [r3, #0]
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800256e:	461a      	mov	r2, r3
 8002570:	2101      	movs	r1, #1
 8002572:	f004 f911 	bl	8006798 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002578:	b2db      	uxtb	r3, r3
 800257a:	4619      	mov	r1, r3
 800257c:	6878      	ldr	r0, [r7, #4]
 800257e:	f006 f948 	bl	8008812 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002582:	693b      	ldr	r3, [r7, #16]
 8002584:	f003 0308 	and.w	r3, r3, #8
 8002588:	2b00      	cmp	r3, #0
 800258a:	d008      	beq.n	800259e <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800258c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800258e:	015a      	lsls	r2, r3, #5
 8002590:	69fb      	ldr	r3, [r7, #28]
 8002592:	4413      	add	r3, r2
 8002594:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002598:	461a      	mov	r2, r3
 800259a:	2308      	movs	r3, #8
 800259c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800259e:	693b      	ldr	r3, [r7, #16]
 80025a0:	f003 0310 	and.w	r3, r3, #16
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d008      	beq.n	80025ba <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80025a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025aa:	015a      	lsls	r2, r3, #5
 80025ac:	69fb      	ldr	r3, [r7, #28]
 80025ae:	4413      	add	r3, r2
 80025b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80025b4:	461a      	mov	r2, r3
 80025b6:	2310      	movs	r3, #16
 80025b8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80025ba:	693b      	ldr	r3, [r7, #16]
 80025bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d008      	beq.n	80025d6 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80025c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025c6:	015a      	lsls	r2, r3, #5
 80025c8:	69fb      	ldr	r3, [r7, #28]
 80025ca:	4413      	add	r3, r2
 80025cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80025d0:	461a      	mov	r2, r3
 80025d2:	2340      	movs	r3, #64	; 0x40
 80025d4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80025d6:	693b      	ldr	r3, [r7, #16]
 80025d8:	f003 0302 	and.w	r3, r3, #2
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d008      	beq.n	80025f2 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80025e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025e2:	015a      	lsls	r2, r3, #5
 80025e4:	69fb      	ldr	r3, [r7, #28]
 80025e6:	4413      	add	r3, r2
 80025e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80025ec:	461a      	mov	r2, r3
 80025ee:	2302      	movs	r3, #2
 80025f0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80025f2:	693b      	ldr	r3, [r7, #16]
 80025f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d003      	beq.n	8002604 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80025fc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80025fe:	6878      	ldr	r0, [r7, #4]
 8002600:	f000 fc1b 	bl	8002e3a <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002606:	3301      	adds	r3, #1
 8002608:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800260a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800260c:	085b      	lsrs	r3, r3, #1
 800260e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002610:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002612:	2b00      	cmp	r3, #0
 8002614:	f47f af49 	bne.w	80024aa <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	4618      	mov	r0, r3
 800261e:	f003 fff6 	bl	800660e <USB_ReadInterrupts>
 8002622:	4603      	mov	r3, r0
 8002624:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002628:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800262c:	d122      	bne.n	8002674 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800262e:	69fb      	ldr	r3, [r7, #28]
 8002630:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002634:	685b      	ldr	r3, [r3, #4]
 8002636:	69fa      	ldr	r2, [r7, #28]
 8002638:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800263c:	f023 0301 	bic.w	r3, r3, #1
 8002640:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8002648:	2b01      	cmp	r3, #1
 800264a:	d108      	bne.n	800265e <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2200      	movs	r2, #0
 8002650:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002654:	2100      	movs	r1, #0
 8002656:	6878      	ldr	r0, [r7, #4]
 8002658:	f000 fe26 	bl	80032a8 <HAL_PCDEx_LPM_Callback>
 800265c:	e002      	b.n	8002664 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800265e:	6878      	ldr	r0, [r7, #4]
 8002660:	f006 f944 	bl	80088ec <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	695a      	ldr	r2, [r3, #20]
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002672:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	4618      	mov	r0, r3
 800267a:	f003 ffc8 	bl	800660e <USB_ReadInterrupts>
 800267e:	4603      	mov	r3, r0
 8002680:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002684:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002688:	d112      	bne.n	80026b0 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800268a:	69fb      	ldr	r3, [r7, #28]
 800268c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002690:	689b      	ldr	r3, [r3, #8]
 8002692:	f003 0301 	and.w	r3, r3, #1
 8002696:	2b01      	cmp	r3, #1
 8002698:	d102      	bne.n	80026a0 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800269a:	6878      	ldr	r0, [r7, #4]
 800269c:	f006 f900 	bl	80088a0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	695a      	ldr	r2, [r3, #20]
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80026ae:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	4618      	mov	r0, r3
 80026b6:	f003 ffaa 	bl	800660e <USB_ReadInterrupts>
 80026ba:	4603      	mov	r3, r0
 80026bc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80026c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80026c4:	f040 80c7 	bne.w	8002856 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80026c8:	69fb      	ldr	r3, [r7, #28]
 80026ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80026ce:	685b      	ldr	r3, [r3, #4]
 80026d0:	69fa      	ldr	r2, [r7, #28]
 80026d2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80026d6:	f023 0301 	bic.w	r3, r3, #1
 80026da:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	2110      	movs	r1, #16
 80026e2:	4618      	mov	r0, r3
 80026e4:	f003 f844 	bl	8005770 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80026e8:	2300      	movs	r3, #0
 80026ea:	62fb      	str	r3, [r7, #44]	; 0x2c
 80026ec:	e056      	b.n	800279c <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80026ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026f0:	015a      	lsls	r2, r3, #5
 80026f2:	69fb      	ldr	r3, [r7, #28]
 80026f4:	4413      	add	r3, r2
 80026f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80026fa:	461a      	mov	r2, r3
 80026fc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002700:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002702:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002704:	015a      	lsls	r2, r3, #5
 8002706:	69fb      	ldr	r3, [r7, #28]
 8002708:	4413      	add	r3, r2
 800270a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002712:	0151      	lsls	r1, r2, #5
 8002714:	69fa      	ldr	r2, [r7, #28]
 8002716:	440a      	add	r2, r1
 8002718:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800271c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002720:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8002722:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002724:	015a      	lsls	r2, r3, #5
 8002726:	69fb      	ldr	r3, [r7, #28]
 8002728:	4413      	add	r3, r2
 800272a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002732:	0151      	lsls	r1, r2, #5
 8002734:	69fa      	ldr	r2, [r7, #28]
 8002736:	440a      	add	r2, r1
 8002738:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800273c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002740:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002742:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002744:	015a      	lsls	r2, r3, #5
 8002746:	69fb      	ldr	r3, [r7, #28]
 8002748:	4413      	add	r3, r2
 800274a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800274e:	461a      	mov	r2, r3
 8002750:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002754:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002756:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002758:	015a      	lsls	r2, r3, #5
 800275a:	69fb      	ldr	r3, [r7, #28]
 800275c:	4413      	add	r3, r2
 800275e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002766:	0151      	lsls	r1, r2, #5
 8002768:	69fa      	ldr	r2, [r7, #28]
 800276a:	440a      	add	r2, r1
 800276c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002770:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002774:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002776:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002778:	015a      	lsls	r2, r3, #5
 800277a:	69fb      	ldr	r3, [r7, #28]
 800277c:	4413      	add	r3, r2
 800277e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002786:	0151      	lsls	r1, r2, #5
 8002788:	69fa      	ldr	r2, [r7, #28]
 800278a:	440a      	add	r2, r1
 800278c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002790:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002794:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002796:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002798:	3301      	adds	r3, #1
 800279a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	685b      	ldr	r3, [r3, #4]
 80027a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80027a2:	429a      	cmp	r2, r3
 80027a4:	d3a3      	bcc.n	80026ee <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80027a6:	69fb      	ldr	r3, [r7, #28]
 80027a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80027ac:	69db      	ldr	r3, [r3, #28]
 80027ae:	69fa      	ldr	r2, [r7, #28]
 80027b0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80027b4:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80027b8:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d016      	beq.n	80027f0 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80027c2:	69fb      	ldr	r3, [r7, #28]
 80027c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80027c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80027cc:	69fa      	ldr	r2, [r7, #28]
 80027ce:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80027d2:	f043 030b 	orr.w	r3, r3, #11
 80027d6:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80027da:	69fb      	ldr	r3, [r7, #28]
 80027dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80027e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027e2:	69fa      	ldr	r2, [r7, #28]
 80027e4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80027e8:	f043 030b 	orr.w	r3, r3, #11
 80027ec:	6453      	str	r3, [r2, #68]	; 0x44
 80027ee:	e015      	b.n	800281c <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80027f0:	69fb      	ldr	r3, [r7, #28]
 80027f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80027f6:	695b      	ldr	r3, [r3, #20]
 80027f8:	69fa      	ldr	r2, [r7, #28]
 80027fa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80027fe:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002802:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8002806:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002808:	69fb      	ldr	r3, [r7, #28]
 800280a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800280e:	691b      	ldr	r3, [r3, #16]
 8002810:	69fa      	ldr	r2, [r7, #28]
 8002812:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002816:	f043 030b 	orr.w	r3, r3, #11
 800281a:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800281c:	69fb      	ldr	r3, [r7, #28]
 800281e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	69fa      	ldr	r2, [r7, #28]
 8002826:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800282a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800282e:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6818      	ldr	r0, [r3, #0]
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	691b      	ldr	r3, [r3, #16]
 8002838:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002840:	461a      	mov	r2, r3
 8002842:	f003 ffa9 	bl	8006798 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	695a      	ldr	r2, [r3, #20]
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002854:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	4618      	mov	r0, r3
 800285c:	f003 fed7 	bl	800660e <USB_ReadInterrupts>
 8002860:	4603      	mov	r3, r0
 8002862:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002866:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800286a:	d124      	bne.n	80028b6 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	4618      	mov	r0, r3
 8002872:	f003 ff6d 	bl	8006750 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4618      	mov	r0, r3
 800287c:	f002 ffd5 	bl	800582a <USB_GetDevSpeed>
 8002880:	4603      	mov	r3, r0
 8002882:	461a      	mov	r2, r3
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681c      	ldr	r4, [r3, #0]
 800288c:	f001 f93c 	bl	8003b08 <HAL_RCC_GetHCLKFreq>
 8002890:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002896:	b2db      	uxtb	r3, r3
 8002898:	461a      	mov	r2, r3
 800289a:	4620      	mov	r0, r4
 800289c:	f002 fcf4 	bl	8005288 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80028a0:	6878      	ldr	r0, [r7, #4]
 80028a2:	f005 ffde 	bl	8008862 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	695a      	ldr	r2, [r3, #20]
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80028b4:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	4618      	mov	r0, r3
 80028bc:	f003 fea7 	bl	800660e <USB_ReadInterrupts>
 80028c0:	4603      	mov	r3, r0
 80028c2:	f003 0308 	and.w	r3, r3, #8
 80028c6:	2b08      	cmp	r3, #8
 80028c8:	d10a      	bne.n	80028e0 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80028ca:	6878      	ldr	r0, [r7, #4]
 80028cc:	f005 ffbb 	bl	8008846 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	695a      	ldr	r2, [r3, #20]
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f002 0208 	and.w	r2, r2, #8
 80028de:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4618      	mov	r0, r3
 80028e6:	f003 fe92 	bl	800660e <USB_ReadInterrupts>
 80028ea:	4603      	mov	r3, r0
 80028ec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80028f0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80028f4:	d10f      	bne.n	8002916 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80028f6:	2300      	movs	r3, #0
 80028f8:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80028fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028fc:	b2db      	uxtb	r3, r3
 80028fe:	4619      	mov	r1, r3
 8002900:	6878      	ldr	r0, [r7, #4]
 8002902:	f006 f813 	bl	800892c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	695a      	ldr	r2, [r3, #20]
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002914:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	4618      	mov	r0, r3
 800291c:	f003 fe77 	bl	800660e <USB_ReadInterrupts>
 8002920:	4603      	mov	r3, r0
 8002922:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002926:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800292a:	d10f      	bne.n	800294c <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800292c:	2300      	movs	r3, #0
 800292e:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002932:	b2db      	uxtb	r3, r3
 8002934:	4619      	mov	r1, r3
 8002936:	6878      	ldr	r0, [r7, #4]
 8002938:	f005 ffe6 	bl	8008908 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	695a      	ldr	r2, [r3, #20]
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800294a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	4618      	mov	r0, r3
 8002952:	f003 fe5c 	bl	800660e <USB_ReadInterrupts>
 8002956:	4603      	mov	r3, r0
 8002958:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800295c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002960:	d10a      	bne.n	8002978 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002962:	6878      	ldr	r0, [r7, #4]
 8002964:	f005 fff4 	bl	8008950 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	695a      	ldr	r2, [r3, #20]
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002976:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	4618      	mov	r0, r3
 800297e:	f003 fe46 	bl	800660e <USB_ReadInterrupts>
 8002982:	4603      	mov	r3, r0
 8002984:	f003 0304 	and.w	r3, r3, #4
 8002988:	2b04      	cmp	r3, #4
 800298a:	d115      	bne.n	80029b8 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	685b      	ldr	r3, [r3, #4]
 8002992:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002994:	69bb      	ldr	r3, [r7, #24]
 8002996:	f003 0304 	and.w	r3, r3, #4
 800299a:	2b00      	cmp	r3, #0
 800299c:	d002      	beq.n	80029a4 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800299e:	6878      	ldr	r0, [r7, #4]
 80029a0:	f005 ffe4 	bl	800896c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	6859      	ldr	r1, [r3, #4]
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	69ba      	ldr	r2, [r7, #24]
 80029b0:	430a      	orrs	r2, r1
 80029b2:	605a      	str	r2, [r3, #4]
 80029b4:	e000      	b.n	80029b8 <HAL_PCD_IRQHandler+0x75e>
      return;
 80029b6:	bf00      	nop
    }
  }
}
 80029b8:	3734      	adds	r7, #52	; 0x34
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bd90      	pop	{r4, r7, pc}

080029be <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80029be:	b580      	push	{r7, lr}
 80029c0:	b082      	sub	sp, #8
 80029c2:	af00      	add	r7, sp, #0
 80029c4:	6078      	str	r0, [r7, #4]
 80029c6:	460b      	mov	r3, r1
 80029c8:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80029d0:	2b01      	cmp	r3, #1
 80029d2:	d101      	bne.n	80029d8 <HAL_PCD_SetAddress+0x1a>
 80029d4:	2302      	movs	r3, #2
 80029d6:	e013      	b.n	8002a00 <HAL_PCD_SetAddress+0x42>
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2201      	movs	r2, #1
 80029dc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	78fa      	ldrb	r2, [r7, #3]
 80029e4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	78fa      	ldrb	r2, [r7, #3]
 80029ee:	4611      	mov	r1, r2
 80029f0:	4618      	mov	r0, r3
 80029f2:	f003 fda4 	bl	800653e <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	2200      	movs	r2, #0
 80029fa:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80029fe:	2300      	movs	r3, #0
}
 8002a00:	4618      	mov	r0, r3
 8002a02:	3708      	adds	r7, #8
 8002a04:	46bd      	mov	sp, r7
 8002a06:	bd80      	pop	{r7, pc}

08002a08 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b084      	sub	sp, #16
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
 8002a10:	4608      	mov	r0, r1
 8002a12:	4611      	mov	r1, r2
 8002a14:	461a      	mov	r2, r3
 8002a16:	4603      	mov	r3, r0
 8002a18:	70fb      	strb	r3, [r7, #3]
 8002a1a:	460b      	mov	r3, r1
 8002a1c:	803b      	strh	r3, [r7, #0]
 8002a1e:	4613      	mov	r3, r2
 8002a20:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002a22:	2300      	movs	r3, #0
 8002a24:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002a26:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	da0f      	bge.n	8002a4e <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002a2e:	78fb      	ldrb	r3, [r7, #3]
 8002a30:	f003 020f 	and.w	r2, r3, #15
 8002a34:	4613      	mov	r3, r2
 8002a36:	00db      	lsls	r3, r3, #3
 8002a38:	1a9b      	subs	r3, r3, r2
 8002a3a:	009b      	lsls	r3, r3, #2
 8002a3c:	3338      	adds	r3, #56	; 0x38
 8002a3e:	687a      	ldr	r2, [r7, #4]
 8002a40:	4413      	add	r3, r2
 8002a42:	3304      	adds	r3, #4
 8002a44:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	2201      	movs	r2, #1
 8002a4a:	705a      	strb	r2, [r3, #1]
 8002a4c:	e00f      	b.n	8002a6e <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002a4e:	78fb      	ldrb	r3, [r7, #3]
 8002a50:	f003 020f 	and.w	r2, r3, #15
 8002a54:	4613      	mov	r3, r2
 8002a56:	00db      	lsls	r3, r3, #3
 8002a58:	1a9b      	subs	r3, r3, r2
 8002a5a:	009b      	lsls	r3, r3, #2
 8002a5c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002a60:	687a      	ldr	r2, [r7, #4]
 8002a62:	4413      	add	r3, r2
 8002a64:	3304      	adds	r3, #4
 8002a66:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002a6e:	78fb      	ldrb	r3, [r7, #3]
 8002a70:	f003 030f 	and.w	r3, r3, #15
 8002a74:	b2da      	uxtb	r2, r3
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002a7a:	883a      	ldrh	r2, [r7, #0]
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	78ba      	ldrb	r2, [r7, #2]
 8002a84:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	785b      	ldrb	r3, [r3, #1]
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d004      	beq.n	8002a98 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	781b      	ldrb	r3, [r3, #0]
 8002a92:	b29a      	uxth	r2, r3
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002a98:	78bb      	ldrb	r3, [r7, #2]
 8002a9a:	2b02      	cmp	r3, #2
 8002a9c:	d102      	bne.n	8002aa4 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002aaa:	2b01      	cmp	r3, #1
 8002aac:	d101      	bne.n	8002ab2 <HAL_PCD_EP_Open+0xaa>
 8002aae:	2302      	movs	r3, #2
 8002ab0:	e00e      	b.n	8002ad0 <HAL_PCD_EP_Open+0xc8>
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	2201      	movs	r2, #1
 8002ab6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	68f9      	ldr	r1, [r7, #12]
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	f002 fed7 	bl	8005874 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	2200      	movs	r2, #0
 8002aca:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8002ace:	7afb      	ldrb	r3, [r7, #11]
}
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	3710      	adds	r7, #16
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	bd80      	pop	{r7, pc}

08002ad8 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b084      	sub	sp, #16
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
 8002ae0:	460b      	mov	r3, r1
 8002ae2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002ae4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	da0f      	bge.n	8002b0c <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002aec:	78fb      	ldrb	r3, [r7, #3]
 8002aee:	f003 020f 	and.w	r2, r3, #15
 8002af2:	4613      	mov	r3, r2
 8002af4:	00db      	lsls	r3, r3, #3
 8002af6:	1a9b      	subs	r3, r3, r2
 8002af8:	009b      	lsls	r3, r3, #2
 8002afa:	3338      	adds	r3, #56	; 0x38
 8002afc:	687a      	ldr	r2, [r7, #4]
 8002afe:	4413      	add	r3, r2
 8002b00:	3304      	adds	r3, #4
 8002b02:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	2201      	movs	r2, #1
 8002b08:	705a      	strb	r2, [r3, #1]
 8002b0a:	e00f      	b.n	8002b2c <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002b0c:	78fb      	ldrb	r3, [r7, #3]
 8002b0e:	f003 020f 	and.w	r2, r3, #15
 8002b12:	4613      	mov	r3, r2
 8002b14:	00db      	lsls	r3, r3, #3
 8002b16:	1a9b      	subs	r3, r3, r2
 8002b18:	009b      	lsls	r3, r3, #2
 8002b1a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002b1e:	687a      	ldr	r2, [r7, #4]
 8002b20:	4413      	add	r3, r2
 8002b22:	3304      	adds	r3, #4
 8002b24:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	2200      	movs	r2, #0
 8002b2a:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002b2c:	78fb      	ldrb	r3, [r7, #3]
 8002b2e:	f003 030f 	and.w	r3, r3, #15
 8002b32:	b2da      	uxtb	r2, r3
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002b3e:	2b01      	cmp	r3, #1
 8002b40:	d101      	bne.n	8002b46 <HAL_PCD_EP_Close+0x6e>
 8002b42:	2302      	movs	r3, #2
 8002b44:	e00e      	b.n	8002b64 <HAL_PCD_EP_Close+0x8c>
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	2201      	movs	r2, #1
 8002b4a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	68f9      	ldr	r1, [r7, #12]
 8002b54:	4618      	mov	r0, r3
 8002b56:	f002 ff15 	bl	8005984 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8002b62:	2300      	movs	r3, #0
}
 8002b64:	4618      	mov	r0, r3
 8002b66:	3710      	adds	r7, #16
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	bd80      	pop	{r7, pc}

08002b6c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b086      	sub	sp, #24
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	60f8      	str	r0, [r7, #12]
 8002b74:	607a      	str	r2, [r7, #4]
 8002b76:	603b      	str	r3, [r7, #0]
 8002b78:	460b      	mov	r3, r1
 8002b7a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002b7c:	7afb      	ldrb	r3, [r7, #11]
 8002b7e:	f003 020f 	and.w	r2, r3, #15
 8002b82:	4613      	mov	r3, r2
 8002b84:	00db      	lsls	r3, r3, #3
 8002b86:	1a9b      	subs	r3, r3, r2
 8002b88:	009b      	lsls	r3, r3, #2
 8002b8a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002b8e:	68fa      	ldr	r2, [r7, #12]
 8002b90:	4413      	add	r3, r2
 8002b92:	3304      	adds	r3, #4
 8002b94:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002b96:	697b      	ldr	r3, [r7, #20]
 8002b98:	687a      	ldr	r2, [r7, #4]
 8002b9a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002b9c:	697b      	ldr	r3, [r7, #20]
 8002b9e:	683a      	ldr	r2, [r7, #0]
 8002ba0:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8002ba2:	697b      	ldr	r3, [r7, #20]
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8002ba8:	697b      	ldr	r3, [r7, #20]
 8002baa:	2200      	movs	r2, #0
 8002bac:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002bae:	7afb      	ldrb	r3, [r7, #11]
 8002bb0:	f003 030f 	and.w	r3, r3, #15
 8002bb4:	b2da      	uxtb	r2, r3
 8002bb6:	697b      	ldr	r3, [r7, #20]
 8002bb8:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	691b      	ldr	r3, [r3, #16]
 8002bbe:	2b01      	cmp	r3, #1
 8002bc0:	d102      	bne.n	8002bc8 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002bc2:	687a      	ldr	r2, [r7, #4]
 8002bc4:	697b      	ldr	r3, [r7, #20]
 8002bc6:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002bc8:	7afb      	ldrb	r3, [r7, #11]
 8002bca:	f003 030f 	and.w	r3, r3, #15
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d109      	bne.n	8002be6 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	6818      	ldr	r0, [r3, #0]
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	691b      	ldr	r3, [r3, #16]
 8002bda:	b2db      	uxtb	r3, r3
 8002bdc:	461a      	mov	r2, r3
 8002bde:	6979      	ldr	r1, [r7, #20]
 8002be0:	f003 f9f0 	bl	8005fc4 <USB_EP0StartXfer>
 8002be4:	e008      	b.n	8002bf8 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	6818      	ldr	r0, [r3, #0]
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	691b      	ldr	r3, [r3, #16]
 8002bee:	b2db      	uxtb	r3, r3
 8002bf0:	461a      	mov	r2, r3
 8002bf2:	6979      	ldr	r1, [r7, #20]
 8002bf4:	f002 ffa2 	bl	8005b3c <USB_EPStartXfer>
  }

  return HAL_OK;
 8002bf8:	2300      	movs	r3, #0
}
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	3718      	adds	r7, #24
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	bd80      	pop	{r7, pc}

08002c02 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002c02:	b480      	push	{r7}
 8002c04:	b083      	sub	sp, #12
 8002c06:	af00      	add	r7, sp, #0
 8002c08:	6078      	str	r0, [r7, #4]
 8002c0a:	460b      	mov	r3, r1
 8002c0c:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002c0e:	78fb      	ldrb	r3, [r7, #3]
 8002c10:	f003 020f 	and.w	r2, r3, #15
 8002c14:	6879      	ldr	r1, [r7, #4]
 8002c16:	4613      	mov	r3, r2
 8002c18:	00db      	lsls	r3, r3, #3
 8002c1a:	1a9b      	subs	r3, r3, r2
 8002c1c:	009b      	lsls	r3, r3, #2
 8002c1e:	440b      	add	r3, r1
 8002c20:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8002c24:	681b      	ldr	r3, [r3, #0]
}
 8002c26:	4618      	mov	r0, r3
 8002c28:	370c      	adds	r7, #12
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c30:	4770      	bx	lr

08002c32 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002c32:	b580      	push	{r7, lr}
 8002c34:	b086      	sub	sp, #24
 8002c36:	af00      	add	r7, sp, #0
 8002c38:	60f8      	str	r0, [r7, #12]
 8002c3a:	607a      	str	r2, [r7, #4]
 8002c3c:	603b      	str	r3, [r7, #0]
 8002c3e:	460b      	mov	r3, r1
 8002c40:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002c42:	7afb      	ldrb	r3, [r7, #11]
 8002c44:	f003 020f 	and.w	r2, r3, #15
 8002c48:	4613      	mov	r3, r2
 8002c4a:	00db      	lsls	r3, r3, #3
 8002c4c:	1a9b      	subs	r3, r3, r2
 8002c4e:	009b      	lsls	r3, r3, #2
 8002c50:	3338      	adds	r3, #56	; 0x38
 8002c52:	68fa      	ldr	r2, [r7, #12]
 8002c54:	4413      	add	r3, r2
 8002c56:	3304      	adds	r3, #4
 8002c58:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002c5a:	697b      	ldr	r3, [r7, #20]
 8002c5c:	687a      	ldr	r2, [r7, #4]
 8002c5e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002c60:	697b      	ldr	r3, [r7, #20]
 8002c62:	683a      	ldr	r2, [r7, #0]
 8002c64:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8002c66:	697b      	ldr	r3, [r7, #20]
 8002c68:	2200      	movs	r2, #0
 8002c6a:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8002c6c:	697b      	ldr	r3, [r7, #20]
 8002c6e:	2201      	movs	r2, #1
 8002c70:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002c72:	7afb      	ldrb	r3, [r7, #11]
 8002c74:	f003 030f 	and.w	r3, r3, #15
 8002c78:	b2da      	uxtb	r2, r3
 8002c7a:	697b      	ldr	r3, [r7, #20]
 8002c7c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	691b      	ldr	r3, [r3, #16]
 8002c82:	2b01      	cmp	r3, #1
 8002c84:	d102      	bne.n	8002c8c <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002c86:	687a      	ldr	r2, [r7, #4]
 8002c88:	697b      	ldr	r3, [r7, #20]
 8002c8a:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002c8c:	7afb      	ldrb	r3, [r7, #11]
 8002c8e:	f003 030f 	and.w	r3, r3, #15
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d109      	bne.n	8002caa <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	6818      	ldr	r0, [r3, #0]
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	691b      	ldr	r3, [r3, #16]
 8002c9e:	b2db      	uxtb	r3, r3
 8002ca0:	461a      	mov	r2, r3
 8002ca2:	6979      	ldr	r1, [r7, #20]
 8002ca4:	f003 f98e 	bl	8005fc4 <USB_EP0StartXfer>
 8002ca8:	e008      	b.n	8002cbc <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	6818      	ldr	r0, [r3, #0]
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	691b      	ldr	r3, [r3, #16]
 8002cb2:	b2db      	uxtb	r3, r3
 8002cb4:	461a      	mov	r2, r3
 8002cb6:	6979      	ldr	r1, [r7, #20]
 8002cb8:	f002 ff40 	bl	8005b3c <USB_EPStartXfer>
  }

  return HAL_OK;
 8002cbc:	2300      	movs	r3, #0
}
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	3718      	adds	r7, #24
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	bd80      	pop	{r7, pc}

08002cc6 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002cc6:	b580      	push	{r7, lr}
 8002cc8:	b084      	sub	sp, #16
 8002cca:	af00      	add	r7, sp, #0
 8002ccc:	6078      	str	r0, [r7, #4]
 8002cce:	460b      	mov	r3, r1
 8002cd0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002cd2:	78fb      	ldrb	r3, [r7, #3]
 8002cd4:	f003 020f 	and.w	r2, r3, #15
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	685b      	ldr	r3, [r3, #4]
 8002cdc:	429a      	cmp	r2, r3
 8002cde:	d901      	bls.n	8002ce4 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002ce0:	2301      	movs	r3, #1
 8002ce2:	e050      	b.n	8002d86 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002ce4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	da0f      	bge.n	8002d0c <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002cec:	78fb      	ldrb	r3, [r7, #3]
 8002cee:	f003 020f 	and.w	r2, r3, #15
 8002cf2:	4613      	mov	r3, r2
 8002cf4:	00db      	lsls	r3, r3, #3
 8002cf6:	1a9b      	subs	r3, r3, r2
 8002cf8:	009b      	lsls	r3, r3, #2
 8002cfa:	3338      	adds	r3, #56	; 0x38
 8002cfc:	687a      	ldr	r2, [r7, #4]
 8002cfe:	4413      	add	r3, r2
 8002d00:	3304      	adds	r3, #4
 8002d02:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	2201      	movs	r2, #1
 8002d08:	705a      	strb	r2, [r3, #1]
 8002d0a:	e00d      	b.n	8002d28 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002d0c:	78fa      	ldrb	r2, [r7, #3]
 8002d0e:	4613      	mov	r3, r2
 8002d10:	00db      	lsls	r3, r3, #3
 8002d12:	1a9b      	subs	r3, r3, r2
 8002d14:	009b      	lsls	r3, r3, #2
 8002d16:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002d1a:	687a      	ldr	r2, [r7, #4]
 8002d1c:	4413      	add	r3, r2
 8002d1e:	3304      	adds	r3, #4
 8002d20:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	2200      	movs	r2, #0
 8002d26:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	2201      	movs	r2, #1
 8002d2c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002d2e:	78fb      	ldrb	r3, [r7, #3]
 8002d30:	f003 030f 	and.w	r3, r3, #15
 8002d34:	b2da      	uxtb	r2, r3
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002d40:	2b01      	cmp	r3, #1
 8002d42:	d101      	bne.n	8002d48 <HAL_PCD_EP_SetStall+0x82>
 8002d44:	2302      	movs	r3, #2
 8002d46:	e01e      	b.n	8002d86 <HAL_PCD_EP_SetStall+0xc0>
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2201      	movs	r2, #1
 8002d4c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	68f9      	ldr	r1, [r7, #12]
 8002d56:	4618      	mov	r0, r3
 8002d58:	f003 fb1d 	bl	8006396 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002d5c:	78fb      	ldrb	r3, [r7, #3]
 8002d5e:	f003 030f 	and.w	r3, r3, #15
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d10a      	bne.n	8002d7c <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6818      	ldr	r0, [r3, #0]
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	691b      	ldr	r3, [r3, #16]
 8002d6e:	b2d9      	uxtb	r1, r3
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002d76:	461a      	mov	r2, r3
 8002d78:	f003 fd0e 	bl	8006798 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2200      	movs	r2, #0
 8002d80:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002d84:	2300      	movs	r3, #0
}
 8002d86:	4618      	mov	r0, r3
 8002d88:	3710      	adds	r7, #16
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	bd80      	pop	{r7, pc}

08002d8e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002d8e:	b580      	push	{r7, lr}
 8002d90:	b084      	sub	sp, #16
 8002d92:	af00      	add	r7, sp, #0
 8002d94:	6078      	str	r0, [r7, #4]
 8002d96:	460b      	mov	r3, r1
 8002d98:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002d9a:	78fb      	ldrb	r3, [r7, #3]
 8002d9c:	f003 020f 	and.w	r2, r3, #15
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	685b      	ldr	r3, [r3, #4]
 8002da4:	429a      	cmp	r2, r3
 8002da6:	d901      	bls.n	8002dac <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002da8:	2301      	movs	r3, #1
 8002daa:	e042      	b.n	8002e32 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002dac:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	da0f      	bge.n	8002dd4 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002db4:	78fb      	ldrb	r3, [r7, #3]
 8002db6:	f003 020f 	and.w	r2, r3, #15
 8002dba:	4613      	mov	r3, r2
 8002dbc:	00db      	lsls	r3, r3, #3
 8002dbe:	1a9b      	subs	r3, r3, r2
 8002dc0:	009b      	lsls	r3, r3, #2
 8002dc2:	3338      	adds	r3, #56	; 0x38
 8002dc4:	687a      	ldr	r2, [r7, #4]
 8002dc6:	4413      	add	r3, r2
 8002dc8:	3304      	adds	r3, #4
 8002dca:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	2201      	movs	r2, #1
 8002dd0:	705a      	strb	r2, [r3, #1]
 8002dd2:	e00f      	b.n	8002df4 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002dd4:	78fb      	ldrb	r3, [r7, #3]
 8002dd6:	f003 020f 	and.w	r2, r3, #15
 8002dda:	4613      	mov	r3, r2
 8002ddc:	00db      	lsls	r3, r3, #3
 8002dde:	1a9b      	subs	r3, r3, r2
 8002de0:	009b      	lsls	r3, r3, #2
 8002de2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002de6:	687a      	ldr	r2, [r7, #4]
 8002de8:	4413      	add	r3, r2
 8002dea:	3304      	adds	r3, #4
 8002dec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	2200      	movs	r2, #0
 8002df2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	2200      	movs	r2, #0
 8002df8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002dfa:	78fb      	ldrb	r3, [r7, #3]
 8002dfc:	f003 030f 	and.w	r3, r3, #15
 8002e00:	b2da      	uxtb	r2, r3
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002e0c:	2b01      	cmp	r3, #1
 8002e0e:	d101      	bne.n	8002e14 <HAL_PCD_EP_ClrStall+0x86>
 8002e10:	2302      	movs	r3, #2
 8002e12:	e00e      	b.n	8002e32 <HAL_PCD_EP_ClrStall+0xa4>
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2201      	movs	r2, #1
 8002e18:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	68f9      	ldr	r1, [r7, #12]
 8002e22:	4618      	mov	r0, r3
 8002e24:	f003 fb25 	bl	8006472 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002e30:	2300      	movs	r3, #0
}
 8002e32:	4618      	mov	r0, r3
 8002e34:	3710      	adds	r7, #16
 8002e36:	46bd      	mov	sp, r7
 8002e38:	bd80      	pop	{r7, pc}

08002e3a <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002e3a:	b580      	push	{r7, lr}
 8002e3c:	b08a      	sub	sp, #40	; 0x28
 8002e3e:	af02      	add	r7, sp, #8
 8002e40:	6078      	str	r0, [r7, #4]
 8002e42:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002e4a:	697b      	ldr	r3, [r7, #20]
 8002e4c:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002e4e:	683a      	ldr	r2, [r7, #0]
 8002e50:	4613      	mov	r3, r2
 8002e52:	00db      	lsls	r3, r3, #3
 8002e54:	1a9b      	subs	r3, r3, r2
 8002e56:	009b      	lsls	r3, r3, #2
 8002e58:	3338      	adds	r3, #56	; 0x38
 8002e5a:	687a      	ldr	r2, [r7, #4]
 8002e5c:	4413      	add	r3, r2
 8002e5e:	3304      	adds	r3, #4
 8002e60:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	699a      	ldr	r2, [r3, #24]
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	695b      	ldr	r3, [r3, #20]
 8002e6a:	429a      	cmp	r2, r3
 8002e6c:	d901      	bls.n	8002e72 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002e6e:	2301      	movs	r3, #1
 8002e70:	e06c      	b.n	8002f4c <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	695a      	ldr	r2, [r3, #20]
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	699b      	ldr	r3, [r3, #24]
 8002e7a:	1ad3      	subs	r3, r2, r3
 8002e7c:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	689b      	ldr	r3, [r3, #8]
 8002e82:	69fa      	ldr	r2, [r7, #28]
 8002e84:	429a      	cmp	r2, r3
 8002e86:	d902      	bls.n	8002e8e <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	689b      	ldr	r3, [r3, #8]
 8002e8c:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002e8e:	69fb      	ldr	r3, [r7, #28]
 8002e90:	3303      	adds	r3, #3
 8002e92:	089b      	lsrs	r3, r3, #2
 8002e94:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002e96:	e02b      	b.n	8002ef0 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	695a      	ldr	r2, [r3, #20]
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	699b      	ldr	r3, [r3, #24]
 8002ea0:	1ad3      	subs	r3, r2, r3
 8002ea2:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	689b      	ldr	r3, [r3, #8]
 8002ea8:	69fa      	ldr	r2, [r7, #28]
 8002eaa:	429a      	cmp	r2, r3
 8002eac:	d902      	bls.n	8002eb4 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	689b      	ldr	r3, [r3, #8]
 8002eb2:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002eb4:	69fb      	ldr	r3, [r7, #28]
 8002eb6:	3303      	adds	r3, #3
 8002eb8:	089b      	lsrs	r3, r3, #2
 8002eba:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	68d9      	ldr	r1, [r3, #12]
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	b2da      	uxtb	r2, r3
 8002ec4:	69fb      	ldr	r3, [r7, #28]
 8002ec6:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002ecc:	b2db      	uxtb	r3, r3
 8002ece:	9300      	str	r3, [sp, #0]
 8002ed0:	4603      	mov	r3, r0
 8002ed2:	6978      	ldr	r0, [r7, #20]
 8002ed4:	f003 f9c9 	bl	800626a <USB_WritePacket>

    ep->xfer_buff  += len;
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	68da      	ldr	r2, [r3, #12]
 8002edc:	69fb      	ldr	r3, [r7, #28]
 8002ede:	441a      	add	r2, r3
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	699a      	ldr	r2, [r3, #24]
 8002ee8:	69fb      	ldr	r3, [r7, #28]
 8002eea:	441a      	add	r2, r3
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	015a      	lsls	r2, r3, #5
 8002ef4:	693b      	ldr	r3, [r7, #16]
 8002ef6:	4413      	add	r3, r2
 8002ef8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002efc:	699b      	ldr	r3, [r3, #24]
 8002efe:	b29b      	uxth	r3, r3
 8002f00:	69ba      	ldr	r2, [r7, #24]
 8002f02:	429a      	cmp	r2, r3
 8002f04:	d809      	bhi.n	8002f1a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	699a      	ldr	r2, [r3, #24]
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002f0e:	429a      	cmp	r2, r3
 8002f10:	d203      	bcs.n	8002f1a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	695b      	ldr	r3, [r3, #20]
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d1be      	bne.n	8002e98 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	695a      	ldr	r2, [r3, #20]
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	699b      	ldr	r3, [r3, #24]
 8002f22:	429a      	cmp	r2, r3
 8002f24:	d811      	bhi.n	8002f4a <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	f003 030f 	and.w	r3, r3, #15
 8002f2c:	2201      	movs	r2, #1
 8002f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f32:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002f34:	693b      	ldr	r3, [r7, #16]
 8002f36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f3a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002f3c:	68bb      	ldr	r3, [r7, #8]
 8002f3e:	43db      	mvns	r3, r3
 8002f40:	6939      	ldr	r1, [r7, #16]
 8002f42:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002f46:	4013      	ands	r3, r2
 8002f48:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002f4a:	2300      	movs	r3, #0
}
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	3720      	adds	r7, #32
 8002f50:	46bd      	mov	sp, r7
 8002f52:	bd80      	pop	{r7, pc}

08002f54 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b086      	sub	sp, #24
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
 8002f5c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002f64:	697b      	ldr	r3, [r7, #20]
 8002f66:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002f68:	697b      	ldr	r3, [r7, #20]
 8002f6a:	333c      	adds	r3, #60	; 0x3c
 8002f6c:	3304      	adds	r3, #4
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	015a      	lsls	r2, r3, #5
 8002f76:	693b      	ldr	r3, [r7, #16]
 8002f78:	4413      	add	r3, r2
 8002f7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f7e:	689b      	ldr	r3, [r3, #8]
 8002f80:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	691b      	ldr	r3, [r3, #16]
 8002f86:	2b01      	cmp	r3, #1
 8002f88:	f040 80a0 	bne.w	80030cc <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002f8c:	68bb      	ldr	r3, [r7, #8]
 8002f8e:	f003 0308 	and.w	r3, r3, #8
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d015      	beq.n	8002fc2 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	4a72      	ldr	r2, [pc, #456]	; (8003164 <PCD_EP_OutXfrComplete_int+0x210>)
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	f240 80dd 	bls.w	800315a <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002fa0:	68bb      	ldr	r3, [r7, #8]
 8002fa2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	f000 80d7 	beq.w	800315a <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	015a      	lsls	r2, r3, #5
 8002fb0:	693b      	ldr	r3, [r7, #16]
 8002fb2:	4413      	add	r3, r2
 8002fb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002fb8:	461a      	mov	r2, r3
 8002fba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002fbe:	6093      	str	r3, [r2, #8]
 8002fc0:	e0cb      	b.n	800315a <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002fc2:	68bb      	ldr	r3, [r7, #8]
 8002fc4:	f003 0320 	and.w	r3, r3, #32
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d009      	beq.n	8002fe0 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	015a      	lsls	r2, r3, #5
 8002fd0:	693b      	ldr	r3, [r7, #16]
 8002fd2:	4413      	add	r3, r2
 8002fd4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002fd8:	461a      	mov	r2, r3
 8002fda:	2320      	movs	r3, #32
 8002fdc:	6093      	str	r3, [r2, #8]
 8002fde:	e0bc      	b.n	800315a <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002fe0:	68bb      	ldr	r3, [r7, #8]
 8002fe2:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	f040 80b7 	bne.w	800315a <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	4a5d      	ldr	r2, [pc, #372]	; (8003164 <PCD_EP_OutXfrComplete_int+0x210>)
 8002ff0:	4293      	cmp	r3, r2
 8002ff2:	d90f      	bls.n	8003014 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002ff4:	68bb      	ldr	r3, [r7, #8]
 8002ff6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d00a      	beq.n	8003014 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	015a      	lsls	r2, r3, #5
 8003002:	693b      	ldr	r3, [r7, #16]
 8003004:	4413      	add	r3, r2
 8003006:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800300a:	461a      	mov	r2, r3
 800300c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003010:	6093      	str	r3, [r2, #8]
 8003012:	e0a2      	b.n	800315a <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8003014:	6879      	ldr	r1, [r7, #4]
 8003016:	683a      	ldr	r2, [r7, #0]
 8003018:	4613      	mov	r3, r2
 800301a:	00db      	lsls	r3, r3, #3
 800301c:	1a9b      	subs	r3, r3, r2
 800301e:	009b      	lsls	r3, r3, #2
 8003020:	440b      	add	r3, r1
 8003022:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003026:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	0159      	lsls	r1, r3, #5
 800302c:	693b      	ldr	r3, [r7, #16]
 800302e:	440b      	add	r3, r1
 8003030:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003034:	691b      	ldr	r3, [r3, #16]
 8003036:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 800303a:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 800303c:	6878      	ldr	r0, [r7, #4]
 800303e:	683a      	ldr	r2, [r7, #0]
 8003040:	4613      	mov	r3, r2
 8003042:	00db      	lsls	r3, r3, #3
 8003044:	1a9b      	subs	r3, r3, r2
 8003046:	009b      	lsls	r3, r3, #2
 8003048:	4403      	add	r3, r0
 800304a:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800304e:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8003050:	6879      	ldr	r1, [r7, #4]
 8003052:	683a      	ldr	r2, [r7, #0]
 8003054:	4613      	mov	r3, r2
 8003056:	00db      	lsls	r3, r3, #3
 8003058:	1a9b      	subs	r3, r3, r2
 800305a:	009b      	lsls	r3, r3, #2
 800305c:	440b      	add	r3, r1
 800305e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003062:	6819      	ldr	r1, [r3, #0]
 8003064:	6878      	ldr	r0, [r7, #4]
 8003066:	683a      	ldr	r2, [r7, #0]
 8003068:	4613      	mov	r3, r2
 800306a:	00db      	lsls	r3, r3, #3
 800306c:	1a9b      	subs	r3, r3, r2
 800306e:	009b      	lsls	r3, r3, #2
 8003070:	4403      	add	r3, r0
 8003072:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4419      	add	r1, r3
 800307a:	6878      	ldr	r0, [r7, #4]
 800307c:	683a      	ldr	r2, [r7, #0]
 800307e:	4613      	mov	r3, r2
 8003080:	00db      	lsls	r3, r3, #3
 8003082:	1a9b      	subs	r3, r3, r2
 8003084:	009b      	lsls	r3, r3, #2
 8003086:	4403      	add	r3, r0
 8003088:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800308c:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800308e:	683b      	ldr	r3, [r7, #0]
 8003090:	2b00      	cmp	r3, #0
 8003092:	d114      	bne.n	80030be <PCD_EP_OutXfrComplete_int+0x16a>
 8003094:	6879      	ldr	r1, [r7, #4]
 8003096:	683a      	ldr	r2, [r7, #0]
 8003098:	4613      	mov	r3, r2
 800309a:	00db      	lsls	r3, r3, #3
 800309c:	1a9b      	subs	r3, r3, r2
 800309e:	009b      	lsls	r3, r3, #2
 80030a0:	440b      	add	r3, r1
 80030a2:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d108      	bne.n	80030be <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6818      	ldr	r0, [r3, #0]
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80030b6:	461a      	mov	r2, r3
 80030b8:	2101      	movs	r1, #1
 80030ba:	f003 fb6d 	bl	8006798 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80030be:	683b      	ldr	r3, [r7, #0]
 80030c0:	b2db      	uxtb	r3, r3
 80030c2:	4619      	mov	r1, r3
 80030c4:	6878      	ldr	r0, [r7, #4]
 80030c6:	f005 fb89 	bl	80087dc <HAL_PCD_DataOutStageCallback>
 80030ca:	e046      	b.n	800315a <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	4a26      	ldr	r2, [pc, #152]	; (8003168 <PCD_EP_OutXfrComplete_int+0x214>)
 80030d0:	4293      	cmp	r3, r2
 80030d2:	d124      	bne.n	800311e <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80030d4:	68bb      	ldr	r3, [r7, #8]
 80030d6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d00a      	beq.n	80030f4 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	015a      	lsls	r2, r3, #5
 80030e2:	693b      	ldr	r3, [r7, #16]
 80030e4:	4413      	add	r3, r2
 80030e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030ea:	461a      	mov	r2, r3
 80030ec:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80030f0:	6093      	str	r3, [r2, #8]
 80030f2:	e032      	b.n	800315a <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80030f4:	68bb      	ldr	r3, [r7, #8]
 80030f6:	f003 0320 	and.w	r3, r3, #32
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d008      	beq.n	8003110 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80030fe:	683b      	ldr	r3, [r7, #0]
 8003100:	015a      	lsls	r2, r3, #5
 8003102:	693b      	ldr	r3, [r7, #16]
 8003104:	4413      	add	r3, r2
 8003106:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800310a:	461a      	mov	r2, r3
 800310c:	2320      	movs	r3, #32
 800310e:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	b2db      	uxtb	r3, r3
 8003114:	4619      	mov	r1, r3
 8003116:	6878      	ldr	r0, [r7, #4]
 8003118:	f005 fb60 	bl	80087dc <HAL_PCD_DataOutStageCallback>
 800311c:	e01d      	b.n	800315a <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	2b00      	cmp	r3, #0
 8003122:	d114      	bne.n	800314e <PCD_EP_OutXfrComplete_int+0x1fa>
 8003124:	6879      	ldr	r1, [r7, #4]
 8003126:	683a      	ldr	r2, [r7, #0]
 8003128:	4613      	mov	r3, r2
 800312a:	00db      	lsls	r3, r3, #3
 800312c:	1a9b      	subs	r3, r3, r2
 800312e:	009b      	lsls	r3, r3, #2
 8003130:	440b      	add	r3, r1
 8003132:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	2b00      	cmp	r3, #0
 800313a:	d108      	bne.n	800314e <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6818      	ldr	r0, [r3, #0]
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003146:	461a      	mov	r2, r3
 8003148:	2100      	movs	r1, #0
 800314a:	f003 fb25 	bl	8006798 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	b2db      	uxtb	r3, r3
 8003152:	4619      	mov	r1, r3
 8003154:	6878      	ldr	r0, [r7, #4]
 8003156:	f005 fb41 	bl	80087dc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800315a:	2300      	movs	r3, #0
}
 800315c:	4618      	mov	r0, r3
 800315e:	3718      	adds	r7, #24
 8003160:	46bd      	mov	sp, r7
 8003162:	bd80      	pop	{r7, pc}
 8003164:	4f54300a 	.word	0x4f54300a
 8003168:	4f54310a 	.word	0x4f54310a

0800316c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	b086      	sub	sp, #24
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
 8003174:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800317c:	697b      	ldr	r3, [r7, #20]
 800317e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003180:	697b      	ldr	r3, [r7, #20]
 8003182:	333c      	adds	r3, #60	; 0x3c
 8003184:	3304      	adds	r3, #4
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800318a:	683b      	ldr	r3, [r7, #0]
 800318c:	015a      	lsls	r2, r3, #5
 800318e:	693b      	ldr	r3, [r7, #16]
 8003190:	4413      	add	r3, r2
 8003192:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003196:	689b      	ldr	r3, [r3, #8]
 8003198:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	4a15      	ldr	r2, [pc, #84]	; (80031f4 <PCD_EP_OutSetupPacket_int+0x88>)
 800319e:	4293      	cmp	r3, r2
 80031a0:	d90e      	bls.n	80031c0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80031a2:	68bb      	ldr	r3, [r7, #8]
 80031a4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d009      	beq.n	80031c0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	015a      	lsls	r2, r3, #5
 80031b0:	693b      	ldr	r3, [r7, #16]
 80031b2:	4413      	add	r3, r2
 80031b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031b8:	461a      	mov	r2, r3
 80031ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80031be:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80031c0:	6878      	ldr	r0, [r7, #4]
 80031c2:	f005 faf9 	bl	80087b8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	4a0a      	ldr	r2, [pc, #40]	; (80031f4 <PCD_EP_OutSetupPacket_int+0x88>)
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d90c      	bls.n	80031e8 <PCD_EP_OutSetupPacket_int+0x7c>
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	691b      	ldr	r3, [r3, #16]
 80031d2:	2b01      	cmp	r3, #1
 80031d4:	d108      	bne.n	80031e8 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6818      	ldr	r0, [r3, #0]
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80031e0:	461a      	mov	r2, r3
 80031e2:	2101      	movs	r1, #1
 80031e4:	f003 fad8 	bl	8006798 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80031e8:	2300      	movs	r3, #0
}
 80031ea:	4618      	mov	r0, r3
 80031ec:	3718      	adds	r7, #24
 80031ee:	46bd      	mov	sp, r7
 80031f0:	bd80      	pop	{r7, pc}
 80031f2:	bf00      	nop
 80031f4:	4f54300a 	.word	0x4f54300a

080031f8 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80031f8:	b480      	push	{r7}
 80031fa:	b085      	sub	sp, #20
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
 8003200:	460b      	mov	r3, r1
 8003202:	70fb      	strb	r3, [r7, #3]
 8003204:	4613      	mov	r3, r2
 8003206:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800320e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003210:	78fb      	ldrb	r3, [r7, #3]
 8003212:	2b00      	cmp	r3, #0
 8003214:	d107      	bne.n	8003226 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003216:	883b      	ldrh	r3, [r7, #0]
 8003218:	0419      	lsls	r1, r3, #16
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	68ba      	ldr	r2, [r7, #8]
 8003220:	430a      	orrs	r2, r1
 8003222:	629a      	str	r2, [r3, #40]	; 0x28
 8003224:	e028      	b.n	8003278 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800322c:	0c1b      	lsrs	r3, r3, #16
 800322e:	68ba      	ldr	r2, [r7, #8]
 8003230:	4413      	add	r3, r2
 8003232:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003234:	2300      	movs	r3, #0
 8003236:	73fb      	strb	r3, [r7, #15]
 8003238:	e00d      	b.n	8003256 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681a      	ldr	r2, [r3, #0]
 800323e:	7bfb      	ldrb	r3, [r7, #15]
 8003240:	3340      	adds	r3, #64	; 0x40
 8003242:	009b      	lsls	r3, r3, #2
 8003244:	4413      	add	r3, r2
 8003246:	685b      	ldr	r3, [r3, #4]
 8003248:	0c1b      	lsrs	r3, r3, #16
 800324a:	68ba      	ldr	r2, [r7, #8]
 800324c:	4413      	add	r3, r2
 800324e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003250:	7bfb      	ldrb	r3, [r7, #15]
 8003252:	3301      	adds	r3, #1
 8003254:	73fb      	strb	r3, [r7, #15]
 8003256:	7bfa      	ldrb	r2, [r7, #15]
 8003258:	78fb      	ldrb	r3, [r7, #3]
 800325a:	3b01      	subs	r3, #1
 800325c:	429a      	cmp	r2, r3
 800325e:	d3ec      	bcc.n	800323a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003260:	883b      	ldrh	r3, [r7, #0]
 8003262:	0418      	lsls	r0, r3, #16
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6819      	ldr	r1, [r3, #0]
 8003268:	78fb      	ldrb	r3, [r7, #3]
 800326a:	3b01      	subs	r3, #1
 800326c:	68ba      	ldr	r2, [r7, #8]
 800326e:	4302      	orrs	r2, r0
 8003270:	3340      	adds	r3, #64	; 0x40
 8003272:	009b      	lsls	r3, r3, #2
 8003274:	440b      	add	r3, r1
 8003276:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003278:	2300      	movs	r3, #0
}
 800327a:	4618      	mov	r0, r3
 800327c:	3714      	adds	r7, #20
 800327e:	46bd      	mov	sp, r7
 8003280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003284:	4770      	bx	lr

08003286 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003286:	b480      	push	{r7}
 8003288:	b083      	sub	sp, #12
 800328a:	af00      	add	r7, sp, #0
 800328c:	6078      	str	r0, [r7, #4]
 800328e:	460b      	mov	r3, r1
 8003290:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	887a      	ldrh	r2, [r7, #2]
 8003298:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800329a:	2300      	movs	r3, #0
}
 800329c:	4618      	mov	r0, r3
 800329e:	370c      	adds	r7, #12
 80032a0:	46bd      	mov	sp, r7
 80032a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a6:	4770      	bx	lr

080032a8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80032a8:	b480      	push	{r7}
 80032aa:	b083      	sub	sp, #12
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
 80032b0:	460b      	mov	r3, r1
 80032b2:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80032b4:	bf00      	nop
 80032b6:	370c      	adds	r7, #12
 80032b8:	46bd      	mov	sp, r7
 80032ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032be:	4770      	bx	lr

080032c0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b086      	sub	sp, #24
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d101      	bne.n	80032d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80032ce:	2301      	movs	r3, #1
 80032d0:	e267      	b.n	80037a2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f003 0301 	and.w	r3, r3, #1
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d075      	beq.n	80033ca <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80032de:	4b88      	ldr	r3, [pc, #544]	; (8003500 <HAL_RCC_OscConfig+0x240>)
 80032e0:	689b      	ldr	r3, [r3, #8]
 80032e2:	f003 030c 	and.w	r3, r3, #12
 80032e6:	2b04      	cmp	r3, #4
 80032e8:	d00c      	beq.n	8003304 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80032ea:	4b85      	ldr	r3, [pc, #532]	; (8003500 <HAL_RCC_OscConfig+0x240>)
 80032ec:	689b      	ldr	r3, [r3, #8]
 80032ee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80032f2:	2b08      	cmp	r3, #8
 80032f4:	d112      	bne.n	800331c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80032f6:	4b82      	ldr	r3, [pc, #520]	; (8003500 <HAL_RCC_OscConfig+0x240>)
 80032f8:	685b      	ldr	r3, [r3, #4]
 80032fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032fe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003302:	d10b      	bne.n	800331c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003304:	4b7e      	ldr	r3, [pc, #504]	; (8003500 <HAL_RCC_OscConfig+0x240>)
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800330c:	2b00      	cmp	r3, #0
 800330e:	d05b      	beq.n	80033c8 <HAL_RCC_OscConfig+0x108>
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	685b      	ldr	r3, [r3, #4]
 8003314:	2b00      	cmp	r3, #0
 8003316:	d157      	bne.n	80033c8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003318:	2301      	movs	r3, #1
 800331a:	e242      	b.n	80037a2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	685b      	ldr	r3, [r3, #4]
 8003320:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003324:	d106      	bne.n	8003334 <HAL_RCC_OscConfig+0x74>
 8003326:	4b76      	ldr	r3, [pc, #472]	; (8003500 <HAL_RCC_OscConfig+0x240>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	4a75      	ldr	r2, [pc, #468]	; (8003500 <HAL_RCC_OscConfig+0x240>)
 800332c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003330:	6013      	str	r3, [r2, #0]
 8003332:	e01d      	b.n	8003370 <HAL_RCC_OscConfig+0xb0>
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	685b      	ldr	r3, [r3, #4]
 8003338:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800333c:	d10c      	bne.n	8003358 <HAL_RCC_OscConfig+0x98>
 800333e:	4b70      	ldr	r3, [pc, #448]	; (8003500 <HAL_RCC_OscConfig+0x240>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	4a6f      	ldr	r2, [pc, #444]	; (8003500 <HAL_RCC_OscConfig+0x240>)
 8003344:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003348:	6013      	str	r3, [r2, #0]
 800334a:	4b6d      	ldr	r3, [pc, #436]	; (8003500 <HAL_RCC_OscConfig+0x240>)
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	4a6c      	ldr	r2, [pc, #432]	; (8003500 <HAL_RCC_OscConfig+0x240>)
 8003350:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003354:	6013      	str	r3, [r2, #0]
 8003356:	e00b      	b.n	8003370 <HAL_RCC_OscConfig+0xb0>
 8003358:	4b69      	ldr	r3, [pc, #420]	; (8003500 <HAL_RCC_OscConfig+0x240>)
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	4a68      	ldr	r2, [pc, #416]	; (8003500 <HAL_RCC_OscConfig+0x240>)
 800335e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003362:	6013      	str	r3, [r2, #0]
 8003364:	4b66      	ldr	r3, [pc, #408]	; (8003500 <HAL_RCC_OscConfig+0x240>)
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	4a65      	ldr	r2, [pc, #404]	; (8003500 <HAL_RCC_OscConfig+0x240>)
 800336a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800336e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	685b      	ldr	r3, [r3, #4]
 8003374:	2b00      	cmp	r3, #0
 8003376:	d013      	beq.n	80033a0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003378:	f7fd fdb0 	bl	8000edc <HAL_GetTick>
 800337c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800337e:	e008      	b.n	8003392 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003380:	f7fd fdac 	bl	8000edc <HAL_GetTick>
 8003384:	4602      	mov	r2, r0
 8003386:	693b      	ldr	r3, [r7, #16]
 8003388:	1ad3      	subs	r3, r2, r3
 800338a:	2b64      	cmp	r3, #100	; 0x64
 800338c:	d901      	bls.n	8003392 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800338e:	2303      	movs	r3, #3
 8003390:	e207      	b.n	80037a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003392:	4b5b      	ldr	r3, [pc, #364]	; (8003500 <HAL_RCC_OscConfig+0x240>)
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800339a:	2b00      	cmp	r3, #0
 800339c:	d0f0      	beq.n	8003380 <HAL_RCC_OscConfig+0xc0>
 800339e:	e014      	b.n	80033ca <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033a0:	f7fd fd9c 	bl	8000edc <HAL_GetTick>
 80033a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033a6:	e008      	b.n	80033ba <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80033a8:	f7fd fd98 	bl	8000edc <HAL_GetTick>
 80033ac:	4602      	mov	r2, r0
 80033ae:	693b      	ldr	r3, [r7, #16]
 80033b0:	1ad3      	subs	r3, r2, r3
 80033b2:	2b64      	cmp	r3, #100	; 0x64
 80033b4:	d901      	bls.n	80033ba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80033b6:	2303      	movs	r3, #3
 80033b8:	e1f3      	b.n	80037a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033ba:	4b51      	ldr	r3, [pc, #324]	; (8003500 <HAL_RCC_OscConfig+0x240>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d1f0      	bne.n	80033a8 <HAL_RCC_OscConfig+0xe8>
 80033c6:	e000      	b.n	80033ca <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f003 0302 	and.w	r3, r3, #2
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d063      	beq.n	800349e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80033d6:	4b4a      	ldr	r3, [pc, #296]	; (8003500 <HAL_RCC_OscConfig+0x240>)
 80033d8:	689b      	ldr	r3, [r3, #8]
 80033da:	f003 030c 	and.w	r3, r3, #12
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d00b      	beq.n	80033fa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80033e2:	4b47      	ldr	r3, [pc, #284]	; (8003500 <HAL_RCC_OscConfig+0x240>)
 80033e4:	689b      	ldr	r3, [r3, #8]
 80033e6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80033ea:	2b08      	cmp	r3, #8
 80033ec:	d11c      	bne.n	8003428 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80033ee:	4b44      	ldr	r3, [pc, #272]	; (8003500 <HAL_RCC_OscConfig+0x240>)
 80033f0:	685b      	ldr	r3, [r3, #4]
 80033f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d116      	bne.n	8003428 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033fa:	4b41      	ldr	r3, [pc, #260]	; (8003500 <HAL_RCC_OscConfig+0x240>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f003 0302 	and.w	r3, r3, #2
 8003402:	2b00      	cmp	r3, #0
 8003404:	d005      	beq.n	8003412 <HAL_RCC_OscConfig+0x152>
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	68db      	ldr	r3, [r3, #12]
 800340a:	2b01      	cmp	r3, #1
 800340c:	d001      	beq.n	8003412 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800340e:	2301      	movs	r3, #1
 8003410:	e1c7      	b.n	80037a2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003412:	4b3b      	ldr	r3, [pc, #236]	; (8003500 <HAL_RCC_OscConfig+0x240>)
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	691b      	ldr	r3, [r3, #16]
 800341e:	00db      	lsls	r3, r3, #3
 8003420:	4937      	ldr	r1, [pc, #220]	; (8003500 <HAL_RCC_OscConfig+0x240>)
 8003422:	4313      	orrs	r3, r2
 8003424:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003426:	e03a      	b.n	800349e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	68db      	ldr	r3, [r3, #12]
 800342c:	2b00      	cmp	r3, #0
 800342e:	d020      	beq.n	8003472 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003430:	4b34      	ldr	r3, [pc, #208]	; (8003504 <HAL_RCC_OscConfig+0x244>)
 8003432:	2201      	movs	r2, #1
 8003434:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003436:	f7fd fd51 	bl	8000edc <HAL_GetTick>
 800343a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800343c:	e008      	b.n	8003450 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800343e:	f7fd fd4d 	bl	8000edc <HAL_GetTick>
 8003442:	4602      	mov	r2, r0
 8003444:	693b      	ldr	r3, [r7, #16]
 8003446:	1ad3      	subs	r3, r2, r3
 8003448:	2b02      	cmp	r3, #2
 800344a:	d901      	bls.n	8003450 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800344c:	2303      	movs	r3, #3
 800344e:	e1a8      	b.n	80037a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003450:	4b2b      	ldr	r3, [pc, #172]	; (8003500 <HAL_RCC_OscConfig+0x240>)
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f003 0302 	and.w	r3, r3, #2
 8003458:	2b00      	cmp	r3, #0
 800345a:	d0f0      	beq.n	800343e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800345c:	4b28      	ldr	r3, [pc, #160]	; (8003500 <HAL_RCC_OscConfig+0x240>)
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	691b      	ldr	r3, [r3, #16]
 8003468:	00db      	lsls	r3, r3, #3
 800346a:	4925      	ldr	r1, [pc, #148]	; (8003500 <HAL_RCC_OscConfig+0x240>)
 800346c:	4313      	orrs	r3, r2
 800346e:	600b      	str	r3, [r1, #0]
 8003470:	e015      	b.n	800349e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003472:	4b24      	ldr	r3, [pc, #144]	; (8003504 <HAL_RCC_OscConfig+0x244>)
 8003474:	2200      	movs	r2, #0
 8003476:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003478:	f7fd fd30 	bl	8000edc <HAL_GetTick>
 800347c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800347e:	e008      	b.n	8003492 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003480:	f7fd fd2c 	bl	8000edc <HAL_GetTick>
 8003484:	4602      	mov	r2, r0
 8003486:	693b      	ldr	r3, [r7, #16]
 8003488:	1ad3      	subs	r3, r2, r3
 800348a:	2b02      	cmp	r3, #2
 800348c:	d901      	bls.n	8003492 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800348e:	2303      	movs	r3, #3
 8003490:	e187      	b.n	80037a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003492:	4b1b      	ldr	r3, [pc, #108]	; (8003500 <HAL_RCC_OscConfig+0x240>)
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f003 0302 	and.w	r3, r3, #2
 800349a:	2b00      	cmp	r3, #0
 800349c:	d1f0      	bne.n	8003480 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f003 0308 	and.w	r3, r3, #8
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d036      	beq.n	8003518 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	695b      	ldr	r3, [r3, #20]
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d016      	beq.n	80034e0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80034b2:	4b15      	ldr	r3, [pc, #84]	; (8003508 <HAL_RCC_OscConfig+0x248>)
 80034b4:	2201      	movs	r2, #1
 80034b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034b8:	f7fd fd10 	bl	8000edc <HAL_GetTick>
 80034bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034be:	e008      	b.n	80034d2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80034c0:	f7fd fd0c 	bl	8000edc <HAL_GetTick>
 80034c4:	4602      	mov	r2, r0
 80034c6:	693b      	ldr	r3, [r7, #16]
 80034c8:	1ad3      	subs	r3, r2, r3
 80034ca:	2b02      	cmp	r3, #2
 80034cc:	d901      	bls.n	80034d2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80034ce:	2303      	movs	r3, #3
 80034d0:	e167      	b.n	80037a2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034d2:	4b0b      	ldr	r3, [pc, #44]	; (8003500 <HAL_RCC_OscConfig+0x240>)
 80034d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034d6:	f003 0302 	and.w	r3, r3, #2
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d0f0      	beq.n	80034c0 <HAL_RCC_OscConfig+0x200>
 80034de:	e01b      	b.n	8003518 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80034e0:	4b09      	ldr	r3, [pc, #36]	; (8003508 <HAL_RCC_OscConfig+0x248>)
 80034e2:	2200      	movs	r2, #0
 80034e4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034e6:	f7fd fcf9 	bl	8000edc <HAL_GetTick>
 80034ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034ec:	e00e      	b.n	800350c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80034ee:	f7fd fcf5 	bl	8000edc <HAL_GetTick>
 80034f2:	4602      	mov	r2, r0
 80034f4:	693b      	ldr	r3, [r7, #16]
 80034f6:	1ad3      	subs	r3, r2, r3
 80034f8:	2b02      	cmp	r3, #2
 80034fa:	d907      	bls.n	800350c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80034fc:	2303      	movs	r3, #3
 80034fe:	e150      	b.n	80037a2 <HAL_RCC_OscConfig+0x4e2>
 8003500:	40023800 	.word	0x40023800
 8003504:	42470000 	.word	0x42470000
 8003508:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800350c:	4b88      	ldr	r3, [pc, #544]	; (8003730 <HAL_RCC_OscConfig+0x470>)
 800350e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003510:	f003 0302 	and.w	r3, r3, #2
 8003514:	2b00      	cmp	r3, #0
 8003516:	d1ea      	bne.n	80034ee <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f003 0304 	and.w	r3, r3, #4
 8003520:	2b00      	cmp	r3, #0
 8003522:	f000 8097 	beq.w	8003654 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003526:	2300      	movs	r3, #0
 8003528:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800352a:	4b81      	ldr	r3, [pc, #516]	; (8003730 <HAL_RCC_OscConfig+0x470>)
 800352c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800352e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003532:	2b00      	cmp	r3, #0
 8003534:	d10f      	bne.n	8003556 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003536:	2300      	movs	r3, #0
 8003538:	60bb      	str	r3, [r7, #8]
 800353a:	4b7d      	ldr	r3, [pc, #500]	; (8003730 <HAL_RCC_OscConfig+0x470>)
 800353c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800353e:	4a7c      	ldr	r2, [pc, #496]	; (8003730 <HAL_RCC_OscConfig+0x470>)
 8003540:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003544:	6413      	str	r3, [r2, #64]	; 0x40
 8003546:	4b7a      	ldr	r3, [pc, #488]	; (8003730 <HAL_RCC_OscConfig+0x470>)
 8003548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800354a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800354e:	60bb      	str	r3, [r7, #8]
 8003550:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003552:	2301      	movs	r3, #1
 8003554:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003556:	4b77      	ldr	r3, [pc, #476]	; (8003734 <HAL_RCC_OscConfig+0x474>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800355e:	2b00      	cmp	r3, #0
 8003560:	d118      	bne.n	8003594 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003562:	4b74      	ldr	r3, [pc, #464]	; (8003734 <HAL_RCC_OscConfig+0x474>)
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	4a73      	ldr	r2, [pc, #460]	; (8003734 <HAL_RCC_OscConfig+0x474>)
 8003568:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800356c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800356e:	f7fd fcb5 	bl	8000edc <HAL_GetTick>
 8003572:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003574:	e008      	b.n	8003588 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003576:	f7fd fcb1 	bl	8000edc <HAL_GetTick>
 800357a:	4602      	mov	r2, r0
 800357c:	693b      	ldr	r3, [r7, #16]
 800357e:	1ad3      	subs	r3, r2, r3
 8003580:	2b02      	cmp	r3, #2
 8003582:	d901      	bls.n	8003588 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003584:	2303      	movs	r3, #3
 8003586:	e10c      	b.n	80037a2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003588:	4b6a      	ldr	r3, [pc, #424]	; (8003734 <HAL_RCC_OscConfig+0x474>)
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003590:	2b00      	cmp	r3, #0
 8003592:	d0f0      	beq.n	8003576 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	689b      	ldr	r3, [r3, #8]
 8003598:	2b01      	cmp	r3, #1
 800359a:	d106      	bne.n	80035aa <HAL_RCC_OscConfig+0x2ea>
 800359c:	4b64      	ldr	r3, [pc, #400]	; (8003730 <HAL_RCC_OscConfig+0x470>)
 800359e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035a0:	4a63      	ldr	r2, [pc, #396]	; (8003730 <HAL_RCC_OscConfig+0x470>)
 80035a2:	f043 0301 	orr.w	r3, r3, #1
 80035a6:	6713      	str	r3, [r2, #112]	; 0x70
 80035a8:	e01c      	b.n	80035e4 <HAL_RCC_OscConfig+0x324>
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	689b      	ldr	r3, [r3, #8]
 80035ae:	2b05      	cmp	r3, #5
 80035b0:	d10c      	bne.n	80035cc <HAL_RCC_OscConfig+0x30c>
 80035b2:	4b5f      	ldr	r3, [pc, #380]	; (8003730 <HAL_RCC_OscConfig+0x470>)
 80035b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035b6:	4a5e      	ldr	r2, [pc, #376]	; (8003730 <HAL_RCC_OscConfig+0x470>)
 80035b8:	f043 0304 	orr.w	r3, r3, #4
 80035bc:	6713      	str	r3, [r2, #112]	; 0x70
 80035be:	4b5c      	ldr	r3, [pc, #368]	; (8003730 <HAL_RCC_OscConfig+0x470>)
 80035c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035c2:	4a5b      	ldr	r2, [pc, #364]	; (8003730 <HAL_RCC_OscConfig+0x470>)
 80035c4:	f043 0301 	orr.w	r3, r3, #1
 80035c8:	6713      	str	r3, [r2, #112]	; 0x70
 80035ca:	e00b      	b.n	80035e4 <HAL_RCC_OscConfig+0x324>
 80035cc:	4b58      	ldr	r3, [pc, #352]	; (8003730 <HAL_RCC_OscConfig+0x470>)
 80035ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035d0:	4a57      	ldr	r2, [pc, #348]	; (8003730 <HAL_RCC_OscConfig+0x470>)
 80035d2:	f023 0301 	bic.w	r3, r3, #1
 80035d6:	6713      	str	r3, [r2, #112]	; 0x70
 80035d8:	4b55      	ldr	r3, [pc, #340]	; (8003730 <HAL_RCC_OscConfig+0x470>)
 80035da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035dc:	4a54      	ldr	r2, [pc, #336]	; (8003730 <HAL_RCC_OscConfig+0x470>)
 80035de:	f023 0304 	bic.w	r3, r3, #4
 80035e2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	689b      	ldr	r3, [r3, #8]
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d015      	beq.n	8003618 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035ec:	f7fd fc76 	bl	8000edc <HAL_GetTick>
 80035f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035f2:	e00a      	b.n	800360a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80035f4:	f7fd fc72 	bl	8000edc <HAL_GetTick>
 80035f8:	4602      	mov	r2, r0
 80035fa:	693b      	ldr	r3, [r7, #16]
 80035fc:	1ad3      	subs	r3, r2, r3
 80035fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8003602:	4293      	cmp	r3, r2
 8003604:	d901      	bls.n	800360a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003606:	2303      	movs	r3, #3
 8003608:	e0cb      	b.n	80037a2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800360a:	4b49      	ldr	r3, [pc, #292]	; (8003730 <HAL_RCC_OscConfig+0x470>)
 800360c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800360e:	f003 0302 	and.w	r3, r3, #2
 8003612:	2b00      	cmp	r3, #0
 8003614:	d0ee      	beq.n	80035f4 <HAL_RCC_OscConfig+0x334>
 8003616:	e014      	b.n	8003642 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003618:	f7fd fc60 	bl	8000edc <HAL_GetTick>
 800361c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800361e:	e00a      	b.n	8003636 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003620:	f7fd fc5c 	bl	8000edc <HAL_GetTick>
 8003624:	4602      	mov	r2, r0
 8003626:	693b      	ldr	r3, [r7, #16]
 8003628:	1ad3      	subs	r3, r2, r3
 800362a:	f241 3288 	movw	r2, #5000	; 0x1388
 800362e:	4293      	cmp	r3, r2
 8003630:	d901      	bls.n	8003636 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003632:	2303      	movs	r3, #3
 8003634:	e0b5      	b.n	80037a2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003636:	4b3e      	ldr	r3, [pc, #248]	; (8003730 <HAL_RCC_OscConfig+0x470>)
 8003638:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800363a:	f003 0302 	and.w	r3, r3, #2
 800363e:	2b00      	cmp	r3, #0
 8003640:	d1ee      	bne.n	8003620 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003642:	7dfb      	ldrb	r3, [r7, #23]
 8003644:	2b01      	cmp	r3, #1
 8003646:	d105      	bne.n	8003654 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003648:	4b39      	ldr	r3, [pc, #228]	; (8003730 <HAL_RCC_OscConfig+0x470>)
 800364a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800364c:	4a38      	ldr	r2, [pc, #224]	; (8003730 <HAL_RCC_OscConfig+0x470>)
 800364e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003652:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	699b      	ldr	r3, [r3, #24]
 8003658:	2b00      	cmp	r3, #0
 800365a:	f000 80a1 	beq.w	80037a0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800365e:	4b34      	ldr	r3, [pc, #208]	; (8003730 <HAL_RCC_OscConfig+0x470>)
 8003660:	689b      	ldr	r3, [r3, #8]
 8003662:	f003 030c 	and.w	r3, r3, #12
 8003666:	2b08      	cmp	r3, #8
 8003668:	d05c      	beq.n	8003724 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	699b      	ldr	r3, [r3, #24]
 800366e:	2b02      	cmp	r3, #2
 8003670:	d141      	bne.n	80036f6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003672:	4b31      	ldr	r3, [pc, #196]	; (8003738 <HAL_RCC_OscConfig+0x478>)
 8003674:	2200      	movs	r2, #0
 8003676:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003678:	f7fd fc30 	bl	8000edc <HAL_GetTick>
 800367c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800367e:	e008      	b.n	8003692 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003680:	f7fd fc2c 	bl	8000edc <HAL_GetTick>
 8003684:	4602      	mov	r2, r0
 8003686:	693b      	ldr	r3, [r7, #16]
 8003688:	1ad3      	subs	r3, r2, r3
 800368a:	2b02      	cmp	r3, #2
 800368c:	d901      	bls.n	8003692 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800368e:	2303      	movs	r3, #3
 8003690:	e087      	b.n	80037a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003692:	4b27      	ldr	r3, [pc, #156]	; (8003730 <HAL_RCC_OscConfig+0x470>)
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800369a:	2b00      	cmp	r3, #0
 800369c:	d1f0      	bne.n	8003680 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	69da      	ldr	r2, [r3, #28]
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6a1b      	ldr	r3, [r3, #32]
 80036a6:	431a      	orrs	r2, r3
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ac:	019b      	lsls	r3, r3, #6
 80036ae:	431a      	orrs	r2, r3
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036b4:	085b      	lsrs	r3, r3, #1
 80036b6:	3b01      	subs	r3, #1
 80036b8:	041b      	lsls	r3, r3, #16
 80036ba:	431a      	orrs	r2, r3
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036c0:	061b      	lsls	r3, r3, #24
 80036c2:	491b      	ldr	r1, [pc, #108]	; (8003730 <HAL_RCC_OscConfig+0x470>)
 80036c4:	4313      	orrs	r3, r2
 80036c6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80036c8:	4b1b      	ldr	r3, [pc, #108]	; (8003738 <HAL_RCC_OscConfig+0x478>)
 80036ca:	2201      	movs	r2, #1
 80036cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036ce:	f7fd fc05 	bl	8000edc <HAL_GetTick>
 80036d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036d4:	e008      	b.n	80036e8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80036d6:	f7fd fc01 	bl	8000edc <HAL_GetTick>
 80036da:	4602      	mov	r2, r0
 80036dc:	693b      	ldr	r3, [r7, #16]
 80036de:	1ad3      	subs	r3, r2, r3
 80036e0:	2b02      	cmp	r3, #2
 80036e2:	d901      	bls.n	80036e8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80036e4:	2303      	movs	r3, #3
 80036e6:	e05c      	b.n	80037a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036e8:	4b11      	ldr	r3, [pc, #68]	; (8003730 <HAL_RCC_OscConfig+0x470>)
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d0f0      	beq.n	80036d6 <HAL_RCC_OscConfig+0x416>
 80036f4:	e054      	b.n	80037a0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036f6:	4b10      	ldr	r3, [pc, #64]	; (8003738 <HAL_RCC_OscConfig+0x478>)
 80036f8:	2200      	movs	r2, #0
 80036fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036fc:	f7fd fbee 	bl	8000edc <HAL_GetTick>
 8003700:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003702:	e008      	b.n	8003716 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003704:	f7fd fbea 	bl	8000edc <HAL_GetTick>
 8003708:	4602      	mov	r2, r0
 800370a:	693b      	ldr	r3, [r7, #16]
 800370c:	1ad3      	subs	r3, r2, r3
 800370e:	2b02      	cmp	r3, #2
 8003710:	d901      	bls.n	8003716 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003712:	2303      	movs	r3, #3
 8003714:	e045      	b.n	80037a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003716:	4b06      	ldr	r3, [pc, #24]	; (8003730 <HAL_RCC_OscConfig+0x470>)
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800371e:	2b00      	cmp	r3, #0
 8003720:	d1f0      	bne.n	8003704 <HAL_RCC_OscConfig+0x444>
 8003722:	e03d      	b.n	80037a0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	699b      	ldr	r3, [r3, #24]
 8003728:	2b01      	cmp	r3, #1
 800372a:	d107      	bne.n	800373c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800372c:	2301      	movs	r3, #1
 800372e:	e038      	b.n	80037a2 <HAL_RCC_OscConfig+0x4e2>
 8003730:	40023800 	.word	0x40023800
 8003734:	40007000 	.word	0x40007000
 8003738:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800373c:	4b1b      	ldr	r3, [pc, #108]	; (80037ac <HAL_RCC_OscConfig+0x4ec>)
 800373e:	685b      	ldr	r3, [r3, #4]
 8003740:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	699b      	ldr	r3, [r3, #24]
 8003746:	2b01      	cmp	r3, #1
 8003748:	d028      	beq.n	800379c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003754:	429a      	cmp	r2, r3
 8003756:	d121      	bne.n	800379c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003762:	429a      	cmp	r2, r3
 8003764:	d11a      	bne.n	800379c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003766:	68fa      	ldr	r2, [r7, #12]
 8003768:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800376c:	4013      	ands	r3, r2
 800376e:	687a      	ldr	r2, [r7, #4]
 8003770:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003772:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003774:	4293      	cmp	r3, r2
 8003776:	d111      	bne.n	800379c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003782:	085b      	lsrs	r3, r3, #1
 8003784:	3b01      	subs	r3, #1
 8003786:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003788:	429a      	cmp	r2, r3
 800378a:	d107      	bne.n	800379c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003796:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003798:	429a      	cmp	r2, r3
 800379a:	d001      	beq.n	80037a0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800379c:	2301      	movs	r3, #1
 800379e:	e000      	b.n	80037a2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80037a0:	2300      	movs	r3, #0
}
 80037a2:	4618      	mov	r0, r3
 80037a4:	3718      	adds	r7, #24
 80037a6:	46bd      	mov	sp, r7
 80037a8:	bd80      	pop	{r7, pc}
 80037aa:	bf00      	nop
 80037ac:	40023800 	.word	0x40023800

080037b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b084      	sub	sp, #16
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
 80037b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d101      	bne.n	80037c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80037c0:	2301      	movs	r3, #1
 80037c2:	e0cc      	b.n	800395e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80037c4:	4b68      	ldr	r3, [pc, #416]	; (8003968 <HAL_RCC_ClockConfig+0x1b8>)
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f003 0307 	and.w	r3, r3, #7
 80037cc:	683a      	ldr	r2, [r7, #0]
 80037ce:	429a      	cmp	r2, r3
 80037d0:	d90c      	bls.n	80037ec <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037d2:	4b65      	ldr	r3, [pc, #404]	; (8003968 <HAL_RCC_ClockConfig+0x1b8>)
 80037d4:	683a      	ldr	r2, [r7, #0]
 80037d6:	b2d2      	uxtb	r2, r2
 80037d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80037da:	4b63      	ldr	r3, [pc, #396]	; (8003968 <HAL_RCC_ClockConfig+0x1b8>)
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f003 0307 	and.w	r3, r3, #7
 80037e2:	683a      	ldr	r2, [r7, #0]
 80037e4:	429a      	cmp	r2, r3
 80037e6:	d001      	beq.n	80037ec <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80037e8:	2301      	movs	r3, #1
 80037ea:	e0b8      	b.n	800395e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f003 0302 	and.w	r3, r3, #2
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d020      	beq.n	800383a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f003 0304 	and.w	r3, r3, #4
 8003800:	2b00      	cmp	r3, #0
 8003802:	d005      	beq.n	8003810 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003804:	4b59      	ldr	r3, [pc, #356]	; (800396c <HAL_RCC_ClockConfig+0x1bc>)
 8003806:	689b      	ldr	r3, [r3, #8]
 8003808:	4a58      	ldr	r2, [pc, #352]	; (800396c <HAL_RCC_ClockConfig+0x1bc>)
 800380a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800380e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f003 0308 	and.w	r3, r3, #8
 8003818:	2b00      	cmp	r3, #0
 800381a:	d005      	beq.n	8003828 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800381c:	4b53      	ldr	r3, [pc, #332]	; (800396c <HAL_RCC_ClockConfig+0x1bc>)
 800381e:	689b      	ldr	r3, [r3, #8]
 8003820:	4a52      	ldr	r2, [pc, #328]	; (800396c <HAL_RCC_ClockConfig+0x1bc>)
 8003822:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003826:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003828:	4b50      	ldr	r3, [pc, #320]	; (800396c <HAL_RCC_ClockConfig+0x1bc>)
 800382a:	689b      	ldr	r3, [r3, #8]
 800382c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	689b      	ldr	r3, [r3, #8]
 8003834:	494d      	ldr	r1, [pc, #308]	; (800396c <HAL_RCC_ClockConfig+0x1bc>)
 8003836:	4313      	orrs	r3, r2
 8003838:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f003 0301 	and.w	r3, r3, #1
 8003842:	2b00      	cmp	r3, #0
 8003844:	d044      	beq.n	80038d0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	685b      	ldr	r3, [r3, #4]
 800384a:	2b01      	cmp	r3, #1
 800384c:	d107      	bne.n	800385e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800384e:	4b47      	ldr	r3, [pc, #284]	; (800396c <HAL_RCC_ClockConfig+0x1bc>)
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003856:	2b00      	cmp	r3, #0
 8003858:	d119      	bne.n	800388e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800385a:	2301      	movs	r3, #1
 800385c:	e07f      	b.n	800395e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	685b      	ldr	r3, [r3, #4]
 8003862:	2b02      	cmp	r3, #2
 8003864:	d003      	beq.n	800386e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800386a:	2b03      	cmp	r3, #3
 800386c:	d107      	bne.n	800387e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800386e:	4b3f      	ldr	r3, [pc, #252]	; (800396c <HAL_RCC_ClockConfig+0x1bc>)
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003876:	2b00      	cmp	r3, #0
 8003878:	d109      	bne.n	800388e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800387a:	2301      	movs	r3, #1
 800387c:	e06f      	b.n	800395e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800387e:	4b3b      	ldr	r3, [pc, #236]	; (800396c <HAL_RCC_ClockConfig+0x1bc>)
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f003 0302 	and.w	r3, r3, #2
 8003886:	2b00      	cmp	r3, #0
 8003888:	d101      	bne.n	800388e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800388a:	2301      	movs	r3, #1
 800388c:	e067      	b.n	800395e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800388e:	4b37      	ldr	r3, [pc, #220]	; (800396c <HAL_RCC_ClockConfig+0x1bc>)
 8003890:	689b      	ldr	r3, [r3, #8]
 8003892:	f023 0203 	bic.w	r2, r3, #3
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	685b      	ldr	r3, [r3, #4]
 800389a:	4934      	ldr	r1, [pc, #208]	; (800396c <HAL_RCC_ClockConfig+0x1bc>)
 800389c:	4313      	orrs	r3, r2
 800389e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80038a0:	f7fd fb1c 	bl	8000edc <HAL_GetTick>
 80038a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038a6:	e00a      	b.n	80038be <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80038a8:	f7fd fb18 	bl	8000edc <HAL_GetTick>
 80038ac:	4602      	mov	r2, r0
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	1ad3      	subs	r3, r2, r3
 80038b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d901      	bls.n	80038be <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80038ba:	2303      	movs	r3, #3
 80038bc:	e04f      	b.n	800395e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038be:	4b2b      	ldr	r3, [pc, #172]	; (800396c <HAL_RCC_ClockConfig+0x1bc>)
 80038c0:	689b      	ldr	r3, [r3, #8]
 80038c2:	f003 020c 	and.w	r2, r3, #12
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	685b      	ldr	r3, [r3, #4]
 80038ca:	009b      	lsls	r3, r3, #2
 80038cc:	429a      	cmp	r2, r3
 80038ce:	d1eb      	bne.n	80038a8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80038d0:	4b25      	ldr	r3, [pc, #148]	; (8003968 <HAL_RCC_ClockConfig+0x1b8>)
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f003 0307 	and.w	r3, r3, #7
 80038d8:	683a      	ldr	r2, [r7, #0]
 80038da:	429a      	cmp	r2, r3
 80038dc:	d20c      	bcs.n	80038f8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038de:	4b22      	ldr	r3, [pc, #136]	; (8003968 <HAL_RCC_ClockConfig+0x1b8>)
 80038e0:	683a      	ldr	r2, [r7, #0]
 80038e2:	b2d2      	uxtb	r2, r2
 80038e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80038e6:	4b20      	ldr	r3, [pc, #128]	; (8003968 <HAL_RCC_ClockConfig+0x1b8>)
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f003 0307 	and.w	r3, r3, #7
 80038ee:	683a      	ldr	r2, [r7, #0]
 80038f0:	429a      	cmp	r2, r3
 80038f2:	d001      	beq.n	80038f8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80038f4:	2301      	movs	r3, #1
 80038f6:	e032      	b.n	800395e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f003 0304 	and.w	r3, r3, #4
 8003900:	2b00      	cmp	r3, #0
 8003902:	d008      	beq.n	8003916 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003904:	4b19      	ldr	r3, [pc, #100]	; (800396c <HAL_RCC_ClockConfig+0x1bc>)
 8003906:	689b      	ldr	r3, [r3, #8]
 8003908:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	68db      	ldr	r3, [r3, #12]
 8003910:	4916      	ldr	r1, [pc, #88]	; (800396c <HAL_RCC_ClockConfig+0x1bc>)
 8003912:	4313      	orrs	r3, r2
 8003914:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f003 0308 	and.w	r3, r3, #8
 800391e:	2b00      	cmp	r3, #0
 8003920:	d009      	beq.n	8003936 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003922:	4b12      	ldr	r3, [pc, #72]	; (800396c <HAL_RCC_ClockConfig+0x1bc>)
 8003924:	689b      	ldr	r3, [r3, #8]
 8003926:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	691b      	ldr	r3, [r3, #16]
 800392e:	00db      	lsls	r3, r3, #3
 8003930:	490e      	ldr	r1, [pc, #56]	; (800396c <HAL_RCC_ClockConfig+0x1bc>)
 8003932:	4313      	orrs	r3, r2
 8003934:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003936:	f000 f821 	bl	800397c <HAL_RCC_GetSysClockFreq>
 800393a:	4602      	mov	r2, r0
 800393c:	4b0b      	ldr	r3, [pc, #44]	; (800396c <HAL_RCC_ClockConfig+0x1bc>)
 800393e:	689b      	ldr	r3, [r3, #8]
 8003940:	091b      	lsrs	r3, r3, #4
 8003942:	f003 030f 	and.w	r3, r3, #15
 8003946:	490a      	ldr	r1, [pc, #40]	; (8003970 <HAL_RCC_ClockConfig+0x1c0>)
 8003948:	5ccb      	ldrb	r3, [r1, r3]
 800394a:	fa22 f303 	lsr.w	r3, r2, r3
 800394e:	4a09      	ldr	r2, [pc, #36]	; (8003974 <HAL_RCC_ClockConfig+0x1c4>)
 8003950:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003952:	4b09      	ldr	r3, [pc, #36]	; (8003978 <HAL_RCC_ClockConfig+0x1c8>)
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	4618      	mov	r0, r3
 8003958:	f7fd fa7c 	bl	8000e54 <HAL_InitTick>

  return HAL_OK;
 800395c:	2300      	movs	r3, #0
}
 800395e:	4618      	mov	r0, r3
 8003960:	3710      	adds	r7, #16
 8003962:	46bd      	mov	sp, r7
 8003964:	bd80      	pop	{r7, pc}
 8003966:	bf00      	nop
 8003968:	40023c00 	.word	0x40023c00
 800396c:	40023800 	.word	0x40023800
 8003970:	08008df4 	.word	0x08008df4
 8003974:	20000000 	.word	0x20000000
 8003978:	20000028 	.word	0x20000028

0800397c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800397c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003980:	b090      	sub	sp, #64	; 0x40
 8003982:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003984:	2300      	movs	r3, #0
 8003986:	637b      	str	r3, [r7, #52]	; 0x34
 8003988:	2300      	movs	r3, #0
 800398a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800398c:	2300      	movs	r3, #0
 800398e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003990:	2300      	movs	r3, #0
 8003992:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003994:	4b59      	ldr	r3, [pc, #356]	; (8003afc <HAL_RCC_GetSysClockFreq+0x180>)
 8003996:	689b      	ldr	r3, [r3, #8]
 8003998:	f003 030c 	and.w	r3, r3, #12
 800399c:	2b08      	cmp	r3, #8
 800399e:	d00d      	beq.n	80039bc <HAL_RCC_GetSysClockFreq+0x40>
 80039a0:	2b08      	cmp	r3, #8
 80039a2:	f200 80a1 	bhi.w	8003ae8 <HAL_RCC_GetSysClockFreq+0x16c>
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d002      	beq.n	80039b0 <HAL_RCC_GetSysClockFreq+0x34>
 80039aa:	2b04      	cmp	r3, #4
 80039ac:	d003      	beq.n	80039b6 <HAL_RCC_GetSysClockFreq+0x3a>
 80039ae:	e09b      	b.n	8003ae8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80039b0:	4b53      	ldr	r3, [pc, #332]	; (8003b00 <HAL_RCC_GetSysClockFreq+0x184>)
 80039b2:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80039b4:	e09b      	b.n	8003aee <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80039b6:	4b53      	ldr	r3, [pc, #332]	; (8003b04 <HAL_RCC_GetSysClockFreq+0x188>)
 80039b8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80039ba:	e098      	b.n	8003aee <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80039bc:	4b4f      	ldr	r3, [pc, #316]	; (8003afc <HAL_RCC_GetSysClockFreq+0x180>)
 80039be:	685b      	ldr	r3, [r3, #4]
 80039c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80039c4:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80039c6:	4b4d      	ldr	r3, [pc, #308]	; (8003afc <HAL_RCC_GetSysClockFreq+0x180>)
 80039c8:	685b      	ldr	r3, [r3, #4]
 80039ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d028      	beq.n	8003a24 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80039d2:	4b4a      	ldr	r3, [pc, #296]	; (8003afc <HAL_RCC_GetSysClockFreq+0x180>)
 80039d4:	685b      	ldr	r3, [r3, #4]
 80039d6:	099b      	lsrs	r3, r3, #6
 80039d8:	2200      	movs	r2, #0
 80039da:	623b      	str	r3, [r7, #32]
 80039dc:	627a      	str	r2, [r7, #36]	; 0x24
 80039de:	6a3b      	ldr	r3, [r7, #32]
 80039e0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80039e4:	2100      	movs	r1, #0
 80039e6:	4b47      	ldr	r3, [pc, #284]	; (8003b04 <HAL_RCC_GetSysClockFreq+0x188>)
 80039e8:	fb03 f201 	mul.w	r2, r3, r1
 80039ec:	2300      	movs	r3, #0
 80039ee:	fb00 f303 	mul.w	r3, r0, r3
 80039f2:	4413      	add	r3, r2
 80039f4:	4a43      	ldr	r2, [pc, #268]	; (8003b04 <HAL_RCC_GetSysClockFreq+0x188>)
 80039f6:	fba0 1202 	umull	r1, r2, r0, r2
 80039fa:	62fa      	str	r2, [r7, #44]	; 0x2c
 80039fc:	460a      	mov	r2, r1
 80039fe:	62ba      	str	r2, [r7, #40]	; 0x28
 8003a00:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003a02:	4413      	add	r3, r2
 8003a04:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003a06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a08:	2200      	movs	r2, #0
 8003a0a:	61bb      	str	r3, [r7, #24]
 8003a0c:	61fa      	str	r2, [r7, #28]
 8003a0e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003a12:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003a16:	f7fc fbdf 	bl	80001d8 <__aeabi_uldivmod>
 8003a1a:	4602      	mov	r2, r0
 8003a1c:	460b      	mov	r3, r1
 8003a1e:	4613      	mov	r3, r2
 8003a20:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003a22:	e053      	b.n	8003acc <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a24:	4b35      	ldr	r3, [pc, #212]	; (8003afc <HAL_RCC_GetSysClockFreq+0x180>)
 8003a26:	685b      	ldr	r3, [r3, #4]
 8003a28:	099b      	lsrs	r3, r3, #6
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	613b      	str	r3, [r7, #16]
 8003a2e:	617a      	str	r2, [r7, #20]
 8003a30:	693b      	ldr	r3, [r7, #16]
 8003a32:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003a36:	f04f 0b00 	mov.w	fp, #0
 8003a3a:	4652      	mov	r2, sl
 8003a3c:	465b      	mov	r3, fp
 8003a3e:	f04f 0000 	mov.w	r0, #0
 8003a42:	f04f 0100 	mov.w	r1, #0
 8003a46:	0159      	lsls	r1, r3, #5
 8003a48:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003a4c:	0150      	lsls	r0, r2, #5
 8003a4e:	4602      	mov	r2, r0
 8003a50:	460b      	mov	r3, r1
 8003a52:	ebb2 080a 	subs.w	r8, r2, sl
 8003a56:	eb63 090b 	sbc.w	r9, r3, fp
 8003a5a:	f04f 0200 	mov.w	r2, #0
 8003a5e:	f04f 0300 	mov.w	r3, #0
 8003a62:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003a66:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003a6a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003a6e:	ebb2 0408 	subs.w	r4, r2, r8
 8003a72:	eb63 0509 	sbc.w	r5, r3, r9
 8003a76:	f04f 0200 	mov.w	r2, #0
 8003a7a:	f04f 0300 	mov.w	r3, #0
 8003a7e:	00eb      	lsls	r3, r5, #3
 8003a80:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003a84:	00e2      	lsls	r2, r4, #3
 8003a86:	4614      	mov	r4, r2
 8003a88:	461d      	mov	r5, r3
 8003a8a:	eb14 030a 	adds.w	r3, r4, sl
 8003a8e:	603b      	str	r3, [r7, #0]
 8003a90:	eb45 030b 	adc.w	r3, r5, fp
 8003a94:	607b      	str	r3, [r7, #4]
 8003a96:	f04f 0200 	mov.w	r2, #0
 8003a9a:	f04f 0300 	mov.w	r3, #0
 8003a9e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003aa2:	4629      	mov	r1, r5
 8003aa4:	028b      	lsls	r3, r1, #10
 8003aa6:	4621      	mov	r1, r4
 8003aa8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003aac:	4621      	mov	r1, r4
 8003aae:	028a      	lsls	r2, r1, #10
 8003ab0:	4610      	mov	r0, r2
 8003ab2:	4619      	mov	r1, r3
 8003ab4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	60bb      	str	r3, [r7, #8]
 8003aba:	60fa      	str	r2, [r7, #12]
 8003abc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003ac0:	f7fc fb8a 	bl	80001d8 <__aeabi_uldivmod>
 8003ac4:	4602      	mov	r2, r0
 8003ac6:	460b      	mov	r3, r1
 8003ac8:	4613      	mov	r3, r2
 8003aca:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003acc:	4b0b      	ldr	r3, [pc, #44]	; (8003afc <HAL_RCC_GetSysClockFreq+0x180>)
 8003ace:	685b      	ldr	r3, [r3, #4]
 8003ad0:	0c1b      	lsrs	r3, r3, #16
 8003ad2:	f003 0303 	and.w	r3, r3, #3
 8003ad6:	3301      	adds	r3, #1
 8003ad8:	005b      	lsls	r3, r3, #1
 8003ada:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003adc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003ade:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ae0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ae4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003ae6:	e002      	b.n	8003aee <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003ae8:	4b05      	ldr	r3, [pc, #20]	; (8003b00 <HAL_RCC_GetSysClockFreq+0x184>)
 8003aea:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003aec:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003aee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003af0:	4618      	mov	r0, r3
 8003af2:	3740      	adds	r7, #64	; 0x40
 8003af4:	46bd      	mov	sp, r7
 8003af6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003afa:	bf00      	nop
 8003afc:	40023800 	.word	0x40023800
 8003b00:	00f42400 	.word	0x00f42400
 8003b04:	017d7840 	.word	0x017d7840

08003b08 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b08:	b480      	push	{r7}
 8003b0a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003b0c:	4b03      	ldr	r3, [pc, #12]	; (8003b1c <HAL_RCC_GetHCLKFreq+0x14>)
 8003b0e:	681b      	ldr	r3, [r3, #0]
}
 8003b10:	4618      	mov	r0, r3
 8003b12:	46bd      	mov	sp, r7
 8003b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b18:	4770      	bx	lr
 8003b1a:	bf00      	nop
 8003b1c:	20000000 	.word	0x20000000

08003b20 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003b24:	f7ff fff0 	bl	8003b08 <HAL_RCC_GetHCLKFreq>
 8003b28:	4602      	mov	r2, r0
 8003b2a:	4b05      	ldr	r3, [pc, #20]	; (8003b40 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003b2c:	689b      	ldr	r3, [r3, #8]
 8003b2e:	0a9b      	lsrs	r3, r3, #10
 8003b30:	f003 0307 	and.w	r3, r3, #7
 8003b34:	4903      	ldr	r1, [pc, #12]	; (8003b44 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003b36:	5ccb      	ldrb	r3, [r1, r3]
 8003b38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	bd80      	pop	{r7, pc}
 8003b40:	40023800 	.word	0x40023800
 8003b44:	08008e04 	.word	0x08008e04

08003b48 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003b4c:	f7ff ffdc 	bl	8003b08 <HAL_RCC_GetHCLKFreq>
 8003b50:	4602      	mov	r2, r0
 8003b52:	4b05      	ldr	r3, [pc, #20]	; (8003b68 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003b54:	689b      	ldr	r3, [r3, #8]
 8003b56:	0b5b      	lsrs	r3, r3, #13
 8003b58:	f003 0307 	and.w	r3, r3, #7
 8003b5c:	4903      	ldr	r1, [pc, #12]	; (8003b6c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003b5e:	5ccb      	ldrb	r3, [r1, r3]
 8003b60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b64:	4618      	mov	r0, r3
 8003b66:	bd80      	pop	{r7, pc}
 8003b68:	40023800 	.word	0x40023800
 8003b6c:	08008e04 	.word	0x08008e04

08003b70 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b086      	sub	sp, #24
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003b78:	2300      	movs	r3, #0
 8003b7a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f003 0301 	and.w	r3, r3, #1
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d105      	bne.n	8003b98 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d038      	beq.n	8003c0a <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003b98:	4b68      	ldr	r3, [pc, #416]	; (8003d3c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003b9e:	f7fd f99d 	bl	8000edc <HAL_GetTick>
 8003ba2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003ba4:	e008      	b.n	8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003ba6:	f7fd f999 	bl	8000edc <HAL_GetTick>
 8003baa:	4602      	mov	r2, r0
 8003bac:	697b      	ldr	r3, [r7, #20]
 8003bae:	1ad3      	subs	r3, r2, r3
 8003bb0:	2b02      	cmp	r3, #2
 8003bb2:	d901      	bls.n	8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003bb4:	2303      	movs	r3, #3
 8003bb6:	e0bd      	b.n	8003d34 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003bb8:	4b61      	ldr	r3, [pc, #388]	; (8003d40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d1f0      	bne.n	8003ba6 <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	685a      	ldr	r2, [r3, #4]
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	689b      	ldr	r3, [r3, #8]
 8003bcc:	019b      	lsls	r3, r3, #6
 8003bce:	431a      	orrs	r2, r3
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	68db      	ldr	r3, [r3, #12]
 8003bd4:	071b      	lsls	r3, r3, #28
 8003bd6:	495a      	ldr	r1, [pc, #360]	; (8003d40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003bd8:	4313      	orrs	r3, r2
 8003bda:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003bde:	4b57      	ldr	r3, [pc, #348]	; (8003d3c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003be0:	2201      	movs	r2, #1
 8003be2:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003be4:	f7fd f97a 	bl	8000edc <HAL_GetTick>
 8003be8:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003bea:	e008      	b.n	8003bfe <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003bec:	f7fd f976 	bl	8000edc <HAL_GetTick>
 8003bf0:	4602      	mov	r2, r0
 8003bf2:	697b      	ldr	r3, [r7, #20]
 8003bf4:	1ad3      	subs	r3, r2, r3
 8003bf6:	2b02      	cmp	r3, #2
 8003bf8:	d901      	bls.n	8003bfe <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003bfa:	2303      	movs	r3, #3
 8003bfc:	e09a      	b.n	8003d34 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003bfe:	4b50      	ldr	r3, [pc, #320]	; (8003d40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d0f0      	beq.n	8003bec <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f003 0302 	and.w	r3, r3, #2
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	f000 8083 	beq.w	8003d1e <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003c18:	2300      	movs	r3, #0
 8003c1a:	60fb      	str	r3, [r7, #12]
 8003c1c:	4b48      	ldr	r3, [pc, #288]	; (8003d40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c20:	4a47      	ldr	r2, [pc, #284]	; (8003d40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c22:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c26:	6413      	str	r3, [r2, #64]	; 0x40
 8003c28:	4b45      	ldr	r3, [pc, #276]	; (8003d40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c30:	60fb      	str	r3, [r7, #12]
 8003c32:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003c34:	4b43      	ldr	r3, [pc, #268]	; (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	4a42      	ldr	r2, [pc, #264]	; (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003c3a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c3e:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003c40:	f7fd f94c 	bl	8000edc <HAL_GetTick>
 8003c44:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003c46:	e008      	b.n	8003c5a <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003c48:	f7fd f948 	bl	8000edc <HAL_GetTick>
 8003c4c:	4602      	mov	r2, r0
 8003c4e:	697b      	ldr	r3, [r7, #20]
 8003c50:	1ad3      	subs	r3, r2, r3
 8003c52:	2b02      	cmp	r3, #2
 8003c54:	d901      	bls.n	8003c5a <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 8003c56:	2303      	movs	r3, #3
 8003c58:	e06c      	b.n	8003d34 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003c5a:	4b3a      	ldr	r3, [pc, #232]	; (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d0f0      	beq.n	8003c48 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003c66:	4b36      	ldr	r3, [pc, #216]	; (8003d40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c6e:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003c70:	693b      	ldr	r3, [r7, #16]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d02f      	beq.n	8003cd6 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	691b      	ldr	r3, [r3, #16]
 8003c7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c7e:	693a      	ldr	r2, [r7, #16]
 8003c80:	429a      	cmp	r2, r3
 8003c82:	d028      	beq.n	8003cd6 <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003c84:	4b2e      	ldr	r3, [pc, #184]	; (8003d40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c88:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c8c:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003c8e:	4b2e      	ldr	r3, [pc, #184]	; (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003c90:	2201      	movs	r2, #1
 8003c92:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003c94:	4b2c      	ldr	r3, [pc, #176]	; (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003c96:	2200      	movs	r2, #0
 8003c98:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003c9a:	4a29      	ldr	r2, [pc, #164]	; (8003d40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c9c:	693b      	ldr	r3, [r7, #16]
 8003c9e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003ca0:	4b27      	ldr	r3, [pc, #156]	; (8003d40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ca2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ca4:	f003 0301 	and.w	r3, r3, #1
 8003ca8:	2b01      	cmp	r3, #1
 8003caa:	d114      	bne.n	8003cd6 <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003cac:	f7fd f916 	bl	8000edc <HAL_GetTick>
 8003cb0:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cb2:	e00a      	b.n	8003cca <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003cb4:	f7fd f912 	bl	8000edc <HAL_GetTick>
 8003cb8:	4602      	mov	r2, r0
 8003cba:	697b      	ldr	r3, [r7, #20]
 8003cbc:	1ad3      	subs	r3, r2, r3
 8003cbe:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cc2:	4293      	cmp	r3, r2
 8003cc4:	d901      	bls.n	8003cca <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8003cc6:	2303      	movs	r3, #3
 8003cc8:	e034      	b.n	8003d34 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cca:	4b1d      	ldr	r3, [pc, #116]	; (8003d40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ccc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cce:	f003 0302 	and.w	r3, r3, #2
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d0ee      	beq.n	8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	691b      	ldr	r3, [r3, #16]
 8003cda:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003cde:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003ce2:	d10d      	bne.n	8003d00 <HAL_RCCEx_PeriphCLKConfig+0x190>
 8003ce4:	4b16      	ldr	r3, [pc, #88]	; (8003d40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ce6:	689b      	ldr	r3, [r3, #8]
 8003ce8:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	691b      	ldr	r3, [r3, #16]
 8003cf0:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8003cf4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003cf8:	4911      	ldr	r1, [pc, #68]	; (8003d40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003cfa:	4313      	orrs	r3, r2
 8003cfc:	608b      	str	r3, [r1, #8]
 8003cfe:	e005      	b.n	8003d0c <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8003d00:	4b0f      	ldr	r3, [pc, #60]	; (8003d40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d02:	689b      	ldr	r3, [r3, #8]
 8003d04:	4a0e      	ldr	r2, [pc, #56]	; (8003d40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d06:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003d0a:	6093      	str	r3, [r2, #8]
 8003d0c:	4b0c      	ldr	r3, [pc, #48]	; (8003d40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d0e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	691b      	ldr	r3, [r3, #16]
 8003d14:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d18:	4909      	ldr	r1, [pc, #36]	; (8003d40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d1a:	4313      	orrs	r3, r2
 8003d1c:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f003 0308 	and.w	r3, r3, #8
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d003      	beq.n	8003d32 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	7d1a      	ldrb	r2, [r3, #20]
 8003d2e:	4b07      	ldr	r3, [pc, #28]	; (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8003d30:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8003d32:	2300      	movs	r3, #0
}
 8003d34:	4618      	mov	r0, r3
 8003d36:	3718      	adds	r7, #24
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	bd80      	pop	{r7, pc}
 8003d3c:	42470068 	.word	0x42470068
 8003d40:	40023800 	.word	0x40023800
 8003d44:	40007000 	.word	0x40007000
 8003d48:	42470e40 	.word	0x42470e40
 8003d4c:	424711e0 	.word	0x424711e0

08003d50 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	b082      	sub	sp, #8
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d101      	bne.n	8003d62 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8003d5e:	2301      	movs	r3, #1
 8003d60:	e083      	b.n	8003e6a <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	7f5b      	ldrb	r3, [r3, #29]
 8003d66:	b2db      	uxtb	r3, r3
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d105      	bne.n	8003d78 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2200      	movs	r2, #0
 8003d70:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8003d72:	6878      	ldr	r0, [r7, #4]
 8003d74:	f7fc fe66 	bl	8000a44 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2202      	movs	r2, #2
 8003d7c:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	22ca      	movs	r2, #202	; 0xca
 8003d84:	625a      	str	r2, [r3, #36]	; 0x24
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	2253      	movs	r2, #83	; 0x53
 8003d8c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8003d8e:	6878      	ldr	r0, [r7, #4]
 8003d90:	f000 f897 	bl	8003ec2 <RTC_EnterInitMode>
 8003d94:	4603      	mov	r3, r0
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d008      	beq.n	8003dac <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	22ff      	movs	r2, #255	; 0xff
 8003da0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	2204      	movs	r2, #4
 8003da6:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8003da8:	2301      	movs	r3, #1
 8003daa:	e05e      	b.n	8003e6a <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	689b      	ldr	r3, [r3, #8]
 8003db2:	687a      	ldr	r2, [r7, #4]
 8003db4:	6812      	ldr	r2, [r2, #0]
 8003db6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8003dba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003dbe:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	6899      	ldr	r1, [r3, #8]
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	685a      	ldr	r2, [r3, #4]
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	691b      	ldr	r3, [r3, #16]
 8003dce:	431a      	orrs	r2, r3
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	695b      	ldr	r3, [r3, #20]
 8003dd4:	431a      	orrs	r2, r3
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	430a      	orrs	r2, r1
 8003ddc:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	687a      	ldr	r2, [r7, #4]
 8003de4:	68d2      	ldr	r2, [r2, #12]
 8003de6:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	6919      	ldr	r1, [r3, #16]
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	689b      	ldr	r3, [r3, #8]
 8003df2:	041a      	lsls	r2, r3, #16
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	430a      	orrs	r2, r1
 8003dfa:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	68da      	ldr	r2, [r3, #12]
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003e0a:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	689b      	ldr	r3, [r3, #8]
 8003e12:	f003 0320 	and.w	r3, r3, #32
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d10e      	bne.n	8003e38 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003e1a:	6878      	ldr	r0, [r7, #4]
 8003e1c:	f000 f829 	bl	8003e72 <HAL_RTC_WaitForSynchro>
 8003e20:	4603      	mov	r3, r0
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d008      	beq.n	8003e38 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	22ff      	movs	r2, #255	; 0xff
 8003e2c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	2204      	movs	r2, #4
 8003e32:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8003e34:	2301      	movs	r3, #1
 8003e36:	e018      	b.n	8003e6a <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003e46:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	699a      	ldr	r2, [r3, #24]
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	430a      	orrs	r2, r1
 8003e58:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	22ff      	movs	r2, #255	; 0xff
 8003e60:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	2201      	movs	r2, #1
 8003e66:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8003e68:	2300      	movs	r3, #0
  }
}
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	3708      	adds	r7, #8
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	bd80      	pop	{r7, pc}

08003e72 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8003e72:	b580      	push	{r7, lr}
 8003e74:	b084      	sub	sp, #16
 8003e76:	af00      	add	r7, sp, #0
 8003e78:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003e7a:	2300      	movs	r3, #0
 8003e7c:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	68da      	ldr	r2, [r3, #12]
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003e8c:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003e8e:	f7fd f825 	bl	8000edc <HAL_GetTick>
 8003e92:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8003e94:	e009      	b.n	8003eaa <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8003e96:	f7fd f821 	bl	8000edc <HAL_GetTick>
 8003e9a:	4602      	mov	r2, r0
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	1ad3      	subs	r3, r2, r3
 8003ea0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003ea4:	d901      	bls.n	8003eaa <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8003ea6:	2303      	movs	r3, #3
 8003ea8:	e007      	b.n	8003eba <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	68db      	ldr	r3, [r3, #12]
 8003eb0:	f003 0320 	and.w	r3, r3, #32
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d0ee      	beq.n	8003e96 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8003eb8:	2300      	movs	r3, #0
}
 8003eba:	4618      	mov	r0, r3
 8003ebc:	3710      	adds	r7, #16
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	bd80      	pop	{r7, pc}

08003ec2 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8003ec2:	b580      	push	{r7, lr}
 8003ec4:	b084      	sub	sp, #16
 8003ec6:	af00      	add	r7, sp, #0
 8003ec8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003eca:	2300      	movs	r3, #0
 8003ecc:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	68db      	ldr	r3, [r3, #12]
 8003ed4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d119      	bne.n	8003f10 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f04f 32ff 	mov.w	r2, #4294967295
 8003ee4:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003ee6:	f7fc fff9 	bl	8000edc <HAL_GetTick>
 8003eea:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8003eec:	e009      	b.n	8003f02 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8003eee:	f7fc fff5 	bl	8000edc <HAL_GetTick>
 8003ef2:	4602      	mov	r2, r0
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	1ad3      	subs	r3, r2, r3
 8003ef8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003efc:	d901      	bls.n	8003f02 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8003efe:	2303      	movs	r3, #3
 8003f00:	e007      	b.n	8003f12 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	68db      	ldr	r3, [r3, #12]
 8003f08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d0ee      	beq.n	8003eee <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8003f10:	2300      	movs	r3, #0
}
 8003f12:	4618      	mov	r0, r3
 8003f14:	3710      	adds	r7, #16
 8003f16:	46bd      	mov	sp, r7
 8003f18:	bd80      	pop	{r7, pc}

08003f1a <HAL_RTCEx_BKUPWrite>:
  *                                 specify the register.
  * @param  Data Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8003f1a:	b480      	push	{r7}
 8003f1c:	b087      	sub	sp, #28
 8003f1e:	af00      	add	r7, sp, #0
 8003f20:	60f8      	str	r0, [r7, #12]
 8003f22:	60b9      	str	r1, [r7, #8]
 8003f24:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 8003f26:	2300      	movs	r3, #0
 8003f28:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	3350      	adds	r3, #80	; 0x50
 8003f30:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 8003f32:	68bb      	ldr	r3, [r7, #8]
 8003f34:	009b      	lsls	r3, r3, #2
 8003f36:	697a      	ldr	r2, [r7, #20]
 8003f38:	4413      	add	r3, r2
 8003f3a:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8003f3c:	697b      	ldr	r3, [r7, #20]
 8003f3e:	687a      	ldr	r2, [r7, #4]
 8003f40:	601a      	str	r2, [r3, #0]
}
 8003f42:	bf00      	nop
 8003f44:	371c      	adds	r7, #28
 8003f46:	46bd      	mov	sp, r7
 8003f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4c:	4770      	bx	lr

08003f4e <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx where x can be from 0 to 19 to
  *                                 specify the register.
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 8003f4e:	b480      	push	{r7}
 8003f50:	b085      	sub	sp, #20
 8003f52:	af00      	add	r7, sp, #0
 8003f54:	6078      	str	r0, [r7, #4]
 8003f56:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0U;
 8003f58:	2300      	movs	r3, #0
 8003f5a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	3350      	adds	r3, #80	; 0x50
 8003f62:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 8003f64:	683b      	ldr	r3, [r7, #0]
 8003f66:	009b      	lsls	r3, r3, #2
 8003f68:	68fa      	ldr	r2, [r7, #12]
 8003f6a:	4413      	add	r3, r2
 8003f6c:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	681b      	ldr	r3, [r3, #0]
}
 8003f72:	4618      	mov	r0, r3
 8003f74:	3714      	adds	r7, #20
 8003f76:	46bd      	mov	sp, r7
 8003f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7c:	4770      	bx	lr

08003f7e <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003f7e:	b580      	push	{r7, lr}
 8003f80:	b082      	sub	sp, #8
 8003f82:	af00      	add	r7, sp, #0
 8003f84:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d101      	bne.n	8003f90 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003f8c:	2301      	movs	r3, #1
 8003f8e:	e03f      	b.n	8004010 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f96:	b2db      	uxtb	r3, r3
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d106      	bne.n	8003faa <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003fa4:	6878      	ldr	r0, [r7, #4]
 8003fa6:	f7fc fe3f 	bl	8000c28 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	2224      	movs	r2, #36	; 0x24
 8003fae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	68da      	ldr	r2, [r3, #12]
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003fc0:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003fc2:	6878      	ldr	r0, [r7, #4]
 8003fc4:	f000 fe8a 	bl	8004cdc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	691a      	ldr	r2, [r3, #16]
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003fd6:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	695a      	ldr	r2, [r3, #20]
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003fe6:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	68da      	ldr	r2, [r3, #12]
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003ff6:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	2220      	movs	r2, #32
 8004002:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	2220      	movs	r2, #32
 800400a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800400e:	2300      	movs	r3, #0
}
 8004010:	4618      	mov	r0, r3
 8004012:	3708      	adds	r7, #8
 8004014:	46bd      	mov	sp, r7
 8004016:	bd80      	pop	{r7, pc}

08004018 <HAL_UART_DeInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8004018:	b580      	push	{r7, lr}
 800401a:	b082      	sub	sp, #8
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2b00      	cmp	r3, #0
 8004024:	d101      	bne.n	800402a <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8004026:	2301      	movs	r3, #1
 8004028:	e021      	b.n	800406e <HAL_UART_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	2224      	movs	r2, #36	; 0x24
 800402e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	68da      	ldr	r2, [r3, #12]
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004040:	60da      	str	r2, [r3, #12]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8004042:	6878      	ldr	r0, [r7, #4]
 8004044:	f7fc fe74 	bl	8000d30 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2200      	movs	r2, #0
 800404c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_RESET;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	2200      	movs	r2, #0
 8004052:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_RESET;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	2200      	movs	r2, #0
 800405a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	2200      	movs	r2, #0
 8004062:	631a      	str	r2, [r3, #48]	; 0x30

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2200      	movs	r2, #0
 8004068:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800406c:	2300      	movs	r3, #0
}
 800406e:	4618      	mov	r0, r3
 8004070:	3708      	adds	r7, #8
 8004072:	46bd      	mov	sp, r7
 8004074:	bd80      	pop	{r7, pc}

08004076 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004076:	b580      	push	{r7, lr}
 8004078:	b084      	sub	sp, #16
 800407a:	af00      	add	r7, sp, #0
 800407c:	60f8      	str	r0, [r7, #12]
 800407e:	60b9      	str	r1, [r7, #8]
 8004080:	4613      	mov	r3, r2
 8004082:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800408a:	b2db      	uxtb	r3, r3
 800408c:	2b20      	cmp	r3, #32
 800408e:	d11d      	bne.n	80040cc <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8004090:	68bb      	ldr	r3, [r7, #8]
 8004092:	2b00      	cmp	r3, #0
 8004094:	d002      	beq.n	800409c <HAL_UART_Receive_DMA+0x26>
 8004096:	88fb      	ldrh	r3, [r7, #6]
 8004098:	2b00      	cmp	r3, #0
 800409a:	d101      	bne.n	80040a0 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800409c:	2301      	movs	r3, #1
 800409e:	e016      	b.n	80040ce <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80040a6:	2b01      	cmp	r3, #1
 80040a8:	d101      	bne.n	80040ae <HAL_UART_Receive_DMA+0x38>
 80040aa:	2302      	movs	r3, #2
 80040ac:	e00f      	b.n	80040ce <HAL_UART_Receive_DMA+0x58>
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	2201      	movs	r2, #1
 80040b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	2200      	movs	r2, #0
 80040ba:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80040bc:	88fb      	ldrh	r3, [r7, #6]
 80040be:	461a      	mov	r2, r3
 80040c0:	68b9      	ldr	r1, [r7, #8]
 80040c2:	68f8      	ldr	r0, [r7, #12]
 80040c4:	f000 fbae 	bl	8004824 <UART_Start_Receive_DMA>
 80040c8:	4603      	mov	r3, r0
 80040ca:	e000      	b.n	80040ce <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 80040cc:	2302      	movs	r3, #2
  }
}
 80040ce:	4618      	mov	r0, r3
 80040d0:	3710      	adds	r7, #16
 80040d2:	46bd      	mov	sp, r7
 80040d4:	bd80      	pop	{r7, pc}
	...

080040d8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	b0ba      	sub	sp, #232	; 0xe8
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	68db      	ldr	r3, [r3, #12]
 80040f0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	695b      	ldr	r3, [r3, #20]
 80040fa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80040fe:	2300      	movs	r3, #0
 8004100:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004104:	2300      	movs	r3, #0
 8004106:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800410a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800410e:	f003 030f 	and.w	r3, r3, #15
 8004112:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004116:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800411a:	2b00      	cmp	r3, #0
 800411c:	d10f      	bne.n	800413e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800411e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004122:	f003 0320 	and.w	r3, r3, #32
 8004126:	2b00      	cmp	r3, #0
 8004128:	d009      	beq.n	800413e <HAL_UART_IRQHandler+0x66>
 800412a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800412e:	f003 0320 	and.w	r3, r3, #32
 8004132:	2b00      	cmp	r3, #0
 8004134:	d003      	beq.n	800413e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004136:	6878      	ldr	r0, [r7, #4]
 8004138:	f000 fd15 	bl	8004b66 <UART_Receive_IT>
      return;
 800413c:	e256      	b.n	80045ec <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800413e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004142:	2b00      	cmp	r3, #0
 8004144:	f000 80de 	beq.w	8004304 <HAL_UART_IRQHandler+0x22c>
 8004148:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800414c:	f003 0301 	and.w	r3, r3, #1
 8004150:	2b00      	cmp	r3, #0
 8004152:	d106      	bne.n	8004162 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004154:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004158:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800415c:	2b00      	cmp	r3, #0
 800415e:	f000 80d1 	beq.w	8004304 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004162:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004166:	f003 0301 	and.w	r3, r3, #1
 800416a:	2b00      	cmp	r3, #0
 800416c:	d00b      	beq.n	8004186 <HAL_UART_IRQHandler+0xae>
 800416e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004172:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004176:	2b00      	cmp	r3, #0
 8004178:	d005      	beq.n	8004186 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800417e:	f043 0201 	orr.w	r2, r3, #1
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004186:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800418a:	f003 0304 	and.w	r3, r3, #4
 800418e:	2b00      	cmp	r3, #0
 8004190:	d00b      	beq.n	80041aa <HAL_UART_IRQHandler+0xd2>
 8004192:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004196:	f003 0301 	and.w	r3, r3, #1
 800419a:	2b00      	cmp	r3, #0
 800419c:	d005      	beq.n	80041aa <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041a2:	f043 0202 	orr.w	r2, r3, #2
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80041aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80041ae:	f003 0302 	and.w	r3, r3, #2
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d00b      	beq.n	80041ce <HAL_UART_IRQHandler+0xf6>
 80041b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80041ba:	f003 0301 	and.w	r3, r3, #1
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d005      	beq.n	80041ce <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041c6:	f043 0204 	orr.w	r2, r3, #4
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80041ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80041d2:	f003 0308 	and.w	r3, r3, #8
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d011      	beq.n	80041fe <HAL_UART_IRQHandler+0x126>
 80041da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80041de:	f003 0320 	and.w	r3, r3, #32
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d105      	bne.n	80041f2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80041e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80041ea:	f003 0301 	and.w	r3, r3, #1
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d005      	beq.n	80041fe <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041f6:	f043 0208 	orr.w	r2, r3, #8
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004202:	2b00      	cmp	r3, #0
 8004204:	f000 81ed 	beq.w	80045e2 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004208:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800420c:	f003 0320 	and.w	r3, r3, #32
 8004210:	2b00      	cmp	r3, #0
 8004212:	d008      	beq.n	8004226 <HAL_UART_IRQHandler+0x14e>
 8004214:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004218:	f003 0320 	and.w	r3, r3, #32
 800421c:	2b00      	cmp	r3, #0
 800421e:	d002      	beq.n	8004226 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004220:	6878      	ldr	r0, [r7, #4]
 8004222:	f000 fca0 	bl	8004b66 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	695b      	ldr	r3, [r3, #20]
 800422c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004230:	2b40      	cmp	r3, #64	; 0x40
 8004232:	bf0c      	ite	eq
 8004234:	2301      	moveq	r3, #1
 8004236:	2300      	movne	r3, #0
 8004238:	b2db      	uxtb	r3, r3
 800423a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004242:	f003 0308 	and.w	r3, r3, #8
 8004246:	2b00      	cmp	r3, #0
 8004248:	d103      	bne.n	8004252 <HAL_UART_IRQHandler+0x17a>
 800424a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800424e:	2b00      	cmp	r3, #0
 8004250:	d04f      	beq.n	80042f2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004252:	6878      	ldr	r0, [r7, #4]
 8004254:	f000 fba8 	bl	80049a8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	695b      	ldr	r3, [r3, #20]
 800425e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004262:	2b40      	cmp	r3, #64	; 0x40
 8004264:	d141      	bne.n	80042ea <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	3314      	adds	r3, #20
 800426c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004270:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004274:	e853 3f00 	ldrex	r3, [r3]
 8004278:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800427c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004280:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004284:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	3314      	adds	r3, #20
 800428e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004292:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004296:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800429a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800429e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80042a2:	e841 2300 	strex	r3, r2, [r1]
 80042a6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80042aa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d1d9      	bne.n	8004266 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d013      	beq.n	80042e2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042be:	4a7d      	ldr	r2, [pc, #500]	; (80044b4 <HAL_UART_IRQHandler+0x3dc>)
 80042c0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042c6:	4618      	mov	r0, r3
 80042c8:	f7fd f950 	bl	800156c <HAL_DMA_Abort_IT>
 80042cc:	4603      	mov	r3, r0
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d016      	beq.n	8004300 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042d8:	687a      	ldr	r2, [r7, #4]
 80042da:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80042dc:	4610      	mov	r0, r2
 80042de:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80042e0:	e00e      	b.n	8004300 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80042e2:	6878      	ldr	r0, [r7, #4]
 80042e4:	f7fc fc8c 	bl	8000c00 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80042e8:	e00a      	b.n	8004300 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80042ea:	6878      	ldr	r0, [r7, #4]
 80042ec:	f7fc fc88 	bl	8000c00 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80042f0:	e006      	b.n	8004300 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80042f2:	6878      	ldr	r0, [r7, #4]
 80042f4:	f7fc fc84 	bl	8000c00 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2200      	movs	r2, #0
 80042fc:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80042fe:	e170      	b.n	80045e2 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004300:	bf00      	nop
    return;
 8004302:	e16e      	b.n	80045e2 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004308:	2b01      	cmp	r3, #1
 800430a:	f040 814a 	bne.w	80045a2 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800430e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004312:	f003 0310 	and.w	r3, r3, #16
 8004316:	2b00      	cmp	r3, #0
 8004318:	f000 8143 	beq.w	80045a2 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800431c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004320:	f003 0310 	and.w	r3, r3, #16
 8004324:	2b00      	cmp	r3, #0
 8004326:	f000 813c 	beq.w	80045a2 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800432a:	2300      	movs	r3, #0
 800432c:	60bb      	str	r3, [r7, #8]
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	60bb      	str	r3, [r7, #8]
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	685b      	ldr	r3, [r3, #4]
 800433c:	60bb      	str	r3, [r7, #8]
 800433e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	695b      	ldr	r3, [r3, #20]
 8004346:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800434a:	2b40      	cmp	r3, #64	; 0x40
 800434c:	f040 80b4 	bne.w	80044b8 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	685b      	ldr	r3, [r3, #4]
 8004358:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800435c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004360:	2b00      	cmp	r3, #0
 8004362:	f000 8140 	beq.w	80045e6 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800436a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800436e:	429a      	cmp	r2, r3
 8004370:	f080 8139 	bcs.w	80045e6 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800437a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004380:	69db      	ldr	r3, [r3, #28]
 8004382:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004386:	f000 8088 	beq.w	800449a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	330c      	adds	r3, #12
 8004390:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004394:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004398:	e853 3f00 	ldrex	r3, [r3]
 800439c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80043a0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80043a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80043a8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	330c      	adds	r3, #12
 80043b2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80043b6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80043ba:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043be:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80043c2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80043c6:	e841 2300 	strex	r3, r2, [r1]
 80043ca:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80043ce:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d1d9      	bne.n	800438a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	3314      	adds	r3, #20
 80043dc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043de:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80043e0:	e853 3f00 	ldrex	r3, [r3]
 80043e4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80043e6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80043e8:	f023 0301 	bic.w	r3, r3, #1
 80043ec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	3314      	adds	r3, #20
 80043f6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80043fa:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80043fe:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004400:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004402:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004406:	e841 2300 	strex	r3, r2, [r1]
 800440a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800440c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800440e:	2b00      	cmp	r3, #0
 8004410:	d1e1      	bne.n	80043d6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	3314      	adds	r3, #20
 8004418:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800441a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800441c:	e853 3f00 	ldrex	r3, [r3]
 8004420:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004422:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004424:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004428:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	3314      	adds	r3, #20
 8004432:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004436:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004438:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800443a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800443c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800443e:	e841 2300 	strex	r3, r2, [r1]
 8004442:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004444:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004446:	2b00      	cmp	r3, #0
 8004448:	d1e3      	bne.n	8004412 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	2220      	movs	r2, #32
 800444e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	2200      	movs	r2, #0
 8004456:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	330c      	adds	r3, #12
 800445e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004460:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004462:	e853 3f00 	ldrex	r3, [r3]
 8004466:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004468:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800446a:	f023 0310 	bic.w	r3, r3, #16
 800446e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	330c      	adds	r3, #12
 8004478:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800447c:	65ba      	str	r2, [r7, #88]	; 0x58
 800447e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004480:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004482:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004484:	e841 2300 	strex	r3, r2, [r1]
 8004488:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800448a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800448c:	2b00      	cmp	r3, #0
 800448e:	d1e3      	bne.n	8004458 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004494:	4618      	mov	r0, r3
 8004496:	f7fc fff9 	bl	800148c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80044a2:	b29b      	uxth	r3, r3
 80044a4:	1ad3      	subs	r3, r2, r3
 80044a6:	b29b      	uxth	r3, r3
 80044a8:	4619      	mov	r1, r3
 80044aa:	6878      	ldr	r0, [r7, #4]
 80044ac:	f000 f8b6 	bl	800461c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80044b0:	e099      	b.n	80045e6 <HAL_UART_IRQHandler+0x50e>
 80044b2:	bf00      	nop
 80044b4:	08004a6f 	.word	0x08004a6f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80044c0:	b29b      	uxth	r3, r3
 80044c2:	1ad3      	subs	r3, r2, r3
 80044c4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80044cc:	b29b      	uxth	r3, r3
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	f000 808b 	beq.w	80045ea <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80044d4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80044d8:	2b00      	cmp	r3, #0
 80044da:	f000 8086 	beq.w	80045ea <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	330c      	adds	r3, #12
 80044e4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044e8:	e853 3f00 	ldrex	r3, [r3]
 80044ec:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80044ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044f0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80044f4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	330c      	adds	r3, #12
 80044fe:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004502:	647a      	str	r2, [r7, #68]	; 0x44
 8004504:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004506:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004508:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800450a:	e841 2300 	strex	r3, r2, [r1]
 800450e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004510:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004512:	2b00      	cmp	r3, #0
 8004514:	d1e3      	bne.n	80044de <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	3314      	adds	r3, #20
 800451c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800451e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004520:	e853 3f00 	ldrex	r3, [r3]
 8004524:	623b      	str	r3, [r7, #32]
   return(result);
 8004526:	6a3b      	ldr	r3, [r7, #32]
 8004528:	f023 0301 	bic.w	r3, r3, #1
 800452c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	3314      	adds	r3, #20
 8004536:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800453a:	633a      	str	r2, [r7, #48]	; 0x30
 800453c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800453e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004540:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004542:	e841 2300 	strex	r3, r2, [r1]
 8004546:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004548:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800454a:	2b00      	cmp	r3, #0
 800454c:	d1e3      	bne.n	8004516 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	2220      	movs	r2, #32
 8004552:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	2200      	movs	r2, #0
 800455a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	330c      	adds	r3, #12
 8004562:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004564:	693b      	ldr	r3, [r7, #16]
 8004566:	e853 3f00 	ldrex	r3, [r3]
 800456a:	60fb      	str	r3, [r7, #12]
   return(result);
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	f023 0310 	bic.w	r3, r3, #16
 8004572:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	330c      	adds	r3, #12
 800457c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004580:	61fa      	str	r2, [r7, #28]
 8004582:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004584:	69b9      	ldr	r1, [r7, #24]
 8004586:	69fa      	ldr	r2, [r7, #28]
 8004588:	e841 2300 	strex	r3, r2, [r1]
 800458c:	617b      	str	r3, [r7, #20]
   return(result);
 800458e:	697b      	ldr	r3, [r7, #20]
 8004590:	2b00      	cmp	r3, #0
 8004592:	d1e3      	bne.n	800455c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004594:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004598:	4619      	mov	r1, r3
 800459a:	6878      	ldr	r0, [r7, #4]
 800459c:	f000 f83e 	bl	800461c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80045a0:	e023      	b.n	80045ea <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80045a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80045a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d009      	beq.n	80045c2 <HAL_UART_IRQHandler+0x4ea>
 80045ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80045b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d003      	beq.n	80045c2 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80045ba:	6878      	ldr	r0, [r7, #4]
 80045bc:	f000 fa6b 	bl	8004a96 <UART_Transmit_IT>
    return;
 80045c0:	e014      	b.n	80045ec <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80045c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80045c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d00e      	beq.n	80045ec <HAL_UART_IRQHandler+0x514>
 80045ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80045d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d008      	beq.n	80045ec <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80045da:	6878      	ldr	r0, [r7, #4]
 80045dc:	f000 faab 	bl	8004b36 <UART_EndTransmit_IT>
    return;
 80045e0:	e004      	b.n	80045ec <HAL_UART_IRQHandler+0x514>
    return;
 80045e2:	bf00      	nop
 80045e4:	e002      	b.n	80045ec <HAL_UART_IRQHandler+0x514>
      return;
 80045e6:	bf00      	nop
 80045e8:	e000      	b.n	80045ec <HAL_UART_IRQHandler+0x514>
      return;
 80045ea:	bf00      	nop
  }
}
 80045ec:	37e8      	adds	r7, #232	; 0xe8
 80045ee:	46bd      	mov	sp, r7
 80045f0:	bd80      	pop	{r7, pc}
 80045f2:	bf00      	nop

080045f4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80045f4:	b480      	push	{r7}
 80045f6:	b083      	sub	sp, #12
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80045fc:	bf00      	nop
 80045fe:	370c      	adds	r7, #12
 8004600:	46bd      	mov	sp, r7
 8004602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004606:	4770      	bx	lr

08004608 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004608:	b480      	push	{r7}
 800460a:	b083      	sub	sp, #12
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8004610:	bf00      	nop
 8004612:	370c      	adds	r7, #12
 8004614:	46bd      	mov	sp, r7
 8004616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461a:	4770      	bx	lr

0800461c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800461c:	b480      	push	{r7}
 800461e:	b083      	sub	sp, #12
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]
 8004624:	460b      	mov	r3, r1
 8004626:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004628:	bf00      	nop
 800462a:	370c      	adds	r7, #12
 800462c:	46bd      	mov	sp, r7
 800462e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004632:	4770      	bx	lr

08004634 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004634:	b580      	push	{r7, lr}
 8004636:	b09c      	sub	sp, #112	; 0x70
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004640:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800464c:	2b00      	cmp	r3, #0
 800464e:	d172      	bne.n	8004736 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8004650:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004652:	2200      	movs	r2, #0
 8004654:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004656:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	330c      	adds	r3, #12
 800465c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800465e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004660:	e853 3f00 	ldrex	r3, [r3]
 8004664:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004666:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004668:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800466c:	66bb      	str	r3, [r7, #104]	; 0x68
 800466e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	330c      	adds	r3, #12
 8004674:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004676:	65ba      	str	r2, [r7, #88]	; 0x58
 8004678:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800467a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800467c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800467e:	e841 2300 	strex	r3, r2, [r1]
 8004682:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004684:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004686:	2b00      	cmp	r3, #0
 8004688:	d1e5      	bne.n	8004656 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800468a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	3314      	adds	r3, #20
 8004690:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004692:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004694:	e853 3f00 	ldrex	r3, [r3]
 8004698:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800469a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800469c:	f023 0301 	bic.w	r3, r3, #1
 80046a0:	667b      	str	r3, [r7, #100]	; 0x64
 80046a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	3314      	adds	r3, #20
 80046a8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80046aa:	647a      	str	r2, [r7, #68]	; 0x44
 80046ac:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046ae:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80046b0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80046b2:	e841 2300 	strex	r3, r2, [r1]
 80046b6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80046b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d1e5      	bne.n	800468a <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80046be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	3314      	adds	r3, #20
 80046c4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046c8:	e853 3f00 	ldrex	r3, [r3]
 80046cc:	623b      	str	r3, [r7, #32]
   return(result);
 80046ce:	6a3b      	ldr	r3, [r7, #32]
 80046d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80046d4:	663b      	str	r3, [r7, #96]	; 0x60
 80046d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	3314      	adds	r3, #20
 80046dc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80046de:	633a      	str	r2, [r7, #48]	; 0x30
 80046e0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046e2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80046e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80046e6:	e841 2300 	strex	r3, r2, [r1]
 80046ea:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80046ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d1e5      	bne.n	80046be <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80046f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046f4:	2220      	movs	r2, #32
 80046f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80046fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046fe:	2b01      	cmp	r3, #1
 8004700:	d119      	bne.n	8004736 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004702:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	330c      	adds	r3, #12
 8004708:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800470a:	693b      	ldr	r3, [r7, #16]
 800470c:	e853 3f00 	ldrex	r3, [r3]
 8004710:	60fb      	str	r3, [r7, #12]
   return(result);
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	f023 0310 	bic.w	r3, r3, #16
 8004718:	65fb      	str	r3, [r7, #92]	; 0x5c
 800471a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	330c      	adds	r3, #12
 8004720:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004722:	61fa      	str	r2, [r7, #28]
 8004724:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004726:	69b9      	ldr	r1, [r7, #24]
 8004728:	69fa      	ldr	r2, [r7, #28]
 800472a:	e841 2300 	strex	r3, r2, [r1]
 800472e:	617b      	str	r3, [r7, #20]
   return(result);
 8004730:	697b      	ldr	r3, [r7, #20]
 8004732:	2b00      	cmp	r3, #0
 8004734:	d1e5      	bne.n	8004702 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004736:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800473a:	2b01      	cmp	r3, #1
 800473c:	d106      	bne.n	800474c <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800473e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004740:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004742:	4619      	mov	r1, r3
 8004744:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8004746:	f7ff ff69 	bl	800461c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800474a:	e002      	b.n	8004752 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 800474c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800474e:	f7fc fa61 	bl	8000c14 <HAL_UART_RxCpltCallback>
}
 8004752:	bf00      	nop
 8004754:	3770      	adds	r7, #112	; 0x70
 8004756:	46bd      	mov	sp, r7
 8004758:	bd80      	pop	{r7, pc}

0800475a <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800475a:	b580      	push	{r7, lr}
 800475c:	b084      	sub	sp, #16
 800475e:	af00      	add	r7, sp, #0
 8004760:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004766:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800476c:	2b01      	cmp	r3, #1
 800476e:	d108      	bne.n	8004782 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004774:	085b      	lsrs	r3, r3, #1
 8004776:	b29b      	uxth	r3, r3
 8004778:	4619      	mov	r1, r3
 800477a:	68f8      	ldr	r0, [r7, #12]
 800477c:	f7ff ff4e 	bl	800461c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004780:	e002      	b.n	8004788 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8004782:	68f8      	ldr	r0, [r7, #12]
 8004784:	f7ff ff40 	bl	8004608 <HAL_UART_RxHalfCpltCallback>
}
 8004788:	bf00      	nop
 800478a:	3710      	adds	r7, #16
 800478c:	46bd      	mov	sp, r7
 800478e:	bd80      	pop	{r7, pc}

08004790 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004790:	b580      	push	{r7, lr}
 8004792:	b084      	sub	sp, #16
 8004794:	af00      	add	r7, sp, #0
 8004796:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8004798:	2300      	movs	r3, #0
 800479a:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047a0:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80047a2:	68bb      	ldr	r3, [r7, #8]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	695b      	ldr	r3, [r3, #20]
 80047a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047ac:	2b80      	cmp	r3, #128	; 0x80
 80047ae:	bf0c      	ite	eq
 80047b0:	2301      	moveq	r3, #1
 80047b2:	2300      	movne	r3, #0
 80047b4:	b2db      	uxtb	r3, r3
 80047b6:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80047b8:	68bb      	ldr	r3, [r7, #8]
 80047ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047be:	b2db      	uxtb	r3, r3
 80047c0:	2b21      	cmp	r3, #33	; 0x21
 80047c2:	d108      	bne.n	80047d6 <UART_DMAError+0x46>
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d005      	beq.n	80047d6 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80047ca:	68bb      	ldr	r3, [r7, #8]
 80047cc:	2200      	movs	r2, #0
 80047ce:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80047d0:	68b8      	ldr	r0, [r7, #8]
 80047d2:	f000 f8c1 	bl	8004958 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80047d6:	68bb      	ldr	r3, [r7, #8]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	695b      	ldr	r3, [r3, #20]
 80047dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047e0:	2b40      	cmp	r3, #64	; 0x40
 80047e2:	bf0c      	ite	eq
 80047e4:	2301      	moveq	r3, #1
 80047e6:	2300      	movne	r3, #0
 80047e8:	b2db      	uxtb	r3, r3
 80047ea:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80047ec:	68bb      	ldr	r3, [r7, #8]
 80047ee:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80047f2:	b2db      	uxtb	r3, r3
 80047f4:	2b22      	cmp	r3, #34	; 0x22
 80047f6:	d108      	bne.n	800480a <UART_DMAError+0x7a>
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d005      	beq.n	800480a <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80047fe:	68bb      	ldr	r3, [r7, #8]
 8004800:	2200      	movs	r2, #0
 8004802:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8004804:	68b8      	ldr	r0, [r7, #8]
 8004806:	f000 f8cf 	bl	80049a8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800480a:	68bb      	ldr	r3, [r7, #8]
 800480c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800480e:	f043 0210 	orr.w	r2, r3, #16
 8004812:	68bb      	ldr	r3, [r7, #8]
 8004814:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004816:	68b8      	ldr	r0, [r7, #8]
 8004818:	f7fc f9f2 	bl	8000c00 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800481c:	bf00      	nop
 800481e:	3710      	adds	r7, #16
 8004820:	46bd      	mov	sp, r7
 8004822:	bd80      	pop	{r7, pc}

08004824 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004824:	b580      	push	{r7, lr}
 8004826:	b098      	sub	sp, #96	; 0x60
 8004828:	af00      	add	r7, sp, #0
 800482a:	60f8      	str	r0, [r7, #12]
 800482c:	60b9      	str	r1, [r7, #8]
 800482e:	4613      	mov	r3, r2
 8004830:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8004832:	68ba      	ldr	r2, [r7, #8]
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	88fa      	ldrh	r2, [r7, #6]
 800483c:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	2200      	movs	r2, #0
 8004842:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	2222      	movs	r2, #34	; 0x22
 8004848:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004850:	4a3e      	ldr	r2, [pc, #248]	; (800494c <UART_Start_Receive_DMA+0x128>)
 8004852:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004858:	4a3d      	ldr	r2, [pc, #244]	; (8004950 <UART_Start_Receive_DMA+0x12c>)
 800485a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004860:	4a3c      	ldr	r2, [pc, #240]	; (8004954 <UART_Start_Receive_DMA+0x130>)
 8004862:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004868:	2200      	movs	r2, #0
 800486a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800486c:	f107 0308 	add.w	r3, r7, #8
 8004870:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	3304      	adds	r3, #4
 800487c:	4619      	mov	r1, r3
 800487e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004880:	681a      	ldr	r2, [r3, #0]
 8004882:	88fb      	ldrh	r3, [r7, #6]
 8004884:	f7fc fdaa 	bl	80013dc <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8004888:	2300      	movs	r3, #0
 800488a:	613b      	str	r3, [r7, #16]
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	613b      	str	r3, [r7, #16]
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	685b      	ldr	r3, [r3, #4]
 800489a:	613b      	str	r3, [r7, #16]
 800489c:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	2200      	movs	r2, #0
 80048a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	330c      	adds	r3, #12
 80048ac:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80048b0:	e853 3f00 	ldrex	r3, [r3]
 80048b4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80048b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80048b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80048bc:	65bb      	str	r3, [r7, #88]	; 0x58
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	330c      	adds	r3, #12
 80048c4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80048c6:	64fa      	str	r2, [r7, #76]	; 0x4c
 80048c8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048ca:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80048cc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80048ce:	e841 2300 	strex	r3, r2, [r1]
 80048d2:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80048d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d1e5      	bne.n	80048a6 <UART_Start_Receive_DMA+0x82>

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	3314      	adds	r3, #20
 80048e0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048e4:	e853 3f00 	ldrex	r3, [r3]
 80048e8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80048ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048ec:	f043 0301 	orr.w	r3, r3, #1
 80048f0:	657b      	str	r3, [r7, #84]	; 0x54
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	3314      	adds	r3, #20
 80048f8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80048fa:	63ba      	str	r2, [r7, #56]	; 0x38
 80048fc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048fe:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004900:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004902:	e841 2300 	strex	r3, r2, [r1]
 8004906:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004908:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800490a:	2b00      	cmp	r3, #0
 800490c:	d1e5      	bne.n	80048da <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	3314      	adds	r3, #20
 8004914:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004916:	69bb      	ldr	r3, [r7, #24]
 8004918:	e853 3f00 	ldrex	r3, [r3]
 800491c:	617b      	str	r3, [r7, #20]
   return(result);
 800491e:	697b      	ldr	r3, [r7, #20]
 8004920:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004924:	653b      	str	r3, [r7, #80]	; 0x50
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	3314      	adds	r3, #20
 800492c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800492e:	627a      	str	r2, [r7, #36]	; 0x24
 8004930:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004932:	6a39      	ldr	r1, [r7, #32]
 8004934:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004936:	e841 2300 	strex	r3, r2, [r1]
 800493a:	61fb      	str	r3, [r7, #28]
   return(result);
 800493c:	69fb      	ldr	r3, [r7, #28]
 800493e:	2b00      	cmp	r3, #0
 8004940:	d1e5      	bne.n	800490e <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8004942:	2300      	movs	r3, #0
}
 8004944:	4618      	mov	r0, r3
 8004946:	3760      	adds	r7, #96	; 0x60
 8004948:	46bd      	mov	sp, r7
 800494a:	bd80      	pop	{r7, pc}
 800494c:	08004635 	.word	0x08004635
 8004950:	0800475b 	.word	0x0800475b
 8004954:	08004791 	.word	0x08004791

08004958 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004958:	b480      	push	{r7}
 800495a:	b089      	sub	sp, #36	; 0x24
 800495c:	af00      	add	r7, sp, #0
 800495e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	330c      	adds	r3, #12
 8004966:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	e853 3f00 	ldrex	r3, [r3]
 800496e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004970:	68bb      	ldr	r3, [r7, #8]
 8004972:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004976:	61fb      	str	r3, [r7, #28]
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	330c      	adds	r3, #12
 800497e:	69fa      	ldr	r2, [r7, #28]
 8004980:	61ba      	str	r2, [r7, #24]
 8004982:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004984:	6979      	ldr	r1, [r7, #20]
 8004986:	69ba      	ldr	r2, [r7, #24]
 8004988:	e841 2300 	strex	r3, r2, [r1]
 800498c:	613b      	str	r3, [r7, #16]
   return(result);
 800498e:	693b      	ldr	r3, [r7, #16]
 8004990:	2b00      	cmp	r3, #0
 8004992:	d1e5      	bne.n	8004960 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2220      	movs	r2, #32
 8004998:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800499c:	bf00      	nop
 800499e:	3724      	adds	r7, #36	; 0x24
 80049a0:	46bd      	mov	sp, r7
 80049a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a6:	4770      	bx	lr

080049a8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80049a8:	b480      	push	{r7}
 80049aa:	b095      	sub	sp, #84	; 0x54
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	330c      	adds	r3, #12
 80049b6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049ba:	e853 3f00 	ldrex	r3, [r3]
 80049be:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80049c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049c2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80049c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	330c      	adds	r3, #12
 80049ce:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80049d0:	643a      	str	r2, [r7, #64]	; 0x40
 80049d2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049d4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80049d6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80049d8:	e841 2300 	strex	r3, r2, [r1]
 80049dc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80049de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d1e5      	bne.n	80049b0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	3314      	adds	r3, #20
 80049ea:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049ec:	6a3b      	ldr	r3, [r7, #32]
 80049ee:	e853 3f00 	ldrex	r3, [r3]
 80049f2:	61fb      	str	r3, [r7, #28]
   return(result);
 80049f4:	69fb      	ldr	r3, [r7, #28]
 80049f6:	f023 0301 	bic.w	r3, r3, #1
 80049fa:	64bb      	str	r3, [r7, #72]	; 0x48
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	3314      	adds	r3, #20
 8004a02:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004a04:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004a06:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a08:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004a0a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004a0c:	e841 2300 	strex	r3, r2, [r1]
 8004a10:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d1e5      	bne.n	80049e4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a1c:	2b01      	cmp	r3, #1
 8004a1e:	d119      	bne.n	8004a54 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	330c      	adds	r3, #12
 8004a26:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	e853 3f00 	ldrex	r3, [r3]
 8004a2e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004a30:	68bb      	ldr	r3, [r7, #8]
 8004a32:	f023 0310 	bic.w	r3, r3, #16
 8004a36:	647b      	str	r3, [r7, #68]	; 0x44
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	330c      	adds	r3, #12
 8004a3e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004a40:	61ba      	str	r2, [r7, #24]
 8004a42:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a44:	6979      	ldr	r1, [r7, #20]
 8004a46:	69ba      	ldr	r2, [r7, #24]
 8004a48:	e841 2300 	strex	r3, r2, [r1]
 8004a4c:	613b      	str	r3, [r7, #16]
   return(result);
 8004a4e:	693b      	ldr	r3, [r7, #16]
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d1e5      	bne.n	8004a20 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2220      	movs	r2, #32
 8004a58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2200      	movs	r2, #0
 8004a60:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004a62:	bf00      	nop
 8004a64:	3754      	adds	r7, #84	; 0x54
 8004a66:	46bd      	mov	sp, r7
 8004a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6c:	4770      	bx	lr

08004a6e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004a6e:	b580      	push	{r7, lr}
 8004a70:	b084      	sub	sp, #16
 8004a72:	af00      	add	r7, sp, #0
 8004a74:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a7a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	2200      	movs	r2, #0
 8004a80:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	2200      	movs	r2, #0
 8004a86:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004a88:	68f8      	ldr	r0, [r7, #12]
 8004a8a:	f7fc f8b9 	bl	8000c00 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004a8e:	bf00      	nop
 8004a90:	3710      	adds	r7, #16
 8004a92:	46bd      	mov	sp, r7
 8004a94:	bd80      	pop	{r7, pc}

08004a96 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004a96:	b480      	push	{r7}
 8004a98:	b085      	sub	sp, #20
 8004a9a:	af00      	add	r7, sp, #0
 8004a9c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004aa4:	b2db      	uxtb	r3, r3
 8004aa6:	2b21      	cmp	r3, #33	; 0x21
 8004aa8:	d13e      	bne.n	8004b28 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	689b      	ldr	r3, [r3, #8]
 8004aae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ab2:	d114      	bne.n	8004ade <UART_Transmit_IT+0x48>
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	691b      	ldr	r3, [r3, #16]
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d110      	bne.n	8004ade <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	6a1b      	ldr	r3, [r3, #32]
 8004ac0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	881b      	ldrh	r3, [r3, #0]
 8004ac6:	461a      	mov	r2, r3
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004ad0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6a1b      	ldr	r3, [r3, #32]
 8004ad6:	1c9a      	adds	r2, r3, #2
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	621a      	str	r2, [r3, #32]
 8004adc:	e008      	b.n	8004af0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	6a1b      	ldr	r3, [r3, #32]
 8004ae2:	1c59      	adds	r1, r3, #1
 8004ae4:	687a      	ldr	r2, [r7, #4]
 8004ae6:	6211      	str	r1, [r2, #32]
 8004ae8:	781a      	ldrb	r2, [r3, #0]
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004af4:	b29b      	uxth	r3, r3
 8004af6:	3b01      	subs	r3, #1
 8004af8:	b29b      	uxth	r3, r3
 8004afa:	687a      	ldr	r2, [r7, #4]
 8004afc:	4619      	mov	r1, r3
 8004afe:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d10f      	bne.n	8004b24 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	68da      	ldr	r2, [r3, #12]
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004b12:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	68da      	ldr	r2, [r3, #12]
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004b22:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004b24:	2300      	movs	r3, #0
 8004b26:	e000      	b.n	8004b2a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004b28:	2302      	movs	r3, #2
  }
}
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	3714      	adds	r7, #20
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b34:	4770      	bx	lr

08004b36 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004b36:	b580      	push	{r7, lr}
 8004b38:	b082      	sub	sp, #8
 8004b3a:	af00      	add	r7, sp, #0
 8004b3c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	68da      	ldr	r2, [r3, #12]
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b4c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	2220      	movs	r2, #32
 8004b52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004b56:	6878      	ldr	r0, [r7, #4]
 8004b58:	f7ff fd4c 	bl	80045f4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004b5c:	2300      	movs	r3, #0
}
 8004b5e:	4618      	mov	r0, r3
 8004b60:	3708      	adds	r7, #8
 8004b62:	46bd      	mov	sp, r7
 8004b64:	bd80      	pop	{r7, pc}

08004b66 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004b66:	b580      	push	{r7, lr}
 8004b68:	b08c      	sub	sp, #48	; 0x30
 8004b6a:	af00      	add	r7, sp, #0
 8004b6c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004b74:	b2db      	uxtb	r3, r3
 8004b76:	2b22      	cmp	r3, #34	; 0x22
 8004b78:	f040 80ab 	bne.w	8004cd2 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	689b      	ldr	r3, [r3, #8]
 8004b80:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b84:	d117      	bne.n	8004bb6 <UART_Receive_IT+0x50>
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	691b      	ldr	r3, [r3, #16]
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d113      	bne.n	8004bb6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004b8e:	2300      	movs	r3, #0
 8004b90:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b96:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	685b      	ldr	r3, [r3, #4]
 8004b9e:	b29b      	uxth	r3, r3
 8004ba0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ba4:	b29a      	uxth	r2, r3
 8004ba6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ba8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bae:	1c9a      	adds	r2, r3, #2
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	629a      	str	r2, [r3, #40]	; 0x28
 8004bb4:	e026      	b.n	8004c04 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bba:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004bbc:	2300      	movs	r3, #0
 8004bbe:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	689b      	ldr	r3, [r3, #8]
 8004bc4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004bc8:	d007      	beq.n	8004bda <UART_Receive_IT+0x74>
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	689b      	ldr	r3, [r3, #8]
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d10a      	bne.n	8004be8 <UART_Receive_IT+0x82>
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	691b      	ldr	r3, [r3, #16]
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d106      	bne.n	8004be8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	685b      	ldr	r3, [r3, #4]
 8004be0:	b2da      	uxtb	r2, r3
 8004be2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004be4:	701a      	strb	r2, [r3, #0]
 8004be6:	e008      	b.n	8004bfa <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	685b      	ldr	r3, [r3, #4]
 8004bee:	b2db      	uxtb	r3, r3
 8004bf0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004bf4:	b2da      	uxtb	r2, r3
 8004bf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bf8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bfe:	1c5a      	adds	r2, r3, #1
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004c08:	b29b      	uxth	r3, r3
 8004c0a:	3b01      	subs	r3, #1
 8004c0c:	b29b      	uxth	r3, r3
 8004c0e:	687a      	ldr	r2, [r7, #4]
 8004c10:	4619      	mov	r1, r3
 8004c12:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d15a      	bne.n	8004cce <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	68da      	ldr	r2, [r3, #12]
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f022 0220 	bic.w	r2, r2, #32
 8004c26:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	68da      	ldr	r2, [r3, #12]
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004c36:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	695a      	ldr	r2, [r3, #20]
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f022 0201 	bic.w	r2, r2, #1
 8004c46:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2220      	movs	r2, #32
 8004c4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c54:	2b01      	cmp	r3, #1
 8004c56:	d135      	bne.n	8004cc4 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	2200      	movs	r2, #0
 8004c5c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	330c      	adds	r3, #12
 8004c64:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c66:	697b      	ldr	r3, [r7, #20]
 8004c68:	e853 3f00 	ldrex	r3, [r3]
 8004c6c:	613b      	str	r3, [r7, #16]
   return(result);
 8004c6e:	693b      	ldr	r3, [r7, #16]
 8004c70:	f023 0310 	bic.w	r3, r3, #16
 8004c74:	627b      	str	r3, [r7, #36]	; 0x24
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	330c      	adds	r3, #12
 8004c7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c7e:	623a      	str	r2, [r7, #32]
 8004c80:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c82:	69f9      	ldr	r1, [r7, #28]
 8004c84:	6a3a      	ldr	r2, [r7, #32]
 8004c86:	e841 2300 	strex	r3, r2, [r1]
 8004c8a:	61bb      	str	r3, [r7, #24]
   return(result);
 8004c8c:	69bb      	ldr	r3, [r7, #24]
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d1e5      	bne.n	8004c5e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f003 0310 	and.w	r3, r3, #16
 8004c9c:	2b10      	cmp	r3, #16
 8004c9e:	d10a      	bne.n	8004cb6 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004ca0:	2300      	movs	r3, #0
 8004ca2:	60fb      	str	r3, [r7, #12]
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	60fb      	str	r3, [r7, #12]
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	685b      	ldr	r3, [r3, #4]
 8004cb2:	60fb      	str	r3, [r7, #12]
 8004cb4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004cba:	4619      	mov	r1, r3
 8004cbc:	6878      	ldr	r0, [r7, #4]
 8004cbe:	f7ff fcad 	bl	800461c <HAL_UARTEx_RxEventCallback>
 8004cc2:	e002      	b.n	8004cca <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004cc4:	6878      	ldr	r0, [r7, #4]
 8004cc6:	f7fb ffa5 	bl	8000c14 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004cca:	2300      	movs	r3, #0
 8004ccc:	e002      	b.n	8004cd4 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8004cce:	2300      	movs	r3, #0
 8004cd0:	e000      	b.n	8004cd4 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8004cd2:	2302      	movs	r3, #2
  }
}
 8004cd4:	4618      	mov	r0, r3
 8004cd6:	3730      	adds	r7, #48	; 0x30
 8004cd8:	46bd      	mov	sp, r7
 8004cda:	bd80      	pop	{r7, pc}

08004cdc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004cdc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004ce0:	b0c0      	sub	sp, #256	; 0x100
 8004ce2:	af00      	add	r7, sp, #0
 8004ce4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004ce8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	691b      	ldr	r3, [r3, #16]
 8004cf0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004cf4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cf8:	68d9      	ldr	r1, [r3, #12]
 8004cfa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cfe:	681a      	ldr	r2, [r3, #0]
 8004d00:	ea40 0301 	orr.w	r3, r0, r1
 8004d04:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004d06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d0a:	689a      	ldr	r2, [r3, #8]
 8004d0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d10:	691b      	ldr	r3, [r3, #16]
 8004d12:	431a      	orrs	r2, r3
 8004d14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d18:	695b      	ldr	r3, [r3, #20]
 8004d1a:	431a      	orrs	r2, r3
 8004d1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d20:	69db      	ldr	r3, [r3, #28]
 8004d22:	4313      	orrs	r3, r2
 8004d24:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004d28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	68db      	ldr	r3, [r3, #12]
 8004d30:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004d34:	f021 010c 	bic.w	r1, r1, #12
 8004d38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d3c:	681a      	ldr	r2, [r3, #0]
 8004d3e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004d42:	430b      	orrs	r3, r1
 8004d44:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004d46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	695b      	ldr	r3, [r3, #20]
 8004d4e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004d52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d56:	6999      	ldr	r1, [r3, #24]
 8004d58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d5c:	681a      	ldr	r2, [r3, #0]
 8004d5e:	ea40 0301 	orr.w	r3, r0, r1
 8004d62:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004d64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d68:	681a      	ldr	r2, [r3, #0]
 8004d6a:	4b8f      	ldr	r3, [pc, #572]	; (8004fa8 <UART_SetConfig+0x2cc>)
 8004d6c:	429a      	cmp	r2, r3
 8004d6e:	d005      	beq.n	8004d7c <UART_SetConfig+0xa0>
 8004d70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d74:	681a      	ldr	r2, [r3, #0]
 8004d76:	4b8d      	ldr	r3, [pc, #564]	; (8004fac <UART_SetConfig+0x2d0>)
 8004d78:	429a      	cmp	r2, r3
 8004d7a:	d104      	bne.n	8004d86 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004d7c:	f7fe fee4 	bl	8003b48 <HAL_RCC_GetPCLK2Freq>
 8004d80:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004d84:	e003      	b.n	8004d8e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004d86:	f7fe fecb 	bl	8003b20 <HAL_RCC_GetPCLK1Freq>
 8004d8a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004d8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d92:	69db      	ldr	r3, [r3, #28]
 8004d94:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d98:	f040 810c 	bne.w	8004fb4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004d9c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004da0:	2200      	movs	r2, #0
 8004da2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004da6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004daa:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004dae:	4622      	mov	r2, r4
 8004db0:	462b      	mov	r3, r5
 8004db2:	1891      	adds	r1, r2, r2
 8004db4:	65b9      	str	r1, [r7, #88]	; 0x58
 8004db6:	415b      	adcs	r3, r3
 8004db8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004dba:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004dbe:	4621      	mov	r1, r4
 8004dc0:	eb12 0801 	adds.w	r8, r2, r1
 8004dc4:	4629      	mov	r1, r5
 8004dc6:	eb43 0901 	adc.w	r9, r3, r1
 8004dca:	f04f 0200 	mov.w	r2, #0
 8004dce:	f04f 0300 	mov.w	r3, #0
 8004dd2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004dd6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004dda:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004dde:	4690      	mov	r8, r2
 8004de0:	4699      	mov	r9, r3
 8004de2:	4623      	mov	r3, r4
 8004de4:	eb18 0303 	adds.w	r3, r8, r3
 8004de8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004dec:	462b      	mov	r3, r5
 8004dee:	eb49 0303 	adc.w	r3, r9, r3
 8004df2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004df6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004dfa:	685b      	ldr	r3, [r3, #4]
 8004dfc:	2200      	movs	r2, #0
 8004dfe:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004e02:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004e06:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004e0a:	460b      	mov	r3, r1
 8004e0c:	18db      	adds	r3, r3, r3
 8004e0e:	653b      	str	r3, [r7, #80]	; 0x50
 8004e10:	4613      	mov	r3, r2
 8004e12:	eb42 0303 	adc.w	r3, r2, r3
 8004e16:	657b      	str	r3, [r7, #84]	; 0x54
 8004e18:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004e1c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004e20:	f7fb f9da 	bl	80001d8 <__aeabi_uldivmod>
 8004e24:	4602      	mov	r2, r0
 8004e26:	460b      	mov	r3, r1
 8004e28:	4b61      	ldr	r3, [pc, #388]	; (8004fb0 <UART_SetConfig+0x2d4>)
 8004e2a:	fba3 2302 	umull	r2, r3, r3, r2
 8004e2e:	095b      	lsrs	r3, r3, #5
 8004e30:	011c      	lsls	r4, r3, #4
 8004e32:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004e36:	2200      	movs	r2, #0
 8004e38:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004e3c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004e40:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004e44:	4642      	mov	r2, r8
 8004e46:	464b      	mov	r3, r9
 8004e48:	1891      	adds	r1, r2, r2
 8004e4a:	64b9      	str	r1, [r7, #72]	; 0x48
 8004e4c:	415b      	adcs	r3, r3
 8004e4e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004e50:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004e54:	4641      	mov	r1, r8
 8004e56:	eb12 0a01 	adds.w	sl, r2, r1
 8004e5a:	4649      	mov	r1, r9
 8004e5c:	eb43 0b01 	adc.w	fp, r3, r1
 8004e60:	f04f 0200 	mov.w	r2, #0
 8004e64:	f04f 0300 	mov.w	r3, #0
 8004e68:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004e6c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004e70:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004e74:	4692      	mov	sl, r2
 8004e76:	469b      	mov	fp, r3
 8004e78:	4643      	mov	r3, r8
 8004e7a:	eb1a 0303 	adds.w	r3, sl, r3
 8004e7e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004e82:	464b      	mov	r3, r9
 8004e84:	eb4b 0303 	adc.w	r3, fp, r3
 8004e88:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004e8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e90:	685b      	ldr	r3, [r3, #4]
 8004e92:	2200      	movs	r2, #0
 8004e94:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004e98:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004e9c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004ea0:	460b      	mov	r3, r1
 8004ea2:	18db      	adds	r3, r3, r3
 8004ea4:	643b      	str	r3, [r7, #64]	; 0x40
 8004ea6:	4613      	mov	r3, r2
 8004ea8:	eb42 0303 	adc.w	r3, r2, r3
 8004eac:	647b      	str	r3, [r7, #68]	; 0x44
 8004eae:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004eb2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004eb6:	f7fb f98f 	bl	80001d8 <__aeabi_uldivmod>
 8004eba:	4602      	mov	r2, r0
 8004ebc:	460b      	mov	r3, r1
 8004ebe:	4611      	mov	r1, r2
 8004ec0:	4b3b      	ldr	r3, [pc, #236]	; (8004fb0 <UART_SetConfig+0x2d4>)
 8004ec2:	fba3 2301 	umull	r2, r3, r3, r1
 8004ec6:	095b      	lsrs	r3, r3, #5
 8004ec8:	2264      	movs	r2, #100	; 0x64
 8004eca:	fb02 f303 	mul.w	r3, r2, r3
 8004ece:	1acb      	subs	r3, r1, r3
 8004ed0:	00db      	lsls	r3, r3, #3
 8004ed2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004ed6:	4b36      	ldr	r3, [pc, #216]	; (8004fb0 <UART_SetConfig+0x2d4>)
 8004ed8:	fba3 2302 	umull	r2, r3, r3, r2
 8004edc:	095b      	lsrs	r3, r3, #5
 8004ede:	005b      	lsls	r3, r3, #1
 8004ee0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004ee4:	441c      	add	r4, r3
 8004ee6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004eea:	2200      	movs	r2, #0
 8004eec:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004ef0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004ef4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004ef8:	4642      	mov	r2, r8
 8004efa:	464b      	mov	r3, r9
 8004efc:	1891      	adds	r1, r2, r2
 8004efe:	63b9      	str	r1, [r7, #56]	; 0x38
 8004f00:	415b      	adcs	r3, r3
 8004f02:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004f04:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004f08:	4641      	mov	r1, r8
 8004f0a:	1851      	adds	r1, r2, r1
 8004f0c:	6339      	str	r1, [r7, #48]	; 0x30
 8004f0e:	4649      	mov	r1, r9
 8004f10:	414b      	adcs	r3, r1
 8004f12:	637b      	str	r3, [r7, #52]	; 0x34
 8004f14:	f04f 0200 	mov.w	r2, #0
 8004f18:	f04f 0300 	mov.w	r3, #0
 8004f1c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004f20:	4659      	mov	r1, fp
 8004f22:	00cb      	lsls	r3, r1, #3
 8004f24:	4651      	mov	r1, sl
 8004f26:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004f2a:	4651      	mov	r1, sl
 8004f2c:	00ca      	lsls	r2, r1, #3
 8004f2e:	4610      	mov	r0, r2
 8004f30:	4619      	mov	r1, r3
 8004f32:	4603      	mov	r3, r0
 8004f34:	4642      	mov	r2, r8
 8004f36:	189b      	adds	r3, r3, r2
 8004f38:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004f3c:	464b      	mov	r3, r9
 8004f3e:	460a      	mov	r2, r1
 8004f40:	eb42 0303 	adc.w	r3, r2, r3
 8004f44:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004f48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f4c:	685b      	ldr	r3, [r3, #4]
 8004f4e:	2200      	movs	r2, #0
 8004f50:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004f54:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004f58:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004f5c:	460b      	mov	r3, r1
 8004f5e:	18db      	adds	r3, r3, r3
 8004f60:	62bb      	str	r3, [r7, #40]	; 0x28
 8004f62:	4613      	mov	r3, r2
 8004f64:	eb42 0303 	adc.w	r3, r2, r3
 8004f68:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004f6a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004f6e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004f72:	f7fb f931 	bl	80001d8 <__aeabi_uldivmod>
 8004f76:	4602      	mov	r2, r0
 8004f78:	460b      	mov	r3, r1
 8004f7a:	4b0d      	ldr	r3, [pc, #52]	; (8004fb0 <UART_SetConfig+0x2d4>)
 8004f7c:	fba3 1302 	umull	r1, r3, r3, r2
 8004f80:	095b      	lsrs	r3, r3, #5
 8004f82:	2164      	movs	r1, #100	; 0x64
 8004f84:	fb01 f303 	mul.w	r3, r1, r3
 8004f88:	1ad3      	subs	r3, r2, r3
 8004f8a:	00db      	lsls	r3, r3, #3
 8004f8c:	3332      	adds	r3, #50	; 0x32
 8004f8e:	4a08      	ldr	r2, [pc, #32]	; (8004fb0 <UART_SetConfig+0x2d4>)
 8004f90:	fba2 2303 	umull	r2, r3, r2, r3
 8004f94:	095b      	lsrs	r3, r3, #5
 8004f96:	f003 0207 	and.w	r2, r3, #7
 8004f9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	4422      	add	r2, r4
 8004fa2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004fa4:	e105      	b.n	80051b2 <UART_SetConfig+0x4d6>
 8004fa6:	bf00      	nop
 8004fa8:	40011000 	.word	0x40011000
 8004fac:	40011400 	.word	0x40011400
 8004fb0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004fb4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004fb8:	2200      	movs	r2, #0
 8004fba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004fbe:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004fc2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004fc6:	4642      	mov	r2, r8
 8004fc8:	464b      	mov	r3, r9
 8004fca:	1891      	adds	r1, r2, r2
 8004fcc:	6239      	str	r1, [r7, #32]
 8004fce:	415b      	adcs	r3, r3
 8004fd0:	627b      	str	r3, [r7, #36]	; 0x24
 8004fd2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004fd6:	4641      	mov	r1, r8
 8004fd8:	1854      	adds	r4, r2, r1
 8004fda:	4649      	mov	r1, r9
 8004fdc:	eb43 0501 	adc.w	r5, r3, r1
 8004fe0:	f04f 0200 	mov.w	r2, #0
 8004fe4:	f04f 0300 	mov.w	r3, #0
 8004fe8:	00eb      	lsls	r3, r5, #3
 8004fea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004fee:	00e2      	lsls	r2, r4, #3
 8004ff0:	4614      	mov	r4, r2
 8004ff2:	461d      	mov	r5, r3
 8004ff4:	4643      	mov	r3, r8
 8004ff6:	18e3      	adds	r3, r4, r3
 8004ff8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004ffc:	464b      	mov	r3, r9
 8004ffe:	eb45 0303 	adc.w	r3, r5, r3
 8005002:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005006:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800500a:	685b      	ldr	r3, [r3, #4]
 800500c:	2200      	movs	r2, #0
 800500e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005012:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005016:	f04f 0200 	mov.w	r2, #0
 800501a:	f04f 0300 	mov.w	r3, #0
 800501e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005022:	4629      	mov	r1, r5
 8005024:	008b      	lsls	r3, r1, #2
 8005026:	4621      	mov	r1, r4
 8005028:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800502c:	4621      	mov	r1, r4
 800502e:	008a      	lsls	r2, r1, #2
 8005030:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005034:	f7fb f8d0 	bl	80001d8 <__aeabi_uldivmod>
 8005038:	4602      	mov	r2, r0
 800503a:	460b      	mov	r3, r1
 800503c:	4b60      	ldr	r3, [pc, #384]	; (80051c0 <UART_SetConfig+0x4e4>)
 800503e:	fba3 2302 	umull	r2, r3, r3, r2
 8005042:	095b      	lsrs	r3, r3, #5
 8005044:	011c      	lsls	r4, r3, #4
 8005046:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800504a:	2200      	movs	r2, #0
 800504c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005050:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005054:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005058:	4642      	mov	r2, r8
 800505a:	464b      	mov	r3, r9
 800505c:	1891      	adds	r1, r2, r2
 800505e:	61b9      	str	r1, [r7, #24]
 8005060:	415b      	adcs	r3, r3
 8005062:	61fb      	str	r3, [r7, #28]
 8005064:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005068:	4641      	mov	r1, r8
 800506a:	1851      	adds	r1, r2, r1
 800506c:	6139      	str	r1, [r7, #16]
 800506e:	4649      	mov	r1, r9
 8005070:	414b      	adcs	r3, r1
 8005072:	617b      	str	r3, [r7, #20]
 8005074:	f04f 0200 	mov.w	r2, #0
 8005078:	f04f 0300 	mov.w	r3, #0
 800507c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005080:	4659      	mov	r1, fp
 8005082:	00cb      	lsls	r3, r1, #3
 8005084:	4651      	mov	r1, sl
 8005086:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800508a:	4651      	mov	r1, sl
 800508c:	00ca      	lsls	r2, r1, #3
 800508e:	4610      	mov	r0, r2
 8005090:	4619      	mov	r1, r3
 8005092:	4603      	mov	r3, r0
 8005094:	4642      	mov	r2, r8
 8005096:	189b      	adds	r3, r3, r2
 8005098:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800509c:	464b      	mov	r3, r9
 800509e:	460a      	mov	r2, r1
 80050a0:	eb42 0303 	adc.w	r3, r2, r3
 80050a4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80050a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050ac:	685b      	ldr	r3, [r3, #4]
 80050ae:	2200      	movs	r2, #0
 80050b0:	67bb      	str	r3, [r7, #120]	; 0x78
 80050b2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80050b4:	f04f 0200 	mov.w	r2, #0
 80050b8:	f04f 0300 	mov.w	r3, #0
 80050bc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80050c0:	4649      	mov	r1, r9
 80050c2:	008b      	lsls	r3, r1, #2
 80050c4:	4641      	mov	r1, r8
 80050c6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80050ca:	4641      	mov	r1, r8
 80050cc:	008a      	lsls	r2, r1, #2
 80050ce:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80050d2:	f7fb f881 	bl	80001d8 <__aeabi_uldivmod>
 80050d6:	4602      	mov	r2, r0
 80050d8:	460b      	mov	r3, r1
 80050da:	4b39      	ldr	r3, [pc, #228]	; (80051c0 <UART_SetConfig+0x4e4>)
 80050dc:	fba3 1302 	umull	r1, r3, r3, r2
 80050e0:	095b      	lsrs	r3, r3, #5
 80050e2:	2164      	movs	r1, #100	; 0x64
 80050e4:	fb01 f303 	mul.w	r3, r1, r3
 80050e8:	1ad3      	subs	r3, r2, r3
 80050ea:	011b      	lsls	r3, r3, #4
 80050ec:	3332      	adds	r3, #50	; 0x32
 80050ee:	4a34      	ldr	r2, [pc, #208]	; (80051c0 <UART_SetConfig+0x4e4>)
 80050f0:	fba2 2303 	umull	r2, r3, r2, r3
 80050f4:	095b      	lsrs	r3, r3, #5
 80050f6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80050fa:	441c      	add	r4, r3
 80050fc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005100:	2200      	movs	r2, #0
 8005102:	673b      	str	r3, [r7, #112]	; 0x70
 8005104:	677a      	str	r2, [r7, #116]	; 0x74
 8005106:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800510a:	4642      	mov	r2, r8
 800510c:	464b      	mov	r3, r9
 800510e:	1891      	adds	r1, r2, r2
 8005110:	60b9      	str	r1, [r7, #8]
 8005112:	415b      	adcs	r3, r3
 8005114:	60fb      	str	r3, [r7, #12]
 8005116:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800511a:	4641      	mov	r1, r8
 800511c:	1851      	adds	r1, r2, r1
 800511e:	6039      	str	r1, [r7, #0]
 8005120:	4649      	mov	r1, r9
 8005122:	414b      	adcs	r3, r1
 8005124:	607b      	str	r3, [r7, #4]
 8005126:	f04f 0200 	mov.w	r2, #0
 800512a:	f04f 0300 	mov.w	r3, #0
 800512e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005132:	4659      	mov	r1, fp
 8005134:	00cb      	lsls	r3, r1, #3
 8005136:	4651      	mov	r1, sl
 8005138:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800513c:	4651      	mov	r1, sl
 800513e:	00ca      	lsls	r2, r1, #3
 8005140:	4610      	mov	r0, r2
 8005142:	4619      	mov	r1, r3
 8005144:	4603      	mov	r3, r0
 8005146:	4642      	mov	r2, r8
 8005148:	189b      	adds	r3, r3, r2
 800514a:	66bb      	str	r3, [r7, #104]	; 0x68
 800514c:	464b      	mov	r3, r9
 800514e:	460a      	mov	r2, r1
 8005150:	eb42 0303 	adc.w	r3, r2, r3
 8005154:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005156:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800515a:	685b      	ldr	r3, [r3, #4]
 800515c:	2200      	movs	r2, #0
 800515e:	663b      	str	r3, [r7, #96]	; 0x60
 8005160:	667a      	str	r2, [r7, #100]	; 0x64
 8005162:	f04f 0200 	mov.w	r2, #0
 8005166:	f04f 0300 	mov.w	r3, #0
 800516a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800516e:	4649      	mov	r1, r9
 8005170:	008b      	lsls	r3, r1, #2
 8005172:	4641      	mov	r1, r8
 8005174:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005178:	4641      	mov	r1, r8
 800517a:	008a      	lsls	r2, r1, #2
 800517c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005180:	f7fb f82a 	bl	80001d8 <__aeabi_uldivmod>
 8005184:	4602      	mov	r2, r0
 8005186:	460b      	mov	r3, r1
 8005188:	4b0d      	ldr	r3, [pc, #52]	; (80051c0 <UART_SetConfig+0x4e4>)
 800518a:	fba3 1302 	umull	r1, r3, r3, r2
 800518e:	095b      	lsrs	r3, r3, #5
 8005190:	2164      	movs	r1, #100	; 0x64
 8005192:	fb01 f303 	mul.w	r3, r1, r3
 8005196:	1ad3      	subs	r3, r2, r3
 8005198:	011b      	lsls	r3, r3, #4
 800519a:	3332      	adds	r3, #50	; 0x32
 800519c:	4a08      	ldr	r2, [pc, #32]	; (80051c0 <UART_SetConfig+0x4e4>)
 800519e:	fba2 2303 	umull	r2, r3, r2, r3
 80051a2:	095b      	lsrs	r3, r3, #5
 80051a4:	f003 020f 	and.w	r2, r3, #15
 80051a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	4422      	add	r2, r4
 80051b0:	609a      	str	r2, [r3, #8]
}
 80051b2:	bf00      	nop
 80051b4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80051b8:	46bd      	mov	sp, r7
 80051ba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80051be:	bf00      	nop
 80051c0:	51eb851f 	.word	0x51eb851f

080051c4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80051c4:	b084      	sub	sp, #16
 80051c6:	b580      	push	{r7, lr}
 80051c8:	b084      	sub	sp, #16
 80051ca:	af00      	add	r7, sp, #0
 80051cc:	6078      	str	r0, [r7, #4]
 80051ce:	f107 001c 	add.w	r0, r7, #28
 80051d2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80051d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051d8:	2b01      	cmp	r3, #1
 80051da:	d122      	bne.n	8005222 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051e0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	68db      	ldr	r3, [r3, #12]
 80051ec:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80051f0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80051f4:	687a      	ldr	r2, [r7, #4]
 80051f6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	68db      	ldr	r3, [r3, #12]
 80051fc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005204:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005206:	2b01      	cmp	r3, #1
 8005208:	d105      	bne.n	8005216 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	68db      	ldr	r3, [r3, #12]
 800520e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005216:	6878      	ldr	r0, [r7, #4]
 8005218:	f001 fb1c 	bl	8006854 <USB_CoreReset>
 800521c:	4603      	mov	r3, r0
 800521e:	73fb      	strb	r3, [r7, #15]
 8005220:	e01a      	b.n	8005258 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	68db      	ldr	r3, [r3, #12]
 8005226:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800522e:	6878      	ldr	r0, [r7, #4]
 8005230:	f001 fb10 	bl	8006854 <USB_CoreReset>
 8005234:	4603      	mov	r3, r0
 8005236:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005238:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800523a:	2b00      	cmp	r3, #0
 800523c:	d106      	bne.n	800524c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005242:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	639a      	str	r2, [r3, #56]	; 0x38
 800524a:	e005      	b.n	8005258 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005250:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005258:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800525a:	2b01      	cmp	r3, #1
 800525c:	d10b      	bne.n	8005276 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	689b      	ldr	r3, [r3, #8]
 8005262:	f043 0206 	orr.w	r2, r3, #6
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	689b      	ldr	r3, [r3, #8]
 800526e:	f043 0220 	orr.w	r2, r3, #32
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005276:	7bfb      	ldrb	r3, [r7, #15]
}
 8005278:	4618      	mov	r0, r3
 800527a:	3710      	adds	r7, #16
 800527c:	46bd      	mov	sp, r7
 800527e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005282:	b004      	add	sp, #16
 8005284:	4770      	bx	lr
	...

08005288 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8005288:	b480      	push	{r7}
 800528a:	b087      	sub	sp, #28
 800528c:	af00      	add	r7, sp, #0
 800528e:	60f8      	str	r0, [r7, #12]
 8005290:	60b9      	str	r1, [r7, #8]
 8005292:	4613      	mov	r3, r2
 8005294:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8005296:	79fb      	ldrb	r3, [r7, #7]
 8005298:	2b02      	cmp	r3, #2
 800529a:	d165      	bne.n	8005368 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800529c:	68bb      	ldr	r3, [r7, #8]
 800529e:	4a41      	ldr	r2, [pc, #260]	; (80053a4 <USB_SetTurnaroundTime+0x11c>)
 80052a0:	4293      	cmp	r3, r2
 80052a2:	d906      	bls.n	80052b2 <USB_SetTurnaroundTime+0x2a>
 80052a4:	68bb      	ldr	r3, [r7, #8]
 80052a6:	4a40      	ldr	r2, [pc, #256]	; (80053a8 <USB_SetTurnaroundTime+0x120>)
 80052a8:	4293      	cmp	r3, r2
 80052aa:	d202      	bcs.n	80052b2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80052ac:	230f      	movs	r3, #15
 80052ae:	617b      	str	r3, [r7, #20]
 80052b0:	e062      	b.n	8005378 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80052b2:	68bb      	ldr	r3, [r7, #8]
 80052b4:	4a3c      	ldr	r2, [pc, #240]	; (80053a8 <USB_SetTurnaroundTime+0x120>)
 80052b6:	4293      	cmp	r3, r2
 80052b8:	d306      	bcc.n	80052c8 <USB_SetTurnaroundTime+0x40>
 80052ba:	68bb      	ldr	r3, [r7, #8]
 80052bc:	4a3b      	ldr	r2, [pc, #236]	; (80053ac <USB_SetTurnaroundTime+0x124>)
 80052be:	4293      	cmp	r3, r2
 80052c0:	d202      	bcs.n	80052c8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80052c2:	230e      	movs	r3, #14
 80052c4:	617b      	str	r3, [r7, #20]
 80052c6:	e057      	b.n	8005378 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80052c8:	68bb      	ldr	r3, [r7, #8]
 80052ca:	4a38      	ldr	r2, [pc, #224]	; (80053ac <USB_SetTurnaroundTime+0x124>)
 80052cc:	4293      	cmp	r3, r2
 80052ce:	d306      	bcc.n	80052de <USB_SetTurnaroundTime+0x56>
 80052d0:	68bb      	ldr	r3, [r7, #8]
 80052d2:	4a37      	ldr	r2, [pc, #220]	; (80053b0 <USB_SetTurnaroundTime+0x128>)
 80052d4:	4293      	cmp	r3, r2
 80052d6:	d202      	bcs.n	80052de <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80052d8:	230d      	movs	r3, #13
 80052da:	617b      	str	r3, [r7, #20]
 80052dc:	e04c      	b.n	8005378 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80052de:	68bb      	ldr	r3, [r7, #8]
 80052e0:	4a33      	ldr	r2, [pc, #204]	; (80053b0 <USB_SetTurnaroundTime+0x128>)
 80052e2:	4293      	cmp	r3, r2
 80052e4:	d306      	bcc.n	80052f4 <USB_SetTurnaroundTime+0x6c>
 80052e6:	68bb      	ldr	r3, [r7, #8]
 80052e8:	4a32      	ldr	r2, [pc, #200]	; (80053b4 <USB_SetTurnaroundTime+0x12c>)
 80052ea:	4293      	cmp	r3, r2
 80052ec:	d802      	bhi.n	80052f4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80052ee:	230c      	movs	r3, #12
 80052f0:	617b      	str	r3, [r7, #20]
 80052f2:	e041      	b.n	8005378 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80052f4:	68bb      	ldr	r3, [r7, #8]
 80052f6:	4a2f      	ldr	r2, [pc, #188]	; (80053b4 <USB_SetTurnaroundTime+0x12c>)
 80052f8:	4293      	cmp	r3, r2
 80052fa:	d906      	bls.n	800530a <USB_SetTurnaroundTime+0x82>
 80052fc:	68bb      	ldr	r3, [r7, #8]
 80052fe:	4a2e      	ldr	r2, [pc, #184]	; (80053b8 <USB_SetTurnaroundTime+0x130>)
 8005300:	4293      	cmp	r3, r2
 8005302:	d802      	bhi.n	800530a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8005304:	230b      	movs	r3, #11
 8005306:	617b      	str	r3, [r7, #20]
 8005308:	e036      	b.n	8005378 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800530a:	68bb      	ldr	r3, [r7, #8]
 800530c:	4a2a      	ldr	r2, [pc, #168]	; (80053b8 <USB_SetTurnaroundTime+0x130>)
 800530e:	4293      	cmp	r3, r2
 8005310:	d906      	bls.n	8005320 <USB_SetTurnaroundTime+0x98>
 8005312:	68bb      	ldr	r3, [r7, #8]
 8005314:	4a29      	ldr	r2, [pc, #164]	; (80053bc <USB_SetTurnaroundTime+0x134>)
 8005316:	4293      	cmp	r3, r2
 8005318:	d802      	bhi.n	8005320 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800531a:	230a      	movs	r3, #10
 800531c:	617b      	str	r3, [r7, #20]
 800531e:	e02b      	b.n	8005378 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005320:	68bb      	ldr	r3, [r7, #8]
 8005322:	4a26      	ldr	r2, [pc, #152]	; (80053bc <USB_SetTurnaroundTime+0x134>)
 8005324:	4293      	cmp	r3, r2
 8005326:	d906      	bls.n	8005336 <USB_SetTurnaroundTime+0xae>
 8005328:	68bb      	ldr	r3, [r7, #8]
 800532a:	4a25      	ldr	r2, [pc, #148]	; (80053c0 <USB_SetTurnaroundTime+0x138>)
 800532c:	4293      	cmp	r3, r2
 800532e:	d202      	bcs.n	8005336 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8005330:	2309      	movs	r3, #9
 8005332:	617b      	str	r3, [r7, #20]
 8005334:	e020      	b.n	8005378 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8005336:	68bb      	ldr	r3, [r7, #8]
 8005338:	4a21      	ldr	r2, [pc, #132]	; (80053c0 <USB_SetTurnaroundTime+0x138>)
 800533a:	4293      	cmp	r3, r2
 800533c:	d306      	bcc.n	800534c <USB_SetTurnaroundTime+0xc4>
 800533e:	68bb      	ldr	r3, [r7, #8]
 8005340:	4a20      	ldr	r2, [pc, #128]	; (80053c4 <USB_SetTurnaroundTime+0x13c>)
 8005342:	4293      	cmp	r3, r2
 8005344:	d802      	bhi.n	800534c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8005346:	2308      	movs	r3, #8
 8005348:	617b      	str	r3, [r7, #20]
 800534a:	e015      	b.n	8005378 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800534c:	68bb      	ldr	r3, [r7, #8]
 800534e:	4a1d      	ldr	r2, [pc, #116]	; (80053c4 <USB_SetTurnaroundTime+0x13c>)
 8005350:	4293      	cmp	r3, r2
 8005352:	d906      	bls.n	8005362 <USB_SetTurnaroundTime+0xda>
 8005354:	68bb      	ldr	r3, [r7, #8]
 8005356:	4a1c      	ldr	r2, [pc, #112]	; (80053c8 <USB_SetTurnaroundTime+0x140>)
 8005358:	4293      	cmp	r3, r2
 800535a:	d202      	bcs.n	8005362 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800535c:	2307      	movs	r3, #7
 800535e:	617b      	str	r3, [r7, #20]
 8005360:	e00a      	b.n	8005378 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8005362:	2306      	movs	r3, #6
 8005364:	617b      	str	r3, [r7, #20]
 8005366:	e007      	b.n	8005378 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8005368:	79fb      	ldrb	r3, [r7, #7]
 800536a:	2b00      	cmp	r3, #0
 800536c:	d102      	bne.n	8005374 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800536e:	2309      	movs	r3, #9
 8005370:	617b      	str	r3, [r7, #20]
 8005372:	e001      	b.n	8005378 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8005374:	2309      	movs	r3, #9
 8005376:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	68db      	ldr	r3, [r3, #12]
 800537c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	68da      	ldr	r2, [r3, #12]
 8005388:	697b      	ldr	r3, [r7, #20]
 800538a:	029b      	lsls	r3, r3, #10
 800538c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8005390:	431a      	orrs	r2, r3
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005396:	2300      	movs	r3, #0
}
 8005398:	4618      	mov	r0, r3
 800539a:	371c      	adds	r7, #28
 800539c:	46bd      	mov	sp, r7
 800539e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a2:	4770      	bx	lr
 80053a4:	00d8acbf 	.word	0x00d8acbf
 80053a8:	00e4e1c0 	.word	0x00e4e1c0
 80053ac:	00f42400 	.word	0x00f42400
 80053b0:	01067380 	.word	0x01067380
 80053b4:	011a499f 	.word	0x011a499f
 80053b8:	01312cff 	.word	0x01312cff
 80053bc:	014ca43f 	.word	0x014ca43f
 80053c0:	016e3600 	.word	0x016e3600
 80053c4:	01a6ab1f 	.word	0x01a6ab1f
 80053c8:	01e84800 	.word	0x01e84800

080053cc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80053cc:	b480      	push	{r7}
 80053ce:	b083      	sub	sp, #12
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	689b      	ldr	r3, [r3, #8]
 80053d8:	f043 0201 	orr.w	r2, r3, #1
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80053e0:	2300      	movs	r3, #0
}
 80053e2:	4618      	mov	r0, r3
 80053e4:	370c      	adds	r7, #12
 80053e6:	46bd      	mov	sp, r7
 80053e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ec:	4770      	bx	lr

080053ee <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80053ee:	b480      	push	{r7}
 80053f0:	b083      	sub	sp, #12
 80053f2:	af00      	add	r7, sp, #0
 80053f4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	689b      	ldr	r3, [r3, #8]
 80053fa:	f023 0201 	bic.w	r2, r3, #1
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005402:	2300      	movs	r3, #0
}
 8005404:	4618      	mov	r0, r3
 8005406:	370c      	adds	r7, #12
 8005408:	46bd      	mov	sp, r7
 800540a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540e:	4770      	bx	lr

08005410 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005410:	b580      	push	{r7, lr}
 8005412:	b084      	sub	sp, #16
 8005414:	af00      	add	r7, sp, #0
 8005416:	6078      	str	r0, [r7, #4]
 8005418:	460b      	mov	r3, r1
 800541a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800541c:	2300      	movs	r3, #0
 800541e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	68db      	ldr	r3, [r3, #12]
 8005424:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800542c:	78fb      	ldrb	r3, [r7, #3]
 800542e:	2b01      	cmp	r3, #1
 8005430:	d115      	bne.n	800545e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	68db      	ldr	r3, [r3, #12]
 8005436:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800543e:	2001      	movs	r0, #1
 8005440:	f7fb fd58 	bl	8000ef4 <HAL_Delay>
      ms++;
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	3301      	adds	r3, #1
 8005448:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800544a:	6878      	ldr	r0, [r7, #4]
 800544c:	f001 f972 	bl	8006734 <USB_GetMode>
 8005450:	4603      	mov	r3, r0
 8005452:	2b01      	cmp	r3, #1
 8005454:	d01e      	beq.n	8005494 <USB_SetCurrentMode+0x84>
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	2b31      	cmp	r3, #49	; 0x31
 800545a:	d9f0      	bls.n	800543e <USB_SetCurrentMode+0x2e>
 800545c:	e01a      	b.n	8005494 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800545e:	78fb      	ldrb	r3, [r7, #3]
 8005460:	2b00      	cmp	r3, #0
 8005462:	d115      	bne.n	8005490 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	68db      	ldr	r3, [r3, #12]
 8005468:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005470:	2001      	movs	r0, #1
 8005472:	f7fb fd3f 	bl	8000ef4 <HAL_Delay>
      ms++;
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	3301      	adds	r3, #1
 800547a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800547c:	6878      	ldr	r0, [r7, #4]
 800547e:	f001 f959 	bl	8006734 <USB_GetMode>
 8005482:	4603      	mov	r3, r0
 8005484:	2b00      	cmp	r3, #0
 8005486:	d005      	beq.n	8005494 <USB_SetCurrentMode+0x84>
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	2b31      	cmp	r3, #49	; 0x31
 800548c:	d9f0      	bls.n	8005470 <USB_SetCurrentMode+0x60>
 800548e:	e001      	b.n	8005494 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005490:	2301      	movs	r3, #1
 8005492:	e005      	b.n	80054a0 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	2b32      	cmp	r3, #50	; 0x32
 8005498:	d101      	bne.n	800549e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800549a:	2301      	movs	r3, #1
 800549c:	e000      	b.n	80054a0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800549e:	2300      	movs	r3, #0
}
 80054a0:	4618      	mov	r0, r3
 80054a2:	3710      	adds	r7, #16
 80054a4:	46bd      	mov	sp, r7
 80054a6:	bd80      	pop	{r7, pc}

080054a8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80054a8:	b084      	sub	sp, #16
 80054aa:	b580      	push	{r7, lr}
 80054ac:	b086      	sub	sp, #24
 80054ae:	af00      	add	r7, sp, #0
 80054b0:	6078      	str	r0, [r7, #4]
 80054b2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80054b6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80054ba:	2300      	movs	r3, #0
 80054bc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80054c2:	2300      	movs	r3, #0
 80054c4:	613b      	str	r3, [r7, #16]
 80054c6:	e009      	b.n	80054dc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80054c8:	687a      	ldr	r2, [r7, #4]
 80054ca:	693b      	ldr	r3, [r7, #16]
 80054cc:	3340      	adds	r3, #64	; 0x40
 80054ce:	009b      	lsls	r3, r3, #2
 80054d0:	4413      	add	r3, r2
 80054d2:	2200      	movs	r2, #0
 80054d4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80054d6:	693b      	ldr	r3, [r7, #16]
 80054d8:	3301      	adds	r3, #1
 80054da:	613b      	str	r3, [r7, #16]
 80054dc:	693b      	ldr	r3, [r7, #16]
 80054de:	2b0e      	cmp	r3, #14
 80054e0:	d9f2      	bls.n	80054c8 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80054e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d11c      	bne.n	8005522 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054ee:	685b      	ldr	r3, [r3, #4]
 80054f0:	68fa      	ldr	r2, [r7, #12]
 80054f2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80054f6:	f043 0302 	orr.w	r3, r3, #2
 80054fa:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005500:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800550c:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005518:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	639a      	str	r2, [r3, #56]	; 0x38
 8005520:	e00b      	b.n	800553a <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005526:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005532:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005540:	461a      	mov	r2, r3
 8005542:	2300      	movs	r3, #0
 8005544:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800554c:	4619      	mov	r1, r3
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005554:	461a      	mov	r2, r3
 8005556:	680b      	ldr	r3, [r1, #0]
 8005558:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800555a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800555c:	2b01      	cmp	r3, #1
 800555e:	d10c      	bne.n	800557a <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005560:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005562:	2b00      	cmp	r3, #0
 8005564:	d104      	bne.n	8005570 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005566:	2100      	movs	r1, #0
 8005568:	6878      	ldr	r0, [r7, #4]
 800556a:	f000 f945 	bl	80057f8 <USB_SetDevSpeed>
 800556e:	e008      	b.n	8005582 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005570:	2101      	movs	r1, #1
 8005572:	6878      	ldr	r0, [r7, #4]
 8005574:	f000 f940 	bl	80057f8 <USB_SetDevSpeed>
 8005578:	e003      	b.n	8005582 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800557a:	2103      	movs	r1, #3
 800557c:	6878      	ldr	r0, [r7, #4]
 800557e:	f000 f93b 	bl	80057f8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005582:	2110      	movs	r1, #16
 8005584:	6878      	ldr	r0, [r7, #4]
 8005586:	f000 f8f3 	bl	8005770 <USB_FlushTxFifo>
 800558a:	4603      	mov	r3, r0
 800558c:	2b00      	cmp	r3, #0
 800558e:	d001      	beq.n	8005594 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8005590:	2301      	movs	r3, #1
 8005592:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005594:	6878      	ldr	r0, [r7, #4]
 8005596:	f000 f90f 	bl	80057b8 <USB_FlushRxFifo>
 800559a:	4603      	mov	r3, r0
 800559c:	2b00      	cmp	r3, #0
 800559e:	d001      	beq.n	80055a4 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80055a0:	2301      	movs	r3, #1
 80055a2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055aa:	461a      	mov	r2, r3
 80055ac:	2300      	movs	r3, #0
 80055ae:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055b6:	461a      	mov	r2, r3
 80055b8:	2300      	movs	r3, #0
 80055ba:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055c2:	461a      	mov	r2, r3
 80055c4:	2300      	movs	r3, #0
 80055c6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80055c8:	2300      	movs	r3, #0
 80055ca:	613b      	str	r3, [r7, #16]
 80055cc:	e043      	b.n	8005656 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80055ce:	693b      	ldr	r3, [r7, #16]
 80055d0:	015a      	lsls	r2, r3, #5
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	4413      	add	r3, r2
 80055d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80055e0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80055e4:	d118      	bne.n	8005618 <USB_DevInit+0x170>
    {
      if (i == 0U)
 80055e6:	693b      	ldr	r3, [r7, #16]
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d10a      	bne.n	8005602 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80055ec:	693b      	ldr	r3, [r7, #16]
 80055ee:	015a      	lsls	r2, r3, #5
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	4413      	add	r3, r2
 80055f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055f8:	461a      	mov	r2, r3
 80055fa:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80055fe:	6013      	str	r3, [r2, #0]
 8005600:	e013      	b.n	800562a <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005602:	693b      	ldr	r3, [r7, #16]
 8005604:	015a      	lsls	r2, r3, #5
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	4413      	add	r3, r2
 800560a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800560e:	461a      	mov	r2, r3
 8005610:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005614:	6013      	str	r3, [r2, #0]
 8005616:	e008      	b.n	800562a <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005618:	693b      	ldr	r3, [r7, #16]
 800561a:	015a      	lsls	r2, r3, #5
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	4413      	add	r3, r2
 8005620:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005624:	461a      	mov	r2, r3
 8005626:	2300      	movs	r3, #0
 8005628:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800562a:	693b      	ldr	r3, [r7, #16]
 800562c:	015a      	lsls	r2, r3, #5
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	4413      	add	r3, r2
 8005632:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005636:	461a      	mov	r2, r3
 8005638:	2300      	movs	r3, #0
 800563a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800563c:	693b      	ldr	r3, [r7, #16]
 800563e:	015a      	lsls	r2, r3, #5
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	4413      	add	r3, r2
 8005644:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005648:	461a      	mov	r2, r3
 800564a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800564e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005650:	693b      	ldr	r3, [r7, #16]
 8005652:	3301      	adds	r3, #1
 8005654:	613b      	str	r3, [r7, #16]
 8005656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005658:	693a      	ldr	r2, [r7, #16]
 800565a:	429a      	cmp	r2, r3
 800565c:	d3b7      	bcc.n	80055ce <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800565e:	2300      	movs	r3, #0
 8005660:	613b      	str	r3, [r7, #16]
 8005662:	e043      	b.n	80056ec <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005664:	693b      	ldr	r3, [r7, #16]
 8005666:	015a      	lsls	r2, r3, #5
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	4413      	add	r3, r2
 800566c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005676:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800567a:	d118      	bne.n	80056ae <USB_DevInit+0x206>
    {
      if (i == 0U)
 800567c:	693b      	ldr	r3, [r7, #16]
 800567e:	2b00      	cmp	r3, #0
 8005680:	d10a      	bne.n	8005698 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005682:	693b      	ldr	r3, [r7, #16]
 8005684:	015a      	lsls	r2, r3, #5
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	4413      	add	r3, r2
 800568a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800568e:	461a      	mov	r2, r3
 8005690:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005694:	6013      	str	r3, [r2, #0]
 8005696:	e013      	b.n	80056c0 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005698:	693b      	ldr	r3, [r7, #16]
 800569a:	015a      	lsls	r2, r3, #5
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	4413      	add	r3, r2
 80056a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056a4:	461a      	mov	r2, r3
 80056a6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80056aa:	6013      	str	r3, [r2, #0]
 80056ac:	e008      	b.n	80056c0 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80056ae:	693b      	ldr	r3, [r7, #16]
 80056b0:	015a      	lsls	r2, r3, #5
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	4413      	add	r3, r2
 80056b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056ba:	461a      	mov	r2, r3
 80056bc:	2300      	movs	r3, #0
 80056be:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80056c0:	693b      	ldr	r3, [r7, #16]
 80056c2:	015a      	lsls	r2, r3, #5
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	4413      	add	r3, r2
 80056c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056cc:	461a      	mov	r2, r3
 80056ce:	2300      	movs	r3, #0
 80056d0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80056d2:	693b      	ldr	r3, [r7, #16]
 80056d4:	015a      	lsls	r2, r3, #5
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	4413      	add	r3, r2
 80056da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056de:	461a      	mov	r2, r3
 80056e0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80056e4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80056e6:	693b      	ldr	r3, [r7, #16]
 80056e8:	3301      	adds	r3, #1
 80056ea:	613b      	str	r3, [r7, #16]
 80056ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056ee:	693a      	ldr	r2, [r7, #16]
 80056f0:	429a      	cmp	r2, r3
 80056f2:	d3b7      	bcc.n	8005664 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056fa:	691b      	ldr	r3, [r3, #16]
 80056fc:	68fa      	ldr	r2, [r7, #12]
 80056fe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005702:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005706:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	2200      	movs	r2, #0
 800570c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005714:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005716:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005718:	2b00      	cmp	r3, #0
 800571a:	d105      	bne.n	8005728 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	699b      	ldr	r3, [r3, #24]
 8005720:	f043 0210 	orr.w	r2, r3, #16
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	699a      	ldr	r2, [r3, #24]
 800572c:	4b0f      	ldr	r3, [pc, #60]	; (800576c <USB_DevInit+0x2c4>)
 800572e:	4313      	orrs	r3, r2
 8005730:	687a      	ldr	r2, [r7, #4]
 8005732:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005734:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005736:	2b00      	cmp	r3, #0
 8005738:	d005      	beq.n	8005746 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	699b      	ldr	r3, [r3, #24]
 800573e:	f043 0208 	orr.w	r2, r3, #8
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005746:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005748:	2b01      	cmp	r3, #1
 800574a:	d107      	bne.n	800575c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	699b      	ldr	r3, [r3, #24]
 8005750:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005754:	f043 0304 	orr.w	r3, r3, #4
 8005758:	687a      	ldr	r2, [r7, #4]
 800575a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800575c:	7dfb      	ldrb	r3, [r7, #23]
}
 800575e:	4618      	mov	r0, r3
 8005760:	3718      	adds	r7, #24
 8005762:	46bd      	mov	sp, r7
 8005764:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005768:	b004      	add	sp, #16
 800576a:	4770      	bx	lr
 800576c:	803c3800 	.word	0x803c3800

08005770 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005770:	b480      	push	{r7}
 8005772:	b085      	sub	sp, #20
 8005774:	af00      	add	r7, sp, #0
 8005776:	6078      	str	r0, [r7, #4]
 8005778:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800577a:	2300      	movs	r3, #0
 800577c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800577e:	683b      	ldr	r3, [r7, #0]
 8005780:	019b      	lsls	r3, r3, #6
 8005782:	f043 0220 	orr.w	r2, r3, #32
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	3301      	adds	r3, #1
 800578e:	60fb      	str	r3, [r7, #12]
 8005790:	4a08      	ldr	r2, [pc, #32]	; (80057b4 <USB_FlushTxFifo+0x44>)
 8005792:	4293      	cmp	r3, r2
 8005794:	d901      	bls.n	800579a <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 8005796:	2303      	movs	r3, #3
 8005798:	e006      	b.n	80057a8 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	691b      	ldr	r3, [r3, #16]
 800579e:	f003 0320 	and.w	r3, r3, #32
 80057a2:	2b20      	cmp	r3, #32
 80057a4:	d0f1      	beq.n	800578a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80057a6:	2300      	movs	r3, #0
}
 80057a8:	4618      	mov	r0, r3
 80057aa:	3714      	adds	r7, #20
 80057ac:	46bd      	mov	sp, r7
 80057ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b2:	4770      	bx	lr
 80057b4:	00030d40 	.word	0x00030d40

080057b8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80057b8:	b480      	push	{r7}
 80057ba:	b085      	sub	sp, #20
 80057bc:	af00      	add	r7, sp, #0
 80057be:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80057c0:	2300      	movs	r3, #0
 80057c2:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	2210      	movs	r2, #16
 80057c8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	3301      	adds	r3, #1
 80057ce:	60fb      	str	r3, [r7, #12]
 80057d0:	4a08      	ldr	r2, [pc, #32]	; (80057f4 <USB_FlushRxFifo+0x3c>)
 80057d2:	4293      	cmp	r3, r2
 80057d4:	d901      	bls.n	80057da <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 80057d6:	2303      	movs	r3, #3
 80057d8:	e006      	b.n	80057e8 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	691b      	ldr	r3, [r3, #16]
 80057de:	f003 0310 	and.w	r3, r3, #16
 80057e2:	2b10      	cmp	r3, #16
 80057e4:	d0f1      	beq.n	80057ca <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80057e6:	2300      	movs	r3, #0
}
 80057e8:	4618      	mov	r0, r3
 80057ea:	3714      	adds	r7, #20
 80057ec:	46bd      	mov	sp, r7
 80057ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f2:	4770      	bx	lr
 80057f4:	00030d40 	.word	0x00030d40

080057f8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80057f8:	b480      	push	{r7}
 80057fa:	b085      	sub	sp, #20
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	6078      	str	r0, [r7, #4]
 8005800:	460b      	mov	r3, r1
 8005802:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800580e:	681a      	ldr	r2, [r3, #0]
 8005810:	78fb      	ldrb	r3, [r7, #3]
 8005812:	68f9      	ldr	r1, [r7, #12]
 8005814:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005818:	4313      	orrs	r3, r2
 800581a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800581c:	2300      	movs	r3, #0
}
 800581e:	4618      	mov	r0, r3
 8005820:	3714      	adds	r7, #20
 8005822:	46bd      	mov	sp, r7
 8005824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005828:	4770      	bx	lr

0800582a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800582a:	b480      	push	{r7}
 800582c:	b087      	sub	sp, #28
 800582e:	af00      	add	r7, sp, #0
 8005830:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8005836:	693b      	ldr	r3, [r7, #16]
 8005838:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800583c:	689b      	ldr	r3, [r3, #8]
 800583e:	f003 0306 	and.w	r3, r3, #6
 8005842:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	2b00      	cmp	r3, #0
 8005848:	d102      	bne.n	8005850 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800584a:	2300      	movs	r3, #0
 800584c:	75fb      	strb	r3, [r7, #23]
 800584e:	e00a      	b.n	8005866 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	2b02      	cmp	r3, #2
 8005854:	d002      	beq.n	800585c <USB_GetDevSpeed+0x32>
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	2b06      	cmp	r3, #6
 800585a:	d102      	bne.n	8005862 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800585c:	2302      	movs	r3, #2
 800585e:	75fb      	strb	r3, [r7, #23]
 8005860:	e001      	b.n	8005866 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8005862:	230f      	movs	r3, #15
 8005864:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8005866:	7dfb      	ldrb	r3, [r7, #23]
}
 8005868:	4618      	mov	r0, r3
 800586a:	371c      	adds	r7, #28
 800586c:	46bd      	mov	sp, r7
 800586e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005872:	4770      	bx	lr

08005874 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005874:	b480      	push	{r7}
 8005876:	b085      	sub	sp, #20
 8005878:	af00      	add	r7, sp, #0
 800587a:	6078      	str	r0, [r7, #4]
 800587c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005882:	683b      	ldr	r3, [r7, #0]
 8005884:	781b      	ldrb	r3, [r3, #0]
 8005886:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005888:	683b      	ldr	r3, [r7, #0]
 800588a:	785b      	ldrb	r3, [r3, #1]
 800588c:	2b01      	cmp	r3, #1
 800588e:	d13a      	bne.n	8005906 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005896:	69da      	ldr	r2, [r3, #28]
 8005898:	683b      	ldr	r3, [r7, #0]
 800589a:	781b      	ldrb	r3, [r3, #0]
 800589c:	f003 030f 	and.w	r3, r3, #15
 80058a0:	2101      	movs	r1, #1
 80058a2:	fa01 f303 	lsl.w	r3, r1, r3
 80058a6:	b29b      	uxth	r3, r3
 80058a8:	68f9      	ldr	r1, [r7, #12]
 80058aa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80058ae:	4313      	orrs	r3, r2
 80058b0:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80058b2:	68bb      	ldr	r3, [r7, #8]
 80058b4:	015a      	lsls	r2, r3, #5
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	4413      	add	r3, r2
 80058ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d155      	bne.n	8005974 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80058c8:	68bb      	ldr	r3, [r7, #8]
 80058ca:	015a      	lsls	r2, r3, #5
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	4413      	add	r3, r2
 80058d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058d4:	681a      	ldr	r2, [r3, #0]
 80058d6:	683b      	ldr	r3, [r7, #0]
 80058d8:	689b      	ldr	r3, [r3, #8]
 80058da:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80058de:	683b      	ldr	r3, [r7, #0]
 80058e0:	78db      	ldrb	r3, [r3, #3]
 80058e2:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80058e4:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80058e6:	68bb      	ldr	r3, [r7, #8]
 80058e8:	059b      	lsls	r3, r3, #22
 80058ea:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80058ec:	4313      	orrs	r3, r2
 80058ee:	68ba      	ldr	r2, [r7, #8]
 80058f0:	0151      	lsls	r1, r2, #5
 80058f2:	68fa      	ldr	r2, [r7, #12]
 80058f4:	440a      	add	r2, r1
 80058f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80058fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80058fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005902:	6013      	str	r3, [r2, #0]
 8005904:	e036      	b.n	8005974 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800590c:	69da      	ldr	r2, [r3, #28]
 800590e:	683b      	ldr	r3, [r7, #0]
 8005910:	781b      	ldrb	r3, [r3, #0]
 8005912:	f003 030f 	and.w	r3, r3, #15
 8005916:	2101      	movs	r1, #1
 8005918:	fa01 f303 	lsl.w	r3, r1, r3
 800591c:	041b      	lsls	r3, r3, #16
 800591e:	68f9      	ldr	r1, [r7, #12]
 8005920:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005924:	4313      	orrs	r3, r2
 8005926:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005928:	68bb      	ldr	r3, [r7, #8]
 800592a:	015a      	lsls	r2, r3, #5
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	4413      	add	r3, r2
 8005930:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800593a:	2b00      	cmp	r3, #0
 800593c:	d11a      	bne.n	8005974 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800593e:	68bb      	ldr	r3, [r7, #8]
 8005940:	015a      	lsls	r2, r3, #5
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	4413      	add	r3, r2
 8005946:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800594a:	681a      	ldr	r2, [r3, #0]
 800594c:	683b      	ldr	r3, [r7, #0]
 800594e:	689b      	ldr	r3, [r3, #8]
 8005950:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005954:	683b      	ldr	r3, [r7, #0]
 8005956:	78db      	ldrb	r3, [r3, #3]
 8005958:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800595a:	430b      	orrs	r3, r1
 800595c:	4313      	orrs	r3, r2
 800595e:	68ba      	ldr	r2, [r7, #8]
 8005960:	0151      	lsls	r1, r2, #5
 8005962:	68fa      	ldr	r2, [r7, #12]
 8005964:	440a      	add	r2, r1
 8005966:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800596a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800596e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005972:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005974:	2300      	movs	r3, #0
}
 8005976:	4618      	mov	r0, r3
 8005978:	3714      	adds	r7, #20
 800597a:	46bd      	mov	sp, r7
 800597c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005980:	4770      	bx	lr
	...

08005984 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005984:	b480      	push	{r7}
 8005986:	b085      	sub	sp, #20
 8005988:	af00      	add	r7, sp, #0
 800598a:	6078      	str	r0, [r7, #4]
 800598c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005992:	683b      	ldr	r3, [r7, #0]
 8005994:	781b      	ldrb	r3, [r3, #0]
 8005996:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005998:	683b      	ldr	r3, [r7, #0]
 800599a:	785b      	ldrb	r3, [r3, #1]
 800599c:	2b01      	cmp	r3, #1
 800599e:	d161      	bne.n	8005a64 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80059a0:	68bb      	ldr	r3, [r7, #8]
 80059a2:	015a      	lsls	r2, r3, #5
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	4413      	add	r3, r2
 80059a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80059b2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80059b6:	d11f      	bne.n	80059f8 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80059b8:	68bb      	ldr	r3, [r7, #8]
 80059ba:	015a      	lsls	r2, r3, #5
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	4413      	add	r3, r2
 80059c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	68ba      	ldr	r2, [r7, #8]
 80059c8:	0151      	lsls	r1, r2, #5
 80059ca:	68fa      	ldr	r2, [r7, #12]
 80059cc:	440a      	add	r2, r1
 80059ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80059d2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80059d6:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80059d8:	68bb      	ldr	r3, [r7, #8]
 80059da:	015a      	lsls	r2, r3, #5
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	4413      	add	r3, r2
 80059e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	68ba      	ldr	r2, [r7, #8]
 80059e8:	0151      	lsls	r1, r2, #5
 80059ea:	68fa      	ldr	r2, [r7, #12]
 80059ec:	440a      	add	r2, r1
 80059ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80059f2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80059f6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059fe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005a00:	683b      	ldr	r3, [r7, #0]
 8005a02:	781b      	ldrb	r3, [r3, #0]
 8005a04:	f003 030f 	and.w	r3, r3, #15
 8005a08:	2101      	movs	r1, #1
 8005a0a:	fa01 f303 	lsl.w	r3, r1, r3
 8005a0e:	b29b      	uxth	r3, r3
 8005a10:	43db      	mvns	r3, r3
 8005a12:	68f9      	ldr	r1, [r7, #12]
 8005a14:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005a18:	4013      	ands	r3, r2
 8005a1a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a22:	69da      	ldr	r2, [r3, #28]
 8005a24:	683b      	ldr	r3, [r7, #0]
 8005a26:	781b      	ldrb	r3, [r3, #0]
 8005a28:	f003 030f 	and.w	r3, r3, #15
 8005a2c:	2101      	movs	r1, #1
 8005a2e:	fa01 f303 	lsl.w	r3, r1, r3
 8005a32:	b29b      	uxth	r3, r3
 8005a34:	43db      	mvns	r3, r3
 8005a36:	68f9      	ldr	r1, [r7, #12]
 8005a38:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005a3c:	4013      	ands	r3, r2
 8005a3e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005a40:	68bb      	ldr	r3, [r7, #8]
 8005a42:	015a      	lsls	r2, r3, #5
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	4413      	add	r3, r2
 8005a48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a4c:	681a      	ldr	r2, [r3, #0]
 8005a4e:	68bb      	ldr	r3, [r7, #8]
 8005a50:	0159      	lsls	r1, r3, #5
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	440b      	add	r3, r1
 8005a56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a5a:	4619      	mov	r1, r3
 8005a5c:	4b35      	ldr	r3, [pc, #212]	; (8005b34 <USB_DeactivateEndpoint+0x1b0>)
 8005a5e:	4013      	ands	r3, r2
 8005a60:	600b      	str	r3, [r1, #0]
 8005a62:	e060      	b.n	8005b26 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005a64:	68bb      	ldr	r3, [r7, #8]
 8005a66:	015a      	lsls	r2, r3, #5
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	4413      	add	r3, r2
 8005a6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005a76:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005a7a:	d11f      	bne.n	8005abc <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005a7c:	68bb      	ldr	r3, [r7, #8]
 8005a7e:	015a      	lsls	r2, r3, #5
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	4413      	add	r3, r2
 8005a84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	68ba      	ldr	r2, [r7, #8]
 8005a8c:	0151      	lsls	r1, r2, #5
 8005a8e:	68fa      	ldr	r2, [r7, #12]
 8005a90:	440a      	add	r2, r1
 8005a92:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a96:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005a9a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005a9c:	68bb      	ldr	r3, [r7, #8]
 8005a9e:	015a      	lsls	r2, r3, #5
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	4413      	add	r3, r2
 8005aa4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	68ba      	ldr	r2, [r7, #8]
 8005aac:	0151      	lsls	r1, r2, #5
 8005aae:	68fa      	ldr	r2, [r7, #12]
 8005ab0:	440a      	add	r2, r1
 8005ab2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ab6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005aba:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ac2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005ac4:	683b      	ldr	r3, [r7, #0]
 8005ac6:	781b      	ldrb	r3, [r3, #0]
 8005ac8:	f003 030f 	and.w	r3, r3, #15
 8005acc:	2101      	movs	r1, #1
 8005ace:	fa01 f303 	lsl.w	r3, r1, r3
 8005ad2:	041b      	lsls	r3, r3, #16
 8005ad4:	43db      	mvns	r3, r3
 8005ad6:	68f9      	ldr	r1, [r7, #12]
 8005ad8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005adc:	4013      	ands	r3, r2
 8005ade:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ae6:	69da      	ldr	r2, [r3, #28]
 8005ae8:	683b      	ldr	r3, [r7, #0]
 8005aea:	781b      	ldrb	r3, [r3, #0]
 8005aec:	f003 030f 	and.w	r3, r3, #15
 8005af0:	2101      	movs	r1, #1
 8005af2:	fa01 f303 	lsl.w	r3, r1, r3
 8005af6:	041b      	lsls	r3, r3, #16
 8005af8:	43db      	mvns	r3, r3
 8005afa:	68f9      	ldr	r1, [r7, #12]
 8005afc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005b00:	4013      	ands	r3, r2
 8005b02:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005b04:	68bb      	ldr	r3, [r7, #8]
 8005b06:	015a      	lsls	r2, r3, #5
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	4413      	add	r3, r2
 8005b0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b10:	681a      	ldr	r2, [r3, #0]
 8005b12:	68bb      	ldr	r3, [r7, #8]
 8005b14:	0159      	lsls	r1, r3, #5
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	440b      	add	r3, r1
 8005b1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b1e:	4619      	mov	r1, r3
 8005b20:	4b05      	ldr	r3, [pc, #20]	; (8005b38 <USB_DeactivateEndpoint+0x1b4>)
 8005b22:	4013      	ands	r3, r2
 8005b24:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8005b26:	2300      	movs	r3, #0
}
 8005b28:	4618      	mov	r0, r3
 8005b2a:	3714      	adds	r7, #20
 8005b2c:	46bd      	mov	sp, r7
 8005b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b32:	4770      	bx	lr
 8005b34:	ec337800 	.word	0xec337800
 8005b38:	eff37800 	.word	0xeff37800

08005b3c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005b3c:	b580      	push	{r7, lr}
 8005b3e:	b08a      	sub	sp, #40	; 0x28
 8005b40:	af02      	add	r7, sp, #8
 8005b42:	60f8      	str	r0, [r7, #12]
 8005b44:	60b9      	str	r1, [r7, #8]
 8005b46:	4613      	mov	r3, r2
 8005b48:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8005b4e:	68bb      	ldr	r3, [r7, #8]
 8005b50:	781b      	ldrb	r3, [r3, #0]
 8005b52:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005b54:	68bb      	ldr	r3, [r7, #8]
 8005b56:	785b      	ldrb	r3, [r3, #1]
 8005b58:	2b01      	cmp	r3, #1
 8005b5a:	f040 815c 	bne.w	8005e16 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005b5e:	68bb      	ldr	r3, [r7, #8]
 8005b60:	695b      	ldr	r3, [r3, #20]
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d132      	bne.n	8005bcc <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005b66:	69bb      	ldr	r3, [r7, #24]
 8005b68:	015a      	lsls	r2, r3, #5
 8005b6a:	69fb      	ldr	r3, [r7, #28]
 8005b6c:	4413      	add	r3, r2
 8005b6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b72:	691b      	ldr	r3, [r3, #16]
 8005b74:	69ba      	ldr	r2, [r7, #24]
 8005b76:	0151      	lsls	r1, r2, #5
 8005b78:	69fa      	ldr	r2, [r7, #28]
 8005b7a:	440a      	add	r2, r1
 8005b7c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b80:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005b84:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005b88:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005b8a:	69bb      	ldr	r3, [r7, #24]
 8005b8c:	015a      	lsls	r2, r3, #5
 8005b8e:	69fb      	ldr	r3, [r7, #28]
 8005b90:	4413      	add	r3, r2
 8005b92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b96:	691b      	ldr	r3, [r3, #16]
 8005b98:	69ba      	ldr	r2, [r7, #24]
 8005b9a:	0151      	lsls	r1, r2, #5
 8005b9c:	69fa      	ldr	r2, [r7, #28]
 8005b9e:	440a      	add	r2, r1
 8005ba0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ba4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005ba8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005baa:	69bb      	ldr	r3, [r7, #24]
 8005bac:	015a      	lsls	r2, r3, #5
 8005bae:	69fb      	ldr	r3, [r7, #28]
 8005bb0:	4413      	add	r3, r2
 8005bb2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bb6:	691b      	ldr	r3, [r3, #16]
 8005bb8:	69ba      	ldr	r2, [r7, #24]
 8005bba:	0151      	lsls	r1, r2, #5
 8005bbc:	69fa      	ldr	r2, [r7, #28]
 8005bbe:	440a      	add	r2, r1
 8005bc0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005bc4:	0cdb      	lsrs	r3, r3, #19
 8005bc6:	04db      	lsls	r3, r3, #19
 8005bc8:	6113      	str	r3, [r2, #16]
 8005bca:	e074      	b.n	8005cb6 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005bcc:	69bb      	ldr	r3, [r7, #24]
 8005bce:	015a      	lsls	r2, r3, #5
 8005bd0:	69fb      	ldr	r3, [r7, #28]
 8005bd2:	4413      	add	r3, r2
 8005bd4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bd8:	691b      	ldr	r3, [r3, #16]
 8005bda:	69ba      	ldr	r2, [r7, #24]
 8005bdc:	0151      	lsls	r1, r2, #5
 8005bde:	69fa      	ldr	r2, [r7, #28]
 8005be0:	440a      	add	r2, r1
 8005be2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005be6:	0cdb      	lsrs	r3, r3, #19
 8005be8:	04db      	lsls	r3, r3, #19
 8005bea:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005bec:	69bb      	ldr	r3, [r7, #24]
 8005bee:	015a      	lsls	r2, r3, #5
 8005bf0:	69fb      	ldr	r3, [r7, #28]
 8005bf2:	4413      	add	r3, r2
 8005bf4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bf8:	691b      	ldr	r3, [r3, #16]
 8005bfa:	69ba      	ldr	r2, [r7, #24]
 8005bfc:	0151      	lsls	r1, r2, #5
 8005bfe:	69fa      	ldr	r2, [r7, #28]
 8005c00:	440a      	add	r2, r1
 8005c02:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c06:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005c0a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005c0e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005c10:	69bb      	ldr	r3, [r7, #24]
 8005c12:	015a      	lsls	r2, r3, #5
 8005c14:	69fb      	ldr	r3, [r7, #28]
 8005c16:	4413      	add	r3, r2
 8005c18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c1c:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8005c1e:	68bb      	ldr	r3, [r7, #8]
 8005c20:	6959      	ldr	r1, [r3, #20]
 8005c22:	68bb      	ldr	r3, [r7, #8]
 8005c24:	689b      	ldr	r3, [r3, #8]
 8005c26:	440b      	add	r3, r1
 8005c28:	1e59      	subs	r1, r3, #1
 8005c2a:	68bb      	ldr	r3, [r7, #8]
 8005c2c:	689b      	ldr	r3, [r3, #8]
 8005c2e:	fbb1 f3f3 	udiv	r3, r1, r3
 8005c32:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005c34:	4b9d      	ldr	r3, [pc, #628]	; (8005eac <USB_EPStartXfer+0x370>)
 8005c36:	400b      	ands	r3, r1
 8005c38:	69b9      	ldr	r1, [r7, #24]
 8005c3a:	0148      	lsls	r0, r1, #5
 8005c3c:	69f9      	ldr	r1, [r7, #28]
 8005c3e:	4401      	add	r1, r0
 8005c40:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005c44:	4313      	orrs	r3, r2
 8005c46:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005c48:	69bb      	ldr	r3, [r7, #24]
 8005c4a:	015a      	lsls	r2, r3, #5
 8005c4c:	69fb      	ldr	r3, [r7, #28]
 8005c4e:	4413      	add	r3, r2
 8005c50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c54:	691a      	ldr	r2, [r3, #16]
 8005c56:	68bb      	ldr	r3, [r7, #8]
 8005c58:	695b      	ldr	r3, [r3, #20]
 8005c5a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005c5e:	69b9      	ldr	r1, [r7, #24]
 8005c60:	0148      	lsls	r0, r1, #5
 8005c62:	69f9      	ldr	r1, [r7, #28]
 8005c64:	4401      	add	r1, r0
 8005c66:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005c6a:	4313      	orrs	r3, r2
 8005c6c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8005c6e:	68bb      	ldr	r3, [r7, #8]
 8005c70:	78db      	ldrb	r3, [r3, #3]
 8005c72:	2b01      	cmp	r3, #1
 8005c74:	d11f      	bne.n	8005cb6 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005c76:	69bb      	ldr	r3, [r7, #24]
 8005c78:	015a      	lsls	r2, r3, #5
 8005c7a:	69fb      	ldr	r3, [r7, #28]
 8005c7c:	4413      	add	r3, r2
 8005c7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c82:	691b      	ldr	r3, [r3, #16]
 8005c84:	69ba      	ldr	r2, [r7, #24]
 8005c86:	0151      	lsls	r1, r2, #5
 8005c88:	69fa      	ldr	r2, [r7, #28]
 8005c8a:	440a      	add	r2, r1
 8005c8c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c90:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8005c94:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8005c96:	69bb      	ldr	r3, [r7, #24]
 8005c98:	015a      	lsls	r2, r3, #5
 8005c9a:	69fb      	ldr	r3, [r7, #28]
 8005c9c:	4413      	add	r3, r2
 8005c9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ca2:	691b      	ldr	r3, [r3, #16]
 8005ca4:	69ba      	ldr	r2, [r7, #24]
 8005ca6:	0151      	lsls	r1, r2, #5
 8005ca8:	69fa      	ldr	r2, [r7, #28]
 8005caa:	440a      	add	r2, r1
 8005cac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005cb0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005cb4:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8005cb6:	79fb      	ldrb	r3, [r7, #7]
 8005cb8:	2b01      	cmp	r3, #1
 8005cba:	d14b      	bne.n	8005d54 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005cbc:	68bb      	ldr	r3, [r7, #8]
 8005cbe:	691b      	ldr	r3, [r3, #16]
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d009      	beq.n	8005cd8 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005cc4:	69bb      	ldr	r3, [r7, #24]
 8005cc6:	015a      	lsls	r2, r3, #5
 8005cc8:	69fb      	ldr	r3, [r7, #28]
 8005cca:	4413      	add	r3, r2
 8005ccc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cd0:	461a      	mov	r2, r3
 8005cd2:	68bb      	ldr	r3, [r7, #8]
 8005cd4:	691b      	ldr	r3, [r3, #16]
 8005cd6:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8005cd8:	68bb      	ldr	r3, [r7, #8]
 8005cda:	78db      	ldrb	r3, [r3, #3]
 8005cdc:	2b01      	cmp	r3, #1
 8005cde:	d128      	bne.n	8005d32 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005ce0:	69fb      	ldr	r3, [r7, #28]
 8005ce2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ce6:	689b      	ldr	r3, [r3, #8]
 8005ce8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d110      	bne.n	8005d12 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005cf0:	69bb      	ldr	r3, [r7, #24]
 8005cf2:	015a      	lsls	r2, r3, #5
 8005cf4:	69fb      	ldr	r3, [r7, #28]
 8005cf6:	4413      	add	r3, r2
 8005cf8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	69ba      	ldr	r2, [r7, #24]
 8005d00:	0151      	lsls	r1, r2, #5
 8005d02:	69fa      	ldr	r2, [r7, #28]
 8005d04:	440a      	add	r2, r1
 8005d06:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d0a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005d0e:	6013      	str	r3, [r2, #0]
 8005d10:	e00f      	b.n	8005d32 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005d12:	69bb      	ldr	r3, [r7, #24]
 8005d14:	015a      	lsls	r2, r3, #5
 8005d16:	69fb      	ldr	r3, [r7, #28]
 8005d18:	4413      	add	r3, r2
 8005d1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	69ba      	ldr	r2, [r7, #24]
 8005d22:	0151      	lsls	r1, r2, #5
 8005d24:	69fa      	ldr	r2, [r7, #28]
 8005d26:	440a      	add	r2, r1
 8005d28:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d30:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005d32:	69bb      	ldr	r3, [r7, #24]
 8005d34:	015a      	lsls	r2, r3, #5
 8005d36:	69fb      	ldr	r3, [r7, #28]
 8005d38:	4413      	add	r3, r2
 8005d3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	69ba      	ldr	r2, [r7, #24]
 8005d42:	0151      	lsls	r1, r2, #5
 8005d44:	69fa      	ldr	r2, [r7, #28]
 8005d46:	440a      	add	r2, r1
 8005d48:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d4c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005d50:	6013      	str	r3, [r2, #0]
 8005d52:	e12f      	b.n	8005fb4 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005d54:	69bb      	ldr	r3, [r7, #24]
 8005d56:	015a      	lsls	r2, r3, #5
 8005d58:	69fb      	ldr	r3, [r7, #28]
 8005d5a:	4413      	add	r3, r2
 8005d5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	69ba      	ldr	r2, [r7, #24]
 8005d64:	0151      	lsls	r1, r2, #5
 8005d66:	69fa      	ldr	r2, [r7, #28]
 8005d68:	440a      	add	r2, r1
 8005d6a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d6e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005d72:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005d74:	68bb      	ldr	r3, [r7, #8]
 8005d76:	78db      	ldrb	r3, [r3, #3]
 8005d78:	2b01      	cmp	r3, #1
 8005d7a:	d015      	beq.n	8005da8 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005d7c:	68bb      	ldr	r3, [r7, #8]
 8005d7e:	695b      	ldr	r3, [r3, #20]
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	f000 8117 	beq.w	8005fb4 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005d86:	69fb      	ldr	r3, [r7, #28]
 8005d88:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d8c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005d8e:	68bb      	ldr	r3, [r7, #8]
 8005d90:	781b      	ldrb	r3, [r3, #0]
 8005d92:	f003 030f 	and.w	r3, r3, #15
 8005d96:	2101      	movs	r1, #1
 8005d98:	fa01 f303 	lsl.w	r3, r1, r3
 8005d9c:	69f9      	ldr	r1, [r7, #28]
 8005d9e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005da2:	4313      	orrs	r3, r2
 8005da4:	634b      	str	r3, [r1, #52]	; 0x34
 8005da6:	e105      	b.n	8005fb4 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005da8:	69fb      	ldr	r3, [r7, #28]
 8005daa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005dae:	689b      	ldr	r3, [r3, #8]
 8005db0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d110      	bne.n	8005dda <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005db8:	69bb      	ldr	r3, [r7, #24]
 8005dba:	015a      	lsls	r2, r3, #5
 8005dbc:	69fb      	ldr	r3, [r7, #28]
 8005dbe:	4413      	add	r3, r2
 8005dc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	69ba      	ldr	r2, [r7, #24]
 8005dc8:	0151      	lsls	r1, r2, #5
 8005dca:	69fa      	ldr	r2, [r7, #28]
 8005dcc:	440a      	add	r2, r1
 8005dce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005dd2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005dd6:	6013      	str	r3, [r2, #0]
 8005dd8:	e00f      	b.n	8005dfa <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005dda:	69bb      	ldr	r3, [r7, #24]
 8005ddc:	015a      	lsls	r2, r3, #5
 8005dde:	69fb      	ldr	r3, [r7, #28]
 8005de0:	4413      	add	r3, r2
 8005de2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	69ba      	ldr	r2, [r7, #24]
 8005dea:	0151      	lsls	r1, r2, #5
 8005dec:	69fa      	ldr	r2, [r7, #28]
 8005dee:	440a      	add	r2, r1
 8005df0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005df4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005df8:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8005dfa:	68bb      	ldr	r3, [r7, #8]
 8005dfc:	68d9      	ldr	r1, [r3, #12]
 8005dfe:	68bb      	ldr	r3, [r7, #8]
 8005e00:	781a      	ldrb	r2, [r3, #0]
 8005e02:	68bb      	ldr	r3, [r7, #8]
 8005e04:	695b      	ldr	r3, [r3, #20]
 8005e06:	b298      	uxth	r0, r3
 8005e08:	79fb      	ldrb	r3, [r7, #7]
 8005e0a:	9300      	str	r3, [sp, #0]
 8005e0c:	4603      	mov	r3, r0
 8005e0e:	68f8      	ldr	r0, [r7, #12]
 8005e10:	f000 fa2b 	bl	800626a <USB_WritePacket>
 8005e14:	e0ce      	b.n	8005fb4 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005e16:	69bb      	ldr	r3, [r7, #24]
 8005e18:	015a      	lsls	r2, r3, #5
 8005e1a:	69fb      	ldr	r3, [r7, #28]
 8005e1c:	4413      	add	r3, r2
 8005e1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e22:	691b      	ldr	r3, [r3, #16]
 8005e24:	69ba      	ldr	r2, [r7, #24]
 8005e26:	0151      	lsls	r1, r2, #5
 8005e28:	69fa      	ldr	r2, [r7, #28]
 8005e2a:	440a      	add	r2, r1
 8005e2c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e30:	0cdb      	lsrs	r3, r3, #19
 8005e32:	04db      	lsls	r3, r3, #19
 8005e34:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005e36:	69bb      	ldr	r3, [r7, #24]
 8005e38:	015a      	lsls	r2, r3, #5
 8005e3a:	69fb      	ldr	r3, [r7, #28]
 8005e3c:	4413      	add	r3, r2
 8005e3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e42:	691b      	ldr	r3, [r3, #16]
 8005e44:	69ba      	ldr	r2, [r7, #24]
 8005e46:	0151      	lsls	r1, r2, #5
 8005e48:	69fa      	ldr	r2, [r7, #28]
 8005e4a:	440a      	add	r2, r1
 8005e4c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e50:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005e54:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005e58:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8005e5a:	68bb      	ldr	r3, [r7, #8]
 8005e5c:	695b      	ldr	r3, [r3, #20]
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d126      	bne.n	8005eb0 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005e62:	69bb      	ldr	r3, [r7, #24]
 8005e64:	015a      	lsls	r2, r3, #5
 8005e66:	69fb      	ldr	r3, [r7, #28]
 8005e68:	4413      	add	r3, r2
 8005e6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e6e:	691a      	ldr	r2, [r3, #16]
 8005e70:	68bb      	ldr	r3, [r7, #8]
 8005e72:	689b      	ldr	r3, [r3, #8]
 8005e74:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005e78:	69b9      	ldr	r1, [r7, #24]
 8005e7a:	0148      	lsls	r0, r1, #5
 8005e7c:	69f9      	ldr	r1, [r7, #28]
 8005e7e:	4401      	add	r1, r0
 8005e80:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005e84:	4313      	orrs	r3, r2
 8005e86:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005e88:	69bb      	ldr	r3, [r7, #24]
 8005e8a:	015a      	lsls	r2, r3, #5
 8005e8c:	69fb      	ldr	r3, [r7, #28]
 8005e8e:	4413      	add	r3, r2
 8005e90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e94:	691b      	ldr	r3, [r3, #16]
 8005e96:	69ba      	ldr	r2, [r7, #24]
 8005e98:	0151      	lsls	r1, r2, #5
 8005e9a:	69fa      	ldr	r2, [r7, #28]
 8005e9c:	440a      	add	r2, r1
 8005e9e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ea2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005ea6:	6113      	str	r3, [r2, #16]
 8005ea8:	e036      	b.n	8005f18 <USB_EPStartXfer+0x3dc>
 8005eaa:	bf00      	nop
 8005eac:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005eb0:	68bb      	ldr	r3, [r7, #8]
 8005eb2:	695a      	ldr	r2, [r3, #20]
 8005eb4:	68bb      	ldr	r3, [r7, #8]
 8005eb6:	689b      	ldr	r3, [r3, #8]
 8005eb8:	4413      	add	r3, r2
 8005eba:	1e5a      	subs	r2, r3, #1
 8005ebc:	68bb      	ldr	r3, [r7, #8]
 8005ebe:	689b      	ldr	r3, [r3, #8]
 8005ec0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ec4:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005ec6:	69bb      	ldr	r3, [r7, #24]
 8005ec8:	015a      	lsls	r2, r3, #5
 8005eca:	69fb      	ldr	r3, [r7, #28]
 8005ecc:	4413      	add	r3, r2
 8005ece:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ed2:	691a      	ldr	r2, [r3, #16]
 8005ed4:	8afb      	ldrh	r3, [r7, #22]
 8005ed6:	04d9      	lsls	r1, r3, #19
 8005ed8:	4b39      	ldr	r3, [pc, #228]	; (8005fc0 <USB_EPStartXfer+0x484>)
 8005eda:	400b      	ands	r3, r1
 8005edc:	69b9      	ldr	r1, [r7, #24]
 8005ede:	0148      	lsls	r0, r1, #5
 8005ee0:	69f9      	ldr	r1, [r7, #28]
 8005ee2:	4401      	add	r1, r0
 8005ee4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005ee8:	4313      	orrs	r3, r2
 8005eea:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8005eec:	69bb      	ldr	r3, [r7, #24]
 8005eee:	015a      	lsls	r2, r3, #5
 8005ef0:	69fb      	ldr	r3, [r7, #28]
 8005ef2:	4413      	add	r3, r2
 8005ef4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ef8:	691a      	ldr	r2, [r3, #16]
 8005efa:	68bb      	ldr	r3, [r7, #8]
 8005efc:	689b      	ldr	r3, [r3, #8]
 8005efe:	8af9      	ldrh	r1, [r7, #22]
 8005f00:	fb01 f303 	mul.w	r3, r1, r3
 8005f04:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005f08:	69b9      	ldr	r1, [r7, #24]
 8005f0a:	0148      	lsls	r0, r1, #5
 8005f0c:	69f9      	ldr	r1, [r7, #28]
 8005f0e:	4401      	add	r1, r0
 8005f10:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005f14:	4313      	orrs	r3, r2
 8005f16:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005f18:	79fb      	ldrb	r3, [r7, #7]
 8005f1a:	2b01      	cmp	r3, #1
 8005f1c:	d10d      	bne.n	8005f3a <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005f1e:	68bb      	ldr	r3, [r7, #8]
 8005f20:	68db      	ldr	r3, [r3, #12]
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d009      	beq.n	8005f3a <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005f26:	68bb      	ldr	r3, [r7, #8]
 8005f28:	68d9      	ldr	r1, [r3, #12]
 8005f2a:	69bb      	ldr	r3, [r7, #24]
 8005f2c:	015a      	lsls	r2, r3, #5
 8005f2e:	69fb      	ldr	r3, [r7, #28]
 8005f30:	4413      	add	r3, r2
 8005f32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f36:	460a      	mov	r2, r1
 8005f38:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8005f3a:	68bb      	ldr	r3, [r7, #8]
 8005f3c:	78db      	ldrb	r3, [r3, #3]
 8005f3e:	2b01      	cmp	r3, #1
 8005f40:	d128      	bne.n	8005f94 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005f42:	69fb      	ldr	r3, [r7, #28]
 8005f44:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f48:	689b      	ldr	r3, [r3, #8]
 8005f4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d110      	bne.n	8005f74 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8005f52:	69bb      	ldr	r3, [r7, #24]
 8005f54:	015a      	lsls	r2, r3, #5
 8005f56:	69fb      	ldr	r3, [r7, #28]
 8005f58:	4413      	add	r3, r2
 8005f5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	69ba      	ldr	r2, [r7, #24]
 8005f62:	0151      	lsls	r1, r2, #5
 8005f64:	69fa      	ldr	r2, [r7, #28]
 8005f66:	440a      	add	r2, r1
 8005f68:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f6c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005f70:	6013      	str	r3, [r2, #0]
 8005f72:	e00f      	b.n	8005f94 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005f74:	69bb      	ldr	r3, [r7, #24]
 8005f76:	015a      	lsls	r2, r3, #5
 8005f78:	69fb      	ldr	r3, [r7, #28]
 8005f7a:	4413      	add	r3, r2
 8005f7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	69ba      	ldr	r2, [r7, #24]
 8005f84:	0151      	lsls	r1, r2, #5
 8005f86:	69fa      	ldr	r2, [r7, #28]
 8005f88:	440a      	add	r2, r1
 8005f8a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f8e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005f92:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005f94:	69bb      	ldr	r3, [r7, #24]
 8005f96:	015a      	lsls	r2, r3, #5
 8005f98:	69fb      	ldr	r3, [r7, #28]
 8005f9a:	4413      	add	r3, r2
 8005f9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	69ba      	ldr	r2, [r7, #24]
 8005fa4:	0151      	lsls	r1, r2, #5
 8005fa6:	69fa      	ldr	r2, [r7, #28]
 8005fa8:	440a      	add	r2, r1
 8005faa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005fae:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005fb2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005fb4:	2300      	movs	r3, #0
}
 8005fb6:	4618      	mov	r0, r3
 8005fb8:	3720      	adds	r7, #32
 8005fba:	46bd      	mov	sp, r7
 8005fbc:	bd80      	pop	{r7, pc}
 8005fbe:	bf00      	nop
 8005fc0:	1ff80000 	.word	0x1ff80000

08005fc4 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005fc4:	b480      	push	{r7}
 8005fc6:	b087      	sub	sp, #28
 8005fc8:	af00      	add	r7, sp, #0
 8005fca:	60f8      	str	r0, [r7, #12]
 8005fcc:	60b9      	str	r1, [r7, #8]
 8005fce:	4613      	mov	r3, r2
 8005fd0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8005fd6:	68bb      	ldr	r3, [r7, #8]
 8005fd8:	781b      	ldrb	r3, [r3, #0]
 8005fda:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005fdc:	68bb      	ldr	r3, [r7, #8]
 8005fde:	785b      	ldrb	r3, [r3, #1]
 8005fe0:	2b01      	cmp	r3, #1
 8005fe2:	f040 80cd 	bne.w	8006180 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005fe6:	68bb      	ldr	r3, [r7, #8]
 8005fe8:	695b      	ldr	r3, [r3, #20]
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d132      	bne.n	8006054 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005fee:	693b      	ldr	r3, [r7, #16]
 8005ff0:	015a      	lsls	r2, r3, #5
 8005ff2:	697b      	ldr	r3, [r7, #20]
 8005ff4:	4413      	add	r3, r2
 8005ff6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ffa:	691b      	ldr	r3, [r3, #16]
 8005ffc:	693a      	ldr	r2, [r7, #16]
 8005ffe:	0151      	lsls	r1, r2, #5
 8006000:	697a      	ldr	r2, [r7, #20]
 8006002:	440a      	add	r2, r1
 8006004:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006008:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800600c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006010:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006012:	693b      	ldr	r3, [r7, #16]
 8006014:	015a      	lsls	r2, r3, #5
 8006016:	697b      	ldr	r3, [r7, #20]
 8006018:	4413      	add	r3, r2
 800601a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800601e:	691b      	ldr	r3, [r3, #16]
 8006020:	693a      	ldr	r2, [r7, #16]
 8006022:	0151      	lsls	r1, r2, #5
 8006024:	697a      	ldr	r2, [r7, #20]
 8006026:	440a      	add	r2, r1
 8006028:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800602c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006030:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006032:	693b      	ldr	r3, [r7, #16]
 8006034:	015a      	lsls	r2, r3, #5
 8006036:	697b      	ldr	r3, [r7, #20]
 8006038:	4413      	add	r3, r2
 800603a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800603e:	691b      	ldr	r3, [r3, #16]
 8006040:	693a      	ldr	r2, [r7, #16]
 8006042:	0151      	lsls	r1, r2, #5
 8006044:	697a      	ldr	r2, [r7, #20]
 8006046:	440a      	add	r2, r1
 8006048:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800604c:	0cdb      	lsrs	r3, r3, #19
 800604e:	04db      	lsls	r3, r3, #19
 8006050:	6113      	str	r3, [r2, #16]
 8006052:	e04e      	b.n	80060f2 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006054:	693b      	ldr	r3, [r7, #16]
 8006056:	015a      	lsls	r2, r3, #5
 8006058:	697b      	ldr	r3, [r7, #20]
 800605a:	4413      	add	r3, r2
 800605c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006060:	691b      	ldr	r3, [r3, #16]
 8006062:	693a      	ldr	r2, [r7, #16]
 8006064:	0151      	lsls	r1, r2, #5
 8006066:	697a      	ldr	r2, [r7, #20]
 8006068:	440a      	add	r2, r1
 800606a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800606e:	0cdb      	lsrs	r3, r3, #19
 8006070:	04db      	lsls	r3, r3, #19
 8006072:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006074:	693b      	ldr	r3, [r7, #16]
 8006076:	015a      	lsls	r2, r3, #5
 8006078:	697b      	ldr	r3, [r7, #20]
 800607a:	4413      	add	r3, r2
 800607c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006080:	691b      	ldr	r3, [r3, #16]
 8006082:	693a      	ldr	r2, [r7, #16]
 8006084:	0151      	lsls	r1, r2, #5
 8006086:	697a      	ldr	r2, [r7, #20]
 8006088:	440a      	add	r2, r1
 800608a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800608e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006092:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006096:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8006098:	68bb      	ldr	r3, [r7, #8]
 800609a:	695a      	ldr	r2, [r3, #20]
 800609c:	68bb      	ldr	r3, [r7, #8]
 800609e:	689b      	ldr	r3, [r3, #8]
 80060a0:	429a      	cmp	r2, r3
 80060a2:	d903      	bls.n	80060ac <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80060a4:	68bb      	ldr	r3, [r7, #8]
 80060a6:	689a      	ldr	r2, [r3, #8]
 80060a8:	68bb      	ldr	r3, [r7, #8]
 80060aa:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80060ac:	693b      	ldr	r3, [r7, #16]
 80060ae:	015a      	lsls	r2, r3, #5
 80060b0:	697b      	ldr	r3, [r7, #20]
 80060b2:	4413      	add	r3, r2
 80060b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060b8:	691b      	ldr	r3, [r3, #16]
 80060ba:	693a      	ldr	r2, [r7, #16]
 80060bc:	0151      	lsls	r1, r2, #5
 80060be:	697a      	ldr	r2, [r7, #20]
 80060c0:	440a      	add	r2, r1
 80060c2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80060c6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80060ca:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80060cc:	693b      	ldr	r3, [r7, #16]
 80060ce:	015a      	lsls	r2, r3, #5
 80060d0:	697b      	ldr	r3, [r7, #20]
 80060d2:	4413      	add	r3, r2
 80060d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060d8:	691a      	ldr	r2, [r3, #16]
 80060da:	68bb      	ldr	r3, [r7, #8]
 80060dc:	695b      	ldr	r3, [r3, #20]
 80060de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80060e2:	6939      	ldr	r1, [r7, #16]
 80060e4:	0148      	lsls	r0, r1, #5
 80060e6:	6979      	ldr	r1, [r7, #20]
 80060e8:	4401      	add	r1, r0
 80060ea:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80060ee:	4313      	orrs	r3, r2
 80060f0:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80060f2:	79fb      	ldrb	r3, [r7, #7]
 80060f4:	2b01      	cmp	r3, #1
 80060f6:	d11e      	bne.n	8006136 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80060f8:	68bb      	ldr	r3, [r7, #8]
 80060fa:	691b      	ldr	r3, [r3, #16]
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d009      	beq.n	8006114 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006100:	693b      	ldr	r3, [r7, #16]
 8006102:	015a      	lsls	r2, r3, #5
 8006104:	697b      	ldr	r3, [r7, #20]
 8006106:	4413      	add	r3, r2
 8006108:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800610c:	461a      	mov	r2, r3
 800610e:	68bb      	ldr	r3, [r7, #8]
 8006110:	691b      	ldr	r3, [r3, #16]
 8006112:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006114:	693b      	ldr	r3, [r7, #16]
 8006116:	015a      	lsls	r2, r3, #5
 8006118:	697b      	ldr	r3, [r7, #20]
 800611a:	4413      	add	r3, r2
 800611c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	693a      	ldr	r2, [r7, #16]
 8006124:	0151      	lsls	r1, r2, #5
 8006126:	697a      	ldr	r2, [r7, #20]
 8006128:	440a      	add	r2, r1
 800612a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800612e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006132:	6013      	str	r3, [r2, #0]
 8006134:	e092      	b.n	800625c <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006136:	693b      	ldr	r3, [r7, #16]
 8006138:	015a      	lsls	r2, r3, #5
 800613a:	697b      	ldr	r3, [r7, #20]
 800613c:	4413      	add	r3, r2
 800613e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	693a      	ldr	r2, [r7, #16]
 8006146:	0151      	lsls	r1, r2, #5
 8006148:	697a      	ldr	r2, [r7, #20]
 800614a:	440a      	add	r2, r1
 800614c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006150:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006154:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8006156:	68bb      	ldr	r3, [r7, #8]
 8006158:	695b      	ldr	r3, [r3, #20]
 800615a:	2b00      	cmp	r3, #0
 800615c:	d07e      	beq.n	800625c <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800615e:	697b      	ldr	r3, [r7, #20]
 8006160:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006164:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006166:	68bb      	ldr	r3, [r7, #8]
 8006168:	781b      	ldrb	r3, [r3, #0]
 800616a:	f003 030f 	and.w	r3, r3, #15
 800616e:	2101      	movs	r1, #1
 8006170:	fa01 f303 	lsl.w	r3, r1, r3
 8006174:	6979      	ldr	r1, [r7, #20]
 8006176:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800617a:	4313      	orrs	r3, r2
 800617c:	634b      	str	r3, [r1, #52]	; 0x34
 800617e:	e06d      	b.n	800625c <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006180:	693b      	ldr	r3, [r7, #16]
 8006182:	015a      	lsls	r2, r3, #5
 8006184:	697b      	ldr	r3, [r7, #20]
 8006186:	4413      	add	r3, r2
 8006188:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800618c:	691b      	ldr	r3, [r3, #16]
 800618e:	693a      	ldr	r2, [r7, #16]
 8006190:	0151      	lsls	r1, r2, #5
 8006192:	697a      	ldr	r2, [r7, #20]
 8006194:	440a      	add	r2, r1
 8006196:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800619a:	0cdb      	lsrs	r3, r3, #19
 800619c:	04db      	lsls	r3, r3, #19
 800619e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80061a0:	693b      	ldr	r3, [r7, #16]
 80061a2:	015a      	lsls	r2, r3, #5
 80061a4:	697b      	ldr	r3, [r7, #20]
 80061a6:	4413      	add	r3, r2
 80061a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061ac:	691b      	ldr	r3, [r3, #16]
 80061ae:	693a      	ldr	r2, [r7, #16]
 80061b0:	0151      	lsls	r1, r2, #5
 80061b2:	697a      	ldr	r2, [r7, #20]
 80061b4:	440a      	add	r2, r1
 80061b6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80061ba:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80061be:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80061c2:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80061c4:	68bb      	ldr	r3, [r7, #8]
 80061c6:	695b      	ldr	r3, [r3, #20]
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d003      	beq.n	80061d4 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 80061cc:	68bb      	ldr	r3, [r7, #8]
 80061ce:	689a      	ldr	r2, [r3, #8]
 80061d0:	68bb      	ldr	r3, [r7, #8]
 80061d2:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80061d4:	693b      	ldr	r3, [r7, #16]
 80061d6:	015a      	lsls	r2, r3, #5
 80061d8:	697b      	ldr	r3, [r7, #20]
 80061da:	4413      	add	r3, r2
 80061dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061e0:	691b      	ldr	r3, [r3, #16]
 80061e2:	693a      	ldr	r2, [r7, #16]
 80061e4:	0151      	lsls	r1, r2, #5
 80061e6:	697a      	ldr	r2, [r7, #20]
 80061e8:	440a      	add	r2, r1
 80061ea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80061ee:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80061f2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 80061f4:	693b      	ldr	r3, [r7, #16]
 80061f6:	015a      	lsls	r2, r3, #5
 80061f8:	697b      	ldr	r3, [r7, #20]
 80061fa:	4413      	add	r3, r2
 80061fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006200:	691a      	ldr	r2, [r3, #16]
 8006202:	68bb      	ldr	r3, [r7, #8]
 8006204:	689b      	ldr	r3, [r3, #8]
 8006206:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800620a:	6939      	ldr	r1, [r7, #16]
 800620c:	0148      	lsls	r0, r1, #5
 800620e:	6979      	ldr	r1, [r7, #20]
 8006210:	4401      	add	r1, r0
 8006212:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006216:	4313      	orrs	r3, r2
 8006218:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800621a:	79fb      	ldrb	r3, [r7, #7]
 800621c:	2b01      	cmp	r3, #1
 800621e:	d10d      	bne.n	800623c <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006220:	68bb      	ldr	r3, [r7, #8]
 8006222:	68db      	ldr	r3, [r3, #12]
 8006224:	2b00      	cmp	r3, #0
 8006226:	d009      	beq.n	800623c <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006228:	68bb      	ldr	r3, [r7, #8]
 800622a:	68d9      	ldr	r1, [r3, #12]
 800622c:	693b      	ldr	r3, [r7, #16]
 800622e:	015a      	lsls	r2, r3, #5
 8006230:	697b      	ldr	r3, [r7, #20]
 8006232:	4413      	add	r3, r2
 8006234:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006238:	460a      	mov	r2, r1
 800623a:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800623c:	693b      	ldr	r3, [r7, #16]
 800623e:	015a      	lsls	r2, r3, #5
 8006240:	697b      	ldr	r3, [r7, #20]
 8006242:	4413      	add	r3, r2
 8006244:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	693a      	ldr	r2, [r7, #16]
 800624c:	0151      	lsls	r1, r2, #5
 800624e:	697a      	ldr	r2, [r7, #20]
 8006250:	440a      	add	r2, r1
 8006252:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006256:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800625a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800625c:	2300      	movs	r3, #0
}
 800625e:	4618      	mov	r0, r3
 8006260:	371c      	adds	r7, #28
 8006262:	46bd      	mov	sp, r7
 8006264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006268:	4770      	bx	lr

0800626a <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800626a:	b480      	push	{r7}
 800626c:	b089      	sub	sp, #36	; 0x24
 800626e:	af00      	add	r7, sp, #0
 8006270:	60f8      	str	r0, [r7, #12]
 8006272:	60b9      	str	r1, [r7, #8]
 8006274:	4611      	mov	r1, r2
 8006276:	461a      	mov	r2, r3
 8006278:	460b      	mov	r3, r1
 800627a:	71fb      	strb	r3, [r7, #7]
 800627c:	4613      	mov	r3, r2
 800627e:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8006284:	68bb      	ldr	r3, [r7, #8]
 8006286:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8006288:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800628c:	2b00      	cmp	r3, #0
 800628e:	d123      	bne.n	80062d8 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006290:	88bb      	ldrh	r3, [r7, #4]
 8006292:	3303      	adds	r3, #3
 8006294:	089b      	lsrs	r3, r3, #2
 8006296:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006298:	2300      	movs	r3, #0
 800629a:	61bb      	str	r3, [r7, #24]
 800629c:	e018      	b.n	80062d0 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800629e:	79fb      	ldrb	r3, [r7, #7]
 80062a0:	031a      	lsls	r2, r3, #12
 80062a2:	697b      	ldr	r3, [r7, #20]
 80062a4:	4413      	add	r3, r2
 80062a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80062aa:	461a      	mov	r2, r3
 80062ac:	69fb      	ldr	r3, [r7, #28]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	6013      	str	r3, [r2, #0]
      pSrc++;
 80062b2:	69fb      	ldr	r3, [r7, #28]
 80062b4:	3301      	adds	r3, #1
 80062b6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80062b8:	69fb      	ldr	r3, [r7, #28]
 80062ba:	3301      	adds	r3, #1
 80062bc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80062be:	69fb      	ldr	r3, [r7, #28]
 80062c0:	3301      	adds	r3, #1
 80062c2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80062c4:	69fb      	ldr	r3, [r7, #28]
 80062c6:	3301      	adds	r3, #1
 80062c8:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80062ca:	69bb      	ldr	r3, [r7, #24]
 80062cc:	3301      	adds	r3, #1
 80062ce:	61bb      	str	r3, [r7, #24]
 80062d0:	69ba      	ldr	r2, [r7, #24]
 80062d2:	693b      	ldr	r3, [r7, #16]
 80062d4:	429a      	cmp	r2, r3
 80062d6:	d3e2      	bcc.n	800629e <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80062d8:	2300      	movs	r3, #0
}
 80062da:	4618      	mov	r0, r3
 80062dc:	3724      	adds	r7, #36	; 0x24
 80062de:	46bd      	mov	sp, r7
 80062e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e4:	4770      	bx	lr

080062e6 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80062e6:	b480      	push	{r7}
 80062e8:	b08b      	sub	sp, #44	; 0x2c
 80062ea:	af00      	add	r7, sp, #0
 80062ec:	60f8      	str	r0, [r7, #12]
 80062ee:	60b9      	str	r1, [r7, #8]
 80062f0:	4613      	mov	r3, r2
 80062f2:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80062f8:	68bb      	ldr	r3, [r7, #8]
 80062fa:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80062fc:	88fb      	ldrh	r3, [r7, #6]
 80062fe:	089b      	lsrs	r3, r3, #2
 8006300:	b29b      	uxth	r3, r3
 8006302:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8006304:	88fb      	ldrh	r3, [r7, #6]
 8006306:	f003 0303 	and.w	r3, r3, #3
 800630a:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800630c:	2300      	movs	r3, #0
 800630e:	623b      	str	r3, [r7, #32]
 8006310:	e014      	b.n	800633c <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006312:	69bb      	ldr	r3, [r7, #24]
 8006314:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006318:	681a      	ldr	r2, [r3, #0]
 800631a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800631c:	601a      	str	r2, [r3, #0]
    pDest++;
 800631e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006320:	3301      	adds	r3, #1
 8006322:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006326:	3301      	adds	r3, #1
 8006328:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800632a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800632c:	3301      	adds	r3, #1
 800632e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006332:	3301      	adds	r3, #1
 8006334:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8006336:	6a3b      	ldr	r3, [r7, #32]
 8006338:	3301      	adds	r3, #1
 800633a:	623b      	str	r3, [r7, #32]
 800633c:	6a3a      	ldr	r2, [r7, #32]
 800633e:	697b      	ldr	r3, [r7, #20]
 8006340:	429a      	cmp	r2, r3
 8006342:	d3e6      	bcc.n	8006312 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8006344:	8bfb      	ldrh	r3, [r7, #30]
 8006346:	2b00      	cmp	r3, #0
 8006348:	d01e      	beq.n	8006388 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800634a:	2300      	movs	r3, #0
 800634c:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800634e:	69bb      	ldr	r3, [r7, #24]
 8006350:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006354:	461a      	mov	r2, r3
 8006356:	f107 0310 	add.w	r3, r7, #16
 800635a:	6812      	ldr	r2, [r2, #0]
 800635c:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800635e:	693a      	ldr	r2, [r7, #16]
 8006360:	6a3b      	ldr	r3, [r7, #32]
 8006362:	b2db      	uxtb	r3, r3
 8006364:	00db      	lsls	r3, r3, #3
 8006366:	fa22 f303 	lsr.w	r3, r2, r3
 800636a:	b2da      	uxtb	r2, r3
 800636c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800636e:	701a      	strb	r2, [r3, #0]
      i++;
 8006370:	6a3b      	ldr	r3, [r7, #32]
 8006372:	3301      	adds	r3, #1
 8006374:	623b      	str	r3, [r7, #32]
      pDest++;
 8006376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006378:	3301      	adds	r3, #1
 800637a:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800637c:	8bfb      	ldrh	r3, [r7, #30]
 800637e:	3b01      	subs	r3, #1
 8006380:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006382:	8bfb      	ldrh	r3, [r7, #30]
 8006384:	2b00      	cmp	r3, #0
 8006386:	d1ea      	bne.n	800635e <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800638a:	4618      	mov	r0, r3
 800638c:	372c      	adds	r7, #44	; 0x2c
 800638e:	46bd      	mov	sp, r7
 8006390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006394:	4770      	bx	lr

08006396 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006396:	b480      	push	{r7}
 8006398:	b085      	sub	sp, #20
 800639a:	af00      	add	r7, sp, #0
 800639c:	6078      	str	r0, [r7, #4]
 800639e:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80063a4:	683b      	ldr	r3, [r7, #0]
 80063a6:	781b      	ldrb	r3, [r3, #0]
 80063a8:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80063aa:	683b      	ldr	r3, [r7, #0]
 80063ac:	785b      	ldrb	r3, [r3, #1]
 80063ae:	2b01      	cmp	r3, #1
 80063b0:	d12c      	bne.n	800640c <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80063b2:	68bb      	ldr	r3, [r7, #8]
 80063b4:	015a      	lsls	r2, r3, #5
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	4413      	add	r3, r2
 80063ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	db12      	blt.n	80063ea <USB_EPSetStall+0x54>
 80063c4:	68bb      	ldr	r3, [r7, #8]
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d00f      	beq.n	80063ea <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80063ca:	68bb      	ldr	r3, [r7, #8]
 80063cc:	015a      	lsls	r2, r3, #5
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	4413      	add	r3, r2
 80063d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	68ba      	ldr	r2, [r7, #8]
 80063da:	0151      	lsls	r1, r2, #5
 80063dc:	68fa      	ldr	r2, [r7, #12]
 80063de:	440a      	add	r2, r1
 80063e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80063e4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80063e8:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80063ea:	68bb      	ldr	r3, [r7, #8]
 80063ec:	015a      	lsls	r2, r3, #5
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	4413      	add	r3, r2
 80063f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	68ba      	ldr	r2, [r7, #8]
 80063fa:	0151      	lsls	r1, r2, #5
 80063fc:	68fa      	ldr	r2, [r7, #12]
 80063fe:	440a      	add	r2, r1
 8006400:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006404:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006408:	6013      	str	r3, [r2, #0]
 800640a:	e02b      	b.n	8006464 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800640c:	68bb      	ldr	r3, [r7, #8]
 800640e:	015a      	lsls	r2, r3, #5
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	4413      	add	r3, r2
 8006414:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	2b00      	cmp	r3, #0
 800641c:	db12      	blt.n	8006444 <USB_EPSetStall+0xae>
 800641e:	68bb      	ldr	r3, [r7, #8]
 8006420:	2b00      	cmp	r3, #0
 8006422:	d00f      	beq.n	8006444 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8006424:	68bb      	ldr	r3, [r7, #8]
 8006426:	015a      	lsls	r2, r3, #5
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	4413      	add	r3, r2
 800642c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	68ba      	ldr	r2, [r7, #8]
 8006434:	0151      	lsls	r1, r2, #5
 8006436:	68fa      	ldr	r2, [r7, #12]
 8006438:	440a      	add	r2, r1
 800643a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800643e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006442:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8006444:	68bb      	ldr	r3, [r7, #8]
 8006446:	015a      	lsls	r2, r3, #5
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	4413      	add	r3, r2
 800644c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	68ba      	ldr	r2, [r7, #8]
 8006454:	0151      	lsls	r1, r2, #5
 8006456:	68fa      	ldr	r2, [r7, #12]
 8006458:	440a      	add	r2, r1
 800645a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800645e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006462:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006464:	2300      	movs	r3, #0
}
 8006466:	4618      	mov	r0, r3
 8006468:	3714      	adds	r7, #20
 800646a:	46bd      	mov	sp, r7
 800646c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006470:	4770      	bx	lr

08006472 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006472:	b480      	push	{r7}
 8006474:	b085      	sub	sp, #20
 8006476:	af00      	add	r7, sp, #0
 8006478:	6078      	str	r0, [r7, #4]
 800647a:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006480:	683b      	ldr	r3, [r7, #0]
 8006482:	781b      	ldrb	r3, [r3, #0]
 8006484:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006486:	683b      	ldr	r3, [r7, #0]
 8006488:	785b      	ldrb	r3, [r3, #1]
 800648a:	2b01      	cmp	r3, #1
 800648c:	d128      	bne.n	80064e0 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800648e:	68bb      	ldr	r3, [r7, #8]
 8006490:	015a      	lsls	r2, r3, #5
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	4413      	add	r3, r2
 8006496:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	68ba      	ldr	r2, [r7, #8]
 800649e:	0151      	lsls	r1, r2, #5
 80064a0:	68fa      	ldr	r2, [r7, #12]
 80064a2:	440a      	add	r2, r1
 80064a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80064a8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80064ac:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80064ae:	683b      	ldr	r3, [r7, #0]
 80064b0:	78db      	ldrb	r3, [r3, #3]
 80064b2:	2b03      	cmp	r3, #3
 80064b4:	d003      	beq.n	80064be <USB_EPClearStall+0x4c>
 80064b6:	683b      	ldr	r3, [r7, #0]
 80064b8:	78db      	ldrb	r3, [r3, #3]
 80064ba:	2b02      	cmp	r3, #2
 80064bc:	d138      	bne.n	8006530 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80064be:	68bb      	ldr	r3, [r7, #8]
 80064c0:	015a      	lsls	r2, r3, #5
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	4413      	add	r3, r2
 80064c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	68ba      	ldr	r2, [r7, #8]
 80064ce:	0151      	lsls	r1, r2, #5
 80064d0:	68fa      	ldr	r2, [r7, #12]
 80064d2:	440a      	add	r2, r1
 80064d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80064d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80064dc:	6013      	str	r3, [r2, #0]
 80064de:	e027      	b.n	8006530 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80064e0:	68bb      	ldr	r3, [r7, #8]
 80064e2:	015a      	lsls	r2, r3, #5
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	4413      	add	r3, r2
 80064e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	68ba      	ldr	r2, [r7, #8]
 80064f0:	0151      	lsls	r1, r2, #5
 80064f2:	68fa      	ldr	r2, [r7, #12]
 80064f4:	440a      	add	r2, r1
 80064f6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80064fa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80064fe:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006500:	683b      	ldr	r3, [r7, #0]
 8006502:	78db      	ldrb	r3, [r3, #3]
 8006504:	2b03      	cmp	r3, #3
 8006506:	d003      	beq.n	8006510 <USB_EPClearStall+0x9e>
 8006508:	683b      	ldr	r3, [r7, #0]
 800650a:	78db      	ldrb	r3, [r3, #3]
 800650c:	2b02      	cmp	r3, #2
 800650e:	d10f      	bne.n	8006530 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006510:	68bb      	ldr	r3, [r7, #8]
 8006512:	015a      	lsls	r2, r3, #5
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	4413      	add	r3, r2
 8006518:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	68ba      	ldr	r2, [r7, #8]
 8006520:	0151      	lsls	r1, r2, #5
 8006522:	68fa      	ldr	r2, [r7, #12]
 8006524:	440a      	add	r2, r1
 8006526:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800652a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800652e:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8006530:	2300      	movs	r3, #0
}
 8006532:	4618      	mov	r0, r3
 8006534:	3714      	adds	r7, #20
 8006536:	46bd      	mov	sp, r7
 8006538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653c:	4770      	bx	lr

0800653e <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800653e:	b480      	push	{r7}
 8006540:	b085      	sub	sp, #20
 8006542:	af00      	add	r7, sp, #0
 8006544:	6078      	str	r0, [r7, #4]
 8006546:	460b      	mov	r3, r1
 8006548:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	68fa      	ldr	r2, [r7, #12]
 8006558:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800655c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8006560:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006568:	681a      	ldr	r2, [r3, #0]
 800656a:	78fb      	ldrb	r3, [r7, #3]
 800656c:	011b      	lsls	r3, r3, #4
 800656e:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8006572:	68f9      	ldr	r1, [r7, #12]
 8006574:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006578:	4313      	orrs	r3, r2
 800657a:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800657c:	2300      	movs	r3, #0
}
 800657e:	4618      	mov	r0, r3
 8006580:	3714      	adds	r7, #20
 8006582:	46bd      	mov	sp, r7
 8006584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006588:	4770      	bx	lr

0800658a <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800658a:	b480      	push	{r7}
 800658c:	b085      	sub	sp, #20
 800658e:	af00      	add	r7, sp, #0
 8006590:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	68fa      	ldr	r2, [r7, #12]
 80065a0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80065a4:	f023 0303 	bic.w	r3, r3, #3
 80065a8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065b0:	685b      	ldr	r3, [r3, #4]
 80065b2:	68fa      	ldr	r2, [r7, #12]
 80065b4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80065b8:	f023 0302 	bic.w	r3, r3, #2
 80065bc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80065be:	2300      	movs	r3, #0
}
 80065c0:	4618      	mov	r0, r3
 80065c2:	3714      	adds	r7, #20
 80065c4:	46bd      	mov	sp, r7
 80065c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ca:	4770      	bx	lr

080065cc <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80065cc:	b480      	push	{r7}
 80065ce:	b085      	sub	sp, #20
 80065d0:	af00      	add	r7, sp, #0
 80065d2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	68fa      	ldr	r2, [r7, #12]
 80065e2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80065e6:	f023 0303 	bic.w	r3, r3, #3
 80065ea:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065f2:	685b      	ldr	r3, [r3, #4]
 80065f4:	68fa      	ldr	r2, [r7, #12]
 80065f6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80065fa:	f043 0302 	orr.w	r3, r3, #2
 80065fe:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006600:	2300      	movs	r3, #0
}
 8006602:	4618      	mov	r0, r3
 8006604:	3714      	adds	r7, #20
 8006606:	46bd      	mov	sp, r7
 8006608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800660c:	4770      	bx	lr

0800660e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800660e:	b480      	push	{r7}
 8006610:	b085      	sub	sp, #20
 8006612:	af00      	add	r7, sp, #0
 8006614:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	695b      	ldr	r3, [r3, #20]
 800661a:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	699b      	ldr	r3, [r3, #24]
 8006620:	68fa      	ldr	r2, [r7, #12]
 8006622:	4013      	ands	r3, r2
 8006624:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006626:	68fb      	ldr	r3, [r7, #12]
}
 8006628:	4618      	mov	r0, r3
 800662a:	3714      	adds	r7, #20
 800662c:	46bd      	mov	sp, r7
 800662e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006632:	4770      	bx	lr

08006634 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006634:	b480      	push	{r7}
 8006636:	b085      	sub	sp, #20
 8006638:	af00      	add	r7, sp, #0
 800663a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006646:	699b      	ldr	r3, [r3, #24]
 8006648:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006650:	69db      	ldr	r3, [r3, #28]
 8006652:	68ba      	ldr	r2, [r7, #8]
 8006654:	4013      	ands	r3, r2
 8006656:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8006658:	68bb      	ldr	r3, [r7, #8]
 800665a:	0c1b      	lsrs	r3, r3, #16
}
 800665c:	4618      	mov	r0, r3
 800665e:	3714      	adds	r7, #20
 8006660:	46bd      	mov	sp, r7
 8006662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006666:	4770      	bx	lr

08006668 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006668:	b480      	push	{r7}
 800666a:	b085      	sub	sp, #20
 800666c:	af00      	add	r7, sp, #0
 800666e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800667a:	699b      	ldr	r3, [r3, #24]
 800667c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006684:	69db      	ldr	r3, [r3, #28]
 8006686:	68ba      	ldr	r2, [r7, #8]
 8006688:	4013      	ands	r3, r2
 800668a:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800668c:	68bb      	ldr	r3, [r7, #8]
 800668e:	b29b      	uxth	r3, r3
}
 8006690:	4618      	mov	r0, r3
 8006692:	3714      	adds	r7, #20
 8006694:	46bd      	mov	sp, r7
 8006696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800669a:	4770      	bx	lr

0800669c <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800669c:	b480      	push	{r7}
 800669e:	b085      	sub	sp, #20
 80066a0:	af00      	add	r7, sp, #0
 80066a2:	6078      	str	r0, [r7, #4]
 80066a4:	460b      	mov	r3, r1
 80066a6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80066ac:	78fb      	ldrb	r3, [r7, #3]
 80066ae:	015a      	lsls	r2, r3, #5
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	4413      	add	r3, r2
 80066b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066b8:	689b      	ldr	r3, [r3, #8]
 80066ba:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066c2:	695b      	ldr	r3, [r3, #20]
 80066c4:	68ba      	ldr	r2, [r7, #8]
 80066c6:	4013      	ands	r3, r2
 80066c8:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80066ca:	68bb      	ldr	r3, [r7, #8]
}
 80066cc:	4618      	mov	r0, r3
 80066ce:	3714      	adds	r7, #20
 80066d0:	46bd      	mov	sp, r7
 80066d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d6:	4770      	bx	lr

080066d8 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80066d8:	b480      	push	{r7}
 80066da:	b087      	sub	sp, #28
 80066dc:	af00      	add	r7, sp, #0
 80066de:	6078      	str	r0, [r7, #4]
 80066e0:	460b      	mov	r3, r1
 80066e2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80066e8:	697b      	ldr	r3, [r7, #20]
 80066ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066ee:	691b      	ldr	r3, [r3, #16]
 80066f0:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80066f2:	697b      	ldr	r3, [r7, #20]
 80066f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066fa:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80066fc:	78fb      	ldrb	r3, [r7, #3]
 80066fe:	f003 030f 	and.w	r3, r3, #15
 8006702:	68fa      	ldr	r2, [r7, #12]
 8006704:	fa22 f303 	lsr.w	r3, r2, r3
 8006708:	01db      	lsls	r3, r3, #7
 800670a:	b2db      	uxtb	r3, r3
 800670c:	693a      	ldr	r2, [r7, #16]
 800670e:	4313      	orrs	r3, r2
 8006710:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006712:	78fb      	ldrb	r3, [r7, #3]
 8006714:	015a      	lsls	r2, r3, #5
 8006716:	697b      	ldr	r3, [r7, #20]
 8006718:	4413      	add	r3, r2
 800671a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800671e:	689b      	ldr	r3, [r3, #8]
 8006720:	693a      	ldr	r2, [r7, #16]
 8006722:	4013      	ands	r3, r2
 8006724:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006726:	68bb      	ldr	r3, [r7, #8]
}
 8006728:	4618      	mov	r0, r3
 800672a:	371c      	adds	r7, #28
 800672c:	46bd      	mov	sp, r7
 800672e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006732:	4770      	bx	lr

08006734 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006734:	b480      	push	{r7}
 8006736:	b083      	sub	sp, #12
 8006738:	af00      	add	r7, sp, #0
 800673a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	695b      	ldr	r3, [r3, #20]
 8006740:	f003 0301 	and.w	r3, r3, #1
}
 8006744:	4618      	mov	r0, r3
 8006746:	370c      	adds	r7, #12
 8006748:	46bd      	mov	sp, r7
 800674a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800674e:	4770      	bx	lr

08006750 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8006750:	b480      	push	{r7}
 8006752:	b085      	sub	sp, #20
 8006754:	af00      	add	r7, sp, #0
 8006756:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	68fa      	ldr	r2, [r7, #12]
 8006766:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800676a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800676e:	f023 0307 	bic.w	r3, r3, #7
 8006772:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800677a:	685b      	ldr	r3, [r3, #4]
 800677c:	68fa      	ldr	r2, [r7, #12]
 800677e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006782:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006786:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006788:	2300      	movs	r3, #0
}
 800678a:	4618      	mov	r0, r3
 800678c:	3714      	adds	r7, #20
 800678e:	46bd      	mov	sp, r7
 8006790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006794:	4770      	bx	lr
	...

08006798 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8006798:	b480      	push	{r7}
 800679a:	b087      	sub	sp, #28
 800679c:	af00      	add	r7, sp, #0
 800679e:	60f8      	str	r0, [r7, #12]
 80067a0:	460b      	mov	r3, r1
 80067a2:	607a      	str	r2, [r7, #4]
 80067a4:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	333c      	adds	r3, #60	; 0x3c
 80067ae:	3304      	adds	r3, #4
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80067b4:	693b      	ldr	r3, [r7, #16]
 80067b6:	4a26      	ldr	r2, [pc, #152]	; (8006850 <USB_EP0_OutStart+0xb8>)
 80067b8:	4293      	cmp	r3, r2
 80067ba:	d90a      	bls.n	80067d2 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80067bc:	697b      	ldr	r3, [r7, #20]
 80067be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80067c8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80067cc:	d101      	bne.n	80067d2 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80067ce:	2300      	movs	r3, #0
 80067d0:	e037      	b.n	8006842 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80067d2:	697b      	ldr	r3, [r7, #20]
 80067d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067d8:	461a      	mov	r2, r3
 80067da:	2300      	movs	r3, #0
 80067dc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80067de:	697b      	ldr	r3, [r7, #20]
 80067e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067e4:	691b      	ldr	r3, [r3, #16]
 80067e6:	697a      	ldr	r2, [r7, #20]
 80067e8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80067ec:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80067f0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80067f2:	697b      	ldr	r3, [r7, #20]
 80067f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067f8:	691b      	ldr	r3, [r3, #16]
 80067fa:	697a      	ldr	r2, [r7, #20]
 80067fc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006800:	f043 0318 	orr.w	r3, r3, #24
 8006804:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8006806:	697b      	ldr	r3, [r7, #20]
 8006808:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800680c:	691b      	ldr	r3, [r3, #16]
 800680e:	697a      	ldr	r2, [r7, #20]
 8006810:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006814:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8006818:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800681a:	7afb      	ldrb	r3, [r7, #11]
 800681c:	2b01      	cmp	r3, #1
 800681e:	d10f      	bne.n	8006840 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006820:	697b      	ldr	r3, [r7, #20]
 8006822:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006826:	461a      	mov	r2, r3
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800682c:	697b      	ldr	r3, [r7, #20]
 800682e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	697a      	ldr	r2, [r7, #20]
 8006836:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800683a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800683e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006840:	2300      	movs	r3, #0
}
 8006842:	4618      	mov	r0, r3
 8006844:	371c      	adds	r7, #28
 8006846:	46bd      	mov	sp, r7
 8006848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800684c:	4770      	bx	lr
 800684e:	bf00      	nop
 8006850:	4f54300a 	.word	0x4f54300a

08006854 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006854:	b480      	push	{r7}
 8006856:	b085      	sub	sp, #20
 8006858:	af00      	add	r7, sp, #0
 800685a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800685c:	2300      	movs	r3, #0
 800685e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	3301      	adds	r3, #1
 8006864:	60fb      	str	r3, [r7, #12]
 8006866:	4a13      	ldr	r2, [pc, #76]	; (80068b4 <USB_CoreReset+0x60>)
 8006868:	4293      	cmp	r3, r2
 800686a:	d901      	bls.n	8006870 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 800686c:	2303      	movs	r3, #3
 800686e:	e01a      	b.n	80068a6 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	691b      	ldr	r3, [r3, #16]
 8006874:	2b00      	cmp	r3, #0
 8006876:	daf3      	bge.n	8006860 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006878:	2300      	movs	r3, #0
 800687a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	691b      	ldr	r3, [r3, #16]
 8006880:	f043 0201 	orr.w	r2, r3, #1
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	3301      	adds	r3, #1
 800688c:	60fb      	str	r3, [r7, #12]
 800688e:	4a09      	ldr	r2, [pc, #36]	; (80068b4 <USB_CoreReset+0x60>)
 8006890:	4293      	cmp	r3, r2
 8006892:	d901      	bls.n	8006898 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8006894:	2303      	movs	r3, #3
 8006896:	e006      	b.n	80068a6 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	691b      	ldr	r3, [r3, #16]
 800689c:	f003 0301 	and.w	r3, r3, #1
 80068a0:	2b01      	cmp	r3, #1
 80068a2:	d0f1      	beq.n	8006888 <USB_CoreReset+0x34>

  return HAL_OK;
 80068a4:	2300      	movs	r3, #0
}
 80068a6:	4618      	mov	r0, r3
 80068a8:	3714      	adds	r7, #20
 80068aa:	46bd      	mov	sp, r7
 80068ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b0:	4770      	bx	lr
 80068b2:	bf00      	nop
 80068b4:	00030d40 	.word	0x00030d40

080068b8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80068b8:	b580      	push	{r7, lr}
 80068ba:	b084      	sub	sp, #16
 80068bc:	af00      	add	r7, sp, #0
 80068be:	6078      	str	r0, [r7, #4]
 80068c0:	460b      	mov	r3, r1
 80068c2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80068c4:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80068c8:	f002 f9e8 	bl	8008c9c <USBD_static_malloc>
 80068cc:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d105      	bne.n	80068e0 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	2200      	movs	r2, #0
 80068d8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 80068dc:	2302      	movs	r3, #2
 80068de:	e066      	b.n	80069ae <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	68fa      	ldr	r2, [r7, #12]
 80068e4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	7c1b      	ldrb	r3, [r3, #16]
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d119      	bne.n	8006924 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80068f0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80068f4:	2202      	movs	r2, #2
 80068f6:	2181      	movs	r1, #129	; 0x81
 80068f8:	6878      	ldr	r0, [r7, #4]
 80068fa:	f002 f8ac 	bl	8008a56 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	2201      	movs	r2, #1
 8006902:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006904:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006908:	2202      	movs	r2, #2
 800690a:	2101      	movs	r1, #1
 800690c:	6878      	ldr	r0, [r7, #4]
 800690e:	f002 f8a2 	bl	8008a56 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	2201      	movs	r2, #1
 8006916:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	2210      	movs	r2, #16
 800691e:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8006922:	e016      	b.n	8006952 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006924:	2340      	movs	r3, #64	; 0x40
 8006926:	2202      	movs	r2, #2
 8006928:	2181      	movs	r1, #129	; 0x81
 800692a:	6878      	ldr	r0, [r7, #4]
 800692c:	f002 f893 	bl	8008a56 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	2201      	movs	r2, #1
 8006934:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006936:	2340      	movs	r3, #64	; 0x40
 8006938:	2202      	movs	r2, #2
 800693a:	2101      	movs	r1, #1
 800693c:	6878      	ldr	r0, [r7, #4]
 800693e:	f002 f88a 	bl	8008a56 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	2201      	movs	r2, #1
 8006946:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	2210      	movs	r2, #16
 800694e:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006952:	2308      	movs	r3, #8
 8006954:	2203      	movs	r2, #3
 8006956:	2182      	movs	r1, #130	; 0x82
 8006958:	6878      	ldr	r0, [r7, #4]
 800695a:	f002 f87c 	bl	8008a56 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	2201      	movs	r2, #1
 8006962:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	2200      	movs	r2, #0
 8006974:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	2200      	movs	r2, #0
 800697c:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	7c1b      	ldrb	r3, [r3, #16]
 8006984:	2b00      	cmp	r3, #0
 8006986:	d109      	bne.n	800699c <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800698e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006992:	2101      	movs	r1, #1
 8006994:	6878      	ldr	r0, [r7, #4]
 8006996:	f002 f94d 	bl	8008c34 <USBD_LL_PrepareReceive>
 800699a:	e007      	b.n	80069ac <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80069a2:	2340      	movs	r3, #64	; 0x40
 80069a4:	2101      	movs	r1, #1
 80069a6:	6878      	ldr	r0, [r7, #4]
 80069a8:	f002 f944 	bl	8008c34 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80069ac:	2300      	movs	r3, #0
}
 80069ae:	4618      	mov	r0, r3
 80069b0:	3710      	adds	r7, #16
 80069b2:	46bd      	mov	sp, r7
 80069b4:	bd80      	pop	{r7, pc}

080069b6 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80069b6:	b580      	push	{r7, lr}
 80069b8:	b082      	sub	sp, #8
 80069ba:	af00      	add	r7, sp, #0
 80069bc:	6078      	str	r0, [r7, #4]
 80069be:	460b      	mov	r3, r1
 80069c0:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80069c2:	2181      	movs	r1, #129	; 0x81
 80069c4:	6878      	ldr	r0, [r7, #4]
 80069c6:	f002 f86c 	bl	8008aa2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	2200      	movs	r2, #0
 80069ce:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80069d0:	2101      	movs	r1, #1
 80069d2:	6878      	ldr	r0, [r7, #4]
 80069d4:	f002 f865 	bl	8008aa2 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	2200      	movs	r2, #0
 80069dc:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80069e0:	2182      	movs	r1, #130	; 0x82
 80069e2:	6878      	ldr	r0, [r7, #4]
 80069e4:	f002 f85d 	bl	8008aa2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	2200      	movs	r2, #0
 80069ec:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	2200      	movs	r2, #0
 80069f4:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d00e      	beq.n	8006a20 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006a08:	685b      	ldr	r3, [r3, #4]
 8006a0a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006a12:	4618      	mov	r0, r3
 8006a14:	f002 f950 	bl	8008cb8 <USBD_static_free>
    pdev->pClassData = NULL;
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	2200      	movs	r2, #0
 8006a1c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8006a20:	2300      	movs	r3, #0
}
 8006a22:	4618      	mov	r0, r3
 8006a24:	3708      	adds	r7, #8
 8006a26:	46bd      	mov	sp, r7
 8006a28:	bd80      	pop	{r7, pc}
	...

08006a2c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8006a2c:	b580      	push	{r7, lr}
 8006a2e:	b086      	sub	sp, #24
 8006a30:	af00      	add	r7, sp, #0
 8006a32:	6078      	str	r0, [r7, #4]
 8006a34:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006a3c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8006a3e:	2300      	movs	r3, #0
 8006a40:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8006a42:	2300      	movs	r3, #0
 8006a44:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8006a46:	2300      	movs	r3, #0
 8006a48:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8006a4a:	693b      	ldr	r3, [r7, #16]
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d101      	bne.n	8006a54 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8006a50:	2303      	movs	r3, #3
 8006a52:	e0af      	b.n	8006bb4 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006a54:	683b      	ldr	r3, [r7, #0]
 8006a56:	781b      	ldrb	r3, [r3, #0]
 8006a58:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d03f      	beq.n	8006ae0 <USBD_CDC_Setup+0xb4>
 8006a60:	2b20      	cmp	r3, #32
 8006a62:	f040 809f 	bne.w	8006ba4 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8006a66:	683b      	ldr	r3, [r7, #0]
 8006a68:	88db      	ldrh	r3, [r3, #6]
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d02e      	beq.n	8006acc <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8006a6e:	683b      	ldr	r3, [r7, #0]
 8006a70:	781b      	ldrb	r3, [r3, #0]
 8006a72:	b25b      	sxtb	r3, r3
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	da16      	bge.n	8006aa6 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006a7e:	689b      	ldr	r3, [r3, #8]
 8006a80:	683a      	ldr	r2, [r7, #0]
 8006a82:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8006a84:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006a86:	683a      	ldr	r2, [r7, #0]
 8006a88:	88d2      	ldrh	r2, [r2, #6]
 8006a8a:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8006a8c:	683b      	ldr	r3, [r7, #0]
 8006a8e:	88db      	ldrh	r3, [r3, #6]
 8006a90:	2b07      	cmp	r3, #7
 8006a92:	bf28      	it	cs
 8006a94:	2307      	movcs	r3, #7
 8006a96:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8006a98:	693b      	ldr	r3, [r7, #16]
 8006a9a:	89fa      	ldrh	r2, [r7, #14]
 8006a9c:	4619      	mov	r1, r3
 8006a9e:	6878      	ldr	r0, [r7, #4]
 8006aa0:	f001 fae9 	bl	8008076 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8006aa4:	e085      	b.n	8006bb2 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 8006aa6:	683b      	ldr	r3, [r7, #0]
 8006aa8:	785a      	ldrb	r2, [r3, #1]
 8006aaa:	693b      	ldr	r3, [r7, #16]
 8006aac:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8006ab0:	683b      	ldr	r3, [r7, #0]
 8006ab2:	88db      	ldrh	r3, [r3, #6]
 8006ab4:	b2da      	uxtb	r2, r3
 8006ab6:	693b      	ldr	r3, [r7, #16]
 8006ab8:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8006abc:	6939      	ldr	r1, [r7, #16]
 8006abe:	683b      	ldr	r3, [r7, #0]
 8006ac0:	88db      	ldrh	r3, [r3, #6]
 8006ac2:	461a      	mov	r2, r3
 8006ac4:	6878      	ldr	r0, [r7, #4]
 8006ac6:	f001 fb02 	bl	80080ce <USBD_CtlPrepareRx>
      break;
 8006aca:	e072      	b.n	8006bb2 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006ad2:	689b      	ldr	r3, [r3, #8]
 8006ad4:	683a      	ldr	r2, [r7, #0]
 8006ad6:	7850      	ldrb	r0, [r2, #1]
 8006ad8:	2200      	movs	r2, #0
 8006ada:	6839      	ldr	r1, [r7, #0]
 8006adc:	4798      	blx	r3
      break;
 8006ade:	e068      	b.n	8006bb2 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006ae0:	683b      	ldr	r3, [r7, #0]
 8006ae2:	785b      	ldrb	r3, [r3, #1]
 8006ae4:	2b0b      	cmp	r3, #11
 8006ae6:	d852      	bhi.n	8006b8e <USBD_CDC_Setup+0x162>
 8006ae8:	a201      	add	r2, pc, #4	; (adr r2, 8006af0 <USBD_CDC_Setup+0xc4>)
 8006aea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006aee:	bf00      	nop
 8006af0:	08006b21 	.word	0x08006b21
 8006af4:	08006b9d 	.word	0x08006b9d
 8006af8:	08006b8f 	.word	0x08006b8f
 8006afc:	08006b8f 	.word	0x08006b8f
 8006b00:	08006b8f 	.word	0x08006b8f
 8006b04:	08006b8f 	.word	0x08006b8f
 8006b08:	08006b8f 	.word	0x08006b8f
 8006b0c:	08006b8f 	.word	0x08006b8f
 8006b10:	08006b8f 	.word	0x08006b8f
 8006b14:	08006b8f 	.word	0x08006b8f
 8006b18:	08006b4b 	.word	0x08006b4b
 8006b1c:	08006b75 	.word	0x08006b75
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b26:	b2db      	uxtb	r3, r3
 8006b28:	2b03      	cmp	r3, #3
 8006b2a:	d107      	bne.n	8006b3c <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006b2c:	f107 030a 	add.w	r3, r7, #10
 8006b30:	2202      	movs	r2, #2
 8006b32:	4619      	mov	r1, r3
 8006b34:	6878      	ldr	r0, [r7, #4]
 8006b36:	f001 fa9e 	bl	8008076 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006b3a:	e032      	b.n	8006ba2 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8006b3c:	6839      	ldr	r1, [r7, #0]
 8006b3e:	6878      	ldr	r0, [r7, #4]
 8006b40:	f001 fa28 	bl	8007f94 <USBD_CtlError>
            ret = USBD_FAIL;
 8006b44:	2303      	movs	r3, #3
 8006b46:	75fb      	strb	r3, [r7, #23]
          break;
 8006b48:	e02b      	b.n	8006ba2 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b50:	b2db      	uxtb	r3, r3
 8006b52:	2b03      	cmp	r3, #3
 8006b54:	d107      	bne.n	8006b66 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8006b56:	f107 030d 	add.w	r3, r7, #13
 8006b5a:	2201      	movs	r2, #1
 8006b5c:	4619      	mov	r1, r3
 8006b5e:	6878      	ldr	r0, [r7, #4]
 8006b60:	f001 fa89 	bl	8008076 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006b64:	e01d      	b.n	8006ba2 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8006b66:	6839      	ldr	r1, [r7, #0]
 8006b68:	6878      	ldr	r0, [r7, #4]
 8006b6a:	f001 fa13 	bl	8007f94 <USBD_CtlError>
            ret = USBD_FAIL;
 8006b6e:	2303      	movs	r3, #3
 8006b70:	75fb      	strb	r3, [r7, #23]
          break;
 8006b72:	e016      	b.n	8006ba2 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b7a:	b2db      	uxtb	r3, r3
 8006b7c:	2b03      	cmp	r3, #3
 8006b7e:	d00f      	beq.n	8006ba0 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8006b80:	6839      	ldr	r1, [r7, #0]
 8006b82:	6878      	ldr	r0, [r7, #4]
 8006b84:	f001 fa06 	bl	8007f94 <USBD_CtlError>
            ret = USBD_FAIL;
 8006b88:	2303      	movs	r3, #3
 8006b8a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006b8c:	e008      	b.n	8006ba0 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8006b8e:	6839      	ldr	r1, [r7, #0]
 8006b90:	6878      	ldr	r0, [r7, #4]
 8006b92:	f001 f9ff 	bl	8007f94 <USBD_CtlError>
          ret = USBD_FAIL;
 8006b96:	2303      	movs	r3, #3
 8006b98:	75fb      	strb	r3, [r7, #23]
          break;
 8006b9a:	e002      	b.n	8006ba2 <USBD_CDC_Setup+0x176>
          break;
 8006b9c:	bf00      	nop
 8006b9e:	e008      	b.n	8006bb2 <USBD_CDC_Setup+0x186>
          break;
 8006ba0:	bf00      	nop
      }
      break;
 8006ba2:	e006      	b.n	8006bb2 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8006ba4:	6839      	ldr	r1, [r7, #0]
 8006ba6:	6878      	ldr	r0, [r7, #4]
 8006ba8:	f001 f9f4 	bl	8007f94 <USBD_CtlError>
      ret = USBD_FAIL;
 8006bac:	2303      	movs	r3, #3
 8006bae:	75fb      	strb	r3, [r7, #23]
      break;
 8006bb0:	bf00      	nop
  }

  return (uint8_t)ret;
 8006bb2:	7dfb      	ldrb	r3, [r7, #23]
}
 8006bb4:	4618      	mov	r0, r3
 8006bb6:	3718      	adds	r7, #24
 8006bb8:	46bd      	mov	sp, r7
 8006bba:	bd80      	pop	{r7, pc}

08006bbc <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006bbc:	b580      	push	{r7, lr}
 8006bbe:	b084      	sub	sp, #16
 8006bc0:	af00      	add	r7, sp, #0
 8006bc2:	6078      	str	r0, [r7, #4]
 8006bc4:	460b      	mov	r3, r1
 8006bc6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006bce:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d101      	bne.n	8006bde <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006bda:	2303      	movs	r3, #3
 8006bdc:	e04f      	b.n	8006c7e <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006be4:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8006be6:	78fa      	ldrb	r2, [r7, #3]
 8006be8:	6879      	ldr	r1, [r7, #4]
 8006bea:	4613      	mov	r3, r2
 8006bec:	009b      	lsls	r3, r3, #2
 8006bee:	4413      	add	r3, r2
 8006bf0:	009b      	lsls	r3, r3, #2
 8006bf2:	440b      	add	r3, r1
 8006bf4:	3318      	adds	r3, #24
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d029      	beq.n	8006c50 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8006bfc:	78fa      	ldrb	r2, [r7, #3]
 8006bfe:	6879      	ldr	r1, [r7, #4]
 8006c00:	4613      	mov	r3, r2
 8006c02:	009b      	lsls	r3, r3, #2
 8006c04:	4413      	add	r3, r2
 8006c06:	009b      	lsls	r3, r3, #2
 8006c08:	440b      	add	r3, r1
 8006c0a:	3318      	adds	r3, #24
 8006c0c:	681a      	ldr	r2, [r3, #0]
 8006c0e:	78f9      	ldrb	r1, [r7, #3]
 8006c10:	68f8      	ldr	r0, [r7, #12]
 8006c12:	460b      	mov	r3, r1
 8006c14:	00db      	lsls	r3, r3, #3
 8006c16:	1a5b      	subs	r3, r3, r1
 8006c18:	009b      	lsls	r3, r3, #2
 8006c1a:	4403      	add	r3, r0
 8006c1c:	3344      	adds	r3, #68	; 0x44
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	fbb2 f1f3 	udiv	r1, r2, r3
 8006c24:	fb01 f303 	mul.w	r3, r1, r3
 8006c28:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d110      	bne.n	8006c50 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8006c2e:	78fa      	ldrb	r2, [r7, #3]
 8006c30:	6879      	ldr	r1, [r7, #4]
 8006c32:	4613      	mov	r3, r2
 8006c34:	009b      	lsls	r3, r3, #2
 8006c36:	4413      	add	r3, r2
 8006c38:	009b      	lsls	r3, r3, #2
 8006c3a:	440b      	add	r3, r1
 8006c3c:	3318      	adds	r3, #24
 8006c3e:	2200      	movs	r2, #0
 8006c40:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006c42:	78f9      	ldrb	r1, [r7, #3]
 8006c44:	2300      	movs	r3, #0
 8006c46:	2200      	movs	r2, #0
 8006c48:	6878      	ldr	r0, [r7, #4]
 8006c4a:	f001 ffd2 	bl	8008bf2 <USBD_LL_Transmit>
 8006c4e:	e015      	b.n	8006c7c <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8006c50:	68bb      	ldr	r3, [r7, #8]
 8006c52:	2200      	movs	r2, #0
 8006c54:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006c5e:	691b      	ldr	r3, [r3, #16]
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d00b      	beq.n	8006c7c <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006c6a:	691b      	ldr	r3, [r3, #16]
 8006c6c:	68ba      	ldr	r2, [r7, #8]
 8006c6e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8006c72:	68ba      	ldr	r2, [r7, #8]
 8006c74:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8006c78:	78fa      	ldrb	r2, [r7, #3]
 8006c7a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8006c7c:	2300      	movs	r3, #0
}
 8006c7e:	4618      	mov	r0, r3
 8006c80:	3710      	adds	r7, #16
 8006c82:	46bd      	mov	sp, r7
 8006c84:	bd80      	pop	{r7, pc}

08006c86 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006c86:	b580      	push	{r7, lr}
 8006c88:	b084      	sub	sp, #16
 8006c8a:	af00      	add	r7, sp, #0
 8006c8c:	6078      	str	r0, [r7, #4]
 8006c8e:	460b      	mov	r3, r1
 8006c90:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006c98:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d101      	bne.n	8006ca8 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006ca4:	2303      	movs	r3, #3
 8006ca6:	e015      	b.n	8006cd4 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006ca8:	78fb      	ldrb	r3, [r7, #3]
 8006caa:	4619      	mov	r1, r3
 8006cac:	6878      	ldr	r0, [r7, #4]
 8006cae:	f001 ffe2 	bl	8008c76 <USBD_LL_GetRxDataSize>
 8006cb2:	4602      	mov	r2, r0
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006cc0:	68db      	ldr	r3, [r3, #12]
 8006cc2:	68fa      	ldr	r2, [r7, #12]
 8006cc4:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8006cc8:	68fa      	ldr	r2, [r7, #12]
 8006cca:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8006cce:	4611      	mov	r1, r2
 8006cd0:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8006cd2:	2300      	movs	r3, #0
}
 8006cd4:	4618      	mov	r0, r3
 8006cd6:	3710      	adds	r7, #16
 8006cd8:	46bd      	mov	sp, r7
 8006cda:	bd80      	pop	{r7, pc}

08006cdc <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006cdc:	b580      	push	{r7, lr}
 8006cde:	b084      	sub	sp, #16
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006cea:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d101      	bne.n	8006cf6 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8006cf2:	2303      	movs	r3, #3
 8006cf4:	e01b      	b.n	8006d2e <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d015      	beq.n	8006d2c <USBD_CDC_EP0_RxReady+0x50>
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006d06:	2bff      	cmp	r3, #255	; 0xff
 8006d08:	d010      	beq.n	8006d2c <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006d10:	689b      	ldr	r3, [r3, #8]
 8006d12:	68fa      	ldr	r2, [r7, #12]
 8006d14:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8006d18:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8006d1a:	68fa      	ldr	r2, [r7, #12]
 8006d1c:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006d20:	b292      	uxth	r2, r2
 8006d22:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	22ff      	movs	r2, #255	; 0xff
 8006d28:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8006d2c:	2300      	movs	r3, #0
}
 8006d2e:	4618      	mov	r0, r3
 8006d30:	3710      	adds	r7, #16
 8006d32:	46bd      	mov	sp, r7
 8006d34:	bd80      	pop	{r7, pc}
	...

08006d38 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006d38:	b480      	push	{r7}
 8006d3a:	b083      	sub	sp, #12
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	2243      	movs	r2, #67	; 0x43
 8006d44:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8006d46:	4b03      	ldr	r3, [pc, #12]	; (8006d54 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8006d48:	4618      	mov	r0, r3
 8006d4a:	370c      	adds	r7, #12
 8006d4c:	46bd      	mov	sp, r7
 8006d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d52:	4770      	bx	lr
 8006d54:	200000b8 	.word	0x200000b8

08006d58 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006d58:	b480      	push	{r7}
 8006d5a:	b083      	sub	sp, #12
 8006d5c:	af00      	add	r7, sp, #0
 8006d5e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	2243      	movs	r2, #67	; 0x43
 8006d64:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8006d66:	4b03      	ldr	r3, [pc, #12]	; (8006d74 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8006d68:	4618      	mov	r0, r3
 8006d6a:	370c      	adds	r7, #12
 8006d6c:	46bd      	mov	sp, r7
 8006d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d72:	4770      	bx	lr
 8006d74:	20000074 	.word	0x20000074

08006d78 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006d78:	b480      	push	{r7}
 8006d7a:	b083      	sub	sp, #12
 8006d7c:	af00      	add	r7, sp, #0
 8006d7e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	2243      	movs	r2, #67	; 0x43
 8006d84:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8006d86:	4b03      	ldr	r3, [pc, #12]	; (8006d94 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8006d88:	4618      	mov	r0, r3
 8006d8a:	370c      	adds	r7, #12
 8006d8c:	46bd      	mov	sp, r7
 8006d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d92:	4770      	bx	lr
 8006d94:	200000fc 	.word	0x200000fc

08006d98 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006d98:	b480      	push	{r7}
 8006d9a:	b083      	sub	sp, #12
 8006d9c:	af00      	add	r7, sp, #0
 8006d9e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	220a      	movs	r2, #10
 8006da4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8006da6:	4b03      	ldr	r3, [pc, #12]	; (8006db4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006da8:	4618      	mov	r0, r3
 8006daa:	370c      	adds	r7, #12
 8006dac:	46bd      	mov	sp, r7
 8006dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db2:	4770      	bx	lr
 8006db4:	20000030 	.word	0x20000030

08006db8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8006db8:	b480      	push	{r7}
 8006dba:	b083      	sub	sp, #12
 8006dbc:	af00      	add	r7, sp, #0
 8006dbe:	6078      	str	r0, [r7, #4]
 8006dc0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8006dc2:	683b      	ldr	r3, [r7, #0]
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d101      	bne.n	8006dcc <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8006dc8:	2303      	movs	r3, #3
 8006dca:	e004      	b.n	8006dd6 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	683a      	ldr	r2, [r7, #0]
 8006dd0:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8006dd4:	2300      	movs	r3, #0
}
 8006dd6:	4618      	mov	r0, r3
 8006dd8:	370c      	adds	r7, #12
 8006dda:	46bd      	mov	sp, r7
 8006ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de0:	4770      	bx	lr

08006de2 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8006de2:	b480      	push	{r7}
 8006de4:	b087      	sub	sp, #28
 8006de6:	af00      	add	r7, sp, #0
 8006de8:	60f8      	str	r0, [r7, #12]
 8006dea:	60b9      	str	r1, [r7, #8]
 8006dec:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006df4:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8006df6:	697b      	ldr	r3, [r7, #20]
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d101      	bne.n	8006e00 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8006dfc:	2303      	movs	r3, #3
 8006dfe:	e008      	b.n	8006e12 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8006e00:	697b      	ldr	r3, [r7, #20]
 8006e02:	68ba      	ldr	r2, [r7, #8]
 8006e04:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8006e08:	697b      	ldr	r3, [r7, #20]
 8006e0a:	687a      	ldr	r2, [r7, #4]
 8006e0c:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8006e10:	2300      	movs	r3, #0
}
 8006e12:	4618      	mov	r0, r3
 8006e14:	371c      	adds	r7, #28
 8006e16:	46bd      	mov	sp, r7
 8006e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e1c:	4770      	bx	lr

08006e1e <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8006e1e:	b480      	push	{r7}
 8006e20:	b085      	sub	sp, #20
 8006e22:	af00      	add	r7, sp, #0
 8006e24:	6078      	str	r0, [r7, #4]
 8006e26:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006e2e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d101      	bne.n	8006e3a <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 8006e36:	2303      	movs	r3, #3
 8006e38:	e004      	b.n	8006e44 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	683a      	ldr	r2, [r7, #0]
 8006e3e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8006e42:	2300      	movs	r3, #0
}
 8006e44:	4618      	mov	r0, r3
 8006e46:	3714      	adds	r7, #20
 8006e48:	46bd      	mov	sp, r7
 8006e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e4e:	4770      	bx	lr

08006e50 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006e50:	b580      	push	{r7, lr}
 8006e52:	b084      	sub	sp, #16
 8006e54:	af00      	add	r7, sp, #0
 8006e56:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006e5e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d101      	bne.n	8006e6e <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8006e6a:	2303      	movs	r3, #3
 8006e6c:	e016      	b.n	8006e9c <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	7c1b      	ldrb	r3, [r3, #16]
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d109      	bne.n	8006e8a <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006e7c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006e80:	2101      	movs	r1, #1
 8006e82:	6878      	ldr	r0, [r7, #4]
 8006e84:	f001 fed6 	bl	8008c34 <USBD_LL_PrepareReceive>
 8006e88:	e007      	b.n	8006e9a <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006e90:	2340      	movs	r3, #64	; 0x40
 8006e92:	2101      	movs	r1, #1
 8006e94:	6878      	ldr	r0, [r7, #4]
 8006e96:	f001 fecd 	bl	8008c34 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006e9a:	2300      	movs	r3, #0
}
 8006e9c:	4618      	mov	r0, r3
 8006e9e:	3710      	adds	r7, #16
 8006ea0:	46bd      	mov	sp, r7
 8006ea2:	bd80      	pop	{r7, pc}

08006ea4 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006ea4:	b580      	push	{r7, lr}
 8006ea6:	b086      	sub	sp, #24
 8006ea8:	af00      	add	r7, sp, #0
 8006eaa:	60f8      	str	r0, [r7, #12]
 8006eac:	60b9      	str	r1, [r7, #8]
 8006eae:	4613      	mov	r3, r2
 8006eb0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d101      	bne.n	8006ebc <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8006eb8:	2303      	movs	r3, #3
 8006eba:	e01f      	b.n	8006efc <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	2200      	movs	r2, #0
 8006ec0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	2200      	movs	r2, #0
 8006ec8:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	2200      	movs	r2, #0
 8006ed0:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006ed4:	68bb      	ldr	r3, [r7, #8]
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d003      	beq.n	8006ee2 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	68ba      	ldr	r2, [r7, #8]
 8006ede:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	2201      	movs	r2, #1
 8006ee6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	79fa      	ldrb	r2, [r7, #7]
 8006eee:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8006ef0:	68f8      	ldr	r0, [r7, #12]
 8006ef2:	f001 fd49 	bl	8008988 <USBD_LL_Init>
 8006ef6:	4603      	mov	r3, r0
 8006ef8:	75fb      	strb	r3, [r7, #23]

  return ret;
 8006efa:	7dfb      	ldrb	r3, [r7, #23]
}
 8006efc:	4618      	mov	r0, r3
 8006efe:	3718      	adds	r7, #24
 8006f00:	46bd      	mov	sp, r7
 8006f02:	bd80      	pop	{r7, pc}

08006f04 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006f04:	b580      	push	{r7, lr}
 8006f06:	b084      	sub	sp, #16
 8006f08:	af00      	add	r7, sp, #0
 8006f0a:	6078      	str	r0, [r7, #4]
 8006f0c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006f0e:	2300      	movs	r3, #0
 8006f10:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8006f12:	683b      	ldr	r3, [r7, #0]
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d101      	bne.n	8006f1c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8006f18:	2303      	movs	r3, #3
 8006f1a:	e016      	b.n	8006f4a <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	683a      	ldr	r2, [r7, #0]
 8006f20:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d00b      	beq.n	8006f48 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f38:	f107 020e 	add.w	r2, r7, #14
 8006f3c:	4610      	mov	r0, r2
 8006f3e:	4798      	blx	r3
 8006f40:	4602      	mov	r2, r0
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8006f48:	2300      	movs	r3, #0
}
 8006f4a:	4618      	mov	r0, r3
 8006f4c:	3710      	adds	r7, #16
 8006f4e:	46bd      	mov	sp, r7
 8006f50:	bd80      	pop	{r7, pc}

08006f52 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006f52:	b580      	push	{r7, lr}
 8006f54:	b082      	sub	sp, #8
 8006f56:	af00      	add	r7, sp, #0
 8006f58:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006f5a:	6878      	ldr	r0, [r7, #4]
 8006f5c:	f001 fd60 	bl	8008a20 <USBD_LL_Start>
 8006f60:	4603      	mov	r3, r0
}
 8006f62:	4618      	mov	r0, r3
 8006f64:	3708      	adds	r7, #8
 8006f66:	46bd      	mov	sp, r7
 8006f68:	bd80      	pop	{r7, pc}

08006f6a <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8006f6a:	b480      	push	{r7}
 8006f6c:	b083      	sub	sp, #12
 8006f6e:	af00      	add	r7, sp, #0
 8006f70:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006f72:	2300      	movs	r3, #0
}
 8006f74:	4618      	mov	r0, r3
 8006f76:	370c      	adds	r7, #12
 8006f78:	46bd      	mov	sp, r7
 8006f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f7e:	4770      	bx	lr

08006f80 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006f80:	b580      	push	{r7, lr}
 8006f82:	b084      	sub	sp, #16
 8006f84:	af00      	add	r7, sp, #0
 8006f86:	6078      	str	r0, [r7, #4]
 8006f88:	460b      	mov	r3, r1
 8006f8a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8006f8c:	2303      	movs	r3, #3
 8006f8e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d009      	beq.n	8006fae <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	78fa      	ldrb	r2, [r7, #3]
 8006fa4:	4611      	mov	r1, r2
 8006fa6:	6878      	ldr	r0, [r7, #4]
 8006fa8:	4798      	blx	r3
 8006faa:	4603      	mov	r3, r0
 8006fac:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8006fae:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fb0:	4618      	mov	r0, r3
 8006fb2:	3710      	adds	r7, #16
 8006fb4:	46bd      	mov	sp, r7
 8006fb6:	bd80      	pop	{r7, pc}

08006fb8 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006fb8:	b580      	push	{r7, lr}
 8006fba:	b082      	sub	sp, #8
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	6078      	str	r0, [r7, #4]
 8006fc0:	460b      	mov	r3, r1
 8006fc2:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d007      	beq.n	8006fde <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006fd4:	685b      	ldr	r3, [r3, #4]
 8006fd6:	78fa      	ldrb	r2, [r7, #3]
 8006fd8:	4611      	mov	r1, r2
 8006fda:	6878      	ldr	r0, [r7, #4]
 8006fdc:	4798      	blx	r3
  }

  return USBD_OK;
 8006fde:	2300      	movs	r3, #0
}
 8006fe0:	4618      	mov	r0, r3
 8006fe2:	3708      	adds	r7, #8
 8006fe4:	46bd      	mov	sp, r7
 8006fe6:	bd80      	pop	{r7, pc}

08006fe8 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006fe8:	b580      	push	{r7, lr}
 8006fea:	b084      	sub	sp, #16
 8006fec:	af00      	add	r7, sp, #0
 8006fee:	6078      	str	r0, [r7, #4]
 8006ff0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006ff8:	6839      	ldr	r1, [r7, #0]
 8006ffa:	4618      	mov	r0, r3
 8006ffc:	f000 ff90 	bl	8007f20 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	2201      	movs	r2, #1
 8007004:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800700e:	461a      	mov	r2, r3
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800701c:	f003 031f 	and.w	r3, r3, #31
 8007020:	2b02      	cmp	r3, #2
 8007022:	d01a      	beq.n	800705a <USBD_LL_SetupStage+0x72>
 8007024:	2b02      	cmp	r3, #2
 8007026:	d822      	bhi.n	800706e <USBD_LL_SetupStage+0x86>
 8007028:	2b00      	cmp	r3, #0
 800702a:	d002      	beq.n	8007032 <USBD_LL_SetupStage+0x4a>
 800702c:	2b01      	cmp	r3, #1
 800702e:	d00a      	beq.n	8007046 <USBD_LL_SetupStage+0x5e>
 8007030:	e01d      	b.n	800706e <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007038:	4619      	mov	r1, r3
 800703a:	6878      	ldr	r0, [r7, #4]
 800703c:	f000 fa62 	bl	8007504 <USBD_StdDevReq>
 8007040:	4603      	mov	r3, r0
 8007042:	73fb      	strb	r3, [r7, #15]
      break;
 8007044:	e020      	b.n	8007088 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800704c:	4619      	mov	r1, r3
 800704e:	6878      	ldr	r0, [r7, #4]
 8007050:	f000 fac6 	bl	80075e0 <USBD_StdItfReq>
 8007054:	4603      	mov	r3, r0
 8007056:	73fb      	strb	r3, [r7, #15]
      break;
 8007058:	e016      	b.n	8007088 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007060:	4619      	mov	r1, r3
 8007062:	6878      	ldr	r0, [r7, #4]
 8007064:	f000 fb05 	bl	8007672 <USBD_StdEPReq>
 8007068:	4603      	mov	r3, r0
 800706a:	73fb      	strb	r3, [r7, #15]
      break;
 800706c:	e00c      	b.n	8007088 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007074:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007078:	b2db      	uxtb	r3, r3
 800707a:	4619      	mov	r1, r3
 800707c:	6878      	ldr	r0, [r7, #4]
 800707e:	f001 fd2f 	bl	8008ae0 <USBD_LL_StallEP>
 8007082:	4603      	mov	r3, r0
 8007084:	73fb      	strb	r3, [r7, #15]
      break;
 8007086:	bf00      	nop
  }

  return ret;
 8007088:	7bfb      	ldrb	r3, [r7, #15]
}
 800708a:	4618      	mov	r0, r3
 800708c:	3710      	adds	r7, #16
 800708e:	46bd      	mov	sp, r7
 8007090:	bd80      	pop	{r7, pc}

08007092 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007092:	b580      	push	{r7, lr}
 8007094:	b086      	sub	sp, #24
 8007096:	af00      	add	r7, sp, #0
 8007098:	60f8      	str	r0, [r7, #12]
 800709a:	460b      	mov	r3, r1
 800709c:	607a      	str	r2, [r7, #4]
 800709e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80070a0:	7afb      	ldrb	r3, [r7, #11]
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d138      	bne.n	8007118 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80070ac:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80070b4:	2b03      	cmp	r3, #3
 80070b6:	d14a      	bne.n	800714e <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 80070b8:	693b      	ldr	r3, [r7, #16]
 80070ba:	689a      	ldr	r2, [r3, #8]
 80070bc:	693b      	ldr	r3, [r7, #16]
 80070be:	68db      	ldr	r3, [r3, #12]
 80070c0:	429a      	cmp	r2, r3
 80070c2:	d913      	bls.n	80070ec <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80070c4:	693b      	ldr	r3, [r7, #16]
 80070c6:	689a      	ldr	r2, [r3, #8]
 80070c8:	693b      	ldr	r3, [r7, #16]
 80070ca:	68db      	ldr	r3, [r3, #12]
 80070cc:	1ad2      	subs	r2, r2, r3
 80070ce:	693b      	ldr	r3, [r7, #16]
 80070d0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80070d2:	693b      	ldr	r3, [r7, #16]
 80070d4:	68da      	ldr	r2, [r3, #12]
 80070d6:	693b      	ldr	r3, [r7, #16]
 80070d8:	689b      	ldr	r3, [r3, #8]
 80070da:	4293      	cmp	r3, r2
 80070dc:	bf28      	it	cs
 80070de:	4613      	movcs	r3, r2
 80070e0:	461a      	mov	r2, r3
 80070e2:	6879      	ldr	r1, [r7, #4]
 80070e4:	68f8      	ldr	r0, [r7, #12]
 80070e6:	f001 f80f 	bl	8008108 <USBD_CtlContinueRx>
 80070ea:	e030      	b.n	800714e <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80070f2:	b2db      	uxtb	r3, r3
 80070f4:	2b03      	cmp	r3, #3
 80070f6:	d10b      	bne.n	8007110 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80070fe:	691b      	ldr	r3, [r3, #16]
 8007100:	2b00      	cmp	r3, #0
 8007102:	d005      	beq.n	8007110 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800710a:	691b      	ldr	r3, [r3, #16]
 800710c:	68f8      	ldr	r0, [r7, #12]
 800710e:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8007110:	68f8      	ldr	r0, [r7, #12]
 8007112:	f001 f80a 	bl	800812a <USBD_CtlSendStatus>
 8007116:	e01a      	b.n	800714e <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800711e:	b2db      	uxtb	r3, r3
 8007120:	2b03      	cmp	r3, #3
 8007122:	d114      	bne.n	800714e <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800712a:	699b      	ldr	r3, [r3, #24]
 800712c:	2b00      	cmp	r3, #0
 800712e:	d00e      	beq.n	800714e <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007136:	699b      	ldr	r3, [r3, #24]
 8007138:	7afa      	ldrb	r2, [r7, #11]
 800713a:	4611      	mov	r1, r2
 800713c:	68f8      	ldr	r0, [r7, #12]
 800713e:	4798      	blx	r3
 8007140:	4603      	mov	r3, r0
 8007142:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8007144:	7dfb      	ldrb	r3, [r7, #23]
 8007146:	2b00      	cmp	r3, #0
 8007148:	d001      	beq.n	800714e <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800714a:	7dfb      	ldrb	r3, [r7, #23]
 800714c:	e000      	b.n	8007150 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800714e:	2300      	movs	r3, #0
}
 8007150:	4618      	mov	r0, r3
 8007152:	3718      	adds	r7, #24
 8007154:	46bd      	mov	sp, r7
 8007156:	bd80      	pop	{r7, pc}

08007158 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007158:	b580      	push	{r7, lr}
 800715a:	b086      	sub	sp, #24
 800715c:	af00      	add	r7, sp, #0
 800715e:	60f8      	str	r0, [r7, #12]
 8007160:	460b      	mov	r3, r1
 8007162:	607a      	str	r2, [r7, #4]
 8007164:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8007166:	7afb      	ldrb	r3, [r7, #11]
 8007168:	2b00      	cmp	r3, #0
 800716a:	d16b      	bne.n	8007244 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	3314      	adds	r3, #20
 8007170:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007178:	2b02      	cmp	r3, #2
 800717a:	d156      	bne.n	800722a <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800717c:	693b      	ldr	r3, [r7, #16]
 800717e:	689a      	ldr	r2, [r3, #8]
 8007180:	693b      	ldr	r3, [r7, #16]
 8007182:	68db      	ldr	r3, [r3, #12]
 8007184:	429a      	cmp	r2, r3
 8007186:	d914      	bls.n	80071b2 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007188:	693b      	ldr	r3, [r7, #16]
 800718a:	689a      	ldr	r2, [r3, #8]
 800718c:	693b      	ldr	r3, [r7, #16]
 800718e:	68db      	ldr	r3, [r3, #12]
 8007190:	1ad2      	subs	r2, r2, r3
 8007192:	693b      	ldr	r3, [r7, #16]
 8007194:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8007196:	693b      	ldr	r3, [r7, #16]
 8007198:	689b      	ldr	r3, [r3, #8]
 800719a:	461a      	mov	r2, r3
 800719c:	6879      	ldr	r1, [r7, #4]
 800719e:	68f8      	ldr	r0, [r7, #12]
 80071a0:	f000 ff84 	bl	80080ac <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80071a4:	2300      	movs	r3, #0
 80071a6:	2200      	movs	r2, #0
 80071a8:	2100      	movs	r1, #0
 80071aa:	68f8      	ldr	r0, [r7, #12]
 80071ac:	f001 fd42 	bl	8008c34 <USBD_LL_PrepareReceive>
 80071b0:	e03b      	b.n	800722a <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80071b2:	693b      	ldr	r3, [r7, #16]
 80071b4:	68da      	ldr	r2, [r3, #12]
 80071b6:	693b      	ldr	r3, [r7, #16]
 80071b8:	689b      	ldr	r3, [r3, #8]
 80071ba:	429a      	cmp	r2, r3
 80071bc:	d11c      	bne.n	80071f8 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80071be:	693b      	ldr	r3, [r7, #16]
 80071c0:	685a      	ldr	r2, [r3, #4]
 80071c2:	693b      	ldr	r3, [r7, #16]
 80071c4:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80071c6:	429a      	cmp	r2, r3
 80071c8:	d316      	bcc.n	80071f8 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80071ca:	693b      	ldr	r3, [r7, #16]
 80071cc:	685a      	ldr	r2, [r3, #4]
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80071d4:	429a      	cmp	r2, r3
 80071d6:	d20f      	bcs.n	80071f8 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80071d8:	2200      	movs	r2, #0
 80071da:	2100      	movs	r1, #0
 80071dc:	68f8      	ldr	r0, [r7, #12]
 80071de:	f000 ff65 	bl	80080ac <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	2200      	movs	r2, #0
 80071e6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80071ea:	2300      	movs	r3, #0
 80071ec:	2200      	movs	r2, #0
 80071ee:	2100      	movs	r1, #0
 80071f0:	68f8      	ldr	r0, [r7, #12]
 80071f2:	f001 fd1f 	bl	8008c34 <USBD_LL_PrepareReceive>
 80071f6:	e018      	b.n	800722a <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80071fe:	b2db      	uxtb	r3, r3
 8007200:	2b03      	cmp	r3, #3
 8007202:	d10b      	bne.n	800721c <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800720a:	68db      	ldr	r3, [r3, #12]
 800720c:	2b00      	cmp	r3, #0
 800720e:	d005      	beq.n	800721c <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007216:	68db      	ldr	r3, [r3, #12]
 8007218:	68f8      	ldr	r0, [r7, #12]
 800721a:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800721c:	2180      	movs	r1, #128	; 0x80
 800721e:	68f8      	ldr	r0, [r7, #12]
 8007220:	f001 fc5e 	bl	8008ae0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8007224:	68f8      	ldr	r0, [r7, #12]
 8007226:	f000 ff93 	bl	8008150 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007230:	2b01      	cmp	r3, #1
 8007232:	d122      	bne.n	800727a <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8007234:	68f8      	ldr	r0, [r7, #12]
 8007236:	f7ff fe98 	bl	8006f6a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	2200      	movs	r2, #0
 800723e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007242:	e01a      	b.n	800727a <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800724a:	b2db      	uxtb	r3, r3
 800724c:	2b03      	cmp	r3, #3
 800724e:	d114      	bne.n	800727a <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007256:	695b      	ldr	r3, [r3, #20]
 8007258:	2b00      	cmp	r3, #0
 800725a:	d00e      	beq.n	800727a <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007262:	695b      	ldr	r3, [r3, #20]
 8007264:	7afa      	ldrb	r2, [r7, #11]
 8007266:	4611      	mov	r1, r2
 8007268:	68f8      	ldr	r0, [r7, #12]
 800726a:	4798      	blx	r3
 800726c:	4603      	mov	r3, r0
 800726e:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8007270:	7dfb      	ldrb	r3, [r7, #23]
 8007272:	2b00      	cmp	r3, #0
 8007274:	d001      	beq.n	800727a <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8007276:	7dfb      	ldrb	r3, [r7, #23]
 8007278:	e000      	b.n	800727c <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800727a:	2300      	movs	r3, #0
}
 800727c:	4618      	mov	r0, r3
 800727e:	3718      	adds	r7, #24
 8007280:	46bd      	mov	sp, r7
 8007282:	bd80      	pop	{r7, pc}

08007284 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007284:	b580      	push	{r7, lr}
 8007286:	b082      	sub	sp, #8
 8007288:	af00      	add	r7, sp, #0
 800728a:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	2201      	movs	r2, #1
 8007290:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	2200      	movs	r2, #0
 8007298:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	2200      	movs	r2, #0
 80072a0:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	2200      	movs	r2, #0
 80072a6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d101      	bne.n	80072b8 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 80072b4:	2303      	movs	r3, #3
 80072b6:	e02f      	b.n	8007318 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d00f      	beq.n	80072e2 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80072c8:	685b      	ldr	r3, [r3, #4]
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d009      	beq.n	80072e2 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80072d4:	685b      	ldr	r3, [r3, #4]
 80072d6:	687a      	ldr	r2, [r7, #4]
 80072d8:	6852      	ldr	r2, [r2, #4]
 80072da:	b2d2      	uxtb	r2, r2
 80072dc:	4611      	mov	r1, r2
 80072de:	6878      	ldr	r0, [r7, #4]
 80072e0:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80072e2:	2340      	movs	r3, #64	; 0x40
 80072e4:	2200      	movs	r2, #0
 80072e6:	2100      	movs	r1, #0
 80072e8:	6878      	ldr	r0, [r7, #4]
 80072ea:	f001 fbb4 	bl	8008a56 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	2201      	movs	r2, #1
 80072f2:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	2240      	movs	r2, #64	; 0x40
 80072fa:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80072fe:	2340      	movs	r3, #64	; 0x40
 8007300:	2200      	movs	r2, #0
 8007302:	2180      	movs	r1, #128	; 0x80
 8007304:	6878      	ldr	r0, [r7, #4]
 8007306:	f001 fba6 	bl	8008a56 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	2201      	movs	r2, #1
 800730e:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	2240      	movs	r2, #64	; 0x40
 8007314:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8007316:	2300      	movs	r3, #0
}
 8007318:	4618      	mov	r0, r3
 800731a:	3708      	adds	r7, #8
 800731c:	46bd      	mov	sp, r7
 800731e:	bd80      	pop	{r7, pc}

08007320 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007320:	b480      	push	{r7}
 8007322:	b083      	sub	sp, #12
 8007324:	af00      	add	r7, sp, #0
 8007326:	6078      	str	r0, [r7, #4]
 8007328:	460b      	mov	r3, r1
 800732a:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	78fa      	ldrb	r2, [r7, #3]
 8007330:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007332:	2300      	movs	r3, #0
}
 8007334:	4618      	mov	r0, r3
 8007336:	370c      	adds	r7, #12
 8007338:	46bd      	mov	sp, r7
 800733a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800733e:	4770      	bx	lr

08007340 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007340:	b480      	push	{r7}
 8007342:	b083      	sub	sp, #12
 8007344:	af00      	add	r7, sp, #0
 8007346:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800734e:	b2da      	uxtb	r2, r3
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	2204      	movs	r2, #4
 800735a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800735e:	2300      	movs	r3, #0
}
 8007360:	4618      	mov	r0, r3
 8007362:	370c      	adds	r7, #12
 8007364:	46bd      	mov	sp, r7
 8007366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800736a:	4770      	bx	lr

0800736c <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800736c:	b480      	push	{r7}
 800736e:	b083      	sub	sp, #12
 8007370:	af00      	add	r7, sp, #0
 8007372:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800737a:	b2db      	uxtb	r3, r3
 800737c:	2b04      	cmp	r3, #4
 800737e:	d106      	bne.n	800738e <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8007386:	b2da      	uxtb	r2, r3
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800738e:	2300      	movs	r3, #0
}
 8007390:	4618      	mov	r0, r3
 8007392:	370c      	adds	r7, #12
 8007394:	46bd      	mov	sp, r7
 8007396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800739a:	4770      	bx	lr

0800739c <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800739c:	b580      	push	{r7, lr}
 800739e:	b082      	sub	sp, #8
 80073a0:	af00      	add	r7, sp, #0
 80073a2:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d101      	bne.n	80073b2 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 80073ae:	2303      	movs	r3, #3
 80073b0:	e012      	b.n	80073d8 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80073b8:	b2db      	uxtb	r3, r3
 80073ba:	2b03      	cmp	r3, #3
 80073bc:	d10b      	bne.n	80073d6 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80073c4:	69db      	ldr	r3, [r3, #28]
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d005      	beq.n	80073d6 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80073d0:	69db      	ldr	r3, [r3, #28]
 80073d2:	6878      	ldr	r0, [r7, #4]
 80073d4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80073d6:	2300      	movs	r3, #0
}
 80073d8:	4618      	mov	r0, r3
 80073da:	3708      	adds	r7, #8
 80073dc:	46bd      	mov	sp, r7
 80073de:	bd80      	pop	{r7, pc}

080073e0 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80073e0:	b580      	push	{r7, lr}
 80073e2:	b082      	sub	sp, #8
 80073e4:	af00      	add	r7, sp, #0
 80073e6:	6078      	str	r0, [r7, #4]
 80073e8:	460b      	mov	r3, r1
 80073ea:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d101      	bne.n	80073fa <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 80073f6:	2303      	movs	r3, #3
 80073f8:	e014      	b.n	8007424 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007400:	b2db      	uxtb	r3, r3
 8007402:	2b03      	cmp	r3, #3
 8007404:	d10d      	bne.n	8007422 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800740c:	6a1b      	ldr	r3, [r3, #32]
 800740e:	2b00      	cmp	r3, #0
 8007410:	d007      	beq.n	8007422 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007418:	6a1b      	ldr	r3, [r3, #32]
 800741a:	78fa      	ldrb	r2, [r7, #3]
 800741c:	4611      	mov	r1, r2
 800741e:	6878      	ldr	r0, [r7, #4]
 8007420:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007422:	2300      	movs	r3, #0
}
 8007424:	4618      	mov	r0, r3
 8007426:	3708      	adds	r7, #8
 8007428:	46bd      	mov	sp, r7
 800742a:	bd80      	pop	{r7, pc}

0800742c <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800742c:	b580      	push	{r7, lr}
 800742e:	b082      	sub	sp, #8
 8007430:	af00      	add	r7, sp, #0
 8007432:	6078      	str	r0, [r7, #4]
 8007434:	460b      	mov	r3, r1
 8007436:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800743e:	2b00      	cmp	r3, #0
 8007440:	d101      	bne.n	8007446 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 8007442:	2303      	movs	r3, #3
 8007444:	e014      	b.n	8007470 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800744c:	b2db      	uxtb	r3, r3
 800744e:	2b03      	cmp	r3, #3
 8007450:	d10d      	bne.n	800746e <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007458:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800745a:	2b00      	cmp	r3, #0
 800745c:	d007      	beq.n	800746e <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007466:	78fa      	ldrb	r2, [r7, #3]
 8007468:	4611      	mov	r1, r2
 800746a:	6878      	ldr	r0, [r7, #4]
 800746c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800746e:	2300      	movs	r3, #0
}
 8007470:	4618      	mov	r0, r3
 8007472:	3708      	adds	r7, #8
 8007474:	46bd      	mov	sp, r7
 8007476:	bd80      	pop	{r7, pc}

08007478 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8007478:	b480      	push	{r7}
 800747a:	b083      	sub	sp, #12
 800747c:	af00      	add	r7, sp, #0
 800747e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007480:	2300      	movs	r3, #0
}
 8007482:	4618      	mov	r0, r3
 8007484:	370c      	adds	r7, #12
 8007486:	46bd      	mov	sp, r7
 8007488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800748c:	4770      	bx	lr

0800748e <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800748e:	b580      	push	{r7, lr}
 8007490:	b082      	sub	sp, #8
 8007492:	af00      	add	r7, sp, #0
 8007494:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	2201      	movs	r2, #1
 800749a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d009      	beq.n	80074bc <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80074ae:	685b      	ldr	r3, [r3, #4]
 80074b0:	687a      	ldr	r2, [r7, #4]
 80074b2:	6852      	ldr	r2, [r2, #4]
 80074b4:	b2d2      	uxtb	r2, r2
 80074b6:	4611      	mov	r1, r2
 80074b8:	6878      	ldr	r0, [r7, #4]
 80074ba:	4798      	blx	r3
  }

  return USBD_OK;
 80074bc:	2300      	movs	r3, #0
}
 80074be:	4618      	mov	r0, r3
 80074c0:	3708      	adds	r7, #8
 80074c2:	46bd      	mov	sp, r7
 80074c4:	bd80      	pop	{r7, pc}

080074c6 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80074c6:	b480      	push	{r7}
 80074c8:	b087      	sub	sp, #28
 80074ca:	af00      	add	r7, sp, #0
 80074cc:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80074d2:	697b      	ldr	r3, [r7, #20]
 80074d4:	781b      	ldrb	r3, [r3, #0]
 80074d6:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80074d8:	697b      	ldr	r3, [r7, #20]
 80074da:	3301      	adds	r3, #1
 80074dc:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80074de:	697b      	ldr	r3, [r7, #20]
 80074e0:	781b      	ldrb	r3, [r3, #0]
 80074e2:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80074e4:	8a3b      	ldrh	r3, [r7, #16]
 80074e6:	021b      	lsls	r3, r3, #8
 80074e8:	b21a      	sxth	r2, r3
 80074ea:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80074ee:	4313      	orrs	r3, r2
 80074f0:	b21b      	sxth	r3, r3
 80074f2:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80074f4:	89fb      	ldrh	r3, [r7, #14]
}
 80074f6:	4618      	mov	r0, r3
 80074f8:	371c      	adds	r7, #28
 80074fa:	46bd      	mov	sp, r7
 80074fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007500:	4770      	bx	lr
	...

08007504 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007504:	b580      	push	{r7, lr}
 8007506:	b084      	sub	sp, #16
 8007508:	af00      	add	r7, sp, #0
 800750a:	6078      	str	r0, [r7, #4]
 800750c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800750e:	2300      	movs	r3, #0
 8007510:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007512:	683b      	ldr	r3, [r7, #0]
 8007514:	781b      	ldrb	r3, [r3, #0]
 8007516:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800751a:	2b40      	cmp	r3, #64	; 0x40
 800751c:	d005      	beq.n	800752a <USBD_StdDevReq+0x26>
 800751e:	2b40      	cmp	r3, #64	; 0x40
 8007520:	d853      	bhi.n	80075ca <USBD_StdDevReq+0xc6>
 8007522:	2b00      	cmp	r3, #0
 8007524:	d00b      	beq.n	800753e <USBD_StdDevReq+0x3a>
 8007526:	2b20      	cmp	r3, #32
 8007528:	d14f      	bne.n	80075ca <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007530:	689b      	ldr	r3, [r3, #8]
 8007532:	6839      	ldr	r1, [r7, #0]
 8007534:	6878      	ldr	r0, [r7, #4]
 8007536:	4798      	blx	r3
 8007538:	4603      	mov	r3, r0
 800753a:	73fb      	strb	r3, [r7, #15]
      break;
 800753c:	e04a      	b.n	80075d4 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800753e:	683b      	ldr	r3, [r7, #0]
 8007540:	785b      	ldrb	r3, [r3, #1]
 8007542:	2b09      	cmp	r3, #9
 8007544:	d83b      	bhi.n	80075be <USBD_StdDevReq+0xba>
 8007546:	a201      	add	r2, pc, #4	; (adr r2, 800754c <USBD_StdDevReq+0x48>)
 8007548:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800754c:	080075a1 	.word	0x080075a1
 8007550:	080075b5 	.word	0x080075b5
 8007554:	080075bf 	.word	0x080075bf
 8007558:	080075ab 	.word	0x080075ab
 800755c:	080075bf 	.word	0x080075bf
 8007560:	0800757f 	.word	0x0800757f
 8007564:	08007575 	.word	0x08007575
 8007568:	080075bf 	.word	0x080075bf
 800756c:	08007597 	.word	0x08007597
 8007570:	08007589 	.word	0x08007589
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007574:	6839      	ldr	r1, [r7, #0]
 8007576:	6878      	ldr	r0, [r7, #4]
 8007578:	f000 f9de 	bl	8007938 <USBD_GetDescriptor>
          break;
 800757c:	e024      	b.n	80075c8 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800757e:	6839      	ldr	r1, [r7, #0]
 8007580:	6878      	ldr	r0, [r7, #4]
 8007582:	f000 fb43 	bl	8007c0c <USBD_SetAddress>
          break;
 8007586:	e01f      	b.n	80075c8 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8007588:	6839      	ldr	r1, [r7, #0]
 800758a:	6878      	ldr	r0, [r7, #4]
 800758c:	f000 fb82 	bl	8007c94 <USBD_SetConfig>
 8007590:	4603      	mov	r3, r0
 8007592:	73fb      	strb	r3, [r7, #15]
          break;
 8007594:	e018      	b.n	80075c8 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007596:	6839      	ldr	r1, [r7, #0]
 8007598:	6878      	ldr	r0, [r7, #4]
 800759a:	f000 fc21 	bl	8007de0 <USBD_GetConfig>
          break;
 800759e:	e013      	b.n	80075c8 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80075a0:	6839      	ldr	r1, [r7, #0]
 80075a2:	6878      	ldr	r0, [r7, #4]
 80075a4:	f000 fc52 	bl	8007e4c <USBD_GetStatus>
          break;
 80075a8:	e00e      	b.n	80075c8 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80075aa:	6839      	ldr	r1, [r7, #0]
 80075ac:	6878      	ldr	r0, [r7, #4]
 80075ae:	f000 fc81 	bl	8007eb4 <USBD_SetFeature>
          break;
 80075b2:	e009      	b.n	80075c8 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80075b4:	6839      	ldr	r1, [r7, #0]
 80075b6:	6878      	ldr	r0, [r7, #4]
 80075b8:	f000 fc90 	bl	8007edc <USBD_ClrFeature>
          break;
 80075bc:	e004      	b.n	80075c8 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 80075be:	6839      	ldr	r1, [r7, #0]
 80075c0:	6878      	ldr	r0, [r7, #4]
 80075c2:	f000 fce7 	bl	8007f94 <USBD_CtlError>
          break;
 80075c6:	bf00      	nop
      }
      break;
 80075c8:	e004      	b.n	80075d4 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 80075ca:	6839      	ldr	r1, [r7, #0]
 80075cc:	6878      	ldr	r0, [r7, #4]
 80075ce:	f000 fce1 	bl	8007f94 <USBD_CtlError>
      break;
 80075d2:	bf00      	nop
  }

  return ret;
 80075d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80075d6:	4618      	mov	r0, r3
 80075d8:	3710      	adds	r7, #16
 80075da:	46bd      	mov	sp, r7
 80075dc:	bd80      	pop	{r7, pc}
 80075de:	bf00      	nop

080075e0 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80075e0:	b580      	push	{r7, lr}
 80075e2:	b084      	sub	sp, #16
 80075e4:	af00      	add	r7, sp, #0
 80075e6:	6078      	str	r0, [r7, #4]
 80075e8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80075ea:	2300      	movs	r3, #0
 80075ec:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80075ee:	683b      	ldr	r3, [r7, #0]
 80075f0:	781b      	ldrb	r3, [r3, #0]
 80075f2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80075f6:	2b40      	cmp	r3, #64	; 0x40
 80075f8:	d005      	beq.n	8007606 <USBD_StdItfReq+0x26>
 80075fa:	2b40      	cmp	r3, #64	; 0x40
 80075fc:	d82f      	bhi.n	800765e <USBD_StdItfReq+0x7e>
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d001      	beq.n	8007606 <USBD_StdItfReq+0x26>
 8007602:	2b20      	cmp	r3, #32
 8007604:	d12b      	bne.n	800765e <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800760c:	b2db      	uxtb	r3, r3
 800760e:	3b01      	subs	r3, #1
 8007610:	2b02      	cmp	r3, #2
 8007612:	d81d      	bhi.n	8007650 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007614:	683b      	ldr	r3, [r7, #0]
 8007616:	889b      	ldrh	r3, [r3, #4]
 8007618:	b2db      	uxtb	r3, r3
 800761a:	2b01      	cmp	r3, #1
 800761c:	d813      	bhi.n	8007646 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007624:	689b      	ldr	r3, [r3, #8]
 8007626:	6839      	ldr	r1, [r7, #0]
 8007628:	6878      	ldr	r0, [r7, #4]
 800762a:	4798      	blx	r3
 800762c:	4603      	mov	r3, r0
 800762e:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007630:	683b      	ldr	r3, [r7, #0]
 8007632:	88db      	ldrh	r3, [r3, #6]
 8007634:	2b00      	cmp	r3, #0
 8007636:	d110      	bne.n	800765a <USBD_StdItfReq+0x7a>
 8007638:	7bfb      	ldrb	r3, [r7, #15]
 800763a:	2b00      	cmp	r3, #0
 800763c:	d10d      	bne.n	800765a <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800763e:	6878      	ldr	r0, [r7, #4]
 8007640:	f000 fd73 	bl	800812a <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007644:	e009      	b.n	800765a <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8007646:	6839      	ldr	r1, [r7, #0]
 8007648:	6878      	ldr	r0, [r7, #4]
 800764a:	f000 fca3 	bl	8007f94 <USBD_CtlError>
          break;
 800764e:	e004      	b.n	800765a <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8007650:	6839      	ldr	r1, [r7, #0]
 8007652:	6878      	ldr	r0, [r7, #4]
 8007654:	f000 fc9e 	bl	8007f94 <USBD_CtlError>
          break;
 8007658:	e000      	b.n	800765c <USBD_StdItfReq+0x7c>
          break;
 800765a:	bf00      	nop
      }
      break;
 800765c:	e004      	b.n	8007668 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800765e:	6839      	ldr	r1, [r7, #0]
 8007660:	6878      	ldr	r0, [r7, #4]
 8007662:	f000 fc97 	bl	8007f94 <USBD_CtlError>
      break;
 8007666:	bf00      	nop
  }

  return ret;
 8007668:	7bfb      	ldrb	r3, [r7, #15]
}
 800766a:	4618      	mov	r0, r3
 800766c:	3710      	adds	r7, #16
 800766e:	46bd      	mov	sp, r7
 8007670:	bd80      	pop	{r7, pc}

08007672 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007672:	b580      	push	{r7, lr}
 8007674:	b084      	sub	sp, #16
 8007676:	af00      	add	r7, sp, #0
 8007678:	6078      	str	r0, [r7, #4]
 800767a:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800767c:	2300      	movs	r3, #0
 800767e:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8007680:	683b      	ldr	r3, [r7, #0]
 8007682:	889b      	ldrh	r3, [r3, #4]
 8007684:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007686:	683b      	ldr	r3, [r7, #0]
 8007688:	781b      	ldrb	r3, [r3, #0]
 800768a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800768e:	2b40      	cmp	r3, #64	; 0x40
 8007690:	d007      	beq.n	80076a2 <USBD_StdEPReq+0x30>
 8007692:	2b40      	cmp	r3, #64	; 0x40
 8007694:	f200 8145 	bhi.w	8007922 <USBD_StdEPReq+0x2b0>
 8007698:	2b00      	cmp	r3, #0
 800769a:	d00c      	beq.n	80076b6 <USBD_StdEPReq+0x44>
 800769c:	2b20      	cmp	r3, #32
 800769e:	f040 8140 	bne.w	8007922 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80076a8:	689b      	ldr	r3, [r3, #8]
 80076aa:	6839      	ldr	r1, [r7, #0]
 80076ac:	6878      	ldr	r0, [r7, #4]
 80076ae:	4798      	blx	r3
 80076b0:	4603      	mov	r3, r0
 80076b2:	73fb      	strb	r3, [r7, #15]
      break;
 80076b4:	e13a      	b.n	800792c <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80076b6:	683b      	ldr	r3, [r7, #0]
 80076b8:	785b      	ldrb	r3, [r3, #1]
 80076ba:	2b03      	cmp	r3, #3
 80076bc:	d007      	beq.n	80076ce <USBD_StdEPReq+0x5c>
 80076be:	2b03      	cmp	r3, #3
 80076c0:	f300 8129 	bgt.w	8007916 <USBD_StdEPReq+0x2a4>
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d07f      	beq.n	80077c8 <USBD_StdEPReq+0x156>
 80076c8:	2b01      	cmp	r3, #1
 80076ca:	d03c      	beq.n	8007746 <USBD_StdEPReq+0xd4>
 80076cc:	e123      	b.n	8007916 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80076d4:	b2db      	uxtb	r3, r3
 80076d6:	2b02      	cmp	r3, #2
 80076d8:	d002      	beq.n	80076e0 <USBD_StdEPReq+0x6e>
 80076da:	2b03      	cmp	r3, #3
 80076dc:	d016      	beq.n	800770c <USBD_StdEPReq+0x9a>
 80076de:	e02c      	b.n	800773a <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80076e0:	7bbb      	ldrb	r3, [r7, #14]
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d00d      	beq.n	8007702 <USBD_StdEPReq+0x90>
 80076e6:	7bbb      	ldrb	r3, [r7, #14]
 80076e8:	2b80      	cmp	r3, #128	; 0x80
 80076ea:	d00a      	beq.n	8007702 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80076ec:	7bbb      	ldrb	r3, [r7, #14]
 80076ee:	4619      	mov	r1, r3
 80076f0:	6878      	ldr	r0, [r7, #4]
 80076f2:	f001 f9f5 	bl	8008ae0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80076f6:	2180      	movs	r1, #128	; 0x80
 80076f8:	6878      	ldr	r0, [r7, #4]
 80076fa:	f001 f9f1 	bl	8008ae0 <USBD_LL_StallEP>
 80076fe:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007700:	e020      	b.n	8007744 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8007702:	6839      	ldr	r1, [r7, #0]
 8007704:	6878      	ldr	r0, [r7, #4]
 8007706:	f000 fc45 	bl	8007f94 <USBD_CtlError>
              break;
 800770a:	e01b      	b.n	8007744 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800770c:	683b      	ldr	r3, [r7, #0]
 800770e:	885b      	ldrh	r3, [r3, #2]
 8007710:	2b00      	cmp	r3, #0
 8007712:	d10e      	bne.n	8007732 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007714:	7bbb      	ldrb	r3, [r7, #14]
 8007716:	2b00      	cmp	r3, #0
 8007718:	d00b      	beq.n	8007732 <USBD_StdEPReq+0xc0>
 800771a:	7bbb      	ldrb	r3, [r7, #14]
 800771c:	2b80      	cmp	r3, #128	; 0x80
 800771e:	d008      	beq.n	8007732 <USBD_StdEPReq+0xc0>
 8007720:	683b      	ldr	r3, [r7, #0]
 8007722:	88db      	ldrh	r3, [r3, #6]
 8007724:	2b00      	cmp	r3, #0
 8007726:	d104      	bne.n	8007732 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8007728:	7bbb      	ldrb	r3, [r7, #14]
 800772a:	4619      	mov	r1, r3
 800772c:	6878      	ldr	r0, [r7, #4]
 800772e:	f001 f9d7 	bl	8008ae0 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8007732:	6878      	ldr	r0, [r7, #4]
 8007734:	f000 fcf9 	bl	800812a <USBD_CtlSendStatus>

              break;
 8007738:	e004      	b.n	8007744 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800773a:	6839      	ldr	r1, [r7, #0]
 800773c:	6878      	ldr	r0, [r7, #4]
 800773e:	f000 fc29 	bl	8007f94 <USBD_CtlError>
              break;
 8007742:	bf00      	nop
          }
          break;
 8007744:	e0ec      	b.n	8007920 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800774c:	b2db      	uxtb	r3, r3
 800774e:	2b02      	cmp	r3, #2
 8007750:	d002      	beq.n	8007758 <USBD_StdEPReq+0xe6>
 8007752:	2b03      	cmp	r3, #3
 8007754:	d016      	beq.n	8007784 <USBD_StdEPReq+0x112>
 8007756:	e030      	b.n	80077ba <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007758:	7bbb      	ldrb	r3, [r7, #14]
 800775a:	2b00      	cmp	r3, #0
 800775c:	d00d      	beq.n	800777a <USBD_StdEPReq+0x108>
 800775e:	7bbb      	ldrb	r3, [r7, #14]
 8007760:	2b80      	cmp	r3, #128	; 0x80
 8007762:	d00a      	beq.n	800777a <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007764:	7bbb      	ldrb	r3, [r7, #14]
 8007766:	4619      	mov	r1, r3
 8007768:	6878      	ldr	r0, [r7, #4]
 800776a:	f001 f9b9 	bl	8008ae0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800776e:	2180      	movs	r1, #128	; 0x80
 8007770:	6878      	ldr	r0, [r7, #4]
 8007772:	f001 f9b5 	bl	8008ae0 <USBD_LL_StallEP>
 8007776:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007778:	e025      	b.n	80077c6 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800777a:	6839      	ldr	r1, [r7, #0]
 800777c:	6878      	ldr	r0, [r7, #4]
 800777e:	f000 fc09 	bl	8007f94 <USBD_CtlError>
              break;
 8007782:	e020      	b.n	80077c6 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007784:	683b      	ldr	r3, [r7, #0]
 8007786:	885b      	ldrh	r3, [r3, #2]
 8007788:	2b00      	cmp	r3, #0
 800778a:	d11b      	bne.n	80077c4 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800778c:	7bbb      	ldrb	r3, [r7, #14]
 800778e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007792:	2b00      	cmp	r3, #0
 8007794:	d004      	beq.n	80077a0 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8007796:	7bbb      	ldrb	r3, [r7, #14]
 8007798:	4619      	mov	r1, r3
 800779a:	6878      	ldr	r0, [r7, #4]
 800779c:	f001 f9bf 	bl	8008b1e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80077a0:	6878      	ldr	r0, [r7, #4]
 80077a2:	f000 fcc2 	bl	800812a <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80077ac:	689b      	ldr	r3, [r3, #8]
 80077ae:	6839      	ldr	r1, [r7, #0]
 80077b0:	6878      	ldr	r0, [r7, #4]
 80077b2:	4798      	blx	r3
 80077b4:	4603      	mov	r3, r0
 80077b6:	73fb      	strb	r3, [r7, #15]
              }
              break;
 80077b8:	e004      	b.n	80077c4 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 80077ba:	6839      	ldr	r1, [r7, #0]
 80077bc:	6878      	ldr	r0, [r7, #4]
 80077be:	f000 fbe9 	bl	8007f94 <USBD_CtlError>
              break;
 80077c2:	e000      	b.n	80077c6 <USBD_StdEPReq+0x154>
              break;
 80077c4:	bf00      	nop
          }
          break;
 80077c6:	e0ab      	b.n	8007920 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80077ce:	b2db      	uxtb	r3, r3
 80077d0:	2b02      	cmp	r3, #2
 80077d2:	d002      	beq.n	80077da <USBD_StdEPReq+0x168>
 80077d4:	2b03      	cmp	r3, #3
 80077d6:	d032      	beq.n	800783e <USBD_StdEPReq+0x1cc>
 80077d8:	e097      	b.n	800790a <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80077da:	7bbb      	ldrb	r3, [r7, #14]
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d007      	beq.n	80077f0 <USBD_StdEPReq+0x17e>
 80077e0:	7bbb      	ldrb	r3, [r7, #14]
 80077e2:	2b80      	cmp	r3, #128	; 0x80
 80077e4:	d004      	beq.n	80077f0 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 80077e6:	6839      	ldr	r1, [r7, #0]
 80077e8:	6878      	ldr	r0, [r7, #4]
 80077ea:	f000 fbd3 	bl	8007f94 <USBD_CtlError>
                break;
 80077ee:	e091      	b.n	8007914 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80077f0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	da0b      	bge.n	8007810 <USBD_StdEPReq+0x19e>
 80077f8:	7bbb      	ldrb	r3, [r7, #14]
 80077fa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80077fe:	4613      	mov	r3, r2
 8007800:	009b      	lsls	r3, r3, #2
 8007802:	4413      	add	r3, r2
 8007804:	009b      	lsls	r3, r3, #2
 8007806:	3310      	adds	r3, #16
 8007808:	687a      	ldr	r2, [r7, #4]
 800780a:	4413      	add	r3, r2
 800780c:	3304      	adds	r3, #4
 800780e:	e00b      	b.n	8007828 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007810:	7bbb      	ldrb	r3, [r7, #14]
 8007812:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007816:	4613      	mov	r3, r2
 8007818:	009b      	lsls	r3, r3, #2
 800781a:	4413      	add	r3, r2
 800781c:	009b      	lsls	r3, r3, #2
 800781e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007822:	687a      	ldr	r2, [r7, #4]
 8007824:	4413      	add	r3, r2
 8007826:	3304      	adds	r3, #4
 8007828:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800782a:	68bb      	ldr	r3, [r7, #8]
 800782c:	2200      	movs	r2, #0
 800782e:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007830:	68bb      	ldr	r3, [r7, #8]
 8007832:	2202      	movs	r2, #2
 8007834:	4619      	mov	r1, r3
 8007836:	6878      	ldr	r0, [r7, #4]
 8007838:	f000 fc1d 	bl	8008076 <USBD_CtlSendData>
              break;
 800783c:	e06a      	b.n	8007914 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800783e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007842:	2b00      	cmp	r3, #0
 8007844:	da11      	bge.n	800786a <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007846:	7bbb      	ldrb	r3, [r7, #14]
 8007848:	f003 020f 	and.w	r2, r3, #15
 800784c:	6879      	ldr	r1, [r7, #4]
 800784e:	4613      	mov	r3, r2
 8007850:	009b      	lsls	r3, r3, #2
 8007852:	4413      	add	r3, r2
 8007854:	009b      	lsls	r3, r3, #2
 8007856:	440b      	add	r3, r1
 8007858:	3324      	adds	r3, #36	; 0x24
 800785a:	881b      	ldrh	r3, [r3, #0]
 800785c:	2b00      	cmp	r3, #0
 800785e:	d117      	bne.n	8007890 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8007860:	6839      	ldr	r1, [r7, #0]
 8007862:	6878      	ldr	r0, [r7, #4]
 8007864:	f000 fb96 	bl	8007f94 <USBD_CtlError>
                  break;
 8007868:	e054      	b.n	8007914 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800786a:	7bbb      	ldrb	r3, [r7, #14]
 800786c:	f003 020f 	and.w	r2, r3, #15
 8007870:	6879      	ldr	r1, [r7, #4]
 8007872:	4613      	mov	r3, r2
 8007874:	009b      	lsls	r3, r3, #2
 8007876:	4413      	add	r3, r2
 8007878:	009b      	lsls	r3, r3, #2
 800787a:	440b      	add	r3, r1
 800787c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007880:	881b      	ldrh	r3, [r3, #0]
 8007882:	2b00      	cmp	r3, #0
 8007884:	d104      	bne.n	8007890 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8007886:	6839      	ldr	r1, [r7, #0]
 8007888:	6878      	ldr	r0, [r7, #4]
 800788a:	f000 fb83 	bl	8007f94 <USBD_CtlError>
                  break;
 800788e:	e041      	b.n	8007914 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007890:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007894:	2b00      	cmp	r3, #0
 8007896:	da0b      	bge.n	80078b0 <USBD_StdEPReq+0x23e>
 8007898:	7bbb      	ldrb	r3, [r7, #14]
 800789a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800789e:	4613      	mov	r3, r2
 80078a0:	009b      	lsls	r3, r3, #2
 80078a2:	4413      	add	r3, r2
 80078a4:	009b      	lsls	r3, r3, #2
 80078a6:	3310      	adds	r3, #16
 80078a8:	687a      	ldr	r2, [r7, #4]
 80078aa:	4413      	add	r3, r2
 80078ac:	3304      	adds	r3, #4
 80078ae:	e00b      	b.n	80078c8 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80078b0:	7bbb      	ldrb	r3, [r7, #14]
 80078b2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80078b6:	4613      	mov	r3, r2
 80078b8:	009b      	lsls	r3, r3, #2
 80078ba:	4413      	add	r3, r2
 80078bc:	009b      	lsls	r3, r3, #2
 80078be:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80078c2:	687a      	ldr	r2, [r7, #4]
 80078c4:	4413      	add	r3, r2
 80078c6:	3304      	adds	r3, #4
 80078c8:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80078ca:	7bbb      	ldrb	r3, [r7, #14]
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d002      	beq.n	80078d6 <USBD_StdEPReq+0x264>
 80078d0:	7bbb      	ldrb	r3, [r7, #14]
 80078d2:	2b80      	cmp	r3, #128	; 0x80
 80078d4:	d103      	bne.n	80078de <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 80078d6:	68bb      	ldr	r3, [r7, #8]
 80078d8:	2200      	movs	r2, #0
 80078da:	601a      	str	r2, [r3, #0]
 80078dc:	e00e      	b.n	80078fc <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80078de:	7bbb      	ldrb	r3, [r7, #14]
 80078e0:	4619      	mov	r1, r3
 80078e2:	6878      	ldr	r0, [r7, #4]
 80078e4:	f001 f93a 	bl	8008b5c <USBD_LL_IsStallEP>
 80078e8:	4603      	mov	r3, r0
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d003      	beq.n	80078f6 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 80078ee:	68bb      	ldr	r3, [r7, #8]
 80078f0:	2201      	movs	r2, #1
 80078f2:	601a      	str	r2, [r3, #0]
 80078f4:	e002      	b.n	80078fc <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 80078f6:	68bb      	ldr	r3, [r7, #8]
 80078f8:	2200      	movs	r2, #0
 80078fa:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80078fc:	68bb      	ldr	r3, [r7, #8]
 80078fe:	2202      	movs	r2, #2
 8007900:	4619      	mov	r1, r3
 8007902:	6878      	ldr	r0, [r7, #4]
 8007904:	f000 fbb7 	bl	8008076 <USBD_CtlSendData>
              break;
 8007908:	e004      	b.n	8007914 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800790a:	6839      	ldr	r1, [r7, #0]
 800790c:	6878      	ldr	r0, [r7, #4]
 800790e:	f000 fb41 	bl	8007f94 <USBD_CtlError>
              break;
 8007912:	bf00      	nop
          }
          break;
 8007914:	e004      	b.n	8007920 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8007916:	6839      	ldr	r1, [r7, #0]
 8007918:	6878      	ldr	r0, [r7, #4]
 800791a:	f000 fb3b 	bl	8007f94 <USBD_CtlError>
          break;
 800791e:	bf00      	nop
      }
      break;
 8007920:	e004      	b.n	800792c <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8007922:	6839      	ldr	r1, [r7, #0]
 8007924:	6878      	ldr	r0, [r7, #4]
 8007926:	f000 fb35 	bl	8007f94 <USBD_CtlError>
      break;
 800792a:	bf00      	nop
  }

  return ret;
 800792c:	7bfb      	ldrb	r3, [r7, #15]
}
 800792e:	4618      	mov	r0, r3
 8007930:	3710      	adds	r7, #16
 8007932:	46bd      	mov	sp, r7
 8007934:	bd80      	pop	{r7, pc}
	...

08007938 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007938:	b580      	push	{r7, lr}
 800793a:	b084      	sub	sp, #16
 800793c:	af00      	add	r7, sp, #0
 800793e:	6078      	str	r0, [r7, #4]
 8007940:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007942:	2300      	movs	r3, #0
 8007944:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007946:	2300      	movs	r3, #0
 8007948:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800794a:	2300      	movs	r3, #0
 800794c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800794e:	683b      	ldr	r3, [r7, #0]
 8007950:	885b      	ldrh	r3, [r3, #2]
 8007952:	0a1b      	lsrs	r3, r3, #8
 8007954:	b29b      	uxth	r3, r3
 8007956:	3b01      	subs	r3, #1
 8007958:	2b06      	cmp	r3, #6
 800795a:	f200 8128 	bhi.w	8007bae <USBD_GetDescriptor+0x276>
 800795e:	a201      	add	r2, pc, #4	; (adr r2, 8007964 <USBD_GetDescriptor+0x2c>)
 8007960:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007964:	08007981 	.word	0x08007981
 8007968:	08007999 	.word	0x08007999
 800796c:	080079d9 	.word	0x080079d9
 8007970:	08007baf 	.word	0x08007baf
 8007974:	08007baf 	.word	0x08007baf
 8007978:	08007b4f 	.word	0x08007b4f
 800797c:	08007b7b 	.word	0x08007b7b
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	687a      	ldr	r2, [r7, #4]
 800798a:	7c12      	ldrb	r2, [r2, #16]
 800798c:	f107 0108 	add.w	r1, r7, #8
 8007990:	4610      	mov	r0, r2
 8007992:	4798      	blx	r3
 8007994:	60f8      	str	r0, [r7, #12]
      break;
 8007996:	e112      	b.n	8007bbe <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	7c1b      	ldrb	r3, [r3, #16]
 800799c:	2b00      	cmp	r3, #0
 800799e:	d10d      	bne.n	80079bc <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80079a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079a8:	f107 0208 	add.w	r2, r7, #8
 80079ac:	4610      	mov	r0, r2
 80079ae:	4798      	blx	r3
 80079b0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	3301      	adds	r3, #1
 80079b6:	2202      	movs	r2, #2
 80079b8:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80079ba:	e100      	b.n	8007bbe <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80079c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079c4:	f107 0208 	add.w	r2, r7, #8
 80079c8:	4610      	mov	r0, r2
 80079ca:	4798      	blx	r3
 80079cc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	3301      	adds	r3, #1
 80079d2:	2202      	movs	r2, #2
 80079d4:	701a      	strb	r2, [r3, #0]
      break;
 80079d6:	e0f2      	b.n	8007bbe <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80079d8:	683b      	ldr	r3, [r7, #0]
 80079da:	885b      	ldrh	r3, [r3, #2]
 80079dc:	b2db      	uxtb	r3, r3
 80079de:	2b05      	cmp	r3, #5
 80079e0:	f200 80ac 	bhi.w	8007b3c <USBD_GetDescriptor+0x204>
 80079e4:	a201      	add	r2, pc, #4	; (adr r2, 80079ec <USBD_GetDescriptor+0xb4>)
 80079e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079ea:	bf00      	nop
 80079ec:	08007a05 	.word	0x08007a05
 80079f0:	08007a39 	.word	0x08007a39
 80079f4:	08007a6d 	.word	0x08007a6d
 80079f8:	08007aa1 	.word	0x08007aa1
 80079fc:	08007ad5 	.word	0x08007ad5
 8007a00:	08007b09 	.word	0x08007b09
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a0a:	685b      	ldr	r3, [r3, #4]
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d00b      	beq.n	8007a28 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a16:	685b      	ldr	r3, [r3, #4]
 8007a18:	687a      	ldr	r2, [r7, #4]
 8007a1a:	7c12      	ldrb	r2, [r2, #16]
 8007a1c:	f107 0108 	add.w	r1, r7, #8
 8007a20:	4610      	mov	r0, r2
 8007a22:	4798      	blx	r3
 8007a24:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007a26:	e091      	b.n	8007b4c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007a28:	6839      	ldr	r1, [r7, #0]
 8007a2a:	6878      	ldr	r0, [r7, #4]
 8007a2c:	f000 fab2 	bl	8007f94 <USBD_CtlError>
            err++;
 8007a30:	7afb      	ldrb	r3, [r7, #11]
 8007a32:	3301      	adds	r3, #1
 8007a34:	72fb      	strb	r3, [r7, #11]
          break;
 8007a36:	e089      	b.n	8007b4c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a3e:	689b      	ldr	r3, [r3, #8]
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d00b      	beq.n	8007a5c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a4a:	689b      	ldr	r3, [r3, #8]
 8007a4c:	687a      	ldr	r2, [r7, #4]
 8007a4e:	7c12      	ldrb	r2, [r2, #16]
 8007a50:	f107 0108 	add.w	r1, r7, #8
 8007a54:	4610      	mov	r0, r2
 8007a56:	4798      	blx	r3
 8007a58:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007a5a:	e077      	b.n	8007b4c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007a5c:	6839      	ldr	r1, [r7, #0]
 8007a5e:	6878      	ldr	r0, [r7, #4]
 8007a60:	f000 fa98 	bl	8007f94 <USBD_CtlError>
            err++;
 8007a64:	7afb      	ldrb	r3, [r7, #11]
 8007a66:	3301      	adds	r3, #1
 8007a68:	72fb      	strb	r3, [r7, #11]
          break;
 8007a6a:	e06f      	b.n	8007b4c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a72:	68db      	ldr	r3, [r3, #12]
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d00b      	beq.n	8007a90 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a7e:	68db      	ldr	r3, [r3, #12]
 8007a80:	687a      	ldr	r2, [r7, #4]
 8007a82:	7c12      	ldrb	r2, [r2, #16]
 8007a84:	f107 0108 	add.w	r1, r7, #8
 8007a88:	4610      	mov	r0, r2
 8007a8a:	4798      	blx	r3
 8007a8c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007a8e:	e05d      	b.n	8007b4c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007a90:	6839      	ldr	r1, [r7, #0]
 8007a92:	6878      	ldr	r0, [r7, #4]
 8007a94:	f000 fa7e 	bl	8007f94 <USBD_CtlError>
            err++;
 8007a98:	7afb      	ldrb	r3, [r7, #11]
 8007a9a:	3301      	adds	r3, #1
 8007a9c:	72fb      	strb	r3, [r7, #11]
          break;
 8007a9e:	e055      	b.n	8007b4c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007aa6:	691b      	ldr	r3, [r3, #16]
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d00b      	beq.n	8007ac4 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007ab2:	691b      	ldr	r3, [r3, #16]
 8007ab4:	687a      	ldr	r2, [r7, #4]
 8007ab6:	7c12      	ldrb	r2, [r2, #16]
 8007ab8:	f107 0108 	add.w	r1, r7, #8
 8007abc:	4610      	mov	r0, r2
 8007abe:	4798      	blx	r3
 8007ac0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007ac2:	e043      	b.n	8007b4c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007ac4:	6839      	ldr	r1, [r7, #0]
 8007ac6:	6878      	ldr	r0, [r7, #4]
 8007ac8:	f000 fa64 	bl	8007f94 <USBD_CtlError>
            err++;
 8007acc:	7afb      	ldrb	r3, [r7, #11]
 8007ace:	3301      	adds	r3, #1
 8007ad0:	72fb      	strb	r3, [r7, #11]
          break;
 8007ad2:	e03b      	b.n	8007b4c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007ada:	695b      	ldr	r3, [r3, #20]
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d00b      	beq.n	8007af8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007ae6:	695b      	ldr	r3, [r3, #20]
 8007ae8:	687a      	ldr	r2, [r7, #4]
 8007aea:	7c12      	ldrb	r2, [r2, #16]
 8007aec:	f107 0108 	add.w	r1, r7, #8
 8007af0:	4610      	mov	r0, r2
 8007af2:	4798      	blx	r3
 8007af4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007af6:	e029      	b.n	8007b4c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007af8:	6839      	ldr	r1, [r7, #0]
 8007afa:	6878      	ldr	r0, [r7, #4]
 8007afc:	f000 fa4a 	bl	8007f94 <USBD_CtlError>
            err++;
 8007b00:	7afb      	ldrb	r3, [r7, #11]
 8007b02:	3301      	adds	r3, #1
 8007b04:	72fb      	strb	r3, [r7, #11]
          break;
 8007b06:	e021      	b.n	8007b4c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007b0e:	699b      	ldr	r3, [r3, #24]
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d00b      	beq.n	8007b2c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007b1a:	699b      	ldr	r3, [r3, #24]
 8007b1c:	687a      	ldr	r2, [r7, #4]
 8007b1e:	7c12      	ldrb	r2, [r2, #16]
 8007b20:	f107 0108 	add.w	r1, r7, #8
 8007b24:	4610      	mov	r0, r2
 8007b26:	4798      	blx	r3
 8007b28:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007b2a:	e00f      	b.n	8007b4c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007b2c:	6839      	ldr	r1, [r7, #0]
 8007b2e:	6878      	ldr	r0, [r7, #4]
 8007b30:	f000 fa30 	bl	8007f94 <USBD_CtlError>
            err++;
 8007b34:	7afb      	ldrb	r3, [r7, #11]
 8007b36:	3301      	adds	r3, #1
 8007b38:	72fb      	strb	r3, [r7, #11]
          break;
 8007b3a:	e007      	b.n	8007b4c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8007b3c:	6839      	ldr	r1, [r7, #0]
 8007b3e:	6878      	ldr	r0, [r7, #4]
 8007b40:	f000 fa28 	bl	8007f94 <USBD_CtlError>
          err++;
 8007b44:	7afb      	ldrb	r3, [r7, #11]
 8007b46:	3301      	adds	r3, #1
 8007b48:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8007b4a:	bf00      	nop
      }
      break;
 8007b4c:	e037      	b.n	8007bbe <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	7c1b      	ldrb	r3, [r3, #16]
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d109      	bne.n	8007b6a <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b5e:	f107 0208 	add.w	r2, r7, #8
 8007b62:	4610      	mov	r0, r2
 8007b64:	4798      	blx	r3
 8007b66:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007b68:	e029      	b.n	8007bbe <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007b6a:	6839      	ldr	r1, [r7, #0]
 8007b6c:	6878      	ldr	r0, [r7, #4]
 8007b6e:	f000 fa11 	bl	8007f94 <USBD_CtlError>
        err++;
 8007b72:	7afb      	ldrb	r3, [r7, #11]
 8007b74:	3301      	adds	r3, #1
 8007b76:	72fb      	strb	r3, [r7, #11]
      break;
 8007b78:	e021      	b.n	8007bbe <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	7c1b      	ldrb	r3, [r3, #16]
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d10d      	bne.n	8007b9e <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b8a:	f107 0208 	add.w	r2, r7, #8
 8007b8e:	4610      	mov	r0, r2
 8007b90:	4798      	blx	r3
 8007b92:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	3301      	adds	r3, #1
 8007b98:	2207      	movs	r2, #7
 8007b9a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007b9c:	e00f      	b.n	8007bbe <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007b9e:	6839      	ldr	r1, [r7, #0]
 8007ba0:	6878      	ldr	r0, [r7, #4]
 8007ba2:	f000 f9f7 	bl	8007f94 <USBD_CtlError>
        err++;
 8007ba6:	7afb      	ldrb	r3, [r7, #11]
 8007ba8:	3301      	adds	r3, #1
 8007baa:	72fb      	strb	r3, [r7, #11]
      break;
 8007bac:	e007      	b.n	8007bbe <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007bae:	6839      	ldr	r1, [r7, #0]
 8007bb0:	6878      	ldr	r0, [r7, #4]
 8007bb2:	f000 f9ef 	bl	8007f94 <USBD_CtlError>
      err++;
 8007bb6:	7afb      	ldrb	r3, [r7, #11]
 8007bb8:	3301      	adds	r3, #1
 8007bba:	72fb      	strb	r3, [r7, #11]
      break;
 8007bbc:	bf00      	nop
  }

  if (err != 0U)
 8007bbe:	7afb      	ldrb	r3, [r7, #11]
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d11e      	bne.n	8007c02 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8007bc4:	683b      	ldr	r3, [r7, #0]
 8007bc6:	88db      	ldrh	r3, [r3, #6]
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d016      	beq.n	8007bfa <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8007bcc:	893b      	ldrh	r3, [r7, #8]
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d00e      	beq.n	8007bf0 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8007bd2:	683b      	ldr	r3, [r7, #0]
 8007bd4:	88da      	ldrh	r2, [r3, #6]
 8007bd6:	893b      	ldrh	r3, [r7, #8]
 8007bd8:	4293      	cmp	r3, r2
 8007bda:	bf28      	it	cs
 8007bdc:	4613      	movcs	r3, r2
 8007bde:	b29b      	uxth	r3, r3
 8007be0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007be2:	893b      	ldrh	r3, [r7, #8]
 8007be4:	461a      	mov	r2, r3
 8007be6:	68f9      	ldr	r1, [r7, #12]
 8007be8:	6878      	ldr	r0, [r7, #4]
 8007bea:	f000 fa44 	bl	8008076 <USBD_CtlSendData>
 8007bee:	e009      	b.n	8007c04 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8007bf0:	6839      	ldr	r1, [r7, #0]
 8007bf2:	6878      	ldr	r0, [r7, #4]
 8007bf4:	f000 f9ce 	bl	8007f94 <USBD_CtlError>
 8007bf8:	e004      	b.n	8007c04 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8007bfa:	6878      	ldr	r0, [r7, #4]
 8007bfc:	f000 fa95 	bl	800812a <USBD_CtlSendStatus>
 8007c00:	e000      	b.n	8007c04 <USBD_GetDescriptor+0x2cc>
    return;
 8007c02:	bf00      	nop
  }
}
 8007c04:	3710      	adds	r7, #16
 8007c06:	46bd      	mov	sp, r7
 8007c08:	bd80      	pop	{r7, pc}
 8007c0a:	bf00      	nop

08007c0c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007c0c:	b580      	push	{r7, lr}
 8007c0e:	b084      	sub	sp, #16
 8007c10:	af00      	add	r7, sp, #0
 8007c12:	6078      	str	r0, [r7, #4]
 8007c14:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007c16:	683b      	ldr	r3, [r7, #0]
 8007c18:	889b      	ldrh	r3, [r3, #4]
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d131      	bne.n	8007c82 <USBD_SetAddress+0x76>
 8007c1e:	683b      	ldr	r3, [r7, #0]
 8007c20:	88db      	ldrh	r3, [r3, #6]
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d12d      	bne.n	8007c82 <USBD_SetAddress+0x76>
 8007c26:	683b      	ldr	r3, [r7, #0]
 8007c28:	885b      	ldrh	r3, [r3, #2]
 8007c2a:	2b7f      	cmp	r3, #127	; 0x7f
 8007c2c:	d829      	bhi.n	8007c82 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007c2e:	683b      	ldr	r3, [r7, #0]
 8007c30:	885b      	ldrh	r3, [r3, #2]
 8007c32:	b2db      	uxtb	r3, r3
 8007c34:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007c38:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c40:	b2db      	uxtb	r3, r3
 8007c42:	2b03      	cmp	r3, #3
 8007c44:	d104      	bne.n	8007c50 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8007c46:	6839      	ldr	r1, [r7, #0]
 8007c48:	6878      	ldr	r0, [r7, #4]
 8007c4a:	f000 f9a3 	bl	8007f94 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007c4e:	e01d      	b.n	8007c8c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	7bfa      	ldrb	r2, [r7, #15]
 8007c54:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007c58:	7bfb      	ldrb	r3, [r7, #15]
 8007c5a:	4619      	mov	r1, r3
 8007c5c:	6878      	ldr	r0, [r7, #4]
 8007c5e:	f000 ffa9 	bl	8008bb4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8007c62:	6878      	ldr	r0, [r7, #4]
 8007c64:	f000 fa61 	bl	800812a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007c68:	7bfb      	ldrb	r3, [r7, #15]
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d004      	beq.n	8007c78 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	2202      	movs	r2, #2
 8007c72:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007c76:	e009      	b.n	8007c8c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	2201      	movs	r2, #1
 8007c7c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007c80:	e004      	b.n	8007c8c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007c82:	6839      	ldr	r1, [r7, #0]
 8007c84:	6878      	ldr	r0, [r7, #4]
 8007c86:	f000 f985 	bl	8007f94 <USBD_CtlError>
  }
}
 8007c8a:	bf00      	nop
 8007c8c:	bf00      	nop
 8007c8e:	3710      	adds	r7, #16
 8007c90:	46bd      	mov	sp, r7
 8007c92:	bd80      	pop	{r7, pc}

08007c94 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007c94:	b580      	push	{r7, lr}
 8007c96:	b084      	sub	sp, #16
 8007c98:	af00      	add	r7, sp, #0
 8007c9a:	6078      	str	r0, [r7, #4]
 8007c9c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007c9e:	2300      	movs	r3, #0
 8007ca0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007ca2:	683b      	ldr	r3, [r7, #0]
 8007ca4:	885b      	ldrh	r3, [r3, #2]
 8007ca6:	b2da      	uxtb	r2, r3
 8007ca8:	4b4c      	ldr	r3, [pc, #304]	; (8007ddc <USBD_SetConfig+0x148>)
 8007caa:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007cac:	4b4b      	ldr	r3, [pc, #300]	; (8007ddc <USBD_SetConfig+0x148>)
 8007cae:	781b      	ldrb	r3, [r3, #0]
 8007cb0:	2b01      	cmp	r3, #1
 8007cb2:	d905      	bls.n	8007cc0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007cb4:	6839      	ldr	r1, [r7, #0]
 8007cb6:	6878      	ldr	r0, [r7, #4]
 8007cb8:	f000 f96c 	bl	8007f94 <USBD_CtlError>
    return USBD_FAIL;
 8007cbc:	2303      	movs	r3, #3
 8007cbe:	e088      	b.n	8007dd2 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007cc6:	b2db      	uxtb	r3, r3
 8007cc8:	2b02      	cmp	r3, #2
 8007cca:	d002      	beq.n	8007cd2 <USBD_SetConfig+0x3e>
 8007ccc:	2b03      	cmp	r3, #3
 8007cce:	d025      	beq.n	8007d1c <USBD_SetConfig+0x88>
 8007cd0:	e071      	b.n	8007db6 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8007cd2:	4b42      	ldr	r3, [pc, #264]	; (8007ddc <USBD_SetConfig+0x148>)
 8007cd4:	781b      	ldrb	r3, [r3, #0]
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d01c      	beq.n	8007d14 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8007cda:	4b40      	ldr	r3, [pc, #256]	; (8007ddc <USBD_SetConfig+0x148>)
 8007cdc:	781b      	ldrb	r3, [r3, #0]
 8007cde:	461a      	mov	r2, r3
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007ce4:	4b3d      	ldr	r3, [pc, #244]	; (8007ddc <USBD_SetConfig+0x148>)
 8007ce6:	781b      	ldrb	r3, [r3, #0]
 8007ce8:	4619      	mov	r1, r3
 8007cea:	6878      	ldr	r0, [r7, #4]
 8007cec:	f7ff f948 	bl	8006f80 <USBD_SetClassConfig>
 8007cf0:	4603      	mov	r3, r0
 8007cf2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8007cf4:	7bfb      	ldrb	r3, [r7, #15]
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d004      	beq.n	8007d04 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8007cfa:	6839      	ldr	r1, [r7, #0]
 8007cfc:	6878      	ldr	r0, [r7, #4]
 8007cfe:	f000 f949 	bl	8007f94 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007d02:	e065      	b.n	8007dd0 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8007d04:	6878      	ldr	r0, [r7, #4]
 8007d06:	f000 fa10 	bl	800812a <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	2203      	movs	r2, #3
 8007d0e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007d12:	e05d      	b.n	8007dd0 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8007d14:	6878      	ldr	r0, [r7, #4]
 8007d16:	f000 fa08 	bl	800812a <USBD_CtlSendStatus>
      break;
 8007d1a:	e059      	b.n	8007dd0 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8007d1c:	4b2f      	ldr	r3, [pc, #188]	; (8007ddc <USBD_SetConfig+0x148>)
 8007d1e:	781b      	ldrb	r3, [r3, #0]
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d112      	bne.n	8007d4a <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	2202      	movs	r2, #2
 8007d28:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8007d2c:	4b2b      	ldr	r3, [pc, #172]	; (8007ddc <USBD_SetConfig+0x148>)
 8007d2e:	781b      	ldrb	r3, [r3, #0]
 8007d30:	461a      	mov	r2, r3
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007d36:	4b29      	ldr	r3, [pc, #164]	; (8007ddc <USBD_SetConfig+0x148>)
 8007d38:	781b      	ldrb	r3, [r3, #0]
 8007d3a:	4619      	mov	r1, r3
 8007d3c:	6878      	ldr	r0, [r7, #4]
 8007d3e:	f7ff f93b 	bl	8006fb8 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8007d42:	6878      	ldr	r0, [r7, #4]
 8007d44:	f000 f9f1 	bl	800812a <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007d48:	e042      	b.n	8007dd0 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8007d4a:	4b24      	ldr	r3, [pc, #144]	; (8007ddc <USBD_SetConfig+0x148>)
 8007d4c:	781b      	ldrb	r3, [r3, #0]
 8007d4e:	461a      	mov	r2, r3
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	685b      	ldr	r3, [r3, #4]
 8007d54:	429a      	cmp	r2, r3
 8007d56:	d02a      	beq.n	8007dae <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	685b      	ldr	r3, [r3, #4]
 8007d5c:	b2db      	uxtb	r3, r3
 8007d5e:	4619      	mov	r1, r3
 8007d60:	6878      	ldr	r0, [r7, #4]
 8007d62:	f7ff f929 	bl	8006fb8 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8007d66:	4b1d      	ldr	r3, [pc, #116]	; (8007ddc <USBD_SetConfig+0x148>)
 8007d68:	781b      	ldrb	r3, [r3, #0]
 8007d6a:	461a      	mov	r2, r3
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007d70:	4b1a      	ldr	r3, [pc, #104]	; (8007ddc <USBD_SetConfig+0x148>)
 8007d72:	781b      	ldrb	r3, [r3, #0]
 8007d74:	4619      	mov	r1, r3
 8007d76:	6878      	ldr	r0, [r7, #4]
 8007d78:	f7ff f902 	bl	8006f80 <USBD_SetClassConfig>
 8007d7c:	4603      	mov	r3, r0
 8007d7e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8007d80:	7bfb      	ldrb	r3, [r7, #15]
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d00f      	beq.n	8007da6 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8007d86:	6839      	ldr	r1, [r7, #0]
 8007d88:	6878      	ldr	r0, [r7, #4]
 8007d8a:	f000 f903 	bl	8007f94 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	685b      	ldr	r3, [r3, #4]
 8007d92:	b2db      	uxtb	r3, r3
 8007d94:	4619      	mov	r1, r3
 8007d96:	6878      	ldr	r0, [r7, #4]
 8007d98:	f7ff f90e 	bl	8006fb8 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	2202      	movs	r2, #2
 8007da0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007da4:	e014      	b.n	8007dd0 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8007da6:	6878      	ldr	r0, [r7, #4]
 8007da8:	f000 f9bf 	bl	800812a <USBD_CtlSendStatus>
      break;
 8007dac:	e010      	b.n	8007dd0 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8007dae:	6878      	ldr	r0, [r7, #4]
 8007db0:	f000 f9bb 	bl	800812a <USBD_CtlSendStatus>
      break;
 8007db4:	e00c      	b.n	8007dd0 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8007db6:	6839      	ldr	r1, [r7, #0]
 8007db8:	6878      	ldr	r0, [r7, #4]
 8007dba:	f000 f8eb 	bl	8007f94 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007dbe:	4b07      	ldr	r3, [pc, #28]	; (8007ddc <USBD_SetConfig+0x148>)
 8007dc0:	781b      	ldrb	r3, [r3, #0]
 8007dc2:	4619      	mov	r1, r3
 8007dc4:	6878      	ldr	r0, [r7, #4]
 8007dc6:	f7ff f8f7 	bl	8006fb8 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8007dca:	2303      	movs	r3, #3
 8007dcc:	73fb      	strb	r3, [r7, #15]
      break;
 8007dce:	bf00      	nop
  }

  return ret;
 8007dd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007dd2:	4618      	mov	r0, r3
 8007dd4:	3710      	adds	r7, #16
 8007dd6:	46bd      	mov	sp, r7
 8007dd8:	bd80      	pop	{r7, pc}
 8007dda:	bf00      	nop
 8007ddc:	200003b4 	.word	0x200003b4

08007de0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007de0:	b580      	push	{r7, lr}
 8007de2:	b082      	sub	sp, #8
 8007de4:	af00      	add	r7, sp, #0
 8007de6:	6078      	str	r0, [r7, #4]
 8007de8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007dea:	683b      	ldr	r3, [r7, #0]
 8007dec:	88db      	ldrh	r3, [r3, #6]
 8007dee:	2b01      	cmp	r3, #1
 8007df0:	d004      	beq.n	8007dfc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007df2:	6839      	ldr	r1, [r7, #0]
 8007df4:	6878      	ldr	r0, [r7, #4]
 8007df6:	f000 f8cd 	bl	8007f94 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007dfa:	e023      	b.n	8007e44 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e02:	b2db      	uxtb	r3, r3
 8007e04:	2b02      	cmp	r3, #2
 8007e06:	dc02      	bgt.n	8007e0e <USBD_GetConfig+0x2e>
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	dc03      	bgt.n	8007e14 <USBD_GetConfig+0x34>
 8007e0c:	e015      	b.n	8007e3a <USBD_GetConfig+0x5a>
 8007e0e:	2b03      	cmp	r3, #3
 8007e10:	d00b      	beq.n	8007e2a <USBD_GetConfig+0x4a>
 8007e12:	e012      	b.n	8007e3a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	2200      	movs	r2, #0
 8007e18:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	3308      	adds	r3, #8
 8007e1e:	2201      	movs	r2, #1
 8007e20:	4619      	mov	r1, r3
 8007e22:	6878      	ldr	r0, [r7, #4]
 8007e24:	f000 f927 	bl	8008076 <USBD_CtlSendData>
        break;
 8007e28:	e00c      	b.n	8007e44 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	3304      	adds	r3, #4
 8007e2e:	2201      	movs	r2, #1
 8007e30:	4619      	mov	r1, r3
 8007e32:	6878      	ldr	r0, [r7, #4]
 8007e34:	f000 f91f 	bl	8008076 <USBD_CtlSendData>
        break;
 8007e38:	e004      	b.n	8007e44 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8007e3a:	6839      	ldr	r1, [r7, #0]
 8007e3c:	6878      	ldr	r0, [r7, #4]
 8007e3e:	f000 f8a9 	bl	8007f94 <USBD_CtlError>
        break;
 8007e42:	bf00      	nop
}
 8007e44:	bf00      	nop
 8007e46:	3708      	adds	r7, #8
 8007e48:	46bd      	mov	sp, r7
 8007e4a:	bd80      	pop	{r7, pc}

08007e4c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007e4c:	b580      	push	{r7, lr}
 8007e4e:	b082      	sub	sp, #8
 8007e50:	af00      	add	r7, sp, #0
 8007e52:	6078      	str	r0, [r7, #4]
 8007e54:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e5c:	b2db      	uxtb	r3, r3
 8007e5e:	3b01      	subs	r3, #1
 8007e60:	2b02      	cmp	r3, #2
 8007e62:	d81e      	bhi.n	8007ea2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007e64:	683b      	ldr	r3, [r7, #0]
 8007e66:	88db      	ldrh	r3, [r3, #6]
 8007e68:	2b02      	cmp	r3, #2
 8007e6a:	d004      	beq.n	8007e76 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8007e6c:	6839      	ldr	r1, [r7, #0]
 8007e6e:	6878      	ldr	r0, [r7, #4]
 8007e70:	f000 f890 	bl	8007f94 <USBD_CtlError>
        break;
 8007e74:	e01a      	b.n	8007eac <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	2201      	movs	r2, #1
 8007e7a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d005      	beq.n	8007e92 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	68db      	ldr	r3, [r3, #12]
 8007e8a:	f043 0202 	orr.w	r2, r3, #2
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	330c      	adds	r3, #12
 8007e96:	2202      	movs	r2, #2
 8007e98:	4619      	mov	r1, r3
 8007e9a:	6878      	ldr	r0, [r7, #4]
 8007e9c:	f000 f8eb 	bl	8008076 <USBD_CtlSendData>
      break;
 8007ea0:	e004      	b.n	8007eac <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8007ea2:	6839      	ldr	r1, [r7, #0]
 8007ea4:	6878      	ldr	r0, [r7, #4]
 8007ea6:	f000 f875 	bl	8007f94 <USBD_CtlError>
      break;
 8007eaa:	bf00      	nop
  }
}
 8007eac:	bf00      	nop
 8007eae:	3708      	adds	r7, #8
 8007eb0:	46bd      	mov	sp, r7
 8007eb2:	bd80      	pop	{r7, pc}

08007eb4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007eb4:	b580      	push	{r7, lr}
 8007eb6:	b082      	sub	sp, #8
 8007eb8:	af00      	add	r7, sp, #0
 8007eba:	6078      	str	r0, [r7, #4]
 8007ebc:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007ebe:	683b      	ldr	r3, [r7, #0]
 8007ec0:	885b      	ldrh	r3, [r3, #2]
 8007ec2:	2b01      	cmp	r3, #1
 8007ec4:	d106      	bne.n	8007ed4 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	2201      	movs	r2, #1
 8007eca:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8007ece:	6878      	ldr	r0, [r7, #4]
 8007ed0:	f000 f92b 	bl	800812a <USBD_CtlSendStatus>
  }
}
 8007ed4:	bf00      	nop
 8007ed6:	3708      	adds	r7, #8
 8007ed8:	46bd      	mov	sp, r7
 8007eda:	bd80      	pop	{r7, pc}

08007edc <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007edc:	b580      	push	{r7, lr}
 8007ede:	b082      	sub	sp, #8
 8007ee0:	af00      	add	r7, sp, #0
 8007ee2:	6078      	str	r0, [r7, #4]
 8007ee4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007eec:	b2db      	uxtb	r3, r3
 8007eee:	3b01      	subs	r3, #1
 8007ef0:	2b02      	cmp	r3, #2
 8007ef2:	d80b      	bhi.n	8007f0c <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007ef4:	683b      	ldr	r3, [r7, #0]
 8007ef6:	885b      	ldrh	r3, [r3, #2]
 8007ef8:	2b01      	cmp	r3, #1
 8007efa:	d10c      	bne.n	8007f16 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	2200      	movs	r2, #0
 8007f00:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8007f04:	6878      	ldr	r0, [r7, #4]
 8007f06:	f000 f910 	bl	800812a <USBD_CtlSendStatus>
      }
      break;
 8007f0a:	e004      	b.n	8007f16 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8007f0c:	6839      	ldr	r1, [r7, #0]
 8007f0e:	6878      	ldr	r0, [r7, #4]
 8007f10:	f000 f840 	bl	8007f94 <USBD_CtlError>
      break;
 8007f14:	e000      	b.n	8007f18 <USBD_ClrFeature+0x3c>
      break;
 8007f16:	bf00      	nop
  }
}
 8007f18:	bf00      	nop
 8007f1a:	3708      	adds	r7, #8
 8007f1c:	46bd      	mov	sp, r7
 8007f1e:	bd80      	pop	{r7, pc}

08007f20 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007f20:	b580      	push	{r7, lr}
 8007f22:	b084      	sub	sp, #16
 8007f24:	af00      	add	r7, sp, #0
 8007f26:	6078      	str	r0, [r7, #4]
 8007f28:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8007f2a:	683b      	ldr	r3, [r7, #0]
 8007f2c:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	781a      	ldrb	r2, [r3, #0]
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	3301      	adds	r3, #1
 8007f3a:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	781a      	ldrb	r2, [r3, #0]
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	3301      	adds	r3, #1
 8007f48:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8007f4a:	68f8      	ldr	r0, [r7, #12]
 8007f4c:	f7ff fabb 	bl	80074c6 <SWAPBYTE>
 8007f50:	4603      	mov	r3, r0
 8007f52:	461a      	mov	r2, r3
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	3301      	adds	r3, #1
 8007f5c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	3301      	adds	r3, #1
 8007f62:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8007f64:	68f8      	ldr	r0, [r7, #12]
 8007f66:	f7ff faae 	bl	80074c6 <SWAPBYTE>
 8007f6a:	4603      	mov	r3, r0
 8007f6c:	461a      	mov	r2, r3
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	3301      	adds	r3, #1
 8007f76:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	3301      	adds	r3, #1
 8007f7c:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007f7e:	68f8      	ldr	r0, [r7, #12]
 8007f80:	f7ff faa1 	bl	80074c6 <SWAPBYTE>
 8007f84:	4603      	mov	r3, r0
 8007f86:	461a      	mov	r2, r3
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	80da      	strh	r2, [r3, #6]
}
 8007f8c:	bf00      	nop
 8007f8e:	3710      	adds	r7, #16
 8007f90:	46bd      	mov	sp, r7
 8007f92:	bd80      	pop	{r7, pc}

08007f94 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007f94:	b580      	push	{r7, lr}
 8007f96:	b082      	sub	sp, #8
 8007f98:	af00      	add	r7, sp, #0
 8007f9a:	6078      	str	r0, [r7, #4]
 8007f9c:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007f9e:	2180      	movs	r1, #128	; 0x80
 8007fa0:	6878      	ldr	r0, [r7, #4]
 8007fa2:	f000 fd9d 	bl	8008ae0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007fa6:	2100      	movs	r1, #0
 8007fa8:	6878      	ldr	r0, [r7, #4]
 8007faa:	f000 fd99 	bl	8008ae0 <USBD_LL_StallEP>
}
 8007fae:	bf00      	nop
 8007fb0:	3708      	adds	r7, #8
 8007fb2:	46bd      	mov	sp, r7
 8007fb4:	bd80      	pop	{r7, pc}

08007fb6 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007fb6:	b580      	push	{r7, lr}
 8007fb8:	b086      	sub	sp, #24
 8007fba:	af00      	add	r7, sp, #0
 8007fbc:	60f8      	str	r0, [r7, #12]
 8007fbe:	60b9      	str	r1, [r7, #8]
 8007fc0:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007fc2:	2300      	movs	r3, #0
 8007fc4:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d036      	beq.n	800803a <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8007fd0:	6938      	ldr	r0, [r7, #16]
 8007fd2:	f000 f836 	bl	8008042 <USBD_GetLen>
 8007fd6:	4603      	mov	r3, r0
 8007fd8:	3301      	adds	r3, #1
 8007fda:	b29b      	uxth	r3, r3
 8007fdc:	005b      	lsls	r3, r3, #1
 8007fde:	b29a      	uxth	r2, r3
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8007fe4:	7dfb      	ldrb	r3, [r7, #23]
 8007fe6:	68ba      	ldr	r2, [r7, #8]
 8007fe8:	4413      	add	r3, r2
 8007fea:	687a      	ldr	r2, [r7, #4]
 8007fec:	7812      	ldrb	r2, [r2, #0]
 8007fee:	701a      	strb	r2, [r3, #0]
  idx++;
 8007ff0:	7dfb      	ldrb	r3, [r7, #23]
 8007ff2:	3301      	adds	r3, #1
 8007ff4:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8007ff6:	7dfb      	ldrb	r3, [r7, #23]
 8007ff8:	68ba      	ldr	r2, [r7, #8]
 8007ffa:	4413      	add	r3, r2
 8007ffc:	2203      	movs	r2, #3
 8007ffe:	701a      	strb	r2, [r3, #0]
  idx++;
 8008000:	7dfb      	ldrb	r3, [r7, #23]
 8008002:	3301      	adds	r3, #1
 8008004:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008006:	e013      	b.n	8008030 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8008008:	7dfb      	ldrb	r3, [r7, #23]
 800800a:	68ba      	ldr	r2, [r7, #8]
 800800c:	4413      	add	r3, r2
 800800e:	693a      	ldr	r2, [r7, #16]
 8008010:	7812      	ldrb	r2, [r2, #0]
 8008012:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8008014:	693b      	ldr	r3, [r7, #16]
 8008016:	3301      	adds	r3, #1
 8008018:	613b      	str	r3, [r7, #16]
    idx++;
 800801a:	7dfb      	ldrb	r3, [r7, #23]
 800801c:	3301      	adds	r3, #1
 800801e:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008020:	7dfb      	ldrb	r3, [r7, #23]
 8008022:	68ba      	ldr	r2, [r7, #8]
 8008024:	4413      	add	r3, r2
 8008026:	2200      	movs	r2, #0
 8008028:	701a      	strb	r2, [r3, #0]
    idx++;
 800802a:	7dfb      	ldrb	r3, [r7, #23]
 800802c:	3301      	adds	r3, #1
 800802e:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008030:	693b      	ldr	r3, [r7, #16]
 8008032:	781b      	ldrb	r3, [r3, #0]
 8008034:	2b00      	cmp	r3, #0
 8008036:	d1e7      	bne.n	8008008 <USBD_GetString+0x52>
 8008038:	e000      	b.n	800803c <USBD_GetString+0x86>
    return;
 800803a:	bf00      	nop
  }
}
 800803c:	3718      	adds	r7, #24
 800803e:	46bd      	mov	sp, r7
 8008040:	bd80      	pop	{r7, pc}

08008042 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008042:	b480      	push	{r7}
 8008044:	b085      	sub	sp, #20
 8008046:	af00      	add	r7, sp, #0
 8008048:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800804a:	2300      	movs	r3, #0
 800804c:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008052:	e005      	b.n	8008060 <USBD_GetLen+0x1e>
  {
    len++;
 8008054:	7bfb      	ldrb	r3, [r7, #15]
 8008056:	3301      	adds	r3, #1
 8008058:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800805a:	68bb      	ldr	r3, [r7, #8]
 800805c:	3301      	adds	r3, #1
 800805e:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008060:	68bb      	ldr	r3, [r7, #8]
 8008062:	781b      	ldrb	r3, [r3, #0]
 8008064:	2b00      	cmp	r3, #0
 8008066:	d1f5      	bne.n	8008054 <USBD_GetLen+0x12>
  }

  return len;
 8008068:	7bfb      	ldrb	r3, [r7, #15]
}
 800806a:	4618      	mov	r0, r3
 800806c:	3714      	adds	r7, #20
 800806e:	46bd      	mov	sp, r7
 8008070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008074:	4770      	bx	lr

08008076 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008076:	b580      	push	{r7, lr}
 8008078:	b084      	sub	sp, #16
 800807a:	af00      	add	r7, sp, #0
 800807c:	60f8      	str	r0, [r7, #12]
 800807e:	60b9      	str	r1, [r7, #8]
 8008080:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	2202      	movs	r2, #2
 8008086:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	687a      	ldr	r2, [r7, #4]
 800808e:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	687a      	ldr	r2, [r7, #4]
 8008094:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	68ba      	ldr	r2, [r7, #8]
 800809a:	2100      	movs	r1, #0
 800809c:	68f8      	ldr	r0, [r7, #12]
 800809e:	f000 fda8 	bl	8008bf2 <USBD_LL_Transmit>

  return USBD_OK;
 80080a2:	2300      	movs	r3, #0
}
 80080a4:	4618      	mov	r0, r3
 80080a6:	3710      	adds	r7, #16
 80080a8:	46bd      	mov	sp, r7
 80080aa:	bd80      	pop	{r7, pc}

080080ac <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80080ac:	b580      	push	{r7, lr}
 80080ae:	b084      	sub	sp, #16
 80080b0:	af00      	add	r7, sp, #0
 80080b2:	60f8      	str	r0, [r7, #12]
 80080b4:	60b9      	str	r1, [r7, #8]
 80080b6:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	68ba      	ldr	r2, [r7, #8]
 80080bc:	2100      	movs	r1, #0
 80080be:	68f8      	ldr	r0, [r7, #12]
 80080c0:	f000 fd97 	bl	8008bf2 <USBD_LL_Transmit>

  return USBD_OK;
 80080c4:	2300      	movs	r3, #0
}
 80080c6:	4618      	mov	r0, r3
 80080c8:	3710      	adds	r7, #16
 80080ca:	46bd      	mov	sp, r7
 80080cc:	bd80      	pop	{r7, pc}

080080ce <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80080ce:	b580      	push	{r7, lr}
 80080d0:	b084      	sub	sp, #16
 80080d2:	af00      	add	r7, sp, #0
 80080d4:	60f8      	str	r0, [r7, #12]
 80080d6:	60b9      	str	r1, [r7, #8]
 80080d8:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	2203      	movs	r2, #3
 80080de:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	687a      	ldr	r2, [r7, #4]
 80080e6:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	687a      	ldr	r2, [r7, #4]
 80080ee:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	68ba      	ldr	r2, [r7, #8]
 80080f6:	2100      	movs	r1, #0
 80080f8:	68f8      	ldr	r0, [r7, #12]
 80080fa:	f000 fd9b 	bl	8008c34 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80080fe:	2300      	movs	r3, #0
}
 8008100:	4618      	mov	r0, r3
 8008102:	3710      	adds	r7, #16
 8008104:	46bd      	mov	sp, r7
 8008106:	bd80      	pop	{r7, pc}

08008108 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8008108:	b580      	push	{r7, lr}
 800810a:	b084      	sub	sp, #16
 800810c:	af00      	add	r7, sp, #0
 800810e:	60f8      	str	r0, [r7, #12]
 8008110:	60b9      	str	r1, [r7, #8]
 8008112:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	68ba      	ldr	r2, [r7, #8]
 8008118:	2100      	movs	r1, #0
 800811a:	68f8      	ldr	r0, [r7, #12]
 800811c:	f000 fd8a 	bl	8008c34 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008120:	2300      	movs	r3, #0
}
 8008122:	4618      	mov	r0, r3
 8008124:	3710      	adds	r7, #16
 8008126:	46bd      	mov	sp, r7
 8008128:	bd80      	pop	{r7, pc}

0800812a <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800812a:	b580      	push	{r7, lr}
 800812c:	b082      	sub	sp, #8
 800812e:	af00      	add	r7, sp, #0
 8008130:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	2204      	movs	r2, #4
 8008136:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800813a:	2300      	movs	r3, #0
 800813c:	2200      	movs	r2, #0
 800813e:	2100      	movs	r1, #0
 8008140:	6878      	ldr	r0, [r7, #4]
 8008142:	f000 fd56 	bl	8008bf2 <USBD_LL_Transmit>

  return USBD_OK;
 8008146:	2300      	movs	r3, #0
}
 8008148:	4618      	mov	r0, r3
 800814a:	3708      	adds	r7, #8
 800814c:	46bd      	mov	sp, r7
 800814e:	bd80      	pop	{r7, pc}

08008150 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008150:	b580      	push	{r7, lr}
 8008152:	b082      	sub	sp, #8
 8008154:	af00      	add	r7, sp, #0
 8008156:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	2205      	movs	r2, #5
 800815c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008160:	2300      	movs	r3, #0
 8008162:	2200      	movs	r2, #0
 8008164:	2100      	movs	r1, #0
 8008166:	6878      	ldr	r0, [r7, #4]
 8008168:	f000 fd64 	bl	8008c34 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800816c:	2300      	movs	r3, #0
}
 800816e:	4618      	mov	r0, r3
 8008170:	3708      	adds	r7, #8
 8008172:	46bd      	mov	sp, r7
 8008174:	bd80      	pop	{r7, pc}
	...

08008178 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008178:	b580      	push	{r7, lr}
 800817a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800817c:	2200      	movs	r2, #0
 800817e:	4912      	ldr	r1, [pc, #72]	; (80081c8 <MX_USB_DEVICE_Init+0x50>)
 8008180:	4812      	ldr	r0, [pc, #72]	; (80081cc <MX_USB_DEVICE_Init+0x54>)
 8008182:	f7fe fe8f 	bl	8006ea4 <USBD_Init>
 8008186:	4603      	mov	r3, r0
 8008188:	2b00      	cmp	r3, #0
 800818a:	d001      	beq.n	8008190 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800818c:	f7f8 fa7e 	bl	800068c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008190:	490f      	ldr	r1, [pc, #60]	; (80081d0 <MX_USB_DEVICE_Init+0x58>)
 8008192:	480e      	ldr	r0, [pc, #56]	; (80081cc <MX_USB_DEVICE_Init+0x54>)
 8008194:	f7fe feb6 	bl	8006f04 <USBD_RegisterClass>
 8008198:	4603      	mov	r3, r0
 800819a:	2b00      	cmp	r3, #0
 800819c:	d001      	beq.n	80081a2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800819e:	f7f8 fa75 	bl	800068c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80081a2:	490c      	ldr	r1, [pc, #48]	; (80081d4 <MX_USB_DEVICE_Init+0x5c>)
 80081a4:	4809      	ldr	r0, [pc, #36]	; (80081cc <MX_USB_DEVICE_Init+0x54>)
 80081a6:	f7fe fe07 	bl	8006db8 <USBD_CDC_RegisterInterface>
 80081aa:	4603      	mov	r3, r0
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d001      	beq.n	80081b4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80081b0:	f7f8 fa6c 	bl	800068c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80081b4:	4805      	ldr	r0, [pc, #20]	; (80081cc <MX_USB_DEVICE_Init+0x54>)
 80081b6:	f7fe fecc 	bl	8006f52 <USBD_Start>
 80081ba:	4603      	mov	r3, r0
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d001      	beq.n	80081c4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80081c0:	f7f8 fa64 	bl	800068c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80081c4:	bf00      	nop
 80081c6:	bd80      	pop	{r7, pc}
 80081c8:	20000158 	.word	0x20000158
 80081cc:	200003b8 	.word	0x200003b8
 80081d0:	2000003c 	.word	0x2000003c
 80081d4:	20000144 	.word	0x20000144

080081d8 <cdcAvailable>:
uint32_t  rx_len=512;
uint8_t   rx_buf[512];
bool      rx_full = false;

uint32_t cdcAvailable(void)
{
 80081d8:	b480      	push	{r7}
 80081da:	b083      	sub	sp, #12
 80081dc:	af00      	add	r7, sp, #0
	uint32_t ret;

	ret = (rx_in - rx_out) % rx_len;
 80081de:	4b0a      	ldr	r3, [pc, #40]	; (8008208 <cdcAvailable+0x30>)
 80081e0:	681a      	ldr	r2, [r3, #0]
 80081e2:	4b0a      	ldr	r3, [pc, #40]	; (800820c <cdcAvailable+0x34>)
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	1ad3      	subs	r3, r2, r3
 80081e8:	4a09      	ldr	r2, [pc, #36]	; (8008210 <cdcAvailable+0x38>)
 80081ea:	6812      	ldr	r2, [r2, #0]
 80081ec:	fbb3 f1f2 	udiv	r1, r3, r2
 80081f0:	fb01 f202 	mul.w	r2, r1, r2
 80081f4:	1a9b      	subs	r3, r3, r2
 80081f6:	607b      	str	r3, [r7, #4]

	return ret;
 80081f8:	687b      	ldr	r3, [r7, #4]
}
 80081fa:	4618      	mov	r0, r3
 80081fc:	370c      	adds	r7, #12
 80081fe:	46bd      	mov	sp, r7
 8008200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008204:	4770      	bx	lr
 8008206:	bf00      	nop
 8008208:	20000690 	.word	0x20000690
 800820c:	20000694 	.word	0x20000694
 8008210:	20000140 	.word	0x20000140

08008214 <cdcDataIn>:
	}
	return ret;
}

void cdcDataIn(uint8_t rx_data)
{
 8008214:	b480      	push	{r7}
 8008216:	b085      	sub	sp, #20
 8008218:	af00      	add	r7, sp, #0
 800821a:	4603      	mov	r3, r0
 800821c:	71fb      	strb	r3, [r7, #7]
	uint32_t next_rx_in;
	next_rx_in = (rx_in + 1) % rx_len;
 800821e:	4b0f      	ldr	r3, [pc, #60]	; (800825c <cdcDataIn+0x48>)
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	3301      	adds	r3, #1
 8008224:	4a0e      	ldr	r2, [pc, #56]	; (8008260 <cdcDataIn+0x4c>)
 8008226:	6812      	ldr	r2, [r2, #0]
 8008228:	fbb3 f1f2 	udiv	r1, r3, r2
 800822c:	fb01 f202 	mul.w	r2, r1, r2
 8008230:	1a9b      	subs	r3, r3, r2
 8008232:	60fb      	str	r3, [r7, #12]
	rx_buf[rx_in] = rx_data;
 8008234:	4b09      	ldr	r3, [pc, #36]	; (800825c <cdcDataIn+0x48>)
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	490a      	ldr	r1, [pc, #40]	; (8008264 <cdcDataIn+0x50>)
 800823a:	79fa      	ldrb	r2, [r7, #7]
 800823c:	54ca      	strb	r2, [r1, r3]
	if(next_rx_in != rx_out)
 800823e:	4b0a      	ldr	r3, [pc, #40]	; (8008268 <cdcDataIn+0x54>)
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	68fa      	ldr	r2, [r7, #12]
 8008244:	429a      	cmp	r2, r3
 8008246:	d002      	beq.n	800824e <cdcDataIn+0x3a>
	{
		rx_in = next_rx_in;
 8008248:	4a04      	ldr	r2, [pc, #16]	; (800825c <cdcDataIn+0x48>)
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	6013      	str	r3, [r2, #0]
	}
}
 800824e:	bf00      	nop
 8008250:	3714      	adds	r7, #20
 8008252:	46bd      	mov	sp, r7
 8008254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008258:	4770      	bx	lr
 800825a:	bf00      	nop
 800825c:	20000690 	.word	0x20000690
 8008260:	20000140 	.word	0x20000140
 8008264:	20000698 	.word	0x20000698
 8008268:	20000694 	.word	0x20000694

0800826c <USBD_CDC_SOF>:
{
	return LineCoding.bitrate;
}

uint8_t USBD_CDC_SOF(struct _USBD_HandleTypeDef *pdev)
{
 800826c:	b590      	push	{r4, r7, lr}
 800826e:	b085      	sub	sp, #20
 8008270:	af00      	add	r7, sp, #0
 8008272:	6078      	str	r0, [r7, #4]
  if(rx_full == true)
 8008274:	4b0c      	ldr	r3, [pc, #48]	; (80082a8 <USBD_CDC_SOF+0x3c>)
 8008276:	781b      	ldrb	r3, [r3, #0]
 8008278:	2b00      	cmp	r3, #0
 800827a:	d010      	beq.n	800829e <USBD_CDC_SOF+0x32>
  {
    uint32_t buf_len;

    //Empty space amount of received buffer
    buf_len = (rx_len - cdcAvailable()) - 1; // for write one space -> -1
 800827c:	4b0b      	ldr	r3, [pc, #44]	; (80082ac <USBD_CDC_SOF+0x40>)
 800827e:	681c      	ldr	r4, [r3, #0]
 8008280:	f7ff ffaa 	bl	80081d8 <cdcAvailable>
 8008284:	4603      	mov	r3, r0
 8008286:	1ae3      	subs	r3, r4, r3
 8008288:	3b01      	subs	r3, #1
 800828a:	60fb      	str	r3, [r7, #12]

    if(buf_len >= USB_FS_MAX_PACKET_SIZE)
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	2b3f      	cmp	r3, #63	; 0x3f
 8008290:	d905      	bls.n	800829e <USBD_CDC_SOF+0x32>
    {
      //USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]); only one is enough
      USBD_CDC_ReceivePacket(pdev);
 8008292:	6878      	ldr	r0, [r7, #4]
 8008294:	f7fe fddc 	bl	8006e50 <USBD_CDC_ReceivePacket>
      rx_full = false;
 8008298:	4b03      	ldr	r3, [pc, #12]	; (80082a8 <USBD_CDC_SOF+0x3c>)
 800829a:	2200      	movs	r2, #0
 800829c:	701a      	strb	r2, [r3, #0]
    }

  }
  return 0;
 800829e:	2300      	movs	r3, #0
}
 80082a0:	4618      	mov	r0, r3
 80082a2:	3714      	adds	r7, #20
 80082a4:	46bd      	mov	sp, r7
 80082a6:	bd90      	pop	{r4, r7, pc}
 80082a8:	20000898 	.word	0x20000898
 80082ac:	20000140 	.word	0x20000140

080082b0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80082b0:	b580      	push	{r7, lr}
 80082b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80082b4:	2200      	movs	r2, #0
 80082b6:	4905      	ldr	r1, [pc, #20]	; (80082cc <CDC_Init_FS+0x1c>)
 80082b8:	4805      	ldr	r0, [pc, #20]	; (80082d0 <CDC_Init_FS+0x20>)
 80082ba:	f7fe fd92 	bl	8006de2 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80082be:	4905      	ldr	r1, [pc, #20]	; (80082d4 <CDC_Init_FS+0x24>)
 80082c0:	4803      	ldr	r0, [pc, #12]	; (80082d0 <CDC_Init_FS+0x20>)
 80082c2:	f7fe fdac 	bl	8006e1e <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80082c6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80082c8:	4618      	mov	r0, r3
 80082ca:	bd80      	pop	{r7, pc}
 80082cc:	20000c9c 	.word	0x20000c9c
 80082d0:	200003b8 	.word	0x200003b8
 80082d4:	2000089c 	.word	0x2000089c

080082d8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80082d8:	b480      	push	{r7}
 80082da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80082dc:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80082de:	4618      	mov	r0, r3
 80082e0:	46bd      	mov	sp, r7
 80082e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082e6:	4770      	bx	lr

080082e8 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80082e8:	b480      	push	{r7}
 80082ea:	b083      	sub	sp, #12
 80082ec:	af00      	add	r7, sp, #0
 80082ee:	4603      	mov	r3, r0
 80082f0:	6039      	str	r1, [r7, #0]
 80082f2:	71fb      	strb	r3, [r7, #7]
 80082f4:	4613      	mov	r3, r2
 80082f6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80082f8:	79fb      	ldrb	r3, [r7, #7]
 80082fa:	2b23      	cmp	r3, #35	; 0x23
 80082fc:	f200 80a3 	bhi.w	8008446 <CDC_Control_FS+0x15e>
 8008300:	a201      	add	r2, pc, #4	; (adr r2, 8008308 <CDC_Control_FS+0x20>)
 8008302:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008306:	bf00      	nop
 8008308:	08008447 	.word	0x08008447
 800830c:	08008447 	.word	0x08008447
 8008310:	08008447 	.word	0x08008447
 8008314:	08008447 	.word	0x08008447
 8008318:	08008447 	.word	0x08008447
 800831c:	08008447 	.word	0x08008447
 8008320:	08008447 	.word	0x08008447
 8008324:	08008447 	.word	0x08008447
 8008328:	08008447 	.word	0x08008447
 800832c:	08008447 	.word	0x08008447
 8008330:	08008447 	.word	0x08008447
 8008334:	08008447 	.word	0x08008447
 8008338:	08008447 	.word	0x08008447
 800833c:	08008447 	.word	0x08008447
 8008340:	08008447 	.word	0x08008447
 8008344:	08008447 	.word	0x08008447
 8008348:	08008447 	.word	0x08008447
 800834c:	08008447 	.word	0x08008447
 8008350:	08008447 	.word	0x08008447
 8008354:	08008447 	.word	0x08008447
 8008358:	08008447 	.word	0x08008447
 800835c:	08008447 	.word	0x08008447
 8008360:	08008447 	.word	0x08008447
 8008364:	08008447 	.word	0x08008447
 8008368:	08008447 	.word	0x08008447
 800836c:	08008447 	.word	0x08008447
 8008370:	08008447 	.word	0x08008447
 8008374:	08008447 	.word	0x08008447
 8008378:	08008447 	.word	0x08008447
 800837c:	08008447 	.word	0x08008447
 8008380:	08008447 	.word	0x08008447
 8008384:	08008447 	.word	0x08008447
 8008388:	08008399 	.word	0x08008399
 800838c:	080083f3 	.word	0x080083f3
 8008390:	08008447 	.word	0x08008447
 8008394:	08008447 	.word	0x08008447
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING: // MCU�?? ?��?��?���?? set
    	LineCoding.bitrate 		 = (uint32_t)(pbuf[0]);
 8008398:	683b      	ldr	r3, [r7, #0]
 800839a:	781b      	ldrb	r3, [r3, #0]
 800839c:	461a      	mov	r2, r3
 800839e:	4b2e      	ldr	r3, [pc, #184]	; (8008458 <CDC_Control_FS+0x170>)
 80083a0:	601a      	str	r2, [r3, #0]
    	LineCoding.bitrate 		|= (uint32_t)(pbuf[1]) << 8;
 80083a2:	4b2d      	ldr	r3, [pc, #180]	; (8008458 <CDC_Control_FS+0x170>)
 80083a4:	681a      	ldr	r2, [r3, #0]
 80083a6:	683b      	ldr	r3, [r7, #0]
 80083a8:	3301      	adds	r3, #1
 80083aa:	781b      	ldrb	r3, [r3, #0]
 80083ac:	021b      	lsls	r3, r3, #8
 80083ae:	4313      	orrs	r3, r2
 80083b0:	4a29      	ldr	r2, [pc, #164]	; (8008458 <CDC_Control_FS+0x170>)
 80083b2:	6013      	str	r3, [r2, #0]
    	LineCoding.bitrate 		|= (uint32_t)(pbuf[2]) << 16;
 80083b4:	4b28      	ldr	r3, [pc, #160]	; (8008458 <CDC_Control_FS+0x170>)
 80083b6:	681a      	ldr	r2, [r3, #0]
 80083b8:	683b      	ldr	r3, [r7, #0]
 80083ba:	3302      	adds	r3, #2
 80083bc:	781b      	ldrb	r3, [r3, #0]
 80083be:	041b      	lsls	r3, r3, #16
 80083c0:	4313      	orrs	r3, r2
 80083c2:	4a25      	ldr	r2, [pc, #148]	; (8008458 <CDC_Control_FS+0x170>)
 80083c4:	6013      	str	r3, [r2, #0]
    	LineCoding.bitrate 		|= (uint32_t)(pbuf[3]) << 24;
 80083c6:	4b24      	ldr	r3, [pc, #144]	; (8008458 <CDC_Control_FS+0x170>)
 80083c8:	681a      	ldr	r2, [r3, #0]
 80083ca:	683b      	ldr	r3, [r7, #0]
 80083cc:	3303      	adds	r3, #3
 80083ce:	781b      	ldrb	r3, [r3, #0]
 80083d0:	061b      	lsls	r3, r3, #24
 80083d2:	4313      	orrs	r3, r2
 80083d4:	4a20      	ldr	r2, [pc, #128]	; (8008458 <CDC_Control_FS+0x170>)
 80083d6:	6013      	str	r3, [r2, #0]
    	LineCoding.format 		 = pbuf[4];
 80083d8:	683b      	ldr	r3, [r7, #0]
 80083da:	791a      	ldrb	r2, [r3, #4]
 80083dc:	4b1e      	ldr	r3, [pc, #120]	; (8008458 <CDC_Control_FS+0x170>)
 80083de:	711a      	strb	r2, [r3, #4]
    	LineCoding.paritytype  = pbuf[5];
 80083e0:	683b      	ldr	r3, [r7, #0]
 80083e2:	795a      	ldrb	r2, [r3, #5]
 80083e4:	4b1c      	ldr	r3, [pc, #112]	; (8008458 <CDC_Control_FS+0x170>)
 80083e6:	715a      	strb	r2, [r3, #5]
    	LineCoding.datatype 	 = pbuf[6];
 80083e8:	683b      	ldr	r3, [r7, #0]
 80083ea:	799a      	ldrb	r2, [r3, #6]
 80083ec:	4b1a      	ldr	r3, [pc, #104]	; (8008458 <CDC_Control_FS+0x170>)
 80083ee:	719a      	strb	r2, [r3, #6]
    break;
 80083f0:	e02a      	b.n	8008448 <CDC_Control_FS+0x160>

    case CDC_GET_LINE_CODING: // PC�?? ?��?��?���?? ?��?���??
    	pbuf[0] = (uint8_t)(LineCoding.bitrate);
 80083f2:	4b19      	ldr	r3, [pc, #100]	; (8008458 <CDC_Control_FS+0x170>)
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	b2da      	uxtb	r2, r3
 80083f8:	683b      	ldr	r3, [r7, #0]
 80083fa:	701a      	strb	r2, [r3, #0]
    	pbuf[1] = (uint8_t)(LineCoding.bitrate >> 8);
 80083fc:	4b16      	ldr	r3, [pc, #88]	; (8008458 <CDC_Control_FS+0x170>)
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	0a1a      	lsrs	r2, r3, #8
 8008402:	683b      	ldr	r3, [r7, #0]
 8008404:	3301      	adds	r3, #1
 8008406:	b2d2      	uxtb	r2, r2
 8008408:	701a      	strb	r2, [r3, #0]
    	pbuf[2] = (uint8_t)(LineCoding.bitrate >> 16);
 800840a:	4b13      	ldr	r3, [pc, #76]	; (8008458 <CDC_Control_FS+0x170>)
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	0c1a      	lsrs	r2, r3, #16
 8008410:	683b      	ldr	r3, [r7, #0]
 8008412:	3302      	adds	r3, #2
 8008414:	b2d2      	uxtb	r2, r2
 8008416:	701a      	strb	r2, [r3, #0]
    	pbuf[3] = (uint8_t)(LineCoding.bitrate >> 24);
 8008418:	4b0f      	ldr	r3, [pc, #60]	; (8008458 <CDC_Control_FS+0x170>)
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	0e1a      	lsrs	r2, r3, #24
 800841e:	683b      	ldr	r3, [r7, #0]
 8008420:	3303      	adds	r3, #3
 8008422:	b2d2      	uxtb	r2, r2
 8008424:	701a      	strb	r2, [r3, #0]
    	pbuf[4] = LineCoding.format;
 8008426:	683b      	ldr	r3, [r7, #0]
 8008428:	3304      	adds	r3, #4
 800842a:	4a0b      	ldr	r2, [pc, #44]	; (8008458 <CDC_Control_FS+0x170>)
 800842c:	7912      	ldrb	r2, [r2, #4]
 800842e:	701a      	strb	r2, [r3, #0]
    	pbuf[5] = LineCoding.paritytype;
 8008430:	683b      	ldr	r3, [r7, #0]
 8008432:	3305      	adds	r3, #5
 8008434:	4a08      	ldr	r2, [pc, #32]	; (8008458 <CDC_Control_FS+0x170>)
 8008436:	7952      	ldrb	r2, [r2, #5]
 8008438:	701a      	strb	r2, [r3, #0]
    	pbuf[6] = LineCoding.datatype;
 800843a:	683b      	ldr	r3, [r7, #0]
 800843c:	3306      	adds	r3, #6
 800843e:	4a06      	ldr	r2, [pc, #24]	; (8008458 <CDC_Control_FS+0x170>)
 8008440:	7992      	ldrb	r2, [r2, #6]
 8008442:	701a      	strb	r2, [r3, #0]
    break;
 8008444:	e000      	b.n	8008448 <CDC_Control_FS+0x160>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008446:	bf00      	nop
  }

  return (USBD_OK);
 8008448:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800844a:	4618      	mov	r0, r3
 800844c:	370c      	adds	r7, #12
 800844e:	46bd      	mov	sp, r7
 8008450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008454:	4770      	bx	lr
 8008456:	bf00      	nop
 8008458:	20000688 	.word	0x20000688

0800845c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800845c:	b590      	push	{r4, r7, lr}
 800845e:	b085      	sub	sp, #20
 8008460:	af00      	add	r7, sp, #0
 8008462:	6078      	str	r0, [r7, #4]
 8008464:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */

  for(int i=0; i<*Len; i++)
 8008466:	2300      	movs	r3, #0
 8008468:	60fb      	str	r3, [r7, #12]
 800846a:	e009      	b.n	8008480 <CDC_Receive_FS+0x24>
  {
    cdcDataIn(Buf[i]);
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	687a      	ldr	r2, [r7, #4]
 8008470:	4413      	add	r3, r2
 8008472:	781b      	ldrb	r3, [r3, #0]
 8008474:	4618      	mov	r0, r3
 8008476:	f7ff fecd 	bl	8008214 <cdcDataIn>
  for(int i=0; i<*Len; i++)
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	3301      	adds	r3, #1
 800847e:	60fb      	str	r3, [r7, #12]
 8008480:	683b      	ldr	r3, [r7, #0]
 8008482:	681a      	ldr	r2, [r3, #0]
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	429a      	cmp	r2, r3
 8008488:	d8f0      	bhi.n	800846c <CDC_Receive_FS+0x10>
  }
  uint32_t buf_len;

  //Empty space amount of received buffer
  buf_len = (rx_len - cdcAvailable()) - 1; // for write one space -> -1
 800848a:	4b0d      	ldr	r3, [pc, #52]	; (80084c0 <CDC_Receive_FS+0x64>)
 800848c:	681c      	ldr	r4, [r3, #0]
 800848e:	f7ff fea3 	bl	80081d8 <cdcAvailable>
 8008492:	4603      	mov	r3, r0
 8008494:	1ae3      	subs	r3, r4, r3
 8008496:	3b01      	subs	r3, #1
 8008498:	60bb      	str	r3, [r7, #8]

  if(buf_len >= USB_FS_MAX_PACKET_SIZE)
 800849a:	68bb      	ldr	r3, [r7, #8]
 800849c:	2b3f      	cmp	r3, #63	; 0x3f
 800849e:	d907      	bls.n	80084b0 <CDC_Receive_FS+0x54>
  {
    USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80084a0:	6879      	ldr	r1, [r7, #4]
 80084a2:	4808      	ldr	r0, [pc, #32]	; (80084c4 <CDC_Receive_FS+0x68>)
 80084a4:	f7fe fcbb 	bl	8006e1e <USBD_CDC_SetRxBuffer>
    USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80084a8:	4806      	ldr	r0, [pc, #24]	; (80084c4 <CDC_Receive_FS+0x68>)
 80084aa:	f7fe fcd1 	bl	8006e50 <USBD_CDC_ReceivePacket>
 80084ae:	e002      	b.n	80084b6 <CDC_Receive_FS+0x5a>
  }
  else
  {
    /*buffer not enough space.. please wait*/
    rx_full = true;
 80084b0:	4b05      	ldr	r3, [pc, #20]	; (80084c8 <CDC_Receive_FS+0x6c>)
 80084b2:	2201      	movs	r2, #1
 80084b4:	701a      	strb	r2, [r3, #0]
  }

  return (USBD_OK);
 80084b6:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80084b8:	4618      	mov	r0, r3
 80084ba:	3714      	adds	r7, #20
 80084bc:	46bd      	mov	sp, r7
 80084be:	bd90      	pop	{r4, r7, pc}
 80084c0:	20000140 	.word	0x20000140
 80084c4:	200003b8 	.word	0x200003b8
 80084c8:	20000898 	.word	0x20000898

080084cc <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80084cc:	b480      	push	{r7}
 80084ce:	b087      	sub	sp, #28
 80084d0:	af00      	add	r7, sp, #0
 80084d2:	60f8      	str	r0, [r7, #12]
 80084d4:	60b9      	str	r1, [r7, #8]
 80084d6:	4613      	mov	r3, r2
 80084d8:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80084da:	2300      	movs	r3, #0
 80084dc:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80084de:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80084e2:	4618      	mov	r0, r3
 80084e4:	371c      	adds	r7, #28
 80084e6:	46bd      	mov	sp, r7
 80084e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ec:	4770      	bx	lr
	...

080084f0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80084f0:	b480      	push	{r7}
 80084f2:	b083      	sub	sp, #12
 80084f4:	af00      	add	r7, sp, #0
 80084f6:	4603      	mov	r3, r0
 80084f8:	6039      	str	r1, [r7, #0]
 80084fa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80084fc:	683b      	ldr	r3, [r7, #0]
 80084fe:	2212      	movs	r2, #18
 8008500:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008502:	4b03      	ldr	r3, [pc, #12]	; (8008510 <USBD_FS_DeviceDescriptor+0x20>)
}
 8008504:	4618      	mov	r0, r3
 8008506:	370c      	adds	r7, #12
 8008508:	46bd      	mov	sp, r7
 800850a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800850e:	4770      	bx	lr
 8008510:	20000174 	.word	0x20000174

08008514 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008514:	b480      	push	{r7}
 8008516:	b083      	sub	sp, #12
 8008518:	af00      	add	r7, sp, #0
 800851a:	4603      	mov	r3, r0
 800851c:	6039      	str	r1, [r7, #0]
 800851e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008520:	683b      	ldr	r3, [r7, #0]
 8008522:	2204      	movs	r2, #4
 8008524:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008526:	4b03      	ldr	r3, [pc, #12]	; (8008534 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008528:	4618      	mov	r0, r3
 800852a:	370c      	adds	r7, #12
 800852c:	46bd      	mov	sp, r7
 800852e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008532:	4770      	bx	lr
 8008534:	20000188 	.word	0x20000188

08008538 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008538:	b580      	push	{r7, lr}
 800853a:	b082      	sub	sp, #8
 800853c:	af00      	add	r7, sp, #0
 800853e:	4603      	mov	r3, r0
 8008540:	6039      	str	r1, [r7, #0]
 8008542:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008544:	79fb      	ldrb	r3, [r7, #7]
 8008546:	2b00      	cmp	r3, #0
 8008548:	d105      	bne.n	8008556 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800854a:	683a      	ldr	r2, [r7, #0]
 800854c:	4907      	ldr	r1, [pc, #28]	; (800856c <USBD_FS_ProductStrDescriptor+0x34>)
 800854e:	4808      	ldr	r0, [pc, #32]	; (8008570 <USBD_FS_ProductStrDescriptor+0x38>)
 8008550:	f7ff fd31 	bl	8007fb6 <USBD_GetString>
 8008554:	e004      	b.n	8008560 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008556:	683a      	ldr	r2, [r7, #0]
 8008558:	4904      	ldr	r1, [pc, #16]	; (800856c <USBD_FS_ProductStrDescriptor+0x34>)
 800855a:	4805      	ldr	r0, [pc, #20]	; (8008570 <USBD_FS_ProductStrDescriptor+0x38>)
 800855c:	f7ff fd2b 	bl	8007fb6 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008560:	4b02      	ldr	r3, [pc, #8]	; (800856c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008562:	4618      	mov	r0, r3
 8008564:	3708      	adds	r7, #8
 8008566:	46bd      	mov	sp, r7
 8008568:	bd80      	pop	{r7, pc}
 800856a:	bf00      	nop
 800856c:	2000109c 	.word	0x2000109c
 8008570:	08008dac 	.word	0x08008dac

08008574 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008574:	b580      	push	{r7, lr}
 8008576:	b082      	sub	sp, #8
 8008578:	af00      	add	r7, sp, #0
 800857a:	4603      	mov	r3, r0
 800857c:	6039      	str	r1, [r7, #0]
 800857e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008580:	683a      	ldr	r2, [r7, #0]
 8008582:	4904      	ldr	r1, [pc, #16]	; (8008594 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008584:	4804      	ldr	r0, [pc, #16]	; (8008598 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008586:	f7ff fd16 	bl	8007fb6 <USBD_GetString>
  return USBD_StrDesc;
 800858a:	4b02      	ldr	r3, [pc, #8]	; (8008594 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800858c:	4618      	mov	r0, r3
 800858e:	3708      	adds	r7, #8
 8008590:	46bd      	mov	sp, r7
 8008592:	bd80      	pop	{r7, pc}
 8008594:	2000109c 	.word	0x2000109c
 8008598:	08008dc4 	.word	0x08008dc4

0800859c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800859c:	b580      	push	{r7, lr}
 800859e:	b082      	sub	sp, #8
 80085a0:	af00      	add	r7, sp, #0
 80085a2:	4603      	mov	r3, r0
 80085a4:	6039      	str	r1, [r7, #0]
 80085a6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80085a8:	683b      	ldr	r3, [r7, #0]
 80085aa:	221a      	movs	r2, #26
 80085ac:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80085ae:	f000 f843 	bl	8008638 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80085b2:	4b02      	ldr	r3, [pc, #8]	; (80085bc <USBD_FS_SerialStrDescriptor+0x20>)
}
 80085b4:	4618      	mov	r0, r3
 80085b6:	3708      	adds	r7, #8
 80085b8:	46bd      	mov	sp, r7
 80085ba:	bd80      	pop	{r7, pc}
 80085bc:	2000018c 	.word	0x2000018c

080085c0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80085c0:	b580      	push	{r7, lr}
 80085c2:	b082      	sub	sp, #8
 80085c4:	af00      	add	r7, sp, #0
 80085c6:	4603      	mov	r3, r0
 80085c8:	6039      	str	r1, [r7, #0]
 80085ca:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80085cc:	79fb      	ldrb	r3, [r7, #7]
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d105      	bne.n	80085de <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80085d2:	683a      	ldr	r2, [r7, #0]
 80085d4:	4907      	ldr	r1, [pc, #28]	; (80085f4 <USBD_FS_ConfigStrDescriptor+0x34>)
 80085d6:	4808      	ldr	r0, [pc, #32]	; (80085f8 <USBD_FS_ConfigStrDescriptor+0x38>)
 80085d8:	f7ff fced 	bl	8007fb6 <USBD_GetString>
 80085dc:	e004      	b.n	80085e8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80085de:	683a      	ldr	r2, [r7, #0]
 80085e0:	4904      	ldr	r1, [pc, #16]	; (80085f4 <USBD_FS_ConfigStrDescriptor+0x34>)
 80085e2:	4805      	ldr	r0, [pc, #20]	; (80085f8 <USBD_FS_ConfigStrDescriptor+0x38>)
 80085e4:	f7ff fce7 	bl	8007fb6 <USBD_GetString>
  }
  return USBD_StrDesc;
 80085e8:	4b02      	ldr	r3, [pc, #8]	; (80085f4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80085ea:	4618      	mov	r0, r3
 80085ec:	3708      	adds	r7, #8
 80085ee:	46bd      	mov	sp, r7
 80085f0:	bd80      	pop	{r7, pc}
 80085f2:	bf00      	nop
 80085f4:	2000109c 	.word	0x2000109c
 80085f8:	08008dd8 	.word	0x08008dd8

080085fc <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80085fc:	b580      	push	{r7, lr}
 80085fe:	b082      	sub	sp, #8
 8008600:	af00      	add	r7, sp, #0
 8008602:	4603      	mov	r3, r0
 8008604:	6039      	str	r1, [r7, #0]
 8008606:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008608:	79fb      	ldrb	r3, [r7, #7]
 800860a:	2b00      	cmp	r3, #0
 800860c:	d105      	bne.n	800861a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800860e:	683a      	ldr	r2, [r7, #0]
 8008610:	4907      	ldr	r1, [pc, #28]	; (8008630 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008612:	4808      	ldr	r0, [pc, #32]	; (8008634 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008614:	f7ff fccf 	bl	8007fb6 <USBD_GetString>
 8008618:	e004      	b.n	8008624 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800861a:	683a      	ldr	r2, [r7, #0]
 800861c:	4904      	ldr	r1, [pc, #16]	; (8008630 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800861e:	4805      	ldr	r0, [pc, #20]	; (8008634 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008620:	f7ff fcc9 	bl	8007fb6 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008624:	4b02      	ldr	r3, [pc, #8]	; (8008630 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008626:	4618      	mov	r0, r3
 8008628:	3708      	adds	r7, #8
 800862a:	46bd      	mov	sp, r7
 800862c:	bd80      	pop	{r7, pc}
 800862e:	bf00      	nop
 8008630:	2000109c 	.word	0x2000109c
 8008634:	08008de4 	.word	0x08008de4

08008638 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008638:	b580      	push	{r7, lr}
 800863a:	b084      	sub	sp, #16
 800863c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800863e:	4b0f      	ldr	r3, [pc, #60]	; (800867c <Get_SerialNum+0x44>)
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008644:	4b0e      	ldr	r3, [pc, #56]	; (8008680 <Get_SerialNum+0x48>)
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800864a:	4b0e      	ldr	r3, [pc, #56]	; (8008684 <Get_SerialNum+0x4c>)
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008650:	68fa      	ldr	r2, [r7, #12]
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	4413      	add	r3, r2
 8008656:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	2b00      	cmp	r3, #0
 800865c:	d009      	beq.n	8008672 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800865e:	2208      	movs	r2, #8
 8008660:	4909      	ldr	r1, [pc, #36]	; (8008688 <Get_SerialNum+0x50>)
 8008662:	68f8      	ldr	r0, [r7, #12]
 8008664:	f000 f814 	bl	8008690 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008668:	2204      	movs	r2, #4
 800866a:	4908      	ldr	r1, [pc, #32]	; (800868c <Get_SerialNum+0x54>)
 800866c:	68b8      	ldr	r0, [r7, #8]
 800866e:	f000 f80f 	bl	8008690 <IntToUnicode>
  }
}
 8008672:	bf00      	nop
 8008674:	3710      	adds	r7, #16
 8008676:	46bd      	mov	sp, r7
 8008678:	bd80      	pop	{r7, pc}
 800867a:	bf00      	nop
 800867c:	1fff7a10 	.word	0x1fff7a10
 8008680:	1fff7a14 	.word	0x1fff7a14
 8008684:	1fff7a18 	.word	0x1fff7a18
 8008688:	2000018e 	.word	0x2000018e
 800868c:	2000019e 	.word	0x2000019e

08008690 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008690:	b480      	push	{r7}
 8008692:	b087      	sub	sp, #28
 8008694:	af00      	add	r7, sp, #0
 8008696:	60f8      	str	r0, [r7, #12]
 8008698:	60b9      	str	r1, [r7, #8]
 800869a:	4613      	mov	r3, r2
 800869c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800869e:	2300      	movs	r3, #0
 80086a0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80086a2:	2300      	movs	r3, #0
 80086a4:	75fb      	strb	r3, [r7, #23]
 80086a6:	e027      	b.n	80086f8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	0f1b      	lsrs	r3, r3, #28
 80086ac:	2b09      	cmp	r3, #9
 80086ae:	d80b      	bhi.n	80086c8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	0f1b      	lsrs	r3, r3, #28
 80086b4:	b2da      	uxtb	r2, r3
 80086b6:	7dfb      	ldrb	r3, [r7, #23]
 80086b8:	005b      	lsls	r3, r3, #1
 80086ba:	4619      	mov	r1, r3
 80086bc:	68bb      	ldr	r3, [r7, #8]
 80086be:	440b      	add	r3, r1
 80086c0:	3230      	adds	r2, #48	; 0x30
 80086c2:	b2d2      	uxtb	r2, r2
 80086c4:	701a      	strb	r2, [r3, #0]
 80086c6:	e00a      	b.n	80086de <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	0f1b      	lsrs	r3, r3, #28
 80086cc:	b2da      	uxtb	r2, r3
 80086ce:	7dfb      	ldrb	r3, [r7, #23]
 80086d0:	005b      	lsls	r3, r3, #1
 80086d2:	4619      	mov	r1, r3
 80086d4:	68bb      	ldr	r3, [r7, #8]
 80086d6:	440b      	add	r3, r1
 80086d8:	3237      	adds	r2, #55	; 0x37
 80086da:	b2d2      	uxtb	r2, r2
 80086dc:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	011b      	lsls	r3, r3, #4
 80086e2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80086e4:	7dfb      	ldrb	r3, [r7, #23]
 80086e6:	005b      	lsls	r3, r3, #1
 80086e8:	3301      	adds	r3, #1
 80086ea:	68ba      	ldr	r2, [r7, #8]
 80086ec:	4413      	add	r3, r2
 80086ee:	2200      	movs	r2, #0
 80086f0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80086f2:	7dfb      	ldrb	r3, [r7, #23]
 80086f4:	3301      	adds	r3, #1
 80086f6:	75fb      	strb	r3, [r7, #23]
 80086f8:	7dfa      	ldrb	r2, [r7, #23]
 80086fa:	79fb      	ldrb	r3, [r7, #7]
 80086fc:	429a      	cmp	r2, r3
 80086fe:	d3d3      	bcc.n	80086a8 <IntToUnicode+0x18>
  }
}
 8008700:	bf00      	nop
 8008702:	bf00      	nop
 8008704:	371c      	adds	r7, #28
 8008706:	46bd      	mov	sp, r7
 8008708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800870c:	4770      	bx	lr
	...

08008710 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008710:	b580      	push	{r7, lr}
 8008712:	b08a      	sub	sp, #40	; 0x28
 8008714:	af00      	add	r7, sp, #0
 8008716:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008718:	f107 0314 	add.w	r3, r7, #20
 800871c:	2200      	movs	r2, #0
 800871e:	601a      	str	r2, [r3, #0]
 8008720:	605a      	str	r2, [r3, #4]
 8008722:	609a      	str	r2, [r3, #8]
 8008724:	60da      	str	r2, [r3, #12]
 8008726:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008730:	d13a      	bne.n	80087a8 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008732:	2300      	movs	r3, #0
 8008734:	613b      	str	r3, [r7, #16]
 8008736:	4b1e      	ldr	r3, [pc, #120]	; (80087b0 <HAL_PCD_MspInit+0xa0>)
 8008738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800873a:	4a1d      	ldr	r2, [pc, #116]	; (80087b0 <HAL_PCD_MspInit+0xa0>)
 800873c:	f043 0301 	orr.w	r3, r3, #1
 8008740:	6313      	str	r3, [r2, #48]	; 0x30
 8008742:	4b1b      	ldr	r3, [pc, #108]	; (80087b0 <HAL_PCD_MspInit+0xa0>)
 8008744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008746:	f003 0301 	and.w	r3, r3, #1
 800874a:	613b      	str	r3, [r7, #16]
 800874c:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800874e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8008752:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008754:	2302      	movs	r3, #2
 8008756:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008758:	2300      	movs	r3, #0
 800875a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800875c:	2303      	movs	r3, #3
 800875e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008760:	230a      	movs	r3, #10
 8008762:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008764:	f107 0314 	add.w	r3, r7, #20
 8008768:	4619      	mov	r1, r3
 800876a:	4812      	ldr	r0, [pc, #72]	; (80087b4 <HAL_PCD_MspInit+0xa4>)
 800876c:	f7f9 f98a 	bl	8001a84 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008770:	4b0f      	ldr	r3, [pc, #60]	; (80087b0 <HAL_PCD_MspInit+0xa0>)
 8008772:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008774:	4a0e      	ldr	r2, [pc, #56]	; (80087b0 <HAL_PCD_MspInit+0xa0>)
 8008776:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800877a:	6353      	str	r3, [r2, #52]	; 0x34
 800877c:	2300      	movs	r3, #0
 800877e:	60fb      	str	r3, [r7, #12]
 8008780:	4b0b      	ldr	r3, [pc, #44]	; (80087b0 <HAL_PCD_MspInit+0xa0>)
 8008782:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008784:	4a0a      	ldr	r2, [pc, #40]	; (80087b0 <HAL_PCD_MspInit+0xa0>)
 8008786:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800878a:	6453      	str	r3, [r2, #68]	; 0x44
 800878c:	4b08      	ldr	r3, [pc, #32]	; (80087b0 <HAL_PCD_MspInit+0xa0>)
 800878e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008790:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008794:	60fb      	str	r3, [r7, #12]
 8008796:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008798:	2200      	movs	r2, #0
 800879a:	2100      	movs	r1, #0
 800879c:	2043      	movs	r0, #67	; 0x43
 800879e:	f7f8 fccc 	bl	800113a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80087a2:	2043      	movs	r0, #67	; 0x43
 80087a4:	f7f8 fce5 	bl	8001172 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80087a8:	bf00      	nop
 80087aa:	3728      	adds	r7, #40	; 0x28
 80087ac:	46bd      	mov	sp, r7
 80087ae:	bd80      	pop	{r7, pc}
 80087b0:	40023800 	.word	0x40023800
 80087b4:	40020000 	.word	0x40020000

080087b8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80087b8:	b580      	push	{r7, lr}
 80087ba:	b082      	sub	sp, #8
 80087bc:	af00      	add	r7, sp, #0
 80087be:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80087cc:	4619      	mov	r1, r3
 80087ce:	4610      	mov	r0, r2
 80087d0:	f7fe fc0a 	bl	8006fe8 <USBD_LL_SetupStage>
}
 80087d4:	bf00      	nop
 80087d6:	3708      	adds	r7, #8
 80087d8:	46bd      	mov	sp, r7
 80087da:	bd80      	pop	{r7, pc}

080087dc <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80087dc:	b580      	push	{r7, lr}
 80087de:	b082      	sub	sp, #8
 80087e0:	af00      	add	r7, sp, #0
 80087e2:	6078      	str	r0, [r7, #4]
 80087e4:	460b      	mov	r3, r1
 80087e6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80087ee:	78fa      	ldrb	r2, [r7, #3]
 80087f0:	6879      	ldr	r1, [r7, #4]
 80087f2:	4613      	mov	r3, r2
 80087f4:	00db      	lsls	r3, r3, #3
 80087f6:	1a9b      	subs	r3, r3, r2
 80087f8:	009b      	lsls	r3, r3, #2
 80087fa:	440b      	add	r3, r1
 80087fc:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8008800:	681a      	ldr	r2, [r3, #0]
 8008802:	78fb      	ldrb	r3, [r7, #3]
 8008804:	4619      	mov	r1, r3
 8008806:	f7fe fc44 	bl	8007092 <USBD_LL_DataOutStage>
}
 800880a:	bf00      	nop
 800880c:	3708      	adds	r7, #8
 800880e:	46bd      	mov	sp, r7
 8008810:	bd80      	pop	{r7, pc}

08008812 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008812:	b580      	push	{r7, lr}
 8008814:	b082      	sub	sp, #8
 8008816:	af00      	add	r7, sp, #0
 8008818:	6078      	str	r0, [r7, #4]
 800881a:	460b      	mov	r3, r1
 800881c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8008824:	78fa      	ldrb	r2, [r7, #3]
 8008826:	6879      	ldr	r1, [r7, #4]
 8008828:	4613      	mov	r3, r2
 800882a:	00db      	lsls	r3, r3, #3
 800882c:	1a9b      	subs	r3, r3, r2
 800882e:	009b      	lsls	r3, r3, #2
 8008830:	440b      	add	r3, r1
 8008832:	3348      	adds	r3, #72	; 0x48
 8008834:	681a      	ldr	r2, [r3, #0]
 8008836:	78fb      	ldrb	r3, [r7, #3]
 8008838:	4619      	mov	r1, r3
 800883a:	f7fe fc8d 	bl	8007158 <USBD_LL_DataInStage>
}
 800883e:	bf00      	nop
 8008840:	3708      	adds	r7, #8
 8008842:	46bd      	mov	sp, r7
 8008844:	bd80      	pop	{r7, pc}

08008846 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008846:	b580      	push	{r7, lr}
 8008848:	b082      	sub	sp, #8
 800884a:	af00      	add	r7, sp, #0
 800884c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008854:	4618      	mov	r0, r3
 8008856:	f7fe fda1 	bl	800739c <USBD_LL_SOF>
}
 800885a:	bf00      	nop
 800885c:	3708      	adds	r7, #8
 800885e:	46bd      	mov	sp, r7
 8008860:	bd80      	pop	{r7, pc}

08008862 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008862:	b580      	push	{r7, lr}
 8008864:	b084      	sub	sp, #16
 8008866:	af00      	add	r7, sp, #0
 8008868:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800886a:	2301      	movs	r3, #1
 800886c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	68db      	ldr	r3, [r3, #12]
 8008872:	2b02      	cmp	r3, #2
 8008874:	d001      	beq.n	800887a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8008876:	f7f7 ff09 	bl	800068c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008880:	7bfa      	ldrb	r2, [r7, #15]
 8008882:	4611      	mov	r1, r2
 8008884:	4618      	mov	r0, r3
 8008886:	f7fe fd4b 	bl	8007320 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008890:	4618      	mov	r0, r3
 8008892:	f7fe fcf7 	bl	8007284 <USBD_LL_Reset>
}
 8008896:	bf00      	nop
 8008898:	3710      	adds	r7, #16
 800889a:	46bd      	mov	sp, r7
 800889c:	bd80      	pop	{r7, pc}
	...

080088a0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80088a0:	b580      	push	{r7, lr}
 80088a2:	b082      	sub	sp, #8
 80088a4:	af00      	add	r7, sp, #0
 80088a6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80088ae:	4618      	mov	r0, r3
 80088b0:	f7fe fd46 	bl	8007340 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	687a      	ldr	r2, [r7, #4]
 80088c0:	6812      	ldr	r2, [r2, #0]
 80088c2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80088c6:	f043 0301 	orr.w	r3, r3, #1
 80088ca:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	6a1b      	ldr	r3, [r3, #32]
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d005      	beq.n	80088e0 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80088d4:	4b04      	ldr	r3, [pc, #16]	; (80088e8 <HAL_PCD_SuspendCallback+0x48>)
 80088d6:	691b      	ldr	r3, [r3, #16]
 80088d8:	4a03      	ldr	r2, [pc, #12]	; (80088e8 <HAL_PCD_SuspendCallback+0x48>)
 80088da:	f043 0306 	orr.w	r3, r3, #6
 80088de:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80088e0:	bf00      	nop
 80088e2:	3708      	adds	r7, #8
 80088e4:	46bd      	mov	sp, r7
 80088e6:	bd80      	pop	{r7, pc}
 80088e8:	e000ed00 	.word	0xe000ed00

080088ec <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80088ec:	b580      	push	{r7, lr}
 80088ee:	b082      	sub	sp, #8
 80088f0:	af00      	add	r7, sp, #0
 80088f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80088fa:	4618      	mov	r0, r3
 80088fc:	f7fe fd36 	bl	800736c <USBD_LL_Resume>
}
 8008900:	bf00      	nop
 8008902:	3708      	adds	r7, #8
 8008904:	46bd      	mov	sp, r7
 8008906:	bd80      	pop	{r7, pc}

08008908 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008908:	b580      	push	{r7, lr}
 800890a:	b082      	sub	sp, #8
 800890c:	af00      	add	r7, sp, #0
 800890e:	6078      	str	r0, [r7, #4]
 8008910:	460b      	mov	r3, r1
 8008912:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800891a:	78fa      	ldrb	r2, [r7, #3]
 800891c:	4611      	mov	r1, r2
 800891e:	4618      	mov	r0, r3
 8008920:	f7fe fd84 	bl	800742c <USBD_LL_IsoOUTIncomplete>
}
 8008924:	bf00      	nop
 8008926:	3708      	adds	r7, #8
 8008928:	46bd      	mov	sp, r7
 800892a:	bd80      	pop	{r7, pc}

0800892c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800892c:	b580      	push	{r7, lr}
 800892e:	b082      	sub	sp, #8
 8008930:	af00      	add	r7, sp, #0
 8008932:	6078      	str	r0, [r7, #4]
 8008934:	460b      	mov	r3, r1
 8008936:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800893e:	78fa      	ldrb	r2, [r7, #3]
 8008940:	4611      	mov	r1, r2
 8008942:	4618      	mov	r0, r3
 8008944:	f7fe fd4c 	bl	80073e0 <USBD_LL_IsoINIncomplete>
}
 8008948:	bf00      	nop
 800894a:	3708      	adds	r7, #8
 800894c:	46bd      	mov	sp, r7
 800894e:	bd80      	pop	{r7, pc}

08008950 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008950:	b580      	push	{r7, lr}
 8008952:	b082      	sub	sp, #8
 8008954:	af00      	add	r7, sp, #0
 8008956:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800895e:	4618      	mov	r0, r3
 8008960:	f7fe fd8a 	bl	8007478 <USBD_LL_DevConnected>
}
 8008964:	bf00      	nop
 8008966:	3708      	adds	r7, #8
 8008968:	46bd      	mov	sp, r7
 800896a:	bd80      	pop	{r7, pc}

0800896c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800896c:	b580      	push	{r7, lr}
 800896e:	b082      	sub	sp, #8
 8008970:	af00      	add	r7, sp, #0
 8008972:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800897a:	4618      	mov	r0, r3
 800897c:	f7fe fd87 	bl	800748e <USBD_LL_DevDisconnected>
}
 8008980:	bf00      	nop
 8008982:	3708      	adds	r7, #8
 8008984:	46bd      	mov	sp, r7
 8008986:	bd80      	pop	{r7, pc}

08008988 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008988:	b580      	push	{r7, lr}
 800898a:	b082      	sub	sp, #8
 800898c:	af00      	add	r7, sp, #0
 800898e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	781b      	ldrb	r3, [r3, #0]
 8008994:	2b00      	cmp	r3, #0
 8008996:	d13c      	bne.n	8008a12 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8008998:	4a20      	ldr	r2, [pc, #128]	; (8008a1c <USBD_LL_Init+0x94>)
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	4a1e      	ldr	r2, [pc, #120]	; (8008a1c <USBD_LL_Init+0x94>)
 80089a4:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80089a8:	4b1c      	ldr	r3, [pc, #112]	; (8008a1c <USBD_LL_Init+0x94>)
 80089aa:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80089ae:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80089b0:	4b1a      	ldr	r3, [pc, #104]	; (8008a1c <USBD_LL_Init+0x94>)
 80089b2:	2204      	movs	r2, #4
 80089b4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80089b6:	4b19      	ldr	r3, [pc, #100]	; (8008a1c <USBD_LL_Init+0x94>)
 80089b8:	2202      	movs	r2, #2
 80089ba:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80089bc:	4b17      	ldr	r3, [pc, #92]	; (8008a1c <USBD_LL_Init+0x94>)
 80089be:	2200      	movs	r2, #0
 80089c0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80089c2:	4b16      	ldr	r3, [pc, #88]	; (8008a1c <USBD_LL_Init+0x94>)
 80089c4:	2202      	movs	r2, #2
 80089c6:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80089c8:	4b14      	ldr	r3, [pc, #80]	; (8008a1c <USBD_LL_Init+0x94>)
 80089ca:	2201      	movs	r2, #1
 80089cc:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80089ce:	4b13      	ldr	r3, [pc, #76]	; (8008a1c <USBD_LL_Init+0x94>)
 80089d0:	2200      	movs	r2, #0
 80089d2:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80089d4:	4b11      	ldr	r3, [pc, #68]	; (8008a1c <USBD_LL_Init+0x94>)
 80089d6:	2200      	movs	r2, #0
 80089d8:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80089da:	4b10      	ldr	r3, [pc, #64]	; (8008a1c <USBD_LL_Init+0x94>)
 80089dc:	2200      	movs	r2, #0
 80089de:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80089e0:	4b0e      	ldr	r3, [pc, #56]	; (8008a1c <USBD_LL_Init+0x94>)
 80089e2:	2200      	movs	r2, #0
 80089e4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80089e6:	480d      	ldr	r0, [pc, #52]	; (8008a1c <USBD_LL_Init+0x94>)
 80089e8:	f7f9 fae7 	bl	8001fba <HAL_PCD_Init>
 80089ec:	4603      	mov	r3, r0
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d001      	beq.n	80089f6 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80089f2:	f7f7 fe4b 	bl	800068c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80089f6:	2180      	movs	r1, #128	; 0x80
 80089f8:	4808      	ldr	r0, [pc, #32]	; (8008a1c <USBD_LL_Init+0x94>)
 80089fa:	f7fa fc44 	bl	8003286 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80089fe:	2240      	movs	r2, #64	; 0x40
 8008a00:	2100      	movs	r1, #0
 8008a02:	4806      	ldr	r0, [pc, #24]	; (8008a1c <USBD_LL_Init+0x94>)
 8008a04:	f7fa fbf8 	bl	80031f8 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8008a08:	2280      	movs	r2, #128	; 0x80
 8008a0a:	2101      	movs	r1, #1
 8008a0c:	4803      	ldr	r0, [pc, #12]	; (8008a1c <USBD_LL_Init+0x94>)
 8008a0e:	f7fa fbf3 	bl	80031f8 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8008a12:	2300      	movs	r3, #0
}
 8008a14:	4618      	mov	r0, r3
 8008a16:	3708      	adds	r7, #8
 8008a18:	46bd      	mov	sp, r7
 8008a1a:	bd80      	pop	{r7, pc}
 8008a1c:	2000129c 	.word	0x2000129c

08008a20 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008a20:	b580      	push	{r7, lr}
 8008a22:	b084      	sub	sp, #16
 8008a24:	af00      	add	r7, sp, #0
 8008a26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008a28:	2300      	movs	r3, #0
 8008a2a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008a2c:	2300      	movs	r3, #0
 8008a2e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008a36:	4618      	mov	r0, r3
 8008a38:	f7f9 fbdc 	bl	80021f4 <HAL_PCD_Start>
 8008a3c:	4603      	mov	r3, r0
 8008a3e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008a40:	7bfb      	ldrb	r3, [r7, #15]
 8008a42:	4618      	mov	r0, r3
 8008a44:	f000 f942 	bl	8008ccc <USBD_Get_USB_Status>
 8008a48:	4603      	mov	r3, r0
 8008a4a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008a4c:	7bbb      	ldrb	r3, [r7, #14]
}
 8008a4e:	4618      	mov	r0, r3
 8008a50:	3710      	adds	r7, #16
 8008a52:	46bd      	mov	sp, r7
 8008a54:	bd80      	pop	{r7, pc}

08008a56 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008a56:	b580      	push	{r7, lr}
 8008a58:	b084      	sub	sp, #16
 8008a5a:	af00      	add	r7, sp, #0
 8008a5c:	6078      	str	r0, [r7, #4]
 8008a5e:	4608      	mov	r0, r1
 8008a60:	4611      	mov	r1, r2
 8008a62:	461a      	mov	r2, r3
 8008a64:	4603      	mov	r3, r0
 8008a66:	70fb      	strb	r3, [r7, #3]
 8008a68:	460b      	mov	r3, r1
 8008a6a:	70bb      	strb	r3, [r7, #2]
 8008a6c:	4613      	mov	r3, r2
 8008a6e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008a70:	2300      	movs	r3, #0
 8008a72:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008a74:	2300      	movs	r3, #0
 8008a76:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008a7e:	78bb      	ldrb	r3, [r7, #2]
 8008a80:	883a      	ldrh	r2, [r7, #0]
 8008a82:	78f9      	ldrb	r1, [r7, #3]
 8008a84:	f7f9 ffc0 	bl	8002a08 <HAL_PCD_EP_Open>
 8008a88:	4603      	mov	r3, r0
 8008a8a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008a8c:	7bfb      	ldrb	r3, [r7, #15]
 8008a8e:	4618      	mov	r0, r3
 8008a90:	f000 f91c 	bl	8008ccc <USBD_Get_USB_Status>
 8008a94:	4603      	mov	r3, r0
 8008a96:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008a98:	7bbb      	ldrb	r3, [r7, #14]
}
 8008a9a:	4618      	mov	r0, r3
 8008a9c:	3710      	adds	r7, #16
 8008a9e:	46bd      	mov	sp, r7
 8008aa0:	bd80      	pop	{r7, pc}

08008aa2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008aa2:	b580      	push	{r7, lr}
 8008aa4:	b084      	sub	sp, #16
 8008aa6:	af00      	add	r7, sp, #0
 8008aa8:	6078      	str	r0, [r7, #4]
 8008aaa:	460b      	mov	r3, r1
 8008aac:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008aae:	2300      	movs	r3, #0
 8008ab0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008ab2:	2300      	movs	r3, #0
 8008ab4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008abc:	78fa      	ldrb	r2, [r7, #3]
 8008abe:	4611      	mov	r1, r2
 8008ac0:	4618      	mov	r0, r3
 8008ac2:	f7fa f809 	bl	8002ad8 <HAL_PCD_EP_Close>
 8008ac6:	4603      	mov	r3, r0
 8008ac8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008aca:	7bfb      	ldrb	r3, [r7, #15]
 8008acc:	4618      	mov	r0, r3
 8008ace:	f000 f8fd 	bl	8008ccc <USBD_Get_USB_Status>
 8008ad2:	4603      	mov	r3, r0
 8008ad4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008ad6:	7bbb      	ldrb	r3, [r7, #14]
}
 8008ad8:	4618      	mov	r0, r3
 8008ada:	3710      	adds	r7, #16
 8008adc:	46bd      	mov	sp, r7
 8008ade:	bd80      	pop	{r7, pc}

08008ae0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008ae0:	b580      	push	{r7, lr}
 8008ae2:	b084      	sub	sp, #16
 8008ae4:	af00      	add	r7, sp, #0
 8008ae6:	6078      	str	r0, [r7, #4]
 8008ae8:	460b      	mov	r3, r1
 8008aea:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008aec:	2300      	movs	r3, #0
 8008aee:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008af0:	2300      	movs	r3, #0
 8008af2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008afa:	78fa      	ldrb	r2, [r7, #3]
 8008afc:	4611      	mov	r1, r2
 8008afe:	4618      	mov	r0, r3
 8008b00:	f7fa f8e1 	bl	8002cc6 <HAL_PCD_EP_SetStall>
 8008b04:	4603      	mov	r3, r0
 8008b06:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008b08:	7bfb      	ldrb	r3, [r7, #15]
 8008b0a:	4618      	mov	r0, r3
 8008b0c:	f000 f8de 	bl	8008ccc <USBD_Get_USB_Status>
 8008b10:	4603      	mov	r3, r0
 8008b12:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008b14:	7bbb      	ldrb	r3, [r7, #14]
}
 8008b16:	4618      	mov	r0, r3
 8008b18:	3710      	adds	r7, #16
 8008b1a:	46bd      	mov	sp, r7
 8008b1c:	bd80      	pop	{r7, pc}

08008b1e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008b1e:	b580      	push	{r7, lr}
 8008b20:	b084      	sub	sp, #16
 8008b22:	af00      	add	r7, sp, #0
 8008b24:	6078      	str	r0, [r7, #4]
 8008b26:	460b      	mov	r3, r1
 8008b28:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008b2a:	2300      	movs	r3, #0
 8008b2c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008b2e:	2300      	movs	r3, #0
 8008b30:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008b38:	78fa      	ldrb	r2, [r7, #3]
 8008b3a:	4611      	mov	r1, r2
 8008b3c:	4618      	mov	r0, r3
 8008b3e:	f7fa f926 	bl	8002d8e <HAL_PCD_EP_ClrStall>
 8008b42:	4603      	mov	r3, r0
 8008b44:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008b46:	7bfb      	ldrb	r3, [r7, #15]
 8008b48:	4618      	mov	r0, r3
 8008b4a:	f000 f8bf 	bl	8008ccc <USBD_Get_USB_Status>
 8008b4e:	4603      	mov	r3, r0
 8008b50:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008b52:	7bbb      	ldrb	r3, [r7, #14]
}
 8008b54:	4618      	mov	r0, r3
 8008b56:	3710      	adds	r7, #16
 8008b58:	46bd      	mov	sp, r7
 8008b5a:	bd80      	pop	{r7, pc}

08008b5c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008b5c:	b480      	push	{r7}
 8008b5e:	b085      	sub	sp, #20
 8008b60:	af00      	add	r7, sp, #0
 8008b62:	6078      	str	r0, [r7, #4]
 8008b64:	460b      	mov	r3, r1
 8008b66:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008b6e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008b70:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	da0b      	bge.n	8008b90 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008b78:	78fb      	ldrb	r3, [r7, #3]
 8008b7a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008b7e:	68f9      	ldr	r1, [r7, #12]
 8008b80:	4613      	mov	r3, r2
 8008b82:	00db      	lsls	r3, r3, #3
 8008b84:	1a9b      	subs	r3, r3, r2
 8008b86:	009b      	lsls	r3, r3, #2
 8008b88:	440b      	add	r3, r1
 8008b8a:	333e      	adds	r3, #62	; 0x3e
 8008b8c:	781b      	ldrb	r3, [r3, #0]
 8008b8e:	e00b      	b.n	8008ba8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008b90:	78fb      	ldrb	r3, [r7, #3]
 8008b92:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008b96:	68f9      	ldr	r1, [r7, #12]
 8008b98:	4613      	mov	r3, r2
 8008b9a:	00db      	lsls	r3, r3, #3
 8008b9c:	1a9b      	subs	r3, r3, r2
 8008b9e:	009b      	lsls	r3, r3, #2
 8008ba0:	440b      	add	r3, r1
 8008ba2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8008ba6:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008ba8:	4618      	mov	r0, r3
 8008baa:	3714      	adds	r7, #20
 8008bac:	46bd      	mov	sp, r7
 8008bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bb2:	4770      	bx	lr

08008bb4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008bb4:	b580      	push	{r7, lr}
 8008bb6:	b084      	sub	sp, #16
 8008bb8:	af00      	add	r7, sp, #0
 8008bba:	6078      	str	r0, [r7, #4]
 8008bbc:	460b      	mov	r3, r1
 8008bbe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008bc0:	2300      	movs	r3, #0
 8008bc2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008bc4:	2300      	movs	r3, #0
 8008bc6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008bce:	78fa      	ldrb	r2, [r7, #3]
 8008bd0:	4611      	mov	r1, r2
 8008bd2:	4618      	mov	r0, r3
 8008bd4:	f7f9 fef3 	bl	80029be <HAL_PCD_SetAddress>
 8008bd8:	4603      	mov	r3, r0
 8008bda:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008bdc:	7bfb      	ldrb	r3, [r7, #15]
 8008bde:	4618      	mov	r0, r3
 8008be0:	f000 f874 	bl	8008ccc <USBD_Get_USB_Status>
 8008be4:	4603      	mov	r3, r0
 8008be6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008be8:	7bbb      	ldrb	r3, [r7, #14]
}
 8008bea:	4618      	mov	r0, r3
 8008bec:	3710      	adds	r7, #16
 8008bee:	46bd      	mov	sp, r7
 8008bf0:	bd80      	pop	{r7, pc}

08008bf2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008bf2:	b580      	push	{r7, lr}
 8008bf4:	b086      	sub	sp, #24
 8008bf6:	af00      	add	r7, sp, #0
 8008bf8:	60f8      	str	r0, [r7, #12]
 8008bfa:	607a      	str	r2, [r7, #4]
 8008bfc:	603b      	str	r3, [r7, #0]
 8008bfe:	460b      	mov	r3, r1
 8008c00:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008c02:	2300      	movs	r3, #0
 8008c04:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008c06:	2300      	movs	r3, #0
 8008c08:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008c10:	7af9      	ldrb	r1, [r7, #11]
 8008c12:	683b      	ldr	r3, [r7, #0]
 8008c14:	687a      	ldr	r2, [r7, #4]
 8008c16:	f7fa f80c 	bl	8002c32 <HAL_PCD_EP_Transmit>
 8008c1a:	4603      	mov	r3, r0
 8008c1c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008c1e:	7dfb      	ldrb	r3, [r7, #23]
 8008c20:	4618      	mov	r0, r3
 8008c22:	f000 f853 	bl	8008ccc <USBD_Get_USB_Status>
 8008c26:	4603      	mov	r3, r0
 8008c28:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008c2a:	7dbb      	ldrb	r3, [r7, #22]
}
 8008c2c:	4618      	mov	r0, r3
 8008c2e:	3718      	adds	r7, #24
 8008c30:	46bd      	mov	sp, r7
 8008c32:	bd80      	pop	{r7, pc}

08008c34 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008c34:	b580      	push	{r7, lr}
 8008c36:	b086      	sub	sp, #24
 8008c38:	af00      	add	r7, sp, #0
 8008c3a:	60f8      	str	r0, [r7, #12]
 8008c3c:	607a      	str	r2, [r7, #4]
 8008c3e:	603b      	str	r3, [r7, #0]
 8008c40:	460b      	mov	r3, r1
 8008c42:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008c44:	2300      	movs	r3, #0
 8008c46:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008c48:	2300      	movs	r3, #0
 8008c4a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008c52:	7af9      	ldrb	r1, [r7, #11]
 8008c54:	683b      	ldr	r3, [r7, #0]
 8008c56:	687a      	ldr	r2, [r7, #4]
 8008c58:	f7f9 ff88 	bl	8002b6c <HAL_PCD_EP_Receive>
 8008c5c:	4603      	mov	r3, r0
 8008c5e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008c60:	7dfb      	ldrb	r3, [r7, #23]
 8008c62:	4618      	mov	r0, r3
 8008c64:	f000 f832 	bl	8008ccc <USBD_Get_USB_Status>
 8008c68:	4603      	mov	r3, r0
 8008c6a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008c6c:	7dbb      	ldrb	r3, [r7, #22]
}
 8008c6e:	4618      	mov	r0, r3
 8008c70:	3718      	adds	r7, #24
 8008c72:	46bd      	mov	sp, r7
 8008c74:	bd80      	pop	{r7, pc}

08008c76 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008c76:	b580      	push	{r7, lr}
 8008c78:	b082      	sub	sp, #8
 8008c7a:	af00      	add	r7, sp, #0
 8008c7c:	6078      	str	r0, [r7, #4]
 8008c7e:	460b      	mov	r3, r1
 8008c80:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008c88:	78fa      	ldrb	r2, [r7, #3]
 8008c8a:	4611      	mov	r1, r2
 8008c8c:	4618      	mov	r0, r3
 8008c8e:	f7f9 ffb8 	bl	8002c02 <HAL_PCD_EP_GetRxCount>
 8008c92:	4603      	mov	r3, r0
}
 8008c94:	4618      	mov	r0, r3
 8008c96:	3708      	adds	r7, #8
 8008c98:	46bd      	mov	sp, r7
 8008c9a:	bd80      	pop	{r7, pc}

08008c9c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008c9c:	b480      	push	{r7}
 8008c9e:	b083      	sub	sp, #12
 8008ca0:	af00      	add	r7, sp, #0
 8008ca2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008ca4:	4b03      	ldr	r3, [pc, #12]	; (8008cb4 <USBD_static_malloc+0x18>)
}
 8008ca6:	4618      	mov	r0, r3
 8008ca8:	370c      	adds	r7, #12
 8008caa:	46bd      	mov	sp, r7
 8008cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cb0:	4770      	bx	lr
 8008cb2:	bf00      	nop
 8008cb4:	200016a4 	.word	0x200016a4

08008cb8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008cb8:	b480      	push	{r7}
 8008cba:	b083      	sub	sp, #12
 8008cbc:	af00      	add	r7, sp, #0
 8008cbe:	6078      	str	r0, [r7, #4]

}
 8008cc0:	bf00      	nop
 8008cc2:	370c      	adds	r7, #12
 8008cc4:	46bd      	mov	sp, r7
 8008cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cca:	4770      	bx	lr

08008ccc <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008ccc:	b480      	push	{r7}
 8008cce:	b085      	sub	sp, #20
 8008cd0:	af00      	add	r7, sp, #0
 8008cd2:	4603      	mov	r3, r0
 8008cd4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008cd6:	2300      	movs	r3, #0
 8008cd8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008cda:	79fb      	ldrb	r3, [r7, #7]
 8008cdc:	2b03      	cmp	r3, #3
 8008cde:	d817      	bhi.n	8008d10 <USBD_Get_USB_Status+0x44>
 8008ce0:	a201      	add	r2, pc, #4	; (adr r2, 8008ce8 <USBD_Get_USB_Status+0x1c>)
 8008ce2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ce6:	bf00      	nop
 8008ce8:	08008cf9 	.word	0x08008cf9
 8008cec:	08008cff 	.word	0x08008cff
 8008cf0:	08008d05 	.word	0x08008d05
 8008cf4:	08008d0b 	.word	0x08008d0b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008cf8:	2300      	movs	r3, #0
 8008cfa:	73fb      	strb	r3, [r7, #15]
    break;
 8008cfc:	e00b      	b.n	8008d16 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008cfe:	2303      	movs	r3, #3
 8008d00:	73fb      	strb	r3, [r7, #15]
    break;
 8008d02:	e008      	b.n	8008d16 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008d04:	2301      	movs	r3, #1
 8008d06:	73fb      	strb	r3, [r7, #15]
    break;
 8008d08:	e005      	b.n	8008d16 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008d0a:	2303      	movs	r3, #3
 8008d0c:	73fb      	strb	r3, [r7, #15]
    break;
 8008d0e:	e002      	b.n	8008d16 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008d10:	2303      	movs	r3, #3
 8008d12:	73fb      	strb	r3, [r7, #15]
    break;
 8008d14:	bf00      	nop
  }
  return usb_status;
 8008d16:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d18:	4618      	mov	r0, r3
 8008d1a:	3714      	adds	r7, #20
 8008d1c:	46bd      	mov	sp, r7
 8008d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d22:	4770      	bx	lr

08008d24 <main>:
 */

#include "main.h"

int main(void)
{
 8008d24:	b580      	push	{r7, lr}
 8008d26:	af00      	add	r7, sp, #0

	hwInit();
 8008d28:	f7f8 f862 	bl	8000df0 <hwInit>
	apInit();
 8008d2c:	f7f7 fbd6 	bl	80004dc <apInit>

	apMain();
 8008d30:	f7f7 fbe2 	bl	80004f8 <apMain>
	return 0;
 8008d34:	2300      	movs	r3, #0
}
 8008d36:	4618      	mov	r0, r3
 8008d38:	bd80      	pop	{r7, pc}
	...

08008d3c <__libc_init_array>:
 8008d3c:	b570      	push	{r4, r5, r6, lr}
 8008d3e:	4d0d      	ldr	r5, [pc, #52]	; (8008d74 <__libc_init_array+0x38>)
 8008d40:	4c0d      	ldr	r4, [pc, #52]	; (8008d78 <__libc_init_array+0x3c>)
 8008d42:	1b64      	subs	r4, r4, r5
 8008d44:	10a4      	asrs	r4, r4, #2
 8008d46:	2600      	movs	r6, #0
 8008d48:	42a6      	cmp	r6, r4
 8008d4a:	d109      	bne.n	8008d60 <__libc_init_array+0x24>
 8008d4c:	4d0b      	ldr	r5, [pc, #44]	; (8008d7c <__libc_init_array+0x40>)
 8008d4e:	4c0c      	ldr	r4, [pc, #48]	; (8008d80 <__libc_init_array+0x44>)
 8008d50:	f000 f820 	bl	8008d94 <_init>
 8008d54:	1b64      	subs	r4, r4, r5
 8008d56:	10a4      	asrs	r4, r4, #2
 8008d58:	2600      	movs	r6, #0
 8008d5a:	42a6      	cmp	r6, r4
 8008d5c:	d105      	bne.n	8008d6a <__libc_init_array+0x2e>
 8008d5e:	bd70      	pop	{r4, r5, r6, pc}
 8008d60:	f855 3b04 	ldr.w	r3, [r5], #4
 8008d64:	4798      	blx	r3
 8008d66:	3601      	adds	r6, #1
 8008d68:	e7ee      	b.n	8008d48 <__libc_init_array+0xc>
 8008d6a:	f855 3b04 	ldr.w	r3, [r5], #4
 8008d6e:	4798      	blx	r3
 8008d70:	3601      	adds	r6, #1
 8008d72:	e7f2      	b.n	8008d5a <__libc_init_array+0x1e>
 8008d74:	08008e1c 	.word	0x08008e1c
 8008d78:	08008e1c 	.word	0x08008e1c
 8008d7c:	08008e1c 	.word	0x08008e1c
 8008d80:	08008e20 	.word	0x08008e20

08008d84 <memset>:
 8008d84:	4402      	add	r2, r0
 8008d86:	4603      	mov	r3, r0
 8008d88:	4293      	cmp	r3, r2
 8008d8a:	d100      	bne.n	8008d8e <memset+0xa>
 8008d8c:	4770      	bx	lr
 8008d8e:	f803 1b01 	strb.w	r1, [r3], #1
 8008d92:	e7f9      	b.n	8008d88 <memset+0x4>

08008d94 <_init>:
 8008d94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d96:	bf00      	nop
 8008d98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008d9a:	bc08      	pop	{r3}
 8008d9c:	469e      	mov	lr, r3
 8008d9e:	4770      	bx	lr

08008da0 <_fini>:
 8008da0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008da2:	bf00      	nop
 8008da4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008da6:	bc08      	pop	{r3}
 8008da8:	469e      	mov	lr, r3
 8008daa:	4770      	bx	lr
