
stmf411re_fw.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007848  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d0  080079e8  080079e8  000179e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007ab8  08007ab8  0002020c  2**0
                  CONTENTS
  4 .ARM          00000008  08007ab8  08007ab8  00017ab8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007ac0  08007ac0  0002020c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007ac0  08007ac0  00017ac0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007ac4  08007ac4  00017ac4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000020c  20000000  08007ac8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001568  2000020c  08007cd4  0002020c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001774  08007cd4  00021774  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011042  00000000  00000000  0002023c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000038b9  00000000  00000000  0003127e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f28  00000000  00000000  00034b38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d30  00000000  00000000  00035a60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001bede  00000000  00000000  00036790  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c146  00000000  00000000  0005266e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008d7fc  00000000  00000000  0006e7b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000fbfb0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003e60  00000000  00000000  000fc000  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000020c 	.word	0x2000020c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080079d0 	.word	0x080079d0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000210 	.word	0x20000210
 80001dc:	080079d0 	.word	0x080079d0

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <apInit>:




void apInit(void)
{
 8000584:	b480      	push	{r7}
 8000586:	af00      	add	r7, sp, #0

}
 8000588:	bf00      	nop
 800058a:	46bd      	mov	sp, r7
 800058c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000590:	4770      	bx	lr
	...

08000594 <apMain>:

void apMain(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b084      	sub	sp, #16
 8000598:	af00      	add	r7, sp, #0
	uint32_t pre_time;
	uint32_t pre_baud;
	uint32_t led_blink_time = 500;
 800059a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800059e:	607b      	str	r3, [r7, #4]

	if(resetGetCount() >= 2)
 80005a0:	f000 fa9a 	bl	8000ad8 <resetGetCount>
 80005a4:	4603      	mov	r3, r0
 80005a6:	2b01      	cmp	r3, #1
 80005a8:	d901      	bls.n	80005ae <apMain+0x1a>
	{
		led_blink_time = 100;
 80005aa:	2364      	movs	r3, #100	; 0x64
 80005ac:	607b      	str	r3, [r7, #4]
	}

	pre_baud = uartGetBaud(_DEF_UART1);
 80005ae:	2000      	movs	r0, #0
 80005b0:	f000 fba2 	bl	8000cf8 <uartGetBaud>
 80005b4:	60b8      	str	r0, [r7, #8]
	pre_time = millis();
 80005b6:	f000 f886 	bl	80006c6 <millis>
 80005ba:	60f8      	str	r0, [r7, #12]


	while (1)
	{
		if(millis() - pre_time >= led_blink_time)
 80005bc:	f000 f883 	bl	80006c6 <millis>
 80005c0:	4602      	mov	r2, r0
 80005c2:	68fb      	ldr	r3, [r7, #12]
 80005c4:	1ad3      	subs	r3, r2, r3
 80005c6:	687a      	ldr	r2, [r7, #4]
 80005c8:	429a      	cmp	r2, r3
 80005ca:	d80d      	bhi.n	80005e8 <apMain+0x54>
		{
			pre_time = millis();
 80005cc:	f000 f87b 	bl	80006c6 <millis>
 80005d0:	60f8      	str	r0, [r7, #12]
			ledToggle(_DEF_LED1);
 80005d2:	2000      	movs	r0, #0
 80005d4:	f000 fa34 	bl	8000a40 <ledToggle>

			uartPrint(_DEF_UART1, "Reset Count : %d\n", resetGetCount());
 80005d8:	f000 fa7e 	bl	8000ad8 <resetGetCount>
 80005dc:	4603      	mov	r3, r0
 80005de:	461a      	mov	r2, r3
 80005e0:	4914      	ldr	r1, [pc, #80]	; (8000634 <apMain+0xa0>)
 80005e2:	2000      	movs	r0, #0
 80005e4:	f000 fb50 	bl	8000c88 <uartPrint>
		}

		if(uartAvailable(_DEF_UART1) > 0 )
 80005e8:	2000      	movs	r0, #0
 80005ea:	f000 fb13 	bl	8000c14 <uartAvailable>
 80005ee:	4603      	mov	r3, r0
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d00a      	beq.n	800060a <apMain+0x76>
		{
			uint8_t rx_data;

			rx_data = uartRead(_DEF_UART1);
 80005f4:	2000      	movs	r0, #0
 80005f6:	f000 fb20 	bl	8000c3a <uartRead>
 80005fa:	4603      	mov	r3, r0
 80005fc:	70fb      	strb	r3, [r7, #3]

			uartPrint(_DEF_UART1, "RX_DATA = %c , 0x%x\n", rx_data, rx_data);
 80005fe:	78fa      	ldrb	r2, [r7, #3]
 8000600:	78fb      	ldrb	r3, [r7, #3]
 8000602:	490d      	ldr	r1, [pc, #52]	; (8000638 <apMain+0xa4>)
 8000604:	2000      	movs	r0, #0
 8000606:	f000 fb3f 	bl	8000c88 <uartPrint>
		}

		if(pre_baud != uartGetBaud(_DEF_UART1))
 800060a:	2000      	movs	r0, #0
 800060c:	f000 fb74 	bl	8000cf8 <uartGetBaud>
 8000610:	4602      	mov	r2, r0
 8000612:	68bb      	ldr	r3, [r7, #8]
 8000614:	4293      	cmp	r3, r2
 8000616:	d0d1      	beq.n	80005bc <apMain+0x28>
		{
			pre_baud = uartGetBaud(_DEF_UART1);
 8000618:	2000      	movs	r0, #0
 800061a:	f000 fb6d 	bl	8000cf8 <uartGetBaud>
 800061e:	60b8      	str	r0, [r7, #8]
			uartPrint(_DEF_UART1, "Changed buad rate: %d \n", uartGetBaud(_DEF_UART1));
 8000620:	2000      	movs	r0, #0
 8000622:	f000 fb69 	bl	8000cf8 <uartGetBaud>
 8000626:	4603      	mov	r3, r0
 8000628:	461a      	mov	r2, r3
 800062a:	4904      	ldr	r1, [pc, #16]	; (800063c <apMain+0xa8>)
 800062c:	2000      	movs	r0, #0
 800062e:	f000 fb2b 	bl	8000c88 <uartPrint>
		if(millis() - pre_time >= led_blink_time)
 8000632:	e7c3      	b.n	80005bc <apMain+0x28>
 8000634:	080079e8 	.word	0x080079e8
 8000638:	080079fc 	.word	0x080079fc
 800063c:	08007a14 	.word	0x08007a14

08000640 <bspInit>:

#include "bsp.h"
void SystemClock_Config(void);

void bspInit(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b084      	sub	sp, #16
 8000644:	af00      	add	r7, sp, #0
  HAL_Init();
 8000646:	f000 fbb5 	bl	8000db4 <HAL_Init>
  SystemClock_Config();
 800064a:	f000 f843 	bl	80006d4 <SystemClock_Config>

  __HAL_RCC_GPIOC_CLK_ENABLE();
 800064e:	2300      	movs	r3, #0
 8000650:	60fb      	str	r3, [r7, #12]
 8000652:	4b16      	ldr	r3, [pc, #88]	; (80006ac <bspInit+0x6c>)
 8000654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000656:	4a15      	ldr	r2, [pc, #84]	; (80006ac <bspInit+0x6c>)
 8000658:	f043 0304 	orr.w	r3, r3, #4
 800065c:	6313      	str	r3, [r2, #48]	; 0x30
 800065e:	4b13      	ldr	r3, [pc, #76]	; (80006ac <bspInit+0x6c>)
 8000660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000662:	f003 0304 	and.w	r3, r3, #4
 8000666:	60fb      	str	r3, [r7, #12]
 8000668:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800066a:	2300      	movs	r3, #0
 800066c:	60bb      	str	r3, [r7, #8]
 800066e:	4b0f      	ldr	r3, [pc, #60]	; (80006ac <bspInit+0x6c>)
 8000670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000672:	4a0e      	ldr	r2, [pc, #56]	; (80006ac <bspInit+0x6c>)
 8000674:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000678:	6313      	str	r3, [r2, #48]	; 0x30
 800067a:	4b0c      	ldr	r3, [pc, #48]	; (80006ac <bspInit+0x6c>)
 800067c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800067e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000682:	60bb      	str	r3, [r7, #8]
 8000684:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000686:	2300      	movs	r3, #0
 8000688:	607b      	str	r3, [r7, #4]
 800068a:	4b08      	ldr	r3, [pc, #32]	; (80006ac <bspInit+0x6c>)
 800068c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800068e:	4a07      	ldr	r2, [pc, #28]	; (80006ac <bspInit+0x6c>)
 8000690:	f043 0301 	orr.w	r3, r3, #1
 8000694:	6313      	str	r3, [r2, #48]	; 0x30
 8000696:	4b05      	ldr	r3, [pc, #20]	; (80006ac <bspInit+0x6c>)
 8000698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800069a:	f003 0301 	and.w	r3, r3, #1
 800069e:	607b      	str	r3, [r7, #4]
 80006a0:	687b      	ldr	r3, [r7, #4]

}
 80006a2:	bf00      	nop
 80006a4:	3710      	adds	r7, #16
 80006a6:	46bd      	mov	sp, r7
 80006a8:	bd80      	pop	{r7, pc}
 80006aa:	bf00      	nop
 80006ac:	40023800 	.word	0x40023800

080006b0 <delay>:
void delay(uint32_t ms)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b082      	sub	sp, #8
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	6078      	str	r0, [r7, #4]
  HAL_Delay(ms);
 80006b8:	6878      	ldr	r0, [r7, #4]
 80006ba:	f000 fbed 	bl	8000e98 <HAL_Delay>
}
 80006be:	bf00      	nop
 80006c0:	3708      	adds	r7, #8
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bd80      	pop	{r7, pc}

080006c6 <millis>:
uint32_t millis(void)
{
 80006c6:	b580      	push	{r7, lr}
 80006c8:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80006ca:	f000 fbd9 	bl	8000e80 <HAL_GetTick>
 80006ce:	4603      	mov	r3, r0
}
 80006d0:	4618      	mov	r0, r3
 80006d2:	bd80      	pop	{r7, pc}

080006d4 <SystemClock_Config>:




void SystemClock_Config(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b094      	sub	sp, #80	; 0x50
 80006d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006da:	f107 0320 	add.w	r3, r7, #32
 80006de:	2230      	movs	r2, #48	; 0x30
 80006e0:	2100      	movs	r1, #0
 80006e2:	4618      	mov	r0, r3
 80006e4:	f006 fce4 	bl	80070b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006e8:	f107 030c 	add.w	r3, r7, #12
 80006ec:	2200      	movs	r2, #0
 80006ee:	601a      	str	r2, [r3, #0]
 80006f0:	605a      	str	r2, [r3, #4]
 80006f2:	609a      	str	r2, [r3, #8]
 80006f4:	60da      	str	r2, [r3, #12]
 80006f6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006f8:	2300      	movs	r3, #0
 80006fa:	60bb      	str	r3, [r7, #8]
 80006fc:	4b28      	ldr	r3, [pc, #160]	; (80007a0 <SystemClock_Config+0xcc>)
 80006fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000700:	4a27      	ldr	r2, [pc, #156]	; (80007a0 <SystemClock_Config+0xcc>)
 8000702:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000706:	6413      	str	r3, [r2, #64]	; 0x40
 8000708:	4b25      	ldr	r3, [pc, #148]	; (80007a0 <SystemClock_Config+0xcc>)
 800070a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800070c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000710:	60bb      	str	r3, [r7, #8]
 8000712:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000714:	2300      	movs	r3, #0
 8000716:	607b      	str	r3, [r7, #4]
 8000718:	4b22      	ldr	r3, [pc, #136]	; (80007a4 <SystemClock_Config+0xd0>)
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	4a21      	ldr	r2, [pc, #132]	; (80007a4 <SystemClock_Config+0xd0>)
 800071e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000722:	6013      	str	r3, [r2, #0]
 8000724:	4b1f      	ldr	r3, [pc, #124]	; (80007a4 <SystemClock_Config+0xd0>)
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800072c:	607b      	str	r3, [r7, #4]
 800072e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8000730:	2305      	movs	r3, #5
 8000732:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000734:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000738:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800073a:	2301      	movs	r3, #1
 800073c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800073e:	2302      	movs	r3, #2
 8000740:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000742:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000746:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000748:	2319      	movs	r3, #25
 800074a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 800074c:	23c0      	movs	r3, #192	; 0xc0
 800074e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000750:	2302      	movs	r3, #2
 8000752:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000754:	2304      	movs	r3, #4
 8000756:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000758:	f107 0320 	add.w	r3, r7, #32
 800075c:	4618      	mov	r0, r3
 800075e:	f002 f80b 	bl	8002778 <HAL_RCC_OscConfig>
 8000762:	4603      	mov	r3, r0
 8000764:	2b00      	cmp	r3, #0
 8000766:	d001      	beq.n	800076c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000768:	f000 f81e 	bl	80007a8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800076c:	230f      	movs	r3, #15
 800076e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000770:	2302      	movs	r3, #2
 8000772:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000774:	2300      	movs	r3, #0
 8000776:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000778:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800077c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800077e:	2300      	movs	r3, #0
 8000780:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000782:	f107 030c 	add.w	r3, r7, #12
 8000786:	2103      	movs	r1, #3
 8000788:	4618      	mov	r0, r3
 800078a:	f002 fa6d 	bl	8002c68 <HAL_RCC_ClockConfig>
 800078e:	4603      	mov	r3, r0
 8000790:	2b00      	cmp	r3, #0
 8000792:	d001      	beq.n	8000798 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000794:	f000 f808 	bl	80007a8 <Error_Handler>
  }
}
 8000798:	bf00      	nop
 800079a:	3750      	adds	r7, #80	; 0x50
 800079c:	46bd      	mov	sp, r7
 800079e:	bd80      	pop	{r7, pc}
 80007a0:	40023800 	.word	0x40023800
 80007a4:	40007000 	.word	0x40007000

080007a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007a8:	b480      	push	{r7}
 80007aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007ac:	b672      	cpsid	i
}
 80007ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007b0:	e7fe      	b.n	80007b0 <Error_Handler+0x8>
	...

080007b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007b4:	b480      	push	{r7}
 80007b6:	b083      	sub	sp, #12
 80007b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007ba:	2300      	movs	r3, #0
 80007bc:	607b      	str	r3, [r7, #4]
 80007be:	4b10      	ldr	r3, [pc, #64]	; (8000800 <HAL_MspInit+0x4c>)
 80007c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007c2:	4a0f      	ldr	r2, [pc, #60]	; (8000800 <HAL_MspInit+0x4c>)
 80007c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007c8:	6453      	str	r3, [r2, #68]	; 0x44
 80007ca:	4b0d      	ldr	r3, [pc, #52]	; (8000800 <HAL_MspInit+0x4c>)
 80007cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007d2:	607b      	str	r3, [r7, #4]
 80007d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007d6:	2300      	movs	r3, #0
 80007d8:	603b      	str	r3, [r7, #0]
 80007da:	4b09      	ldr	r3, [pc, #36]	; (8000800 <HAL_MspInit+0x4c>)
 80007dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007de:	4a08      	ldr	r2, [pc, #32]	; (8000800 <HAL_MspInit+0x4c>)
 80007e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007e4:	6413      	str	r3, [r2, #64]	; 0x40
 80007e6:	4b06      	ldr	r3, [pc, #24]	; (8000800 <HAL_MspInit+0x4c>)
 80007e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007ee:	603b      	str	r3, [r7, #0]
 80007f0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007f2:	bf00      	nop
 80007f4:	370c      	adds	r7, #12
 80007f6:	46bd      	mov	sp, r7
 80007f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fc:	4770      	bx	lr
 80007fe:	bf00      	nop
 8000800:	40023800 	.word	0x40023800

08000804 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000804:	b480      	push	{r7}
 8000806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000808:	e7fe      	b.n	8000808 <NMI_Handler+0x4>

0800080a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800080a:	b480      	push	{r7}
 800080c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800080e:	e7fe      	b.n	800080e <HardFault_Handler+0x4>

08000810 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000810:	b480      	push	{r7}
 8000812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000814:	e7fe      	b.n	8000814 <MemManage_Handler+0x4>

08000816 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000816:	b480      	push	{r7}
 8000818:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800081a:	e7fe      	b.n	800081a <BusFault_Handler+0x4>

0800081c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800081c:	b480      	push	{r7}
 800081e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000820:	e7fe      	b.n	8000820 <UsageFault_Handler+0x4>

08000822 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000822:	b480      	push	{r7}
 8000824:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000826:	bf00      	nop
 8000828:	46bd      	mov	sp, r7
 800082a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082e:	4770      	bx	lr

08000830 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000830:	b480      	push	{r7}
 8000832:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000834:	bf00      	nop
 8000836:	46bd      	mov	sp, r7
 8000838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083c:	4770      	bx	lr

0800083e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800083e:	b480      	push	{r7}
 8000840:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000842:	bf00      	nop
 8000844:	46bd      	mov	sp, r7
 8000846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084a:	4770      	bx	lr

0800084c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000850:	f000 fb02 	bl	8000e58 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000854:	bf00      	nop
 8000856:	bd80      	pop	{r7, pc}

08000858 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800085c:	4802      	ldr	r0, [pc, #8]	; (8000868 <OTG_FS_IRQHandler+0x10>)
 800085e:	f000 ff58 	bl	8001712 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000862:	bf00      	nop
 8000864:	bd80      	pop	{r7, pc}
 8000866:	bf00      	nop
 8000868:	2000113c 	.word	0x2000113c

0800086c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b086      	sub	sp, #24
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000874:	4a14      	ldr	r2, [pc, #80]	; (80008c8 <_sbrk+0x5c>)
 8000876:	4b15      	ldr	r3, [pc, #84]	; (80008cc <_sbrk+0x60>)
 8000878:	1ad3      	subs	r3, r2, r3
 800087a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800087c:	697b      	ldr	r3, [r7, #20]
 800087e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000880:	4b13      	ldr	r3, [pc, #76]	; (80008d0 <_sbrk+0x64>)
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	2b00      	cmp	r3, #0
 8000886:	d102      	bne.n	800088e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000888:	4b11      	ldr	r3, [pc, #68]	; (80008d0 <_sbrk+0x64>)
 800088a:	4a12      	ldr	r2, [pc, #72]	; (80008d4 <_sbrk+0x68>)
 800088c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800088e:	4b10      	ldr	r3, [pc, #64]	; (80008d0 <_sbrk+0x64>)
 8000890:	681a      	ldr	r2, [r3, #0]
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	4413      	add	r3, r2
 8000896:	693a      	ldr	r2, [r7, #16]
 8000898:	429a      	cmp	r2, r3
 800089a:	d207      	bcs.n	80008ac <_sbrk+0x40>
  {
    errno = ENOMEM;
 800089c:	f006 fbde 	bl	800705c <__errno>
 80008a0:	4603      	mov	r3, r0
 80008a2:	220c      	movs	r2, #12
 80008a4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80008a6:	f04f 33ff 	mov.w	r3, #4294967295
 80008aa:	e009      	b.n	80008c0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80008ac:	4b08      	ldr	r3, [pc, #32]	; (80008d0 <_sbrk+0x64>)
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80008b2:	4b07      	ldr	r3, [pc, #28]	; (80008d0 <_sbrk+0x64>)
 80008b4:	681a      	ldr	r2, [r3, #0]
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	4413      	add	r3, r2
 80008ba:	4a05      	ldr	r2, [pc, #20]	; (80008d0 <_sbrk+0x64>)
 80008bc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80008be:	68fb      	ldr	r3, [r7, #12]
}
 80008c0:	4618      	mov	r0, r3
 80008c2:	3718      	adds	r7, #24
 80008c4:	46bd      	mov	sp, r7
 80008c6:	bd80      	pop	{r7, pc}
 80008c8:	20020000 	.word	0x20020000
 80008cc:	00000400 	.word	0x00000400
 80008d0:	20000228 	.word	0x20000228
 80008d4:	20001778 	.word	0x20001778

080008d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80008d8:	b480      	push	{r7}
 80008da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80008dc:	4b06      	ldr	r3, [pc, #24]	; (80008f8 <SystemInit+0x20>)
 80008de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80008e2:	4a05      	ldr	r2, [pc, #20]	; (80008f8 <SystemInit+0x20>)
 80008e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80008e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008ec:	bf00      	nop
 80008ee:	46bd      	mov	sp, r7
 80008f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f4:	4770      	bx	lr
 80008f6:	bf00      	nop
 80008f8:	e000ed00 	.word	0xe000ed00

080008fc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80008fc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000934 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000900:	480d      	ldr	r0, [pc, #52]	; (8000938 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000902:	490e      	ldr	r1, [pc, #56]	; (800093c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000904:	4a0e      	ldr	r2, [pc, #56]	; (8000940 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000906:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000908:	e002      	b.n	8000910 <LoopCopyDataInit>

0800090a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800090a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800090c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800090e:	3304      	adds	r3, #4

08000910 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000910:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000912:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000914:	d3f9      	bcc.n	800090a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000916:	4a0b      	ldr	r2, [pc, #44]	; (8000944 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000918:	4c0b      	ldr	r4, [pc, #44]	; (8000948 <LoopFillZerobss+0x26>)
  movs r3, #0
 800091a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800091c:	e001      	b.n	8000922 <LoopFillZerobss>

0800091e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800091e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000920:	3204      	adds	r2, #4

08000922 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000922:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000924:	d3fb      	bcc.n	800091e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000926:	f7ff ffd7 	bl	80008d8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800092a:	f006 fb9d 	bl	8007068 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800092e:	f006 fb89 	bl	8007044 <main>
  bx  lr    
 8000932:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000934:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000938:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800093c:	2000020c 	.word	0x2000020c
  ldr r2, =_sidata
 8000940:	08007ac8 	.word	0x08007ac8
  ldr r2, =_sbss
 8000944:	2000020c 	.word	0x2000020c
  ldr r4, =_ebss
 8000948:	20001774 	.word	0x20001774

0800094c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800094c:	e7fe      	b.n	800094c <ADC_IRQHandler>
	...

08000950 <ledInit>:
{
	{GPIOC, GPIO_PIN_13, GPIO_PIN_SET, GPIO_PIN_RESET}
};

bool ledInit(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b088      	sub	sp, #32
 8000954:	af00      	add	r7, sp, #0
	bool ret = true;
 8000956:	2301      	movs	r3, #1
 8000958:	76fb      	strb	r3, [r7, #27]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800095a:	1d3b      	adds	r3, r7, #4
 800095c:	2200      	movs	r2, #0
 800095e:	601a      	str	r2, [r3, #0]
 8000960:	605a      	str	r2, [r3, #4]
 8000962:	609a      	str	r2, [r3, #8]
 8000964:	60da      	str	r2, [r3, #12]
 8000966:	611a      	str	r2, [r3, #16]

	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000968:	2300      	movs	r3, #0
 800096a:	603b      	str	r3, [r7, #0]
 800096c:	4b1d      	ldr	r3, [pc, #116]	; (80009e4 <ledInit+0x94>)
 800096e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000970:	4a1c      	ldr	r2, [pc, #112]	; (80009e4 <ledInit+0x94>)
 8000972:	f043 0301 	orr.w	r3, r3, #1
 8000976:	6313      	str	r3, [r2, #48]	; 0x30
 8000978:	4b1a      	ldr	r3, [pc, #104]	; (80009e4 <ledInit+0x94>)
 800097a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097c:	f003 0301 	and.w	r3, r3, #1
 8000980:	603b      	str	r3, [r7, #0]
 8000982:	683b      	ldr	r3, [r7, #0]

	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000984:	2301      	movs	r3, #1
 8000986:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000988:	2300      	movs	r3, #0
 800098a:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800098c:	2300      	movs	r3, #0
 800098e:	613b      	str	r3, [r7, #16]

	for(int i = 0; i < LED_MAX_CHANNEL; i++)
 8000990:	2300      	movs	r3, #0
 8000992:	61fb      	str	r3, [r7, #28]
 8000994:	e01e      	b.n	80009d4 <ledInit+0x84>
	{
		ledOff(i);
 8000996:	69fb      	ldr	r3, [r7, #28]
 8000998:	b2db      	uxtb	r3, r3
 800099a:	4618      	mov	r0, r3
 800099c:	f000 f826 	bl	80009ec <ledOff>
		GPIO_InitStruct.Pin = led_tbl[i].pin;
 80009a0:	4911      	ldr	r1, [pc, #68]	; (80009e8 <ledInit+0x98>)
 80009a2:	69fa      	ldr	r2, [r7, #28]
 80009a4:	4613      	mov	r3, r2
 80009a6:	005b      	lsls	r3, r3, #1
 80009a8:	4413      	add	r3, r2
 80009aa:	009b      	lsls	r3, r3, #2
 80009ac:	440b      	add	r3, r1
 80009ae:	3304      	adds	r3, #4
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	607b      	str	r3, [r7, #4]
		HAL_GPIO_Init(led_tbl[i].port, &GPIO_InitStruct);
 80009b4:	490c      	ldr	r1, [pc, #48]	; (80009e8 <ledInit+0x98>)
 80009b6:	69fa      	ldr	r2, [r7, #28]
 80009b8:	4613      	mov	r3, r2
 80009ba:	005b      	lsls	r3, r3, #1
 80009bc:	4413      	add	r3, r2
 80009be:	009b      	lsls	r3, r3, #2
 80009c0:	440b      	add	r3, r1
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	1d3a      	adds	r2, r7, #4
 80009c6:	4611      	mov	r1, r2
 80009c8:	4618      	mov	r0, r3
 80009ca:	f000 fb9b 	bl	8001104 <HAL_GPIO_Init>
	for(int i = 0; i < LED_MAX_CHANNEL; i++)
 80009ce:	69fb      	ldr	r3, [r7, #28]
 80009d0:	3301      	adds	r3, #1
 80009d2:	61fb      	str	r3, [r7, #28]
 80009d4:	69fb      	ldr	r3, [r7, #28]
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	dddd      	ble.n	8000996 <ledInit+0x46>
	}
	return ret;
 80009da:	7efb      	ldrb	r3, [r7, #27]
}
 80009dc:	4618      	mov	r0, r3
 80009de:	3720      	adds	r7, #32
 80009e0:	46bd      	mov	sp, r7
 80009e2:	bd80      	pop	{r7, pc}
 80009e4:	40023800 	.word	0x40023800
 80009e8:	20000004 	.word	0x20000004

080009ec <ledOff>:
void ledOn(uint8_t ch)
{
	HAL_GPIO_WritePin(led_tbl[ch].port, led_tbl[ch].pin, led_tbl[ch].on_state);
}
void ledOff(uint8_t ch)
{
 80009ec:	b590      	push	{r4, r7, lr}
 80009ee:	b083      	sub	sp, #12
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	4603      	mov	r3, r0
 80009f4:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(led_tbl[ch].port, led_tbl[ch].pin, led_tbl[ch].off_state);
 80009f6:	79fa      	ldrb	r2, [r7, #7]
 80009f8:	4910      	ldr	r1, [pc, #64]	; (8000a3c <ledOff+0x50>)
 80009fa:	4613      	mov	r3, r2
 80009fc:	005b      	lsls	r3, r3, #1
 80009fe:	4413      	add	r3, r2
 8000a00:	009b      	lsls	r3, r3, #2
 8000a02:	440b      	add	r3, r1
 8000a04:	6818      	ldr	r0, [r3, #0]
 8000a06:	79fa      	ldrb	r2, [r7, #7]
 8000a08:	490c      	ldr	r1, [pc, #48]	; (8000a3c <ledOff+0x50>)
 8000a0a:	4613      	mov	r3, r2
 8000a0c:	005b      	lsls	r3, r3, #1
 8000a0e:	4413      	add	r3, r2
 8000a10:	009b      	lsls	r3, r3, #2
 8000a12:	440b      	add	r3, r1
 8000a14:	3304      	adds	r3, #4
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	b299      	uxth	r1, r3
 8000a1a:	79fa      	ldrb	r2, [r7, #7]
 8000a1c:	4c07      	ldr	r4, [pc, #28]	; (8000a3c <ledOff+0x50>)
 8000a1e:	4613      	mov	r3, r2
 8000a20:	005b      	lsls	r3, r3, #1
 8000a22:	4413      	add	r3, r2
 8000a24:	009b      	lsls	r3, r3, #2
 8000a26:	4423      	add	r3, r4
 8000a28:	3309      	adds	r3, #9
 8000a2a:	781b      	ldrb	r3, [r3, #0]
 8000a2c:	461a      	mov	r2, r3
 8000a2e:	f000 fced 	bl	800140c <HAL_GPIO_WritePin>
}
 8000a32:	bf00      	nop
 8000a34:	370c      	adds	r7, #12
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bd90      	pop	{r4, r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	20000004 	.word	0x20000004

08000a40 <ledToggle>:
void ledToggle(uint8_t ch)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b082      	sub	sp, #8
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	4603      	mov	r3, r0
 8000a48:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_TogglePin(led_tbl[ch].port, led_tbl[ch].pin);
 8000a4a:	79fa      	ldrb	r2, [r7, #7]
 8000a4c:	490b      	ldr	r1, [pc, #44]	; (8000a7c <ledToggle+0x3c>)
 8000a4e:	4613      	mov	r3, r2
 8000a50:	005b      	lsls	r3, r3, #1
 8000a52:	4413      	add	r3, r2
 8000a54:	009b      	lsls	r3, r3, #2
 8000a56:	440b      	add	r3, r1
 8000a58:	6818      	ldr	r0, [r3, #0]
 8000a5a:	79fa      	ldrb	r2, [r7, #7]
 8000a5c:	4907      	ldr	r1, [pc, #28]	; (8000a7c <ledToggle+0x3c>)
 8000a5e:	4613      	mov	r3, r2
 8000a60:	005b      	lsls	r3, r3, #1
 8000a62:	4413      	add	r3, r2
 8000a64:	009b      	lsls	r3, r3, #2
 8000a66:	440b      	add	r3, r1
 8000a68:	3304      	adds	r3, #4
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	b29b      	uxth	r3, r3
 8000a6e:	4619      	mov	r1, r3
 8000a70:	f000 fce5 	bl	800143e <HAL_GPIO_TogglePin>
}
 8000a74:	bf00      	nop
 8000a76:	3708      	adds	r7, #8
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	bd80      	pop	{r7, pc}
 8000a7c:	20000004 	.word	0x20000004

08000a80 <resetInit>:
#include "rtc.h"

static uint32_t reset_count = 0;

bool resetInit(void)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b082      	sub	sp, #8
 8000a84:	af00      	add	r7, sp, #0
	bool ret = true;
 8000a86:	2301      	movs	r3, #1
 8000a88:	71fb      	strb	r3, [r7, #7]

	if(RCC->CSR & (1<<26))
 8000a8a:	4b11      	ldr	r3, [pc, #68]	; (8000ad0 <resetInit+0x50>)
 8000a8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000a8e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d013      	beq.n	8000abe <resetInit+0x3e>
	{
		rtcBackupRegWrite(0, rtcBackupRegRead(0) + 1);
 8000a96:	2000      	movs	r0, #0
 8000a98:	f000 f866 	bl	8000b68 <rtcBackupRegRead>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	3301      	adds	r3, #1
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	2000      	movs	r0, #0
 8000aa4:	f000 f850 	bl	8000b48 <rtcBackupRegWrite>
		delay(500);/* due to multiple input */
 8000aa8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000aac:	f7ff fe00 	bl	80006b0 <delay>
		reset_count = rtcBackupRegRead(0);
 8000ab0:	2000      	movs	r0, #0
 8000ab2:	f000 f859 	bl	8000b68 <rtcBackupRegRead>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	461a      	mov	r2, r3
 8000aba:	4b06      	ldr	r3, [pc, #24]	; (8000ad4 <resetInit+0x54>)
 8000abc:	601a      	str	r2, [r3, #0]
		/* one count increase itself */
	}
	rtcBackupRegWrite(0, 0);
 8000abe:	2100      	movs	r1, #0
 8000ac0:	2000      	movs	r0, #0
 8000ac2:	f000 f841 	bl	8000b48 <rtcBackupRegWrite>
	return ret;
 8000ac6:	79fb      	ldrb	r3, [r7, #7]
}
 8000ac8:	4618      	mov	r0, r3
 8000aca:	3708      	adds	r7, #8
 8000acc:	46bd      	mov	sp, r7
 8000ace:	bd80      	pop	{r7, pc}
 8000ad0:	40023800 	.word	0x40023800
 8000ad4:	2000022c 	.word	0x2000022c

08000ad8 <resetGetCount>:
uint32_t resetGetCount(void)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	af00      	add	r7, sp, #0
	return reset_count;
 8000adc:	4b03      	ldr	r3, [pc, #12]	; (8000aec <resetGetCount+0x14>)
 8000ade:	681b      	ldr	r3, [r3, #0]
}
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae8:	4770      	bx	lr
 8000aea:	bf00      	nop
 8000aec:	2000022c 	.word	0x2000022c

08000af0 <rtcInit>:
#include "rtc.h"

static RTC_HandleTypeDef hrtc;

bool rtcInit(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b082      	sub	sp, #8
 8000af4:	af00      	add	r7, sp, #0
	bool ret = true;
 8000af6:	2301      	movs	r3, #1
 8000af8:	71fb      	strb	r3, [r7, #7]
	// also need to enable GPIOC -> already declared on "bsp.c"
	hrtc.Instance 						= RTC;
 8000afa:	4b11      	ldr	r3, [pc, #68]	; (8000b40 <rtcInit+0x50>)
 8000afc:	4a11      	ldr	r2, [pc, #68]	; (8000b44 <rtcInit+0x54>)
 8000afe:	601a      	str	r2, [r3, #0]
	hrtc.Init.HourFormat 			= RTC_HOURFORMAT_24;
 8000b00:	4b0f      	ldr	r3, [pc, #60]	; (8000b40 <rtcInit+0x50>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	605a      	str	r2, [r3, #4]
	hrtc.Init.AsynchPrediv 		= 127;
 8000b06:	4b0e      	ldr	r3, [pc, #56]	; (8000b40 <rtcInit+0x50>)
 8000b08:	227f      	movs	r2, #127	; 0x7f
 8000b0a:	609a      	str	r2, [r3, #8]
	hrtc.Init.SynchPrediv 		= 255;
 8000b0c:	4b0c      	ldr	r3, [pc, #48]	; (8000b40 <rtcInit+0x50>)
 8000b0e:	22ff      	movs	r2, #255	; 0xff
 8000b10:	60da      	str	r2, [r3, #12]
	hrtc.Init.OutPut 					= RTC_OUTPUT_DISABLE;
 8000b12:	4b0b      	ldr	r3, [pc, #44]	; (8000b40 <rtcInit+0x50>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	611a      	str	r2, [r3, #16]
	hrtc.Init.OutPutPolarity 	= RTC_OUTPUT_POLARITY_HIGH;
 8000b18:	4b09      	ldr	r3, [pc, #36]	; (8000b40 <rtcInit+0x50>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	615a      	str	r2, [r3, #20]
	hrtc.Init.OutPutType	    = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000b1e:	4b08      	ldr	r3, [pc, #32]	; (8000b40 <rtcInit+0x50>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	619a      	str	r2, [r3, #24]
	if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000b24:	4806      	ldr	r0, [pc, #24]	; (8000b40 <rtcInit+0x50>)
 8000b26:	f002 fb47 	bl	80031b8 <HAL_RTC_Init>
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d001      	beq.n	8000b34 <rtcInit+0x44>
	{
	Error_Handler();
 8000b30:	f7ff fe3a 	bl	80007a8 <Error_Handler>
	}
	return ret;
 8000b34:	79fb      	ldrb	r3, [r7, #7]
}
 8000b36:	4618      	mov	r0, r3
 8000b38:	3708      	adds	r7, #8
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bd80      	pop	{r7, pc}
 8000b3e:	bf00      	nop
 8000b40:	20000230 	.word	0x20000230
 8000b44:	40002800 	.word	0x40002800

08000b48 <rtcBackupRegWrite>:

void rtcBackupRegWrite(uint32_t index, uint32_t data)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b082      	sub	sp, #8
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
 8000b50:	6039      	str	r1, [r7, #0]
	HAL_RTCEx_BKUPWrite(&hrtc, index, data);
 8000b52:	683a      	ldr	r2, [r7, #0]
 8000b54:	6879      	ldr	r1, [r7, #4]
 8000b56:	4803      	ldr	r0, [pc, #12]	; (8000b64 <rtcBackupRegWrite+0x1c>)
 8000b58:	f002 fc13 	bl	8003382 <HAL_RTCEx_BKUPWrite>
}
 8000b5c:	bf00      	nop
 8000b5e:	3708      	adds	r7, #8
 8000b60:	46bd      	mov	sp, r7
 8000b62:	bd80      	pop	{r7, pc}
 8000b64:	20000230 	.word	0x20000230

08000b68 <rtcBackupRegRead>:
uint32_t rtcBackupRegRead(uint32_t index)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b082      	sub	sp, #8
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
	return HAL_RTCEx_BKUPRead(&hrtc, index);
 8000b70:	6879      	ldr	r1, [r7, #4]
 8000b72:	4804      	ldr	r0, [pc, #16]	; (8000b84 <rtcBackupRegRead+0x1c>)
 8000b74:	f002 fc1f 	bl	80033b6 <HAL_RTCEx_BKUPRead>
 8000b78:	4603      	mov	r3, r0
}
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	3708      	adds	r7, #8
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bd80      	pop	{r7, pc}
 8000b82:	bf00      	nop
 8000b84:	20000230 	.word	0x20000230

08000b88 <HAL_RTC_MspInit>:


void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b088      	sub	sp, #32
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b90:	f107 0308 	add.w	r3, r7, #8
 8000b94:	2200      	movs	r2, #0
 8000b96:	601a      	str	r2, [r3, #0]
 8000b98:	605a      	str	r2, [r3, #4]
 8000b9a:	609a      	str	r2, [r3, #8]
 8000b9c:	60da      	str	r2, [r3, #12]
 8000b9e:	611a      	str	r2, [r3, #16]
 8000ba0:	615a      	str	r2, [r3, #20]
  if(rtcHandle->Instance==RTC)
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	4a0c      	ldr	r2, [pc, #48]	; (8000bd8 <HAL_RTC_MspInit+0x50>)
 8000ba8:	4293      	cmp	r3, r2
 8000baa:	d111      	bne.n	8000bd0 <HAL_RTC_MspInit+0x48>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000bac:	2302      	movs	r3, #2
 8000bae:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000bb0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000bb4:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000bb6:	f107 0308 	add.w	r3, r7, #8
 8000bba:	4618      	mov	r0, r3
 8000bbc:	f002 fa0c 	bl	8002fd8 <HAL_RCCEx_PeriphCLKConfig>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d001      	beq.n	8000bca <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8000bc6:	f7ff fdef 	bl	80007a8 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000bca:	4b04      	ldr	r3, [pc, #16]	; (8000bdc <HAL_RTC_MspInit+0x54>)
 8000bcc:	2201      	movs	r2, #1
 8000bce:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8000bd0:	bf00      	nop
 8000bd2:	3720      	adds	r7, #32
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bd80      	pop	{r7, pc}
 8000bd8:	40002800 	.word	0x40002800
 8000bdc:	42470e3c 	.word	0x42470e3c

08000be0 <uartInit>:
#include "cdc.h"

static bool is_open[UART_MAX_CHANNEL];

bool uartInit(void)
{
 8000be0:	b480      	push	{r7}
 8000be2:	b083      	sub	sp, #12
 8000be4:	af00      	add	r7, sp, #0
	for(int i = 0; i < UART_MAX_CHANNEL; i++)
 8000be6:	2300      	movs	r3, #0
 8000be8:	607b      	str	r3, [r7, #4]
 8000bea:	e007      	b.n	8000bfc <uartInit+0x1c>
	{
		is_open[i] = false;
 8000bec:	4a08      	ldr	r2, [pc, #32]	; (8000c10 <uartInit+0x30>)
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	4413      	add	r3, r2
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < UART_MAX_CHANNEL; i++)
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	3301      	adds	r3, #1
 8000bfa:	607b      	str	r3, [r7, #4]
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	ddf4      	ble.n	8000bec <uartInit+0xc>
	}
	return false;
 8000c02:	2300      	movs	r3, #0
}
 8000c04:	4618      	mov	r0, r3
 8000c06:	370c      	adds	r7, #12
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0e:	4770      	bx	lr
 8000c10:	20000250 	.word	0x20000250

08000c14 <uartAvailable>:
	}

	return ret;
}
uint32_t uartAvailable(uint8_t ch)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b084      	sub	sp, #16
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	71fb      	strb	r3, [r7, #7]
	uint32_t ret = 0;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	60fb      	str	r3, [r7, #12]

	switch(ch)
 8000c22:	79fb      	ldrb	r3, [r7, #7]
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d103      	bne.n	8000c30 <uartAvailable+0x1c>
	{
		case _DEF_UART1: // 첫번째 채널 uart -> 1. cdc 추
			ret = cdcAvailable();
 8000c28:	f005 fc16 	bl	8006458 <cdcAvailable>
 8000c2c:	60f8      	str	r0, [r7, #12]
			break;
 8000c2e:	bf00      	nop
	}

	return ret;
 8000c30:	68fb      	ldr	r3, [r7, #12]
}
 8000c32:	4618      	mov	r0, r3
 8000c34:	3710      	adds	r7, #16
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}

08000c3a <uartRead>:
uint8_t uartRead(uint8_t ch)
{
 8000c3a:	b580      	push	{r7, lr}
 8000c3c:	b084      	sub	sp, #16
 8000c3e:	af00      	add	r7, sp, #0
 8000c40:	4603      	mov	r3, r0
 8000c42:	71fb      	strb	r3, [r7, #7]
	uint8_t ret;

	switch(ch)
 8000c44:	79fb      	ldrb	r3, [r7, #7]
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d104      	bne.n	8000c54 <uartRead+0x1a>
	{
		case _DEF_UART1:
			ret = cdcRead();
 8000c4a:	f005 fc23 	bl	8006494 <cdcRead>
 8000c4e:	4603      	mov	r3, r0
 8000c50:	73fb      	strb	r3, [r7, #15]
			break;
 8000c52:	bf00      	nop
	}

	return ret;
 8000c54:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c56:	4618      	mov	r0, r3
 8000c58:	3710      	adds	r7, #16
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bd80      	pop	{r7, pc}

08000c5e <uartWrite>:
uint32_t uartWrite(uint8_t ch, uint8_t *pData, uint32_t length)
{
 8000c5e:	b580      	push	{r7, lr}
 8000c60:	b086      	sub	sp, #24
 8000c62:	af00      	add	r7, sp, #0
 8000c64:	4603      	mov	r3, r0
 8000c66:	60b9      	str	r1, [r7, #8]
 8000c68:	607a      	str	r2, [r7, #4]
 8000c6a:	73fb      	strb	r3, [r7, #15]
	uint32_t ret;

	switch(ch)
 8000c6c:	7bfb      	ldrb	r3, [r7, #15]
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d105      	bne.n	8000c7e <uartWrite+0x20>
		{
			case _DEF_UART1:
				ret = cdcWrite(pData, length);
 8000c72:	6879      	ldr	r1, [r7, #4]
 8000c74:	68b8      	ldr	r0, [r7, #8]
 8000c76:	f005 fc63 	bl	8006540 <cdcWrite>
 8000c7a:	6178      	str	r0, [r7, #20]
				break;
 8000c7c:	bf00      	nop
		}

	return ret;
 8000c7e:	697b      	ldr	r3, [r7, #20]
}
 8000c80:	4618      	mov	r0, r3
 8000c82:	3718      	adds	r7, #24
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bd80      	pop	{r7, pc}

08000c88 <uartPrint>:
/*
 * 복습할 것 가변인자...*/
uint32_t uartPrint(uint8_t ch, char* fmt, ...)
{
 8000c88:	b40e      	push	{r1, r2, r3}
 8000c8a:	b580      	push	{r7, lr}
 8000c8c:	b0c7      	sub	sp, #284	; 0x11c
 8000c8e:	af00      	add	r7, sp, #0
 8000c90:	4602      	mov	r2, r0
 8000c92:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000c96:	f2a3 1311 	subw	r3, r3, #273	; 0x111
 8000c9a:	701a      	strb	r2, [r3, #0]
	va_list args;
	int len;
	uint32_t ret;


	va_start(args, fmt); 									// 가변인자 처리 시작
 8000c9c:	f507 7294 	add.w	r2, r7, #296	; 0x128
 8000ca0:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000ca4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000ca8:	601a      	str	r2, [r3, #0]
	len = vsnprintf(buf, 256, fmt, args); //-> 버퍼에 해당 내용을 write
 8000caa:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000cae:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000cb2:	f107 0010 	add.w	r0, r7, #16
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8000cbc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000cc0:	f006 fa2a 	bl	8007118 <vsniprintf>
 8000cc4:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114

	ret = uartWrite(ch, (uint8_t *)buf, len);
 8000cc8:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8000ccc:	f107 0110 	add.w	r1, r7, #16
 8000cd0:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000cd4:	f2a3 1311 	subw	r3, r3, #273	; 0x111
 8000cd8:	781b      	ldrb	r3, [r3, #0]
 8000cda:	4618      	mov	r0, r3
 8000cdc:	f7ff ffbf 	bl	8000c5e <uartWrite>
 8000ce0:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

	va_end(args);

	return ret;
 8000ce4:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
}
 8000ce8:	4618      	mov	r0, r3
 8000cea:	f507 778e 	add.w	r7, r7, #284	; 0x11c
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000cf4:	b003      	add	sp, #12
 8000cf6:	4770      	bx	lr

08000cf8 <uartGetBaud>:
uint32_t uartGetBaud(uint8_t ch)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b084      	sub	sp, #16
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	4603      	mov	r3, r0
 8000d00:	71fb      	strb	r3, [r7, #7]
	//bridge mode make, real uart need to know baudrate
	uint32_t ret = 0;
 8000d02:	2300      	movs	r3, #0
 8000d04:	60fb      	str	r3, [r7, #12]
	switch(ch)
 8000d06:	79fb      	ldrb	r3, [r7, #7]
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d103      	bne.n	8000d14 <uartGetBaud+0x1c>
	{
		case _DEF_UART1:
			return cdcGetBaud();
 8000d0c:	f005 fc40 	bl	8006590 <cdcGetBaud>
 8000d10:	4603      	mov	r3, r0
 8000d12:	e000      	b.n	8000d16 <uartGetBaud+0x1e>
			break;
	}
	return ret;
 8000d14:	68fb      	ldr	r3, [r7, #12]
}
 8000d16:	4618      	mov	r0, r3
 8000d18:	3710      	adds	r7, #16
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd80      	pop	{r7, pc}
	...

08000d20 <usbInit>:


#include "usb.h"

bool usbInit(void)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b086      	sub	sp, #24
 8000d24:	af00      	add	r7, sp, #0
	bool ret = true;
 8000d26:	2301      	movs	r3, #1
 8000d28:	75fb      	strb	r3, [r7, #23]

	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d2a:	463b      	mov	r3, r7
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	601a      	str	r2, [r3, #0]
 8000d30:	605a      	str	r2, [r3, #4]
 8000d32:	609a      	str	r2, [r3, #8]
 8000d34:	60da      	str	r2, [r3, #12]
 8000d36:	611a      	str	r2, [r3, #16]

	GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000d38:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d3c:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000d3e:	2311      	movs	r3, #17
 8000d40:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d42:	2300      	movs	r3, #0
 8000d44:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d46:	2300      	movs	r3, #0
 8000d48:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d4a:	463b      	mov	r3, r7
 8000d4c:	4619      	mov	r1, r3
 8000d4e:	4810      	ldr	r0, [pc, #64]	; (8000d90 <usbInit+0x70>)
 8000d50:	f000 f9d8 	bl	8001104 <HAL_GPIO_Init>

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8000d54:	2200      	movs	r2, #0
 8000d56:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d5a:	480d      	ldr	r0, [pc, #52]	; (8000d90 <usbInit+0x70>)
 8000d5c:	f000 fb56 	bl	800140c <HAL_GPIO_WritePin>
	delay(100);
 8000d60:	2064      	movs	r0, #100	; 0x64
 8000d62:	f7ff fca5 	bl	80006b0 <delay>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8000d66:	2201      	movs	r2, #1
 8000d68:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d6c:	4808      	ldr	r0, [pc, #32]	; (8000d90 <usbInit+0x70>)
 8000d6e:	f000 fb4d 	bl	800140c <HAL_GPIO_WritePin>

	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d72:	2300      	movs	r3, #0
 8000d74:	607b      	str	r3, [r7, #4]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d76:	463b      	mov	r3, r7
 8000d78:	4619      	mov	r1, r3
 8000d7a:	4805      	ldr	r0, [pc, #20]	; (8000d90 <usbInit+0x70>)
 8000d7c:	f000 f9c2 	bl	8001104 <HAL_GPIO_Init>

	MX_USB_DEVICE_Init();
 8000d80:	f005 fb3a 	bl	80063f8 <MX_USB_DEVICE_Init>
	return ret;
 8000d84:	7dfb      	ldrb	r3, [r7, #23]
}
 8000d86:	4618      	mov	r0, r3
 8000d88:	3718      	adds	r7, #24
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bd80      	pop	{r7, pc}
 8000d8e:	bf00      	nop
 8000d90:	40020000 	.word	0x40020000

08000d94 <hwInit>:
 */

#include "hw.h"

void hwInit()
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	af00      	add	r7, sp, #0
  bspInit();
 8000d98:	f7ff fc52 	bl	8000640 <bspInit>
  rtcInit();
 8000d9c:	f7ff fea8 	bl	8000af0 <rtcInit>

  resetInit();
 8000da0:	f7ff fe6e 	bl	8000a80 <resetInit>
  ledInit();
 8000da4:	f7ff fdd4 	bl	8000950 <ledInit>
  usbInit();
 8000da8:	f7ff ffba 	bl	8000d20 <usbInit>
  uartInit();
 8000dac:	f7ff ff18 	bl	8000be0 <uartInit>
}
 8000db0:	bf00      	nop
 8000db2:	bd80      	pop	{r7, pc}

08000db4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000db8:	4b0e      	ldr	r3, [pc, #56]	; (8000df4 <HAL_Init+0x40>)
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	4a0d      	ldr	r2, [pc, #52]	; (8000df4 <HAL_Init+0x40>)
 8000dbe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000dc2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000dc4:	4b0b      	ldr	r3, [pc, #44]	; (8000df4 <HAL_Init+0x40>)
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	4a0a      	ldr	r2, [pc, #40]	; (8000df4 <HAL_Init+0x40>)
 8000dca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000dce:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000dd0:	4b08      	ldr	r3, [pc, #32]	; (8000df4 <HAL_Init+0x40>)
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	4a07      	ldr	r2, [pc, #28]	; (8000df4 <HAL_Init+0x40>)
 8000dd6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000dda:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ddc:	2003      	movs	r0, #3
 8000dde:	f000 f94f 	bl	8001080 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000de2:	200f      	movs	r0, #15
 8000de4:	f000 f808 	bl	8000df8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000de8:	f7ff fce4 	bl	80007b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000dec:	2300      	movs	r3, #0
}
 8000dee:	4618      	mov	r0, r3
 8000df0:	bd80      	pop	{r7, pc}
 8000df2:	bf00      	nop
 8000df4:	40023c00 	.word	0x40023c00

08000df8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b082      	sub	sp, #8
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e00:	4b12      	ldr	r3, [pc, #72]	; (8000e4c <HAL_InitTick+0x54>)
 8000e02:	681a      	ldr	r2, [r3, #0]
 8000e04:	4b12      	ldr	r3, [pc, #72]	; (8000e50 <HAL_InitTick+0x58>)
 8000e06:	781b      	ldrb	r3, [r3, #0]
 8000e08:	4619      	mov	r1, r3
 8000e0a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e0e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e12:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e16:	4618      	mov	r0, r3
 8000e18:	f000 f967 	bl	80010ea <HAL_SYSTICK_Config>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d001      	beq.n	8000e26 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e22:	2301      	movs	r3, #1
 8000e24:	e00e      	b.n	8000e44 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	2b0f      	cmp	r3, #15
 8000e2a:	d80a      	bhi.n	8000e42 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	6879      	ldr	r1, [r7, #4]
 8000e30:	f04f 30ff 	mov.w	r0, #4294967295
 8000e34:	f000 f92f 	bl	8001096 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e38:	4a06      	ldr	r2, [pc, #24]	; (8000e54 <HAL_InitTick+0x5c>)
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	e000      	b.n	8000e44 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e42:	2301      	movs	r3, #1
}
 8000e44:	4618      	mov	r0, r3
 8000e46:	3708      	adds	r7, #8
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	bd80      	pop	{r7, pc}
 8000e4c:	20000000 	.word	0x20000000
 8000e50:	2000002c 	.word	0x2000002c
 8000e54:	20000028 	.word	0x20000028

08000e58 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e5c:	4b06      	ldr	r3, [pc, #24]	; (8000e78 <HAL_IncTick+0x20>)
 8000e5e:	781b      	ldrb	r3, [r3, #0]
 8000e60:	461a      	mov	r2, r3
 8000e62:	4b06      	ldr	r3, [pc, #24]	; (8000e7c <HAL_IncTick+0x24>)
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	4413      	add	r3, r2
 8000e68:	4a04      	ldr	r2, [pc, #16]	; (8000e7c <HAL_IncTick+0x24>)
 8000e6a:	6013      	str	r3, [r2, #0]
}
 8000e6c:	bf00      	nop
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e74:	4770      	bx	lr
 8000e76:	bf00      	nop
 8000e78:	2000002c 	.word	0x2000002c
 8000e7c:	20000254 	.word	0x20000254

08000e80 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e80:	b480      	push	{r7}
 8000e82:	af00      	add	r7, sp, #0
  return uwTick;
 8000e84:	4b03      	ldr	r3, [pc, #12]	; (8000e94 <HAL_GetTick+0x14>)
 8000e86:	681b      	ldr	r3, [r3, #0]
}
 8000e88:	4618      	mov	r0, r3
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e90:	4770      	bx	lr
 8000e92:	bf00      	nop
 8000e94:	20000254 	.word	0x20000254

08000e98 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b084      	sub	sp, #16
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ea0:	f7ff ffee 	bl	8000e80 <HAL_GetTick>
 8000ea4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000eaa:	68fb      	ldr	r3, [r7, #12]
 8000eac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000eb0:	d005      	beq.n	8000ebe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000eb2:	4b0a      	ldr	r3, [pc, #40]	; (8000edc <HAL_Delay+0x44>)
 8000eb4:	781b      	ldrb	r3, [r3, #0]
 8000eb6:	461a      	mov	r2, r3
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	4413      	add	r3, r2
 8000ebc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000ebe:	bf00      	nop
 8000ec0:	f7ff ffde 	bl	8000e80 <HAL_GetTick>
 8000ec4:	4602      	mov	r2, r0
 8000ec6:	68bb      	ldr	r3, [r7, #8]
 8000ec8:	1ad3      	subs	r3, r2, r3
 8000eca:	68fa      	ldr	r2, [r7, #12]
 8000ecc:	429a      	cmp	r2, r3
 8000ece:	d8f7      	bhi.n	8000ec0 <HAL_Delay+0x28>
  {
  }
}
 8000ed0:	bf00      	nop
 8000ed2:	bf00      	nop
 8000ed4:	3710      	adds	r7, #16
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	2000002c 	.word	0x2000002c

08000ee0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	b085      	sub	sp, #20
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	f003 0307 	and.w	r3, r3, #7
 8000eee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ef0:	4b0c      	ldr	r3, [pc, #48]	; (8000f24 <__NVIC_SetPriorityGrouping+0x44>)
 8000ef2:	68db      	ldr	r3, [r3, #12]
 8000ef4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ef6:	68ba      	ldr	r2, [r7, #8]
 8000ef8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000efc:	4013      	ands	r3, r2
 8000efe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f04:	68bb      	ldr	r3, [r7, #8]
 8000f06:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f08:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f10:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f12:	4a04      	ldr	r2, [pc, #16]	; (8000f24 <__NVIC_SetPriorityGrouping+0x44>)
 8000f14:	68bb      	ldr	r3, [r7, #8]
 8000f16:	60d3      	str	r3, [r2, #12]
}
 8000f18:	bf00      	nop
 8000f1a:	3714      	adds	r7, #20
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f22:	4770      	bx	lr
 8000f24:	e000ed00 	.word	0xe000ed00

08000f28 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f2c:	4b04      	ldr	r3, [pc, #16]	; (8000f40 <__NVIC_GetPriorityGrouping+0x18>)
 8000f2e:	68db      	ldr	r3, [r3, #12]
 8000f30:	0a1b      	lsrs	r3, r3, #8
 8000f32:	f003 0307 	and.w	r3, r3, #7
}
 8000f36:	4618      	mov	r0, r3
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3e:	4770      	bx	lr
 8000f40:	e000ed00 	.word	0xe000ed00

08000f44 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f44:	b480      	push	{r7}
 8000f46:	b083      	sub	sp, #12
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	db0b      	blt.n	8000f6e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f56:	79fb      	ldrb	r3, [r7, #7]
 8000f58:	f003 021f 	and.w	r2, r3, #31
 8000f5c:	4907      	ldr	r1, [pc, #28]	; (8000f7c <__NVIC_EnableIRQ+0x38>)
 8000f5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f62:	095b      	lsrs	r3, r3, #5
 8000f64:	2001      	movs	r0, #1
 8000f66:	fa00 f202 	lsl.w	r2, r0, r2
 8000f6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f6e:	bf00      	nop
 8000f70:	370c      	adds	r7, #12
 8000f72:	46bd      	mov	sp, r7
 8000f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f78:	4770      	bx	lr
 8000f7a:	bf00      	nop
 8000f7c:	e000e100 	.word	0xe000e100

08000f80 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f80:	b480      	push	{r7}
 8000f82:	b083      	sub	sp, #12
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	4603      	mov	r3, r0
 8000f88:	6039      	str	r1, [r7, #0]
 8000f8a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	db0a      	blt.n	8000faa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f94:	683b      	ldr	r3, [r7, #0]
 8000f96:	b2da      	uxtb	r2, r3
 8000f98:	490c      	ldr	r1, [pc, #48]	; (8000fcc <__NVIC_SetPriority+0x4c>)
 8000f9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f9e:	0112      	lsls	r2, r2, #4
 8000fa0:	b2d2      	uxtb	r2, r2
 8000fa2:	440b      	add	r3, r1
 8000fa4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fa8:	e00a      	b.n	8000fc0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000faa:	683b      	ldr	r3, [r7, #0]
 8000fac:	b2da      	uxtb	r2, r3
 8000fae:	4908      	ldr	r1, [pc, #32]	; (8000fd0 <__NVIC_SetPriority+0x50>)
 8000fb0:	79fb      	ldrb	r3, [r7, #7]
 8000fb2:	f003 030f 	and.w	r3, r3, #15
 8000fb6:	3b04      	subs	r3, #4
 8000fb8:	0112      	lsls	r2, r2, #4
 8000fba:	b2d2      	uxtb	r2, r2
 8000fbc:	440b      	add	r3, r1
 8000fbe:	761a      	strb	r2, [r3, #24]
}
 8000fc0:	bf00      	nop
 8000fc2:	370c      	adds	r7, #12
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fca:	4770      	bx	lr
 8000fcc:	e000e100 	.word	0xe000e100
 8000fd0:	e000ed00 	.word	0xe000ed00

08000fd4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	b089      	sub	sp, #36	; 0x24
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	60f8      	str	r0, [r7, #12]
 8000fdc:	60b9      	str	r1, [r7, #8]
 8000fde:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	f003 0307 	and.w	r3, r3, #7
 8000fe6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fe8:	69fb      	ldr	r3, [r7, #28]
 8000fea:	f1c3 0307 	rsb	r3, r3, #7
 8000fee:	2b04      	cmp	r3, #4
 8000ff0:	bf28      	it	cs
 8000ff2:	2304      	movcs	r3, #4
 8000ff4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ff6:	69fb      	ldr	r3, [r7, #28]
 8000ff8:	3304      	adds	r3, #4
 8000ffa:	2b06      	cmp	r3, #6
 8000ffc:	d902      	bls.n	8001004 <NVIC_EncodePriority+0x30>
 8000ffe:	69fb      	ldr	r3, [r7, #28]
 8001000:	3b03      	subs	r3, #3
 8001002:	e000      	b.n	8001006 <NVIC_EncodePriority+0x32>
 8001004:	2300      	movs	r3, #0
 8001006:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001008:	f04f 32ff 	mov.w	r2, #4294967295
 800100c:	69bb      	ldr	r3, [r7, #24]
 800100e:	fa02 f303 	lsl.w	r3, r2, r3
 8001012:	43da      	mvns	r2, r3
 8001014:	68bb      	ldr	r3, [r7, #8]
 8001016:	401a      	ands	r2, r3
 8001018:	697b      	ldr	r3, [r7, #20]
 800101a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800101c:	f04f 31ff 	mov.w	r1, #4294967295
 8001020:	697b      	ldr	r3, [r7, #20]
 8001022:	fa01 f303 	lsl.w	r3, r1, r3
 8001026:	43d9      	mvns	r1, r3
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800102c:	4313      	orrs	r3, r2
         );
}
 800102e:	4618      	mov	r0, r3
 8001030:	3724      	adds	r7, #36	; 0x24
 8001032:	46bd      	mov	sp, r7
 8001034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001038:	4770      	bx	lr
	...

0800103c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b082      	sub	sp, #8
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	3b01      	subs	r3, #1
 8001048:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800104c:	d301      	bcc.n	8001052 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800104e:	2301      	movs	r3, #1
 8001050:	e00f      	b.n	8001072 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001052:	4a0a      	ldr	r2, [pc, #40]	; (800107c <SysTick_Config+0x40>)
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	3b01      	subs	r3, #1
 8001058:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800105a:	210f      	movs	r1, #15
 800105c:	f04f 30ff 	mov.w	r0, #4294967295
 8001060:	f7ff ff8e 	bl	8000f80 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001064:	4b05      	ldr	r3, [pc, #20]	; (800107c <SysTick_Config+0x40>)
 8001066:	2200      	movs	r2, #0
 8001068:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800106a:	4b04      	ldr	r3, [pc, #16]	; (800107c <SysTick_Config+0x40>)
 800106c:	2207      	movs	r2, #7
 800106e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001070:	2300      	movs	r3, #0
}
 8001072:	4618      	mov	r0, r3
 8001074:	3708      	adds	r7, #8
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}
 800107a:	bf00      	nop
 800107c:	e000e010 	.word	0xe000e010

08001080 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b082      	sub	sp, #8
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001088:	6878      	ldr	r0, [r7, #4]
 800108a:	f7ff ff29 	bl	8000ee0 <__NVIC_SetPriorityGrouping>
}
 800108e:	bf00      	nop
 8001090:	3708      	adds	r7, #8
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}

08001096 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001096:	b580      	push	{r7, lr}
 8001098:	b086      	sub	sp, #24
 800109a:	af00      	add	r7, sp, #0
 800109c:	4603      	mov	r3, r0
 800109e:	60b9      	str	r1, [r7, #8]
 80010a0:	607a      	str	r2, [r7, #4]
 80010a2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010a4:	2300      	movs	r3, #0
 80010a6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010a8:	f7ff ff3e 	bl	8000f28 <__NVIC_GetPriorityGrouping>
 80010ac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010ae:	687a      	ldr	r2, [r7, #4]
 80010b0:	68b9      	ldr	r1, [r7, #8]
 80010b2:	6978      	ldr	r0, [r7, #20]
 80010b4:	f7ff ff8e 	bl	8000fd4 <NVIC_EncodePriority>
 80010b8:	4602      	mov	r2, r0
 80010ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010be:	4611      	mov	r1, r2
 80010c0:	4618      	mov	r0, r3
 80010c2:	f7ff ff5d 	bl	8000f80 <__NVIC_SetPriority>
}
 80010c6:	bf00      	nop
 80010c8:	3718      	adds	r7, #24
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}

080010ce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010ce:	b580      	push	{r7, lr}
 80010d0:	b082      	sub	sp, #8
 80010d2:	af00      	add	r7, sp, #0
 80010d4:	4603      	mov	r3, r0
 80010d6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010dc:	4618      	mov	r0, r3
 80010de:	f7ff ff31 	bl	8000f44 <__NVIC_EnableIRQ>
}
 80010e2:	bf00      	nop
 80010e4:	3708      	adds	r7, #8
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}

080010ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010ea:	b580      	push	{r7, lr}
 80010ec:	b082      	sub	sp, #8
 80010ee:	af00      	add	r7, sp, #0
 80010f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010f2:	6878      	ldr	r0, [r7, #4]
 80010f4:	f7ff ffa2 	bl	800103c <SysTick_Config>
 80010f8:	4603      	mov	r3, r0
}
 80010fa:	4618      	mov	r0, r3
 80010fc:	3708      	adds	r7, #8
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}
	...

08001104 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001104:	b480      	push	{r7}
 8001106:	b089      	sub	sp, #36	; 0x24
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
 800110c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800110e:	2300      	movs	r3, #0
 8001110:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001112:	2300      	movs	r3, #0
 8001114:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001116:	2300      	movs	r3, #0
 8001118:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800111a:	2300      	movs	r3, #0
 800111c:	61fb      	str	r3, [r7, #28]
 800111e:	e159      	b.n	80013d4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001120:	2201      	movs	r2, #1
 8001122:	69fb      	ldr	r3, [r7, #28]
 8001124:	fa02 f303 	lsl.w	r3, r2, r3
 8001128:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800112a:	683b      	ldr	r3, [r7, #0]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	697a      	ldr	r2, [r7, #20]
 8001130:	4013      	ands	r3, r2
 8001132:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001134:	693a      	ldr	r2, [r7, #16]
 8001136:	697b      	ldr	r3, [r7, #20]
 8001138:	429a      	cmp	r2, r3
 800113a:	f040 8148 	bne.w	80013ce <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800113e:	683b      	ldr	r3, [r7, #0]
 8001140:	685b      	ldr	r3, [r3, #4]
 8001142:	f003 0303 	and.w	r3, r3, #3
 8001146:	2b01      	cmp	r3, #1
 8001148:	d005      	beq.n	8001156 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800114a:	683b      	ldr	r3, [r7, #0]
 800114c:	685b      	ldr	r3, [r3, #4]
 800114e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001152:	2b02      	cmp	r3, #2
 8001154:	d130      	bne.n	80011b8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	689b      	ldr	r3, [r3, #8]
 800115a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800115c:	69fb      	ldr	r3, [r7, #28]
 800115e:	005b      	lsls	r3, r3, #1
 8001160:	2203      	movs	r2, #3
 8001162:	fa02 f303 	lsl.w	r3, r2, r3
 8001166:	43db      	mvns	r3, r3
 8001168:	69ba      	ldr	r2, [r7, #24]
 800116a:	4013      	ands	r3, r2
 800116c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800116e:	683b      	ldr	r3, [r7, #0]
 8001170:	68da      	ldr	r2, [r3, #12]
 8001172:	69fb      	ldr	r3, [r7, #28]
 8001174:	005b      	lsls	r3, r3, #1
 8001176:	fa02 f303 	lsl.w	r3, r2, r3
 800117a:	69ba      	ldr	r2, [r7, #24]
 800117c:	4313      	orrs	r3, r2
 800117e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	69ba      	ldr	r2, [r7, #24]
 8001184:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	685b      	ldr	r3, [r3, #4]
 800118a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800118c:	2201      	movs	r2, #1
 800118e:	69fb      	ldr	r3, [r7, #28]
 8001190:	fa02 f303 	lsl.w	r3, r2, r3
 8001194:	43db      	mvns	r3, r3
 8001196:	69ba      	ldr	r2, [r7, #24]
 8001198:	4013      	ands	r3, r2
 800119a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	685b      	ldr	r3, [r3, #4]
 80011a0:	091b      	lsrs	r3, r3, #4
 80011a2:	f003 0201 	and.w	r2, r3, #1
 80011a6:	69fb      	ldr	r3, [r7, #28]
 80011a8:	fa02 f303 	lsl.w	r3, r2, r3
 80011ac:	69ba      	ldr	r2, [r7, #24]
 80011ae:	4313      	orrs	r3, r2
 80011b0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	69ba      	ldr	r2, [r7, #24]
 80011b6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	685b      	ldr	r3, [r3, #4]
 80011bc:	f003 0303 	and.w	r3, r3, #3
 80011c0:	2b03      	cmp	r3, #3
 80011c2:	d017      	beq.n	80011f4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	68db      	ldr	r3, [r3, #12]
 80011c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80011ca:	69fb      	ldr	r3, [r7, #28]
 80011cc:	005b      	lsls	r3, r3, #1
 80011ce:	2203      	movs	r2, #3
 80011d0:	fa02 f303 	lsl.w	r3, r2, r3
 80011d4:	43db      	mvns	r3, r3
 80011d6:	69ba      	ldr	r2, [r7, #24]
 80011d8:	4013      	ands	r3, r2
 80011da:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80011dc:	683b      	ldr	r3, [r7, #0]
 80011de:	689a      	ldr	r2, [r3, #8]
 80011e0:	69fb      	ldr	r3, [r7, #28]
 80011e2:	005b      	lsls	r3, r3, #1
 80011e4:	fa02 f303 	lsl.w	r3, r2, r3
 80011e8:	69ba      	ldr	r2, [r7, #24]
 80011ea:	4313      	orrs	r3, r2
 80011ec:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	69ba      	ldr	r2, [r7, #24]
 80011f2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	685b      	ldr	r3, [r3, #4]
 80011f8:	f003 0303 	and.w	r3, r3, #3
 80011fc:	2b02      	cmp	r3, #2
 80011fe:	d123      	bne.n	8001248 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001200:	69fb      	ldr	r3, [r7, #28]
 8001202:	08da      	lsrs	r2, r3, #3
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	3208      	adds	r2, #8
 8001208:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800120c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800120e:	69fb      	ldr	r3, [r7, #28]
 8001210:	f003 0307 	and.w	r3, r3, #7
 8001214:	009b      	lsls	r3, r3, #2
 8001216:	220f      	movs	r2, #15
 8001218:	fa02 f303 	lsl.w	r3, r2, r3
 800121c:	43db      	mvns	r3, r3
 800121e:	69ba      	ldr	r2, [r7, #24]
 8001220:	4013      	ands	r3, r2
 8001222:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	691a      	ldr	r2, [r3, #16]
 8001228:	69fb      	ldr	r3, [r7, #28]
 800122a:	f003 0307 	and.w	r3, r3, #7
 800122e:	009b      	lsls	r3, r3, #2
 8001230:	fa02 f303 	lsl.w	r3, r2, r3
 8001234:	69ba      	ldr	r2, [r7, #24]
 8001236:	4313      	orrs	r3, r2
 8001238:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800123a:	69fb      	ldr	r3, [r7, #28]
 800123c:	08da      	lsrs	r2, r3, #3
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	3208      	adds	r2, #8
 8001242:	69b9      	ldr	r1, [r7, #24]
 8001244:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800124e:	69fb      	ldr	r3, [r7, #28]
 8001250:	005b      	lsls	r3, r3, #1
 8001252:	2203      	movs	r2, #3
 8001254:	fa02 f303 	lsl.w	r3, r2, r3
 8001258:	43db      	mvns	r3, r3
 800125a:	69ba      	ldr	r2, [r7, #24]
 800125c:	4013      	ands	r3, r2
 800125e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	685b      	ldr	r3, [r3, #4]
 8001264:	f003 0203 	and.w	r2, r3, #3
 8001268:	69fb      	ldr	r3, [r7, #28]
 800126a:	005b      	lsls	r3, r3, #1
 800126c:	fa02 f303 	lsl.w	r3, r2, r3
 8001270:	69ba      	ldr	r2, [r7, #24]
 8001272:	4313      	orrs	r3, r2
 8001274:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	69ba      	ldr	r2, [r7, #24]
 800127a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	685b      	ldr	r3, [r3, #4]
 8001280:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001284:	2b00      	cmp	r3, #0
 8001286:	f000 80a2 	beq.w	80013ce <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800128a:	2300      	movs	r3, #0
 800128c:	60fb      	str	r3, [r7, #12]
 800128e:	4b57      	ldr	r3, [pc, #348]	; (80013ec <HAL_GPIO_Init+0x2e8>)
 8001290:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001292:	4a56      	ldr	r2, [pc, #344]	; (80013ec <HAL_GPIO_Init+0x2e8>)
 8001294:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001298:	6453      	str	r3, [r2, #68]	; 0x44
 800129a:	4b54      	ldr	r3, [pc, #336]	; (80013ec <HAL_GPIO_Init+0x2e8>)
 800129c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800129e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012a2:	60fb      	str	r3, [r7, #12]
 80012a4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80012a6:	4a52      	ldr	r2, [pc, #328]	; (80013f0 <HAL_GPIO_Init+0x2ec>)
 80012a8:	69fb      	ldr	r3, [r7, #28]
 80012aa:	089b      	lsrs	r3, r3, #2
 80012ac:	3302      	adds	r3, #2
 80012ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80012b4:	69fb      	ldr	r3, [r7, #28]
 80012b6:	f003 0303 	and.w	r3, r3, #3
 80012ba:	009b      	lsls	r3, r3, #2
 80012bc:	220f      	movs	r2, #15
 80012be:	fa02 f303 	lsl.w	r3, r2, r3
 80012c2:	43db      	mvns	r3, r3
 80012c4:	69ba      	ldr	r2, [r7, #24]
 80012c6:	4013      	ands	r3, r2
 80012c8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	4a49      	ldr	r2, [pc, #292]	; (80013f4 <HAL_GPIO_Init+0x2f0>)
 80012ce:	4293      	cmp	r3, r2
 80012d0:	d019      	beq.n	8001306 <HAL_GPIO_Init+0x202>
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	4a48      	ldr	r2, [pc, #288]	; (80013f8 <HAL_GPIO_Init+0x2f4>)
 80012d6:	4293      	cmp	r3, r2
 80012d8:	d013      	beq.n	8001302 <HAL_GPIO_Init+0x1fe>
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	4a47      	ldr	r2, [pc, #284]	; (80013fc <HAL_GPIO_Init+0x2f8>)
 80012de:	4293      	cmp	r3, r2
 80012e0:	d00d      	beq.n	80012fe <HAL_GPIO_Init+0x1fa>
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	4a46      	ldr	r2, [pc, #280]	; (8001400 <HAL_GPIO_Init+0x2fc>)
 80012e6:	4293      	cmp	r3, r2
 80012e8:	d007      	beq.n	80012fa <HAL_GPIO_Init+0x1f6>
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	4a45      	ldr	r2, [pc, #276]	; (8001404 <HAL_GPIO_Init+0x300>)
 80012ee:	4293      	cmp	r3, r2
 80012f0:	d101      	bne.n	80012f6 <HAL_GPIO_Init+0x1f2>
 80012f2:	2304      	movs	r3, #4
 80012f4:	e008      	b.n	8001308 <HAL_GPIO_Init+0x204>
 80012f6:	2307      	movs	r3, #7
 80012f8:	e006      	b.n	8001308 <HAL_GPIO_Init+0x204>
 80012fa:	2303      	movs	r3, #3
 80012fc:	e004      	b.n	8001308 <HAL_GPIO_Init+0x204>
 80012fe:	2302      	movs	r3, #2
 8001300:	e002      	b.n	8001308 <HAL_GPIO_Init+0x204>
 8001302:	2301      	movs	r3, #1
 8001304:	e000      	b.n	8001308 <HAL_GPIO_Init+0x204>
 8001306:	2300      	movs	r3, #0
 8001308:	69fa      	ldr	r2, [r7, #28]
 800130a:	f002 0203 	and.w	r2, r2, #3
 800130e:	0092      	lsls	r2, r2, #2
 8001310:	4093      	lsls	r3, r2
 8001312:	69ba      	ldr	r2, [r7, #24]
 8001314:	4313      	orrs	r3, r2
 8001316:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001318:	4935      	ldr	r1, [pc, #212]	; (80013f0 <HAL_GPIO_Init+0x2ec>)
 800131a:	69fb      	ldr	r3, [r7, #28]
 800131c:	089b      	lsrs	r3, r3, #2
 800131e:	3302      	adds	r3, #2
 8001320:	69ba      	ldr	r2, [r7, #24]
 8001322:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001326:	4b38      	ldr	r3, [pc, #224]	; (8001408 <HAL_GPIO_Init+0x304>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800132c:	693b      	ldr	r3, [r7, #16]
 800132e:	43db      	mvns	r3, r3
 8001330:	69ba      	ldr	r2, [r7, #24]
 8001332:	4013      	ands	r3, r2
 8001334:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001336:	683b      	ldr	r3, [r7, #0]
 8001338:	685b      	ldr	r3, [r3, #4]
 800133a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800133e:	2b00      	cmp	r3, #0
 8001340:	d003      	beq.n	800134a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001342:	69ba      	ldr	r2, [r7, #24]
 8001344:	693b      	ldr	r3, [r7, #16]
 8001346:	4313      	orrs	r3, r2
 8001348:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800134a:	4a2f      	ldr	r2, [pc, #188]	; (8001408 <HAL_GPIO_Init+0x304>)
 800134c:	69bb      	ldr	r3, [r7, #24]
 800134e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001350:	4b2d      	ldr	r3, [pc, #180]	; (8001408 <HAL_GPIO_Init+0x304>)
 8001352:	685b      	ldr	r3, [r3, #4]
 8001354:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001356:	693b      	ldr	r3, [r7, #16]
 8001358:	43db      	mvns	r3, r3
 800135a:	69ba      	ldr	r2, [r7, #24]
 800135c:	4013      	ands	r3, r2
 800135e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	685b      	ldr	r3, [r3, #4]
 8001364:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001368:	2b00      	cmp	r3, #0
 800136a:	d003      	beq.n	8001374 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800136c:	69ba      	ldr	r2, [r7, #24]
 800136e:	693b      	ldr	r3, [r7, #16]
 8001370:	4313      	orrs	r3, r2
 8001372:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001374:	4a24      	ldr	r2, [pc, #144]	; (8001408 <HAL_GPIO_Init+0x304>)
 8001376:	69bb      	ldr	r3, [r7, #24]
 8001378:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800137a:	4b23      	ldr	r3, [pc, #140]	; (8001408 <HAL_GPIO_Init+0x304>)
 800137c:	689b      	ldr	r3, [r3, #8]
 800137e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001380:	693b      	ldr	r3, [r7, #16]
 8001382:	43db      	mvns	r3, r3
 8001384:	69ba      	ldr	r2, [r7, #24]
 8001386:	4013      	ands	r3, r2
 8001388:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	685b      	ldr	r3, [r3, #4]
 800138e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001392:	2b00      	cmp	r3, #0
 8001394:	d003      	beq.n	800139e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001396:	69ba      	ldr	r2, [r7, #24]
 8001398:	693b      	ldr	r3, [r7, #16]
 800139a:	4313      	orrs	r3, r2
 800139c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800139e:	4a1a      	ldr	r2, [pc, #104]	; (8001408 <HAL_GPIO_Init+0x304>)
 80013a0:	69bb      	ldr	r3, [r7, #24]
 80013a2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80013a4:	4b18      	ldr	r3, [pc, #96]	; (8001408 <HAL_GPIO_Init+0x304>)
 80013a6:	68db      	ldr	r3, [r3, #12]
 80013a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013aa:	693b      	ldr	r3, [r7, #16]
 80013ac:	43db      	mvns	r3, r3
 80013ae:	69ba      	ldr	r2, [r7, #24]
 80013b0:	4013      	ands	r3, r2
 80013b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	685b      	ldr	r3, [r3, #4]
 80013b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d003      	beq.n	80013c8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80013c0:	69ba      	ldr	r2, [r7, #24]
 80013c2:	693b      	ldr	r3, [r7, #16]
 80013c4:	4313      	orrs	r3, r2
 80013c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80013c8:	4a0f      	ldr	r2, [pc, #60]	; (8001408 <HAL_GPIO_Init+0x304>)
 80013ca:	69bb      	ldr	r3, [r7, #24]
 80013cc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80013ce:	69fb      	ldr	r3, [r7, #28]
 80013d0:	3301      	adds	r3, #1
 80013d2:	61fb      	str	r3, [r7, #28]
 80013d4:	69fb      	ldr	r3, [r7, #28]
 80013d6:	2b0f      	cmp	r3, #15
 80013d8:	f67f aea2 	bls.w	8001120 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80013dc:	bf00      	nop
 80013de:	bf00      	nop
 80013e0:	3724      	adds	r7, #36	; 0x24
 80013e2:	46bd      	mov	sp, r7
 80013e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e8:	4770      	bx	lr
 80013ea:	bf00      	nop
 80013ec:	40023800 	.word	0x40023800
 80013f0:	40013800 	.word	0x40013800
 80013f4:	40020000 	.word	0x40020000
 80013f8:	40020400 	.word	0x40020400
 80013fc:	40020800 	.word	0x40020800
 8001400:	40020c00 	.word	0x40020c00
 8001404:	40021000 	.word	0x40021000
 8001408:	40013c00 	.word	0x40013c00

0800140c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800140c:	b480      	push	{r7}
 800140e:	b083      	sub	sp, #12
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
 8001414:	460b      	mov	r3, r1
 8001416:	807b      	strh	r3, [r7, #2]
 8001418:	4613      	mov	r3, r2
 800141a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800141c:	787b      	ldrb	r3, [r7, #1]
 800141e:	2b00      	cmp	r3, #0
 8001420:	d003      	beq.n	800142a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001422:	887a      	ldrh	r2, [r7, #2]
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001428:	e003      	b.n	8001432 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800142a:	887b      	ldrh	r3, [r7, #2]
 800142c:	041a      	lsls	r2, r3, #16
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	619a      	str	r2, [r3, #24]
}
 8001432:	bf00      	nop
 8001434:	370c      	adds	r7, #12
 8001436:	46bd      	mov	sp, r7
 8001438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143c:	4770      	bx	lr

0800143e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800143e:	b480      	push	{r7}
 8001440:	b085      	sub	sp, #20
 8001442:	af00      	add	r7, sp, #0
 8001444:	6078      	str	r0, [r7, #4]
 8001446:	460b      	mov	r3, r1
 8001448:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	695b      	ldr	r3, [r3, #20]
 800144e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001450:	887a      	ldrh	r2, [r7, #2]
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	4013      	ands	r3, r2
 8001456:	041a      	lsls	r2, r3, #16
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	43d9      	mvns	r1, r3
 800145c:	887b      	ldrh	r3, [r7, #2]
 800145e:	400b      	ands	r3, r1
 8001460:	431a      	orrs	r2, r3
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	619a      	str	r2, [r3, #24]
}
 8001466:	bf00      	nop
 8001468:	3714      	adds	r7, #20
 800146a:	46bd      	mov	sp, r7
 800146c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001470:	4770      	bx	lr

08001472 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001472:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001474:	b08f      	sub	sp, #60	; 0x3c
 8001476:	af0a      	add	r7, sp, #40	; 0x28
 8001478:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	2b00      	cmp	r3, #0
 800147e:	d101      	bne.n	8001484 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001480:	2301      	movs	r3, #1
 8001482:	e10f      	b.n	80016a4 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8001490:	b2db      	uxtb	r3, r3
 8001492:	2b00      	cmp	r3, #0
 8001494:	d106      	bne.n	80014a4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	2200      	movs	r2, #0
 800149a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800149e:	6878      	ldr	r0, [r7, #4]
 80014a0:	f005 fac6 	bl	8006a30 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	2203      	movs	r2, #3
 80014a8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80014ac:	68bb      	ldr	r3, [r7, #8]
 80014ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80014b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d102      	bne.n	80014be <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	2200      	movs	r2, #0
 80014bc:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	4618      	mov	r0, r3
 80014c4:	f002 f8a3 	bl	800360e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	603b      	str	r3, [r7, #0]
 80014ce:	687e      	ldr	r6, [r7, #4]
 80014d0:	466d      	mov	r5, sp
 80014d2:	f106 0410 	add.w	r4, r6, #16
 80014d6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014d8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80014da:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014dc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80014de:	e894 0003 	ldmia.w	r4, {r0, r1}
 80014e2:	e885 0003 	stmia.w	r5, {r0, r1}
 80014e6:	1d33      	adds	r3, r6, #4
 80014e8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80014ea:	6838      	ldr	r0, [r7, #0]
 80014ec:	f001 ff7b 	bl	80033e6 <USB_CoreInit>
 80014f0:	4603      	mov	r3, r0
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d005      	beq.n	8001502 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	2202      	movs	r2, #2
 80014fa:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80014fe:	2301      	movs	r3, #1
 8001500:	e0d0      	b.n	80016a4 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	2100      	movs	r1, #0
 8001508:	4618      	mov	r0, r3
 800150a:	f002 f891 	bl	8003630 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800150e:	2300      	movs	r3, #0
 8001510:	73fb      	strb	r3, [r7, #15]
 8001512:	e04a      	b.n	80015aa <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001514:	7bfa      	ldrb	r2, [r7, #15]
 8001516:	6879      	ldr	r1, [r7, #4]
 8001518:	4613      	mov	r3, r2
 800151a:	00db      	lsls	r3, r3, #3
 800151c:	1a9b      	subs	r3, r3, r2
 800151e:	009b      	lsls	r3, r3, #2
 8001520:	440b      	add	r3, r1
 8001522:	333d      	adds	r3, #61	; 0x3d
 8001524:	2201      	movs	r2, #1
 8001526:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001528:	7bfa      	ldrb	r2, [r7, #15]
 800152a:	6879      	ldr	r1, [r7, #4]
 800152c:	4613      	mov	r3, r2
 800152e:	00db      	lsls	r3, r3, #3
 8001530:	1a9b      	subs	r3, r3, r2
 8001532:	009b      	lsls	r3, r3, #2
 8001534:	440b      	add	r3, r1
 8001536:	333c      	adds	r3, #60	; 0x3c
 8001538:	7bfa      	ldrb	r2, [r7, #15]
 800153a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800153c:	7bfa      	ldrb	r2, [r7, #15]
 800153e:	7bfb      	ldrb	r3, [r7, #15]
 8001540:	b298      	uxth	r0, r3
 8001542:	6879      	ldr	r1, [r7, #4]
 8001544:	4613      	mov	r3, r2
 8001546:	00db      	lsls	r3, r3, #3
 8001548:	1a9b      	subs	r3, r3, r2
 800154a:	009b      	lsls	r3, r3, #2
 800154c:	440b      	add	r3, r1
 800154e:	3342      	adds	r3, #66	; 0x42
 8001550:	4602      	mov	r2, r0
 8001552:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001554:	7bfa      	ldrb	r2, [r7, #15]
 8001556:	6879      	ldr	r1, [r7, #4]
 8001558:	4613      	mov	r3, r2
 800155a:	00db      	lsls	r3, r3, #3
 800155c:	1a9b      	subs	r3, r3, r2
 800155e:	009b      	lsls	r3, r3, #2
 8001560:	440b      	add	r3, r1
 8001562:	333f      	adds	r3, #63	; 0x3f
 8001564:	2200      	movs	r2, #0
 8001566:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001568:	7bfa      	ldrb	r2, [r7, #15]
 800156a:	6879      	ldr	r1, [r7, #4]
 800156c:	4613      	mov	r3, r2
 800156e:	00db      	lsls	r3, r3, #3
 8001570:	1a9b      	subs	r3, r3, r2
 8001572:	009b      	lsls	r3, r3, #2
 8001574:	440b      	add	r3, r1
 8001576:	3344      	adds	r3, #68	; 0x44
 8001578:	2200      	movs	r2, #0
 800157a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800157c:	7bfa      	ldrb	r2, [r7, #15]
 800157e:	6879      	ldr	r1, [r7, #4]
 8001580:	4613      	mov	r3, r2
 8001582:	00db      	lsls	r3, r3, #3
 8001584:	1a9b      	subs	r3, r3, r2
 8001586:	009b      	lsls	r3, r3, #2
 8001588:	440b      	add	r3, r1
 800158a:	3348      	adds	r3, #72	; 0x48
 800158c:	2200      	movs	r2, #0
 800158e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001590:	7bfa      	ldrb	r2, [r7, #15]
 8001592:	6879      	ldr	r1, [r7, #4]
 8001594:	4613      	mov	r3, r2
 8001596:	00db      	lsls	r3, r3, #3
 8001598:	1a9b      	subs	r3, r3, r2
 800159a:	009b      	lsls	r3, r3, #2
 800159c:	440b      	add	r3, r1
 800159e:	3350      	adds	r3, #80	; 0x50
 80015a0:	2200      	movs	r2, #0
 80015a2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80015a4:	7bfb      	ldrb	r3, [r7, #15]
 80015a6:	3301      	adds	r3, #1
 80015a8:	73fb      	strb	r3, [r7, #15]
 80015aa:	7bfa      	ldrb	r2, [r7, #15]
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	685b      	ldr	r3, [r3, #4]
 80015b0:	429a      	cmp	r2, r3
 80015b2:	d3af      	bcc.n	8001514 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80015b4:	2300      	movs	r3, #0
 80015b6:	73fb      	strb	r3, [r7, #15]
 80015b8:	e044      	b.n	8001644 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80015ba:	7bfa      	ldrb	r2, [r7, #15]
 80015bc:	6879      	ldr	r1, [r7, #4]
 80015be:	4613      	mov	r3, r2
 80015c0:	00db      	lsls	r3, r3, #3
 80015c2:	1a9b      	subs	r3, r3, r2
 80015c4:	009b      	lsls	r3, r3, #2
 80015c6:	440b      	add	r3, r1
 80015c8:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80015cc:	2200      	movs	r2, #0
 80015ce:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80015d0:	7bfa      	ldrb	r2, [r7, #15]
 80015d2:	6879      	ldr	r1, [r7, #4]
 80015d4:	4613      	mov	r3, r2
 80015d6:	00db      	lsls	r3, r3, #3
 80015d8:	1a9b      	subs	r3, r3, r2
 80015da:	009b      	lsls	r3, r3, #2
 80015dc:	440b      	add	r3, r1
 80015de:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80015e2:	7bfa      	ldrb	r2, [r7, #15]
 80015e4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80015e6:	7bfa      	ldrb	r2, [r7, #15]
 80015e8:	6879      	ldr	r1, [r7, #4]
 80015ea:	4613      	mov	r3, r2
 80015ec:	00db      	lsls	r3, r3, #3
 80015ee:	1a9b      	subs	r3, r3, r2
 80015f0:	009b      	lsls	r3, r3, #2
 80015f2:	440b      	add	r3, r1
 80015f4:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80015f8:	2200      	movs	r2, #0
 80015fa:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80015fc:	7bfa      	ldrb	r2, [r7, #15]
 80015fe:	6879      	ldr	r1, [r7, #4]
 8001600:	4613      	mov	r3, r2
 8001602:	00db      	lsls	r3, r3, #3
 8001604:	1a9b      	subs	r3, r3, r2
 8001606:	009b      	lsls	r3, r3, #2
 8001608:	440b      	add	r3, r1
 800160a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800160e:	2200      	movs	r2, #0
 8001610:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001612:	7bfa      	ldrb	r2, [r7, #15]
 8001614:	6879      	ldr	r1, [r7, #4]
 8001616:	4613      	mov	r3, r2
 8001618:	00db      	lsls	r3, r3, #3
 800161a:	1a9b      	subs	r3, r3, r2
 800161c:	009b      	lsls	r3, r3, #2
 800161e:	440b      	add	r3, r1
 8001620:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001624:	2200      	movs	r2, #0
 8001626:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001628:	7bfa      	ldrb	r2, [r7, #15]
 800162a:	6879      	ldr	r1, [r7, #4]
 800162c:	4613      	mov	r3, r2
 800162e:	00db      	lsls	r3, r3, #3
 8001630:	1a9b      	subs	r3, r3, r2
 8001632:	009b      	lsls	r3, r3, #2
 8001634:	440b      	add	r3, r1
 8001636:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800163a:	2200      	movs	r2, #0
 800163c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800163e:	7bfb      	ldrb	r3, [r7, #15]
 8001640:	3301      	adds	r3, #1
 8001642:	73fb      	strb	r3, [r7, #15]
 8001644:	7bfa      	ldrb	r2, [r7, #15]
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	685b      	ldr	r3, [r3, #4]
 800164a:	429a      	cmp	r2, r3
 800164c:	d3b5      	bcc.n	80015ba <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	603b      	str	r3, [r7, #0]
 8001654:	687e      	ldr	r6, [r7, #4]
 8001656:	466d      	mov	r5, sp
 8001658:	f106 0410 	add.w	r4, r6, #16
 800165c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800165e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001660:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001662:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001664:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001668:	e885 0003 	stmia.w	r5, {r0, r1}
 800166c:	1d33      	adds	r3, r6, #4
 800166e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001670:	6838      	ldr	r0, [r7, #0]
 8001672:	f002 f829 	bl	80036c8 <USB_DevInit>
 8001676:	4603      	mov	r3, r0
 8001678:	2b00      	cmp	r3, #0
 800167a:	d005      	beq.n	8001688 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	2202      	movs	r2, #2
 8001680:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001684:	2301      	movs	r3, #1
 8001686:	e00d      	b.n	80016a4 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	2200      	movs	r2, #0
 800168c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	2201      	movs	r2, #1
 8001694:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	4618      	mov	r0, r3
 800169e:	f003 f8a5 	bl	80047ec <USB_DevDisconnect>

  return HAL_OK;
 80016a2:	2300      	movs	r3, #0
}
 80016a4:	4618      	mov	r0, r3
 80016a6:	3714      	adds	r7, #20
 80016a8:	46bd      	mov	sp, r7
 80016aa:	bdf0      	pop	{r4, r5, r6, r7, pc}

080016ac <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b084      	sub	sp, #16
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80016c0:	2b01      	cmp	r3, #1
 80016c2:	d101      	bne.n	80016c8 <HAL_PCD_Start+0x1c>
 80016c4:	2302      	movs	r3, #2
 80016c6:	e020      	b.n	800170a <HAL_PCD_Start+0x5e>
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	2201      	movs	r2, #1
 80016cc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016d4:	2b01      	cmp	r3, #1
 80016d6:	d109      	bne.n	80016ec <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80016dc:	2b01      	cmp	r3, #1
 80016de:	d005      	beq.n	80016ec <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016e4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	4618      	mov	r0, r3
 80016f2:	f001 ff7b 	bl	80035ec <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	4618      	mov	r0, r3
 80016fc:	f003 f855 	bl	80047aa <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	2200      	movs	r2, #0
 8001704:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001708:	2300      	movs	r3, #0
}
 800170a:	4618      	mov	r0, r3
 800170c:	3710      	adds	r7, #16
 800170e:	46bd      	mov	sp, r7
 8001710:	bd80      	pop	{r7, pc}

08001712 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001712:	b590      	push	{r4, r7, lr}
 8001714:	b08d      	sub	sp, #52	; 0x34
 8001716:	af00      	add	r7, sp, #0
 8001718:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001720:	6a3b      	ldr	r3, [r7, #32]
 8001722:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	4618      	mov	r0, r3
 800172a:	f003 f913 	bl	8004954 <USB_GetMode>
 800172e:	4603      	mov	r3, r0
 8001730:	2b00      	cmp	r3, #0
 8001732:	f040 839d 	bne.w	8001e70 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	4618      	mov	r0, r3
 800173c:	f003 f877 	bl	800482e <USB_ReadInterrupts>
 8001740:	4603      	mov	r3, r0
 8001742:	2b00      	cmp	r3, #0
 8001744:	f000 8393 	beq.w	8001e6e <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	4618      	mov	r0, r3
 800174e:	f003 f86e 	bl	800482e <USB_ReadInterrupts>
 8001752:	4603      	mov	r3, r0
 8001754:	f003 0302 	and.w	r3, r3, #2
 8001758:	2b02      	cmp	r3, #2
 800175a:	d107      	bne.n	800176c <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	695a      	ldr	r2, [r3, #20]
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f002 0202 	and.w	r2, r2, #2
 800176a:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	4618      	mov	r0, r3
 8001772:	f003 f85c 	bl	800482e <USB_ReadInterrupts>
 8001776:	4603      	mov	r3, r0
 8001778:	f003 0310 	and.w	r3, r3, #16
 800177c:	2b10      	cmp	r3, #16
 800177e:	d161      	bne.n	8001844 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	699a      	ldr	r2, [r3, #24]
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f022 0210 	bic.w	r2, r2, #16
 800178e:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8001790:	6a3b      	ldr	r3, [r7, #32]
 8001792:	6a1b      	ldr	r3, [r3, #32]
 8001794:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8001796:	69bb      	ldr	r3, [r7, #24]
 8001798:	f003 020f 	and.w	r2, r3, #15
 800179c:	4613      	mov	r3, r2
 800179e:	00db      	lsls	r3, r3, #3
 80017a0:	1a9b      	subs	r3, r3, r2
 80017a2:	009b      	lsls	r3, r3, #2
 80017a4:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80017a8:	687a      	ldr	r2, [r7, #4]
 80017aa:	4413      	add	r3, r2
 80017ac:	3304      	adds	r3, #4
 80017ae:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80017b0:	69bb      	ldr	r3, [r7, #24]
 80017b2:	0c5b      	lsrs	r3, r3, #17
 80017b4:	f003 030f 	and.w	r3, r3, #15
 80017b8:	2b02      	cmp	r3, #2
 80017ba:	d124      	bne.n	8001806 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 80017bc:	69ba      	ldr	r2, [r7, #24]
 80017be:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80017c2:	4013      	ands	r3, r2
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d035      	beq.n	8001834 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80017c8:	697b      	ldr	r3, [r7, #20]
 80017ca:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 80017cc:	69bb      	ldr	r3, [r7, #24]
 80017ce:	091b      	lsrs	r3, r3, #4
 80017d0:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80017d2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80017d6:	b29b      	uxth	r3, r3
 80017d8:	461a      	mov	r2, r3
 80017da:	6a38      	ldr	r0, [r7, #32]
 80017dc:	f002 fe93 	bl	8004506 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80017e0:	697b      	ldr	r3, [r7, #20]
 80017e2:	68da      	ldr	r2, [r3, #12]
 80017e4:	69bb      	ldr	r3, [r7, #24]
 80017e6:	091b      	lsrs	r3, r3, #4
 80017e8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80017ec:	441a      	add	r2, r3
 80017ee:	697b      	ldr	r3, [r7, #20]
 80017f0:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80017f2:	697b      	ldr	r3, [r7, #20]
 80017f4:	699a      	ldr	r2, [r3, #24]
 80017f6:	69bb      	ldr	r3, [r7, #24]
 80017f8:	091b      	lsrs	r3, r3, #4
 80017fa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80017fe:	441a      	add	r2, r3
 8001800:	697b      	ldr	r3, [r7, #20]
 8001802:	619a      	str	r2, [r3, #24]
 8001804:	e016      	b.n	8001834 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8001806:	69bb      	ldr	r3, [r7, #24]
 8001808:	0c5b      	lsrs	r3, r3, #17
 800180a:	f003 030f 	and.w	r3, r3, #15
 800180e:	2b06      	cmp	r3, #6
 8001810:	d110      	bne.n	8001834 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001818:	2208      	movs	r2, #8
 800181a:	4619      	mov	r1, r3
 800181c:	6a38      	ldr	r0, [r7, #32]
 800181e:	f002 fe72 	bl	8004506 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001822:	697b      	ldr	r3, [r7, #20]
 8001824:	699a      	ldr	r2, [r3, #24]
 8001826:	69bb      	ldr	r3, [r7, #24]
 8001828:	091b      	lsrs	r3, r3, #4
 800182a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800182e:	441a      	add	r2, r3
 8001830:	697b      	ldr	r3, [r7, #20]
 8001832:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	699a      	ldr	r2, [r3, #24]
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f042 0210 	orr.w	r2, r2, #16
 8001842:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	4618      	mov	r0, r3
 800184a:	f002 fff0 	bl	800482e <USB_ReadInterrupts>
 800184e:	4603      	mov	r3, r0
 8001850:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001854:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001858:	d16e      	bne.n	8001938 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 800185a:	2300      	movs	r3, #0
 800185c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	4618      	mov	r0, r3
 8001864:	f002 fff6 	bl	8004854 <USB_ReadDevAllOutEpInterrupt>
 8001868:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800186a:	e062      	b.n	8001932 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 800186c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800186e:	f003 0301 	and.w	r3, r3, #1
 8001872:	2b00      	cmp	r3, #0
 8001874:	d057      	beq.n	8001926 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800187c:	b2d2      	uxtb	r2, r2
 800187e:	4611      	mov	r1, r2
 8001880:	4618      	mov	r0, r3
 8001882:	f003 f81b 	bl	80048bc <USB_ReadDevOutEPInterrupt>
 8001886:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001888:	693b      	ldr	r3, [r7, #16]
 800188a:	f003 0301 	and.w	r3, r3, #1
 800188e:	2b00      	cmp	r3, #0
 8001890:	d00c      	beq.n	80018ac <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001894:	015a      	lsls	r2, r3, #5
 8001896:	69fb      	ldr	r3, [r7, #28]
 8001898:	4413      	add	r3, r2
 800189a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800189e:	461a      	mov	r2, r3
 80018a0:	2301      	movs	r3, #1
 80018a2:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80018a4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80018a6:	6878      	ldr	r0, [r7, #4]
 80018a8:	f000 fdb0 	bl	800240c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80018ac:	693b      	ldr	r3, [r7, #16]
 80018ae:	f003 0308 	and.w	r3, r3, #8
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d00c      	beq.n	80018d0 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80018b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018b8:	015a      	lsls	r2, r3, #5
 80018ba:	69fb      	ldr	r3, [r7, #28]
 80018bc:	4413      	add	r3, r2
 80018be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80018c2:	461a      	mov	r2, r3
 80018c4:	2308      	movs	r3, #8
 80018c6:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80018c8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80018ca:	6878      	ldr	r0, [r7, #4]
 80018cc:	f000 feaa 	bl	8002624 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80018d0:	693b      	ldr	r3, [r7, #16]
 80018d2:	f003 0310 	and.w	r3, r3, #16
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d008      	beq.n	80018ec <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80018da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018dc:	015a      	lsls	r2, r3, #5
 80018de:	69fb      	ldr	r3, [r7, #28]
 80018e0:	4413      	add	r3, r2
 80018e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80018e6:	461a      	mov	r2, r3
 80018e8:	2310      	movs	r3, #16
 80018ea:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80018ec:	693b      	ldr	r3, [r7, #16]
 80018ee:	f003 0320 	and.w	r3, r3, #32
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d008      	beq.n	8001908 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80018f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018f8:	015a      	lsls	r2, r3, #5
 80018fa:	69fb      	ldr	r3, [r7, #28]
 80018fc:	4413      	add	r3, r2
 80018fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001902:	461a      	mov	r2, r3
 8001904:	2320      	movs	r3, #32
 8001906:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001908:	693b      	ldr	r3, [r7, #16]
 800190a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800190e:	2b00      	cmp	r3, #0
 8001910:	d009      	beq.n	8001926 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001914:	015a      	lsls	r2, r3, #5
 8001916:	69fb      	ldr	r3, [r7, #28]
 8001918:	4413      	add	r3, r2
 800191a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800191e:	461a      	mov	r2, r3
 8001920:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001924:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001928:	3301      	adds	r3, #1
 800192a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800192c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800192e:	085b      	lsrs	r3, r3, #1
 8001930:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001932:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001934:	2b00      	cmp	r3, #0
 8001936:	d199      	bne.n	800186c <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	4618      	mov	r0, r3
 800193e:	f002 ff76 	bl	800482e <USB_ReadInterrupts>
 8001942:	4603      	mov	r3, r0
 8001944:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001948:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800194c:	f040 80c0 	bne.w	8001ad0 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	4618      	mov	r0, r3
 8001956:	f002 ff97 	bl	8004888 <USB_ReadDevAllInEpInterrupt>
 800195a:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800195c:	2300      	movs	r3, #0
 800195e:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8001960:	e0b2      	b.n	8001ac8 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001962:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001964:	f003 0301 	and.w	r3, r3, #1
 8001968:	2b00      	cmp	r3, #0
 800196a:	f000 80a7 	beq.w	8001abc <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001974:	b2d2      	uxtb	r2, r2
 8001976:	4611      	mov	r1, r2
 8001978:	4618      	mov	r0, r3
 800197a:	f002 ffbd 	bl	80048f8 <USB_ReadDevInEPInterrupt>
 800197e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001980:	693b      	ldr	r3, [r7, #16]
 8001982:	f003 0301 	and.w	r3, r3, #1
 8001986:	2b00      	cmp	r3, #0
 8001988:	d057      	beq.n	8001a3a <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800198a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800198c:	f003 030f 	and.w	r3, r3, #15
 8001990:	2201      	movs	r2, #1
 8001992:	fa02 f303 	lsl.w	r3, r2, r3
 8001996:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001998:	69fb      	ldr	r3, [r7, #28]
 800199a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800199e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	43db      	mvns	r3, r3
 80019a4:	69f9      	ldr	r1, [r7, #28]
 80019a6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80019aa:	4013      	ands	r3, r2
 80019ac:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80019ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019b0:	015a      	lsls	r2, r3, #5
 80019b2:	69fb      	ldr	r3, [r7, #28]
 80019b4:	4413      	add	r3, r2
 80019b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80019ba:	461a      	mov	r2, r3
 80019bc:	2301      	movs	r3, #1
 80019be:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	691b      	ldr	r3, [r3, #16]
 80019c4:	2b01      	cmp	r3, #1
 80019c6:	d132      	bne.n	8001a2e <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80019c8:	6879      	ldr	r1, [r7, #4]
 80019ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019cc:	4613      	mov	r3, r2
 80019ce:	00db      	lsls	r3, r3, #3
 80019d0:	1a9b      	subs	r3, r3, r2
 80019d2:	009b      	lsls	r3, r3, #2
 80019d4:	440b      	add	r3, r1
 80019d6:	3348      	adds	r3, #72	; 0x48
 80019d8:	6819      	ldr	r1, [r3, #0]
 80019da:	6878      	ldr	r0, [r7, #4]
 80019dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019de:	4613      	mov	r3, r2
 80019e0:	00db      	lsls	r3, r3, #3
 80019e2:	1a9b      	subs	r3, r3, r2
 80019e4:	009b      	lsls	r3, r3, #2
 80019e6:	4403      	add	r3, r0
 80019e8:	3344      	adds	r3, #68	; 0x44
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	4419      	add	r1, r3
 80019ee:	6878      	ldr	r0, [r7, #4]
 80019f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019f2:	4613      	mov	r3, r2
 80019f4:	00db      	lsls	r3, r3, #3
 80019f6:	1a9b      	subs	r3, r3, r2
 80019f8:	009b      	lsls	r3, r3, #2
 80019fa:	4403      	add	r3, r0
 80019fc:	3348      	adds	r3, #72	; 0x48
 80019fe:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d113      	bne.n	8001a2e <HAL_PCD_IRQHandler+0x31c>
 8001a06:	6879      	ldr	r1, [r7, #4]
 8001a08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a0a:	4613      	mov	r3, r2
 8001a0c:	00db      	lsls	r3, r3, #3
 8001a0e:	1a9b      	subs	r3, r3, r2
 8001a10:	009b      	lsls	r3, r3, #2
 8001a12:	440b      	add	r3, r1
 8001a14:	3350      	adds	r3, #80	; 0x50
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d108      	bne.n	8001a2e <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	6818      	ldr	r0, [r3, #0]
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001a26:	461a      	mov	r2, r3
 8001a28:	2101      	movs	r1, #1
 8001a2a:	f002 ffc5 	bl	80049b8 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a30:	b2db      	uxtb	r3, r3
 8001a32:	4619      	mov	r1, r3
 8001a34:	6878      	ldr	r0, [r7, #4]
 8001a36:	f005 f87c 	bl	8006b32 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001a3a:	693b      	ldr	r3, [r7, #16]
 8001a3c:	f003 0308 	and.w	r3, r3, #8
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d008      	beq.n	8001a56 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a46:	015a      	lsls	r2, r3, #5
 8001a48:	69fb      	ldr	r3, [r7, #28]
 8001a4a:	4413      	add	r3, r2
 8001a4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001a50:	461a      	mov	r2, r3
 8001a52:	2308      	movs	r3, #8
 8001a54:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001a56:	693b      	ldr	r3, [r7, #16]
 8001a58:	f003 0310 	and.w	r3, r3, #16
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d008      	beq.n	8001a72 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a62:	015a      	lsls	r2, r3, #5
 8001a64:	69fb      	ldr	r3, [r7, #28]
 8001a66:	4413      	add	r3, r2
 8001a68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001a6c:	461a      	mov	r2, r3
 8001a6e:	2310      	movs	r3, #16
 8001a70:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001a72:	693b      	ldr	r3, [r7, #16]
 8001a74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d008      	beq.n	8001a8e <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a7e:	015a      	lsls	r2, r3, #5
 8001a80:	69fb      	ldr	r3, [r7, #28]
 8001a82:	4413      	add	r3, r2
 8001a84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001a88:	461a      	mov	r2, r3
 8001a8a:	2340      	movs	r3, #64	; 0x40
 8001a8c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001a8e:	693b      	ldr	r3, [r7, #16]
 8001a90:	f003 0302 	and.w	r3, r3, #2
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d008      	beq.n	8001aaa <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a9a:	015a      	lsls	r2, r3, #5
 8001a9c:	69fb      	ldr	r3, [r7, #28]
 8001a9e:	4413      	add	r3, r2
 8001aa0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001aa4:	461a      	mov	r2, r3
 8001aa6:	2302      	movs	r3, #2
 8001aa8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001aaa:	693b      	ldr	r3, [r7, #16]
 8001aac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d003      	beq.n	8001abc <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001ab4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001ab6:	6878      	ldr	r0, [r7, #4]
 8001ab8:	f000 fc1b 	bl	80022f2 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001abe:	3301      	adds	r3, #1
 8001ac0:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001ac2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ac4:	085b      	lsrs	r3, r3, #1
 8001ac6:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001ac8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	f47f af49 	bne.w	8001962 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	f002 feaa 	bl	800482e <USB_ReadInterrupts>
 8001ada:	4603      	mov	r3, r0
 8001adc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001ae0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001ae4:	d122      	bne.n	8001b2c <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001ae6:	69fb      	ldr	r3, [r7, #28]
 8001ae8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001aec:	685b      	ldr	r3, [r3, #4]
 8001aee:	69fa      	ldr	r2, [r7, #28]
 8001af0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001af4:	f023 0301 	bic.w	r3, r3, #1
 8001af8:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8001b00:	2b01      	cmp	r3, #1
 8001b02:	d108      	bne.n	8001b16 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	2200      	movs	r2, #0
 8001b08:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001b0c:	2100      	movs	r1, #0
 8001b0e:	6878      	ldr	r0, [r7, #4]
 8001b10:	f000 fe26 	bl	8002760 <HAL_PCDEx_LPM_Callback>
 8001b14:	e002      	b.n	8001b1c <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001b16:	6878      	ldr	r0, [r7, #4]
 8001b18:	f005 f878 	bl	8006c0c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	695a      	ldr	r2, [r3, #20]
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8001b2a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	4618      	mov	r0, r3
 8001b32:	f002 fe7c 	bl	800482e <USB_ReadInterrupts>
 8001b36:	4603      	mov	r3, r0
 8001b38:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001b3c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001b40:	d112      	bne.n	8001b68 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001b42:	69fb      	ldr	r3, [r7, #28]
 8001b44:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001b48:	689b      	ldr	r3, [r3, #8]
 8001b4a:	f003 0301 	and.w	r3, r3, #1
 8001b4e:	2b01      	cmp	r3, #1
 8001b50:	d102      	bne.n	8001b58 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001b52:	6878      	ldr	r0, [r7, #4]
 8001b54:	f005 f834 	bl	8006bc0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	695a      	ldr	r2, [r3, #20]
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8001b66:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	f002 fe5e 	bl	800482e <USB_ReadInterrupts>
 8001b72:	4603      	mov	r3, r0
 8001b74:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b78:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001b7c:	f040 80c7 	bne.w	8001d0e <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001b80:	69fb      	ldr	r3, [r7, #28]
 8001b82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001b86:	685b      	ldr	r3, [r3, #4]
 8001b88:	69fa      	ldr	r2, [r7, #28]
 8001b8a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001b8e:	f023 0301 	bic.w	r3, r3, #1
 8001b92:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	2110      	movs	r1, #16
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	f001 fef8 	bl	8003990 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001ba4:	e056      	b.n	8001c54 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001ba6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ba8:	015a      	lsls	r2, r3, #5
 8001baa:	69fb      	ldr	r3, [r7, #28]
 8001bac:	4413      	add	r3, r2
 8001bae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001bb2:	461a      	mov	r2, r3
 8001bb4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001bb8:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001bba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bbc:	015a      	lsls	r2, r3, #5
 8001bbe:	69fb      	ldr	r3, [r7, #28]
 8001bc0:	4413      	add	r3, r2
 8001bc2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001bca:	0151      	lsls	r1, r2, #5
 8001bcc:	69fa      	ldr	r2, [r7, #28]
 8001bce:	440a      	add	r2, r1
 8001bd0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001bd4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001bd8:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8001bda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bdc:	015a      	lsls	r2, r3, #5
 8001bde:	69fb      	ldr	r3, [r7, #28]
 8001be0:	4413      	add	r3, r2
 8001be2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001bea:	0151      	lsls	r1, r2, #5
 8001bec:	69fa      	ldr	r2, [r7, #28]
 8001bee:	440a      	add	r2, r1
 8001bf0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001bf4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001bf8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001bfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bfc:	015a      	lsls	r2, r3, #5
 8001bfe:	69fb      	ldr	r3, [r7, #28]
 8001c00:	4413      	add	r3, r2
 8001c02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001c06:	461a      	mov	r2, r3
 8001c08:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001c0c:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001c0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c10:	015a      	lsls	r2, r3, #5
 8001c12:	69fb      	ldr	r3, [r7, #28]
 8001c14:	4413      	add	r3, r2
 8001c16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001c1e:	0151      	lsls	r1, r2, #5
 8001c20:	69fa      	ldr	r2, [r7, #28]
 8001c22:	440a      	add	r2, r1
 8001c24:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001c28:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001c2c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001c2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c30:	015a      	lsls	r2, r3, #5
 8001c32:	69fb      	ldr	r3, [r7, #28]
 8001c34:	4413      	add	r3, r2
 8001c36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001c3e:	0151      	lsls	r1, r2, #5
 8001c40:	69fa      	ldr	r2, [r7, #28]
 8001c42:	440a      	add	r2, r1
 8001c44:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001c48:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001c4c:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c50:	3301      	adds	r3, #1
 8001c52:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	685b      	ldr	r3, [r3, #4]
 8001c58:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001c5a:	429a      	cmp	r2, r3
 8001c5c:	d3a3      	bcc.n	8001ba6 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001c5e:	69fb      	ldr	r3, [r7, #28]
 8001c60:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001c64:	69db      	ldr	r3, [r3, #28]
 8001c66:	69fa      	ldr	r2, [r7, #28]
 8001c68:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001c6c:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8001c70:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d016      	beq.n	8001ca8 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001c7a:	69fb      	ldr	r3, [r7, #28]
 8001c7c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001c80:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001c84:	69fa      	ldr	r2, [r7, #28]
 8001c86:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001c8a:	f043 030b 	orr.w	r3, r3, #11
 8001c8e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001c92:	69fb      	ldr	r3, [r7, #28]
 8001c94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001c98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c9a:	69fa      	ldr	r2, [r7, #28]
 8001c9c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001ca0:	f043 030b 	orr.w	r3, r3, #11
 8001ca4:	6453      	str	r3, [r2, #68]	; 0x44
 8001ca6:	e015      	b.n	8001cd4 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001ca8:	69fb      	ldr	r3, [r7, #28]
 8001caa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001cae:	695b      	ldr	r3, [r3, #20]
 8001cb0:	69fa      	ldr	r2, [r7, #28]
 8001cb2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001cb6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001cba:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8001cbe:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001cc0:	69fb      	ldr	r3, [r7, #28]
 8001cc2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001cc6:	691b      	ldr	r3, [r3, #16]
 8001cc8:	69fa      	ldr	r2, [r7, #28]
 8001cca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001cce:	f043 030b 	orr.w	r3, r3, #11
 8001cd2:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001cd4:	69fb      	ldr	r3, [r7, #28]
 8001cd6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	69fa      	ldr	r2, [r7, #28]
 8001cde:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001ce2:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8001ce6:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	6818      	ldr	r0, [r3, #0]
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	691b      	ldr	r3, [r3, #16]
 8001cf0:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001cf8:	461a      	mov	r2, r3
 8001cfa:	f002 fe5d 	bl	80049b8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	695a      	ldr	r2, [r3, #20]
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001d0c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	4618      	mov	r0, r3
 8001d14:	f002 fd8b 	bl	800482e <USB_ReadInterrupts>
 8001d18:	4603      	mov	r3, r0
 8001d1a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001d1e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001d22:	d124      	bne.n	8001d6e <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	4618      	mov	r0, r3
 8001d2a:	f002 fe21 	bl	8004970 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	4618      	mov	r0, r3
 8001d34:	f001 fe89 	bl	8003a4a <USB_GetDevSpeed>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	461a      	mov	r2, r3
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681c      	ldr	r4, [r3, #0]
 8001d44:	f001 f93c 	bl	8002fc0 <HAL_RCC_GetHCLKFreq>
 8001d48:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001d4e:	b2db      	uxtb	r3, r3
 8001d50:	461a      	mov	r2, r3
 8001d52:	4620      	mov	r0, r4
 8001d54:	f001 fba8 	bl	80034a8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001d58:	6878      	ldr	r0, [r7, #4]
 8001d5a:	f004 ff12 	bl	8006b82 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	695a      	ldr	r2, [r3, #20]
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8001d6c:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	4618      	mov	r0, r3
 8001d74:	f002 fd5b 	bl	800482e <USB_ReadInterrupts>
 8001d78:	4603      	mov	r3, r0
 8001d7a:	f003 0308 	and.w	r3, r3, #8
 8001d7e:	2b08      	cmp	r3, #8
 8001d80:	d10a      	bne.n	8001d98 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001d82:	6878      	ldr	r0, [r7, #4]
 8001d84:	f004 feef 	bl	8006b66 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	695a      	ldr	r2, [r3, #20]
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f002 0208 	and.w	r2, r2, #8
 8001d96:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	f002 fd46 	bl	800482e <USB_ReadInterrupts>
 8001da2:	4603      	mov	r3, r0
 8001da4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001da8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001dac:	d10f      	bne.n	8001dce <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8001dae:	2300      	movs	r3, #0
 8001db0:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001db4:	b2db      	uxtb	r3, r3
 8001db6:	4619      	mov	r1, r3
 8001db8:	6878      	ldr	r0, [r7, #4]
 8001dba:	f004 ff47 	bl	8006c4c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	695a      	ldr	r2, [r3, #20]
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8001dcc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	f002 fd2b 	bl	800482e <USB_ReadInterrupts>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001dde:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001de2:	d10f      	bne.n	8001e04 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8001de4:	2300      	movs	r3, #0
 8001de6:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dea:	b2db      	uxtb	r3, r3
 8001dec:	4619      	mov	r1, r3
 8001dee:	6878      	ldr	r0, [r7, #4]
 8001df0:	f004 ff1a 	bl	8006c28 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	695a      	ldr	r2, [r3, #20]
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8001e02:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	4618      	mov	r0, r3
 8001e0a:	f002 fd10 	bl	800482e <USB_ReadInterrupts>
 8001e0e:	4603      	mov	r3, r0
 8001e10:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001e14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e18:	d10a      	bne.n	8001e30 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001e1a:	6878      	ldr	r0, [r7, #4]
 8001e1c:	f004 ff28 	bl	8006c70 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	695a      	ldr	r2, [r3, #20]
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8001e2e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	4618      	mov	r0, r3
 8001e36:	f002 fcfa 	bl	800482e <USB_ReadInterrupts>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	f003 0304 	and.w	r3, r3, #4
 8001e40:	2b04      	cmp	r3, #4
 8001e42:	d115      	bne.n	8001e70 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	685b      	ldr	r3, [r3, #4]
 8001e4a:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001e4c:	69bb      	ldr	r3, [r7, #24]
 8001e4e:	f003 0304 	and.w	r3, r3, #4
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d002      	beq.n	8001e5c <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001e56:	6878      	ldr	r0, [r7, #4]
 8001e58:	f004 ff18 	bl	8006c8c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	6859      	ldr	r1, [r3, #4]
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	69ba      	ldr	r2, [r7, #24]
 8001e68:	430a      	orrs	r2, r1
 8001e6a:	605a      	str	r2, [r3, #4]
 8001e6c:	e000      	b.n	8001e70 <HAL_PCD_IRQHandler+0x75e>
      return;
 8001e6e:	bf00      	nop
    }
  }
}
 8001e70:	3734      	adds	r7, #52	; 0x34
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bd90      	pop	{r4, r7, pc}

08001e76 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001e76:	b580      	push	{r7, lr}
 8001e78:	b082      	sub	sp, #8
 8001e7a:	af00      	add	r7, sp, #0
 8001e7c:	6078      	str	r0, [r7, #4]
 8001e7e:	460b      	mov	r3, r1
 8001e80:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001e88:	2b01      	cmp	r3, #1
 8001e8a:	d101      	bne.n	8001e90 <HAL_PCD_SetAddress+0x1a>
 8001e8c:	2302      	movs	r3, #2
 8001e8e:	e013      	b.n	8001eb8 <HAL_PCD_SetAddress+0x42>
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2201      	movs	r2, #1
 8001e94:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	78fa      	ldrb	r2, [r7, #3]
 8001e9c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	78fa      	ldrb	r2, [r7, #3]
 8001ea6:	4611      	mov	r1, r2
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	f002 fc58 	bl	800475e <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001eb6:	2300      	movs	r3, #0
}
 8001eb8:	4618      	mov	r0, r3
 8001eba:	3708      	adds	r7, #8
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	bd80      	pop	{r7, pc}

08001ec0 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b084      	sub	sp, #16
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
 8001ec8:	4608      	mov	r0, r1
 8001eca:	4611      	mov	r1, r2
 8001ecc:	461a      	mov	r2, r3
 8001ece:	4603      	mov	r3, r0
 8001ed0:	70fb      	strb	r3, [r7, #3]
 8001ed2:	460b      	mov	r3, r1
 8001ed4:	803b      	strh	r3, [r7, #0]
 8001ed6:	4613      	mov	r3, r2
 8001ed8:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001eda:	2300      	movs	r3, #0
 8001edc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001ede:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	da0f      	bge.n	8001f06 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001ee6:	78fb      	ldrb	r3, [r7, #3]
 8001ee8:	f003 020f 	and.w	r2, r3, #15
 8001eec:	4613      	mov	r3, r2
 8001eee:	00db      	lsls	r3, r3, #3
 8001ef0:	1a9b      	subs	r3, r3, r2
 8001ef2:	009b      	lsls	r3, r3, #2
 8001ef4:	3338      	adds	r3, #56	; 0x38
 8001ef6:	687a      	ldr	r2, [r7, #4]
 8001ef8:	4413      	add	r3, r2
 8001efa:	3304      	adds	r3, #4
 8001efc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	2201      	movs	r2, #1
 8001f02:	705a      	strb	r2, [r3, #1]
 8001f04:	e00f      	b.n	8001f26 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001f06:	78fb      	ldrb	r3, [r7, #3]
 8001f08:	f003 020f 	and.w	r2, r3, #15
 8001f0c:	4613      	mov	r3, r2
 8001f0e:	00db      	lsls	r3, r3, #3
 8001f10:	1a9b      	subs	r3, r3, r2
 8001f12:	009b      	lsls	r3, r3, #2
 8001f14:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001f18:	687a      	ldr	r2, [r7, #4]
 8001f1a:	4413      	add	r3, r2
 8001f1c:	3304      	adds	r3, #4
 8001f1e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	2200      	movs	r2, #0
 8001f24:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001f26:	78fb      	ldrb	r3, [r7, #3]
 8001f28:	f003 030f 	and.w	r3, r3, #15
 8001f2c:	b2da      	uxtb	r2, r3
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001f32:	883a      	ldrh	r2, [r7, #0]
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	78ba      	ldrb	r2, [r7, #2]
 8001f3c:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	785b      	ldrb	r3, [r3, #1]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d004      	beq.n	8001f50 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	781b      	ldrb	r3, [r3, #0]
 8001f4a:	b29a      	uxth	r2, r3
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001f50:	78bb      	ldrb	r3, [r7, #2]
 8001f52:	2b02      	cmp	r3, #2
 8001f54:	d102      	bne.n	8001f5c <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	2200      	movs	r2, #0
 8001f5a:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001f62:	2b01      	cmp	r3, #1
 8001f64:	d101      	bne.n	8001f6a <HAL_PCD_EP_Open+0xaa>
 8001f66:	2302      	movs	r3, #2
 8001f68:	e00e      	b.n	8001f88 <HAL_PCD_EP_Open+0xc8>
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	2201      	movs	r2, #1
 8001f6e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	68f9      	ldr	r1, [r7, #12]
 8001f78:	4618      	mov	r0, r3
 8001f7a:	f001 fd8b 	bl	8003a94 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	2200      	movs	r2, #0
 8001f82:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8001f86:	7afb      	ldrb	r3, [r7, #11]
}
 8001f88:	4618      	mov	r0, r3
 8001f8a:	3710      	adds	r7, #16
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	bd80      	pop	{r7, pc}

08001f90 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b084      	sub	sp, #16
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
 8001f98:	460b      	mov	r3, r1
 8001f9a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001f9c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	da0f      	bge.n	8001fc4 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001fa4:	78fb      	ldrb	r3, [r7, #3]
 8001fa6:	f003 020f 	and.w	r2, r3, #15
 8001faa:	4613      	mov	r3, r2
 8001fac:	00db      	lsls	r3, r3, #3
 8001fae:	1a9b      	subs	r3, r3, r2
 8001fb0:	009b      	lsls	r3, r3, #2
 8001fb2:	3338      	adds	r3, #56	; 0x38
 8001fb4:	687a      	ldr	r2, [r7, #4]
 8001fb6:	4413      	add	r3, r2
 8001fb8:	3304      	adds	r3, #4
 8001fba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	2201      	movs	r2, #1
 8001fc0:	705a      	strb	r2, [r3, #1]
 8001fc2:	e00f      	b.n	8001fe4 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001fc4:	78fb      	ldrb	r3, [r7, #3]
 8001fc6:	f003 020f 	and.w	r2, r3, #15
 8001fca:	4613      	mov	r3, r2
 8001fcc:	00db      	lsls	r3, r3, #3
 8001fce:	1a9b      	subs	r3, r3, r2
 8001fd0:	009b      	lsls	r3, r3, #2
 8001fd2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001fd6:	687a      	ldr	r2, [r7, #4]
 8001fd8:	4413      	add	r3, r2
 8001fda:	3304      	adds	r3, #4
 8001fdc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001fe4:	78fb      	ldrb	r3, [r7, #3]
 8001fe6:	f003 030f 	and.w	r3, r3, #15
 8001fea:	b2da      	uxtb	r2, r3
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001ff6:	2b01      	cmp	r3, #1
 8001ff8:	d101      	bne.n	8001ffe <HAL_PCD_EP_Close+0x6e>
 8001ffa:	2302      	movs	r3, #2
 8001ffc:	e00e      	b.n	800201c <HAL_PCD_EP_Close+0x8c>
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	2201      	movs	r2, #1
 8002002:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	68f9      	ldr	r1, [r7, #12]
 800200c:	4618      	mov	r0, r3
 800200e:	f001 fdc9 	bl	8003ba4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	2200      	movs	r2, #0
 8002016:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800201a:	2300      	movs	r3, #0
}
 800201c:	4618      	mov	r0, r3
 800201e:	3710      	adds	r7, #16
 8002020:	46bd      	mov	sp, r7
 8002022:	bd80      	pop	{r7, pc}

08002024 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b086      	sub	sp, #24
 8002028:	af00      	add	r7, sp, #0
 800202a:	60f8      	str	r0, [r7, #12]
 800202c:	607a      	str	r2, [r7, #4]
 800202e:	603b      	str	r3, [r7, #0]
 8002030:	460b      	mov	r3, r1
 8002032:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002034:	7afb      	ldrb	r3, [r7, #11]
 8002036:	f003 020f 	and.w	r2, r3, #15
 800203a:	4613      	mov	r3, r2
 800203c:	00db      	lsls	r3, r3, #3
 800203e:	1a9b      	subs	r3, r3, r2
 8002040:	009b      	lsls	r3, r3, #2
 8002042:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002046:	68fa      	ldr	r2, [r7, #12]
 8002048:	4413      	add	r3, r2
 800204a:	3304      	adds	r3, #4
 800204c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800204e:	697b      	ldr	r3, [r7, #20]
 8002050:	687a      	ldr	r2, [r7, #4]
 8002052:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002054:	697b      	ldr	r3, [r7, #20]
 8002056:	683a      	ldr	r2, [r7, #0]
 8002058:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800205a:	697b      	ldr	r3, [r7, #20]
 800205c:	2200      	movs	r2, #0
 800205e:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8002060:	697b      	ldr	r3, [r7, #20]
 8002062:	2200      	movs	r2, #0
 8002064:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002066:	7afb      	ldrb	r3, [r7, #11]
 8002068:	f003 030f 	and.w	r3, r3, #15
 800206c:	b2da      	uxtb	r2, r3
 800206e:	697b      	ldr	r3, [r7, #20]
 8002070:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	691b      	ldr	r3, [r3, #16]
 8002076:	2b01      	cmp	r3, #1
 8002078:	d102      	bne.n	8002080 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800207a:	687a      	ldr	r2, [r7, #4]
 800207c:	697b      	ldr	r3, [r7, #20]
 800207e:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002080:	7afb      	ldrb	r3, [r7, #11]
 8002082:	f003 030f 	and.w	r3, r3, #15
 8002086:	2b00      	cmp	r3, #0
 8002088:	d109      	bne.n	800209e <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	6818      	ldr	r0, [r3, #0]
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	691b      	ldr	r3, [r3, #16]
 8002092:	b2db      	uxtb	r3, r3
 8002094:	461a      	mov	r2, r3
 8002096:	6979      	ldr	r1, [r7, #20]
 8002098:	f002 f8a4 	bl	80041e4 <USB_EP0StartXfer>
 800209c:	e008      	b.n	80020b0 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	6818      	ldr	r0, [r3, #0]
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	691b      	ldr	r3, [r3, #16]
 80020a6:	b2db      	uxtb	r3, r3
 80020a8:	461a      	mov	r2, r3
 80020aa:	6979      	ldr	r1, [r7, #20]
 80020ac:	f001 fe56 	bl	8003d5c <USB_EPStartXfer>
  }

  return HAL_OK;
 80020b0:	2300      	movs	r3, #0
}
 80020b2:	4618      	mov	r0, r3
 80020b4:	3718      	adds	r7, #24
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bd80      	pop	{r7, pc}

080020ba <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80020ba:	b480      	push	{r7}
 80020bc:	b083      	sub	sp, #12
 80020be:	af00      	add	r7, sp, #0
 80020c0:	6078      	str	r0, [r7, #4]
 80020c2:	460b      	mov	r3, r1
 80020c4:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80020c6:	78fb      	ldrb	r3, [r7, #3]
 80020c8:	f003 020f 	and.w	r2, r3, #15
 80020cc:	6879      	ldr	r1, [r7, #4]
 80020ce:	4613      	mov	r3, r2
 80020d0:	00db      	lsls	r3, r3, #3
 80020d2:	1a9b      	subs	r3, r3, r2
 80020d4:	009b      	lsls	r3, r3, #2
 80020d6:	440b      	add	r3, r1
 80020d8:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80020dc:	681b      	ldr	r3, [r3, #0]
}
 80020de:	4618      	mov	r0, r3
 80020e0:	370c      	adds	r7, #12
 80020e2:	46bd      	mov	sp, r7
 80020e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e8:	4770      	bx	lr

080020ea <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80020ea:	b580      	push	{r7, lr}
 80020ec:	b086      	sub	sp, #24
 80020ee:	af00      	add	r7, sp, #0
 80020f0:	60f8      	str	r0, [r7, #12]
 80020f2:	607a      	str	r2, [r7, #4]
 80020f4:	603b      	str	r3, [r7, #0]
 80020f6:	460b      	mov	r3, r1
 80020f8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80020fa:	7afb      	ldrb	r3, [r7, #11]
 80020fc:	f003 020f 	and.w	r2, r3, #15
 8002100:	4613      	mov	r3, r2
 8002102:	00db      	lsls	r3, r3, #3
 8002104:	1a9b      	subs	r3, r3, r2
 8002106:	009b      	lsls	r3, r3, #2
 8002108:	3338      	adds	r3, #56	; 0x38
 800210a:	68fa      	ldr	r2, [r7, #12]
 800210c:	4413      	add	r3, r2
 800210e:	3304      	adds	r3, #4
 8002110:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002112:	697b      	ldr	r3, [r7, #20]
 8002114:	687a      	ldr	r2, [r7, #4]
 8002116:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002118:	697b      	ldr	r3, [r7, #20]
 800211a:	683a      	ldr	r2, [r7, #0]
 800211c:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800211e:	697b      	ldr	r3, [r7, #20]
 8002120:	2200      	movs	r2, #0
 8002122:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8002124:	697b      	ldr	r3, [r7, #20]
 8002126:	2201      	movs	r2, #1
 8002128:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800212a:	7afb      	ldrb	r3, [r7, #11]
 800212c:	f003 030f 	and.w	r3, r3, #15
 8002130:	b2da      	uxtb	r2, r3
 8002132:	697b      	ldr	r3, [r7, #20]
 8002134:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	691b      	ldr	r3, [r3, #16]
 800213a:	2b01      	cmp	r3, #1
 800213c:	d102      	bne.n	8002144 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800213e:	687a      	ldr	r2, [r7, #4]
 8002140:	697b      	ldr	r3, [r7, #20]
 8002142:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002144:	7afb      	ldrb	r3, [r7, #11]
 8002146:	f003 030f 	and.w	r3, r3, #15
 800214a:	2b00      	cmp	r3, #0
 800214c:	d109      	bne.n	8002162 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	6818      	ldr	r0, [r3, #0]
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	691b      	ldr	r3, [r3, #16]
 8002156:	b2db      	uxtb	r3, r3
 8002158:	461a      	mov	r2, r3
 800215a:	6979      	ldr	r1, [r7, #20]
 800215c:	f002 f842 	bl	80041e4 <USB_EP0StartXfer>
 8002160:	e008      	b.n	8002174 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	6818      	ldr	r0, [r3, #0]
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	691b      	ldr	r3, [r3, #16]
 800216a:	b2db      	uxtb	r3, r3
 800216c:	461a      	mov	r2, r3
 800216e:	6979      	ldr	r1, [r7, #20]
 8002170:	f001 fdf4 	bl	8003d5c <USB_EPStartXfer>
  }

  return HAL_OK;
 8002174:	2300      	movs	r3, #0
}
 8002176:	4618      	mov	r0, r3
 8002178:	3718      	adds	r7, #24
 800217a:	46bd      	mov	sp, r7
 800217c:	bd80      	pop	{r7, pc}

0800217e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800217e:	b580      	push	{r7, lr}
 8002180:	b084      	sub	sp, #16
 8002182:	af00      	add	r7, sp, #0
 8002184:	6078      	str	r0, [r7, #4]
 8002186:	460b      	mov	r3, r1
 8002188:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800218a:	78fb      	ldrb	r3, [r7, #3]
 800218c:	f003 020f 	and.w	r2, r3, #15
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	685b      	ldr	r3, [r3, #4]
 8002194:	429a      	cmp	r2, r3
 8002196:	d901      	bls.n	800219c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002198:	2301      	movs	r3, #1
 800219a:	e050      	b.n	800223e <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800219c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	da0f      	bge.n	80021c4 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80021a4:	78fb      	ldrb	r3, [r7, #3]
 80021a6:	f003 020f 	and.w	r2, r3, #15
 80021aa:	4613      	mov	r3, r2
 80021ac:	00db      	lsls	r3, r3, #3
 80021ae:	1a9b      	subs	r3, r3, r2
 80021b0:	009b      	lsls	r3, r3, #2
 80021b2:	3338      	adds	r3, #56	; 0x38
 80021b4:	687a      	ldr	r2, [r7, #4]
 80021b6:	4413      	add	r3, r2
 80021b8:	3304      	adds	r3, #4
 80021ba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	2201      	movs	r2, #1
 80021c0:	705a      	strb	r2, [r3, #1]
 80021c2:	e00d      	b.n	80021e0 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80021c4:	78fa      	ldrb	r2, [r7, #3]
 80021c6:	4613      	mov	r3, r2
 80021c8:	00db      	lsls	r3, r3, #3
 80021ca:	1a9b      	subs	r3, r3, r2
 80021cc:	009b      	lsls	r3, r3, #2
 80021ce:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80021d2:	687a      	ldr	r2, [r7, #4]
 80021d4:	4413      	add	r3, r2
 80021d6:	3304      	adds	r3, #4
 80021d8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	2200      	movs	r2, #0
 80021de:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	2201      	movs	r2, #1
 80021e4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80021e6:	78fb      	ldrb	r3, [r7, #3]
 80021e8:	f003 030f 	and.w	r3, r3, #15
 80021ec:	b2da      	uxtb	r2, r3
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80021f8:	2b01      	cmp	r3, #1
 80021fa:	d101      	bne.n	8002200 <HAL_PCD_EP_SetStall+0x82>
 80021fc:	2302      	movs	r3, #2
 80021fe:	e01e      	b.n	800223e <HAL_PCD_EP_SetStall+0xc0>
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2201      	movs	r2, #1
 8002204:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	68f9      	ldr	r1, [r7, #12]
 800220e:	4618      	mov	r0, r3
 8002210:	f002 f9d1 	bl	80045b6 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002214:	78fb      	ldrb	r3, [r7, #3]
 8002216:	f003 030f 	and.w	r3, r3, #15
 800221a:	2b00      	cmp	r3, #0
 800221c:	d10a      	bne.n	8002234 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6818      	ldr	r0, [r3, #0]
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	691b      	ldr	r3, [r3, #16]
 8002226:	b2d9      	uxtb	r1, r3
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800222e:	461a      	mov	r2, r3
 8002230:	f002 fbc2 	bl	80049b8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2200      	movs	r2, #0
 8002238:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800223c:	2300      	movs	r3, #0
}
 800223e:	4618      	mov	r0, r3
 8002240:	3710      	adds	r7, #16
 8002242:	46bd      	mov	sp, r7
 8002244:	bd80      	pop	{r7, pc}

08002246 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002246:	b580      	push	{r7, lr}
 8002248:	b084      	sub	sp, #16
 800224a:	af00      	add	r7, sp, #0
 800224c:	6078      	str	r0, [r7, #4]
 800224e:	460b      	mov	r3, r1
 8002250:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002252:	78fb      	ldrb	r3, [r7, #3]
 8002254:	f003 020f 	and.w	r2, r3, #15
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	685b      	ldr	r3, [r3, #4]
 800225c:	429a      	cmp	r2, r3
 800225e:	d901      	bls.n	8002264 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002260:	2301      	movs	r3, #1
 8002262:	e042      	b.n	80022ea <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002264:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002268:	2b00      	cmp	r3, #0
 800226a:	da0f      	bge.n	800228c <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800226c:	78fb      	ldrb	r3, [r7, #3]
 800226e:	f003 020f 	and.w	r2, r3, #15
 8002272:	4613      	mov	r3, r2
 8002274:	00db      	lsls	r3, r3, #3
 8002276:	1a9b      	subs	r3, r3, r2
 8002278:	009b      	lsls	r3, r3, #2
 800227a:	3338      	adds	r3, #56	; 0x38
 800227c:	687a      	ldr	r2, [r7, #4]
 800227e:	4413      	add	r3, r2
 8002280:	3304      	adds	r3, #4
 8002282:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	2201      	movs	r2, #1
 8002288:	705a      	strb	r2, [r3, #1]
 800228a:	e00f      	b.n	80022ac <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800228c:	78fb      	ldrb	r3, [r7, #3]
 800228e:	f003 020f 	and.w	r2, r3, #15
 8002292:	4613      	mov	r3, r2
 8002294:	00db      	lsls	r3, r3, #3
 8002296:	1a9b      	subs	r3, r3, r2
 8002298:	009b      	lsls	r3, r3, #2
 800229a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800229e:	687a      	ldr	r2, [r7, #4]
 80022a0:	4413      	add	r3, r2
 80022a2:	3304      	adds	r3, #4
 80022a4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	2200      	movs	r2, #0
 80022aa:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	2200      	movs	r2, #0
 80022b0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80022b2:	78fb      	ldrb	r3, [r7, #3]
 80022b4:	f003 030f 	and.w	r3, r3, #15
 80022b8:	b2da      	uxtb	r2, r3
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80022c4:	2b01      	cmp	r3, #1
 80022c6:	d101      	bne.n	80022cc <HAL_PCD_EP_ClrStall+0x86>
 80022c8:	2302      	movs	r3, #2
 80022ca:	e00e      	b.n	80022ea <HAL_PCD_EP_ClrStall+0xa4>
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2201      	movs	r2, #1
 80022d0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	68f9      	ldr	r1, [r7, #12]
 80022da:	4618      	mov	r0, r3
 80022dc:	f002 f9d9 	bl	8004692 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	2200      	movs	r2, #0
 80022e4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80022e8:	2300      	movs	r3, #0
}
 80022ea:	4618      	mov	r0, r3
 80022ec:	3710      	adds	r7, #16
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bd80      	pop	{r7, pc}

080022f2 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80022f2:	b580      	push	{r7, lr}
 80022f4:	b08a      	sub	sp, #40	; 0x28
 80022f6:	af02      	add	r7, sp, #8
 80022f8:	6078      	str	r0, [r7, #4]
 80022fa:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002302:	697b      	ldr	r3, [r7, #20]
 8002304:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002306:	683a      	ldr	r2, [r7, #0]
 8002308:	4613      	mov	r3, r2
 800230a:	00db      	lsls	r3, r3, #3
 800230c:	1a9b      	subs	r3, r3, r2
 800230e:	009b      	lsls	r3, r3, #2
 8002310:	3338      	adds	r3, #56	; 0x38
 8002312:	687a      	ldr	r2, [r7, #4]
 8002314:	4413      	add	r3, r2
 8002316:	3304      	adds	r3, #4
 8002318:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	699a      	ldr	r2, [r3, #24]
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	695b      	ldr	r3, [r3, #20]
 8002322:	429a      	cmp	r2, r3
 8002324:	d901      	bls.n	800232a <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002326:	2301      	movs	r3, #1
 8002328:	e06c      	b.n	8002404 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	695a      	ldr	r2, [r3, #20]
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	699b      	ldr	r3, [r3, #24]
 8002332:	1ad3      	subs	r3, r2, r3
 8002334:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	689b      	ldr	r3, [r3, #8]
 800233a:	69fa      	ldr	r2, [r7, #28]
 800233c:	429a      	cmp	r2, r3
 800233e:	d902      	bls.n	8002346 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	689b      	ldr	r3, [r3, #8]
 8002344:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002346:	69fb      	ldr	r3, [r7, #28]
 8002348:	3303      	adds	r3, #3
 800234a:	089b      	lsrs	r3, r3, #2
 800234c:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800234e:	e02b      	b.n	80023a8 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	695a      	ldr	r2, [r3, #20]
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	699b      	ldr	r3, [r3, #24]
 8002358:	1ad3      	subs	r3, r2, r3
 800235a:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	689b      	ldr	r3, [r3, #8]
 8002360:	69fa      	ldr	r2, [r7, #28]
 8002362:	429a      	cmp	r2, r3
 8002364:	d902      	bls.n	800236c <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	689b      	ldr	r3, [r3, #8]
 800236a:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800236c:	69fb      	ldr	r3, [r7, #28]
 800236e:	3303      	adds	r3, #3
 8002370:	089b      	lsrs	r3, r3, #2
 8002372:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	68d9      	ldr	r1, [r3, #12]
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	b2da      	uxtb	r2, r3
 800237c:	69fb      	ldr	r3, [r7, #28]
 800237e:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002384:	b2db      	uxtb	r3, r3
 8002386:	9300      	str	r3, [sp, #0]
 8002388:	4603      	mov	r3, r0
 800238a:	6978      	ldr	r0, [r7, #20]
 800238c:	f002 f87d 	bl	800448a <USB_WritePacket>

    ep->xfer_buff  += len;
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	68da      	ldr	r2, [r3, #12]
 8002394:	69fb      	ldr	r3, [r7, #28]
 8002396:	441a      	add	r2, r3
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	699a      	ldr	r2, [r3, #24]
 80023a0:	69fb      	ldr	r3, [r7, #28]
 80023a2:	441a      	add	r2, r3
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	015a      	lsls	r2, r3, #5
 80023ac:	693b      	ldr	r3, [r7, #16]
 80023ae:	4413      	add	r3, r2
 80023b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80023b4:	699b      	ldr	r3, [r3, #24]
 80023b6:	b29b      	uxth	r3, r3
 80023b8:	69ba      	ldr	r2, [r7, #24]
 80023ba:	429a      	cmp	r2, r3
 80023bc:	d809      	bhi.n	80023d2 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	699a      	ldr	r2, [r3, #24]
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80023c6:	429a      	cmp	r2, r3
 80023c8:	d203      	bcs.n	80023d2 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	695b      	ldr	r3, [r3, #20]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d1be      	bne.n	8002350 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	695a      	ldr	r2, [r3, #20]
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	699b      	ldr	r3, [r3, #24]
 80023da:	429a      	cmp	r2, r3
 80023dc:	d811      	bhi.n	8002402 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	f003 030f 	and.w	r3, r3, #15
 80023e4:	2201      	movs	r2, #1
 80023e6:	fa02 f303 	lsl.w	r3, r2, r3
 80023ea:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80023ec:	693b      	ldr	r3, [r7, #16]
 80023ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80023f2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80023f4:	68bb      	ldr	r3, [r7, #8]
 80023f6:	43db      	mvns	r3, r3
 80023f8:	6939      	ldr	r1, [r7, #16]
 80023fa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80023fe:	4013      	ands	r3, r2
 8002400:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002402:	2300      	movs	r3, #0
}
 8002404:	4618      	mov	r0, r3
 8002406:	3720      	adds	r7, #32
 8002408:	46bd      	mov	sp, r7
 800240a:	bd80      	pop	{r7, pc}

0800240c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b086      	sub	sp, #24
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
 8002414:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800241c:	697b      	ldr	r3, [r7, #20]
 800241e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002420:	697b      	ldr	r3, [r7, #20]
 8002422:	333c      	adds	r3, #60	; 0x3c
 8002424:	3304      	adds	r3, #4
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	015a      	lsls	r2, r3, #5
 800242e:	693b      	ldr	r3, [r7, #16]
 8002430:	4413      	add	r3, r2
 8002432:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002436:	689b      	ldr	r3, [r3, #8]
 8002438:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	691b      	ldr	r3, [r3, #16]
 800243e:	2b01      	cmp	r3, #1
 8002440:	f040 80a0 	bne.w	8002584 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002444:	68bb      	ldr	r3, [r7, #8]
 8002446:	f003 0308 	and.w	r3, r3, #8
 800244a:	2b00      	cmp	r3, #0
 800244c:	d015      	beq.n	800247a <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	4a72      	ldr	r2, [pc, #456]	; (800261c <PCD_EP_OutXfrComplete_int+0x210>)
 8002452:	4293      	cmp	r3, r2
 8002454:	f240 80dd 	bls.w	8002612 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002458:	68bb      	ldr	r3, [r7, #8]
 800245a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800245e:	2b00      	cmp	r3, #0
 8002460:	f000 80d7 	beq.w	8002612 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	015a      	lsls	r2, r3, #5
 8002468:	693b      	ldr	r3, [r7, #16]
 800246a:	4413      	add	r3, r2
 800246c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002470:	461a      	mov	r2, r3
 8002472:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002476:	6093      	str	r3, [r2, #8]
 8002478:	e0cb      	b.n	8002612 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800247a:	68bb      	ldr	r3, [r7, #8]
 800247c:	f003 0320 	and.w	r3, r3, #32
 8002480:	2b00      	cmp	r3, #0
 8002482:	d009      	beq.n	8002498 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	015a      	lsls	r2, r3, #5
 8002488:	693b      	ldr	r3, [r7, #16]
 800248a:	4413      	add	r3, r2
 800248c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002490:	461a      	mov	r2, r3
 8002492:	2320      	movs	r3, #32
 8002494:	6093      	str	r3, [r2, #8]
 8002496:	e0bc      	b.n	8002612 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002498:	68bb      	ldr	r3, [r7, #8]
 800249a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800249e:	2b00      	cmp	r3, #0
 80024a0:	f040 80b7 	bne.w	8002612 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	4a5d      	ldr	r2, [pc, #372]	; (800261c <PCD_EP_OutXfrComplete_int+0x210>)
 80024a8:	4293      	cmp	r3, r2
 80024aa:	d90f      	bls.n	80024cc <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80024ac:	68bb      	ldr	r3, [r7, #8]
 80024ae:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d00a      	beq.n	80024cc <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	015a      	lsls	r2, r3, #5
 80024ba:	693b      	ldr	r3, [r7, #16]
 80024bc:	4413      	add	r3, r2
 80024be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80024c2:	461a      	mov	r2, r3
 80024c4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80024c8:	6093      	str	r3, [r2, #8]
 80024ca:	e0a2      	b.n	8002612 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 80024cc:	6879      	ldr	r1, [r7, #4]
 80024ce:	683a      	ldr	r2, [r7, #0]
 80024d0:	4613      	mov	r3, r2
 80024d2:	00db      	lsls	r3, r3, #3
 80024d4:	1a9b      	subs	r3, r3, r2
 80024d6:	009b      	lsls	r3, r3, #2
 80024d8:	440b      	add	r3, r1
 80024da:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80024de:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	0159      	lsls	r1, r3, #5
 80024e4:	693b      	ldr	r3, [r7, #16]
 80024e6:	440b      	add	r3, r1
 80024e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80024ec:	691b      	ldr	r3, [r3, #16]
 80024ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 80024f2:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 80024f4:	6878      	ldr	r0, [r7, #4]
 80024f6:	683a      	ldr	r2, [r7, #0]
 80024f8:	4613      	mov	r3, r2
 80024fa:	00db      	lsls	r3, r3, #3
 80024fc:	1a9b      	subs	r3, r3, r2
 80024fe:	009b      	lsls	r3, r3, #2
 8002500:	4403      	add	r3, r0
 8002502:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8002506:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8002508:	6879      	ldr	r1, [r7, #4]
 800250a:	683a      	ldr	r2, [r7, #0]
 800250c:	4613      	mov	r3, r2
 800250e:	00db      	lsls	r3, r3, #3
 8002510:	1a9b      	subs	r3, r3, r2
 8002512:	009b      	lsls	r3, r3, #2
 8002514:	440b      	add	r3, r1
 8002516:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800251a:	6819      	ldr	r1, [r3, #0]
 800251c:	6878      	ldr	r0, [r7, #4]
 800251e:	683a      	ldr	r2, [r7, #0]
 8002520:	4613      	mov	r3, r2
 8002522:	00db      	lsls	r3, r3, #3
 8002524:	1a9b      	subs	r3, r3, r2
 8002526:	009b      	lsls	r3, r3, #2
 8002528:	4403      	add	r3, r0
 800252a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4419      	add	r1, r3
 8002532:	6878      	ldr	r0, [r7, #4]
 8002534:	683a      	ldr	r2, [r7, #0]
 8002536:	4613      	mov	r3, r2
 8002538:	00db      	lsls	r3, r3, #3
 800253a:	1a9b      	subs	r3, r3, r2
 800253c:	009b      	lsls	r3, r3, #2
 800253e:	4403      	add	r3, r0
 8002540:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002544:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	2b00      	cmp	r3, #0
 800254a:	d114      	bne.n	8002576 <PCD_EP_OutXfrComplete_int+0x16a>
 800254c:	6879      	ldr	r1, [r7, #4]
 800254e:	683a      	ldr	r2, [r7, #0]
 8002550:	4613      	mov	r3, r2
 8002552:	00db      	lsls	r3, r3, #3
 8002554:	1a9b      	subs	r3, r3, r2
 8002556:	009b      	lsls	r3, r3, #2
 8002558:	440b      	add	r3, r1
 800255a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	2b00      	cmp	r3, #0
 8002562:	d108      	bne.n	8002576 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6818      	ldr	r0, [r3, #0]
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800256e:	461a      	mov	r2, r3
 8002570:	2101      	movs	r1, #1
 8002572:	f002 fa21 	bl	80049b8 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	b2db      	uxtb	r3, r3
 800257a:	4619      	mov	r1, r3
 800257c:	6878      	ldr	r0, [r7, #4]
 800257e:	f004 fabd 	bl	8006afc <HAL_PCD_DataOutStageCallback>
 8002582:	e046      	b.n	8002612 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	4a26      	ldr	r2, [pc, #152]	; (8002620 <PCD_EP_OutXfrComplete_int+0x214>)
 8002588:	4293      	cmp	r3, r2
 800258a:	d124      	bne.n	80025d6 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800258c:	68bb      	ldr	r3, [r7, #8]
 800258e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002592:	2b00      	cmp	r3, #0
 8002594:	d00a      	beq.n	80025ac <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	015a      	lsls	r2, r3, #5
 800259a:	693b      	ldr	r3, [r7, #16]
 800259c:	4413      	add	r3, r2
 800259e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80025a2:	461a      	mov	r2, r3
 80025a4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80025a8:	6093      	str	r3, [r2, #8]
 80025aa:	e032      	b.n	8002612 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80025ac:	68bb      	ldr	r3, [r7, #8]
 80025ae:	f003 0320 	and.w	r3, r3, #32
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d008      	beq.n	80025c8 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	015a      	lsls	r2, r3, #5
 80025ba:	693b      	ldr	r3, [r7, #16]
 80025bc:	4413      	add	r3, r2
 80025be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80025c2:	461a      	mov	r2, r3
 80025c4:	2320      	movs	r3, #32
 80025c6:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	b2db      	uxtb	r3, r3
 80025cc:	4619      	mov	r1, r3
 80025ce:	6878      	ldr	r0, [r7, #4]
 80025d0:	f004 fa94 	bl	8006afc <HAL_PCD_DataOutStageCallback>
 80025d4:	e01d      	b.n	8002612 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d114      	bne.n	8002606 <PCD_EP_OutXfrComplete_int+0x1fa>
 80025dc:	6879      	ldr	r1, [r7, #4]
 80025de:	683a      	ldr	r2, [r7, #0]
 80025e0:	4613      	mov	r3, r2
 80025e2:	00db      	lsls	r3, r3, #3
 80025e4:	1a9b      	subs	r3, r3, r2
 80025e6:	009b      	lsls	r3, r3, #2
 80025e8:	440b      	add	r3, r1
 80025ea:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d108      	bne.n	8002606 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6818      	ldr	r0, [r3, #0]
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80025fe:	461a      	mov	r2, r3
 8002600:	2100      	movs	r1, #0
 8002602:	f002 f9d9 	bl	80049b8 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	b2db      	uxtb	r3, r3
 800260a:	4619      	mov	r1, r3
 800260c:	6878      	ldr	r0, [r7, #4]
 800260e:	f004 fa75 	bl	8006afc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002612:	2300      	movs	r3, #0
}
 8002614:	4618      	mov	r0, r3
 8002616:	3718      	adds	r7, #24
 8002618:	46bd      	mov	sp, r7
 800261a:	bd80      	pop	{r7, pc}
 800261c:	4f54300a 	.word	0x4f54300a
 8002620:	4f54310a 	.word	0x4f54310a

08002624 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b086      	sub	sp, #24
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
 800262c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002634:	697b      	ldr	r3, [r7, #20]
 8002636:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002638:	697b      	ldr	r3, [r7, #20]
 800263a:	333c      	adds	r3, #60	; 0x3c
 800263c:	3304      	adds	r3, #4
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	015a      	lsls	r2, r3, #5
 8002646:	693b      	ldr	r3, [r7, #16]
 8002648:	4413      	add	r3, r2
 800264a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800264e:	689b      	ldr	r3, [r3, #8]
 8002650:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	4a15      	ldr	r2, [pc, #84]	; (80026ac <PCD_EP_OutSetupPacket_int+0x88>)
 8002656:	4293      	cmp	r3, r2
 8002658:	d90e      	bls.n	8002678 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800265a:	68bb      	ldr	r3, [r7, #8]
 800265c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002660:	2b00      	cmp	r3, #0
 8002662:	d009      	beq.n	8002678 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	015a      	lsls	r2, r3, #5
 8002668:	693b      	ldr	r3, [r7, #16]
 800266a:	4413      	add	r3, r2
 800266c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002670:	461a      	mov	r2, r3
 8002672:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002676:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002678:	6878      	ldr	r0, [r7, #4]
 800267a:	f004 fa2d 	bl	8006ad8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	4a0a      	ldr	r2, [pc, #40]	; (80026ac <PCD_EP_OutSetupPacket_int+0x88>)
 8002682:	4293      	cmp	r3, r2
 8002684:	d90c      	bls.n	80026a0 <PCD_EP_OutSetupPacket_int+0x7c>
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	691b      	ldr	r3, [r3, #16]
 800268a:	2b01      	cmp	r3, #1
 800268c:	d108      	bne.n	80026a0 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6818      	ldr	r0, [r3, #0]
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002698:	461a      	mov	r2, r3
 800269a:	2101      	movs	r1, #1
 800269c:	f002 f98c 	bl	80049b8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80026a0:	2300      	movs	r3, #0
}
 80026a2:	4618      	mov	r0, r3
 80026a4:	3718      	adds	r7, #24
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bd80      	pop	{r7, pc}
 80026aa:	bf00      	nop
 80026ac:	4f54300a 	.word	0x4f54300a

080026b0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80026b0:	b480      	push	{r7}
 80026b2:	b085      	sub	sp, #20
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
 80026b8:	460b      	mov	r3, r1
 80026ba:	70fb      	strb	r3, [r7, #3]
 80026bc:	4613      	mov	r3, r2
 80026be:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026c6:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80026c8:	78fb      	ldrb	r3, [r7, #3]
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d107      	bne.n	80026de <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80026ce:	883b      	ldrh	r3, [r7, #0]
 80026d0:	0419      	lsls	r1, r3, #16
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	68ba      	ldr	r2, [r7, #8]
 80026d8:	430a      	orrs	r2, r1
 80026da:	629a      	str	r2, [r3, #40]	; 0x28
 80026dc:	e028      	b.n	8002730 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026e4:	0c1b      	lsrs	r3, r3, #16
 80026e6:	68ba      	ldr	r2, [r7, #8]
 80026e8:	4413      	add	r3, r2
 80026ea:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80026ec:	2300      	movs	r3, #0
 80026ee:	73fb      	strb	r3, [r7, #15]
 80026f0:	e00d      	b.n	800270e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681a      	ldr	r2, [r3, #0]
 80026f6:	7bfb      	ldrb	r3, [r7, #15]
 80026f8:	3340      	adds	r3, #64	; 0x40
 80026fa:	009b      	lsls	r3, r3, #2
 80026fc:	4413      	add	r3, r2
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	0c1b      	lsrs	r3, r3, #16
 8002702:	68ba      	ldr	r2, [r7, #8]
 8002704:	4413      	add	r3, r2
 8002706:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002708:	7bfb      	ldrb	r3, [r7, #15]
 800270a:	3301      	adds	r3, #1
 800270c:	73fb      	strb	r3, [r7, #15]
 800270e:	7bfa      	ldrb	r2, [r7, #15]
 8002710:	78fb      	ldrb	r3, [r7, #3]
 8002712:	3b01      	subs	r3, #1
 8002714:	429a      	cmp	r2, r3
 8002716:	d3ec      	bcc.n	80026f2 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002718:	883b      	ldrh	r3, [r7, #0]
 800271a:	0418      	lsls	r0, r3, #16
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6819      	ldr	r1, [r3, #0]
 8002720:	78fb      	ldrb	r3, [r7, #3]
 8002722:	3b01      	subs	r3, #1
 8002724:	68ba      	ldr	r2, [r7, #8]
 8002726:	4302      	orrs	r2, r0
 8002728:	3340      	adds	r3, #64	; 0x40
 800272a:	009b      	lsls	r3, r3, #2
 800272c:	440b      	add	r3, r1
 800272e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002730:	2300      	movs	r3, #0
}
 8002732:	4618      	mov	r0, r3
 8002734:	3714      	adds	r7, #20
 8002736:	46bd      	mov	sp, r7
 8002738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273c:	4770      	bx	lr

0800273e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800273e:	b480      	push	{r7}
 8002740:	b083      	sub	sp, #12
 8002742:	af00      	add	r7, sp, #0
 8002744:	6078      	str	r0, [r7, #4]
 8002746:	460b      	mov	r3, r1
 8002748:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	887a      	ldrh	r2, [r7, #2]
 8002750:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002752:	2300      	movs	r3, #0
}
 8002754:	4618      	mov	r0, r3
 8002756:	370c      	adds	r7, #12
 8002758:	46bd      	mov	sp, r7
 800275a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275e:	4770      	bx	lr

08002760 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002760:	b480      	push	{r7}
 8002762:	b083      	sub	sp, #12
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
 8002768:	460b      	mov	r3, r1
 800276a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800276c:	bf00      	nop
 800276e:	370c      	adds	r7, #12
 8002770:	46bd      	mov	sp, r7
 8002772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002776:	4770      	bx	lr

08002778 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b086      	sub	sp, #24
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2b00      	cmp	r3, #0
 8002784:	d101      	bne.n	800278a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002786:	2301      	movs	r3, #1
 8002788:	e267      	b.n	8002c5a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f003 0301 	and.w	r3, r3, #1
 8002792:	2b00      	cmp	r3, #0
 8002794:	d075      	beq.n	8002882 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002796:	4b88      	ldr	r3, [pc, #544]	; (80029b8 <HAL_RCC_OscConfig+0x240>)
 8002798:	689b      	ldr	r3, [r3, #8]
 800279a:	f003 030c 	and.w	r3, r3, #12
 800279e:	2b04      	cmp	r3, #4
 80027a0:	d00c      	beq.n	80027bc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80027a2:	4b85      	ldr	r3, [pc, #532]	; (80029b8 <HAL_RCC_OscConfig+0x240>)
 80027a4:	689b      	ldr	r3, [r3, #8]
 80027a6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80027aa:	2b08      	cmp	r3, #8
 80027ac:	d112      	bne.n	80027d4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80027ae:	4b82      	ldr	r3, [pc, #520]	; (80029b8 <HAL_RCC_OscConfig+0x240>)
 80027b0:	685b      	ldr	r3, [r3, #4]
 80027b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027b6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80027ba:	d10b      	bne.n	80027d4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027bc:	4b7e      	ldr	r3, [pc, #504]	; (80029b8 <HAL_RCC_OscConfig+0x240>)
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d05b      	beq.n	8002880 <HAL_RCC_OscConfig+0x108>
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	685b      	ldr	r3, [r3, #4]
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d157      	bne.n	8002880 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80027d0:	2301      	movs	r3, #1
 80027d2:	e242      	b.n	8002c5a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	685b      	ldr	r3, [r3, #4]
 80027d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027dc:	d106      	bne.n	80027ec <HAL_RCC_OscConfig+0x74>
 80027de:	4b76      	ldr	r3, [pc, #472]	; (80029b8 <HAL_RCC_OscConfig+0x240>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	4a75      	ldr	r2, [pc, #468]	; (80029b8 <HAL_RCC_OscConfig+0x240>)
 80027e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027e8:	6013      	str	r3, [r2, #0]
 80027ea:	e01d      	b.n	8002828 <HAL_RCC_OscConfig+0xb0>
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	685b      	ldr	r3, [r3, #4]
 80027f0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80027f4:	d10c      	bne.n	8002810 <HAL_RCC_OscConfig+0x98>
 80027f6:	4b70      	ldr	r3, [pc, #448]	; (80029b8 <HAL_RCC_OscConfig+0x240>)
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	4a6f      	ldr	r2, [pc, #444]	; (80029b8 <HAL_RCC_OscConfig+0x240>)
 80027fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002800:	6013      	str	r3, [r2, #0]
 8002802:	4b6d      	ldr	r3, [pc, #436]	; (80029b8 <HAL_RCC_OscConfig+0x240>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	4a6c      	ldr	r2, [pc, #432]	; (80029b8 <HAL_RCC_OscConfig+0x240>)
 8002808:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800280c:	6013      	str	r3, [r2, #0]
 800280e:	e00b      	b.n	8002828 <HAL_RCC_OscConfig+0xb0>
 8002810:	4b69      	ldr	r3, [pc, #420]	; (80029b8 <HAL_RCC_OscConfig+0x240>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4a68      	ldr	r2, [pc, #416]	; (80029b8 <HAL_RCC_OscConfig+0x240>)
 8002816:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800281a:	6013      	str	r3, [r2, #0]
 800281c:	4b66      	ldr	r3, [pc, #408]	; (80029b8 <HAL_RCC_OscConfig+0x240>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	4a65      	ldr	r2, [pc, #404]	; (80029b8 <HAL_RCC_OscConfig+0x240>)
 8002822:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002826:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	2b00      	cmp	r3, #0
 800282e:	d013      	beq.n	8002858 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002830:	f7fe fb26 	bl	8000e80 <HAL_GetTick>
 8002834:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002836:	e008      	b.n	800284a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002838:	f7fe fb22 	bl	8000e80 <HAL_GetTick>
 800283c:	4602      	mov	r2, r0
 800283e:	693b      	ldr	r3, [r7, #16]
 8002840:	1ad3      	subs	r3, r2, r3
 8002842:	2b64      	cmp	r3, #100	; 0x64
 8002844:	d901      	bls.n	800284a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002846:	2303      	movs	r3, #3
 8002848:	e207      	b.n	8002c5a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800284a:	4b5b      	ldr	r3, [pc, #364]	; (80029b8 <HAL_RCC_OscConfig+0x240>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002852:	2b00      	cmp	r3, #0
 8002854:	d0f0      	beq.n	8002838 <HAL_RCC_OscConfig+0xc0>
 8002856:	e014      	b.n	8002882 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002858:	f7fe fb12 	bl	8000e80 <HAL_GetTick>
 800285c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800285e:	e008      	b.n	8002872 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002860:	f7fe fb0e 	bl	8000e80 <HAL_GetTick>
 8002864:	4602      	mov	r2, r0
 8002866:	693b      	ldr	r3, [r7, #16]
 8002868:	1ad3      	subs	r3, r2, r3
 800286a:	2b64      	cmp	r3, #100	; 0x64
 800286c:	d901      	bls.n	8002872 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800286e:	2303      	movs	r3, #3
 8002870:	e1f3      	b.n	8002c5a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002872:	4b51      	ldr	r3, [pc, #324]	; (80029b8 <HAL_RCC_OscConfig+0x240>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800287a:	2b00      	cmp	r3, #0
 800287c:	d1f0      	bne.n	8002860 <HAL_RCC_OscConfig+0xe8>
 800287e:	e000      	b.n	8002882 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002880:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f003 0302 	and.w	r3, r3, #2
 800288a:	2b00      	cmp	r3, #0
 800288c:	d063      	beq.n	8002956 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800288e:	4b4a      	ldr	r3, [pc, #296]	; (80029b8 <HAL_RCC_OscConfig+0x240>)
 8002890:	689b      	ldr	r3, [r3, #8]
 8002892:	f003 030c 	and.w	r3, r3, #12
 8002896:	2b00      	cmp	r3, #0
 8002898:	d00b      	beq.n	80028b2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800289a:	4b47      	ldr	r3, [pc, #284]	; (80029b8 <HAL_RCC_OscConfig+0x240>)
 800289c:	689b      	ldr	r3, [r3, #8]
 800289e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80028a2:	2b08      	cmp	r3, #8
 80028a4:	d11c      	bne.n	80028e0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80028a6:	4b44      	ldr	r3, [pc, #272]	; (80029b8 <HAL_RCC_OscConfig+0x240>)
 80028a8:	685b      	ldr	r3, [r3, #4]
 80028aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d116      	bne.n	80028e0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028b2:	4b41      	ldr	r3, [pc, #260]	; (80029b8 <HAL_RCC_OscConfig+0x240>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f003 0302 	and.w	r3, r3, #2
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d005      	beq.n	80028ca <HAL_RCC_OscConfig+0x152>
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	68db      	ldr	r3, [r3, #12]
 80028c2:	2b01      	cmp	r3, #1
 80028c4:	d001      	beq.n	80028ca <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80028c6:	2301      	movs	r3, #1
 80028c8:	e1c7      	b.n	8002c5a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028ca:	4b3b      	ldr	r3, [pc, #236]	; (80029b8 <HAL_RCC_OscConfig+0x240>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	691b      	ldr	r3, [r3, #16]
 80028d6:	00db      	lsls	r3, r3, #3
 80028d8:	4937      	ldr	r1, [pc, #220]	; (80029b8 <HAL_RCC_OscConfig+0x240>)
 80028da:	4313      	orrs	r3, r2
 80028dc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028de:	e03a      	b.n	8002956 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	68db      	ldr	r3, [r3, #12]
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d020      	beq.n	800292a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80028e8:	4b34      	ldr	r3, [pc, #208]	; (80029bc <HAL_RCC_OscConfig+0x244>)
 80028ea:	2201      	movs	r2, #1
 80028ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028ee:	f7fe fac7 	bl	8000e80 <HAL_GetTick>
 80028f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028f4:	e008      	b.n	8002908 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80028f6:	f7fe fac3 	bl	8000e80 <HAL_GetTick>
 80028fa:	4602      	mov	r2, r0
 80028fc:	693b      	ldr	r3, [r7, #16]
 80028fe:	1ad3      	subs	r3, r2, r3
 8002900:	2b02      	cmp	r3, #2
 8002902:	d901      	bls.n	8002908 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002904:	2303      	movs	r3, #3
 8002906:	e1a8      	b.n	8002c5a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002908:	4b2b      	ldr	r3, [pc, #172]	; (80029b8 <HAL_RCC_OscConfig+0x240>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f003 0302 	and.w	r3, r3, #2
 8002910:	2b00      	cmp	r3, #0
 8002912:	d0f0      	beq.n	80028f6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002914:	4b28      	ldr	r3, [pc, #160]	; (80029b8 <HAL_RCC_OscConfig+0x240>)
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	691b      	ldr	r3, [r3, #16]
 8002920:	00db      	lsls	r3, r3, #3
 8002922:	4925      	ldr	r1, [pc, #148]	; (80029b8 <HAL_RCC_OscConfig+0x240>)
 8002924:	4313      	orrs	r3, r2
 8002926:	600b      	str	r3, [r1, #0]
 8002928:	e015      	b.n	8002956 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800292a:	4b24      	ldr	r3, [pc, #144]	; (80029bc <HAL_RCC_OscConfig+0x244>)
 800292c:	2200      	movs	r2, #0
 800292e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002930:	f7fe faa6 	bl	8000e80 <HAL_GetTick>
 8002934:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002936:	e008      	b.n	800294a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002938:	f7fe faa2 	bl	8000e80 <HAL_GetTick>
 800293c:	4602      	mov	r2, r0
 800293e:	693b      	ldr	r3, [r7, #16]
 8002940:	1ad3      	subs	r3, r2, r3
 8002942:	2b02      	cmp	r3, #2
 8002944:	d901      	bls.n	800294a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002946:	2303      	movs	r3, #3
 8002948:	e187      	b.n	8002c5a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800294a:	4b1b      	ldr	r3, [pc, #108]	; (80029b8 <HAL_RCC_OscConfig+0x240>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f003 0302 	and.w	r3, r3, #2
 8002952:	2b00      	cmp	r3, #0
 8002954:	d1f0      	bne.n	8002938 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f003 0308 	and.w	r3, r3, #8
 800295e:	2b00      	cmp	r3, #0
 8002960:	d036      	beq.n	80029d0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	695b      	ldr	r3, [r3, #20]
 8002966:	2b00      	cmp	r3, #0
 8002968:	d016      	beq.n	8002998 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800296a:	4b15      	ldr	r3, [pc, #84]	; (80029c0 <HAL_RCC_OscConfig+0x248>)
 800296c:	2201      	movs	r2, #1
 800296e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002970:	f7fe fa86 	bl	8000e80 <HAL_GetTick>
 8002974:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002976:	e008      	b.n	800298a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002978:	f7fe fa82 	bl	8000e80 <HAL_GetTick>
 800297c:	4602      	mov	r2, r0
 800297e:	693b      	ldr	r3, [r7, #16]
 8002980:	1ad3      	subs	r3, r2, r3
 8002982:	2b02      	cmp	r3, #2
 8002984:	d901      	bls.n	800298a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002986:	2303      	movs	r3, #3
 8002988:	e167      	b.n	8002c5a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800298a:	4b0b      	ldr	r3, [pc, #44]	; (80029b8 <HAL_RCC_OscConfig+0x240>)
 800298c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800298e:	f003 0302 	and.w	r3, r3, #2
 8002992:	2b00      	cmp	r3, #0
 8002994:	d0f0      	beq.n	8002978 <HAL_RCC_OscConfig+0x200>
 8002996:	e01b      	b.n	80029d0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002998:	4b09      	ldr	r3, [pc, #36]	; (80029c0 <HAL_RCC_OscConfig+0x248>)
 800299a:	2200      	movs	r2, #0
 800299c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800299e:	f7fe fa6f 	bl	8000e80 <HAL_GetTick>
 80029a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029a4:	e00e      	b.n	80029c4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80029a6:	f7fe fa6b 	bl	8000e80 <HAL_GetTick>
 80029aa:	4602      	mov	r2, r0
 80029ac:	693b      	ldr	r3, [r7, #16]
 80029ae:	1ad3      	subs	r3, r2, r3
 80029b0:	2b02      	cmp	r3, #2
 80029b2:	d907      	bls.n	80029c4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80029b4:	2303      	movs	r3, #3
 80029b6:	e150      	b.n	8002c5a <HAL_RCC_OscConfig+0x4e2>
 80029b8:	40023800 	.word	0x40023800
 80029bc:	42470000 	.word	0x42470000
 80029c0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029c4:	4b88      	ldr	r3, [pc, #544]	; (8002be8 <HAL_RCC_OscConfig+0x470>)
 80029c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029c8:	f003 0302 	and.w	r3, r3, #2
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d1ea      	bne.n	80029a6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f003 0304 	and.w	r3, r3, #4
 80029d8:	2b00      	cmp	r3, #0
 80029da:	f000 8097 	beq.w	8002b0c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80029de:	2300      	movs	r3, #0
 80029e0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80029e2:	4b81      	ldr	r3, [pc, #516]	; (8002be8 <HAL_RCC_OscConfig+0x470>)
 80029e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d10f      	bne.n	8002a0e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80029ee:	2300      	movs	r3, #0
 80029f0:	60bb      	str	r3, [r7, #8]
 80029f2:	4b7d      	ldr	r3, [pc, #500]	; (8002be8 <HAL_RCC_OscConfig+0x470>)
 80029f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029f6:	4a7c      	ldr	r2, [pc, #496]	; (8002be8 <HAL_RCC_OscConfig+0x470>)
 80029f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029fc:	6413      	str	r3, [r2, #64]	; 0x40
 80029fe:	4b7a      	ldr	r3, [pc, #488]	; (8002be8 <HAL_RCC_OscConfig+0x470>)
 8002a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a06:	60bb      	str	r3, [r7, #8]
 8002a08:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a0e:	4b77      	ldr	r3, [pc, #476]	; (8002bec <HAL_RCC_OscConfig+0x474>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d118      	bne.n	8002a4c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a1a:	4b74      	ldr	r3, [pc, #464]	; (8002bec <HAL_RCC_OscConfig+0x474>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	4a73      	ldr	r2, [pc, #460]	; (8002bec <HAL_RCC_OscConfig+0x474>)
 8002a20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a24:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a26:	f7fe fa2b 	bl	8000e80 <HAL_GetTick>
 8002a2a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a2c:	e008      	b.n	8002a40 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a2e:	f7fe fa27 	bl	8000e80 <HAL_GetTick>
 8002a32:	4602      	mov	r2, r0
 8002a34:	693b      	ldr	r3, [r7, #16]
 8002a36:	1ad3      	subs	r3, r2, r3
 8002a38:	2b02      	cmp	r3, #2
 8002a3a:	d901      	bls.n	8002a40 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002a3c:	2303      	movs	r3, #3
 8002a3e:	e10c      	b.n	8002c5a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a40:	4b6a      	ldr	r3, [pc, #424]	; (8002bec <HAL_RCC_OscConfig+0x474>)
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d0f0      	beq.n	8002a2e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	689b      	ldr	r3, [r3, #8]
 8002a50:	2b01      	cmp	r3, #1
 8002a52:	d106      	bne.n	8002a62 <HAL_RCC_OscConfig+0x2ea>
 8002a54:	4b64      	ldr	r3, [pc, #400]	; (8002be8 <HAL_RCC_OscConfig+0x470>)
 8002a56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a58:	4a63      	ldr	r2, [pc, #396]	; (8002be8 <HAL_RCC_OscConfig+0x470>)
 8002a5a:	f043 0301 	orr.w	r3, r3, #1
 8002a5e:	6713      	str	r3, [r2, #112]	; 0x70
 8002a60:	e01c      	b.n	8002a9c <HAL_RCC_OscConfig+0x324>
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	689b      	ldr	r3, [r3, #8]
 8002a66:	2b05      	cmp	r3, #5
 8002a68:	d10c      	bne.n	8002a84 <HAL_RCC_OscConfig+0x30c>
 8002a6a:	4b5f      	ldr	r3, [pc, #380]	; (8002be8 <HAL_RCC_OscConfig+0x470>)
 8002a6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a6e:	4a5e      	ldr	r2, [pc, #376]	; (8002be8 <HAL_RCC_OscConfig+0x470>)
 8002a70:	f043 0304 	orr.w	r3, r3, #4
 8002a74:	6713      	str	r3, [r2, #112]	; 0x70
 8002a76:	4b5c      	ldr	r3, [pc, #368]	; (8002be8 <HAL_RCC_OscConfig+0x470>)
 8002a78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a7a:	4a5b      	ldr	r2, [pc, #364]	; (8002be8 <HAL_RCC_OscConfig+0x470>)
 8002a7c:	f043 0301 	orr.w	r3, r3, #1
 8002a80:	6713      	str	r3, [r2, #112]	; 0x70
 8002a82:	e00b      	b.n	8002a9c <HAL_RCC_OscConfig+0x324>
 8002a84:	4b58      	ldr	r3, [pc, #352]	; (8002be8 <HAL_RCC_OscConfig+0x470>)
 8002a86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a88:	4a57      	ldr	r2, [pc, #348]	; (8002be8 <HAL_RCC_OscConfig+0x470>)
 8002a8a:	f023 0301 	bic.w	r3, r3, #1
 8002a8e:	6713      	str	r3, [r2, #112]	; 0x70
 8002a90:	4b55      	ldr	r3, [pc, #340]	; (8002be8 <HAL_RCC_OscConfig+0x470>)
 8002a92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a94:	4a54      	ldr	r2, [pc, #336]	; (8002be8 <HAL_RCC_OscConfig+0x470>)
 8002a96:	f023 0304 	bic.w	r3, r3, #4
 8002a9a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	689b      	ldr	r3, [r3, #8]
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d015      	beq.n	8002ad0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002aa4:	f7fe f9ec 	bl	8000e80 <HAL_GetTick>
 8002aa8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002aaa:	e00a      	b.n	8002ac2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002aac:	f7fe f9e8 	bl	8000e80 <HAL_GetTick>
 8002ab0:	4602      	mov	r2, r0
 8002ab2:	693b      	ldr	r3, [r7, #16]
 8002ab4:	1ad3      	subs	r3, r2, r3
 8002ab6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002aba:	4293      	cmp	r3, r2
 8002abc:	d901      	bls.n	8002ac2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002abe:	2303      	movs	r3, #3
 8002ac0:	e0cb      	b.n	8002c5a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ac2:	4b49      	ldr	r3, [pc, #292]	; (8002be8 <HAL_RCC_OscConfig+0x470>)
 8002ac4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ac6:	f003 0302 	and.w	r3, r3, #2
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d0ee      	beq.n	8002aac <HAL_RCC_OscConfig+0x334>
 8002ace:	e014      	b.n	8002afa <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ad0:	f7fe f9d6 	bl	8000e80 <HAL_GetTick>
 8002ad4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ad6:	e00a      	b.n	8002aee <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ad8:	f7fe f9d2 	bl	8000e80 <HAL_GetTick>
 8002adc:	4602      	mov	r2, r0
 8002ade:	693b      	ldr	r3, [r7, #16]
 8002ae0:	1ad3      	subs	r3, r2, r3
 8002ae2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	d901      	bls.n	8002aee <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002aea:	2303      	movs	r3, #3
 8002aec:	e0b5      	b.n	8002c5a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002aee:	4b3e      	ldr	r3, [pc, #248]	; (8002be8 <HAL_RCC_OscConfig+0x470>)
 8002af0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002af2:	f003 0302 	and.w	r3, r3, #2
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d1ee      	bne.n	8002ad8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002afa:	7dfb      	ldrb	r3, [r7, #23]
 8002afc:	2b01      	cmp	r3, #1
 8002afe:	d105      	bne.n	8002b0c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b00:	4b39      	ldr	r3, [pc, #228]	; (8002be8 <HAL_RCC_OscConfig+0x470>)
 8002b02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b04:	4a38      	ldr	r2, [pc, #224]	; (8002be8 <HAL_RCC_OscConfig+0x470>)
 8002b06:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b0a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	699b      	ldr	r3, [r3, #24]
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	f000 80a1 	beq.w	8002c58 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002b16:	4b34      	ldr	r3, [pc, #208]	; (8002be8 <HAL_RCC_OscConfig+0x470>)
 8002b18:	689b      	ldr	r3, [r3, #8]
 8002b1a:	f003 030c 	and.w	r3, r3, #12
 8002b1e:	2b08      	cmp	r3, #8
 8002b20:	d05c      	beq.n	8002bdc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	699b      	ldr	r3, [r3, #24]
 8002b26:	2b02      	cmp	r3, #2
 8002b28:	d141      	bne.n	8002bae <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b2a:	4b31      	ldr	r3, [pc, #196]	; (8002bf0 <HAL_RCC_OscConfig+0x478>)
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b30:	f7fe f9a6 	bl	8000e80 <HAL_GetTick>
 8002b34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b36:	e008      	b.n	8002b4a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b38:	f7fe f9a2 	bl	8000e80 <HAL_GetTick>
 8002b3c:	4602      	mov	r2, r0
 8002b3e:	693b      	ldr	r3, [r7, #16]
 8002b40:	1ad3      	subs	r3, r2, r3
 8002b42:	2b02      	cmp	r3, #2
 8002b44:	d901      	bls.n	8002b4a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002b46:	2303      	movs	r3, #3
 8002b48:	e087      	b.n	8002c5a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b4a:	4b27      	ldr	r3, [pc, #156]	; (8002be8 <HAL_RCC_OscConfig+0x470>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d1f0      	bne.n	8002b38 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	69da      	ldr	r2, [r3, #28]
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6a1b      	ldr	r3, [r3, #32]
 8002b5e:	431a      	orrs	r2, r3
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b64:	019b      	lsls	r3, r3, #6
 8002b66:	431a      	orrs	r2, r3
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b6c:	085b      	lsrs	r3, r3, #1
 8002b6e:	3b01      	subs	r3, #1
 8002b70:	041b      	lsls	r3, r3, #16
 8002b72:	431a      	orrs	r2, r3
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b78:	061b      	lsls	r3, r3, #24
 8002b7a:	491b      	ldr	r1, [pc, #108]	; (8002be8 <HAL_RCC_OscConfig+0x470>)
 8002b7c:	4313      	orrs	r3, r2
 8002b7e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b80:	4b1b      	ldr	r3, [pc, #108]	; (8002bf0 <HAL_RCC_OscConfig+0x478>)
 8002b82:	2201      	movs	r2, #1
 8002b84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b86:	f7fe f97b 	bl	8000e80 <HAL_GetTick>
 8002b8a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b8c:	e008      	b.n	8002ba0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b8e:	f7fe f977 	bl	8000e80 <HAL_GetTick>
 8002b92:	4602      	mov	r2, r0
 8002b94:	693b      	ldr	r3, [r7, #16]
 8002b96:	1ad3      	subs	r3, r2, r3
 8002b98:	2b02      	cmp	r3, #2
 8002b9a:	d901      	bls.n	8002ba0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002b9c:	2303      	movs	r3, #3
 8002b9e:	e05c      	b.n	8002c5a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ba0:	4b11      	ldr	r3, [pc, #68]	; (8002be8 <HAL_RCC_OscConfig+0x470>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d0f0      	beq.n	8002b8e <HAL_RCC_OscConfig+0x416>
 8002bac:	e054      	b.n	8002c58 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bae:	4b10      	ldr	r3, [pc, #64]	; (8002bf0 <HAL_RCC_OscConfig+0x478>)
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bb4:	f7fe f964 	bl	8000e80 <HAL_GetTick>
 8002bb8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bba:	e008      	b.n	8002bce <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002bbc:	f7fe f960 	bl	8000e80 <HAL_GetTick>
 8002bc0:	4602      	mov	r2, r0
 8002bc2:	693b      	ldr	r3, [r7, #16]
 8002bc4:	1ad3      	subs	r3, r2, r3
 8002bc6:	2b02      	cmp	r3, #2
 8002bc8:	d901      	bls.n	8002bce <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002bca:	2303      	movs	r3, #3
 8002bcc:	e045      	b.n	8002c5a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bce:	4b06      	ldr	r3, [pc, #24]	; (8002be8 <HAL_RCC_OscConfig+0x470>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d1f0      	bne.n	8002bbc <HAL_RCC_OscConfig+0x444>
 8002bda:	e03d      	b.n	8002c58 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	699b      	ldr	r3, [r3, #24]
 8002be0:	2b01      	cmp	r3, #1
 8002be2:	d107      	bne.n	8002bf4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002be4:	2301      	movs	r3, #1
 8002be6:	e038      	b.n	8002c5a <HAL_RCC_OscConfig+0x4e2>
 8002be8:	40023800 	.word	0x40023800
 8002bec:	40007000 	.word	0x40007000
 8002bf0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002bf4:	4b1b      	ldr	r3, [pc, #108]	; (8002c64 <HAL_RCC_OscConfig+0x4ec>)
 8002bf6:	685b      	ldr	r3, [r3, #4]
 8002bf8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	699b      	ldr	r3, [r3, #24]
 8002bfe:	2b01      	cmp	r3, #1
 8002c00:	d028      	beq.n	8002c54 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c0c:	429a      	cmp	r2, r3
 8002c0e:	d121      	bne.n	8002c54 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c1a:	429a      	cmp	r2, r3
 8002c1c:	d11a      	bne.n	8002c54 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002c1e:	68fa      	ldr	r2, [r7, #12]
 8002c20:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002c24:	4013      	ands	r3, r2
 8002c26:	687a      	ldr	r2, [r7, #4]
 8002c28:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002c2a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002c2c:	4293      	cmp	r3, r2
 8002c2e:	d111      	bne.n	8002c54 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c3a:	085b      	lsrs	r3, r3, #1
 8002c3c:	3b01      	subs	r3, #1
 8002c3e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002c40:	429a      	cmp	r2, r3
 8002c42:	d107      	bne.n	8002c54 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c4e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002c50:	429a      	cmp	r2, r3
 8002c52:	d001      	beq.n	8002c58 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002c54:	2301      	movs	r3, #1
 8002c56:	e000      	b.n	8002c5a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002c58:	2300      	movs	r3, #0
}
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	3718      	adds	r7, #24
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	bd80      	pop	{r7, pc}
 8002c62:	bf00      	nop
 8002c64:	40023800 	.word	0x40023800

08002c68 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b084      	sub	sp, #16
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
 8002c70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d101      	bne.n	8002c7c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c78:	2301      	movs	r3, #1
 8002c7a:	e0cc      	b.n	8002e16 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002c7c:	4b68      	ldr	r3, [pc, #416]	; (8002e20 <HAL_RCC_ClockConfig+0x1b8>)
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f003 0307 	and.w	r3, r3, #7
 8002c84:	683a      	ldr	r2, [r7, #0]
 8002c86:	429a      	cmp	r2, r3
 8002c88:	d90c      	bls.n	8002ca4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c8a:	4b65      	ldr	r3, [pc, #404]	; (8002e20 <HAL_RCC_ClockConfig+0x1b8>)
 8002c8c:	683a      	ldr	r2, [r7, #0]
 8002c8e:	b2d2      	uxtb	r2, r2
 8002c90:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c92:	4b63      	ldr	r3, [pc, #396]	; (8002e20 <HAL_RCC_ClockConfig+0x1b8>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f003 0307 	and.w	r3, r3, #7
 8002c9a:	683a      	ldr	r2, [r7, #0]
 8002c9c:	429a      	cmp	r2, r3
 8002c9e:	d001      	beq.n	8002ca4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002ca0:	2301      	movs	r3, #1
 8002ca2:	e0b8      	b.n	8002e16 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f003 0302 	and.w	r3, r3, #2
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d020      	beq.n	8002cf2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f003 0304 	and.w	r3, r3, #4
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d005      	beq.n	8002cc8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002cbc:	4b59      	ldr	r3, [pc, #356]	; (8002e24 <HAL_RCC_ClockConfig+0x1bc>)
 8002cbe:	689b      	ldr	r3, [r3, #8]
 8002cc0:	4a58      	ldr	r2, [pc, #352]	; (8002e24 <HAL_RCC_ClockConfig+0x1bc>)
 8002cc2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002cc6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f003 0308 	and.w	r3, r3, #8
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d005      	beq.n	8002ce0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002cd4:	4b53      	ldr	r3, [pc, #332]	; (8002e24 <HAL_RCC_ClockConfig+0x1bc>)
 8002cd6:	689b      	ldr	r3, [r3, #8]
 8002cd8:	4a52      	ldr	r2, [pc, #328]	; (8002e24 <HAL_RCC_ClockConfig+0x1bc>)
 8002cda:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002cde:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ce0:	4b50      	ldr	r3, [pc, #320]	; (8002e24 <HAL_RCC_ClockConfig+0x1bc>)
 8002ce2:	689b      	ldr	r3, [r3, #8]
 8002ce4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	689b      	ldr	r3, [r3, #8]
 8002cec:	494d      	ldr	r1, [pc, #308]	; (8002e24 <HAL_RCC_ClockConfig+0x1bc>)
 8002cee:	4313      	orrs	r3, r2
 8002cf0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f003 0301 	and.w	r3, r3, #1
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d044      	beq.n	8002d88 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	685b      	ldr	r3, [r3, #4]
 8002d02:	2b01      	cmp	r3, #1
 8002d04:	d107      	bne.n	8002d16 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d06:	4b47      	ldr	r3, [pc, #284]	; (8002e24 <HAL_RCC_ClockConfig+0x1bc>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d119      	bne.n	8002d46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d12:	2301      	movs	r3, #1
 8002d14:	e07f      	b.n	8002e16 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	685b      	ldr	r3, [r3, #4]
 8002d1a:	2b02      	cmp	r3, #2
 8002d1c:	d003      	beq.n	8002d26 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d22:	2b03      	cmp	r3, #3
 8002d24:	d107      	bne.n	8002d36 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d26:	4b3f      	ldr	r3, [pc, #252]	; (8002e24 <HAL_RCC_ClockConfig+0x1bc>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d109      	bne.n	8002d46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d32:	2301      	movs	r3, #1
 8002d34:	e06f      	b.n	8002e16 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d36:	4b3b      	ldr	r3, [pc, #236]	; (8002e24 <HAL_RCC_ClockConfig+0x1bc>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f003 0302 	and.w	r3, r3, #2
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d101      	bne.n	8002d46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d42:	2301      	movs	r3, #1
 8002d44:	e067      	b.n	8002e16 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002d46:	4b37      	ldr	r3, [pc, #220]	; (8002e24 <HAL_RCC_ClockConfig+0x1bc>)
 8002d48:	689b      	ldr	r3, [r3, #8]
 8002d4a:	f023 0203 	bic.w	r2, r3, #3
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	685b      	ldr	r3, [r3, #4]
 8002d52:	4934      	ldr	r1, [pc, #208]	; (8002e24 <HAL_RCC_ClockConfig+0x1bc>)
 8002d54:	4313      	orrs	r3, r2
 8002d56:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002d58:	f7fe f892 	bl	8000e80 <HAL_GetTick>
 8002d5c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d5e:	e00a      	b.n	8002d76 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d60:	f7fe f88e 	bl	8000e80 <HAL_GetTick>
 8002d64:	4602      	mov	r2, r0
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	1ad3      	subs	r3, r2, r3
 8002d6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d901      	bls.n	8002d76 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002d72:	2303      	movs	r3, #3
 8002d74:	e04f      	b.n	8002e16 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d76:	4b2b      	ldr	r3, [pc, #172]	; (8002e24 <HAL_RCC_ClockConfig+0x1bc>)
 8002d78:	689b      	ldr	r3, [r3, #8]
 8002d7a:	f003 020c 	and.w	r2, r3, #12
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	685b      	ldr	r3, [r3, #4]
 8002d82:	009b      	lsls	r3, r3, #2
 8002d84:	429a      	cmp	r2, r3
 8002d86:	d1eb      	bne.n	8002d60 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002d88:	4b25      	ldr	r3, [pc, #148]	; (8002e20 <HAL_RCC_ClockConfig+0x1b8>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f003 0307 	and.w	r3, r3, #7
 8002d90:	683a      	ldr	r2, [r7, #0]
 8002d92:	429a      	cmp	r2, r3
 8002d94:	d20c      	bcs.n	8002db0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d96:	4b22      	ldr	r3, [pc, #136]	; (8002e20 <HAL_RCC_ClockConfig+0x1b8>)
 8002d98:	683a      	ldr	r2, [r7, #0]
 8002d9a:	b2d2      	uxtb	r2, r2
 8002d9c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d9e:	4b20      	ldr	r3, [pc, #128]	; (8002e20 <HAL_RCC_ClockConfig+0x1b8>)
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f003 0307 	and.w	r3, r3, #7
 8002da6:	683a      	ldr	r2, [r7, #0]
 8002da8:	429a      	cmp	r2, r3
 8002daa:	d001      	beq.n	8002db0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002dac:	2301      	movs	r3, #1
 8002dae:	e032      	b.n	8002e16 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f003 0304 	and.w	r3, r3, #4
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d008      	beq.n	8002dce <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002dbc:	4b19      	ldr	r3, [pc, #100]	; (8002e24 <HAL_RCC_ClockConfig+0x1bc>)
 8002dbe:	689b      	ldr	r3, [r3, #8]
 8002dc0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	68db      	ldr	r3, [r3, #12]
 8002dc8:	4916      	ldr	r1, [pc, #88]	; (8002e24 <HAL_RCC_ClockConfig+0x1bc>)
 8002dca:	4313      	orrs	r3, r2
 8002dcc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f003 0308 	and.w	r3, r3, #8
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d009      	beq.n	8002dee <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002dda:	4b12      	ldr	r3, [pc, #72]	; (8002e24 <HAL_RCC_ClockConfig+0x1bc>)
 8002ddc:	689b      	ldr	r3, [r3, #8]
 8002dde:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	691b      	ldr	r3, [r3, #16]
 8002de6:	00db      	lsls	r3, r3, #3
 8002de8:	490e      	ldr	r1, [pc, #56]	; (8002e24 <HAL_RCC_ClockConfig+0x1bc>)
 8002dea:	4313      	orrs	r3, r2
 8002dec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002dee:	f000 f821 	bl	8002e34 <HAL_RCC_GetSysClockFreq>
 8002df2:	4602      	mov	r2, r0
 8002df4:	4b0b      	ldr	r3, [pc, #44]	; (8002e24 <HAL_RCC_ClockConfig+0x1bc>)
 8002df6:	689b      	ldr	r3, [r3, #8]
 8002df8:	091b      	lsrs	r3, r3, #4
 8002dfa:	f003 030f 	and.w	r3, r3, #15
 8002dfe:	490a      	ldr	r1, [pc, #40]	; (8002e28 <HAL_RCC_ClockConfig+0x1c0>)
 8002e00:	5ccb      	ldrb	r3, [r1, r3]
 8002e02:	fa22 f303 	lsr.w	r3, r2, r3
 8002e06:	4a09      	ldr	r2, [pc, #36]	; (8002e2c <HAL_RCC_ClockConfig+0x1c4>)
 8002e08:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002e0a:	4b09      	ldr	r3, [pc, #36]	; (8002e30 <HAL_RCC_ClockConfig+0x1c8>)
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	4618      	mov	r0, r3
 8002e10:	f7fd fff2 	bl	8000df8 <HAL_InitTick>

  return HAL_OK;
 8002e14:	2300      	movs	r3, #0
}
 8002e16:	4618      	mov	r0, r3
 8002e18:	3710      	adds	r7, #16
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	bd80      	pop	{r7, pc}
 8002e1e:	bf00      	nop
 8002e20:	40023c00 	.word	0x40023c00
 8002e24:	40023800 	.word	0x40023800
 8002e28:	08007a74 	.word	0x08007a74
 8002e2c:	20000000 	.word	0x20000000
 8002e30:	20000028 	.word	0x20000028

08002e34 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e34:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002e38:	b090      	sub	sp, #64	; 0x40
 8002e3a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	637b      	str	r3, [r7, #52]	; 0x34
 8002e40:	2300      	movs	r3, #0
 8002e42:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002e44:	2300      	movs	r3, #0
 8002e46:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002e48:	2300      	movs	r3, #0
 8002e4a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002e4c:	4b59      	ldr	r3, [pc, #356]	; (8002fb4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002e4e:	689b      	ldr	r3, [r3, #8]
 8002e50:	f003 030c 	and.w	r3, r3, #12
 8002e54:	2b08      	cmp	r3, #8
 8002e56:	d00d      	beq.n	8002e74 <HAL_RCC_GetSysClockFreq+0x40>
 8002e58:	2b08      	cmp	r3, #8
 8002e5a:	f200 80a1 	bhi.w	8002fa0 <HAL_RCC_GetSysClockFreq+0x16c>
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d002      	beq.n	8002e68 <HAL_RCC_GetSysClockFreq+0x34>
 8002e62:	2b04      	cmp	r3, #4
 8002e64:	d003      	beq.n	8002e6e <HAL_RCC_GetSysClockFreq+0x3a>
 8002e66:	e09b      	b.n	8002fa0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002e68:	4b53      	ldr	r3, [pc, #332]	; (8002fb8 <HAL_RCC_GetSysClockFreq+0x184>)
 8002e6a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8002e6c:	e09b      	b.n	8002fa6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002e6e:	4b53      	ldr	r3, [pc, #332]	; (8002fbc <HAL_RCC_GetSysClockFreq+0x188>)
 8002e70:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002e72:	e098      	b.n	8002fa6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002e74:	4b4f      	ldr	r3, [pc, #316]	; (8002fb4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002e76:	685b      	ldr	r3, [r3, #4]
 8002e78:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002e7c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002e7e:	4b4d      	ldr	r3, [pc, #308]	; (8002fb4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002e80:	685b      	ldr	r3, [r3, #4]
 8002e82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d028      	beq.n	8002edc <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e8a:	4b4a      	ldr	r3, [pc, #296]	; (8002fb4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002e8c:	685b      	ldr	r3, [r3, #4]
 8002e8e:	099b      	lsrs	r3, r3, #6
 8002e90:	2200      	movs	r2, #0
 8002e92:	623b      	str	r3, [r7, #32]
 8002e94:	627a      	str	r2, [r7, #36]	; 0x24
 8002e96:	6a3b      	ldr	r3, [r7, #32]
 8002e98:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002e9c:	2100      	movs	r1, #0
 8002e9e:	4b47      	ldr	r3, [pc, #284]	; (8002fbc <HAL_RCC_GetSysClockFreq+0x188>)
 8002ea0:	fb03 f201 	mul.w	r2, r3, r1
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	fb00 f303 	mul.w	r3, r0, r3
 8002eaa:	4413      	add	r3, r2
 8002eac:	4a43      	ldr	r2, [pc, #268]	; (8002fbc <HAL_RCC_GetSysClockFreq+0x188>)
 8002eae:	fba0 1202 	umull	r1, r2, r0, r2
 8002eb2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002eb4:	460a      	mov	r2, r1
 8002eb6:	62ba      	str	r2, [r7, #40]	; 0x28
 8002eb8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002eba:	4413      	add	r3, r2
 8002ebc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002ebe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	61bb      	str	r3, [r7, #24]
 8002ec4:	61fa      	str	r2, [r7, #28]
 8002ec6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002eca:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002ece:	f7fd f9d7 	bl	8000280 <__aeabi_uldivmod>
 8002ed2:	4602      	mov	r2, r0
 8002ed4:	460b      	mov	r3, r1
 8002ed6:	4613      	mov	r3, r2
 8002ed8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002eda:	e053      	b.n	8002f84 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002edc:	4b35      	ldr	r3, [pc, #212]	; (8002fb4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002ede:	685b      	ldr	r3, [r3, #4]
 8002ee0:	099b      	lsrs	r3, r3, #6
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	613b      	str	r3, [r7, #16]
 8002ee6:	617a      	str	r2, [r7, #20]
 8002ee8:	693b      	ldr	r3, [r7, #16]
 8002eea:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002eee:	f04f 0b00 	mov.w	fp, #0
 8002ef2:	4652      	mov	r2, sl
 8002ef4:	465b      	mov	r3, fp
 8002ef6:	f04f 0000 	mov.w	r0, #0
 8002efa:	f04f 0100 	mov.w	r1, #0
 8002efe:	0159      	lsls	r1, r3, #5
 8002f00:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002f04:	0150      	lsls	r0, r2, #5
 8002f06:	4602      	mov	r2, r0
 8002f08:	460b      	mov	r3, r1
 8002f0a:	ebb2 080a 	subs.w	r8, r2, sl
 8002f0e:	eb63 090b 	sbc.w	r9, r3, fp
 8002f12:	f04f 0200 	mov.w	r2, #0
 8002f16:	f04f 0300 	mov.w	r3, #0
 8002f1a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002f1e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002f22:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002f26:	ebb2 0408 	subs.w	r4, r2, r8
 8002f2a:	eb63 0509 	sbc.w	r5, r3, r9
 8002f2e:	f04f 0200 	mov.w	r2, #0
 8002f32:	f04f 0300 	mov.w	r3, #0
 8002f36:	00eb      	lsls	r3, r5, #3
 8002f38:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002f3c:	00e2      	lsls	r2, r4, #3
 8002f3e:	4614      	mov	r4, r2
 8002f40:	461d      	mov	r5, r3
 8002f42:	eb14 030a 	adds.w	r3, r4, sl
 8002f46:	603b      	str	r3, [r7, #0]
 8002f48:	eb45 030b 	adc.w	r3, r5, fp
 8002f4c:	607b      	str	r3, [r7, #4]
 8002f4e:	f04f 0200 	mov.w	r2, #0
 8002f52:	f04f 0300 	mov.w	r3, #0
 8002f56:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002f5a:	4629      	mov	r1, r5
 8002f5c:	028b      	lsls	r3, r1, #10
 8002f5e:	4621      	mov	r1, r4
 8002f60:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002f64:	4621      	mov	r1, r4
 8002f66:	028a      	lsls	r2, r1, #10
 8002f68:	4610      	mov	r0, r2
 8002f6a:	4619      	mov	r1, r3
 8002f6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f6e:	2200      	movs	r2, #0
 8002f70:	60bb      	str	r3, [r7, #8]
 8002f72:	60fa      	str	r2, [r7, #12]
 8002f74:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002f78:	f7fd f982 	bl	8000280 <__aeabi_uldivmod>
 8002f7c:	4602      	mov	r2, r0
 8002f7e:	460b      	mov	r3, r1
 8002f80:	4613      	mov	r3, r2
 8002f82:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002f84:	4b0b      	ldr	r3, [pc, #44]	; (8002fb4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002f86:	685b      	ldr	r3, [r3, #4]
 8002f88:	0c1b      	lsrs	r3, r3, #16
 8002f8a:	f003 0303 	and.w	r3, r3, #3
 8002f8e:	3301      	adds	r3, #1
 8002f90:	005b      	lsls	r3, r3, #1
 8002f92:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8002f94:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002f96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f98:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f9c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002f9e:	e002      	b.n	8002fa6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002fa0:	4b05      	ldr	r3, [pc, #20]	; (8002fb8 <HAL_RCC_GetSysClockFreq+0x184>)
 8002fa2:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002fa4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002fa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002fa8:	4618      	mov	r0, r3
 8002faa:	3740      	adds	r7, #64	; 0x40
 8002fac:	46bd      	mov	sp, r7
 8002fae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002fb2:	bf00      	nop
 8002fb4:	40023800 	.word	0x40023800
 8002fb8:	00f42400 	.word	0x00f42400
 8002fbc:	017d7840 	.word	0x017d7840

08002fc0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002fc0:	b480      	push	{r7}
 8002fc2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002fc4:	4b03      	ldr	r3, [pc, #12]	; (8002fd4 <HAL_RCC_GetHCLKFreq+0x14>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
}
 8002fc8:	4618      	mov	r0, r3
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd0:	4770      	bx	lr
 8002fd2:	bf00      	nop
 8002fd4:	20000000 	.word	0x20000000

08002fd8 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b086      	sub	sp, #24
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002fe0:	2300      	movs	r3, #0
 8002fe2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f003 0301 	and.w	r3, r3, #1
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d105      	bne.n	8003000 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d038      	beq.n	8003072 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003000:	4b68      	ldr	r3, [pc, #416]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003002:	2200      	movs	r2, #0
 8003004:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003006:	f7fd ff3b 	bl	8000e80 <HAL_GetTick>
 800300a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800300c:	e008      	b.n	8003020 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800300e:	f7fd ff37 	bl	8000e80 <HAL_GetTick>
 8003012:	4602      	mov	r2, r0
 8003014:	697b      	ldr	r3, [r7, #20]
 8003016:	1ad3      	subs	r3, r2, r3
 8003018:	2b02      	cmp	r3, #2
 800301a:	d901      	bls.n	8003020 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800301c:	2303      	movs	r3, #3
 800301e:	e0bd      	b.n	800319c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003020:	4b61      	ldr	r3, [pc, #388]	; (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003028:	2b00      	cmp	r3, #0
 800302a:	d1f0      	bne.n	800300e <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	685a      	ldr	r2, [r3, #4]
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	689b      	ldr	r3, [r3, #8]
 8003034:	019b      	lsls	r3, r3, #6
 8003036:	431a      	orrs	r2, r3
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	68db      	ldr	r3, [r3, #12]
 800303c:	071b      	lsls	r3, r3, #28
 800303e:	495a      	ldr	r1, [pc, #360]	; (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003040:	4313      	orrs	r3, r2
 8003042:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003046:	4b57      	ldr	r3, [pc, #348]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003048:	2201      	movs	r2, #1
 800304a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800304c:	f7fd ff18 	bl	8000e80 <HAL_GetTick>
 8003050:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003052:	e008      	b.n	8003066 <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003054:	f7fd ff14 	bl	8000e80 <HAL_GetTick>
 8003058:	4602      	mov	r2, r0
 800305a:	697b      	ldr	r3, [r7, #20]
 800305c:	1ad3      	subs	r3, r2, r3
 800305e:	2b02      	cmp	r3, #2
 8003060:	d901      	bls.n	8003066 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003062:	2303      	movs	r3, #3
 8003064:	e09a      	b.n	800319c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003066:	4b50      	ldr	r3, [pc, #320]	; (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800306e:	2b00      	cmp	r3, #0
 8003070:	d0f0      	beq.n	8003054 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f003 0302 	and.w	r3, r3, #2
 800307a:	2b00      	cmp	r3, #0
 800307c:	f000 8083 	beq.w	8003186 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003080:	2300      	movs	r3, #0
 8003082:	60fb      	str	r3, [r7, #12]
 8003084:	4b48      	ldr	r3, [pc, #288]	; (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003086:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003088:	4a47      	ldr	r2, [pc, #284]	; (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800308a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800308e:	6413      	str	r3, [r2, #64]	; 0x40
 8003090:	4b45      	ldr	r3, [pc, #276]	; (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003092:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003094:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003098:	60fb      	str	r3, [r7, #12]
 800309a:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800309c:	4b43      	ldr	r3, [pc, #268]	; (80031ac <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	4a42      	ldr	r2, [pc, #264]	; (80031ac <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80030a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030a6:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80030a8:	f7fd feea 	bl	8000e80 <HAL_GetTick>
 80030ac:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80030ae:	e008      	b.n	80030c2 <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80030b0:	f7fd fee6 	bl	8000e80 <HAL_GetTick>
 80030b4:	4602      	mov	r2, r0
 80030b6:	697b      	ldr	r3, [r7, #20]
 80030b8:	1ad3      	subs	r3, r2, r3
 80030ba:	2b02      	cmp	r3, #2
 80030bc:	d901      	bls.n	80030c2 <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 80030be:	2303      	movs	r3, #3
 80030c0:	e06c      	b.n	800319c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80030c2:	4b3a      	ldr	r3, [pc, #232]	; (80031ac <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d0f0      	beq.n	80030b0 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80030ce:	4b36      	ldr	r3, [pc, #216]	; (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80030d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80030d6:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80030d8:	693b      	ldr	r3, [r7, #16]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d02f      	beq.n	800313e <HAL_RCCEx_PeriphCLKConfig+0x166>
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	691b      	ldr	r3, [r3, #16]
 80030e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80030e6:	693a      	ldr	r2, [r7, #16]
 80030e8:	429a      	cmp	r2, r3
 80030ea:	d028      	beq.n	800313e <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80030ec:	4b2e      	ldr	r3, [pc, #184]	; (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80030ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80030f4:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80030f6:	4b2e      	ldr	r3, [pc, #184]	; (80031b0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80030f8:	2201      	movs	r2, #1
 80030fa:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80030fc:	4b2c      	ldr	r3, [pc, #176]	; (80031b0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80030fe:	2200      	movs	r2, #0
 8003100:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003102:	4a29      	ldr	r2, [pc, #164]	; (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003104:	693b      	ldr	r3, [r7, #16]
 8003106:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003108:	4b27      	ldr	r3, [pc, #156]	; (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800310a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800310c:	f003 0301 	and.w	r3, r3, #1
 8003110:	2b01      	cmp	r3, #1
 8003112:	d114      	bne.n	800313e <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003114:	f7fd feb4 	bl	8000e80 <HAL_GetTick>
 8003118:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800311a:	e00a      	b.n	8003132 <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800311c:	f7fd feb0 	bl	8000e80 <HAL_GetTick>
 8003120:	4602      	mov	r2, r0
 8003122:	697b      	ldr	r3, [r7, #20]
 8003124:	1ad3      	subs	r3, r2, r3
 8003126:	f241 3288 	movw	r2, #5000	; 0x1388
 800312a:	4293      	cmp	r3, r2
 800312c:	d901      	bls.n	8003132 <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 800312e:	2303      	movs	r3, #3
 8003130:	e034      	b.n	800319c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003132:	4b1d      	ldr	r3, [pc, #116]	; (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003134:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003136:	f003 0302 	and.w	r3, r3, #2
 800313a:	2b00      	cmp	r3, #0
 800313c:	d0ee      	beq.n	800311c <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	691b      	ldr	r3, [r3, #16]
 8003142:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003146:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800314a:	d10d      	bne.n	8003168 <HAL_RCCEx_PeriphCLKConfig+0x190>
 800314c:	4b16      	ldr	r3, [pc, #88]	; (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800314e:	689b      	ldr	r3, [r3, #8]
 8003150:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	691b      	ldr	r3, [r3, #16]
 8003158:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800315c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003160:	4911      	ldr	r1, [pc, #68]	; (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003162:	4313      	orrs	r3, r2
 8003164:	608b      	str	r3, [r1, #8]
 8003166:	e005      	b.n	8003174 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8003168:	4b0f      	ldr	r3, [pc, #60]	; (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800316a:	689b      	ldr	r3, [r3, #8]
 800316c:	4a0e      	ldr	r2, [pc, #56]	; (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800316e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003172:	6093      	str	r3, [r2, #8]
 8003174:	4b0c      	ldr	r3, [pc, #48]	; (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003176:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	691b      	ldr	r3, [r3, #16]
 800317c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003180:	4909      	ldr	r1, [pc, #36]	; (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003182:	4313      	orrs	r3, r2
 8003184:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f003 0308 	and.w	r3, r3, #8
 800318e:	2b00      	cmp	r3, #0
 8003190:	d003      	beq.n	800319a <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	7d1a      	ldrb	r2, [r3, #20]
 8003196:	4b07      	ldr	r3, [pc, #28]	; (80031b4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8003198:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 800319a:	2300      	movs	r3, #0
}
 800319c:	4618      	mov	r0, r3
 800319e:	3718      	adds	r7, #24
 80031a0:	46bd      	mov	sp, r7
 80031a2:	bd80      	pop	{r7, pc}
 80031a4:	42470068 	.word	0x42470068
 80031a8:	40023800 	.word	0x40023800
 80031ac:	40007000 	.word	0x40007000
 80031b0:	42470e40 	.word	0x42470e40
 80031b4:	424711e0 	.word	0x424711e0

080031b8 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b082      	sub	sp, #8
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d101      	bne.n	80031ca <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 80031c6:	2301      	movs	r3, #1
 80031c8:	e083      	b.n	80032d2 <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	7f5b      	ldrb	r3, [r3, #29]
 80031ce:	b2db      	uxtb	r3, r3
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d105      	bne.n	80031e0 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2200      	movs	r2, #0
 80031d8:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80031da:	6878      	ldr	r0, [r7, #4]
 80031dc:	f7fd fcd4 	bl	8000b88 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2202      	movs	r2, #2
 80031e4:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	22ca      	movs	r2, #202	; 0xca
 80031ec:	625a      	str	r2, [r3, #36]	; 0x24
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	2253      	movs	r2, #83	; 0x53
 80031f4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80031f6:	6878      	ldr	r0, [r7, #4]
 80031f8:	f000 f897 	bl	800332a <RTC_EnterInitMode>
 80031fc:	4603      	mov	r3, r0
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d008      	beq.n	8003214 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	22ff      	movs	r2, #255	; 0xff
 8003208:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	2204      	movs	r2, #4
 800320e:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8003210:	2301      	movs	r3, #1
 8003212:	e05e      	b.n	80032d2 <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	689b      	ldr	r3, [r3, #8]
 800321a:	687a      	ldr	r2, [r7, #4]
 800321c:	6812      	ldr	r2, [r2, #0]
 800321e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8003222:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003226:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	6899      	ldr	r1, [r3, #8]
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	685a      	ldr	r2, [r3, #4]
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	691b      	ldr	r3, [r3, #16]
 8003236:	431a      	orrs	r2, r3
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	695b      	ldr	r3, [r3, #20]
 800323c:	431a      	orrs	r2, r3
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	430a      	orrs	r2, r1
 8003244:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	687a      	ldr	r2, [r7, #4]
 800324c:	68d2      	ldr	r2, [r2, #12]
 800324e:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	6919      	ldr	r1, [r3, #16]
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	689b      	ldr	r3, [r3, #8]
 800325a:	041a      	lsls	r2, r3, #16
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	430a      	orrs	r2, r1
 8003262:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	68da      	ldr	r2, [r3, #12]
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003272:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	689b      	ldr	r3, [r3, #8]
 800327a:	f003 0320 	and.w	r3, r3, #32
 800327e:	2b00      	cmp	r3, #0
 8003280:	d10e      	bne.n	80032a0 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003282:	6878      	ldr	r0, [r7, #4]
 8003284:	f000 f829 	bl	80032da <HAL_RTC_WaitForSynchro>
 8003288:	4603      	mov	r3, r0
 800328a:	2b00      	cmp	r3, #0
 800328c:	d008      	beq.n	80032a0 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	22ff      	movs	r2, #255	; 0xff
 8003294:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	2204      	movs	r2, #4
 800329a:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 800329c:	2301      	movs	r3, #1
 800329e:	e018      	b.n	80032d2 <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80032ae:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	699a      	ldr	r2, [r3, #24]
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	430a      	orrs	r2, r1
 80032c0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	22ff      	movs	r2, #255	; 0xff
 80032c8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	2201      	movs	r2, #1
 80032ce:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 80032d0:	2300      	movs	r3, #0
  }
}
 80032d2:	4618      	mov	r0, r3
 80032d4:	3708      	adds	r7, #8
 80032d6:	46bd      	mov	sp, r7
 80032d8:	bd80      	pop	{r7, pc}

080032da <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 80032da:	b580      	push	{r7, lr}
 80032dc:	b084      	sub	sp, #16
 80032de:	af00      	add	r7, sp, #0
 80032e0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80032e2:	2300      	movs	r3, #0
 80032e4:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	68da      	ldr	r2, [r3, #12]
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80032f4:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80032f6:	f7fd fdc3 	bl	8000e80 <HAL_GetTick>
 80032fa:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80032fc:	e009      	b.n	8003312 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80032fe:	f7fd fdbf 	bl	8000e80 <HAL_GetTick>
 8003302:	4602      	mov	r2, r0
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	1ad3      	subs	r3, r2, r3
 8003308:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800330c:	d901      	bls.n	8003312 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800330e:	2303      	movs	r3, #3
 8003310:	e007      	b.n	8003322 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	68db      	ldr	r3, [r3, #12]
 8003318:	f003 0320 	and.w	r3, r3, #32
 800331c:	2b00      	cmp	r3, #0
 800331e:	d0ee      	beq.n	80032fe <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8003320:	2300      	movs	r3, #0
}
 8003322:	4618      	mov	r0, r3
 8003324:	3710      	adds	r7, #16
 8003326:	46bd      	mov	sp, r7
 8003328:	bd80      	pop	{r7, pc}

0800332a <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 800332a:	b580      	push	{r7, lr}
 800332c:	b084      	sub	sp, #16
 800332e:	af00      	add	r7, sp, #0
 8003330:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003332:	2300      	movs	r3, #0
 8003334:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	68db      	ldr	r3, [r3, #12]
 800333c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003340:	2b00      	cmp	r3, #0
 8003342:	d119      	bne.n	8003378 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f04f 32ff 	mov.w	r2, #4294967295
 800334c:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800334e:	f7fd fd97 	bl	8000e80 <HAL_GetTick>
 8003352:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8003354:	e009      	b.n	800336a <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8003356:	f7fd fd93 	bl	8000e80 <HAL_GetTick>
 800335a:	4602      	mov	r2, r0
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	1ad3      	subs	r3, r2, r3
 8003360:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003364:	d901      	bls.n	800336a <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8003366:	2303      	movs	r3, #3
 8003368:	e007      	b.n	800337a <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	68db      	ldr	r3, [r3, #12]
 8003370:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003374:	2b00      	cmp	r3, #0
 8003376:	d0ee      	beq.n	8003356 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8003378:	2300      	movs	r3, #0
}
 800337a:	4618      	mov	r0, r3
 800337c:	3710      	adds	r7, #16
 800337e:	46bd      	mov	sp, r7
 8003380:	bd80      	pop	{r7, pc}

08003382 <HAL_RTCEx_BKUPWrite>:
  *                                 specify the register.
  * @param  Data Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8003382:	b480      	push	{r7}
 8003384:	b087      	sub	sp, #28
 8003386:	af00      	add	r7, sp, #0
 8003388:	60f8      	str	r0, [r7, #12]
 800338a:	60b9      	str	r1, [r7, #8]
 800338c:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 800338e:	2300      	movs	r3, #0
 8003390:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	3350      	adds	r3, #80	; 0x50
 8003398:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 800339a:	68bb      	ldr	r3, [r7, #8]
 800339c:	009b      	lsls	r3, r3, #2
 800339e:	697a      	ldr	r2, [r7, #20]
 80033a0:	4413      	add	r3, r2
 80033a2:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 80033a4:	697b      	ldr	r3, [r7, #20]
 80033a6:	687a      	ldr	r2, [r7, #4]
 80033a8:	601a      	str	r2, [r3, #0]
}
 80033aa:	bf00      	nop
 80033ac:	371c      	adds	r7, #28
 80033ae:	46bd      	mov	sp, r7
 80033b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b4:	4770      	bx	lr

080033b6 <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx where x can be from 0 to 19 to
  *                                 specify the register.
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 80033b6:	b480      	push	{r7}
 80033b8:	b085      	sub	sp, #20
 80033ba:	af00      	add	r7, sp, #0
 80033bc:	6078      	str	r0, [r7, #4]
 80033be:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0U;
 80033c0:	2300      	movs	r3, #0
 80033c2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	3350      	adds	r3, #80	; 0x50
 80033ca:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 80033cc:	683b      	ldr	r3, [r7, #0]
 80033ce:	009b      	lsls	r3, r3, #2
 80033d0:	68fa      	ldr	r2, [r7, #12]
 80033d2:	4413      	add	r3, r2
 80033d4:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	681b      	ldr	r3, [r3, #0]
}
 80033da:	4618      	mov	r0, r3
 80033dc:	3714      	adds	r7, #20
 80033de:	46bd      	mov	sp, r7
 80033e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e4:	4770      	bx	lr

080033e6 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80033e6:	b084      	sub	sp, #16
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b084      	sub	sp, #16
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
 80033f0:	f107 001c 	add.w	r0, r7, #28
 80033f4:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80033f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033fa:	2b01      	cmp	r3, #1
 80033fc:	d122      	bne.n	8003444 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003402:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	68db      	ldr	r3, [r3, #12]
 800340e:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8003412:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003416:	687a      	ldr	r2, [r7, #4]
 8003418:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	68db      	ldr	r3, [r3, #12]
 800341e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003426:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003428:	2b01      	cmp	r3, #1
 800342a:	d105      	bne.n	8003438 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	68db      	ldr	r3, [r3, #12]
 8003430:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003438:	6878      	ldr	r0, [r7, #4]
 800343a:	f001 fb1b 	bl	8004a74 <USB_CoreReset>
 800343e:	4603      	mov	r3, r0
 8003440:	73fb      	strb	r3, [r7, #15]
 8003442:	e01a      	b.n	800347a <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	68db      	ldr	r3, [r3, #12]
 8003448:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003450:	6878      	ldr	r0, [r7, #4]
 8003452:	f001 fb0f 	bl	8004a74 <USB_CoreReset>
 8003456:	4603      	mov	r3, r0
 8003458:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800345a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800345c:	2b00      	cmp	r3, #0
 800345e:	d106      	bne.n	800346e <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003464:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	639a      	str	r2, [r3, #56]	; 0x38
 800346c:	e005      	b.n	800347a <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003472:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800347a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800347c:	2b01      	cmp	r3, #1
 800347e:	d10b      	bne.n	8003498 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	689b      	ldr	r3, [r3, #8]
 8003484:	f043 0206 	orr.w	r2, r3, #6
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	689b      	ldr	r3, [r3, #8]
 8003490:	f043 0220 	orr.w	r2, r3, #32
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003498:	7bfb      	ldrb	r3, [r7, #15]
}
 800349a:	4618      	mov	r0, r3
 800349c:	3710      	adds	r7, #16
 800349e:	46bd      	mov	sp, r7
 80034a0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80034a4:	b004      	add	sp, #16
 80034a6:	4770      	bx	lr

080034a8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80034a8:	b480      	push	{r7}
 80034aa:	b087      	sub	sp, #28
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	60f8      	str	r0, [r7, #12]
 80034b0:	60b9      	str	r1, [r7, #8]
 80034b2:	4613      	mov	r3, r2
 80034b4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80034b6:	79fb      	ldrb	r3, [r7, #7]
 80034b8:	2b02      	cmp	r3, #2
 80034ba:	d165      	bne.n	8003588 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80034bc:	68bb      	ldr	r3, [r7, #8]
 80034be:	4a41      	ldr	r2, [pc, #260]	; (80035c4 <USB_SetTurnaroundTime+0x11c>)
 80034c0:	4293      	cmp	r3, r2
 80034c2:	d906      	bls.n	80034d2 <USB_SetTurnaroundTime+0x2a>
 80034c4:	68bb      	ldr	r3, [r7, #8]
 80034c6:	4a40      	ldr	r2, [pc, #256]	; (80035c8 <USB_SetTurnaroundTime+0x120>)
 80034c8:	4293      	cmp	r3, r2
 80034ca:	d202      	bcs.n	80034d2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80034cc:	230f      	movs	r3, #15
 80034ce:	617b      	str	r3, [r7, #20]
 80034d0:	e062      	b.n	8003598 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80034d2:	68bb      	ldr	r3, [r7, #8]
 80034d4:	4a3c      	ldr	r2, [pc, #240]	; (80035c8 <USB_SetTurnaroundTime+0x120>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d306      	bcc.n	80034e8 <USB_SetTurnaroundTime+0x40>
 80034da:	68bb      	ldr	r3, [r7, #8]
 80034dc:	4a3b      	ldr	r2, [pc, #236]	; (80035cc <USB_SetTurnaroundTime+0x124>)
 80034de:	4293      	cmp	r3, r2
 80034e0:	d202      	bcs.n	80034e8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80034e2:	230e      	movs	r3, #14
 80034e4:	617b      	str	r3, [r7, #20]
 80034e6:	e057      	b.n	8003598 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80034e8:	68bb      	ldr	r3, [r7, #8]
 80034ea:	4a38      	ldr	r2, [pc, #224]	; (80035cc <USB_SetTurnaroundTime+0x124>)
 80034ec:	4293      	cmp	r3, r2
 80034ee:	d306      	bcc.n	80034fe <USB_SetTurnaroundTime+0x56>
 80034f0:	68bb      	ldr	r3, [r7, #8]
 80034f2:	4a37      	ldr	r2, [pc, #220]	; (80035d0 <USB_SetTurnaroundTime+0x128>)
 80034f4:	4293      	cmp	r3, r2
 80034f6:	d202      	bcs.n	80034fe <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80034f8:	230d      	movs	r3, #13
 80034fa:	617b      	str	r3, [r7, #20]
 80034fc:	e04c      	b.n	8003598 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80034fe:	68bb      	ldr	r3, [r7, #8]
 8003500:	4a33      	ldr	r2, [pc, #204]	; (80035d0 <USB_SetTurnaroundTime+0x128>)
 8003502:	4293      	cmp	r3, r2
 8003504:	d306      	bcc.n	8003514 <USB_SetTurnaroundTime+0x6c>
 8003506:	68bb      	ldr	r3, [r7, #8]
 8003508:	4a32      	ldr	r2, [pc, #200]	; (80035d4 <USB_SetTurnaroundTime+0x12c>)
 800350a:	4293      	cmp	r3, r2
 800350c:	d802      	bhi.n	8003514 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800350e:	230c      	movs	r3, #12
 8003510:	617b      	str	r3, [r7, #20]
 8003512:	e041      	b.n	8003598 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8003514:	68bb      	ldr	r3, [r7, #8]
 8003516:	4a2f      	ldr	r2, [pc, #188]	; (80035d4 <USB_SetTurnaroundTime+0x12c>)
 8003518:	4293      	cmp	r3, r2
 800351a:	d906      	bls.n	800352a <USB_SetTurnaroundTime+0x82>
 800351c:	68bb      	ldr	r3, [r7, #8]
 800351e:	4a2e      	ldr	r2, [pc, #184]	; (80035d8 <USB_SetTurnaroundTime+0x130>)
 8003520:	4293      	cmp	r3, r2
 8003522:	d802      	bhi.n	800352a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8003524:	230b      	movs	r3, #11
 8003526:	617b      	str	r3, [r7, #20]
 8003528:	e036      	b.n	8003598 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800352a:	68bb      	ldr	r3, [r7, #8]
 800352c:	4a2a      	ldr	r2, [pc, #168]	; (80035d8 <USB_SetTurnaroundTime+0x130>)
 800352e:	4293      	cmp	r3, r2
 8003530:	d906      	bls.n	8003540 <USB_SetTurnaroundTime+0x98>
 8003532:	68bb      	ldr	r3, [r7, #8]
 8003534:	4a29      	ldr	r2, [pc, #164]	; (80035dc <USB_SetTurnaroundTime+0x134>)
 8003536:	4293      	cmp	r3, r2
 8003538:	d802      	bhi.n	8003540 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800353a:	230a      	movs	r3, #10
 800353c:	617b      	str	r3, [r7, #20]
 800353e:	e02b      	b.n	8003598 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8003540:	68bb      	ldr	r3, [r7, #8]
 8003542:	4a26      	ldr	r2, [pc, #152]	; (80035dc <USB_SetTurnaroundTime+0x134>)
 8003544:	4293      	cmp	r3, r2
 8003546:	d906      	bls.n	8003556 <USB_SetTurnaroundTime+0xae>
 8003548:	68bb      	ldr	r3, [r7, #8]
 800354a:	4a25      	ldr	r2, [pc, #148]	; (80035e0 <USB_SetTurnaroundTime+0x138>)
 800354c:	4293      	cmp	r3, r2
 800354e:	d202      	bcs.n	8003556 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8003550:	2309      	movs	r3, #9
 8003552:	617b      	str	r3, [r7, #20]
 8003554:	e020      	b.n	8003598 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8003556:	68bb      	ldr	r3, [r7, #8]
 8003558:	4a21      	ldr	r2, [pc, #132]	; (80035e0 <USB_SetTurnaroundTime+0x138>)
 800355a:	4293      	cmp	r3, r2
 800355c:	d306      	bcc.n	800356c <USB_SetTurnaroundTime+0xc4>
 800355e:	68bb      	ldr	r3, [r7, #8]
 8003560:	4a20      	ldr	r2, [pc, #128]	; (80035e4 <USB_SetTurnaroundTime+0x13c>)
 8003562:	4293      	cmp	r3, r2
 8003564:	d802      	bhi.n	800356c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8003566:	2308      	movs	r3, #8
 8003568:	617b      	str	r3, [r7, #20]
 800356a:	e015      	b.n	8003598 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800356c:	68bb      	ldr	r3, [r7, #8]
 800356e:	4a1d      	ldr	r2, [pc, #116]	; (80035e4 <USB_SetTurnaroundTime+0x13c>)
 8003570:	4293      	cmp	r3, r2
 8003572:	d906      	bls.n	8003582 <USB_SetTurnaroundTime+0xda>
 8003574:	68bb      	ldr	r3, [r7, #8]
 8003576:	4a1c      	ldr	r2, [pc, #112]	; (80035e8 <USB_SetTurnaroundTime+0x140>)
 8003578:	4293      	cmp	r3, r2
 800357a:	d202      	bcs.n	8003582 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800357c:	2307      	movs	r3, #7
 800357e:	617b      	str	r3, [r7, #20]
 8003580:	e00a      	b.n	8003598 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8003582:	2306      	movs	r3, #6
 8003584:	617b      	str	r3, [r7, #20]
 8003586:	e007      	b.n	8003598 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8003588:	79fb      	ldrb	r3, [r7, #7]
 800358a:	2b00      	cmp	r3, #0
 800358c:	d102      	bne.n	8003594 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800358e:	2309      	movs	r3, #9
 8003590:	617b      	str	r3, [r7, #20]
 8003592:	e001      	b.n	8003598 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8003594:	2309      	movs	r3, #9
 8003596:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	68db      	ldr	r3, [r3, #12]
 800359c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	68da      	ldr	r2, [r3, #12]
 80035a8:	697b      	ldr	r3, [r7, #20]
 80035aa:	029b      	lsls	r3, r3, #10
 80035ac:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80035b0:	431a      	orrs	r2, r3
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80035b6:	2300      	movs	r3, #0
}
 80035b8:	4618      	mov	r0, r3
 80035ba:	371c      	adds	r7, #28
 80035bc:	46bd      	mov	sp, r7
 80035be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c2:	4770      	bx	lr
 80035c4:	00d8acbf 	.word	0x00d8acbf
 80035c8:	00e4e1c0 	.word	0x00e4e1c0
 80035cc:	00f42400 	.word	0x00f42400
 80035d0:	01067380 	.word	0x01067380
 80035d4:	011a499f 	.word	0x011a499f
 80035d8:	01312cff 	.word	0x01312cff
 80035dc:	014ca43f 	.word	0x014ca43f
 80035e0:	016e3600 	.word	0x016e3600
 80035e4:	01a6ab1f 	.word	0x01a6ab1f
 80035e8:	01e84800 	.word	0x01e84800

080035ec <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80035ec:	b480      	push	{r7}
 80035ee:	b083      	sub	sp, #12
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	689b      	ldr	r3, [r3, #8]
 80035f8:	f043 0201 	orr.w	r2, r3, #1
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003600:	2300      	movs	r3, #0
}
 8003602:	4618      	mov	r0, r3
 8003604:	370c      	adds	r7, #12
 8003606:	46bd      	mov	sp, r7
 8003608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360c:	4770      	bx	lr

0800360e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800360e:	b480      	push	{r7}
 8003610:	b083      	sub	sp, #12
 8003612:	af00      	add	r7, sp, #0
 8003614:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	689b      	ldr	r3, [r3, #8]
 800361a:	f023 0201 	bic.w	r2, r3, #1
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003622:	2300      	movs	r3, #0
}
 8003624:	4618      	mov	r0, r3
 8003626:	370c      	adds	r7, #12
 8003628:	46bd      	mov	sp, r7
 800362a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362e:	4770      	bx	lr

08003630 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	b084      	sub	sp, #16
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
 8003638:	460b      	mov	r3, r1
 800363a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800363c:	2300      	movs	r3, #0
 800363e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	68db      	ldr	r3, [r3, #12]
 8003644:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800364c:	78fb      	ldrb	r3, [r7, #3]
 800364e:	2b01      	cmp	r3, #1
 8003650:	d115      	bne.n	800367e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	68db      	ldr	r3, [r3, #12]
 8003656:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800365e:	2001      	movs	r0, #1
 8003660:	f7fd fc1a 	bl	8000e98 <HAL_Delay>
      ms++;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	3301      	adds	r3, #1
 8003668:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800366a:	6878      	ldr	r0, [r7, #4]
 800366c:	f001 f972 	bl	8004954 <USB_GetMode>
 8003670:	4603      	mov	r3, r0
 8003672:	2b01      	cmp	r3, #1
 8003674:	d01e      	beq.n	80036b4 <USB_SetCurrentMode+0x84>
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	2b31      	cmp	r3, #49	; 0x31
 800367a:	d9f0      	bls.n	800365e <USB_SetCurrentMode+0x2e>
 800367c:	e01a      	b.n	80036b4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800367e:	78fb      	ldrb	r3, [r7, #3]
 8003680:	2b00      	cmp	r3, #0
 8003682:	d115      	bne.n	80036b0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	68db      	ldr	r3, [r3, #12]
 8003688:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003690:	2001      	movs	r0, #1
 8003692:	f7fd fc01 	bl	8000e98 <HAL_Delay>
      ms++;
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	3301      	adds	r3, #1
 800369a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800369c:	6878      	ldr	r0, [r7, #4]
 800369e:	f001 f959 	bl	8004954 <USB_GetMode>
 80036a2:	4603      	mov	r3, r0
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d005      	beq.n	80036b4 <USB_SetCurrentMode+0x84>
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	2b31      	cmp	r3, #49	; 0x31
 80036ac:	d9f0      	bls.n	8003690 <USB_SetCurrentMode+0x60>
 80036ae:	e001      	b.n	80036b4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80036b0:	2301      	movs	r3, #1
 80036b2:	e005      	b.n	80036c0 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	2b32      	cmp	r3, #50	; 0x32
 80036b8:	d101      	bne.n	80036be <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80036ba:	2301      	movs	r3, #1
 80036bc:	e000      	b.n	80036c0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80036be:	2300      	movs	r3, #0
}
 80036c0:	4618      	mov	r0, r3
 80036c2:	3710      	adds	r7, #16
 80036c4:	46bd      	mov	sp, r7
 80036c6:	bd80      	pop	{r7, pc}

080036c8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80036c8:	b084      	sub	sp, #16
 80036ca:	b580      	push	{r7, lr}
 80036cc:	b086      	sub	sp, #24
 80036ce:	af00      	add	r7, sp, #0
 80036d0:	6078      	str	r0, [r7, #4]
 80036d2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80036d6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80036da:	2300      	movs	r3, #0
 80036dc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80036e2:	2300      	movs	r3, #0
 80036e4:	613b      	str	r3, [r7, #16]
 80036e6:	e009      	b.n	80036fc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80036e8:	687a      	ldr	r2, [r7, #4]
 80036ea:	693b      	ldr	r3, [r7, #16]
 80036ec:	3340      	adds	r3, #64	; 0x40
 80036ee:	009b      	lsls	r3, r3, #2
 80036f0:	4413      	add	r3, r2
 80036f2:	2200      	movs	r2, #0
 80036f4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80036f6:	693b      	ldr	r3, [r7, #16]
 80036f8:	3301      	adds	r3, #1
 80036fa:	613b      	str	r3, [r7, #16]
 80036fc:	693b      	ldr	r3, [r7, #16]
 80036fe:	2b0e      	cmp	r3, #14
 8003700:	d9f2      	bls.n	80036e8 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003702:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003704:	2b00      	cmp	r3, #0
 8003706:	d11c      	bne.n	8003742 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800370e:	685b      	ldr	r3, [r3, #4]
 8003710:	68fa      	ldr	r2, [r7, #12]
 8003712:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003716:	f043 0302 	orr.w	r3, r3, #2
 800371a:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003720:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800372c:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003738:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	639a      	str	r2, [r3, #56]	; 0x38
 8003740:	e00b      	b.n	800375a <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003746:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003752:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003760:	461a      	mov	r2, r3
 8003762:	2300      	movs	r3, #0
 8003764:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800376c:	4619      	mov	r1, r3
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003774:	461a      	mov	r2, r3
 8003776:	680b      	ldr	r3, [r1, #0]
 8003778:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800377a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800377c:	2b01      	cmp	r3, #1
 800377e:	d10c      	bne.n	800379a <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003780:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003782:	2b00      	cmp	r3, #0
 8003784:	d104      	bne.n	8003790 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003786:	2100      	movs	r1, #0
 8003788:	6878      	ldr	r0, [r7, #4]
 800378a:	f000 f945 	bl	8003a18 <USB_SetDevSpeed>
 800378e:	e008      	b.n	80037a2 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003790:	2101      	movs	r1, #1
 8003792:	6878      	ldr	r0, [r7, #4]
 8003794:	f000 f940 	bl	8003a18 <USB_SetDevSpeed>
 8003798:	e003      	b.n	80037a2 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800379a:	2103      	movs	r1, #3
 800379c:	6878      	ldr	r0, [r7, #4]
 800379e:	f000 f93b 	bl	8003a18 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80037a2:	2110      	movs	r1, #16
 80037a4:	6878      	ldr	r0, [r7, #4]
 80037a6:	f000 f8f3 	bl	8003990 <USB_FlushTxFifo>
 80037aa:	4603      	mov	r3, r0
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d001      	beq.n	80037b4 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80037b0:	2301      	movs	r3, #1
 80037b2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80037b4:	6878      	ldr	r0, [r7, #4]
 80037b6:	f000 f90f 	bl	80039d8 <USB_FlushRxFifo>
 80037ba:	4603      	mov	r3, r0
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d001      	beq.n	80037c4 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80037c0:	2301      	movs	r3, #1
 80037c2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80037ca:	461a      	mov	r2, r3
 80037cc:	2300      	movs	r3, #0
 80037ce:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80037d6:	461a      	mov	r2, r3
 80037d8:	2300      	movs	r3, #0
 80037da:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80037e2:	461a      	mov	r2, r3
 80037e4:	2300      	movs	r3, #0
 80037e6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80037e8:	2300      	movs	r3, #0
 80037ea:	613b      	str	r3, [r7, #16]
 80037ec:	e043      	b.n	8003876 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80037ee:	693b      	ldr	r3, [r7, #16]
 80037f0:	015a      	lsls	r2, r3, #5
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	4413      	add	r3, r2
 80037f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003800:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003804:	d118      	bne.n	8003838 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8003806:	693b      	ldr	r3, [r7, #16]
 8003808:	2b00      	cmp	r3, #0
 800380a:	d10a      	bne.n	8003822 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800380c:	693b      	ldr	r3, [r7, #16]
 800380e:	015a      	lsls	r2, r3, #5
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	4413      	add	r3, r2
 8003814:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003818:	461a      	mov	r2, r3
 800381a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800381e:	6013      	str	r3, [r2, #0]
 8003820:	e013      	b.n	800384a <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003822:	693b      	ldr	r3, [r7, #16]
 8003824:	015a      	lsls	r2, r3, #5
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	4413      	add	r3, r2
 800382a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800382e:	461a      	mov	r2, r3
 8003830:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003834:	6013      	str	r3, [r2, #0]
 8003836:	e008      	b.n	800384a <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003838:	693b      	ldr	r3, [r7, #16]
 800383a:	015a      	lsls	r2, r3, #5
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	4413      	add	r3, r2
 8003840:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003844:	461a      	mov	r2, r3
 8003846:	2300      	movs	r3, #0
 8003848:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800384a:	693b      	ldr	r3, [r7, #16]
 800384c:	015a      	lsls	r2, r3, #5
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	4413      	add	r3, r2
 8003852:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003856:	461a      	mov	r2, r3
 8003858:	2300      	movs	r3, #0
 800385a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800385c:	693b      	ldr	r3, [r7, #16]
 800385e:	015a      	lsls	r2, r3, #5
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	4413      	add	r3, r2
 8003864:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003868:	461a      	mov	r2, r3
 800386a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800386e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003870:	693b      	ldr	r3, [r7, #16]
 8003872:	3301      	adds	r3, #1
 8003874:	613b      	str	r3, [r7, #16]
 8003876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003878:	693a      	ldr	r2, [r7, #16]
 800387a:	429a      	cmp	r2, r3
 800387c:	d3b7      	bcc.n	80037ee <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800387e:	2300      	movs	r3, #0
 8003880:	613b      	str	r3, [r7, #16]
 8003882:	e043      	b.n	800390c <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003884:	693b      	ldr	r3, [r7, #16]
 8003886:	015a      	lsls	r2, r3, #5
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	4413      	add	r3, r2
 800388c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003896:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800389a:	d118      	bne.n	80038ce <USB_DevInit+0x206>
    {
      if (i == 0U)
 800389c:	693b      	ldr	r3, [r7, #16]
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d10a      	bne.n	80038b8 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80038a2:	693b      	ldr	r3, [r7, #16]
 80038a4:	015a      	lsls	r2, r3, #5
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	4413      	add	r3, r2
 80038aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038ae:	461a      	mov	r2, r3
 80038b0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80038b4:	6013      	str	r3, [r2, #0]
 80038b6:	e013      	b.n	80038e0 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80038b8:	693b      	ldr	r3, [r7, #16]
 80038ba:	015a      	lsls	r2, r3, #5
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	4413      	add	r3, r2
 80038c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038c4:	461a      	mov	r2, r3
 80038c6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80038ca:	6013      	str	r3, [r2, #0]
 80038cc:	e008      	b.n	80038e0 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80038ce:	693b      	ldr	r3, [r7, #16]
 80038d0:	015a      	lsls	r2, r3, #5
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	4413      	add	r3, r2
 80038d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038da:	461a      	mov	r2, r3
 80038dc:	2300      	movs	r3, #0
 80038de:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80038e0:	693b      	ldr	r3, [r7, #16]
 80038e2:	015a      	lsls	r2, r3, #5
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	4413      	add	r3, r2
 80038e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038ec:	461a      	mov	r2, r3
 80038ee:	2300      	movs	r3, #0
 80038f0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80038f2:	693b      	ldr	r3, [r7, #16]
 80038f4:	015a      	lsls	r2, r3, #5
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	4413      	add	r3, r2
 80038fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038fe:	461a      	mov	r2, r3
 8003900:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003904:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003906:	693b      	ldr	r3, [r7, #16]
 8003908:	3301      	adds	r3, #1
 800390a:	613b      	str	r3, [r7, #16]
 800390c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800390e:	693a      	ldr	r2, [r7, #16]
 8003910:	429a      	cmp	r2, r3
 8003912:	d3b7      	bcc.n	8003884 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800391a:	691b      	ldr	r3, [r3, #16]
 800391c:	68fa      	ldr	r2, [r7, #12]
 800391e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003922:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003926:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2200      	movs	r2, #0
 800392c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8003934:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003936:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003938:	2b00      	cmp	r3, #0
 800393a:	d105      	bne.n	8003948 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	699b      	ldr	r3, [r3, #24]
 8003940:	f043 0210 	orr.w	r2, r3, #16
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	699a      	ldr	r2, [r3, #24]
 800394c:	4b0f      	ldr	r3, [pc, #60]	; (800398c <USB_DevInit+0x2c4>)
 800394e:	4313      	orrs	r3, r2
 8003950:	687a      	ldr	r2, [r7, #4]
 8003952:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003954:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003956:	2b00      	cmp	r3, #0
 8003958:	d005      	beq.n	8003966 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	699b      	ldr	r3, [r3, #24]
 800395e:	f043 0208 	orr.w	r2, r3, #8
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003966:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003968:	2b01      	cmp	r3, #1
 800396a:	d107      	bne.n	800397c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	699b      	ldr	r3, [r3, #24]
 8003970:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003974:	f043 0304 	orr.w	r3, r3, #4
 8003978:	687a      	ldr	r2, [r7, #4]
 800397a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800397c:	7dfb      	ldrb	r3, [r7, #23]
}
 800397e:	4618      	mov	r0, r3
 8003980:	3718      	adds	r7, #24
 8003982:	46bd      	mov	sp, r7
 8003984:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003988:	b004      	add	sp, #16
 800398a:	4770      	bx	lr
 800398c:	803c3800 	.word	0x803c3800

08003990 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003990:	b480      	push	{r7}
 8003992:	b085      	sub	sp, #20
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
 8003998:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800399a:	2300      	movs	r3, #0
 800399c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800399e:	683b      	ldr	r3, [r7, #0]
 80039a0:	019b      	lsls	r3, r3, #6
 80039a2:	f043 0220 	orr.w	r2, r3, #32
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	3301      	adds	r3, #1
 80039ae:	60fb      	str	r3, [r7, #12]
 80039b0:	4a08      	ldr	r2, [pc, #32]	; (80039d4 <USB_FlushTxFifo+0x44>)
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d901      	bls.n	80039ba <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 80039b6:	2303      	movs	r3, #3
 80039b8:	e006      	b.n	80039c8 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	691b      	ldr	r3, [r3, #16]
 80039be:	f003 0320 	and.w	r3, r3, #32
 80039c2:	2b20      	cmp	r3, #32
 80039c4:	d0f1      	beq.n	80039aa <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80039c6:	2300      	movs	r3, #0
}
 80039c8:	4618      	mov	r0, r3
 80039ca:	3714      	adds	r7, #20
 80039cc:	46bd      	mov	sp, r7
 80039ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d2:	4770      	bx	lr
 80039d4:	00030d40 	.word	0x00030d40

080039d8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80039d8:	b480      	push	{r7}
 80039da:	b085      	sub	sp, #20
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80039e0:	2300      	movs	r3, #0
 80039e2:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2210      	movs	r2, #16
 80039e8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	3301      	adds	r3, #1
 80039ee:	60fb      	str	r3, [r7, #12]
 80039f0:	4a08      	ldr	r2, [pc, #32]	; (8003a14 <USB_FlushRxFifo+0x3c>)
 80039f2:	4293      	cmp	r3, r2
 80039f4:	d901      	bls.n	80039fa <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 80039f6:	2303      	movs	r3, #3
 80039f8:	e006      	b.n	8003a08 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	691b      	ldr	r3, [r3, #16]
 80039fe:	f003 0310 	and.w	r3, r3, #16
 8003a02:	2b10      	cmp	r3, #16
 8003a04:	d0f1      	beq.n	80039ea <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8003a06:	2300      	movs	r3, #0
}
 8003a08:	4618      	mov	r0, r3
 8003a0a:	3714      	adds	r7, #20
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a12:	4770      	bx	lr
 8003a14:	00030d40 	.word	0x00030d40

08003a18 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003a18:	b480      	push	{r7}
 8003a1a:	b085      	sub	sp, #20
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
 8003a20:	460b      	mov	r3, r1
 8003a22:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a2e:	681a      	ldr	r2, [r3, #0]
 8003a30:	78fb      	ldrb	r3, [r7, #3]
 8003a32:	68f9      	ldr	r1, [r7, #12]
 8003a34:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003a38:	4313      	orrs	r3, r2
 8003a3a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003a3c:	2300      	movs	r3, #0
}
 8003a3e:	4618      	mov	r0, r3
 8003a40:	3714      	adds	r7, #20
 8003a42:	46bd      	mov	sp, r7
 8003a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a48:	4770      	bx	lr

08003a4a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8003a4a:	b480      	push	{r7}
 8003a4c:	b087      	sub	sp, #28
 8003a4e:	af00      	add	r7, sp, #0
 8003a50:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8003a56:	693b      	ldr	r3, [r7, #16]
 8003a58:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a5c:	689b      	ldr	r3, [r3, #8]
 8003a5e:	f003 0306 	and.w	r3, r3, #6
 8003a62:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d102      	bne.n	8003a70 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	75fb      	strb	r3, [r7, #23]
 8003a6e:	e00a      	b.n	8003a86 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	2b02      	cmp	r3, #2
 8003a74:	d002      	beq.n	8003a7c <USB_GetDevSpeed+0x32>
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	2b06      	cmp	r3, #6
 8003a7a:	d102      	bne.n	8003a82 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8003a7c:	2302      	movs	r3, #2
 8003a7e:	75fb      	strb	r3, [r7, #23]
 8003a80:	e001      	b.n	8003a86 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8003a82:	230f      	movs	r3, #15
 8003a84:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8003a86:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a88:	4618      	mov	r0, r3
 8003a8a:	371c      	adds	r7, #28
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a92:	4770      	bx	lr

08003a94 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003a94:	b480      	push	{r7}
 8003a96:	b085      	sub	sp, #20
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
 8003a9c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003aa2:	683b      	ldr	r3, [r7, #0]
 8003aa4:	781b      	ldrb	r3, [r3, #0]
 8003aa6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	785b      	ldrb	r3, [r3, #1]
 8003aac:	2b01      	cmp	r3, #1
 8003aae:	d13a      	bne.n	8003b26 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ab6:	69da      	ldr	r2, [r3, #28]
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	781b      	ldrb	r3, [r3, #0]
 8003abc:	f003 030f 	and.w	r3, r3, #15
 8003ac0:	2101      	movs	r1, #1
 8003ac2:	fa01 f303 	lsl.w	r3, r1, r3
 8003ac6:	b29b      	uxth	r3, r3
 8003ac8:	68f9      	ldr	r1, [r7, #12]
 8003aca:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003ace:	4313      	orrs	r3, r2
 8003ad0:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8003ad2:	68bb      	ldr	r3, [r7, #8]
 8003ad4:	015a      	lsls	r2, r3, #5
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	4413      	add	r3, r2
 8003ada:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d155      	bne.n	8003b94 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003ae8:	68bb      	ldr	r3, [r7, #8]
 8003aea:	015a      	lsls	r2, r3, #5
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	4413      	add	r3, r2
 8003af0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003af4:	681a      	ldr	r2, [r3, #0]
 8003af6:	683b      	ldr	r3, [r7, #0]
 8003af8:	689b      	ldr	r3, [r3, #8]
 8003afa:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003afe:	683b      	ldr	r3, [r7, #0]
 8003b00:	78db      	ldrb	r3, [r3, #3]
 8003b02:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003b04:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003b06:	68bb      	ldr	r3, [r7, #8]
 8003b08:	059b      	lsls	r3, r3, #22
 8003b0a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003b0c:	4313      	orrs	r3, r2
 8003b0e:	68ba      	ldr	r2, [r7, #8]
 8003b10:	0151      	lsls	r1, r2, #5
 8003b12:	68fa      	ldr	r2, [r7, #12]
 8003b14:	440a      	add	r2, r1
 8003b16:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003b1a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b1e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003b22:	6013      	str	r3, [r2, #0]
 8003b24:	e036      	b.n	8003b94 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b2c:	69da      	ldr	r2, [r3, #28]
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	781b      	ldrb	r3, [r3, #0]
 8003b32:	f003 030f 	and.w	r3, r3, #15
 8003b36:	2101      	movs	r1, #1
 8003b38:	fa01 f303 	lsl.w	r3, r1, r3
 8003b3c:	041b      	lsls	r3, r3, #16
 8003b3e:	68f9      	ldr	r1, [r7, #12]
 8003b40:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003b44:	4313      	orrs	r3, r2
 8003b46:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8003b48:	68bb      	ldr	r3, [r7, #8]
 8003b4a:	015a      	lsls	r2, r3, #5
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	4413      	add	r3, r2
 8003b50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d11a      	bne.n	8003b94 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003b5e:	68bb      	ldr	r3, [r7, #8]
 8003b60:	015a      	lsls	r2, r3, #5
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	4413      	add	r3, r2
 8003b66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b6a:	681a      	ldr	r2, [r3, #0]
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	689b      	ldr	r3, [r3, #8]
 8003b70:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	78db      	ldrb	r3, [r3, #3]
 8003b78:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003b7a:	430b      	orrs	r3, r1
 8003b7c:	4313      	orrs	r3, r2
 8003b7e:	68ba      	ldr	r2, [r7, #8]
 8003b80:	0151      	lsls	r1, r2, #5
 8003b82:	68fa      	ldr	r2, [r7, #12]
 8003b84:	440a      	add	r2, r1
 8003b86:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003b8a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b8e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003b92:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8003b94:	2300      	movs	r3, #0
}
 8003b96:	4618      	mov	r0, r3
 8003b98:	3714      	adds	r7, #20
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba0:	4770      	bx	lr
	...

08003ba4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003ba4:	b480      	push	{r7}
 8003ba6:	b085      	sub	sp, #20
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
 8003bac:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003bb2:	683b      	ldr	r3, [r7, #0]
 8003bb4:	781b      	ldrb	r3, [r3, #0]
 8003bb6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	785b      	ldrb	r3, [r3, #1]
 8003bbc:	2b01      	cmp	r3, #1
 8003bbe:	d161      	bne.n	8003c84 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003bc0:	68bb      	ldr	r3, [r7, #8]
 8003bc2:	015a      	lsls	r2, r3, #5
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	4413      	add	r3, r2
 8003bc8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003bd2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003bd6:	d11f      	bne.n	8003c18 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003bd8:	68bb      	ldr	r3, [r7, #8]
 8003bda:	015a      	lsls	r2, r3, #5
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	4413      	add	r3, r2
 8003be0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	68ba      	ldr	r2, [r7, #8]
 8003be8:	0151      	lsls	r1, r2, #5
 8003bea:	68fa      	ldr	r2, [r7, #12]
 8003bec:	440a      	add	r2, r1
 8003bee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003bf2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003bf6:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8003bf8:	68bb      	ldr	r3, [r7, #8]
 8003bfa:	015a      	lsls	r2, r3, #5
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	4413      	add	r3, r2
 8003c00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	68ba      	ldr	r2, [r7, #8]
 8003c08:	0151      	lsls	r1, r2, #5
 8003c0a:	68fa      	ldr	r2, [r7, #12]
 8003c0c:	440a      	add	r2, r1
 8003c0e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003c12:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003c16:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c1e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	781b      	ldrb	r3, [r3, #0]
 8003c24:	f003 030f 	and.w	r3, r3, #15
 8003c28:	2101      	movs	r1, #1
 8003c2a:	fa01 f303 	lsl.w	r3, r1, r3
 8003c2e:	b29b      	uxth	r3, r3
 8003c30:	43db      	mvns	r3, r3
 8003c32:	68f9      	ldr	r1, [r7, #12]
 8003c34:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003c38:	4013      	ands	r3, r2
 8003c3a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c42:	69da      	ldr	r2, [r3, #28]
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	781b      	ldrb	r3, [r3, #0]
 8003c48:	f003 030f 	and.w	r3, r3, #15
 8003c4c:	2101      	movs	r1, #1
 8003c4e:	fa01 f303 	lsl.w	r3, r1, r3
 8003c52:	b29b      	uxth	r3, r3
 8003c54:	43db      	mvns	r3, r3
 8003c56:	68f9      	ldr	r1, [r7, #12]
 8003c58:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003c5c:	4013      	ands	r3, r2
 8003c5e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8003c60:	68bb      	ldr	r3, [r7, #8]
 8003c62:	015a      	lsls	r2, r3, #5
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	4413      	add	r3, r2
 8003c68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c6c:	681a      	ldr	r2, [r3, #0]
 8003c6e:	68bb      	ldr	r3, [r7, #8]
 8003c70:	0159      	lsls	r1, r3, #5
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	440b      	add	r3, r1
 8003c76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c7a:	4619      	mov	r1, r3
 8003c7c:	4b35      	ldr	r3, [pc, #212]	; (8003d54 <USB_DeactivateEndpoint+0x1b0>)
 8003c7e:	4013      	ands	r3, r2
 8003c80:	600b      	str	r3, [r1, #0]
 8003c82:	e060      	b.n	8003d46 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003c84:	68bb      	ldr	r3, [r7, #8]
 8003c86:	015a      	lsls	r2, r3, #5
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	4413      	add	r3, r2
 8003c8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003c96:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003c9a:	d11f      	bne.n	8003cdc <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003c9c:	68bb      	ldr	r3, [r7, #8]
 8003c9e:	015a      	lsls	r2, r3, #5
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	4413      	add	r3, r2
 8003ca4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	68ba      	ldr	r2, [r7, #8]
 8003cac:	0151      	lsls	r1, r2, #5
 8003cae:	68fa      	ldr	r2, [r7, #12]
 8003cb0:	440a      	add	r2, r1
 8003cb2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003cb6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003cba:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8003cbc:	68bb      	ldr	r3, [r7, #8]
 8003cbe:	015a      	lsls	r2, r3, #5
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	4413      	add	r3, r2
 8003cc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	68ba      	ldr	r2, [r7, #8]
 8003ccc:	0151      	lsls	r1, r2, #5
 8003cce:	68fa      	ldr	r2, [r7, #12]
 8003cd0:	440a      	add	r2, r1
 8003cd2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003cd6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003cda:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ce2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003ce4:	683b      	ldr	r3, [r7, #0]
 8003ce6:	781b      	ldrb	r3, [r3, #0]
 8003ce8:	f003 030f 	and.w	r3, r3, #15
 8003cec:	2101      	movs	r1, #1
 8003cee:	fa01 f303 	lsl.w	r3, r1, r3
 8003cf2:	041b      	lsls	r3, r3, #16
 8003cf4:	43db      	mvns	r3, r3
 8003cf6:	68f9      	ldr	r1, [r7, #12]
 8003cf8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003cfc:	4013      	ands	r3, r2
 8003cfe:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d06:	69da      	ldr	r2, [r3, #28]
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	781b      	ldrb	r3, [r3, #0]
 8003d0c:	f003 030f 	and.w	r3, r3, #15
 8003d10:	2101      	movs	r1, #1
 8003d12:	fa01 f303 	lsl.w	r3, r1, r3
 8003d16:	041b      	lsls	r3, r3, #16
 8003d18:	43db      	mvns	r3, r3
 8003d1a:	68f9      	ldr	r1, [r7, #12]
 8003d1c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003d20:	4013      	ands	r3, r2
 8003d22:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8003d24:	68bb      	ldr	r3, [r7, #8]
 8003d26:	015a      	lsls	r2, r3, #5
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	4413      	add	r3, r2
 8003d2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d30:	681a      	ldr	r2, [r3, #0]
 8003d32:	68bb      	ldr	r3, [r7, #8]
 8003d34:	0159      	lsls	r1, r3, #5
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	440b      	add	r3, r1
 8003d3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d3e:	4619      	mov	r1, r3
 8003d40:	4b05      	ldr	r3, [pc, #20]	; (8003d58 <USB_DeactivateEndpoint+0x1b4>)
 8003d42:	4013      	ands	r3, r2
 8003d44:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8003d46:	2300      	movs	r3, #0
}
 8003d48:	4618      	mov	r0, r3
 8003d4a:	3714      	adds	r7, #20
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d52:	4770      	bx	lr
 8003d54:	ec337800 	.word	0xec337800
 8003d58:	eff37800 	.word	0xeff37800

08003d5c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	b08a      	sub	sp, #40	; 0x28
 8003d60:	af02      	add	r7, sp, #8
 8003d62:	60f8      	str	r0, [r7, #12]
 8003d64:	60b9      	str	r1, [r7, #8]
 8003d66:	4613      	mov	r3, r2
 8003d68:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8003d6e:	68bb      	ldr	r3, [r7, #8]
 8003d70:	781b      	ldrb	r3, [r3, #0]
 8003d72:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003d74:	68bb      	ldr	r3, [r7, #8]
 8003d76:	785b      	ldrb	r3, [r3, #1]
 8003d78:	2b01      	cmp	r3, #1
 8003d7a:	f040 815c 	bne.w	8004036 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8003d7e:	68bb      	ldr	r3, [r7, #8]
 8003d80:	695b      	ldr	r3, [r3, #20]
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d132      	bne.n	8003dec <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003d86:	69bb      	ldr	r3, [r7, #24]
 8003d88:	015a      	lsls	r2, r3, #5
 8003d8a:	69fb      	ldr	r3, [r7, #28]
 8003d8c:	4413      	add	r3, r2
 8003d8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d92:	691b      	ldr	r3, [r3, #16]
 8003d94:	69ba      	ldr	r2, [r7, #24]
 8003d96:	0151      	lsls	r1, r2, #5
 8003d98:	69fa      	ldr	r2, [r7, #28]
 8003d9a:	440a      	add	r2, r1
 8003d9c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003da0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003da4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003da8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003daa:	69bb      	ldr	r3, [r7, #24]
 8003dac:	015a      	lsls	r2, r3, #5
 8003dae:	69fb      	ldr	r3, [r7, #28]
 8003db0:	4413      	add	r3, r2
 8003db2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003db6:	691b      	ldr	r3, [r3, #16]
 8003db8:	69ba      	ldr	r2, [r7, #24]
 8003dba:	0151      	lsls	r1, r2, #5
 8003dbc:	69fa      	ldr	r2, [r7, #28]
 8003dbe:	440a      	add	r2, r1
 8003dc0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003dc4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003dc8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003dca:	69bb      	ldr	r3, [r7, #24]
 8003dcc:	015a      	lsls	r2, r3, #5
 8003dce:	69fb      	ldr	r3, [r7, #28]
 8003dd0:	4413      	add	r3, r2
 8003dd2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003dd6:	691b      	ldr	r3, [r3, #16]
 8003dd8:	69ba      	ldr	r2, [r7, #24]
 8003dda:	0151      	lsls	r1, r2, #5
 8003ddc:	69fa      	ldr	r2, [r7, #28]
 8003dde:	440a      	add	r2, r1
 8003de0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003de4:	0cdb      	lsrs	r3, r3, #19
 8003de6:	04db      	lsls	r3, r3, #19
 8003de8:	6113      	str	r3, [r2, #16]
 8003dea:	e074      	b.n	8003ed6 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003dec:	69bb      	ldr	r3, [r7, #24]
 8003dee:	015a      	lsls	r2, r3, #5
 8003df0:	69fb      	ldr	r3, [r7, #28]
 8003df2:	4413      	add	r3, r2
 8003df4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003df8:	691b      	ldr	r3, [r3, #16]
 8003dfa:	69ba      	ldr	r2, [r7, #24]
 8003dfc:	0151      	lsls	r1, r2, #5
 8003dfe:	69fa      	ldr	r2, [r7, #28]
 8003e00:	440a      	add	r2, r1
 8003e02:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003e06:	0cdb      	lsrs	r3, r3, #19
 8003e08:	04db      	lsls	r3, r3, #19
 8003e0a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003e0c:	69bb      	ldr	r3, [r7, #24]
 8003e0e:	015a      	lsls	r2, r3, #5
 8003e10:	69fb      	ldr	r3, [r7, #28]
 8003e12:	4413      	add	r3, r2
 8003e14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e18:	691b      	ldr	r3, [r3, #16]
 8003e1a:	69ba      	ldr	r2, [r7, #24]
 8003e1c:	0151      	lsls	r1, r2, #5
 8003e1e:	69fa      	ldr	r2, [r7, #28]
 8003e20:	440a      	add	r2, r1
 8003e22:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003e26:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003e2a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003e2e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8003e30:	69bb      	ldr	r3, [r7, #24]
 8003e32:	015a      	lsls	r2, r3, #5
 8003e34:	69fb      	ldr	r3, [r7, #28]
 8003e36:	4413      	add	r3, r2
 8003e38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e3c:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8003e3e:	68bb      	ldr	r3, [r7, #8]
 8003e40:	6959      	ldr	r1, [r3, #20]
 8003e42:	68bb      	ldr	r3, [r7, #8]
 8003e44:	689b      	ldr	r3, [r3, #8]
 8003e46:	440b      	add	r3, r1
 8003e48:	1e59      	subs	r1, r3, #1
 8003e4a:	68bb      	ldr	r3, [r7, #8]
 8003e4c:	689b      	ldr	r3, [r3, #8]
 8003e4e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003e52:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8003e54:	4b9d      	ldr	r3, [pc, #628]	; (80040cc <USB_EPStartXfer+0x370>)
 8003e56:	400b      	ands	r3, r1
 8003e58:	69b9      	ldr	r1, [r7, #24]
 8003e5a:	0148      	lsls	r0, r1, #5
 8003e5c:	69f9      	ldr	r1, [r7, #28]
 8003e5e:	4401      	add	r1, r0
 8003e60:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003e64:	4313      	orrs	r3, r2
 8003e66:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8003e68:	69bb      	ldr	r3, [r7, #24]
 8003e6a:	015a      	lsls	r2, r3, #5
 8003e6c:	69fb      	ldr	r3, [r7, #28]
 8003e6e:	4413      	add	r3, r2
 8003e70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e74:	691a      	ldr	r2, [r3, #16]
 8003e76:	68bb      	ldr	r3, [r7, #8]
 8003e78:	695b      	ldr	r3, [r3, #20]
 8003e7a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e7e:	69b9      	ldr	r1, [r7, #24]
 8003e80:	0148      	lsls	r0, r1, #5
 8003e82:	69f9      	ldr	r1, [r7, #28]
 8003e84:	4401      	add	r1, r0
 8003e86:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003e8a:	4313      	orrs	r3, r2
 8003e8c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8003e8e:	68bb      	ldr	r3, [r7, #8]
 8003e90:	78db      	ldrb	r3, [r3, #3]
 8003e92:	2b01      	cmp	r3, #1
 8003e94:	d11f      	bne.n	8003ed6 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8003e96:	69bb      	ldr	r3, [r7, #24]
 8003e98:	015a      	lsls	r2, r3, #5
 8003e9a:	69fb      	ldr	r3, [r7, #28]
 8003e9c:	4413      	add	r3, r2
 8003e9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ea2:	691b      	ldr	r3, [r3, #16]
 8003ea4:	69ba      	ldr	r2, [r7, #24]
 8003ea6:	0151      	lsls	r1, r2, #5
 8003ea8:	69fa      	ldr	r2, [r7, #28]
 8003eaa:	440a      	add	r2, r1
 8003eac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003eb0:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8003eb4:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8003eb6:	69bb      	ldr	r3, [r7, #24]
 8003eb8:	015a      	lsls	r2, r3, #5
 8003eba:	69fb      	ldr	r3, [r7, #28]
 8003ebc:	4413      	add	r3, r2
 8003ebe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ec2:	691b      	ldr	r3, [r3, #16]
 8003ec4:	69ba      	ldr	r2, [r7, #24]
 8003ec6:	0151      	lsls	r1, r2, #5
 8003ec8:	69fa      	ldr	r2, [r7, #28]
 8003eca:	440a      	add	r2, r1
 8003ecc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003ed0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003ed4:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8003ed6:	79fb      	ldrb	r3, [r7, #7]
 8003ed8:	2b01      	cmp	r3, #1
 8003eda:	d14b      	bne.n	8003f74 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8003edc:	68bb      	ldr	r3, [r7, #8]
 8003ede:	691b      	ldr	r3, [r3, #16]
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d009      	beq.n	8003ef8 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8003ee4:	69bb      	ldr	r3, [r7, #24]
 8003ee6:	015a      	lsls	r2, r3, #5
 8003ee8:	69fb      	ldr	r3, [r7, #28]
 8003eea:	4413      	add	r3, r2
 8003eec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ef0:	461a      	mov	r2, r3
 8003ef2:	68bb      	ldr	r3, [r7, #8]
 8003ef4:	691b      	ldr	r3, [r3, #16]
 8003ef6:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8003ef8:	68bb      	ldr	r3, [r7, #8]
 8003efa:	78db      	ldrb	r3, [r3, #3]
 8003efc:	2b01      	cmp	r3, #1
 8003efe:	d128      	bne.n	8003f52 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003f00:	69fb      	ldr	r3, [r7, #28]
 8003f02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f06:	689b      	ldr	r3, [r3, #8]
 8003f08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d110      	bne.n	8003f32 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8003f10:	69bb      	ldr	r3, [r7, #24]
 8003f12:	015a      	lsls	r2, r3, #5
 8003f14:	69fb      	ldr	r3, [r7, #28]
 8003f16:	4413      	add	r3, r2
 8003f18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	69ba      	ldr	r2, [r7, #24]
 8003f20:	0151      	lsls	r1, r2, #5
 8003f22:	69fa      	ldr	r2, [r7, #28]
 8003f24:	440a      	add	r2, r1
 8003f26:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003f2a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003f2e:	6013      	str	r3, [r2, #0]
 8003f30:	e00f      	b.n	8003f52 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8003f32:	69bb      	ldr	r3, [r7, #24]
 8003f34:	015a      	lsls	r2, r3, #5
 8003f36:	69fb      	ldr	r3, [r7, #28]
 8003f38:	4413      	add	r3, r2
 8003f3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	69ba      	ldr	r2, [r7, #24]
 8003f42:	0151      	lsls	r1, r2, #5
 8003f44:	69fa      	ldr	r2, [r7, #28]
 8003f46:	440a      	add	r2, r1
 8003f48:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003f4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f50:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003f52:	69bb      	ldr	r3, [r7, #24]
 8003f54:	015a      	lsls	r2, r3, #5
 8003f56:	69fb      	ldr	r3, [r7, #28]
 8003f58:	4413      	add	r3, r2
 8003f5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	69ba      	ldr	r2, [r7, #24]
 8003f62:	0151      	lsls	r1, r2, #5
 8003f64:	69fa      	ldr	r2, [r7, #28]
 8003f66:	440a      	add	r2, r1
 8003f68:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003f6c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003f70:	6013      	str	r3, [r2, #0]
 8003f72:	e12f      	b.n	80041d4 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003f74:	69bb      	ldr	r3, [r7, #24]
 8003f76:	015a      	lsls	r2, r3, #5
 8003f78:	69fb      	ldr	r3, [r7, #28]
 8003f7a:	4413      	add	r3, r2
 8003f7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	69ba      	ldr	r2, [r7, #24]
 8003f84:	0151      	lsls	r1, r2, #5
 8003f86:	69fa      	ldr	r2, [r7, #28]
 8003f88:	440a      	add	r2, r1
 8003f8a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003f8e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003f92:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003f94:	68bb      	ldr	r3, [r7, #8]
 8003f96:	78db      	ldrb	r3, [r3, #3]
 8003f98:	2b01      	cmp	r3, #1
 8003f9a:	d015      	beq.n	8003fc8 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8003f9c:	68bb      	ldr	r3, [r7, #8]
 8003f9e:	695b      	ldr	r3, [r3, #20]
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	f000 8117 	beq.w	80041d4 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8003fa6:	69fb      	ldr	r3, [r7, #28]
 8003fa8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003fac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003fae:	68bb      	ldr	r3, [r7, #8]
 8003fb0:	781b      	ldrb	r3, [r3, #0]
 8003fb2:	f003 030f 	and.w	r3, r3, #15
 8003fb6:	2101      	movs	r1, #1
 8003fb8:	fa01 f303 	lsl.w	r3, r1, r3
 8003fbc:	69f9      	ldr	r1, [r7, #28]
 8003fbe:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003fc2:	4313      	orrs	r3, r2
 8003fc4:	634b      	str	r3, [r1, #52]	; 0x34
 8003fc6:	e105      	b.n	80041d4 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003fc8:	69fb      	ldr	r3, [r7, #28]
 8003fca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003fce:	689b      	ldr	r3, [r3, #8]
 8003fd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d110      	bne.n	8003ffa <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8003fd8:	69bb      	ldr	r3, [r7, #24]
 8003fda:	015a      	lsls	r2, r3, #5
 8003fdc:	69fb      	ldr	r3, [r7, #28]
 8003fde:	4413      	add	r3, r2
 8003fe0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	69ba      	ldr	r2, [r7, #24]
 8003fe8:	0151      	lsls	r1, r2, #5
 8003fea:	69fa      	ldr	r2, [r7, #28]
 8003fec:	440a      	add	r2, r1
 8003fee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003ff2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003ff6:	6013      	str	r3, [r2, #0]
 8003ff8:	e00f      	b.n	800401a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8003ffa:	69bb      	ldr	r3, [r7, #24]
 8003ffc:	015a      	lsls	r2, r3, #5
 8003ffe:	69fb      	ldr	r3, [r7, #28]
 8004000:	4413      	add	r3, r2
 8004002:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	69ba      	ldr	r2, [r7, #24]
 800400a:	0151      	lsls	r1, r2, #5
 800400c:	69fa      	ldr	r2, [r7, #28]
 800400e:	440a      	add	r2, r1
 8004010:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004014:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004018:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800401a:	68bb      	ldr	r3, [r7, #8]
 800401c:	68d9      	ldr	r1, [r3, #12]
 800401e:	68bb      	ldr	r3, [r7, #8]
 8004020:	781a      	ldrb	r2, [r3, #0]
 8004022:	68bb      	ldr	r3, [r7, #8]
 8004024:	695b      	ldr	r3, [r3, #20]
 8004026:	b298      	uxth	r0, r3
 8004028:	79fb      	ldrb	r3, [r7, #7]
 800402a:	9300      	str	r3, [sp, #0]
 800402c:	4603      	mov	r3, r0
 800402e:	68f8      	ldr	r0, [r7, #12]
 8004030:	f000 fa2b 	bl	800448a <USB_WritePacket>
 8004034:	e0ce      	b.n	80041d4 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004036:	69bb      	ldr	r3, [r7, #24]
 8004038:	015a      	lsls	r2, r3, #5
 800403a:	69fb      	ldr	r3, [r7, #28]
 800403c:	4413      	add	r3, r2
 800403e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004042:	691b      	ldr	r3, [r3, #16]
 8004044:	69ba      	ldr	r2, [r7, #24]
 8004046:	0151      	lsls	r1, r2, #5
 8004048:	69fa      	ldr	r2, [r7, #28]
 800404a:	440a      	add	r2, r1
 800404c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004050:	0cdb      	lsrs	r3, r3, #19
 8004052:	04db      	lsls	r3, r3, #19
 8004054:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004056:	69bb      	ldr	r3, [r7, #24]
 8004058:	015a      	lsls	r2, r3, #5
 800405a:	69fb      	ldr	r3, [r7, #28]
 800405c:	4413      	add	r3, r2
 800405e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004062:	691b      	ldr	r3, [r3, #16]
 8004064:	69ba      	ldr	r2, [r7, #24]
 8004066:	0151      	lsls	r1, r2, #5
 8004068:	69fa      	ldr	r2, [r7, #28]
 800406a:	440a      	add	r2, r1
 800406c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004070:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004074:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004078:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800407a:	68bb      	ldr	r3, [r7, #8]
 800407c:	695b      	ldr	r3, [r3, #20]
 800407e:	2b00      	cmp	r3, #0
 8004080:	d126      	bne.n	80040d0 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8004082:	69bb      	ldr	r3, [r7, #24]
 8004084:	015a      	lsls	r2, r3, #5
 8004086:	69fb      	ldr	r3, [r7, #28]
 8004088:	4413      	add	r3, r2
 800408a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800408e:	691a      	ldr	r2, [r3, #16]
 8004090:	68bb      	ldr	r3, [r7, #8]
 8004092:	689b      	ldr	r3, [r3, #8]
 8004094:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004098:	69b9      	ldr	r1, [r7, #24]
 800409a:	0148      	lsls	r0, r1, #5
 800409c:	69f9      	ldr	r1, [r7, #28]
 800409e:	4401      	add	r1, r0
 80040a0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80040a4:	4313      	orrs	r3, r2
 80040a6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80040a8:	69bb      	ldr	r3, [r7, #24]
 80040aa:	015a      	lsls	r2, r3, #5
 80040ac:	69fb      	ldr	r3, [r7, #28]
 80040ae:	4413      	add	r3, r2
 80040b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040b4:	691b      	ldr	r3, [r3, #16]
 80040b6:	69ba      	ldr	r2, [r7, #24]
 80040b8:	0151      	lsls	r1, r2, #5
 80040ba:	69fa      	ldr	r2, [r7, #28]
 80040bc:	440a      	add	r2, r1
 80040be:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80040c2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80040c6:	6113      	str	r3, [r2, #16]
 80040c8:	e036      	b.n	8004138 <USB_EPStartXfer+0x3dc>
 80040ca:	bf00      	nop
 80040cc:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80040d0:	68bb      	ldr	r3, [r7, #8]
 80040d2:	695a      	ldr	r2, [r3, #20]
 80040d4:	68bb      	ldr	r3, [r7, #8]
 80040d6:	689b      	ldr	r3, [r3, #8]
 80040d8:	4413      	add	r3, r2
 80040da:	1e5a      	subs	r2, r3, #1
 80040dc:	68bb      	ldr	r3, [r7, #8]
 80040de:	689b      	ldr	r3, [r3, #8]
 80040e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80040e4:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80040e6:	69bb      	ldr	r3, [r7, #24]
 80040e8:	015a      	lsls	r2, r3, #5
 80040ea:	69fb      	ldr	r3, [r7, #28]
 80040ec:	4413      	add	r3, r2
 80040ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040f2:	691a      	ldr	r2, [r3, #16]
 80040f4:	8afb      	ldrh	r3, [r7, #22]
 80040f6:	04d9      	lsls	r1, r3, #19
 80040f8:	4b39      	ldr	r3, [pc, #228]	; (80041e0 <USB_EPStartXfer+0x484>)
 80040fa:	400b      	ands	r3, r1
 80040fc:	69b9      	ldr	r1, [r7, #24]
 80040fe:	0148      	lsls	r0, r1, #5
 8004100:	69f9      	ldr	r1, [r7, #28]
 8004102:	4401      	add	r1, r0
 8004104:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004108:	4313      	orrs	r3, r2
 800410a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800410c:	69bb      	ldr	r3, [r7, #24]
 800410e:	015a      	lsls	r2, r3, #5
 8004110:	69fb      	ldr	r3, [r7, #28]
 8004112:	4413      	add	r3, r2
 8004114:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004118:	691a      	ldr	r2, [r3, #16]
 800411a:	68bb      	ldr	r3, [r7, #8]
 800411c:	689b      	ldr	r3, [r3, #8]
 800411e:	8af9      	ldrh	r1, [r7, #22]
 8004120:	fb01 f303 	mul.w	r3, r1, r3
 8004124:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004128:	69b9      	ldr	r1, [r7, #24]
 800412a:	0148      	lsls	r0, r1, #5
 800412c:	69f9      	ldr	r1, [r7, #28]
 800412e:	4401      	add	r1, r0
 8004130:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004134:	4313      	orrs	r3, r2
 8004136:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004138:	79fb      	ldrb	r3, [r7, #7]
 800413a:	2b01      	cmp	r3, #1
 800413c:	d10d      	bne.n	800415a <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800413e:	68bb      	ldr	r3, [r7, #8]
 8004140:	68db      	ldr	r3, [r3, #12]
 8004142:	2b00      	cmp	r3, #0
 8004144:	d009      	beq.n	800415a <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004146:	68bb      	ldr	r3, [r7, #8]
 8004148:	68d9      	ldr	r1, [r3, #12]
 800414a:	69bb      	ldr	r3, [r7, #24]
 800414c:	015a      	lsls	r2, r3, #5
 800414e:	69fb      	ldr	r3, [r7, #28]
 8004150:	4413      	add	r3, r2
 8004152:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004156:	460a      	mov	r2, r1
 8004158:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800415a:	68bb      	ldr	r3, [r7, #8]
 800415c:	78db      	ldrb	r3, [r3, #3]
 800415e:	2b01      	cmp	r3, #1
 8004160:	d128      	bne.n	80041b4 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004162:	69fb      	ldr	r3, [r7, #28]
 8004164:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004168:	689b      	ldr	r3, [r3, #8]
 800416a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800416e:	2b00      	cmp	r3, #0
 8004170:	d110      	bne.n	8004194 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8004172:	69bb      	ldr	r3, [r7, #24]
 8004174:	015a      	lsls	r2, r3, #5
 8004176:	69fb      	ldr	r3, [r7, #28]
 8004178:	4413      	add	r3, r2
 800417a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	69ba      	ldr	r2, [r7, #24]
 8004182:	0151      	lsls	r1, r2, #5
 8004184:	69fa      	ldr	r2, [r7, #28]
 8004186:	440a      	add	r2, r1
 8004188:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800418c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004190:	6013      	str	r3, [r2, #0]
 8004192:	e00f      	b.n	80041b4 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8004194:	69bb      	ldr	r3, [r7, #24]
 8004196:	015a      	lsls	r2, r3, #5
 8004198:	69fb      	ldr	r3, [r7, #28]
 800419a:	4413      	add	r3, r2
 800419c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	69ba      	ldr	r2, [r7, #24]
 80041a4:	0151      	lsls	r1, r2, #5
 80041a6:	69fa      	ldr	r2, [r7, #28]
 80041a8:	440a      	add	r2, r1
 80041aa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80041ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041b2:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80041b4:	69bb      	ldr	r3, [r7, #24]
 80041b6:	015a      	lsls	r2, r3, #5
 80041b8:	69fb      	ldr	r3, [r7, #28]
 80041ba:	4413      	add	r3, r2
 80041bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	69ba      	ldr	r2, [r7, #24]
 80041c4:	0151      	lsls	r1, r2, #5
 80041c6:	69fa      	ldr	r2, [r7, #28]
 80041c8:	440a      	add	r2, r1
 80041ca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80041ce:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80041d2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80041d4:	2300      	movs	r3, #0
}
 80041d6:	4618      	mov	r0, r3
 80041d8:	3720      	adds	r7, #32
 80041da:	46bd      	mov	sp, r7
 80041dc:	bd80      	pop	{r7, pc}
 80041de:	bf00      	nop
 80041e0:	1ff80000 	.word	0x1ff80000

080041e4 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80041e4:	b480      	push	{r7}
 80041e6:	b087      	sub	sp, #28
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	60f8      	str	r0, [r7, #12]
 80041ec:	60b9      	str	r1, [r7, #8]
 80041ee:	4613      	mov	r3, r2
 80041f0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80041f6:	68bb      	ldr	r3, [r7, #8]
 80041f8:	781b      	ldrb	r3, [r3, #0]
 80041fa:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80041fc:	68bb      	ldr	r3, [r7, #8]
 80041fe:	785b      	ldrb	r3, [r3, #1]
 8004200:	2b01      	cmp	r3, #1
 8004202:	f040 80cd 	bne.w	80043a0 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004206:	68bb      	ldr	r3, [r7, #8]
 8004208:	695b      	ldr	r3, [r3, #20]
 800420a:	2b00      	cmp	r3, #0
 800420c:	d132      	bne.n	8004274 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800420e:	693b      	ldr	r3, [r7, #16]
 8004210:	015a      	lsls	r2, r3, #5
 8004212:	697b      	ldr	r3, [r7, #20]
 8004214:	4413      	add	r3, r2
 8004216:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800421a:	691b      	ldr	r3, [r3, #16]
 800421c:	693a      	ldr	r2, [r7, #16]
 800421e:	0151      	lsls	r1, r2, #5
 8004220:	697a      	ldr	r2, [r7, #20]
 8004222:	440a      	add	r2, r1
 8004224:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004228:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800422c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004230:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004232:	693b      	ldr	r3, [r7, #16]
 8004234:	015a      	lsls	r2, r3, #5
 8004236:	697b      	ldr	r3, [r7, #20]
 8004238:	4413      	add	r3, r2
 800423a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800423e:	691b      	ldr	r3, [r3, #16]
 8004240:	693a      	ldr	r2, [r7, #16]
 8004242:	0151      	lsls	r1, r2, #5
 8004244:	697a      	ldr	r2, [r7, #20]
 8004246:	440a      	add	r2, r1
 8004248:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800424c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004250:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004252:	693b      	ldr	r3, [r7, #16]
 8004254:	015a      	lsls	r2, r3, #5
 8004256:	697b      	ldr	r3, [r7, #20]
 8004258:	4413      	add	r3, r2
 800425a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800425e:	691b      	ldr	r3, [r3, #16]
 8004260:	693a      	ldr	r2, [r7, #16]
 8004262:	0151      	lsls	r1, r2, #5
 8004264:	697a      	ldr	r2, [r7, #20]
 8004266:	440a      	add	r2, r1
 8004268:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800426c:	0cdb      	lsrs	r3, r3, #19
 800426e:	04db      	lsls	r3, r3, #19
 8004270:	6113      	str	r3, [r2, #16]
 8004272:	e04e      	b.n	8004312 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004274:	693b      	ldr	r3, [r7, #16]
 8004276:	015a      	lsls	r2, r3, #5
 8004278:	697b      	ldr	r3, [r7, #20]
 800427a:	4413      	add	r3, r2
 800427c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004280:	691b      	ldr	r3, [r3, #16]
 8004282:	693a      	ldr	r2, [r7, #16]
 8004284:	0151      	lsls	r1, r2, #5
 8004286:	697a      	ldr	r2, [r7, #20]
 8004288:	440a      	add	r2, r1
 800428a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800428e:	0cdb      	lsrs	r3, r3, #19
 8004290:	04db      	lsls	r3, r3, #19
 8004292:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004294:	693b      	ldr	r3, [r7, #16]
 8004296:	015a      	lsls	r2, r3, #5
 8004298:	697b      	ldr	r3, [r7, #20]
 800429a:	4413      	add	r3, r2
 800429c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042a0:	691b      	ldr	r3, [r3, #16]
 80042a2:	693a      	ldr	r2, [r7, #16]
 80042a4:	0151      	lsls	r1, r2, #5
 80042a6:	697a      	ldr	r2, [r7, #20]
 80042a8:	440a      	add	r2, r1
 80042aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80042ae:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80042b2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80042b6:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80042b8:	68bb      	ldr	r3, [r7, #8]
 80042ba:	695a      	ldr	r2, [r3, #20]
 80042bc:	68bb      	ldr	r3, [r7, #8]
 80042be:	689b      	ldr	r3, [r3, #8]
 80042c0:	429a      	cmp	r2, r3
 80042c2:	d903      	bls.n	80042cc <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80042c4:	68bb      	ldr	r3, [r7, #8]
 80042c6:	689a      	ldr	r2, [r3, #8]
 80042c8:	68bb      	ldr	r3, [r7, #8]
 80042ca:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80042cc:	693b      	ldr	r3, [r7, #16]
 80042ce:	015a      	lsls	r2, r3, #5
 80042d0:	697b      	ldr	r3, [r7, #20]
 80042d2:	4413      	add	r3, r2
 80042d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042d8:	691b      	ldr	r3, [r3, #16]
 80042da:	693a      	ldr	r2, [r7, #16]
 80042dc:	0151      	lsls	r1, r2, #5
 80042de:	697a      	ldr	r2, [r7, #20]
 80042e0:	440a      	add	r2, r1
 80042e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80042e6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80042ea:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80042ec:	693b      	ldr	r3, [r7, #16]
 80042ee:	015a      	lsls	r2, r3, #5
 80042f0:	697b      	ldr	r3, [r7, #20]
 80042f2:	4413      	add	r3, r2
 80042f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042f8:	691a      	ldr	r2, [r3, #16]
 80042fa:	68bb      	ldr	r3, [r7, #8]
 80042fc:	695b      	ldr	r3, [r3, #20]
 80042fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004302:	6939      	ldr	r1, [r7, #16]
 8004304:	0148      	lsls	r0, r1, #5
 8004306:	6979      	ldr	r1, [r7, #20]
 8004308:	4401      	add	r1, r0
 800430a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800430e:	4313      	orrs	r3, r2
 8004310:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004312:	79fb      	ldrb	r3, [r7, #7]
 8004314:	2b01      	cmp	r3, #1
 8004316:	d11e      	bne.n	8004356 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004318:	68bb      	ldr	r3, [r7, #8]
 800431a:	691b      	ldr	r3, [r3, #16]
 800431c:	2b00      	cmp	r3, #0
 800431e:	d009      	beq.n	8004334 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004320:	693b      	ldr	r3, [r7, #16]
 8004322:	015a      	lsls	r2, r3, #5
 8004324:	697b      	ldr	r3, [r7, #20]
 8004326:	4413      	add	r3, r2
 8004328:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800432c:	461a      	mov	r2, r3
 800432e:	68bb      	ldr	r3, [r7, #8]
 8004330:	691b      	ldr	r3, [r3, #16]
 8004332:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004334:	693b      	ldr	r3, [r7, #16]
 8004336:	015a      	lsls	r2, r3, #5
 8004338:	697b      	ldr	r3, [r7, #20]
 800433a:	4413      	add	r3, r2
 800433c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	693a      	ldr	r2, [r7, #16]
 8004344:	0151      	lsls	r1, r2, #5
 8004346:	697a      	ldr	r2, [r7, #20]
 8004348:	440a      	add	r2, r1
 800434a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800434e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004352:	6013      	str	r3, [r2, #0]
 8004354:	e092      	b.n	800447c <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004356:	693b      	ldr	r3, [r7, #16]
 8004358:	015a      	lsls	r2, r3, #5
 800435a:	697b      	ldr	r3, [r7, #20]
 800435c:	4413      	add	r3, r2
 800435e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	693a      	ldr	r2, [r7, #16]
 8004366:	0151      	lsls	r1, r2, #5
 8004368:	697a      	ldr	r2, [r7, #20]
 800436a:	440a      	add	r2, r1
 800436c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004370:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004374:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8004376:	68bb      	ldr	r3, [r7, #8]
 8004378:	695b      	ldr	r3, [r3, #20]
 800437a:	2b00      	cmp	r3, #0
 800437c:	d07e      	beq.n	800447c <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800437e:	697b      	ldr	r3, [r7, #20]
 8004380:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004384:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004386:	68bb      	ldr	r3, [r7, #8]
 8004388:	781b      	ldrb	r3, [r3, #0]
 800438a:	f003 030f 	and.w	r3, r3, #15
 800438e:	2101      	movs	r1, #1
 8004390:	fa01 f303 	lsl.w	r3, r1, r3
 8004394:	6979      	ldr	r1, [r7, #20]
 8004396:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800439a:	4313      	orrs	r3, r2
 800439c:	634b      	str	r3, [r1, #52]	; 0x34
 800439e:	e06d      	b.n	800447c <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80043a0:	693b      	ldr	r3, [r7, #16]
 80043a2:	015a      	lsls	r2, r3, #5
 80043a4:	697b      	ldr	r3, [r7, #20]
 80043a6:	4413      	add	r3, r2
 80043a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043ac:	691b      	ldr	r3, [r3, #16]
 80043ae:	693a      	ldr	r2, [r7, #16]
 80043b0:	0151      	lsls	r1, r2, #5
 80043b2:	697a      	ldr	r2, [r7, #20]
 80043b4:	440a      	add	r2, r1
 80043b6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80043ba:	0cdb      	lsrs	r3, r3, #19
 80043bc:	04db      	lsls	r3, r3, #19
 80043be:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80043c0:	693b      	ldr	r3, [r7, #16]
 80043c2:	015a      	lsls	r2, r3, #5
 80043c4:	697b      	ldr	r3, [r7, #20]
 80043c6:	4413      	add	r3, r2
 80043c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043cc:	691b      	ldr	r3, [r3, #16]
 80043ce:	693a      	ldr	r2, [r7, #16]
 80043d0:	0151      	lsls	r1, r2, #5
 80043d2:	697a      	ldr	r2, [r7, #20]
 80043d4:	440a      	add	r2, r1
 80043d6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80043da:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80043de:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80043e2:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80043e4:	68bb      	ldr	r3, [r7, #8]
 80043e6:	695b      	ldr	r3, [r3, #20]
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d003      	beq.n	80043f4 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 80043ec:	68bb      	ldr	r3, [r7, #8]
 80043ee:	689a      	ldr	r2, [r3, #8]
 80043f0:	68bb      	ldr	r3, [r7, #8]
 80043f2:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80043f4:	693b      	ldr	r3, [r7, #16]
 80043f6:	015a      	lsls	r2, r3, #5
 80043f8:	697b      	ldr	r3, [r7, #20]
 80043fa:	4413      	add	r3, r2
 80043fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004400:	691b      	ldr	r3, [r3, #16]
 8004402:	693a      	ldr	r2, [r7, #16]
 8004404:	0151      	lsls	r1, r2, #5
 8004406:	697a      	ldr	r2, [r7, #20]
 8004408:	440a      	add	r2, r1
 800440a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800440e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004412:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8004414:	693b      	ldr	r3, [r7, #16]
 8004416:	015a      	lsls	r2, r3, #5
 8004418:	697b      	ldr	r3, [r7, #20]
 800441a:	4413      	add	r3, r2
 800441c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004420:	691a      	ldr	r2, [r3, #16]
 8004422:	68bb      	ldr	r3, [r7, #8]
 8004424:	689b      	ldr	r3, [r3, #8]
 8004426:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800442a:	6939      	ldr	r1, [r7, #16]
 800442c:	0148      	lsls	r0, r1, #5
 800442e:	6979      	ldr	r1, [r7, #20]
 8004430:	4401      	add	r1, r0
 8004432:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004436:	4313      	orrs	r3, r2
 8004438:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800443a:	79fb      	ldrb	r3, [r7, #7]
 800443c:	2b01      	cmp	r3, #1
 800443e:	d10d      	bne.n	800445c <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004440:	68bb      	ldr	r3, [r7, #8]
 8004442:	68db      	ldr	r3, [r3, #12]
 8004444:	2b00      	cmp	r3, #0
 8004446:	d009      	beq.n	800445c <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004448:	68bb      	ldr	r3, [r7, #8]
 800444a:	68d9      	ldr	r1, [r3, #12]
 800444c:	693b      	ldr	r3, [r7, #16]
 800444e:	015a      	lsls	r2, r3, #5
 8004450:	697b      	ldr	r3, [r7, #20]
 8004452:	4413      	add	r3, r2
 8004454:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004458:	460a      	mov	r2, r1
 800445a:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800445c:	693b      	ldr	r3, [r7, #16]
 800445e:	015a      	lsls	r2, r3, #5
 8004460:	697b      	ldr	r3, [r7, #20]
 8004462:	4413      	add	r3, r2
 8004464:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	693a      	ldr	r2, [r7, #16]
 800446c:	0151      	lsls	r1, r2, #5
 800446e:	697a      	ldr	r2, [r7, #20]
 8004470:	440a      	add	r2, r1
 8004472:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004476:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800447a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800447c:	2300      	movs	r3, #0
}
 800447e:	4618      	mov	r0, r3
 8004480:	371c      	adds	r7, #28
 8004482:	46bd      	mov	sp, r7
 8004484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004488:	4770      	bx	lr

0800448a <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800448a:	b480      	push	{r7}
 800448c:	b089      	sub	sp, #36	; 0x24
 800448e:	af00      	add	r7, sp, #0
 8004490:	60f8      	str	r0, [r7, #12]
 8004492:	60b9      	str	r1, [r7, #8]
 8004494:	4611      	mov	r1, r2
 8004496:	461a      	mov	r2, r3
 8004498:	460b      	mov	r3, r1
 800449a:	71fb      	strb	r3, [r7, #7]
 800449c:	4613      	mov	r3, r2
 800449e:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80044a4:	68bb      	ldr	r3, [r7, #8]
 80044a6:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80044a8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d123      	bne.n	80044f8 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80044b0:	88bb      	ldrh	r3, [r7, #4]
 80044b2:	3303      	adds	r3, #3
 80044b4:	089b      	lsrs	r3, r3, #2
 80044b6:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80044b8:	2300      	movs	r3, #0
 80044ba:	61bb      	str	r3, [r7, #24]
 80044bc:	e018      	b.n	80044f0 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80044be:	79fb      	ldrb	r3, [r7, #7]
 80044c0:	031a      	lsls	r2, r3, #12
 80044c2:	697b      	ldr	r3, [r7, #20]
 80044c4:	4413      	add	r3, r2
 80044c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80044ca:	461a      	mov	r2, r3
 80044cc:	69fb      	ldr	r3, [r7, #28]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	6013      	str	r3, [r2, #0]
      pSrc++;
 80044d2:	69fb      	ldr	r3, [r7, #28]
 80044d4:	3301      	adds	r3, #1
 80044d6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80044d8:	69fb      	ldr	r3, [r7, #28]
 80044da:	3301      	adds	r3, #1
 80044dc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80044de:	69fb      	ldr	r3, [r7, #28]
 80044e0:	3301      	adds	r3, #1
 80044e2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80044e4:	69fb      	ldr	r3, [r7, #28]
 80044e6:	3301      	adds	r3, #1
 80044e8:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80044ea:	69bb      	ldr	r3, [r7, #24]
 80044ec:	3301      	adds	r3, #1
 80044ee:	61bb      	str	r3, [r7, #24]
 80044f0:	69ba      	ldr	r2, [r7, #24]
 80044f2:	693b      	ldr	r3, [r7, #16]
 80044f4:	429a      	cmp	r2, r3
 80044f6:	d3e2      	bcc.n	80044be <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80044f8:	2300      	movs	r3, #0
}
 80044fa:	4618      	mov	r0, r3
 80044fc:	3724      	adds	r7, #36	; 0x24
 80044fe:	46bd      	mov	sp, r7
 8004500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004504:	4770      	bx	lr

08004506 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004506:	b480      	push	{r7}
 8004508:	b08b      	sub	sp, #44	; 0x2c
 800450a:	af00      	add	r7, sp, #0
 800450c:	60f8      	str	r0, [r7, #12]
 800450e:	60b9      	str	r1, [r7, #8]
 8004510:	4613      	mov	r3, r2
 8004512:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8004518:	68bb      	ldr	r3, [r7, #8]
 800451a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800451c:	88fb      	ldrh	r3, [r7, #6]
 800451e:	089b      	lsrs	r3, r3, #2
 8004520:	b29b      	uxth	r3, r3
 8004522:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8004524:	88fb      	ldrh	r3, [r7, #6]
 8004526:	f003 0303 	and.w	r3, r3, #3
 800452a:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800452c:	2300      	movs	r3, #0
 800452e:	623b      	str	r3, [r7, #32]
 8004530:	e014      	b.n	800455c <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004532:	69bb      	ldr	r3, [r7, #24]
 8004534:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004538:	681a      	ldr	r2, [r3, #0]
 800453a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800453c:	601a      	str	r2, [r3, #0]
    pDest++;
 800453e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004540:	3301      	adds	r3, #1
 8004542:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004546:	3301      	adds	r3, #1
 8004548:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800454a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800454c:	3301      	adds	r3, #1
 800454e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004552:	3301      	adds	r3, #1
 8004554:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8004556:	6a3b      	ldr	r3, [r7, #32]
 8004558:	3301      	adds	r3, #1
 800455a:	623b      	str	r3, [r7, #32]
 800455c:	6a3a      	ldr	r2, [r7, #32]
 800455e:	697b      	ldr	r3, [r7, #20]
 8004560:	429a      	cmp	r2, r3
 8004562:	d3e6      	bcc.n	8004532 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8004564:	8bfb      	ldrh	r3, [r7, #30]
 8004566:	2b00      	cmp	r3, #0
 8004568:	d01e      	beq.n	80045a8 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800456a:	2300      	movs	r3, #0
 800456c:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800456e:	69bb      	ldr	r3, [r7, #24]
 8004570:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004574:	461a      	mov	r2, r3
 8004576:	f107 0310 	add.w	r3, r7, #16
 800457a:	6812      	ldr	r2, [r2, #0]
 800457c:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800457e:	693a      	ldr	r2, [r7, #16]
 8004580:	6a3b      	ldr	r3, [r7, #32]
 8004582:	b2db      	uxtb	r3, r3
 8004584:	00db      	lsls	r3, r3, #3
 8004586:	fa22 f303 	lsr.w	r3, r2, r3
 800458a:	b2da      	uxtb	r2, r3
 800458c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800458e:	701a      	strb	r2, [r3, #0]
      i++;
 8004590:	6a3b      	ldr	r3, [r7, #32]
 8004592:	3301      	adds	r3, #1
 8004594:	623b      	str	r3, [r7, #32]
      pDest++;
 8004596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004598:	3301      	adds	r3, #1
 800459a:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800459c:	8bfb      	ldrh	r3, [r7, #30]
 800459e:	3b01      	subs	r3, #1
 80045a0:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80045a2:	8bfb      	ldrh	r3, [r7, #30]
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d1ea      	bne.n	800457e <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80045a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80045aa:	4618      	mov	r0, r3
 80045ac:	372c      	adds	r7, #44	; 0x2c
 80045ae:	46bd      	mov	sp, r7
 80045b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b4:	4770      	bx	lr

080045b6 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80045b6:	b480      	push	{r7}
 80045b8:	b085      	sub	sp, #20
 80045ba:	af00      	add	r7, sp, #0
 80045bc:	6078      	str	r0, [r7, #4]
 80045be:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	781b      	ldrb	r3, [r3, #0]
 80045c8:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80045ca:	683b      	ldr	r3, [r7, #0]
 80045cc:	785b      	ldrb	r3, [r3, #1]
 80045ce:	2b01      	cmp	r3, #1
 80045d0:	d12c      	bne.n	800462c <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80045d2:	68bb      	ldr	r3, [r7, #8]
 80045d4:	015a      	lsls	r2, r3, #5
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	4413      	add	r3, r2
 80045da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	db12      	blt.n	800460a <USB_EPSetStall+0x54>
 80045e4:	68bb      	ldr	r3, [r7, #8]
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d00f      	beq.n	800460a <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80045ea:	68bb      	ldr	r3, [r7, #8]
 80045ec:	015a      	lsls	r2, r3, #5
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	4413      	add	r3, r2
 80045f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	68ba      	ldr	r2, [r7, #8]
 80045fa:	0151      	lsls	r1, r2, #5
 80045fc:	68fa      	ldr	r2, [r7, #12]
 80045fe:	440a      	add	r2, r1
 8004600:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004604:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004608:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800460a:	68bb      	ldr	r3, [r7, #8]
 800460c:	015a      	lsls	r2, r3, #5
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	4413      	add	r3, r2
 8004612:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	68ba      	ldr	r2, [r7, #8]
 800461a:	0151      	lsls	r1, r2, #5
 800461c:	68fa      	ldr	r2, [r7, #12]
 800461e:	440a      	add	r2, r1
 8004620:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004624:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004628:	6013      	str	r3, [r2, #0]
 800462a:	e02b      	b.n	8004684 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800462c:	68bb      	ldr	r3, [r7, #8]
 800462e:	015a      	lsls	r2, r3, #5
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	4413      	add	r3, r2
 8004634:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	2b00      	cmp	r3, #0
 800463c:	db12      	blt.n	8004664 <USB_EPSetStall+0xae>
 800463e:	68bb      	ldr	r3, [r7, #8]
 8004640:	2b00      	cmp	r3, #0
 8004642:	d00f      	beq.n	8004664 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8004644:	68bb      	ldr	r3, [r7, #8]
 8004646:	015a      	lsls	r2, r3, #5
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	4413      	add	r3, r2
 800464c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	68ba      	ldr	r2, [r7, #8]
 8004654:	0151      	lsls	r1, r2, #5
 8004656:	68fa      	ldr	r2, [r7, #12]
 8004658:	440a      	add	r2, r1
 800465a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800465e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004662:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8004664:	68bb      	ldr	r3, [r7, #8]
 8004666:	015a      	lsls	r2, r3, #5
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	4413      	add	r3, r2
 800466c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	68ba      	ldr	r2, [r7, #8]
 8004674:	0151      	lsls	r1, r2, #5
 8004676:	68fa      	ldr	r2, [r7, #12]
 8004678:	440a      	add	r2, r1
 800467a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800467e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004682:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004684:	2300      	movs	r3, #0
}
 8004686:	4618      	mov	r0, r3
 8004688:	3714      	adds	r7, #20
 800468a:	46bd      	mov	sp, r7
 800468c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004690:	4770      	bx	lr

08004692 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004692:	b480      	push	{r7}
 8004694:	b085      	sub	sp, #20
 8004696:	af00      	add	r7, sp, #0
 8004698:	6078      	str	r0, [r7, #4]
 800469a:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80046a0:	683b      	ldr	r3, [r7, #0]
 80046a2:	781b      	ldrb	r3, [r3, #0]
 80046a4:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80046a6:	683b      	ldr	r3, [r7, #0]
 80046a8:	785b      	ldrb	r3, [r3, #1]
 80046aa:	2b01      	cmp	r3, #1
 80046ac:	d128      	bne.n	8004700 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80046ae:	68bb      	ldr	r3, [r7, #8]
 80046b0:	015a      	lsls	r2, r3, #5
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	4413      	add	r3, r2
 80046b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	68ba      	ldr	r2, [r7, #8]
 80046be:	0151      	lsls	r1, r2, #5
 80046c0:	68fa      	ldr	r2, [r7, #12]
 80046c2:	440a      	add	r2, r1
 80046c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80046c8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80046cc:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80046ce:	683b      	ldr	r3, [r7, #0]
 80046d0:	78db      	ldrb	r3, [r3, #3]
 80046d2:	2b03      	cmp	r3, #3
 80046d4:	d003      	beq.n	80046de <USB_EPClearStall+0x4c>
 80046d6:	683b      	ldr	r3, [r7, #0]
 80046d8:	78db      	ldrb	r3, [r3, #3]
 80046da:	2b02      	cmp	r3, #2
 80046dc:	d138      	bne.n	8004750 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80046de:	68bb      	ldr	r3, [r7, #8]
 80046e0:	015a      	lsls	r2, r3, #5
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	4413      	add	r3, r2
 80046e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	68ba      	ldr	r2, [r7, #8]
 80046ee:	0151      	lsls	r1, r2, #5
 80046f0:	68fa      	ldr	r2, [r7, #12]
 80046f2:	440a      	add	r2, r1
 80046f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80046f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046fc:	6013      	str	r3, [r2, #0]
 80046fe:	e027      	b.n	8004750 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004700:	68bb      	ldr	r3, [r7, #8]
 8004702:	015a      	lsls	r2, r3, #5
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	4413      	add	r3, r2
 8004708:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	68ba      	ldr	r2, [r7, #8]
 8004710:	0151      	lsls	r1, r2, #5
 8004712:	68fa      	ldr	r2, [r7, #12]
 8004714:	440a      	add	r2, r1
 8004716:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800471a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800471e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	78db      	ldrb	r3, [r3, #3]
 8004724:	2b03      	cmp	r3, #3
 8004726:	d003      	beq.n	8004730 <USB_EPClearStall+0x9e>
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	78db      	ldrb	r3, [r3, #3]
 800472c:	2b02      	cmp	r3, #2
 800472e:	d10f      	bne.n	8004750 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004730:	68bb      	ldr	r3, [r7, #8]
 8004732:	015a      	lsls	r2, r3, #5
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	4413      	add	r3, r2
 8004738:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	68ba      	ldr	r2, [r7, #8]
 8004740:	0151      	lsls	r1, r2, #5
 8004742:	68fa      	ldr	r2, [r7, #12]
 8004744:	440a      	add	r2, r1
 8004746:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800474a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800474e:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8004750:	2300      	movs	r3, #0
}
 8004752:	4618      	mov	r0, r3
 8004754:	3714      	adds	r7, #20
 8004756:	46bd      	mov	sp, r7
 8004758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475c:	4770      	bx	lr

0800475e <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800475e:	b480      	push	{r7}
 8004760:	b085      	sub	sp, #20
 8004762:	af00      	add	r7, sp, #0
 8004764:	6078      	str	r0, [r7, #4]
 8004766:	460b      	mov	r3, r1
 8004768:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	68fa      	ldr	r2, [r7, #12]
 8004778:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800477c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004780:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004788:	681a      	ldr	r2, [r3, #0]
 800478a:	78fb      	ldrb	r3, [r7, #3]
 800478c:	011b      	lsls	r3, r3, #4
 800478e:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8004792:	68f9      	ldr	r1, [r7, #12]
 8004794:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004798:	4313      	orrs	r3, r2
 800479a:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800479c:	2300      	movs	r3, #0
}
 800479e:	4618      	mov	r0, r3
 80047a0:	3714      	adds	r7, #20
 80047a2:	46bd      	mov	sp, r7
 80047a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a8:	4770      	bx	lr

080047aa <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80047aa:	b480      	push	{r7}
 80047ac:	b085      	sub	sp, #20
 80047ae:	af00      	add	r7, sp, #0
 80047b0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	68fa      	ldr	r2, [r7, #12]
 80047c0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80047c4:	f023 0303 	bic.w	r3, r3, #3
 80047c8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047d0:	685b      	ldr	r3, [r3, #4]
 80047d2:	68fa      	ldr	r2, [r7, #12]
 80047d4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80047d8:	f023 0302 	bic.w	r3, r3, #2
 80047dc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80047de:	2300      	movs	r3, #0
}
 80047e0:	4618      	mov	r0, r3
 80047e2:	3714      	adds	r7, #20
 80047e4:	46bd      	mov	sp, r7
 80047e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ea:	4770      	bx	lr

080047ec <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80047ec:	b480      	push	{r7}
 80047ee:	b085      	sub	sp, #20
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	68fa      	ldr	r2, [r7, #12]
 8004802:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004806:	f023 0303 	bic.w	r3, r3, #3
 800480a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004812:	685b      	ldr	r3, [r3, #4]
 8004814:	68fa      	ldr	r2, [r7, #12]
 8004816:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800481a:	f043 0302 	orr.w	r3, r3, #2
 800481e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004820:	2300      	movs	r3, #0
}
 8004822:	4618      	mov	r0, r3
 8004824:	3714      	adds	r7, #20
 8004826:	46bd      	mov	sp, r7
 8004828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482c:	4770      	bx	lr

0800482e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800482e:	b480      	push	{r7}
 8004830:	b085      	sub	sp, #20
 8004832:	af00      	add	r7, sp, #0
 8004834:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	695b      	ldr	r3, [r3, #20]
 800483a:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	699b      	ldr	r3, [r3, #24]
 8004840:	68fa      	ldr	r2, [r7, #12]
 8004842:	4013      	ands	r3, r2
 8004844:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004846:	68fb      	ldr	r3, [r7, #12]
}
 8004848:	4618      	mov	r0, r3
 800484a:	3714      	adds	r7, #20
 800484c:	46bd      	mov	sp, r7
 800484e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004852:	4770      	bx	lr

08004854 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004854:	b480      	push	{r7}
 8004856:	b085      	sub	sp, #20
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004866:	699b      	ldr	r3, [r3, #24]
 8004868:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004870:	69db      	ldr	r3, [r3, #28]
 8004872:	68ba      	ldr	r2, [r7, #8]
 8004874:	4013      	ands	r3, r2
 8004876:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8004878:	68bb      	ldr	r3, [r7, #8]
 800487a:	0c1b      	lsrs	r3, r3, #16
}
 800487c:	4618      	mov	r0, r3
 800487e:	3714      	adds	r7, #20
 8004880:	46bd      	mov	sp, r7
 8004882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004886:	4770      	bx	lr

08004888 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004888:	b480      	push	{r7}
 800488a:	b085      	sub	sp, #20
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800489a:	699b      	ldr	r3, [r3, #24]
 800489c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048a4:	69db      	ldr	r3, [r3, #28]
 80048a6:	68ba      	ldr	r2, [r7, #8]
 80048a8:	4013      	ands	r3, r2
 80048aa:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80048ac:	68bb      	ldr	r3, [r7, #8]
 80048ae:	b29b      	uxth	r3, r3
}
 80048b0:	4618      	mov	r0, r3
 80048b2:	3714      	adds	r7, #20
 80048b4:	46bd      	mov	sp, r7
 80048b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ba:	4770      	bx	lr

080048bc <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80048bc:	b480      	push	{r7}
 80048be:	b085      	sub	sp, #20
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
 80048c4:	460b      	mov	r3, r1
 80048c6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80048cc:	78fb      	ldrb	r3, [r7, #3]
 80048ce:	015a      	lsls	r2, r3, #5
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	4413      	add	r3, r2
 80048d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048d8:	689b      	ldr	r3, [r3, #8]
 80048da:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048e2:	695b      	ldr	r3, [r3, #20]
 80048e4:	68ba      	ldr	r2, [r7, #8]
 80048e6:	4013      	ands	r3, r2
 80048e8:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80048ea:	68bb      	ldr	r3, [r7, #8]
}
 80048ec:	4618      	mov	r0, r3
 80048ee:	3714      	adds	r7, #20
 80048f0:	46bd      	mov	sp, r7
 80048f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f6:	4770      	bx	lr

080048f8 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80048f8:	b480      	push	{r7}
 80048fa:	b087      	sub	sp, #28
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	6078      	str	r0, [r7, #4]
 8004900:	460b      	mov	r3, r1
 8004902:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8004908:	697b      	ldr	r3, [r7, #20]
 800490a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800490e:	691b      	ldr	r3, [r3, #16]
 8004910:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8004912:	697b      	ldr	r3, [r7, #20]
 8004914:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004918:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800491a:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800491c:	78fb      	ldrb	r3, [r7, #3]
 800491e:	f003 030f 	and.w	r3, r3, #15
 8004922:	68fa      	ldr	r2, [r7, #12]
 8004924:	fa22 f303 	lsr.w	r3, r2, r3
 8004928:	01db      	lsls	r3, r3, #7
 800492a:	b2db      	uxtb	r3, r3
 800492c:	693a      	ldr	r2, [r7, #16]
 800492e:	4313      	orrs	r3, r2
 8004930:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8004932:	78fb      	ldrb	r3, [r7, #3]
 8004934:	015a      	lsls	r2, r3, #5
 8004936:	697b      	ldr	r3, [r7, #20]
 8004938:	4413      	add	r3, r2
 800493a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800493e:	689b      	ldr	r3, [r3, #8]
 8004940:	693a      	ldr	r2, [r7, #16]
 8004942:	4013      	ands	r3, r2
 8004944:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004946:	68bb      	ldr	r3, [r7, #8]
}
 8004948:	4618      	mov	r0, r3
 800494a:	371c      	adds	r7, #28
 800494c:	46bd      	mov	sp, r7
 800494e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004952:	4770      	bx	lr

08004954 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004954:	b480      	push	{r7}
 8004956:	b083      	sub	sp, #12
 8004958:	af00      	add	r7, sp, #0
 800495a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	695b      	ldr	r3, [r3, #20]
 8004960:	f003 0301 	and.w	r3, r3, #1
}
 8004964:	4618      	mov	r0, r3
 8004966:	370c      	adds	r7, #12
 8004968:	46bd      	mov	sp, r7
 800496a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496e:	4770      	bx	lr

08004970 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8004970:	b480      	push	{r7}
 8004972:	b085      	sub	sp, #20
 8004974:	af00      	add	r7, sp, #0
 8004976:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	68fa      	ldr	r2, [r7, #12]
 8004986:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800498a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800498e:	f023 0307 	bic.w	r3, r3, #7
 8004992:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800499a:	685b      	ldr	r3, [r3, #4]
 800499c:	68fa      	ldr	r2, [r7, #12]
 800499e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80049a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80049a6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80049a8:	2300      	movs	r3, #0
}
 80049aa:	4618      	mov	r0, r3
 80049ac:	3714      	adds	r7, #20
 80049ae:	46bd      	mov	sp, r7
 80049b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b4:	4770      	bx	lr
	...

080049b8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80049b8:	b480      	push	{r7}
 80049ba:	b087      	sub	sp, #28
 80049bc:	af00      	add	r7, sp, #0
 80049be:	60f8      	str	r0, [r7, #12]
 80049c0:	460b      	mov	r3, r1
 80049c2:	607a      	str	r2, [r7, #4]
 80049c4:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	333c      	adds	r3, #60	; 0x3c
 80049ce:	3304      	adds	r3, #4
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80049d4:	693b      	ldr	r3, [r7, #16]
 80049d6:	4a26      	ldr	r2, [pc, #152]	; (8004a70 <USB_EP0_OutStart+0xb8>)
 80049d8:	4293      	cmp	r3, r2
 80049da:	d90a      	bls.n	80049f2 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80049dc:	697b      	ldr	r3, [r7, #20]
 80049de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80049e8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80049ec:	d101      	bne.n	80049f2 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80049ee:	2300      	movs	r3, #0
 80049f0:	e037      	b.n	8004a62 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80049f2:	697b      	ldr	r3, [r7, #20]
 80049f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049f8:	461a      	mov	r2, r3
 80049fa:	2300      	movs	r3, #0
 80049fc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80049fe:	697b      	ldr	r3, [r7, #20]
 8004a00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a04:	691b      	ldr	r3, [r3, #16]
 8004a06:	697a      	ldr	r2, [r7, #20]
 8004a08:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004a0c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004a10:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8004a12:	697b      	ldr	r3, [r7, #20]
 8004a14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a18:	691b      	ldr	r3, [r3, #16]
 8004a1a:	697a      	ldr	r2, [r7, #20]
 8004a1c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004a20:	f043 0318 	orr.w	r3, r3, #24
 8004a24:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8004a26:	697b      	ldr	r3, [r7, #20]
 8004a28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a2c:	691b      	ldr	r3, [r3, #16]
 8004a2e:	697a      	ldr	r2, [r7, #20]
 8004a30:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004a34:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8004a38:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8004a3a:	7afb      	ldrb	r3, [r7, #11]
 8004a3c:	2b01      	cmp	r3, #1
 8004a3e:	d10f      	bne.n	8004a60 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8004a40:	697b      	ldr	r3, [r7, #20]
 8004a42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a46:	461a      	mov	r2, r3
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8004a4c:	697b      	ldr	r3, [r7, #20]
 8004a4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	697a      	ldr	r2, [r7, #20]
 8004a56:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004a5a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8004a5e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004a60:	2300      	movs	r3, #0
}
 8004a62:	4618      	mov	r0, r3
 8004a64:	371c      	adds	r7, #28
 8004a66:	46bd      	mov	sp, r7
 8004a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6c:	4770      	bx	lr
 8004a6e:	bf00      	nop
 8004a70:	4f54300a 	.word	0x4f54300a

08004a74 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004a74:	b480      	push	{r7}
 8004a76:	b085      	sub	sp, #20
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004a7c:	2300      	movs	r3, #0
 8004a7e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	3301      	adds	r3, #1
 8004a84:	60fb      	str	r3, [r7, #12]
 8004a86:	4a13      	ldr	r2, [pc, #76]	; (8004ad4 <USB_CoreReset+0x60>)
 8004a88:	4293      	cmp	r3, r2
 8004a8a:	d901      	bls.n	8004a90 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8004a8c:	2303      	movs	r3, #3
 8004a8e:	e01a      	b.n	8004ac6 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	691b      	ldr	r3, [r3, #16]
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	daf3      	bge.n	8004a80 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004a98:	2300      	movs	r3, #0
 8004a9a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	691b      	ldr	r3, [r3, #16]
 8004aa0:	f043 0201 	orr.w	r2, r3, #1
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	3301      	adds	r3, #1
 8004aac:	60fb      	str	r3, [r7, #12]
 8004aae:	4a09      	ldr	r2, [pc, #36]	; (8004ad4 <USB_CoreReset+0x60>)
 8004ab0:	4293      	cmp	r3, r2
 8004ab2:	d901      	bls.n	8004ab8 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8004ab4:	2303      	movs	r3, #3
 8004ab6:	e006      	b.n	8004ac6 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	691b      	ldr	r3, [r3, #16]
 8004abc:	f003 0301 	and.w	r3, r3, #1
 8004ac0:	2b01      	cmp	r3, #1
 8004ac2:	d0f1      	beq.n	8004aa8 <USB_CoreReset+0x34>

  return HAL_OK;
 8004ac4:	2300      	movs	r3, #0
}
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	3714      	adds	r7, #20
 8004aca:	46bd      	mov	sp, r7
 8004acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad0:	4770      	bx	lr
 8004ad2:	bf00      	nop
 8004ad4:	00030d40 	.word	0x00030d40

08004ad8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004ad8:	b580      	push	{r7, lr}
 8004ada:	b084      	sub	sp, #16
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	6078      	str	r0, [r7, #4]
 8004ae0:	460b      	mov	r3, r1
 8004ae2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8004ae4:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8004ae8:	f002 fa68 	bl	8006fbc <USBD_static_malloc>
 8004aec:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d105      	bne.n	8004b00 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2200      	movs	r2, #0
 8004af8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8004afc:	2302      	movs	r3, #2
 8004afe:	e066      	b.n	8004bce <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	68fa      	ldr	r2, [r7, #12]
 8004b04:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	7c1b      	ldrb	r3, [r3, #16]
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d119      	bne.n	8004b44 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8004b10:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004b14:	2202      	movs	r2, #2
 8004b16:	2181      	movs	r1, #129	; 0x81
 8004b18:	6878      	ldr	r0, [r7, #4]
 8004b1a:	f002 f92c 	bl	8006d76 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	2201      	movs	r2, #1
 8004b22:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8004b24:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004b28:	2202      	movs	r2, #2
 8004b2a:	2101      	movs	r1, #1
 8004b2c:	6878      	ldr	r0, [r7, #4]
 8004b2e:	f002 f922 	bl	8006d76 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	2201      	movs	r2, #1
 8004b36:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	2210      	movs	r2, #16
 8004b3e:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8004b42:	e016      	b.n	8004b72 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8004b44:	2340      	movs	r3, #64	; 0x40
 8004b46:	2202      	movs	r2, #2
 8004b48:	2181      	movs	r1, #129	; 0x81
 8004b4a:	6878      	ldr	r0, [r7, #4]
 8004b4c:	f002 f913 	bl	8006d76 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2201      	movs	r2, #1
 8004b54:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8004b56:	2340      	movs	r3, #64	; 0x40
 8004b58:	2202      	movs	r2, #2
 8004b5a:	2101      	movs	r1, #1
 8004b5c:	6878      	ldr	r0, [r7, #4]
 8004b5e:	f002 f90a 	bl	8006d76 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	2201      	movs	r2, #1
 8004b66:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	2210      	movs	r2, #16
 8004b6e:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8004b72:	2308      	movs	r3, #8
 8004b74:	2203      	movs	r2, #3
 8004b76:	2182      	movs	r1, #130	; 0x82
 8004b78:	6878      	ldr	r0, [r7, #4]
 8004b7a:	f002 f8fc 	bl	8006d76 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	2201      	movs	r2, #1
 8004b82:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	2200      	movs	r2, #0
 8004b94:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	7c1b      	ldrb	r3, [r3, #16]
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d109      	bne.n	8004bbc <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004bae:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004bb2:	2101      	movs	r1, #1
 8004bb4:	6878      	ldr	r0, [r7, #4]
 8004bb6:	f002 f9cd 	bl	8006f54 <USBD_LL_PrepareReceive>
 8004bba:	e007      	b.n	8004bcc <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004bc2:	2340      	movs	r3, #64	; 0x40
 8004bc4:	2101      	movs	r1, #1
 8004bc6:	6878      	ldr	r0, [r7, #4]
 8004bc8:	f002 f9c4 	bl	8006f54 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8004bcc:	2300      	movs	r3, #0
}
 8004bce:	4618      	mov	r0, r3
 8004bd0:	3710      	adds	r7, #16
 8004bd2:	46bd      	mov	sp, r7
 8004bd4:	bd80      	pop	{r7, pc}

08004bd6 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004bd6:	b580      	push	{r7, lr}
 8004bd8:	b082      	sub	sp, #8
 8004bda:	af00      	add	r7, sp, #0
 8004bdc:	6078      	str	r0, [r7, #4]
 8004bde:	460b      	mov	r3, r1
 8004be0:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8004be2:	2181      	movs	r1, #129	; 0x81
 8004be4:	6878      	ldr	r0, [r7, #4]
 8004be6:	f002 f8ec 	bl	8006dc2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	2200      	movs	r2, #0
 8004bee:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8004bf0:	2101      	movs	r1, #1
 8004bf2:	6878      	ldr	r0, [r7, #4]
 8004bf4:	f002 f8e5 	bl	8006dc2 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	2200      	movs	r2, #0
 8004bfc:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8004c00:	2182      	movs	r1, #130	; 0x82
 8004c02:	6878      	ldr	r0, [r7, #4]
 8004c04:	f002 f8dd 	bl	8006dc2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	2200      	movs	r2, #0
 8004c0c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2200      	movs	r2, #0
 8004c14:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d00e      	beq.n	8004c40 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004c28:	685b      	ldr	r3, [r3, #4]
 8004c2a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004c32:	4618      	mov	r0, r3
 8004c34:	f002 f9d0 	bl	8006fd8 <USBD_static_free>
    pdev->pClassData = NULL;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2200      	movs	r2, #0
 8004c3c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8004c40:	2300      	movs	r3, #0
}
 8004c42:	4618      	mov	r0, r3
 8004c44:	3708      	adds	r7, #8
 8004c46:	46bd      	mov	sp, r7
 8004c48:	bd80      	pop	{r7, pc}
	...

08004c4c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8004c4c:	b580      	push	{r7, lr}
 8004c4e:	b086      	sub	sp, #24
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	6078      	str	r0, [r7, #4]
 8004c54:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004c5c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8004c5e:	2300      	movs	r3, #0
 8004c60:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8004c62:	2300      	movs	r3, #0
 8004c64:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8004c66:	2300      	movs	r3, #0
 8004c68:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8004c6a:	693b      	ldr	r3, [r7, #16]
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d101      	bne.n	8004c74 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8004c70:	2303      	movs	r3, #3
 8004c72:	e0af      	b.n	8004dd4 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004c74:	683b      	ldr	r3, [r7, #0]
 8004c76:	781b      	ldrb	r3, [r3, #0]
 8004c78:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d03f      	beq.n	8004d00 <USBD_CDC_Setup+0xb4>
 8004c80:	2b20      	cmp	r3, #32
 8004c82:	f040 809f 	bne.w	8004dc4 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8004c86:	683b      	ldr	r3, [r7, #0]
 8004c88:	88db      	ldrh	r3, [r3, #6]
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d02e      	beq.n	8004cec <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8004c8e:	683b      	ldr	r3, [r7, #0]
 8004c90:	781b      	ldrb	r3, [r3, #0]
 8004c92:	b25b      	sxtb	r3, r3
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	da16      	bge.n	8004cc6 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004c9e:	689b      	ldr	r3, [r3, #8]
 8004ca0:	683a      	ldr	r2, [r7, #0]
 8004ca2:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8004ca4:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8004ca6:	683a      	ldr	r2, [r7, #0]
 8004ca8:	88d2      	ldrh	r2, [r2, #6]
 8004caa:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8004cac:	683b      	ldr	r3, [r7, #0]
 8004cae:	88db      	ldrh	r3, [r3, #6]
 8004cb0:	2b07      	cmp	r3, #7
 8004cb2:	bf28      	it	cs
 8004cb4:	2307      	movcs	r3, #7
 8004cb6:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8004cb8:	693b      	ldr	r3, [r7, #16]
 8004cba:	89fa      	ldrh	r2, [r7, #14]
 8004cbc:	4619      	mov	r1, r3
 8004cbe:	6878      	ldr	r0, [r7, #4]
 8004cc0:	f001 fb19 	bl	80062f6 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8004cc4:	e085      	b.n	8004dd2 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 8004cc6:	683b      	ldr	r3, [r7, #0]
 8004cc8:	785a      	ldrb	r2, [r3, #1]
 8004cca:	693b      	ldr	r3, [r7, #16]
 8004ccc:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8004cd0:	683b      	ldr	r3, [r7, #0]
 8004cd2:	88db      	ldrh	r3, [r3, #6]
 8004cd4:	b2da      	uxtb	r2, r3
 8004cd6:	693b      	ldr	r3, [r7, #16]
 8004cd8:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8004cdc:	6939      	ldr	r1, [r7, #16]
 8004cde:	683b      	ldr	r3, [r7, #0]
 8004ce0:	88db      	ldrh	r3, [r3, #6]
 8004ce2:	461a      	mov	r2, r3
 8004ce4:	6878      	ldr	r0, [r7, #4]
 8004ce6:	f001 fb32 	bl	800634e <USBD_CtlPrepareRx>
      break;
 8004cea:	e072      	b.n	8004dd2 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004cf2:	689b      	ldr	r3, [r3, #8]
 8004cf4:	683a      	ldr	r2, [r7, #0]
 8004cf6:	7850      	ldrb	r0, [r2, #1]
 8004cf8:	2200      	movs	r2, #0
 8004cfa:	6839      	ldr	r1, [r7, #0]
 8004cfc:	4798      	blx	r3
      break;
 8004cfe:	e068      	b.n	8004dd2 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8004d00:	683b      	ldr	r3, [r7, #0]
 8004d02:	785b      	ldrb	r3, [r3, #1]
 8004d04:	2b0b      	cmp	r3, #11
 8004d06:	d852      	bhi.n	8004dae <USBD_CDC_Setup+0x162>
 8004d08:	a201      	add	r2, pc, #4	; (adr r2, 8004d10 <USBD_CDC_Setup+0xc4>)
 8004d0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d0e:	bf00      	nop
 8004d10:	08004d41 	.word	0x08004d41
 8004d14:	08004dbd 	.word	0x08004dbd
 8004d18:	08004daf 	.word	0x08004daf
 8004d1c:	08004daf 	.word	0x08004daf
 8004d20:	08004daf 	.word	0x08004daf
 8004d24:	08004daf 	.word	0x08004daf
 8004d28:	08004daf 	.word	0x08004daf
 8004d2c:	08004daf 	.word	0x08004daf
 8004d30:	08004daf 	.word	0x08004daf
 8004d34:	08004daf 	.word	0x08004daf
 8004d38:	08004d6b 	.word	0x08004d6b
 8004d3c:	08004d95 	.word	0x08004d95
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004d46:	b2db      	uxtb	r3, r3
 8004d48:	2b03      	cmp	r3, #3
 8004d4a:	d107      	bne.n	8004d5c <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8004d4c:	f107 030a 	add.w	r3, r7, #10
 8004d50:	2202      	movs	r2, #2
 8004d52:	4619      	mov	r1, r3
 8004d54:	6878      	ldr	r0, [r7, #4]
 8004d56:	f001 face 	bl	80062f6 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004d5a:	e032      	b.n	8004dc2 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8004d5c:	6839      	ldr	r1, [r7, #0]
 8004d5e:	6878      	ldr	r0, [r7, #4]
 8004d60:	f001 fa58 	bl	8006214 <USBD_CtlError>
            ret = USBD_FAIL;
 8004d64:	2303      	movs	r3, #3
 8004d66:	75fb      	strb	r3, [r7, #23]
          break;
 8004d68:	e02b      	b.n	8004dc2 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004d70:	b2db      	uxtb	r3, r3
 8004d72:	2b03      	cmp	r3, #3
 8004d74:	d107      	bne.n	8004d86 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8004d76:	f107 030d 	add.w	r3, r7, #13
 8004d7a:	2201      	movs	r2, #1
 8004d7c:	4619      	mov	r1, r3
 8004d7e:	6878      	ldr	r0, [r7, #4]
 8004d80:	f001 fab9 	bl	80062f6 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004d84:	e01d      	b.n	8004dc2 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8004d86:	6839      	ldr	r1, [r7, #0]
 8004d88:	6878      	ldr	r0, [r7, #4]
 8004d8a:	f001 fa43 	bl	8006214 <USBD_CtlError>
            ret = USBD_FAIL;
 8004d8e:	2303      	movs	r3, #3
 8004d90:	75fb      	strb	r3, [r7, #23]
          break;
 8004d92:	e016      	b.n	8004dc2 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004d9a:	b2db      	uxtb	r3, r3
 8004d9c:	2b03      	cmp	r3, #3
 8004d9e:	d00f      	beq.n	8004dc0 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8004da0:	6839      	ldr	r1, [r7, #0]
 8004da2:	6878      	ldr	r0, [r7, #4]
 8004da4:	f001 fa36 	bl	8006214 <USBD_CtlError>
            ret = USBD_FAIL;
 8004da8:	2303      	movs	r3, #3
 8004daa:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8004dac:	e008      	b.n	8004dc0 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8004dae:	6839      	ldr	r1, [r7, #0]
 8004db0:	6878      	ldr	r0, [r7, #4]
 8004db2:	f001 fa2f 	bl	8006214 <USBD_CtlError>
          ret = USBD_FAIL;
 8004db6:	2303      	movs	r3, #3
 8004db8:	75fb      	strb	r3, [r7, #23]
          break;
 8004dba:	e002      	b.n	8004dc2 <USBD_CDC_Setup+0x176>
          break;
 8004dbc:	bf00      	nop
 8004dbe:	e008      	b.n	8004dd2 <USBD_CDC_Setup+0x186>
          break;
 8004dc0:	bf00      	nop
      }
      break;
 8004dc2:	e006      	b.n	8004dd2 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8004dc4:	6839      	ldr	r1, [r7, #0]
 8004dc6:	6878      	ldr	r0, [r7, #4]
 8004dc8:	f001 fa24 	bl	8006214 <USBD_CtlError>
      ret = USBD_FAIL;
 8004dcc:	2303      	movs	r3, #3
 8004dce:	75fb      	strb	r3, [r7, #23]
      break;
 8004dd0:	bf00      	nop
  }

  return (uint8_t)ret;
 8004dd2:	7dfb      	ldrb	r3, [r7, #23]
}
 8004dd4:	4618      	mov	r0, r3
 8004dd6:	3718      	adds	r7, #24
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	bd80      	pop	{r7, pc}

08004ddc <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004ddc:	b580      	push	{r7, lr}
 8004dde:	b084      	sub	sp, #16
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	6078      	str	r0, [r7, #4]
 8004de4:	460b      	mov	r3, r1
 8004de6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8004dee:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d101      	bne.n	8004dfe <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8004dfa:	2303      	movs	r3, #3
 8004dfc:	e04f      	b.n	8004e9e <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004e04:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8004e06:	78fa      	ldrb	r2, [r7, #3]
 8004e08:	6879      	ldr	r1, [r7, #4]
 8004e0a:	4613      	mov	r3, r2
 8004e0c:	009b      	lsls	r3, r3, #2
 8004e0e:	4413      	add	r3, r2
 8004e10:	009b      	lsls	r3, r3, #2
 8004e12:	440b      	add	r3, r1
 8004e14:	3318      	adds	r3, #24
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d029      	beq.n	8004e70 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8004e1c:	78fa      	ldrb	r2, [r7, #3]
 8004e1e:	6879      	ldr	r1, [r7, #4]
 8004e20:	4613      	mov	r3, r2
 8004e22:	009b      	lsls	r3, r3, #2
 8004e24:	4413      	add	r3, r2
 8004e26:	009b      	lsls	r3, r3, #2
 8004e28:	440b      	add	r3, r1
 8004e2a:	3318      	adds	r3, #24
 8004e2c:	681a      	ldr	r2, [r3, #0]
 8004e2e:	78f9      	ldrb	r1, [r7, #3]
 8004e30:	68f8      	ldr	r0, [r7, #12]
 8004e32:	460b      	mov	r3, r1
 8004e34:	00db      	lsls	r3, r3, #3
 8004e36:	1a5b      	subs	r3, r3, r1
 8004e38:	009b      	lsls	r3, r3, #2
 8004e3a:	4403      	add	r3, r0
 8004e3c:	3344      	adds	r3, #68	; 0x44
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	fbb2 f1f3 	udiv	r1, r2, r3
 8004e44:	fb01 f303 	mul.w	r3, r1, r3
 8004e48:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d110      	bne.n	8004e70 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8004e4e:	78fa      	ldrb	r2, [r7, #3]
 8004e50:	6879      	ldr	r1, [r7, #4]
 8004e52:	4613      	mov	r3, r2
 8004e54:	009b      	lsls	r3, r3, #2
 8004e56:	4413      	add	r3, r2
 8004e58:	009b      	lsls	r3, r3, #2
 8004e5a:	440b      	add	r3, r1
 8004e5c:	3318      	adds	r3, #24
 8004e5e:	2200      	movs	r2, #0
 8004e60:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8004e62:	78f9      	ldrb	r1, [r7, #3]
 8004e64:	2300      	movs	r3, #0
 8004e66:	2200      	movs	r2, #0
 8004e68:	6878      	ldr	r0, [r7, #4]
 8004e6a:	f002 f852 	bl	8006f12 <USBD_LL_Transmit>
 8004e6e:	e015      	b.n	8004e9c <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8004e70:	68bb      	ldr	r3, [r7, #8]
 8004e72:	2200      	movs	r2, #0
 8004e74:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004e7e:	691b      	ldr	r3, [r3, #16]
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d00b      	beq.n	8004e9c <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004e8a:	691b      	ldr	r3, [r3, #16]
 8004e8c:	68ba      	ldr	r2, [r7, #8]
 8004e8e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8004e92:	68ba      	ldr	r2, [r7, #8]
 8004e94:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8004e98:	78fa      	ldrb	r2, [r7, #3]
 8004e9a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8004e9c:	2300      	movs	r3, #0
}
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	3710      	adds	r7, #16
 8004ea2:	46bd      	mov	sp, r7
 8004ea4:	bd80      	pop	{r7, pc}

08004ea6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004ea6:	b580      	push	{r7, lr}
 8004ea8:	b084      	sub	sp, #16
 8004eaa:	af00      	add	r7, sp, #0
 8004eac:	6078      	str	r0, [r7, #4]
 8004eae:	460b      	mov	r3, r1
 8004eb0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004eb8:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d101      	bne.n	8004ec8 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8004ec4:	2303      	movs	r3, #3
 8004ec6:	e015      	b.n	8004ef4 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8004ec8:	78fb      	ldrb	r3, [r7, #3]
 8004eca:	4619      	mov	r1, r3
 8004ecc:	6878      	ldr	r0, [r7, #4]
 8004ece:	f002 f862 	bl	8006f96 <USBD_LL_GetRxDataSize>
 8004ed2:	4602      	mov	r2, r0
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004ee0:	68db      	ldr	r3, [r3, #12]
 8004ee2:	68fa      	ldr	r2, [r7, #12]
 8004ee4:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8004ee8:	68fa      	ldr	r2, [r7, #12]
 8004eea:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8004eee:	4611      	mov	r1, r2
 8004ef0:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8004ef2:	2300      	movs	r3, #0
}
 8004ef4:	4618      	mov	r0, r3
 8004ef6:	3710      	adds	r7, #16
 8004ef8:	46bd      	mov	sp, r7
 8004efa:	bd80      	pop	{r7, pc}

08004efc <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8004efc:	b580      	push	{r7, lr}
 8004efe:	b084      	sub	sp, #16
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004f0a:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d101      	bne.n	8004f16 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8004f12:	2303      	movs	r3, #3
 8004f14:	e01b      	b.n	8004f4e <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d015      	beq.n	8004f4c <USBD_CDC_EP0_RxReady+0x50>
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8004f26:	2bff      	cmp	r3, #255	; 0xff
 8004f28:	d010      	beq.n	8004f4c <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004f30:	689b      	ldr	r3, [r3, #8]
 8004f32:	68fa      	ldr	r2, [r7, #12]
 8004f34:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8004f38:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8004f3a:	68fa      	ldr	r2, [r7, #12]
 8004f3c:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8004f40:	b292      	uxth	r2, r2
 8004f42:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	22ff      	movs	r2, #255	; 0xff
 8004f48:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8004f4c:	2300      	movs	r3, #0
}
 8004f4e:	4618      	mov	r0, r3
 8004f50:	3710      	adds	r7, #16
 8004f52:	46bd      	mov	sp, r7
 8004f54:	bd80      	pop	{r7, pc}
	...

08004f58 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8004f58:	b480      	push	{r7}
 8004f5a:	b083      	sub	sp, #12
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2243      	movs	r2, #67	; 0x43
 8004f64:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8004f66:	4b03      	ldr	r3, [pc, #12]	; (8004f74 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8004f68:	4618      	mov	r0, r3
 8004f6a:	370c      	adds	r7, #12
 8004f6c:	46bd      	mov	sp, r7
 8004f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f72:	4770      	bx	lr
 8004f74:	200000b8 	.word	0x200000b8

08004f78 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8004f78:	b480      	push	{r7}
 8004f7a:	b083      	sub	sp, #12
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2243      	movs	r2, #67	; 0x43
 8004f84:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8004f86:	4b03      	ldr	r3, [pc, #12]	; (8004f94 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8004f88:	4618      	mov	r0, r3
 8004f8a:	370c      	adds	r7, #12
 8004f8c:	46bd      	mov	sp, r7
 8004f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f92:	4770      	bx	lr
 8004f94:	20000074 	.word	0x20000074

08004f98 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8004f98:	b480      	push	{r7}
 8004f9a:	b083      	sub	sp, #12
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2243      	movs	r2, #67	; 0x43
 8004fa4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8004fa6:	4b03      	ldr	r3, [pc, #12]	; (8004fb4 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8004fa8:	4618      	mov	r0, r3
 8004faa:	370c      	adds	r7, #12
 8004fac:	46bd      	mov	sp, r7
 8004fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb2:	4770      	bx	lr
 8004fb4:	200000fc 	.word	0x200000fc

08004fb8 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8004fb8:	b480      	push	{r7}
 8004fba:	b083      	sub	sp, #12
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	220a      	movs	r2, #10
 8004fc4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8004fc6:	4b03      	ldr	r3, [pc, #12]	; (8004fd4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8004fc8:	4618      	mov	r0, r3
 8004fca:	370c      	adds	r7, #12
 8004fcc:	46bd      	mov	sp, r7
 8004fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd2:	4770      	bx	lr
 8004fd4:	20000030 	.word	0x20000030

08004fd8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8004fd8:	b480      	push	{r7}
 8004fda:	b083      	sub	sp, #12
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	6078      	str	r0, [r7, #4]
 8004fe0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8004fe2:	683b      	ldr	r3, [r7, #0]
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d101      	bne.n	8004fec <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8004fe8:	2303      	movs	r3, #3
 8004fea:	e004      	b.n	8004ff6 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	683a      	ldr	r2, [r7, #0]
 8004ff0:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8004ff4:	2300      	movs	r3, #0
}
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	370c      	adds	r7, #12
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005000:	4770      	bx	lr

08005002 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8005002:	b480      	push	{r7}
 8005004:	b087      	sub	sp, #28
 8005006:	af00      	add	r7, sp, #0
 8005008:	60f8      	str	r0, [r7, #12]
 800500a:	60b9      	str	r1, [r7, #8]
 800500c:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005014:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8005016:	697b      	ldr	r3, [r7, #20]
 8005018:	2b00      	cmp	r3, #0
 800501a:	d101      	bne.n	8005020 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800501c:	2303      	movs	r3, #3
 800501e:	e008      	b.n	8005032 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8005020:	697b      	ldr	r3, [r7, #20]
 8005022:	68ba      	ldr	r2, [r7, #8]
 8005024:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8005028:	697b      	ldr	r3, [r7, #20]
 800502a:	687a      	ldr	r2, [r7, #4]
 800502c:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8005030:	2300      	movs	r3, #0
}
 8005032:	4618      	mov	r0, r3
 8005034:	371c      	adds	r7, #28
 8005036:	46bd      	mov	sp, r7
 8005038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503c:	4770      	bx	lr

0800503e <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800503e:	b480      	push	{r7}
 8005040:	b085      	sub	sp, #20
 8005042:	af00      	add	r7, sp, #0
 8005044:	6078      	str	r0, [r7, #4]
 8005046:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800504e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	2b00      	cmp	r3, #0
 8005054:	d101      	bne.n	800505a <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 8005056:	2303      	movs	r3, #3
 8005058:	e004      	b.n	8005064 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	683a      	ldr	r2, [r7, #0]
 800505e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8005062:	2300      	movs	r3, #0
}
 8005064:	4618      	mov	r0, r3
 8005066:	3714      	adds	r7, #20
 8005068:	46bd      	mov	sp, r7
 800506a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506e:	4770      	bx	lr

08005070 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8005070:	b580      	push	{r7, lr}
 8005072:	b084      	sub	sp, #16
 8005074:	af00      	add	r7, sp, #0
 8005076:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800507e:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8005080:	2301      	movs	r3, #1
 8005082:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800508a:	2b00      	cmp	r3, #0
 800508c:	d101      	bne.n	8005092 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800508e:	2303      	movs	r3, #3
 8005090:	e01a      	b.n	80050c8 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 8005092:	68bb      	ldr	r3, [r7, #8]
 8005094:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005098:	2b00      	cmp	r3, #0
 800509a:	d114      	bne.n	80050c6 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800509c:	68bb      	ldr	r3, [r7, #8]
 800509e:	2201      	movs	r2, #1
 80050a0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80050a4:	68bb      	ldr	r3, [r7, #8]
 80050a6:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 80050ae:	68bb      	ldr	r3, [r7, #8]
 80050b0:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80050b4:	68bb      	ldr	r3, [r7, #8]
 80050b6:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80050ba:	2181      	movs	r1, #129	; 0x81
 80050bc:	6878      	ldr	r0, [r7, #4]
 80050be:	f001 ff28 	bl	8006f12 <USBD_LL_Transmit>

    ret = USBD_OK;
 80050c2:	2300      	movs	r3, #0
 80050c4:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80050c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80050c8:	4618      	mov	r0, r3
 80050ca:	3710      	adds	r7, #16
 80050cc:	46bd      	mov	sp, r7
 80050ce:	bd80      	pop	{r7, pc}

080050d0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80050d0:	b580      	push	{r7, lr}
 80050d2:	b084      	sub	sp, #16
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80050de:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d101      	bne.n	80050ee <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 80050ea:	2303      	movs	r3, #3
 80050ec:	e016      	b.n	800511c <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	7c1b      	ldrb	r3, [r3, #16]
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d109      	bne.n	800510a <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80050fc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005100:	2101      	movs	r1, #1
 8005102:	6878      	ldr	r0, [r7, #4]
 8005104:	f001 ff26 	bl	8006f54 <USBD_LL_PrepareReceive>
 8005108:	e007      	b.n	800511a <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005110:	2340      	movs	r3, #64	; 0x40
 8005112:	2101      	movs	r1, #1
 8005114:	6878      	ldr	r0, [r7, #4]
 8005116:	f001 ff1d 	bl	8006f54 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800511a:	2300      	movs	r3, #0
}
 800511c:	4618      	mov	r0, r3
 800511e:	3710      	adds	r7, #16
 8005120:	46bd      	mov	sp, r7
 8005122:	bd80      	pop	{r7, pc}

08005124 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005124:	b580      	push	{r7, lr}
 8005126:	b086      	sub	sp, #24
 8005128:	af00      	add	r7, sp, #0
 800512a:	60f8      	str	r0, [r7, #12]
 800512c:	60b9      	str	r1, [r7, #8]
 800512e:	4613      	mov	r3, r2
 8005130:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	2b00      	cmp	r3, #0
 8005136:	d101      	bne.n	800513c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8005138:	2303      	movs	r3, #3
 800513a:	e01f      	b.n	800517c <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	2200      	movs	r2, #0
 8005140:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	2200      	movs	r2, #0
 8005148:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	2200      	movs	r2, #0
 8005150:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005154:	68bb      	ldr	r3, [r7, #8]
 8005156:	2b00      	cmp	r3, #0
 8005158:	d003      	beq.n	8005162 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	68ba      	ldr	r2, [r7, #8]
 800515e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	2201      	movs	r2, #1
 8005166:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	79fa      	ldrb	r2, [r7, #7]
 800516e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8005170:	68f8      	ldr	r0, [r7, #12]
 8005172:	f001 fd99 	bl	8006ca8 <USBD_LL_Init>
 8005176:	4603      	mov	r3, r0
 8005178:	75fb      	strb	r3, [r7, #23]

  return ret;
 800517a:	7dfb      	ldrb	r3, [r7, #23]
}
 800517c:	4618      	mov	r0, r3
 800517e:	3718      	adds	r7, #24
 8005180:	46bd      	mov	sp, r7
 8005182:	bd80      	pop	{r7, pc}

08005184 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005184:	b580      	push	{r7, lr}
 8005186:	b084      	sub	sp, #16
 8005188:	af00      	add	r7, sp, #0
 800518a:	6078      	str	r0, [r7, #4]
 800518c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800518e:	2300      	movs	r3, #0
 8005190:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8005192:	683b      	ldr	r3, [r7, #0]
 8005194:	2b00      	cmp	r3, #0
 8005196:	d101      	bne.n	800519c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8005198:	2303      	movs	r3, #3
 800519a:	e016      	b.n	80051ca <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	683a      	ldr	r2, [r7, #0]
 80051a0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80051aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d00b      	beq.n	80051c8 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80051b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051b8:	f107 020e 	add.w	r2, r7, #14
 80051bc:	4610      	mov	r0, r2
 80051be:	4798      	blx	r3
 80051c0:	4602      	mov	r2, r0
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 80051c8:	2300      	movs	r3, #0
}
 80051ca:	4618      	mov	r0, r3
 80051cc:	3710      	adds	r7, #16
 80051ce:	46bd      	mov	sp, r7
 80051d0:	bd80      	pop	{r7, pc}

080051d2 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80051d2:	b580      	push	{r7, lr}
 80051d4:	b082      	sub	sp, #8
 80051d6:	af00      	add	r7, sp, #0
 80051d8:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80051da:	6878      	ldr	r0, [r7, #4]
 80051dc:	f001 fdb0 	bl	8006d40 <USBD_LL_Start>
 80051e0:	4603      	mov	r3, r0
}
 80051e2:	4618      	mov	r0, r3
 80051e4:	3708      	adds	r7, #8
 80051e6:	46bd      	mov	sp, r7
 80051e8:	bd80      	pop	{r7, pc}

080051ea <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80051ea:	b480      	push	{r7}
 80051ec:	b083      	sub	sp, #12
 80051ee:	af00      	add	r7, sp, #0
 80051f0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80051f2:	2300      	movs	r3, #0
}
 80051f4:	4618      	mov	r0, r3
 80051f6:	370c      	adds	r7, #12
 80051f8:	46bd      	mov	sp, r7
 80051fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fe:	4770      	bx	lr

08005200 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005200:	b580      	push	{r7, lr}
 8005202:	b084      	sub	sp, #16
 8005204:	af00      	add	r7, sp, #0
 8005206:	6078      	str	r0, [r7, #4]
 8005208:	460b      	mov	r3, r1
 800520a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800520c:	2303      	movs	r3, #3
 800520e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005216:	2b00      	cmp	r3, #0
 8005218:	d009      	beq.n	800522e <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	78fa      	ldrb	r2, [r7, #3]
 8005224:	4611      	mov	r1, r2
 8005226:	6878      	ldr	r0, [r7, #4]
 8005228:	4798      	blx	r3
 800522a:	4603      	mov	r3, r0
 800522c:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800522e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005230:	4618      	mov	r0, r3
 8005232:	3710      	adds	r7, #16
 8005234:	46bd      	mov	sp, r7
 8005236:	bd80      	pop	{r7, pc}

08005238 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005238:	b580      	push	{r7, lr}
 800523a:	b082      	sub	sp, #8
 800523c:	af00      	add	r7, sp, #0
 800523e:	6078      	str	r0, [r7, #4]
 8005240:	460b      	mov	r3, r1
 8005242:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800524a:	2b00      	cmp	r3, #0
 800524c:	d007      	beq.n	800525e <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005254:	685b      	ldr	r3, [r3, #4]
 8005256:	78fa      	ldrb	r2, [r7, #3]
 8005258:	4611      	mov	r1, r2
 800525a:	6878      	ldr	r0, [r7, #4]
 800525c:	4798      	blx	r3
  }

  return USBD_OK;
 800525e:	2300      	movs	r3, #0
}
 8005260:	4618      	mov	r0, r3
 8005262:	3708      	adds	r7, #8
 8005264:	46bd      	mov	sp, r7
 8005266:	bd80      	pop	{r7, pc}

08005268 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005268:	b580      	push	{r7, lr}
 800526a:	b084      	sub	sp, #16
 800526c:	af00      	add	r7, sp, #0
 800526e:	6078      	str	r0, [r7, #4]
 8005270:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005278:	6839      	ldr	r1, [r7, #0]
 800527a:	4618      	mov	r0, r3
 800527c:	f000 ff90 	bl	80061a0 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	2201      	movs	r2, #1
 8005284:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800528e:	461a      	mov	r2, r3
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800529c:	f003 031f 	and.w	r3, r3, #31
 80052a0:	2b02      	cmp	r3, #2
 80052a2:	d01a      	beq.n	80052da <USBD_LL_SetupStage+0x72>
 80052a4:	2b02      	cmp	r3, #2
 80052a6:	d822      	bhi.n	80052ee <USBD_LL_SetupStage+0x86>
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d002      	beq.n	80052b2 <USBD_LL_SetupStage+0x4a>
 80052ac:	2b01      	cmp	r3, #1
 80052ae:	d00a      	beq.n	80052c6 <USBD_LL_SetupStage+0x5e>
 80052b0:	e01d      	b.n	80052ee <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80052b8:	4619      	mov	r1, r3
 80052ba:	6878      	ldr	r0, [r7, #4]
 80052bc:	f000 fa62 	bl	8005784 <USBD_StdDevReq>
 80052c0:	4603      	mov	r3, r0
 80052c2:	73fb      	strb	r3, [r7, #15]
      break;
 80052c4:	e020      	b.n	8005308 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80052cc:	4619      	mov	r1, r3
 80052ce:	6878      	ldr	r0, [r7, #4]
 80052d0:	f000 fac6 	bl	8005860 <USBD_StdItfReq>
 80052d4:	4603      	mov	r3, r0
 80052d6:	73fb      	strb	r3, [r7, #15]
      break;
 80052d8:	e016      	b.n	8005308 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80052e0:	4619      	mov	r1, r3
 80052e2:	6878      	ldr	r0, [r7, #4]
 80052e4:	f000 fb05 	bl	80058f2 <USBD_StdEPReq>
 80052e8:	4603      	mov	r3, r0
 80052ea:	73fb      	strb	r3, [r7, #15]
      break;
 80052ec:	e00c      	b.n	8005308 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80052f4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80052f8:	b2db      	uxtb	r3, r3
 80052fa:	4619      	mov	r1, r3
 80052fc:	6878      	ldr	r0, [r7, #4]
 80052fe:	f001 fd7f 	bl	8006e00 <USBD_LL_StallEP>
 8005302:	4603      	mov	r3, r0
 8005304:	73fb      	strb	r3, [r7, #15]
      break;
 8005306:	bf00      	nop
  }

  return ret;
 8005308:	7bfb      	ldrb	r3, [r7, #15]
}
 800530a:	4618      	mov	r0, r3
 800530c:	3710      	adds	r7, #16
 800530e:	46bd      	mov	sp, r7
 8005310:	bd80      	pop	{r7, pc}

08005312 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005312:	b580      	push	{r7, lr}
 8005314:	b086      	sub	sp, #24
 8005316:	af00      	add	r7, sp, #0
 8005318:	60f8      	str	r0, [r7, #12]
 800531a:	460b      	mov	r3, r1
 800531c:	607a      	str	r2, [r7, #4]
 800531e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8005320:	7afb      	ldrb	r3, [r7, #11]
 8005322:	2b00      	cmp	r3, #0
 8005324:	d138      	bne.n	8005398 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800532c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005334:	2b03      	cmp	r3, #3
 8005336:	d14a      	bne.n	80053ce <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8005338:	693b      	ldr	r3, [r7, #16]
 800533a:	689a      	ldr	r2, [r3, #8]
 800533c:	693b      	ldr	r3, [r7, #16]
 800533e:	68db      	ldr	r3, [r3, #12]
 8005340:	429a      	cmp	r2, r3
 8005342:	d913      	bls.n	800536c <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8005344:	693b      	ldr	r3, [r7, #16]
 8005346:	689a      	ldr	r2, [r3, #8]
 8005348:	693b      	ldr	r3, [r7, #16]
 800534a:	68db      	ldr	r3, [r3, #12]
 800534c:	1ad2      	subs	r2, r2, r3
 800534e:	693b      	ldr	r3, [r7, #16]
 8005350:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8005352:	693b      	ldr	r3, [r7, #16]
 8005354:	68da      	ldr	r2, [r3, #12]
 8005356:	693b      	ldr	r3, [r7, #16]
 8005358:	689b      	ldr	r3, [r3, #8]
 800535a:	4293      	cmp	r3, r2
 800535c:	bf28      	it	cs
 800535e:	4613      	movcs	r3, r2
 8005360:	461a      	mov	r2, r3
 8005362:	6879      	ldr	r1, [r7, #4]
 8005364:	68f8      	ldr	r0, [r7, #12]
 8005366:	f001 f80f 	bl	8006388 <USBD_CtlContinueRx>
 800536a:	e030      	b.n	80053ce <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005372:	b2db      	uxtb	r3, r3
 8005374:	2b03      	cmp	r3, #3
 8005376:	d10b      	bne.n	8005390 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800537e:	691b      	ldr	r3, [r3, #16]
 8005380:	2b00      	cmp	r3, #0
 8005382:	d005      	beq.n	8005390 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800538a:	691b      	ldr	r3, [r3, #16]
 800538c:	68f8      	ldr	r0, [r7, #12]
 800538e:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8005390:	68f8      	ldr	r0, [r7, #12]
 8005392:	f001 f80a 	bl	80063aa <USBD_CtlSendStatus>
 8005396:	e01a      	b.n	80053ce <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800539e:	b2db      	uxtb	r3, r3
 80053a0:	2b03      	cmp	r3, #3
 80053a2:	d114      	bne.n	80053ce <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80053aa:	699b      	ldr	r3, [r3, #24]
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d00e      	beq.n	80053ce <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80053b6:	699b      	ldr	r3, [r3, #24]
 80053b8:	7afa      	ldrb	r2, [r7, #11]
 80053ba:	4611      	mov	r1, r2
 80053bc:	68f8      	ldr	r0, [r7, #12]
 80053be:	4798      	blx	r3
 80053c0:	4603      	mov	r3, r0
 80053c2:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 80053c4:	7dfb      	ldrb	r3, [r7, #23]
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d001      	beq.n	80053ce <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 80053ca:	7dfb      	ldrb	r3, [r7, #23]
 80053cc:	e000      	b.n	80053d0 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 80053ce:	2300      	movs	r3, #0
}
 80053d0:	4618      	mov	r0, r3
 80053d2:	3718      	adds	r7, #24
 80053d4:	46bd      	mov	sp, r7
 80053d6:	bd80      	pop	{r7, pc}

080053d8 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80053d8:	b580      	push	{r7, lr}
 80053da:	b086      	sub	sp, #24
 80053dc:	af00      	add	r7, sp, #0
 80053de:	60f8      	str	r0, [r7, #12]
 80053e0:	460b      	mov	r3, r1
 80053e2:	607a      	str	r2, [r7, #4]
 80053e4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80053e6:	7afb      	ldrb	r3, [r7, #11]
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d16b      	bne.n	80054c4 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	3314      	adds	r3, #20
 80053f0:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80053f8:	2b02      	cmp	r3, #2
 80053fa:	d156      	bne.n	80054aa <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 80053fc:	693b      	ldr	r3, [r7, #16]
 80053fe:	689a      	ldr	r2, [r3, #8]
 8005400:	693b      	ldr	r3, [r7, #16]
 8005402:	68db      	ldr	r3, [r3, #12]
 8005404:	429a      	cmp	r2, r3
 8005406:	d914      	bls.n	8005432 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8005408:	693b      	ldr	r3, [r7, #16]
 800540a:	689a      	ldr	r2, [r3, #8]
 800540c:	693b      	ldr	r3, [r7, #16]
 800540e:	68db      	ldr	r3, [r3, #12]
 8005410:	1ad2      	subs	r2, r2, r3
 8005412:	693b      	ldr	r3, [r7, #16]
 8005414:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8005416:	693b      	ldr	r3, [r7, #16]
 8005418:	689b      	ldr	r3, [r3, #8]
 800541a:	461a      	mov	r2, r3
 800541c:	6879      	ldr	r1, [r7, #4]
 800541e:	68f8      	ldr	r0, [r7, #12]
 8005420:	f000 ff84 	bl	800632c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005424:	2300      	movs	r3, #0
 8005426:	2200      	movs	r2, #0
 8005428:	2100      	movs	r1, #0
 800542a:	68f8      	ldr	r0, [r7, #12]
 800542c:	f001 fd92 	bl	8006f54 <USBD_LL_PrepareReceive>
 8005430:	e03b      	b.n	80054aa <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8005432:	693b      	ldr	r3, [r7, #16]
 8005434:	68da      	ldr	r2, [r3, #12]
 8005436:	693b      	ldr	r3, [r7, #16]
 8005438:	689b      	ldr	r3, [r3, #8]
 800543a:	429a      	cmp	r2, r3
 800543c:	d11c      	bne.n	8005478 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800543e:	693b      	ldr	r3, [r7, #16]
 8005440:	685a      	ldr	r2, [r3, #4]
 8005442:	693b      	ldr	r3, [r7, #16]
 8005444:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8005446:	429a      	cmp	r2, r3
 8005448:	d316      	bcc.n	8005478 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800544a:	693b      	ldr	r3, [r7, #16]
 800544c:	685a      	ldr	r2, [r3, #4]
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8005454:	429a      	cmp	r2, r3
 8005456:	d20f      	bcs.n	8005478 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8005458:	2200      	movs	r2, #0
 800545a:	2100      	movs	r1, #0
 800545c:	68f8      	ldr	r0, [r7, #12]
 800545e:	f000 ff65 	bl	800632c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	2200      	movs	r2, #0
 8005466:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800546a:	2300      	movs	r3, #0
 800546c:	2200      	movs	r2, #0
 800546e:	2100      	movs	r1, #0
 8005470:	68f8      	ldr	r0, [r7, #12]
 8005472:	f001 fd6f 	bl	8006f54 <USBD_LL_PrepareReceive>
 8005476:	e018      	b.n	80054aa <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800547e:	b2db      	uxtb	r3, r3
 8005480:	2b03      	cmp	r3, #3
 8005482:	d10b      	bne.n	800549c <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800548a:	68db      	ldr	r3, [r3, #12]
 800548c:	2b00      	cmp	r3, #0
 800548e:	d005      	beq.n	800549c <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005496:	68db      	ldr	r3, [r3, #12]
 8005498:	68f8      	ldr	r0, [r7, #12]
 800549a:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800549c:	2180      	movs	r1, #128	; 0x80
 800549e:	68f8      	ldr	r0, [r7, #12]
 80054a0:	f001 fcae 	bl	8006e00 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80054a4:	68f8      	ldr	r0, [r7, #12]
 80054a6:	f000 ff93 	bl	80063d0 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80054b0:	2b01      	cmp	r3, #1
 80054b2:	d122      	bne.n	80054fa <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 80054b4:	68f8      	ldr	r0, [r7, #12]
 80054b6:	f7ff fe98 	bl	80051ea <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	2200      	movs	r2, #0
 80054be:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80054c2:	e01a      	b.n	80054fa <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80054ca:	b2db      	uxtb	r3, r3
 80054cc:	2b03      	cmp	r3, #3
 80054ce:	d114      	bne.n	80054fa <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80054d6:	695b      	ldr	r3, [r3, #20]
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d00e      	beq.n	80054fa <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80054e2:	695b      	ldr	r3, [r3, #20]
 80054e4:	7afa      	ldrb	r2, [r7, #11]
 80054e6:	4611      	mov	r1, r2
 80054e8:	68f8      	ldr	r0, [r7, #12]
 80054ea:	4798      	blx	r3
 80054ec:	4603      	mov	r3, r0
 80054ee:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 80054f0:	7dfb      	ldrb	r3, [r7, #23]
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d001      	beq.n	80054fa <USBD_LL_DataInStage+0x122>
        {
          return ret;
 80054f6:	7dfb      	ldrb	r3, [r7, #23]
 80054f8:	e000      	b.n	80054fc <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 80054fa:	2300      	movs	r3, #0
}
 80054fc:	4618      	mov	r0, r3
 80054fe:	3718      	adds	r7, #24
 8005500:	46bd      	mov	sp, r7
 8005502:	bd80      	pop	{r7, pc}

08005504 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8005504:	b580      	push	{r7, lr}
 8005506:	b082      	sub	sp, #8
 8005508:	af00      	add	r7, sp, #0
 800550a:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	2201      	movs	r2, #1
 8005510:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	2200      	movs	r2, #0
 8005518:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	2200      	movs	r2, #0
 8005520:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	2200      	movs	r2, #0
 8005526:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005530:	2b00      	cmp	r3, #0
 8005532:	d101      	bne.n	8005538 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8005534:	2303      	movs	r3, #3
 8005536:	e02f      	b.n	8005598 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800553e:	2b00      	cmp	r3, #0
 8005540:	d00f      	beq.n	8005562 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005548:	685b      	ldr	r3, [r3, #4]
 800554a:	2b00      	cmp	r3, #0
 800554c:	d009      	beq.n	8005562 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005554:	685b      	ldr	r3, [r3, #4]
 8005556:	687a      	ldr	r2, [r7, #4]
 8005558:	6852      	ldr	r2, [r2, #4]
 800555a:	b2d2      	uxtb	r2, r2
 800555c:	4611      	mov	r1, r2
 800555e:	6878      	ldr	r0, [r7, #4]
 8005560:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005562:	2340      	movs	r3, #64	; 0x40
 8005564:	2200      	movs	r2, #0
 8005566:	2100      	movs	r1, #0
 8005568:	6878      	ldr	r0, [r7, #4]
 800556a:	f001 fc04 	bl	8006d76 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	2201      	movs	r2, #1
 8005572:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	2240      	movs	r2, #64	; 0x40
 800557a:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800557e:	2340      	movs	r3, #64	; 0x40
 8005580:	2200      	movs	r2, #0
 8005582:	2180      	movs	r1, #128	; 0x80
 8005584:	6878      	ldr	r0, [r7, #4]
 8005586:	f001 fbf6 	bl	8006d76 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	2201      	movs	r2, #1
 800558e:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	2240      	movs	r2, #64	; 0x40
 8005594:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8005596:	2300      	movs	r3, #0
}
 8005598:	4618      	mov	r0, r3
 800559a:	3708      	adds	r7, #8
 800559c:	46bd      	mov	sp, r7
 800559e:	bd80      	pop	{r7, pc}

080055a0 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80055a0:	b480      	push	{r7}
 80055a2:	b083      	sub	sp, #12
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	6078      	str	r0, [r7, #4]
 80055a8:	460b      	mov	r3, r1
 80055aa:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	78fa      	ldrb	r2, [r7, #3]
 80055b0:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80055b2:	2300      	movs	r3, #0
}
 80055b4:	4618      	mov	r0, r3
 80055b6:	370c      	adds	r7, #12
 80055b8:	46bd      	mov	sp, r7
 80055ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055be:	4770      	bx	lr

080055c0 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80055c0:	b480      	push	{r7}
 80055c2:	b083      	sub	sp, #12
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80055ce:	b2da      	uxtb	r2, r3
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	2204      	movs	r2, #4
 80055da:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80055de:	2300      	movs	r3, #0
}
 80055e0:	4618      	mov	r0, r3
 80055e2:	370c      	adds	r7, #12
 80055e4:	46bd      	mov	sp, r7
 80055e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ea:	4770      	bx	lr

080055ec <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80055ec:	b480      	push	{r7}
 80055ee:	b083      	sub	sp, #12
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80055fa:	b2db      	uxtb	r3, r3
 80055fc:	2b04      	cmp	r3, #4
 80055fe:	d106      	bne.n	800560e <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8005606:	b2da      	uxtb	r2, r3
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800560e:	2300      	movs	r3, #0
}
 8005610:	4618      	mov	r0, r3
 8005612:	370c      	adds	r7, #12
 8005614:	46bd      	mov	sp, r7
 8005616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561a:	4770      	bx	lr

0800561c <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800561c:	b580      	push	{r7, lr}
 800561e:	b082      	sub	sp, #8
 8005620:	af00      	add	r7, sp, #0
 8005622:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800562a:	2b00      	cmp	r3, #0
 800562c:	d101      	bne.n	8005632 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800562e:	2303      	movs	r3, #3
 8005630:	e012      	b.n	8005658 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005638:	b2db      	uxtb	r3, r3
 800563a:	2b03      	cmp	r3, #3
 800563c:	d10b      	bne.n	8005656 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005644:	69db      	ldr	r3, [r3, #28]
 8005646:	2b00      	cmp	r3, #0
 8005648:	d005      	beq.n	8005656 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005650:	69db      	ldr	r3, [r3, #28]
 8005652:	6878      	ldr	r0, [r7, #4]
 8005654:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005656:	2300      	movs	r3, #0
}
 8005658:	4618      	mov	r0, r3
 800565a:	3708      	adds	r7, #8
 800565c:	46bd      	mov	sp, r7
 800565e:	bd80      	pop	{r7, pc}

08005660 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8005660:	b580      	push	{r7, lr}
 8005662:	b082      	sub	sp, #8
 8005664:	af00      	add	r7, sp, #0
 8005666:	6078      	str	r0, [r7, #4]
 8005668:	460b      	mov	r3, r1
 800566a:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005672:	2b00      	cmp	r3, #0
 8005674:	d101      	bne.n	800567a <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 8005676:	2303      	movs	r3, #3
 8005678:	e014      	b.n	80056a4 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005680:	b2db      	uxtb	r3, r3
 8005682:	2b03      	cmp	r3, #3
 8005684:	d10d      	bne.n	80056a2 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800568c:	6a1b      	ldr	r3, [r3, #32]
 800568e:	2b00      	cmp	r3, #0
 8005690:	d007      	beq.n	80056a2 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005698:	6a1b      	ldr	r3, [r3, #32]
 800569a:	78fa      	ldrb	r2, [r7, #3]
 800569c:	4611      	mov	r1, r2
 800569e:	6878      	ldr	r0, [r7, #4]
 80056a0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80056a2:	2300      	movs	r3, #0
}
 80056a4:	4618      	mov	r0, r3
 80056a6:	3708      	adds	r7, #8
 80056a8:	46bd      	mov	sp, r7
 80056aa:	bd80      	pop	{r7, pc}

080056ac <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80056ac:	b580      	push	{r7, lr}
 80056ae:	b082      	sub	sp, #8
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	6078      	str	r0, [r7, #4]
 80056b4:	460b      	mov	r3, r1
 80056b6:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d101      	bne.n	80056c6 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 80056c2:	2303      	movs	r3, #3
 80056c4:	e014      	b.n	80056f0 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80056cc:	b2db      	uxtb	r3, r3
 80056ce:	2b03      	cmp	r3, #3
 80056d0:	d10d      	bne.n	80056ee <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80056d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d007      	beq.n	80056ee <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80056e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056e6:	78fa      	ldrb	r2, [r7, #3]
 80056e8:	4611      	mov	r1, r2
 80056ea:	6878      	ldr	r0, [r7, #4]
 80056ec:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80056ee:	2300      	movs	r3, #0
}
 80056f0:	4618      	mov	r0, r3
 80056f2:	3708      	adds	r7, #8
 80056f4:	46bd      	mov	sp, r7
 80056f6:	bd80      	pop	{r7, pc}

080056f8 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80056f8:	b480      	push	{r7}
 80056fa:	b083      	sub	sp, #12
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005700:	2300      	movs	r3, #0
}
 8005702:	4618      	mov	r0, r3
 8005704:	370c      	adds	r7, #12
 8005706:	46bd      	mov	sp, r7
 8005708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800570c:	4770      	bx	lr

0800570e <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800570e:	b580      	push	{r7, lr}
 8005710:	b082      	sub	sp, #8
 8005712:	af00      	add	r7, sp, #0
 8005714:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	2201      	movs	r2, #1
 800571a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005724:	2b00      	cmp	r3, #0
 8005726:	d009      	beq.n	800573c <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800572e:	685b      	ldr	r3, [r3, #4]
 8005730:	687a      	ldr	r2, [r7, #4]
 8005732:	6852      	ldr	r2, [r2, #4]
 8005734:	b2d2      	uxtb	r2, r2
 8005736:	4611      	mov	r1, r2
 8005738:	6878      	ldr	r0, [r7, #4]
 800573a:	4798      	blx	r3
  }

  return USBD_OK;
 800573c:	2300      	movs	r3, #0
}
 800573e:	4618      	mov	r0, r3
 8005740:	3708      	adds	r7, #8
 8005742:	46bd      	mov	sp, r7
 8005744:	bd80      	pop	{r7, pc}

08005746 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8005746:	b480      	push	{r7}
 8005748:	b087      	sub	sp, #28
 800574a:	af00      	add	r7, sp, #0
 800574c:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8005752:	697b      	ldr	r3, [r7, #20]
 8005754:	781b      	ldrb	r3, [r3, #0]
 8005756:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8005758:	697b      	ldr	r3, [r7, #20]
 800575a:	3301      	adds	r3, #1
 800575c:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800575e:	697b      	ldr	r3, [r7, #20]
 8005760:	781b      	ldrb	r3, [r3, #0]
 8005762:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8005764:	8a3b      	ldrh	r3, [r7, #16]
 8005766:	021b      	lsls	r3, r3, #8
 8005768:	b21a      	sxth	r2, r3
 800576a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800576e:	4313      	orrs	r3, r2
 8005770:	b21b      	sxth	r3, r3
 8005772:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8005774:	89fb      	ldrh	r3, [r7, #14]
}
 8005776:	4618      	mov	r0, r3
 8005778:	371c      	adds	r7, #28
 800577a:	46bd      	mov	sp, r7
 800577c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005780:	4770      	bx	lr
	...

08005784 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005784:	b580      	push	{r7, lr}
 8005786:	b084      	sub	sp, #16
 8005788:	af00      	add	r7, sp, #0
 800578a:	6078      	str	r0, [r7, #4]
 800578c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800578e:	2300      	movs	r3, #0
 8005790:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005792:	683b      	ldr	r3, [r7, #0]
 8005794:	781b      	ldrb	r3, [r3, #0]
 8005796:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800579a:	2b40      	cmp	r3, #64	; 0x40
 800579c:	d005      	beq.n	80057aa <USBD_StdDevReq+0x26>
 800579e:	2b40      	cmp	r3, #64	; 0x40
 80057a0:	d853      	bhi.n	800584a <USBD_StdDevReq+0xc6>
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d00b      	beq.n	80057be <USBD_StdDevReq+0x3a>
 80057a6:	2b20      	cmp	r3, #32
 80057a8:	d14f      	bne.n	800584a <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80057b0:	689b      	ldr	r3, [r3, #8]
 80057b2:	6839      	ldr	r1, [r7, #0]
 80057b4:	6878      	ldr	r0, [r7, #4]
 80057b6:	4798      	blx	r3
 80057b8:	4603      	mov	r3, r0
 80057ba:	73fb      	strb	r3, [r7, #15]
      break;
 80057bc:	e04a      	b.n	8005854 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80057be:	683b      	ldr	r3, [r7, #0]
 80057c0:	785b      	ldrb	r3, [r3, #1]
 80057c2:	2b09      	cmp	r3, #9
 80057c4:	d83b      	bhi.n	800583e <USBD_StdDevReq+0xba>
 80057c6:	a201      	add	r2, pc, #4	; (adr r2, 80057cc <USBD_StdDevReq+0x48>)
 80057c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057cc:	08005821 	.word	0x08005821
 80057d0:	08005835 	.word	0x08005835
 80057d4:	0800583f 	.word	0x0800583f
 80057d8:	0800582b 	.word	0x0800582b
 80057dc:	0800583f 	.word	0x0800583f
 80057e0:	080057ff 	.word	0x080057ff
 80057e4:	080057f5 	.word	0x080057f5
 80057e8:	0800583f 	.word	0x0800583f
 80057ec:	08005817 	.word	0x08005817
 80057f0:	08005809 	.word	0x08005809
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80057f4:	6839      	ldr	r1, [r7, #0]
 80057f6:	6878      	ldr	r0, [r7, #4]
 80057f8:	f000 f9de 	bl	8005bb8 <USBD_GetDescriptor>
          break;
 80057fc:	e024      	b.n	8005848 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80057fe:	6839      	ldr	r1, [r7, #0]
 8005800:	6878      	ldr	r0, [r7, #4]
 8005802:	f000 fb43 	bl	8005e8c <USBD_SetAddress>
          break;
 8005806:	e01f      	b.n	8005848 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8005808:	6839      	ldr	r1, [r7, #0]
 800580a:	6878      	ldr	r0, [r7, #4]
 800580c:	f000 fb82 	bl	8005f14 <USBD_SetConfig>
 8005810:	4603      	mov	r3, r0
 8005812:	73fb      	strb	r3, [r7, #15]
          break;
 8005814:	e018      	b.n	8005848 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8005816:	6839      	ldr	r1, [r7, #0]
 8005818:	6878      	ldr	r0, [r7, #4]
 800581a:	f000 fc21 	bl	8006060 <USBD_GetConfig>
          break;
 800581e:	e013      	b.n	8005848 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8005820:	6839      	ldr	r1, [r7, #0]
 8005822:	6878      	ldr	r0, [r7, #4]
 8005824:	f000 fc52 	bl	80060cc <USBD_GetStatus>
          break;
 8005828:	e00e      	b.n	8005848 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800582a:	6839      	ldr	r1, [r7, #0]
 800582c:	6878      	ldr	r0, [r7, #4]
 800582e:	f000 fc81 	bl	8006134 <USBD_SetFeature>
          break;
 8005832:	e009      	b.n	8005848 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8005834:	6839      	ldr	r1, [r7, #0]
 8005836:	6878      	ldr	r0, [r7, #4]
 8005838:	f000 fc90 	bl	800615c <USBD_ClrFeature>
          break;
 800583c:	e004      	b.n	8005848 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800583e:	6839      	ldr	r1, [r7, #0]
 8005840:	6878      	ldr	r0, [r7, #4]
 8005842:	f000 fce7 	bl	8006214 <USBD_CtlError>
          break;
 8005846:	bf00      	nop
      }
      break;
 8005848:	e004      	b.n	8005854 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800584a:	6839      	ldr	r1, [r7, #0]
 800584c:	6878      	ldr	r0, [r7, #4]
 800584e:	f000 fce1 	bl	8006214 <USBD_CtlError>
      break;
 8005852:	bf00      	nop
  }

  return ret;
 8005854:	7bfb      	ldrb	r3, [r7, #15]
}
 8005856:	4618      	mov	r0, r3
 8005858:	3710      	adds	r7, #16
 800585a:	46bd      	mov	sp, r7
 800585c:	bd80      	pop	{r7, pc}
 800585e:	bf00      	nop

08005860 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005860:	b580      	push	{r7, lr}
 8005862:	b084      	sub	sp, #16
 8005864:	af00      	add	r7, sp, #0
 8005866:	6078      	str	r0, [r7, #4]
 8005868:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800586a:	2300      	movs	r3, #0
 800586c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800586e:	683b      	ldr	r3, [r7, #0]
 8005870:	781b      	ldrb	r3, [r3, #0]
 8005872:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005876:	2b40      	cmp	r3, #64	; 0x40
 8005878:	d005      	beq.n	8005886 <USBD_StdItfReq+0x26>
 800587a:	2b40      	cmp	r3, #64	; 0x40
 800587c:	d82f      	bhi.n	80058de <USBD_StdItfReq+0x7e>
 800587e:	2b00      	cmp	r3, #0
 8005880:	d001      	beq.n	8005886 <USBD_StdItfReq+0x26>
 8005882:	2b20      	cmp	r3, #32
 8005884:	d12b      	bne.n	80058de <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800588c:	b2db      	uxtb	r3, r3
 800588e:	3b01      	subs	r3, #1
 8005890:	2b02      	cmp	r3, #2
 8005892:	d81d      	bhi.n	80058d0 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8005894:	683b      	ldr	r3, [r7, #0]
 8005896:	889b      	ldrh	r3, [r3, #4]
 8005898:	b2db      	uxtb	r3, r3
 800589a:	2b01      	cmp	r3, #1
 800589c:	d813      	bhi.n	80058c6 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80058a4:	689b      	ldr	r3, [r3, #8]
 80058a6:	6839      	ldr	r1, [r7, #0]
 80058a8:	6878      	ldr	r0, [r7, #4]
 80058aa:	4798      	blx	r3
 80058ac:	4603      	mov	r3, r0
 80058ae:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80058b0:	683b      	ldr	r3, [r7, #0]
 80058b2:	88db      	ldrh	r3, [r3, #6]
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d110      	bne.n	80058da <USBD_StdItfReq+0x7a>
 80058b8:	7bfb      	ldrb	r3, [r7, #15]
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d10d      	bne.n	80058da <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 80058be:	6878      	ldr	r0, [r7, #4]
 80058c0:	f000 fd73 	bl	80063aa <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80058c4:	e009      	b.n	80058da <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 80058c6:	6839      	ldr	r1, [r7, #0]
 80058c8:	6878      	ldr	r0, [r7, #4]
 80058ca:	f000 fca3 	bl	8006214 <USBD_CtlError>
          break;
 80058ce:	e004      	b.n	80058da <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 80058d0:	6839      	ldr	r1, [r7, #0]
 80058d2:	6878      	ldr	r0, [r7, #4]
 80058d4:	f000 fc9e 	bl	8006214 <USBD_CtlError>
          break;
 80058d8:	e000      	b.n	80058dc <USBD_StdItfReq+0x7c>
          break;
 80058da:	bf00      	nop
      }
      break;
 80058dc:	e004      	b.n	80058e8 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 80058de:	6839      	ldr	r1, [r7, #0]
 80058e0:	6878      	ldr	r0, [r7, #4]
 80058e2:	f000 fc97 	bl	8006214 <USBD_CtlError>
      break;
 80058e6:	bf00      	nop
  }

  return ret;
 80058e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80058ea:	4618      	mov	r0, r3
 80058ec:	3710      	adds	r7, #16
 80058ee:	46bd      	mov	sp, r7
 80058f0:	bd80      	pop	{r7, pc}

080058f2 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80058f2:	b580      	push	{r7, lr}
 80058f4:	b084      	sub	sp, #16
 80058f6:	af00      	add	r7, sp, #0
 80058f8:	6078      	str	r0, [r7, #4]
 80058fa:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80058fc:	2300      	movs	r3, #0
 80058fe:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8005900:	683b      	ldr	r3, [r7, #0]
 8005902:	889b      	ldrh	r3, [r3, #4]
 8005904:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005906:	683b      	ldr	r3, [r7, #0]
 8005908:	781b      	ldrb	r3, [r3, #0]
 800590a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800590e:	2b40      	cmp	r3, #64	; 0x40
 8005910:	d007      	beq.n	8005922 <USBD_StdEPReq+0x30>
 8005912:	2b40      	cmp	r3, #64	; 0x40
 8005914:	f200 8145 	bhi.w	8005ba2 <USBD_StdEPReq+0x2b0>
 8005918:	2b00      	cmp	r3, #0
 800591a:	d00c      	beq.n	8005936 <USBD_StdEPReq+0x44>
 800591c:	2b20      	cmp	r3, #32
 800591e:	f040 8140 	bne.w	8005ba2 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005928:	689b      	ldr	r3, [r3, #8]
 800592a:	6839      	ldr	r1, [r7, #0]
 800592c:	6878      	ldr	r0, [r7, #4]
 800592e:	4798      	blx	r3
 8005930:	4603      	mov	r3, r0
 8005932:	73fb      	strb	r3, [r7, #15]
      break;
 8005934:	e13a      	b.n	8005bac <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005936:	683b      	ldr	r3, [r7, #0]
 8005938:	785b      	ldrb	r3, [r3, #1]
 800593a:	2b03      	cmp	r3, #3
 800593c:	d007      	beq.n	800594e <USBD_StdEPReq+0x5c>
 800593e:	2b03      	cmp	r3, #3
 8005940:	f300 8129 	bgt.w	8005b96 <USBD_StdEPReq+0x2a4>
 8005944:	2b00      	cmp	r3, #0
 8005946:	d07f      	beq.n	8005a48 <USBD_StdEPReq+0x156>
 8005948:	2b01      	cmp	r3, #1
 800594a:	d03c      	beq.n	80059c6 <USBD_StdEPReq+0xd4>
 800594c:	e123      	b.n	8005b96 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005954:	b2db      	uxtb	r3, r3
 8005956:	2b02      	cmp	r3, #2
 8005958:	d002      	beq.n	8005960 <USBD_StdEPReq+0x6e>
 800595a:	2b03      	cmp	r3, #3
 800595c:	d016      	beq.n	800598c <USBD_StdEPReq+0x9a>
 800595e:	e02c      	b.n	80059ba <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005960:	7bbb      	ldrb	r3, [r7, #14]
 8005962:	2b00      	cmp	r3, #0
 8005964:	d00d      	beq.n	8005982 <USBD_StdEPReq+0x90>
 8005966:	7bbb      	ldrb	r3, [r7, #14]
 8005968:	2b80      	cmp	r3, #128	; 0x80
 800596a:	d00a      	beq.n	8005982 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800596c:	7bbb      	ldrb	r3, [r7, #14]
 800596e:	4619      	mov	r1, r3
 8005970:	6878      	ldr	r0, [r7, #4]
 8005972:	f001 fa45 	bl	8006e00 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8005976:	2180      	movs	r1, #128	; 0x80
 8005978:	6878      	ldr	r0, [r7, #4]
 800597a:	f001 fa41 	bl	8006e00 <USBD_LL_StallEP>
 800597e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005980:	e020      	b.n	80059c4 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8005982:	6839      	ldr	r1, [r7, #0]
 8005984:	6878      	ldr	r0, [r7, #4]
 8005986:	f000 fc45 	bl	8006214 <USBD_CtlError>
              break;
 800598a:	e01b      	b.n	80059c4 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800598c:	683b      	ldr	r3, [r7, #0]
 800598e:	885b      	ldrh	r3, [r3, #2]
 8005990:	2b00      	cmp	r3, #0
 8005992:	d10e      	bne.n	80059b2 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8005994:	7bbb      	ldrb	r3, [r7, #14]
 8005996:	2b00      	cmp	r3, #0
 8005998:	d00b      	beq.n	80059b2 <USBD_StdEPReq+0xc0>
 800599a:	7bbb      	ldrb	r3, [r7, #14]
 800599c:	2b80      	cmp	r3, #128	; 0x80
 800599e:	d008      	beq.n	80059b2 <USBD_StdEPReq+0xc0>
 80059a0:	683b      	ldr	r3, [r7, #0]
 80059a2:	88db      	ldrh	r3, [r3, #6]
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d104      	bne.n	80059b2 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80059a8:	7bbb      	ldrb	r3, [r7, #14]
 80059aa:	4619      	mov	r1, r3
 80059ac:	6878      	ldr	r0, [r7, #4]
 80059ae:	f001 fa27 	bl	8006e00 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80059b2:	6878      	ldr	r0, [r7, #4]
 80059b4:	f000 fcf9 	bl	80063aa <USBD_CtlSendStatus>

              break;
 80059b8:	e004      	b.n	80059c4 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 80059ba:	6839      	ldr	r1, [r7, #0]
 80059bc:	6878      	ldr	r0, [r7, #4]
 80059be:	f000 fc29 	bl	8006214 <USBD_CtlError>
              break;
 80059c2:	bf00      	nop
          }
          break;
 80059c4:	e0ec      	b.n	8005ba0 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80059cc:	b2db      	uxtb	r3, r3
 80059ce:	2b02      	cmp	r3, #2
 80059d0:	d002      	beq.n	80059d8 <USBD_StdEPReq+0xe6>
 80059d2:	2b03      	cmp	r3, #3
 80059d4:	d016      	beq.n	8005a04 <USBD_StdEPReq+0x112>
 80059d6:	e030      	b.n	8005a3a <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80059d8:	7bbb      	ldrb	r3, [r7, #14]
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d00d      	beq.n	80059fa <USBD_StdEPReq+0x108>
 80059de:	7bbb      	ldrb	r3, [r7, #14]
 80059e0:	2b80      	cmp	r3, #128	; 0x80
 80059e2:	d00a      	beq.n	80059fa <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80059e4:	7bbb      	ldrb	r3, [r7, #14]
 80059e6:	4619      	mov	r1, r3
 80059e8:	6878      	ldr	r0, [r7, #4]
 80059ea:	f001 fa09 	bl	8006e00 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80059ee:	2180      	movs	r1, #128	; 0x80
 80059f0:	6878      	ldr	r0, [r7, #4]
 80059f2:	f001 fa05 	bl	8006e00 <USBD_LL_StallEP>
 80059f6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80059f8:	e025      	b.n	8005a46 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 80059fa:	6839      	ldr	r1, [r7, #0]
 80059fc:	6878      	ldr	r0, [r7, #4]
 80059fe:	f000 fc09 	bl	8006214 <USBD_CtlError>
              break;
 8005a02:	e020      	b.n	8005a46 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005a04:	683b      	ldr	r3, [r7, #0]
 8005a06:	885b      	ldrh	r3, [r3, #2]
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d11b      	bne.n	8005a44 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8005a0c:	7bbb      	ldrb	r3, [r7, #14]
 8005a0e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d004      	beq.n	8005a20 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8005a16:	7bbb      	ldrb	r3, [r7, #14]
 8005a18:	4619      	mov	r1, r3
 8005a1a:	6878      	ldr	r0, [r7, #4]
 8005a1c:	f001 fa0f 	bl	8006e3e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8005a20:	6878      	ldr	r0, [r7, #4]
 8005a22:	f000 fcc2 	bl	80063aa <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005a2c:	689b      	ldr	r3, [r3, #8]
 8005a2e:	6839      	ldr	r1, [r7, #0]
 8005a30:	6878      	ldr	r0, [r7, #4]
 8005a32:	4798      	blx	r3
 8005a34:	4603      	mov	r3, r0
 8005a36:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8005a38:	e004      	b.n	8005a44 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8005a3a:	6839      	ldr	r1, [r7, #0]
 8005a3c:	6878      	ldr	r0, [r7, #4]
 8005a3e:	f000 fbe9 	bl	8006214 <USBD_CtlError>
              break;
 8005a42:	e000      	b.n	8005a46 <USBD_StdEPReq+0x154>
              break;
 8005a44:	bf00      	nop
          }
          break;
 8005a46:	e0ab      	b.n	8005ba0 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005a4e:	b2db      	uxtb	r3, r3
 8005a50:	2b02      	cmp	r3, #2
 8005a52:	d002      	beq.n	8005a5a <USBD_StdEPReq+0x168>
 8005a54:	2b03      	cmp	r3, #3
 8005a56:	d032      	beq.n	8005abe <USBD_StdEPReq+0x1cc>
 8005a58:	e097      	b.n	8005b8a <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005a5a:	7bbb      	ldrb	r3, [r7, #14]
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d007      	beq.n	8005a70 <USBD_StdEPReq+0x17e>
 8005a60:	7bbb      	ldrb	r3, [r7, #14]
 8005a62:	2b80      	cmp	r3, #128	; 0x80
 8005a64:	d004      	beq.n	8005a70 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8005a66:	6839      	ldr	r1, [r7, #0]
 8005a68:	6878      	ldr	r0, [r7, #4]
 8005a6a:	f000 fbd3 	bl	8006214 <USBD_CtlError>
                break;
 8005a6e:	e091      	b.n	8005b94 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005a70:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	da0b      	bge.n	8005a90 <USBD_StdEPReq+0x19e>
 8005a78:	7bbb      	ldrb	r3, [r7, #14]
 8005a7a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005a7e:	4613      	mov	r3, r2
 8005a80:	009b      	lsls	r3, r3, #2
 8005a82:	4413      	add	r3, r2
 8005a84:	009b      	lsls	r3, r3, #2
 8005a86:	3310      	adds	r3, #16
 8005a88:	687a      	ldr	r2, [r7, #4]
 8005a8a:	4413      	add	r3, r2
 8005a8c:	3304      	adds	r3, #4
 8005a8e:	e00b      	b.n	8005aa8 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005a90:	7bbb      	ldrb	r3, [r7, #14]
 8005a92:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005a96:	4613      	mov	r3, r2
 8005a98:	009b      	lsls	r3, r3, #2
 8005a9a:	4413      	add	r3, r2
 8005a9c:	009b      	lsls	r3, r3, #2
 8005a9e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005aa2:	687a      	ldr	r2, [r7, #4]
 8005aa4:	4413      	add	r3, r2
 8005aa6:	3304      	adds	r3, #4
 8005aa8:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8005aaa:	68bb      	ldr	r3, [r7, #8]
 8005aac:	2200      	movs	r2, #0
 8005aae:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8005ab0:	68bb      	ldr	r3, [r7, #8]
 8005ab2:	2202      	movs	r2, #2
 8005ab4:	4619      	mov	r1, r3
 8005ab6:	6878      	ldr	r0, [r7, #4]
 8005ab8:	f000 fc1d 	bl	80062f6 <USBD_CtlSendData>
              break;
 8005abc:	e06a      	b.n	8005b94 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8005abe:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	da11      	bge.n	8005aea <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8005ac6:	7bbb      	ldrb	r3, [r7, #14]
 8005ac8:	f003 020f 	and.w	r2, r3, #15
 8005acc:	6879      	ldr	r1, [r7, #4]
 8005ace:	4613      	mov	r3, r2
 8005ad0:	009b      	lsls	r3, r3, #2
 8005ad2:	4413      	add	r3, r2
 8005ad4:	009b      	lsls	r3, r3, #2
 8005ad6:	440b      	add	r3, r1
 8005ad8:	3324      	adds	r3, #36	; 0x24
 8005ada:	881b      	ldrh	r3, [r3, #0]
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d117      	bne.n	8005b10 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8005ae0:	6839      	ldr	r1, [r7, #0]
 8005ae2:	6878      	ldr	r0, [r7, #4]
 8005ae4:	f000 fb96 	bl	8006214 <USBD_CtlError>
                  break;
 8005ae8:	e054      	b.n	8005b94 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8005aea:	7bbb      	ldrb	r3, [r7, #14]
 8005aec:	f003 020f 	and.w	r2, r3, #15
 8005af0:	6879      	ldr	r1, [r7, #4]
 8005af2:	4613      	mov	r3, r2
 8005af4:	009b      	lsls	r3, r3, #2
 8005af6:	4413      	add	r3, r2
 8005af8:	009b      	lsls	r3, r3, #2
 8005afa:	440b      	add	r3, r1
 8005afc:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005b00:	881b      	ldrh	r3, [r3, #0]
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d104      	bne.n	8005b10 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8005b06:	6839      	ldr	r1, [r7, #0]
 8005b08:	6878      	ldr	r0, [r7, #4]
 8005b0a:	f000 fb83 	bl	8006214 <USBD_CtlError>
                  break;
 8005b0e:	e041      	b.n	8005b94 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005b10:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	da0b      	bge.n	8005b30 <USBD_StdEPReq+0x23e>
 8005b18:	7bbb      	ldrb	r3, [r7, #14]
 8005b1a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005b1e:	4613      	mov	r3, r2
 8005b20:	009b      	lsls	r3, r3, #2
 8005b22:	4413      	add	r3, r2
 8005b24:	009b      	lsls	r3, r3, #2
 8005b26:	3310      	adds	r3, #16
 8005b28:	687a      	ldr	r2, [r7, #4]
 8005b2a:	4413      	add	r3, r2
 8005b2c:	3304      	adds	r3, #4
 8005b2e:	e00b      	b.n	8005b48 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005b30:	7bbb      	ldrb	r3, [r7, #14]
 8005b32:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005b36:	4613      	mov	r3, r2
 8005b38:	009b      	lsls	r3, r3, #2
 8005b3a:	4413      	add	r3, r2
 8005b3c:	009b      	lsls	r3, r3, #2
 8005b3e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005b42:	687a      	ldr	r2, [r7, #4]
 8005b44:	4413      	add	r3, r2
 8005b46:	3304      	adds	r3, #4
 8005b48:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8005b4a:	7bbb      	ldrb	r3, [r7, #14]
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d002      	beq.n	8005b56 <USBD_StdEPReq+0x264>
 8005b50:	7bbb      	ldrb	r3, [r7, #14]
 8005b52:	2b80      	cmp	r3, #128	; 0x80
 8005b54:	d103      	bne.n	8005b5e <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8005b56:	68bb      	ldr	r3, [r7, #8]
 8005b58:	2200      	movs	r2, #0
 8005b5a:	601a      	str	r2, [r3, #0]
 8005b5c:	e00e      	b.n	8005b7c <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8005b5e:	7bbb      	ldrb	r3, [r7, #14]
 8005b60:	4619      	mov	r1, r3
 8005b62:	6878      	ldr	r0, [r7, #4]
 8005b64:	f001 f98a 	bl	8006e7c <USBD_LL_IsStallEP>
 8005b68:	4603      	mov	r3, r0
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d003      	beq.n	8005b76 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8005b6e:	68bb      	ldr	r3, [r7, #8]
 8005b70:	2201      	movs	r2, #1
 8005b72:	601a      	str	r2, [r3, #0]
 8005b74:	e002      	b.n	8005b7c <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8005b76:	68bb      	ldr	r3, [r7, #8]
 8005b78:	2200      	movs	r2, #0
 8005b7a:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8005b7c:	68bb      	ldr	r3, [r7, #8]
 8005b7e:	2202      	movs	r2, #2
 8005b80:	4619      	mov	r1, r3
 8005b82:	6878      	ldr	r0, [r7, #4]
 8005b84:	f000 fbb7 	bl	80062f6 <USBD_CtlSendData>
              break;
 8005b88:	e004      	b.n	8005b94 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8005b8a:	6839      	ldr	r1, [r7, #0]
 8005b8c:	6878      	ldr	r0, [r7, #4]
 8005b8e:	f000 fb41 	bl	8006214 <USBD_CtlError>
              break;
 8005b92:	bf00      	nop
          }
          break;
 8005b94:	e004      	b.n	8005ba0 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8005b96:	6839      	ldr	r1, [r7, #0]
 8005b98:	6878      	ldr	r0, [r7, #4]
 8005b9a:	f000 fb3b 	bl	8006214 <USBD_CtlError>
          break;
 8005b9e:	bf00      	nop
      }
      break;
 8005ba0:	e004      	b.n	8005bac <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8005ba2:	6839      	ldr	r1, [r7, #0]
 8005ba4:	6878      	ldr	r0, [r7, #4]
 8005ba6:	f000 fb35 	bl	8006214 <USBD_CtlError>
      break;
 8005baa:	bf00      	nop
  }

  return ret;
 8005bac:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bae:	4618      	mov	r0, r3
 8005bb0:	3710      	adds	r7, #16
 8005bb2:	46bd      	mov	sp, r7
 8005bb4:	bd80      	pop	{r7, pc}
	...

08005bb8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005bb8:	b580      	push	{r7, lr}
 8005bba:	b084      	sub	sp, #16
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	6078      	str	r0, [r7, #4]
 8005bc0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005bc2:	2300      	movs	r3, #0
 8005bc4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8005bc6:	2300      	movs	r3, #0
 8005bc8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8005bca:	2300      	movs	r3, #0
 8005bcc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8005bce:	683b      	ldr	r3, [r7, #0]
 8005bd0:	885b      	ldrh	r3, [r3, #2]
 8005bd2:	0a1b      	lsrs	r3, r3, #8
 8005bd4:	b29b      	uxth	r3, r3
 8005bd6:	3b01      	subs	r3, #1
 8005bd8:	2b06      	cmp	r3, #6
 8005bda:	f200 8128 	bhi.w	8005e2e <USBD_GetDescriptor+0x276>
 8005bde:	a201      	add	r2, pc, #4	; (adr r2, 8005be4 <USBD_GetDescriptor+0x2c>)
 8005be0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005be4:	08005c01 	.word	0x08005c01
 8005be8:	08005c19 	.word	0x08005c19
 8005bec:	08005c59 	.word	0x08005c59
 8005bf0:	08005e2f 	.word	0x08005e2f
 8005bf4:	08005e2f 	.word	0x08005e2f
 8005bf8:	08005dcf 	.word	0x08005dcf
 8005bfc:	08005dfb 	.word	0x08005dfb
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	687a      	ldr	r2, [r7, #4]
 8005c0a:	7c12      	ldrb	r2, [r2, #16]
 8005c0c:	f107 0108 	add.w	r1, r7, #8
 8005c10:	4610      	mov	r0, r2
 8005c12:	4798      	blx	r3
 8005c14:	60f8      	str	r0, [r7, #12]
      break;
 8005c16:	e112      	b.n	8005e3e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	7c1b      	ldrb	r3, [r3, #16]
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d10d      	bne.n	8005c3c <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005c26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c28:	f107 0208 	add.w	r2, r7, #8
 8005c2c:	4610      	mov	r0, r2
 8005c2e:	4798      	blx	r3
 8005c30:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	3301      	adds	r3, #1
 8005c36:	2202      	movs	r2, #2
 8005c38:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8005c3a:	e100      	b.n	8005e3e <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005c42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c44:	f107 0208 	add.w	r2, r7, #8
 8005c48:	4610      	mov	r0, r2
 8005c4a:	4798      	blx	r3
 8005c4c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	3301      	adds	r3, #1
 8005c52:	2202      	movs	r2, #2
 8005c54:	701a      	strb	r2, [r3, #0]
      break;
 8005c56:	e0f2      	b.n	8005e3e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8005c58:	683b      	ldr	r3, [r7, #0]
 8005c5a:	885b      	ldrh	r3, [r3, #2]
 8005c5c:	b2db      	uxtb	r3, r3
 8005c5e:	2b05      	cmp	r3, #5
 8005c60:	f200 80ac 	bhi.w	8005dbc <USBD_GetDescriptor+0x204>
 8005c64:	a201      	add	r2, pc, #4	; (adr r2, 8005c6c <USBD_GetDescriptor+0xb4>)
 8005c66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c6a:	bf00      	nop
 8005c6c:	08005c85 	.word	0x08005c85
 8005c70:	08005cb9 	.word	0x08005cb9
 8005c74:	08005ced 	.word	0x08005ced
 8005c78:	08005d21 	.word	0x08005d21
 8005c7c:	08005d55 	.word	0x08005d55
 8005c80:	08005d89 	.word	0x08005d89
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005c8a:	685b      	ldr	r3, [r3, #4]
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d00b      	beq.n	8005ca8 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005c96:	685b      	ldr	r3, [r3, #4]
 8005c98:	687a      	ldr	r2, [r7, #4]
 8005c9a:	7c12      	ldrb	r2, [r2, #16]
 8005c9c:	f107 0108 	add.w	r1, r7, #8
 8005ca0:	4610      	mov	r0, r2
 8005ca2:	4798      	blx	r3
 8005ca4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005ca6:	e091      	b.n	8005dcc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005ca8:	6839      	ldr	r1, [r7, #0]
 8005caa:	6878      	ldr	r0, [r7, #4]
 8005cac:	f000 fab2 	bl	8006214 <USBD_CtlError>
            err++;
 8005cb0:	7afb      	ldrb	r3, [r7, #11]
 8005cb2:	3301      	adds	r3, #1
 8005cb4:	72fb      	strb	r3, [r7, #11]
          break;
 8005cb6:	e089      	b.n	8005dcc <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005cbe:	689b      	ldr	r3, [r3, #8]
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d00b      	beq.n	8005cdc <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005cca:	689b      	ldr	r3, [r3, #8]
 8005ccc:	687a      	ldr	r2, [r7, #4]
 8005cce:	7c12      	ldrb	r2, [r2, #16]
 8005cd0:	f107 0108 	add.w	r1, r7, #8
 8005cd4:	4610      	mov	r0, r2
 8005cd6:	4798      	blx	r3
 8005cd8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005cda:	e077      	b.n	8005dcc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005cdc:	6839      	ldr	r1, [r7, #0]
 8005cde:	6878      	ldr	r0, [r7, #4]
 8005ce0:	f000 fa98 	bl	8006214 <USBD_CtlError>
            err++;
 8005ce4:	7afb      	ldrb	r3, [r7, #11]
 8005ce6:	3301      	adds	r3, #1
 8005ce8:	72fb      	strb	r3, [r7, #11]
          break;
 8005cea:	e06f      	b.n	8005dcc <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005cf2:	68db      	ldr	r3, [r3, #12]
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d00b      	beq.n	8005d10 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005cfe:	68db      	ldr	r3, [r3, #12]
 8005d00:	687a      	ldr	r2, [r7, #4]
 8005d02:	7c12      	ldrb	r2, [r2, #16]
 8005d04:	f107 0108 	add.w	r1, r7, #8
 8005d08:	4610      	mov	r0, r2
 8005d0a:	4798      	blx	r3
 8005d0c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005d0e:	e05d      	b.n	8005dcc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005d10:	6839      	ldr	r1, [r7, #0]
 8005d12:	6878      	ldr	r0, [r7, #4]
 8005d14:	f000 fa7e 	bl	8006214 <USBD_CtlError>
            err++;
 8005d18:	7afb      	ldrb	r3, [r7, #11]
 8005d1a:	3301      	adds	r3, #1
 8005d1c:	72fb      	strb	r3, [r7, #11]
          break;
 8005d1e:	e055      	b.n	8005dcc <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005d26:	691b      	ldr	r3, [r3, #16]
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d00b      	beq.n	8005d44 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005d32:	691b      	ldr	r3, [r3, #16]
 8005d34:	687a      	ldr	r2, [r7, #4]
 8005d36:	7c12      	ldrb	r2, [r2, #16]
 8005d38:	f107 0108 	add.w	r1, r7, #8
 8005d3c:	4610      	mov	r0, r2
 8005d3e:	4798      	blx	r3
 8005d40:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005d42:	e043      	b.n	8005dcc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005d44:	6839      	ldr	r1, [r7, #0]
 8005d46:	6878      	ldr	r0, [r7, #4]
 8005d48:	f000 fa64 	bl	8006214 <USBD_CtlError>
            err++;
 8005d4c:	7afb      	ldrb	r3, [r7, #11]
 8005d4e:	3301      	adds	r3, #1
 8005d50:	72fb      	strb	r3, [r7, #11]
          break;
 8005d52:	e03b      	b.n	8005dcc <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005d5a:	695b      	ldr	r3, [r3, #20]
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d00b      	beq.n	8005d78 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005d66:	695b      	ldr	r3, [r3, #20]
 8005d68:	687a      	ldr	r2, [r7, #4]
 8005d6a:	7c12      	ldrb	r2, [r2, #16]
 8005d6c:	f107 0108 	add.w	r1, r7, #8
 8005d70:	4610      	mov	r0, r2
 8005d72:	4798      	blx	r3
 8005d74:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005d76:	e029      	b.n	8005dcc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005d78:	6839      	ldr	r1, [r7, #0]
 8005d7a:	6878      	ldr	r0, [r7, #4]
 8005d7c:	f000 fa4a 	bl	8006214 <USBD_CtlError>
            err++;
 8005d80:	7afb      	ldrb	r3, [r7, #11]
 8005d82:	3301      	adds	r3, #1
 8005d84:	72fb      	strb	r3, [r7, #11]
          break;
 8005d86:	e021      	b.n	8005dcc <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005d8e:	699b      	ldr	r3, [r3, #24]
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d00b      	beq.n	8005dac <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005d9a:	699b      	ldr	r3, [r3, #24]
 8005d9c:	687a      	ldr	r2, [r7, #4]
 8005d9e:	7c12      	ldrb	r2, [r2, #16]
 8005da0:	f107 0108 	add.w	r1, r7, #8
 8005da4:	4610      	mov	r0, r2
 8005da6:	4798      	blx	r3
 8005da8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005daa:	e00f      	b.n	8005dcc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005dac:	6839      	ldr	r1, [r7, #0]
 8005dae:	6878      	ldr	r0, [r7, #4]
 8005db0:	f000 fa30 	bl	8006214 <USBD_CtlError>
            err++;
 8005db4:	7afb      	ldrb	r3, [r7, #11]
 8005db6:	3301      	adds	r3, #1
 8005db8:	72fb      	strb	r3, [r7, #11]
          break;
 8005dba:	e007      	b.n	8005dcc <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8005dbc:	6839      	ldr	r1, [r7, #0]
 8005dbe:	6878      	ldr	r0, [r7, #4]
 8005dc0:	f000 fa28 	bl	8006214 <USBD_CtlError>
          err++;
 8005dc4:	7afb      	ldrb	r3, [r7, #11]
 8005dc6:	3301      	adds	r3, #1
 8005dc8:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8005dca:	bf00      	nop
      }
      break;
 8005dcc:	e037      	b.n	8005e3e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	7c1b      	ldrb	r3, [r3, #16]
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d109      	bne.n	8005dea <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ddc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005dde:	f107 0208 	add.w	r2, r7, #8
 8005de2:	4610      	mov	r0, r2
 8005de4:	4798      	blx	r3
 8005de6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005de8:	e029      	b.n	8005e3e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8005dea:	6839      	ldr	r1, [r7, #0]
 8005dec:	6878      	ldr	r0, [r7, #4]
 8005dee:	f000 fa11 	bl	8006214 <USBD_CtlError>
        err++;
 8005df2:	7afb      	ldrb	r3, [r7, #11]
 8005df4:	3301      	adds	r3, #1
 8005df6:	72fb      	strb	r3, [r7, #11]
      break;
 8005df8:	e021      	b.n	8005e3e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	7c1b      	ldrb	r3, [r3, #16]
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d10d      	bne.n	8005e1e <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e0a:	f107 0208 	add.w	r2, r7, #8
 8005e0e:	4610      	mov	r0, r2
 8005e10:	4798      	blx	r3
 8005e12:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	3301      	adds	r3, #1
 8005e18:	2207      	movs	r2, #7
 8005e1a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005e1c:	e00f      	b.n	8005e3e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8005e1e:	6839      	ldr	r1, [r7, #0]
 8005e20:	6878      	ldr	r0, [r7, #4]
 8005e22:	f000 f9f7 	bl	8006214 <USBD_CtlError>
        err++;
 8005e26:	7afb      	ldrb	r3, [r7, #11]
 8005e28:	3301      	adds	r3, #1
 8005e2a:	72fb      	strb	r3, [r7, #11]
      break;
 8005e2c:	e007      	b.n	8005e3e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8005e2e:	6839      	ldr	r1, [r7, #0]
 8005e30:	6878      	ldr	r0, [r7, #4]
 8005e32:	f000 f9ef 	bl	8006214 <USBD_CtlError>
      err++;
 8005e36:	7afb      	ldrb	r3, [r7, #11]
 8005e38:	3301      	adds	r3, #1
 8005e3a:	72fb      	strb	r3, [r7, #11]
      break;
 8005e3c:	bf00      	nop
  }

  if (err != 0U)
 8005e3e:	7afb      	ldrb	r3, [r7, #11]
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d11e      	bne.n	8005e82 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8005e44:	683b      	ldr	r3, [r7, #0]
 8005e46:	88db      	ldrh	r3, [r3, #6]
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d016      	beq.n	8005e7a <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8005e4c:	893b      	ldrh	r3, [r7, #8]
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d00e      	beq.n	8005e70 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8005e52:	683b      	ldr	r3, [r7, #0]
 8005e54:	88da      	ldrh	r2, [r3, #6]
 8005e56:	893b      	ldrh	r3, [r7, #8]
 8005e58:	4293      	cmp	r3, r2
 8005e5a:	bf28      	it	cs
 8005e5c:	4613      	movcs	r3, r2
 8005e5e:	b29b      	uxth	r3, r3
 8005e60:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8005e62:	893b      	ldrh	r3, [r7, #8]
 8005e64:	461a      	mov	r2, r3
 8005e66:	68f9      	ldr	r1, [r7, #12]
 8005e68:	6878      	ldr	r0, [r7, #4]
 8005e6a:	f000 fa44 	bl	80062f6 <USBD_CtlSendData>
 8005e6e:	e009      	b.n	8005e84 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8005e70:	6839      	ldr	r1, [r7, #0]
 8005e72:	6878      	ldr	r0, [r7, #4]
 8005e74:	f000 f9ce 	bl	8006214 <USBD_CtlError>
 8005e78:	e004      	b.n	8005e84 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8005e7a:	6878      	ldr	r0, [r7, #4]
 8005e7c:	f000 fa95 	bl	80063aa <USBD_CtlSendStatus>
 8005e80:	e000      	b.n	8005e84 <USBD_GetDescriptor+0x2cc>
    return;
 8005e82:	bf00      	nop
  }
}
 8005e84:	3710      	adds	r7, #16
 8005e86:	46bd      	mov	sp, r7
 8005e88:	bd80      	pop	{r7, pc}
 8005e8a:	bf00      	nop

08005e8c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005e8c:	b580      	push	{r7, lr}
 8005e8e:	b084      	sub	sp, #16
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	6078      	str	r0, [r7, #4]
 8005e94:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8005e96:	683b      	ldr	r3, [r7, #0]
 8005e98:	889b      	ldrh	r3, [r3, #4]
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d131      	bne.n	8005f02 <USBD_SetAddress+0x76>
 8005e9e:	683b      	ldr	r3, [r7, #0]
 8005ea0:	88db      	ldrh	r3, [r3, #6]
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d12d      	bne.n	8005f02 <USBD_SetAddress+0x76>
 8005ea6:	683b      	ldr	r3, [r7, #0]
 8005ea8:	885b      	ldrh	r3, [r3, #2]
 8005eaa:	2b7f      	cmp	r3, #127	; 0x7f
 8005eac:	d829      	bhi.n	8005f02 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8005eae:	683b      	ldr	r3, [r7, #0]
 8005eb0:	885b      	ldrh	r3, [r3, #2]
 8005eb2:	b2db      	uxtb	r3, r3
 8005eb4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005eb8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005ec0:	b2db      	uxtb	r3, r3
 8005ec2:	2b03      	cmp	r3, #3
 8005ec4:	d104      	bne.n	8005ed0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8005ec6:	6839      	ldr	r1, [r7, #0]
 8005ec8:	6878      	ldr	r0, [r7, #4]
 8005eca:	f000 f9a3 	bl	8006214 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005ece:	e01d      	b.n	8005f0c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	7bfa      	ldrb	r2, [r7, #15]
 8005ed4:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8005ed8:	7bfb      	ldrb	r3, [r7, #15]
 8005eda:	4619      	mov	r1, r3
 8005edc:	6878      	ldr	r0, [r7, #4]
 8005ede:	f000 fff9 	bl	8006ed4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8005ee2:	6878      	ldr	r0, [r7, #4]
 8005ee4:	f000 fa61 	bl	80063aa <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8005ee8:	7bfb      	ldrb	r3, [r7, #15]
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d004      	beq.n	8005ef8 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	2202      	movs	r2, #2
 8005ef2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005ef6:	e009      	b.n	8005f0c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	2201      	movs	r2, #1
 8005efc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005f00:	e004      	b.n	8005f0c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8005f02:	6839      	ldr	r1, [r7, #0]
 8005f04:	6878      	ldr	r0, [r7, #4]
 8005f06:	f000 f985 	bl	8006214 <USBD_CtlError>
  }
}
 8005f0a:	bf00      	nop
 8005f0c:	bf00      	nop
 8005f0e:	3710      	adds	r7, #16
 8005f10:	46bd      	mov	sp, r7
 8005f12:	bd80      	pop	{r7, pc}

08005f14 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005f14:	b580      	push	{r7, lr}
 8005f16:	b084      	sub	sp, #16
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	6078      	str	r0, [r7, #4]
 8005f1c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005f1e:	2300      	movs	r3, #0
 8005f20:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8005f22:	683b      	ldr	r3, [r7, #0]
 8005f24:	885b      	ldrh	r3, [r3, #2]
 8005f26:	b2da      	uxtb	r2, r3
 8005f28:	4b4c      	ldr	r3, [pc, #304]	; (800605c <USBD_SetConfig+0x148>)
 8005f2a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8005f2c:	4b4b      	ldr	r3, [pc, #300]	; (800605c <USBD_SetConfig+0x148>)
 8005f2e:	781b      	ldrb	r3, [r3, #0]
 8005f30:	2b01      	cmp	r3, #1
 8005f32:	d905      	bls.n	8005f40 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8005f34:	6839      	ldr	r1, [r7, #0]
 8005f36:	6878      	ldr	r0, [r7, #4]
 8005f38:	f000 f96c 	bl	8006214 <USBD_CtlError>
    return USBD_FAIL;
 8005f3c:	2303      	movs	r3, #3
 8005f3e:	e088      	b.n	8006052 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005f46:	b2db      	uxtb	r3, r3
 8005f48:	2b02      	cmp	r3, #2
 8005f4a:	d002      	beq.n	8005f52 <USBD_SetConfig+0x3e>
 8005f4c:	2b03      	cmp	r3, #3
 8005f4e:	d025      	beq.n	8005f9c <USBD_SetConfig+0x88>
 8005f50:	e071      	b.n	8006036 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8005f52:	4b42      	ldr	r3, [pc, #264]	; (800605c <USBD_SetConfig+0x148>)
 8005f54:	781b      	ldrb	r3, [r3, #0]
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d01c      	beq.n	8005f94 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8005f5a:	4b40      	ldr	r3, [pc, #256]	; (800605c <USBD_SetConfig+0x148>)
 8005f5c:	781b      	ldrb	r3, [r3, #0]
 8005f5e:	461a      	mov	r2, r3
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8005f64:	4b3d      	ldr	r3, [pc, #244]	; (800605c <USBD_SetConfig+0x148>)
 8005f66:	781b      	ldrb	r3, [r3, #0]
 8005f68:	4619      	mov	r1, r3
 8005f6a:	6878      	ldr	r0, [r7, #4]
 8005f6c:	f7ff f948 	bl	8005200 <USBD_SetClassConfig>
 8005f70:	4603      	mov	r3, r0
 8005f72:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8005f74:	7bfb      	ldrb	r3, [r7, #15]
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d004      	beq.n	8005f84 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8005f7a:	6839      	ldr	r1, [r7, #0]
 8005f7c:	6878      	ldr	r0, [r7, #4]
 8005f7e:	f000 f949 	bl	8006214 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8005f82:	e065      	b.n	8006050 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8005f84:	6878      	ldr	r0, [r7, #4]
 8005f86:	f000 fa10 	bl	80063aa <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	2203      	movs	r2, #3
 8005f8e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8005f92:	e05d      	b.n	8006050 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8005f94:	6878      	ldr	r0, [r7, #4]
 8005f96:	f000 fa08 	bl	80063aa <USBD_CtlSendStatus>
      break;
 8005f9a:	e059      	b.n	8006050 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8005f9c:	4b2f      	ldr	r3, [pc, #188]	; (800605c <USBD_SetConfig+0x148>)
 8005f9e:	781b      	ldrb	r3, [r3, #0]
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d112      	bne.n	8005fca <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	2202      	movs	r2, #2
 8005fa8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8005fac:	4b2b      	ldr	r3, [pc, #172]	; (800605c <USBD_SetConfig+0x148>)
 8005fae:	781b      	ldrb	r3, [r3, #0]
 8005fb0:	461a      	mov	r2, r3
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8005fb6:	4b29      	ldr	r3, [pc, #164]	; (800605c <USBD_SetConfig+0x148>)
 8005fb8:	781b      	ldrb	r3, [r3, #0]
 8005fba:	4619      	mov	r1, r3
 8005fbc:	6878      	ldr	r0, [r7, #4]
 8005fbe:	f7ff f93b 	bl	8005238 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8005fc2:	6878      	ldr	r0, [r7, #4]
 8005fc4:	f000 f9f1 	bl	80063aa <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8005fc8:	e042      	b.n	8006050 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8005fca:	4b24      	ldr	r3, [pc, #144]	; (800605c <USBD_SetConfig+0x148>)
 8005fcc:	781b      	ldrb	r3, [r3, #0]
 8005fce:	461a      	mov	r2, r3
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	685b      	ldr	r3, [r3, #4]
 8005fd4:	429a      	cmp	r2, r3
 8005fd6:	d02a      	beq.n	800602e <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	685b      	ldr	r3, [r3, #4]
 8005fdc:	b2db      	uxtb	r3, r3
 8005fde:	4619      	mov	r1, r3
 8005fe0:	6878      	ldr	r0, [r7, #4]
 8005fe2:	f7ff f929 	bl	8005238 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8005fe6:	4b1d      	ldr	r3, [pc, #116]	; (800605c <USBD_SetConfig+0x148>)
 8005fe8:	781b      	ldrb	r3, [r3, #0]
 8005fea:	461a      	mov	r2, r3
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8005ff0:	4b1a      	ldr	r3, [pc, #104]	; (800605c <USBD_SetConfig+0x148>)
 8005ff2:	781b      	ldrb	r3, [r3, #0]
 8005ff4:	4619      	mov	r1, r3
 8005ff6:	6878      	ldr	r0, [r7, #4]
 8005ff8:	f7ff f902 	bl	8005200 <USBD_SetClassConfig>
 8005ffc:	4603      	mov	r3, r0
 8005ffe:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8006000:	7bfb      	ldrb	r3, [r7, #15]
 8006002:	2b00      	cmp	r3, #0
 8006004:	d00f      	beq.n	8006026 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8006006:	6839      	ldr	r1, [r7, #0]
 8006008:	6878      	ldr	r0, [r7, #4]
 800600a:	f000 f903 	bl	8006214 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	685b      	ldr	r3, [r3, #4]
 8006012:	b2db      	uxtb	r3, r3
 8006014:	4619      	mov	r1, r3
 8006016:	6878      	ldr	r0, [r7, #4]
 8006018:	f7ff f90e 	bl	8005238 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	2202      	movs	r2, #2
 8006020:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8006024:	e014      	b.n	8006050 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8006026:	6878      	ldr	r0, [r7, #4]
 8006028:	f000 f9bf 	bl	80063aa <USBD_CtlSendStatus>
      break;
 800602c:	e010      	b.n	8006050 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800602e:	6878      	ldr	r0, [r7, #4]
 8006030:	f000 f9bb 	bl	80063aa <USBD_CtlSendStatus>
      break;
 8006034:	e00c      	b.n	8006050 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8006036:	6839      	ldr	r1, [r7, #0]
 8006038:	6878      	ldr	r0, [r7, #4]
 800603a:	f000 f8eb 	bl	8006214 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800603e:	4b07      	ldr	r3, [pc, #28]	; (800605c <USBD_SetConfig+0x148>)
 8006040:	781b      	ldrb	r3, [r3, #0]
 8006042:	4619      	mov	r1, r3
 8006044:	6878      	ldr	r0, [r7, #4]
 8006046:	f7ff f8f7 	bl	8005238 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800604a:	2303      	movs	r3, #3
 800604c:	73fb      	strb	r3, [r7, #15]
      break;
 800604e:	bf00      	nop
  }

  return ret;
 8006050:	7bfb      	ldrb	r3, [r7, #15]
}
 8006052:	4618      	mov	r0, r3
 8006054:	3710      	adds	r7, #16
 8006056:	46bd      	mov	sp, r7
 8006058:	bd80      	pop	{r7, pc}
 800605a:	bf00      	nop
 800605c:	20000258 	.word	0x20000258

08006060 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006060:	b580      	push	{r7, lr}
 8006062:	b082      	sub	sp, #8
 8006064:	af00      	add	r7, sp, #0
 8006066:	6078      	str	r0, [r7, #4]
 8006068:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800606a:	683b      	ldr	r3, [r7, #0]
 800606c:	88db      	ldrh	r3, [r3, #6]
 800606e:	2b01      	cmp	r3, #1
 8006070:	d004      	beq.n	800607c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8006072:	6839      	ldr	r1, [r7, #0]
 8006074:	6878      	ldr	r0, [r7, #4]
 8006076:	f000 f8cd 	bl	8006214 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800607a:	e023      	b.n	80060c4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006082:	b2db      	uxtb	r3, r3
 8006084:	2b02      	cmp	r3, #2
 8006086:	dc02      	bgt.n	800608e <USBD_GetConfig+0x2e>
 8006088:	2b00      	cmp	r3, #0
 800608a:	dc03      	bgt.n	8006094 <USBD_GetConfig+0x34>
 800608c:	e015      	b.n	80060ba <USBD_GetConfig+0x5a>
 800608e:	2b03      	cmp	r3, #3
 8006090:	d00b      	beq.n	80060aa <USBD_GetConfig+0x4a>
 8006092:	e012      	b.n	80060ba <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	2200      	movs	r2, #0
 8006098:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	3308      	adds	r3, #8
 800609e:	2201      	movs	r2, #1
 80060a0:	4619      	mov	r1, r3
 80060a2:	6878      	ldr	r0, [r7, #4]
 80060a4:	f000 f927 	bl	80062f6 <USBD_CtlSendData>
        break;
 80060a8:	e00c      	b.n	80060c4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	3304      	adds	r3, #4
 80060ae:	2201      	movs	r2, #1
 80060b0:	4619      	mov	r1, r3
 80060b2:	6878      	ldr	r0, [r7, #4]
 80060b4:	f000 f91f 	bl	80062f6 <USBD_CtlSendData>
        break;
 80060b8:	e004      	b.n	80060c4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80060ba:	6839      	ldr	r1, [r7, #0]
 80060bc:	6878      	ldr	r0, [r7, #4]
 80060be:	f000 f8a9 	bl	8006214 <USBD_CtlError>
        break;
 80060c2:	bf00      	nop
}
 80060c4:	bf00      	nop
 80060c6:	3708      	adds	r7, #8
 80060c8:	46bd      	mov	sp, r7
 80060ca:	bd80      	pop	{r7, pc}

080060cc <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80060cc:	b580      	push	{r7, lr}
 80060ce:	b082      	sub	sp, #8
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	6078      	str	r0, [r7, #4]
 80060d4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80060dc:	b2db      	uxtb	r3, r3
 80060de:	3b01      	subs	r3, #1
 80060e0:	2b02      	cmp	r3, #2
 80060e2:	d81e      	bhi.n	8006122 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80060e4:	683b      	ldr	r3, [r7, #0]
 80060e6:	88db      	ldrh	r3, [r3, #6]
 80060e8:	2b02      	cmp	r3, #2
 80060ea:	d004      	beq.n	80060f6 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80060ec:	6839      	ldr	r1, [r7, #0]
 80060ee:	6878      	ldr	r0, [r7, #4]
 80060f0:	f000 f890 	bl	8006214 <USBD_CtlError>
        break;
 80060f4:	e01a      	b.n	800612c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	2201      	movs	r2, #1
 80060fa:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8006102:	2b00      	cmp	r3, #0
 8006104:	d005      	beq.n	8006112 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	68db      	ldr	r3, [r3, #12]
 800610a:	f043 0202 	orr.w	r2, r3, #2
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	330c      	adds	r3, #12
 8006116:	2202      	movs	r2, #2
 8006118:	4619      	mov	r1, r3
 800611a:	6878      	ldr	r0, [r7, #4]
 800611c:	f000 f8eb 	bl	80062f6 <USBD_CtlSendData>
      break;
 8006120:	e004      	b.n	800612c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8006122:	6839      	ldr	r1, [r7, #0]
 8006124:	6878      	ldr	r0, [r7, #4]
 8006126:	f000 f875 	bl	8006214 <USBD_CtlError>
      break;
 800612a:	bf00      	nop
  }
}
 800612c:	bf00      	nop
 800612e:	3708      	adds	r7, #8
 8006130:	46bd      	mov	sp, r7
 8006132:	bd80      	pop	{r7, pc}

08006134 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006134:	b580      	push	{r7, lr}
 8006136:	b082      	sub	sp, #8
 8006138:	af00      	add	r7, sp, #0
 800613a:	6078      	str	r0, [r7, #4]
 800613c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800613e:	683b      	ldr	r3, [r7, #0]
 8006140:	885b      	ldrh	r3, [r3, #2]
 8006142:	2b01      	cmp	r3, #1
 8006144:	d106      	bne.n	8006154 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	2201      	movs	r2, #1
 800614a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800614e:	6878      	ldr	r0, [r7, #4]
 8006150:	f000 f92b 	bl	80063aa <USBD_CtlSendStatus>
  }
}
 8006154:	bf00      	nop
 8006156:	3708      	adds	r7, #8
 8006158:	46bd      	mov	sp, r7
 800615a:	bd80      	pop	{r7, pc}

0800615c <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800615c:	b580      	push	{r7, lr}
 800615e:	b082      	sub	sp, #8
 8006160:	af00      	add	r7, sp, #0
 8006162:	6078      	str	r0, [r7, #4]
 8006164:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800616c:	b2db      	uxtb	r3, r3
 800616e:	3b01      	subs	r3, #1
 8006170:	2b02      	cmp	r3, #2
 8006172:	d80b      	bhi.n	800618c <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006174:	683b      	ldr	r3, [r7, #0]
 8006176:	885b      	ldrh	r3, [r3, #2]
 8006178:	2b01      	cmp	r3, #1
 800617a:	d10c      	bne.n	8006196 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	2200      	movs	r2, #0
 8006180:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8006184:	6878      	ldr	r0, [r7, #4]
 8006186:	f000 f910 	bl	80063aa <USBD_CtlSendStatus>
      }
      break;
 800618a:	e004      	b.n	8006196 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800618c:	6839      	ldr	r1, [r7, #0]
 800618e:	6878      	ldr	r0, [r7, #4]
 8006190:	f000 f840 	bl	8006214 <USBD_CtlError>
      break;
 8006194:	e000      	b.n	8006198 <USBD_ClrFeature+0x3c>
      break;
 8006196:	bf00      	nop
  }
}
 8006198:	bf00      	nop
 800619a:	3708      	adds	r7, #8
 800619c:	46bd      	mov	sp, r7
 800619e:	bd80      	pop	{r7, pc}

080061a0 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80061a0:	b580      	push	{r7, lr}
 80061a2:	b084      	sub	sp, #16
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	6078      	str	r0, [r7, #4]
 80061a8:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80061aa:	683b      	ldr	r3, [r7, #0]
 80061ac:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	781a      	ldrb	r2, [r3, #0]
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	3301      	adds	r3, #1
 80061ba:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	781a      	ldrb	r2, [r3, #0]
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	3301      	adds	r3, #1
 80061c8:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80061ca:	68f8      	ldr	r0, [r7, #12]
 80061cc:	f7ff fabb 	bl	8005746 <SWAPBYTE>
 80061d0:	4603      	mov	r3, r0
 80061d2:	461a      	mov	r2, r3
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	3301      	adds	r3, #1
 80061dc:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	3301      	adds	r3, #1
 80061e2:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80061e4:	68f8      	ldr	r0, [r7, #12]
 80061e6:	f7ff faae 	bl	8005746 <SWAPBYTE>
 80061ea:	4603      	mov	r3, r0
 80061ec:	461a      	mov	r2, r3
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	3301      	adds	r3, #1
 80061f6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	3301      	adds	r3, #1
 80061fc:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80061fe:	68f8      	ldr	r0, [r7, #12]
 8006200:	f7ff faa1 	bl	8005746 <SWAPBYTE>
 8006204:	4603      	mov	r3, r0
 8006206:	461a      	mov	r2, r3
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	80da      	strh	r2, [r3, #6]
}
 800620c:	bf00      	nop
 800620e:	3710      	adds	r7, #16
 8006210:	46bd      	mov	sp, r7
 8006212:	bd80      	pop	{r7, pc}

08006214 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006214:	b580      	push	{r7, lr}
 8006216:	b082      	sub	sp, #8
 8006218:	af00      	add	r7, sp, #0
 800621a:	6078      	str	r0, [r7, #4]
 800621c:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800621e:	2180      	movs	r1, #128	; 0x80
 8006220:	6878      	ldr	r0, [r7, #4]
 8006222:	f000 fded 	bl	8006e00 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8006226:	2100      	movs	r1, #0
 8006228:	6878      	ldr	r0, [r7, #4]
 800622a:	f000 fde9 	bl	8006e00 <USBD_LL_StallEP>
}
 800622e:	bf00      	nop
 8006230:	3708      	adds	r7, #8
 8006232:	46bd      	mov	sp, r7
 8006234:	bd80      	pop	{r7, pc}

08006236 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006236:	b580      	push	{r7, lr}
 8006238:	b086      	sub	sp, #24
 800623a:	af00      	add	r7, sp, #0
 800623c:	60f8      	str	r0, [r7, #12]
 800623e:	60b9      	str	r1, [r7, #8]
 8006240:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006242:	2300      	movs	r3, #0
 8006244:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	2b00      	cmp	r3, #0
 800624a:	d036      	beq.n	80062ba <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8006250:	6938      	ldr	r0, [r7, #16]
 8006252:	f000 f836 	bl	80062c2 <USBD_GetLen>
 8006256:	4603      	mov	r3, r0
 8006258:	3301      	adds	r3, #1
 800625a:	b29b      	uxth	r3, r3
 800625c:	005b      	lsls	r3, r3, #1
 800625e:	b29a      	uxth	r2, r3
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8006264:	7dfb      	ldrb	r3, [r7, #23]
 8006266:	68ba      	ldr	r2, [r7, #8]
 8006268:	4413      	add	r3, r2
 800626a:	687a      	ldr	r2, [r7, #4]
 800626c:	7812      	ldrb	r2, [r2, #0]
 800626e:	701a      	strb	r2, [r3, #0]
  idx++;
 8006270:	7dfb      	ldrb	r3, [r7, #23]
 8006272:	3301      	adds	r3, #1
 8006274:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8006276:	7dfb      	ldrb	r3, [r7, #23]
 8006278:	68ba      	ldr	r2, [r7, #8]
 800627a:	4413      	add	r3, r2
 800627c:	2203      	movs	r2, #3
 800627e:	701a      	strb	r2, [r3, #0]
  idx++;
 8006280:	7dfb      	ldrb	r3, [r7, #23]
 8006282:	3301      	adds	r3, #1
 8006284:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8006286:	e013      	b.n	80062b0 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8006288:	7dfb      	ldrb	r3, [r7, #23]
 800628a:	68ba      	ldr	r2, [r7, #8]
 800628c:	4413      	add	r3, r2
 800628e:	693a      	ldr	r2, [r7, #16]
 8006290:	7812      	ldrb	r2, [r2, #0]
 8006292:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8006294:	693b      	ldr	r3, [r7, #16]
 8006296:	3301      	adds	r3, #1
 8006298:	613b      	str	r3, [r7, #16]
    idx++;
 800629a:	7dfb      	ldrb	r3, [r7, #23]
 800629c:	3301      	adds	r3, #1
 800629e:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80062a0:	7dfb      	ldrb	r3, [r7, #23]
 80062a2:	68ba      	ldr	r2, [r7, #8]
 80062a4:	4413      	add	r3, r2
 80062a6:	2200      	movs	r2, #0
 80062a8:	701a      	strb	r2, [r3, #0]
    idx++;
 80062aa:	7dfb      	ldrb	r3, [r7, #23]
 80062ac:	3301      	adds	r3, #1
 80062ae:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80062b0:	693b      	ldr	r3, [r7, #16]
 80062b2:	781b      	ldrb	r3, [r3, #0]
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d1e7      	bne.n	8006288 <USBD_GetString+0x52>
 80062b8:	e000      	b.n	80062bc <USBD_GetString+0x86>
    return;
 80062ba:	bf00      	nop
  }
}
 80062bc:	3718      	adds	r7, #24
 80062be:	46bd      	mov	sp, r7
 80062c0:	bd80      	pop	{r7, pc}

080062c2 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80062c2:	b480      	push	{r7}
 80062c4:	b085      	sub	sp, #20
 80062c6:	af00      	add	r7, sp, #0
 80062c8:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80062ca:	2300      	movs	r3, #0
 80062cc:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80062d2:	e005      	b.n	80062e0 <USBD_GetLen+0x1e>
  {
    len++;
 80062d4:	7bfb      	ldrb	r3, [r7, #15]
 80062d6:	3301      	adds	r3, #1
 80062d8:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80062da:	68bb      	ldr	r3, [r7, #8]
 80062dc:	3301      	adds	r3, #1
 80062de:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80062e0:	68bb      	ldr	r3, [r7, #8]
 80062e2:	781b      	ldrb	r3, [r3, #0]
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d1f5      	bne.n	80062d4 <USBD_GetLen+0x12>
  }

  return len;
 80062e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80062ea:	4618      	mov	r0, r3
 80062ec:	3714      	adds	r7, #20
 80062ee:	46bd      	mov	sp, r7
 80062f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f4:	4770      	bx	lr

080062f6 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80062f6:	b580      	push	{r7, lr}
 80062f8:	b084      	sub	sp, #16
 80062fa:	af00      	add	r7, sp, #0
 80062fc:	60f8      	str	r0, [r7, #12]
 80062fe:	60b9      	str	r1, [r7, #8]
 8006300:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	2202      	movs	r2, #2
 8006306:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	687a      	ldr	r2, [r7, #4]
 800630e:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	687a      	ldr	r2, [r7, #4]
 8006314:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	68ba      	ldr	r2, [r7, #8]
 800631a:	2100      	movs	r1, #0
 800631c:	68f8      	ldr	r0, [r7, #12]
 800631e:	f000 fdf8 	bl	8006f12 <USBD_LL_Transmit>

  return USBD_OK;
 8006322:	2300      	movs	r3, #0
}
 8006324:	4618      	mov	r0, r3
 8006326:	3710      	adds	r7, #16
 8006328:	46bd      	mov	sp, r7
 800632a:	bd80      	pop	{r7, pc}

0800632c <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800632c:	b580      	push	{r7, lr}
 800632e:	b084      	sub	sp, #16
 8006330:	af00      	add	r7, sp, #0
 8006332:	60f8      	str	r0, [r7, #12]
 8006334:	60b9      	str	r1, [r7, #8]
 8006336:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	68ba      	ldr	r2, [r7, #8]
 800633c:	2100      	movs	r1, #0
 800633e:	68f8      	ldr	r0, [r7, #12]
 8006340:	f000 fde7 	bl	8006f12 <USBD_LL_Transmit>

  return USBD_OK;
 8006344:	2300      	movs	r3, #0
}
 8006346:	4618      	mov	r0, r3
 8006348:	3710      	adds	r7, #16
 800634a:	46bd      	mov	sp, r7
 800634c:	bd80      	pop	{r7, pc}

0800634e <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800634e:	b580      	push	{r7, lr}
 8006350:	b084      	sub	sp, #16
 8006352:	af00      	add	r7, sp, #0
 8006354:	60f8      	str	r0, [r7, #12]
 8006356:	60b9      	str	r1, [r7, #8]
 8006358:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	2203      	movs	r2, #3
 800635e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	687a      	ldr	r2, [r7, #4]
 8006366:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	687a      	ldr	r2, [r7, #4]
 800636e:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	68ba      	ldr	r2, [r7, #8]
 8006376:	2100      	movs	r1, #0
 8006378:	68f8      	ldr	r0, [r7, #12]
 800637a:	f000 fdeb 	bl	8006f54 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800637e:	2300      	movs	r3, #0
}
 8006380:	4618      	mov	r0, r3
 8006382:	3710      	adds	r7, #16
 8006384:	46bd      	mov	sp, r7
 8006386:	bd80      	pop	{r7, pc}

08006388 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8006388:	b580      	push	{r7, lr}
 800638a:	b084      	sub	sp, #16
 800638c:	af00      	add	r7, sp, #0
 800638e:	60f8      	str	r0, [r7, #12]
 8006390:	60b9      	str	r1, [r7, #8]
 8006392:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	68ba      	ldr	r2, [r7, #8]
 8006398:	2100      	movs	r1, #0
 800639a:	68f8      	ldr	r0, [r7, #12]
 800639c:	f000 fdda 	bl	8006f54 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80063a0:	2300      	movs	r3, #0
}
 80063a2:	4618      	mov	r0, r3
 80063a4:	3710      	adds	r7, #16
 80063a6:	46bd      	mov	sp, r7
 80063a8:	bd80      	pop	{r7, pc}

080063aa <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80063aa:	b580      	push	{r7, lr}
 80063ac:	b082      	sub	sp, #8
 80063ae:	af00      	add	r7, sp, #0
 80063b0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	2204      	movs	r2, #4
 80063b6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80063ba:	2300      	movs	r3, #0
 80063bc:	2200      	movs	r2, #0
 80063be:	2100      	movs	r1, #0
 80063c0:	6878      	ldr	r0, [r7, #4]
 80063c2:	f000 fda6 	bl	8006f12 <USBD_LL_Transmit>

  return USBD_OK;
 80063c6:	2300      	movs	r3, #0
}
 80063c8:	4618      	mov	r0, r3
 80063ca:	3708      	adds	r7, #8
 80063cc:	46bd      	mov	sp, r7
 80063ce:	bd80      	pop	{r7, pc}

080063d0 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80063d0:	b580      	push	{r7, lr}
 80063d2:	b082      	sub	sp, #8
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	2205      	movs	r2, #5
 80063dc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80063e0:	2300      	movs	r3, #0
 80063e2:	2200      	movs	r2, #0
 80063e4:	2100      	movs	r1, #0
 80063e6:	6878      	ldr	r0, [r7, #4]
 80063e8:	f000 fdb4 	bl	8006f54 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80063ec:	2300      	movs	r3, #0
}
 80063ee:	4618      	mov	r0, r3
 80063f0:	3708      	adds	r7, #8
 80063f2:	46bd      	mov	sp, r7
 80063f4:	bd80      	pop	{r7, pc}
	...

080063f8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80063f8:	b580      	push	{r7, lr}
 80063fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80063fc:	2200      	movs	r2, #0
 80063fe:	4912      	ldr	r1, [pc, #72]	; (8006448 <MX_USB_DEVICE_Init+0x50>)
 8006400:	4812      	ldr	r0, [pc, #72]	; (800644c <MX_USB_DEVICE_Init+0x54>)
 8006402:	f7fe fe8f 	bl	8005124 <USBD_Init>
 8006406:	4603      	mov	r3, r0
 8006408:	2b00      	cmp	r3, #0
 800640a:	d001      	beq.n	8006410 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800640c:	f7fa f9cc 	bl	80007a8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8006410:	490f      	ldr	r1, [pc, #60]	; (8006450 <MX_USB_DEVICE_Init+0x58>)
 8006412:	480e      	ldr	r0, [pc, #56]	; (800644c <MX_USB_DEVICE_Init+0x54>)
 8006414:	f7fe feb6 	bl	8005184 <USBD_RegisterClass>
 8006418:	4603      	mov	r3, r0
 800641a:	2b00      	cmp	r3, #0
 800641c:	d001      	beq.n	8006422 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800641e:	f7fa f9c3 	bl	80007a8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8006422:	490c      	ldr	r1, [pc, #48]	; (8006454 <MX_USB_DEVICE_Init+0x5c>)
 8006424:	4809      	ldr	r0, [pc, #36]	; (800644c <MX_USB_DEVICE_Init+0x54>)
 8006426:	f7fe fdd7 	bl	8004fd8 <USBD_CDC_RegisterInterface>
 800642a:	4603      	mov	r3, r0
 800642c:	2b00      	cmp	r3, #0
 800642e:	d001      	beq.n	8006434 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8006430:	f7fa f9ba 	bl	80007a8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8006434:	4805      	ldr	r0, [pc, #20]	; (800644c <MX_USB_DEVICE_Init+0x54>)
 8006436:	f7fe fecc 	bl	80051d2 <USBD_Start>
 800643a:	4603      	mov	r3, r0
 800643c:	2b00      	cmp	r3, #0
 800643e:	d001      	beq.n	8006444 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8006440:	f7fa f9b2 	bl	80007a8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8006444:	bf00      	nop
 8006446:	bd80      	pop	{r7, pc}
 8006448:	20000158 	.word	0x20000158
 800644c:	2000025c 	.word	0x2000025c
 8006450:	2000003c 	.word	0x2000003c
 8006454:	20000144 	.word	0x20000144

08006458 <cdcAvailable>:
uint32_t rx_out;			//read buffer
uint32_t rx_len=512;
uint8_t rx_buf[512];

uint32_t cdcAvailable(void)
{
 8006458:	b480      	push	{r7}
 800645a:	b083      	sub	sp, #12
 800645c:	af00      	add	r7, sp, #0
	uint32_t ret;

	ret = (rx_in - rx_out) % rx_len;
 800645e:	4b0a      	ldr	r3, [pc, #40]	; (8006488 <cdcAvailable+0x30>)
 8006460:	681a      	ldr	r2, [r3, #0]
 8006462:	4b0a      	ldr	r3, [pc, #40]	; (800648c <cdcAvailable+0x34>)
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	1ad3      	subs	r3, r2, r3
 8006468:	4a09      	ldr	r2, [pc, #36]	; (8006490 <cdcAvailable+0x38>)
 800646a:	6812      	ldr	r2, [r2, #0]
 800646c:	fbb3 f1f2 	udiv	r1, r3, r2
 8006470:	fb01 f202 	mul.w	r2, r1, r2
 8006474:	1a9b      	subs	r3, r3, r2
 8006476:	607b      	str	r3, [r7, #4]

	return ret;
 8006478:	687b      	ldr	r3, [r7, #4]
}
 800647a:	4618      	mov	r0, r3
 800647c:	370c      	adds	r7, #12
 800647e:	46bd      	mov	sp, r7
 8006480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006484:	4770      	bx	lr
 8006486:	bf00      	nop
 8006488:	20000534 	.word	0x20000534
 800648c:	20000538 	.word	0x20000538
 8006490:	20000140 	.word	0x20000140

08006494 <cdcRead>:

uint8_t cdcRead(void)
{
 8006494:	b480      	push	{r7}
 8006496:	b083      	sub	sp, #12
 8006498:	af00      	add	r7, sp, #0
	uint8_t ret;
	ret = rx_buf[rx_out];
 800649a:	4b0f      	ldr	r3, [pc, #60]	; (80064d8 <cdcRead+0x44>)
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	4a0f      	ldr	r2, [pc, #60]	; (80064dc <cdcRead+0x48>)
 80064a0:	5cd3      	ldrb	r3, [r2, r3]
 80064a2:	71fb      	strb	r3, [r7, #7]

	if(rx_out != rx_in)
 80064a4:	4b0c      	ldr	r3, [pc, #48]	; (80064d8 <cdcRead+0x44>)
 80064a6:	681a      	ldr	r2, [r3, #0]
 80064a8:	4b0d      	ldr	r3, [pc, #52]	; (80064e0 <cdcRead+0x4c>)
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	429a      	cmp	r2, r3
 80064ae:	d00b      	beq.n	80064c8 <cdcRead+0x34>
	{
		rx_out = (rx_out + 1) % rx_len;
 80064b0:	4b09      	ldr	r3, [pc, #36]	; (80064d8 <cdcRead+0x44>)
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	3301      	adds	r3, #1
 80064b6:	4a0b      	ldr	r2, [pc, #44]	; (80064e4 <cdcRead+0x50>)
 80064b8:	6812      	ldr	r2, [r2, #0]
 80064ba:	fbb3 f1f2 	udiv	r1, r3, r2
 80064be:	fb01 f202 	mul.w	r2, r1, r2
 80064c2:	1a9b      	subs	r3, r3, r2
 80064c4:	4a04      	ldr	r2, [pc, #16]	; (80064d8 <cdcRead+0x44>)
 80064c6:	6013      	str	r3, [r2, #0]
	}
	return ret;
 80064c8:	79fb      	ldrb	r3, [r7, #7]
}
 80064ca:	4618      	mov	r0, r3
 80064cc:	370c      	adds	r7, #12
 80064ce:	46bd      	mov	sp, r7
 80064d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d4:	4770      	bx	lr
 80064d6:	bf00      	nop
 80064d8:	20000538 	.word	0x20000538
 80064dc:	2000053c 	.word	0x2000053c
 80064e0:	20000534 	.word	0x20000534
 80064e4:	20000140 	.word	0x20000140

080064e8 <cdcDataIn>:

void cdcDataIn(uint8_t rx_data)
{
 80064e8:	b480      	push	{r7}
 80064ea:	b085      	sub	sp, #20
 80064ec:	af00      	add	r7, sp, #0
 80064ee:	4603      	mov	r3, r0
 80064f0:	71fb      	strb	r3, [r7, #7]
	uint32_t next_rx_in;
	next_rx_in = (rx_in + 1) % rx_len;
 80064f2:	4b0f      	ldr	r3, [pc, #60]	; (8006530 <cdcDataIn+0x48>)
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	3301      	adds	r3, #1
 80064f8:	4a0e      	ldr	r2, [pc, #56]	; (8006534 <cdcDataIn+0x4c>)
 80064fa:	6812      	ldr	r2, [r2, #0]
 80064fc:	fbb3 f1f2 	udiv	r1, r3, r2
 8006500:	fb01 f202 	mul.w	r2, r1, r2
 8006504:	1a9b      	subs	r3, r3, r2
 8006506:	60fb      	str	r3, [r7, #12]
	rx_buf[rx_in] = rx_data;
 8006508:	4b09      	ldr	r3, [pc, #36]	; (8006530 <cdcDataIn+0x48>)
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	490a      	ldr	r1, [pc, #40]	; (8006538 <cdcDataIn+0x50>)
 800650e:	79fa      	ldrb	r2, [r7, #7]
 8006510:	54ca      	strb	r2, [r1, r3]
	if(next_rx_in != rx_out)
 8006512:	4b0a      	ldr	r3, [pc, #40]	; (800653c <cdcDataIn+0x54>)
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	68fa      	ldr	r2, [r7, #12]
 8006518:	429a      	cmp	r2, r3
 800651a:	d002      	beq.n	8006522 <cdcDataIn+0x3a>
	{
		rx_in = next_rx_in;
 800651c:	4a04      	ldr	r2, [pc, #16]	; (8006530 <cdcDataIn+0x48>)
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	6013      	str	r3, [r2, #0]
	}
}
 8006522:	bf00      	nop
 8006524:	3714      	adds	r7, #20
 8006526:	46bd      	mov	sp, r7
 8006528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800652c:	4770      	bx	lr
 800652e:	bf00      	nop
 8006530:	20000534 	.word	0x20000534
 8006534:	20000140 	.word	0x20000140
 8006538:	2000053c 	.word	0x2000053c
 800653c:	20000538 	.word	0x20000538

08006540 <cdcWrite>:
uint32_t cdcWrite(uint8_t *pData, uint32_t length)
{
 8006540:	b580      	push	{r7, lr}
 8006542:	b084      	sub	sp, #16
 8006544:	af00      	add	r7, sp, #0
 8006546:	6078      	str	r0, [r7, #4]
 8006548:	6039      	str	r1, [r7, #0]
	uint32_t pre_time;
	uint8_t ret;

	pre_time = millis();
 800654a:	f7fa f8bc 	bl	80006c6 <millis>
 800654e:	60f8      	str	r0, [r7, #12]
	while(1)
	{
		ret = CDC_Transmit_FS(pData, length);
 8006550:	683b      	ldr	r3, [r7, #0]
 8006552:	b29b      	uxth	r3, r3
 8006554:	4619      	mov	r1, r3
 8006556:	6878      	ldr	r0, [r7, #4]
 8006558:	f000 f922 	bl	80067a0 <CDC_Transmit_FS>
 800655c:	4603      	mov	r3, r0
 800655e:	72fb      	strb	r3, [r7, #11]

		if(ret == USBD_OK)
 8006560:	7afb      	ldrb	r3, [r7, #11]
 8006562:	2b00      	cmp	r3, #0
 8006564:	d101      	bne.n	800656a <cdcWrite+0x2a>
		{
			return length;
 8006566:	683b      	ldr	r3, [r7, #0]
 8006568:	e00e      	b.n	8006588 <cdcWrite+0x48>
		}
		else if(ret == USBD_FAIL)
 800656a:	7afb      	ldrb	r3, [r7, #11]
 800656c:	2b03      	cmp	r3, #3
 800656e:	d101      	bne.n	8006574 <cdcWrite+0x34>
		{
			return 0;
 8006570:	2300      	movs	r3, #0
 8006572:	e009      	b.n	8006588 <cdcWrite+0x48>
		}

		if(millis() - pre_time >= 100)
 8006574:	f7fa f8a7 	bl	80006c6 <millis>
 8006578:	4602      	mov	r2, r0
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	1ad3      	subs	r3, r2, r3
 800657e:	2b63      	cmp	r3, #99	; 0x63
 8006580:	d800      	bhi.n	8006584 <cdcWrite+0x44>
		ret = CDC_Transmit_FS(pData, length);
 8006582:	e7e5      	b.n	8006550 <cdcWrite+0x10>
		{
			break;
 8006584:	bf00      	nop
		}

	}
	return 0;
 8006586:	2300      	movs	r3, #0
}
 8006588:	4618      	mov	r0, r3
 800658a:	3710      	adds	r7, #16
 800658c:	46bd      	mov	sp, r7
 800658e:	bd80      	pop	{r7, pc}

08006590 <cdcGetBaud>:
uint32_t cdcGetBaud(void)
{
 8006590:	b480      	push	{r7}
 8006592:	af00      	add	r7, sp, #0
	return LineCoding.bitrate;
 8006594:	4b03      	ldr	r3, [pc, #12]	; (80065a4 <cdcGetBaud+0x14>)
 8006596:	681b      	ldr	r3, [r3, #0]
}
 8006598:	4618      	mov	r0, r3
 800659a:	46bd      	mov	sp, r7
 800659c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a0:	4770      	bx	lr
 80065a2:	bf00      	nop
 80065a4:	2000052c 	.word	0x2000052c

080065a8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80065a8:	b580      	push	{r7, lr}
 80065aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80065ac:	2200      	movs	r2, #0
 80065ae:	4905      	ldr	r1, [pc, #20]	; (80065c4 <CDC_Init_FS+0x1c>)
 80065b0:	4805      	ldr	r0, [pc, #20]	; (80065c8 <CDC_Init_FS+0x20>)
 80065b2:	f7fe fd26 	bl	8005002 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80065b6:	4905      	ldr	r1, [pc, #20]	; (80065cc <CDC_Init_FS+0x24>)
 80065b8:	4803      	ldr	r0, [pc, #12]	; (80065c8 <CDC_Init_FS+0x20>)
 80065ba:	f7fe fd40 	bl	800503e <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80065be:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80065c0:	4618      	mov	r0, r3
 80065c2:	bd80      	pop	{r7, pc}
 80065c4:	20000b3c 	.word	0x20000b3c
 80065c8:	2000025c 	.word	0x2000025c
 80065cc:	2000073c 	.word	0x2000073c

080065d0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80065d0:	b480      	push	{r7}
 80065d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80065d4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80065d6:	4618      	mov	r0, r3
 80065d8:	46bd      	mov	sp, r7
 80065da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065de:	4770      	bx	lr

080065e0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80065e0:	b480      	push	{r7}
 80065e2:	b083      	sub	sp, #12
 80065e4:	af00      	add	r7, sp, #0
 80065e6:	4603      	mov	r3, r0
 80065e8:	6039      	str	r1, [r7, #0]
 80065ea:	71fb      	strb	r3, [r7, #7]
 80065ec:	4613      	mov	r3, r2
 80065ee:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80065f0:	79fb      	ldrb	r3, [r7, #7]
 80065f2:	2b23      	cmp	r3, #35	; 0x23
 80065f4:	f200 80a3 	bhi.w	800673e <CDC_Control_FS+0x15e>
 80065f8:	a201      	add	r2, pc, #4	; (adr r2, 8006600 <CDC_Control_FS+0x20>)
 80065fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065fe:	bf00      	nop
 8006600:	0800673f 	.word	0x0800673f
 8006604:	0800673f 	.word	0x0800673f
 8006608:	0800673f 	.word	0x0800673f
 800660c:	0800673f 	.word	0x0800673f
 8006610:	0800673f 	.word	0x0800673f
 8006614:	0800673f 	.word	0x0800673f
 8006618:	0800673f 	.word	0x0800673f
 800661c:	0800673f 	.word	0x0800673f
 8006620:	0800673f 	.word	0x0800673f
 8006624:	0800673f 	.word	0x0800673f
 8006628:	0800673f 	.word	0x0800673f
 800662c:	0800673f 	.word	0x0800673f
 8006630:	0800673f 	.word	0x0800673f
 8006634:	0800673f 	.word	0x0800673f
 8006638:	0800673f 	.word	0x0800673f
 800663c:	0800673f 	.word	0x0800673f
 8006640:	0800673f 	.word	0x0800673f
 8006644:	0800673f 	.word	0x0800673f
 8006648:	0800673f 	.word	0x0800673f
 800664c:	0800673f 	.word	0x0800673f
 8006650:	0800673f 	.word	0x0800673f
 8006654:	0800673f 	.word	0x0800673f
 8006658:	0800673f 	.word	0x0800673f
 800665c:	0800673f 	.word	0x0800673f
 8006660:	0800673f 	.word	0x0800673f
 8006664:	0800673f 	.word	0x0800673f
 8006668:	0800673f 	.word	0x0800673f
 800666c:	0800673f 	.word	0x0800673f
 8006670:	0800673f 	.word	0x0800673f
 8006674:	0800673f 	.word	0x0800673f
 8006678:	0800673f 	.word	0x0800673f
 800667c:	0800673f 	.word	0x0800673f
 8006680:	08006691 	.word	0x08006691
 8006684:	080066eb 	.word	0x080066eb
 8006688:	0800673f 	.word	0x0800673f
 800668c:	0800673f 	.word	0x0800673f
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING: // MCU�? ?��?��?���? set
    	LineCoding.bitrate 		 = (uint32_t)(pbuf[0]);
 8006690:	683b      	ldr	r3, [r7, #0]
 8006692:	781b      	ldrb	r3, [r3, #0]
 8006694:	461a      	mov	r2, r3
 8006696:	4b2e      	ldr	r3, [pc, #184]	; (8006750 <CDC_Control_FS+0x170>)
 8006698:	601a      	str	r2, [r3, #0]
    	LineCoding.bitrate 		|= (uint32_t)(pbuf[1]) << 8;
 800669a:	4b2d      	ldr	r3, [pc, #180]	; (8006750 <CDC_Control_FS+0x170>)
 800669c:	681a      	ldr	r2, [r3, #0]
 800669e:	683b      	ldr	r3, [r7, #0]
 80066a0:	3301      	adds	r3, #1
 80066a2:	781b      	ldrb	r3, [r3, #0]
 80066a4:	021b      	lsls	r3, r3, #8
 80066a6:	4313      	orrs	r3, r2
 80066a8:	4a29      	ldr	r2, [pc, #164]	; (8006750 <CDC_Control_FS+0x170>)
 80066aa:	6013      	str	r3, [r2, #0]
    	LineCoding.bitrate 		|= (uint32_t)(pbuf[2]) << 16;
 80066ac:	4b28      	ldr	r3, [pc, #160]	; (8006750 <CDC_Control_FS+0x170>)
 80066ae:	681a      	ldr	r2, [r3, #0]
 80066b0:	683b      	ldr	r3, [r7, #0]
 80066b2:	3302      	adds	r3, #2
 80066b4:	781b      	ldrb	r3, [r3, #0]
 80066b6:	041b      	lsls	r3, r3, #16
 80066b8:	4313      	orrs	r3, r2
 80066ba:	4a25      	ldr	r2, [pc, #148]	; (8006750 <CDC_Control_FS+0x170>)
 80066bc:	6013      	str	r3, [r2, #0]
    	LineCoding.bitrate 		|= (uint32_t)(pbuf[3]) << 24;
 80066be:	4b24      	ldr	r3, [pc, #144]	; (8006750 <CDC_Control_FS+0x170>)
 80066c0:	681a      	ldr	r2, [r3, #0]
 80066c2:	683b      	ldr	r3, [r7, #0]
 80066c4:	3303      	adds	r3, #3
 80066c6:	781b      	ldrb	r3, [r3, #0]
 80066c8:	061b      	lsls	r3, r3, #24
 80066ca:	4313      	orrs	r3, r2
 80066cc:	4a20      	ldr	r2, [pc, #128]	; (8006750 <CDC_Control_FS+0x170>)
 80066ce:	6013      	str	r3, [r2, #0]
    	LineCoding.format 		 = pbuf[4];
 80066d0:	683b      	ldr	r3, [r7, #0]
 80066d2:	791a      	ldrb	r2, [r3, #4]
 80066d4:	4b1e      	ldr	r3, [pc, #120]	; (8006750 <CDC_Control_FS+0x170>)
 80066d6:	711a      	strb	r2, [r3, #4]
    	LineCoding.paritytype  = pbuf[5];
 80066d8:	683b      	ldr	r3, [r7, #0]
 80066da:	795a      	ldrb	r2, [r3, #5]
 80066dc:	4b1c      	ldr	r3, [pc, #112]	; (8006750 <CDC_Control_FS+0x170>)
 80066de:	715a      	strb	r2, [r3, #5]
    	LineCoding.datatype 	 = pbuf[6];
 80066e0:	683b      	ldr	r3, [r7, #0]
 80066e2:	799a      	ldrb	r2, [r3, #6]
 80066e4:	4b1a      	ldr	r3, [pc, #104]	; (8006750 <CDC_Control_FS+0x170>)
 80066e6:	719a      	strb	r2, [r3, #6]
    break;
 80066e8:	e02a      	b.n	8006740 <CDC_Control_FS+0x160>

    case CDC_GET_LINE_CODING: // PC�? ?��?��?���? ?��?���?
    	pbuf[0] = (uint8_t)(LineCoding.bitrate);
 80066ea:	4b19      	ldr	r3, [pc, #100]	; (8006750 <CDC_Control_FS+0x170>)
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	b2da      	uxtb	r2, r3
 80066f0:	683b      	ldr	r3, [r7, #0]
 80066f2:	701a      	strb	r2, [r3, #0]
    	pbuf[1] = (uint8_t)(LineCoding.bitrate >> 8);
 80066f4:	4b16      	ldr	r3, [pc, #88]	; (8006750 <CDC_Control_FS+0x170>)
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	0a1a      	lsrs	r2, r3, #8
 80066fa:	683b      	ldr	r3, [r7, #0]
 80066fc:	3301      	adds	r3, #1
 80066fe:	b2d2      	uxtb	r2, r2
 8006700:	701a      	strb	r2, [r3, #0]
    	pbuf[2] = (uint8_t)(LineCoding.bitrate >> 16);
 8006702:	4b13      	ldr	r3, [pc, #76]	; (8006750 <CDC_Control_FS+0x170>)
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	0c1a      	lsrs	r2, r3, #16
 8006708:	683b      	ldr	r3, [r7, #0]
 800670a:	3302      	adds	r3, #2
 800670c:	b2d2      	uxtb	r2, r2
 800670e:	701a      	strb	r2, [r3, #0]
    	pbuf[3] = (uint8_t)(LineCoding.bitrate >> 24);
 8006710:	4b0f      	ldr	r3, [pc, #60]	; (8006750 <CDC_Control_FS+0x170>)
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	0e1a      	lsrs	r2, r3, #24
 8006716:	683b      	ldr	r3, [r7, #0]
 8006718:	3303      	adds	r3, #3
 800671a:	b2d2      	uxtb	r2, r2
 800671c:	701a      	strb	r2, [r3, #0]
    	pbuf[4] = LineCoding.format;
 800671e:	683b      	ldr	r3, [r7, #0]
 8006720:	3304      	adds	r3, #4
 8006722:	4a0b      	ldr	r2, [pc, #44]	; (8006750 <CDC_Control_FS+0x170>)
 8006724:	7912      	ldrb	r2, [r2, #4]
 8006726:	701a      	strb	r2, [r3, #0]
    	pbuf[5] = LineCoding.paritytype;
 8006728:	683b      	ldr	r3, [r7, #0]
 800672a:	3305      	adds	r3, #5
 800672c:	4a08      	ldr	r2, [pc, #32]	; (8006750 <CDC_Control_FS+0x170>)
 800672e:	7952      	ldrb	r2, [r2, #5]
 8006730:	701a      	strb	r2, [r3, #0]
    	pbuf[6] = LineCoding.datatype;
 8006732:	683b      	ldr	r3, [r7, #0]
 8006734:	3306      	adds	r3, #6
 8006736:	4a06      	ldr	r2, [pc, #24]	; (8006750 <CDC_Control_FS+0x170>)
 8006738:	7992      	ldrb	r2, [r2, #6]
 800673a:	701a      	strb	r2, [r3, #0]
    break;
 800673c:	e000      	b.n	8006740 <CDC_Control_FS+0x160>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800673e:	bf00      	nop
  }

  return (USBD_OK);
 8006740:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8006742:	4618      	mov	r0, r3
 8006744:	370c      	adds	r7, #12
 8006746:	46bd      	mov	sp, r7
 8006748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800674c:	4770      	bx	lr
 800674e:	bf00      	nop
 8006750:	2000052c 	.word	0x2000052c

08006754 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8006754:	b580      	push	{r7, lr}
 8006756:	b084      	sub	sp, #16
 8006758:	af00      	add	r7, sp, #0
 800675a:	6078      	str	r0, [r7, #4]
 800675c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800675e:	6879      	ldr	r1, [r7, #4]
 8006760:	480e      	ldr	r0, [pc, #56]	; (800679c <CDC_Receive_FS+0x48>)
 8006762:	f7fe fc6c 	bl	800503e <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8006766:	480d      	ldr	r0, [pc, #52]	; (800679c <CDC_Receive_FS+0x48>)
 8006768:	f7fe fcb2 	bl	80050d0 <USBD_CDC_ReceivePacket>

  for(int i = 0 ; i < *Len ; i++)
 800676c:	2300      	movs	r3, #0
 800676e:	60fb      	str	r3, [r7, #12]
 8006770:	e009      	b.n	8006786 <CDC_Receive_FS+0x32>
  {
  	cdcDataIn(Buf[i]);// ?��?��?��?�� 발생?�� data in
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	687a      	ldr	r2, [r7, #4]
 8006776:	4413      	add	r3, r2
 8006778:	781b      	ldrb	r3, [r3, #0]
 800677a:	4618      	mov	r0, r3
 800677c:	f7ff feb4 	bl	80064e8 <cdcDataIn>
  for(int i = 0 ; i < *Len ; i++)
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	3301      	adds	r3, #1
 8006784:	60fb      	str	r3, [r7, #12]
 8006786:	683b      	ldr	r3, [r7, #0]
 8006788:	681a      	ldr	r2, [r3, #0]
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	429a      	cmp	r2, r3
 800678e:	d8f0      	bhi.n	8006772 <CDC_Receive_FS+0x1e>
  }
  return (USBD_OK);
 8006790:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8006792:	4618      	mov	r0, r3
 8006794:	3710      	adds	r7, #16
 8006796:	46bd      	mov	sp, r7
 8006798:	bd80      	pop	{r7, pc}
 800679a:	bf00      	nop
 800679c:	2000025c 	.word	0x2000025c

080067a0 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80067a0:	b580      	push	{r7, lr}
 80067a2:	b084      	sub	sp, #16
 80067a4:	af00      	add	r7, sp, #0
 80067a6:	6078      	str	r0, [r7, #4]
 80067a8:	460b      	mov	r3, r1
 80067aa:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80067ac:	2300      	movs	r3, #0
 80067ae:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80067b0:	4b0d      	ldr	r3, [pc, #52]	; (80067e8 <CDC_Transmit_FS+0x48>)
 80067b2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80067b6:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80067b8:	68bb      	ldr	r3, [r7, #8]
 80067ba:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d001      	beq.n	80067c6 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80067c2:	2301      	movs	r3, #1
 80067c4:	e00b      	b.n	80067de <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80067c6:	887b      	ldrh	r3, [r7, #2]
 80067c8:	461a      	mov	r2, r3
 80067ca:	6879      	ldr	r1, [r7, #4]
 80067cc:	4806      	ldr	r0, [pc, #24]	; (80067e8 <CDC_Transmit_FS+0x48>)
 80067ce:	f7fe fc18 	bl	8005002 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80067d2:	4805      	ldr	r0, [pc, #20]	; (80067e8 <CDC_Transmit_FS+0x48>)
 80067d4:	f7fe fc4c 	bl	8005070 <USBD_CDC_TransmitPacket>
 80067d8:	4603      	mov	r3, r0
 80067da:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80067dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80067de:	4618      	mov	r0, r3
 80067e0:	3710      	adds	r7, #16
 80067e2:	46bd      	mov	sp, r7
 80067e4:	bd80      	pop	{r7, pc}
 80067e6:	bf00      	nop
 80067e8:	2000025c 	.word	0x2000025c

080067ec <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80067ec:	b480      	push	{r7}
 80067ee:	b087      	sub	sp, #28
 80067f0:	af00      	add	r7, sp, #0
 80067f2:	60f8      	str	r0, [r7, #12]
 80067f4:	60b9      	str	r1, [r7, #8]
 80067f6:	4613      	mov	r3, r2
 80067f8:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80067fa:	2300      	movs	r3, #0
 80067fc:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80067fe:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006802:	4618      	mov	r0, r3
 8006804:	371c      	adds	r7, #28
 8006806:	46bd      	mov	sp, r7
 8006808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800680c:	4770      	bx	lr
	...

08006810 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006810:	b480      	push	{r7}
 8006812:	b083      	sub	sp, #12
 8006814:	af00      	add	r7, sp, #0
 8006816:	4603      	mov	r3, r0
 8006818:	6039      	str	r1, [r7, #0]
 800681a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800681c:	683b      	ldr	r3, [r7, #0]
 800681e:	2212      	movs	r2, #18
 8006820:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8006822:	4b03      	ldr	r3, [pc, #12]	; (8006830 <USBD_FS_DeviceDescriptor+0x20>)
}
 8006824:	4618      	mov	r0, r3
 8006826:	370c      	adds	r7, #12
 8006828:	46bd      	mov	sp, r7
 800682a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800682e:	4770      	bx	lr
 8006830:	20000174 	.word	0x20000174

08006834 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006834:	b480      	push	{r7}
 8006836:	b083      	sub	sp, #12
 8006838:	af00      	add	r7, sp, #0
 800683a:	4603      	mov	r3, r0
 800683c:	6039      	str	r1, [r7, #0]
 800683e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8006840:	683b      	ldr	r3, [r7, #0]
 8006842:	2204      	movs	r2, #4
 8006844:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8006846:	4b03      	ldr	r3, [pc, #12]	; (8006854 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8006848:	4618      	mov	r0, r3
 800684a:	370c      	adds	r7, #12
 800684c:	46bd      	mov	sp, r7
 800684e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006852:	4770      	bx	lr
 8006854:	20000188 	.word	0x20000188

08006858 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006858:	b580      	push	{r7, lr}
 800685a:	b082      	sub	sp, #8
 800685c:	af00      	add	r7, sp, #0
 800685e:	4603      	mov	r3, r0
 8006860:	6039      	str	r1, [r7, #0]
 8006862:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006864:	79fb      	ldrb	r3, [r7, #7]
 8006866:	2b00      	cmp	r3, #0
 8006868:	d105      	bne.n	8006876 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800686a:	683a      	ldr	r2, [r7, #0]
 800686c:	4907      	ldr	r1, [pc, #28]	; (800688c <USBD_FS_ProductStrDescriptor+0x34>)
 800686e:	4808      	ldr	r0, [pc, #32]	; (8006890 <USBD_FS_ProductStrDescriptor+0x38>)
 8006870:	f7ff fce1 	bl	8006236 <USBD_GetString>
 8006874:	e004      	b.n	8006880 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006876:	683a      	ldr	r2, [r7, #0]
 8006878:	4904      	ldr	r1, [pc, #16]	; (800688c <USBD_FS_ProductStrDescriptor+0x34>)
 800687a:	4805      	ldr	r0, [pc, #20]	; (8006890 <USBD_FS_ProductStrDescriptor+0x38>)
 800687c:	f7ff fcdb 	bl	8006236 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006880:	4b02      	ldr	r3, [pc, #8]	; (800688c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8006882:	4618      	mov	r0, r3
 8006884:	3708      	adds	r7, #8
 8006886:	46bd      	mov	sp, r7
 8006888:	bd80      	pop	{r7, pc}
 800688a:	bf00      	nop
 800688c:	20000f3c 	.word	0x20000f3c
 8006890:	08007a2c 	.word	0x08007a2c

08006894 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006894:	b580      	push	{r7, lr}
 8006896:	b082      	sub	sp, #8
 8006898:	af00      	add	r7, sp, #0
 800689a:	4603      	mov	r3, r0
 800689c:	6039      	str	r1, [r7, #0]
 800689e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80068a0:	683a      	ldr	r2, [r7, #0]
 80068a2:	4904      	ldr	r1, [pc, #16]	; (80068b4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80068a4:	4804      	ldr	r0, [pc, #16]	; (80068b8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80068a6:	f7ff fcc6 	bl	8006236 <USBD_GetString>
  return USBD_StrDesc;
 80068aa:	4b02      	ldr	r3, [pc, #8]	; (80068b4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80068ac:	4618      	mov	r0, r3
 80068ae:	3708      	adds	r7, #8
 80068b0:	46bd      	mov	sp, r7
 80068b2:	bd80      	pop	{r7, pc}
 80068b4:	20000f3c 	.word	0x20000f3c
 80068b8:	08007a44 	.word	0x08007a44

080068bc <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80068bc:	b580      	push	{r7, lr}
 80068be:	b082      	sub	sp, #8
 80068c0:	af00      	add	r7, sp, #0
 80068c2:	4603      	mov	r3, r0
 80068c4:	6039      	str	r1, [r7, #0]
 80068c6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80068c8:	683b      	ldr	r3, [r7, #0]
 80068ca:	221a      	movs	r2, #26
 80068cc:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80068ce:	f000 f843 	bl	8006958 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80068d2:	4b02      	ldr	r3, [pc, #8]	; (80068dc <USBD_FS_SerialStrDescriptor+0x20>)
}
 80068d4:	4618      	mov	r0, r3
 80068d6:	3708      	adds	r7, #8
 80068d8:	46bd      	mov	sp, r7
 80068da:	bd80      	pop	{r7, pc}
 80068dc:	2000018c 	.word	0x2000018c

080068e0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80068e0:	b580      	push	{r7, lr}
 80068e2:	b082      	sub	sp, #8
 80068e4:	af00      	add	r7, sp, #0
 80068e6:	4603      	mov	r3, r0
 80068e8:	6039      	str	r1, [r7, #0]
 80068ea:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80068ec:	79fb      	ldrb	r3, [r7, #7]
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d105      	bne.n	80068fe <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80068f2:	683a      	ldr	r2, [r7, #0]
 80068f4:	4907      	ldr	r1, [pc, #28]	; (8006914 <USBD_FS_ConfigStrDescriptor+0x34>)
 80068f6:	4808      	ldr	r0, [pc, #32]	; (8006918 <USBD_FS_ConfigStrDescriptor+0x38>)
 80068f8:	f7ff fc9d 	bl	8006236 <USBD_GetString>
 80068fc:	e004      	b.n	8006908 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80068fe:	683a      	ldr	r2, [r7, #0]
 8006900:	4904      	ldr	r1, [pc, #16]	; (8006914 <USBD_FS_ConfigStrDescriptor+0x34>)
 8006902:	4805      	ldr	r0, [pc, #20]	; (8006918 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006904:	f7ff fc97 	bl	8006236 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006908:	4b02      	ldr	r3, [pc, #8]	; (8006914 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800690a:	4618      	mov	r0, r3
 800690c:	3708      	adds	r7, #8
 800690e:	46bd      	mov	sp, r7
 8006910:	bd80      	pop	{r7, pc}
 8006912:	bf00      	nop
 8006914:	20000f3c 	.word	0x20000f3c
 8006918:	08007a58 	.word	0x08007a58

0800691c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800691c:	b580      	push	{r7, lr}
 800691e:	b082      	sub	sp, #8
 8006920:	af00      	add	r7, sp, #0
 8006922:	4603      	mov	r3, r0
 8006924:	6039      	str	r1, [r7, #0]
 8006926:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006928:	79fb      	ldrb	r3, [r7, #7]
 800692a:	2b00      	cmp	r3, #0
 800692c:	d105      	bne.n	800693a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800692e:	683a      	ldr	r2, [r7, #0]
 8006930:	4907      	ldr	r1, [pc, #28]	; (8006950 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006932:	4808      	ldr	r0, [pc, #32]	; (8006954 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006934:	f7ff fc7f 	bl	8006236 <USBD_GetString>
 8006938:	e004      	b.n	8006944 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800693a:	683a      	ldr	r2, [r7, #0]
 800693c:	4904      	ldr	r1, [pc, #16]	; (8006950 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800693e:	4805      	ldr	r0, [pc, #20]	; (8006954 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006940:	f7ff fc79 	bl	8006236 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006944:	4b02      	ldr	r3, [pc, #8]	; (8006950 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8006946:	4618      	mov	r0, r3
 8006948:	3708      	adds	r7, #8
 800694a:	46bd      	mov	sp, r7
 800694c:	bd80      	pop	{r7, pc}
 800694e:	bf00      	nop
 8006950:	20000f3c 	.word	0x20000f3c
 8006954:	08007a64 	.word	0x08007a64

08006958 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8006958:	b580      	push	{r7, lr}
 800695a:	b084      	sub	sp, #16
 800695c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800695e:	4b0f      	ldr	r3, [pc, #60]	; (800699c <Get_SerialNum+0x44>)
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8006964:	4b0e      	ldr	r3, [pc, #56]	; (80069a0 <Get_SerialNum+0x48>)
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800696a:	4b0e      	ldr	r3, [pc, #56]	; (80069a4 <Get_SerialNum+0x4c>)
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8006970:	68fa      	ldr	r2, [r7, #12]
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	4413      	add	r3, r2
 8006976:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	2b00      	cmp	r3, #0
 800697c:	d009      	beq.n	8006992 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800697e:	2208      	movs	r2, #8
 8006980:	4909      	ldr	r1, [pc, #36]	; (80069a8 <Get_SerialNum+0x50>)
 8006982:	68f8      	ldr	r0, [r7, #12]
 8006984:	f000 f814 	bl	80069b0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8006988:	2204      	movs	r2, #4
 800698a:	4908      	ldr	r1, [pc, #32]	; (80069ac <Get_SerialNum+0x54>)
 800698c:	68b8      	ldr	r0, [r7, #8]
 800698e:	f000 f80f 	bl	80069b0 <IntToUnicode>
  }
}
 8006992:	bf00      	nop
 8006994:	3710      	adds	r7, #16
 8006996:	46bd      	mov	sp, r7
 8006998:	bd80      	pop	{r7, pc}
 800699a:	bf00      	nop
 800699c:	1fff7a10 	.word	0x1fff7a10
 80069a0:	1fff7a14 	.word	0x1fff7a14
 80069a4:	1fff7a18 	.word	0x1fff7a18
 80069a8:	2000018e 	.word	0x2000018e
 80069ac:	2000019e 	.word	0x2000019e

080069b0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80069b0:	b480      	push	{r7}
 80069b2:	b087      	sub	sp, #28
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	60f8      	str	r0, [r7, #12]
 80069b8:	60b9      	str	r1, [r7, #8]
 80069ba:	4613      	mov	r3, r2
 80069bc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80069be:	2300      	movs	r3, #0
 80069c0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80069c2:	2300      	movs	r3, #0
 80069c4:	75fb      	strb	r3, [r7, #23]
 80069c6:	e027      	b.n	8006a18 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	0f1b      	lsrs	r3, r3, #28
 80069cc:	2b09      	cmp	r3, #9
 80069ce:	d80b      	bhi.n	80069e8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	0f1b      	lsrs	r3, r3, #28
 80069d4:	b2da      	uxtb	r2, r3
 80069d6:	7dfb      	ldrb	r3, [r7, #23]
 80069d8:	005b      	lsls	r3, r3, #1
 80069da:	4619      	mov	r1, r3
 80069dc:	68bb      	ldr	r3, [r7, #8]
 80069de:	440b      	add	r3, r1
 80069e0:	3230      	adds	r2, #48	; 0x30
 80069e2:	b2d2      	uxtb	r2, r2
 80069e4:	701a      	strb	r2, [r3, #0]
 80069e6:	e00a      	b.n	80069fe <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	0f1b      	lsrs	r3, r3, #28
 80069ec:	b2da      	uxtb	r2, r3
 80069ee:	7dfb      	ldrb	r3, [r7, #23]
 80069f0:	005b      	lsls	r3, r3, #1
 80069f2:	4619      	mov	r1, r3
 80069f4:	68bb      	ldr	r3, [r7, #8]
 80069f6:	440b      	add	r3, r1
 80069f8:	3237      	adds	r2, #55	; 0x37
 80069fa:	b2d2      	uxtb	r2, r2
 80069fc:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	011b      	lsls	r3, r3, #4
 8006a02:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8006a04:	7dfb      	ldrb	r3, [r7, #23]
 8006a06:	005b      	lsls	r3, r3, #1
 8006a08:	3301      	adds	r3, #1
 8006a0a:	68ba      	ldr	r2, [r7, #8]
 8006a0c:	4413      	add	r3, r2
 8006a0e:	2200      	movs	r2, #0
 8006a10:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8006a12:	7dfb      	ldrb	r3, [r7, #23]
 8006a14:	3301      	adds	r3, #1
 8006a16:	75fb      	strb	r3, [r7, #23]
 8006a18:	7dfa      	ldrb	r2, [r7, #23]
 8006a1a:	79fb      	ldrb	r3, [r7, #7]
 8006a1c:	429a      	cmp	r2, r3
 8006a1e:	d3d3      	bcc.n	80069c8 <IntToUnicode+0x18>
  }
}
 8006a20:	bf00      	nop
 8006a22:	bf00      	nop
 8006a24:	371c      	adds	r7, #28
 8006a26:	46bd      	mov	sp, r7
 8006a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a2c:	4770      	bx	lr
	...

08006a30 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8006a30:	b580      	push	{r7, lr}
 8006a32:	b08a      	sub	sp, #40	; 0x28
 8006a34:	af00      	add	r7, sp, #0
 8006a36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006a38:	f107 0314 	add.w	r3, r7, #20
 8006a3c:	2200      	movs	r2, #0
 8006a3e:	601a      	str	r2, [r3, #0]
 8006a40:	605a      	str	r2, [r3, #4]
 8006a42:	609a      	str	r2, [r3, #8]
 8006a44:	60da      	str	r2, [r3, #12]
 8006a46:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006a50:	d13a      	bne.n	8006ac8 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006a52:	2300      	movs	r3, #0
 8006a54:	613b      	str	r3, [r7, #16]
 8006a56:	4b1e      	ldr	r3, [pc, #120]	; (8006ad0 <HAL_PCD_MspInit+0xa0>)
 8006a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a5a:	4a1d      	ldr	r2, [pc, #116]	; (8006ad0 <HAL_PCD_MspInit+0xa0>)
 8006a5c:	f043 0301 	orr.w	r3, r3, #1
 8006a60:	6313      	str	r3, [r2, #48]	; 0x30
 8006a62:	4b1b      	ldr	r3, [pc, #108]	; (8006ad0 <HAL_PCD_MspInit+0xa0>)
 8006a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a66:	f003 0301 	and.w	r3, r3, #1
 8006a6a:	613b      	str	r3, [r7, #16]
 8006a6c:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8006a6e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8006a72:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006a74:	2302      	movs	r3, #2
 8006a76:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006a78:	2300      	movs	r3, #0
 8006a7a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006a7c:	2303      	movs	r3, #3
 8006a7e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8006a80:	230a      	movs	r3, #10
 8006a82:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006a84:	f107 0314 	add.w	r3, r7, #20
 8006a88:	4619      	mov	r1, r3
 8006a8a:	4812      	ldr	r0, [pc, #72]	; (8006ad4 <HAL_PCD_MspInit+0xa4>)
 8006a8c:	f7fa fb3a 	bl	8001104 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8006a90:	4b0f      	ldr	r3, [pc, #60]	; (8006ad0 <HAL_PCD_MspInit+0xa0>)
 8006a92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a94:	4a0e      	ldr	r2, [pc, #56]	; (8006ad0 <HAL_PCD_MspInit+0xa0>)
 8006a96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a9a:	6353      	str	r3, [r2, #52]	; 0x34
 8006a9c:	2300      	movs	r3, #0
 8006a9e:	60fb      	str	r3, [r7, #12]
 8006aa0:	4b0b      	ldr	r3, [pc, #44]	; (8006ad0 <HAL_PCD_MspInit+0xa0>)
 8006aa2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006aa4:	4a0a      	ldr	r2, [pc, #40]	; (8006ad0 <HAL_PCD_MspInit+0xa0>)
 8006aa6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006aaa:	6453      	str	r3, [r2, #68]	; 0x44
 8006aac:	4b08      	ldr	r3, [pc, #32]	; (8006ad0 <HAL_PCD_MspInit+0xa0>)
 8006aae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ab0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006ab4:	60fb      	str	r3, [r7, #12]
 8006ab6:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8006ab8:	2200      	movs	r2, #0
 8006aba:	2100      	movs	r1, #0
 8006abc:	2043      	movs	r0, #67	; 0x43
 8006abe:	f7fa faea 	bl	8001096 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8006ac2:	2043      	movs	r0, #67	; 0x43
 8006ac4:	f7fa fb03 	bl	80010ce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8006ac8:	bf00      	nop
 8006aca:	3728      	adds	r7, #40	; 0x28
 8006acc:	46bd      	mov	sp, r7
 8006ace:	bd80      	pop	{r7, pc}
 8006ad0:	40023800 	.word	0x40023800
 8006ad4:	40020000 	.word	0x40020000

08006ad8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006ad8:	b580      	push	{r7, lr}
 8006ada:	b082      	sub	sp, #8
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8006aec:	4619      	mov	r1, r3
 8006aee:	4610      	mov	r0, r2
 8006af0:	f7fe fbba 	bl	8005268 <USBD_LL_SetupStage>
}
 8006af4:	bf00      	nop
 8006af6:	3708      	adds	r7, #8
 8006af8:	46bd      	mov	sp, r7
 8006afa:	bd80      	pop	{r7, pc}

08006afc <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006afc:	b580      	push	{r7, lr}
 8006afe:	b082      	sub	sp, #8
 8006b00:	af00      	add	r7, sp, #0
 8006b02:	6078      	str	r0, [r7, #4]
 8006b04:	460b      	mov	r3, r1
 8006b06:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8006b0e:	78fa      	ldrb	r2, [r7, #3]
 8006b10:	6879      	ldr	r1, [r7, #4]
 8006b12:	4613      	mov	r3, r2
 8006b14:	00db      	lsls	r3, r3, #3
 8006b16:	1a9b      	subs	r3, r3, r2
 8006b18:	009b      	lsls	r3, r3, #2
 8006b1a:	440b      	add	r3, r1
 8006b1c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8006b20:	681a      	ldr	r2, [r3, #0]
 8006b22:	78fb      	ldrb	r3, [r7, #3]
 8006b24:	4619      	mov	r1, r3
 8006b26:	f7fe fbf4 	bl	8005312 <USBD_LL_DataOutStage>
}
 8006b2a:	bf00      	nop
 8006b2c:	3708      	adds	r7, #8
 8006b2e:	46bd      	mov	sp, r7
 8006b30:	bd80      	pop	{r7, pc}

08006b32 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006b32:	b580      	push	{r7, lr}
 8006b34:	b082      	sub	sp, #8
 8006b36:	af00      	add	r7, sp, #0
 8006b38:	6078      	str	r0, [r7, #4]
 8006b3a:	460b      	mov	r3, r1
 8006b3c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8006b44:	78fa      	ldrb	r2, [r7, #3]
 8006b46:	6879      	ldr	r1, [r7, #4]
 8006b48:	4613      	mov	r3, r2
 8006b4a:	00db      	lsls	r3, r3, #3
 8006b4c:	1a9b      	subs	r3, r3, r2
 8006b4e:	009b      	lsls	r3, r3, #2
 8006b50:	440b      	add	r3, r1
 8006b52:	3348      	adds	r3, #72	; 0x48
 8006b54:	681a      	ldr	r2, [r3, #0]
 8006b56:	78fb      	ldrb	r3, [r7, #3]
 8006b58:	4619      	mov	r1, r3
 8006b5a:	f7fe fc3d 	bl	80053d8 <USBD_LL_DataInStage>
}
 8006b5e:	bf00      	nop
 8006b60:	3708      	adds	r7, #8
 8006b62:	46bd      	mov	sp, r7
 8006b64:	bd80      	pop	{r7, pc}

08006b66 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006b66:	b580      	push	{r7, lr}
 8006b68:	b082      	sub	sp, #8
 8006b6a:	af00      	add	r7, sp, #0
 8006b6c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006b74:	4618      	mov	r0, r3
 8006b76:	f7fe fd51 	bl	800561c <USBD_LL_SOF>
}
 8006b7a:	bf00      	nop
 8006b7c:	3708      	adds	r7, #8
 8006b7e:	46bd      	mov	sp, r7
 8006b80:	bd80      	pop	{r7, pc}

08006b82 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006b82:	b580      	push	{r7, lr}
 8006b84:	b084      	sub	sp, #16
 8006b86:	af00      	add	r7, sp, #0
 8006b88:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8006b8a:	2301      	movs	r3, #1
 8006b8c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	68db      	ldr	r3, [r3, #12]
 8006b92:	2b02      	cmp	r3, #2
 8006b94:	d001      	beq.n	8006b9a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8006b96:	f7f9 fe07 	bl	80007a8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006ba0:	7bfa      	ldrb	r2, [r7, #15]
 8006ba2:	4611      	mov	r1, r2
 8006ba4:	4618      	mov	r0, r3
 8006ba6:	f7fe fcfb 	bl	80055a0 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006bb0:	4618      	mov	r0, r3
 8006bb2:	f7fe fca7 	bl	8005504 <USBD_LL_Reset>
}
 8006bb6:	bf00      	nop
 8006bb8:	3710      	adds	r7, #16
 8006bba:	46bd      	mov	sp, r7
 8006bbc:	bd80      	pop	{r7, pc}
	...

08006bc0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006bc0:	b580      	push	{r7, lr}
 8006bc2:	b082      	sub	sp, #8
 8006bc4:	af00      	add	r7, sp, #0
 8006bc6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006bce:	4618      	mov	r0, r3
 8006bd0:	f7fe fcf6 	bl	80055c0 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	687a      	ldr	r2, [r7, #4]
 8006be0:	6812      	ldr	r2, [r2, #0]
 8006be2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006be6:	f043 0301 	orr.w	r3, r3, #1
 8006bea:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	6a1b      	ldr	r3, [r3, #32]
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d005      	beq.n	8006c00 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8006bf4:	4b04      	ldr	r3, [pc, #16]	; (8006c08 <HAL_PCD_SuspendCallback+0x48>)
 8006bf6:	691b      	ldr	r3, [r3, #16]
 8006bf8:	4a03      	ldr	r2, [pc, #12]	; (8006c08 <HAL_PCD_SuspendCallback+0x48>)
 8006bfa:	f043 0306 	orr.w	r3, r3, #6
 8006bfe:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8006c00:	bf00      	nop
 8006c02:	3708      	adds	r7, #8
 8006c04:	46bd      	mov	sp, r7
 8006c06:	bd80      	pop	{r7, pc}
 8006c08:	e000ed00 	.word	0xe000ed00

08006c0c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006c0c:	b580      	push	{r7, lr}
 8006c0e:	b082      	sub	sp, #8
 8006c10:	af00      	add	r7, sp, #0
 8006c12:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006c1a:	4618      	mov	r0, r3
 8006c1c:	f7fe fce6 	bl	80055ec <USBD_LL_Resume>
}
 8006c20:	bf00      	nop
 8006c22:	3708      	adds	r7, #8
 8006c24:	46bd      	mov	sp, r7
 8006c26:	bd80      	pop	{r7, pc}

08006c28 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006c28:	b580      	push	{r7, lr}
 8006c2a:	b082      	sub	sp, #8
 8006c2c:	af00      	add	r7, sp, #0
 8006c2e:	6078      	str	r0, [r7, #4]
 8006c30:	460b      	mov	r3, r1
 8006c32:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006c3a:	78fa      	ldrb	r2, [r7, #3]
 8006c3c:	4611      	mov	r1, r2
 8006c3e:	4618      	mov	r0, r3
 8006c40:	f7fe fd34 	bl	80056ac <USBD_LL_IsoOUTIncomplete>
}
 8006c44:	bf00      	nop
 8006c46:	3708      	adds	r7, #8
 8006c48:	46bd      	mov	sp, r7
 8006c4a:	bd80      	pop	{r7, pc}

08006c4c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006c4c:	b580      	push	{r7, lr}
 8006c4e:	b082      	sub	sp, #8
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	6078      	str	r0, [r7, #4]
 8006c54:	460b      	mov	r3, r1
 8006c56:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006c5e:	78fa      	ldrb	r2, [r7, #3]
 8006c60:	4611      	mov	r1, r2
 8006c62:	4618      	mov	r0, r3
 8006c64:	f7fe fcfc 	bl	8005660 <USBD_LL_IsoINIncomplete>
}
 8006c68:	bf00      	nop
 8006c6a:	3708      	adds	r7, #8
 8006c6c:	46bd      	mov	sp, r7
 8006c6e:	bd80      	pop	{r7, pc}

08006c70 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006c70:	b580      	push	{r7, lr}
 8006c72:	b082      	sub	sp, #8
 8006c74:	af00      	add	r7, sp, #0
 8006c76:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006c7e:	4618      	mov	r0, r3
 8006c80:	f7fe fd3a 	bl	80056f8 <USBD_LL_DevConnected>
}
 8006c84:	bf00      	nop
 8006c86:	3708      	adds	r7, #8
 8006c88:	46bd      	mov	sp, r7
 8006c8a:	bd80      	pop	{r7, pc}

08006c8c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006c8c:	b580      	push	{r7, lr}
 8006c8e:	b082      	sub	sp, #8
 8006c90:	af00      	add	r7, sp, #0
 8006c92:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006c9a:	4618      	mov	r0, r3
 8006c9c:	f7fe fd37 	bl	800570e <USBD_LL_DevDisconnected>
}
 8006ca0:	bf00      	nop
 8006ca2:	3708      	adds	r7, #8
 8006ca4:	46bd      	mov	sp, r7
 8006ca6:	bd80      	pop	{r7, pc}

08006ca8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8006ca8:	b580      	push	{r7, lr}
 8006caa:	b082      	sub	sp, #8
 8006cac:	af00      	add	r7, sp, #0
 8006cae:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	781b      	ldrb	r3, [r3, #0]
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d13c      	bne.n	8006d32 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8006cb8:	4a20      	ldr	r2, [pc, #128]	; (8006d3c <USBD_LL_Init+0x94>)
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	4a1e      	ldr	r2, [pc, #120]	; (8006d3c <USBD_LL_Init+0x94>)
 8006cc4:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8006cc8:	4b1c      	ldr	r3, [pc, #112]	; (8006d3c <USBD_LL_Init+0x94>)
 8006cca:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8006cce:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8006cd0:	4b1a      	ldr	r3, [pc, #104]	; (8006d3c <USBD_LL_Init+0x94>)
 8006cd2:	2204      	movs	r2, #4
 8006cd4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8006cd6:	4b19      	ldr	r3, [pc, #100]	; (8006d3c <USBD_LL_Init+0x94>)
 8006cd8:	2202      	movs	r2, #2
 8006cda:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8006cdc:	4b17      	ldr	r3, [pc, #92]	; (8006d3c <USBD_LL_Init+0x94>)
 8006cde:	2200      	movs	r2, #0
 8006ce0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8006ce2:	4b16      	ldr	r3, [pc, #88]	; (8006d3c <USBD_LL_Init+0x94>)
 8006ce4:	2202      	movs	r2, #2
 8006ce6:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8006ce8:	4b14      	ldr	r3, [pc, #80]	; (8006d3c <USBD_LL_Init+0x94>)
 8006cea:	2200      	movs	r2, #0
 8006cec:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8006cee:	4b13      	ldr	r3, [pc, #76]	; (8006d3c <USBD_LL_Init+0x94>)
 8006cf0:	2200      	movs	r2, #0
 8006cf2:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8006cf4:	4b11      	ldr	r3, [pc, #68]	; (8006d3c <USBD_LL_Init+0x94>)
 8006cf6:	2200      	movs	r2, #0
 8006cf8:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8006cfa:	4b10      	ldr	r3, [pc, #64]	; (8006d3c <USBD_LL_Init+0x94>)
 8006cfc:	2200      	movs	r2, #0
 8006cfe:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8006d00:	4b0e      	ldr	r3, [pc, #56]	; (8006d3c <USBD_LL_Init+0x94>)
 8006d02:	2200      	movs	r2, #0
 8006d04:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8006d06:	480d      	ldr	r0, [pc, #52]	; (8006d3c <USBD_LL_Init+0x94>)
 8006d08:	f7fa fbb3 	bl	8001472 <HAL_PCD_Init>
 8006d0c:	4603      	mov	r3, r0
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d001      	beq.n	8006d16 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8006d12:	f7f9 fd49 	bl	80007a8 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8006d16:	2180      	movs	r1, #128	; 0x80
 8006d18:	4808      	ldr	r0, [pc, #32]	; (8006d3c <USBD_LL_Init+0x94>)
 8006d1a:	f7fb fd10 	bl	800273e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8006d1e:	2240      	movs	r2, #64	; 0x40
 8006d20:	2100      	movs	r1, #0
 8006d22:	4806      	ldr	r0, [pc, #24]	; (8006d3c <USBD_LL_Init+0x94>)
 8006d24:	f7fb fcc4 	bl	80026b0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8006d28:	2280      	movs	r2, #128	; 0x80
 8006d2a:	2101      	movs	r1, #1
 8006d2c:	4803      	ldr	r0, [pc, #12]	; (8006d3c <USBD_LL_Init+0x94>)
 8006d2e:	f7fb fcbf 	bl	80026b0 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8006d32:	2300      	movs	r3, #0
}
 8006d34:	4618      	mov	r0, r3
 8006d36:	3708      	adds	r7, #8
 8006d38:	46bd      	mov	sp, r7
 8006d3a:	bd80      	pop	{r7, pc}
 8006d3c:	2000113c 	.word	0x2000113c

08006d40 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8006d40:	b580      	push	{r7, lr}
 8006d42:	b084      	sub	sp, #16
 8006d44:	af00      	add	r7, sp, #0
 8006d46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006d48:	2300      	movs	r3, #0
 8006d4a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006d4c:	2300      	movs	r3, #0
 8006d4e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006d56:	4618      	mov	r0, r3
 8006d58:	f7fa fca8 	bl	80016ac <HAL_PCD_Start>
 8006d5c:	4603      	mov	r3, r0
 8006d5e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006d60:	7bfb      	ldrb	r3, [r7, #15]
 8006d62:	4618      	mov	r0, r3
 8006d64:	f000 f942 	bl	8006fec <USBD_Get_USB_Status>
 8006d68:	4603      	mov	r3, r0
 8006d6a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006d6c:	7bbb      	ldrb	r3, [r7, #14]
}
 8006d6e:	4618      	mov	r0, r3
 8006d70:	3710      	adds	r7, #16
 8006d72:	46bd      	mov	sp, r7
 8006d74:	bd80      	pop	{r7, pc}

08006d76 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8006d76:	b580      	push	{r7, lr}
 8006d78:	b084      	sub	sp, #16
 8006d7a:	af00      	add	r7, sp, #0
 8006d7c:	6078      	str	r0, [r7, #4]
 8006d7e:	4608      	mov	r0, r1
 8006d80:	4611      	mov	r1, r2
 8006d82:	461a      	mov	r2, r3
 8006d84:	4603      	mov	r3, r0
 8006d86:	70fb      	strb	r3, [r7, #3]
 8006d88:	460b      	mov	r3, r1
 8006d8a:	70bb      	strb	r3, [r7, #2]
 8006d8c:	4613      	mov	r3, r2
 8006d8e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006d90:	2300      	movs	r3, #0
 8006d92:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006d94:	2300      	movs	r3, #0
 8006d96:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8006d9e:	78bb      	ldrb	r3, [r7, #2]
 8006da0:	883a      	ldrh	r2, [r7, #0]
 8006da2:	78f9      	ldrb	r1, [r7, #3]
 8006da4:	f7fb f88c 	bl	8001ec0 <HAL_PCD_EP_Open>
 8006da8:	4603      	mov	r3, r0
 8006daa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006dac:	7bfb      	ldrb	r3, [r7, #15]
 8006dae:	4618      	mov	r0, r3
 8006db0:	f000 f91c 	bl	8006fec <USBD_Get_USB_Status>
 8006db4:	4603      	mov	r3, r0
 8006db6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006db8:	7bbb      	ldrb	r3, [r7, #14]
}
 8006dba:	4618      	mov	r0, r3
 8006dbc:	3710      	adds	r7, #16
 8006dbe:	46bd      	mov	sp, r7
 8006dc0:	bd80      	pop	{r7, pc}

08006dc2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006dc2:	b580      	push	{r7, lr}
 8006dc4:	b084      	sub	sp, #16
 8006dc6:	af00      	add	r7, sp, #0
 8006dc8:	6078      	str	r0, [r7, #4]
 8006dca:	460b      	mov	r3, r1
 8006dcc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006dce:	2300      	movs	r3, #0
 8006dd0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006dd2:	2300      	movs	r3, #0
 8006dd4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006ddc:	78fa      	ldrb	r2, [r7, #3]
 8006dde:	4611      	mov	r1, r2
 8006de0:	4618      	mov	r0, r3
 8006de2:	f7fb f8d5 	bl	8001f90 <HAL_PCD_EP_Close>
 8006de6:	4603      	mov	r3, r0
 8006de8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006dea:	7bfb      	ldrb	r3, [r7, #15]
 8006dec:	4618      	mov	r0, r3
 8006dee:	f000 f8fd 	bl	8006fec <USBD_Get_USB_Status>
 8006df2:	4603      	mov	r3, r0
 8006df4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006df6:	7bbb      	ldrb	r3, [r7, #14]
}
 8006df8:	4618      	mov	r0, r3
 8006dfa:	3710      	adds	r7, #16
 8006dfc:	46bd      	mov	sp, r7
 8006dfe:	bd80      	pop	{r7, pc}

08006e00 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006e00:	b580      	push	{r7, lr}
 8006e02:	b084      	sub	sp, #16
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	6078      	str	r0, [r7, #4]
 8006e08:	460b      	mov	r3, r1
 8006e0a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006e0c:	2300      	movs	r3, #0
 8006e0e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006e10:	2300      	movs	r3, #0
 8006e12:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006e1a:	78fa      	ldrb	r2, [r7, #3]
 8006e1c:	4611      	mov	r1, r2
 8006e1e:	4618      	mov	r0, r3
 8006e20:	f7fb f9ad 	bl	800217e <HAL_PCD_EP_SetStall>
 8006e24:	4603      	mov	r3, r0
 8006e26:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006e28:	7bfb      	ldrb	r3, [r7, #15]
 8006e2a:	4618      	mov	r0, r3
 8006e2c:	f000 f8de 	bl	8006fec <USBD_Get_USB_Status>
 8006e30:	4603      	mov	r3, r0
 8006e32:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006e34:	7bbb      	ldrb	r3, [r7, #14]
}
 8006e36:	4618      	mov	r0, r3
 8006e38:	3710      	adds	r7, #16
 8006e3a:	46bd      	mov	sp, r7
 8006e3c:	bd80      	pop	{r7, pc}

08006e3e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006e3e:	b580      	push	{r7, lr}
 8006e40:	b084      	sub	sp, #16
 8006e42:	af00      	add	r7, sp, #0
 8006e44:	6078      	str	r0, [r7, #4]
 8006e46:	460b      	mov	r3, r1
 8006e48:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006e4a:	2300      	movs	r3, #0
 8006e4c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006e4e:	2300      	movs	r3, #0
 8006e50:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006e58:	78fa      	ldrb	r2, [r7, #3]
 8006e5a:	4611      	mov	r1, r2
 8006e5c:	4618      	mov	r0, r3
 8006e5e:	f7fb f9f2 	bl	8002246 <HAL_PCD_EP_ClrStall>
 8006e62:	4603      	mov	r3, r0
 8006e64:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006e66:	7bfb      	ldrb	r3, [r7, #15]
 8006e68:	4618      	mov	r0, r3
 8006e6a:	f000 f8bf 	bl	8006fec <USBD_Get_USB_Status>
 8006e6e:	4603      	mov	r3, r0
 8006e70:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006e72:	7bbb      	ldrb	r3, [r7, #14]
}
 8006e74:	4618      	mov	r0, r3
 8006e76:	3710      	adds	r7, #16
 8006e78:	46bd      	mov	sp, r7
 8006e7a:	bd80      	pop	{r7, pc}

08006e7c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006e7c:	b480      	push	{r7}
 8006e7e:	b085      	sub	sp, #20
 8006e80:	af00      	add	r7, sp, #0
 8006e82:	6078      	str	r0, [r7, #4]
 8006e84:	460b      	mov	r3, r1
 8006e86:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006e8e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8006e90:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	da0b      	bge.n	8006eb0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8006e98:	78fb      	ldrb	r3, [r7, #3]
 8006e9a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006e9e:	68f9      	ldr	r1, [r7, #12]
 8006ea0:	4613      	mov	r3, r2
 8006ea2:	00db      	lsls	r3, r3, #3
 8006ea4:	1a9b      	subs	r3, r3, r2
 8006ea6:	009b      	lsls	r3, r3, #2
 8006ea8:	440b      	add	r3, r1
 8006eaa:	333e      	adds	r3, #62	; 0x3e
 8006eac:	781b      	ldrb	r3, [r3, #0]
 8006eae:	e00b      	b.n	8006ec8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8006eb0:	78fb      	ldrb	r3, [r7, #3]
 8006eb2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006eb6:	68f9      	ldr	r1, [r7, #12]
 8006eb8:	4613      	mov	r3, r2
 8006eba:	00db      	lsls	r3, r3, #3
 8006ebc:	1a9b      	subs	r3, r3, r2
 8006ebe:	009b      	lsls	r3, r3, #2
 8006ec0:	440b      	add	r3, r1
 8006ec2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8006ec6:	781b      	ldrb	r3, [r3, #0]
  }
}
 8006ec8:	4618      	mov	r0, r3
 8006eca:	3714      	adds	r7, #20
 8006ecc:	46bd      	mov	sp, r7
 8006ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed2:	4770      	bx	lr

08006ed4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8006ed4:	b580      	push	{r7, lr}
 8006ed6:	b084      	sub	sp, #16
 8006ed8:	af00      	add	r7, sp, #0
 8006eda:	6078      	str	r0, [r7, #4]
 8006edc:	460b      	mov	r3, r1
 8006ede:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006ee0:	2300      	movs	r3, #0
 8006ee2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006ee4:	2300      	movs	r3, #0
 8006ee6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006eee:	78fa      	ldrb	r2, [r7, #3]
 8006ef0:	4611      	mov	r1, r2
 8006ef2:	4618      	mov	r0, r3
 8006ef4:	f7fa ffbf 	bl	8001e76 <HAL_PCD_SetAddress>
 8006ef8:	4603      	mov	r3, r0
 8006efa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006efc:	7bfb      	ldrb	r3, [r7, #15]
 8006efe:	4618      	mov	r0, r3
 8006f00:	f000 f874 	bl	8006fec <USBD_Get_USB_Status>
 8006f04:	4603      	mov	r3, r0
 8006f06:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006f08:	7bbb      	ldrb	r3, [r7, #14]
}
 8006f0a:	4618      	mov	r0, r3
 8006f0c:	3710      	adds	r7, #16
 8006f0e:	46bd      	mov	sp, r7
 8006f10:	bd80      	pop	{r7, pc}

08006f12 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8006f12:	b580      	push	{r7, lr}
 8006f14:	b086      	sub	sp, #24
 8006f16:	af00      	add	r7, sp, #0
 8006f18:	60f8      	str	r0, [r7, #12]
 8006f1a:	607a      	str	r2, [r7, #4]
 8006f1c:	603b      	str	r3, [r7, #0]
 8006f1e:	460b      	mov	r3, r1
 8006f20:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006f22:	2300      	movs	r3, #0
 8006f24:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006f26:	2300      	movs	r3, #0
 8006f28:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8006f30:	7af9      	ldrb	r1, [r7, #11]
 8006f32:	683b      	ldr	r3, [r7, #0]
 8006f34:	687a      	ldr	r2, [r7, #4]
 8006f36:	f7fb f8d8 	bl	80020ea <HAL_PCD_EP_Transmit>
 8006f3a:	4603      	mov	r3, r0
 8006f3c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006f3e:	7dfb      	ldrb	r3, [r7, #23]
 8006f40:	4618      	mov	r0, r3
 8006f42:	f000 f853 	bl	8006fec <USBD_Get_USB_Status>
 8006f46:	4603      	mov	r3, r0
 8006f48:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8006f4a:	7dbb      	ldrb	r3, [r7, #22]
}
 8006f4c:	4618      	mov	r0, r3
 8006f4e:	3718      	adds	r7, #24
 8006f50:	46bd      	mov	sp, r7
 8006f52:	bd80      	pop	{r7, pc}

08006f54 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8006f54:	b580      	push	{r7, lr}
 8006f56:	b086      	sub	sp, #24
 8006f58:	af00      	add	r7, sp, #0
 8006f5a:	60f8      	str	r0, [r7, #12]
 8006f5c:	607a      	str	r2, [r7, #4]
 8006f5e:	603b      	str	r3, [r7, #0]
 8006f60:	460b      	mov	r3, r1
 8006f62:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006f64:	2300      	movs	r3, #0
 8006f66:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006f68:	2300      	movs	r3, #0
 8006f6a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8006f72:	7af9      	ldrb	r1, [r7, #11]
 8006f74:	683b      	ldr	r3, [r7, #0]
 8006f76:	687a      	ldr	r2, [r7, #4]
 8006f78:	f7fb f854 	bl	8002024 <HAL_PCD_EP_Receive>
 8006f7c:	4603      	mov	r3, r0
 8006f7e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006f80:	7dfb      	ldrb	r3, [r7, #23]
 8006f82:	4618      	mov	r0, r3
 8006f84:	f000 f832 	bl	8006fec <USBD_Get_USB_Status>
 8006f88:	4603      	mov	r3, r0
 8006f8a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8006f8c:	7dbb      	ldrb	r3, [r7, #22]
}
 8006f8e:	4618      	mov	r0, r3
 8006f90:	3718      	adds	r7, #24
 8006f92:	46bd      	mov	sp, r7
 8006f94:	bd80      	pop	{r7, pc}

08006f96 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006f96:	b580      	push	{r7, lr}
 8006f98:	b082      	sub	sp, #8
 8006f9a:	af00      	add	r7, sp, #0
 8006f9c:	6078      	str	r0, [r7, #4]
 8006f9e:	460b      	mov	r3, r1
 8006fa0:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006fa8:	78fa      	ldrb	r2, [r7, #3]
 8006faa:	4611      	mov	r1, r2
 8006fac:	4618      	mov	r0, r3
 8006fae:	f7fb f884 	bl	80020ba <HAL_PCD_EP_GetRxCount>
 8006fb2:	4603      	mov	r3, r0
}
 8006fb4:	4618      	mov	r0, r3
 8006fb6:	3708      	adds	r7, #8
 8006fb8:	46bd      	mov	sp, r7
 8006fba:	bd80      	pop	{r7, pc}

08006fbc <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8006fbc:	b480      	push	{r7}
 8006fbe:	b083      	sub	sp, #12
 8006fc0:	af00      	add	r7, sp, #0
 8006fc2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8006fc4:	4b03      	ldr	r3, [pc, #12]	; (8006fd4 <USBD_static_malloc+0x18>)
}
 8006fc6:	4618      	mov	r0, r3
 8006fc8:	370c      	adds	r7, #12
 8006fca:	46bd      	mov	sp, r7
 8006fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd0:	4770      	bx	lr
 8006fd2:	bf00      	nop
 8006fd4:	20001544 	.word	0x20001544

08006fd8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8006fd8:	b480      	push	{r7}
 8006fda:	b083      	sub	sp, #12
 8006fdc:	af00      	add	r7, sp, #0
 8006fde:	6078      	str	r0, [r7, #4]

}
 8006fe0:	bf00      	nop
 8006fe2:	370c      	adds	r7, #12
 8006fe4:	46bd      	mov	sp, r7
 8006fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fea:	4770      	bx	lr

08006fec <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8006fec:	b480      	push	{r7}
 8006fee:	b085      	sub	sp, #20
 8006ff0:	af00      	add	r7, sp, #0
 8006ff2:	4603      	mov	r3, r0
 8006ff4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006ff6:	2300      	movs	r3, #0
 8006ff8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8006ffa:	79fb      	ldrb	r3, [r7, #7]
 8006ffc:	2b03      	cmp	r3, #3
 8006ffe:	d817      	bhi.n	8007030 <USBD_Get_USB_Status+0x44>
 8007000:	a201      	add	r2, pc, #4	; (adr r2, 8007008 <USBD_Get_USB_Status+0x1c>)
 8007002:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007006:	bf00      	nop
 8007008:	08007019 	.word	0x08007019
 800700c:	0800701f 	.word	0x0800701f
 8007010:	08007025 	.word	0x08007025
 8007014:	0800702b 	.word	0x0800702b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007018:	2300      	movs	r3, #0
 800701a:	73fb      	strb	r3, [r7, #15]
    break;
 800701c:	e00b      	b.n	8007036 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800701e:	2303      	movs	r3, #3
 8007020:	73fb      	strb	r3, [r7, #15]
    break;
 8007022:	e008      	b.n	8007036 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007024:	2301      	movs	r3, #1
 8007026:	73fb      	strb	r3, [r7, #15]
    break;
 8007028:	e005      	b.n	8007036 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800702a:	2303      	movs	r3, #3
 800702c:	73fb      	strb	r3, [r7, #15]
    break;
 800702e:	e002      	b.n	8007036 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007030:	2303      	movs	r3, #3
 8007032:	73fb      	strb	r3, [r7, #15]
    break;
 8007034:	bf00      	nop
  }
  return usb_status;
 8007036:	7bfb      	ldrb	r3, [r7, #15]
}
 8007038:	4618      	mov	r0, r3
 800703a:	3714      	adds	r7, #20
 800703c:	46bd      	mov	sp, r7
 800703e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007042:	4770      	bx	lr

08007044 <main>:
 */

#include "main.h"

int main(void)
{
 8007044:	b580      	push	{r7, lr}
 8007046:	af00      	add	r7, sp, #0

	hwInit();
 8007048:	f7f9 fea4 	bl	8000d94 <hwInit>
	apInit();
 800704c:	f7f9 fa9a 	bl	8000584 <apInit>

	apMain();
 8007050:	f7f9 faa0 	bl	8000594 <apMain>
	return 0;
 8007054:	2300      	movs	r3, #0
}
 8007056:	4618      	mov	r0, r3
 8007058:	bd80      	pop	{r7, pc}
	...

0800705c <__errno>:
 800705c:	4b01      	ldr	r3, [pc, #4]	; (8007064 <__errno+0x8>)
 800705e:	6818      	ldr	r0, [r3, #0]
 8007060:	4770      	bx	lr
 8007062:	bf00      	nop
 8007064:	200001a8 	.word	0x200001a8

08007068 <__libc_init_array>:
 8007068:	b570      	push	{r4, r5, r6, lr}
 800706a:	4d0d      	ldr	r5, [pc, #52]	; (80070a0 <__libc_init_array+0x38>)
 800706c:	4c0d      	ldr	r4, [pc, #52]	; (80070a4 <__libc_init_array+0x3c>)
 800706e:	1b64      	subs	r4, r4, r5
 8007070:	10a4      	asrs	r4, r4, #2
 8007072:	2600      	movs	r6, #0
 8007074:	42a6      	cmp	r6, r4
 8007076:	d109      	bne.n	800708c <__libc_init_array+0x24>
 8007078:	4d0b      	ldr	r5, [pc, #44]	; (80070a8 <__libc_init_array+0x40>)
 800707a:	4c0c      	ldr	r4, [pc, #48]	; (80070ac <__libc_init_array+0x44>)
 800707c:	f000 fca8 	bl	80079d0 <_init>
 8007080:	1b64      	subs	r4, r4, r5
 8007082:	10a4      	asrs	r4, r4, #2
 8007084:	2600      	movs	r6, #0
 8007086:	42a6      	cmp	r6, r4
 8007088:	d105      	bne.n	8007096 <__libc_init_array+0x2e>
 800708a:	bd70      	pop	{r4, r5, r6, pc}
 800708c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007090:	4798      	blx	r3
 8007092:	3601      	adds	r6, #1
 8007094:	e7ee      	b.n	8007074 <__libc_init_array+0xc>
 8007096:	f855 3b04 	ldr.w	r3, [r5], #4
 800709a:	4798      	blx	r3
 800709c:	3601      	adds	r6, #1
 800709e:	e7f2      	b.n	8007086 <__libc_init_array+0x1e>
 80070a0:	08007ac0 	.word	0x08007ac0
 80070a4:	08007ac0 	.word	0x08007ac0
 80070a8:	08007ac0 	.word	0x08007ac0
 80070ac:	08007ac4 	.word	0x08007ac4

080070b0 <memset>:
 80070b0:	4402      	add	r2, r0
 80070b2:	4603      	mov	r3, r0
 80070b4:	4293      	cmp	r3, r2
 80070b6:	d100      	bne.n	80070ba <memset+0xa>
 80070b8:	4770      	bx	lr
 80070ba:	f803 1b01 	strb.w	r1, [r3], #1
 80070be:	e7f9      	b.n	80070b4 <memset+0x4>

080070c0 <_vsniprintf_r>:
 80070c0:	b530      	push	{r4, r5, lr}
 80070c2:	4614      	mov	r4, r2
 80070c4:	2c00      	cmp	r4, #0
 80070c6:	b09b      	sub	sp, #108	; 0x6c
 80070c8:	4605      	mov	r5, r0
 80070ca:	461a      	mov	r2, r3
 80070cc:	da05      	bge.n	80070da <_vsniprintf_r+0x1a>
 80070ce:	238b      	movs	r3, #139	; 0x8b
 80070d0:	6003      	str	r3, [r0, #0]
 80070d2:	f04f 30ff 	mov.w	r0, #4294967295
 80070d6:	b01b      	add	sp, #108	; 0x6c
 80070d8:	bd30      	pop	{r4, r5, pc}
 80070da:	f44f 7302 	mov.w	r3, #520	; 0x208
 80070de:	f8ad 300c 	strh.w	r3, [sp, #12]
 80070e2:	bf14      	ite	ne
 80070e4:	f104 33ff 	addne.w	r3, r4, #4294967295
 80070e8:	4623      	moveq	r3, r4
 80070ea:	9302      	str	r3, [sp, #8]
 80070ec:	9305      	str	r3, [sp, #20]
 80070ee:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80070f2:	9100      	str	r1, [sp, #0]
 80070f4:	9104      	str	r1, [sp, #16]
 80070f6:	f8ad 300e 	strh.w	r3, [sp, #14]
 80070fa:	4669      	mov	r1, sp
 80070fc:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80070fe:	f000 f875 	bl	80071ec <_svfiprintf_r>
 8007102:	1c43      	adds	r3, r0, #1
 8007104:	bfbc      	itt	lt
 8007106:	238b      	movlt	r3, #139	; 0x8b
 8007108:	602b      	strlt	r3, [r5, #0]
 800710a:	2c00      	cmp	r4, #0
 800710c:	d0e3      	beq.n	80070d6 <_vsniprintf_r+0x16>
 800710e:	9b00      	ldr	r3, [sp, #0]
 8007110:	2200      	movs	r2, #0
 8007112:	701a      	strb	r2, [r3, #0]
 8007114:	e7df      	b.n	80070d6 <_vsniprintf_r+0x16>
	...

08007118 <vsniprintf>:
 8007118:	b507      	push	{r0, r1, r2, lr}
 800711a:	9300      	str	r3, [sp, #0]
 800711c:	4613      	mov	r3, r2
 800711e:	460a      	mov	r2, r1
 8007120:	4601      	mov	r1, r0
 8007122:	4803      	ldr	r0, [pc, #12]	; (8007130 <vsniprintf+0x18>)
 8007124:	6800      	ldr	r0, [r0, #0]
 8007126:	f7ff ffcb 	bl	80070c0 <_vsniprintf_r>
 800712a:	b003      	add	sp, #12
 800712c:	f85d fb04 	ldr.w	pc, [sp], #4
 8007130:	200001a8 	.word	0x200001a8

08007134 <__ssputs_r>:
 8007134:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007138:	688e      	ldr	r6, [r1, #8]
 800713a:	429e      	cmp	r6, r3
 800713c:	4682      	mov	sl, r0
 800713e:	460c      	mov	r4, r1
 8007140:	4690      	mov	r8, r2
 8007142:	461f      	mov	r7, r3
 8007144:	d838      	bhi.n	80071b8 <__ssputs_r+0x84>
 8007146:	898a      	ldrh	r2, [r1, #12]
 8007148:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800714c:	d032      	beq.n	80071b4 <__ssputs_r+0x80>
 800714e:	6825      	ldr	r5, [r4, #0]
 8007150:	6909      	ldr	r1, [r1, #16]
 8007152:	eba5 0901 	sub.w	r9, r5, r1
 8007156:	6965      	ldr	r5, [r4, #20]
 8007158:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800715c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007160:	3301      	adds	r3, #1
 8007162:	444b      	add	r3, r9
 8007164:	106d      	asrs	r5, r5, #1
 8007166:	429d      	cmp	r5, r3
 8007168:	bf38      	it	cc
 800716a:	461d      	movcc	r5, r3
 800716c:	0553      	lsls	r3, r2, #21
 800716e:	d531      	bpl.n	80071d4 <__ssputs_r+0xa0>
 8007170:	4629      	mov	r1, r5
 8007172:	f000 fb63 	bl	800783c <_malloc_r>
 8007176:	4606      	mov	r6, r0
 8007178:	b950      	cbnz	r0, 8007190 <__ssputs_r+0x5c>
 800717a:	230c      	movs	r3, #12
 800717c:	f8ca 3000 	str.w	r3, [sl]
 8007180:	89a3      	ldrh	r3, [r4, #12]
 8007182:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007186:	81a3      	strh	r3, [r4, #12]
 8007188:	f04f 30ff 	mov.w	r0, #4294967295
 800718c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007190:	6921      	ldr	r1, [r4, #16]
 8007192:	464a      	mov	r2, r9
 8007194:	f000 fabe 	bl	8007714 <memcpy>
 8007198:	89a3      	ldrh	r3, [r4, #12]
 800719a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800719e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80071a2:	81a3      	strh	r3, [r4, #12]
 80071a4:	6126      	str	r6, [r4, #16]
 80071a6:	6165      	str	r5, [r4, #20]
 80071a8:	444e      	add	r6, r9
 80071aa:	eba5 0509 	sub.w	r5, r5, r9
 80071ae:	6026      	str	r6, [r4, #0]
 80071b0:	60a5      	str	r5, [r4, #8]
 80071b2:	463e      	mov	r6, r7
 80071b4:	42be      	cmp	r6, r7
 80071b6:	d900      	bls.n	80071ba <__ssputs_r+0x86>
 80071b8:	463e      	mov	r6, r7
 80071ba:	6820      	ldr	r0, [r4, #0]
 80071bc:	4632      	mov	r2, r6
 80071be:	4641      	mov	r1, r8
 80071c0:	f000 fab6 	bl	8007730 <memmove>
 80071c4:	68a3      	ldr	r3, [r4, #8]
 80071c6:	1b9b      	subs	r3, r3, r6
 80071c8:	60a3      	str	r3, [r4, #8]
 80071ca:	6823      	ldr	r3, [r4, #0]
 80071cc:	4433      	add	r3, r6
 80071ce:	6023      	str	r3, [r4, #0]
 80071d0:	2000      	movs	r0, #0
 80071d2:	e7db      	b.n	800718c <__ssputs_r+0x58>
 80071d4:	462a      	mov	r2, r5
 80071d6:	f000 fba5 	bl	8007924 <_realloc_r>
 80071da:	4606      	mov	r6, r0
 80071dc:	2800      	cmp	r0, #0
 80071de:	d1e1      	bne.n	80071a4 <__ssputs_r+0x70>
 80071e0:	6921      	ldr	r1, [r4, #16]
 80071e2:	4650      	mov	r0, sl
 80071e4:	f000 fabe 	bl	8007764 <_free_r>
 80071e8:	e7c7      	b.n	800717a <__ssputs_r+0x46>
	...

080071ec <_svfiprintf_r>:
 80071ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071f0:	4698      	mov	r8, r3
 80071f2:	898b      	ldrh	r3, [r1, #12]
 80071f4:	061b      	lsls	r3, r3, #24
 80071f6:	b09d      	sub	sp, #116	; 0x74
 80071f8:	4607      	mov	r7, r0
 80071fa:	460d      	mov	r5, r1
 80071fc:	4614      	mov	r4, r2
 80071fe:	d50e      	bpl.n	800721e <_svfiprintf_r+0x32>
 8007200:	690b      	ldr	r3, [r1, #16]
 8007202:	b963      	cbnz	r3, 800721e <_svfiprintf_r+0x32>
 8007204:	2140      	movs	r1, #64	; 0x40
 8007206:	f000 fb19 	bl	800783c <_malloc_r>
 800720a:	6028      	str	r0, [r5, #0]
 800720c:	6128      	str	r0, [r5, #16]
 800720e:	b920      	cbnz	r0, 800721a <_svfiprintf_r+0x2e>
 8007210:	230c      	movs	r3, #12
 8007212:	603b      	str	r3, [r7, #0]
 8007214:	f04f 30ff 	mov.w	r0, #4294967295
 8007218:	e0d1      	b.n	80073be <_svfiprintf_r+0x1d2>
 800721a:	2340      	movs	r3, #64	; 0x40
 800721c:	616b      	str	r3, [r5, #20]
 800721e:	2300      	movs	r3, #0
 8007220:	9309      	str	r3, [sp, #36]	; 0x24
 8007222:	2320      	movs	r3, #32
 8007224:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007228:	f8cd 800c 	str.w	r8, [sp, #12]
 800722c:	2330      	movs	r3, #48	; 0x30
 800722e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80073d8 <_svfiprintf_r+0x1ec>
 8007232:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007236:	f04f 0901 	mov.w	r9, #1
 800723a:	4623      	mov	r3, r4
 800723c:	469a      	mov	sl, r3
 800723e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007242:	b10a      	cbz	r2, 8007248 <_svfiprintf_r+0x5c>
 8007244:	2a25      	cmp	r2, #37	; 0x25
 8007246:	d1f9      	bne.n	800723c <_svfiprintf_r+0x50>
 8007248:	ebba 0b04 	subs.w	fp, sl, r4
 800724c:	d00b      	beq.n	8007266 <_svfiprintf_r+0x7a>
 800724e:	465b      	mov	r3, fp
 8007250:	4622      	mov	r2, r4
 8007252:	4629      	mov	r1, r5
 8007254:	4638      	mov	r0, r7
 8007256:	f7ff ff6d 	bl	8007134 <__ssputs_r>
 800725a:	3001      	adds	r0, #1
 800725c:	f000 80aa 	beq.w	80073b4 <_svfiprintf_r+0x1c8>
 8007260:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007262:	445a      	add	r2, fp
 8007264:	9209      	str	r2, [sp, #36]	; 0x24
 8007266:	f89a 3000 	ldrb.w	r3, [sl]
 800726a:	2b00      	cmp	r3, #0
 800726c:	f000 80a2 	beq.w	80073b4 <_svfiprintf_r+0x1c8>
 8007270:	2300      	movs	r3, #0
 8007272:	f04f 32ff 	mov.w	r2, #4294967295
 8007276:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800727a:	f10a 0a01 	add.w	sl, sl, #1
 800727e:	9304      	str	r3, [sp, #16]
 8007280:	9307      	str	r3, [sp, #28]
 8007282:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007286:	931a      	str	r3, [sp, #104]	; 0x68
 8007288:	4654      	mov	r4, sl
 800728a:	2205      	movs	r2, #5
 800728c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007290:	4851      	ldr	r0, [pc, #324]	; (80073d8 <_svfiprintf_r+0x1ec>)
 8007292:	f7f8 ffa5 	bl	80001e0 <memchr>
 8007296:	9a04      	ldr	r2, [sp, #16]
 8007298:	b9d8      	cbnz	r0, 80072d2 <_svfiprintf_r+0xe6>
 800729a:	06d0      	lsls	r0, r2, #27
 800729c:	bf44      	itt	mi
 800729e:	2320      	movmi	r3, #32
 80072a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80072a4:	0711      	lsls	r1, r2, #28
 80072a6:	bf44      	itt	mi
 80072a8:	232b      	movmi	r3, #43	; 0x2b
 80072aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80072ae:	f89a 3000 	ldrb.w	r3, [sl]
 80072b2:	2b2a      	cmp	r3, #42	; 0x2a
 80072b4:	d015      	beq.n	80072e2 <_svfiprintf_r+0xf6>
 80072b6:	9a07      	ldr	r2, [sp, #28]
 80072b8:	4654      	mov	r4, sl
 80072ba:	2000      	movs	r0, #0
 80072bc:	f04f 0c0a 	mov.w	ip, #10
 80072c0:	4621      	mov	r1, r4
 80072c2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80072c6:	3b30      	subs	r3, #48	; 0x30
 80072c8:	2b09      	cmp	r3, #9
 80072ca:	d94e      	bls.n	800736a <_svfiprintf_r+0x17e>
 80072cc:	b1b0      	cbz	r0, 80072fc <_svfiprintf_r+0x110>
 80072ce:	9207      	str	r2, [sp, #28]
 80072d0:	e014      	b.n	80072fc <_svfiprintf_r+0x110>
 80072d2:	eba0 0308 	sub.w	r3, r0, r8
 80072d6:	fa09 f303 	lsl.w	r3, r9, r3
 80072da:	4313      	orrs	r3, r2
 80072dc:	9304      	str	r3, [sp, #16]
 80072de:	46a2      	mov	sl, r4
 80072e0:	e7d2      	b.n	8007288 <_svfiprintf_r+0x9c>
 80072e2:	9b03      	ldr	r3, [sp, #12]
 80072e4:	1d19      	adds	r1, r3, #4
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	9103      	str	r1, [sp, #12]
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	bfbb      	ittet	lt
 80072ee:	425b      	neglt	r3, r3
 80072f0:	f042 0202 	orrlt.w	r2, r2, #2
 80072f4:	9307      	strge	r3, [sp, #28]
 80072f6:	9307      	strlt	r3, [sp, #28]
 80072f8:	bfb8      	it	lt
 80072fa:	9204      	strlt	r2, [sp, #16]
 80072fc:	7823      	ldrb	r3, [r4, #0]
 80072fe:	2b2e      	cmp	r3, #46	; 0x2e
 8007300:	d10c      	bne.n	800731c <_svfiprintf_r+0x130>
 8007302:	7863      	ldrb	r3, [r4, #1]
 8007304:	2b2a      	cmp	r3, #42	; 0x2a
 8007306:	d135      	bne.n	8007374 <_svfiprintf_r+0x188>
 8007308:	9b03      	ldr	r3, [sp, #12]
 800730a:	1d1a      	adds	r2, r3, #4
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	9203      	str	r2, [sp, #12]
 8007310:	2b00      	cmp	r3, #0
 8007312:	bfb8      	it	lt
 8007314:	f04f 33ff 	movlt.w	r3, #4294967295
 8007318:	3402      	adds	r4, #2
 800731a:	9305      	str	r3, [sp, #20]
 800731c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80073e8 <_svfiprintf_r+0x1fc>
 8007320:	7821      	ldrb	r1, [r4, #0]
 8007322:	2203      	movs	r2, #3
 8007324:	4650      	mov	r0, sl
 8007326:	f7f8 ff5b 	bl	80001e0 <memchr>
 800732a:	b140      	cbz	r0, 800733e <_svfiprintf_r+0x152>
 800732c:	2340      	movs	r3, #64	; 0x40
 800732e:	eba0 000a 	sub.w	r0, r0, sl
 8007332:	fa03 f000 	lsl.w	r0, r3, r0
 8007336:	9b04      	ldr	r3, [sp, #16]
 8007338:	4303      	orrs	r3, r0
 800733a:	3401      	adds	r4, #1
 800733c:	9304      	str	r3, [sp, #16]
 800733e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007342:	4826      	ldr	r0, [pc, #152]	; (80073dc <_svfiprintf_r+0x1f0>)
 8007344:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007348:	2206      	movs	r2, #6
 800734a:	f7f8 ff49 	bl	80001e0 <memchr>
 800734e:	2800      	cmp	r0, #0
 8007350:	d038      	beq.n	80073c4 <_svfiprintf_r+0x1d8>
 8007352:	4b23      	ldr	r3, [pc, #140]	; (80073e0 <_svfiprintf_r+0x1f4>)
 8007354:	bb1b      	cbnz	r3, 800739e <_svfiprintf_r+0x1b2>
 8007356:	9b03      	ldr	r3, [sp, #12]
 8007358:	3307      	adds	r3, #7
 800735a:	f023 0307 	bic.w	r3, r3, #7
 800735e:	3308      	adds	r3, #8
 8007360:	9303      	str	r3, [sp, #12]
 8007362:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007364:	4433      	add	r3, r6
 8007366:	9309      	str	r3, [sp, #36]	; 0x24
 8007368:	e767      	b.n	800723a <_svfiprintf_r+0x4e>
 800736a:	fb0c 3202 	mla	r2, ip, r2, r3
 800736e:	460c      	mov	r4, r1
 8007370:	2001      	movs	r0, #1
 8007372:	e7a5      	b.n	80072c0 <_svfiprintf_r+0xd4>
 8007374:	2300      	movs	r3, #0
 8007376:	3401      	adds	r4, #1
 8007378:	9305      	str	r3, [sp, #20]
 800737a:	4619      	mov	r1, r3
 800737c:	f04f 0c0a 	mov.w	ip, #10
 8007380:	4620      	mov	r0, r4
 8007382:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007386:	3a30      	subs	r2, #48	; 0x30
 8007388:	2a09      	cmp	r2, #9
 800738a:	d903      	bls.n	8007394 <_svfiprintf_r+0x1a8>
 800738c:	2b00      	cmp	r3, #0
 800738e:	d0c5      	beq.n	800731c <_svfiprintf_r+0x130>
 8007390:	9105      	str	r1, [sp, #20]
 8007392:	e7c3      	b.n	800731c <_svfiprintf_r+0x130>
 8007394:	fb0c 2101 	mla	r1, ip, r1, r2
 8007398:	4604      	mov	r4, r0
 800739a:	2301      	movs	r3, #1
 800739c:	e7f0      	b.n	8007380 <_svfiprintf_r+0x194>
 800739e:	ab03      	add	r3, sp, #12
 80073a0:	9300      	str	r3, [sp, #0]
 80073a2:	462a      	mov	r2, r5
 80073a4:	4b0f      	ldr	r3, [pc, #60]	; (80073e4 <_svfiprintf_r+0x1f8>)
 80073a6:	a904      	add	r1, sp, #16
 80073a8:	4638      	mov	r0, r7
 80073aa:	f3af 8000 	nop.w
 80073ae:	1c42      	adds	r2, r0, #1
 80073b0:	4606      	mov	r6, r0
 80073b2:	d1d6      	bne.n	8007362 <_svfiprintf_r+0x176>
 80073b4:	89ab      	ldrh	r3, [r5, #12]
 80073b6:	065b      	lsls	r3, r3, #25
 80073b8:	f53f af2c 	bmi.w	8007214 <_svfiprintf_r+0x28>
 80073bc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80073be:	b01d      	add	sp, #116	; 0x74
 80073c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073c4:	ab03      	add	r3, sp, #12
 80073c6:	9300      	str	r3, [sp, #0]
 80073c8:	462a      	mov	r2, r5
 80073ca:	4b06      	ldr	r3, [pc, #24]	; (80073e4 <_svfiprintf_r+0x1f8>)
 80073cc:	a904      	add	r1, sp, #16
 80073ce:	4638      	mov	r0, r7
 80073d0:	f000 f87a 	bl	80074c8 <_printf_i>
 80073d4:	e7eb      	b.n	80073ae <_svfiprintf_r+0x1c2>
 80073d6:	bf00      	nop
 80073d8:	08007a84 	.word	0x08007a84
 80073dc:	08007a8e 	.word	0x08007a8e
 80073e0:	00000000 	.word	0x00000000
 80073e4:	08007135 	.word	0x08007135
 80073e8:	08007a8a 	.word	0x08007a8a

080073ec <_printf_common>:
 80073ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80073f0:	4616      	mov	r6, r2
 80073f2:	4699      	mov	r9, r3
 80073f4:	688a      	ldr	r2, [r1, #8]
 80073f6:	690b      	ldr	r3, [r1, #16]
 80073f8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80073fc:	4293      	cmp	r3, r2
 80073fe:	bfb8      	it	lt
 8007400:	4613      	movlt	r3, r2
 8007402:	6033      	str	r3, [r6, #0]
 8007404:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007408:	4607      	mov	r7, r0
 800740a:	460c      	mov	r4, r1
 800740c:	b10a      	cbz	r2, 8007412 <_printf_common+0x26>
 800740e:	3301      	adds	r3, #1
 8007410:	6033      	str	r3, [r6, #0]
 8007412:	6823      	ldr	r3, [r4, #0]
 8007414:	0699      	lsls	r1, r3, #26
 8007416:	bf42      	ittt	mi
 8007418:	6833      	ldrmi	r3, [r6, #0]
 800741a:	3302      	addmi	r3, #2
 800741c:	6033      	strmi	r3, [r6, #0]
 800741e:	6825      	ldr	r5, [r4, #0]
 8007420:	f015 0506 	ands.w	r5, r5, #6
 8007424:	d106      	bne.n	8007434 <_printf_common+0x48>
 8007426:	f104 0a19 	add.w	sl, r4, #25
 800742a:	68e3      	ldr	r3, [r4, #12]
 800742c:	6832      	ldr	r2, [r6, #0]
 800742e:	1a9b      	subs	r3, r3, r2
 8007430:	42ab      	cmp	r3, r5
 8007432:	dc26      	bgt.n	8007482 <_printf_common+0x96>
 8007434:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007438:	1e13      	subs	r3, r2, #0
 800743a:	6822      	ldr	r2, [r4, #0]
 800743c:	bf18      	it	ne
 800743e:	2301      	movne	r3, #1
 8007440:	0692      	lsls	r2, r2, #26
 8007442:	d42b      	bmi.n	800749c <_printf_common+0xb0>
 8007444:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007448:	4649      	mov	r1, r9
 800744a:	4638      	mov	r0, r7
 800744c:	47c0      	blx	r8
 800744e:	3001      	adds	r0, #1
 8007450:	d01e      	beq.n	8007490 <_printf_common+0xa4>
 8007452:	6823      	ldr	r3, [r4, #0]
 8007454:	68e5      	ldr	r5, [r4, #12]
 8007456:	6832      	ldr	r2, [r6, #0]
 8007458:	f003 0306 	and.w	r3, r3, #6
 800745c:	2b04      	cmp	r3, #4
 800745e:	bf08      	it	eq
 8007460:	1aad      	subeq	r5, r5, r2
 8007462:	68a3      	ldr	r3, [r4, #8]
 8007464:	6922      	ldr	r2, [r4, #16]
 8007466:	bf0c      	ite	eq
 8007468:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800746c:	2500      	movne	r5, #0
 800746e:	4293      	cmp	r3, r2
 8007470:	bfc4      	itt	gt
 8007472:	1a9b      	subgt	r3, r3, r2
 8007474:	18ed      	addgt	r5, r5, r3
 8007476:	2600      	movs	r6, #0
 8007478:	341a      	adds	r4, #26
 800747a:	42b5      	cmp	r5, r6
 800747c:	d11a      	bne.n	80074b4 <_printf_common+0xc8>
 800747e:	2000      	movs	r0, #0
 8007480:	e008      	b.n	8007494 <_printf_common+0xa8>
 8007482:	2301      	movs	r3, #1
 8007484:	4652      	mov	r2, sl
 8007486:	4649      	mov	r1, r9
 8007488:	4638      	mov	r0, r7
 800748a:	47c0      	blx	r8
 800748c:	3001      	adds	r0, #1
 800748e:	d103      	bne.n	8007498 <_printf_common+0xac>
 8007490:	f04f 30ff 	mov.w	r0, #4294967295
 8007494:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007498:	3501      	adds	r5, #1
 800749a:	e7c6      	b.n	800742a <_printf_common+0x3e>
 800749c:	18e1      	adds	r1, r4, r3
 800749e:	1c5a      	adds	r2, r3, #1
 80074a0:	2030      	movs	r0, #48	; 0x30
 80074a2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80074a6:	4422      	add	r2, r4
 80074a8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80074ac:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80074b0:	3302      	adds	r3, #2
 80074b2:	e7c7      	b.n	8007444 <_printf_common+0x58>
 80074b4:	2301      	movs	r3, #1
 80074b6:	4622      	mov	r2, r4
 80074b8:	4649      	mov	r1, r9
 80074ba:	4638      	mov	r0, r7
 80074bc:	47c0      	blx	r8
 80074be:	3001      	adds	r0, #1
 80074c0:	d0e6      	beq.n	8007490 <_printf_common+0xa4>
 80074c2:	3601      	adds	r6, #1
 80074c4:	e7d9      	b.n	800747a <_printf_common+0x8e>
	...

080074c8 <_printf_i>:
 80074c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80074cc:	7e0f      	ldrb	r7, [r1, #24]
 80074ce:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80074d0:	2f78      	cmp	r7, #120	; 0x78
 80074d2:	4691      	mov	r9, r2
 80074d4:	4680      	mov	r8, r0
 80074d6:	460c      	mov	r4, r1
 80074d8:	469a      	mov	sl, r3
 80074da:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80074de:	d807      	bhi.n	80074f0 <_printf_i+0x28>
 80074e0:	2f62      	cmp	r7, #98	; 0x62
 80074e2:	d80a      	bhi.n	80074fa <_printf_i+0x32>
 80074e4:	2f00      	cmp	r7, #0
 80074e6:	f000 80d8 	beq.w	800769a <_printf_i+0x1d2>
 80074ea:	2f58      	cmp	r7, #88	; 0x58
 80074ec:	f000 80a3 	beq.w	8007636 <_printf_i+0x16e>
 80074f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80074f4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80074f8:	e03a      	b.n	8007570 <_printf_i+0xa8>
 80074fa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80074fe:	2b15      	cmp	r3, #21
 8007500:	d8f6      	bhi.n	80074f0 <_printf_i+0x28>
 8007502:	a101      	add	r1, pc, #4	; (adr r1, 8007508 <_printf_i+0x40>)
 8007504:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007508:	08007561 	.word	0x08007561
 800750c:	08007575 	.word	0x08007575
 8007510:	080074f1 	.word	0x080074f1
 8007514:	080074f1 	.word	0x080074f1
 8007518:	080074f1 	.word	0x080074f1
 800751c:	080074f1 	.word	0x080074f1
 8007520:	08007575 	.word	0x08007575
 8007524:	080074f1 	.word	0x080074f1
 8007528:	080074f1 	.word	0x080074f1
 800752c:	080074f1 	.word	0x080074f1
 8007530:	080074f1 	.word	0x080074f1
 8007534:	08007681 	.word	0x08007681
 8007538:	080075a5 	.word	0x080075a5
 800753c:	08007663 	.word	0x08007663
 8007540:	080074f1 	.word	0x080074f1
 8007544:	080074f1 	.word	0x080074f1
 8007548:	080076a3 	.word	0x080076a3
 800754c:	080074f1 	.word	0x080074f1
 8007550:	080075a5 	.word	0x080075a5
 8007554:	080074f1 	.word	0x080074f1
 8007558:	080074f1 	.word	0x080074f1
 800755c:	0800766b 	.word	0x0800766b
 8007560:	682b      	ldr	r3, [r5, #0]
 8007562:	1d1a      	adds	r2, r3, #4
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	602a      	str	r2, [r5, #0]
 8007568:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800756c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007570:	2301      	movs	r3, #1
 8007572:	e0a3      	b.n	80076bc <_printf_i+0x1f4>
 8007574:	6820      	ldr	r0, [r4, #0]
 8007576:	6829      	ldr	r1, [r5, #0]
 8007578:	0606      	lsls	r6, r0, #24
 800757a:	f101 0304 	add.w	r3, r1, #4
 800757e:	d50a      	bpl.n	8007596 <_printf_i+0xce>
 8007580:	680e      	ldr	r6, [r1, #0]
 8007582:	602b      	str	r3, [r5, #0]
 8007584:	2e00      	cmp	r6, #0
 8007586:	da03      	bge.n	8007590 <_printf_i+0xc8>
 8007588:	232d      	movs	r3, #45	; 0x2d
 800758a:	4276      	negs	r6, r6
 800758c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007590:	485e      	ldr	r0, [pc, #376]	; (800770c <_printf_i+0x244>)
 8007592:	230a      	movs	r3, #10
 8007594:	e019      	b.n	80075ca <_printf_i+0x102>
 8007596:	680e      	ldr	r6, [r1, #0]
 8007598:	602b      	str	r3, [r5, #0]
 800759a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800759e:	bf18      	it	ne
 80075a0:	b236      	sxthne	r6, r6
 80075a2:	e7ef      	b.n	8007584 <_printf_i+0xbc>
 80075a4:	682b      	ldr	r3, [r5, #0]
 80075a6:	6820      	ldr	r0, [r4, #0]
 80075a8:	1d19      	adds	r1, r3, #4
 80075aa:	6029      	str	r1, [r5, #0]
 80075ac:	0601      	lsls	r1, r0, #24
 80075ae:	d501      	bpl.n	80075b4 <_printf_i+0xec>
 80075b0:	681e      	ldr	r6, [r3, #0]
 80075b2:	e002      	b.n	80075ba <_printf_i+0xf2>
 80075b4:	0646      	lsls	r6, r0, #25
 80075b6:	d5fb      	bpl.n	80075b0 <_printf_i+0xe8>
 80075b8:	881e      	ldrh	r6, [r3, #0]
 80075ba:	4854      	ldr	r0, [pc, #336]	; (800770c <_printf_i+0x244>)
 80075bc:	2f6f      	cmp	r7, #111	; 0x6f
 80075be:	bf0c      	ite	eq
 80075c0:	2308      	moveq	r3, #8
 80075c2:	230a      	movne	r3, #10
 80075c4:	2100      	movs	r1, #0
 80075c6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80075ca:	6865      	ldr	r5, [r4, #4]
 80075cc:	60a5      	str	r5, [r4, #8]
 80075ce:	2d00      	cmp	r5, #0
 80075d0:	bfa2      	ittt	ge
 80075d2:	6821      	ldrge	r1, [r4, #0]
 80075d4:	f021 0104 	bicge.w	r1, r1, #4
 80075d8:	6021      	strge	r1, [r4, #0]
 80075da:	b90e      	cbnz	r6, 80075e0 <_printf_i+0x118>
 80075dc:	2d00      	cmp	r5, #0
 80075de:	d04d      	beq.n	800767c <_printf_i+0x1b4>
 80075e0:	4615      	mov	r5, r2
 80075e2:	fbb6 f1f3 	udiv	r1, r6, r3
 80075e6:	fb03 6711 	mls	r7, r3, r1, r6
 80075ea:	5dc7      	ldrb	r7, [r0, r7]
 80075ec:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80075f0:	4637      	mov	r7, r6
 80075f2:	42bb      	cmp	r3, r7
 80075f4:	460e      	mov	r6, r1
 80075f6:	d9f4      	bls.n	80075e2 <_printf_i+0x11a>
 80075f8:	2b08      	cmp	r3, #8
 80075fa:	d10b      	bne.n	8007614 <_printf_i+0x14c>
 80075fc:	6823      	ldr	r3, [r4, #0]
 80075fe:	07de      	lsls	r6, r3, #31
 8007600:	d508      	bpl.n	8007614 <_printf_i+0x14c>
 8007602:	6923      	ldr	r3, [r4, #16]
 8007604:	6861      	ldr	r1, [r4, #4]
 8007606:	4299      	cmp	r1, r3
 8007608:	bfde      	ittt	le
 800760a:	2330      	movle	r3, #48	; 0x30
 800760c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007610:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007614:	1b52      	subs	r2, r2, r5
 8007616:	6122      	str	r2, [r4, #16]
 8007618:	f8cd a000 	str.w	sl, [sp]
 800761c:	464b      	mov	r3, r9
 800761e:	aa03      	add	r2, sp, #12
 8007620:	4621      	mov	r1, r4
 8007622:	4640      	mov	r0, r8
 8007624:	f7ff fee2 	bl	80073ec <_printf_common>
 8007628:	3001      	adds	r0, #1
 800762a:	d14c      	bne.n	80076c6 <_printf_i+0x1fe>
 800762c:	f04f 30ff 	mov.w	r0, #4294967295
 8007630:	b004      	add	sp, #16
 8007632:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007636:	4835      	ldr	r0, [pc, #212]	; (800770c <_printf_i+0x244>)
 8007638:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800763c:	6829      	ldr	r1, [r5, #0]
 800763e:	6823      	ldr	r3, [r4, #0]
 8007640:	f851 6b04 	ldr.w	r6, [r1], #4
 8007644:	6029      	str	r1, [r5, #0]
 8007646:	061d      	lsls	r5, r3, #24
 8007648:	d514      	bpl.n	8007674 <_printf_i+0x1ac>
 800764a:	07df      	lsls	r7, r3, #31
 800764c:	bf44      	itt	mi
 800764e:	f043 0320 	orrmi.w	r3, r3, #32
 8007652:	6023      	strmi	r3, [r4, #0]
 8007654:	b91e      	cbnz	r6, 800765e <_printf_i+0x196>
 8007656:	6823      	ldr	r3, [r4, #0]
 8007658:	f023 0320 	bic.w	r3, r3, #32
 800765c:	6023      	str	r3, [r4, #0]
 800765e:	2310      	movs	r3, #16
 8007660:	e7b0      	b.n	80075c4 <_printf_i+0xfc>
 8007662:	6823      	ldr	r3, [r4, #0]
 8007664:	f043 0320 	orr.w	r3, r3, #32
 8007668:	6023      	str	r3, [r4, #0]
 800766a:	2378      	movs	r3, #120	; 0x78
 800766c:	4828      	ldr	r0, [pc, #160]	; (8007710 <_printf_i+0x248>)
 800766e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007672:	e7e3      	b.n	800763c <_printf_i+0x174>
 8007674:	0659      	lsls	r1, r3, #25
 8007676:	bf48      	it	mi
 8007678:	b2b6      	uxthmi	r6, r6
 800767a:	e7e6      	b.n	800764a <_printf_i+0x182>
 800767c:	4615      	mov	r5, r2
 800767e:	e7bb      	b.n	80075f8 <_printf_i+0x130>
 8007680:	682b      	ldr	r3, [r5, #0]
 8007682:	6826      	ldr	r6, [r4, #0]
 8007684:	6961      	ldr	r1, [r4, #20]
 8007686:	1d18      	adds	r0, r3, #4
 8007688:	6028      	str	r0, [r5, #0]
 800768a:	0635      	lsls	r5, r6, #24
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	d501      	bpl.n	8007694 <_printf_i+0x1cc>
 8007690:	6019      	str	r1, [r3, #0]
 8007692:	e002      	b.n	800769a <_printf_i+0x1d2>
 8007694:	0670      	lsls	r0, r6, #25
 8007696:	d5fb      	bpl.n	8007690 <_printf_i+0x1c8>
 8007698:	8019      	strh	r1, [r3, #0]
 800769a:	2300      	movs	r3, #0
 800769c:	6123      	str	r3, [r4, #16]
 800769e:	4615      	mov	r5, r2
 80076a0:	e7ba      	b.n	8007618 <_printf_i+0x150>
 80076a2:	682b      	ldr	r3, [r5, #0]
 80076a4:	1d1a      	adds	r2, r3, #4
 80076a6:	602a      	str	r2, [r5, #0]
 80076a8:	681d      	ldr	r5, [r3, #0]
 80076aa:	6862      	ldr	r2, [r4, #4]
 80076ac:	2100      	movs	r1, #0
 80076ae:	4628      	mov	r0, r5
 80076b0:	f7f8 fd96 	bl	80001e0 <memchr>
 80076b4:	b108      	cbz	r0, 80076ba <_printf_i+0x1f2>
 80076b6:	1b40      	subs	r0, r0, r5
 80076b8:	6060      	str	r0, [r4, #4]
 80076ba:	6863      	ldr	r3, [r4, #4]
 80076bc:	6123      	str	r3, [r4, #16]
 80076be:	2300      	movs	r3, #0
 80076c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80076c4:	e7a8      	b.n	8007618 <_printf_i+0x150>
 80076c6:	6923      	ldr	r3, [r4, #16]
 80076c8:	462a      	mov	r2, r5
 80076ca:	4649      	mov	r1, r9
 80076cc:	4640      	mov	r0, r8
 80076ce:	47d0      	blx	sl
 80076d0:	3001      	adds	r0, #1
 80076d2:	d0ab      	beq.n	800762c <_printf_i+0x164>
 80076d4:	6823      	ldr	r3, [r4, #0]
 80076d6:	079b      	lsls	r3, r3, #30
 80076d8:	d413      	bmi.n	8007702 <_printf_i+0x23a>
 80076da:	68e0      	ldr	r0, [r4, #12]
 80076dc:	9b03      	ldr	r3, [sp, #12]
 80076de:	4298      	cmp	r0, r3
 80076e0:	bfb8      	it	lt
 80076e2:	4618      	movlt	r0, r3
 80076e4:	e7a4      	b.n	8007630 <_printf_i+0x168>
 80076e6:	2301      	movs	r3, #1
 80076e8:	4632      	mov	r2, r6
 80076ea:	4649      	mov	r1, r9
 80076ec:	4640      	mov	r0, r8
 80076ee:	47d0      	blx	sl
 80076f0:	3001      	adds	r0, #1
 80076f2:	d09b      	beq.n	800762c <_printf_i+0x164>
 80076f4:	3501      	adds	r5, #1
 80076f6:	68e3      	ldr	r3, [r4, #12]
 80076f8:	9903      	ldr	r1, [sp, #12]
 80076fa:	1a5b      	subs	r3, r3, r1
 80076fc:	42ab      	cmp	r3, r5
 80076fe:	dcf2      	bgt.n	80076e6 <_printf_i+0x21e>
 8007700:	e7eb      	b.n	80076da <_printf_i+0x212>
 8007702:	2500      	movs	r5, #0
 8007704:	f104 0619 	add.w	r6, r4, #25
 8007708:	e7f5      	b.n	80076f6 <_printf_i+0x22e>
 800770a:	bf00      	nop
 800770c:	08007a95 	.word	0x08007a95
 8007710:	08007aa6 	.word	0x08007aa6

08007714 <memcpy>:
 8007714:	440a      	add	r2, r1
 8007716:	4291      	cmp	r1, r2
 8007718:	f100 33ff 	add.w	r3, r0, #4294967295
 800771c:	d100      	bne.n	8007720 <memcpy+0xc>
 800771e:	4770      	bx	lr
 8007720:	b510      	push	{r4, lr}
 8007722:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007726:	f803 4f01 	strb.w	r4, [r3, #1]!
 800772a:	4291      	cmp	r1, r2
 800772c:	d1f9      	bne.n	8007722 <memcpy+0xe>
 800772e:	bd10      	pop	{r4, pc}

08007730 <memmove>:
 8007730:	4288      	cmp	r0, r1
 8007732:	b510      	push	{r4, lr}
 8007734:	eb01 0402 	add.w	r4, r1, r2
 8007738:	d902      	bls.n	8007740 <memmove+0x10>
 800773a:	4284      	cmp	r4, r0
 800773c:	4623      	mov	r3, r4
 800773e:	d807      	bhi.n	8007750 <memmove+0x20>
 8007740:	1e43      	subs	r3, r0, #1
 8007742:	42a1      	cmp	r1, r4
 8007744:	d008      	beq.n	8007758 <memmove+0x28>
 8007746:	f811 2b01 	ldrb.w	r2, [r1], #1
 800774a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800774e:	e7f8      	b.n	8007742 <memmove+0x12>
 8007750:	4402      	add	r2, r0
 8007752:	4601      	mov	r1, r0
 8007754:	428a      	cmp	r2, r1
 8007756:	d100      	bne.n	800775a <memmove+0x2a>
 8007758:	bd10      	pop	{r4, pc}
 800775a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800775e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007762:	e7f7      	b.n	8007754 <memmove+0x24>

08007764 <_free_r>:
 8007764:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007766:	2900      	cmp	r1, #0
 8007768:	d044      	beq.n	80077f4 <_free_r+0x90>
 800776a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800776e:	9001      	str	r0, [sp, #4]
 8007770:	2b00      	cmp	r3, #0
 8007772:	f1a1 0404 	sub.w	r4, r1, #4
 8007776:	bfb8      	it	lt
 8007778:	18e4      	addlt	r4, r4, r3
 800777a:	f000 f913 	bl	80079a4 <__malloc_lock>
 800777e:	4a1e      	ldr	r2, [pc, #120]	; (80077f8 <_free_r+0x94>)
 8007780:	9801      	ldr	r0, [sp, #4]
 8007782:	6813      	ldr	r3, [r2, #0]
 8007784:	b933      	cbnz	r3, 8007794 <_free_r+0x30>
 8007786:	6063      	str	r3, [r4, #4]
 8007788:	6014      	str	r4, [r2, #0]
 800778a:	b003      	add	sp, #12
 800778c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007790:	f000 b90e 	b.w	80079b0 <__malloc_unlock>
 8007794:	42a3      	cmp	r3, r4
 8007796:	d908      	bls.n	80077aa <_free_r+0x46>
 8007798:	6825      	ldr	r5, [r4, #0]
 800779a:	1961      	adds	r1, r4, r5
 800779c:	428b      	cmp	r3, r1
 800779e:	bf01      	itttt	eq
 80077a0:	6819      	ldreq	r1, [r3, #0]
 80077a2:	685b      	ldreq	r3, [r3, #4]
 80077a4:	1949      	addeq	r1, r1, r5
 80077a6:	6021      	streq	r1, [r4, #0]
 80077a8:	e7ed      	b.n	8007786 <_free_r+0x22>
 80077aa:	461a      	mov	r2, r3
 80077ac:	685b      	ldr	r3, [r3, #4]
 80077ae:	b10b      	cbz	r3, 80077b4 <_free_r+0x50>
 80077b0:	42a3      	cmp	r3, r4
 80077b2:	d9fa      	bls.n	80077aa <_free_r+0x46>
 80077b4:	6811      	ldr	r1, [r2, #0]
 80077b6:	1855      	adds	r5, r2, r1
 80077b8:	42a5      	cmp	r5, r4
 80077ba:	d10b      	bne.n	80077d4 <_free_r+0x70>
 80077bc:	6824      	ldr	r4, [r4, #0]
 80077be:	4421      	add	r1, r4
 80077c0:	1854      	adds	r4, r2, r1
 80077c2:	42a3      	cmp	r3, r4
 80077c4:	6011      	str	r1, [r2, #0]
 80077c6:	d1e0      	bne.n	800778a <_free_r+0x26>
 80077c8:	681c      	ldr	r4, [r3, #0]
 80077ca:	685b      	ldr	r3, [r3, #4]
 80077cc:	6053      	str	r3, [r2, #4]
 80077ce:	4421      	add	r1, r4
 80077d0:	6011      	str	r1, [r2, #0]
 80077d2:	e7da      	b.n	800778a <_free_r+0x26>
 80077d4:	d902      	bls.n	80077dc <_free_r+0x78>
 80077d6:	230c      	movs	r3, #12
 80077d8:	6003      	str	r3, [r0, #0]
 80077da:	e7d6      	b.n	800778a <_free_r+0x26>
 80077dc:	6825      	ldr	r5, [r4, #0]
 80077de:	1961      	adds	r1, r4, r5
 80077e0:	428b      	cmp	r3, r1
 80077e2:	bf04      	itt	eq
 80077e4:	6819      	ldreq	r1, [r3, #0]
 80077e6:	685b      	ldreq	r3, [r3, #4]
 80077e8:	6063      	str	r3, [r4, #4]
 80077ea:	bf04      	itt	eq
 80077ec:	1949      	addeq	r1, r1, r5
 80077ee:	6021      	streq	r1, [r4, #0]
 80077f0:	6054      	str	r4, [r2, #4]
 80077f2:	e7ca      	b.n	800778a <_free_r+0x26>
 80077f4:	b003      	add	sp, #12
 80077f6:	bd30      	pop	{r4, r5, pc}
 80077f8:	20001764 	.word	0x20001764

080077fc <sbrk_aligned>:
 80077fc:	b570      	push	{r4, r5, r6, lr}
 80077fe:	4e0e      	ldr	r6, [pc, #56]	; (8007838 <sbrk_aligned+0x3c>)
 8007800:	460c      	mov	r4, r1
 8007802:	6831      	ldr	r1, [r6, #0]
 8007804:	4605      	mov	r5, r0
 8007806:	b911      	cbnz	r1, 800780e <sbrk_aligned+0x12>
 8007808:	f000 f8bc 	bl	8007984 <_sbrk_r>
 800780c:	6030      	str	r0, [r6, #0]
 800780e:	4621      	mov	r1, r4
 8007810:	4628      	mov	r0, r5
 8007812:	f000 f8b7 	bl	8007984 <_sbrk_r>
 8007816:	1c43      	adds	r3, r0, #1
 8007818:	d00a      	beq.n	8007830 <sbrk_aligned+0x34>
 800781a:	1cc4      	adds	r4, r0, #3
 800781c:	f024 0403 	bic.w	r4, r4, #3
 8007820:	42a0      	cmp	r0, r4
 8007822:	d007      	beq.n	8007834 <sbrk_aligned+0x38>
 8007824:	1a21      	subs	r1, r4, r0
 8007826:	4628      	mov	r0, r5
 8007828:	f000 f8ac 	bl	8007984 <_sbrk_r>
 800782c:	3001      	adds	r0, #1
 800782e:	d101      	bne.n	8007834 <sbrk_aligned+0x38>
 8007830:	f04f 34ff 	mov.w	r4, #4294967295
 8007834:	4620      	mov	r0, r4
 8007836:	bd70      	pop	{r4, r5, r6, pc}
 8007838:	20001768 	.word	0x20001768

0800783c <_malloc_r>:
 800783c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007840:	1ccd      	adds	r5, r1, #3
 8007842:	f025 0503 	bic.w	r5, r5, #3
 8007846:	3508      	adds	r5, #8
 8007848:	2d0c      	cmp	r5, #12
 800784a:	bf38      	it	cc
 800784c:	250c      	movcc	r5, #12
 800784e:	2d00      	cmp	r5, #0
 8007850:	4607      	mov	r7, r0
 8007852:	db01      	blt.n	8007858 <_malloc_r+0x1c>
 8007854:	42a9      	cmp	r1, r5
 8007856:	d905      	bls.n	8007864 <_malloc_r+0x28>
 8007858:	230c      	movs	r3, #12
 800785a:	603b      	str	r3, [r7, #0]
 800785c:	2600      	movs	r6, #0
 800785e:	4630      	mov	r0, r6
 8007860:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007864:	4e2e      	ldr	r6, [pc, #184]	; (8007920 <_malloc_r+0xe4>)
 8007866:	f000 f89d 	bl	80079a4 <__malloc_lock>
 800786a:	6833      	ldr	r3, [r6, #0]
 800786c:	461c      	mov	r4, r3
 800786e:	bb34      	cbnz	r4, 80078be <_malloc_r+0x82>
 8007870:	4629      	mov	r1, r5
 8007872:	4638      	mov	r0, r7
 8007874:	f7ff ffc2 	bl	80077fc <sbrk_aligned>
 8007878:	1c43      	adds	r3, r0, #1
 800787a:	4604      	mov	r4, r0
 800787c:	d14d      	bne.n	800791a <_malloc_r+0xde>
 800787e:	6834      	ldr	r4, [r6, #0]
 8007880:	4626      	mov	r6, r4
 8007882:	2e00      	cmp	r6, #0
 8007884:	d140      	bne.n	8007908 <_malloc_r+0xcc>
 8007886:	6823      	ldr	r3, [r4, #0]
 8007888:	4631      	mov	r1, r6
 800788a:	4638      	mov	r0, r7
 800788c:	eb04 0803 	add.w	r8, r4, r3
 8007890:	f000 f878 	bl	8007984 <_sbrk_r>
 8007894:	4580      	cmp	r8, r0
 8007896:	d13a      	bne.n	800790e <_malloc_r+0xd2>
 8007898:	6821      	ldr	r1, [r4, #0]
 800789a:	3503      	adds	r5, #3
 800789c:	1a6d      	subs	r5, r5, r1
 800789e:	f025 0503 	bic.w	r5, r5, #3
 80078a2:	3508      	adds	r5, #8
 80078a4:	2d0c      	cmp	r5, #12
 80078a6:	bf38      	it	cc
 80078a8:	250c      	movcc	r5, #12
 80078aa:	4629      	mov	r1, r5
 80078ac:	4638      	mov	r0, r7
 80078ae:	f7ff ffa5 	bl	80077fc <sbrk_aligned>
 80078b2:	3001      	adds	r0, #1
 80078b4:	d02b      	beq.n	800790e <_malloc_r+0xd2>
 80078b6:	6823      	ldr	r3, [r4, #0]
 80078b8:	442b      	add	r3, r5
 80078ba:	6023      	str	r3, [r4, #0]
 80078bc:	e00e      	b.n	80078dc <_malloc_r+0xa0>
 80078be:	6822      	ldr	r2, [r4, #0]
 80078c0:	1b52      	subs	r2, r2, r5
 80078c2:	d41e      	bmi.n	8007902 <_malloc_r+0xc6>
 80078c4:	2a0b      	cmp	r2, #11
 80078c6:	d916      	bls.n	80078f6 <_malloc_r+0xba>
 80078c8:	1961      	adds	r1, r4, r5
 80078ca:	42a3      	cmp	r3, r4
 80078cc:	6025      	str	r5, [r4, #0]
 80078ce:	bf18      	it	ne
 80078d0:	6059      	strne	r1, [r3, #4]
 80078d2:	6863      	ldr	r3, [r4, #4]
 80078d4:	bf08      	it	eq
 80078d6:	6031      	streq	r1, [r6, #0]
 80078d8:	5162      	str	r2, [r4, r5]
 80078da:	604b      	str	r3, [r1, #4]
 80078dc:	4638      	mov	r0, r7
 80078de:	f104 060b 	add.w	r6, r4, #11
 80078e2:	f000 f865 	bl	80079b0 <__malloc_unlock>
 80078e6:	f026 0607 	bic.w	r6, r6, #7
 80078ea:	1d23      	adds	r3, r4, #4
 80078ec:	1af2      	subs	r2, r6, r3
 80078ee:	d0b6      	beq.n	800785e <_malloc_r+0x22>
 80078f0:	1b9b      	subs	r3, r3, r6
 80078f2:	50a3      	str	r3, [r4, r2]
 80078f4:	e7b3      	b.n	800785e <_malloc_r+0x22>
 80078f6:	6862      	ldr	r2, [r4, #4]
 80078f8:	42a3      	cmp	r3, r4
 80078fa:	bf0c      	ite	eq
 80078fc:	6032      	streq	r2, [r6, #0]
 80078fe:	605a      	strne	r2, [r3, #4]
 8007900:	e7ec      	b.n	80078dc <_malloc_r+0xa0>
 8007902:	4623      	mov	r3, r4
 8007904:	6864      	ldr	r4, [r4, #4]
 8007906:	e7b2      	b.n	800786e <_malloc_r+0x32>
 8007908:	4634      	mov	r4, r6
 800790a:	6876      	ldr	r6, [r6, #4]
 800790c:	e7b9      	b.n	8007882 <_malloc_r+0x46>
 800790e:	230c      	movs	r3, #12
 8007910:	603b      	str	r3, [r7, #0]
 8007912:	4638      	mov	r0, r7
 8007914:	f000 f84c 	bl	80079b0 <__malloc_unlock>
 8007918:	e7a1      	b.n	800785e <_malloc_r+0x22>
 800791a:	6025      	str	r5, [r4, #0]
 800791c:	e7de      	b.n	80078dc <_malloc_r+0xa0>
 800791e:	bf00      	nop
 8007920:	20001764 	.word	0x20001764

08007924 <_realloc_r>:
 8007924:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007928:	4680      	mov	r8, r0
 800792a:	4614      	mov	r4, r2
 800792c:	460e      	mov	r6, r1
 800792e:	b921      	cbnz	r1, 800793a <_realloc_r+0x16>
 8007930:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007934:	4611      	mov	r1, r2
 8007936:	f7ff bf81 	b.w	800783c <_malloc_r>
 800793a:	b92a      	cbnz	r2, 8007948 <_realloc_r+0x24>
 800793c:	f7ff ff12 	bl	8007764 <_free_r>
 8007940:	4625      	mov	r5, r4
 8007942:	4628      	mov	r0, r5
 8007944:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007948:	f000 f838 	bl	80079bc <_malloc_usable_size_r>
 800794c:	4284      	cmp	r4, r0
 800794e:	4607      	mov	r7, r0
 8007950:	d802      	bhi.n	8007958 <_realloc_r+0x34>
 8007952:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007956:	d812      	bhi.n	800797e <_realloc_r+0x5a>
 8007958:	4621      	mov	r1, r4
 800795a:	4640      	mov	r0, r8
 800795c:	f7ff ff6e 	bl	800783c <_malloc_r>
 8007960:	4605      	mov	r5, r0
 8007962:	2800      	cmp	r0, #0
 8007964:	d0ed      	beq.n	8007942 <_realloc_r+0x1e>
 8007966:	42bc      	cmp	r4, r7
 8007968:	4622      	mov	r2, r4
 800796a:	4631      	mov	r1, r6
 800796c:	bf28      	it	cs
 800796e:	463a      	movcs	r2, r7
 8007970:	f7ff fed0 	bl	8007714 <memcpy>
 8007974:	4631      	mov	r1, r6
 8007976:	4640      	mov	r0, r8
 8007978:	f7ff fef4 	bl	8007764 <_free_r>
 800797c:	e7e1      	b.n	8007942 <_realloc_r+0x1e>
 800797e:	4635      	mov	r5, r6
 8007980:	e7df      	b.n	8007942 <_realloc_r+0x1e>
	...

08007984 <_sbrk_r>:
 8007984:	b538      	push	{r3, r4, r5, lr}
 8007986:	4d06      	ldr	r5, [pc, #24]	; (80079a0 <_sbrk_r+0x1c>)
 8007988:	2300      	movs	r3, #0
 800798a:	4604      	mov	r4, r0
 800798c:	4608      	mov	r0, r1
 800798e:	602b      	str	r3, [r5, #0]
 8007990:	f7f8 ff6c 	bl	800086c <_sbrk>
 8007994:	1c43      	adds	r3, r0, #1
 8007996:	d102      	bne.n	800799e <_sbrk_r+0x1a>
 8007998:	682b      	ldr	r3, [r5, #0]
 800799a:	b103      	cbz	r3, 800799e <_sbrk_r+0x1a>
 800799c:	6023      	str	r3, [r4, #0]
 800799e:	bd38      	pop	{r3, r4, r5, pc}
 80079a0:	2000176c 	.word	0x2000176c

080079a4 <__malloc_lock>:
 80079a4:	4801      	ldr	r0, [pc, #4]	; (80079ac <__malloc_lock+0x8>)
 80079a6:	f000 b811 	b.w	80079cc <__retarget_lock_acquire_recursive>
 80079aa:	bf00      	nop
 80079ac:	20001770 	.word	0x20001770

080079b0 <__malloc_unlock>:
 80079b0:	4801      	ldr	r0, [pc, #4]	; (80079b8 <__malloc_unlock+0x8>)
 80079b2:	f000 b80c 	b.w	80079ce <__retarget_lock_release_recursive>
 80079b6:	bf00      	nop
 80079b8:	20001770 	.word	0x20001770

080079bc <_malloc_usable_size_r>:
 80079bc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80079c0:	1f18      	subs	r0, r3, #4
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	bfbc      	itt	lt
 80079c6:	580b      	ldrlt	r3, [r1, r0]
 80079c8:	18c0      	addlt	r0, r0, r3
 80079ca:	4770      	bx	lr

080079cc <__retarget_lock_acquire_recursive>:
 80079cc:	4770      	bx	lr

080079ce <__retarget_lock_release_recursive>:
 80079ce:	4770      	bx	lr

080079d0 <_init>:
 80079d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079d2:	bf00      	nop
 80079d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80079d6:	bc08      	pop	{r3}
 80079d8:	469e      	mov	lr, r3
 80079da:	4770      	bx	lr

080079dc <_fini>:
 80079dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079de:	bf00      	nop
 80079e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80079e2:	bc08      	pop	{r3}
 80079e4:	469e      	mov	lr, r3
 80079e6:	4770      	bx	lr
