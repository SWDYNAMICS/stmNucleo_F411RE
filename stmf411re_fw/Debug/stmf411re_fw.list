
stmf411re_fw.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009d08  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ac  08009ea8  08009ea8  00019ea8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009f54  08009f54  0002020c  2**0
                  CONTENTS
  4 .ARM          00000008  08009f54  08009f54  00019f54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009f5c  08009f5c  0002020c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009f5c  08009f5c  00019f5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009f60  08009f60  00019f60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000020c  20000000  08009f64  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001734  2000020c  0800a170  0002020c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001940  0800a170  00021940  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016096  00000000  00000000  0002023c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004070  00000000  00000000  000362d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001238  00000000  00000000  0003a348  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001040  00000000  00000000  0003b580  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c88c  00000000  00000000  0003c5c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000209e0  00000000  00000000  00058e4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00090383  00000000  00000000  0007982c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00109baf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004bc8  00000000  00000000  00109c00  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000020c 	.word	0x2000020c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08009e90 	.word	0x08009e90

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000210 	.word	0x20000210
 80001dc:	08009e90 	.word	0x08009e90

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <apInit>:



extern uint32_t sof_cnt;
void apInit(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	af00      	add	r7, sp, #0
	uartOpen(_DEF_UART1, 57600);
 8000588:	f44f 4161 	mov.w	r1, #57600	; 0xe100
 800058c:	2000      	movs	r0, #0
 800058e:	f000 fc03 	bl	8000d98 <uartOpen>
	uartOpen(_DEF_UART2, 57600);
 8000592:	f44f 4161 	mov.w	r1, #57600	; 0xe100
 8000596:	2001      	movs	r0, #1
 8000598:	f000 fbfe 	bl	8000d98 <uartOpen>
}
 800059c:	bf00      	nop
 800059e:	bd80      	pop	{r7, pc}

080005a0 <apMain>:

void apMain(void)
{
 80005a0:	b590      	push	{r4, r7, lr}
 80005a2:	b0a5      	sub	sp, #148	; 0x94
 80005a4:	af00      	add	r7, sp, #0
	uint32_t pre_time;
	uint8_t  rx_buf[128];
	uint32_t rx_len;

	pre_time = millis();
 80005a6:	f000 f8d6 	bl	8000756 <millis>
 80005aa:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
	while (1)
	{
		if(millis() - pre_time >= 500)
 80005ae:	f000 f8d2 	bl	8000756 <millis>
 80005b2:	4602      	mov	r2, r0
 80005b4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80005b8:	1ad3      	subs	r3, r2, r3
 80005ba:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80005be:	d30d      	bcc.n	80005dc <apMain+0x3c>
		{
			pre_time = millis();
 80005c0:	f000 f8c9 	bl	8000756 <millis>
 80005c4:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
			ledToggle(_DEF_LED1);
 80005c8:	2000      	movs	r0, #0
 80005ca:	f000 fb07 	bl	8000bdc <ledToggle>
			uartPrintf(_DEF_UART2, "SOF CNT : %d\n", sof_cnt);
 80005ce:	4b3e      	ldr	r3, [pc, #248]	; (80006c8 <apMain+0x128>)
 80005d0:	681b      	ldr	r3, [r3, #0]
 80005d2:	461a      	mov	r2, r3
 80005d4:	493d      	ldr	r1, [pc, #244]	; (80006cc <apMain+0x12c>)
 80005d6:	2001      	movs	r0, #1
 80005d8:	f000 fcf2 	bl	8000fc0 <uartPrintf>
		}
		if(uartGetBaud(_DEF_UART1) != uartGetBaud(_DEF_UART2))
 80005dc:	2000      	movs	r0, #0
 80005de:	f000 fd27 	bl	8001030 <uartGetBaud>
 80005e2:	4604      	mov	r4, r0
 80005e4:	2001      	movs	r0, #1
 80005e6:	f000 fd23 	bl	8001030 <uartGetBaud>
 80005ea:	4603      	mov	r3, r0
 80005ec:	429c      	cmp	r4, r3
 80005ee:	d007      	beq.n	8000600 <apMain+0x60>
		{
		  uartOpen(_DEF_UART2, uartGetBaud(_DEF_UART1));
 80005f0:	2000      	movs	r0, #0
 80005f2:	f000 fd1d 	bl	8001030 <uartGetBaud>
 80005f6:	4603      	mov	r3, r0
 80005f8:	4619      	mov	r1, r3
 80005fa:	2001      	movs	r0, #1
 80005fc:	f000 fbcc 	bl	8000d98 <uartOpen>
		}

		/*USB 2 UART*/
		rx_len= uartAvailable(_DEF_UART1);
 8000600:	2000      	movs	r0, #0
 8000602:	f000 fc61 	bl	8000ec8 <uartAvailable>
 8000606:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
		if(rx_len > 128)
 800060a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800060e:	2b80      	cmp	r3, #128	; 0x80
 8000610:	d902      	bls.n	8000618 <apMain+0x78>
		{
		  rx_len = 128;
 8000612:	2380      	movs	r3, #128	; 0x80
 8000614:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
		}
		if(rx_len > 0)
 8000618:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800061c:	2b00      	cmp	r3, #0
 800061e:	d020      	beq.n	8000662 <apMain+0xc2>
		{
		  for(int i=0; i<rx_len; i++)
 8000620:	2300      	movs	r3, #0
 8000622:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8000626:	e00f      	b.n	8000648 <apMain+0xa8>
		  {
		    rx_buf[i] = uartRead(_DEF_UART1);
 8000628:	2000      	movs	r0, #0
 800062a:	f000 fc7f 	bl	8000f2c <uartRead>
 800062e:	4603      	mov	r3, r0
 8000630:	4619      	mov	r1, r3
 8000632:	463a      	mov	r2, r7
 8000634:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000638:	4413      	add	r3, r2
 800063a:	460a      	mov	r2, r1
 800063c:	701a      	strb	r2, [r3, #0]
		  for(int i=0; i<rx_len; i++)
 800063e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000642:	3301      	adds	r3, #1
 8000644:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8000648:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800064c:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8000650:	429a      	cmp	r2, r3
 8000652:	d8e9      	bhi.n	8000628 <apMain+0x88>
		  }
		  uartWrite(_DEF_UART2, rx_buf, rx_len);
 8000654:	463b      	mov	r3, r7
 8000656:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800065a:	4619      	mov	r1, r3
 800065c:	2001      	movs	r0, #1
 800065e:	f000 fc85 	bl	8000f6c <uartWrite>
		}


		/*UART 2 USB*/
		rx_len = uartAvailable(_DEF_UART2);
 8000662:	2001      	movs	r0, #1
 8000664:	f000 fc30 	bl	8000ec8 <uartAvailable>
 8000668:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
		if(rx_len > 128)
 800066c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8000670:	2b80      	cmp	r3, #128	; 0x80
 8000672:	d902      	bls.n	800067a <apMain+0xda>
		{
		  rx_len = 128;
 8000674:	2380      	movs	r3, #128	; 0x80
 8000676:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
		}
		if(rx_len > 0)
 800067a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800067e:	2b00      	cmp	r3, #0
 8000680:	d095      	beq.n	80005ae <apMain+0xe>
		{
		  for(int i=0; i<rx_len; i++)
 8000682:	2300      	movs	r3, #0
 8000684:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8000688:	e00f      	b.n	80006aa <apMain+0x10a>
		  {
		    rx_buf[i] = uartRead(_DEF_UART2);
 800068a:	2001      	movs	r0, #1
 800068c:	f000 fc4e 	bl	8000f2c <uartRead>
 8000690:	4603      	mov	r3, r0
 8000692:	4619      	mov	r1, r3
 8000694:	463a      	mov	r2, r7
 8000696:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800069a:	4413      	add	r3, r2
 800069c:	460a      	mov	r2, r1
 800069e:	701a      	strb	r2, [r3, #0]
		  for(int i=0; i<rx_len; i++)
 80006a0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80006a4:	3301      	adds	r3, #1
 80006a6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80006aa:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80006ae:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80006b2:	429a      	cmp	r2, r3
 80006b4:	d8e9      	bhi.n	800068a <apMain+0xea>
		  }
		  uartWrite(_DEF_LED1, &rx_buf[0], rx_len);
 80006b6:	463b      	mov	r3, r7
 80006b8:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80006bc:	4619      	mov	r1, r3
 80006be:	2000      	movs	r0, #0
 80006c0:	f000 fc54 	bl	8000f6c <uartWrite>
		if(millis() - pre_time >= 500)
 80006c4:	e773      	b.n	80005ae <apMain+0xe>
 80006c6:	bf00      	nop
 80006c8:	20000904 	.word	0x20000904
 80006cc:	08009ea8 	.word	0x08009ea8

080006d0 <bspInit>:

#include "bsp.h"
void SystemClock_Config(void);

void bspInit(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b084      	sub	sp, #16
 80006d4:	af00      	add	r7, sp, #0
  HAL_Init();
 80006d6:	f000 fdcf 	bl	8001278 <HAL_Init>
  SystemClock_Config();
 80006da:	f000 f843 	bl	8000764 <SystemClock_Config>

  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006de:	2300      	movs	r3, #0
 80006e0:	60fb      	str	r3, [r7, #12]
 80006e2:	4b16      	ldr	r3, [pc, #88]	; (800073c <bspInit+0x6c>)
 80006e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006e6:	4a15      	ldr	r2, [pc, #84]	; (800073c <bspInit+0x6c>)
 80006e8:	f043 0304 	orr.w	r3, r3, #4
 80006ec:	6313      	str	r3, [r2, #48]	; 0x30
 80006ee:	4b13      	ldr	r3, [pc, #76]	; (800073c <bspInit+0x6c>)
 80006f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f2:	f003 0304 	and.w	r3, r3, #4
 80006f6:	60fb      	str	r3, [r7, #12]
 80006f8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006fa:	2300      	movs	r3, #0
 80006fc:	60bb      	str	r3, [r7, #8]
 80006fe:	4b0f      	ldr	r3, [pc, #60]	; (800073c <bspInit+0x6c>)
 8000700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000702:	4a0e      	ldr	r2, [pc, #56]	; (800073c <bspInit+0x6c>)
 8000704:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000708:	6313      	str	r3, [r2, #48]	; 0x30
 800070a:	4b0c      	ldr	r3, [pc, #48]	; (800073c <bspInit+0x6c>)
 800070c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800070e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000712:	60bb      	str	r3, [r7, #8]
 8000714:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000716:	2300      	movs	r3, #0
 8000718:	607b      	str	r3, [r7, #4]
 800071a:	4b08      	ldr	r3, [pc, #32]	; (800073c <bspInit+0x6c>)
 800071c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071e:	4a07      	ldr	r2, [pc, #28]	; (800073c <bspInit+0x6c>)
 8000720:	f043 0301 	orr.w	r3, r3, #1
 8000724:	6313      	str	r3, [r2, #48]	; 0x30
 8000726:	4b05      	ldr	r3, [pc, #20]	; (800073c <bspInit+0x6c>)
 8000728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072a:	f003 0301 	and.w	r3, r3, #1
 800072e:	607b      	str	r3, [r7, #4]
 8000730:	687b      	ldr	r3, [r7, #4]

}
 8000732:	bf00      	nop
 8000734:	3710      	adds	r7, #16
 8000736:	46bd      	mov	sp, r7
 8000738:	bd80      	pop	{r7, pc}
 800073a:	bf00      	nop
 800073c:	40023800 	.word	0x40023800

08000740 <delay>:
void delay(uint32_t ms)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b082      	sub	sp, #8
 8000744:	af00      	add	r7, sp, #0
 8000746:	6078      	str	r0, [r7, #4]
  HAL_Delay(ms);
 8000748:	6878      	ldr	r0, [r7, #4]
 800074a:	f000 fe07 	bl	800135c <HAL_Delay>
}
 800074e:	bf00      	nop
 8000750:	3708      	adds	r7, #8
 8000752:	46bd      	mov	sp, r7
 8000754:	bd80      	pop	{r7, pc}

08000756 <millis>:
uint32_t millis(void)
{
 8000756:	b580      	push	{r7, lr}
 8000758:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800075a:	f000 fdf3 	bl	8001344 <HAL_GetTick>
 800075e:	4603      	mov	r3, r0
}
 8000760:	4618      	mov	r0, r3
 8000762:	bd80      	pop	{r7, pc}

08000764 <SystemClock_Config>:




void SystemClock_Config(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b094      	sub	sp, #80	; 0x50
 8000768:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800076a:	f107 0320 	add.w	r3, r7, #32
 800076e:	2230      	movs	r2, #48	; 0x30
 8000770:	2100      	movs	r1, #0
 8000772:	4618      	mov	r0, r3
 8000774:	f008 fefc 	bl	8009570 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000778:	f107 030c 	add.w	r3, r7, #12
 800077c:	2200      	movs	r2, #0
 800077e:	601a      	str	r2, [r3, #0]
 8000780:	605a      	str	r2, [r3, #4]
 8000782:	609a      	str	r2, [r3, #8]
 8000784:	60da      	str	r2, [r3, #12]
 8000786:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000788:	2300      	movs	r3, #0
 800078a:	60bb      	str	r3, [r7, #8]
 800078c:	4b28      	ldr	r3, [pc, #160]	; (8000830 <SystemClock_Config+0xcc>)
 800078e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000790:	4a27      	ldr	r2, [pc, #156]	; (8000830 <SystemClock_Config+0xcc>)
 8000792:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000796:	6413      	str	r3, [r2, #64]	; 0x40
 8000798:	4b25      	ldr	r3, [pc, #148]	; (8000830 <SystemClock_Config+0xcc>)
 800079a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800079c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007a0:	60bb      	str	r3, [r7, #8]
 80007a2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007a4:	2300      	movs	r3, #0
 80007a6:	607b      	str	r3, [r7, #4]
 80007a8:	4b22      	ldr	r3, [pc, #136]	; (8000834 <SystemClock_Config+0xd0>)
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	4a21      	ldr	r2, [pc, #132]	; (8000834 <SystemClock_Config+0xd0>)
 80007ae:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80007b2:	6013      	str	r3, [r2, #0]
 80007b4:	4b1f      	ldr	r3, [pc, #124]	; (8000834 <SystemClock_Config+0xd0>)
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80007bc:	607b      	str	r3, [r7, #4]
 80007be:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 80007c0:	2305      	movs	r3, #5
 80007c2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007c4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80007c8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80007ca:	2301      	movs	r3, #1
 80007cc:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007ce:	2302      	movs	r3, #2
 80007d0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007d2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80007d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80007d8:	2319      	movs	r3, #25
 80007da:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 80007dc:	23c0      	movs	r3, #192	; 0xc0
 80007de:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007e0:	2302      	movs	r3, #2
 80007e2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80007e4:	2304      	movs	r3, #4
 80007e6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007e8:	f107 0320 	add.w	r3, r7, #32
 80007ec:	4618      	mov	r0, r3
 80007ee:	f002 ff9b 	bl	8003728 <HAL_RCC_OscConfig>
 80007f2:	4603      	mov	r3, r0
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d001      	beq.n	80007fc <SystemClock_Config+0x98>
  {
    Error_Handler();
 80007f8:	f000 f81e 	bl	8000838 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007fc:	230f      	movs	r3, #15
 80007fe:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000800:	2302      	movs	r3, #2
 8000802:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000804:	2300      	movs	r3, #0
 8000806:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000808:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800080c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800080e:	2300      	movs	r3, #0
 8000810:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000812:	f107 030c 	add.w	r3, r7, #12
 8000816:	2103      	movs	r1, #3
 8000818:	4618      	mov	r0, r3
 800081a:	f003 f9fd 	bl	8003c18 <HAL_RCC_ClockConfig>
 800081e:	4603      	mov	r3, r0
 8000820:	2b00      	cmp	r3, #0
 8000822:	d001      	beq.n	8000828 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000824:	f000 f808 	bl	8000838 <Error_Handler>
  }
}
 8000828:	bf00      	nop
 800082a:	3750      	adds	r7, #80	; 0x50
 800082c:	46bd      	mov	sp, r7
 800082e:	bd80      	pop	{r7, pc}
 8000830:	40023800 	.word	0x40023800
 8000834:	40007000 	.word	0x40007000

08000838 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000838:	b480      	push	{r7}
 800083a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800083c:	b672      	cpsid	i
}
 800083e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000840:	e7fe      	b.n	8000840 <Error_Handler+0x8>
	...

08000844 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000844:	b480      	push	{r7}
 8000846:	b083      	sub	sp, #12
 8000848:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800084a:	2300      	movs	r3, #0
 800084c:	607b      	str	r3, [r7, #4]
 800084e:	4b10      	ldr	r3, [pc, #64]	; (8000890 <HAL_MspInit+0x4c>)
 8000850:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000852:	4a0f      	ldr	r2, [pc, #60]	; (8000890 <HAL_MspInit+0x4c>)
 8000854:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000858:	6453      	str	r3, [r2, #68]	; 0x44
 800085a:	4b0d      	ldr	r3, [pc, #52]	; (8000890 <HAL_MspInit+0x4c>)
 800085c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800085e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000862:	607b      	str	r3, [r7, #4]
 8000864:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000866:	2300      	movs	r3, #0
 8000868:	603b      	str	r3, [r7, #0]
 800086a:	4b09      	ldr	r3, [pc, #36]	; (8000890 <HAL_MspInit+0x4c>)
 800086c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800086e:	4a08      	ldr	r2, [pc, #32]	; (8000890 <HAL_MspInit+0x4c>)
 8000870:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000874:	6413      	str	r3, [r2, #64]	; 0x40
 8000876:	4b06      	ldr	r3, [pc, #24]	; (8000890 <HAL_MspInit+0x4c>)
 8000878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800087a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800087e:	603b      	str	r3, [r7, #0]
 8000880:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000882:	bf00      	nop
 8000884:	370c      	adds	r7, #12
 8000886:	46bd      	mov	sp, r7
 8000888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088c:	4770      	bx	lr
 800088e:	bf00      	nop
 8000890:	40023800 	.word	0x40023800

08000894 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000894:	b480      	push	{r7}
 8000896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000898:	e7fe      	b.n	8000898 <NMI_Handler+0x4>

0800089a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800089a:	b480      	push	{r7}
 800089c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800089e:	e7fe      	b.n	800089e <HardFault_Handler+0x4>

080008a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008a0:	b480      	push	{r7}
 80008a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008a4:	e7fe      	b.n	80008a4 <MemManage_Handler+0x4>

080008a6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008a6:	b480      	push	{r7}
 80008a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008aa:	e7fe      	b.n	80008aa <BusFault_Handler+0x4>

080008ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008ac:	b480      	push	{r7}
 80008ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008b0:	e7fe      	b.n	80008b0 <UsageFault_Handler+0x4>

080008b2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008b2:	b480      	push	{r7}
 80008b4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008b6:	bf00      	nop
 80008b8:	46bd      	mov	sp, r7
 80008ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008be:	4770      	bx	lr

080008c0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008c0:	b480      	push	{r7}
 80008c2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008c4:	bf00      	nop
 80008c6:	46bd      	mov	sp, r7
 80008c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008cc:	4770      	bx	lr

080008ce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008ce:	b480      	push	{r7}
 80008d0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008d2:	bf00      	nop
 80008d4:	46bd      	mov	sp, r7
 80008d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008da:	4770      	bx	lr

080008dc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008e0:	f000 fd1c 	bl	800131c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008e4:	bf00      	nop
 80008e6:	bd80      	pop	{r7, pc}

080008e8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80008ec:	4802      	ldr	r0, [pc, #8]	; (80008f8 <USART1_IRQHandler+0x10>)
 80008ee:	f003 feb9 	bl	8004664 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80008f2:	bf00      	nop
 80008f4:	bd80      	pop	{r7, pc}
 80008f6:	bf00      	nop
 80008f8:	20000250 	.word	0x20000250

080008fc <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000900:	4802      	ldr	r0, [pc, #8]	; (800090c <DMA2_Stream2_IRQHandler+0x10>)
 8000902:	f001 f889 	bl	8001a18 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8000906:	bf00      	nop
 8000908:	bd80      	pop	{r7, pc}
 800090a:	bf00      	nop
 800090c:	20000294 	.word	0x20000294

08000910 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000914:	4802      	ldr	r0, [pc, #8]	; (8000920 <OTG_FS_IRQHandler+0x10>)
 8000916:	f001 fed4 	bl	80026c2 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800091a:	bf00      	nop
 800091c:	bd80      	pop	{r7, pc}
 800091e:	bf00      	nop
 8000920:	20001308 	.word	0x20001308

08000924 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b086      	sub	sp, #24
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800092c:	4a14      	ldr	r2, [pc, #80]	; (8000980 <_sbrk+0x5c>)
 800092e:	4b15      	ldr	r3, [pc, #84]	; (8000984 <_sbrk+0x60>)
 8000930:	1ad3      	subs	r3, r2, r3
 8000932:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000934:	697b      	ldr	r3, [r7, #20]
 8000936:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000938:	4b13      	ldr	r3, [pc, #76]	; (8000988 <_sbrk+0x64>)
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	2b00      	cmp	r3, #0
 800093e:	d102      	bne.n	8000946 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000940:	4b11      	ldr	r3, [pc, #68]	; (8000988 <_sbrk+0x64>)
 8000942:	4a12      	ldr	r2, [pc, #72]	; (800098c <_sbrk+0x68>)
 8000944:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000946:	4b10      	ldr	r3, [pc, #64]	; (8000988 <_sbrk+0x64>)
 8000948:	681a      	ldr	r2, [r3, #0]
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	4413      	add	r3, r2
 800094e:	693a      	ldr	r2, [r7, #16]
 8000950:	429a      	cmp	r2, r3
 8000952:	d207      	bcs.n	8000964 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000954:	f008 fde2 	bl	800951c <__errno>
 8000958:	4603      	mov	r3, r0
 800095a:	220c      	movs	r2, #12
 800095c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800095e:	f04f 33ff 	mov.w	r3, #4294967295
 8000962:	e009      	b.n	8000978 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000964:	4b08      	ldr	r3, [pc, #32]	; (8000988 <_sbrk+0x64>)
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800096a:	4b07      	ldr	r3, [pc, #28]	; (8000988 <_sbrk+0x64>)
 800096c:	681a      	ldr	r2, [r3, #0]
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	4413      	add	r3, r2
 8000972:	4a05      	ldr	r2, [pc, #20]	; (8000988 <_sbrk+0x64>)
 8000974:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000976:	68fb      	ldr	r3, [r7, #12]
}
 8000978:	4618      	mov	r0, r3
 800097a:	3718      	adds	r7, #24
 800097c:	46bd      	mov	sp, r7
 800097e:	bd80      	pop	{r7, pc}
 8000980:	20020000 	.word	0x20020000
 8000984:	00000400 	.word	0x00000400
 8000988:	20000228 	.word	0x20000228
 800098c:	20001940 	.word	0x20001940

08000990 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000990:	b480      	push	{r7}
 8000992:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000994:	4b06      	ldr	r3, [pc, #24]	; (80009b0 <SystemInit+0x20>)
 8000996:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800099a:	4a05      	ldr	r2, [pc, #20]	; (80009b0 <SystemInit+0x20>)
 800099c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009a0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009a4:	bf00      	nop
 80009a6:	46bd      	mov	sp, r7
 80009a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ac:	4770      	bx	lr
 80009ae:	bf00      	nop
 80009b0:	e000ed00 	.word	0xe000ed00

080009b4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80009b4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80009ec <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80009b8:	480d      	ldr	r0, [pc, #52]	; (80009f0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80009ba:	490e      	ldr	r1, [pc, #56]	; (80009f4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80009bc:	4a0e      	ldr	r2, [pc, #56]	; (80009f8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80009be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009c0:	e002      	b.n	80009c8 <LoopCopyDataInit>

080009c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009c6:	3304      	adds	r3, #4

080009c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009cc:	d3f9      	bcc.n	80009c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009ce:	4a0b      	ldr	r2, [pc, #44]	; (80009fc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80009d0:	4c0b      	ldr	r4, [pc, #44]	; (8000a00 <LoopFillZerobss+0x26>)
  movs r3, #0
 80009d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009d4:	e001      	b.n	80009da <LoopFillZerobss>

080009d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009d8:	3204      	adds	r2, #4

080009da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009dc:	d3fb      	bcc.n	80009d6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80009de:	f7ff ffd7 	bl	8000990 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80009e2:	f008 fda1 	bl	8009528 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80009e6:	f008 fd8d 	bl	8009504 <main>
  bx  lr    
 80009ea:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80009ec:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80009f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009f4:	2000020c 	.word	0x2000020c
  ldr r2, =_sidata
 80009f8:	08009f64 	.word	0x08009f64
  ldr r2, =_sbss
 80009fc:	2000020c 	.word	0x2000020c
  ldr r4, =_ebss
 8000a00:	20001940 	.word	0x20001940

08000a04 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a04:	e7fe      	b.n	8000a04 <ADC_IRQHandler>

08000a06 <qbufferCreate>:
{

}

bool qbufferCreate(qbuffer_t *p_node, uint8_t *p_buf, uint32_t length)
{
 8000a06:	b480      	push	{r7}
 8000a08:	b087      	sub	sp, #28
 8000a0a:	af00      	add	r7, sp, #0
 8000a0c:	60f8      	str	r0, [r7, #12]
 8000a0e:	60b9      	str	r1, [r7, #8]
 8000a10:	607a      	str	r2, [r7, #4]
	/*Making buffer is index initializing */
	bool ret = true;
 8000a12:	2301      	movs	r3, #1
 8000a14:	75fb      	strb	r3, [r7, #23]

	p_node->in 		= 0;
 8000a16:	68fb      	ldr	r3, [r7, #12]
 8000a18:	2200      	movs	r2, #0
 8000a1a:	601a      	str	r2, [r3, #0]
	p_node->out	  = 0;
 8000a1c:	68fb      	ldr	r3, [r7, #12]
 8000a1e:	2200      	movs	r2, #0
 8000a20:	605a      	str	r2, [r3, #4]
	p_node->len   = length;
 8000a22:	68fb      	ldr	r3, [r7, #12]
 8000a24:	687a      	ldr	r2, [r7, #4]
 8000a26:	609a      	str	r2, [r3, #8]
	p_node->p_buf = p_buf;
 8000a28:	68fb      	ldr	r3, [r7, #12]
 8000a2a:	68ba      	ldr	r2, [r7, #8]
 8000a2c:	60da      	str	r2, [r3, #12]

	return ret;
 8000a2e:	7dfb      	ldrb	r3, [r7, #23]
}
 8000a30:	4618      	mov	r0, r3
 8000a32:	371c      	adds	r7, #28
 8000a34:	46bd      	mov	sp, r7
 8000a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3a:	4770      	bx	lr

08000a3c <qbufferRead>:
	return ret;
}

/* Read qbuffer and input to p_data. */
bool qbufferRead(qbuffer_t *p_node, uint8_t *p_data, uint32_t length)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	b087      	sub	sp, #28
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	60f8      	str	r0, [r7, #12]
 8000a44:	60b9      	str	r1, [r7, #8]
 8000a46:	607a      	str	r2, [r7, #4]
	bool ret = true;
 8000a48:	2301      	movs	r3, #1
 8000a4a:	75fb      	strb	r3, [r7, #23]
	for(int i = 0; i < length; i++)
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	613b      	str	r3, [r7, #16]
 8000a50:	e026      	b.n	8000aa0 <qbufferRead+0x64>
	{
		if(p_node->p_buf != NULL)
 8000a52:	68fb      	ldr	r3, [r7, #12]
 8000a54:	68db      	ldr	r3, [r3, #12]
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d009      	beq.n	8000a6e <qbufferRead+0x32>
		{
			p_data[i] = p_node->p_buf[p_node->out];
 8000a5a:	68fb      	ldr	r3, [r7, #12]
 8000a5c:	68da      	ldr	r2, [r3, #12]
 8000a5e:	68fb      	ldr	r3, [r7, #12]
 8000a60:	685b      	ldr	r3, [r3, #4]
 8000a62:	441a      	add	r2, r3
 8000a64:	693b      	ldr	r3, [r7, #16]
 8000a66:	68b9      	ldr	r1, [r7, #8]
 8000a68:	440b      	add	r3, r1
 8000a6a:	7812      	ldrb	r2, [r2, #0]
 8000a6c:	701a      	strb	r2, [r3, #0]
		}
		if(p_node->out != p_node->in)
 8000a6e:	68fb      	ldr	r3, [r7, #12]
 8000a70:	685a      	ldr	r2, [r3, #4]
 8000a72:	68fb      	ldr	r3, [r7, #12]
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	429a      	cmp	r2, r3
 8000a78:	d00c      	beq.n	8000a94 <qbufferRead+0x58>
		{
			/* index update */
			p_node->out = (p_node->out + 1) % p_node->len;
 8000a7a:	68fb      	ldr	r3, [r7, #12]
 8000a7c:	685b      	ldr	r3, [r3, #4]
 8000a7e:	3301      	adds	r3, #1
 8000a80:	68fa      	ldr	r2, [r7, #12]
 8000a82:	6892      	ldr	r2, [r2, #8]
 8000a84:	fbb3 f1f2 	udiv	r1, r3, r2
 8000a88:	fb01 f202 	mul.w	r2, r1, r2
 8000a8c:	1a9a      	subs	r2, r3, r2
 8000a8e:	68fb      	ldr	r3, [r7, #12]
 8000a90:	605a      	str	r2, [r3, #4]
 8000a92:	e002      	b.n	8000a9a <qbufferRead+0x5e>
		}
		else /*when in idx = out idx*/
		{
			ret = false;
 8000a94:	2300      	movs	r3, #0
 8000a96:	75fb      	strb	r3, [r7, #23]
			break;
 8000a98:	e006      	b.n	8000aa8 <qbufferRead+0x6c>
	for(int i = 0; i < length; i++)
 8000a9a:	693b      	ldr	r3, [r7, #16]
 8000a9c:	3301      	adds	r3, #1
 8000a9e:	613b      	str	r3, [r7, #16]
 8000aa0:	693b      	ldr	r3, [r7, #16]
 8000aa2:	687a      	ldr	r2, [r7, #4]
 8000aa4:	429a      	cmp	r2, r3
 8000aa6:	d8d4      	bhi.n	8000a52 <qbufferRead+0x16>
		}
	}
	return ret;
 8000aa8:	7dfb      	ldrb	r3, [r7, #23]
}
 8000aaa:	4618      	mov	r0, r3
 8000aac:	371c      	adds	r7, #28
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab4:	4770      	bx	lr

08000ab6 <qbufferAvailable>:

/*transmit struct pointer, receive current buffer's data number*/
uint32_t qbufferAvailable(qbuffer_t *p_node)
{
 8000ab6:	b480      	push	{r7}
 8000ab8:	b085      	sub	sp, #20
 8000aba:	af00      	add	r7, sp, #0
 8000abc:	6078      	str	r0, [r7, #4]
	uint32_t ret;

	ret = (p_node->len + p_node->in - p_node->out) % p_node->len;
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	689a      	ldr	r2, [r3, #8]
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	441a      	add	r2, r3
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	685b      	ldr	r3, [r3, #4]
 8000acc:	1ad3      	subs	r3, r2, r3
 8000ace:	687a      	ldr	r2, [r7, #4]
 8000ad0:	6892      	ldr	r2, [r2, #8]
 8000ad2:	fbb3 f1f2 	udiv	r1, r3, r2
 8000ad6:	fb01 f202 	mul.w	r2, r1, r2
 8000ada:	1a9b      	subs	r3, r3, r2
 8000adc:	60fb      	str	r3, [r7, #12]

	return ret;
 8000ade:	68fb      	ldr	r3, [r7, #12]
}
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	3714      	adds	r7, #20
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aea:	4770      	bx	lr

08000aec <ledInit>:
{
	{GPIOC, GPIO_PIN_13, GPIO_PIN_SET, GPIO_PIN_RESET}
};

bool ledInit(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b088      	sub	sp, #32
 8000af0:	af00      	add	r7, sp, #0
	bool ret = true;
 8000af2:	2301      	movs	r3, #1
 8000af4:	76fb      	strb	r3, [r7, #27]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000af6:	1d3b      	adds	r3, r7, #4
 8000af8:	2200      	movs	r2, #0
 8000afa:	601a      	str	r2, [r3, #0]
 8000afc:	605a      	str	r2, [r3, #4]
 8000afe:	609a      	str	r2, [r3, #8]
 8000b00:	60da      	str	r2, [r3, #12]
 8000b02:	611a      	str	r2, [r3, #16]

	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000b04:	2300      	movs	r3, #0
 8000b06:	603b      	str	r3, [r7, #0]
 8000b08:	4b1d      	ldr	r3, [pc, #116]	; (8000b80 <ledInit+0x94>)
 8000b0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b0c:	4a1c      	ldr	r2, [pc, #112]	; (8000b80 <ledInit+0x94>)
 8000b0e:	f043 0301 	orr.w	r3, r3, #1
 8000b12:	6313      	str	r3, [r2, #48]	; 0x30
 8000b14:	4b1a      	ldr	r3, [pc, #104]	; (8000b80 <ledInit+0x94>)
 8000b16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b18:	f003 0301 	and.w	r3, r3, #1
 8000b1c:	603b      	str	r3, [r7, #0]
 8000b1e:	683b      	ldr	r3, [r7, #0]

	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b20:	2301      	movs	r3, #1
 8000b22:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b24:	2300      	movs	r3, #0
 8000b26:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	613b      	str	r3, [r7, #16]

	for(int i = 0; i < LED_MAX_CHANNEL; i++)
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	61fb      	str	r3, [r7, #28]
 8000b30:	e01e      	b.n	8000b70 <ledInit+0x84>
	{
		ledOff(i);
 8000b32:	69fb      	ldr	r3, [r7, #28]
 8000b34:	b2db      	uxtb	r3, r3
 8000b36:	4618      	mov	r0, r3
 8000b38:	f000 f826 	bl	8000b88 <ledOff>
		GPIO_InitStruct.Pin = led_tbl[i].pin;
 8000b3c:	4911      	ldr	r1, [pc, #68]	; (8000b84 <ledInit+0x98>)
 8000b3e:	69fa      	ldr	r2, [r7, #28]
 8000b40:	4613      	mov	r3, r2
 8000b42:	005b      	lsls	r3, r3, #1
 8000b44:	4413      	add	r3, r2
 8000b46:	009b      	lsls	r3, r3, #2
 8000b48:	440b      	add	r3, r1
 8000b4a:	3304      	adds	r3, #4
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	607b      	str	r3, [r7, #4]
		HAL_GPIO_Init(led_tbl[i].port, &GPIO_InitStruct);
 8000b50:	490c      	ldr	r1, [pc, #48]	; (8000b84 <ledInit+0x98>)
 8000b52:	69fa      	ldr	r2, [r7, #28]
 8000b54:	4613      	mov	r3, r2
 8000b56:	005b      	lsls	r3, r3, #1
 8000b58:	4413      	add	r3, r2
 8000b5a:	009b      	lsls	r3, r3, #2
 8000b5c:	440b      	add	r3, r1
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	1d3a      	adds	r2, r7, #4
 8000b62:	4611      	mov	r1, r2
 8000b64:	4618      	mov	r0, r3
 8000b66:	f001 f9c1 	bl	8001eec <HAL_GPIO_Init>
	for(int i = 0; i < LED_MAX_CHANNEL; i++)
 8000b6a:	69fb      	ldr	r3, [r7, #28]
 8000b6c:	3301      	adds	r3, #1
 8000b6e:	61fb      	str	r3, [r7, #28]
 8000b70:	69fb      	ldr	r3, [r7, #28]
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	dddd      	ble.n	8000b32 <ledInit+0x46>
	}
	return ret;
 8000b76:	7efb      	ldrb	r3, [r7, #27]
}
 8000b78:	4618      	mov	r0, r3
 8000b7a:	3720      	adds	r7, #32
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	bd80      	pop	{r7, pc}
 8000b80:	40023800 	.word	0x40023800
 8000b84:	20000004 	.word	0x20000004

08000b88 <ledOff>:
void ledOn(uint8_t ch)
{
	HAL_GPIO_WritePin(led_tbl[ch].port, led_tbl[ch].pin, led_tbl[ch].on_state);
}
void ledOff(uint8_t ch)
{
 8000b88:	b590      	push	{r4, r7, lr}
 8000b8a:	b083      	sub	sp, #12
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	4603      	mov	r3, r0
 8000b90:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(led_tbl[ch].port, led_tbl[ch].pin, led_tbl[ch].off_state);
 8000b92:	79fa      	ldrb	r2, [r7, #7]
 8000b94:	4910      	ldr	r1, [pc, #64]	; (8000bd8 <ledOff+0x50>)
 8000b96:	4613      	mov	r3, r2
 8000b98:	005b      	lsls	r3, r3, #1
 8000b9a:	4413      	add	r3, r2
 8000b9c:	009b      	lsls	r3, r3, #2
 8000b9e:	440b      	add	r3, r1
 8000ba0:	6818      	ldr	r0, [r3, #0]
 8000ba2:	79fa      	ldrb	r2, [r7, #7]
 8000ba4:	490c      	ldr	r1, [pc, #48]	; (8000bd8 <ledOff+0x50>)
 8000ba6:	4613      	mov	r3, r2
 8000ba8:	005b      	lsls	r3, r3, #1
 8000baa:	4413      	add	r3, r2
 8000bac:	009b      	lsls	r3, r3, #2
 8000bae:	440b      	add	r3, r1
 8000bb0:	3304      	adds	r3, #4
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	b299      	uxth	r1, r3
 8000bb6:	79fa      	ldrb	r2, [r7, #7]
 8000bb8:	4c07      	ldr	r4, [pc, #28]	; (8000bd8 <ledOff+0x50>)
 8000bba:	4613      	mov	r3, r2
 8000bbc:	005b      	lsls	r3, r3, #1
 8000bbe:	4413      	add	r3, r2
 8000bc0:	009b      	lsls	r3, r3, #2
 8000bc2:	4423      	add	r3, r4
 8000bc4:	3309      	adds	r3, #9
 8000bc6:	781b      	ldrb	r3, [r3, #0]
 8000bc8:	461a      	mov	r2, r3
 8000bca:	f001 fbf7 	bl	80023bc <HAL_GPIO_WritePin>
}
 8000bce:	bf00      	nop
 8000bd0:	370c      	adds	r7, #12
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bd90      	pop	{r4, r7, pc}
 8000bd6:	bf00      	nop
 8000bd8:	20000004 	.word	0x20000004

08000bdc <ledToggle>:
void ledToggle(uint8_t ch)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b082      	sub	sp, #8
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	4603      	mov	r3, r0
 8000be4:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_TogglePin(led_tbl[ch].port, led_tbl[ch].pin);
 8000be6:	79fa      	ldrb	r2, [r7, #7]
 8000be8:	490b      	ldr	r1, [pc, #44]	; (8000c18 <ledToggle+0x3c>)
 8000bea:	4613      	mov	r3, r2
 8000bec:	005b      	lsls	r3, r3, #1
 8000bee:	4413      	add	r3, r2
 8000bf0:	009b      	lsls	r3, r3, #2
 8000bf2:	440b      	add	r3, r1
 8000bf4:	6818      	ldr	r0, [r3, #0]
 8000bf6:	79fa      	ldrb	r2, [r7, #7]
 8000bf8:	4907      	ldr	r1, [pc, #28]	; (8000c18 <ledToggle+0x3c>)
 8000bfa:	4613      	mov	r3, r2
 8000bfc:	005b      	lsls	r3, r3, #1
 8000bfe:	4413      	add	r3, r2
 8000c00:	009b      	lsls	r3, r3, #2
 8000c02:	440b      	add	r3, r1
 8000c04:	3304      	adds	r3, #4
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	b29b      	uxth	r3, r3
 8000c0a:	4619      	mov	r1, r3
 8000c0c:	f001 fbef 	bl	80023ee <HAL_GPIO_TogglePin>
}
 8000c10:	bf00      	nop
 8000c12:	3708      	adds	r7, #8
 8000c14:	46bd      	mov	sp, r7
 8000c16:	bd80      	pop	{r7, pc}
 8000c18:	20000004 	.word	0x20000004

08000c1c <resetInit>:
#include "rtc.h"

static uint32_t reset_count = 0;

bool resetInit(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b082      	sub	sp, #8
 8000c20:	af00      	add	r7, sp, #0
	bool ret = true;
 8000c22:	2301      	movs	r3, #1
 8000c24:	71fb      	strb	r3, [r7, #7]

	if(RCC->CSR & (1<<26))
 8000c26:	4b11      	ldr	r3, [pc, #68]	; (8000c6c <resetInit+0x50>)
 8000c28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000c2a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d013      	beq.n	8000c5a <resetInit+0x3e>
	{
		rtcBackupRegWrite(0, rtcBackupRegRead(0) + 1);
 8000c32:	2000      	movs	r0, #0
 8000c34:	f000 f85a 	bl	8000cec <rtcBackupRegRead>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	3301      	adds	r3, #1
 8000c3c:	4619      	mov	r1, r3
 8000c3e:	2000      	movs	r0, #0
 8000c40:	f000 f844 	bl	8000ccc <rtcBackupRegWrite>
		delay(500);
 8000c44:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000c48:	f7ff fd7a 	bl	8000740 <delay>
		/* due to multiple input */
		reset_count = rtcBackupRegRead(0);
 8000c4c:	2000      	movs	r0, #0
 8000c4e:	f000 f84d 	bl	8000cec <rtcBackupRegRead>
 8000c52:	4603      	mov	r3, r0
 8000c54:	461a      	mov	r2, r3
 8000c56:	4b06      	ldr	r3, [pc, #24]	; (8000c70 <resetInit+0x54>)
 8000c58:	601a      	str	r2, [r3, #0]
		/* one count increase itself */
	}
	rtcBackupRegWrite(0, 0);
 8000c5a:	2100      	movs	r1, #0
 8000c5c:	2000      	movs	r0, #0
 8000c5e:	f000 f835 	bl	8000ccc <rtcBackupRegWrite>
	return ret;
 8000c62:	79fb      	ldrb	r3, [r7, #7]
}
 8000c64:	4618      	mov	r0, r3
 8000c66:	3708      	adds	r7, #8
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	bd80      	pop	{r7, pc}
 8000c6c:	40023800 	.word	0x40023800
 8000c70:	2000022c 	.word	0x2000022c

08000c74 <rtcInit>:
#include "rtc.h"

static RTC_HandleTypeDef hrtc;

bool rtcInit(void)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b082      	sub	sp, #8
 8000c78:	af00      	add	r7, sp, #0
	bool ret = true;
 8000c7a:	2301      	movs	r3, #1
 8000c7c:	71fb      	strb	r3, [r7, #7]
	// also need to enable GPIOC -> already declared on "bsp.c"
	hrtc.Instance 						= RTC;
 8000c7e:	4b11      	ldr	r3, [pc, #68]	; (8000cc4 <rtcInit+0x50>)
 8000c80:	4a11      	ldr	r2, [pc, #68]	; (8000cc8 <rtcInit+0x54>)
 8000c82:	601a      	str	r2, [r3, #0]
	hrtc.Init.HourFormat 			= RTC_HOURFORMAT_24;
 8000c84:	4b0f      	ldr	r3, [pc, #60]	; (8000cc4 <rtcInit+0x50>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	605a      	str	r2, [r3, #4]
	hrtc.Init.AsynchPrediv 		= 127;
 8000c8a:	4b0e      	ldr	r3, [pc, #56]	; (8000cc4 <rtcInit+0x50>)
 8000c8c:	227f      	movs	r2, #127	; 0x7f
 8000c8e:	609a      	str	r2, [r3, #8]
	hrtc.Init.SynchPrediv 		= 255;
 8000c90:	4b0c      	ldr	r3, [pc, #48]	; (8000cc4 <rtcInit+0x50>)
 8000c92:	22ff      	movs	r2, #255	; 0xff
 8000c94:	60da      	str	r2, [r3, #12]
	hrtc.Init.OutPut 					= RTC_OUTPUT_DISABLE;
 8000c96:	4b0b      	ldr	r3, [pc, #44]	; (8000cc4 <rtcInit+0x50>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	611a      	str	r2, [r3, #16]
	hrtc.Init.OutPutPolarity 	= RTC_OUTPUT_POLARITY_HIGH;
 8000c9c:	4b09      	ldr	r3, [pc, #36]	; (8000cc4 <rtcInit+0x50>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	615a      	str	r2, [r3, #20]
	hrtc.Init.OutPutType	    = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000ca2:	4b08      	ldr	r3, [pc, #32]	; (8000cc4 <rtcInit+0x50>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	619a      	str	r2, [r3, #24]
	if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000ca8:	4806      	ldr	r0, [pc, #24]	; (8000cc4 <rtcInit+0x50>)
 8000caa:	f003 fa85 	bl	80041b8 <HAL_RTC_Init>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d001      	beq.n	8000cb8 <rtcInit+0x44>
	{
	Error_Handler();
 8000cb4:	f7ff fdc0 	bl	8000838 <Error_Handler>
	}
	return ret;
 8000cb8:	79fb      	ldrb	r3, [r7, #7]
}
 8000cba:	4618      	mov	r0, r3
 8000cbc:	3708      	adds	r7, #8
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bd80      	pop	{r7, pc}
 8000cc2:	bf00      	nop
 8000cc4:	20000230 	.word	0x20000230
 8000cc8:	40002800 	.word	0x40002800

08000ccc <rtcBackupRegWrite>:

void rtcBackupRegWrite(uint32_t index, uint32_t data)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b082      	sub	sp, #8
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
 8000cd4:	6039      	str	r1, [r7, #0]
	HAL_RTCEx_BKUPWrite(&hrtc, index, data);
 8000cd6:	683a      	ldr	r2, [r7, #0]
 8000cd8:	6879      	ldr	r1, [r7, #4]
 8000cda:	4803      	ldr	r0, [pc, #12]	; (8000ce8 <rtcBackupRegWrite+0x1c>)
 8000cdc:	f003 fb51 	bl	8004382 <HAL_RTCEx_BKUPWrite>
}
 8000ce0:	bf00      	nop
 8000ce2:	3708      	adds	r7, #8
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	bd80      	pop	{r7, pc}
 8000ce8:	20000230 	.word	0x20000230

08000cec <rtcBackupRegRead>:
uint32_t rtcBackupRegRead(uint32_t index)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b082      	sub	sp, #8
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
	return HAL_RTCEx_BKUPRead(&hrtc, index);
 8000cf4:	6879      	ldr	r1, [r7, #4]
 8000cf6:	4804      	ldr	r0, [pc, #16]	; (8000d08 <rtcBackupRegRead+0x1c>)
 8000cf8:	f003 fb5d 	bl	80043b6 <HAL_RTCEx_BKUPRead>
 8000cfc:	4603      	mov	r3, r0
}
 8000cfe:	4618      	mov	r0, r3
 8000d00:	3708      	adds	r7, #8
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	bf00      	nop
 8000d08:	20000230 	.word	0x20000230

08000d0c <HAL_RTC_MspInit>:


void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b088      	sub	sp, #32
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d14:	f107 0308 	add.w	r3, r7, #8
 8000d18:	2200      	movs	r2, #0
 8000d1a:	601a      	str	r2, [r3, #0]
 8000d1c:	605a      	str	r2, [r3, #4]
 8000d1e:	609a      	str	r2, [r3, #8]
 8000d20:	60da      	str	r2, [r3, #12]
 8000d22:	611a      	str	r2, [r3, #16]
 8000d24:	615a      	str	r2, [r3, #20]
  if(rtcHandle->Instance==RTC)
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	4a0c      	ldr	r2, [pc, #48]	; (8000d5c <HAL_RTC_MspInit+0x50>)
 8000d2c:	4293      	cmp	r3, r2
 8000d2e:	d111      	bne.n	8000d54 <HAL_RTC_MspInit+0x48>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000d30:	2302      	movs	r3, #2
 8000d32:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000d34:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d38:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d3a:	f107 0308 	add.w	r3, r7, #8
 8000d3e:	4618      	mov	r0, r3
 8000d40:	f003 f94a 	bl	8003fd8 <HAL_RCCEx_PeriphCLKConfig>
 8000d44:	4603      	mov	r3, r0
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d001      	beq.n	8000d4e <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8000d4a:	f7ff fd75 	bl	8000838 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000d4e:	4b04      	ldr	r3, [pc, #16]	; (8000d60 <HAL_RTC_MspInit+0x54>)
 8000d50:	2201      	movs	r2, #1
 8000d52:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8000d54:	bf00      	nop
 8000d56:	3720      	adds	r7, #32
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	bd80      	pop	{r7, pc}
 8000d5c:	40002800 	.word	0x40002800
 8000d60:	42470e3c 	.word	0x42470e3c

08000d64 <uartInit>:
static qbuffer_t qbuffer[UART_MAX_CHANNEL];
static uint8_t rx_buf[256];
//static uint8_t rx_data[UART_MAX_CHANNEL];

bool uartInit(void)
{
 8000d64:	b480      	push	{r7}
 8000d66:	b083      	sub	sp, #12
 8000d68:	af00      	add	r7, sp, #0
	for(int i = 0; i < UART_MAX_CHANNEL; i++)
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	607b      	str	r3, [r7, #4]
 8000d6e:	e007      	b.n	8000d80 <uartInit+0x1c>
	{
		is_open[i] = false;
 8000d70:	4a08      	ldr	r2, [pc, #32]	; (8000d94 <uartInit+0x30>)
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	4413      	add	r3, r2
 8000d76:	2200      	movs	r2, #0
 8000d78:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < UART_MAX_CHANNEL; i++)
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	3301      	adds	r3, #1
 8000d7e:	607b      	str	r3, [r7, #4]
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	2b01      	cmp	r3, #1
 8000d84:	ddf4      	ble.n	8000d70 <uartInit+0xc>
	}
	return false;
 8000d86:	2300      	movs	r3, #0
}
 8000d88:	4618      	mov	r0, r3
 8000d8a:	370c      	adds	r7, #12
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d92:	4770      	bx	lr
 8000d94:	200002f4 	.word	0x200002f4

08000d98 <uartOpen>:

bool uartOpen(uint8_t ch, uint32_t baud)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b084      	sub	sp, #16
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	4603      	mov	r3, r0
 8000da0:	6039      	str	r1, [r7, #0]
 8000da2:	71fb      	strb	r3, [r7, #7]
	bool ret = false;
 8000da4:	2300      	movs	r3, #0
 8000da6:	73fb      	strb	r3, [r7, #15]

	switch(ch)
 8000da8:	79fb      	ldrb	r3, [r7, #7]
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d002      	beq.n	8000db4 <uartOpen+0x1c>
 8000dae:	2b01      	cmp	r3, #1
 8000db0:	d007      	beq.n	8000dc2 <uartOpen+0x2a>
 8000db2:	e076      	b.n	8000ea2 <uartOpen+0x10a>
	{
		case _DEF_UART1:
			is_open[ch] = true;
 8000db4:	79fb      	ldrb	r3, [r7, #7]
 8000db6:	4a3d      	ldr	r2, [pc, #244]	; (8000eac <uartOpen+0x114>)
 8000db8:	2101      	movs	r1, #1
 8000dba:	54d1      	strb	r1, [r2, r3]
			ret = true;
 8000dbc:	2301      	movs	r3, #1
 8000dbe:	73fb      	strb	r3, [r7, #15]
			break;
 8000dc0:	e06f      	b.n	8000ea2 <uartOpen+0x10a>

		case _DEF_UART2:
			huart1.Instance 					= USART1;
 8000dc2:	4b3b      	ldr	r3, [pc, #236]	; (8000eb0 <uartOpen+0x118>)
 8000dc4:	4a3b      	ldr	r2, [pc, #236]	; (8000eb4 <uartOpen+0x11c>)
 8000dc6:	601a      	str	r2, [r3, #0]
			huart1.Init.BaudRate 			= baud;
 8000dc8:	4a39      	ldr	r2, [pc, #228]	; (8000eb0 <uartOpen+0x118>)
 8000dca:	683b      	ldr	r3, [r7, #0]
 8000dcc:	6053      	str	r3, [r2, #4]
			huart1.Init.WordLength		= UART_WORDLENGTH_8B;
 8000dce:	4b38      	ldr	r3, [pc, #224]	; (8000eb0 <uartOpen+0x118>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	609a      	str	r2, [r3, #8]
			huart1.Init.StopBits 			= UART_STOPBITS_1;
 8000dd4:	4b36      	ldr	r3, [pc, #216]	; (8000eb0 <uartOpen+0x118>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	60da      	str	r2, [r3, #12]
			huart1.Init.Parity 				= UART_PARITY_NONE;
 8000dda:	4b35      	ldr	r3, [pc, #212]	; (8000eb0 <uartOpen+0x118>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	611a      	str	r2, [r3, #16]
			huart1.Init.Mode 					= UART_MODE_TX_RX;
 8000de0:	4b33      	ldr	r3, [pc, #204]	; (8000eb0 <uartOpen+0x118>)
 8000de2:	220c      	movs	r2, #12
 8000de4:	615a      	str	r2, [r3, #20]
			huart1.Init.HwFlowCtl 		= UART_HWCONTROL_NONE;
 8000de6:	4b32      	ldr	r3, [pc, #200]	; (8000eb0 <uartOpen+0x118>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	619a      	str	r2, [r3, #24]
			huart1.Init.OverSampling 	= UART_OVERSAMPLING_16;
 8000dec:	4b30      	ldr	r3, [pc, #192]	; (8000eb0 <uartOpen+0x118>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	61da      	str	r2, [r3, #28]

			HAL_UART_DeInit(&huart1);
 8000df2:	482f      	ldr	r0, [pc, #188]	; (8000eb0 <uartOpen+0x118>)
 8000df4:	f003 fb44 	bl	8004480 <HAL_UART_DeInit>

			qbufferCreate(&qbuffer[ch], &rx_buf[0], 256);
 8000df8:	79fb      	ldrb	r3, [r7, #7]
 8000dfa:	011b      	lsls	r3, r3, #4
 8000dfc:	4a2e      	ldr	r2, [pc, #184]	; (8000eb8 <uartOpen+0x120>)
 8000dfe:	4413      	add	r3, r2
 8000e00:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e04:	492d      	ldr	r1, [pc, #180]	; (8000ebc <uartOpen+0x124>)
 8000e06:	4618      	mov	r0, r3
 8000e08:	f7ff fdfd 	bl	8000a06 <qbufferCreate>

      __HAL_RCC_DMA2_CLK_ENABLE();
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	60bb      	str	r3, [r7, #8]
 8000e10:	4b2b      	ldr	r3, [pc, #172]	; (8000ec0 <uartOpen+0x128>)
 8000e12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e14:	4a2a      	ldr	r2, [pc, #168]	; (8000ec0 <uartOpen+0x128>)
 8000e16:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000e1a:	6313      	str	r3, [r2, #48]	; 0x30
 8000e1c:	4b28      	ldr	r3, [pc, #160]	; (8000ec0 <uartOpen+0x128>)
 8000e1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e20:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000e24:	60bb      	str	r3, [r7, #8]
 8000e26:	68bb      	ldr	r3, [r7, #8]
      HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8000e28:	2200      	movs	r2, #0
 8000e2a:	2100      	movs	r1, #0
 8000e2c:	203a      	movs	r0, #58	; 0x3a
 8000e2e:	f000 fbb8 	bl	80015a2 <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8000e32:	203a      	movs	r0, #58	; 0x3a
 8000e34:	f000 fbd1 	bl	80015da <HAL_NVIC_EnableIRQ>

			if (HAL_UART_Init(&huart1) != HAL_OK)
 8000e38:	481d      	ldr	r0, [pc, #116]	; (8000eb0 <uartOpen+0x118>)
 8000e3a:	f003 fad4 	bl	80043e6 <HAL_UART_Init>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d002      	beq.n	8000e4a <uartOpen+0xb2>
			{
				ret = false;
 8000e44:	2300      	movs	r3, #0
 8000e46:	73fb      	strb	r3, [r7, #15]
				}
				/* FLUSH */
				qbuffer[ch].in  = qbuffer[ch].len - hdma_usart1_rx.Instance->NDTR;
				qbuffer[ch].out = qbuffer[ch].in;
			}
			break;
 8000e48:	e02a      	b.n	8000ea0 <uartOpen+0x108>
				ret = true;
 8000e4a:	2301      	movs	r3, #1
 8000e4c:	73fb      	strb	r3, [r7, #15]
				is_open[ch] = true;
 8000e4e:	79fb      	ldrb	r3, [r7, #7]
 8000e50:	4a16      	ldr	r2, [pc, #88]	; (8000eac <uartOpen+0x114>)
 8000e52:	2101      	movs	r1, #1
 8000e54:	54d1      	strb	r1, [r2, r3]
				if(HAL_UART_Receive_DMA(&huart1, (uint8_t *)&rx_buf[0], 256) != HAL_OK)
 8000e56:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e5a:	4918      	ldr	r1, [pc, #96]	; (8000ebc <uartOpen+0x124>)
 8000e5c:	4814      	ldr	r0, [pc, #80]	; (8000eb0 <uartOpen+0x118>)
 8000e5e:	f003 fbd0 	bl	8004602 <HAL_UART_Receive_DMA>
 8000e62:	4603      	mov	r3, r0
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d001      	beq.n	8000e6c <uartOpen+0xd4>
				  ret = false;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	73fb      	strb	r3, [r7, #15]
				qbuffer[ch].in  = qbuffer[ch].len - hdma_usart1_rx.Instance->NDTR;
 8000e6c:	79fb      	ldrb	r3, [r7, #7]
 8000e6e:	4a12      	ldr	r2, [pc, #72]	; (8000eb8 <uartOpen+0x120>)
 8000e70:	011b      	lsls	r3, r3, #4
 8000e72:	4413      	add	r3, r2
 8000e74:	3308      	adds	r3, #8
 8000e76:	6819      	ldr	r1, [r3, #0]
 8000e78:	4b12      	ldr	r3, [pc, #72]	; (8000ec4 <uartOpen+0x12c>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	685a      	ldr	r2, [r3, #4]
 8000e7e:	79fb      	ldrb	r3, [r7, #7]
 8000e80:	1a8a      	subs	r2, r1, r2
 8000e82:	490d      	ldr	r1, [pc, #52]	; (8000eb8 <uartOpen+0x120>)
 8000e84:	011b      	lsls	r3, r3, #4
 8000e86:	440b      	add	r3, r1
 8000e88:	601a      	str	r2, [r3, #0]
				qbuffer[ch].out = qbuffer[ch].in;
 8000e8a:	79fa      	ldrb	r2, [r7, #7]
 8000e8c:	79fb      	ldrb	r3, [r7, #7]
 8000e8e:	490a      	ldr	r1, [pc, #40]	; (8000eb8 <uartOpen+0x120>)
 8000e90:	0112      	lsls	r2, r2, #4
 8000e92:	440a      	add	r2, r1
 8000e94:	6812      	ldr	r2, [r2, #0]
 8000e96:	4908      	ldr	r1, [pc, #32]	; (8000eb8 <uartOpen+0x120>)
 8000e98:	011b      	lsls	r3, r3, #4
 8000e9a:	440b      	add	r3, r1
 8000e9c:	3304      	adds	r3, #4
 8000e9e:	601a      	str	r2, [r3, #0]
			break;
 8000ea0:	bf00      	nop
	}

	return ret;
 8000ea2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	3710      	adds	r7, #16
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	bd80      	pop	{r7, pc}
 8000eac:	200002f4 	.word	0x200002f4
 8000eb0:	20000250 	.word	0x20000250
 8000eb4:	40011000 	.word	0x40011000
 8000eb8:	200002f8 	.word	0x200002f8
 8000ebc:	20000318 	.word	0x20000318
 8000ec0:	40023800 	.word	0x40023800
 8000ec4:	20000294 	.word	0x20000294

08000ec8 <uartAvailable>:
uint32_t uartAvailable(uint8_t ch)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b084      	sub	sp, #16
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	4603      	mov	r3, r0
 8000ed0:	71fb      	strb	r3, [r7, #7]
	uint32_t ret = 0;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	60fb      	str	r3, [r7, #12]


	switch(ch)
 8000ed6:	79fb      	ldrb	r3, [r7, #7]
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d002      	beq.n	8000ee2 <uartAvailable+0x1a>
 8000edc:	2b01      	cmp	r3, #1
 8000ede:	d004      	beq.n	8000eea <uartAvailable+0x22>
 8000ee0:	e01b      	b.n	8000f1a <uartAvailable+0x52>
	{
		case _DEF_UART1: // 첫번째 채널 uart -> 1. cdc 추
			ret = cdcAvailable();
 8000ee2:	f007 fcdd 	bl	80088a0 <cdcAvailable>
 8000ee6:	60f8      	str	r0, [r7, #12]
			break;
 8000ee8:	e017      	b.n	8000f1a <uartAvailable+0x52>
		case _DEF_UART2:
		  qbuffer[ch].in = qbuffer[ch].len - hdma_usart1_rx.Instance->NDTR;
 8000eea:	79fb      	ldrb	r3, [r7, #7]
 8000eec:	4a0d      	ldr	r2, [pc, #52]	; (8000f24 <uartAvailable+0x5c>)
 8000eee:	011b      	lsls	r3, r3, #4
 8000ef0:	4413      	add	r3, r2
 8000ef2:	3308      	adds	r3, #8
 8000ef4:	6819      	ldr	r1, [r3, #0]
 8000ef6:	4b0c      	ldr	r3, [pc, #48]	; (8000f28 <uartAvailable+0x60>)
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	685a      	ldr	r2, [r3, #4]
 8000efc:	79fb      	ldrb	r3, [r7, #7]
 8000efe:	1a8a      	subs	r2, r1, r2
 8000f00:	4908      	ldr	r1, [pc, #32]	; (8000f24 <uartAvailable+0x5c>)
 8000f02:	011b      	lsls	r3, r3, #4
 8000f04:	440b      	add	r3, r1
 8000f06:	601a      	str	r2, [r3, #0]
		  ret = qbufferAvailable(&qbuffer[ch]);
 8000f08:	79fb      	ldrb	r3, [r7, #7]
 8000f0a:	011b      	lsls	r3, r3, #4
 8000f0c:	4a05      	ldr	r2, [pc, #20]	; (8000f24 <uartAvailable+0x5c>)
 8000f0e:	4413      	add	r3, r2
 8000f10:	4618      	mov	r0, r3
 8000f12:	f7ff fdd0 	bl	8000ab6 <qbufferAvailable>
 8000f16:	60f8      	str	r0, [r7, #12]
		  break;
 8000f18:	bf00      	nop
	}

	return ret;
 8000f1a:	68fb      	ldr	r3, [r7, #12]
}
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	3710      	adds	r7, #16
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bd80      	pop	{r7, pc}
 8000f24:	200002f8 	.word	0x200002f8
 8000f28:	20000294 	.word	0x20000294

08000f2c <uartRead>:
uint8_t uartRead(uint8_t ch)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b084      	sub	sp, #16
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	4603      	mov	r3, r0
 8000f34:	71fb      	strb	r3, [r7, #7]
	uint8_t ret;

	switch(ch)
 8000f36:	79fb      	ldrb	r3, [r7, #7]
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d002      	beq.n	8000f42 <uartRead+0x16>
 8000f3c:	2b01      	cmp	r3, #1
 8000f3e:	d005      	beq.n	8000f4c <uartRead+0x20>
 8000f40:	e00c      	b.n	8000f5c <uartRead+0x30>
	{
		case _DEF_UART1:
			ret = cdcRead();
 8000f42:	f007 fccb 	bl	80088dc <cdcRead>
 8000f46:	4603      	mov	r3, r0
 8000f48:	73fb      	strb	r3, [r7, #15]
			break;
 8000f4a:	e007      	b.n	8000f5c <uartRead+0x30>
		case _DEF_UART2:
		  qbufferRead(&qbuffer[_DEF_UART2], &ret, 1);
 8000f4c:	f107 030f 	add.w	r3, r7, #15
 8000f50:	2201      	movs	r2, #1
 8000f52:	4619      	mov	r1, r3
 8000f54:	4804      	ldr	r0, [pc, #16]	; (8000f68 <uartRead+0x3c>)
 8000f56:	f7ff fd71 	bl	8000a3c <qbufferRead>
		  break;
 8000f5a:	bf00      	nop
	}

	return ret;
 8000f5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f5e:	4618      	mov	r0, r3
 8000f60:	3710      	adds	r7, #16
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	bf00      	nop
 8000f68:	20000308 	.word	0x20000308

08000f6c <uartWrite>:
uint32_t uartWrite(uint8_t ch, uint8_t *pData, uint32_t length)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b086      	sub	sp, #24
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	4603      	mov	r3, r0
 8000f74:	60b9      	str	r1, [r7, #8]
 8000f76:	607a      	str	r2, [r7, #4]
 8000f78:	73fb      	strb	r3, [r7, #15]
	uint32_t ret;
	HAL_StatusTypeDef status;

	switch(ch)
 8000f7a:	7bfb      	ldrb	r3, [r7, #15]
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d002      	beq.n	8000f86 <uartWrite+0x1a>
 8000f80:	2b01      	cmp	r3, #1
 8000f82:	d006      	beq.n	8000f92 <uartWrite+0x26>
 8000f84:	e014      	b.n	8000fb0 <uartWrite+0x44>
		{
			case _DEF_UART1:
				ret = cdcWrite(pData, length);
 8000f86:	6879      	ldr	r1, [r7, #4]
 8000f88:	68b8      	ldr	r0, [r7, #8]
 8000f8a:	f007 fcfd 	bl	8008988 <cdcWrite>
 8000f8e:	6178      	str	r0, [r7, #20]
				break;
 8000f90:	e00e      	b.n	8000fb0 <uartWrite+0x44>

			case _DEF_UART2:
				status = HAL_UART_Transmit(&huart1, pData, length, 100);
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	b29a      	uxth	r2, r3
 8000f96:	2364      	movs	r3, #100	; 0x64
 8000f98:	68b9      	ldr	r1, [r7, #8]
 8000f9a:	4808      	ldr	r0, [pc, #32]	; (8000fbc <uartWrite+0x50>)
 8000f9c:	f003 fa9f 	bl	80044de <HAL_UART_Transmit>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	74fb      	strb	r3, [r7, #19]
				if(status == HAL_OK)
 8000fa4:	7cfb      	ldrb	r3, [r7, #19]
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d101      	bne.n	8000fae <uartWrite+0x42>
				{
					ret = length;
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	617b      	str	r3, [r7, #20]
				}
				break;
 8000fae:	bf00      	nop
		}

	return ret;
 8000fb0:	697b      	ldr	r3, [r7, #20]
}
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	3718      	adds	r7, #24
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	20000250 	.word	0x20000250

08000fc0 <uartPrintf>:
/*
 * 복습할 것 가변인자...*/
uint32_t uartPrintf(uint8_t ch, char* fmt, ...)
{
 8000fc0:	b40e      	push	{r1, r2, r3}
 8000fc2:	b580      	push	{r7, lr}
 8000fc4:	b0c7      	sub	sp, #284	; 0x11c
 8000fc6:	af00      	add	r7, sp, #0
 8000fc8:	4602      	mov	r2, r0
 8000fca:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000fce:	f2a3 1311 	subw	r3, r3, #273	; 0x111
 8000fd2:	701a      	strb	r2, [r3, #0]
	va_list args;
	int len;
	uint32_t ret;


	va_start(args, fmt); 									// 가변인자 처리 시작
 8000fd4:	f507 7294 	add.w	r2, r7, #296	; 0x128
 8000fd8:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000fdc:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000fe0:	601a      	str	r2, [r3, #0]
	len = vsnprintf(buf, 256, fmt, args); //-> 버퍼에 해당 내용을 write
 8000fe2:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000fe6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000fea:	f107 0010 	add.w	r0, r7, #16
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8000ff4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ff8:	f008 faee 	bl	80095d8 <vsniprintf>
 8000ffc:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114

	ret = uartWrite(ch, (uint8_t *)buf, len);
 8001000:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001004:	f107 0110 	add.w	r1, r7, #16
 8001008:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800100c:	f2a3 1311 	subw	r3, r3, #273	; 0x111
 8001010:	781b      	ldrb	r3, [r3, #0]
 8001012:	4618      	mov	r0, r3
 8001014:	f7ff ffaa 	bl	8000f6c <uartWrite>
 8001018:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

	va_end(args);

	return ret;
 800101c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
}
 8001020:	4618      	mov	r0, r3
 8001022:	f507 778e 	add.w	r7, r7, #284	; 0x11c
 8001026:	46bd      	mov	sp, r7
 8001028:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800102c:	b003      	add	sp, #12
 800102e:	4770      	bx	lr

08001030 <uartGetBaud>:
uint32_t uartGetBaud(uint8_t ch)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b084      	sub	sp, #16
 8001034:	af00      	add	r7, sp, #0
 8001036:	4603      	mov	r3, r0
 8001038:	71fb      	strb	r3, [r7, #7]
	//bridge mode make, real uart need to know baudrate
	uint32_t ret = 0;
 800103a:	2300      	movs	r3, #0
 800103c:	60fb      	str	r3, [r7, #12]
	switch(ch)
 800103e:	79fb      	ldrb	r3, [r7, #7]
 8001040:	2b00      	cmp	r3, #0
 8001042:	d002      	beq.n	800104a <uartGetBaud+0x1a>
 8001044:	2b01      	cmp	r3, #1
 8001046:	d004      	beq.n	8001052 <uartGetBaud+0x22>
 8001048:	e007      	b.n	800105a <uartGetBaud+0x2a>
	{
		case _DEF_UART1:
			ret = cdcGetBaud();
 800104a:	f007 fcc5 	bl	80089d8 <cdcGetBaud>
 800104e:	60f8      	str	r0, [r7, #12]
			break;
 8001050:	e003      	b.n	800105a <uartGetBaud+0x2a>
		case _DEF_UART2:
		  ret = huart1.Init.BaudRate;
 8001052:	4b04      	ldr	r3, [pc, #16]	; (8001064 <uartGetBaud+0x34>)
 8001054:	685b      	ldr	r3, [r3, #4]
 8001056:	60fb      	str	r3, [r7, #12]
		  break;
 8001058:	bf00      	nop
	}
	return ret;
 800105a:	68fb      	ldr	r3, [r7, #12]
}
 800105c:	4618      	mov	r0, r3
 800105e:	3710      	adds	r7, #16
 8001060:	46bd      	mov	sp, r7
 8001062:	bd80      	pop	{r7, pc}
 8001064:	20000250 	.word	0x20000250

08001068 <HAL_UART_ErrorCallback>:




void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8001068:	b480      	push	{r7}
 800106a:	b083      	sub	sp, #12
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
  if(huart1.Instance == USART1)
  {

  }
}
 8001070:	bf00      	nop
 8001072:	370c      	adds	r7, #12
 8001074:	46bd      	mov	sp, r7
 8001076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107a:	4770      	bx	lr

0800107c <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800107c:	b480      	push	{r7}
 800107e:	b083      	sub	sp, #12
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
    /* received 1 byte data will be sent to our buffer
     * and to receive 1byte again, recall HAL_UART_Receive_IT*/
    HAL_UART_Receive_IT(&huart1, (uint8_t *)&rx_data[_DEF_UART2], 1);
  }
#endif
}
 8001084:	bf00      	nop
 8001086:	370c      	adds	r7, #12
 8001088:	46bd      	mov	sp, r7
 800108a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108e:	4770      	bx	lr

08001090 <HAL_UART_MspInit>:




void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b08a      	sub	sp, #40	; 0x28
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001098:	f107 0314 	add.w	r3, r7, #20
 800109c:	2200      	movs	r2, #0
 800109e:	601a      	str	r2, [r3, #0]
 80010a0:	605a      	str	r2, [r3, #4]
 80010a2:	609a      	str	r2, [r3, #8]
 80010a4:	60da      	str	r2, [r3, #12]
 80010a6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	4a35      	ldr	r2, [pc, #212]	; (8001184 <HAL_UART_MspInit+0xf4>)
 80010ae:	4293      	cmp	r3, r2
 80010b0:	d163      	bne.n	800117a <HAL_UART_MspInit+0xea>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80010b2:	2300      	movs	r3, #0
 80010b4:	613b      	str	r3, [r7, #16]
 80010b6:	4b34      	ldr	r3, [pc, #208]	; (8001188 <HAL_UART_MspInit+0xf8>)
 80010b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010ba:	4a33      	ldr	r2, [pc, #204]	; (8001188 <HAL_UART_MspInit+0xf8>)
 80010bc:	f043 0310 	orr.w	r3, r3, #16
 80010c0:	6453      	str	r3, [r2, #68]	; 0x44
 80010c2:	4b31      	ldr	r3, [pc, #196]	; (8001188 <HAL_UART_MspInit+0xf8>)
 80010c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010c6:	f003 0310 	and.w	r3, r3, #16
 80010ca:	613b      	str	r3, [r7, #16]
 80010cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010ce:	2300      	movs	r3, #0
 80010d0:	60fb      	str	r3, [r7, #12]
 80010d2:	4b2d      	ldr	r3, [pc, #180]	; (8001188 <HAL_UART_MspInit+0xf8>)
 80010d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010d6:	4a2c      	ldr	r2, [pc, #176]	; (8001188 <HAL_UART_MspInit+0xf8>)
 80010d8:	f043 0301 	orr.w	r3, r3, #1
 80010dc:	6313      	str	r3, [r2, #48]	; 0x30
 80010de:	4b2a      	ldr	r3, [pc, #168]	; (8001188 <HAL_UART_MspInit+0xf8>)
 80010e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e2:	f003 0301 	and.w	r3, r3, #1
 80010e6:	60fb      	str	r3, [r7, #12]
 80010e8:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80010ea:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80010ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010f0:	2302      	movs	r3, #2
 80010f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f4:	2300      	movs	r3, #0
 80010f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010f8:	2303      	movs	r3, #3
 80010fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80010fc:	2307      	movs	r3, #7
 80010fe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001100:	f107 0314 	add.w	r3, r7, #20
 8001104:	4619      	mov	r1, r3
 8001106:	4821      	ldr	r0, [pc, #132]	; (800118c <HAL_UART_MspInit+0xfc>)
 8001108:	f000 fef0 	bl	8001eec <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 800110c:	4b20      	ldr	r3, [pc, #128]	; (8001190 <HAL_UART_MspInit+0x100>)
 800110e:	4a21      	ldr	r2, [pc, #132]	; (8001194 <HAL_UART_MspInit+0x104>)
 8001110:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8001112:	4b1f      	ldr	r3, [pc, #124]	; (8001190 <HAL_UART_MspInit+0x100>)
 8001114:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001118:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800111a:	4b1d      	ldr	r3, [pc, #116]	; (8001190 <HAL_UART_MspInit+0x100>)
 800111c:	2200      	movs	r2, #0
 800111e:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001120:	4b1b      	ldr	r3, [pc, #108]	; (8001190 <HAL_UART_MspInit+0x100>)
 8001122:	2200      	movs	r2, #0
 8001124:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001126:	4b1a      	ldr	r3, [pc, #104]	; (8001190 <HAL_UART_MspInit+0x100>)
 8001128:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800112c:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800112e:	4b18      	ldr	r3, [pc, #96]	; (8001190 <HAL_UART_MspInit+0x100>)
 8001130:	2200      	movs	r2, #0
 8001132:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001134:	4b16      	ldr	r3, [pc, #88]	; (8001190 <HAL_UART_MspInit+0x100>)
 8001136:	2200      	movs	r2, #0
 8001138:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 800113a:	4b15      	ldr	r3, [pc, #84]	; (8001190 <HAL_UART_MspInit+0x100>)
 800113c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001140:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001142:	4b13      	ldr	r3, [pc, #76]	; (8001190 <HAL_UART_MspInit+0x100>)
 8001144:	2200      	movs	r2, #0
 8001146:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001148:	4b11      	ldr	r3, [pc, #68]	; (8001190 <HAL_UART_MspInit+0x100>)
 800114a:	2200      	movs	r2, #0
 800114c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800114e:	4810      	ldr	r0, [pc, #64]	; (8001190 <HAL_UART_MspInit+0x100>)
 8001150:	f000 fa6c 	bl	800162c <HAL_DMA_Init>
 8001154:	4603      	mov	r3, r0
 8001156:	2b00      	cmp	r3, #0
 8001158:	d001      	beq.n	800115e <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 800115a:	f7ff fb6d 	bl	8000838 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	4a0b      	ldr	r2, [pc, #44]	; (8001190 <HAL_UART_MspInit+0x100>)
 8001162:	639a      	str	r2, [r3, #56]	; 0x38
 8001164:	4a0a      	ldr	r2, [pc, #40]	; (8001190 <HAL_UART_MspInit+0x100>)
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800116a:	2200      	movs	r2, #0
 800116c:	2100      	movs	r1, #0
 800116e:	2025      	movs	r0, #37	; 0x25
 8001170:	f000 fa17 	bl	80015a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001174:	2025      	movs	r0, #37	; 0x25
 8001176:	f000 fa30 	bl	80015da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800117a:	bf00      	nop
 800117c:	3728      	adds	r7, #40	; 0x28
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}
 8001182:	bf00      	nop
 8001184:	40011000 	.word	0x40011000
 8001188:	40023800 	.word	0x40023800
 800118c:	40020000 	.word	0x40020000
 8001190:	20000294 	.word	0x20000294
 8001194:	40026440 	.word	0x40026440

08001198 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b082      	sub	sp, #8
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]

  if(uartHandle->Instance==USART1)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	4a0c      	ldr	r2, [pc, #48]	; (80011d8 <HAL_UART_MspDeInit+0x40>)
 80011a6:	4293      	cmp	r3, r2
 80011a8:	d112      	bne.n	80011d0 <HAL_UART_MspDeInit+0x38>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 80011aa:	4b0c      	ldr	r3, [pc, #48]	; (80011dc <HAL_UART_MspDeInit+0x44>)
 80011ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011ae:	4a0b      	ldr	r2, [pc, #44]	; (80011dc <HAL_UART_MspDeInit+0x44>)
 80011b0:	f023 0310 	bic.w	r3, r3, #16
 80011b4:	6453      	str	r3, [r2, #68]	; 0x44

    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9|GPIO_PIN_10);
 80011b6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80011ba:	4809      	ldr	r0, [pc, #36]	; (80011e0 <HAL_UART_MspDeInit+0x48>)
 80011bc:	f001 f81a 	bl	80021f4 <HAL_GPIO_DeInit>

    /* USART1 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmarx);
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80011c4:	4618      	mov	r0, r3
 80011c6:	f000 fadf 	bl	8001788 <HAL_DMA_DeInit>

    /* USART1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 80011ca:	2025      	movs	r0, #37	; 0x25
 80011cc:	f000 fa13 	bl	80015f6 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART1_MspDeInit 1 */

  /* USER CODE END USART1_MspDeInit 1 */
  }
}
 80011d0:	bf00      	nop
 80011d2:	3708      	adds	r7, #8
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bd80      	pop	{r7, pc}
 80011d8:	40011000 	.word	0x40011000
 80011dc:	40023800 	.word	0x40023800
 80011e0:	40020000 	.word	0x40020000

080011e4 <usbInit>:


#include "usb.h"

bool usbInit(void)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b086      	sub	sp, #24
 80011e8:	af00      	add	r7, sp, #0
	bool ret = true;
 80011ea:	2301      	movs	r3, #1
 80011ec:	75fb      	strb	r3, [r7, #23]

	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011ee:	463b      	mov	r3, r7
 80011f0:	2200      	movs	r2, #0
 80011f2:	601a      	str	r2, [r3, #0]
 80011f4:	605a      	str	r2, [r3, #4]
 80011f6:	609a      	str	r2, [r3, #8]
 80011f8:	60da      	str	r2, [r3, #12]
 80011fa:	611a      	str	r2, [r3, #16]

	GPIO_InitStruct.Pin = GPIO_PIN_12;
 80011fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001200:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001202:	2311      	movs	r3, #17
 8001204:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001206:	2300      	movs	r3, #0
 8001208:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800120a:	2300      	movs	r3, #0
 800120c:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800120e:	463b      	mov	r3, r7
 8001210:	4619      	mov	r1, r3
 8001212:	4810      	ldr	r0, [pc, #64]	; (8001254 <usbInit+0x70>)
 8001214:	f000 fe6a 	bl	8001eec <HAL_GPIO_Init>

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8001218:	2200      	movs	r2, #0
 800121a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800121e:	480d      	ldr	r0, [pc, #52]	; (8001254 <usbInit+0x70>)
 8001220:	f001 f8cc 	bl	80023bc <HAL_GPIO_WritePin>
	delay(100);
 8001224:	2064      	movs	r0, #100	; 0x64
 8001226:	f7ff fa8b 	bl	8000740 <delay>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 800122a:	2201      	movs	r2, #1
 800122c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001230:	4808      	ldr	r0, [pc, #32]	; (8001254 <usbInit+0x70>)
 8001232:	f001 f8c3 	bl	80023bc <HAL_GPIO_WritePin>

	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001236:	2300      	movs	r3, #0
 8001238:	607b      	str	r3, [r7, #4]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800123a:	463b      	mov	r3, r7
 800123c:	4619      	mov	r1, r3
 800123e:	4805      	ldr	r0, [pc, #20]	; (8001254 <usbInit+0x70>)
 8001240:	f000 fe54 	bl	8001eec <HAL_GPIO_Init>

	MX_USB_DEVICE_Init();
 8001244:	f007 fafc 	bl	8008840 <MX_USB_DEVICE_Init>
	return ret;
 8001248:	7dfb      	ldrb	r3, [r7, #23]
}
 800124a:	4618      	mov	r0, r3
 800124c:	3718      	adds	r7, #24
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}
 8001252:	bf00      	nop
 8001254:	40020000 	.word	0x40020000

08001258 <hwInit>:
 */

#include "hw.h"

void hwInit()
{
 8001258:	b580      	push	{r7, lr}
 800125a:	af00      	add	r7, sp, #0
  bspInit();
 800125c:	f7ff fa38 	bl	80006d0 <bspInit>
  rtcInit();
 8001260:	f7ff fd08 	bl	8000c74 <rtcInit>

  resetInit();
 8001264:	f7ff fcda 	bl	8000c1c <resetInit>
  ledInit();
 8001268:	f7ff fc40 	bl	8000aec <ledInit>
  usbInit();
 800126c:	f7ff ffba 	bl	80011e4 <usbInit>
  uartInit();
 8001270:	f7ff fd78 	bl	8000d64 <uartInit>
}
 8001274:	bf00      	nop
 8001276:	bd80      	pop	{r7, pc}

08001278 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800127c:	4b0e      	ldr	r3, [pc, #56]	; (80012b8 <HAL_Init+0x40>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	4a0d      	ldr	r2, [pc, #52]	; (80012b8 <HAL_Init+0x40>)
 8001282:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001286:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001288:	4b0b      	ldr	r3, [pc, #44]	; (80012b8 <HAL_Init+0x40>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	4a0a      	ldr	r2, [pc, #40]	; (80012b8 <HAL_Init+0x40>)
 800128e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001292:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001294:	4b08      	ldr	r3, [pc, #32]	; (80012b8 <HAL_Init+0x40>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	4a07      	ldr	r2, [pc, #28]	; (80012b8 <HAL_Init+0x40>)
 800129a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800129e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012a0:	2003      	movs	r0, #3
 80012a2:	f000 f973 	bl	800158c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80012a6:	200f      	movs	r0, #15
 80012a8:	f000 f808 	bl	80012bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80012ac:	f7ff faca 	bl	8000844 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012b0:	2300      	movs	r3, #0
}
 80012b2:	4618      	mov	r0, r3
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	bf00      	nop
 80012b8:	40023c00 	.word	0x40023c00

080012bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b082      	sub	sp, #8
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80012c4:	4b12      	ldr	r3, [pc, #72]	; (8001310 <HAL_InitTick+0x54>)
 80012c6:	681a      	ldr	r2, [r3, #0]
 80012c8:	4b12      	ldr	r3, [pc, #72]	; (8001314 <HAL_InitTick+0x58>)
 80012ca:	781b      	ldrb	r3, [r3, #0]
 80012cc:	4619      	mov	r1, r3
 80012ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80012d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80012da:	4618      	mov	r0, r3
 80012dc:	f000 f999 	bl	8001612 <HAL_SYSTICK_Config>
 80012e0:	4603      	mov	r3, r0
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d001      	beq.n	80012ea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80012e6:	2301      	movs	r3, #1
 80012e8:	e00e      	b.n	8001308 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	2b0f      	cmp	r3, #15
 80012ee:	d80a      	bhi.n	8001306 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012f0:	2200      	movs	r2, #0
 80012f2:	6879      	ldr	r1, [r7, #4]
 80012f4:	f04f 30ff 	mov.w	r0, #4294967295
 80012f8:	f000 f953 	bl	80015a2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012fc:	4a06      	ldr	r2, [pc, #24]	; (8001318 <HAL_InitTick+0x5c>)
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001302:	2300      	movs	r3, #0
 8001304:	e000      	b.n	8001308 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001306:	2301      	movs	r3, #1
}
 8001308:	4618      	mov	r0, r3
 800130a:	3708      	adds	r7, #8
 800130c:	46bd      	mov	sp, r7
 800130e:	bd80      	pop	{r7, pc}
 8001310:	20000000 	.word	0x20000000
 8001314:	2000002c 	.word	0x2000002c
 8001318:	20000028 	.word	0x20000028

0800131c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800131c:	b480      	push	{r7}
 800131e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001320:	4b06      	ldr	r3, [pc, #24]	; (800133c <HAL_IncTick+0x20>)
 8001322:	781b      	ldrb	r3, [r3, #0]
 8001324:	461a      	mov	r2, r3
 8001326:	4b06      	ldr	r3, [pc, #24]	; (8001340 <HAL_IncTick+0x24>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	4413      	add	r3, r2
 800132c:	4a04      	ldr	r2, [pc, #16]	; (8001340 <HAL_IncTick+0x24>)
 800132e:	6013      	str	r3, [r2, #0]
}
 8001330:	bf00      	nop
 8001332:	46bd      	mov	sp, r7
 8001334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001338:	4770      	bx	lr
 800133a:	bf00      	nop
 800133c:	2000002c 	.word	0x2000002c
 8001340:	20000418 	.word	0x20000418

08001344 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001344:	b480      	push	{r7}
 8001346:	af00      	add	r7, sp, #0
  return uwTick;
 8001348:	4b03      	ldr	r3, [pc, #12]	; (8001358 <HAL_GetTick+0x14>)
 800134a:	681b      	ldr	r3, [r3, #0]
}
 800134c:	4618      	mov	r0, r3
 800134e:	46bd      	mov	sp, r7
 8001350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001354:	4770      	bx	lr
 8001356:	bf00      	nop
 8001358:	20000418 	.word	0x20000418

0800135c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b084      	sub	sp, #16
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001364:	f7ff ffee 	bl	8001344 <HAL_GetTick>
 8001368:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001374:	d005      	beq.n	8001382 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001376:	4b0a      	ldr	r3, [pc, #40]	; (80013a0 <HAL_Delay+0x44>)
 8001378:	781b      	ldrb	r3, [r3, #0]
 800137a:	461a      	mov	r2, r3
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	4413      	add	r3, r2
 8001380:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001382:	bf00      	nop
 8001384:	f7ff ffde 	bl	8001344 <HAL_GetTick>
 8001388:	4602      	mov	r2, r0
 800138a:	68bb      	ldr	r3, [r7, #8]
 800138c:	1ad3      	subs	r3, r2, r3
 800138e:	68fa      	ldr	r2, [r7, #12]
 8001390:	429a      	cmp	r2, r3
 8001392:	d8f7      	bhi.n	8001384 <HAL_Delay+0x28>
  {
  }
}
 8001394:	bf00      	nop
 8001396:	bf00      	nop
 8001398:	3710      	adds	r7, #16
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}
 800139e:	bf00      	nop
 80013a0:	2000002c 	.word	0x2000002c

080013a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013a4:	b480      	push	{r7}
 80013a6:	b085      	sub	sp, #20
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	f003 0307 	and.w	r3, r3, #7
 80013b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013b4:	4b0c      	ldr	r3, [pc, #48]	; (80013e8 <__NVIC_SetPriorityGrouping+0x44>)
 80013b6:	68db      	ldr	r3, [r3, #12]
 80013b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013ba:	68ba      	ldr	r2, [r7, #8]
 80013bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80013c0:	4013      	ands	r3, r2
 80013c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013c8:	68bb      	ldr	r3, [r7, #8]
 80013ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80013d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013d6:	4a04      	ldr	r2, [pc, #16]	; (80013e8 <__NVIC_SetPriorityGrouping+0x44>)
 80013d8:	68bb      	ldr	r3, [r7, #8]
 80013da:	60d3      	str	r3, [r2, #12]
}
 80013dc:	bf00      	nop
 80013de:	3714      	adds	r7, #20
 80013e0:	46bd      	mov	sp, r7
 80013e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e6:	4770      	bx	lr
 80013e8:	e000ed00 	.word	0xe000ed00

080013ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013ec:	b480      	push	{r7}
 80013ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013f0:	4b04      	ldr	r3, [pc, #16]	; (8001404 <__NVIC_GetPriorityGrouping+0x18>)
 80013f2:	68db      	ldr	r3, [r3, #12]
 80013f4:	0a1b      	lsrs	r3, r3, #8
 80013f6:	f003 0307 	and.w	r3, r3, #7
}
 80013fa:	4618      	mov	r0, r3
 80013fc:	46bd      	mov	sp, r7
 80013fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001402:	4770      	bx	lr
 8001404:	e000ed00 	.word	0xe000ed00

08001408 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001408:	b480      	push	{r7}
 800140a:	b083      	sub	sp, #12
 800140c:	af00      	add	r7, sp, #0
 800140e:	4603      	mov	r3, r0
 8001410:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001412:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001416:	2b00      	cmp	r3, #0
 8001418:	db0b      	blt.n	8001432 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800141a:	79fb      	ldrb	r3, [r7, #7]
 800141c:	f003 021f 	and.w	r2, r3, #31
 8001420:	4907      	ldr	r1, [pc, #28]	; (8001440 <__NVIC_EnableIRQ+0x38>)
 8001422:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001426:	095b      	lsrs	r3, r3, #5
 8001428:	2001      	movs	r0, #1
 800142a:	fa00 f202 	lsl.w	r2, r0, r2
 800142e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001432:	bf00      	nop
 8001434:	370c      	adds	r7, #12
 8001436:	46bd      	mov	sp, r7
 8001438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143c:	4770      	bx	lr
 800143e:	bf00      	nop
 8001440:	e000e100 	.word	0xe000e100

08001444 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001444:	b480      	push	{r7}
 8001446:	b083      	sub	sp, #12
 8001448:	af00      	add	r7, sp, #0
 800144a:	4603      	mov	r3, r0
 800144c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800144e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001452:	2b00      	cmp	r3, #0
 8001454:	db12      	blt.n	800147c <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001456:	79fb      	ldrb	r3, [r7, #7]
 8001458:	f003 021f 	and.w	r2, r3, #31
 800145c:	490a      	ldr	r1, [pc, #40]	; (8001488 <__NVIC_DisableIRQ+0x44>)
 800145e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001462:	095b      	lsrs	r3, r3, #5
 8001464:	2001      	movs	r0, #1
 8001466:	fa00 f202 	lsl.w	r2, r0, r2
 800146a:	3320      	adds	r3, #32
 800146c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001470:	f3bf 8f4f 	dsb	sy
}
 8001474:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001476:	f3bf 8f6f 	isb	sy
}
 800147a:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 800147c:	bf00      	nop
 800147e:	370c      	adds	r7, #12
 8001480:	46bd      	mov	sp, r7
 8001482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001486:	4770      	bx	lr
 8001488:	e000e100 	.word	0xe000e100

0800148c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800148c:	b480      	push	{r7}
 800148e:	b083      	sub	sp, #12
 8001490:	af00      	add	r7, sp, #0
 8001492:	4603      	mov	r3, r0
 8001494:	6039      	str	r1, [r7, #0]
 8001496:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001498:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800149c:	2b00      	cmp	r3, #0
 800149e:	db0a      	blt.n	80014b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014a0:	683b      	ldr	r3, [r7, #0]
 80014a2:	b2da      	uxtb	r2, r3
 80014a4:	490c      	ldr	r1, [pc, #48]	; (80014d8 <__NVIC_SetPriority+0x4c>)
 80014a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014aa:	0112      	lsls	r2, r2, #4
 80014ac:	b2d2      	uxtb	r2, r2
 80014ae:	440b      	add	r3, r1
 80014b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014b4:	e00a      	b.n	80014cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	b2da      	uxtb	r2, r3
 80014ba:	4908      	ldr	r1, [pc, #32]	; (80014dc <__NVIC_SetPriority+0x50>)
 80014bc:	79fb      	ldrb	r3, [r7, #7]
 80014be:	f003 030f 	and.w	r3, r3, #15
 80014c2:	3b04      	subs	r3, #4
 80014c4:	0112      	lsls	r2, r2, #4
 80014c6:	b2d2      	uxtb	r2, r2
 80014c8:	440b      	add	r3, r1
 80014ca:	761a      	strb	r2, [r3, #24]
}
 80014cc:	bf00      	nop
 80014ce:	370c      	adds	r7, #12
 80014d0:	46bd      	mov	sp, r7
 80014d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d6:	4770      	bx	lr
 80014d8:	e000e100 	.word	0xe000e100
 80014dc:	e000ed00 	.word	0xe000ed00

080014e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014e0:	b480      	push	{r7}
 80014e2:	b089      	sub	sp, #36	; 0x24
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	60f8      	str	r0, [r7, #12]
 80014e8:	60b9      	str	r1, [r7, #8]
 80014ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	f003 0307 	and.w	r3, r3, #7
 80014f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014f4:	69fb      	ldr	r3, [r7, #28]
 80014f6:	f1c3 0307 	rsb	r3, r3, #7
 80014fa:	2b04      	cmp	r3, #4
 80014fc:	bf28      	it	cs
 80014fe:	2304      	movcs	r3, #4
 8001500:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001502:	69fb      	ldr	r3, [r7, #28]
 8001504:	3304      	adds	r3, #4
 8001506:	2b06      	cmp	r3, #6
 8001508:	d902      	bls.n	8001510 <NVIC_EncodePriority+0x30>
 800150a:	69fb      	ldr	r3, [r7, #28]
 800150c:	3b03      	subs	r3, #3
 800150e:	e000      	b.n	8001512 <NVIC_EncodePriority+0x32>
 8001510:	2300      	movs	r3, #0
 8001512:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001514:	f04f 32ff 	mov.w	r2, #4294967295
 8001518:	69bb      	ldr	r3, [r7, #24]
 800151a:	fa02 f303 	lsl.w	r3, r2, r3
 800151e:	43da      	mvns	r2, r3
 8001520:	68bb      	ldr	r3, [r7, #8]
 8001522:	401a      	ands	r2, r3
 8001524:	697b      	ldr	r3, [r7, #20]
 8001526:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001528:	f04f 31ff 	mov.w	r1, #4294967295
 800152c:	697b      	ldr	r3, [r7, #20]
 800152e:	fa01 f303 	lsl.w	r3, r1, r3
 8001532:	43d9      	mvns	r1, r3
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001538:	4313      	orrs	r3, r2
         );
}
 800153a:	4618      	mov	r0, r3
 800153c:	3724      	adds	r7, #36	; 0x24
 800153e:	46bd      	mov	sp, r7
 8001540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001544:	4770      	bx	lr
	...

08001548 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b082      	sub	sp, #8
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	3b01      	subs	r3, #1
 8001554:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001558:	d301      	bcc.n	800155e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800155a:	2301      	movs	r3, #1
 800155c:	e00f      	b.n	800157e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800155e:	4a0a      	ldr	r2, [pc, #40]	; (8001588 <SysTick_Config+0x40>)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	3b01      	subs	r3, #1
 8001564:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001566:	210f      	movs	r1, #15
 8001568:	f04f 30ff 	mov.w	r0, #4294967295
 800156c:	f7ff ff8e 	bl	800148c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001570:	4b05      	ldr	r3, [pc, #20]	; (8001588 <SysTick_Config+0x40>)
 8001572:	2200      	movs	r2, #0
 8001574:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001576:	4b04      	ldr	r3, [pc, #16]	; (8001588 <SysTick_Config+0x40>)
 8001578:	2207      	movs	r2, #7
 800157a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800157c:	2300      	movs	r3, #0
}
 800157e:	4618      	mov	r0, r3
 8001580:	3708      	adds	r7, #8
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}
 8001586:	bf00      	nop
 8001588:	e000e010 	.word	0xe000e010

0800158c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b082      	sub	sp, #8
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001594:	6878      	ldr	r0, [r7, #4]
 8001596:	f7ff ff05 	bl	80013a4 <__NVIC_SetPriorityGrouping>
}
 800159a:	bf00      	nop
 800159c:	3708      	adds	r7, #8
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd80      	pop	{r7, pc}

080015a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80015a2:	b580      	push	{r7, lr}
 80015a4:	b086      	sub	sp, #24
 80015a6:	af00      	add	r7, sp, #0
 80015a8:	4603      	mov	r3, r0
 80015aa:	60b9      	str	r1, [r7, #8]
 80015ac:	607a      	str	r2, [r7, #4]
 80015ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80015b0:	2300      	movs	r3, #0
 80015b2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80015b4:	f7ff ff1a 	bl	80013ec <__NVIC_GetPriorityGrouping>
 80015b8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015ba:	687a      	ldr	r2, [r7, #4]
 80015bc:	68b9      	ldr	r1, [r7, #8]
 80015be:	6978      	ldr	r0, [r7, #20]
 80015c0:	f7ff ff8e 	bl	80014e0 <NVIC_EncodePriority>
 80015c4:	4602      	mov	r2, r0
 80015c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015ca:	4611      	mov	r1, r2
 80015cc:	4618      	mov	r0, r3
 80015ce:	f7ff ff5d 	bl	800148c <__NVIC_SetPriority>
}
 80015d2:	bf00      	nop
 80015d4:	3718      	adds	r7, #24
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}

080015da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015da:	b580      	push	{r7, lr}
 80015dc:	b082      	sub	sp, #8
 80015de:	af00      	add	r7, sp, #0
 80015e0:	4603      	mov	r3, r0
 80015e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015e8:	4618      	mov	r0, r3
 80015ea:	f7ff ff0d 	bl	8001408 <__NVIC_EnableIRQ>
}
 80015ee:	bf00      	nop
 80015f0:	3708      	adds	r7, #8
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}

080015f6 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80015f6:	b580      	push	{r7, lr}
 80015f8:	b082      	sub	sp, #8
 80015fa:	af00      	add	r7, sp, #0
 80015fc:	4603      	mov	r3, r0
 80015fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8001600:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001604:	4618      	mov	r0, r3
 8001606:	f7ff ff1d 	bl	8001444 <__NVIC_DisableIRQ>
}
 800160a:	bf00      	nop
 800160c:	3708      	adds	r7, #8
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}

08001612 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001612:	b580      	push	{r7, lr}
 8001614:	b082      	sub	sp, #8
 8001616:	af00      	add	r7, sp, #0
 8001618:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800161a:	6878      	ldr	r0, [r7, #4]
 800161c:	f7ff ff94 	bl	8001548 <SysTick_Config>
 8001620:	4603      	mov	r3, r0
}
 8001622:	4618      	mov	r0, r3
 8001624:	3708      	adds	r7, #8
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}
	...

0800162c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b086      	sub	sp, #24
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001634:	2300      	movs	r3, #0
 8001636:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001638:	f7ff fe84 	bl	8001344 <HAL_GetTick>
 800163c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	2b00      	cmp	r3, #0
 8001642:	d101      	bne.n	8001648 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001644:	2301      	movs	r3, #1
 8001646:	e099      	b.n	800177c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	2202      	movs	r2, #2
 800164c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	2200      	movs	r2, #0
 8001654:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	681a      	ldr	r2, [r3, #0]
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f022 0201 	bic.w	r2, r2, #1
 8001666:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001668:	e00f      	b.n	800168a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800166a:	f7ff fe6b 	bl	8001344 <HAL_GetTick>
 800166e:	4602      	mov	r2, r0
 8001670:	693b      	ldr	r3, [r7, #16]
 8001672:	1ad3      	subs	r3, r2, r3
 8001674:	2b05      	cmp	r3, #5
 8001676:	d908      	bls.n	800168a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	2220      	movs	r2, #32
 800167c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	2203      	movs	r2, #3
 8001682:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001686:	2303      	movs	r3, #3
 8001688:	e078      	b.n	800177c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	f003 0301 	and.w	r3, r3, #1
 8001694:	2b00      	cmp	r3, #0
 8001696:	d1e8      	bne.n	800166a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80016a0:	697a      	ldr	r2, [r7, #20]
 80016a2:	4b38      	ldr	r3, [pc, #224]	; (8001784 <HAL_DMA_Init+0x158>)
 80016a4:	4013      	ands	r3, r2
 80016a6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	685a      	ldr	r2, [r3, #4]
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	689b      	ldr	r3, [r3, #8]
 80016b0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80016b6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	691b      	ldr	r3, [r3, #16]
 80016bc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80016c2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	699b      	ldr	r3, [r3, #24]
 80016c8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80016ce:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	6a1b      	ldr	r3, [r3, #32]
 80016d4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80016d6:	697a      	ldr	r2, [r7, #20]
 80016d8:	4313      	orrs	r3, r2
 80016da:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016e0:	2b04      	cmp	r3, #4
 80016e2:	d107      	bne.n	80016f4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ec:	4313      	orrs	r3, r2
 80016ee:	697a      	ldr	r2, [r7, #20]
 80016f0:	4313      	orrs	r3, r2
 80016f2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	697a      	ldr	r2, [r7, #20]
 80016fa:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	695b      	ldr	r3, [r3, #20]
 8001702:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001704:	697b      	ldr	r3, [r7, #20]
 8001706:	f023 0307 	bic.w	r3, r3, #7
 800170a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001710:	697a      	ldr	r2, [r7, #20]
 8001712:	4313      	orrs	r3, r2
 8001714:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800171a:	2b04      	cmp	r3, #4
 800171c:	d117      	bne.n	800174e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001722:	697a      	ldr	r2, [r7, #20]
 8001724:	4313      	orrs	r3, r2
 8001726:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800172c:	2b00      	cmp	r3, #0
 800172e:	d00e      	beq.n	800174e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001730:	6878      	ldr	r0, [r7, #4]
 8001732:	f000 fb5f 	bl	8001df4 <DMA_CheckFifoParam>
 8001736:	4603      	mov	r3, r0
 8001738:	2b00      	cmp	r3, #0
 800173a:	d008      	beq.n	800174e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	2240      	movs	r2, #64	; 0x40
 8001740:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	2201      	movs	r2, #1
 8001746:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800174a:	2301      	movs	r3, #1
 800174c:	e016      	b.n	800177c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	697a      	ldr	r2, [r7, #20]
 8001754:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001756:	6878      	ldr	r0, [r7, #4]
 8001758:	f000 fb16 	bl	8001d88 <DMA_CalcBaseAndBitshift>
 800175c:	4603      	mov	r3, r0
 800175e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001764:	223f      	movs	r2, #63	; 0x3f
 8001766:	409a      	lsls	r2, r3
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	2200      	movs	r2, #0
 8001770:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	2201      	movs	r2, #1
 8001776:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800177a:	2300      	movs	r3, #0
}
 800177c:	4618      	mov	r0, r3
 800177e:	3718      	adds	r7, #24
 8001780:	46bd      	mov	sp, r7
 8001782:	bd80      	pop	{r7, pc}
 8001784:	f010803f 	.word	0xf010803f

08001788 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b084      	sub	sp, #16
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	2b00      	cmp	r3, #0
 8001794:	d101      	bne.n	800179a <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8001796:	2301      	movs	r3, #1
 8001798:	e050      	b.n	800183c <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80017a0:	b2db      	uxtb	r3, r3
 80017a2:	2b02      	cmp	r3, #2
 80017a4:	d101      	bne.n	80017aa <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 80017a6:	2302      	movs	r3, #2
 80017a8:	e048      	b.n	800183c <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	681a      	ldr	r2, [r3, #0]
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f022 0201 	bic.w	r2, r2, #1
 80017b8:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	2200      	movs	r2, #0
 80017c0:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	2200      	movs	r2, #0
 80017c8:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	2200      	movs	r2, #0
 80017d0:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	2200      	movs	r2, #0
 80017d8:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	2200      	movs	r2, #0
 80017e0:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	2221      	movs	r2, #33	; 0x21
 80017e8:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80017ea:	6878      	ldr	r0, [r7, #4]
 80017ec:	f000 facc 	bl	8001d88 <DMA_CalcBaseAndBitshift>
 80017f0:	4603      	mov	r3, r0
 80017f2:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	2200      	movs	r2, #0
 80017f8:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	2200      	movs	r2, #0
 80017fe:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	2200      	movs	r2, #0
 8001804:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	2200      	movs	r2, #0
 800180a:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	2200      	movs	r2, #0
 8001810:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	2200      	movs	r2, #0
 8001816:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800181c:	223f      	movs	r2, #63	; 0x3f
 800181e:	409a      	lsls	r2, r3
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	2200      	movs	r2, #0
 8001828:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	2200      	movs	r2, #0
 800182e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	2200      	movs	r2, #0
 8001836:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800183a:	2300      	movs	r3, #0
}
 800183c:	4618      	mov	r0, r3
 800183e:	3710      	adds	r7, #16
 8001840:	46bd      	mov	sp, r7
 8001842:	bd80      	pop	{r7, pc}

08001844 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b086      	sub	sp, #24
 8001848:	af00      	add	r7, sp, #0
 800184a:	60f8      	str	r0, [r7, #12]
 800184c:	60b9      	str	r1, [r7, #8]
 800184e:	607a      	str	r2, [r7, #4]
 8001850:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001852:	2300      	movs	r3, #0
 8001854:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800185a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001862:	2b01      	cmp	r3, #1
 8001864:	d101      	bne.n	800186a <HAL_DMA_Start_IT+0x26>
 8001866:	2302      	movs	r3, #2
 8001868:	e040      	b.n	80018ec <HAL_DMA_Start_IT+0xa8>
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	2201      	movs	r2, #1
 800186e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001878:	b2db      	uxtb	r3, r3
 800187a:	2b01      	cmp	r3, #1
 800187c:	d12f      	bne.n	80018de <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	2202      	movs	r2, #2
 8001882:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	2200      	movs	r2, #0
 800188a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	687a      	ldr	r2, [r7, #4]
 8001890:	68b9      	ldr	r1, [r7, #8]
 8001892:	68f8      	ldr	r0, [r7, #12]
 8001894:	f000 fa4a 	bl	8001d2c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800189c:	223f      	movs	r2, #63	; 0x3f
 800189e:	409a      	lsls	r2, r3
 80018a0:	693b      	ldr	r3, [r7, #16]
 80018a2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	681a      	ldr	r2, [r3, #0]
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f042 0216 	orr.w	r2, r2, #22
 80018b2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d007      	beq.n	80018cc <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	681a      	ldr	r2, [r3, #0]
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f042 0208 	orr.w	r2, r2, #8
 80018ca:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	681a      	ldr	r2, [r3, #0]
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f042 0201 	orr.w	r2, r2, #1
 80018da:	601a      	str	r2, [r3, #0]
 80018dc:	e005      	b.n	80018ea <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	2200      	movs	r2, #0
 80018e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80018e6:	2302      	movs	r3, #2
 80018e8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80018ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80018ec:	4618      	mov	r0, r3
 80018ee:	3718      	adds	r7, #24
 80018f0:	46bd      	mov	sp, r7
 80018f2:	bd80      	pop	{r7, pc}

080018f4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b084      	sub	sp, #16
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001900:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001902:	f7ff fd1f 	bl	8001344 <HAL_GetTick>
 8001906:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800190e:	b2db      	uxtb	r3, r3
 8001910:	2b02      	cmp	r3, #2
 8001912:	d008      	beq.n	8001926 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	2280      	movs	r2, #128	; 0x80
 8001918:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	2200      	movs	r2, #0
 800191e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001922:	2301      	movs	r3, #1
 8001924:	e052      	b.n	80019cc <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	681a      	ldr	r2, [r3, #0]
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f022 0216 	bic.w	r2, r2, #22
 8001934:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	695a      	ldr	r2, [r3, #20]
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001944:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800194a:	2b00      	cmp	r3, #0
 800194c:	d103      	bne.n	8001956 <HAL_DMA_Abort+0x62>
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001952:	2b00      	cmp	r3, #0
 8001954:	d007      	beq.n	8001966 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	681a      	ldr	r2, [r3, #0]
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f022 0208 	bic.w	r2, r2, #8
 8001964:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	681a      	ldr	r2, [r3, #0]
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f022 0201 	bic.w	r2, r2, #1
 8001974:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001976:	e013      	b.n	80019a0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001978:	f7ff fce4 	bl	8001344 <HAL_GetTick>
 800197c:	4602      	mov	r2, r0
 800197e:	68bb      	ldr	r3, [r7, #8]
 8001980:	1ad3      	subs	r3, r2, r3
 8001982:	2b05      	cmp	r3, #5
 8001984:	d90c      	bls.n	80019a0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	2220      	movs	r2, #32
 800198a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	2203      	movs	r2, #3
 8001990:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	2200      	movs	r2, #0
 8001998:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800199c:	2303      	movs	r3, #3
 800199e:	e015      	b.n	80019cc <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f003 0301 	and.w	r3, r3, #1
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d1e4      	bne.n	8001978 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019b2:	223f      	movs	r2, #63	; 0x3f
 80019b4:	409a      	lsls	r2, r3
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	2201      	movs	r2, #1
 80019be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	2200      	movs	r2, #0
 80019c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80019ca:	2300      	movs	r3, #0
}
 80019cc:	4618      	mov	r0, r3
 80019ce:	3710      	adds	r7, #16
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bd80      	pop	{r7, pc}

080019d4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80019d4:	b480      	push	{r7}
 80019d6:	b083      	sub	sp, #12
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80019e2:	b2db      	uxtb	r3, r3
 80019e4:	2b02      	cmp	r3, #2
 80019e6:	d004      	beq.n	80019f2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	2280      	movs	r2, #128	; 0x80
 80019ec:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80019ee:	2301      	movs	r3, #1
 80019f0:	e00c      	b.n	8001a0c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	2205      	movs	r2, #5
 80019f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	681a      	ldr	r2, [r3, #0]
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f022 0201 	bic.w	r2, r2, #1
 8001a08:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001a0a:	2300      	movs	r3, #0
}
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	370c      	adds	r7, #12
 8001a10:	46bd      	mov	sp, r7
 8001a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a16:	4770      	bx	lr

08001a18 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b086      	sub	sp, #24
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001a20:	2300      	movs	r3, #0
 8001a22:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001a24:	4b8e      	ldr	r3, [pc, #568]	; (8001c60 <HAL_DMA_IRQHandler+0x248>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	4a8e      	ldr	r2, [pc, #568]	; (8001c64 <HAL_DMA_IRQHandler+0x24c>)
 8001a2a:	fba2 2303 	umull	r2, r3, r2, r3
 8001a2e:	0a9b      	lsrs	r3, r3, #10
 8001a30:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a36:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001a38:	693b      	ldr	r3, [r7, #16]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a42:	2208      	movs	r2, #8
 8001a44:	409a      	lsls	r2, r3
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	4013      	ands	r3, r2
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d01a      	beq.n	8001a84 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f003 0304 	and.w	r3, r3, #4
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d013      	beq.n	8001a84 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	681a      	ldr	r2, [r3, #0]
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f022 0204 	bic.w	r2, r2, #4
 8001a6a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a70:	2208      	movs	r2, #8
 8001a72:	409a      	lsls	r2, r3
 8001a74:	693b      	ldr	r3, [r7, #16]
 8001a76:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a7c:	f043 0201 	orr.w	r2, r3, #1
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a88:	2201      	movs	r2, #1
 8001a8a:	409a      	lsls	r2, r3
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	4013      	ands	r3, r2
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d012      	beq.n	8001aba <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	695b      	ldr	r3, [r3, #20]
 8001a9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d00b      	beq.n	8001aba <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001aa6:	2201      	movs	r2, #1
 8001aa8:	409a      	lsls	r2, r3
 8001aaa:	693b      	ldr	r3, [r7, #16]
 8001aac:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ab2:	f043 0202 	orr.w	r2, r3, #2
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001abe:	2204      	movs	r2, #4
 8001ac0:	409a      	lsls	r2, r3
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	4013      	ands	r3, r2
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d012      	beq.n	8001af0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f003 0302 	and.w	r3, r3, #2
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d00b      	beq.n	8001af0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001adc:	2204      	movs	r2, #4
 8001ade:	409a      	lsls	r2, r3
 8001ae0:	693b      	ldr	r3, [r7, #16]
 8001ae2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ae8:	f043 0204 	orr.w	r2, r3, #4
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001af4:	2210      	movs	r2, #16
 8001af6:	409a      	lsls	r2, r3
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	4013      	ands	r3, r2
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d043      	beq.n	8001b88 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f003 0308 	and.w	r3, r3, #8
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d03c      	beq.n	8001b88 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b12:	2210      	movs	r2, #16
 8001b14:	409a      	lsls	r2, r3
 8001b16:	693b      	ldr	r3, [r7, #16]
 8001b18:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d018      	beq.n	8001b5a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d108      	bne.n	8001b48 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d024      	beq.n	8001b88 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b42:	6878      	ldr	r0, [r7, #4]
 8001b44:	4798      	blx	r3
 8001b46:	e01f      	b.n	8001b88 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d01b      	beq.n	8001b88 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b54:	6878      	ldr	r0, [r7, #4]
 8001b56:	4798      	blx	r3
 8001b58:	e016      	b.n	8001b88 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d107      	bne.n	8001b78 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	681a      	ldr	r2, [r3, #0]
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f022 0208 	bic.w	r2, r2, #8
 8001b76:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d003      	beq.n	8001b88 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b84:	6878      	ldr	r0, [r7, #4]
 8001b86:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b8c:	2220      	movs	r2, #32
 8001b8e:	409a      	lsls	r2, r3
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	4013      	ands	r3, r2
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	f000 808f 	beq.w	8001cb8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f003 0310 	and.w	r3, r3, #16
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	f000 8087 	beq.w	8001cb8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bae:	2220      	movs	r2, #32
 8001bb0:	409a      	lsls	r2, r3
 8001bb2:	693b      	ldr	r3, [r7, #16]
 8001bb4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001bbc:	b2db      	uxtb	r3, r3
 8001bbe:	2b05      	cmp	r3, #5
 8001bc0:	d136      	bne.n	8001c30 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	681a      	ldr	r2, [r3, #0]
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f022 0216 	bic.w	r2, r2, #22
 8001bd0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	695a      	ldr	r2, [r3, #20]
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001be0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d103      	bne.n	8001bf2 <HAL_DMA_IRQHandler+0x1da>
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d007      	beq.n	8001c02 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	681a      	ldr	r2, [r3, #0]
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f022 0208 	bic.w	r2, r2, #8
 8001c00:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c06:	223f      	movs	r2, #63	; 0x3f
 8001c08:	409a      	lsls	r2, r3
 8001c0a:	693b      	ldr	r3, [r7, #16]
 8001c0c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	2201      	movs	r2, #1
 8001c12:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	2200      	movs	r2, #0
 8001c1a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d07e      	beq.n	8001d24 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c2a:	6878      	ldr	r0, [r7, #4]
 8001c2c:	4798      	blx	r3
        }
        return;
 8001c2e:	e079      	b.n	8001d24 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d01d      	beq.n	8001c7a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d10d      	bne.n	8001c68 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d031      	beq.n	8001cb8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c58:	6878      	ldr	r0, [r7, #4]
 8001c5a:	4798      	blx	r3
 8001c5c:	e02c      	b.n	8001cb8 <HAL_DMA_IRQHandler+0x2a0>
 8001c5e:	bf00      	nop
 8001c60:	20000000 	.word	0x20000000
 8001c64:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d023      	beq.n	8001cb8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c74:	6878      	ldr	r0, [r7, #4]
 8001c76:	4798      	blx	r3
 8001c78:	e01e      	b.n	8001cb8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d10f      	bne.n	8001ca8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	681a      	ldr	r2, [r3, #0]
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f022 0210 	bic.w	r2, r2, #16
 8001c96:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	2201      	movs	r2, #1
 8001c9c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d003      	beq.n	8001cb8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cb4:	6878      	ldr	r0, [r7, #4]
 8001cb6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d032      	beq.n	8001d26 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cc4:	f003 0301 	and.w	r3, r3, #1
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d022      	beq.n	8001d12 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	2205      	movs	r2, #5
 8001cd0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	681a      	ldr	r2, [r3, #0]
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f022 0201 	bic.w	r2, r2, #1
 8001ce2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001ce4:	68bb      	ldr	r3, [r7, #8]
 8001ce6:	3301      	adds	r3, #1
 8001ce8:	60bb      	str	r3, [r7, #8]
 8001cea:	697a      	ldr	r2, [r7, #20]
 8001cec:	429a      	cmp	r2, r3
 8001cee:	d307      	bcc.n	8001d00 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f003 0301 	and.w	r3, r3, #1
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d1f2      	bne.n	8001ce4 <HAL_DMA_IRQHandler+0x2cc>
 8001cfe:	e000      	b.n	8001d02 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001d00:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	2201      	movs	r2, #1
 8001d06:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d005      	beq.n	8001d26 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d1e:	6878      	ldr	r0, [r7, #4]
 8001d20:	4798      	blx	r3
 8001d22:	e000      	b.n	8001d26 <HAL_DMA_IRQHandler+0x30e>
        return;
 8001d24:	bf00      	nop
    }
  }
}
 8001d26:	3718      	adds	r7, #24
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	bd80      	pop	{r7, pc}

08001d2c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	b085      	sub	sp, #20
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	60f8      	str	r0, [r7, #12]
 8001d34:	60b9      	str	r1, [r7, #8]
 8001d36:	607a      	str	r2, [r7, #4]
 8001d38:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	681a      	ldr	r2, [r3, #0]
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001d48:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	683a      	ldr	r2, [r7, #0]
 8001d50:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	689b      	ldr	r3, [r3, #8]
 8001d56:	2b40      	cmp	r3, #64	; 0x40
 8001d58:	d108      	bne.n	8001d6c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	687a      	ldr	r2, [r7, #4]
 8001d60:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	68ba      	ldr	r2, [r7, #8]
 8001d68:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001d6a:	e007      	b.n	8001d7c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	68ba      	ldr	r2, [r7, #8]
 8001d72:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	687a      	ldr	r2, [r7, #4]
 8001d7a:	60da      	str	r2, [r3, #12]
}
 8001d7c:	bf00      	nop
 8001d7e:	3714      	adds	r7, #20
 8001d80:	46bd      	mov	sp, r7
 8001d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d86:	4770      	bx	lr

08001d88 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	b085      	sub	sp, #20
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	b2db      	uxtb	r3, r3
 8001d96:	3b10      	subs	r3, #16
 8001d98:	4a14      	ldr	r2, [pc, #80]	; (8001dec <DMA_CalcBaseAndBitshift+0x64>)
 8001d9a:	fba2 2303 	umull	r2, r3, r2, r3
 8001d9e:	091b      	lsrs	r3, r3, #4
 8001da0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001da2:	4a13      	ldr	r2, [pc, #76]	; (8001df0 <DMA_CalcBaseAndBitshift+0x68>)
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	4413      	add	r3, r2
 8001da8:	781b      	ldrb	r3, [r3, #0]
 8001daa:	461a      	mov	r2, r3
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	2b03      	cmp	r3, #3
 8001db4:	d909      	bls.n	8001dca <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001dbe:	f023 0303 	bic.w	r3, r3, #3
 8001dc2:	1d1a      	adds	r2, r3, #4
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	659a      	str	r2, [r3, #88]	; 0x58
 8001dc8:	e007      	b.n	8001dda <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001dd2:	f023 0303 	bic.w	r3, r3, #3
 8001dd6:	687a      	ldr	r2, [r7, #4]
 8001dd8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001dde:	4618      	mov	r0, r3
 8001de0:	3714      	adds	r7, #20
 8001de2:	46bd      	mov	sp, r7
 8001de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de8:	4770      	bx	lr
 8001dea:	bf00      	nop
 8001dec:	aaaaaaab 	.word	0xaaaaaaab
 8001df0:	08009f18 	.word	0x08009f18

08001df4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001df4:	b480      	push	{r7}
 8001df6:	b085      	sub	sp, #20
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e04:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	699b      	ldr	r3, [r3, #24]
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d11f      	bne.n	8001e4e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001e0e:	68bb      	ldr	r3, [r7, #8]
 8001e10:	2b03      	cmp	r3, #3
 8001e12:	d856      	bhi.n	8001ec2 <DMA_CheckFifoParam+0xce>
 8001e14:	a201      	add	r2, pc, #4	; (adr r2, 8001e1c <DMA_CheckFifoParam+0x28>)
 8001e16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e1a:	bf00      	nop
 8001e1c:	08001e2d 	.word	0x08001e2d
 8001e20:	08001e3f 	.word	0x08001e3f
 8001e24:	08001e2d 	.word	0x08001e2d
 8001e28:	08001ec3 	.word	0x08001ec3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e30:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d046      	beq.n	8001ec6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001e38:	2301      	movs	r3, #1
 8001e3a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001e3c:	e043      	b.n	8001ec6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e42:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001e46:	d140      	bne.n	8001eca <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001e48:	2301      	movs	r3, #1
 8001e4a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001e4c:	e03d      	b.n	8001eca <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	699b      	ldr	r3, [r3, #24]
 8001e52:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001e56:	d121      	bne.n	8001e9c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001e58:	68bb      	ldr	r3, [r7, #8]
 8001e5a:	2b03      	cmp	r3, #3
 8001e5c:	d837      	bhi.n	8001ece <DMA_CheckFifoParam+0xda>
 8001e5e:	a201      	add	r2, pc, #4	; (adr r2, 8001e64 <DMA_CheckFifoParam+0x70>)
 8001e60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e64:	08001e75 	.word	0x08001e75
 8001e68:	08001e7b 	.word	0x08001e7b
 8001e6c:	08001e75 	.word	0x08001e75
 8001e70:	08001e8d 	.word	0x08001e8d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001e74:	2301      	movs	r3, #1
 8001e76:	73fb      	strb	r3, [r7, #15]
      break;
 8001e78:	e030      	b.n	8001edc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e7e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d025      	beq.n	8001ed2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001e86:	2301      	movs	r3, #1
 8001e88:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001e8a:	e022      	b.n	8001ed2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e90:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001e94:	d11f      	bne.n	8001ed6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001e96:	2301      	movs	r3, #1
 8001e98:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001e9a:	e01c      	b.n	8001ed6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001e9c:	68bb      	ldr	r3, [r7, #8]
 8001e9e:	2b02      	cmp	r3, #2
 8001ea0:	d903      	bls.n	8001eaa <DMA_CheckFifoParam+0xb6>
 8001ea2:	68bb      	ldr	r3, [r7, #8]
 8001ea4:	2b03      	cmp	r3, #3
 8001ea6:	d003      	beq.n	8001eb0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001ea8:	e018      	b.n	8001edc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001eaa:	2301      	movs	r3, #1
 8001eac:	73fb      	strb	r3, [r7, #15]
      break;
 8001eae:	e015      	b.n	8001edc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eb4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d00e      	beq.n	8001eda <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001ebc:	2301      	movs	r3, #1
 8001ebe:	73fb      	strb	r3, [r7, #15]
      break;
 8001ec0:	e00b      	b.n	8001eda <DMA_CheckFifoParam+0xe6>
      break;
 8001ec2:	bf00      	nop
 8001ec4:	e00a      	b.n	8001edc <DMA_CheckFifoParam+0xe8>
      break;
 8001ec6:	bf00      	nop
 8001ec8:	e008      	b.n	8001edc <DMA_CheckFifoParam+0xe8>
      break;
 8001eca:	bf00      	nop
 8001ecc:	e006      	b.n	8001edc <DMA_CheckFifoParam+0xe8>
      break;
 8001ece:	bf00      	nop
 8001ed0:	e004      	b.n	8001edc <DMA_CheckFifoParam+0xe8>
      break;
 8001ed2:	bf00      	nop
 8001ed4:	e002      	b.n	8001edc <DMA_CheckFifoParam+0xe8>
      break;   
 8001ed6:	bf00      	nop
 8001ed8:	e000      	b.n	8001edc <DMA_CheckFifoParam+0xe8>
      break;
 8001eda:	bf00      	nop
    }
  } 
  
  return status; 
 8001edc:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ede:	4618      	mov	r0, r3
 8001ee0:	3714      	adds	r7, #20
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee8:	4770      	bx	lr
 8001eea:	bf00      	nop

08001eec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001eec:	b480      	push	{r7}
 8001eee:	b089      	sub	sp, #36	; 0x24
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
 8001ef4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001efa:	2300      	movs	r3, #0
 8001efc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001efe:	2300      	movs	r3, #0
 8001f00:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f02:	2300      	movs	r3, #0
 8001f04:	61fb      	str	r3, [r7, #28]
 8001f06:	e159      	b.n	80021bc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001f08:	2201      	movs	r2, #1
 8001f0a:	69fb      	ldr	r3, [r7, #28]
 8001f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f10:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	697a      	ldr	r2, [r7, #20]
 8001f18:	4013      	ands	r3, r2
 8001f1a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001f1c:	693a      	ldr	r2, [r7, #16]
 8001f1e:	697b      	ldr	r3, [r7, #20]
 8001f20:	429a      	cmp	r2, r3
 8001f22:	f040 8148 	bne.w	80021b6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	685b      	ldr	r3, [r3, #4]
 8001f2a:	f003 0303 	and.w	r3, r3, #3
 8001f2e:	2b01      	cmp	r3, #1
 8001f30:	d005      	beq.n	8001f3e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	685b      	ldr	r3, [r3, #4]
 8001f36:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f3a:	2b02      	cmp	r3, #2
 8001f3c:	d130      	bne.n	8001fa0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	689b      	ldr	r3, [r3, #8]
 8001f42:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001f44:	69fb      	ldr	r3, [r7, #28]
 8001f46:	005b      	lsls	r3, r3, #1
 8001f48:	2203      	movs	r2, #3
 8001f4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f4e:	43db      	mvns	r3, r3
 8001f50:	69ba      	ldr	r2, [r7, #24]
 8001f52:	4013      	ands	r3, r2
 8001f54:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	68da      	ldr	r2, [r3, #12]
 8001f5a:	69fb      	ldr	r3, [r7, #28]
 8001f5c:	005b      	lsls	r3, r3, #1
 8001f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f62:	69ba      	ldr	r2, [r7, #24]
 8001f64:	4313      	orrs	r3, r2
 8001f66:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	69ba      	ldr	r2, [r7, #24]
 8001f6c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	685b      	ldr	r3, [r3, #4]
 8001f72:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f74:	2201      	movs	r2, #1
 8001f76:	69fb      	ldr	r3, [r7, #28]
 8001f78:	fa02 f303 	lsl.w	r3, r2, r3
 8001f7c:	43db      	mvns	r3, r3
 8001f7e:	69ba      	ldr	r2, [r7, #24]
 8001f80:	4013      	ands	r3, r2
 8001f82:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	685b      	ldr	r3, [r3, #4]
 8001f88:	091b      	lsrs	r3, r3, #4
 8001f8a:	f003 0201 	and.w	r2, r3, #1
 8001f8e:	69fb      	ldr	r3, [r7, #28]
 8001f90:	fa02 f303 	lsl.w	r3, r2, r3
 8001f94:	69ba      	ldr	r2, [r7, #24]
 8001f96:	4313      	orrs	r3, r2
 8001f98:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	69ba      	ldr	r2, [r7, #24]
 8001f9e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	f003 0303 	and.w	r3, r3, #3
 8001fa8:	2b03      	cmp	r3, #3
 8001faa:	d017      	beq.n	8001fdc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	68db      	ldr	r3, [r3, #12]
 8001fb0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001fb2:	69fb      	ldr	r3, [r7, #28]
 8001fb4:	005b      	lsls	r3, r3, #1
 8001fb6:	2203      	movs	r2, #3
 8001fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fbc:	43db      	mvns	r3, r3
 8001fbe:	69ba      	ldr	r2, [r7, #24]
 8001fc0:	4013      	ands	r3, r2
 8001fc2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	689a      	ldr	r2, [r3, #8]
 8001fc8:	69fb      	ldr	r3, [r7, #28]
 8001fca:	005b      	lsls	r3, r3, #1
 8001fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd0:	69ba      	ldr	r2, [r7, #24]
 8001fd2:	4313      	orrs	r3, r2
 8001fd4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	69ba      	ldr	r2, [r7, #24]
 8001fda:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	685b      	ldr	r3, [r3, #4]
 8001fe0:	f003 0303 	and.w	r3, r3, #3
 8001fe4:	2b02      	cmp	r3, #2
 8001fe6:	d123      	bne.n	8002030 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001fe8:	69fb      	ldr	r3, [r7, #28]
 8001fea:	08da      	lsrs	r2, r3, #3
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	3208      	adds	r2, #8
 8001ff0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ff4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001ff6:	69fb      	ldr	r3, [r7, #28]
 8001ff8:	f003 0307 	and.w	r3, r3, #7
 8001ffc:	009b      	lsls	r3, r3, #2
 8001ffe:	220f      	movs	r2, #15
 8002000:	fa02 f303 	lsl.w	r3, r2, r3
 8002004:	43db      	mvns	r3, r3
 8002006:	69ba      	ldr	r2, [r7, #24]
 8002008:	4013      	ands	r3, r2
 800200a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	691a      	ldr	r2, [r3, #16]
 8002010:	69fb      	ldr	r3, [r7, #28]
 8002012:	f003 0307 	and.w	r3, r3, #7
 8002016:	009b      	lsls	r3, r3, #2
 8002018:	fa02 f303 	lsl.w	r3, r2, r3
 800201c:	69ba      	ldr	r2, [r7, #24]
 800201e:	4313      	orrs	r3, r2
 8002020:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002022:	69fb      	ldr	r3, [r7, #28]
 8002024:	08da      	lsrs	r2, r3, #3
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	3208      	adds	r2, #8
 800202a:	69b9      	ldr	r1, [r7, #24]
 800202c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002036:	69fb      	ldr	r3, [r7, #28]
 8002038:	005b      	lsls	r3, r3, #1
 800203a:	2203      	movs	r2, #3
 800203c:	fa02 f303 	lsl.w	r3, r2, r3
 8002040:	43db      	mvns	r3, r3
 8002042:	69ba      	ldr	r2, [r7, #24]
 8002044:	4013      	ands	r3, r2
 8002046:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	685b      	ldr	r3, [r3, #4]
 800204c:	f003 0203 	and.w	r2, r3, #3
 8002050:	69fb      	ldr	r3, [r7, #28]
 8002052:	005b      	lsls	r3, r3, #1
 8002054:	fa02 f303 	lsl.w	r3, r2, r3
 8002058:	69ba      	ldr	r2, [r7, #24]
 800205a:	4313      	orrs	r3, r2
 800205c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	69ba      	ldr	r2, [r7, #24]
 8002062:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	685b      	ldr	r3, [r3, #4]
 8002068:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800206c:	2b00      	cmp	r3, #0
 800206e:	f000 80a2 	beq.w	80021b6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002072:	2300      	movs	r3, #0
 8002074:	60fb      	str	r3, [r7, #12]
 8002076:	4b57      	ldr	r3, [pc, #348]	; (80021d4 <HAL_GPIO_Init+0x2e8>)
 8002078:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800207a:	4a56      	ldr	r2, [pc, #344]	; (80021d4 <HAL_GPIO_Init+0x2e8>)
 800207c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002080:	6453      	str	r3, [r2, #68]	; 0x44
 8002082:	4b54      	ldr	r3, [pc, #336]	; (80021d4 <HAL_GPIO_Init+0x2e8>)
 8002084:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002086:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800208a:	60fb      	str	r3, [r7, #12]
 800208c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800208e:	4a52      	ldr	r2, [pc, #328]	; (80021d8 <HAL_GPIO_Init+0x2ec>)
 8002090:	69fb      	ldr	r3, [r7, #28]
 8002092:	089b      	lsrs	r3, r3, #2
 8002094:	3302      	adds	r3, #2
 8002096:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800209a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800209c:	69fb      	ldr	r3, [r7, #28]
 800209e:	f003 0303 	and.w	r3, r3, #3
 80020a2:	009b      	lsls	r3, r3, #2
 80020a4:	220f      	movs	r2, #15
 80020a6:	fa02 f303 	lsl.w	r3, r2, r3
 80020aa:	43db      	mvns	r3, r3
 80020ac:	69ba      	ldr	r2, [r7, #24]
 80020ae:	4013      	ands	r3, r2
 80020b0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	4a49      	ldr	r2, [pc, #292]	; (80021dc <HAL_GPIO_Init+0x2f0>)
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d019      	beq.n	80020ee <HAL_GPIO_Init+0x202>
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	4a48      	ldr	r2, [pc, #288]	; (80021e0 <HAL_GPIO_Init+0x2f4>)
 80020be:	4293      	cmp	r3, r2
 80020c0:	d013      	beq.n	80020ea <HAL_GPIO_Init+0x1fe>
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	4a47      	ldr	r2, [pc, #284]	; (80021e4 <HAL_GPIO_Init+0x2f8>)
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d00d      	beq.n	80020e6 <HAL_GPIO_Init+0x1fa>
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	4a46      	ldr	r2, [pc, #280]	; (80021e8 <HAL_GPIO_Init+0x2fc>)
 80020ce:	4293      	cmp	r3, r2
 80020d0:	d007      	beq.n	80020e2 <HAL_GPIO_Init+0x1f6>
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	4a45      	ldr	r2, [pc, #276]	; (80021ec <HAL_GPIO_Init+0x300>)
 80020d6:	4293      	cmp	r3, r2
 80020d8:	d101      	bne.n	80020de <HAL_GPIO_Init+0x1f2>
 80020da:	2304      	movs	r3, #4
 80020dc:	e008      	b.n	80020f0 <HAL_GPIO_Init+0x204>
 80020de:	2307      	movs	r3, #7
 80020e0:	e006      	b.n	80020f0 <HAL_GPIO_Init+0x204>
 80020e2:	2303      	movs	r3, #3
 80020e4:	e004      	b.n	80020f0 <HAL_GPIO_Init+0x204>
 80020e6:	2302      	movs	r3, #2
 80020e8:	e002      	b.n	80020f0 <HAL_GPIO_Init+0x204>
 80020ea:	2301      	movs	r3, #1
 80020ec:	e000      	b.n	80020f0 <HAL_GPIO_Init+0x204>
 80020ee:	2300      	movs	r3, #0
 80020f0:	69fa      	ldr	r2, [r7, #28]
 80020f2:	f002 0203 	and.w	r2, r2, #3
 80020f6:	0092      	lsls	r2, r2, #2
 80020f8:	4093      	lsls	r3, r2
 80020fa:	69ba      	ldr	r2, [r7, #24]
 80020fc:	4313      	orrs	r3, r2
 80020fe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002100:	4935      	ldr	r1, [pc, #212]	; (80021d8 <HAL_GPIO_Init+0x2ec>)
 8002102:	69fb      	ldr	r3, [r7, #28]
 8002104:	089b      	lsrs	r3, r3, #2
 8002106:	3302      	adds	r3, #2
 8002108:	69ba      	ldr	r2, [r7, #24]
 800210a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800210e:	4b38      	ldr	r3, [pc, #224]	; (80021f0 <HAL_GPIO_Init+0x304>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002114:	693b      	ldr	r3, [r7, #16]
 8002116:	43db      	mvns	r3, r3
 8002118:	69ba      	ldr	r2, [r7, #24]
 800211a:	4013      	ands	r3, r2
 800211c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	685b      	ldr	r3, [r3, #4]
 8002122:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002126:	2b00      	cmp	r3, #0
 8002128:	d003      	beq.n	8002132 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800212a:	69ba      	ldr	r2, [r7, #24]
 800212c:	693b      	ldr	r3, [r7, #16]
 800212e:	4313      	orrs	r3, r2
 8002130:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002132:	4a2f      	ldr	r2, [pc, #188]	; (80021f0 <HAL_GPIO_Init+0x304>)
 8002134:	69bb      	ldr	r3, [r7, #24]
 8002136:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002138:	4b2d      	ldr	r3, [pc, #180]	; (80021f0 <HAL_GPIO_Init+0x304>)
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800213e:	693b      	ldr	r3, [r7, #16]
 8002140:	43db      	mvns	r3, r3
 8002142:	69ba      	ldr	r2, [r7, #24]
 8002144:	4013      	ands	r3, r2
 8002146:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002150:	2b00      	cmp	r3, #0
 8002152:	d003      	beq.n	800215c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002154:	69ba      	ldr	r2, [r7, #24]
 8002156:	693b      	ldr	r3, [r7, #16]
 8002158:	4313      	orrs	r3, r2
 800215a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800215c:	4a24      	ldr	r2, [pc, #144]	; (80021f0 <HAL_GPIO_Init+0x304>)
 800215e:	69bb      	ldr	r3, [r7, #24]
 8002160:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002162:	4b23      	ldr	r3, [pc, #140]	; (80021f0 <HAL_GPIO_Init+0x304>)
 8002164:	689b      	ldr	r3, [r3, #8]
 8002166:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002168:	693b      	ldr	r3, [r7, #16]
 800216a:	43db      	mvns	r3, r3
 800216c:	69ba      	ldr	r2, [r7, #24]
 800216e:	4013      	ands	r3, r2
 8002170:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	685b      	ldr	r3, [r3, #4]
 8002176:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800217a:	2b00      	cmp	r3, #0
 800217c:	d003      	beq.n	8002186 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800217e:	69ba      	ldr	r2, [r7, #24]
 8002180:	693b      	ldr	r3, [r7, #16]
 8002182:	4313      	orrs	r3, r2
 8002184:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002186:	4a1a      	ldr	r2, [pc, #104]	; (80021f0 <HAL_GPIO_Init+0x304>)
 8002188:	69bb      	ldr	r3, [r7, #24]
 800218a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800218c:	4b18      	ldr	r3, [pc, #96]	; (80021f0 <HAL_GPIO_Init+0x304>)
 800218e:	68db      	ldr	r3, [r3, #12]
 8002190:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002192:	693b      	ldr	r3, [r7, #16]
 8002194:	43db      	mvns	r3, r3
 8002196:	69ba      	ldr	r2, [r7, #24]
 8002198:	4013      	ands	r3, r2
 800219a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d003      	beq.n	80021b0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80021a8:	69ba      	ldr	r2, [r7, #24]
 80021aa:	693b      	ldr	r3, [r7, #16]
 80021ac:	4313      	orrs	r3, r2
 80021ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80021b0:	4a0f      	ldr	r2, [pc, #60]	; (80021f0 <HAL_GPIO_Init+0x304>)
 80021b2:	69bb      	ldr	r3, [r7, #24]
 80021b4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80021b6:	69fb      	ldr	r3, [r7, #28]
 80021b8:	3301      	adds	r3, #1
 80021ba:	61fb      	str	r3, [r7, #28]
 80021bc:	69fb      	ldr	r3, [r7, #28]
 80021be:	2b0f      	cmp	r3, #15
 80021c0:	f67f aea2 	bls.w	8001f08 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80021c4:	bf00      	nop
 80021c6:	bf00      	nop
 80021c8:	3724      	adds	r7, #36	; 0x24
 80021ca:	46bd      	mov	sp, r7
 80021cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d0:	4770      	bx	lr
 80021d2:	bf00      	nop
 80021d4:	40023800 	.word	0x40023800
 80021d8:	40013800 	.word	0x40013800
 80021dc:	40020000 	.word	0x40020000
 80021e0:	40020400 	.word	0x40020400
 80021e4:	40020800 	.word	0x40020800
 80021e8:	40020c00 	.word	0x40020c00
 80021ec:	40021000 	.word	0x40021000
 80021f0:	40013c00 	.word	0x40013c00

080021f4 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80021f4:	b480      	push	{r7}
 80021f6:	b087      	sub	sp, #28
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
 80021fc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80021fe:	2300      	movs	r3, #0
 8002200:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8002202:	2300      	movs	r3, #0
 8002204:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8002206:	2300      	movs	r3, #0
 8002208:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800220a:	2300      	movs	r3, #0
 800220c:	617b      	str	r3, [r7, #20]
 800220e:	e0bb      	b.n	8002388 <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002210:	2201      	movs	r2, #1
 8002212:	697b      	ldr	r3, [r7, #20]
 8002214:	fa02 f303 	lsl.w	r3, r2, r3
 8002218:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 800221a:	683a      	ldr	r2, [r7, #0]
 800221c:	693b      	ldr	r3, [r7, #16]
 800221e:	4013      	ands	r3, r2
 8002220:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8002222:	68fa      	ldr	r2, [r7, #12]
 8002224:	693b      	ldr	r3, [r7, #16]
 8002226:	429a      	cmp	r2, r3
 8002228:	f040 80ab 	bne.w	8002382 <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 800222c:	4a5c      	ldr	r2, [pc, #368]	; (80023a0 <HAL_GPIO_DeInit+0x1ac>)
 800222e:	697b      	ldr	r3, [r7, #20]
 8002230:	089b      	lsrs	r3, r3, #2
 8002232:	3302      	adds	r3, #2
 8002234:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002238:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 800223a:	697b      	ldr	r3, [r7, #20]
 800223c:	f003 0303 	and.w	r3, r3, #3
 8002240:	009b      	lsls	r3, r3, #2
 8002242:	220f      	movs	r2, #15
 8002244:	fa02 f303 	lsl.w	r3, r2, r3
 8002248:	68ba      	ldr	r2, [r7, #8]
 800224a:	4013      	ands	r3, r2
 800224c:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	4a54      	ldr	r2, [pc, #336]	; (80023a4 <HAL_GPIO_DeInit+0x1b0>)
 8002252:	4293      	cmp	r3, r2
 8002254:	d019      	beq.n	800228a <HAL_GPIO_DeInit+0x96>
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	4a53      	ldr	r2, [pc, #332]	; (80023a8 <HAL_GPIO_DeInit+0x1b4>)
 800225a:	4293      	cmp	r3, r2
 800225c:	d013      	beq.n	8002286 <HAL_GPIO_DeInit+0x92>
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	4a52      	ldr	r2, [pc, #328]	; (80023ac <HAL_GPIO_DeInit+0x1b8>)
 8002262:	4293      	cmp	r3, r2
 8002264:	d00d      	beq.n	8002282 <HAL_GPIO_DeInit+0x8e>
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	4a51      	ldr	r2, [pc, #324]	; (80023b0 <HAL_GPIO_DeInit+0x1bc>)
 800226a:	4293      	cmp	r3, r2
 800226c:	d007      	beq.n	800227e <HAL_GPIO_DeInit+0x8a>
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	4a50      	ldr	r2, [pc, #320]	; (80023b4 <HAL_GPIO_DeInit+0x1c0>)
 8002272:	4293      	cmp	r3, r2
 8002274:	d101      	bne.n	800227a <HAL_GPIO_DeInit+0x86>
 8002276:	2304      	movs	r3, #4
 8002278:	e008      	b.n	800228c <HAL_GPIO_DeInit+0x98>
 800227a:	2307      	movs	r3, #7
 800227c:	e006      	b.n	800228c <HAL_GPIO_DeInit+0x98>
 800227e:	2303      	movs	r3, #3
 8002280:	e004      	b.n	800228c <HAL_GPIO_DeInit+0x98>
 8002282:	2302      	movs	r3, #2
 8002284:	e002      	b.n	800228c <HAL_GPIO_DeInit+0x98>
 8002286:	2301      	movs	r3, #1
 8002288:	e000      	b.n	800228c <HAL_GPIO_DeInit+0x98>
 800228a:	2300      	movs	r3, #0
 800228c:	697a      	ldr	r2, [r7, #20]
 800228e:	f002 0203 	and.w	r2, r2, #3
 8002292:	0092      	lsls	r2, r2, #2
 8002294:	4093      	lsls	r3, r2
 8002296:	68ba      	ldr	r2, [r7, #8]
 8002298:	429a      	cmp	r2, r3
 800229a:	d132      	bne.n	8002302 <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 800229c:	4b46      	ldr	r3, [pc, #280]	; (80023b8 <HAL_GPIO_DeInit+0x1c4>)
 800229e:	681a      	ldr	r2, [r3, #0]
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	43db      	mvns	r3, r3
 80022a4:	4944      	ldr	r1, [pc, #272]	; (80023b8 <HAL_GPIO_DeInit+0x1c4>)
 80022a6:	4013      	ands	r3, r2
 80022a8:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80022aa:	4b43      	ldr	r3, [pc, #268]	; (80023b8 <HAL_GPIO_DeInit+0x1c4>)
 80022ac:	685a      	ldr	r2, [r3, #4]
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	43db      	mvns	r3, r3
 80022b2:	4941      	ldr	r1, [pc, #260]	; (80023b8 <HAL_GPIO_DeInit+0x1c4>)
 80022b4:	4013      	ands	r3, r2
 80022b6:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80022b8:	4b3f      	ldr	r3, [pc, #252]	; (80023b8 <HAL_GPIO_DeInit+0x1c4>)
 80022ba:	689a      	ldr	r2, [r3, #8]
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	43db      	mvns	r3, r3
 80022c0:	493d      	ldr	r1, [pc, #244]	; (80023b8 <HAL_GPIO_DeInit+0x1c4>)
 80022c2:	4013      	ands	r3, r2
 80022c4:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80022c6:	4b3c      	ldr	r3, [pc, #240]	; (80023b8 <HAL_GPIO_DeInit+0x1c4>)
 80022c8:	68da      	ldr	r2, [r3, #12]
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	43db      	mvns	r3, r3
 80022ce:	493a      	ldr	r1, [pc, #232]	; (80023b8 <HAL_GPIO_DeInit+0x1c4>)
 80022d0:	4013      	ands	r3, r2
 80022d2:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 80022d4:	697b      	ldr	r3, [r7, #20]
 80022d6:	f003 0303 	and.w	r3, r3, #3
 80022da:	009b      	lsls	r3, r3, #2
 80022dc:	220f      	movs	r2, #15
 80022de:	fa02 f303 	lsl.w	r3, r2, r3
 80022e2:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 80022e4:	4a2e      	ldr	r2, [pc, #184]	; (80023a0 <HAL_GPIO_DeInit+0x1ac>)
 80022e6:	697b      	ldr	r3, [r7, #20]
 80022e8:	089b      	lsrs	r3, r3, #2
 80022ea:	3302      	adds	r3, #2
 80022ec:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80022f0:	68bb      	ldr	r3, [r7, #8]
 80022f2:	43da      	mvns	r2, r3
 80022f4:	482a      	ldr	r0, [pc, #168]	; (80023a0 <HAL_GPIO_DeInit+0x1ac>)
 80022f6:	697b      	ldr	r3, [r7, #20]
 80022f8:	089b      	lsrs	r3, r3, #2
 80022fa:	400a      	ands	r2, r1
 80022fc:	3302      	adds	r3, #2
 80022fe:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681a      	ldr	r2, [r3, #0]
 8002306:	697b      	ldr	r3, [r7, #20]
 8002308:	005b      	lsls	r3, r3, #1
 800230a:	2103      	movs	r1, #3
 800230c:	fa01 f303 	lsl.w	r3, r1, r3
 8002310:	43db      	mvns	r3, r3
 8002312:	401a      	ands	r2, r3
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002318:	697b      	ldr	r3, [r7, #20]
 800231a:	08da      	lsrs	r2, r3, #3
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	3208      	adds	r2, #8
 8002320:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002324:	697b      	ldr	r3, [r7, #20]
 8002326:	f003 0307 	and.w	r3, r3, #7
 800232a:	009b      	lsls	r3, r3, #2
 800232c:	220f      	movs	r2, #15
 800232e:	fa02 f303 	lsl.w	r3, r2, r3
 8002332:	43db      	mvns	r3, r3
 8002334:	697a      	ldr	r2, [r7, #20]
 8002336:	08d2      	lsrs	r2, r2, #3
 8002338:	4019      	ands	r1, r3
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	3208      	adds	r2, #8
 800233e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	68da      	ldr	r2, [r3, #12]
 8002346:	697b      	ldr	r3, [r7, #20]
 8002348:	005b      	lsls	r3, r3, #1
 800234a:	2103      	movs	r1, #3
 800234c:	fa01 f303 	lsl.w	r3, r1, r3
 8002350:	43db      	mvns	r3, r3
 8002352:	401a      	ands	r2, r3
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	685a      	ldr	r2, [r3, #4]
 800235c:	2101      	movs	r1, #1
 800235e:	697b      	ldr	r3, [r7, #20]
 8002360:	fa01 f303 	lsl.w	r3, r1, r3
 8002364:	43db      	mvns	r3, r3
 8002366:	401a      	ands	r2, r3
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	689a      	ldr	r2, [r3, #8]
 8002370:	697b      	ldr	r3, [r7, #20]
 8002372:	005b      	lsls	r3, r3, #1
 8002374:	2103      	movs	r1, #3
 8002376:	fa01 f303 	lsl.w	r3, r1, r3
 800237a:	43db      	mvns	r3, r3
 800237c:	401a      	ands	r2, r3
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002382:	697b      	ldr	r3, [r7, #20]
 8002384:	3301      	adds	r3, #1
 8002386:	617b      	str	r3, [r7, #20]
 8002388:	697b      	ldr	r3, [r7, #20]
 800238a:	2b0f      	cmp	r3, #15
 800238c:	f67f af40 	bls.w	8002210 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8002390:	bf00      	nop
 8002392:	bf00      	nop
 8002394:	371c      	adds	r7, #28
 8002396:	46bd      	mov	sp, r7
 8002398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239c:	4770      	bx	lr
 800239e:	bf00      	nop
 80023a0:	40013800 	.word	0x40013800
 80023a4:	40020000 	.word	0x40020000
 80023a8:	40020400 	.word	0x40020400
 80023ac:	40020800 	.word	0x40020800
 80023b0:	40020c00 	.word	0x40020c00
 80023b4:	40021000 	.word	0x40021000
 80023b8:	40013c00 	.word	0x40013c00

080023bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80023bc:	b480      	push	{r7}
 80023be:	b083      	sub	sp, #12
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
 80023c4:	460b      	mov	r3, r1
 80023c6:	807b      	strh	r3, [r7, #2]
 80023c8:	4613      	mov	r3, r2
 80023ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80023cc:	787b      	ldrb	r3, [r7, #1]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d003      	beq.n	80023da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80023d2:	887a      	ldrh	r2, [r7, #2]
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80023d8:	e003      	b.n	80023e2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80023da:	887b      	ldrh	r3, [r7, #2]
 80023dc:	041a      	lsls	r2, r3, #16
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	619a      	str	r2, [r3, #24]
}
 80023e2:	bf00      	nop
 80023e4:	370c      	adds	r7, #12
 80023e6:	46bd      	mov	sp, r7
 80023e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ec:	4770      	bx	lr

080023ee <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80023ee:	b480      	push	{r7}
 80023f0:	b085      	sub	sp, #20
 80023f2:	af00      	add	r7, sp, #0
 80023f4:	6078      	str	r0, [r7, #4]
 80023f6:	460b      	mov	r3, r1
 80023f8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	695b      	ldr	r3, [r3, #20]
 80023fe:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002400:	887a      	ldrh	r2, [r7, #2]
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	4013      	ands	r3, r2
 8002406:	041a      	lsls	r2, r3, #16
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	43d9      	mvns	r1, r3
 800240c:	887b      	ldrh	r3, [r7, #2]
 800240e:	400b      	ands	r3, r1
 8002410:	431a      	orrs	r2, r3
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	619a      	str	r2, [r3, #24]
}
 8002416:	bf00      	nop
 8002418:	3714      	adds	r7, #20
 800241a:	46bd      	mov	sp, r7
 800241c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002420:	4770      	bx	lr

08002422 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002422:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002424:	b08f      	sub	sp, #60	; 0x3c
 8002426:	af0a      	add	r7, sp, #40	; 0x28
 8002428:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	2b00      	cmp	r3, #0
 800242e:	d101      	bne.n	8002434 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002430:	2301      	movs	r3, #1
 8002432:	e10f      	b.n	8002654 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8002440:	b2db      	uxtb	r3, r3
 8002442:	2b00      	cmp	r3, #0
 8002444:	d106      	bne.n	8002454 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	2200      	movs	r2, #0
 800244a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800244e:	6878      	ldr	r0, [r7, #4]
 8002450:	f006 fd4e 	bl	8008ef0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2203      	movs	r2, #3
 8002458:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800245c:	68bb      	ldr	r3, [r7, #8]
 800245e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002460:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002464:	2b00      	cmp	r3, #0
 8002466:	d102      	bne.n	800246e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2200      	movs	r2, #0
 800246c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	4618      	mov	r0, r3
 8002474:	f003 faef 	bl	8005a56 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	603b      	str	r3, [r7, #0]
 800247e:	687e      	ldr	r6, [r7, #4]
 8002480:	466d      	mov	r5, sp
 8002482:	f106 0410 	add.w	r4, r6, #16
 8002486:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002488:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800248a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800248c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800248e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002492:	e885 0003 	stmia.w	r5, {r0, r1}
 8002496:	1d33      	adds	r3, r6, #4
 8002498:	cb0e      	ldmia	r3, {r1, r2, r3}
 800249a:	6838      	ldr	r0, [r7, #0]
 800249c:	f003 f9c6 	bl	800582c <USB_CoreInit>
 80024a0:	4603      	mov	r3, r0
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d005      	beq.n	80024b2 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	2202      	movs	r2, #2
 80024aa:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80024ae:	2301      	movs	r3, #1
 80024b0:	e0d0      	b.n	8002654 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	2100      	movs	r1, #0
 80024b8:	4618      	mov	r0, r3
 80024ba:	f003 fadd 	bl	8005a78 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80024be:	2300      	movs	r3, #0
 80024c0:	73fb      	strb	r3, [r7, #15]
 80024c2:	e04a      	b.n	800255a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80024c4:	7bfa      	ldrb	r2, [r7, #15]
 80024c6:	6879      	ldr	r1, [r7, #4]
 80024c8:	4613      	mov	r3, r2
 80024ca:	00db      	lsls	r3, r3, #3
 80024cc:	1a9b      	subs	r3, r3, r2
 80024ce:	009b      	lsls	r3, r3, #2
 80024d0:	440b      	add	r3, r1
 80024d2:	333d      	adds	r3, #61	; 0x3d
 80024d4:	2201      	movs	r2, #1
 80024d6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80024d8:	7bfa      	ldrb	r2, [r7, #15]
 80024da:	6879      	ldr	r1, [r7, #4]
 80024dc:	4613      	mov	r3, r2
 80024de:	00db      	lsls	r3, r3, #3
 80024e0:	1a9b      	subs	r3, r3, r2
 80024e2:	009b      	lsls	r3, r3, #2
 80024e4:	440b      	add	r3, r1
 80024e6:	333c      	adds	r3, #60	; 0x3c
 80024e8:	7bfa      	ldrb	r2, [r7, #15]
 80024ea:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80024ec:	7bfa      	ldrb	r2, [r7, #15]
 80024ee:	7bfb      	ldrb	r3, [r7, #15]
 80024f0:	b298      	uxth	r0, r3
 80024f2:	6879      	ldr	r1, [r7, #4]
 80024f4:	4613      	mov	r3, r2
 80024f6:	00db      	lsls	r3, r3, #3
 80024f8:	1a9b      	subs	r3, r3, r2
 80024fa:	009b      	lsls	r3, r3, #2
 80024fc:	440b      	add	r3, r1
 80024fe:	3342      	adds	r3, #66	; 0x42
 8002500:	4602      	mov	r2, r0
 8002502:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002504:	7bfa      	ldrb	r2, [r7, #15]
 8002506:	6879      	ldr	r1, [r7, #4]
 8002508:	4613      	mov	r3, r2
 800250a:	00db      	lsls	r3, r3, #3
 800250c:	1a9b      	subs	r3, r3, r2
 800250e:	009b      	lsls	r3, r3, #2
 8002510:	440b      	add	r3, r1
 8002512:	333f      	adds	r3, #63	; 0x3f
 8002514:	2200      	movs	r2, #0
 8002516:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002518:	7bfa      	ldrb	r2, [r7, #15]
 800251a:	6879      	ldr	r1, [r7, #4]
 800251c:	4613      	mov	r3, r2
 800251e:	00db      	lsls	r3, r3, #3
 8002520:	1a9b      	subs	r3, r3, r2
 8002522:	009b      	lsls	r3, r3, #2
 8002524:	440b      	add	r3, r1
 8002526:	3344      	adds	r3, #68	; 0x44
 8002528:	2200      	movs	r2, #0
 800252a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800252c:	7bfa      	ldrb	r2, [r7, #15]
 800252e:	6879      	ldr	r1, [r7, #4]
 8002530:	4613      	mov	r3, r2
 8002532:	00db      	lsls	r3, r3, #3
 8002534:	1a9b      	subs	r3, r3, r2
 8002536:	009b      	lsls	r3, r3, #2
 8002538:	440b      	add	r3, r1
 800253a:	3348      	adds	r3, #72	; 0x48
 800253c:	2200      	movs	r2, #0
 800253e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002540:	7bfa      	ldrb	r2, [r7, #15]
 8002542:	6879      	ldr	r1, [r7, #4]
 8002544:	4613      	mov	r3, r2
 8002546:	00db      	lsls	r3, r3, #3
 8002548:	1a9b      	subs	r3, r3, r2
 800254a:	009b      	lsls	r3, r3, #2
 800254c:	440b      	add	r3, r1
 800254e:	3350      	adds	r3, #80	; 0x50
 8002550:	2200      	movs	r2, #0
 8002552:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002554:	7bfb      	ldrb	r3, [r7, #15]
 8002556:	3301      	adds	r3, #1
 8002558:	73fb      	strb	r3, [r7, #15]
 800255a:	7bfa      	ldrb	r2, [r7, #15]
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	685b      	ldr	r3, [r3, #4]
 8002560:	429a      	cmp	r2, r3
 8002562:	d3af      	bcc.n	80024c4 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002564:	2300      	movs	r3, #0
 8002566:	73fb      	strb	r3, [r7, #15]
 8002568:	e044      	b.n	80025f4 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800256a:	7bfa      	ldrb	r2, [r7, #15]
 800256c:	6879      	ldr	r1, [r7, #4]
 800256e:	4613      	mov	r3, r2
 8002570:	00db      	lsls	r3, r3, #3
 8002572:	1a9b      	subs	r3, r3, r2
 8002574:	009b      	lsls	r3, r3, #2
 8002576:	440b      	add	r3, r1
 8002578:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800257c:	2200      	movs	r2, #0
 800257e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002580:	7bfa      	ldrb	r2, [r7, #15]
 8002582:	6879      	ldr	r1, [r7, #4]
 8002584:	4613      	mov	r3, r2
 8002586:	00db      	lsls	r3, r3, #3
 8002588:	1a9b      	subs	r3, r3, r2
 800258a:	009b      	lsls	r3, r3, #2
 800258c:	440b      	add	r3, r1
 800258e:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8002592:	7bfa      	ldrb	r2, [r7, #15]
 8002594:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002596:	7bfa      	ldrb	r2, [r7, #15]
 8002598:	6879      	ldr	r1, [r7, #4]
 800259a:	4613      	mov	r3, r2
 800259c:	00db      	lsls	r3, r3, #3
 800259e:	1a9b      	subs	r3, r3, r2
 80025a0:	009b      	lsls	r3, r3, #2
 80025a2:	440b      	add	r3, r1
 80025a4:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80025a8:	2200      	movs	r2, #0
 80025aa:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80025ac:	7bfa      	ldrb	r2, [r7, #15]
 80025ae:	6879      	ldr	r1, [r7, #4]
 80025b0:	4613      	mov	r3, r2
 80025b2:	00db      	lsls	r3, r3, #3
 80025b4:	1a9b      	subs	r3, r3, r2
 80025b6:	009b      	lsls	r3, r3, #2
 80025b8:	440b      	add	r3, r1
 80025ba:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80025be:	2200      	movs	r2, #0
 80025c0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80025c2:	7bfa      	ldrb	r2, [r7, #15]
 80025c4:	6879      	ldr	r1, [r7, #4]
 80025c6:	4613      	mov	r3, r2
 80025c8:	00db      	lsls	r3, r3, #3
 80025ca:	1a9b      	subs	r3, r3, r2
 80025cc:	009b      	lsls	r3, r3, #2
 80025ce:	440b      	add	r3, r1
 80025d0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80025d4:	2200      	movs	r2, #0
 80025d6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80025d8:	7bfa      	ldrb	r2, [r7, #15]
 80025da:	6879      	ldr	r1, [r7, #4]
 80025dc:	4613      	mov	r3, r2
 80025de:	00db      	lsls	r3, r3, #3
 80025e0:	1a9b      	subs	r3, r3, r2
 80025e2:	009b      	lsls	r3, r3, #2
 80025e4:	440b      	add	r3, r1
 80025e6:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80025ea:	2200      	movs	r2, #0
 80025ec:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80025ee:	7bfb      	ldrb	r3, [r7, #15]
 80025f0:	3301      	adds	r3, #1
 80025f2:	73fb      	strb	r3, [r7, #15]
 80025f4:	7bfa      	ldrb	r2, [r7, #15]
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	685b      	ldr	r3, [r3, #4]
 80025fa:	429a      	cmp	r2, r3
 80025fc:	d3b5      	bcc.n	800256a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	603b      	str	r3, [r7, #0]
 8002604:	687e      	ldr	r6, [r7, #4]
 8002606:	466d      	mov	r5, sp
 8002608:	f106 0410 	add.w	r4, r6, #16
 800260c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800260e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002610:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002612:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002614:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002618:	e885 0003 	stmia.w	r5, {r0, r1}
 800261c:	1d33      	adds	r3, r6, #4
 800261e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002620:	6838      	ldr	r0, [r7, #0]
 8002622:	f003 fa75 	bl	8005b10 <USB_DevInit>
 8002626:	4603      	mov	r3, r0
 8002628:	2b00      	cmp	r3, #0
 800262a:	d005      	beq.n	8002638 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	2202      	movs	r2, #2
 8002630:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002634:	2301      	movs	r3, #1
 8002636:	e00d      	b.n	8002654 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2200      	movs	r2, #0
 800263c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2201      	movs	r2, #1
 8002644:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	4618      	mov	r0, r3
 800264e:	f004 faf1 	bl	8006c34 <USB_DevDisconnect>

  return HAL_OK;
 8002652:	2300      	movs	r3, #0
}
 8002654:	4618      	mov	r0, r3
 8002656:	3714      	adds	r7, #20
 8002658:	46bd      	mov	sp, r7
 800265a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800265c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b084      	sub	sp, #16
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002670:	2b01      	cmp	r3, #1
 8002672:	d101      	bne.n	8002678 <HAL_PCD_Start+0x1c>
 8002674:	2302      	movs	r3, #2
 8002676:	e020      	b.n	80026ba <HAL_PCD_Start+0x5e>
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2201      	movs	r2, #1
 800267c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002684:	2b01      	cmp	r3, #1
 8002686:	d109      	bne.n	800269c <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800268c:	2b01      	cmp	r3, #1
 800268e:	d005      	beq.n	800269c <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002694:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	4618      	mov	r0, r3
 80026a2:	f003 f9c7 	bl	8005a34 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	4618      	mov	r0, r3
 80026ac:	f004 faa1 	bl	8006bf2 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2200      	movs	r2, #0
 80026b4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80026b8:	2300      	movs	r3, #0
}
 80026ba:	4618      	mov	r0, r3
 80026bc:	3710      	adds	r7, #16
 80026be:	46bd      	mov	sp, r7
 80026c0:	bd80      	pop	{r7, pc}

080026c2 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80026c2:	b590      	push	{r4, r7, lr}
 80026c4:	b08d      	sub	sp, #52	; 0x34
 80026c6:	af00      	add	r7, sp, #0
 80026c8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80026d0:	6a3b      	ldr	r3, [r7, #32]
 80026d2:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	4618      	mov	r0, r3
 80026da:	f004 fb5f 	bl	8006d9c <USB_GetMode>
 80026de:	4603      	mov	r3, r0
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	f040 839d 	bne.w	8002e20 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	4618      	mov	r0, r3
 80026ec:	f004 fac3 	bl	8006c76 <USB_ReadInterrupts>
 80026f0:	4603      	mov	r3, r0
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	f000 8393 	beq.w	8002e1e <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	4618      	mov	r0, r3
 80026fe:	f004 faba 	bl	8006c76 <USB_ReadInterrupts>
 8002702:	4603      	mov	r3, r0
 8002704:	f003 0302 	and.w	r3, r3, #2
 8002708:	2b02      	cmp	r3, #2
 800270a:	d107      	bne.n	800271c <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	695a      	ldr	r2, [r3, #20]
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f002 0202 	and.w	r2, r2, #2
 800271a:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	4618      	mov	r0, r3
 8002722:	f004 faa8 	bl	8006c76 <USB_ReadInterrupts>
 8002726:	4603      	mov	r3, r0
 8002728:	f003 0310 	and.w	r3, r3, #16
 800272c:	2b10      	cmp	r3, #16
 800272e:	d161      	bne.n	80027f4 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	699a      	ldr	r2, [r3, #24]
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f022 0210 	bic.w	r2, r2, #16
 800273e:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8002740:	6a3b      	ldr	r3, [r7, #32]
 8002742:	6a1b      	ldr	r3, [r3, #32]
 8002744:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8002746:	69bb      	ldr	r3, [r7, #24]
 8002748:	f003 020f 	and.w	r2, r3, #15
 800274c:	4613      	mov	r3, r2
 800274e:	00db      	lsls	r3, r3, #3
 8002750:	1a9b      	subs	r3, r3, r2
 8002752:	009b      	lsls	r3, r3, #2
 8002754:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002758:	687a      	ldr	r2, [r7, #4]
 800275a:	4413      	add	r3, r2
 800275c:	3304      	adds	r3, #4
 800275e:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002760:	69bb      	ldr	r3, [r7, #24]
 8002762:	0c5b      	lsrs	r3, r3, #17
 8002764:	f003 030f 	and.w	r3, r3, #15
 8002768:	2b02      	cmp	r3, #2
 800276a:	d124      	bne.n	80027b6 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 800276c:	69ba      	ldr	r2, [r7, #24]
 800276e:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002772:	4013      	ands	r3, r2
 8002774:	2b00      	cmp	r3, #0
 8002776:	d035      	beq.n	80027e4 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002778:	697b      	ldr	r3, [r7, #20]
 800277a:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 800277c:	69bb      	ldr	r3, [r7, #24]
 800277e:	091b      	lsrs	r3, r3, #4
 8002780:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002782:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002786:	b29b      	uxth	r3, r3
 8002788:	461a      	mov	r2, r3
 800278a:	6a38      	ldr	r0, [r7, #32]
 800278c:	f004 f8df 	bl	800694e <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002790:	697b      	ldr	r3, [r7, #20]
 8002792:	68da      	ldr	r2, [r3, #12]
 8002794:	69bb      	ldr	r3, [r7, #24]
 8002796:	091b      	lsrs	r3, r3, #4
 8002798:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800279c:	441a      	add	r2, r3
 800279e:	697b      	ldr	r3, [r7, #20]
 80027a0:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80027a2:	697b      	ldr	r3, [r7, #20]
 80027a4:	699a      	ldr	r2, [r3, #24]
 80027a6:	69bb      	ldr	r3, [r7, #24]
 80027a8:	091b      	lsrs	r3, r3, #4
 80027aa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80027ae:	441a      	add	r2, r3
 80027b0:	697b      	ldr	r3, [r7, #20]
 80027b2:	619a      	str	r2, [r3, #24]
 80027b4:	e016      	b.n	80027e4 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 80027b6:	69bb      	ldr	r3, [r7, #24]
 80027b8:	0c5b      	lsrs	r3, r3, #17
 80027ba:	f003 030f 	and.w	r3, r3, #15
 80027be:	2b06      	cmp	r3, #6
 80027c0:	d110      	bne.n	80027e4 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80027c8:	2208      	movs	r2, #8
 80027ca:	4619      	mov	r1, r3
 80027cc:	6a38      	ldr	r0, [r7, #32]
 80027ce:	f004 f8be 	bl	800694e <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80027d2:	697b      	ldr	r3, [r7, #20]
 80027d4:	699a      	ldr	r2, [r3, #24]
 80027d6:	69bb      	ldr	r3, [r7, #24]
 80027d8:	091b      	lsrs	r3, r3, #4
 80027da:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80027de:	441a      	add	r2, r3
 80027e0:	697b      	ldr	r3, [r7, #20]
 80027e2:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	699a      	ldr	r2, [r3, #24]
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f042 0210 	orr.w	r2, r2, #16
 80027f2:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	4618      	mov	r0, r3
 80027fa:	f004 fa3c 	bl	8006c76 <USB_ReadInterrupts>
 80027fe:	4603      	mov	r3, r0
 8002800:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002804:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002808:	d16e      	bne.n	80028e8 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 800280a:	2300      	movs	r3, #0
 800280c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	4618      	mov	r0, r3
 8002814:	f004 fa42 	bl	8006c9c <USB_ReadDevAllOutEpInterrupt>
 8002818:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800281a:	e062      	b.n	80028e2 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 800281c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800281e:	f003 0301 	and.w	r3, r3, #1
 8002822:	2b00      	cmp	r3, #0
 8002824:	d057      	beq.n	80028d6 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800282c:	b2d2      	uxtb	r2, r2
 800282e:	4611      	mov	r1, r2
 8002830:	4618      	mov	r0, r3
 8002832:	f004 fa67 	bl	8006d04 <USB_ReadDevOutEPInterrupt>
 8002836:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002838:	693b      	ldr	r3, [r7, #16]
 800283a:	f003 0301 	and.w	r3, r3, #1
 800283e:	2b00      	cmp	r3, #0
 8002840:	d00c      	beq.n	800285c <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002844:	015a      	lsls	r2, r3, #5
 8002846:	69fb      	ldr	r3, [r7, #28]
 8002848:	4413      	add	r3, r2
 800284a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800284e:	461a      	mov	r2, r3
 8002850:	2301      	movs	r3, #1
 8002852:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002854:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002856:	6878      	ldr	r0, [r7, #4]
 8002858:	f000 fdb0 	bl	80033bc <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800285c:	693b      	ldr	r3, [r7, #16]
 800285e:	f003 0308 	and.w	r3, r3, #8
 8002862:	2b00      	cmp	r3, #0
 8002864:	d00c      	beq.n	8002880 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002868:	015a      	lsls	r2, r3, #5
 800286a:	69fb      	ldr	r3, [r7, #28]
 800286c:	4413      	add	r3, r2
 800286e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002872:	461a      	mov	r2, r3
 8002874:	2308      	movs	r3, #8
 8002876:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002878:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800287a:	6878      	ldr	r0, [r7, #4]
 800287c:	f000 feaa 	bl	80035d4 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002880:	693b      	ldr	r3, [r7, #16]
 8002882:	f003 0310 	and.w	r3, r3, #16
 8002886:	2b00      	cmp	r3, #0
 8002888:	d008      	beq.n	800289c <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800288a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800288c:	015a      	lsls	r2, r3, #5
 800288e:	69fb      	ldr	r3, [r7, #28]
 8002890:	4413      	add	r3, r2
 8002892:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002896:	461a      	mov	r2, r3
 8002898:	2310      	movs	r3, #16
 800289a:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800289c:	693b      	ldr	r3, [r7, #16]
 800289e:	f003 0320 	and.w	r3, r3, #32
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d008      	beq.n	80028b8 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80028a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028a8:	015a      	lsls	r2, r3, #5
 80028aa:	69fb      	ldr	r3, [r7, #28]
 80028ac:	4413      	add	r3, r2
 80028ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80028b2:	461a      	mov	r2, r3
 80028b4:	2320      	movs	r3, #32
 80028b6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80028b8:	693b      	ldr	r3, [r7, #16]
 80028ba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d009      	beq.n	80028d6 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80028c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028c4:	015a      	lsls	r2, r3, #5
 80028c6:	69fb      	ldr	r3, [r7, #28]
 80028c8:	4413      	add	r3, r2
 80028ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80028ce:	461a      	mov	r2, r3
 80028d0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80028d4:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80028d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028d8:	3301      	adds	r3, #1
 80028da:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80028dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028de:	085b      	lsrs	r3, r3, #1
 80028e0:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80028e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d199      	bne.n	800281c <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4618      	mov	r0, r3
 80028ee:	f004 f9c2 	bl	8006c76 <USB_ReadInterrupts>
 80028f2:	4603      	mov	r3, r0
 80028f4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80028f8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80028fc:	f040 80c0 	bne.w	8002a80 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4618      	mov	r0, r3
 8002906:	f004 f9e3 	bl	8006cd0 <USB_ReadDevAllInEpInterrupt>
 800290a:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800290c:	2300      	movs	r3, #0
 800290e:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002910:	e0b2      	b.n	8002a78 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002912:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002914:	f003 0301 	and.w	r3, r3, #1
 8002918:	2b00      	cmp	r3, #0
 800291a:	f000 80a7 	beq.w	8002a6c <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002924:	b2d2      	uxtb	r2, r2
 8002926:	4611      	mov	r1, r2
 8002928:	4618      	mov	r0, r3
 800292a:	f004 fa09 	bl	8006d40 <USB_ReadDevInEPInterrupt>
 800292e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002930:	693b      	ldr	r3, [r7, #16]
 8002932:	f003 0301 	and.w	r3, r3, #1
 8002936:	2b00      	cmp	r3, #0
 8002938:	d057      	beq.n	80029ea <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800293a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800293c:	f003 030f 	and.w	r3, r3, #15
 8002940:	2201      	movs	r2, #1
 8002942:	fa02 f303 	lsl.w	r3, r2, r3
 8002946:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002948:	69fb      	ldr	r3, [r7, #28]
 800294a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800294e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	43db      	mvns	r3, r3
 8002954:	69f9      	ldr	r1, [r7, #28]
 8002956:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800295a:	4013      	ands	r3, r2
 800295c:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800295e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002960:	015a      	lsls	r2, r3, #5
 8002962:	69fb      	ldr	r3, [r7, #28]
 8002964:	4413      	add	r3, r2
 8002966:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800296a:	461a      	mov	r2, r3
 800296c:	2301      	movs	r3, #1
 800296e:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	691b      	ldr	r3, [r3, #16]
 8002974:	2b01      	cmp	r3, #1
 8002976:	d132      	bne.n	80029de <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002978:	6879      	ldr	r1, [r7, #4]
 800297a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800297c:	4613      	mov	r3, r2
 800297e:	00db      	lsls	r3, r3, #3
 8002980:	1a9b      	subs	r3, r3, r2
 8002982:	009b      	lsls	r3, r3, #2
 8002984:	440b      	add	r3, r1
 8002986:	3348      	adds	r3, #72	; 0x48
 8002988:	6819      	ldr	r1, [r3, #0]
 800298a:	6878      	ldr	r0, [r7, #4]
 800298c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800298e:	4613      	mov	r3, r2
 8002990:	00db      	lsls	r3, r3, #3
 8002992:	1a9b      	subs	r3, r3, r2
 8002994:	009b      	lsls	r3, r3, #2
 8002996:	4403      	add	r3, r0
 8002998:	3344      	adds	r3, #68	; 0x44
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	4419      	add	r1, r3
 800299e:	6878      	ldr	r0, [r7, #4]
 80029a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029a2:	4613      	mov	r3, r2
 80029a4:	00db      	lsls	r3, r3, #3
 80029a6:	1a9b      	subs	r3, r3, r2
 80029a8:	009b      	lsls	r3, r3, #2
 80029aa:	4403      	add	r3, r0
 80029ac:	3348      	adds	r3, #72	; 0x48
 80029ae:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80029b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d113      	bne.n	80029de <HAL_PCD_IRQHandler+0x31c>
 80029b6:	6879      	ldr	r1, [r7, #4]
 80029b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029ba:	4613      	mov	r3, r2
 80029bc:	00db      	lsls	r3, r3, #3
 80029be:	1a9b      	subs	r3, r3, r2
 80029c0:	009b      	lsls	r3, r3, #2
 80029c2:	440b      	add	r3, r1
 80029c4:	3350      	adds	r3, #80	; 0x50
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d108      	bne.n	80029de <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6818      	ldr	r0, [r3, #0]
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80029d6:	461a      	mov	r2, r3
 80029d8:	2101      	movs	r1, #1
 80029da:	f004 fa11 	bl	8006e00 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80029de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029e0:	b2db      	uxtb	r3, r3
 80029e2:	4619      	mov	r1, r3
 80029e4:	6878      	ldr	r0, [r7, #4]
 80029e6:	f006 fb04 	bl	8008ff2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80029ea:	693b      	ldr	r3, [r7, #16]
 80029ec:	f003 0308 	and.w	r3, r3, #8
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d008      	beq.n	8002a06 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80029f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029f6:	015a      	lsls	r2, r3, #5
 80029f8:	69fb      	ldr	r3, [r7, #28]
 80029fa:	4413      	add	r3, r2
 80029fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002a00:	461a      	mov	r2, r3
 8002a02:	2308      	movs	r3, #8
 8002a04:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002a06:	693b      	ldr	r3, [r7, #16]
 8002a08:	f003 0310 	and.w	r3, r3, #16
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d008      	beq.n	8002a22 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a12:	015a      	lsls	r2, r3, #5
 8002a14:	69fb      	ldr	r3, [r7, #28]
 8002a16:	4413      	add	r3, r2
 8002a18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002a1c:	461a      	mov	r2, r3
 8002a1e:	2310      	movs	r3, #16
 8002a20:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002a22:	693b      	ldr	r3, [r7, #16]
 8002a24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d008      	beq.n	8002a3e <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a2e:	015a      	lsls	r2, r3, #5
 8002a30:	69fb      	ldr	r3, [r7, #28]
 8002a32:	4413      	add	r3, r2
 8002a34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002a38:	461a      	mov	r2, r3
 8002a3a:	2340      	movs	r3, #64	; 0x40
 8002a3c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002a3e:	693b      	ldr	r3, [r7, #16]
 8002a40:	f003 0302 	and.w	r3, r3, #2
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d008      	beq.n	8002a5a <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a4a:	015a      	lsls	r2, r3, #5
 8002a4c:	69fb      	ldr	r3, [r7, #28]
 8002a4e:	4413      	add	r3, r2
 8002a50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002a54:	461a      	mov	r2, r3
 8002a56:	2302      	movs	r3, #2
 8002a58:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002a5a:	693b      	ldr	r3, [r7, #16]
 8002a5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d003      	beq.n	8002a6c <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002a64:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002a66:	6878      	ldr	r0, [r7, #4]
 8002a68:	f000 fc1b 	bl	80032a2 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a6e:	3301      	adds	r3, #1
 8002a70:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002a72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a74:	085b      	lsrs	r3, r3, #1
 8002a76:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002a78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	f47f af49 	bne.w	8002912 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	4618      	mov	r0, r3
 8002a86:	f004 f8f6 	bl	8006c76 <USB_ReadInterrupts>
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002a90:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002a94:	d122      	bne.n	8002adc <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002a96:	69fb      	ldr	r3, [r7, #28]
 8002a98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a9c:	685b      	ldr	r3, [r3, #4]
 8002a9e:	69fa      	ldr	r2, [r7, #28]
 8002aa0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002aa4:	f023 0301 	bic.w	r3, r3, #1
 8002aa8:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8002ab0:	2b01      	cmp	r3, #1
 8002ab2:	d108      	bne.n	8002ac6 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002abc:	2100      	movs	r1, #0
 8002abe:	6878      	ldr	r0, [r7, #4]
 8002ac0:	f000 fe26 	bl	8003710 <HAL_PCDEx_LPM_Callback>
 8002ac4:	e002      	b.n	8002acc <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002ac6:	6878      	ldr	r0, [r7, #4]
 8002ac8:	f006 fb00 	bl	80090cc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	695a      	ldr	r2, [r3, #20]
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002ada:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	f004 f8c8 	bl	8006c76 <USB_ReadInterrupts>
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002aec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002af0:	d112      	bne.n	8002b18 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002af2:	69fb      	ldr	r3, [r7, #28]
 8002af4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002af8:	689b      	ldr	r3, [r3, #8]
 8002afa:	f003 0301 	and.w	r3, r3, #1
 8002afe:	2b01      	cmp	r3, #1
 8002b00:	d102      	bne.n	8002b08 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002b02:	6878      	ldr	r0, [r7, #4]
 8002b04:	f006 fabc 	bl	8009080 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	695a      	ldr	r2, [r3, #20]
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002b16:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	f004 f8aa 	bl	8006c76 <USB_ReadInterrupts>
 8002b22:	4603      	mov	r3, r0
 8002b24:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b2c:	f040 80c7 	bne.w	8002cbe <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002b30:	69fb      	ldr	r3, [r7, #28]
 8002b32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b36:	685b      	ldr	r3, [r3, #4]
 8002b38:	69fa      	ldr	r2, [r7, #28]
 8002b3a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002b3e:	f023 0301 	bic.w	r3, r3, #1
 8002b42:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	2110      	movs	r1, #16
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	f003 f944 	bl	8005dd8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b50:	2300      	movs	r3, #0
 8002b52:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b54:	e056      	b.n	8002c04 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002b56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b58:	015a      	lsls	r2, r3, #5
 8002b5a:	69fb      	ldr	r3, [r7, #28]
 8002b5c:	4413      	add	r3, r2
 8002b5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002b62:	461a      	mov	r2, r3
 8002b64:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002b68:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002b6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b6c:	015a      	lsls	r2, r3, #5
 8002b6e:	69fb      	ldr	r3, [r7, #28]
 8002b70:	4413      	add	r3, r2
 8002b72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002b7a:	0151      	lsls	r1, r2, #5
 8002b7c:	69fa      	ldr	r2, [r7, #28]
 8002b7e:	440a      	add	r2, r1
 8002b80:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002b84:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002b88:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8002b8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b8c:	015a      	lsls	r2, r3, #5
 8002b8e:	69fb      	ldr	r3, [r7, #28]
 8002b90:	4413      	add	r3, r2
 8002b92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002b9a:	0151      	lsls	r1, r2, #5
 8002b9c:	69fa      	ldr	r2, [r7, #28]
 8002b9e:	440a      	add	r2, r1
 8002ba0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002ba4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002ba8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002baa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bac:	015a      	lsls	r2, r3, #5
 8002bae:	69fb      	ldr	r3, [r7, #28]
 8002bb0:	4413      	add	r3, r2
 8002bb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002bb6:	461a      	mov	r2, r3
 8002bb8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002bbc:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002bbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bc0:	015a      	lsls	r2, r3, #5
 8002bc2:	69fb      	ldr	r3, [r7, #28]
 8002bc4:	4413      	add	r3, r2
 8002bc6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002bce:	0151      	lsls	r1, r2, #5
 8002bd0:	69fa      	ldr	r2, [r7, #28]
 8002bd2:	440a      	add	r2, r1
 8002bd4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002bd8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002bdc:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002bde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002be0:	015a      	lsls	r2, r3, #5
 8002be2:	69fb      	ldr	r3, [r7, #28]
 8002be4:	4413      	add	r3, r2
 8002be6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002bee:	0151      	lsls	r1, r2, #5
 8002bf0:	69fa      	ldr	r2, [r7, #28]
 8002bf2:	440a      	add	r2, r1
 8002bf4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002bf8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002bfc:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002bfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c00:	3301      	adds	r3, #1
 8002c02:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	685b      	ldr	r3, [r3, #4]
 8002c08:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002c0a:	429a      	cmp	r2, r3
 8002c0c:	d3a3      	bcc.n	8002b56 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002c0e:	69fb      	ldr	r3, [r7, #28]
 8002c10:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002c14:	69db      	ldr	r3, [r3, #28]
 8002c16:	69fa      	ldr	r2, [r7, #28]
 8002c18:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002c1c:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002c20:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d016      	beq.n	8002c58 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002c2a:	69fb      	ldr	r3, [r7, #28]
 8002c2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002c30:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002c34:	69fa      	ldr	r2, [r7, #28]
 8002c36:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002c3a:	f043 030b 	orr.w	r3, r3, #11
 8002c3e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002c42:	69fb      	ldr	r3, [r7, #28]
 8002c44:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002c48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c4a:	69fa      	ldr	r2, [r7, #28]
 8002c4c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002c50:	f043 030b 	orr.w	r3, r3, #11
 8002c54:	6453      	str	r3, [r2, #68]	; 0x44
 8002c56:	e015      	b.n	8002c84 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002c58:	69fb      	ldr	r3, [r7, #28]
 8002c5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002c5e:	695b      	ldr	r3, [r3, #20]
 8002c60:	69fa      	ldr	r2, [r7, #28]
 8002c62:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002c66:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002c6a:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8002c6e:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002c70:	69fb      	ldr	r3, [r7, #28]
 8002c72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002c76:	691b      	ldr	r3, [r3, #16]
 8002c78:	69fa      	ldr	r2, [r7, #28]
 8002c7a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002c7e:	f043 030b 	orr.w	r3, r3, #11
 8002c82:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002c84:	69fb      	ldr	r3, [r7, #28]
 8002c86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	69fa      	ldr	r2, [r7, #28]
 8002c8e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002c92:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002c96:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	6818      	ldr	r0, [r3, #0]
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	691b      	ldr	r3, [r3, #16]
 8002ca0:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002ca8:	461a      	mov	r2, r3
 8002caa:	f004 f8a9 	bl	8006e00 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	695a      	ldr	r2, [r3, #20]
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002cbc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	f003 ffd7 	bl	8006c76 <USB_ReadInterrupts>
 8002cc8:	4603      	mov	r3, r0
 8002cca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002cce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002cd2:	d124      	bne.n	8002d1e <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4618      	mov	r0, r3
 8002cda:	f004 f86d 	bl	8006db8 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	f003 f8d5 	bl	8005e92 <USB_GetDevSpeed>
 8002ce8:	4603      	mov	r3, r0
 8002cea:	461a      	mov	r2, r3
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681c      	ldr	r4, [r3, #0]
 8002cf4:	f001 f93c 	bl	8003f70 <HAL_RCC_GetHCLKFreq>
 8002cf8:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002cfe:	b2db      	uxtb	r3, r3
 8002d00:	461a      	mov	r2, r3
 8002d02:	4620      	mov	r0, r4
 8002d04:	f002 fdf4 	bl	80058f0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002d08:	6878      	ldr	r0, [r7, #4]
 8002d0a:	f006 f99a 	bl	8009042 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	695a      	ldr	r2, [r3, #20]
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002d1c:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	4618      	mov	r0, r3
 8002d24:	f003 ffa7 	bl	8006c76 <USB_ReadInterrupts>
 8002d28:	4603      	mov	r3, r0
 8002d2a:	f003 0308 	and.w	r3, r3, #8
 8002d2e:	2b08      	cmp	r3, #8
 8002d30:	d10a      	bne.n	8002d48 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002d32:	6878      	ldr	r0, [r7, #4]
 8002d34:	f006 f977 	bl	8009026 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	695a      	ldr	r2, [r3, #20]
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f002 0208 	and.w	r2, r2, #8
 8002d46:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	f003 ff92 	bl	8006c76 <USB_ReadInterrupts>
 8002d52:	4603      	mov	r3, r0
 8002d54:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d58:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002d5c:	d10f      	bne.n	8002d7e <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8002d5e:	2300      	movs	r3, #0
 8002d60:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d64:	b2db      	uxtb	r3, r3
 8002d66:	4619      	mov	r1, r3
 8002d68:	6878      	ldr	r0, [r7, #4]
 8002d6a:	f006 f9cf 	bl	800910c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	695a      	ldr	r2, [r3, #20]
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002d7c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	4618      	mov	r0, r3
 8002d84:	f003 ff77 	bl	8006c76 <USB_ReadInterrupts>
 8002d88:	4603      	mov	r3, r0
 8002d8a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d8e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002d92:	d10f      	bne.n	8002db4 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8002d94:	2300      	movs	r3, #0
 8002d96:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d9a:	b2db      	uxtb	r3, r3
 8002d9c:	4619      	mov	r1, r3
 8002d9e:	6878      	ldr	r0, [r7, #4]
 8002da0:	f006 f9a2 	bl	80090e8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	695a      	ldr	r2, [r3, #20]
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002db2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4618      	mov	r0, r3
 8002dba:	f003 ff5c 	bl	8006c76 <USB_ReadInterrupts>
 8002dbe:	4603      	mov	r3, r0
 8002dc0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002dc4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002dc8:	d10a      	bne.n	8002de0 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002dca:	6878      	ldr	r0, [r7, #4]
 8002dcc:	f006 f9b0 	bl	8009130 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	695a      	ldr	r2, [r3, #20]
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002dde:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	4618      	mov	r0, r3
 8002de6:	f003 ff46 	bl	8006c76 <USB_ReadInterrupts>
 8002dea:	4603      	mov	r3, r0
 8002dec:	f003 0304 	and.w	r3, r3, #4
 8002df0:	2b04      	cmp	r3, #4
 8002df2:	d115      	bne.n	8002e20 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	685b      	ldr	r3, [r3, #4]
 8002dfa:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002dfc:	69bb      	ldr	r3, [r7, #24]
 8002dfe:	f003 0304 	and.w	r3, r3, #4
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d002      	beq.n	8002e0c <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002e06:	6878      	ldr	r0, [r7, #4]
 8002e08:	f006 f9a0 	bl	800914c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	6859      	ldr	r1, [r3, #4]
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	69ba      	ldr	r2, [r7, #24]
 8002e18:	430a      	orrs	r2, r1
 8002e1a:	605a      	str	r2, [r3, #4]
 8002e1c:	e000      	b.n	8002e20 <HAL_PCD_IRQHandler+0x75e>
      return;
 8002e1e:	bf00      	nop
    }
  }
}
 8002e20:	3734      	adds	r7, #52	; 0x34
 8002e22:	46bd      	mov	sp, r7
 8002e24:	bd90      	pop	{r4, r7, pc}

08002e26 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002e26:	b580      	push	{r7, lr}
 8002e28:	b082      	sub	sp, #8
 8002e2a:	af00      	add	r7, sp, #0
 8002e2c:	6078      	str	r0, [r7, #4]
 8002e2e:	460b      	mov	r3, r1
 8002e30:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002e38:	2b01      	cmp	r3, #1
 8002e3a:	d101      	bne.n	8002e40 <HAL_PCD_SetAddress+0x1a>
 8002e3c:	2302      	movs	r3, #2
 8002e3e:	e013      	b.n	8002e68 <HAL_PCD_SetAddress+0x42>
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2201      	movs	r2, #1
 8002e44:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	78fa      	ldrb	r2, [r7, #3]
 8002e4c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	78fa      	ldrb	r2, [r7, #3]
 8002e56:	4611      	mov	r1, r2
 8002e58:	4618      	mov	r0, r3
 8002e5a:	f003 fea4 	bl	8006ba6 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	2200      	movs	r2, #0
 8002e62:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002e66:	2300      	movs	r3, #0
}
 8002e68:	4618      	mov	r0, r3
 8002e6a:	3708      	adds	r7, #8
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	bd80      	pop	{r7, pc}

08002e70 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b084      	sub	sp, #16
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
 8002e78:	4608      	mov	r0, r1
 8002e7a:	4611      	mov	r1, r2
 8002e7c:	461a      	mov	r2, r3
 8002e7e:	4603      	mov	r3, r0
 8002e80:	70fb      	strb	r3, [r7, #3]
 8002e82:	460b      	mov	r3, r1
 8002e84:	803b      	strh	r3, [r7, #0]
 8002e86:	4613      	mov	r3, r2
 8002e88:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002e8e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	da0f      	bge.n	8002eb6 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e96:	78fb      	ldrb	r3, [r7, #3]
 8002e98:	f003 020f 	and.w	r2, r3, #15
 8002e9c:	4613      	mov	r3, r2
 8002e9e:	00db      	lsls	r3, r3, #3
 8002ea0:	1a9b      	subs	r3, r3, r2
 8002ea2:	009b      	lsls	r3, r3, #2
 8002ea4:	3338      	adds	r3, #56	; 0x38
 8002ea6:	687a      	ldr	r2, [r7, #4]
 8002ea8:	4413      	add	r3, r2
 8002eaa:	3304      	adds	r3, #4
 8002eac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	2201      	movs	r2, #1
 8002eb2:	705a      	strb	r2, [r3, #1]
 8002eb4:	e00f      	b.n	8002ed6 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002eb6:	78fb      	ldrb	r3, [r7, #3]
 8002eb8:	f003 020f 	and.w	r2, r3, #15
 8002ebc:	4613      	mov	r3, r2
 8002ebe:	00db      	lsls	r3, r3, #3
 8002ec0:	1a9b      	subs	r3, r3, r2
 8002ec2:	009b      	lsls	r3, r3, #2
 8002ec4:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002ec8:	687a      	ldr	r2, [r7, #4]
 8002eca:	4413      	add	r3, r2
 8002ecc:	3304      	adds	r3, #4
 8002ece:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002ed6:	78fb      	ldrb	r3, [r7, #3]
 8002ed8:	f003 030f 	and.w	r3, r3, #15
 8002edc:	b2da      	uxtb	r2, r3
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002ee2:	883a      	ldrh	r2, [r7, #0]
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	78ba      	ldrb	r2, [r7, #2]
 8002eec:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	785b      	ldrb	r3, [r3, #1]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d004      	beq.n	8002f00 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	781b      	ldrb	r3, [r3, #0]
 8002efa:	b29a      	uxth	r2, r3
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002f00:	78bb      	ldrb	r3, [r7, #2]
 8002f02:	2b02      	cmp	r3, #2
 8002f04:	d102      	bne.n	8002f0c <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	2200      	movs	r2, #0
 8002f0a:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002f12:	2b01      	cmp	r3, #1
 8002f14:	d101      	bne.n	8002f1a <HAL_PCD_EP_Open+0xaa>
 8002f16:	2302      	movs	r3, #2
 8002f18:	e00e      	b.n	8002f38 <HAL_PCD_EP_Open+0xc8>
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	2201      	movs	r2, #1
 8002f1e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	68f9      	ldr	r1, [r7, #12]
 8002f28:	4618      	mov	r0, r3
 8002f2a:	f002 ffd7 	bl	8005edc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	2200      	movs	r2, #0
 8002f32:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8002f36:	7afb      	ldrb	r3, [r7, #11]
}
 8002f38:	4618      	mov	r0, r3
 8002f3a:	3710      	adds	r7, #16
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	bd80      	pop	{r7, pc}

08002f40 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b084      	sub	sp, #16
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
 8002f48:	460b      	mov	r3, r1
 8002f4a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002f4c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	da0f      	bge.n	8002f74 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002f54:	78fb      	ldrb	r3, [r7, #3]
 8002f56:	f003 020f 	and.w	r2, r3, #15
 8002f5a:	4613      	mov	r3, r2
 8002f5c:	00db      	lsls	r3, r3, #3
 8002f5e:	1a9b      	subs	r3, r3, r2
 8002f60:	009b      	lsls	r3, r3, #2
 8002f62:	3338      	adds	r3, #56	; 0x38
 8002f64:	687a      	ldr	r2, [r7, #4]
 8002f66:	4413      	add	r3, r2
 8002f68:	3304      	adds	r3, #4
 8002f6a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	2201      	movs	r2, #1
 8002f70:	705a      	strb	r2, [r3, #1]
 8002f72:	e00f      	b.n	8002f94 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002f74:	78fb      	ldrb	r3, [r7, #3]
 8002f76:	f003 020f 	and.w	r2, r3, #15
 8002f7a:	4613      	mov	r3, r2
 8002f7c:	00db      	lsls	r3, r3, #3
 8002f7e:	1a9b      	subs	r3, r3, r2
 8002f80:	009b      	lsls	r3, r3, #2
 8002f82:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002f86:	687a      	ldr	r2, [r7, #4]
 8002f88:	4413      	add	r3, r2
 8002f8a:	3304      	adds	r3, #4
 8002f8c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	2200      	movs	r2, #0
 8002f92:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002f94:	78fb      	ldrb	r3, [r7, #3]
 8002f96:	f003 030f 	and.w	r3, r3, #15
 8002f9a:	b2da      	uxtb	r2, r3
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002fa6:	2b01      	cmp	r3, #1
 8002fa8:	d101      	bne.n	8002fae <HAL_PCD_EP_Close+0x6e>
 8002faa:	2302      	movs	r3, #2
 8002fac:	e00e      	b.n	8002fcc <HAL_PCD_EP_Close+0x8c>
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	2201      	movs	r2, #1
 8002fb2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	68f9      	ldr	r1, [r7, #12]
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	f003 f815 	bl	8005fec <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8002fca:	2300      	movs	r3, #0
}
 8002fcc:	4618      	mov	r0, r3
 8002fce:	3710      	adds	r7, #16
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	bd80      	pop	{r7, pc}

08002fd4 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b086      	sub	sp, #24
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	60f8      	str	r0, [r7, #12]
 8002fdc:	607a      	str	r2, [r7, #4]
 8002fde:	603b      	str	r3, [r7, #0]
 8002fe0:	460b      	mov	r3, r1
 8002fe2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002fe4:	7afb      	ldrb	r3, [r7, #11]
 8002fe6:	f003 020f 	and.w	r2, r3, #15
 8002fea:	4613      	mov	r3, r2
 8002fec:	00db      	lsls	r3, r3, #3
 8002fee:	1a9b      	subs	r3, r3, r2
 8002ff0:	009b      	lsls	r3, r3, #2
 8002ff2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002ff6:	68fa      	ldr	r2, [r7, #12]
 8002ff8:	4413      	add	r3, r2
 8002ffa:	3304      	adds	r3, #4
 8002ffc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002ffe:	697b      	ldr	r3, [r7, #20]
 8003000:	687a      	ldr	r2, [r7, #4]
 8003002:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003004:	697b      	ldr	r3, [r7, #20]
 8003006:	683a      	ldr	r2, [r7, #0]
 8003008:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800300a:	697b      	ldr	r3, [r7, #20]
 800300c:	2200      	movs	r2, #0
 800300e:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8003010:	697b      	ldr	r3, [r7, #20]
 8003012:	2200      	movs	r2, #0
 8003014:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003016:	7afb      	ldrb	r3, [r7, #11]
 8003018:	f003 030f 	and.w	r3, r3, #15
 800301c:	b2da      	uxtb	r2, r3
 800301e:	697b      	ldr	r3, [r7, #20]
 8003020:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	691b      	ldr	r3, [r3, #16]
 8003026:	2b01      	cmp	r3, #1
 8003028:	d102      	bne.n	8003030 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800302a:	687a      	ldr	r2, [r7, #4]
 800302c:	697b      	ldr	r3, [r7, #20]
 800302e:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003030:	7afb      	ldrb	r3, [r7, #11]
 8003032:	f003 030f 	and.w	r3, r3, #15
 8003036:	2b00      	cmp	r3, #0
 8003038:	d109      	bne.n	800304e <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	6818      	ldr	r0, [r3, #0]
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	691b      	ldr	r3, [r3, #16]
 8003042:	b2db      	uxtb	r3, r3
 8003044:	461a      	mov	r2, r3
 8003046:	6979      	ldr	r1, [r7, #20]
 8003048:	f003 faf0 	bl	800662c <USB_EP0StartXfer>
 800304c:	e008      	b.n	8003060 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	6818      	ldr	r0, [r3, #0]
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	691b      	ldr	r3, [r3, #16]
 8003056:	b2db      	uxtb	r3, r3
 8003058:	461a      	mov	r2, r3
 800305a:	6979      	ldr	r1, [r7, #20]
 800305c:	f003 f8a2 	bl	80061a4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003060:	2300      	movs	r3, #0
}
 8003062:	4618      	mov	r0, r3
 8003064:	3718      	adds	r7, #24
 8003066:	46bd      	mov	sp, r7
 8003068:	bd80      	pop	{r7, pc}

0800306a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800306a:	b480      	push	{r7}
 800306c:	b083      	sub	sp, #12
 800306e:	af00      	add	r7, sp, #0
 8003070:	6078      	str	r0, [r7, #4]
 8003072:	460b      	mov	r3, r1
 8003074:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003076:	78fb      	ldrb	r3, [r7, #3]
 8003078:	f003 020f 	and.w	r2, r3, #15
 800307c:	6879      	ldr	r1, [r7, #4]
 800307e:	4613      	mov	r3, r2
 8003080:	00db      	lsls	r3, r3, #3
 8003082:	1a9b      	subs	r3, r3, r2
 8003084:	009b      	lsls	r3, r3, #2
 8003086:	440b      	add	r3, r1
 8003088:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800308c:	681b      	ldr	r3, [r3, #0]
}
 800308e:	4618      	mov	r0, r3
 8003090:	370c      	adds	r7, #12
 8003092:	46bd      	mov	sp, r7
 8003094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003098:	4770      	bx	lr

0800309a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800309a:	b580      	push	{r7, lr}
 800309c:	b086      	sub	sp, #24
 800309e:	af00      	add	r7, sp, #0
 80030a0:	60f8      	str	r0, [r7, #12]
 80030a2:	607a      	str	r2, [r7, #4]
 80030a4:	603b      	str	r3, [r7, #0]
 80030a6:	460b      	mov	r3, r1
 80030a8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80030aa:	7afb      	ldrb	r3, [r7, #11]
 80030ac:	f003 020f 	and.w	r2, r3, #15
 80030b0:	4613      	mov	r3, r2
 80030b2:	00db      	lsls	r3, r3, #3
 80030b4:	1a9b      	subs	r3, r3, r2
 80030b6:	009b      	lsls	r3, r3, #2
 80030b8:	3338      	adds	r3, #56	; 0x38
 80030ba:	68fa      	ldr	r2, [r7, #12]
 80030bc:	4413      	add	r3, r2
 80030be:	3304      	adds	r3, #4
 80030c0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80030c2:	697b      	ldr	r3, [r7, #20]
 80030c4:	687a      	ldr	r2, [r7, #4]
 80030c6:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80030c8:	697b      	ldr	r3, [r7, #20]
 80030ca:	683a      	ldr	r2, [r7, #0]
 80030cc:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80030ce:	697b      	ldr	r3, [r7, #20]
 80030d0:	2200      	movs	r2, #0
 80030d2:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 80030d4:	697b      	ldr	r3, [r7, #20]
 80030d6:	2201      	movs	r2, #1
 80030d8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80030da:	7afb      	ldrb	r3, [r7, #11]
 80030dc:	f003 030f 	and.w	r3, r3, #15
 80030e0:	b2da      	uxtb	r2, r3
 80030e2:	697b      	ldr	r3, [r7, #20]
 80030e4:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	691b      	ldr	r3, [r3, #16]
 80030ea:	2b01      	cmp	r3, #1
 80030ec:	d102      	bne.n	80030f4 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80030ee:	687a      	ldr	r2, [r7, #4]
 80030f0:	697b      	ldr	r3, [r7, #20]
 80030f2:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80030f4:	7afb      	ldrb	r3, [r7, #11]
 80030f6:	f003 030f 	and.w	r3, r3, #15
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d109      	bne.n	8003112 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	6818      	ldr	r0, [r3, #0]
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	691b      	ldr	r3, [r3, #16]
 8003106:	b2db      	uxtb	r3, r3
 8003108:	461a      	mov	r2, r3
 800310a:	6979      	ldr	r1, [r7, #20]
 800310c:	f003 fa8e 	bl	800662c <USB_EP0StartXfer>
 8003110:	e008      	b.n	8003124 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	6818      	ldr	r0, [r3, #0]
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	691b      	ldr	r3, [r3, #16]
 800311a:	b2db      	uxtb	r3, r3
 800311c:	461a      	mov	r2, r3
 800311e:	6979      	ldr	r1, [r7, #20]
 8003120:	f003 f840 	bl	80061a4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003124:	2300      	movs	r3, #0
}
 8003126:	4618      	mov	r0, r3
 8003128:	3718      	adds	r7, #24
 800312a:	46bd      	mov	sp, r7
 800312c:	bd80      	pop	{r7, pc}

0800312e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800312e:	b580      	push	{r7, lr}
 8003130:	b084      	sub	sp, #16
 8003132:	af00      	add	r7, sp, #0
 8003134:	6078      	str	r0, [r7, #4]
 8003136:	460b      	mov	r3, r1
 8003138:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800313a:	78fb      	ldrb	r3, [r7, #3]
 800313c:	f003 020f 	and.w	r2, r3, #15
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	685b      	ldr	r3, [r3, #4]
 8003144:	429a      	cmp	r2, r3
 8003146:	d901      	bls.n	800314c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003148:	2301      	movs	r3, #1
 800314a:	e050      	b.n	80031ee <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800314c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003150:	2b00      	cmp	r3, #0
 8003152:	da0f      	bge.n	8003174 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003154:	78fb      	ldrb	r3, [r7, #3]
 8003156:	f003 020f 	and.w	r2, r3, #15
 800315a:	4613      	mov	r3, r2
 800315c:	00db      	lsls	r3, r3, #3
 800315e:	1a9b      	subs	r3, r3, r2
 8003160:	009b      	lsls	r3, r3, #2
 8003162:	3338      	adds	r3, #56	; 0x38
 8003164:	687a      	ldr	r2, [r7, #4]
 8003166:	4413      	add	r3, r2
 8003168:	3304      	adds	r3, #4
 800316a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	2201      	movs	r2, #1
 8003170:	705a      	strb	r2, [r3, #1]
 8003172:	e00d      	b.n	8003190 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003174:	78fa      	ldrb	r2, [r7, #3]
 8003176:	4613      	mov	r3, r2
 8003178:	00db      	lsls	r3, r3, #3
 800317a:	1a9b      	subs	r3, r3, r2
 800317c:	009b      	lsls	r3, r3, #2
 800317e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003182:	687a      	ldr	r2, [r7, #4]
 8003184:	4413      	add	r3, r2
 8003186:	3304      	adds	r3, #4
 8003188:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	2200      	movs	r2, #0
 800318e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	2201      	movs	r2, #1
 8003194:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003196:	78fb      	ldrb	r3, [r7, #3]
 8003198:	f003 030f 	and.w	r3, r3, #15
 800319c:	b2da      	uxtb	r2, r3
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80031a8:	2b01      	cmp	r3, #1
 80031aa:	d101      	bne.n	80031b0 <HAL_PCD_EP_SetStall+0x82>
 80031ac:	2302      	movs	r3, #2
 80031ae:	e01e      	b.n	80031ee <HAL_PCD_EP_SetStall+0xc0>
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2201      	movs	r2, #1
 80031b4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	68f9      	ldr	r1, [r7, #12]
 80031be:	4618      	mov	r0, r3
 80031c0:	f003 fc1d 	bl	80069fe <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80031c4:	78fb      	ldrb	r3, [r7, #3]
 80031c6:	f003 030f 	and.w	r3, r3, #15
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d10a      	bne.n	80031e4 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6818      	ldr	r0, [r3, #0]
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	691b      	ldr	r3, [r3, #16]
 80031d6:	b2d9      	uxtb	r1, r3
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80031de:	461a      	mov	r2, r3
 80031e0:	f003 fe0e 	bl	8006e00 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2200      	movs	r2, #0
 80031e8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80031ec:	2300      	movs	r3, #0
}
 80031ee:	4618      	mov	r0, r3
 80031f0:	3710      	adds	r7, #16
 80031f2:	46bd      	mov	sp, r7
 80031f4:	bd80      	pop	{r7, pc}

080031f6 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80031f6:	b580      	push	{r7, lr}
 80031f8:	b084      	sub	sp, #16
 80031fa:	af00      	add	r7, sp, #0
 80031fc:	6078      	str	r0, [r7, #4]
 80031fe:	460b      	mov	r3, r1
 8003200:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003202:	78fb      	ldrb	r3, [r7, #3]
 8003204:	f003 020f 	and.w	r2, r3, #15
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	685b      	ldr	r3, [r3, #4]
 800320c:	429a      	cmp	r2, r3
 800320e:	d901      	bls.n	8003214 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003210:	2301      	movs	r3, #1
 8003212:	e042      	b.n	800329a <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003214:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003218:	2b00      	cmp	r3, #0
 800321a:	da0f      	bge.n	800323c <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800321c:	78fb      	ldrb	r3, [r7, #3]
 800321e:	f003 020f 	and.w	r2, r3, #15
 8003222:	4613      	mov	r3, r2
 8003224:	00db      	lsls	r3, r3, #3
 8003226:	1a9b      	subs	r3, r3, r2
 8003228:	009b      	lsls	r3, r3, #2
 800322a:	3338      	adds	r3, #56	; 0x38
 800322c:	687a      	ldr	r2, [r7, #4]
 800322e:	4413      	add	r3, r2
 8003230:	3304      	adds	r3, #4
 8003232:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	2201      	movs	r2, #1
 8003238:	705a      	strb	r2, [r3, #1]
 800323a:	e00f      	b.n	800325c <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800323c:	78fb      	ldrb	r3, [r7, #3]
 800323e:	f003 020f 	and.w	r2, r3, #15
 8003242:	4613      	mov	r3, r2
 8003244:	00db      	lsls	r3, r3, #3
 8003246:	1a9b      	subs	r3, r3, r2
 8003248:	009b      	lsls	r3, r3, #2
 800324a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800324e:	687a      	ldr	r2, [r7, #4]
 8003250:	4413      	add	r3, r2
 8003252:	3304      	adds	r3, #4
 8003254:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	2200      	movs	r2, #0
 800325a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	2200      	movs	r2, #0
 8003260:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003262:	78fb      	ldrb	r3, [r7, #3]
 8003264:	f003 030f 	and.w	r3, r3, #15
 8003268:	b2da      	uxtb	r2, r3
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003274:	2b01      	cmp	r3, #1
 8003276:	d101      	bne.n	800327c <HAL_PCD_EP_ClrStall+0x86>
 8003278:	2302      	movs	r3, #2
 800327a:	e00e      	b.n	800329a <HAL_PCD_EP_ClrStall+0xa4>
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2201      	movs	r2, #1
 8003280:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	68f9      	ldr	r1, [r7, #12]
 800328a:	4618      	mov	r0, r3
 800328c:	f003 fc25 	bl	8006ada <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2200      	movs	r2, #0
 8003294:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003298:	2300      	movs	r3, #0
}
 800329a:	4618      	mov	r0, r3
 800329c:	3710      	adds	r7, #16
 800329e:	46bd      	mov	sp, r7
 80032a0:	bd80      	pop	{r7, pc}

080032a2 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80032a2:	b580      	push	{r7, lr}
 80032a4:	b08a      	sub	sp, #40	; 0x28
 80032a6:	af02      	add	r7, sp, #8
 80032a8:	6078      	str	r0, [r7, #4]
 80032aa:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80032b2:	697b      	ldr	r3, [r7, #20]
 80032b4:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80032b6:	683a      	ldr	r2, [r7, #0]
 80032b8:	4613      	mov	r3, r2
 80032ba:	00db      	lsls	r3, r3, #3
 80032bc:	1a9b      	subs	r3, r3, r2
 80032be:	009b      	lsls	r3, r3, #2
 80032c0:	3338      	adds	r3, #56	; 0x38
 80032c2:	687a      	ldr	r2, [r7, #4]
 80032c4:	4413      	add	r3, r2
 80032c6:	3304      	adds	r3, #4
 80032c8:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	699a      	ldr	r2, [r3, #24]
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	695b      	ldr	r3, [r3, #20]
 80032d2:	429a      	cmp	r2, r3
 80032d4:	d901      	bls.n	80032da <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80032d6:	2301      	movs	r3, #1
 80032d8:	e06c      	b.n	80033b4 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	695a      	ldr	r2, [r3, #20]
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	699b      	ldr	r3, [r3, #24]
 80032e2:	1ad3      	subs	r3, r2, r3
 80032e4:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	689b      	ldr	r3, [r3, #8]
 80032ea:	69fa      	ldr	r2, [r7, #28]
 80032ec:	429a      	cmp	r2, r3
 80032ee:	d902      	bls.n	80032f6 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	689b      	ldr	r3, [r3, #8]
 80032f4:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80032f6:	69fb      	ldr	r3, [r7, #28]
 80032f8:	3303      	adds	r3, #3
 80032fa:	089b      	lsrs	r3, r3, #2
 80032fc:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80032fe:	e02b      	b.n	8003358 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	695a      	ldr	r2, [r3, #20]
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	699b      	ldr	r3, [r3, #24]
 8003308:	1ad3      	subs	r3, r2, r3
 800330a:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	689b      	ldr	r3, [r3, #8]
 8003310:	69fa      	ldr	r2, [r7, #28]
 8003312:	429a      	cmp	r2, r3
 8003314:	d902      	bls.n	800331c <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	689b      	ldr	r3, [r3, #8]
 800331a:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800331c:	69fb      	ldr	r3, [r7, #28]
 800331e:	3303      	adds	r3, #3
 8003320:	089b      	lsrs	r3, r3, #2
 8003322:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	68d9      	ldr	r1, [r3, #12]
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	b2da      	uxtb	r2, r3
 800332c:	69fb      	ldr	r3, [r7, #28]
 800332e:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003334:	b2db      	uxtb	r3, r3
 8003336:	9300      	str	r3, [sp, #0]
 8003338:	4603      	mov	r3, r0
 800333a:	6978      	ldr	r0, [r7, #20]
 800333c:	f003 fac9 	bl	80068d2 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	68da      	ldr	r2, [r3, #12]
 8003344:	69fb      	ldr	r3, [r7, #28]
 8003346:	441a      	add	r2, r3
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	699a      	ldr	r2, [r3, #24]
 8003350:	69fb      	ldr	r3, [r7, #28]
 8003352:	441a      	add	r2, r3
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	015a      	lsls	r2, r3, #5
 800335c:	693b      	ldr	r3, [r7, #16]
 800335e:	4413      	add	r3, r2
 8003360:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003364:	699b      	ldr	r3, [r3, #24]
 8003366:	b29b      	uxth	r3, r3
 8003368:	69ba      	ldr	r2, [r7, #24]
 800336a:	429a      	cmp	r2, r3
 800336c:	d809      	bhi.n	8003382 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	699a      	ldr	r2, [r3, #24]
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003376:	429a      	cmp	r2, r3
 8003378:	d203      	bcs.n	8003382 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	695b      	ldr	r3, [r3, #20]
 800337e:	2b00      	cmp	r3, #0
 8003380:	d1be      	bne.n	8003300 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	695a      	ldr	r2, [r3, #20]
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	699b      	ldr	r3, [r3, #24]
 800338a:	429a      	cmp	r2, r3
 800338c:	d811      	bhi.n	80033b2 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	f003 030f 	and.w	r3, r3, #15
 8003394:	2201      	movs	r2, #1
 8003396:	fa02 f303 	lsl.w	r3, r2, r3
 800339a:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800339c:	693b      	ldr	r3, [r7, #16]
 800339e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80033a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80033a4:	68bb      	ldr	r3, [r7, #8]
 80033a6:	43db      	mvns	r3, r3
 80033a8:	6939      	ldr	r1, [r7, #16]
 80033aa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80033ae:	4013      	ands	r3, r2
 80033b0:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80033b2:	2300      	movs	r3, #0
}
 80033b4:	4618      	mov	r0, r3
 80033b6:	3720      	adds	r7, #32
 80033b8:	46bd      	mov	sp, r7
 80033ba:	bd80      	pop	{r7, pc}

080033bc <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	b086      	sub	sp, #24
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
 80033c4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80033cc:	697b      	ldr	r3, [r7, #20]
 80033ce:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80033d0:	697b      	ldr	r3, [r7, #20]
 80033d2:	333c      	adds	r3, #60	; 0x3c
 80033d4:	3304      	adds	r3, #4
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	015a      	lsls	r2, r3, #5
 80033de:	693b      	ldr	r3, [r7, #16]
 80033e0:	4413      	add	r3, r2
 80033e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033e6:	689b      	ldr	r3, [r3, #8]
 80033e8:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	691b      	ldr	r3, [r3, #16]
 80033ee:	2b01      	cmp	r3, #1
 80033f0:	f040 80a0 	bne.w	8003534 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80033f4:	68bb      	ldr	r3, [r7, #8]
 80033f6:	f003 0308 	and.w	r3, r3, #8
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d015      	beq.n	800342a <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	4a72      	ldr	r2, [pc, #456]	; (80035cc <PCD_EP_OutXfrComplete_int+0x210>)
 8003402:	4293      	cmp	r3, r2
 8003404:	f240 80dd 	bls.w	80035c2 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003408:	68bb      	ldr	r3, [r7, #8]
 800340a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800340e:	2b00      	cmp	r3, #0
 8003410:	f000 80d7 	beq.w	80035c2 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	015a      	lsls	r2, r3, #5
 8003418:	693b      	ldr	r3, [r7, #16]
 800341a:	4413      	add	r3, r2
 800341c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003420:	461a      	mov	r2, r3
 8003422:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003426:	6093      	str	r3, [r2, #8]
 8003428:	e0cb      	b.n	80035c2 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800342a:	68bb      	ldr	r3, [r7, #8]
 800342c:	f003 0320 	and.w	r3, r3, #32
 8003430:	2b00      	cmp	r3, #0
 8003432:	d009      	beq.n	8003448 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	015a      	lsls	r2, r3, #5
 8003438:	693b      	ldr	r3, [r7, #16]
 800343a:	4413      	add	r3, r2
 800343c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003440:	461a      	mov	r2, r3
 8003442:	2320      	movs	r3, #32
 8003444:	6093      	str	r3, [r2, #8]
 8003446:	e0bc      	b.n	80035c2 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003448:	68bb      	ldr	r3, [r7, #8]
 800344a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800344e:	2b00      	cmp	r3, #0
 8003450:	f040 80b7 	bne.w	80035c2 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	4a5d      	ldr	r2, [pc, #372]	; (80035cc <PCD_EP_OutXfrComplete_int+0x210>)
 8003458:	4293      	cmp	r3, r2
 800345a:	d90f      	bls.n	800347c <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800345c:	68bb      	ldr	r3, [r7, #8]
 800345e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003462:	2b00      	cmp	r3, #0
 8003464:	d00a      	beq.n	800347c <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003466:	683b      	ldr	r3, [r7, #0]
 8003468:	015a      	lsls	r2, r3, #5
 800346a:	693b      	ldr	r3, [r7, #16]
 800346c:	4413      	add	r3, r2
 800346e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003472:	461a      	mov	r2, r3
 8003474:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003478:	6093      	str	r3, [r2, #8]
 800347a:	e0a2      	b.n	80035c2 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 800347c:	6879      	ldr	r1, [r7, #4]
 800347e:	683a      	ldr	r2, [r7, #0]
 8003480:	4613      	mov	r3, r2
 8003482:	00db      	lsls	r3, r3, #3
 8003484:	1a9b      	subs	r3, r3, r2
 8003486:	009b      	lsls	r3, r3, #2
 8003488:	440b      	add	r3, r1
 800348a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800348e:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	0159      	lsls	r1, r3, #5
 8003494:	693b      	ldr	r3, [r7, #16]
 8003496:	440b      	add	r3, r1
 8003498:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800349c:	691b      	ldr	r3, [r3, #16]
 800349e:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 80034a2:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 80034a4:	6878      	ldr	r0, [r7, #4]
 80034a6:	683a      	ldr	r2, [r7, #0]
 80034a8:	4613      	mov	r3, r2
 80034aa:	00db      	lsls	r3, r3, #3
 80034ac:	1a9b      	subs	r3, r3, r2
 80034ae:	009b      	lsls	r3, r3, #2
 80034b0:	4403      	add	r3, r0
 80034b2:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80034b6:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 80034b8:	6879      	ldr	r1, [r7, #4]
 80034ba:	683a      	ldr	r2, [r7, #0]
 80034bc:	4613      	mov	r3, r2
 80034be:	00db      	lsls	r3, r3, #3
 80034c0:	1a9b      	subs	r3, r3, r2
 80034c2:	009b      	lsls	r3, r3, #2
 80034c4:	440b      	add	r3, r1
 80034c6:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80034ca:	6819      	ldr	r1, [r3, #0]
 80034cc:	6878      	ldr	r0, [r7, #4]
 80034ce:	683a      	ldr	r2, [r7, #0]
 80034d0:	4613      	mov	r3, r2
 80034d2:	00db      	lsls	r3, r3, #3
 80034d4:	1a9b      	subs	r3, r3, r2
 80034d6:	009b      	lsls	r3, r3, #2
 80034d8:	4403      	add	r3, r0
 80034da:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	4419      	add	r1, r3
 80034e2:	6878      	ldr	r0, [r7, #4]
 80034e4:	683a      	ldr	r2, [r7, #0]
 80034e6:	4613      	mov	r3, r2
 80034e8:	00db      	lsls	r3, r3, #3
 80034ea:	1a9b      	subs	r3, r3, r2
 80034ec:	009b      	lsls	r3, r3, #2
 80034ee:	4403      	add	r3, r0
 80034f0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80034f4:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d114      	bne.n	8003526 <PCD_EP_OutXfrComplete_int+0x16a>
 80034fc:	6879      	ldr	r1, [r7, #4]
 80034fe:	683a      	ldr	r2, [r7, #0]
 8003500:	4613      	mov	r3, r2
 8003502:	00db      	lsls	r3, r3, #3
 8003504:	1a9b      	subs	r3, r3, r2
 8003506:	009b      	lsls	r3, r3, #2
 8003508:	440b      	add	r3, r1
 800350a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	2b00      	cmp	r3, #0
 8003512:	d108      	bne.n	8003526 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6818      	ldr	r0, [r3, #0]
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800351e:	461a      	mov	r2, r3
 8003520:	2101      	movs	r1, #1
 8003522:	f003 fc6d 	bl	8006e00 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	b2db      	uxtb	r3, r3
 800352a:	4619      	mov	r1, r3
 800352c:	6878      	ldr	r0, [r7, #4]
 800352e:	f005 fd45 	bl	8008fbc <HAL_PCD_DataOutStageCallback>
 8003532:	e046      	b.n	80035c2 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	4a26      	ldr	r2, [pc, #152]	; (80035d0 <PCD_EP_OutXfrComplete_int+0x214>)
 8003538:	4293      	cmp	r3, r2
 800353a:	d124      	bne.n	8003586 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800353c:	68bb      	ldr	r3, [r7, #8]
 800353e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003542:	2b00      	cmp	r3, #0
 8003544:	d00a      	beq.n	800355c <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	015a      	lsls	r2, r3, #5
 800354a:	693b      	ldr	r3, [r7, #16]
 800354c:	4413      	add	r3, r2
 800354e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003552:	461a      	mov	r2, r3
 8003554:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003558:	6093      	str	r3, [r2, #8]
 800355a:	e032      	b.n	80035c2 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800355c:	68bb      	ldr	r3, [r7, #8]
 800355e:	f003 0320 	and.w	r3, r3, #32
 8003562:	2b00      	cmp	r3, #0
 8003564:	d008      	beq.n	8003578 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003566:	683b      	ldr	r3, [r7, #0]
 8003568:	015a      	lsls	r2, r3, #5
 800356a:	693b      	ldr	r3, [r7, #16]
 800356c:	4413      	add	r3, r2
 800356e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003572:	461a      	mov	r2, r3
 8003574:	2320      	movs	r3, #32
 8003576:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	b2db      	uxtb	r3, r3
 800357c:	4619      	mov	r1, r3
 800357e:	6878      	ldr	r0, [r7, #4]
 8003580:	f005 fd1c 	bl	8008fbc <HAL_PCD_DataOutStageCallback>
 8003584:	e01d      	b.n	80035c2 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003586:	683b      	ldr	r3, [r7, #0]
 8003588:	2b00      	cmp	r3, #0
 800358a:	d114      	bne.n	80035b6 <PCD_EP_OutXfrComplete_int+0x1fa>
 800358c:	6879      	ldr	r1, [r7, #4]
 800358e:	683a      	ldr	r2, [r7, #0]
 8003590:	4613      	mov	r3, r2
 8003592:	00db      	lsls	r3, r3, #3
 8003594:	1a9b      	subs	r3, r3, r2
 8003596:	009b      	lsls	r3, r3, #2
 8003598:	440b      	add	r3, r1
 800359a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d108      	bne.n	80035b6 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6818      	ldr	r0, [r3, #0]
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80035ae:	461a      	mov	r2, r3
 80035b0:	2100      	movs	r1, #0
 80035b2:	f003 fc25 	bl	8006e00 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	b2db      	uxtb	r3, r3
 80035ba:	4619      	mov	r1, r3
 80035bc:	6878      	ldr	r0, [r7, #4]
 80035be:	f005 fcfd 	bl	8008fbc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80035c2:	2300      	movs	r3, #0
}
 80035c4:	4618      	mov	r0, r3
 80035c6:	3718      	adds	r7, #24
 80035c8:	46bd      	mov	sp, r7
 80035ca:	bd80      	pop	{r7, pc}
 80035cc:	4f54300a 	.word	0x4f54300a
 80035d0:	4f54310a 	.word	0x4f54310a

080035d4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b086      	sub	sp, #24
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
 80035dc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80035e4:	697b      	ldr	r3, [r7, #20]
 80035e6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80035e8:	697b      	ldr	r3, [r7, #20]
 80035ea:	333c      	adds	r3, #60	; 0x3c
 80035ec:	3304      	adds	r3, #4
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	015a      	lsls	r2, r3, #5
 80035f6:	693b      	ldr	r3, [r7, #16]
 80035f8:	4413      	add	r3, r2
 80035fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035fe:	689b      	ldr	r3, [r3, #8]
 8003600:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	4a15      	ldr	r2, [pc, #84]	; (800365c <PCD_EP_OutSetupPacket_int+0x88>)
 8003606:	4293      	cmp	r3, r2
 8003608:	d90e      	bls.n	8003628 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800360a:	68bb      	ldr	r3, [r7, #8]
 800360c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003610:	2b00      	cmp	r3, #0
 8003612:	d009      	beq.n	8003628 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	015a      	lsls	r2, r3, #5
 8003618:	693b      	ldr	r3, [r7, #16]
 800361a:	4413      	add	r3, r2
 800361c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003620:	461a      	mov	r2, r3
 8003622:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003626:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003628:	6878      	ldr	r0, [r7, #4]
 800362a:	f005 fcb5 	bl	8008f98 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	4a0a      	ldr	r2, [pc, #40]	; (800365c <PCD_EP_OutSetupPacket_int+0x88>)
 8003632:	4293      	cmp	r3, r2
 8003634:	d90c      	bls.n	8003650 <PCD_EP_OutSetupPacket_int+0x7c>
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	691b      	ldr	r3, [r3, #16]
 800363a:	2b01      	cmp	r3, #1
 800363c:	d108      	bne.n	8003650 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6818      	ldr	r0, [r3, #0]
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003648:	461a      	mov	r2, r3
 800364a:	2101      	movs	r1, #1
 800364c:	f003 fbd8 	bl	8006e00 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003650:	2300      	movs	r3, #0
}
 8003652:	4618      	mov	r0, r3
 8003654:	3718      	adds	r7, #24
 8003656:	46bd      	mov	sp, r7
 8003658:	bd80      	pop	{r7, pc}
 800365a:	bf00      	nop
 800365c:	4f54300a 	.word	0x4f54300a

08003660 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003660:	b480      	push	{r7}
 8003662:	b085      	sub	sp, #20
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
 8003668:	460b      	mov	r3, r1
 800366a:	70fb      	strb	r3, [r7, #3]
 800366c:	4613      	mov	r3, r2
 800366e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003676:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003678:	78fb      	ldrb	r3, [r7, #3]
 800367a:	2b00      	cmp	r3, #0
 800367c:	d107      	bne.n	800368e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800367e:	883b      	ldrh	r3, [r7, #0]
 8003680:	0419      	lsls	r1, r3, #16
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	68ba      	ldr	r2, [r7, #8]
 8003688:	430a      	orrs	r2, r1
 800368a:	629a      	str	r2, [r3, #40]	; 0x28
 800368c:	e028      	b.n	80036e0 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003694:	0c1b      	lsrs	r3, r3, #16
 8003696:	68ba      	ldr	r2, [r7, #8]
 8003698:	4413      	add	r3, r2
 800369a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800369c:	2300      	movs	r3, #0
 800369e:	73fb      	strb	r3, [r7, #15]
 80036a0:	e00d      	b.n	80036be <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681a      	ldr	r2, [r3, #0]
 80036a6:	7bfb      	ldrb	r3, [r7, #15]
 80036a8:	3340      	adds	r3, #64	; 0x40
 80036aa:	009b      	lsls	r3, r3, #2
 80036ac:	4413      	add	r3, r2
 80036ae:	685b      	ldr	r3, [r3, #4]
 80036b0:	0c1b      	lsrs	r3, r3, #16
 80036b2:	68ba      	ldr	r2, [r7, #8]
 80036b4:	4413      	add	r3, r2
 80036b6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80036b8:	7bfb      	ldrb	r3, [r7, #15]
 80036ba:	3301      	adds	r3, #1
 80036bc:	73fb      	strb	r3, [r7, #15]
 80036be:	7bfa      	ldrb	r2, [r7, #15]
 80036c0:	78fb      	ldrb	r3, [r7, #3]
 80036c2:	3b01      	subs	r3, #1
 80036c4:	429a      	cmp	r2, r3
 80036c6:	d3ec      	bcc.n	80036a2 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80036c8:	883b      	ldrh	r3, [r7, #0]
 80036ca:	0418      	lsls	r0, r3, #16
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6819      	ldr	r1, [r3, #0]
 80036d0:	78fb      	ldrb	r3, [r7, #3]
 80036d2:	3b01      	subs	r3, #1
 80036d4:	68ba      	ldr	r2, [r7, #8]
 80036d6:	4302      	orrs	r2, r0
 80036d8:	3340      	adds	r3, #64	; 0x40
 80036da:	009b      	lsls	r3, r3, #2
 80036dc:	440b      	add	r3, r1
 80036de:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80036e0:	2300      	movs	r3, #0
}
 80036e2:	4618      	mov	r0, r3
 80036e4:	3714      	adds	r7, #20
 80036e6:	46bd      	mov	sp, r7
 80036e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ec:	4770      	bx	lr

080036ee <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80036ee:	b480      	push	{r7}
 80036f0:	b083      	sub	sp, #12
 80036f2:	af00      	add	r7, sp, #0
 80036f4:	6078      	str	r0, [r7, #4]
 80036f6:	460b      	mov	r3, r1
 80036f8:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	887a      	ldrh	r2, [r7, #2]
 8003700:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003702:	2300      	movs	r3, #0
}
 8003704:	4618      	mov	r0, r3
 8003706:	370c      	adds	r7, #12
 8003708:	46bd      	mov	sp, r7
 800370a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370e:	4770      	bx	lr

08003710 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003710:	b480      	push	{r7}
 8003712:	b083      	sub	sp, #12
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
 8003718:	460b      	mov	r3, r1
 800371a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800371c:	bf00      	nop
 800371e:	370c      	adds	r7, #12
 8003720:	46bd      	mov	sp, r7
 8003722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003726:	4770      	bx	lr

08003728 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	b086      	sub	sp, #24
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2b00      	cmp	r3, #0
 8003734:	d101      	bne.n	800373a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003736:	2301      	movs	r3, #1
 8003738:	e267      	b.n	8003c0a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f003 0301 	and.w	r3, r3, #1
 8003742:	2b00      	cmp	r3, #0
 8003744:	d075      	beq.n	8003832 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003746:	4b88      	ldr	r3, [pc, #544]	; (8003968 <HAL_RCC_OscConfig+0x240>)
 8003748:	689b      	ldr	r3, [r3, #8]
 800374a:	f003 030c 	and.w	r3, r3, #12
 800374e:	2b04      	cmp	r3, #4
 8003750:	d00c      	beq.n	800376c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003752:	4b85      	ldr	r3, [pc, #532]	; (8003968 <HAL_RCC_OscConfig+0x240>)
 8003754:	689b      	ldr	r3, [r3, #8]
 8003756:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800375a:	2b08      	cmp	r3, #8
 800375c:	d112      	bne.n	8003784 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800375e:	4b82      	ldr	r3, [pc, #520]	; (8003968 <HAL_RCC_OscConfig+0x240>)
 8003760:	685b      	ldr	r3, [r3, #4]
 8003762:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003766:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800376a:	d10b      	bne.n	8003784 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800376c:	4b7e      	ldr	r3, [pc, #504]	; (8003968 <HAL_RCC_OscConfig+0x240>)
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003774:	2b00      	cmp	r3, #0
 8003776:	d05b      	beq.n	8003830 <HAL_RCC_OscConfig+0x108>
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	685b      	ldr	r3, [r3, #4]
 800377c:	2b00      	cmp	r3, #0
 800377e:	d157      	bne.n	8003830 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003780:	2301      	movs	r3, #1
 8003782:	e242      	b.n	8003c0a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	685b      	ldr	r3, [r3, #4]
 8003788:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800378c:	d106      	bne.n	800379c <HAL_RCC_OscConfig+0x74>
 800378e:	4b76      	ldr	r3, [pc, #472]	; (8003968 <HAL_RCC_OscConfig+0x240>)
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	4a75      	ldr	r2, [pc, #468]	; (8003968 <HAL_RCC_OscConfig+0x240>)
 8003794:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003798:	6013      	str	r3, [r2, #0]
 800379a:	e01d      	b.n	80037d8 <HAL_RCC_OscConfig+0xb0>
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	685b      	ldr	r3, [r3, #4]
 80037a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80037a4:	d10c      	bne.n	80037c0 <HAL_RCC_OscConfig+0x98>
 80037a6:	4b70      	ldr	r3, [pc, #448]	; (8003968 <HAL_RCC_OscConfig+0x240>)
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	4a6f      	ldr	r2, [pc, #444]	; (8003968 <HAL_RCC_OscConfig+0x240>)
 80037ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80037b0:	6013      	str	r3, [r2, #0]
 80037b2:	4b6d      	ldr	r3, [pc, #436]	; (8003968 <HAL_RCC_OscConfig+0x240>)
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	4a6c      	ldr	r2, [pc, #432]	; (8003968 <HAL_RCC_OscConfig+0x240>)
 80037b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037bc:	6013      	str	r3, [r2, #0]
 80037be:	e00b      	b.n	80037d8 <HAL_RCC_OscConfig+0xb0>
 80037c0:	4b69      	ldr	r3, [pc, #420]	; (8003968 <HAL_RCC_OscConfig+0x240>)
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	4a68      	ldr	r2, [pc, #416]	; (8003968 <HAL_RCC_OscConfig+0x240>)
 80037c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037ca:	6013      	str	r3, [r2, #0]
 80037cc:	4b66      	ldr	r3, [pc, #408]	; (8003968 <HAL_RCC_OscConfig+0x240>)
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	4a65      	ldr	r2, [pc, #404]	; (8003968 <HAL_RCC_OscConfig+0x240>)
 80037d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80037d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	685b      	ldr	r3, [r3, #4]
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d013      	beq.n	8003808 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037e0:	f7fd fdb0 	bl	8001344 <HAL_GetTick>
 80037e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037e6:	e008      	b.n	80037fa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80037e8:	f7fd fdac 	bl	8001344 <HAL_GetTick>
 80037ec:	4602      	mov	r2, r0
 80037ee:	693b      	ldr	r3, [r7, #16]
 80037f0:	1ad3      	subs	r3, r2, r3
 80037f2:	2b64      	cmp	r3, #100	; 0x64
 80037f4:	d901      	bls.n	80037fa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80037f6:	2303      	movs	r3, #3
 80037f8:	e207      	b.n	8003c0a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037fa:	4b5b      	ldr	r3, [pc, #364]	; (8003968 <HAL_RCC_OscConfig+0x240>)
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003802:	2b00      	cmp	r3, #0
 8003804:	d0f0      	beq.n	80037e8 <HAL_RCC_OscConfig+0xc0>
 8003806:	e014      	b.n	8003832 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003808:	f7fd fd9c 	bl	8001344 <HAL_GetTick>
 800380c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800380e:	e008      	b.n	8003822 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003810:	f7fd fd98 	bl	8001344 <HAL_GetTick>
 8003814:	4602      	mov	r2, r0
 8003816:	693b      	ldr	r3, [r7, #16]
 8003818:	1ad3      	subs	r3, r2, r3
 800381a:	2b64      	cmp	r3, #100	; 0x64
 800381c:	d901      	bls.n	8003822 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800381e:	2303      	movs	r3, #3
 8003820:	e1f3      	b.n	8003c0a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003822:	4b51      	ldr	r3, [pc, #324]	; (8003968 <HAL_RCC_OscConfig+0x240>)
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800382a:	2b00      	cmp	r3, #0
 800382c:	d1f0      	bne.n	8003810 <HAL_RCC_OscConfig+0xe8>
 800382e:	e000      	b.n	8003832 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003830:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f003 0302 	and.w	r3, r3, #2
 800383a:	2b00      	cmp	r3, #0
 800383c:	d063      	beq.n	8003906 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800383e:	4b4a      	ldr	r3, [pc, #296]	; (8003968 <HAL_RCC_OscConfig+0x240>)
 8003840:	689b      	ldr	r3, [r3, #8]
 8003842:	f003 030c 	and.w	r3, r3, #12
 8003846:	2b00      	cmp	r3, #0
 8003848:	d00b      	beq.n	8003862 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800384a:	4b47      	ldr	r3, [pc, #284]	; (8003968 <HAL_RCC_OscConfig+0x240>)
 800384c:	689b      	ldr	r3, [r3, #8]
 800384e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003852:	2b08      	cmp	r3, #8
 8003854:	d11c      	bne.n	8003890 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003856:	4b44      	ldr	r3, [pc, #272]	; (8003968 <HAL_RCC_OscConfig+0x240>)
 8003858:	685b      	ldr	r3, [r3, #4]
 800385a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800385e:	2b00      	cmp	r3, #0
 8003860:	d116      	bne.n	8003890 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003862:	4b41      	ldr	r3, [pc, #260]	; (8003968 <HAL_RCC_OscConfig+0x240>)
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f003 0302 	and.w	r3, r3, #2
 800386a:	2b00      	cmp	r3, #0
 800386c:	d005      	beq.n	800387a <HAL_RCC_OscConfig+0x152>
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	68db      	ldr	r3, [r3, #12]
 8003872:	2b01      	cmp	r3, #1
 8003874:	d001      	beq.n	800387a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003876:	2301      	movs	r3, #1
 8003878:	e1c7      	b.n	8003c0a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800387a:	4b3b      	ldr	r3, [pc, #236]	; (8003968 <HAL_RCC_OscConfig+0x240>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	691b      	ldr	r3, [r3, #16]
 8003886:	00db      	lsls	r3, r3, #3
 8003888:	4937      	ldr	r1, [pc, #220]	; (8003968 <HAL_RCC_OscConfig+0x240>)
 800388a:	4313      	orrs	r3, r2
 800388c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800388e:	e03a      	b.n	8003906 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	68db      	ldr	r3, [r3, #12]
 8003894:	2b00      	cmp	r3, #0
 8003896:	d020      	beq.n	80038da <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003898:	4b34      	ldr	r3, [pc, #208]	; (800396c <HAL_RCC_OscConfig+0x244>)
 800389a:	2201      	movs	r2, #1
 800389c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800389e:	f7fd fd51 	bl	8001344 <HAL_GetTick>
 80038a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038a4:	e008      	b.n	80038b8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80038a6:	f7fd fd4d 	bl	8001344 <HAL_GetTick>
 80038aa:	4602      	mov	r2, r0
 80038ac:	693b      	ldr	r3, [r7, #16]
 80038ae:	1ad3      	subs	r3, r2, r3
 80038b0:	2b02      	cmp	r3, #2
 80038b2:	d901      	bls.n	80038b8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80038b4:	2303      	movs	r3, #3
 80038b6:	e1a8      	b.n	8003c0a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038b8:	4b2b      	ldr	r3, [pc, #172]	; (8003968 <HAL_RCC_OscConfig+0x240>)
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f003 0302 	and.w	r3, r3, #2
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d0f0      	beq.n	80038a6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038c4:	4b28      	ldr	r3, [pc, #160]	; (8003968 <HAL_RCC_OscConfig+0x240>)
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	691b      	ldr	r3, [r3, #16]
 80038d0:	00db      	lsls	r3, r3, #3
 80038d2:	4925      	ldr	r1, [pc, #148]	; (8003968 <HAL_RCC_OscConfig+0x240>)
 80038d4:	4313      	orrs	r3, r2
 80038d6:	600b      	str	r3, [r1, #0]
 80038d8:	e015      	b.n	8003906 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80038da:	4b24      	ldr	r3, [pc, #144]	; (800396c <HAL_RCC_OscConfig+0x244>)
 80038dc:	2200      	movs	r2, #0
 80038de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038e0:	f7fd fd30 	bl	8001344 <HAL_GetTick>
 80038e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80038e6:	e008      	b.n	80038fa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80038e8:	f7fd fd2c 	bl	8001344 <HAL_GetTick>
 80038ec:	4602      	mov	r2, r0
 80038ee:	693b      	ldr	r3, [r7, #16]
 80038f0:	1ad3      	subs	r3, r2, r3
 80038f2:	2b02      	cmp	r3, #2
 80038f4:	d901      	bls.n	80038fa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80038f6:	2303      	movs	r3, #3
 80038f8:	e187      	b.n	8003c0a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80038fa:	4b1b      	ldr	r3, [pc, #108]	; (8003968 <HAL_RCC_OscConfig+0x240>)
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f003 0302 	and.w	r3, r3, #2
 8003902:	2b00      	cmp	r3, #0
 8003904:	d1f0      	bne.n	80038e8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f003 0308 	and.w	r3, r3, #8
 800390e:	2b00      	cmp	r3, #0
 8003910:	d036      	beq.n	8003980 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	695b      	ldr	r3, [r3, #20]
 8003916:	2b00      	cmp	r3, #0
 8003918:	d016      	beq.n	8003948 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800391a:	4b15      	ldr	r3, [pc, #84]	; (8003970 <HAL_RCC_OscConfig+0x248>)
 800391c:	2201      	movs	r2, #1
 800391e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003920:	f7fd fd10 	bl	8001344 <HAL_GetTick>
 8003924:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003926:	e008      	b.n	800393a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003928:	f7fd fd0c 	bl	8001344 <HAL_GetTick>
 800392c:	4602      	mov	r2, r0
 800392e:	693b      	ldr	r3, [r7, #16]
 8003930:	1ad3      	subs	r3, r2, r3
 8003932:	2b02      	cmp	r3, #2
 8003934:	d901      	bls.n	800393a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003936:	2303      	movs	r3, #3
 8003938:	e167      	b.n	8003c0a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800393a:	4b0b      	ldr	r3, [pc, #44]	; (8003968 <HAL_RCC_OscConfig+0x240>)
 800393c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800393e:	f003 0302 	and.w	r3, r3, #2
 8003942:	2b00      	cmp	r3, #0
 8003944:	d0f0      	beq.n	8003928 <HAL_RCC_OscConfig+0x200>
 8003946:	e01b      	b.n	8003980 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003948:	4b09      	ldr	r3, [pc, #36]	; (8003970 <HAL_RCC_OscConfig+0x248>)
 800394a:	2200      	movs	r2, #0
 800394c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800394e:	f7fd fcf9 	bl	8001344 <HAL_GetTick>
 8003952:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003954:	e00e      	b.n	8003974 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003956:	f7fd fcf5 	bl	8001344 <HAL_GetTick>
 800395a:	4602      	mov	r2, r0
 800395c:	693b      	ldr	r3, [r7, #16]
 800395e:	1ad3      	subs	r3, r2, r3
 8003960:	2b02      	cmp	r3, #2
 8003962:	d907      	bls.n	8003974 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003964:	2303      	movs	r3, #3
 8003966:	e150      	b.n	8003c0a <HAL_RCC_OscConfig+0x4e2>
 8003968:	40023800 	.word	0x40023800
 800396c:	42470000 	.word	0x42470000
 8003970:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003974:	4b88      	ldr	r3, [pc, #544]	; (8003b98 <HAL_RCC_OscConfig+0x470>)
 8003976:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003978:	f003 0302 	and.w	r3, r3, #2
 800397c:	2b00      	cmp	r3, #0
 800397e:	d1ea      	bne.n	8003956 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f003 0304 	and.w	r3, r3, #4
 8003988:	2b00      	cmp	r3, #0
 800398a:	f000 8097 	beq.w	8003abc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800398e:	2300      	movs	r3, #0
 8003990:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003992:	4b81      	ldr	r3, [pc, #516]	; (8003b98 <HAL_RCC_OscConfig+0x470>)
 8003994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003996:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800399a:	2b00      	cmp	r3, #0
 800399c:	d10f      	bne.n	80039be <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800399e:	2300      	movs	r3, #0
 80039a0:	60bb      	str	r3, [r7, #8]
 80039a2:	4b7d      	ldr	r3, [pc, #500]	; (8003b98 <HAL_RCC_OscConfig+0x470>)
 80039a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039a6:	4a7c      	ldr	r2, [pc, #496]	; (8003b98 <HAL_RCC_OscConfig+0x470>)
 80039a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039ac:	6413      	str	r3, [r2, #64]	; 0x40
 80039ae:	4b7a      	ldr	r3, [pc, #488]	; (8003b98 <HAL_RCC_OscConfig+0x470>)
 80039b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039b6:	60bb      	str	r3, [r7, #8]
 80039b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80039ba:	2301      	movs	r3, #1
 80039bc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039be:	4b77      	ldr	r3, [pc, #476]	; (8003b9c <HAL_RCC_OscConfig+0x474>)
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d118      	bne.n	80039fc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80039ca:	4b74      	ldr	r3, [pc, #464]	; (8003b9c <HAL_RCC_OscConfig+0x474>)
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	4a73      	ldr	r2, [pc, #460]	; (8003b9c <HAL_RCC_OscConfig+0x474>)
 80039d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80039d6:	f7fd fcb5 	bl	8001344 <HAL_GetTick>
 80039da:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039dc:	e008      	b.n	80039f0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039de:	f7fd fcb1 	bl	8001344 <HAL_GetTick>
 80039e2:	4602      	mov	r2, r0
 80039e4:	693b      	ldr	r3, [r7, #16]
 80039e6:	1ad3      	subs	r3, r2, r3
 80039e8:	2b02      	cmp	r3, #2
 80039ea:	d901      	bls.n	80039f0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80039ec:	2303      	movs	r3, #3
 80039ee:	e10c      	b.n	8003c0a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039f0:	4b6a      	ldr	r3, [pc, #424]	; (8003b9c <HAL_RCC_OscConfig+0x474>)
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d0f0      	beq.n	80039de <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	689b      	ldr	r3, [r3, #8]
 8003a00:	2b01      	cmp	r3, #1
 8003a02:	d106      	bne.n	8003a12 <HAL_RCC_OscConfig+0x2ea>
 8003a04:	4b64      	ldr	r3, [pc, #400]	; (8003b98 <HAL_RCC_OscConfig+0x470>)
 8003a06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a08:	4a63      	ldr	r2, [pc, #396]	; (8003b98 <HAL_RCC_OscConfig+0x470>)
 8003a0a:	f043 0301 	orr.w	r3, r3, #1
 8003a0e:	6713      	str	r3, [r2, #112]	; 0x70
 8003a10:	e01c      	b.n	8003a4c <HAL_RCC_OscConfig+0x324>
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	689b      	ldr	r3, [r3, #8]
 8003a16:	2b05      	cmp	r3, #5
 8003a18:	d10c      	bne.n	8003a34 <HAL_RCC_OscConfig+0x30c>
 8003a1a:	4b5f      	ldr	r3, [pc, #380]	; (8003b98 <HAL_RCC_OscConfig+0x470>)
 8003a1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a1e:	4a5e      	ldr	r2, [pc, #376]	; (8003b98 <HAL_RCC_OscConfig+0x470>)
 8003a20:	f043 0304 	orr.w	r3, r3, #4
 8003a24:	6713      	str	r3, [r2, #112]	; 0x70
 8003a26:	4b5c      	ldr	r3, [pc, #368]	; (8003b98 <HAL_RCC_OscConfig+0x470>)
 8003a28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a2a:	4a5b      	ldr	r2, [pc, #364]	; (8003b98 <HAL_RCC_OscConfig+0x470>)
 8003a2c:	f043 0301 	orr.w	r3, r3, #1
 8003a30:	6713      	str	r3, [r2, #112]	; 0x70
 8003a32:	e00b      	b.n	8003a4c <HAL_RCC_OscConfig+0x324>
 8003a34:	4b58      	ldr	r3, [pc, #352]	; (8003b98 <HAL_RCC_OscConfig+0x470>)
 8003a36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a38:	4a57      	ldr	r2, [pc, #348]	; (8003b98 <HAL_RCC_OscConfig+0x470>)
 8003a3a:	f023 0301 	bic.w	r3, r3, #1
 8003a3e:	6713      	str	r3, [r2, #112]	; 0x70
 8003a40:	4b55      	ldr	r3, [pc, #340]	; (8003b98 <HAL_RCC_OscConfig+0x470>)
 8003a42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a44:	4a54      	ldr	r2, [pc, #336]	; (8003b98 <HAL_RCC_OscConfig+0x470>)
 8003a46:	f023 0304 	bic.w	r3, r3, #4
 8003a4a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	689b      	ldr	r3, [r3, #8]
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d015      	beq.n	8003a80 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a54:	f7fd fc76 	bl	8001344 <HAL_GetTick>
 8003a58:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a5a:	e00a      	b.n	8003a72 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a5c:	f7fd fc72 	bl	8001344 <HAL_GetTick>
 8003a60:	4602      	mov	r2, r0
 8003a62:	693b      	ldr	r3, [r7, #16]
 8003a64:	1ad3      	subs	r3, r2, r3
 8003a66:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a6a:	4293      	cmp	r3, r2
 8003a6c:	d901      	bls.n	8003a72 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003a6e:	2303      	movs	r3, #3
 8003a70:	e0cb      	b.n	8003c0a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a72:	4b49      	ldr	r3, [pc, #292]	; (8003b98 <HAL_RCC_OscConfig+0x470>)
 8003a74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a76:	f003 0302 	and.w	r3, r3, #2
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d0ee      	beq.n	8003a5c <HAL_RCC_OscConfig+0x334>
 8003a7e:	e014      	b.n	8003aaa <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a80:	f7fd fc60 	bl	8001344 <HAL_GetTick>
 8003a84:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a86:	e00a      	b.n	8003a9e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a88:	f7fd fc5c 	bl	8001344 <HAL_GetTick>
 8003a8c:	4602      	mov	r2, r0
 8003a8e:	693b      	ldr	r3, [r7, #16]
 8003a90:	1ad3      	subs	r3, r2, r3
 8003a92:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a96:	4293      	cmp	r3, r2
 8003a98:	d901      	bls.n	8003a9e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003a9a:	2303      	movs	r3, #3
 8003a9c:	e0b5      	b.n	8003c0a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a9e:	4b3e      	ldr	r3, [pc, #248]	; (8003b98 <HAL_RCC_OscConfig+0x470>)
 8003aa0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003aa2:	f003 0302 	and.w	r3, r3, #2
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d1ee      	bne.n	8003a88 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003aaa:	7dfb      	ldrb	r3, [r7, #23]
 8003aac:	2b01      	cmp	r3, #1
 8003aae:	d105      	bne.n	8003abc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ab0:	4b39      	ldr	r3, [pc, #228]	; (8003b98 <HAL_RCC_OscConfig+0x470>)
 8003ab2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ab4:	4a38      	ldr	r2, [pc, #224]	; (8003b98 <HAL_RCC_OscConfig+0x470>)
 8003ab6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003aba:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	699b      	ldr	r3, [r3, #24]
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	f000 80a1 	beq.w	8003c08 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003ac6:	4b34      	ldr	r3, [pc, #208]	; (8003b98 <HAL_RCC_OscConfig+0x470>)
 8003ac8:	689b      	ldr	r3, [r3, #8]
 8003aca:	f003 030c 	and.w	r3, r3, #12
 8003ace:	2b08      	cmp	r3, #8
 8003ad0:	d05c      	beq.n	8003b8c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	699b      	ldr	r3, [r3, #24]
 8003ad6:	2b02      	cmp	r3, #2
 8003ad8:	d141      	bne.n	8003b5e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ada:	4b31      	ldr	r3, [pc, #196]	; (8003ba0 <HAL_RCC_OscConfig+0x478>)
 8003adc:	2200      	movs	r2, #0
 8003ade:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ae0:	f7fd fc30 	bl	8001344 <HAL_GetTick>
 8003ae4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ae6:	e008      	b.n	8003afa <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ae8:	f7fd fc2c 	bl	8001344 <HAL_GetTick>
 8003aec:	4602      	mov	r2, r0
 8003aee:	693b      	ldr	r3, [r7, #16]
 8003af0:	1ad3      	subs	r3, r2, r3
 8003af2:	2b02      	cmp	r3, #2
 8003af4:	d901      	bls.n	8003afa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003af6:	2303      	movs	r3, #3
 8003af8:	e087      	b.n	8003c0a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003afa:	4b27      	ldr	r3, [pc, #156]	; (8003b98 <HAL_RCC_OscConfig+0x470>)
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d1f0      	bne.n	8003ae8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	69da      	ldr	r2, [r3, #28]
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6a1b      	ldr	r3, [r3, #32]
 8003b0e:	431a      	orrs	r2, r3
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b14:	019b      	lsls	r3, r3, #6
 8003b16:	431a      	orrs	r2, r3
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b1c:	085b      	lsrs	r3, r3, #1
 8003b1e:	3b01      	subs	r3, #1
 8003b20:	041b      	lsls	r3, r3, #16
 8003b22:	431a      	orrs	r2, r3
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b28:	061b      	lsls	r3, r3, #24
 8003b2a:	491b      	ldr	r1, [pc, #108]	; (8003b98 <HAL_RCC_OscConfig+0x470>)
 8003b2c:	4313      	orrs	r3, r2
 8003b2e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003b30:	4b1b      	ldr	r3, [pc, #108]	; (8003ba0 <HAL_RCC_OscConfig+0x478>)
 8003b32:	2201      	movs	r2, #1
 8003b34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b36:	f7fd fc05 	bl	8001344 <HAL_GetTick>
 8003b3a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b3c:	e008      	b.n	8003b50 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b3e:	f7fd fc01 	bl	8001344 <HAL_GetTick>
 8003b42:	4602      	mov	r2, r0
 8003b44:	693b      	ldr	r3, [r7, #16]
 8003b46:	1ad3      	subs	r3, r2, r3
 8003b48:	2b02      	cmp	r3, #2
 8003b4a:	d901      	bls.n	8003b50 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003b4c:	2303      	movs	r3, #3
 8003b4e:	e05c      	b.n	8003c0a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b50:	4b11      	ldr	r3, [pc, #68]	; (8003b98 <HAL_RCC_OscConfig+0x470>)
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d0f0      	beq.n	8003b3e <HAL_RCC_OscConfig+0x416>
 8003b5c:	e054      	b.n	8003c08 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b5e:	4b10      	ldr	r3, [pc, #64]	; (8003ba0 <HAL_RCC_OscConfig+0x478>)
 8003b60:	2200      	movs	r2, #0
 8003b62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b64:	f7fd fbee 	bl	8001344 <HAL_GetTick>
 8003b68:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b6a:	e008      	b.n	8003b7e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b6c:	f7fd fbea 	bl	8001344 <HAL_GetTick>
 8003b70:	4602      	mov	r2, r0
 8003b72:	693b      	ldr	r3, [r7, #16]
 8003b74:	1ad3      	subs	r3, r2, r3
 8003b76:	2b02      	cmp	r3, #2
 8003b78:	d901      	bls.n	8003b7e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003b7a:	2303      	movs	r3, #3
 8003b7c:	e045      	b.n	8003c0a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b7e:	4b06      	ldr	r3, [pc, #24]	; (8003b98 <HAL_RCC_OscConfig+0x470>)
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d1f0      	bne.n	8003b6c <HAL_RCC_OscConfig+0x444>
 8003b8a:	e03d      	b.n	8003c08 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	699b      	ldr	r3, [r3, #24]
 8003b90:	2b01      	cmp	r3, #1
 8003b92:	d107      	bne.n	8003ba4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003b94:	2301      	movs	r3, #1
 8003b96:	e038      	b.n	8003c0a <HAL_RCC_OscConfig+0x4e2>
 8003b98:	40023800 	.word	0x40023800
 8003b9c:	40007000 	.word	0x40007000
 8003ba0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003ba4:	4b1b      	ldr	r3, [pc, #108]	; (8003c14 <HAL_RCC_OscConfig+0x4ec>)
 8003ba6:	685b      	ldr	r3, [r3, #4]
 8003ba8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	699b      	ldr	r3, [r3, #24]
 8003bae:	2b01      	cmp	r3, #1
 8003bb0:	d028      	beq.n	8003c04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003bbc:	429a      	cmp	r2, r3
 8003bbe:	d121      	bne.n	8003c04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003bca:	429a      	cmp	r2, r3
 8003bcc:	d11a      	bne.n	8003c04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003bce:	68fa      	ldr	r2, [r7, #12]
 8003bd0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003bd4:	4013      	ands	r3, r2
 8003bd6:	687a      	ldr	r2, [r7, #4]
 8003bd8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003bda:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003bdc:	4293      	cmp	r3, r2
 8003bde:	d111      	bne.n	8003c04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bea:	085b      	lsrs	r3, r3, #1
 8003bec:	3b01      	subs	r3, #1
 8003bee:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003bf0:	429a      	cmp	r2, r3
 8003bf2:	d107      	bne.n	8003c04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bfe:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003c00:	429a      	cmp	r2, r3
 8003c02:	d001      	beq.n	8003c08 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003c04:	2301      	movs	r3, #1
 8003c06:	e000      	b.n	8003c0a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003c08:	2300      	movs	r3, #0
}
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	3718      	adds	r7, #24
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	bd80      	pop	{r7, pc}
 8003c12:	bf00      	nop
 8003c14:	40023800 	.word	0x40023800

08003c18 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	b084      	sub	sp, #16
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
 8003c20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d101      	bne.n	8003c2c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003c28:	2301      	movs	r3, #1
 8003c2a:	e0cc      	b.n	8003dc6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003c2c:	4b68      	ldr	r3, [pc, #416]	; (8003dd0 <HAL_RCC_ClockConfig+0x1b8>)
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f003 0307 	and.w	r3, r3, #7
 8003c34:	683a      	ldr	r2, [r7, #0]
 8003c36:	429a      	cmp	r2, r3
 8003c38:	d90c      	bls.n	8003c54 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c3a:	4b65      	ldr	r3, [pc, #404]	; (8003dd0 <HAL_RCC_ClockConfig+0x1b8>)
 8003c3c:	683a      	ldr	r2, [r7, #0]
 8003c3e:	b2d2      	uxtb	r2, r2
 8003c40:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c42:	4b63      	ldr	r3, [pc, #396]	; (8003dd0 <HAL_RCC_ClockConfig+0x1b8>)
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f003 0307 	and.w	r3, r3, #7
 8003c4a:	683a      	ldr	r2, [r7, #0]
 8003c4c:	429a      	cmp	r2, r3
 8003c4e:	d001      	beq.n	8003c54 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003c50:	2301      	movs	r3, #1
 8003c52:	e0b8      	b.n	8003dc6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f003 0302 	and.w	r3, r3, #2
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d020      	beq.n	8003ca2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f003 0304 	and.w	r3, r3, #4
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d005      	beq.n	8003c78 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003c6c:	4b59      	ldr	r3, [pc, #356]	; (8003dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8003c6e:	689b      	ldr	r3, [r3, #8]
 8003c70:	4a58      	ldr	r2, [pc, #352]	; (8003dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8003c72:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003c76:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f003 0308 	and.w	r3, r3, #8
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d005      	beq.n	8003c90 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003c84:	4b53      	ldr	r3, [pc, #332]	; (8003dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8003c86:	689b      	ldr	r3, [r3, #8]
 8003c88:	4a52      	ldr	r2, [pc, #328]	; (8003dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8003c8a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003c8e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c90:	4b50      	ldr	r3, [pc, #320]	; (8003dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8003c92:	689b      	ldr	r3, [r3, #8]
 8003c94:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	689b      	ldr	r3, [r3, #8]
 8003c9c:	494d      	ldr	r1, [pc, #308]	; (8003dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8003c9e:	4313      	orrs	r3, r2
 8003ca0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f003 0301 	and.w	r3, r3, #1
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d044      	beq.n	8003d38 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	685b      	ldr	r3, [r3, #4]
 8003cb2:	2b01      	cmp	r3, #1
 8003cb4:	d107      	bne.n	8003cc6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003cb6:	4b47      	ldr	r3, [pc, #284]	; (8003dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d119      	bne.n	8003cf6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003cc2:	2301      	movs	r3, #1
 8003cc4:	e07f      	b.n	8003dc6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	685b      	ldr	r3, [r3, #4]
 8003cca:	2b02      	cmp	r3, #2
 8003ccc:	d003      	beq.n	8003cd6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003cd2:	2b03      	cmp	r3, #3
 8003cd4:	d107      	bne.n	8003ce6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003cd6:	4b3f      	ldr	r3, [pc, #252]	; (8003dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d109      	bne.n	8003cf6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ce2:	2301      	movs	r3, #1
 8003ce4:	e06f      	b.n	8003dc6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ce6:	4b3b      	ldr	r3, [pc, #236]	; (8003dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f003 0302 	and.w	r3, r3, #2
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d101      	bne.n	8003cf6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003cf2:	2301      	movs	r3, #1
 8003cf4:	e067      	b.n	8003dc6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003cf6:	4b37      	ldr	r3, [pc, #220]	; (8003dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8003cf8:	689b      	ldr	r3, [r3, #8]
 8003cfa:	f023 0203 	bic.w	r2, r3, #3
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	685b      	ldr	r3, [r3, #4]
 8003d02:	4934      	ldr	r1, [pc, #208]	; (8003dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8003d04:	4313      	orrs	r3, r2
 8003d06:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003d08:	f7fd fb1c 	bl	8001344 <HAL_GetTick>
 8003d0c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d0e:	e00a      	b.n	8003d26 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d10:	f7fd fb18 	bl	8001344 <HAL_GetTick>
 8003d14:	4602      	mov	r2, r0
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	1ad3      	subs	r3, r2, r3
 8003d1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d1e:	4293      	cmp	r3, r2
 8003d20:	d901      	bls.n	8003d26 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003d22:	2303      	movs	r3, #3
 8003d24:	e04f      	b.n	8003dc6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d26:	4b2b      	ldr	r3, [pc, #172]	; (8003dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8003d28:	689b      	ldr	r3, [r3, #8]
 8003d2a:	f003 020c 	and.w	r2, r3, #12
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	685b      	ldr	r3, [r3, #4]
 8003d32:	009b      	lsls	r3, r3, #2
 8003d34:	429a      	cmp	r2, r3
 8003d36:	d1eb      	bne.n	8003d10 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003d38:	4b25      	ldr	r3, [pc, #148]	; (8003dd0 <HAL_RCC_ClockConfig+0x1b8>)
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f003 0307 	and.w	r3, r3, #7
 8003d40:	683a      	ldr	r2, [r7, #0]
 8003d42:	429a      	cmp	r2, r3
 8003d44:	d20c      	bcs.n	8003d60 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d46:	4b22      	ldr	r3, [pc, #136]	; (8003dd0 <HAL_RCC_ClockConfig+0x1b8>)
 8003d48:	683a      	ldr	r2, [r7, #0]
 8003d4a:	b2d2      	uxtb	r2, r2
 8003d4c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d4e:	4b20      	ldr	r3, [pc, #128]	; (8003dd0 <HAL_RCC_ClockConfig+0x1b8>)
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f003 0307 	and.w	r3, r3, #7
 8003d56:	683a      	ldr	r2, [r7, #0]
 8003d58:	429a      	cmp	r2, r3
 8003d5a:	d001      	beq.n	8003d60 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003d5c:	2301      	movs	r3, #1
 8003d5e:	e032      	b.n	8003dc6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f003 0304 	and.w	r3, r3, #4
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d008      	beq.n	8003d7e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003d6c:	4b19      	ldr	r3, [pc, #100]	; (8003dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8003d6e:	689b      	ldr	r3, [r3, #8]
 8003d70:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	68db      	ldr	r3, [r3, #12]
 8003d78:	4916      	ldr	r1, [pc, #88]	; (8003dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8003d7a:	4313      	orrs	r3, r2
 8003d7c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f003 0308 	and.w	r3, r3, #8
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d009      	beq.n	8003d9e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003d8a:	4b12      	ldr	r3, [pc, #72]	; (8003dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8003d8c:	689b      	ldr	r3, [r3, #8]
 8003d8e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	691b      	ldr	r3, [r3, #16]
 8003d96:	00db      	lsls	r3, r3, #3
 8003d98:	490e      	ldr	r1, [pc, #56]	; (8003dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8003d9a:	4313      	orrs	r3, r2
 8003d9c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003d9e:	f000 f821 	bl	8003de4 <HAL_RCC_GetSysClockFreq>
 8003da2:	4602      	mov	r2, r0
 8003da4:	4b0b      	ldr	r3, [pc, #44]	; (8003dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8003da6:	689b      	ldr	r3, [r3, #8]
 8003da8:	091b      	lsrs	r3, r3, #4
 8003daa:	f003 030f 	and.w	r3, r3, #15
 8003dae:	490a      	ldr	r1, [pc, #40]	; (8003dd8 <HAL_RCC_ClockConfig+0x1c0>)
 8003db0:	5ccb      	ldrb	r3, [r1, r3]
 8003db2:	fa22 f303 	lsr.w	r3, r2, r3
 8003db6:	4a09      	ldr	r2, [pc, #36]	; (8003ddc <HAL_RCC_ClockConfig+0x1c4>)
 8003db8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003dba:	4b09      	ldr	r3, [pc, #36]	; (8003de0 <HAL_RCC_ClockConfig+0x1c8>)
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	f7fd fa7c 	bl	80012bc <HAL_InitTick>

  return HAL_OK;
 8003dc4:	2300      	movs	r3, #0
}
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	3710      	adds	r7, #16
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	bd80      	pop	{r7, pc}
 8003dce:	bf00      	nop
 8003dd0:	40023c00 	.word	0x40023c00
 8003dd4:	40023800 	.word	0x40023800
 8003dd8:	08009f00 	.word	0x08009f00
 8003ddc:	20000000 	.word	0x20000000
 8003de0:	20000028 	.word	0x20000028

08003de4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003de4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003de8:	b090      	sub	sp, #64	; 0x40
 8003dea:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003dec:	2300      	movs	r3, #0
 8003dee:	637b      	str	r3, [r7, #52]	; 0x34
 8003df0:	2300      	movs	r3, #0
 8003df2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003df4:	2300      	movs	r3, #0
 8003df6:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003df8:	2300      	movs	r3, #0
 8003dfa:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003dfc:	4b59      	ldr	r3, [pc, #356]	; (8003f64 <HAL_RCC_GetSysClockFreq+0x180>)
 8003dfe:	689b      	ldr	r3, [r3, #8]
 8003e00:	f003 030c 	and.w	r3, r3, #12
 8003e04:	2b08      	cmp	r3, #8
 8003e06:	d00d      	beq.n	8003e24 <HAL_RCC_GetSysClockFreq+0x40>
 8003e08:	2b08      	cmp	r3, #8
 8003e0a:	f200 80a1 	bhi.w	8003f50 <HAL_RCC_GetSysClockFreq+0x16c>
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d002      	beq.n	8003e18 <HAL_RCC_GetSysClockFreq+0x34>
 8003e12:	2b04      	cmp	r3, #4
 8003e14:	d003      	beq.n	8003e1e <HAL_RCC_GetSysClockFreq+0x3a>
 8003e16:	e09b      	b.n	8003f50 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003e18:	4b53      	ldr	r3, [pc, #332]	; (8003f68 <HAL_RCC_GetSysClockFreq+0x184>)
 8003e1a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003e1c:	e09b      	b.n	8003f56 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003e1e:	4b53      	ldr	r3, [pc, #332]	; (8003f6c <HAL_RCC_GetSysClockFreq+0x188>)
 8003e20:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003e22:	e098      	b.n	8003f56 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003e24:	4b4f      	ldr	r3, [pc, #316]	; (8003f64 <HAL_RCC_GetSysClockFreq+0x180>)
 8003e26:	685b      	ldr	r3, [r3, #4]
 8003e28:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003e2c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003e2e:	4b4d      	ldr	r3, [pc, #308]	; (8003f64 <HAL_RCC_GetSysClockFreq+0x180>)
 8003e30:	685b      	ldr	r3, [r3, #4]
 8003e32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d028      	beq.n	8003e8c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e3a:	4b4a      	ldr	r3, [pc, #296]	; (8003f64 <HAL_RCC_GetSysClockFreq+0x180>)
 8003e3c:	685b      	ldr	r3, [r3, #4]
 8003e3e:	099b      	lsrs	r3, r3, #6
 8003e40:	2200      	movs	r2, #0
 8003e42:	623b      	str	r3, [r7, #32]
 8003e44:	627a      	str	r2, [r7, #36]	; 0x24
 8003e46:	6a3b      	ldr	r3, [r7, #32]
 8003e48:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003e4c:	2100      	movs	r1, #0
 8003e4e:	4b47      	ldr	r3, [pc, #284]	; (8003f6c <HAL_RCC_GetSysClockFreq+0x188>)
 8003e50:	fb03 f201 	mul.w	r2, r3, r1
 8003e54:	2300      	movs	r3, #0
 8003e56:	fb00 f303 	mul.w	r3, r0, r3
 8003e5a:	4413      	add	r3, r2
 8003e5c:	4a43      	ldr	r2, [pc, #268]	; (8003f6c <HAL_RCC_GetSysClockFreq+0x188>)
 8003e5e:	fba0 1202 	umull	r1, r2, r0, r2
 8003e62:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003e64:	460a      	mov	r2, r1
 8003e66:	62ba      	str	r2, [r7, #40]	; 0x28
 8003e68:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003e6a:	4413      	add	r3, r2
 8003e6c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e70:	2200      	movs	r2, #0
 8003e72:	61bb      	str	r3, [r7, #24]
 8003e74:	61fa      	str	r2, [r7, #28]
 8003e76:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003e7a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003e7e:	f7fc f9ff 	bl	8000280 <__aeabi_uldivmod>
 8003e82:	4602      	mov	r2, r0
 8003e84:	460b      	mov	r3, r1
 8003e86:	4613      	mov	r3, r2
 8003e88:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003e8a:	e053      	b.n	8003f34 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e8c:	4b35      	ldr	r3, [pc, #212]	; (8003f64 <HAL_RCC_GetSysClockFreq+0x180>)
 8003e8e:	685b      	ldr	r3, [r3, #4]
 8003e90:	099b      	lsrs	r3, r3, #6
 8003e92:	2200      	movs	r2, #0
 8003e94:	613b      	str	r3, [r7, #16]
 8003e96:	617a      	str	r2, [r7, #20]
 8003e98:	693b      	ldr	r3, [r7, #16]
 8003e9a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003e9e:	f04f 0b00 	mov.w	fp, #0
 8003ea2:	4652      	mov	r2, sl
 8003ea4:	465b      	mov	r3, fp
 8003ea6:	f04f 0000 	mov.w	r0, #0
 8003eaa:	f04f 0100 	mov.w	r1, #0
 8003eae:	0159      	lsls	r1, r3, #5
 8003eb0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003eb4:	0150      	lsls	r0, r2, #5
 8003eb6:	4602      	mov	r2, r0
 8003eb8:	460b      	mov	r3, r1
 8003eba:	ebb2 080a 	subs.w	r8, r2, sl
 8003ebe:	eb63 090b 	sbc.w	r9, r3, fp
 8003ec2:	f04f 0200 	mov.w	r2, #0
 8003ec6:	f04f 0300 	mov.w	r3, #0
 8003eca:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003ece:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003ed2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003ed6:	ebb2 0408 	subs.w	r4, r2, r8
 8003eda:	eb63 0509 	sbc.w	r5, r3, r9
 8003ede:	f04f 0200 	mov.w	r2, #0
 8003ee2:	f04f 0300 	mov.w	r3, #0
 8003ee6:	00eb      	lsls	r3, r5, #3
 8003ee8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003eec:	00e2      	lsls	r2, r4, #3
 8003eee:	4614      	mov	r4, r2
 8003ef0:	461d      	mov	r5, r3
 8003ef2:	eb14 030a 	adds.w	r3, r4, sl
 8003ef6:	603b      	str	r3, [r7, #0]
 8003ef8:	eb45 030b 	adc.w	r3, r5, fp
 8003efc:	607b      	str	r3, [r7, #4]
 8003efe:	f04f 0200 	mov.w	r2, #0
 8003f02:	f04f 0300 	mov.w	r3, #0
 8003f06:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003f0a:	4629      	mov	r1, r5
 8003f0c:	028b      	lsls	r3, r1, #10
 8003f0e:	4621      	mov	r1, r4
 8003f10:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003f14:	4621      	mov	r1, r4
 8003f16:	028a      	lsls	r2, r1, #10
 8003f18:	4610      	mov	r0, r2
 8003f1a:	4619      	mov	r1, r3
 8003f1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f1e:	2200      	movs	r2, #0
 8003f20:	60bb      	str	r3, [r7, #8]
 8003f22:	60fa      	str	r2, [r7, #12]
 8003f24:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003f28:	f7fc f9aa 	bl	8000280 <__aeabi_uldivmod>
 8003f2c:	4602      	mov	r2, r0
 8003f2e:	460b      	mov	r3, r1
 8003f30:	4613      	mov	r3, r2
 8003f32:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003f34:	4b0b      	ldr	r3, [pc, #44]	; (8003f64 <HAL_RCC_GetSysClockFreq+0x180>)
 8003f36:	685b      	ldr	r3, [r3, #4]
 8003f38:	0c1b      	lsrs	r3, r3, #16
 8003f3a:	f003 0303 	and.w	r3, r3, #3
 8003f3e:	3301      	adds	r3, #1
 8003f40:	005b      	lsls	r3, r3, #1
 8003f42:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003f44:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003f46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f48:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f4c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003f4e:	e002      	b.n	8003f56 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003f50:	4b05      	ldr	r3, [pc, #20]	; (8003f68 <HAL_RCC_GetSysClockFreq+0x184>)
 8003f52:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003f54:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003f56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003f58:	4618      	mov	r0, r3
 8003f5a:	3740      	adds	r7, #64	; 0x40
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003f62:	bf00      	nop
 8003f64:	40023800 	.word	0x40023800
 8003f68:	00f42400 	.word	0x00f42400
 8003f6c:	017d7840 	.word	0x017d7840

08003f70 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003f70:	b480      	push	{r7}
 8003f72:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003f74:	4b03      	ldr	r3, [pc, #12]	; (8003f84 <HAL_RCC_GetHCLKFreq+0x14>)
 8003f76:	681b      	ldr	r3, [r3, #0]
}
 8003f78:	4618      	mov	r0, r3
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f80:	4770      	bx	lr
 8003f82:	bf00      	nop
 8003f84:	20000000 	.word	0x20000000

08003f88 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003f8c:	f7ff fff0 	bl	8003f70 <HAL_RCC_GetHCLKFreq>
 8003f90:	4602      	mov	r2, r0
 8003f92:	4b05      	ldr	r3, [pc, #20]	; (8003fa8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003f94:	689b      	ldr	r3, [r3, #8]
 8003f96:	0a9b      	lsrs	r3, r3, #10
 8003f98:	f003 0307 	and.w	r3, r3, #7
 8003f9c:	4903      	ldr	r1, [pc, #12]	; (8003fac <HAL_RCC_GetPCLK1Freq+0x24>)
 8003f9e:	5ccb      	ldrb	r3, [r1, r3]
 8003fa0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	bd80      	pop	{r7, pc}
 8003fa8:	40023800 	.word	0x40023800
 8003fac:	08009f10 	.word	0x08009f10

08003fb0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003fb4:	f7ff ffdc 	bl	8003f70 <HAL_RCC_GetHCLKFreq>
 8003fb8:	4602      	mov	r2, r0
 8003fba:	4b05      	ldr	r3, [pc, #20]	; (8003fd0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003fbc:	689b      	ldr	r3, [r3, #8]
 8003fbe:	0b5b      	lsrs	r3, r3, #13
 8003fc0:	f003 0307 	and.w	r3, r3, #7
 8003fc4:	4903      	ldr	r1, [pc, #12]	; (8003fd4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003fc6:	5ccb      	ldrb	r3, [r1, r3]
 8003fc8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003fcc:	4618      	mov	r0, r3
 8003fce:	bd80      	pop	{r7, pc}
 8003fd0:	40023800 	.word	0x40023800
 8003fd4:	08009f10 	.word	0x08009f10

08003fd8 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	b086      	sub	sp, #24
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003fe0:	2300      	movs	r3, #0
 8003fe2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8003fe4:	2300      	movs	r3, #0
 8003fe6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f003 0301 	and.w	r3, r3, #1
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d105      	bne.n	8004000 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d038      	beq.n	8004072 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004000:	4b68      	ldr	r3, [pc, #416]	; (80041a4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004002:	2200      	movs	r2, #0
 8004004:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004006:	f7fd f99d 	bl	8001344 <HAL_GetTick>
 800400a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800400c:	e008      	b.n	8004020 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800400e:	f7fd f999 	bl	8001344 <HAL_GetTick>
 8004012:	4602      	mov	r2, r0
 8004014:	697b      	ldr	r3, [r7, #20]
 8004016:	1ad3      	subs	r3, r2, r3
 8004018:	2b02      	cmp	r3, #2
 800401a:	d901      	bls.n	8004020 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800401c:	2303      	movs	r3, #3
 800401e:	e0bd      	b.n	800419c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004020:	4b61      	ldr	r3, [pc, #388]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004028:	2b00      	cmp	r3, #0
 800402a:	d1f0      	bne.n	800400e <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	685a      	ldr	r2, [r3, #4]
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	689b      	ldr	r3, [r3, #8]
 8004034:	019b      	lsls	r3, r3, #6
 8004036:	431a      	orrs	r2, r3
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	68db      	ldr	r3, [r3, #12]
 800403c:	071b      	lsls	r3, r3, #28
 800403e:	495a      	ldr	r1, [pc, #360]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004040:	4313      	orrs	r3, r2
 8004042:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004046:	4b57      	ldr	r3, [pc, #348]	; (80041a4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004048:	2201      	movs	r2, #1
 800404a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800404c:	f7fd f97a 	bl	8001344 <HAL_GetTick>
 8004050:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004052:	e008      	b.n	8004066 <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004054:	f7fd f976 	bl	8001344 <HAL_GetTick>
 8004058:	4602      	mov	r2, r0
 800405a:	697b      	ldr	r3, [r7, #20]
 800405c:	1ad3      	subs	r3, r2, r3
 800405e:	2b02      	cmp	r3, #2
 8004060:	d901      	bls.n	8004066 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004062:	2303      	movs	r3, #3
 8004064:	e09a      	b.n	800419c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004066:	4b50      	ldr	r3, [pc, #320]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800406e:	2b00      	cmp	r3, #0
 8004070:	d0f0      	beq.n	8004054 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f003 0302 	and.w	r3, r3, #2
 800407a:	2b00      	cmp	r3, #0
 800407c:	f000 8083 	beq.w	8004186 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004080:	2300      	movs	r3, #0
 8004082:	60fb      	str	r3, [r7, #12]
 8004084:	4b48      	ldr	r3, [pc, #288]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004086:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004088:	4a47      	ldr	r2, [pc, #284]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800408a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800408e:	6413      	str	r3, [r2, #64]	; 0x40
 8004090:	4b45      	ldr	r3, [pc, #276]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004092:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004094:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004098:	60fb      	str	r3, [r7, #12]
 800409a:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800409c:	4b43      	ldr	r3, [pc, #268]	; (80041ac <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	4a42      	ldr	r2, [pc, #264]	; (80041ac <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80040a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80040a6:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80040a8:	f7fd f94c 	bl	8001344 <HAL_GetTick>
 80040ac:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80040ae:	e008      	b.n	80040c2 <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80040b0:	f7fd f948 	bl	8001344 <HAL_GetTick>
 80040b4:	4602      	mov	r2, r0
 80040b6:	697b      	ldr	r3, [r7, #20]
 80040b8:	1ad3      	subs	r3, r2, r3
 80040ba:	2b02      	cmp	r3, #2
 80040bc:	d901      	bls.n	80040c2 <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 80040be:	2303      	movs	r3, #3
 80040c0:	e06c      	b.n	800419c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80040c2:	4b3a      	ldr	r3, [pc, #232]	; (80041ac <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d0f0      	beq.n	80040b0 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80040ce:	4b36      	ldr	r3, [pc, #216]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80040d6:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80040d8:	693b      	ldr	r3, [r7, #16]
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d02f      	beq.n	800413e <HAL_RCCEx_PeriphCLKConfig+0x166>
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	691b      	ldr	r3, [r3, #16]
 80040e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80040e6:	693a      	ldr	r2, [r7, #16]
 80040e8:	429a      	cmp	r2, r3
 80040ea:	d028      	beq.n	800413e <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80040ec:	4b2e      	ldr	r3, [pc, #184]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80040f4:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80040f6:	4b2e      	ldr	r3, [pc, #184]	; (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80040f8:	2201      	movs	r2, #1
 80040fa:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80040fc:	4b2c      	ldr	r3, [pc, #176]	; (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80040fe:	2200      	movs	r2, #0
 8004100:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004102:	4a29      	ldr	r2, [pc, #164]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004104:	693b      	ldr	r3, [r7, #16]
 8004106:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004108:	4b27      	ldr	r3, [pc, #156]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800410a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800410c:	f003 0301 	and.w	r3, r3, #1
 8004110:	2b01      	cmp	r3, #1
 8004112:	d114      	bne.n	800413e <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004114:	f7fd f916 	bl	8001344 <HAL_GetTick>
 8004118:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800411a:	e00a      	b.n	8004132 <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800411c:	f7fd f912 	bl	8001344 <HAL_GetTick>
 8004120:	4602      	mov	r2, r0
 8004122:	697b      	ldr	r3, [r7, #20]
 8004124:	1ad3      	subs	r3, r2, r3
 8004126:	f241 3288 	movw	r2, #5000	; 0x1388
 800412a:	4293      	cmp	r3, r2
 800412c:	d901      	bls.n	8004132 <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 800412e:	2303      	movs	r3, #3
 8004130:	e034      	b.n	800419c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004132:	4b1d      	ldr	r3, [pc, #116]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004134:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004136:	f003 0302 	and.w	r3, r3, #2
 800413a:	2b00      	cmp	r3, #0
 800413c:	d0ee      	beq.n	800411c <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	691b      	ldr	r3, [r3, #16]
 8004142:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004146:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800414a:	d10d      	bne.n	8004168 <HAL_RCCEx_PeriphCLKConfig+0x190>
 800414c:	4b16      	ldr	r3, [pc, #88]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800414e:	689b      	ldr	r3, [r3, #8]
 8004150:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	691b      	ldr	r3, [r3, #16]
 8004158:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800415c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004160:	4911      	ldr	r1, [pc, #68]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004162:	4313      	orrs	r3, r2
 8004164:	608b      	str	r3, [r1, #8]
 8004166:	e005      	b.n	8004174 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8004168:	4b0f      	ldr	r3, [pc, #60]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800416a:	689b      	ldr	r3, [r3, #8]
 800416c:	4a0e      	ldr	r2, [pc, #56]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800416e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004172:	6093      	str	r3, [r2, #8]
 8004174:	4b0c      	ldr	r3, [pc, #48]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004176:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	691b      	ldr	r3, [r3, #16]
 800417c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004180:	4909      	ldr	r1, [pc, #36]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004182:	4313      	orrs	r3, r2
 8004184:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f003 0308 	and.w	r3, r3, #8
 800418e:	2b00      	cmp	r3, #0
 8004190:	d003      	beq.n	800419a <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	7d1a      	ldrb	r2, [r3, #20]
 8004196:	4b07      	ldr	r3, [pc, #28]	; (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8004198:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 800419a:	2300      	movs	r3, #0
}
 800419c:	4618      	mov	r0, r3
 800419e:	3718      	adds	r7, #24
 80041a0:	46bd      	mov	sp, r7
 80041a2:	bd80      	pop	{r7, pc}
 80041a4:	42470068 	.word	0x42470068
 80041a8:	40023800 	.word	0x40023800
 80041ac:	40007000 	.word	0x40007000
 80041b0:	42470e40 	.word	0x42470e40
 80041b4:	424711e0 	.word	0x424711e0

080041b8 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80041b8:	b580      	push	{r7, lr}
 80041ba:	b082      	sub	sp, #8
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d101      	bne.n	80041ca <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 80041c6:	2301      	movs	r3, #1
 80041c8:	e083      	b.n	80042d2 <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	7f5b      	ldrb	r3, [r3, #29]
 80041ce:	b2db      	uxtb	r3, r3
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d105      	bne.n	80041e0 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2200      	movs	r2, #0
 80041d8:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80041da:	6878      	ldr	r0, [r7, #4]
 80041dc:	f7fc fd96 	bl	8000d0c <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2202      	movs	r2, #2
 80041e4:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	22ca      	movs	r2, #202	; 0xca
 80041ec:	625a      	str	r2, [r3, #36]	; 0x24
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	2253      	movs	r2, #83	; 0x53
 80041f4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80041f6:	6878      	ldr	r0, [r7, #4]
 80041f8:	f000 f897 	bl	800432a <RTC_EnterInitMode>
 80041fc:	4603      	mov	r3, r0
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d008      	beq.n	8004214 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	22ff      	movs	r2, #255	; 0xff
 8004208:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	2204      	movs	r2, #4
 800420e:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8004210:	2301      	movs	r3, #1
 8004212:	e05e      	b.n	80042d2 <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	689b      	ldr	r3, [r3, #8]
 800421a:	687a      	ldr	r2, [r7, #4]
 800421c:	6812      	ldr	r2, [r2, #0]
 800421e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8004222:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004226:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	6899      	ldr	r1, [r3, #8]
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	685a      	ldr	r2, [r3, #4]
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	691b      	ldr	r3, [r3, #16]
 8004236:	431a      	orrs	r2, r3
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	695b      	ldr	r3, [r3, #20]
 800423c:	431a      	orrs	r2, r3
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	430a      	orrs	r2, r1
 8004244:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	687a      	ldr	r2, [r7, #4]
 800424c:	68d2      	ldr	r2, [r2, #12]
 800424e:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	6919      	ldr	r1, [r3, #16]
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	689b      	ldr	r3, [r3, #8]
 800425a:	041a      	lsls	r2, r3, #16
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	430a      	orrs	r2, r1
 8004262:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	68da      	ldr	r2, [r3, #12]
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004272:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	689b      	ldr	r3, [r3, #8]
 800427a:	f003 0320 	and.w	r3, r3, #32
 800427e:	2b00      	cmp	r3, #0
 8004280:	d10e      	bne.n	80042a0 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004282:	6878      	ldr	r0, [r7, #4]
 8004284:	f000 f829 	bl	80042da <HAL_RTC_WaitForSynchro>
 8004288:	4603      	mov	r3, r0
 800428a:	2b00      	cmp	r3, #0
 800428c:	d008      	beq.n	80042a0 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	22ff      	movs	r2, #255	; 0xff
 8004294:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	2204      	movs	r2, #4
 800429a:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 800429c:	2301      	movs	r3, #1
 800429e:	e018      	b.n	80042d2 <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80042ae:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	699a      	ldr	r2, [r3, #24]
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	430a      	orrs	r2, r1
 80042c0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	22ff      	movs	r2, #255	; 0xff
 80042c8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	2201      	movs	r2, #1
 80042ce:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 80042d0:	2300      	movs	r3, #0
  }
}
 80042d2:	4618      	mov	r0, r3
 80042d4:	3708      	adds	r7, #8
 80042d6:	46bd      	mov	sp, r7
 80042d8:	bd80      	pop	{r7, pc}

080042da <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 80042da:	b580      	push	{r7, lr}
 80042dc:	b084      	sub	sp, #16
 80042de:	af00      	add	r7, sp, #0
 80042e0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80042e2:	2300      	movs	r3, #0
 80042e4:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	68da      	ldr	r2, [r3, #12]
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80042f4:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80042f6:	f7fd f825 	bl	8001344 <HAL_GetTick>
 80042fa:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80042fc:	e009      	b.n	8004312 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80042fe:	f7fd f821 	bl	8001344 <HAL_GetTick>
 8004302:	4602      	mov	r2, r0
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	1ad3      	subs	r3, r2, r3
 8004308:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800430c:	d901      	bls.n	8004312 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800430e:	2303      	movs	r3, #3
 8004310:	e007      	b.n	8004322 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	68db      	ldr	r3, [r3, #12]
 8004318:	f003 0320 	and.w	r3, r3, #32
 800431c:	2b00      	cmp	r3, #0
 800431e:	d0ee      	beq.n	80042fe <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8004320:	2300      	movs	r3, #0
}
 8004322:	4618      	mov	r0, r3
 8004324:	3710      	adds	r7, #16
 8004326:	46bd      	mov	sp, r7
 8004328:	bd80      	pop	{r7, pc}

0800432a <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 800432a:	b580      	push	{r7, lr}
 800432c:	b084      	sub	sp, #16
 800432e:	af00      	add	r7, sp, #0
 8004330:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004332:	2300      	movs	r3, #0
 8004334:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	68db      	ldr	r3, [r3, #12]
 800433c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004340:	2b00      	cmp	r3, #0
 8004342:	d119      	bne.n	8004378 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f04f 32ff 	mov.w	r2, #4294967295
 800434c:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800434e:	f7fc fff9 	bl	8001344 <HAL_GetTick>
 8004352:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8004354:	e009      	b.n	800436a <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8004356:	f7fc fff5 	bl	8001344 <HAL_GetTick>
 800435a:	4602      	mov	r2, r0
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	1ad3      	subs	r3, r2, r3
 8004360:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004364:	d901      	bls.n	800436a <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8004366:	2303      	movs	r3, #3
 8004368:	e007      	b.n	800437a <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	68db      	ldr	r3, [r3, #12]
 8004370:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004374:	2b00      	cmp	r3, #0
 8004376:	d0ee      	beq.n	8004356 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8004378:	2300      	movs	r3, #0
}
 800437a:	4618      	mov	r0, r3
 800437c:	3710      	adds	r7, #16
 800437e:	46bd      	mov	sp, r7
 8004380:	bd80      	pop	{r7, pc}

08004382 <HAL_RTCEx_BKUPWrite>:
  *                                 specify the register.
  * @param  Data Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8004382:	b480      	push	{r7}
 8004384:	b087      	sub	sp, #28
 8004386:	af00      	add	r7, sp, #0
 8004388:	60f8      	str	r0, [r7, #12]
 800438a:	60b9      	str	r1, [r7, #8]
 800438c:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 800438e:	2300      	movs	r3, #0
 8004390:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	3350      	adds	r3, #80	; 0x50
 8004398:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 800439a:	68bb      	ldr	r3, [r7, #8]
 800439c:	009b      	lsls	r3, r3, #2
 800439e:	697a      	ldr	r2, [r7, #20]
 80043a0:	4413      	add	r3, r2
 80043a2:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 80043a4:	697b      	ldr	r3, [r7, #20]
 80043a6:	687a      	ldr	r2, [r7, #4]
 80043a8:	601a      	str	r2, [r3, #0]
}
 80043aa:	bf00      	nop
 80043ac:	371c      	adds	r7, #28
 80043ae:	46bd      	mov	sp, r7
 80043b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b4:	4770      	bx	lr

080043b6 <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx where x can be from 0 to 19 to
  *                                 specify the register.
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 80043b6:	b480      	push	{r7}
 80043b8:	b085      	sub	sp, #20
 80043ba:	af00      	add	r7, sp, #0
 80043bc:	6078      	str	r0, [r7, #4]
 80043be:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0U;
 80043c0:	2300      	movs	r3, #0
 80043c2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	3350      	adds	r3, #80	; 0x50
 80043ca:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	009b      	lsls	r3, r3, #2
 80043d0:	68fa      	ldr	r2, [r7, #12]
 80043d2:	4413      	add	r3, r2
 80043d4:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	681b      	ldr	r3, [r3, #0]
}
 80043da:	4618      	mov	r0, r3
 80043dc:	3714      	adds	r7, #20
 80043de:	46bd      	mov	sp, r7
 80043e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e4:	4770      	bx	lr

080043e6 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80043e6:	b580      	push	{r7, lr}
 80043e8:	b082      	sub	sp, #8
 80043ea:	af00      	add	r7, sp, #0
 80043ec:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d101      	bne.n	80043f8 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80043f4:	2301      	movs	r3, #1
 80043f6:	e03f      	b.n	8004478 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043fe:	b2db      	uxtb	r3, r3
 8004400:	2b00      	cmp	r3, #0
 8004402:	d106      	bne.n	8004412 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2200      	movs	r2, #0
 8004408:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800440c:	6878      	ldr	r0, [r7, #4]
 800440e:	f7fc fe3f 	bl	8001090 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	2224      	movs	r2, #36	; 0x24
 8004416:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	68da      	ldr	r2, [r3, #12]
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004428:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800442a:	6878      	ldr	r0, [r7, #4]
 800442c:	f000 ff8a 	bl	8005344 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	691a      	ldr	r2, [r3, #16]
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800443e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	695a      	ldr	r2, [r3, #20]
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800444e:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	68da      	ldr	r2, [r3, #12]
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800445e:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2200      	movs	r2, #0
 8004464:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	2220      	movs	r2, #32
 800446a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	2220      	movs	r2, #32
 8004472:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004476:	2300      	movs	r3, #0
}
 8004478:	4618      	mov	r0, r3
 800447a:	3708      	adds	r7, #8
 800447c:	46bd      	mov	sp, r7
 800447e:	bd80      	pop	{r7, pc}

08004480 <HAL_UART_DeInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8004480:	b580      	push	{r7, lr}
 8004482:	b082      	sub	sp, #8
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2b00      	cmp	r3, #0
 800448c:	d101      	bne.n	8004492 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 800448e:	2301      	movs	r3, #1
 8004490:	e021      	b.n	80044d6 <HAL_UART_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	2224      	movs	r2, #36	; 0x24
 8004496:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	68da      	ldr	r2, [r3, #12]
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80044a8:	60da      	str	r2, [r3, #12]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 80044aa:	6878      	ldr	r0, [r7, #4]
 80044ac:	f7fc fe74 	bl	8001198 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2200      	movs	r2, #0
 80044b4:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_RESET;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	2200      	movs	r2, #0
 80044ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_RESET;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	2200      	movs	r2, #0
 80044c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	2200      	movs	r2, #0
 80044ca:	631a      	str	r2, [r3, #48]	; 0x30

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2200      	movs	r2, #0
 80044d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80044d4:	2300      	movs	r3, #0
}
 80044d6:	4618      	mov	r0, r3
 80044d8:	3708      	adds	r7, #8
 80044da:	46bd      	mov	sp, r7
 80044dc:	bd80      	pop	{r7, pc}

080044de <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80044de:	b580      	push	{r7, lr}
 80044e0:	b08a      	sub	sp, #40	; 0x28
 80044e2:	af02      	add	r7, sp, #8
 80044e4:	60f8      	str	r0, [r7, #12]
 80044e6:	60b9      	str	r1, [r7, #8]
 80044e8:	603b      	str	r3, [r7, #0]
 80044ea:	4613      	mov	r3, r2
 80044ec:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80044ee:	2300      	movs	r3, #0
 80044f0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044f8:	b2db      	uxtb	r3, r3
 80044fa:	2b20      	cmp	r3, #32
 80044fc:	d17c      	bne.n	80045f8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80044fe:	68bb      	ldr	r3, [r7, #8]
 8004500:	2b00      	cmp	r3, #0
 8004502:	d002      	beq.n	800450a <HAL_UART_Transmit+0x2c>
 8004504:	88fb      	ldrh	r3, [r7, #6]
 8004506:	2b00      	cmp	r3, #0
 8004508:	d101      	bne.n	800450e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800450a:	2301      	movs	r3, #1
 800450c:	e075      	b.n	80045fa <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004514:	2b01      	cmp	r3, #1
 8004516:	d101      	bne.n	800451c <HAL_UART_Transmit+0x3e>
 8004518:	2302      	movs	r3, #2
 800451a:	e06e      	b.n	80045fa <HAL_UART_Transmit+0x11c>
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	2201      	movs	r2, #1
 8004520:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	2200      	movs	r2, #0
 8004528:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	2221      	movs	r2, #33	; 0x21
 800452e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004532:	f7fc ff07 	bl	8001344 <HAL_GetTick>
 8004536:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	88fa      	ldrh	r2, [r7, #6]
 800453c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	88fa      	ldrh	r2, [r7, #6]
 8004542:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	689b      	ldr	r3, [r3, #8]
 8004548:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800454c:	d108      	bne.n	8004560 <HAL_UART_Transmit+0x82>
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	691b      	ldr	r3, [r3, #16]
 8004552:	2b00      	cmp	r3, #0
 8004554:	d104      	bne.n	8004560 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004556:	2300      	movs	r3, #0
 8004558:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800455a:	68bb      	ldr	r3, [r7, #8]
 800455c:	61bb      	str	r3, [r7, #24]
 800455e:	e003      	b.n	8004568 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004560:	68bb      	ldr	r3, [r7, #8]
 8004562:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004564:	2300      	movs	r3, #0
 8004566:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	2200      	movs	r2, #0
 800456c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004570:	e02a      	b.n	80045c8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004572:	683b      	ldr	r3, [r7, #0]
 8004574:	9300      	str	r3, [sp, #0]
 8004576:	697b      	ldr	r3, [r7, #20]
 8004578:	2200      	movs	r2, #0
 800457a:	2180      	movs	r1, #128	; 0x80
 800457c:	68f8      	ldr	r0, [r7, #12]
 800457e:	f000 fc17 	bl	8004db0 <UART_WaitOnFlagUntilTimeout>
 8004582:	4603      	mov	r3, r0
 8004584:	2b00      	cmp	r3, #0
 8004586:	d001      	beq.n	800458c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004588:	2303      	movs	r3, #3
 800458a:	e036      	b.n	80045fa <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800458c:	69fb      	ldr	r3, [r7, #28]
 800458e:	2b00      	cmp	r3, #0
 8004590:	d10b      	bne.n	80045aa <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004592:	69bb      	ldr	r3, [r7, #24]
 8004594:	881b      	ldrh	r3, [r3, #0]
 8004596:	461a      	mov	r2, r3
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80045a0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80045a2:	69bb      	ldr	r3, [r7, #24]
 80045a4:	3302      	adds	r3, #2
 80045a6:	61bb      	str	r3, [r7, #24]
 80045a8:	e007      	b.n	80045ba <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80045aa:	69fb      	ldr	r3, [r7, #28]
 80045ac:	781a      	ldrb	r2, [r3, #0]
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80045b4:	69fb      	ldr	r3, [r7, #28]
 80045b6:	3301      	adds	r3, #1
 80045b8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80045be:	b29b      	uxth	r3, r3
 80045c0:	3b01      	subs	r3, #1
 80045c2:	b29a      	uxth	r2, r3
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80045cc:	b29b      	uxth	r3, r3
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d1cf      	bne.n	8004572 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80045d2:	683b      	ldr	r3, [r7, #0]
 80045d4:	9300      	str	r3, [sp, #0]
 80045d6:	697b      	ldr	r3, [r7, #20]
 80045d8:	2200      	movs	r2, #0
 80045da:	2140      	movs	r1, #64	; 0x40
 80045dc:	68f8      	ldr	r0, [r7, #12]
 80045de:	f000 fbe7 	bl	8004db0 <UART_WaitOnFlagUntilTimeout>
 80045e2:	4603      	mov	r3, r0
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d001      	beq.n	80045ec <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80045e8:	2303      	movs	r3, #3
 80045ea:	e006      	b.n	80045fa <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	2220      	movs	r2, #32
 80045f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80045f4:	2300      	movs	r3, #0
 80045f6:	e000      	b.n	80045fa <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80045f8:	2302      	movs	r3, #2
  }
}
 80045fa:	4618      	mov	r0, r3
 80045fc:	3720      	adds	r7, #32
 80045fe:	46bd      	mov	sp, r7
 8004600:	bd80      	pop	{r7, pc}

08004602 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004602:	b580      	push	{r7, lr}
 8004604:	b084      	sub	sp, #16
 8004606:	af00      	add	r7, sp, #0
 8004608:	60f8      	str	r0, [r7, #12]
 800460a:	60b9      	str	r1, [r7, #8]
 800460c:	4613      	mov	r3, r2
 800460e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004616:	b2db      	uxtb	r3, r3
 8004618:	2b20      	cmp	r3, #32
 800461a:	d11d      	bne.n	8004658 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800461c:	68bb      	ldr	r3, [r7, #8]
 800461e:	2b00      	cmp	r3, #0
 8004620:	d002      	beq.n	8004628 <HAL_UART_Receive_DMA+0x26>
 8004622:	88fb      	ldrh	r3, [r7, #6]
 8004624:	2b00      	cmp	r3, #0
 8004626:	d101      	bne.n	800462c <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8004628:	2301      	movs	r3, #1
 800462a:	e016      	b.n	800465a <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004632:	2b01      	cmp	r3, #1
 8004634:	d101      	bne.n	800463a <HAL_UART_Receive_DMA+0x38>
 8004636:	2302      	movs	r3, #2
 8004638:	e00f      	b.n	800465a <HAL_UART_Receive_DMA+0x58>
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	2201      	movs	r2, #1
 800463e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	2200      	movs	r2, #0
 8004646:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8004648:	88fb      	ldrh	r3, [r7, #6]
 800464a:	461a      	mov	r2, r3
 800464c:	68b9      	ldr	r1, [r7, #8]
 800464e:	68f8      	ldr	r0, [r7, #12]
 8004650:	f000 fc1c 	bl	8004e8c <UART_Start_Receive_DMA>
 8004654:	4603      	mov	r3, r0
 8004656:	e000      	b.n	800465a <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8004658:	2302      	movs	r3, #2
  }
}
 800465a:	4618      	mov	r0, r3
 800465c:	3710      	adds	r7, #16
 800465e:	46bd      	mov	sp, r7
 8004660:	bd80      	pop	{r7, pc}
	...

08004664 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004664:	b580      	push	{r7, lr}
 8004666:	b0ba      	sub	sp, #232	; 0xe8
 8004668:	af00      	add	r7, sp, #0
 800466a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	68db      	ldr	r3, [r3, #12]
 800467c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	695b      	ldr	r3, [r3, #20]
 8004686:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800468a:	2300      	movs	r3, #0
 800468c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004690:	2300      	movs	r3, #0
 8004692:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004696:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800469a:	f003 030f 	and.w	r3, r3, #15
 800469e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80046a2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d10f      	bne.n	80046ca <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80046aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046ae:	f003 0320 	and.w	r3, r3, #32
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d009      	beq.n	80046ca <HAL_UART_IRQHandler+0x66>
 80046b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80046ba:	f003 0320 	and.w	r3, r3, #32
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d003      	beq.n	80046ca <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80046c2:	6878      	ldr	r0, [r7, #4]
 80046c4:	f000 fd83 	bl	80051ce <UART_Receive_IT>
      return;
 80046c8:	e256      	b.n	8004b78 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80046ca:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	f000 80de 	beq.w	8004890 <HAL_UART_IRQHandler+0x22c>
 80046d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80046d8:	f003 0301 	and.w	r3, r3, #1
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d106      	bne.n	80046ee <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80046e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80046e4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	f000 80d1 	beq.w	8004890 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80046ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046f2:	f003 0301 	and.w	r3, r3, #1
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d00b      	beq.n	8004712 <HAL_UART_IRQHandler+0xae>
 80046fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80046fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004702:	2b00      	cmp	r3, #0
 8004704:	d005      	beq.n	8004712 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800470a:	f043 0201 	orr.w	r2, r3, #1
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004712:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004716:	f003 0304 	and.w	r3, r3, #4
 800471a:	2b00      	cmp	r3, #0
 800471c:	d00b      	beq.n	8004736 <HAL_UART_IRQHandler+0xd2>
 800471e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004722:	f003 0301 	and.w	r3, r3, #1
 8004726:	2b00      	cmp	r3, #0
 8004728:	d005      	beq.n	8004736 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800472e:	f043 0202 	orr.w	r2, r3, #2
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004736:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800473a:	f003 0302 	and.w	r3, r3, #2
 800473e:	2b00      	cmp	r3, #0
 8004740:	d00b      	beq.n	800475a <HAL_UART_IRQHandler+0xf6>
 8004742:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004746:	f003 0301 	and.w	r3, r3, #1
 800474a:	2b00      	cmp	r3, #0
 800474c:	d005      	beq.n	800475a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004752:	f043 0204 	orr.w	r2, r3, #4
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800475a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800475e:	f003 0308 	and.w	r3, r3, #8
 8004762:	2b00      	cmp	r3, #0
 8004764:	d011      	beq.n	800478a <HAL_UART_IRQHandler+0x126>
 8004766:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800476a:	f003 0320 	and.w	r3, r3, #32
 800476e:	2b00      	cmp	r3, #0
 8004770:	d105      	bne.n	800477e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004772:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004776:	f003 0301 	and.w	r3, r3, #1
 800477a:	2b00      	cmp	r3, #0
 800477c:	d005      	beq.n	800478a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004782:	f043 0208 	orr.w	r2, r3, #8
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800478e:	2b00      	cmp	r3, #0
 8004790:	f000 81ed 	beq.w	8004b6e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004794:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004798:	f003 0320 	and.w	r3, r3, #32
 800479c:	2b00      	cmp	r3, #0
 800479e:	d008      	beq.n	80047b2 <HAL_UART_IRQHandler+0x14e>
 80047a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80047a4:	f003 0320 	and.w	r3, r3, #32
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d002      	beq.n	80047b2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80047ac:	6878      	ldr	r0, [r7, #4]
 80047ae:	f000 fd0e 	bl	80051ce <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	695b      	ldr	r3, [r3, #20]
 80047b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047bc:	2b40      	cmp	r3, #64	; 0x40
 80047be:	bf0c      	ite	eq
 80047c0:	2301      	moveq	r3, #1
 80047c2:	2300      	movne	r3, #0
 80047c4:	b2db      	uxtb	r3, r3
 80047c6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047ce:	f003 0308 	and.w	r3, r3, #8
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d103      	bne.n	80047de <HAL_UART_IRQHandler+0x17a>
 80047d6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d04f      	beq.n	800487e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80047de:	6878      	ldr	r0, [r7, #4]
 80047e0:	f000 fc16 	bl	8005010 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	695b      	ldr	r3, [r3, #20]
 80047ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047ee:	2b40      	cmp	r3, #64	; 0x40
 80047f0:	d141      	bne.n	8004876 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	3314      	adds	r3, #20
 80047f8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047fc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004800:	e853 3f00 	ldrex	r3, [r3]
 8004804:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004808:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800480c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004810:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	3314      	adds	r3, #20
 800481a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800481e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004822:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004826:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800482a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800482e:	e841 2300 	strex	r3, r2, [r1]
 8004832:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004836:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800483a:	2b00      	cmp	r3, #0
 800483c:	d1d9      	bne.n	80047f2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004842:	2b00      	cmp	r3, #0
 8004844:	d013      	beq.n	800486e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800484a:	4a7d      	ldr	r2, [pc, #500]	; (8004a40 <HAL_UART_IRQHandler+0x3dc>)
 800484c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004852:	4618      	mov	r0, r3
 8004854:	f7fd f8be 	bl	80019d4 <HAL_DMA_Abort_IT>
 8004858:	4603      	mov	r3, r0
 800485a:	2b00      	cmp	r3, #0
 800485c:	d016      	beq.n	800488c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004862:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004864:	687a      	ldr	r2, [r7, #4]
 8004866:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004868:	4610      	mov	r0, r2
 800486a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800486c:	e00e      	b.n	800488c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800486e:	6878      	ldr	r0, [r7, #4]
 8004870:	f7fc fbfa 	bl	8001068 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004874:	e00a      	b.n	800488c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004876:	6878      	ldr	r0, [r7, #4]
 8004878:	f7fc fbf6 	bl	8001068 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800487c:	e006      	b.n	800488c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800487e:	6878      	ldr	r0, [r7, #4]
 8004880:	f7fc fbf2 	bl	8001068 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2200      	movs	r2, #0
 8004888:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800488a:	e170      	b.n	8004b6e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800488c:	bf00      	nop
    return;
 800488e:	e16e      	b.n	8004b6e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004894:	2b01      	cmp	r3, #1
 8004896:	f040 814a 	bne.w	8004b2e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800489a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800489e:	f003 0310 	and.w	r3, r3, #16
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	f000 8143 	beq.w	8004b2e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80048a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80048ac:	f003 0310 	and.w	r3, r3, #16
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	f000 813c 	beq.w	8004b2e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80048b6:	2300      	movs	r3, #0
 80048b8:	60bb      	str	r3, [r7, #8]
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	60bb      	str	r3, [r7, #8]
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	685b      	ldr	r3, [r3, #4]
 80048c8:	60bb      	str	r3, [r7, #8]
 80048ca:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	695b      	ldr	r3, [r3, #20]
 80048d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048d6:	2b40      	cmp	r3, #64	; 0x40
 80048d8:	f040 80b4 	bne.w	8004a44 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	685b      	ldr	r3, [r3, #4]
 80048e4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80048e8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	f000 8140 	beq.w	8004b72 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80048f6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80048fa:	429a      	cmp	r2, r3
 80048fc:	f080 8139 	bcs.w	8004b72 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004906:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800490c:	69db      	ldr	r3, [r3, #28]
 800490e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004912:	f000 8088 	beq.w	8004a26 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	330c      	adds	r3, #12
 800491c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004920:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004924:	e853 3f00 	ldrex	r3, [r3]
 8004928:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800492c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004930:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004934:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	330c      	adds	r3, #12
 800493e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004942:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004946:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800494a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800494e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004952:	e841 2300 	strex	r3, r2, [r1]
 8004956:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800495a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800495e:	2b00      	cmp	r3, #0
 8004960:	d1d9      	bne.n	8004916 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	3314      	adds	r3, #20
 8004968:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800496a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800496c:	e853 3f00 	ldrex	r3, [r3]
 8004970:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004972:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004974:	f023 0301 	bic.w	r3, r3, #1
 8004978:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	3314      	adds	r3, #20
 8004982:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004986:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800498a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800498c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800498e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004992:	e841 2300 	strex	r3, r2, [r1]
 8004996:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004998:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800499a:	2b00      	cmp	r3, #0
 800499c:	d1e1      	bne.n	8004962 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	3314      	adds	r3, #20
 80049a4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049a6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80049a8:	e853 3f00 	ldrex	r3, [r3]
 80049ac:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80049ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80049b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80049b4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	3314      	adds	r3, #20
 80049be:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80049c2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80049c4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049c6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80049c8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80049ca:	e841 2300 	strex	r3, r2, [r1]
 80049ce:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80049d0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d1e3      	bne.n	800499e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	2220      	movs	r2, #32
 80049da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	2200      	movs	r2, #0
 80049e2:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	330c      	adds	r3, #12
 80049ea:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80049ee:	e853 3f00 	ldrex	r3, [r3]
 80049f2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80049f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80049f6:	f023 0310 	bic.w	r3, r3, #16
 80049fa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	330c      	adds	r3, #12
 8004a04:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004a08:	65ba      	str	r2, [r7, #88]	; 0x58
 8004a0a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a0c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004a0e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004a10:	e841 2300 	strex	r3, r2, [r1]
 8004a14:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004a16:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d1e3      	bne.n	80049e4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a20:	4618      	mov	r0, r3
 8004a22:	f7fc ff67 	bl	80018f4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004a2e:	b29b      	uxth	r3, r3
 8004a30:	1ad3      	subs	r3, r2, r3
 8004a32:	b29b      	uxth	r3, r3
 8004a34:	4619      	mov	r1, r3
 8004a36:	6878      	ldr	r0, [r7, #4]
 8004a38:	f000 f8b6 	bl	8004ba8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004a3c:	e099      	b.n	8004b72 <HAL_UART_IRQHandler+0x50e>
 8004a3e:	bf00      	nop
 8004a40:	080050d7 	.word	0x080050d7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004a4c:	b29b      	uxth	r3, r3
 8004a4e:	1ad3      	subs	r3, r2, r3
 8004a50:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004a58:	b29b      	uxth	r3, r3
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	f000 808b 	beq.w	8004b76 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8004a60:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	f000 8086 	beq.w	8004b76 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	330c      	adds	r3, #12
 8004a70:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a74:	e853 3f00 	ldrex	r3, [r3]
 8004a78:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004a7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a7c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004a80:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	330c      	adds	r3, #12
 8004a8a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004a8e:	647a      	str	r2, [r7, #68]	; 0x44
 8004a90:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a92:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004a94:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004a96:	e841 2300 	strex	r3, r2, [r1]
 8004a9a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004a9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d1e3      	bne.n	8004a6a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	3314      	adds	r3, #20
 8004aa8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aac:	e853 3f00 	ldrex	r3, [r3]
 8004ab0:	623b      	str	r3, [r7, #32]
   return(result);
 8004ab2:	6a3b      	ldr	r3, [r7, #32]
 8004ab4:	f023 0301 	bic.w	r3, r3, #1
 8004ab8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	3314      	adds	r3, #20
 8004ac2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004ac6:	633a      	str	r2, [r7, #48]	; 0x30
 8004ac8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004aca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004acc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004ace:	e841 2300 	strex	r3, r2, [r1]
 8004ad2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004ad4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d1e3      	bne.n	8004aa2 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	2220      	movs	r2, #32
 8004ade:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	2200      	movs	r2, #0
 8004ae6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	330c      	adds	r3, #12
 8004aee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004af0:	693b      	ldr	r3, [r7, #16]
 8004af2:	e853 3f00 	ldrex	r3, [r3]
 8004af6:	60fb      	str	r3, [r7, #12]
   return(result);
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	f023 0310 	bic.w	r3, r3, #16
 8004afe:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	330c      	adds	r3, #12
 8004b08:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004b0c:	61fa      	str	r2, [r7, #28]
 8004b0e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b10:	69b9      	ldr	r1, [r7, #24]
 8004b12:	69fa      	ldr	r2, [r7, #28]
 8004b14:	e841 2300 	strex	r3, r2, [r1]
 8004b18:	617b      	str	r3, [r7, #20]
   return(result);
 8004b1a:	697b      	ldr	r3, [r7, #20]
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d1e3      	bne.n	8004ae8 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004b20:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004b24:	4619      	mov	r1, r3
 8004b26:	6878      	ldr	r0, [r7, #4]
 8004b28:	f000 f83e 	bl	8004ba8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004b2c:	e023      	b.n	8004b76 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004b2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d009      	beq.n	8004b4e <HAL_UART_IRQHandler+0x4ea>
 8004b3a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d003      	beq.n	8004b4e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8004b46:	6878      	ldr	r0, [r7, #4]
 8004b48:	f000 fad9 	bl	80050fe <UART_Transmit_IT>
    return;
 8004b4c:	e014      	b.n	8004b78 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004b4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d00e      	beq.n	8004b78 <HAL_UART_IRQHandler+0x514>
 8004b5a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d008      	beq.n	8004b78 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8004b66:	6878      	ldr	r0, [r7, #4]
 8004b68:	f000 fb19 	bl	800519e <UART_EndTransmit_IT>
    return;
 8004b6c:	e004      	b.n	8004b78 <HAL_UART_IRQHandler+0x514>
    return;
 8004b6e:	bf00      	nop
 8004b70:	e002      	b.n	8004b78 <HAL_UART_IRQHandler+0x514>
      return;
 8004b72:	bf00      	nop
 8004b74:	e000      	b.n	8004b78 <HAL_UART_IRQHandler+0x514>
      return;
 8004b76:	bf00      	nop
  }
}
 8004b78:	37e8      	adds	r7, #232	; 0xe8
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	bd80      	pop	{r7, pc}
 8004b7e:	bf00      	nop

08004b80 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004b80:	b480      	push	{r7}
 8004b82:	b083      	sub	sp, #12
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004b88:	bf00      	nop
 8004b8a:	370c      	adds	r7, #12
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b92:	4770      	bx	lr

08004b94 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004b94:	b480      	push	{r7}
 8004b96:	b083      	sub	sp, #12
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8004b9c:	bf00      	nop
 8004b9e:	370c      	adds	r7, #12
 8004ba0:	46bd      	mov	sp, r7
 8004ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba6:	4770      	bx	lr

08004ba8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004ba8:	b480      	push	{r7}
 8004baa:	b083      	sub	sp, #12
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	6078      	str	r0, [r7, #4]
 8004bb0:	460b      	mov	r3, r1
 8004bb2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004bb4:	bf00      	nop
 8004bb6:	370c      	adds	r7, #12
 8004bb8:	46bd      	mov	sp, r7
 8004bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bbe:	4770      	bx	lr

08004bc0 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004bc0:	b580      	push	{r7, lr}
 8004bc2:	b09c      	sub	sp, #112	; 0x70
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bcc:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d172      	bne.n	8004cc2 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8004bdc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004bde:	2200      	movs	r2, #0
 8004be0:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004be2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	330c      	adds	r3, #12
 8004be8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004bec:	e853 3f00 	ldrex	r3, [r3]
 8004bf0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004bf2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004bf4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004bf8:	66bb      	str	r3, [r7, #104]	; 0x68
 8004bfa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	330c      	adds	r3, #12
 8004c00:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004c02:	65ba      	str	r2, [r7, #88]	; 0x58
 8004c04:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c06:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004c08:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004c0a:	e841 2300 	strex	r3, r2, [r1]
 8004c0e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004c10:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d1e5      	bne.n	8004be2 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	3314      	adds	r3, #20
 8004c1c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c20:	e853 3f00 	ldrex	r3, [r3]
 8004c24:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004c26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c28:	f023 0301 	bic.w	r3, r3, #1
 8004c2c:	667b      	str	r3, [r7, #100]	; 0x64
 8004c2e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	3314      	adds	r3, #20
 8004c34:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004c36:	647a      	str	r2, [r7, #68]	; 0x44
 8004c38:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c3a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004c3c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004c3e:	e841 2300 	strex	r3, r2, [r1]
 8004c42:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004c44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d1e5      	bne.n	8004c16 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004c4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	3314      	adds	r3, #20
 8004c50:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c54:	e853 3f00 	ldrex	r3, [r3]
 8004c58:	623b      	str	r3, [r7, #32]
   return(result);
 8004c5a:	6a3b      	ldr	r3, [r7, #32]
 8004c5c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c60:	663b      	str	r3, [r7, #96]	; 0x60
 8004c62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	3314      	adds	r3, #20
 8004c68:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004c6a:	633a      	str	r2, [r7, #48]	; 0x30
 8004c6c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c6e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004c70:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c72:	e841 2300 	strex	r3, r2, [r1]
 8004c76:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004c78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d1e5      	bne.n	8004c4a <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004c7e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c80:	2220      	movs	r2, #32
 8004c82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c86:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c8a:	2b01      	cmp	r3, #1
 8004c8c:	d119      	bne.n	8004cc2 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c8e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	330c      	adds	r3, #12
 8004c94:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c96:	693b      	ldr	r3, [r7, #16]
 8004c98:	e853 3f00 	ldrex	r3, [r3]
 8004c9c:	60fb      	str	r3, [r7, #12]
   return(result);
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	f023 0310 	bic.w	r3, r3, #16
 8004ca4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004ca6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	330c      	adds	r3, #12
 8004cac:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004cae:	61fa      	str	r2, [r7, #28]
 8004cb0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cb2:	69b9      	ldr	r1, [r7, #24]
 8004cb4:	69fa      	ldr	r2, [r7, #28]
 8004cb6:	e841 2300 	strex	r3, r2, [r1]
 8004cba:	617b      	str	r3, [r7, #20]
   return(result);
 8004cbc:	697b      	ldr	r3, [r7, #20]
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d1e5      	bne.n	8004c8e <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004cc2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cc6:	2b01      	cmp	r3, #1
 8004cc8:	d106      	bne.n	8004cd8 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004cca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ccc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004cce:	4619      	mov	r1, r3
 8004cd0:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8004cd2:	f7ff ff69 	bl	8004ba8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004cd6:	e002      	b.n	8004cde <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8004cd8:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8004cda:	f7fc f9cf 	bl	800107c <HAL_UART_RxCpltCallback>
}
 8004cde:	bf00      	nop
 8004ce0:	3770      	adds	r7, #112	; 0x70
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	bd80      	pop	{r7, pc}

08004ce6 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004ce6:	b580      	push	{r7, lr}
 8004ce8:	b084      	sub	sp, #16
 8004cea:	af00      	add	r7, sp, #0
 8004cec:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cf2:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cf8:	2b01      	cmp	r3, #1
 8004cfa:	d108      	bne.n	8004d0e <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004d00:	085b      	lsrs	r3, r3, #1
 8004d02:	b29b      	uxth	r3, r3
 8004d04:	4619      	mov	r1, r3
 8004d06:	68f8      	ldr	r0, [r7, #12]
 8004d08:	f7ff ff4e 	bl	8004ba8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004d0c:	e002      	b.n	8004d14 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8004d0e:	68f8      	ldr	r0, [r7, #12]
 8004d10:	f7ff ff40 	bl	8004b94 <HAL_UART_RxHalfCpltCallback>
}
 8004d14:	bf00      	nop
 8004d16:	3710      	adds	r7, #16
 8004d18:	46bd      	mov	sp, r7
 8004d1a:	bd80      	pop	{r7, pc}

08004d1c <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004d1c:	b580      	push	{r7, lr}
 8004d1e:	b084      	sub	sp, #16
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8004d24:	2300      	movs	r3, #0
 8004d26:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d2c:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8004d2e:	68bb      	ldr	r3, [r7, #8]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	695b      	ldr	r3, [r3, #20]
 8004d34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d38:	2b80      	cmp	r3, #128	; 0x80
 8004d3a:	bf0c      	ite	eq
 8004d3c:	2301      	moveq	r3, #1
 8004d3e:	2300      	movne	r3, #0
 8004d40:	b2db      	uxtb	r3, r3
 8004d42:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8004d44:	68bb      	ldr	r3, [r7, #8]
 8004d46:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d4a:	b2db      	uxtb	r3, r3
 8004d4c:	2b21      	cmp	r3, #33	; 0x21
 8004d4e:	d108      	bne.n	8004d62 <UART_DMAError+0x46>
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d005      	beq.n	8004d62 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8004d56:	68bb      	ldr	r3, [r7, #8]
 8004d58:	2200      	movs	r2, #0
 8004d5a:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8004d5c:	68b8      	ldr	r0, [r7, #8]
 8004d5e:	f000 f92f 	bl	8004fc0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004d62:	68bb      	ldr	r3, [r7, #8]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	695b      	ldr	r3, [r3, #20]
 8004d68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d6c:	2b40      	cmp	r3, #64	; 0x40
 8004d6e:	bf0c      	ite	eq
 8004d70:	2301      	moveq	r3, #1
 8004d72:	2300      	movne	r3, #0
 8004d74:	b2db      	uxtb	r3, r3
 8004d76:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8004d78:	68bb      	ldr	r3, [r7, #8]
 8004d7a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004d7e:	b2db      	uxtb	r3, r3
 8004d80:	2b22      	cmp	r3, #34	; 0x22
 8004d82:	d108      	bne.n	8004d96 <UART_DMAError+0x7a>
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d005      	beq.n	8004d96 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8004d8a:	68bb      	ldr	r3, [r7, #8]
 8004d8c:	2200      	movs	r2, #0
 8004d8e:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8004d90:	68b8      	ldr	r0, [r7, #8]
 8004d92:	f000 f93d 	bl	8005010 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004d96:	68bb      	ldr	r3, [r7, #8]
 8004d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d9a:	f043 0210 	orr.w	r2, r3, #16
 8004d9e:	68bb      	ldr	r3, [r7, #8]
 8004da0:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004da2:	68b8      	ldr	r0, [r7, #8]
 8004da4:	f7fc f960 	bl	8001068 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004da8:	bf00      	nop
 8004daa:	3710      	adds	r7, #16
 8004dac:	46bd      	mov	sp, r7
 8004dae:	bd80      	pop	{r7, pc}

08004db0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004db0:	b580      	push	{r7, lr}
 8004db2:	b090      	sub	sp, #64	; 0x40
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	60f8      	str	r0, [r7, #12]
 8004db8:	60b9      	str	r1, [r7, #8]
 8004dba:	603b      	str	r3, [r7, #0]
 8004dbc:	4613      	mov	r3, r2
 8004dbe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004dc0:	e050      	b.n	8004e64 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004dc2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004dc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dc8:	d04c      	beq.n	8004e64 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004dca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d007      	beq.n	8004de0 <UART_WaitOnFlagUntilTimeout+0x30>
 8004dd0:	f7fc fab8 	bl	8001344 <HAL_GetTick>
 8004dd4:	4602      	mov	r2, r0
 8004dd6:	683b      	ldr	r3, [r7, #0]
 8004dd8:	1ad3      	subs	r3, r2, r3
 8004dda:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004ddc:	429a      	cmp	r2, r3
 8004dde:	d241      	bcs.n	8004e64 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	330c      	adds	r3, #12
 8004de6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004de8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dea:	e853 3f00 	ldrex	r3, [r3]
 8004dee:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004df2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004df6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	330c      	adds	r3, #12
 8004dfe:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004e00:	637a      	str	r2, [r7, #52]	; 0x34
 8004e02:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e04:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004e06:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004e08:	e841 2300 	strex	r3, r2, [r1]
 8004e0c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004e0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d1e5      	bne.n	8004de0 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	3314      	adds	r3, #20
 8004e1a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e1c:	697b      	ldr	r3, [r7, #20]
 8004e1e:	e853 3f00 	ldrex	r3, [r3]
 8004e22:	613b      	str	r3, [r7, #16]
   return(result);
 8004e24:	693b      	ldr	r3, [r7, #16]
 8004e26:	f023 0301 	bic.w	r3, r3, #1
 8004e2a:	63bb      	str	r3, [r7, #56]	; 0x38
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	3314      	adds	r3, #20
 8004e32:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004e34:	623a      	str	r2, [r7, #32]
 8004e36:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e38:	69f9      	ldr	r1, [r7, #28]
 8004e3a:	6a3a      	ldr	r2, [r7, #32]
 8004e3c:	e841 2300 	strex	r3, r2, [r1]
 8004e40:	61bb      	str	r3, [r7, #24]
   return(result);
 8004e42:	69bb      	ldr	r3, [r7, #24]
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d1e5      	bne.n	8004e14 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	2220      	movs	r2, #32
 8004e4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	2220      	movs	r2, #32
 8004e54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	2200      	movs	r2, #0
 8004e5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004e60:	2303      	movs	r3, #3
 8004e62:	e00f      	b.n	8004e84 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	681a      	ldr	r2, [r3, #0]
 8004e6a:	68bb      	ldr	r3, [r7, #8]
 8004e6c:	4013      	ands	r3, r2
 8004e6e:	68ba      	ldr	r2, [r7, #8]
 8004e70:	429a      	cmp	r2, r3
 8004e72:	bf0c      	ite	eq
 8004e74:	2301      	moveq	r3, #1
 8004e76:	2300      	movne	r3, #0
 8004e78:	b2db      	uxtb	r3, r3
 8004e7a:	461a      	mov	r2, r3
 8004e7c:	79fb      	ldrb	r3, [r7, #7]
 8004e7e:	429a      	cmp	r2, r3
 8004e80:	d09f      	beq.n	8004dc2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004e82:	2300      	movs	r3, #0
}
 8004e84:	4618      	mov	r0, r3
 8004e86:	3740      	adds	r7, #64	; 0x40
 8004e88:	46bd      	mov	sp, r7
 8004e8a:	bd80      	pop	{r7, pc}

08004e8c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004e8c:	b580      	push	{r7, lr}
 8004e8e:	b098      	sub	sp, #96	; 0x60
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	60f8      	str	r0, [r7, #12]
 8004e94:	60b9      	str	r1, [r7, #8]
 8004e96:	4613      	mov	r3, r2
 8004e98:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8004e9a:	68ba      	ldr	r2, [r7, #8]
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	88fa      	ldrh	r2, [r7, #6]
 8004ea4:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	2200      	movs	r2, #0
 8004eaa:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	2222      	movs	r2, #34	; 0x22
 8004eb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004eb8:	4a3e      	ldr	r2, [pc, #248]	; (8004fb4 <UART_Start_Receive_DMA+0x128>)
 8004eba:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ec0:	4a3d      	ldr	r2, [pc, #244]	; (8004fb8 <UART_Start_Receive_DMA+0x12c>)
 8004ec2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ec8:	4a3c      	ldr	r2, [pc, #240]	; (8004fbc <UART_Start_Receive_DMA+0x130>)
 8004eca:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ed0:	2200      	movs	r2, #0
 8004ed2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8004ed4:	f107 0308 	add.w	r3, r7, #8
 8004ed8:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	3304      	adds	r3, #4
 8004ee4:	4619      	mov	r1, r3
 8004ee6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004ee8:	681a      	ldr	r2, [r3, #0]
 8004eea:	88fb      	ldrh	r3, [r7, #6]
 8004eec:	f7fc fcaa 	bl	8001844 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8004ef0:	2300      	movs	r3, #0
 8004ef2:	613b      	str	r3, [r7, #16]
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	613b      	str	r3, [r7, #16]
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	685b      	ldr	r3, [r3, #4]
 8004f02:	613b      	str	r3, [r7, #16]
 8004f04:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	2200      	movs	r2, #0
 8004f0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	330c      	adds	r3, #12
 8004f14:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f16:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004f18:	e853 3f00 	ldrex	r3, [r3]
 8004f1c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004f1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f24:	65bb      	str	r3, [r7, #88]	; 0x58
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	330c      	adds	r3, #12
 8004f2c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004f2e:	64fa      	str	r2, [r7, #76]	; 0x4c
 8004f30:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f32:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8004f34:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004f36:	e841 2300 	strex	r3, r2, [r1]
 8004f3a:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8004f3c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d1e5      	bne.n	8004f0e <UART_Start_Receive_DMA+0x82>

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	3314      	adds	r3, #20
 8004f48:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f4c:	e853 3f00 	ldrex	r3, [r3]
 8004f50:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004f52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f54:	f043 0301 	orr.w	r3, r3, #1
 8004f58:	657b      	str	r3, [r7, #84]	; 0x54
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	3314      	adds	r3, #20
 8004f60:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004f62:	63ba      	str	r2, [r7, #56]	; 0x38
 8004f64:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f66:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004f68:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004f6a:	e841 2300 	strex	r3, r2, [r1]
 8004f6e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004f70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d1e5      	bne.n	8004f42 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	3314      	adds	r3, #20
 8004f7c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f7e:	69bb      	ldr	r3, [r7, #24]
 8004f80:	e853 3f00 	ldrex	r3, [r3]
 8004f84:	617b      	str	r3, [r7, #20]
   return(result);
 8004f86:	697b      	ldr	r3, [r7, #20]
 8004f88:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004f8c:	653b      	str	r3, [r7, #80]	; 0x50
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	3314      	adds	r3, #20
 8004f94:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004f96:	627a      	str	r2, [r7, #36]	; 0x24
 8004f98:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f9a:	6a39      	ldr	r1, [r7, #32]
 8004f9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f9e:	e841 2300 	strex	r3, r2, [r1]
 8004fa2:	61fb      	str	r3, [r7, #28]
   return(result);
 8004fa4:	69fb      	ldr	r3, [r7, #28]
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d1e5      	bne.n	8004f76 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8004faa:	2300      	movs	r3, #0
}
 8004fac:	4618      	mov	r0, r3
 8004fae:	3760      	adds	r7, #96	; 0x60
 8004fb0:	46bd      	mov	sp, r7
 8004fb2:	bd80      	pop	{r7, pc}
 8004fb4:	08004bc1 	.word	0x08004bc1
 8004fb8:	08004ce7 	.word	0x08004ce7
 8004fbc:	08004d1d 	.word	0x08004d1d

08004fc0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004fc0:	b480      	push	{r7}
 8004fc2:	b089      	sub	sp, #36	; 0x24
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	330c      	adds	r3, #12
 8004fce:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	e853 3f00 	ldrex	r3, [r3]
 8004fd6:	60bb      	str	r3, [r7, #8]
   return(result);
 8004fd8:	68bb      	ldr	r3, [r7, #8]
 8004fda:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004fde:	61fb      	str	r3, [r7, #28]
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	330c      	adds	r3, #12
 8004fe6:	69fa      	ldr	r2, [r7, #28]
 8004fe8:	61ba      	str	r2, [r7, #24]
 8004fea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fec:	6979      	ldr	r1, [r7, #20]
 8004fee:	69ba      	ldr	r2, [r7, #24]
 8004ff0:	e841 2300 	strex	r3, r2, [r1]
 8004ff4:	613b      	str	r3, [r7, #16]
   return(result);
 8004ff6:	693b      	ldr	r3, [r7, #16]
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d1e5      	bne.n	8004fc8 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2220      	movs	r2, #32
 8005000:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8005004:	bf00      	nop
 8005006:	3724      	adds	r7, #36	; 0x24
 8005008:	46bd      	mov	sp, r7
 800500a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500e:	4770      	bx	lr

08005010 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005010:	b480      	push	{r7}
 8005012:	b095      	sub	sp, #84	; 0x54
 8005014:	af00      	add	r7, sp, #0
 8005016:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	330c      	adds	r3, #12
 800501e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005020:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005022:	e853 3f00 	ldrex	r3, [r3]
 8005026:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005028:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800502a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800502e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	330c      	adds	r3, #12
 8005036:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005038:	643a      	str	r2, [r7, #64]	; 0x40
 800503a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800503c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800503e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005040:	e841 2300 	strex	r3, r2, [r1]
 8005044:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005046:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005048:	2b00      	cmp	r3, #0
 800504a:	d1e5      	bne.n	8005018 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	3314      	adds	r3, #20
 8005052:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005054:	6a3b      	ldr	r3, [r7, #32]
 8005056:	e853 3f00 	ldrex	r3, [r3]
 800505a:	61fb      	str	r3, [r7, #28]
   return(result);
 800505c:	69fb      	ldr	r3, [r7, #28]
 800505e:	f023 0301 	bic.w	r3, r3, #1
 8005062:	64bb      	str	r3, [r7, #72]	; 0x48
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	3314      	adds	r3, #20
 800506a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800506c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800506e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005070:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005072:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005074:	e841 2300 	strex	r3, r2, [r1]
 8005078:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800507a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800507c:	2b00      	cmp	r3, #0
 800507e:	d1e5      	bne.n	800504c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005084:	2b01      	cmp	r3, #1
 8005086:	d119      	bne.n	80050bc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	330c      	adds	r3, #12
 800508e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	e853 3f00 	ldrex	r3, [r3]
 8005096:	60bb      	str	r3, [r7, #8]
   return(result);
 8005098:	68bb      	ldr	r3, [r7, #8]
 800509a:	f023 0310 	bic.w	r3, r3, #16
 800509e:	647b      	str	r3, [r7, #68]	; 0x44
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	330c      	adds	r3, #12
 80050a6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80050a8:	61ba      	str	r2, [r7, #24]
 80050aa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050ac:	6979      	ldr	r1, [r7, #20]
 80050ae:	69ba      	ldr	r2, [r7, #24]
 80050b0:	e841 2300 	strex	r3, r2, [r1]
 80050b4:	613b      	str	r3, [r7, #16]
   return(result);
 80050b6:	693b      	ldr	r3, [r7, #16]
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d1e5      	bne.n	8005088 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	2220      	movs	r2, #32
 80050c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2200      	movs	r2, #0
 80050c8:	631a      	str	r2, [r3, #48]	; 0x30
}
 80050ca:	bf00      	nop
 80050cc:	3754      	adds	r7, #84	; 0x54
 80050ce:	46bd      	mov	sp, r7
 80050d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d4:	4770      	bx	lr

080050d6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80050d6:	b580      	push	{r7, lr}
 80050d8:	b084      	sub	sp, #16
 80050da:	af00      	add	r7, sp, #0
 80050dc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050e2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	2200      	movs	r2, #0
 80050e8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	2200      	movs	r2, #0
 80050ee:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80050f0:	68f8      	ldr	r0, [r7, #12]
 80050f2:	f7fb ffb9 	bl	8001068 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80050f6:	bf00      	nop
 80050f8:	3710      	adds	r7, #16
 80050fa:	46bd      	mov	sp, r7
 80050fc:	bd80      	pop	{r7, pc}

080050fe <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80050fe:	b480      	push	{r7}
 8005100:	b085      	sub	sp, #20
 8005102:	af00      	add	r7, sp, #0
 8005104:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800510c:	b2db      	uxtb	r3, r3
 800510e:	2b21      	cmp	r3, #33	; 0x21
 8005110:	d13e      	bne.n	8005190 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	689b      	ldr	r3, [r3, #8]
 8005116:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800511a:	d114      	bne.n	8005146 <UART_Transmit_IT+0x48>
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	691b      	ldr	r3, [r3, #16]
 8005120:	2b00      	cmp	r3, #0
 8005122:	d110      	bne.n	8005146 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	6a1b      	ldr	r3, [r3, #32]
 8005128:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	881b      	ldrh	r3, [r3, #0]
 800512e:	461a      	mov	r2, r3
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005138:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	6a1b      	ldr	r3, [r3, #32]
 800513e:	1c9a      	adds	r2, r3, #2
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	621a      	str	r2, [r3, #32]
 8005144:	e008      	b.n	8005158 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	6a1b      	ldr	r3, [r3, #32]
 800514a:	1c59      	adds	r1, r3, #1
 800514c:	687a      	ldr	r2, [r7, #4]
 800514e:	6211      	str	r1, [r2, #32]
 8005150:	781a      	ldrb	r2, [r3, #0]
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800515c:	b29b      	uxth	r3, r3
 800515e:	3b01      	subs	r3, #1
 8005160:	b29b      	uxth	r3, r3
 8005162:	687a      	ldr	r2, [r7, #4]
 8005164:	4619      	mov	r1, r3
 8005166:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005168:	2b00      	cmp	r3, #0
 800516a:	d10f      	bne.n	800518c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	68da      	ldr	r2, [r3, #12]
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800517a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	68da      	ldr	r2, [r3, #12]
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800518a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800518c:	2300      	movs	r3, #0
 800518e:	e000      	b.n	8005192 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005190:	2302      	movs	r3, #2
  }
}
 8005192:	4618      	mov	r0, r3
 8005194:	3714      	adds	r7, #20
 8005196:	46bd      	mov	sp, r7
 8005198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519c:	4770      	bx	lr

0800519e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800519e:	b580      	push	{r7, lr}
 80051a0:	b082      	sub	sp, #8
 80051a2:	af00      	add	r7, sp, #0
 80051a4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	68da      	ldr	r2, [r3, #12]
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80051b4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	2220      	movs	r2, #32
 80051ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80051be:	6878      	ldr	r0, [r7, #4]
 80051c0:	f7ff fcde 	bl	8004b80 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80051c4:	2300      	movs	r3, #0
}
 80051c6:	4618      	mov	r0, r3
 80051c8:	3708      	adds	r7, #8
 80051ca:	46bd      	mov	sp, r7
 80051cc:	bd80      	pop	{r7, pc}

080051ce <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80051ce:	b580      	push	{r7, lr}
 80051d0:	b08c      	sub	sp, #48	; 0x30
 80051d2:	af00      	add	r7, sp, #0
 80051d4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80051dc:	b2db      	uxtb	r3, r3
 80051de:	2b22      	cmp	r3, #34	; 0x22
 80051e0:	f040 80ab 	bne.w	800533a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	689b      	ldr	r3, [r3, #8]
 80051e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80051ec:	d117      	bne.n	800521e <UART_Receive_IT+0x50>
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	691b      	ldr	r3, [r3, #16]
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d113      	bne.n	800521e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80051f6:	2300      	movs	r3, #0
 80051f8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051fe:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	685b      	ldr	r3, [r3, #4]
 8005206:	b29b      	uxth	r3, r3
 8005208:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800520c:	b29a      	uxth	r2, r3
 800520e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005210:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005216:	1c9a      	adds	r2, r3, #2
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	629a      	str	r2, [r3, #40]	; 0x28
 800521c:	e026      	b.n	800526c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005222:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005224:	2300      	movs	r3, #0
 8005226:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	689b      	ldr	r3, [r3, #8]
 800522c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005230:	d007      	beq.n	8005242 <UART_Receive_IT+0x74>
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	689b      	ldr	r3, [r3, #8]
 8005236:	2b00      	cmp	r3, #0
 8005238:	d10a      	bne.n	8005250 <UART_Receive_IT+0x82>
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	691b      	ldr	r3, [r3, #16]
 800523e:	2b00      	cmp	r3, #0
 8005240:	d106      	bne.n	8005250 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	685b      	ldr	r3, [r3, #4]
 8005248:	b2da      	uxtb	r2, r3
 800524a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800524c:	701a      	strb	r2, [r3, #0]
 800524e:	e008      	b.n	8005262 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	685b      	ldr	r3, [r3, #4]
 8005256:	b2db      	uxtb	r3, r3
 8005258:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800525c:	b2da      	uxtb	r2, r3
 800525e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005260:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005266:	1c5a      	adds	r2, r3, #1
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005270:	b29b      	uxth	r3, r3
 8005272:	3b01      	subs	r3, #1
 8005274:	b29b      	uxth	r3, r3
 8005276:	687a      	ldr	r2, [r7, #4]
 8005278:	4619      	mov	r1, r3
 800527a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800527c:	2b00      	cmp	r3, #0
 800527e:	d15a      	bne.n	8005336 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	68da      	ldr	r2, [r3, #12]
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	f022 0220 	bic.w	r2, r2, #32
 800528e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	68da      	ldr	r2, [r3, #12]
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800529e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	695a      	ldr	r2, [r3, #20]
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	f022 0201 	bic.w	r2, r2, #1
 80052ae:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	2220      	movs	r2, #32
 80052b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052bc:	2b01      	cmp	r3, #1
 80052be:	d135      	bne.n	800532c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	2200      	movs	r2, #0
 80052c4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	330c      	adds	r3, #12
 80052cc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052ce:	697b      	ldr	r3, [r7, #20]
 80052d0:	e853 3f00 	ldrex	r3, [r3]
 80052d4:	613b      	str	r3, [r7, #16]
   return(result);
 80052d6:	693b      	ldr	r3, [r7, #16]
 80052d8:	f023 0310 	bic.w	r3, r3, #16
 80052dc:	627b      	str	r3, [r7, #36]	; 0x24
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	330c      	adds	r3, #12
 80052e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052e6:	623a      	str	r2, [r7, #32]
 80052e8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052ea:	69f9      	ldr	r1, [r7, #28]
 80052ec:	6a3a      	ldr	r2, [r7, #32]
 80052ee:	e841 2300 	strex	r3, r2, [r1]
 80052f2:	61bb      	str	r3, [r7, #24]
   return(result);
 80052f4:	69bb      	ldr	r3, [r7, #24]
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d1e5      	bne.n	80052c6 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	f003 0310 	and.w	r3, r3, #16
 8005304:	2b10      	cmp	r3, #16
 8005306:	d10a      	bne.n	800531e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005308:	2300      	movs	r3, #0
 800530a:	60fb      	str	r3, [r7, #12]
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	60fb      	str	r3, [r7, #12]
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	685b      	ldr	r3, [r3, #4]
 800531a:	60fb      	str	r3, [r7, #12]
 800531c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005322:	4619      	mov	r1, r3
 8005324:	6878      	ldr	r0, [r7, #4]
 8005326:	f7ff fc3f 	bl	8004ba8 <HAL_UARTEx_RxEventCallback>
 800532a:	e002      	b.n	8005332 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800532c:	6878      	ldr	r0, [r7, #4]
 800532e:	f7fb fea5 	bl	800107c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005332:	2300      	movs	r3, #0
 8005334:	e002      	b.n	800533c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8005336:	2300      	movs	r3, #0
 8005338:	e000      	b.n	800533c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800533a:	2302      	movs	r3, #2
  }
}
 800533c:	4618      	mov	r0, r3
 800533e:	3730      	adds	r7, #48	; 0x30
 8005340:	46bd      	mov	sp, r7
 8005342:	bd80      	pop	{r7, pc}

08005344 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005344:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005348:	b0c0      	sub	sp, #256	; 0x100
 800534a:	af00      	add	r7, sp, #0
 800534c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005350:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	691b      	ldr	r3, [r3, #16]
 8005358:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800535c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005360:	68d9      	ldr	r1, [r3, #12]
 8005362:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005366:	681a      	ldr	r2, [r3, #0]
 8005368:	ea40 0301 	orr.w	r3, r0, r1
 800536c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800536e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005372:	689a      	ldr	r2, [r3, #8]
 8005374:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005378:	691b      	ldr	r3, [r3, #16]
 800537a:	431a      	orrs	r2, r3
 800537c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005380:	695b      	ldr	r3, [r3, #20]
 8005382:	431a      	orrs	r2, r3
 8005384:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005388:	69db      	ldr	r3, [r3, #28]
 800538a:	4313      	orrs	r3, r2
 800538c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005390:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	68db      	ldr	r3, [r3, #12]
 8005398:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800539c:	f021 010c 	bic.w	r1, r1, #12
 80053a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053a4:	681a      	ldr	r2, [r3, #0]
 80053a6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80053aa:	430b      	orrs	r3, r1
 80053ac:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80053ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	695b      	ldr	r3, [r3, #20]
 80053b6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80053ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053be:	6999      	ldr	r1, [r3, #24]
 80053c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053c4:	681a      	ldr	r2, [r3, #0]
 80053c6:	ea40 0301 	orr.w	r3, r0, r1
 80053ca:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80053cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053d0:	681a      	ldr	r2, [r3, #0]
 80053d2:	4b8f      	ldr	r3, [pc, #572]	; (8005610 <UART_SetConfig+0x2cc>)
 80053d4:	429a      	cmp	r2, r3
 80053d6:	d005      	beq.n	80053e4 <UART_SetConfig+0xa0>
 80053d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053dc:	681a      	ldr	r2, [r3, #0]
 80053de:	4b8d      	ldr	r3, [pc, #564]	; (8005614 <UART_SetConfig+0x2d0>)
 80053e0:	429a      	cmp	r2, r3
 80053e2:	d104      	bne.n	80053ee <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80053e4:	f7fe fde4 	bl	8003fb0 <HAL_RCC_GetPCLK2Freq>
 80053e8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80053ec:	e003      	b.n	80053f6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80053ee:	f7fe fdcb 	bl	8003f88 <HAL_RCC_GetPCLK1Freq>
 80053f2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80053f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053fa:	69db      	ldr	r3, [r3, #28]
 80053fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005400:	f040 810c 	bne.w	800561c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005404:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005408:	2200      	movs	r2, #0
 800540a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800540e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005412:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005416:	4622      	mov	r2, r4
 8005418:	462b      	mov	r3, r5
 800541a:	1891      	adds	r1, r2, r2
 800541c:	65b9      	str	r1, [r7, #88]	; 0x58
 800541e:	415b      	adcs	r3, r3
 8005420:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005422:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005426:	4621      	mov	r1, r4
 8005428:	eb12 0801 	adds.w	r8, r2, r1
 800542c:	4629      	mov	r1, r5
 800542e:	eb43 0901 	adc.w	r9, r3, r1
 8005432:	f04f 0200 	mov.w	r2, #0
 8005436:	f04f 0300 	mov.w	r3, #0
 800543a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800543e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005442:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005446:	4690      	mov	r8, r2
 8005448:	4699      	mov	r9, r3
 800544a:	4623      	mov	r3, r4
 800544c:	eb18 0303 	adds.w	r3, r8, r3
 8005450:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005454:	462b      	mov	r3, r5
 8005456:	eb49 0303 	adc.w	r3, r9, r3
 800545a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800545e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005462:	685b      	ldr	r3, [r3, #4]
 8005464:	2200      	movs	r2, #0
 8005466:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800546a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800546e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005472:	460b      	mov	r3, r1
 8005474:	18db      	adds	r3, r3, r3
 8005476:	653b      	str	r3, [r7, #80]	; 0x50
 8005478:	4613      	mov	r3, r2
 800547a:	eb42 0303 	adc.w	r3, r2, r3
 800547e:	657b      	str	r3, [r7, #84]	; 0x54
 8005480:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005484:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005488:	f7fa fefa 	bl	8000280 <__aeabi_uldivmod>
 800548c:	4602      	mov	r2, r0
 800548e:	460b      	mov	r3, r1
 8005490:	4b61      	ldr	r3, [pc, #388]	; (8005618 <UART_SetConfig+0x2d4>)
 8005492:	fba3 2302 	umull	r2, r3, r3, r2
 8005496:	095b      	lsrs	r3, r3, #5
 8005498:	011c      	lsls	r4, r3, #4
 800549a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800549e:	2200      	movs	r2, #0
 80054a0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80054a4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80054a8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80054ac:	4642      	mov	r2, r8
 80054ae:	464b      	mov	r3, r9
 80054b0:	1891      	adds	r1, r2, r2
 80054b2:	64b9      	str	r1, [r7, #72]	; 0x48
 80054b4:	415b      	adcs	r3, r3
 80054b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80054b8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80054bc:	4641      	mov	r1, r8
 80054be:	eb12 0a01 	adds.w	sl, r2, r1
 80054c2:	4649      	mov	r1, r9
 80054c4:	eb43 0b01 	adc.w	fp, r3, r1
 80054c8:	f04f 0200 	mov.w	r2, #0
 80054cc:	f04f 0300 	mov.w	r3, #0
 80054d0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80054d4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80054d8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80054dc:	4692      	mov	sl, r2
 80054de:	469b      	mov	fp, r3
 80054e0:	4643      	mov	r3, r8
 80054e2:	eb1a 0303 	adds.w	r3, sl, r3
 80054e6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80054ea:	464b      	mov	r3, r9
 80054ec:	eb4b 0303 	adc.w	r3, fp, r3
 80054f0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80054f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054f8:	685b      	ldr	r3, [r3, #4]
 80054fa:	2200      	movs	r2, #0
 80054fc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005500:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005504:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005508:	460b      	mov	r3, r1
 800550a:	18db      	adds	r3, r3, r3
 800550c:	643b      	str	r3, [r7, #64]	; 0x40
 800550e:	4613      	mov	r3, r2
 8005510:	eb42 0303 	adc.w	r3, r2, r3
 8005514:	647b      	str	r3, [r7, #68]	; 0x44
 8005516:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800551a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800551e:	f7fa feaf 	bl	8000280 <__aeabi_uldivmod>
 8005522:	4602      	mov	r2, r0
 8005524:	460b      	mov	r3, r1
 8005526:	4611      	mov	r1, r2
 8005528:	4b3b      	ldr	r3, [pc, #236]	; (8005618 <UART_SetConfig+0x2d4>)
 800552a:	fba3 2301 	umull	r2, r3, r3, r1
 800552e:	095b      	lsrs	r3, r3, #5
 8005530:	2264      	movs	r2, #100	; 0x64
 8005532:	fb02 f303 	mul.w	r3, r2, r3
 8005536:	1acb      	subs	r3, r1, r3
 8005538:	00db      	lsls	r3, r3, #3
 800553a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800553e:	4b36      	ldr	r3, [pc, #216]	; (8005618 <UART_SetConfig+0x2d4>)
 8005540:	fba3 2302 	umull	r2, r3, r3, r2
 8005544:	095b      	lsrs	r3, r3, #5
 8005546:	005b      	lsls	r3, r3, #1
 8005548:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800554c:	441c      	add	r4, r3
 800554e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005552:	2200      	movs	r2, #0
 8005554:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005558:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800555c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005560:	4642      	mov	r2, r8
 8005562:	464b      	mov	r3, r9
 8005564:	1891      	adds	r1, r2, r2
 8005566:	63b9      	str	r1, [r7, #56]	; 0x38
 8005568:	415b      	adcs	r3, r3
 800556a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800556c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005570:	4641      	mov	r1, r8
 8005572:	1851      	adds	r1, r2, r1
 8005574:	6339      	str	r1, [r7, #48]	; 0x30
 8005576:	4649      	mov	r1, r9
 8005578:	414b      	adcs	r3, r1
 800557a:	637b      	str	r3, [r7, #52]	; 0x34
 800557c:	f04f 0200 	mov.w	r2, #0
 8005580:	f04f 0300 	mov.w	r3, #0
 8005584:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005588:	4659      	mov	r1, fp
 800558a:	00cb      	lsls	r3, r1, #3
 800558c:	4651      	mov	r1, sl
 800558e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005592:	4651      	mov	r1, sl
 8005594:	00ca      	lsls	r2, r1, #3
 8005596:	4610      	mov	r0, r2
 8005598:	4619      	mov	r1, r3
 800559a:	4603      	mov	r3, r0
 800559c:	4642      	mov	r2, r8
 800559e:	189b      	adds	r3, r3, r2
 80055a0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80055a4:	464b      	mov	r3, r9
 80055a6:	460a      	mov	r2, r1
 80055a8:	eb42 0303 	adc.w	r3, r2, r3
 80055ac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80055b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055b4:	685b      	ldr	r3, [r3, #4]
 80055b6:	2200      	movs	r2, #0
 80055b8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80055bc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80055c0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80055c4:	460b      	mov	r3, r1
 80055c6:	18db      	adds	r3, r3, r3
 80055c8:	62bb      	str	r3, [r7, #40]	; 0x28
 80055ca:	4613      	mov	r3, r2
 80055cc:	eb42 0303 	adc.w	r3, r2, r3
 80055d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80055d2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80055d6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80055da:	f7fa fe51 	bl	8000280 <__aeabi_uldivmod>
 80055de:	4602      	mov	r2, r0
 80055e0:	460b      	mov	r3, r1
 80055e2:	4b0d      	ldr	r3, [pc, #52]	; (8005618 <UART_SetConfig+0x2d4>)
 80055e4:	fba3 1302 	umull	r1, r3, r3, r2
 80055e8:	095b      	lsrs	r3, r3, #5
 80055ea:	2164      	movs	r1, #100	; 0x64
 80055ec:	fb01 f303 	mul.w	r3, r1, r3
 80055f0:	1ad3      	subs	r3, r2, r3
 80055f2:	00db      	lsls	r3, r3, #3
 80055f4:	3332      	adds	r3, #50	; 0x32
 80055f6:	4a08      	ldr	r2, [pc, #32]	; (8005618 <UART_SetConfig+0x2d4>)
 80055f8:	fba2 2303 	umull	r2, r3, r2, r3
 80055fc:	095b      	lsrs	r3, r3, #5
 80055fe:	f003 0207 	and.w	r2, r3, #7
 8005602:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	4422      	add	r2, r4
 800560a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800560c:	e105      	b.n	800581a <UART_SetConfig+0x4d6>
 800560e:	bf00      	nop
 8005610:	40011000 	.word	0x40011000
 8005614:	40011400 	.word	0x40011400
 8005618:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800561c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005620:	2200      	movs	r2, #0
 8005622:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005626:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800562a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800562e:	4642      	mov	r2, r8
 8005630:	464b      	mov	r3, r9
 8005632:	1891      	adds	r1, r2, r2
 8005634:	6239      	str	r1, [r7, #32]
 8005636:	415b      	adcs	r3, r3
 8005638:	627b      	str	r3, [r7, #36]	; 0x24
 800563a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800563e:	4641      	mov	r1, r8
 8005640:	1854      	adds	r4, r2, r1
 8005642:	4649      	mov	r1, r9
 8005644:	eb43 0501 	adc.w	r5, r3, r1
 8005648:	f04f 0200 	mov.w	r2, #0
 800564c:	f04f 0300 	mov.w	r3, #0
 8005650:	00eb      	lsls	r3, r5, #3
 8005652:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005656:	00e2      	lsls	r2, r4, #3
 8005658:	4614      	mov	r4, r2
 800565a:	461d      	mov	r5, r3
 800565c:	4643      	mov	r3, r8
 800565e:	18e3      	adds	r3, r4, r3
 8005660:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005664:	464b      	mov	r3, r9
 8005666:	eb45 0303 	adc.w	r3, r5, r3
 800566a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800566e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005672:	685b      	ldr	r3, [r3, #4]
 8005674:	2200      	movs	r2, #0
 8005676:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800567a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800567e:	f04f 0200 	mov.w	r2, #0
 8005682:	f04f 0300 	mov.w	r3, #0
 8005686:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800568a:	4629      	mov	r1, r5
 800568c:	008b      	lsls	r3, r1, #2
 800568e:	4621      	mov	r1, r4
 8005690:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005694:	4621      	mov	r1, r4
 8005696:	008a      	lsls	r2, r1, #2
 8005698:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800569c:	f7fa fdf0 	bl	8000280 <__aeabi_uldivmod>
 80056a0:	4602      	mov	r2, r0
 80056a2:	460b      	mov	r3, r1
 80056a4:	4b60      	ldr	r3, [pc, #384]	; (8005828 <UART_SetConfig+0x4e4>)
 80056a6:	fba3 2302 	umull	r2, r3, r3, r2
 80056aa:	095b      	lsrs	r3, r3, #5
 80056ac:	011c      	lsls	r4, r3, #4
 80056ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80056b2:	2200      	movs	r2, #0
 80056b4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80056b8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80056bc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80056c0:	4642      	mov	r2, r8
 80056c2:	464b      	mov	r3, r9
 80056c4:	1891      	adds	r1, r2, r2
 80056c6:	61b9      	str	r1, [r7, #24]
 80056c8:	415b      	adcs	r3, r3
 80056ca:	61fb      	str	r3, [r7, #28]
 80056cc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80056d0:	4641      	mov	r1, r8
 80056d2:	1851      	adds	r1, r2, r1
 80056d4:	6139      	str	r1, [r7, #16]
 80056d6:	4649      	mov	r1, r9
 80056d8:	414b      	adcs	r3, r1
 80056da:	617b      	str	r3, [r7, #20]
 80056dc:	f04f 0200 	mov.w	r2, #0
 80056e0:	f04f 0300 	mov.w	r3, #0
 80056e4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80056e8:	4659      	mov	r1, fp
 80056ea:	00cb      	lsls	r3, r1, #3
 80056ec:	4651      	mov	r1, sl
 80056ee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80056f2:	4651      	mov	r1, sl
 80056f4:	00ca      	lsls	r2, r1, #3
 80056f6:	4610      	mov	r0, r2
 80056f8:	4619      	mov	r1, r3
 80056fa:	4603      	mov	r3, r0
 80056fc:	4642      	mov	r2, r8
 80056fe:	189b      	adds	r3, r3, r2
 8005700:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005704:	464b      	mov	r3, r9
 8005706:	460a      	mov	r2, r1
 8005708:	eb42 0303 	adc.w	r3, r2, r3
 800570c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005710:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005714:	685b      	ldr	r3, [r3, #4]
 8005716:	2200      	movs	r2, #0
 8005718:	67bb      	str	r3, [r7, #120]	; 0x78
 800571a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800571c:	f04f 0200 	mov.w	r2, #0
 8005720:	f04f 0300 	mov.w	r3, #0
 8005724:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005728:	4649      	mov	r1, r9
 800572a:	008b      	lsls	r3, r1, #2
 800572c:	4641      	mov	r1, r8
 800572e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005732:	4641      	mov	r1, r8
 8005734:	008a      	lsls	r2, r1, #2
 8005736:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800573a:	f7fa fda1 	bl	8000280 <__aeabi_uldivmod>
 800573e:	4602      	mov	r2, r0
 8005740:	460b      	mov	r3, r1
 8005742:	4b39      	ldr	r3, [pc, #228]	; (8005828 <UART_SetConfig+0x4e4>)
 8005744:	fba3 1302 	umull	r1, r3, r3, r2
 8005748:	095b      	lsrs	r3, r3, #5
 800574a:	2164      	movs	r1, #100	; 0x64
 800574c:	fb01 f303 	mul.w	r3, r1, r3
 8005750:	1ad3      	subs	r3, r2, r3
 8005752:	011b      	lsls	r3, r3, #4
 8005754:	3332      	adds	r3, #50	; 0x32
 8005756:	4a34      	ldr	r2, [pc, #208]	; (8005828 <UART_SetConfig+0x4e4>)
 8005758:	fba2 2303 	umull	r2, r3, r2, r3
 800575c:	095b      	lsrs	r3, r3, #5
 800575e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005762:	441c      	add	r4, r3
 8005764:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005768:	2200      	movs	r2, #0
 800576a:	673b      	str	r3, [r7, #112]	; 0x70
 800576c:	677a      	str	r2, [r7, #116]	; 0x74
 800576e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005772:	4642      	mov	r2, r8
 8005774:	464b      	mov	r3, r9
 8005776:	1891      	adds	r1, r2, r2
 8005778:	60b9      	str	r1, [r7, #8]
 800577a:	415b      	adcs	r3, r3
 800577c:	60fb      	str	r3, [r7, #12]
 800577e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005782:	4641      	mov	r1, r8
 8005784:	1851      	adds	r1, r2, r1
 8005786:	6039      	str	r1, [r7, #0]
 8005788:	4649      	mov	r1, r9
 800578a:	414b      	adcs	r3, r1
 800578c:	607b      	str	r3, [r7, #4]
 800578e:	f04f 0200 	mov.w	r2, #0
 8005792:	f04f 0300 	mov.w	r3, #0
 8005796:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800579a:	4659      	mov	r1, fp
 800579c:	00cb      	lsls	r3, r1, #3
 800579e:	4651      	mov	r1, sl
 80057a0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80057a4:	4651      	mov	r1, sl
 80057a6:	00ca      	lsls	r2, r1, #3
 80057a8:	4610      	mov	r0, r2
 80057aa:	4619      	mov	r1, r3
 80057ac:	4603      	mov	r3, r0
 80057ae:	4642      	mov	r2, r8
 80057b0:	189b      	adds	r3, r3, r2
 80057b2:	66bb      	str	r3, [r7, #104]	; 0x68
 80057b4:	464b      	mov	r3, r9
 80057b6:	460a      	mov	r2, r1
 80057b8:	eb42 0303 	adc.w	r3, r2, r3
 80057bc:	66fb      	str	r3, [r7, #108]	; 0x6c
 80057be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057c2:	685b      	ldr	r3, [r3, #4]
 80057c4:	2200      	movs	r2, #0
 80057c6:	663b      	str	r3, [r7, #96]	; 0x60
 80057c8:	667a      	str	r2, [r7, #100]	; 0x64
 80057ca:	f04f 0200 	mov.w	r2, #0
 80057ce:	f04f 0300 	mov.w	r3, #0
 80057d2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80057d6:	4649      	mov	r1, r9
 80057d8:	008b      	lsls	r3, r1, #2
 80057da:	4641      	mov	r1, r8
 80057dc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80057e0:	4641      	mov	r1, r8
 80057e2:	008a      	lsls	r2, r1, #2
 80057e4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80057e8:	f7fa fd4a 	bl	8000280 <__aeabi_uldivmod>
 80057ec:	4602      	mov	r2, r0
 80057ee:	460b      	mov	r3, r1
 80057f0:	4b0d      	ldr	r3, [pc, #52]	; (8005828 <UART_SetConfig+0x4e4>)
 80057f2:	fba3 1302 	umull	r1, r3, r3, r2
 80057f6:	095b      	lsrs	r3, r3, #5
 80057f8:	2164      	movs	r1, #100	; 0x64
 80057fa:	fb01 f303 	mul.w	r3, r1, r3
 80057fe:	1ad3      	subs	r3, r2, r3
 8005800:	011b      	lsls	r3, r3, #4
 8005802:	3332      	adds	r3, #50	; 0x32
 8005804:	4a08      	ldr	r2, [pc, #32]	; (8005828 <UART_SetConfig+0x4e4>)
 8005806:	fba2 2303 	umull	r2, r3, r2, r3
 800580a:	095b      	lsrs	r3, r3, #5
 800580c:	f003 020f 	and.w	r2, r3, #15
 8005810:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	4422      	add	r2, r4
 8005818:	609a      	str	r2, [r3, #8]
}
 800581a:	bf00      	nop
 800581c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005820:	46bd      	mov	sp, r7
 8005822:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005826:	bf00      	nop
 8005828:	51eb851f 	.word	0x51eb851f

0800582c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800582c:	b084      	sub	sp, #16
 800582e:	b580      	push	{r7, lr}
 8005830:	b084      	sub	sp, #16
 8005832:	af00      	add	r7, sp, #0
 8005834:	6078      	str	r0, [r7, #4]
 8005836:	f107 001c 	add.w	r0, r7, #28
 800583a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800583e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005840:	2b01      	cmp	r3, #1
 8005842:	d122      	bne.n	800588a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005848:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	68db      	ldr	r3, [r3, #12]
 8005854:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005858:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800585c:	687a      	ldr	r2, [r7, #4]
 800585e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	68db      	ldr	r3, [r3, #12]
 8005864:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800586c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800586e:	2b01      	cmp	r3, #1
 8005870:	d105      	bne.n	800587e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	68db      	ldr	r3, [r3, #12]
 8005876:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800587e:	6878      	ldr	r0, [r7, #4]
 8005880:	f001 fb1c 	bl	8006ebc <USB_CoreReset>
 8005884:	4603      	mov	r3, r0
 8005886:	73fb      	strb	r3, [r7, #15]
 8005888:	e01a      	b.n	80058c0 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	68db      	ldr	r3, [r3, #12]
 800588e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005896:	6878      	ldr	r0, [r7, #4]
 8005898:	f001 fb10 	bl	8006ebc <USB_CoreReset>
 800589c:	4603      	mov	r3, r0
 800589e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80058a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d106      	bne.n	80058b4 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058aa:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	639a      	str	r2, [r3, #56]	; 0x38
 80058b2:	e005      	b.n	80058c0 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058b8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80058c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058c2:	2b01      	cmp	r3, #1
 80058c4:	d10b      	bne.n	80058de <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	689b      	ldr	r3, [r3, #8]
 80058ca:	f043 0206 	orr.w	r2, r3, #6
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	689b      	ldr	r3, [r3, #8]
 80058d6:	f043 0220 	orr.w	r2, r3, #32
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80058de:	7bfb      	ldrb	r3, [r7, #15]
}
 80058e0:	4618      	mov	r0, r3
 80058e2:	3710      	adds	r7, #16
 80058e4:	46bd      	mov	sp, r7
 80058e6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80058ea:	b004      	add	sp, #16
 80058ec:	4770      	bx	lr
	...

080058f0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80058f0:	b480      	push	{r7}
 80058f2:	b087      	sub	sp, #28
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	60f8      	str	r0, [r7, #12]
 80058f8:	60b9      	str	r1, [r7, #8]
 80058fa:	4613      	mov	r3, r2
 80058fc:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80058fe:	79fb      	ldrb	r3, [r7, #7]
 8005900:	2b02      	cmp	r3, #2
 8005902:	d165      	bne.n	80059d0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8005904:	68bb      	ldr	r3, [r7, #8]
 8005906:	4a41      	ldr	r2, [pc, #260]	; (8005a0c <USB_SetTurnaroundTime+0x11c>)
 8005908:	4293      	cmp	r3, r2
 800590a:	d906      	bls.n	800591a <USB_SetTurnaroundTime+0x2a>
 800590c:	68bb      	ldr	r3, [r7, #8]
 800590e:	4a40      	ldr	r2, [pc, #256]	; (8005a10 <USB_SetTurnaroundTime+0x120>)
 8005910:	4293      	cmp	r3, r2
 8005912:	d202      	bcs.n	800591a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8005914:	230f      	movs	r3, #15
 8005916:	617b      	str	r3, [r7, #20]
 8005918:	e062      	b.n	80059e0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800591a:	68bb      	ldr	r3, [r7, #8]
 800591c:	4a3c      	ldr	r2, [pc, #240]	; (8005a10 <USB_SetTurnaroundTime+0x120>)
 800591e:	4293      	cmp	r3, r2
 8005920:	d306      	bcc.n	8005930 <USB_SetTurnaroundTime+0x40>
 8005922:	68bb      	ldr	r3, [r7, #8]
 8005924:	4a3b      	ldr	r2, [pc, #236]	; (8005a14 <USB_SetTurnaroundTime+0x124>)
 8005926:	4293      	cmp	r3, r2
 8005928:	d202      	bcs.n	8005930 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800592a:	230e      	movs	r3, #14
 800592c:	617b      	str	r3, [r7, #20]
 800592e:	e057      	b.n	80059e0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8005930:	68bb      	ldr	r3, [r7, #8]
 8005932:	4a38      	ldr	r2, [pc, #224]	; (8005a14 <USB_SetTurnaroundTime+0x124>)
 8005934:	4293      	cmp	r3, r2
 8005936:	d306      	bcc.n	8005946 <USB_SetTurnaroundTime+0x56>
 8005938:	68bb      	ldr	r3, [r7, #8]
 800593a:	4a37      	ldr	r2, [pc, #220]	; (8005a18 <USB_SetTurnaroundTime+0x128>)
 800593c:	4293      	cmp	r3, r2
 800593e:	d202      	bcs.n	8005946 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8005940:	230d      	movs	r3, #13
 8005942:	617b      	str	r3, [r7, #20]
 8005944:	e04c      	b.n	80059e0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8005946:	68bb      	ldr	r3, [r7, #8]
 8005948:	4a33      	ldr	r2, [pc, #204]	; (8005a18 <USB_SetTurnaroundTime+0x128>)
 800594a:	4293      	cmp	r3, r2
 800594c:	d306      	bcc.n	800595c <USB_SetTurnaroundTime+0x6c>
 800594e:	68bb      	ldr	r3, [r7, #8]
 8005950:	4a32      	ldr	r2, [pc, #200]	; (8005a1c <USB_SetTurnaroundTime+0x12c>)
 8005952:	4293      	cmp	r3, r2
 8005954:	d802      	bhi.n	800595c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8005956:	230c      	movs	r3, #12
 8005958:	617b      	str	r3, [r7, #20]
 800595a:	e041      	b.n	80059e0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800595c:	68bb      	ldr	r3, [r7, #8]
 800595e:	4a2f      	ldr	r2, [pc, #188]	; (8005a1c <USB_SetTurnaroundTime+0x12c>)
 8005960:	4293      	cmp	r3, r2
 8005962:	d906      	bls.n	8005972 <USB_SetTurnaroundTime+0x82>
 8005964:	68bb      	ldr	r3, [r7, #8]
 8005966:	4a2e      	ldr	r2, [pc, #184]	; (8005a20 <USB_SetTurnaroundTime+0x130>)
 8005968:	4293      	cmp	r3, r2
 800596a:	d802      	bhi.n	8005972 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800596c:	230b      	movs	r3, #11
 800596e:	617b      	str	r3, [r7, #20]
 8005970:	e036      	b.n	80059e0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8005972:	68bb      	ldr	r3, [r7, #8]
 8005974:	4a2a      	ldr	r2, [pc, #168]	; (8005a20 <USB_SetTurnaroundTime+0x130>)
 8005976:	4293      	cmp	r3, r2
 8005978:	d906      	bls.n	8005988 <USB_SetTurnaroundTime+0x98>
 800597a:	68bb      	ldr	r3, [r7, #8]
 800597c:	4a29      	ldr	r2, [pc, #164]	; (8005a24 <USB_SetTurnaroundTime+0x134>)
 800597e:	4293      	cmp	r3, r2
 8005980:	d802      	bhi.n	8005988 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8005982:	230a      	movs	r3, #10
 8005984:	617b      	str	r3, [r7, #20]
 8005986:	e02b      	b.n	80059e0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005988:	68bb      	ldr	r3, [r7, #8]
 800598a:	4a26      	ldr	r2, [pc, #152]	; (8005a24 <USB_SetTurnaroundTime+0x134>)
 800598c:	4293      	cmp	r3, r2
 800598e:	d906      	bls.n	800599e <USB_SetTurnaroundTime+0xae>
 8005990:	68bb      	ldr	r3, [r7, #8]
 8005992:	4a25      	ldr	r2, [pc, #148]	; (8005a28 <USB_SetTurnaroundTime+0x138>)
 8005994:	4293      	cmp	r3, r2
 8005996:	d202      	bcs.n	800599e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8005998:	2309      	movs	r3, #9
 800599a:	617b      	str	r3, [r7, #20]
 800599c:	e020      	b.n	80059e0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800599e:	68bb      	ldr	r3, [r7, #8]
 80059a0:	4a21      	ldr	r2, [pc, #132]	; (8005a28 <USB_SetTurnaroundTime+0x138>)
 80059a2:	4293      	cmp	r3, r2
 80059a4:	d306      	bcc.n	80059b4 <USB_SetTurnaroundTime+0xc4>
 80059a6:	68bb      	ldr	r3, [r7, #8]
 80059a8:	4a20      	ldr	r2, [pc, #128]	; (8005a2c <USB_SetTurnaroundTime+0x13c>)
 80059aa:	4293      	cmp	r3, r2
 80059ac:	d802      	bhi.n	80059b4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80059ae:	2308      	movs	r3, #8
 80059b0:	617b      	str	r3, [r7, #20]
 80059b2:	e015      	b.n	80059e0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80059b4:	68bb      	ldr	r3, [r7, #8]
 80059b6:	4a1d      	ldr	r2, [pc, #116]	; (8005a2c <USB_SetTurnaroundTime+0x13c>)
 80059b8:	4293      	cmp	r3, r2
 80059ba:	d906      	bls.n	80059ca <USB_SetTurnaroundTime+0xda>
 80059bc:	68bb      	ldr	r3, [r7, #8]
 80059be:	4a1c      	ldr	r2, [pc, #112]	; (8005a30 <USB_SetTurnaroundTime+0x140>)
 80059c0:	4293      	cmp	r3, r2
 80059c2:	d202      	bcs.n	80059ca <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80059c4:	2307      	movs	r3, #7
 80059c6:	617b      	str	r3, [r7, #20]
 80059c8:	e00a      	b.n	80059e0 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80059ca:	2306      	movs	r3, #6
 80059cc:	617b      	str	r3, [r7, #20]
 80059ce:	e007      	b.n	80059e0 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80059d0:	79fb      	ldrb	r3, [r7, #7]
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d102      	bne.n	80059dc <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80059d6:	2309      	movs	r3, #9
 80059d8:	617b      	str	r3, [r7, #20]
 80059da:	e001      	b.n	80059e0 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80059dc:	2309      	movs	r3, #9
 80059de:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	68db      	ldr	r3, [r3, #12]
 80059e4:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	68da      	ldr	r2, [r3, #12]
 80059f0:	697b      	ldr	r3, [r7, #20]
 80059f2:	029b      	lsls	r3, r3, #10
 80059f4:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80059f8:	431a      	orrs	r2, r3
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80059fe:	2300      	movs	r3, #0
}
 8005a00:	4618      	mov	r0, r3
 8005a02:	371c      	adds	r7, #28
 8005a04:	46bd      	mov	sp, r7
 8005a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0a:	4770      	bx	lr
 8005a0c:	00d8acbf 	.word	0x00d8acbf
 8005a10:	00e4e1c0 	.word	0x00e4e1c0
 8005a14:	00f42400 	.word	0x00f42400
 8005a18:	01067380 	.word	0x01067380
 8005a1c:	011a499f 	.word	0x011a499f
 8005a20:	01312cff 	.word	0x01312cff
 8005a24:	014ca43f 	.word	0x014ca43f
 8005a28:	016e3600 	.word	0x016e3600
 8005a2c:	01a6ab1f 	.word	0x01a6ab1f
 8005a30:	01e84800 	.word	0x01e84800

08005a34 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005a34:	b480      	push	{r7}
 8005a36:	b083      	sub	sp, #12
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	689b      	ldr	r3, [r3, #8]
 8005a40:	f043 0201 	orr.w	r2, r3, #1
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005a48:	2300      	movs	r3, #0
}
 8005a4a:	4618      	mov	r0, r3
 8005a4c:	370c      	adds	r7, #12
 8005a4e:	46bd      	mov	sp, r7
 8005a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a54:	4770      	bx	lr

08005a56 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005a56:	b480      	push	{r7}
 8005a58:	b083      	sub	sp, #12
 8005a5a:	af00      	add	r7, sp, #0
 8005a5c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	689b      	ldr	r3, [r3, #8]
 8005a62:	f023 0201 	bic.w	r2, r3, #1
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005a6a:	2300      	movs	r3, #0
}
 8005a6c:	4618      	mov	r0, r3
 8005a6e:	370c      	adds	r7, #12
 8005a70:	46bd      	mov	sp, r7
 8005a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a76:	4770      	bx	lr

08005a78 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005a78:	b580      	push	{r7, lr}
 8005a7a:	b084      	sub	sp, #16
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	6078      	str	r0, [r7, #4]
 8005a80:	460b      	mov	r3, r1
 8005a82:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005a84:	2300      	movs	r3, #0
 8005a86:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	68db      	ldr	r3, [r3, #12]
 8005a8c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005a94:	78fb      	ldrb	r3, [r7, #3]
 8005a96:	2b01      	cmp	r3, #1
 8005a98:	d115      	bne.n	8005ac6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	68db      	ldr	r3, [r3, #12]
 8005a9e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005aa6:	2001      	movs	r0, #1
 8005aa8:	f7fb fc58 	bl	800135c <HAL_Delay>
      ms++;
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	3301      	adds	r3, #1
 8005ab0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005ab2:	6878      	ldr	r0, [r7, #4]
 8005ab4:	f001 f972 	bl	8006d9c <USB_GetMode>
 8005ab8:	4603      	mov	r3, r0
 8005aba:	2b01      	cmp	r3, #1
 8005abc:	d01e      	beq.n	8005afc <USB_SetCurrentMode+0x84>
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	2b31      	cmp	r3, #49	; 0x31
 8005ac2:	d9f0      	bls.n	8005aa6 <USB_SetCurrentMode+0x2e>
 8005ac4:	e01a      	b.n	8005afc <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005ac6:	78fb      	ldrb	r3, [r7, #3]
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d115      	bne.n	8005af8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	68db      	ldr	r3, [r3, #12]
 8005ad0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005ad8:	2001      	movs	r0, #1
 8005ada:	f7fb fc3f 	bl	800135c <HAL_Delay>
      ms++;
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	3301      	adds	r3, #1
 8005ae2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005ae4:	6878      	ldr	r0, [r7, #4]
 8005ae6:	f001 f959 	bl	8006d9c <USB_GetMode>
 8005aea:	4603      	mov	r3, r0
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d005      	beq.n	8005afc <USB_SetCurrentMode+0x84>
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	2b31      	cmp	r3, #49	; 0x31
 8005af4:	d9f0      	bls.n	8005ad8 <USB_SetCurrentMode+0x60>
 8005af6:	e001      	b.n	8005afc <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005af8:	2301      	movs	r3, #1
 8005afa:	e005      	b.n	8005b08 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	2b32      	cmp	r3, #50	; 0x32
 8005b00:	d101      	bne.n	8005b06 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005b02:	2301      	movs	r3, #1
 8005b04:	e000      	b.n	8005b08 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005b06:	2300      	movs	r3, #0
}
 8005b08:	4618      	mov	r0, r3
 8005b0a:	3710      	adds	r7, #16
 8005b0c:	46bd      	mov	sp, r7
 8005b0e:	bd80      	pop	{r7, pc}

08005b10 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005b10:	b084      	sub	sp, #16
 8005b12:	b580      	push	{r7, lr}
 8005b14:	b086      	sub	sp, #24
 8005b16:	af00      	add	r7, sp, #0
 8005b18:	6078      	str	r0, [r7, #4]
 8005b1a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005b1e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005b22:	2300      	movs	r3, #0
 8005b24:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005b2a:	2300      	movs	r3, #0
 8005b2c:	613b      	str	r3, [r7, #16]
 8005b2e:	e009      	b.n	8005b44 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005b30:	687a      	ldr	r2, [r7, #4]
 8005b32:	693b      	ldr	r3, [r7, #16]
 8005b34:	3340      	adds	r3, #64	; 0x40
 8005b36:	009b      	lsls	r3, r3, #2
 8005b38:	4413      	add	r3, r2
 8005b3a:	2200      	movs	r2, #0
 8005b3c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005b3e:	693b      	ldr	r3, [r7, #16]
 8005b40:	3301      	adds	r3, #1
 8005b42:	613b      	str	r3, [r7, #16]
 8005b44:	693b      	ldr	r3, [r7, #16]
 8005b46:	2b0e      	cmp	r3, #14
 8005b48:	d9f2      	bls.n	8005b30 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005b4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d11c      	bne.n	8005b8a <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b56:	685b      	ldr	r3, [r3, #4]
 8005b58:	68fa      	ldr	r2, [r7, #12]
 8005b5a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005b5e:	f043 0302 	orr.w	r3, r3, #2
 8005b62:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b68:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b74:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b80:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	639a      	str	r2, [r3, #56]	; 0x38
 8005b88:	e00b      	b.n	8005ba2 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b8e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b9a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005ba8:	461a      	mov	r2, r3
 8005baa:	2300      	movs	r3, #0
 8005bac:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005bb4:	4619      	mov	r1, r3
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005bbc:	461a      	mov	r2, r3
 8005bbe:	680b      	ldr	r3, [r1, #0]
 8005bc0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005bc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bc4:	2b01      	cmp	r3, #1
 8005bc6:	d10c      	bne.n	8005be2 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005bc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d104      	bne.n	8005bd8 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005bce:	2100      	movs	r1, #0
 8005bd0:	6878      	ldr	r0, [r7, #4]
 8005bd2:	f000 f945 	bl	8005e60 <USB_SetDevSpeed>
 8005bd6:	e008      	b.n	8005bea <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005bd8:	2101      	movs	r1, #1
 8005bda:	6878      	ldr	r0, [r7, #4]
 8005bdc:	f000 f940 	bl	8005e60 <USB_SetDevSpeed>
 8005be0:	e003      	b.n	8005bea <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005be2:	2103      	movs	r1, #3
 8005be4:	6878      	ldr	r0, [r7, #4]
 8005be6:	f000 f93b 	bl	8005e60 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005bea:	2110      	movs	r1, #16
 8005bec:	6878      	ldr	r0, [r7, #4]
 8005bee:	f000 f8f3 	bl	8005dd8 <USB_FlushTxFifo>
 8005bf2:	4603      	mov	r3, r0
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d001      	beq.n	8005bfc <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8005bf8:	2301      	movs	r3, #1
 8005bfa:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005bfc:	6878      	ldr	r0, [r7, #4]
 8005bfe:	f000 f90f 	bl	8005e20 <USB_FlushRxFifo>
 8005c02:	4603      	mov	r3, r0
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d001      	beq.n	8005c0c <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8005c08:	2301      	movs	r3, #1
 8005c0a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c12:	461a      	mov	r2, r3
 8005c14:	2300      	movs	r3, #0
 8005c16:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c1e:	461a      	mov	r2, r3
 8005c20:	2300      	movs	r3, #0
 8005c22:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c2a:	461a      	mov	r2, r3
 8005c2c:	2300      	movs	r3, #0
 8005c2e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005c30:	2300      	movs	r3, #0
 8005c32:	613b      	str	r3, [r7, #16]
 8005c34:	e043      	b.n	8005cbe <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005c36:	693b      	ldr	r3, [r7, #16]
 8005c38:	015a      	lsls	r2, r3, #5
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	4413      	add	r3, r2
 8005c3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005c48:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005c4c:	d118      	bne.n	8005c80 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8005c4e:	693b      	ldr	r3, [r7, #16]
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d10a      	bne.n	8005c6a <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005c54:	693b      	ldr	r3, [r7, #16]
 8005c56:	015a      	lsls	r2, r3, #5
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	4413      	add	r3, r2
 8005c5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c60:	461a      	mov	r2, r3
 8005c62:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005c66:	6013      	str	r3, [r2, #0]
 8005c68:	e013      	b.n	8005c92 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005c6a:	693b      	ldr	r3, [r7, #16]
 8005c6c:	015a      	lsls	r2, r3, #5
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	4413      	add	r3, r2
 8005c72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c76:	461a      	mov	r2, r3
 8005c78:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005c7c:	6013      	str	r3, [r2, #0]
 8005c7e:	e008      	b.n	8005c92 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005c80:	693b      	ldr	r3, [r7, #16]
 8005c82:	015a      	lsls	r2, r3, #5
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	4413      	add	r3, r2
 8005c88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c8c:	461a      	mov	r2, r3
 8005c8e:	2300      	movs	r3, #0
 8005c90:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005c92:	693b      	ldr	r3, [r7, #16]
 8005c94:	015a      	lsls	r2, r3, #5
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	4413      	add	r3, r2
 8005c9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c9e:	461a      	mov	r2, r3
 8005ca0:	2300      	movs	r3, #0
 8005ca2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005ca4:	693b      	ldr	r3, [r7, #16]
 8005ca6:	015a      	lsls	r2, r3, #5
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	4413      	add	r3, r2
 8005cac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cb0:	461a      	mov	r2, r3
 8005cb2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005cb6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005cb8:	693b      	ldr	r3, [r7, #16]
 8005cba:	3301      	adds	r3, #1
 8005cbc:	613b      	str	r3, [r7, #16]
 8005cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cc0:	693a      	ldr	r2, [r7, #16]
 8005cc2:	429a      	cmp	r2, r3
 8005cc4:	d3b7      	bcc.n	8005c36 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005cc6:	2300      	movs	r3, #0
 8005cc8:	613b      	str	r3, [r7, #16]
 8005cca:	e043      	b.n	8005d54 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005ccc:	693b      	ldr	r3, [r7, #16]
 8005cce:	015a      	lsls	r2, r3, #5
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	4413      	add	r3, r2
 8005cd4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005cde:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005ce2:	d118      	bne.n	8005d16 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8005ce4:	693b      	ldr	r3, [r7, #16]
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d10a      	bne.n	8005d00 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005cea:	693b      	ldr	r3, [r7, #16]
 8005cec:	015a      	lsls	r2, r3, #5
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	4413      	add	r3, r2
 8005cf2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cf6:	461a      	mov	r2, r3
 8005cf8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005cfc:	6013      	str	r3, [r2, #0]
 8005cfe:	e013      	b.n	8005d28 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005d00:	693b      	ldr	r3, [r7, #16]
 8005d02:	015a      	lsls	r2, r3, #5
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	4413      	add	r3, r2
 8005d08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d0c:	461a      	mov	r2, r3
 8005d0e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005d12:	6013      	str	r3, [r2, #0]
 8005d14:	e008      	b.n	8005d28 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005d16:	693b      	ldr	r3, [r7, #16]
 8005d18:	015a      	lsls	r2, r3, #5
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	4413      	add	r3, r2
 8005d1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d22:	461a      	mov	r2, r3
 8005d24:	2300      	movs	r3, #0
 8005d26:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005d28:	693b      	ldr	r3, [r7, #16]
 8005d2a:	015a      	lsls	r2, r3, #5
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	4413      	add	r3, r2
 8005d30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d34:	461a      	mov	r2, r3
 8005d36:	2300      	movs	r3, #0
 8005d38:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005d3a:	693b      	ldr	r3, [r7, #16]
 8005d3c:	015a      	lsls	r2, r3, #5
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	4413      	add	r3, r2
 8005d42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d46:	461a      	mov	r2, r3
 8005d48:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005d4c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005d4e:	693b      	ldr	r3, [r7, #16]
 8005d50:	3301      	adds	r3, #1
 8005d52:	613b      	str	r3, [r7, #16]
 8005d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d56:	693a      	ldr	r2, [r7, #16]
 8005d58:	429a      	cmp	r2, r3
 8005d5a:	d3b7      	bcc.n	8005ccc <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d62:	691b      	ldr	r3, [r3, #16]
 8005d64:	68fa      	ldr	r2, [r7, #12]
 8005d66:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005d6a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005d6e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	2200      	movs	r2, #0
 8005d74:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005d7c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005d7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d105      	bne.n	8005d90 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	699b      	ldr	r3, [r3, #24]
 8005d88:	f043 0210 	orr.w	r2, r3, #16
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	699a      	ldr	r2, [r3, #24]
 8005d94:	4b0f      	ldr	r3, [pc, #60]	; (8005dd4 <USB_DevInit+0x2c4>)
 8005d96:	4313      	orrs	r3, r2
 8005d98:	687a      	ldr	r2, [r7, #4]
 8005d9a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005d9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d005      	beq.n	8005dae <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	699b      	ldr	r3, [r3, #24]
 8005da6:	f043 0208 	orr.w	r2, r3, #8
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005dae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005db0:	2b01      	cmp	r3, #1
 8005db2:	d107      	bne.n	8005dc4 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	699b      	ldr	r3, [r3, #24]
 8005db8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005dbc:	f043 0304 	orr.w	r3, r3, #4
 8005dc0:	687a      	ldr	r2, [r7, #4]
 8005dc2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005dc4:	7dfb      	ldrb	r3, [r7, #23]
}
 8005dc6:	4618      	mov	r0, r3
 8005dc8:	3718      	adds	r7, #24
 8005dca:	46bd      	mov	sp, r7
 8005dcc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005dd0:	b004      	add	sp, #16
 8005dd2:	4770      	bx	lr
 8005dd4:	803c3800 	.word	0x803c3800

08005dd8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005dd8:	b480      	push	{r7}
 8005dda:	b085      	sub	sp, #20
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	6078      	str	r0, [r7, #4]
 8005de0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005de2:	2300      	movs	r3, #0
 8005de4:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005de6:	683b      	ldr	r3, [r7, #0]
 8005de8:	019b      	lsls	r3, r3, #6
 8005dea:	f043 0220 	orr.w	r2, r3, #32
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	3301      	adds	r3, #1
 8005df6:	60fb      	str	r3, [r7, #12]
 8005df8:	4a08      	ldr	r2, [pc, #32]	; (8005e1c <USB_FlushTxFifo+0x44>)
 8005dfa:	4293      	cmp	r3, r2
 8005dfc:	d901      	bls.n	8005e02 <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 8005dfe:	2303      	movs	r3, #3
 8005e00:	e006      	b.n	8005e10 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	691b      	ldr	r3, [r3, #16]
 8005e06:	f003 0320 	and.w	r3, r3, #32
 8005e0a:	2b20      	cmp	r3, #32
 8005e0c:	d0f1      	beq.n	8005df2 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8005e0e:	2300      	movs	r3, #0
}
 8005e10:	4618      	mov	r0, r3
 8005e12:	3714      	adds	r7, #20
 8005e14:	46bd      	mov	sp, r7
 8005e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1a:	4770      	bx	lr
 8005e1c:	00030d40 	.word	0x00030d40

08005e20 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005e20:	b480      	push	{r7}
 8005e22:	b085      	sub	sp, #20
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005e28:	2300      	movs	r3, #0
 8005e2a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	2210      	movs	r2, #16
 8005e30:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	3301      	adds	r3, #1
 8005e36:	60fb      	str	r3, [r7, #12]
 8005e38:	4a08      	ldr	r2, [pc, #32]	; (8005e5c <USB_FlushRxFifo+0x3c>)
 8005e3a:	4293      	cmp	r3, r2
 8005e3c:	d901      	bls.n	8005e42 <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 8005e3e:	2303      	movs	r3, #3
 8005e40:	e006      	b.n	8005e50 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	691b      	ldr	r3, [r3, #16]
 8005e46:	f003 0310 	and.w	r3, r3, #16
 8005e4a:	2b10      	cmp	r3, #16
 8005e4c:	d0f1      	beq.n	8005e32 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8005e4e:	2300      	movs	r3, #0
}
 8005e50:	4618      	mov	r0, r3
 8005e52:	3714      	adds	r7, #20
 8005e54:	46bd      	mov	sp, r7
 8005e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e5a:	4770      	bx	lr
 8005e5c:	00030d40 	.word	0x00030d40

08005e60 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005e60:	b480      	push	{r7}
 8005e62:	b085      	sub	sp, #20
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	6078      	str	r0, [r7, #4]
 8005e68:	460b      	mov	r3, r1
 8005e6a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e76:	681a      	ldr	r2, [r3, #0]
 8005e78:	78fb      	ldrb	r3, [r7, #3]
 8005e7a:	68f9      	ldr	r1, [r7, #12]
 8005e7c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005e80:	4313      	orrs	r3, r2
 8005e82:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005e84:	2300      	movs	r3, #0
}
 8005e86:	4618      	mov	r0, r3
 8005e88:	3714      	adds	r7, #20
 8005e8a:	46bd      	mov	sp, r7
 8005e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e90:	4770      	bx	lr

08005e92 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005e92:	b480      	push	{r7}
 8005e94:	b087      	sub	sp, #28
 8005e96:	af00      	add	r7, sp, #0
 8005e98:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8005e9e:	693b      	ldr	r3, [r7, #16]
 8005ea0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ea4:	689b      	ldr	r3, [r3, #8]
 8005ea6:	f003 0306 	and.w	r3, r3, #6
 8005eaa:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d102      	bne.n	8005eb8 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8005eb2:	2300      	movs	r3, #0
 8005eb4:	75fb      	strb	r3, [r7, #23]
 8005eb6:	e00a      	b.n	8005ece <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	2b02      	cmp	r3, #2
 8005ebc:	d002      	beq.n	8005ec4 <USB_GetDevSpeed+0x32>
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	2b06      	cmp	r3, #6
 8005ec2:	d102      	bne.n	8005eca <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005ec4:	2302      	movs	r3, #2
 8005ec6:	75fb      	strb	r3, [r7, #23]
 8005ec8:	e001      	b.n	8005ece <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8005eca:	230f      	movs	r3, #15
 8005ecc:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8005ece:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ed0:	4618      	mov	r0, r3
 8005ed2:	371c      	adds	r7, #28
 8005ed4:	46bd      	mov	sp, r7
 8005ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eda:	4770      	bx	lr

08005edc <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005edc:	b480      	push	{r7}
 8005ede:	b085      	sub	sp, #20
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	6078      	str	r0, [r7, #4]
 8005ee4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005eea:	683b      	ldr	r3, [r7, #0]
 8005eec:	781b      	ldrb	r3, [r3, #0]
 8005eee:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005ef0:	683b      	ldr	r3, [r7, #0]
 8005ef2:	785b      	ldrb	r3, [r3, #1]
 8005ef4:	2b01      	cmp	r3, #1
 8005ef6:	d13a      	bne.n	8005f6e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005efe:	69da      	ldr	r2, [r3, #28]
 8005f00:	683b      	ldr	r3, [r7, #0]
 8005f02:	781b      	ldrb	r3, [r3, #0]
 8005f04:	f003 030f 	and.w	r3, r3, #15
 8005f08:	2101      	movs	r1, #1
 8005f0a:	fa01 f303 	lsl.w	r3, r1, r3
 8005f0e:	b29b      	uxth	r3, r3
 8005f10:	68f9      	ldr	r1, [r7, #12]
 8005f12:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005f16:	4313      	orrs	r3, r2
 8005f18:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8005f1a:	68bb      	ldr	r3, [r7, #8]
 8005f1c:	015a      	lsls	r2, r3, #5
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	4413      	add	r3, r2
 8005f22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d155      	bne.n	8005fdc <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005f30:	68bb      	ldr	r3, [r7, #8]
 8005f32:	015a      	lsls	r2, r3, #5
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	4413      	add	r3, r2
 8005f38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f3c:	681a      	ldr	r2, [r3, #0]
 8005f3e:	683b      	ldr	r3, [r7, #0]
 8005f40:	689b      	ldr	r3, [r3, #8]
 8005f42:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005f46:	683b      	ldr	r3, [r7, #0]
 8005f48:	78db      	ldrb	r3, [r3, #3]
 8005f4a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005f4c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005f4e:	68bb      	ldr	r3, [r7, #8]
 8005f50:	059b      	lsls	r3, r3, #22
 8005f52:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005f54:	4313      	orrs	r3, r2
 8005f56:	68ba      	ldr	r2, [r7, #8]
 8005f58:	0151      	lsls	r1, r2, #5
 8005f5a:	68fa      	ldr	r2, [r7, #12]
 8005f5c:	440a      	add	r2, r1
 8005f5e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f62:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005f66:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f6a:	6013      	str	r3, [r2, #0]
 8005f6c:	e036      	b.n	8005fdc <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f74:	69da      	ldr	r2, [r3, #28]
 8005f76:	683b      	ldr	r3, [r7, #0]
 8005f78:	781b      	ldrb	r3, [r3, #0]
 8005f7a:	f003 030f 	and.w	r3, r3, #15
 8005f7e:	2101      	movs	r1, #1
 8005f80:	fa01 f303 	lsl.w	r3, r1, r3
 8005f84:	041b      	lsls	r3, r3, #16
 8005f86:	68f9      	ldr	r1, [r7, #12]
 8005f88:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005f8c:	4313      	orrs	r3, r2
 8005f8e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005f90:	68bb      	ldr	r3, [r7, #8]
 8005f92:	015a      	lsls	r2, r3, #5
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	4413      	add	r3, r2
 8005f98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d11a      	bne.n	8005fdc <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005fa6:	68bb      	ldr	r3, [r7, #8]
 8005fa8:	015a      	lsls	r2, r3, #5
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	4413      	add	r3, r2
 8005fae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fb2:	681a      	ldr	r2, [r3, #0]
 8005fb4:	683b      	ldr	r3, [r7, #0]
 8005fb6:	689b      	ldr	r3, [r3, #8]
 8005fb8:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005fbc:	683b      	ldr	r3, [r7, #0]
 8005fbe:	78db      	ldrb	r3, [r3, #3]
 8005fc0:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005fc2:	430b      	orrs	r3, r1
 8005fc4:	4313      	orrs	r3, r2
 8005fc6:	68ba      	ldr	r2, [r7, #8]
 8005fc8:	0151      	lsls	r1, r2, #5
 8005fca:	68fa      	ldr	r2, [r7, #12]
 8005fcc:	440a      	add	r2, r1
 8005fce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005fd2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005fd6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005fda:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005fdc:	2300      	movs	r3, #0
}
 8005fde:	4618      	mov	r0, r3
 8005fe0:	3714      	adds	r7, #20
 8005fe2:	46bd      	mov	sp, r7
 8005fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe8:	4770      	bx	lr
	...

08005fec <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005fec:	b480      	push	{r7}
 8005fee:	b085      	sub	sp, #20
 8005ff0:	af00      	add	r7, sp, #0
 8005ff2:	6078      	str	r0, [r7, #4]
 8005ff4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005ffa:	683b      	ldr	r3, [r7, #0]
 8005ffc:	781b      	ldrb	r3, [r3, #0]
 8005ffe:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8006000:	683b      	ldr	r3, [r7, #0]
 8006002:	785b      	ldrb	r3, [r3, #1]
 8006004:	2b01      	cmp	r3, #1
 8006006:	d161      	bne.n	80060cc <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006008:	68bb      	ldr	r3, [r7, #8]
 800600a:	015a      	lsls	r2, r3, #5
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	4413      	add	r3, r2
 8006010:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800601a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800601e:	d11f      	bne.n	8006060 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8006020:	68bb      	ldr	r3, [r7, #8]
 8006022:	015a      	lsls	r2, r3, #5
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	4413      	add	r3, r2
 8006028:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	68ba      	ldr	r2, [r7, #8]
 8006030:	0151      	lsls	r1, r2, #5
 8006032:	68fa      	ldr	r2, [r7, #12]
 8006034:	440a      	add	r2, r1
 8006036:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800603a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800603e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8006040:	68bb      	ldr	r3, [r7, #8]
 8006042:	015a      	lsls	r2, r3, #5
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	4413      	add	r3, r2
 8006048:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	68ba      	ldr	r2, [r7, #8]
 8006050:	0151      	lsls	r1, r2, #5
 8006052:	68fa      	ldr	r2, [r7, #12]
 8006054:	440a      	add	r2, r1
 8006056:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800605a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800605e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006066:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006068:	683b      	ldr	r3, [r7, #0]
 800606a:	781b      	ldrb	r3, [r3, #0]
 800606c:	f003 030f 	and.w	r3, r3, #15
 8006070:	2101      	movs	r1, #1
 8006072:	fa01 f303 	lsl.w	r3, r1, r3
 8006076:	b29b      	uxth	r3, r3
 8006078:	43db      	mvns	r3, r3
 800607a:	68f9      	ldr	r1, [r7, #12]
 800607c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006080:	4013      	ands	r3, r2
 8006082:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800608a:	69da      	ldr	r2, [r3, #28]
 800608c:	683b      	ldr	r3, [r7, #0]
 800608e:	781b      	ldrb	r3, [r3, #0]
 8006090:	f003 030f 	and.w	r3, r3, #15
 8006094:	2101      	movs	r1, #1
 8006096:	fa01 f303 	lsl.w	r3, r1, r3
 800609a:	b29b      	uxth	r3, r3
 800609c:	43db      	mvns	r3, r3
 800609e:	68f9      	ldr	r1, [r7, #12]
 80060a0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80060a4:	4013      	ands	r3, r2
 80060a6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80060a8:	68bb      	ldr	r3, [r7, #8]
 80060aa:	015a      	lsls	r2, r3, #5
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	4413      	add	r3, r2
 80060b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060b4:	681a      	ldr	r2, [r3, #0]
 80060b6:	68bb      	ldr	r3, [r7, #8]
 80060b8:	0159      	lsls	r1, r3, #5
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	440b      	add	r3, r1
 80060be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060c2:	4619      	mov	r1, r3
 80060c4:	4b35      	ldr	r3, [pc, #212]	; (800619c <USB_DeactivateEndpoint+0x1b0>)
 80060c6:	4013      	ands	r3, r2
 80060c8:	600b      	str	r3, [r1, #0]
 80060ca:	e060      	b.n	800618e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80060cc:	68bb      	ldr	r3, [r7, #8]
 80060ce:	015a      	lsls	r2, r3, #5
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	4413      	add	r3, r2
 80060d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80060de:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80060e2:	d11f      	bne.n	8006124 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80060e4:	68bb      	ldr	r3, [r7, #8]
 80060e6:	015a      	lsls	r2, r3, #5
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	4413      	add	r3, r2
 80060ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	68ba      	ldr	r2, [r7, #8]
 80060f4:	0151      	lsls	r1, r2, #5
 80060f6:	68fa      	ldr	r2, [r7, #12]
 80060f8:	440a      	add	r2, r1
 80060fa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80060fe:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006102:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8006104:	68bb      	ldr	r3, [r7, #8]
 8006106:	015a      	lsls	r2, r3, #5
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	4413      	add	r3, r2
 800610c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	68ba      	ldr	r2, [r7, #8]
 8006114:	0151      	lsls	r1, r2, #5
 8006116:	68fa      	ldr	r2, [r7, #12]
 8006118:	440a      	add	r2, r1
 800611a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800611e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006122:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800612a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800612c:	683b      	ldr	r3, [r7, #0]
 800612e:	781b      	ldrb	r3, [r3, #0]
 8006130:	f003 030f 	and.w	r3, r3, #15
 8006134:	2101      	movs	r1, #1
 8006136:	fa01 f303 	lsl.w	r3, r1, r3
 800613a:	041b      	lsls	r3, r3, #16
 800613c:	43db      	mvns	r3, r3
 800613e:	68f9      	ldr	r1, [r7, #12]
 8006140:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006144:	4013      	ands	r3, r2
 8006146:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800614e:	69da      	ldr	r2, [r3, #28]
 8006150:	683b      	ldr	r3, [r7, #0]
 8006152:	781b      	ldrb	r3, [r3, #0]
 8006154:	f003 030f 	and.w	r3, r3, #15
 8006158:	2101      	movs	r1, #1
 800615a:	fa01 f303 	lsl.w	r3, r1, r3
 800615e:	041b      	lsls	r3, r3, #16
 8006160:	43db      	mvns	r3, r3
 8006162:	68f9      	ldr	r1, [r7, #12]
 8006164:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006168:	4013      	ands	r3, r2
 800616a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800616c:	68bb      	ldr	r3, [r7, #8]
 800616e:	015a      	lsls	r2, r3, #5
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	4413      	add	r3, r2
 8006174:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006178:	681a      	ldr	r2, [r3, #0]
 800617a:	68bb      	ldr	r3, [r7, #8]
 800617c:	0159      	lsls	r1, r3, #5
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	440b      	add	r3, r1
 8006182:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006186:	4619      	mov	r1, r3
 8006188:	4b05      	ldr	r3, [pc, #20]	; (80061a0 <USB_DeactivateEndpoint+0x1b4>)
 800618a:	4013      	ands	r3, r2
 800618c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800618e:	2300      	movs	r3, #0
}
 8006190:	4618      	mov	r0, r3
 8006192:	3714      	adds	r7, #20
 8006194:	46bd      	mov	sp, r7
 8006196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800619a:	4770      	bx	lr
 800619c:	ec337800 	.word	0xec337800
 80061a0:	eff37800 	.word	0xeff37800

080061a4 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80061a4:	b580      	push	{r7, lr}
 80061a6:	b08a      	sub	sp, #40	; 0x28
 80061a8:	af02      	add	r7, sp, #8
 80061aa:	60f8      	str	r0, [r7, #12]
 80061ac:	60b9      	str	r1, [r7, #8]
 80061ae:	4613      	mov	r3, r2
 80061b0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80061b6:	68bb      	ldr	r3, [r7, #8]
 80061b8:	781b      	ldrb	r3, [r3, #0]
 80061ba:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80061bc:	68bb      	ldr	r3, [r7, #8]
 80061be:	785b      	ldrb	r3, [r3, #1]
 80061c0:	2b01      	cmp	r3, #1
 80061c2:	f040 815c 	bne.w	800647e <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80061c6:	68bb      	ldr	r3, [r7, #8]
 80061c8:	695b      	ldr	r3, [r3, #20]
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d132      	bne.n	8006234 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80061ce:	69bb      	ldr	r3, [r7, #24]
 80061d0:	015a      	lsls	r2, r3, #5
 80061d2:	69fb      	ldr	r3, [r7, #28]
 80061d4:	4413      	add	r3, r2
 80061d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061da:	691b      	ldr	r3, [r3, #16]
 80061dc:	69ba      	ldr	r2, [r7, #24]
 80061de:	0151      	lsls	r1, r2, #5
 80061e0:	69fa      	ldr	r2, [r7, #28]
 80061e2:	440a      	add	r2, r1
 80061e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80061e8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80061ec:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80061f0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80061f2:	69bb      	ldr	r3, [r7, #24]
 80061f4:	015a      	lsls	r2, r3, #5
 80061f6:	69fb      	ldr	r3, [r7, #28]
 80061f8:	4413      	add	r3, r2
 80061fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061fe:	691b      	ldr	r3, [r3, #16]
 8006200:	69ba      	ldr	r2, [r7, #24]
 8006202:	0151      	lsls	r1, r2, #5
 8006204:	69fa      	ldr	r2, [r7, #28]
 8006206:	440a      	add	r2, r1
 8006208:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800620c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006210:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006212:	69bb      	ldr	r3, [r7, #24]
 8006214:	015a      	lsls	r2, r3, #5
 8006216:	69fb      	ldr	r3, [r7, #28]
 8006218:	4413      	add	r3, r2
 800621a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800621e:	691b      	ldr	r3, [r3, #16]
 8006220:	69ba      	ldr	r2, [r7, #24]
 8006222:	0151      	lsls	r1, r2, #5
 8006224:	69fa      	ldr	r2, [r7, #28]
 8006226:	440a      	add	r2, r1
 8006228:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800622c:	0cdb      	lsrs	r3, r3, #19
 800622e:	04db      	lsls	r3, r3, #19
 8006230:	6113      	str	r3, [r2, #16]
 8006232:	e074      	b.n	800631e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006234:	69bb      	ldr	r3, [r7, #24]
 8006236:	015a      	lsls	r2, r3, #5
 8006238:	69fb      	ldr	r3, [r7, #28]
 800623a:	4413      	add	r3, r2
 800623c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006240:	691b      	ldr	r3, [r3, #16]
 8006242:	69ba      	ldr	r2, [r7, #24]
 8006244:	0151      	lsls	r1, r2, #5
 8006246:	69fa      	ldr	r2, [r7, #28]
 8006248:	440a      	add	r2, r1
 800624a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800624e:	0cdb      	lsrs	r3, r3, #19
 8006250:	04db      	lsls	r3, r3, #19
 8006252:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006254:	69bb      	ldr	r3, [r7, #24]
 8006256:	015a      	lsls	r2, r3, #5
 8006258:	69fb      	ldr	r3, [r7, #28]
 800625a:	4413      	add	r3, r2
 800625c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006260:	691b      	ldr	r3, [r3, #16]
 8006262:	69ba      	ldr	r2, [r7, #24]
 8006264:	0151      	lsls	r1, r2, #5
 8006266:	69fa      	ldr	r2, [r7, #28]
 8006268:	440a      	add	r2, r1
 800626a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800626e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006272:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006276:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8006278:	69bb      	ldr	r3, [r7, #24]
 800627a:	015a      	lsls	r2, r3, #5
 800627c:	69fb      	ldr	r3, [r7, #28]
 800627e:	4413      	add	r3, r2
 8006280:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006284:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8006286:	68bb      	ldr	r3, [r7, #8]
 8006288:	6959      	ldr	r1, [r3, #20]
 800628a:	68bb      	ldr	r3, [r7, #8]
 800628c:	689b      	ldr	r3, [r3, #8]
 800628e:	440b      	add	r3, r1
 8006290:	1e59      	subs	r1, r3, #1
 8006292:	68bb      	ldr	r3, [r7, #8]
 8006294:	689b      	ldr	r3, [r3, #8]
 8006296:	fbb1 f3f3 	udiv	r3, r1, r3
 800629a:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800629c:	4b9d      	ldr	r3, [pc, #628]	; (8006514 <USB_EPStartXfer+0x370>)
 800629e:	400b      	ands	r3, r1
 80062a0:	69b9      	ldr	r1, [r7, #24]
 80062a2:	0148      	lsls	r0, r1, #5
 80062a4:	69f9      	ldr	r1, [r7, #28]
 80062a6:	4401      	add	r1, r0
 80062a8:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80062ac:	4313      	orrs	r3, r2
 80062ae:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80062b0:	69bb      	ldr	r3, [r7, #24]
 80062b2:	015a      	lsls	r2, r3, #5
 80062b4:	69fb      	ldr	r3, [r7, #28]
 80062b6:	4413      	add	r3, r2
 80062b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062bc:	691a      	ldr	r2, [r3, #16]
 80062be:	68bb      	ldr	r3, [r7, #8]
 80062c0:	695b      	ldr	r3, [r3, #20]
 80062c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80062c6:	69b9      	ldr	r1, [r7, #24]
 80062c8:	0148      	lsls	r0, r1, #5
 80062ca:	69f9      	ldr	r1, [r7, #28]
 80062cc:	4401      	add	r1, r0
 80062ce:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80062d2:	4313      	orrs	r3, r2
 80062d4:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80062d6:	68bb      	ldr	r3, [r7, #8]
 80062d8:	78db      	ldrb	r3, [r3, #3]
 80062da:	2b01      	cmp	r3, #1
 80062dc:	d11f      	bne.n	800631e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80062de:	69bb      	ldr	r3, [r7, #24]
 80062e0:	015a      	lsls	r2, r3, #5
 80062e2:	69fb      	ldr	r3, [r7, #28]
 80062e4:	4413      	add	r3, r2
 80062e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062ea:	691b      	ldr	r3, [r3, #16]
 80062ec:	69ba      	ldr	r2, [r7, #24]
 80062ee:	0151      	lsls	r1, r2, #5
 80062f0:	69fa      	ldr	r2, [r7, #28]
 80062f2:	440a      	add	r2, r1
 80062f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80062f8:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80062fc:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80062fe:	69bb      	ldr	r3, [r7, #24]
 8006300:	015a      	lsls	r2, r3, #5
 8006302:	69fb      	ldr	r3, [r7, #28]
 8006304:	4413      	add	r3, r2
 8006306:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800630a:	691b      	ldr	r3, [r3, #16]
 800630c:	69ba      	ldr	r2, [r7, #24]
 800630e:	0151      	lsls	r1, r2, #5
 8006310:	69fa      	ldr	r2, [r7, #28]
 8006312:	440a      	add	r2, r1
 8006314:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006318:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800631c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800631e:	79fb      	ldrb	r3, [r7, #7]
 8006320:	2b01      	cmp	r3, #1
 8006322:	d14b      	bne.n	80063bc <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006324:	68bb      	ldr	r3, [r7, #8]
 8006326:	691b      	ldr	r3, [r3, #16]
 8006328:	2b00      	cmp	r3, #0
 800632a:	d009      	beq.n	8006340 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800632c:	69bb      	ldr	r3, [r7, #24]
 800632e:	015a      	lsls	r2, r3, #5
 8006330:	69fb      	ldr	r3, [r7, #28]
 8006332:	4413      	add	r3, r2
 8006334:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006338:	461a      	mov	r2, r3
 800633a:	68bb      	ldr	r3, [r7, #8]
 800633c:	691b      	ldr	r3, [r3, #16]
 800633e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8006340:	68bb      	ldr	r3, [r7, #8]
 8006342:	78db      	ldrb	r3, [r3, #3]
 8006344:	2b01      	cmp	r3, #1
 8006346:	d128      	bne.n	800639a <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006348:	69fb      	ldr	r3, [r7, #28]
 800634a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800634e:	689b      	ldr	r3, [r3, #8]
 8006350:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006354:	2b00      	cmp	r3, #0
 8006356:	d110      	bne.n	800637a <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006358:	69bb      	ldr	r3, [r7, #24]
 800635a:	015a      	lsls	r2, r3, #5
 800635c:	69fb      	ldr	r3, [r7, #28]
 800635e:	4413      	add	r3, r2
 8006360:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	69ba      	ldr	r2, [r7, #24]
 8006368:	0151      	lsls	r1, r2, #5
 800636a:	69fa      	ldr	r2, [r7, #28]
 800636c:	440a      	add	r2, r1
 800636e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006372:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006376:	6013      	str	r3, [r2, #0]
 8006378:	e00f      	b.n	800639a <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800637a:	69bb      	ldr	r3, [r7, #24]
 800637c:	015a      	lsls	r2, r3, #5
 800637e:	69fb      	ldr	r3, [r7, #28]
 8006380:	4413      	add	r3, r2
 8006382:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	69ba      	ldr	r2, [r7, #24]
 800638a:	0151      	lsls	r1, r2, #5
 800638c:	69fa      	ldr	r2, [r7, #28]
 800638e:	440a      	add	r2, r1
 8006390:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006394:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006398:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800639a:	69bb      	ldr	r3, [r7, #24]
 800639c:	015a      	lsls	r2, r3, #5
 800639e:	69fb      	ldr	r3, [r7, #28]
 80063a0:	4413      	add	r3, r2
 80063a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	69ba      	ldr	r2, [r7, #24]
 80063aa:	0151      	lsls	r1, r2, #5
 80063ac:	69fa      	ldr	r2, [r7, #28]
 80063ae:	440a      	add	r2, r1
 80063b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80063b4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80063b8:	6013      	str	r3, [r2, #0]
 80063ba:	e12f      	b.n	800661c <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80063bc:	69bb      	ldr	r3, [r7, #24]
 80063be:	015a      	lsls	r2, r3, #5
 80063c0:	69fb      	ldr	r3, [r7, #28]
 80063c2:	4413      	add	r3, r2
 80063c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	69ba      	ldr	r2, [r7, #24]
 80063cc:	0151      	lsls	r1, r2, #5
 80063ce:	69fa      	ldr	r2, [r7, #28]
 80063d0:	440a      	add	r2, r1
 80063d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80063d6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80063da:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80063dc:	68bb      	ldr	r3, [r7, #8]
 80063de:	78db      	ldrb	r3, [r3, #3]
 80063e0:	2b01      	cmp	r3, #1
 80063e2:	d015      	beq.n	8006410 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80063e4:	68bb      	ldr	r3, [r7, #8]
 80063e6:	695b      	ldr	r3, [r3, #20]
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	f000 8117 	beq.w	800661c <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80063ee:	69fb      	ldr	r3, [r7, #28]
 80063f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80063f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80063f6:	68bb      	ldr	r3, [r7, #8]
 80063f8:	781b      	ldrb	r3, [r3, #0]
 80063fa:	f003 030f 	and.w	r3, r3, #15
 80063fe:	2101      	movs	r1, #1
 8006400:	fa01 f303 	lsl.w	r3, r1, r3
 8006404:	69f9      	ldr	r1, [r7, #28]
 8006406:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800640a:	4313      	orrs	r3, r2
 800640c:	634b      	str	r3, [r1, #52]	; 0x34
 800640e:	e105      	b.n	800661c <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006410:	69fb      	ldr	r3, [r7, #28]
 8006412:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006416:	689b      	ldr	r3, [r3, #8]
 8006418:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800641c:	2b00      	cmp	r3, #0
 800641e:	d110      	bne.n	8006442 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006420:	69bb      	ldr	r3, [r7, #24]
 8006422:	015a      	lsls	r2, r3, #5
 8006424:	69fb      	ldr	r3, [r7, #28]
 8006426:	4413      	add	r3, r2
 8006428:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	69ba      	ldr	r2, [r7, #24]
 8006430:	0151      	lsls	r1, r2, #5
 8006432:	69fa      	ldr	r2, [r7, #28]
 8006434:	440a      	add	r2, r1
 8006436:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800643a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800643e:	6013      	str	r3, [r2, #0]
 8006440:	e00f      	b.n	8006462 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006442:	69bb      	ldr	r3, [r7, #24]
 8006444:	015a      	lsls	r2, r3, #5
 8006446:	69fb      	ldr	r3, [r7, #28]
 8006448:	4413      	add	r3, r2
 800644a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	69ba      	ldr	r2, [r7, #24]
 8006452:	0151      	lsls	r1, r2, #5
 8006454:	69fa      	ldr	r2, [r7, #28]
 8006456:	440a      	add	r2, r1
 8006458:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800645c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006460:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8006462:	68bb      	ldr	r3, [r7, #8]
 8006464:	68d9      	ldr	r1, [r3, #12]
 8006466:	68bb      	ldr	r3, [r7, #8]
 8006468:	781a      	ldrb	r2, [r3, #0]
 800646a:	68bb      	ldr	r3, [r7, #8]
 800646c:	695b      	ldr	r3, [r3, #20]
 800646e:	b298      	uxth	r0, r3
 8006470:	79fb      	ldrb	r3, [r7, #7]
 8006472:	9300      	str	r3, [sp, #0]
 8006474:	4603      	mov	r3, r0
 8006476:	68f8      	ldr	r0, [r7, #12]
 8006478:	f000 fa2b 	bl	80068d2 <USB_WritePacket>
 800647c:	e0ce      	b.n	800661c <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800647e:	69bb      	ldr	r3, [r7, #24]
 8006480:	015a      	lsls	r2, r3, #5
 8006482:	69fb      	ldr	r3, [r7, #28]
 8006484:	4413      	add	r3, r2
 8006486:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800648a:	691b      	ldr	r3, [r3, #16]
 800648c:	69ba      	ldr	r2, [r7, #24]
 800648e:	0151      	lsls	r1, r2, #5
 8006490:	69fa      	ldr	r2, [r7, #28]
 8006492:	440a      	add	r2, r1
 8006494:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006498:	0cdb      	lsrs	r3, r3, #19
 800649a:	04db      	lsls	r3, r3, #19
 800649c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800649e:	69bb      	ldr	r3, [r7, #24]
 80064a0:	015a      	lsls	r2, r3, #5
 80064a2:	69fb      	ldr	r3, [r7, #28]
 80064a4:	4413      	add	r3, r2
 80064a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064aa:	691b      	ldr	r3, [r3, #16]
 80064ac:	69ba      	ldr	r2, [r7, #24]
 80064ae:	0151      	lsls	r1, r2, #5
 80064b0:	69fa      	ldr	r2, [r7, #28]
 80064b2:	440a      	add	r2, r1
 80064b4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80064b8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80064bc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80064c0:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80064c2:	68bb      	ldr	r3, [r7, #8]
 80064c4:	695b      	ldr	r3, [r3, #20]
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d126      	bne.n	8006518 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80064ca:	69bb      	ldr	r3, [r7, #24]
 80064cc:	015a      	lsls	r2, r3, #5
 80064ce:	69fb      	ldr	r3, [r7, #28]
 80064d0:	4413      	add	r3, r2
 80064d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064d6:	691a      	ldr	r2, [r3, #16]
 80064d8:	68bb      	ldr	r3, [r7, #8]
 80064da:	689b      	ldr	r3, [r3, #8]
 80064dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80064e0:	69b9      	ldr	r1, [r7, #24]
 80064e2:	0148      	lsls	r0, r1, #5
 80064e4:	69f9      	ldr	r1, [r7, #28]
 80064e6:	4401      	add	r1, r0
 80064e8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80064ec:	4313      	orrs	r3, r2
 80064ee:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80064f0:	69bb      	ldr	r3, [r7, #24]
 80064f2:	015a      	lsls	r2, r3, #5
 80064f4:	69fb      	ldr	r3, [r7, #28]
 80064f6:	4413      	add	r3, r2
 80064f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064fc:	691b      	ldr	r3, [r3, #16]
 80064fe:	69ba      	ldr	r2, [r7, #24]
 8006500:	0151      	lsls	r1, r2, #5
 8006502:	69fa      	ldr	r2, [r7, #28]
 8006504:	440a      	add	r2, r1
 8006506:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800650a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800650e:	6113      	str	r3, [r2, #16]
 8006510:	e036      	b.n	8006580 <USB_EPStartXfer+0x3dc>
 8006512:	bf00      	nop
 8006514:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006518:	68bb      	ldr	r3, [r7, #8]
 800651a:	695a      	ldr	r2, [r3, #20]
 800651c:	68bb      	ldr	r3, [r7, #8]
 800651e:	689b      	ldr	r3, [r3, #8]
 8006520:	4413      	add	r3, r2
 8006522:	1e5a      	subs	r2, r3, #1
 8006524:	68bb      	ldr	r3, [r7, #8]
 8006526:	689b      	ldr	r3, [r3, #8]
 8006528:	fbb2 f3f3 	udiv	r3, r2, r3
 800652c:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800652e:	69bb      	ldr	r3, [r7, #24]
 8006530:	015a      	lsls	r2, r3, #5
 8006532:	69fb      	ldr	r3, [r7, #28]
 8006534:	4413      	add	r3, r2
 8006536:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800653a:	691a      	ldr	r2, [r3, #16]
 800653c:	8afb      	ldrh	r3, [r7, #22]
 800653e:	04d9      	lsls	r1, r3, #19
 8006540:	4b39      	ldr	r3, [pc, #228]	; (8006628 <USB_EPStartXfer+0x484>)
 8006542:	400b      	ands	r3, r1
 8006544:	69b9      	ldr	r1, [r7, #24]
 8006546:	0148      	lsls	r0, r1, #5
 8006548:	69f9      	ldr	r1, [r7, #28]
 800654a:	4401      	add	r1, r0
 800654c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006550:	4313      	orrs	r3, r2
 8006552:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8006554:	69bb      	ldr	r3, [r7, #24]
 8006556:	015a      	lsls	r2, r3, #5
 8006558:	69fb      	ldr	r3, [r7, #28]
 800655a:	4413      	add	r3, r2
 800655c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006560:	691a      	ldr	r2, [r3, #16]
 8006562:	68bb      	ldr	r3, [r7, #8]
 8006564:	689b      	ldr	r3, [r3, #8]
 8006566:	8af9      	ldrh	r1, [r7, #22]
 8006568:	fb01 f303 	mul.w	r3, r1, r3
 800656c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006570:	69b9      	ldr	r1, [r7, #24]
 8006572:	0148      	lsls	r0, r1, #5
 8006574:	69f9      	ldr	r1, [r7, #28]
 8006576:	4401      	add	r1, r0
 8006578:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800657c:	4313      	orrs	r3, r2
 800657e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006580:	79fb      	ldrb	r3, [r7, #7]
 8006582:	2b01      	cmp	r3, #1
 8006584:	d10d      	bne.n	80065a2 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006586:	68bb      	ldr	r3, [r7, #8]
 8006588:	68db      	ldr	r3, [r3, #12]
 800658a:	2b00      	cmp	r3, #0
 800658c:	d009      	beq.n	80065a2 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800658e:	68bb      	ldr	r3, [r7, #8]
 8006590:	68d9      	ldr	r1, [r3, #12]
 8006592:	69bb      	ldr	r3, [r7, #24]
 8006594:	015a      	lsls	r2, r3, #5
 8006596:	69fb      	ldr	r3, [r7, #28]
 8006598:	4413      	add	r3, r2
 800659a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800659e:	460a      	mov	r2, r1
 80065a0:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80065a2:	68bb      	ldr	r3, [r7, #8]
 80065a4:	78db      	ldrb	r3, [r3, #3]
 80065a6:	2b01      	cmp	r3, #1
 80065a8:	d128      	bne.n	80065fc <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80065aa:	69fb      	ldr	r3, [r7, #28]
 80065ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065b0:	689b      	ldr	r3, [r3, #8]
 80065b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d110      	bne.n	80065dc <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80065ba:	69bb      	ldr	r3, [r7, #24]
 80065bc:	015a      	lsls	r2, r3, #5
 80065be:	69fb      	ldr	r3, [r7, #28]
 80065c0:	4413      	add	r3, r2
 80065c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	69ba      	ldr	r2, [r7, #24]
 80065ca:	0151      	lsls	r1, r2, #5
 80065cc:	69fa      	ldr	r2, [r7, #28]
 80065ce:	440a      	add	r2, r1
 80065d0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80065d4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80065d8:	6013      	str	r3, [r2, #0]
 80065da:	e00f      	b.n	80065fc <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80065dc:	69bb      	ldr	r3, [r7, #24]
 80065de:	015a      	lsls	r2, r3, #5
 80065e0:	69fb      	ldr	r3, [r7, #28]
 80065e2:	4413      	add	r3, r2
 80065e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	69ba      	ldr	r2, [r7, #24]
 80065ec:	0151      	lsls	r1, r2, #5
 80065ee:	69fa      	ldr	r2, [r7, #28]
 80065f0:	440a      	add	r2, r1
 80065f2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80065f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80065fa:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80065fc:	69bb      	ldr	r3, [r7, #24]
 80065fe:	015a      	lsls	r2, r3, #5
 8006600:	69fb      	ldr	r3, [r7, #28]
 8006602:	4413      	add	r3, r2
 8006604:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	69ba      	ldr	r2, [r7, #24]
 800660c:	0151      	lsls	r1, r2, #5
 800660e:	69fa      	ldr	r2, [r7, #28]
 8006610:	440a      	add	r2, r1
 8006612:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006616:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800661a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800661c:	2300      	movs	r3, #0
}
 800661e:	4618      	mov	r0, r3
 8006620:	3720      	adds	r7, #32
 8006622:	46bd      	mov	sp, r7
 8006624:	bd80      	pop	{r7, pc}
 8006626:	bf00      	nop
 8006628:	1ff80000 	.word	0x1ff80000

0800662c <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800662c:	b480      	push	{r7}
 800662e:	b087      	sub	sp, #28
 8006630:	af00      	add	r7, sp, #0
 8006632:	60f8      	str	r0, [r7, #12]
 8006634:	60b9      	str	r1, [r7, #8]
 8006636:	4613      	mov	r3, r2
 8006638:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800663e:	68bb      	ldr	r3, [r7, #8]
 8006640:	781b      	ldrb	r3, [r3, #0]
 8006642:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006644:	68bb      	ldr	r3, [r7, #8]
 8006646:	785b      	ldrb	r3, [r3, #1]
 8006648:	2b01      	cmp	r3, #1
 800664a:	f040 80cd 	bne.w	80067e8 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800664e:	68bb      	ldr	r3, [r7, #8]
 8006650:	695b      	ldr	r3, [r3, #20]
 8006652:	2b00      	cmp	r3, #0
 8006654:	d132      	bne.n	80066bc <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006656:	693b      	ldr	r3, [r7, #16]
 8006658:	015a      	lsls	r2, r3, #5
 800665a:	697b      	ldr	r3, [r7, #20]
 800665c:	4413      	add	r3, r2
 800665e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006662:	691b      	ldr	r3, [r3, #16]
 8006664:	693a      	ldr	r2, [r7, #16]
 8006666:	0151      	lsls	r1, r2, #5
 8006668:	697a      	ldr	r2, [r7, #20]
 800666a:	440a      	add	r2, r1
 800666c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006670:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006674:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006678:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800667a:	693b      	ldr	r3, [r7, #16]
 800667c:	015a      	lsls	r2, r3, #5
 800667e:	697b      	ldr	r3, [r7, #20]
 8006680:	4413      	add	r3, r2
 8006682:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006686:	691b      	ldr	r3, [r3, #16]
 8006688:	693a      	ldr	r2, [r7, #16]
 800668a:	0151      	lsls	r1, r2, #5
 800668c:	697a      	ldr	r2, [r7, #20]
 800668e:	440a      	add	r2, r1
 8006690:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006694:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006698:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800669a:	693b      	ldr	r3, [r7, #16]
 800669c:	015a      	lsls	r2, r3, #5
 800669e:	697b      	ldr	r3, [r7, #20]
 80066a0:	4413      	add	r3, r2
 80066a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066a6:	691b      	ldr	r3, [r3, #16]
 80066a8:	693a      	ldr	r2, [r7, #16]
 80066aa:	0151      	lsls	r1, r2, #5
 80066ac:	697a      	ldr	r2, [r7, #20]
 80066ae:	440a      	add	r2, r1
 80066b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80066b4:	0cdb      	lsrs	r3, r3, #19
 80066b6:	04db      	lsls	r3, r3, #19
 80066b8:	6113      	str	r3, [r2, #16]
 80066ba:	e04e      	b.n	800675a <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80066bc:	693b      	ldr	r3, [r7, #16]
 80066be:	015a      	lsls	r2, r3, #5
 80066c0:	697b      	ldr	r3, [r7, #20]
 80066c2:	4413      	add	r3, r2
 80066c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066c8:	691b      	ldr	r3, [r3, #16]
 80066ca:	693a      	ldr	r2, [r7, #16]
 80066cc:	0151      	lsls	r1, r2, #5
 80066ce:	697a      	ldr	r2, [r7, #20]
 80066d0:	440a      	add	r2, r1
 80066d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80066d6:	0cdb      	lsrs	r3, r3, #19
 80066d8:	04db      	lsls	r3, r3, #19
 80066da:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80066dc:	693b      	ldr	r3, [r7, #16]
 80066de:	015a      	lsls	r2, r3, #5
 80066e0:	697b      	ldr	r3, [r7, #20]
 80066e2:	4413      	add	r3, r2
 80066e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066e8:	691b      	ldr	r3, [r3, #16]
 80066ea:	693a      	ldr	r2, [r7, #16]
 80066ec:	0151      	lsls	r1, r2, #5
 80066ee:	697a      	ldr	r2, [r7, #20]
 80066f0:	440a      	add	r2, r1
 80066f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80066f6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80066fa:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80066fe:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8006700:	68bb      	ldr	r3, [r7, #8]
 8006702:	695a      	ldr	r2, [r3, #20]
 8006704:	68bb      	ldr	r3, [r7, #8]
 8006706:	689b      	ldr	r3, [r3, #8]
 8006708:	429a      	cmp	r2, r3
 800670a:	d903      	bls.n	8006714 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800670c:	68bb      	ldr	r3, [r7, #8]
 800670e:	689a      	ldr	r2, [r3, #8]
 8006710:	68bb      	ldr	r3, [r7, #8]
 8006712:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006714:	693b      	ldr	r3, [r7, #16]
 8006716:	015a      	lsls	r2, r3, #5
 8006718:	697b      	ldr	r3, [r7, #20]
 800671a:	4413      	add	r3, r2
 800671c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006720:	691b      	ldr	r3, [r3, #16]
 8006722:	693a      	ldr	r2, [r7, #16]
 8006724:	0151      	lsls	r1, r2, #5
 8006726:	697a      	ldr	r2, [r7, #20]
 8006728:	440a      	add	r2, r1
 800672a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800672e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006732:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006734:	693b      	ldr	r3, [r7, #16]
 8006736:	015a      	lsls	r2, r3, #5
 8006738:	697b      	ldr	r3, [r7, #20]
 800673a:	4413      	add	r3, r2
 800673c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006740:	691a      	ldr	r2, [r3, #16]
 8006742:	68bb      	ldr	r3, [r7, #8]
 8006744:	695b      	ldr	r3, [r3, #20]
 8006746:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800674a:	6939      	ldr	r1, [r7, #16]
 800674c:	0148      	lsls	r0, r1, #5
 800674e:	6979      	ldr	r1, [r7, #20]
 8006750:	4401      	add	r1, r0
 8006752:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006756:	4313      	orrs	r3, r2
 8006758:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800675a:	79fb      	ldrb	r3, [r7, #7]
 800675c:	2b01      	cmp	r3, #1
 800675e:	d11e      	bne.n	800679e <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006760:	68bb      	ldr	r3, [r7, #8]
 8006762:	691b      	ldr	r3, [r3, #16]
 8006764:	2b00      	cmp	r3, #0
 8006766:	d009      	beq.n	800677c <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006768:	693b      	ldr	r3, [r7, #16]
 800676a:	015a      	lsls	r2, r3, #5
 800676c:	697b      	ldr	r3, [r7, #20]
 800676e:	4413      	add	r3, r2
 8006770:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006774:	461a      	mov	r2, r3
 8006776:	68bb      	ldr	r3, [r7, #8]
 8006778:	691b      	ldr	r3, [r3, #16]
 800677a:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800677c:	693b      	ldr	r3, [r7, #16]
 800677e:	015a      	lsls	r2, r3, #5
 8006780:	697b      	ldr	r3, [r7, #20]
 8006782:	4413      	add	r3, r2
 8006784:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	693a      	ldr	r2, [r7, #16]
 800678c:	0151      	lsls	r1, r2, #5
 800678e:	697a      	ldr	r2, [r7, #20]
 8006790:	440a      	add	r2, r1
 8006792:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006796:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800679a:	6013      	str	r3, [r2, #0]
 800679c:	e092      	b.n	80068c4 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800679e:	693b      	ldr	r3, [r7, #16]
 80067a0:	015a      	lsls	r2, r3, #5
 80067a2:	697b      	ldr	r3, [r7, #20]
 80067a4:	4413      	add	r3, r2
 80067a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	693a      	ldr	r2, [r7, #16]
 80067ae:	0151      	lsls	r1, r2, #5
 80067b0:	697a      	ldr	r2, [r7, #20]
 80067b2:	440a      	add	r2, r1
 80067b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80067b8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80067bc:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80067be:	68bb      	ldr	r3, [r7, #8]
 80067c0:	695b      	ldr	r3, [r3, #20]
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d07e      	beq.n	80068c4 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80067c6:	697b      	ldr	r3, [r7, #20]
 80067c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80067ce:	68bb      	ldr	r3, [r7, #8]
 80067d0:	781b      	ldrb	r3, [r3, #0]
 80067d2:	f003 030f 	and.w	r3, r3, #15
 80067d6:	2101      	movs	r1, #1
 80067d8:	fa01 f303 	lsl.w	r3, r1, r3
 80067dc:	6979      	ldr	r1, [r7, #20]
 80067de:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80067e2:	4313      	orrs	r3, r2
 80067e4:	634b      	str	r3, [r1, #52]	; 0x34
 80067e6:	e06d      	b.n	80068c4 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80067e8:	693b      	ldr	r3, [r7, #16]
 80067ea:	015a      	lsls	r2, r3, #5
 80067ec:	697b      	ldr	r3, [r7, #20]
 80067ee:	4413      	add	r3, r2
 80067f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067f4:	691b      	ldr	r3, [r3, #16]
 80067f6:	693a      	ldr	r2, [r7, #16]
 80067f8:	0151      	lsls	r1, r2, #5
 80067fa:	697a      	ldr	r2, [r7, #20]
 80067fc:	440a      	add	r2, r1
 80067fe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006802:	0cdb      	lsrs	r3, r3, #19
 8006804:	04db      	lsls	r3, r3, #19
 8006806:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006808:	693b      	ldr	r3, [r7, #16]
 800680a:	015a      	lsls	r2, r3, #5
 800680c:	697b      	ldr	r3, [r7, #20]
 800680e:	4413      	add	r3, r2
 8006810:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006814:	691b      	ldr	r3, [r3, #16]
 8006816:	693a      	ldr	r2, [r7, #16]
 8006818:	0151      	lsls	r1, r2, #5
 800681a:	697a      	ldr	r2, [r7, #20]
 800681c:	440a      	add	r2, r1
 800681e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006822:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006826:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800682a:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800682c:	68bb      	ldr	r3, [r7, #8]
 800682e:	695b      	ldr	r3, [r3, #20]
 8006830:	2b00      	cmp	r3, #0
 8006832:	d003      	beq.n	800683c <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8006834:	68bb      	ldr	r3, [r7, #8]
 8006836:	689a      	ldr	r2, [r3, #8]
 8006838:	68bb      	ldr	r3, [r7, #8]
 800683a:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800683c:	693b      	ldr	r3, [r7, #16]
 800683e:	015a      	lsls	r2, r3, #5
 8006840:	697b      	ldr	r3, [r7, #20]
 8006842:	4413      	add	r3, r2
 8006844:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006848:	691b      	ldr	r3, [r3, #16]
 800684a:	693a      	ldr	r2, [r7, #16]
 800684c:	0151      	lsls	r1, r2, #5
 800684e:	697a      	ldr	r2, [r7, #20]
 8006850:	440a      	add	r2, r1
 8006852:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006856:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800685a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800685c:	693b      	ldr	r3, [r7, #16]
 800685e:	015a      	lsls	r2, r3, #5
 8006860:	697b      	ldr	r3, [r7, #20]
 8006862:	4413      	add	r3, r2
 8006864:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006868:	691a      	ldr	r2, [r3, #16]
 800686a:	68bb      	ldr	r3, [r7, #8]
 800686c:	689b      	ldr	r3, [r3, #8]
 800686e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006872:	6939      	ldr	r1, [r7, #16]
 8006874:	0148      	lsls	r0, r1, #5
 8006876:	6979      	ldr	r1, [r7, #20]
 8006878:	4401      	add	r1, r0
 800687a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800687e:	4313      	orrs	r3, r2
 8006880:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8006882:	79fb      	ldrb	r3, [r7, #7]
 8006884:	2b01      	cmp	r3, #1
 8006886:	d10d      	bne.n	80068a4 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006888:	68bb      	ldr	r3, [r7, #8]
 800688a:	68db      	ldr	r3, [r3, #12]
 800688c:	2b00      	cmp	r3, #0
 800688e:	d009      	beq.n	80068a4 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006890:	68bb      	ldr	r3, [r7, #8]
 8006892:	68d9      	ldr	r1, [r3, #12]
 8006894:	693b      	ldr	r3, [r7, #16]
 8006896:	015a      	lsls	r2, r3, #5
 8006898:	697b      	ldr	r3, [r7, #20]
 800689a:	4413      	add	r3, r2
 800689c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068a0:	460a      	mov	r2, r1
 80068a2:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80068a4:	693b      	ldr	r3, [r7, #16]
 80068a6:	015a      	lsls	r2, r3, #5
 80068a8:	697b      	ldr	r3, [r7, #20]
 80068aa:	4413      	add	r3, r2
 80068ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	693a      	ldr	r2, [r7, #16]
 80068b4:	0151      	lsls	r1, r2, #5
 80068b6:	697a      	ldr	r2, [r7, #20]
 80068b8:	440a      	add	r2, r1
 80068ba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80068be:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80068c2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80068c4:	2300      	movs	r3, #0
}
 80068c6:	4618      	mov	r0, r3
 80068c8:	371c      	adds	r7, #28
 80068ca:	46bd      	mov	sp, r7
 80068cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d0:	4770      	bx	lr

080068d2 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80068d2:	b480      	push	{r7}
 80068d4:	b089      	sub	sp, #36	; 0x24
 80068d6:	af00      	add	r7, sp, #0
 80068d8:	60f8      	str	r0, [r7, #12]
 80068da:	60b9      	str	r1, [r7, #8]
 80068dc:	4611      	mov	r1, r2
 80068de:	461a      	mov	r2, r3
 80068e0:	460b      	mov	r3, r1
 80068e2:	71fb      	strb	r3, [r7, #7]
 80068e4:	4613      	mov	r3, r2
 80068e6:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80068ec:	68bb      	ldr	r3, [r7, #8]
 80068ee:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80068f0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d123      	bne.n	8006940 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80068f8:	88bb      	ldrh	r3, [r7, #4]
 80068fa:	3303      	adds	r3, #3
 80068fc:	089b      	lsrs	r3, r3, #2
 80068fe:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006900:	2300      	movs	r3, #0
 8006902:	61bb      	str	r3, [r7, #24]
 8006904:	e018      	b.n	8006938 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006906:	79fb      	ldrb	r3, [r7, #7]
 8006908:	031a      	lsls	r2, r3, #12
 800690a:	697b      	ldr	r3, [r7, #20]
 800690c:	4413      	add	r3, r2
 800690e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006912:	461a      	mov	r2, r3
 8006914:	69fb      	ldr	r3, [r7, #28]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	6013      	str	r3, [r2, #0]
      pSrc++;
 800691a:	69fb      	ldr	r3, [r7, #28]
 800691c:	3301      	adds	r3, #1
 800691e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006920:	69fb      	ldr	r3, [r7, #28]
 8006922:	3301      	adds	r3, #1
 8006924:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006926:	69fb      	ldr	r3, [r7, #28]
 8006928:	3301      	adds	r3, #1
 800692a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800692c:	69fb      	ldr	r3, [r7, #28]
 800692e:	3301      	adds	r3, #1
 8006930:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006932:	69bb      	ldr	r3, [r7, #24]
 8006934:	3301      	adds	r3, #1
 8006936:	61bb      	str	r3, [r7, #24]
 8006938:	69ba      	ldr	r2, [r7, #24]
 800693a:	693b      	ldr	r3, [r7, #16]
 800693c:	429a      	cmp	r2, r3
 800693e:	d3e2      	bcc.n	8006906 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006940:	2300      	movs	r3, #0
}
 8006942:	4618      	mov	r0, r3
 8006944:	3724      	adds	r7, #36	; 0x24
 8006946:	46bd      	mov	sp, r7
 8006948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800694c:	4770      	bx	lr

0800694e <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800694e:	b480      	push	{r7}
 8006950:	b08b      	sub	sp, #44	; 0x2c
 8006952:	af00      	add	r7, sp, #0
 8006954:	60f8      	str	r0, [r7, #12]
 8006956:	60b9      	str	r1, [r7, #8]
 8006958:	4613      	mov	r3, r2
 800695a:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006960:	68bb      	ldr	r3, [r7, #8]
 8006962:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8006964:	88fb      	ldrh	r3, [r7, #6]
 8006966:	089b      	lsrs	r3, r3, #2
 8006968:	b29b      	uxth	r3, r3
 800696a:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800696c:	88fb      	ldrh	r3, [r7, #6]
 800696e:	f003 0303 	and.w	r3, r3, #3
 8006972:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8006974:	2300      	movs	r3, #0
 8006976:	623b      	str	r3, [r7, #32]
 8006978:	e014      	b.n	80069a4 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800697a:	69bb      	ldr	r3, [r7, #24]
 800697c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006980:	681a      	ldr	r2, [r3, #0]
 8006982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006984:	601a      	str	r2, [r3, #0]
    pDest++;
 8006986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006988:	3301      	adds	r3, #1
 800698a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800698c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800698e:	3301      	adds	r3, #1
 8006990:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006994:	3301      	adds	r3, #1
 8006996:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800699a:	3301      	adds	r3, #1
 800699c:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800699e:	6a3b      	ldr	r3, [r7, #32]
 80069a0:	3301      	adds	r3, #1
 80069a2:	623b      	str	r3, [r7, #32]
 80069a4:	6a3a      	ldr	r2, [r7, #32]
 80069a6:	697b      	ldr	r3, [r7, #20]
 80069a8:	429a      	cmp	r2, r3
 80069aa:	d3e6      	bcc.n	800697a <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80069ac:	8bfb      	ldrh	r3, [r7, #30]
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d01e      	beq.n	80069f0 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80069b2:	2300      	movs	r3, #0
 80069b4:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80069b6:	69bb      	ldr	r3, [r7, #24]
 80069b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80069bc:	461a      	mov	r2, r3
 80069be:	f107 0310 	add.w	r3, r7, #16
 80069c2:	6812      	ldr	r2, [r2, #0]
 80069c4:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80069c6:	693a      	ldr	r2, [r7, #16]
 80069c8:	6a3b      	ldr	r3, [r7, #32]
 80069ca:	b2db      	uxtb	r3, r3
 80069cc:	00db      	lsls	r3, r3, #3
 80069ce:	fa22 f303 	lsr.w	r3, r2, r3
 80069d2:	b2da      	uxtb	r2, r3
 80069d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069d6:	701a      	strb	r2, [r3, #0]
      i++;
 80069d8:	6a3b      	ldr	r3, [r7, #32]
 80069da:	3301      	adds	r3, #1
 80069dc:	623b      	str	r3, [r7, #32]
      pDest++;
 80069de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069e0:	3301      	adds	r3, #1
 80069e2:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80069e4:	8bfb      	ldrh	r3, [r7, #30]
 80069e6:	3b01      	subs	r3, #1
 80069e8:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80069ea:	8bfb      	ldrh	r3, [r7, #30]
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d1ea      	bne.n	80069c6 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80069f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80069f2:	4618      	mov	r0, r3
 80069f4:	372c      	adds	r7, #44	; 0x2c
 80069f6:	46bd      	mov	sp, r7
 80069f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069fc:	4770      	bx	lr

080069fe <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80069fe:	b480      	push	{r7}
 8006a00:	b085      	sub	sp, #20
 8006a02:	af00      	add	r7, sp, #0
 8006a04:	6078      	str	r0, [r7, #4]
 8006a06:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006a0c:	683b      	ldr	r3, [r7, #0]
 8006a0e:	781b      	ldrb	r3, [r3, #0]
 8006a10:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006a12:	683b      	ldr	r3, [r7, #0]
 8006a14:	785b      	ldrb	r3, [r3, #1]
 8006a16:	2b01      	cmp	r3, #1
 8006a18:	d12c      	bne.n	8006a74 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006a1a:	68bb      	ldr	r3, [r7, #8]
 8006a1c:	015a      	lsls	r2, r3, #5
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	4413      	add	r3, r2
 8006a22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	db12      	blt.n	8006a52 <USB_EPSetStall+0x54>
 8006a2c:	68bb      	ldr	r3, [r7, #8]
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d00f      	beq.n	8006a52 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8006a32:	68bb      	ldr	r3, [r7, #8]
 8006a34:	015a      	lsls	r2, r3, #5
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	4413      	add	r3, r2
 8006a3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	68ba      	ldr	r2, [r7, #8]
 8006a42:	0151      	lsls	r1, r2, #5
 8006a44:	68fa      	ldr	r2, [r7, #12]
 8006a46:	440a      	add	r2, r1
 8006a48:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006a4c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006a50:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8006a52:	68bb      	ldr	r3, [r7, #8]
 8006a54:	015a      	lsls	r2, r3, #5
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	4413      	add	r3, r2
 8006a5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	68ba      	ldr	r2, [r7, #8]
 8006a62:	0151      	lsls	r1, r2, #5
 8006a64:	68fa      	ldr	r2, [r7, #12]
 8006a66:	440a      	add	r2, r1
 8006a68:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006a6c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006a70:	6013      	str	r3, [r2, #0]
 8006a72:	e02b      	b.n	8006acc <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006a74:	68bb      	ldr	r3, [r7, #8]
 8006a76:	015a      	lsls	r2, r3, #5
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	4413      	add	r3, r2
 8006a7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	db12      	blt.n	8006aac <USB_EPSetStall+0xae>
 8006a86:	68bb      	ldr	r3, [r7, #8]
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d00f      	beq.n	8006aac <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8006a8c:	68bb      	ldr	r3, [r7, #8]
 8006a8e:	015a      	lsls	r2, r3, #5
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	4413      	add	r3, r2
 8006a94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	68ba      	ldr	r2, [r7, #8]
 8006a9c:	0151      	lsls	r1, r2, #5
 8006a9e:	68fa      	ldr	r2, [r7, #12]
 8006aa0:	440a      	add	r2, r1
 8006aa2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006aa6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006aaa:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8006aac:	68bb      	ldr	r3, [r7, #8]
 8006aae:	015a      	lsls	r2, r3, #5
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	4413      	add	r3, r2
 8006ab4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	68ba      	ldr	r2, [r7, #8]
 8006abc:	0151      	lsls	r1, r2, #5
 8006abe:	68fa      	ldr	r2, [r7, #12]
 8006ac0:	440a      	add	r2, r1
 8006ac2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006ac6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006aca:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006acc:	2300      	movs	r3, #0
}
 8006ace:	4618      	mov	r0, r3
 8006ad0:	3714      	adds	r7, #20
 8006ad2:	46bd      	mov	sp, r7
 8006ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad8:	4770      	bx	lr

08006ada <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006ada:	b480      	push	{r7}
 8006adc:	b085      	sub	sp, #20
 8006ade:	af00      	add	r7, sp, #0
 8006ae0:	6078      	str	r0, [r7, #4]
 8006ae2:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006ae8:	683b      	ldr	r3, [r7, #0]
 8006aea:	781b      	ldrb	r3, [r3, #0]
 8006aec:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006aee:	683b      	ldr	r3, [r7, #0]
 8006af0:	785b      	ldrb	r3, [r3, #1]
 8006af2:	2b01      	cmp	r3, #1
 8006af4:	d128      	bne.n	8006b48 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006af6:	68bb      	ldr	r3, [r7, #8]
 8006af8:	015a      	lsls	r2, r3, #5
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	4413      	add	r3, r2
 8006afe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	68ba      	ldr	r2, [r7, #8]
 8006b06:	0151      	lsls	r1, r2, #5
 8006b08:	68fa      	ldr	r2, [r7, #12]
 8006b0a:	440a      	add	r2, r1
 8006b0c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006b10:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006b14:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006b16:	683b      	ldr	r3, [r7, #0]
 8006b18:	78db      	ldrb	r3, [r3, #3]
 8006b1a:	2b03      	cmp	r3, #3
 8006b1c:	d003      	beq.n	8006b26 <USB_EPClearStall+0x4c>
 8006b1e:	683b      	ldr	r3, [r7, #0]
 8006b20:	78db      	ldrb	r3, [r3, #3]
 8006b22:	2b02      	cmp	r3, #2
 8006b24:	d138      	bne.n	8006b98 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006b26:	68bb      	ldr	r3, [r7, #8]
 8006b28:	015a      	lsls	r2, r3, #5
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	4413      	add	r3, r2
 8006b2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	68ba      	ldr	r2, [r7, #8]
 8006b36:	0151      	lsls	r1, r2, #5
 8006b38:	68fa      	ldr	r2, [r7, #12]
 8006b3a:	440a      	add	r2, r1
 8006b3c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006b40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006b44:	6013      	str	r3, [r2, #0]
 8006b46:	e027      	b.n	8006b98 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006b48:	68bb      	ldr	r3, [r7, #8]
 8006b4a:	015a      	lsls	r2, r3, #5
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	4413      	add	r3, r2
 8006b50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	68ba      	ldr	r2, [r7, #8]
 8006b58:	0151      	lsls	r1, r2, #5
 8006b5a:	68fa      	ldr	r2, [r7, #12]
 8006b5c:	440a      	add	r2, r1
 8006b5e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006b62:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006b66:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006b68:	683b      	ldr	r3, [r7, #0]
 8006b6a:	78db      	ldrb	r3, [r3, #3]
 8006b6c:	2b03      	cmp	r3, #3
 8006b6e:	d003      	beq.n	8006b78 <USB_EPClearStall+0x9e>
 8006b70:	683b      	ldr	r3, [r7, #0]
 8006b72:	78db      	ldrb	r3, [r3, #3]
 8006b74:	2b02      	cmp	r3, #2
 8006b76:	d10f      	bne.n	8006b98 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006b78:	68bb      	ldr	r3, [r7, #8]
 8006b7a:	015a      	lsls	r2, r3, #5
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	4413      	add	r3, r2
 8006b80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	68ba      	ldr	r2, [r7, #8]
 8006b88:	0151      	lsls	r1, r2, #5
 8006b8a:	68fa      	ldr	r2, [r7, #12]
 8006b8c:	440a      	add	r2, r1
 8006b8e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006b92:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006b96:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8006b98:	2300      	movs	r3, #0
}
 8006b9a:	4618      	mov	r0, r3
 8006b9c:	3714      	adds	r7, #20
 8006b9e:	46bd      	mov	sp, r7
 8006ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba4:	4770      	bx	lr

08006ba6 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8006ba6:	b480      	push	{r7}
 8006ba8:	b085      	sub	sp, #20
 8006baa:	af00      	add	r7, sp, #0
 8006bac:	6078      	str	r0, [r7, #4]
 8006bae:	460b      	mov	r3, r1
 8006bb0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	68fa      	ldr	r2, [r7, #12]
 8006bc0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006bc4:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8006bc8:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006bd0:	681a      	ldr	r2, [r3, #0]
 8006bd2:	78fb      	ldrb	r3, [r7, #3]
 8006bd4:	011b      	lsls	r3, r3, #4
 8006bd6:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8006bda:	68f9      	ldr	r1, [r7, #12]
 8006bdc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006be0:	4313      	orrs	r3, r2
 8006be2:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8006be4:	2300      	movs	r3, #0
}
 8006be6:	4618      	mov	r0, r3
 8006be8:	3714      	adds	r7, #20
 8006bea:	46bd      	mov	sp, r7
 8006bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf0:	4770      	bx	lr

08006bf2 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006bf2:	b480      	push	{r7}
 8006bf4:	b085      	sub	sp, #20
 8006bf6:	af00      	add	r7, sp, #0
 8006bf8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	68fa      	ldr	r2, [r7, #12]
 8006c08:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006c0c:	f023 0303 	bic.w	r3, r3, #3
 8006c10:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c18:	685b      	ldr	r3, [r3, #4]
 8006c1a:	68fa      	ldr	r2, [r7, #12]
 8006c1c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006c20:	f023 0302 	bic.w	r3, r3, #2
 8006c24:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006c26:	2300      	movs	r3, #0
}
 8006c28:	4618      	mov	r0, r3
 8006c2a:	3714      	adds	r7, #20
 8006c2c:	46bd      	mov	sp, r7
 8006c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c32:	4770      	bx	lr

08006c34 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006c34:	b480      	push	{r7}
 8006c36:	b085      	sub	sp, #20
 8006c38:	af00      	add	r7, sp, #0
 8006c3a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	68fa      	ldr	r2, [r7, #12]
 8006c4a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006c4e:	f023 0303 	bic.w	r3, r3, #3
 8006c52:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c5a:	685b      	ldr	r3, [r3, #4]
 8006c5c:	68fa      	ldr	r2, [r7, #12]
 8006c5e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006c62:	f043 0302 	orr.w	r3, r3, #2
 8006c66:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006c68:	2300      	movs	r3, #0
}
 8006c6a:	4618      	mov	r0, r3
 8006c6c:	3714      	adds	r7, #20
 8006c6e:	46bd      	mov	sp, r7
 8006c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c74:	4770      	bx	lr

08006c76 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8006c76:	b480      	push	{r7}
 8006c78:	b085      	sub	sp, #20
 8006c7a:	af00      	add	r7, sp, #0
 8006c7c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	695b      	ldr	r3, [r3, #20]
 8006c82:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	699b      	ldr	r3, [r3, #24]
 8006c88:	68fa      	ldr	r2, [r7, #12]
 8006c8a:	4013      	ands	r3, r2
 8006c8c:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006c8e:	68fb      	ldr	r3, [r7, #12]
}
 8006c90:	4618      	mov	r0, r3
 8006c92:	3714      	adds	r7, #20
 8006c94:	46bd      	mov	sp, r7
 8006c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c9a:	4770      	bx	lr

08006c9c <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006c9c:	b480      	push	{r7}
 8006c9e:	b085      	sub	sp, #20
 8006ca0:	af00      	add	r7, sp, #0
 8006ca2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006cae:	699b      	ldr	r3, [r3, #24]
 8006cb0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006cb8:	69db      	ldr	r3, [r3, #28]
 8006cba:	68ba      	ldr	r2, [r7, #8]
 8006cbc:	4013      	ands	r3, r2
 8006cbe:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8006cc0:	68bb      	ldr	r3, [r7, #8]
 8006cc2:	0c1b      	lsrs	r3, r3, #16
}
 8006cc4:	4618      	mov	r0, r3
 8006cc6:	3714      	adds	r7, #20
 8006cc8:	46bd      	mov	sp, r7
 8006cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cce:	4770      	bx	lr

08006cd0 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006cd0:	b480      	push	{r7}
 8006cd2:	b085      	sub	sp, #20
 8006cd4:	af00      	add	r7, sp, #0
 8006cd6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ce2:	699b      	ldr	r3, [r3, #24]
 8006ce4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006cec:	69db      	ldr	r3, [r3, #28]
 8006cee:	68ba      	ldr	r2, [r7, #8]
 8006cf0:	4013      	ands	r3, r2
 8006cf2:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8006cf4:	68bb      	ldr	r3, [r7, #8]
 8006cf6:	b29b      	uxth	r3, r3
}
 8006cf8:	4618      	mov	r0, r3
 8006cfa:	3714      	adds	r7, #20
 8006cfc:	46bd      	mov	sp, r7
 8006cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d02:	4770      	bx	lr

08006d04 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006d04:	b480      	push	{r7}
 8006d06:	b085      	sub	sp, #20
 8006d08:	af00      	add	r7, sp, #0
 8006d0a:	6078      	str	r0, [r7, #4]
 8006d0c:	460b      	mov	r3, r1
 8006d0e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8006d14:	78fb      	ldrb	r3, [r7, #3]
 8006d16:	015a      	lsls	r2, r3, #5
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	4413      	add	r3, r2
 8006d1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d20:	689b      	ldr	r3, [r3, #8]
 8006d22:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d2a:	695b      	ldr	r3, [r3, #20]
 8006d2c:	68ba      	ldr	r2, [r7, #8]
 8006d2e:	4013      	ands	r3, r2
 8006d30:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006d32:	68bb      	ldr	r3, [r7, #8]
}
 8006d34:	4618      	mov	r0, r3
 8006d36:	3714      	adds	r7, #20
 8006d38:	46bd      	mov	sp, r7
 8006d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d3e:	4770      	bx	lr

08006d40 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006d40:	b480      	push	{r7}
 8006d42:	b087      	sub	sp, #28
 8006d44:	af00      	add	r7, sp, #0
 8006d46:	6078      	str	r0, [r7, #4]
 8006d48:	460b      	mov	r3, r1
 8006d4a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8006d50:	697b      	ldr	r3, [r7, #20]
 8006d52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d56:	691b      	ldr	r3, [r3, #16]
 8006d58:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006d5a:	697b      	ldr	r3, [r7, #20]
 8006d5c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d62:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8006d64:	78fb      	ldrb	r3, [r7, #3]
 8006d66:	f003 030f 	and.w	r3, r3, #15
 8006d6a:	68fa      	ldr	r2, [r7, #12]
 8006d6c:	fa22 f303 	lsr.w	r3, r2, r3
 8006d70:	01db      	lsls	r3, r3, #7
 8006d72:	b2db      	uxtb	r3, r3
 8006d74:	693a      	ldr	r2, [r7, #16]
 8006d76:	4313      	orrs	r3, r2
 8006d78:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006d7a:	78fb      	ldrb	r3, [r7, #3]
 8006d7c:	015a      	lsls	r2, r3, #5
 8006d7e:	697b      	ldr	r3, [r7, #20]
 8006d80:	4413      	add	r3, r2
 8006d82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d86:	689b      	ldr	r3, [r3, #8]
 8006d88:	693a      	ldr	r2, [r7, #16]
 8006d8a:	4013      	ands	r3, r2
 8006d8c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006d8e:	68bb      	ldr	r3, [r7, #8]
}
 8006d90:	4618      	mov	r0, r3
 8006d92:	371c      	adds	r7, #28
 8006d94:	46bd      	mov	sp, r7
 8006d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d9a:	4770      	bx	lr

08006d9c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006d9c:	b480      	push	{r7}
 8006d9e:	b083      	sub	sp, #12
 8006da0:	af00      	add	r7, sp, #0
 8006da2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	695b      	ldr	r3, [r3, #20]
 8006da8:	f003 0301 	and.w	r3, r3, #1
}
 8006dac:	4618      	mov	r0, r3
 8006dae:	370c      	adds	r7, #12
 8006db0:	46bd      	mov	sp, r7
 8006db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db6:	4770      	bx	lr

08006db8 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8006db8:	b480      	push	{r7}
 8006dba:	b085      	sub	sp, #20
 8006dbc:	af00      	add	r7, sp, #0
 8006dbe:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	68fa      	ldr	r2, [r7, #12]
 8006dce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006dd2:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006dd6:	f023 0307 	bic.w	r3, r3, #7
 8006dda:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006de2:	685b      	ldr	r3, [r3, #4]
 8006de4:	68fa      	ldr	r2, [r7, #12]
 8006de6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006dea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006dee:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006df0:	2300      	movs	r3, #0
}
 8006df2:	4618      	mov	r0, r3
 8006df4:	3714      	adds	r7, #20
 8006df6:	46bd      	mov	sp, r7
 8006df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dfc:	4770      	bx	lr
	...

08006e00 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8006e00:	b480      	push	{r7}
 8006e02:	b087      	sub	sp, #28
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	60f8      	str	r0, [r7, #12]
 8006e08:	460b      	mov	r3, r1
 8006e0a:	607a      	str	r2, [r7, #4]
 8006e0c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	333c      	adds	r3, #60	; 0x3c
 8006e16:	3304      	adds	r3, #4
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006e1c:	693b      	ldr	r3, [r7, #16]
 8006e1e:	4a26      	ldr	r2, [pc, #152]	; (8006eb8 <USB_EP0_OutStart+0xb8>)
 8006e20:	4293      	cmp	r3, r2
 8006e22:	d90a      	bls.n	8006e3a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006e24:	697b      	ldr	r3, [r7, #20]
 8006e26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006e30:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006e34:	d101      	bne.n	8006e3a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8006e36:	2300      	movs	r3, #0
 8006e38:	e037      	b.n	8006eaa <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8006e3a:	697b      	ldr	r3, [r7, #20]
 8006e3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e40:	461a      	mov	r2, r3
 8006e42:	2300      	movs	r3, #0
 8006e44:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006e46:	697b      	ldr	r3, [r7, #20]
 8006e48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e4c:	691b      	ldr	r3, [r3, #16]
 8006e4e:	697a      	ldr	r2, [r7, #20]
 8006e50:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006e54:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006e58:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8006e5a:	697b      	ldr	r3, [r7, #20]
 8006e5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e60:	691b      	ldr	r3, [r3, #16]
 8006e62:	697a      	ldr	r2, [r7, #20]
 8006e64:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006e68:	f043 0318 	orr.w	r3, r3, #24
 8006e6c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8006e6e:	697b      	ldr	r3, [r7, #20]
 8006e70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e74:	691b      	ldr	r3, [r3, #16]
 8006e76:	697a      	ldr	r2, [r7, #20]
 8006e78:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006e7c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8006e80:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8006e82:	7afb      	ldrb	r3, [r7, #11]
 8006e84:	2b01      	cmp	r3, #1
 8006e86:	d10f      	bne.n	8006ea8 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006e88:	697b      	ldr	r3, [r7, #20]
 8006e8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e8e:	461a      	mov	r2, r3
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8006e94:	697b      	ldr	r3, [r7, #20]
 8006e96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	697a      	ldr	r2, [r7, #20]
 8006e9e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006ea2:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8006ea6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006ea8:	2300      	movs	r3, #0
}
 8006eaa:	4618      	mov	r0, r3
 8006eac:	371c      	adds	r7, #28
 8006eae:	46bd      	mov	sp, r7
 8006eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb4:	4770      	bx	lr
 8006eb6:	bf00      	nop
 8006eb8:	4f54300a 	.word	0x4f54300a

08006ebc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006ebc:	b480      	push	{r7}
 8006ebe:	b085      	sub	sp, #20
 8006ec0:	af00      	add	r7, sp, #0
 8006ec2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006ec4:	2300      	movs	r3, #0
 8006ec6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	3301      	adds	r3, #1
 8006ecc:	60fb      	str	r3, [r7, #12]
 8006ece:	4a13      	ldr	r2, [pc, #76]	; (8006f1c <USB_CoreReset+0x60>)
 8006ed0:	4293      	cmp	r3, r2
 8006ed2:	d901      	bls.n	8006ed8 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8006ed4:	2303      	movs	r3, #3
 8006ed6:	e01a      	b.n	8006f0e <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	691b      	ldr	r3, [r3, #16]
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	daf3      	bge.n	8006ec8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006ee0:	2300      	movs	r3, #0
 8006ee2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	691b      	ldr	r3, [r3, #16]
 8006ee8:	f043 0201 	orr.w	r2, r3, #1
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	3301      	adds	r3, #1
 8006ef4:	60fb      	str	r3, [r7, #12]
 8006ef6:	4a09      	ldr	r2, [pc, #36]	; (8006f1c <USB_CoreReset+0x60>)
 8006ef8:	4293      	cmp	r3, r2
 8006efa:	d901      	bls.n	8006f00 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8006efc:	2303      	movs	r3, #3
 8006efe:	e006      	b.n	8006f0e <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	691b      	ldr	r3, [r3, #16]
 8006f04:	f003 0301 	and.w	r3, r3, #1
 8006f08:	2b01      	cmp	r3, #1
 8006f0a:	d0f1      	beq.n	8006ef0 <USB_CoreReset+0x34>

  return HAL_OK;
 8006f0c:	2300      	movs	r3, #0
}
 8006f0e:	4618      	mov	r0, r3
 8006f10:	3714      	adds	r7, #20
 8006f12:	46bd      	mov	sp, r7
 8006f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f18:	4770      	bx	lr
 8006f1a:	bf00      	nop
 8006f1c:	00030d40 	.word	0x00030d40

08006f20 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006f20:	b580      	push	{r7, lr}
 8006f22:	b084      	sub	sp, #16
 8006f24:	af00      	add	r7, sp, #0
 8006f26:	6078      	str	r0, [r7, #4]
 8006f28:	460b      	mov	r3, r1
 8006f2a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006f2c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006f30:	f002 faa4 	bl	800947c <USBD_static_malloc>
 8006f34:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d105      	bne.n	8006f48 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	2200      	movs	r2, #0
 8006f40:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8006f44:	2302      	movs	r3, #2
 8006f46:	e066      	b.n	8007016 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	68fa      	ldr	r2, [r7, #12]
 8006f4c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	7c1b      	ldrb	r3, [r3, #16]
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d119      	bne.n	8006f8c <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006f58:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006f5c:	2202      	movs	r2, #2
 8006f5e:	2181      	movs	r1, #129	; 0x81
 8006f60:	6878      	ldr	r0, [r7, #4]
 8006f62:	f002 f968 	bl	8009236 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	2201      	movs	r2, #1
 8006f6a:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006f6c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006f70:	2202      	movs	r2, #2
 8006f72:	2101      	movs	r1, #1
 8006f74:	6878      	ldr	r0, [r7, #4]
 8006f76:	f002 f95e 	bl	8009236 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	2201      	movs	r2, #1
 8006f7e:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	2210      	movs	r2, #16
 8006f86:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8006f8a:	e016      	b.n	8006fba <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006f8c:	2340      	movs	r3, #64	; 0x40
 8006f8e:	2202      	movs	r2, #2
 8006f90:	2181      	movs	r1, #129	; 0x81
 8006f92:	6878      	ldr	r0, [r7, #4]
 8006f94:	f002 f94f 	bl	8009236 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	2201      	movs	r2, #1
 8006f9c:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006f9e:	2340      	movs	r3, #64	; 0x40
 8006fa0:	2202      	movs	r2, #2
 8006fa2:	2101      	movs	r1, #1
 8006fa4:	6878      	ldr	r0, [r7, #4]
 8006fa6:	f002 f946 	bl	8009236 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	2201      	movs	r2, #1
 8006fae:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	2210      	movs	r2, #16
 8006fb6:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006fba:	2308      	movs	r3, #8
 8006fbc:	2203      	movs	r2, #3
 8006fbe:	2182      	movs	r1, #130	; 0x82
 8006fc0:	6878      	ldr	r0, [r7, #4]
 8006fc2:	f002 f938 	bl	8009236 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	2201      	movs	r2, #1
 8006fca:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	2200      	movs	r2, #0
 8006fdc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	2200      	movs	r2, #0
 8006fe4:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	7c1b      	ldrb	r3, [r3, #16]
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d109      	bne.n	8007004 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006ff6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006ffa:	2101      	movs	r1, #1
 8006ffc:	6878      	ldr	r0, [r7, #4]
 8006ffe:	f002 fa09 	bl	8009414 <USBD_LL_PrepareReceive>
 8007002:	e007      	b.n	8007014 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800700a:	2340      	movs	r3, #64	; 0x40
 800700c:	2101      	movs	r1, #1
 800700e:	6878      	ldr	r0, [r7, #4]
 8007010:	f002 fa00 	bl	8009414 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007014:	2300      	movs	r3, #0
}
 8007016:	4618      	mov	r0, r3
 8007018:	3710      	adds	r7, #16
 800701a:	46bd      	mov	sp, r7
 800701c:	bd80      	pop	{r7, pc}

0800701e <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800701e:	b580      	push	{r7, lr}
 8007020:	b082      	sub	sp, #8
 8007022:	af00      	add	r7, sp, #0
 8007024:	6078      	str	r0, [r7, #4]
 8007026:	460b      	mov	r3, r1
 8007028:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800702a:	2181      	movs	r1, #129	; 0x81
 800702c:	6878      	ldr	r0, [r7, #4]
 800702e:	f002 f928 	bl	8009282 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	2200      	movs	r2, #0
 8007036:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8007038:	2101      	movs	r1, #1
 800703a:	6878      	ldr	r0, [r7, #4]
 800703c:	f002 f921 	bl	8009282 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	2200      	movs	r2, #0
 8007044:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8007048:	2182      	movs	r1, #130	; 0x82
 800704a:	6878      	ldr	r0, [r7, #4]
 800704c:	f002 f919 	bl	8009282 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	2200      	movs	r2, #0
 8007054:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	2200      	movs	r2, #0
 800705c:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007066:	2b00      	cmp	r3, #0
 8007068:	d00e      	beq.n	8007088 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007070:	685b      	ldr	r3, [r3, #4]
 8007072:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800707a:	4618      	mov	r0, r3
 800707c:	f002 fa0c 	bl	8009498 <USBD_static_free>
    pdev->pClassData = NULL;
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	2200      	movs	r2, #0
 8007084:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8007088:	2300      	movs	r3, #0
}
 800708a:	4618      	mov	r0, r3
 800708c:	3708      	adds	r7, #8
 800708e:	46bd      	mov	sp, r7
 8007090:	bd80      	pop	{r7, pc}
	...

08007094 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8007094:	b580      	push	{r7, lr}
 8007096:	b086      	sub	sp, #24
 8007098:	af00      	add	r7, sp, #0
 800709a:	6078      	str	r0, [r7, #4]
 800709c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80070a4:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80070a6:	2300      	movs	r3, #0
 80070a8:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80070aa:	2300      	movs	r3, #0
 80070ac:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80070ae:	2300      	movs	r3, #0
 80070b0:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80070b2:	693b      	ldr	r3, [r7, #16]
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d101      	bne.n	80070bc <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 80070b8:	2303      	movs	r3, #3
 80070ba:	e0af      	b.n	800721c <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80070bc:	683b      	ldr	r3, [r7, #0]
 80070be:	781b      	ldrb	r3, [r3, #0]
 80070c0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d03f      	beq.n	8007148 <USBD_CDC_Setup+0xb4>
 80070c8:	2b20      	cmp	r3, #32
 80070ca:	f040 809f 	bne.w	800720c <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80070ce:	683b      	ldr	r3, [r7, #0]
 80070d0:	88db      	ldrh	r3, [r3, #6]
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d02e      	beq.n	8007134 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80070d6:	683b      	ldr	r3, [r7, #0]
 80070d8:	781b      	ldrb	r3, [r3, #0]
 80070da:	b25b      	sxtb	r3, r3
 80070dc:	2b00      	cmp	r3, #0
 80070de:	da16      	bge.n	800710e <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80070e6:	689b      	ldr	r3, [r3, #8]
 80070e8:	683a      	ldr	r2, [r7, #0]
 80070ea:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 80070ec:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80070ee:	683a      	ldr	r2, [r7, #0]
 80070f0:	88d2      	ldrh	r2, [r2, #6]
 80070f2:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80070f4:	683b      	ldr	r3, [r7, #0]
 80070f6:	88db      	ldrh	r3, [r3, #6]
 80070f8:	2b07      	cmp	r3, #7
 80070fa:	bf28      	it	cs
 80070fc:	2307      	movcs	r3, #7
 80070fe:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8007100:	693b      	ldr	r3, [r7, #16]
 8007102:	89fa      	ldrh	r2, [r7, #14]
 8007104:	4619      	mov	r1, r3
 8007106:	6878      	ldr	r0, [r7, #4]
 8007108:	f001 fb19 	bl	800873e <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800710c:	e085      	b.n	800721a <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800710e:	683b      	ldr	r3, [r7, #0]
 8007110:	785a      	ldrb	r2, [r3, #1]
 8007112:	693b      	ldr	r3, [r7, #16]
 8007114:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8007118:	683b      	ldr	r3, [r7, #0]
 800711a:	88db      	ldrh	r3, [r3, #6]
 800711c:	b2da      	uxtb	r2, r3
 800711e:	693b      	ldr	r3, [r7, #16]
 8007120:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8007124:	6939      	ldr	r1, [r7, #16]
 8007126:	683b      	ldr	r3, [r7, #0]
 8007128:	88db      	ldrh	r3, [r3, #6]
 800712a:	461a      	mov	r2, r3
 800712c:	6878      	ldr	r0, [r7, #4]
 800712e:	f001 fb32 	bl	8008796 <USBD_CtlPrepareRx>
      break;
 8007132:	e072      	b.n	800721a <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800713a:	689b      	ldr	r3, [r3, #8]
 800713c:	683a      	ldr	r2, [r7, #0]
 800713e:	7850      	ldrb	r0, [r2, #1]
 8007140:	2200      	movs	r2, #0
 8007142:	6839      	ldr	r1, [r7, #0]
 8007144:	4798      	blx	r3
      break;
 8007146:	e068      	b.n	800721a <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007148:	683b      	ldr	r3, [r7, #0]
 800714a:	785b      	ldrb	r3, [r3, #1]
 800714c:	2b0b      	cmp	r3, #11
 800714e:	d852      	bhi.n	80071f6 <USBD_CDC_Setup+0x162>
 8007150:	a201      	add	r2, pc, #4	; (adr r2, 8007158 <USBD_CDC_Setup+0xc4>)
 8007152:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007156:	bf00      	nop
 8007158:	08007189 	.word	0x08007189
 800715c:	08007205 	.word	0x08007205
 8007160:	080071f7 	.word	0x080071f7
 8007164:	080071f7 	.word	0x080071f7
 8007168:	080071f7 	.word	0x080071f7
 800716c:	080071f7 	.word	0x080071f7
 8007170:	080071f7 	.word	0x080071f7
 8007174:	080071f7 	.word	0x080071f7
 8007178:	080071f7 	.word	0x080071f7
 800717c:	080071f7 	.word	0x080071f7
 8007180:	080071b3 	.word	0x080071b3
 8007184:	080071dd 	.word	0x080071dd
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800718e:	b2db      	uxtb	r3, r3
 8007190:	2b03      	cmp	r3, #3
 8007192:	d107      	bne.n	80071a4 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007194:	f107 030a 	add.w	r3, r7, #10
 8007198:	2202      	movs	r2, #2
 800719a:	4619      	mov	r1, r3
 800719c:	6878      	ldr	r0, [r7, #4]
 800719e:	f001 face 	bl	800873e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80071a2:	e032      	b.n	800720a <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 80071a4:	6839      	ldr	r1, [r7, #0]
 80071a6:	6878      	ldr	r0, [r7, #4]
 80071a8:	f001 fa58 	bl	800865c <USBD_CtlError>
            ret = USBD_FAIL;
 80071ac:	2303      	movs	r3, #3
 80071ae:	75fb      	strb	r3, [r7, #23]
          break;
 80071b0:	e02b      	b.n	800720a <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80071b8:	b2db      	uxtb	r3, r3
 80071ba:	2b03      	cmp	r3, #3
 80071bc:	d107      	bne.n	80071ce <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80071be:	f107 030d 	add.w	r3, r7, #13
 80071c2:	2201      	movs	r2, #1
 80071c4:	4619      	mov	r1, r3
 80071c6:	6878      	ldr	r0, [r7, #4]
 80071c8:	f001 fab9 	bl	800873e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80071cc:	e01d      	b.n	800720a <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 80071ce:	6839      	ldr	r1, [r7, #0]
 80071d0:	6878      	ldr	r0, [r7, #4]
 80071d2:	f001 fa43 	bl	800865c <USBD_CtlError>
            ret = USBD_FAIL;
 80071d6:	2303      	movs	r3, #3
 80071d8:	75fb      	strb	r3, [r7, #23]
          break;
 80071da:	e016      	b.n	800720a <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80071e2:	b2db      	uxtb	r3, r3
 80071e4:	2b03      	cmp	r3, #3
 80071e6:	d00f      	beq.n	8007208 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 80071e8:	6839      	ldr	r1, [r7, #0]
 80071ea:	6878      	ldr	r0, [r7, #4]
 80071ec:	f001 fa36 	bl	800865c <USBD_CtlError>
            ret = USBD_FAIL;
 80071f0:	2303      	movs	r3, #3
 80071f2:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80071f4:	e008      	b.n	8007208 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80071f6:	6839      	ldr	r1, [r7, #0]
 80071f8:	6878      	ldr	r0, [r7, #4]
 80071fa:	f001 fa2f 	bl	800865c <USBD_CtlError>
          ret = USBD_FAIL;
 80071fe:	2303      	movs	r3, #3
 8007200:	75fb      	strb	r3, [r7, #23]
          break;
 8007202:	e002      	b.n	800720a <USBD_CDC_Setup+0x176>
          break;
 8007204:	bf00      	nop
 8007206:	e008      	b.n	800721a <USBD_CDC_Setup+0x186>
          break;
 8007208:	bf00      	nop
      }
      break;
 800720a:	e006      	b.n	800721a <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 800720c:	6839      	ldr	r1, [r7, #0]
 800720e:	6878      	ldr	r0, [r7, #4]
 8007210:	f001 fa24 	bl	800865c <USBD_CtlError>
      ret = USBD_FAIL;
 8007214:	2303      	movs	r3, #3
 8007216:	75fb      	strb	r3, [r7, #23]
      break;
 8007218:	bf00      	nop
  }

  return (uint8_t)ret;
 800721a:	7dfb      	ldrb	r3, [r7, #23]
}
 800721c:	4618      	mov	r0, r3
 800721e:	3718      	adds	r7, #24
 8007220:	46bd      	mov	sp, r7
 8007222:	bd80      	pop	{r7, pc}

08007224 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007224:	b580      	push	{r7, lr}
 8007226:	b084      	sub	sp, #16
 8007228:	af00      	add	r7, sp, #0
 800722a:	6078      	str	r0, [r7, #4]
 800722c:	460b      	mov	r3, r1
 800722e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007236:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800723e:	2b00      	cmp	r3, #0
 8007240:	d101      	bne.n	8007246 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007242:	2303      	movs	r3, #3
 8007244:	e04f      	b.n	80072e6 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800724c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800724e:	78fa      	ldrb	r2, [r7, #3]
 8007250:	6879      	ldr	r1, [r7, #4]
 8007252:	4613      	mov	r3, r2
 8007254:	009b      	lsls	r3, r3, #2
 8007256:	4413      	add	r3, r2
 8007258:	009b      	lsls	r3, r3, #2
 800725a:	440b      	add	r3, r1
 800725c:	3318      	adds	r3, #24
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	2b00      	cmp	r3, #0
 8007262:	d029      	beq.n	80072b8 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8007264:	78fa      	ldrb	r2, [r7, #3]
 8007266:	6879      	ldr	r1, [r7, #4]
 8007268:	4613      	mov	r3, r2
 800726a:	009b      	lsls	r3, r3, #2
 800726c:	4413      	add	r3, r2
 800726e:	009b      	lsls	r3, r3, #2
 8007270:	440b      	add	r3, r1
 8007272:	3318      	adds	r3, #24
 8007274:	681a      	ldr	r2, [r3, #0]
 8007276:	78f9      	ldrb	r1, [r7, #3]
 8007278:	68f8      	ldr	r0, [r7, #12]
 800727a:	460b      	mov	r3, r1
 800727c:	00db      	lsls	r3, r3, #3
 800727e:	1a5b      	subs	r3, r3, r1
 8007280:	009b      	lsls	r3, r3, #2
 8007282:	4403      	add	r3, r0
 8007284:	3344      	adds	r3, #68	; 0x44
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	fbb2 f1f3 	udiv	r1, r2, r3
 800728c:	fb01 f303 	mul.w	r3, r1, r3
 8007290:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8007292:	2b00      	cmp	r3, #0
 8007294:	d110      	bne.n	80072b8 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8007296:	78fa      	ldrb	r2, [r7, #3]
 8007298:	6879      	ldr	r1, [r7, #4]
 800729a:	4613      	mov	r3, r2
 800729c:	009b      	lsls	r3, r3, #2
 800729e:	4413      	add	r3, r2
 80072a0:	009b      	lsls	r3, r3, #2
 80072a2:	440b      	add	r3, r1
 80072a4:	3318      	adds	r3, #24
 80072a6:	2200      	movs	r2, #0
 80072a8:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80072aa:	78f9      	ldrb	r1, [r7, #3]
 80072ac:	2300      	movs	r3, #0
 80072ae:	2200      	movs	r2, #0
 80072b0:	6878      	ldr	r0, [r7, #4]
 80072b2:	f002 f88e 	bl	80093d2 <USBD_LL_Transmit>
 80072b6:	e015      	b.n	80072e4 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 80072b8:	68bb      	ldr	r3, [r7, #8]
 80072ba:	2200      	movs	r2, #0
 80072bc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80072c6:	691b      	ldr	r3, [r3, #16]
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d00b      	beq.n	80072e4 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80072d2:	691b      	ldr	r3, [r3, #16]
 80072d4:	68ba      	ldr	r2, [r7, #8]
 80072d6:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80072da:	68ba      	ldr	r2, [r7, #8]
 80072dc:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80072e0:	78fa      	ldrb	r2, [r7, #3]
 80072e2:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80072e4:	2300      	movs	r3, #0
}
 80072e6:	4618      	mov	r0, r3
 80072e8:	3710      	adds	r7, #16
 80072ea:	46bd      	mov	sp, r7
 80072ec:	bd80      	pop	{r7, pc}

080072ee <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80072ee:	b580      	push	{r7, lr}
 80072f0:	b084      	sub	sp, #16
 80072f2:	af00      	add	r7, sp, #0
 80072f4:	6078      	str	r0, [r7, #4]
 80072f6:	460b      	mov	r3, r1
 80072f8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007300:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007308:	2b00      	cmp	r3, #0
 800730a:	d101      	bne.n	8007310 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800730c:	2303      	movs	r3, #3
 800730e:	e015      	b.n	800733c <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007310:	78fb      	ldrb	r3, [r7, #3]
 8007312:	4619      	mov	r1, r3
 8007314:	6878      	ldr	r0, [r7, #4]
 8007316:	f002 f89e 	bl	8009456 <USBD_LL_GetRxDataSize>
 800731a:	4602      	mov	r2, r0
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007328:	68db      	ldr	r3, [r3, #12]
 800732a:	68fa      	ldr	r2, [r7, #12]
 800732c:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8007330:	68fa      	ldr	r2, [r7, #12]
 8007332:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8007336:	4611      	mov	r1, r2
 8007338:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800733a:	2300      	movs	r3, #0
}
 800733c:	4618      	mov	r0, r3
 800733e:	3710      	adds	r7, #16
 8007340:	46bd      	mov	sp, r7
 8007342:	bd80      	pop	{r7, pc}

08007344 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007344:	b580      	push	{r7, lr}
 8007346:	b084      	sub	sp, #16
 8007348:	af00      	add	r7, sp, #0
 800734a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007352:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	2b00      	cmp	r3, #0
 8007358:	d101      	bne.n	800735e <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800735a:	2303      	movs	r3, #3
 800735c:	e01b      	b.n	8007396 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007364:	2b00      	cmp	r3, #0
 8007366:	d015      	beq.n	8007394 <USBD_CDC_EP0_RxReady+0x50>
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800736e:	2bff      	cmp	r3, #255	; 0xff
 8007370:	d010      	beq.n	8007394 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007378:	689b      	ldr	r3, [r3, #8]
 800737a:	68fa      	ldr	r2, [r7, #12]
 800737c:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8007380:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8007382:	68fa      	ldr	r2, [r7, #12]
 8007384:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007388:	b292      	uxth	r2, r2
 800738a:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	22ff      	movs	r2, #255	; 0xff
 8007390:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8007394:	2300      	movs	r3, #0
}
 8007396:	4618      	mov	r0, r3
 8007398:	3710      	adds	r7, #16
 800739a:	46bd      	mov	sp, r7
 800739c:	bd80      	pop	{r7, pc}
	...

080073a0 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80073a0:	b480      	push	{r7}
 80073a2:	b083      	sub	sp, #12
 80073a4:	af00      	add	r7, sp, #0
 80073a6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	2243      	movs	r2, #67	; 0x43
 80073ac:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 80073ae:	4b03      	ldr	r3, [pc, #12]	; (80073bc <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80073b0:	4618      	mov	r0, r3
 80073b2:	370c      	adds	r7, #12
 80073b4:	46bd      	mov	sp, r7
 80073b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ba:	4770      	bx	lr
 80073bc:	200000b8 	.word	0x200000b8

080073c0 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80073c0:	b480      	push	{r7}
 80073c2:	b083      	sub	sp, #12
 80073c4:	af00      	add	r7, sp, #0
 80073c6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	2243      	movs	r2, #67	; 0x43
 80073cc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 80073ce:	4b03      	ldr	r3, [pc, #12]	; (80073dc <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80073d0:	4618      	mov	r0, r3
 80073d2:	370c      	adds	r7, #12
 80073d4:	46bd      	mov	sp, r7
 80073d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073da:	4770      	bx	lr
 80073dc:	20000074 	.word	0x20000074

080073e0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80073e0:	b480      	push	{r7}
 80073e2:	b083      	sub	sp, #12
 80073e4:	af00      	add	r7, sp, #0
 80073e6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	2243      	movs	r2, #67	; 0x43
 80073ec:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 80073ee:	4b03      	ldr	r3, [pc, #12]	; (80073fc <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80073f0:	4618      	mov	r0, r3
 80073f2:	370c      	adds	r7, #12
 80073f4:	46bd      	mov	sp, r7
 80073f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073fa:	4770      	bx	lr
 80073fc:	200000fc 	.word	0x200000fc

08007400 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007400:	b480      	push	{r7}
 8007402:	b083      	sub	sp, #12
 8007404:	af00      	add	r7, sp, #0
 8007406:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	220a      	movs	r2, #10
 800740c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800740e:	4b03      	ldr	r3, [pc, #12]	; (800741c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007410:	4618      	mov	r0, r3
 8007412:	370c      	adds	r7, #12
 8007414:	46bd      	mov	sp, r7
 8007416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800741a:	4770      	bx	lr
 800741c:	20000030 	.word	0x20000030

08007420 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8007420:	b480      	push	{r7}
 8007422:	b083      	sub	sp, #12
 8007424:	af00      	add	r7, sp, #0
 8007426:	6078      	str	r0, [r7, #4]
 8007428:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800742a:	683b      	ldr	r3, [r7, #0]
 800742c:	2b00      	cmp	r3, #0
 800742e:	d101      	bne.n	8007434 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8007430:	2303      	movs	r3, #3
 8007432:	e004      	b.n	800743e <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	683a      	ldr	r2, [r7, #0]
 8007438:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800743c:	2300      	movs	r3, #0
}
 800743e:	4618      	mov	r0, r3
 8007440:	370c      	adds	r7, #12
 8007442:	46bd      	mov	sp, r7
 8007444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007448:	4770      	bx	lr

0800744a <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800744a:	b480      	push	{r7}
 800744c:	b087      	sub	sp, #28
 800744e:	af00      	add	r7, sp, #0
 8007450:	60f8      	str	r0, [r7, #12]
 8007452:	60b9      	str	r1, [r7, #8]
 8007454:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800745c:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800745e:	697b      	ldr	r3, [r7, #20]
 8007460:	2b00      	cmp	r3, #0
 8007462:	d101      	bne.n	8007468 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8007464:	2303      	movs	r3, #3
 8007466:	e008      	b.n	800747a <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8007468:	697b      	ldr	r3, [r7, #20]
 800746a:	68ba      	ldr	r2, [r7, #8]
 800746c:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8007470:	697b      	ldr	r3, [r7, #20]
 8007472:	687a      	ldr	r2, [r7, #4]
 8007474:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8007478:	2300      	movs	r3, #0
}
 800747a:	4618      	mov	r0, r3
 800747c:	371c      	adds	r7, #28
 800747e:	46bd      	mov	sp, r7
 8007480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007484:	4770      	bx	lr

08007486 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8007486:	b480      	push	{r7}
 8007488:	b085      	sub	sp, #20
 800748a:	af00      	add	r7, sp, #0
 800748c:	6078      	str	r0, [r7, #4]
 800748e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007496:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	2b00      	cmp	r3, #0
 800749c:	d101      	bne.n	80074a2 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800749e:	2303      	movs	r3, #3
 80074a0:	e004      	b.n	80074ac <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	683a      	ldr	r2, [r7, #0]
 80074a6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80074aa:	2300      	movs	r3, #0
}
 80074ac:	4618      	mov	r0, r3
 80074ae:	3714      	adds	r7, #20
 80074b0:	46bd      	mov	sp, r7
 80074b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b6:	4770      	bx	lr

080074b8 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80074b8:	b580      	push	{r7, lr}
 80074ba:	b084      	sub	sp, #16
 80074bc:	af00      	add	r7, sp, #0
 80074be:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80074c6:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 80074c8:	2301      	movs	r3, #1
 80074ca:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d101      	bne.n	80074da <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80074d6:	2303      	movs	r3, #3
 80074d8:	e01a      	b.n	8007510 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 80074da:	68bb      	ldr	r3, [r7, #8]
 80074dc:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d114      	bne.n	800750e <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80074e4:	68bb      	ldr	r3, [r7, #8]
 80074e6:	2201      	movs	r2, #1
 80074e8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80074ec:	68bb      	ldr	r3, [r7, #8]
 80074ee:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 80074f6:	68bb      	ldr	r3, [r7, #8]
 80074f8:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80074fc:	68bb      	ldr	r3, [r7, #8]
 80074fe:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8007502:	2181      	movs	r1, #129	; 0x81
 8007504:	6878      	ldr	r0, [r7, #4]
 8007506:	f001 ff64 	bl	80093d2 <USBD_LL_Transmit>

    ret = USBD_OK;
 800750a:	2300      	movs	r3, #0
 800750c:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800750e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007510:	4618      	mov	r0, r3
 8007512:	3710      	adds	r7, #16
 8007514:	46bd      	mov	sp, r7
 8007516:	bd80      	pop	{r7, pc}

08007518 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007518:	b580      	push	{r7, lr}
 800751a:	b084      	sub	sp, #16
 800751c:	af00      	add	r7, sp, #0
 800751e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007526:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800752e:	2b00      	cmp	r3, #0
 8007530:	d101      	bne.n	8007536 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8007532:	2303      	movs	r3, #3
 8007534:	e016      	b.n	8007564 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	7c1b      	ldrb	r3, [r3, #16]
 800753a:	2b00      	cmp	r3, #0
 800753c:	d109      	bne.n	8007552 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007544:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007548:	2101      	movs	r1, #1
 800754a:	6878      	ldr	r0, [r7, #4]
 800754c:	f001 ff62 	bl	8009414 <USBD_LL_PrepareReceive>
 8007550:	e007      	b.n	8007562 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007558:	2340      	movs	r3, #64	; 0x40
 800755a:	2101      	movs	r1, #1
 800755c:	6878      	ldr	r0, [r7, #4]
 800755e:	f001 ff59 	bl	8009414 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007562:	2300      	movs	r3, #0
}
 8007564:	4618      	mov	r0, r3
 8007566:	3710      	adds	r7, #16
 8007568:	46bd      	mov	sp, r7
 800756a:	bd80      	pop	{r7, pc}

0800756c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800756c:	b580      	push	{r7, lr}
 800756e:	b086      	sub	sp, #24
 8007570:	af00      	add	r7, sp, #0
 8007572:	60f8      	str	r0, [r7, #12]
 8007574:	60b9      	str	r1, [r7, #8]
 8007576:	4613      	mov	r3, r2
 8007578:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	2b00      	cmp	r3, #0
 800757e:	d101      	bne.n	8007584 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8007580:	2303      	movs	r3, #3
 8007582:	e01f      	b.n	80075c4 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	2200      	movs	r2, #0
 8007588:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	2200      	movs	r2, #0
 8007590:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	2200      	movs	r2, #0
 8007598:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800759c:	68bb      	ldr	r3, [r7, #8]
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d003      	beq.n	80075aa <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	68ba      	ldr	r2, [r7, #8]
 80075a6:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	2201      	movs	r2, #1
 80075ae:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	79fa      	ldrb	r2, [r7, #7]
 80075b6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80075b8:	68f8      	ldr	r0, [r7, #12]
 80075ba:	f001 fdd5 	bl	8009168 <USBD_LL_Init>
 80075be:	4603      	mov	r3, r0
 80075c0:	75fb      	strb	r3, [r7, #23]

  return ret;
 80075c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80075c4:	4618      	mov	r0, r3
 80075c6:	3718      	adds	r7, #24
 80075c8:	46bd      	mov	sp, r7
 80075ca:	bd80      	pop	{r7, pc}

080075cc <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80075cc:	b580      	push	{r7, lr}
 80075ce:	b084      	sub	sp, #16
 80075d0:	af00      	add	r7, sp, #0
 80075d2:	6078      	str	r0, [r7, #4]
 80075d4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80075d6:	2300      	movs	r3, #0
 80075d8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80075da:	683b      	ldr	r3, [r7, #0]
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d101      	bne.n	80075e4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 80075e0:	2303      	movs	r3, #3
 80075e2:	e016      	b.n	8007612 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	683a      	ldr	r2, [r7, #0]
 80075e8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80075f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d00b      	beq.n	8007610 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80075fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007600:	f107 020e 	add.w	r2, r7, #14
 8007604:	4610      	mov	r0, r2
 8007606:	4798      	blx	r3
 8007608:	4602      	mov	r2, r0
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8007610:	2300      	movs	r3, #0
}
 8007612:	4618      	mov	r0, r3
 8007614:	3710      	adds	r7, #16
 8007616:	46bd      	mov	sp, r7
 8007618:	bd80      	pop	{r7, pc}

0800761a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800761a:	b580      	push	{r7, lr}
 800761c:	b082      	sub	sp, #8
 800761e:	af00      	add	r7, sp, #0
 8007620:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007622:	6878      	ldr	r0, [r7, #4]
 8007624:	f001 fdec 	bl	8009200 <USBD_LL_Start>
 8007628:	4603      	mov	r3, r0
}
 800762a:	4618      	mov	r0, r3
 800762c:	3708      	adds	r7, #8
 800762e:	46bd      	mov	sp, r7
 8007630:	bd80      	pop	{r7, pc}

08007632 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8007632:	b480      	push	{r7}
 8007634:	b083      	sub	sp, #12
 8007636:	af00      	add	r7, sp, #0
 8007638:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800763a:	2300      	movs	r3, #0
}
 800763c:	4618      	mov	r0, r3
 800763e:	370c      	adds	r7, #12
 8007640:	46bd      	mov	sp, r7
 8007642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007646:	4770      	bx	lr

08007648 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007648:	b580      	push	{r7, lr}
 800764a:	b084      	sub	sp, #16
 800764c:	af00      	add	r7, sp, #0
 800764e:	6078      	str	r0, [r7, #4]
 8007650:	460b      	mov	r3, r1
 8007652:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8007654:	2303      	movs	r3, #3
 8007656:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800765e:	2b00      	cmp	r3, #0
 8007660:	d009      	beq.n	8007676 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	78fa      	ldrb	r2, [r7, #3]
 800766c:	4611      	mov	r1, r2
 800766e:	6878      	ldr	r0, [r7, #4]
 8007670:	4798      	blx	r3
 8007672:	4603      	mov	r3, r0
 8007674:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8007676:	7bfb      	ldrb	r3, [r7, #15]
}
 8007678:	4618      	mov	r0, r3
 800767a:	3710      	adds	r7, #16
 800767c:	46bd      	mov	sp, r7
 800767e:	bd80      	pop	{r7, pc}

08007680 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007680:	b580      	push	{r7, lr}
 8007682:	b082      	sub	sp, #8
 8007684:	af00      	add	r7, sp, #0
 8007686:	6078      	str	r0, [r7, #4]
 8007688:	460b      	mov	r3, r1
 800768a:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007692:	2b00      	cmp	r3, #0
 8007694:	d007      	beq.n	80076a6 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800769c:	685b      	ldr	r3, [r3, #4]
 800769e:	78fa      	ldrb	r2, [r7, #3]
 80076a0:	4611      	mov	r1, r2
 80076a2:	6878      	ldr	r0, [r7, #4]
 80076a4:	4798      	blx	r3
  }

  return USBD_OK;
 80076a6:	2300      	movs	r3, #0
}
 80076a8:	4618      	mov	r0, r3
 80076aa:	3708      	adds	r7, #8
 80076ac:	46bd      	mov	sp, r7
 80076ae:	bd80      	pop	{r7, pc}

080076b0 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80076b0:	b580      	push	{r7, lr}
 80076b2:	b084      	sub	sp, #16
 80076b4:	af00      	add	r7, sp, #0
 80076b6:	6078      	str	r0, [r7, #4]
 80076b8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80076c0:	6839      	ldr	r1, [r7, #0]
 80076c2:	4618      	mov	r0, r3
 80076c4:	f000 ff90 	bl	80085e8 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	2201      	movs	r2, #1
 80076cc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80076d6:	461a      	mov	r2, r3
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80076e4:	f003 031f 	and.w	r3, r3, #31
 80076e8:	2b02      	cmp	r3, #2
 80076ea:	d01a      	beq.n	8007722 <USBD_LL_SetupStage+0x72>
 80076ec:	2b02      	cmp	r3, #2
 80076ee:	d822      	bhi.n	8007736 <USBD_LL_SetupStage+0x86>
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d002      	beq.n	80076fa <USBD_LL_SetupStage+0x4a>
 80076f4:	2b01      	cmp	r3, #1
 80076f6:	d00a      	beq.n	800770e <USBD_LL_SetupStage+0x5e>
 80076f8:	e01d      	b.n	8007736 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007700:	4619      	mov	r1, r3
 8007702:	6878      	ldr	r0, [r7, #4]
 8007704:	f000 fa62 	bl	8007bcc <USBD_StdDevReq>
 8007708:	4603      	mov	r3, r0
 800770a:	73fb      	strb	r3, [r7, #15]
      break;
 800770c:	e020      	b.n	8007750 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007714:	4619      	mov	r1, r3
 8007716:	6878      	ldr	r0, [r7, #4]
 8007718:	f000 fac6 	bl	8007ca8 <USBD_StdItfReq>
 800771c:	4603      	mov	r3, r0
 800771e:	73fb      	strb	r3, [r7, #15]
      break;
 8007720:	e016      	b.n	8007750 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007728:	4619      	mov	r1, r3
 800772a:	6878      	ldr	r0, [r7, #4]
 800772c:	f000 fb05 	bl	8007d3a <USBD_StdEPReq>
 8007730:	4603      	mov	r3, r0
 8007732:	73fb      	strb	r3, [r7, #15]
      break;
 8007734:	e00c      	b.n	8007750 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800773c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007740:	b2db      	uxtb	r3, r3
 8007742:	4619      	mov	r1, r3
 8007744:	6878      	ldr	r0, [r7, #4]
 8007746:	f001 fdbb 	bl	80092c0 <USBD_LL_StallEP>
 800774a:	4603      	mov	r3, r0
 800774c:	73fb      	strb	r3, [r7, #15]
      break;
 800774e:	bf00      	nop
  }

  return ret;
 8007750:	7bfb      	ldrb	r3, [r7, #15]
}
 8007752:	4618      	mov	r0, r3
 8007754:	3710      	adds	r7, #16
 8007756:	46bd      	mov	sp, r7
 8007758:	bd80      	pop	{r7, pc}

0800775a <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800775a:	b580      	push	{r7, lr}
 800775c:	b086      	sub	sp, #24
 800775e:	af00      	add	r7, sp, #0
 8007760:	60f8      	str	r0, [r7, #12]
 8007762:	460b      	mov	r3, r1
 8007764:	607a      	str	r2, [r7, #4]
 8007766:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8007768:	7afb      	ldrb	r3, [r7, #11]
 800776a:	2b00      	cmp	r3, #0
 800776c:	d138      	bne.n	80077e0 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8007774:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800777c:	2b03      	cmp	r3, #3
 800777e:	d14a      	bne.n	8007816 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8007780:	693b      	ldr	r3, [r7, #16]
 8007782:	689a      	ldr	r2, [r3, #8]
 8007784:	693b      	ldr	r3, [r7, #16]
 8007786:	68db      	ldr	r3, [r3, #12]
 8007788:	429a      	cmp	r2, r3
 800778a:	d913      	bls.n	80077b4 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800778c:	693b      	ldr	r3, [r7, #16]
 800778e:	689a      	ldr	r2, [r3, #8]
 8007790:	693b      	ldr	r3, [r7, #16]
 8007792:	68db      	ldr	r3, [r3, #12]
 8007794:	1ad2      	subs	r2, r2, r3
 8007796:	693b      	ldr	r3, [r7, #16]
 8007798:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800779a:	693b      	ldr	r3, [r7, #16]
 800779c:	68da      	ldr	r2, [r3, #12]
 800779e:	693b      	ldr	r3, [r7, #16]
 80077a0:	689b      	ldr	r3, [r3, #8]
 80077a2:	4293      	cmp	r3, r2
 80077a4:	bf28      	it	cs
 80077a6:	4613      	movcs	r3, r2
 80077a8:	461a      	mov	r2, r3
 80077aa:	6879      	ldr	r1, [r7, #4]
 80077ac:	68f8      	ldr	r0, [r7, #12]
 80077ae:	f001 f80f 	bl	80087d0 <USBD_CtlContinueRx>
 80077b2:	e030      	b.n	8007816 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80077ba:	b2db      	uxtb	r3, r3
 80077bc:	2b03      	cmp	r3, #3
 80077be:	d10b      	bne.n	80077d8 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80077c6:	691b      	ldr	r3, [r3, #16]
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d005      	beq.n	80077d8 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80077d2:	691b      	ldr	r3, [r3, #16]
 80077d4:	68f8      	ldr	r0, [r7, #12]
 80077d6:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80077d8:	68f8      	ldr	r0, [r7, #12]
 80077da:	f001 f80a 	bl	80087f2 <USBD_CtlSendStatus>
 80077de:	e01a      	b.n	8007816 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80077e6:	b2db      	uxtb	r3, r3
 80077e8:	2b03      	cmp	r3, #3
 80077ea:	d114      	bne.n	8007816 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80077f2:	699b      	ldr	r3, [r3, #24]
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d00e      	beq.n	8007816 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80077fe:	699b      	ldr	r3, [r3, #24]
 8007800:	7afa      	ldrb	r2, [r7, #11]
 8007802:	4611      	mov	r1, r2
 8007804:	68f8      	ldr	r0, [r7, #12]
 8007806:	4798      	blx	r3
 8007808:	4603      	mov	r3, r0
 800780a:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800780c:	7dfb      	ldrb	r3, [r7, #23]
 800780e:	2b00      	cmp	r3, #0
 8007810:	d001      	beq.n	8007816 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8007812:	7dfb      	ldrb	r3, [r7, #23]
 8007814:	e000      	b.n	8007818 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8007816:	2300      	movs	r3, #0
}
 8007818:	4618      	mov	r0, r3
 800781a:	3718      	adds	r7, #24
 800781c:	46bd      	mov	sp, r7
 800781e:	bd80      	pop	{r7, pc}

08007820 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007820:	b580      	push	{r7, lr}
 8007822:	b086      	sub	sp, #24
 8007824:	af00      	add	r7, sp, #0
 8007826:	60f8      	str	r0, [r7, #12]
 8007828:	460b      	mov	r3, r1
 800782a:	607a      	str	r2, [r7, #4]
 800782c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800782e:	7afb      	ldrb	r3, [r7, #11]
 8007830:	2b00      	cmp	r3, #0
 8007832:	d16b      	bne.n	800790c <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	3314      	adds	r3, #20
 8007838:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007840:	2b02      	cmp	r3, #2
 8007842:	d156      	bne.n	80078f2 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8007844:	693b      	ldr	r3, [r7, #16]
 8007846:	689a      	ldr	r2, [r3, #8]
 8007848:	693b      	ldr	r3, [r7, #16]
 800784a:	68db      	ldr	r3, [r3, #12]
 800784c:	429a      	cmp	r2, r3
 800784e:	d914      	bls.n	800787a <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007850:	693b      	ldr	r3, [r7, #16]
 8007852:	689a      	ldr	r2, [r3, #8]
 8007854:	693b      	ldr	r3, [r7, #16]
 8007856:	68db      	ldr	r3, [r3, #12]
 8007858:	1ad2      	subs	r2, r2, r3
 800785a:	693b      	ldr	r3, [r7, #16]
 800785c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800785e:	693b      	ldr	r3, [r7, #16]
 8007860:	689b      	ldr	r3, [r3, #8]
 8007862:	461a      	mov	r2, r3
 8007864:	6879      	ldr	r1, [r7, #4]
 8007866:	68f8      	ldr	r0, [r7, #12]
 8007868:	f000 ff84 	bl	8008774 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800786c:	2300      	movs	r3, #0
 800786e:	2200      	movs	r2, #0
 8007870:	2100      	movs	r1, #0
 8007872:	68f8      	ldr	r0, [r7, #12]
 8007874:	f001 fdce 	bl	8009414 <USBD_LL_PrepareReceive>
 8007878:	e03b      	b.n	80078f2 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800787a:	693b      	ldr	r3, [r7, #16]
 800787c:	68da      	ldr	r2, [r3, #12]
 800787e:	693b      	ldr	r3, [r7, #16]
 8007880:	689b      	ldr	r3, [r3, #8]
 8007882:	429a      	cmp	r2, r3
 8007884:	d11c      	bne.n	80078c0 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8007886:	693b      	ldr	r3, [r7, #16]
 8007888:	685a      	ldr	r2, [r3, #4]
 800788a:	693b      	ldr	r3, [r7, #16]
 800788c:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800788e:	429a      	cmp	r2, r3
 8007890:	d316      	bcc.n	80078c0 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8007892:	693b      	ldr	r3, [r7, #16]
 8007894:	685a      	ldr	r2, [r3, #4]
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800789c:	429a      	cmp	r2, r3
 800789e:	d20f      	bcs.n	80078c0 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80078a0:	2200      	movs	r2, #0
 80078a2:	2100      	movs	r1, #0
 80078a4:	68f8      	ldr	r0, [r7, #12]
 80078a6:	f000 ff65 	bl	8008774 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	2200      	movs	r2, #0
 80078ae:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80078b2:	2300      	movs	r3, #0
 80078b4:	2200      	movs	r2, #0
 80078b6:	2100      	movs	r1, #0
 80078b8:	68f8      	ldr	r0, [r7, #12]
 80078ba:	f001 fdab 	bl	8009414 <USBD_LL_PrepareReceive>
 80078be:	e018      	b.n	80078f2 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80078c6:	b2db      	uxtb	r3, r3
 80078c8:	2b03      	cmp	r3, #3
 80078ca:	d10b      	bne.n	80078e4 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80078d2:	68db      	ldr	r3, [r3, #12]
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d005      	beq.n	80078e4 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80078de:	68db      	ldr	r3, [r3, #12]
 80078e0:	68f8      	ldr	r0, [r7, #12]
 80078e2:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80078e4:	2180      	movs	r1, #128	; 0x80
 80078e6:	68f8      	ldr	r0, [r7, #12]
 80078e8:	f001 fcea 	bl	80092c0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80078ec:	68f8      	ldr	r0, [r7, #12]
 80078ee:	f000 ff93 	bl	8008818 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80078f8:	2b01      	cmp	r3, #1
 80078fa:	d122      	bne.n	8007942 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 80078fc:	68f8      	ldr	r0, [r7, #12]
 80078fe:	f7ff fe98 	bl	8007632 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	2200      	movs	r2, #0
 8007906:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800790a:	e01a      	b.n	8007942 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007912:	b2db      	uxtb	r3, r3
 8007914:	2b03      	cmp	r3, #3
 8007916:	d114      	bne.n	8007942 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800791e:	695b      	ldr	r3, [r3, #20]
 8007920:	2b00      	cmp	r3, #0
 8007922:	d00e      	beq.n	8007942 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800792a:	695b      	ldr	r3, [r3, #20]
 800792c:	7afa      	ldrb	r2, [r7, #11]
 800792e:	4611      	mov	r1, r2
 8007930:	68f8      	ldr	r0, [r7, #12]
 8007932:	4798      	blx	r3
 8007934:	4603      	mov	r3, r0
 8007936:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8007938:	7dfb      	ldrb	r3, [r7, #23]
 800793a:	2b00      	cmp	r3, #0
 800793c:	d001      	beq.n	8007942 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800793e:	7dfb      	ldrb	r3, [r7, #23]
 8007940:	e000      	b.n	8007944 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8007942:	2300      	movs	r3, #0
}
 8007944:	4618      	mov	r0, r3
 8007946:	3718      	adds	r7, #24
 8007948:	46bd      	mov	sp, r7
 800794a:	bd80      	pop	{r7, pc}

0800794c <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800794c:	b580      	push	{r7, lr}
 800794e:	b082      	sub	sp, #8
 8007950:	af00      	add	r7, sp, #0
 8007952:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	2201      	movs	r2, #1
 8007958:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	2200      	movs	r2, #0
 8007960:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	2200      	movs	r2, #0
 8007968:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	2200      	movs	r2, #0
 800796e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007978:	2b00      	cmp	r3, #0
 800797a:	d101      	bne.n	8007980 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800797c:	2303      	movs	r3, #3
 800797e:	e02f      	b.n	80079e0 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007986:	2b00      	cmp	r3, #0
 8007988:	d00f      	beq.n	80079aa <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007990:	685b      	ldr	r3, [r3, #4]
 8007992:	2b00      	cmp	r3, #0
 8007994:	d009      	beq.n	80079aa <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800799c:	685b      	ldr	r3, [r3, #4]
 800799e:	687a      	ldr	r2, [r7, #4]
 80079a0:	6852      	ldr	r2, [r2, #4]
 80079a2:	b2d2      	uxtb	r2, r2
 80079a4:	4611      	mov	r1, r2
 80079a6:	6878      	ldr	r0, [r7, #4]
 80079a8:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80079aa:	2340      	movs	r3, #64	; 0x40
 80079ac:	2200      	movs	r2, #0
 80079ae:	2100      	movs	r1, #0
 80079b0:	6878      	ldr	r0, [r7, #4]
 80079b2:	f001 fc40 	bl	8009236 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	2201      	movs	r2, #1
 80079ba:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	2240      	movs	r2, #64	; 0x40
 80079c2:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80079c6:	2340      	movs	r3, #64	; 0x40
 80079c8:	2200      	movs	r2, #0
 80079ca:	2180      	movs	r1, #128	; 0x80
 80079cc:	6878      	ldr	r0, [r7, #4]
 80079ce:	f001 fc32 	bl	8009236 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	2201      	movs	r2, #1
 80079d6:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	2240      	movs	r2, #64	; 0x40
 80079dc:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 80079de:	2300      	movs	r3, #0
}
 80079e0:	4618      	mov	r0, r3
 80079e2:	3708      	adds	r7, #8
 80079e4:	46bd      	mov	sp, r7
 80079e6:	bd80      	pop	{r7, pc}

080079e8 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80079e8:	b480      	push	{r7}
 80079ea:	b083      	sub	sp, #12
 80079ec:	af00      	add	r7, sp, #0
 80079ee:	6078      	str	r0, [r7, #4]
 80079f0:	460b      	mov	r3, r1
 80079f2:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	78fa      	ldrb	r2, [r7, #3]
 80079f8:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80079fa:	2300      	movs	r3, #0
}
 80079fc:	4618      	mov	r0, r3
 80079fe:	370c      	adds	r7, #12
 8007a00:	46bd      	mov	sp, r7
 8007a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a06:	4770      	bx	lr

08007a08 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007a08:	b480      	push	{r7}
 8007a0a:	b083      	sub	sp, #12
 8007a0c:	af00      	add	r7, sp, #0
 8007a0e:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a16:	b2da      	uxtb	r2, r3
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	2204      	movs	r2, #4
 8007a22:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007a26:	2300      	movs	r3, #0
}
 8007a28:	4618      	mov	r0, r3
 8007a2a:	370c      	adds	r7, #12
 8007a2c:	46bd      	mov	sp, r7
 8007a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a32:	4770      	bx	lr

08007a34 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007a34:	b480      	push	{r7}
 8007a36:	b083      	sub	sp, #12
 8007a38:	af00      	add	r7, sp, #0
 8007a3a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a42:	b2db      	uxtb	r3, r3
 8007a44:	2b04      	cmp	r3, #4
 8007a46:	d106      	bne.n	8007a56 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8007a4e:	b2da      	uxtb	r2, r3
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007a56:	2300      	movs	r3, #0
}
 8007a58:	4618      	mov	r0, r3
 8007a5a:	370c      	adds	r7, #12
 8007a5c:	46bd      	mov	sp, r7
 8007a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a62:	4770      	bx	lr

08007a64 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007a64:	b580      	push	{r7, lr}
 8007a66:	b082      	sub	sp, #8
 8007a68:	af00      	add	r7, sp, #0
 8007a6a:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d101      	bne.n	8007a7a <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8007a76:	2303      	movs	r3, #3
 8007a78:	e012      	b.n	8007aa0 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a80:	b2db      	uxtb	r3, r3
 8007a82:	2b03      	cmp	r3, #3
 8007a84:	d10b      	bne.n	8007a9e <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a8c:	69db      	ldr	r3, [r3, #28]
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d005      	beq.n	8007a9e <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a98:	69db      	ldr	r3, [r3, #28]
 8007a9a:	6878      	ldr	r0, [r7, #4]
 8007a9c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007a9e:	2300      	movs	r3, #0
}
 8007aa0:	4618      	mov	r0, r3
 8007aa2:	3708      	adds	r7, #8
 8007aa4:	46bd      	mov	sp, r7
 8007aa6:	bd80      	pop	{r7, pc}

08007aa8 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8007aa8:	b580      	push	{r7, lr}
 8007aaa:	b082      	sub	sp, #8
 8007aac:	af00      	add	r7, sp, #0
 8007aae:	6078      	str	r0, [r7, #4]
 8007ab0:	460b      	mov	r3, r1
 8007ab2:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d101      	bne.n	8007ac2 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 8007abe:	2303      	movs	r3, #3
 8007ac0:	e014      	b.n	8007aec <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ac8:	b2db      	uxtb	r3, r3
 8007aca:	2b03      	cmp	r3, #3
 8007acc:	d10d      	bne.n	8007aea <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ad4:	6a1b      	ldr	r3, [r3, #32]
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d007      	beq.n	8007aea <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ae0:	6a1b      	ldr	r3, [r3, #32]
 8007ae2:	78fa      	ldrb	r2, [r7, #3]
 8007ae4:	4611      	mov	r1, r2
 8007ae6:	6878      	ldr	r0, [r7, #4]
 8007ae8:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007aea:	2300      	movs	r3, #0
}
 8007aec:	4618      	mov	r0, r3
 8007aee:	3708      	adds	r7, #8
 8007af0:	46bd      	mov	sp, r7
 8007af2:	bd80      	pop	{r7, pc}

08007af4 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8007af4:	b580      	push	{r7, lr}
 8007af6:	b082      	sub	sp, #8
 8007af8:	af00      	add	r7, sp, #0
 8007afa:	6078      	str	r0, [r7, #4]
 8007afc:	460b      	mov	r3, r1
 8007afe:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d101      	bne.n	8007b0e <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 8007b0a:	2303      	movs	r3, #3
 8007b0c:	e014      	b.n	8007b38 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b14:	b2db      	uxtb	r3, r3
 8007b16:	2b03      	cmp	r3, #3
 8007b18:	d10d      	bne.n	8007b36 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d007      	beq.n	8007b36 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b2e:	78fa      	ldrb	r2, [r7, #3]
 8007b30:	4611      	mov	r1, r2
 8007b32:	6878      	ldr	r0, [r7, #4]
 8007b34:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007b36:	2300      	movs	r3, #0
}
 8007b38:	4618      	mov	r0, r3
 8007b3a:	3708      	adds	r7, #8
 8007b3c:	46bd      	mov	sp, r7
 8007b3e:	bd80      	pop	{r7, pc}

08007b40 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8007b40:	b480      	push	{r7}
 8007b42:	b083      	sub	sp, #12
 8007b44:	af00      	add	r7, sp, #0
 8007b46:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007b48:	2300      	movs	r3, #0
}
 8007b4a:	4618      	mov	r0, r3
 8007b4c:	370c      	adds	r7, #12
 8007b4e:	46bd      	mov	sp, r7
 8007b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b54:	4770      	bx	lr

08007b56 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8007b56:	b580      	push	{r7, lr}
 8007b58:	b082      	sub	sp, #8
 8007b5a:	af00      	add	r7, sp, #0
 8007b5c:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	2201      	movs	r2, #1
 8007b62:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d009      	beq.n	8007b84 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b76:	685b      	ldr	r3, [r3, #4]
 8007b78:	687a      	ldr	r2, [r7, #4]
 8007b7a:	6852      	ldr	r2, [r2, #4]
 8007b7c:	b2d2      	uxtb	r2, r2
 8007b7e:	4611      	mov	r1, r2
 8007b80:	6878      	ldr	r0, [r7, #4]
 8007b82:	4798      	blx	r3
  }

  return USBD_OK;
 8007b84:	2300      	movs	r3, #0
}
 8007b86:	4618      	mov	r0, r3
 8007b88:	3708      	adds	r7, #8
 8007b8a:	46bd      	mov	sp, r7
 8007b8c:	bd80      	pop	{r7, pc}

08007b8e <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007b8e:	b480      	push	{r7}
 8007b90:	b087      	sub	sp, #28
 8007b92:	af00      	add	r7, sp, #0
 8007b94:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8007b9a:	697b      	ldr	r3, [r7, #20]
 8007b9c:	781b      	ldrb	r3, [r3, #0]
 8007b9e:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007ba0:	697b      	ldr	r3, [r7, #20]
 8007ba2:	3301      	adds	r3, #1
 8007ba4:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8007ba6:	697b      	ldr	r3, [r7, #20]
 8007ba8:	781b      	ldrb	r3, [r3, #0]
 8007baa:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8007bac:	8a3b      	ldrh	r3, [r7, #16]
 8007bae:	021b      	lsls	r3, r3, #8
 8007bb0:	b21a      	sxth	r2, r3
 8007bb2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007bb6:	4313      	orrs	r3, r2
 8007bb8:	b21b      	sxth	r3, r3
 8007bba:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8007bbc:	89fb      	ldrh	r3, [r7, #14]
}
 8007bbe:	4618      	mov	r0, r3
 8007bc0:	371c      	adds	r7, #28
 8007bc2:	46bd      	mov	sp, r7
 8007bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc8:	4770      	bx	lr
	...

08007bcc <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007bcc:	b580      	push	{r7, lr}
 8007bce:	b084      	sub	sp, #16
 8007bd0:	af00      	add	r7, sp, #0
 8007bd2:	6078      	str	r0, [r7, #4]
 8007bd4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007bd6:	2300      	movs	r3, #0
 8007bd8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007bda:	683b      	ldr	r3, [r7, #0]
 8007bdc:	781b      	ldrb	r3, [r3, #0]
 8007bde:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007be2:	2b40      	cmp	r3, #64	; 0x40
 8007be4:	d005      	beq.n	8007bf2 <USBD_StdDevReq+0x26>
 8007be6:	2b40      	cmp	r3, #64	; 0x40
 8007be8:	d853      	bhi.n	8007c92 <USBD_StdDevReq+0xc6>
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d00b      	beq.n	8007c06 <USBD_StdDevReq+0x3a>
 8007bee:	2b20      	cmp	r3, #32
 8007bf0:	d14f      	bne.n	8007c92 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007bf8:	689b      	ldr	r3, [r3, #8]
 8007bfa:	6839      	ldr	r1, [r7, #0]
 8007bfc:	6878      	ldr	r0, [r7, #4]
 8007bfe:	4798      	blx	r3
 8007c00:	4603      	mov	r3, r0
 8007c02:	73fb      	strb	r3, [r7, #15]
      break;
 8007c04:	e04a      	b.n	8007c9c <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007c06:	683b      	ldr	r3, [r7, #0]
 8007c08:	785b      	ldrb	r3, [r3, #1]
 8007c0a:	2b09      	cmp	r3, #9
 8007c0c:	d83b      	bhi.n	8007c86 <USBD_StdDevReq+0xba>
 8007c0e:	a201      	add	r2, pc, #4	; (adr r2, 8007c14 <USBD_StdDevReq+0x48>)
 8007c10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c14:	08007c69 	.word	0x08007c69
 8007c18:	08007c7d 	.word	0x08007c7d
 8007c1c:	08007c87 	.word	0x08007c87
 8007c20:	08007c73 	.word	0x08007c73
 8007c24:	08007c87 	.word	0x08007c87
 8007c28:	08007c47 	.word	0x08007c47
 8007c2c:	08007c3d 	.word	0x08007c3d
 8007c30:	08007c87 	.word	0x08007c87
 8007c34:	08007c5f 	.word	0x08007c5f
 8007c38:	08007c51 	.word	0x08007c51
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007c3c:	6839      	ldr	r1, [r7, #0]
 8007c3e:	6878      	ldr	r0, [r7, #4]
 8007c40:	f000 f9de 	bl	8008000 <USBD_GetDescriptor>
          break;
 8007c44:	e024      	b.n	8007c90 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007c46:	6839      	ldr	r1, [r7, #0]
 8007c48:	6878      	ldr	r0, [r7, #4]
 8007c4a:	f000 fb43 	bl	80082d4 <USBD_SetAddress>
          break;
 8007c4e:	e01f      	b.n	8007c90 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8007c50:	6839      	ldr	r1, [r7, #0]
 8007c52:	6878      	ldr	r0, [r7, #4]
 8007c54:	f000 fb82 	bl	800835c <USBD_SetConfig>
 8007c58:	4603      	mov	r3, r0
 8007c5a:	73fb      	strb	r3, [r7, #15]
          break;
 8007c5c:	e018      	b.n	8007c90 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007c5e:	6839      	ldr	r1, [r7, #0]
 8007c60:	6878      	ldr	r0, [r7, #4]
 8007c62:	f000 fc21 	bl	80084a8 <USBD_GetConfig>
          break;
 8007c66:	e013      	b.n	8007c90 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007c68:	6839      	ldr	r1, [r7, #0]
 8007c6a:	6878      	ldr	r0, [r7, #4]
 8007c6c:	f000 fc52 	bl	8008514 <USBD_GetStatus>
          break;
 8007c70:	e00e      	b.n	8007c90 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007c72:	6839      	ldr	r1, [r7, #0]
 8007c74:	6878      	ldr	r0, [r7, #4]
 8007c76:	f000 fc81 	bl	800857c <USBD_SetFeature>
          break;
 8007c7a:	e009      	b.n	8007c90 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007c7c:	6839      	ldr	r1, [r7, #0]
 8007c7e:	6878      	ldr	r0, [r7, #4]
 8007c80:	f000 fc90 	bl	80085a4 <USBD_ClrFeature>
          break;
 8007c84:	e004      	b.n	8007c90 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8007c86:	6839      	ldr	r1, [r7, #0]
 8007c88:	6878      	ldr	r0, [r7, #4]
 8007c8a:	f000 fce7 	bl	800865c <USBD_CtlError>
          break;
 8007c8e:	bf00      	nop
      }
      break;
 8007c90:	e004      	b.n	8007c9c <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8007c92:	6839      	ldr	r1, [r7, #0]
 8007c94:	6878      	ldr	r0, [r7, #4]
 8007c96:	f000 fce1 	bl	800865c <USBD_CtlError>
      break;
 8007c9a:	bf00      	nop
  }

  return ret;
 8007c9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c9e:	4618      	mov	r0, r3
 8007ca0:	3710      	adds	r7, #16
 8007ca2:	46bd      	mov	sp, r7
 8007ca4:	bd80      	pop	{r7, pc}
 8007ca6:	bf00      	nop

08007ca8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007ca8:	b580      	push	{r7, lr}
 8007caa:	b084      	sub	sp, #16
 8007cac:	af00      	add	r7, sp, #0
 8007cae:	6078      	str	r0, [r7, #4]
 8007cb0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007cb2:	2300      	movs	r3, #0
 8007cb4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007cb6:	683b      	ldr	r3, [r7, #0]
 8007cb8:	781b      	ldrb	r3, [r3, #0]
 8007cba:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007cbe:	2b40      	cmp	r3, #64	; 0x40
 8007cc0:	d005      	beq.n	8007cce <USBD_StdItfReq+0x26>
 8007cc2:	2b40      	cmp	r3, #64	; 0x40
 8007cc4:	d82f      	bhi.n	8007d26 <USBD_StdItfReq+0x7e>
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d001      	beq.n	8007cce <USBD_StdItfReq+0x26>
 8007cca:	2b20      	cmp	r3, #32
 8007ccc:	d12b      	bne.n	8007d26 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007cd4:	b2db      	uxtb	r3, r3
 8007cd6:	3b01      	subs	r3, #1
 8007cd8:	2b02      	cmp	r3, #2
 8007cda:	d81d      	bhi.n	8007d18 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007cdc:	683b      	ldr	r3, [r7, #0]
 8007cde:	889b      	ldrh	r3, [r3, #4]
 8007ce0:	b2db      	uxtb	r3, r3
 8007ce2:	2b01      	cmp	r3, #1
 8007ce4:	d813      	bhi.n	8007d0e <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007cec:	689b      	ldr	r3, [r3, #8]
 8007cee:	6839      	ldr	r1, [r7, #0]
 8007cf0:	6878      	ldr	r0, [r7, #4]
 8007cf2:	4798      	blx	r3
 8007cf4:	4603      	mov	r3, r0
 8007cf6:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007cf8:	683b      	ldr	r3, [r7, #0]
 8007cfa:	88db      	ldrh	r3, [r3, #6]
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d110      	bne.n	8007d22 <USBD_StdItfReq+0x7a>
 8007d00:	7bfb      	ldrb	r3, [r7, #15]
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d10d      	bne.n	8007d22 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8007d06:	6878      	ldr	r0, [r7, #4]
 8007d08:	f000 fd73 	bl	80087f2 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007d0c:	e009      	b.n	8007d22 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8007d0e:	6839      	ldr	r1, [r7, #0]
 8007d10:	6878      	ldr	r0, [r7, #4]
 8007d12:	f000 fca3 	bl	800865c <USBD_CtlError>
          break;
 8007d16:	e004      	b.n	8007d22 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8007d18:	6839      	ldr	r1, [r7, #0]
 8007d1a:	6878      	ldr	r0, [r7, #4]
 8007d1c:	f000 fc9e 	bl	800865c <USBD_CtlError>
          break;
 8007d20:	e000      	b.n	8007d24 <USBD_StdItfReq+0x7c>
          break;
 8007d22:	bf00      	nop
      }
      break;
 8007d24:	e004      	b.n	8007d30 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8007d26:	6839      	ldr	r1, [r7, #0]
 8007d28:	6878      	ldr	r0, [r7, #4]
 8007d2a:	f000 fc97 	bl	800865c <USBD_CtlError>
      break;
 8007d2e:	bf00      	nop
  }

  return ret;
 8007d30:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d32:	4618      	mov	r0, r3
 8007d34:	3710      	adds	r7, #16
 8007d36:	46bd      	mov	sp, r7
 8007d38:	bd80      	pop	{r7, pc}

08007d3a <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007d3a:	b580      	push	{r7, lr}
 8007d3c:	b084      	sub	sp, #16
 8007d3e:	af00      	add	r7, sp, #0
 8007d40:	6078      	str	r0, [r7, #4]
 8007d42:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8007d44:	2300      	movs	r3, #0
 8007d46:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8007d48:	683b      	ldr	r3, [r7, #0]
 8007d4a:	889b      	ldrh	r3, [r3, #4]
 8007d4c:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007d4e:	683b      	ldr	r3, [r7, #0]
 8007d50:	781b      	ldrb	r3, [r3, #0]
 8007d52:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007d56:	2b40      	cmp	r3, #64	; 0x40
 8007d58:	d007      	beq.n	8007d6a <USBD_StdEPReq+0x30>
 8007d5a:	2b40      	cmp	r3, #64	; 0x40
 8007d5c:	f200 8145 	bhi.w	8007fea <USBD_StdEPReq+0x2b0>
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d00c      	beq.n	8007d7e <USBD_StdEPReq+0x44>
 8007d64:	2b20      	cmp	r3, #32
 8007d66:	f040 8140 	bne.w	8007fea <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d70:	689b      	ldr	r3, [r3, #8]
 8007d72:	6839      	ldr	r1, [r7, #0]
 8007d74:	6878      	ldr	r0, [r7, #4]
 8007d76:	4798      	blx	r3
 8007d78:	4603      	mov	r3, r0
 8007d7a:	73fb      	strb	r3, [r7, #15]
      break;
 8007d7c:	e13a      	b.n	8007ff4 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007d7e:	683b      	ldr	r3, [r7, #0]
 8007d80:	785b      	ldrb	r3, [r3, #1]
 8007d82:	2b03      	cmp	r3, #3
 8007d84:	d007      	beq.n	8007d96 <USBD_StdEPReq+0x5c>
 8007d86:	2b03      	cmp	r3, #3
 8007d88:	f300 8129 	bgt.w	8007fde <USBD_StdEPReq+0x2a4>
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d07f      	beq.n	8007e90 <USBD_StdEPReq+0x156>
 8007d90:	2b01      	cmp	r3, #1
 8007d92:	d03c      	beq.n	8007e0e <USBD_StdEPReq+0xd4>
 8007d94:	e123      	b.n	8007fde <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d9c:	b2db      	uxtb	r3, r3
 8007d9e:	2b02      	cmp	r3, #2
 8007da0:	d002      	beq.n	8007da8 <USBD_StdEPReq+0x6e>
 8007da2:	2b03      	cmp	r3, #3
 8007da4:	d016      	beq.n	8007dd4 <USBD_StdEPReq+0x9a>
 8007da6:	e02c      	b.n	8007e02 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007da8:	7bbb      	ldrb	r3, [r7, #14]
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d00d      	beq.n	8007dca <USBD_StdEPReq+0x90>
 8007dae:	7bbb      	ldrb	r3, [r7, #14]
 8007db0:	2b80      	cmp	r3, #128	; 0x80
 8007db2:	d00a      	beq.n	8007dca <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007db4:	7bbb      	ldrb	r3, [r7, #14]
 8007db6:	4619      	mov	r1, r3
 8007db8:	6878      	ldr	r0, [r7, #4]
 8007dba:	f001 fa81 	bl	80092c0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007dbe:	2180      	movs	r1, #128	; 0x80
 8007dc0:	6878      	ldr	r0, [r7, #4]
 8007dc2:	f001 fa7d 	bl	80092c0 <USBD_LL_StallEP>
 8007dc6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007dc8:	e020      	b.n	8007e0c <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8007dca:	6839      	ldr	r1, [r7, #0]
 8007dcc:	6878      	ldr	r0, [r7, #4]
 8007dce:	f000 fc45 	bl	800865c <USBD_CtlError>
              break;
 8007dd2:	e01b      	b.n	8007e0c <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007dd4:	683b      	ldr	r3, [r7, #0]
 8007dd6:	885b      	ldrh	r3, [r3, #2]
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d10e      	bne.n	8007dfa <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007ddc:	7bbb      	ldrb	r3, [r7, #14]
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d00b      	beq.n	8007dfa <USBD_StdEPReq+0xc0>
 8007de2:	7bbb      	ldrb	r3, [r7, #14]
 8007de4:	2b80      	cmp	r3, #128	; 0x80
 8007de6:	d008      	beq.n	8007dfa <USBD_StdEPReq+0xc0>
 8007de8:	683b      	ldr	r3, [r7, #0]
 8007dea:	88db      	ldrh	r3, [r3, #6]
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d104      	bne.n	8007dfa <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8007df0:	7bbb      	ldrb	r3, [r7, #14]
 8007df2:	4619      	mov	r1, r3
 8007df4:	6878      	ldr	r0, [r7, #4]
 8007df6:	f001 fa63 	bl	80092c0 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8007dfa:	6878      	ldr	r0, [r7, #4]
 8007dfc:	f000 fcf9 	bl	80087f2 <USBD_CtlSendStatus>

              break;
 8007e00:	e004      	b.n	8007e0c <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8007e02:	6839      	ldr	r1, [r7, #0]
 8007e04:	6878      	ldr	r0, [r7, #4]
 8007e06:	f000 fc29 	bl	800865c <USBD_CtlError>
              break;
 8007e0a:	bf00      	nop
          }
          break;
 8007e0c:	e0ec      	b.n	8007fe8 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e14:	b2db      	uxtb	r3, r3
 8007e16:	2b02      	cmp	r3, #2
 8007e18:	d002      	beq.n	8007e20 <USBD_StdEPReq+0xe6>
 8007e1a:	2b03      	cmp	r3, #3
 8007e1c:	d016      	beq.n	8007e4c <USBD_StdEPReq+0x112>
 8007e1e:	e030      	b.n	8007e82 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007e20:	7bbb      	ldrb	r3, [r7, #14]
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d00d      	beq.n	8007e42 <USBD_StdEPReq+0x108>
 8007e26:	7bbb      	ldrb	r3, [r7, #14]
 8007e28:	2b80      	cmp	r3, #128	; 0x80
 8007e2a:	d00a      	beq.n	8007e42 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007e2c:	7bbb      	ldrb	r3, [r7, #14]
 8007e2e:	4619      	mov	r1, r3
 8007e30:	6878      	ldr	r0, [r7, #4]
 8007e32:	f001 fa45 	bl	80092c0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007e36:	2180      	movs	r1, #128	; 0x80
 8007e38:	6878      	ldr	r0, [r7, #4]
 8007e3a:	f001 fa41 	bl	80092c0 <USBD_LL_StallEP>
 8007e3e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007e40:	e025      	b.n	8007e8e <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8007e42:	6839      	ldr	r1, [r7, #0]
 8007e44:	6878      	ldr	r0, [r7, #4]
 8007e46:	f000 fc09 	bl	800865c <USBD_CtlError>
              break;
 8007e4a:	e020      	b.n	8007e8e <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007e4c:	683b      	ldr	r3, [r7, #0]
 8007e4e:	885b      	ldrh	r3, [r3, #2]
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d11b      	bne.n	8007e8c <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007e54:	7bbb      	ldrb	r3, [r7, #14]
 8007e56:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d004      	beq.n	8007e68 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8007e5e:	7bbb      	ldrb	r3, [r7, #14]
 8007e60:	4619      	mov	r1, r3
 8007e62:	6878      	ldr	r0, [r7, #4]
 8007e64:	f001 fa4b 	bl	80092fe <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8007e68:	6878      	ldr	r0, [r7, #4]
 8007e6a:	f000 fcc2 	bl	80087f2 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e74:	689b      	ldr	r3, [r3, #8]
 8007e76:	6839      	ldr	r1, [r7, #0]
 8007e78:	6878      	ldr	r0, [r7, #4]
 8007e7a:	4798      	blx	r3
 8007e7c:	4603      	mov	r3, r0
 8007e7e:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8007e80:	e004      	b.n	8007e8c <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8007e82:	6839      	ldr	r1, [r7, #0]
 8007e84:	6878      	ldr	r0, [r7, #4]
 8007e86:	f000 fbe9 	bl	800865c <USBD_CtlError>
              break;
 8007e8a:	e000      	b.n	8007e8e <USBD_StdEPReq+0x154>
              break;
 8007e8c:	bf00      	nop
          }
          break;
 8007e8e:	e0ab      	b.n	8007fe8 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e96:	b2db      	uxtb	r3, r3
 8007e98:	2b02      	cmp	r3, #2
 8007e9a:	d002      	beq.n	8007ea2 <USBD_StdEPReq+0x168>
 8007e9c:	2b03      	cmp	r3, #3
 8007e9e:	d032      	beq.n	8007f06 <USBD_StdEPReq+0x1cc>
 8007ea0:	e097      	b.n	8007fd2 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007ea2:	7bbb      	ldrb	r3, [r7, #14]
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d007      	beq.n	8007eb8 <USBD_StdEPReq+0x17e>
 8007ea8:	7bbb      	ldrb	r3, [r7, #14]
 8007eaa:	2b80      	cmp	r3, #128	; 0x80
 8007eac:	d004      	beq.n	8007eb8 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8007eae:	6839      	ldr	r1, [r7, #0]
 8007eb0:	6878      	ldr	r0, [r7, #4]
 8007eb2:	f000 fbd3 	bl	800865c <USBD_CtlError>
                break;
 8007eb6:	e091      	b.n	8007fdc <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007eb8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	da0b      	bge.n	8007ed8 <USBD_StdEPReq+0x19e>
 8007ec0:	7bbb      	ldrb	r3, [r7, #14]
 8007ec2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007ec6:	4613      	mov	r3, r2
 8007ec8:	009b      	lsls	r3, r3, #2
 8007eca:	4413      	add	r3, r2
 8007ecc:	009b      	lsls	r3, r3, #2
 8007ece:	3310      	adds	r3, #16
 8007ed0:	687a      	ldr	r2, [r7, #4]
 8007ed2:	4413      	add	r3, r2
 8007ed4:	3304      	adds	r3, #4
 8007ed6:	e00b      	b.n	8007ef0 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007ed8:	7bbb      	ldrb	r3, [r7, #14]
 8007eda:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007ede:	4613      	mov	r3, r2
 8007ee0:	009b      	lsls	r3, r3, #2
 8007ee2:	4413      	add	r3, r2
 8007ee4:	009b      	lsls	r3, r3, #2
 8007ee6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007eea:	687a      	ldr	r2, [r7, #4]
 8007eec:	4413      	add	r3, r2
 8007eee:	3304      	adds	r3, #4
 8007ef0:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007ef2:	68bb      	ldr	r3, [r7, #8]
 8007ef4:	2200      	movs	r2, #0
 8007ef6:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007ef8:	68bb      	ldr	r3, [r7, #8]
 8007efa:	2202      	movs	r2, #2
 8007efc:	4619      	mov	r1, r3
 8007efe:	6878      	ldr	r0, [r7, #4]
 8007f00:	f000 fc1d 	bl	800873e <USBD_CtlSendData>
              break;
 8007f04:	e06a      	b.n	8007fdc <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007f06:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	da11      	bge.n	8007f32 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007f0e:	7bbb      	ldrb	r3, [r7, #14]
 8007f10:	f003 020f 	and.w	r2, r3, #15
 8007f14:	6879      	ldr	r1, [r7, #4]
 8007f16:	4613      	mov	r3, r2
 8007f18:	009b      	lsls	r3, r3, #2
 8007f1a:	4413      	add	r3, r2
 8007f1c:	009b      	lsls	r3, r3, #2
 8007f1e:	440b      	add	r3, r1
 8007f20:	3324      	adds	r3, #36	; 0x24
 8007f22:	881b      	ldrh	r3, [r3, #0]
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d117      	bne.n	8007f58 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8007f28:	6839      	ldr	r1, [r7, #0]
 8007f2a:	6878      	ldr	r0, [r7, #4]
 8007f2c:	f000 fb96 	bl	800865c <USBD_CtlError>
                  break;
 8007f30:	e054      	b.n	8007fdc <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007f32:	7bbb      	ldrb	r3, [r7, #14]
 8007f34:	f003 020f 	and.w	r2, r3, #15
 8007f38:	6879      	ldr	r1, [r7, #4]
 8007f3a:	4613      	mov	r3, r2
 8007f3c:	009b      	lsls	r3, r3, #2
 8007f3e:	4413      	add	r3, r2
 8007f40:	009b      	lsls	r3, r3, #2
 8007f42:	440b      	add	r3, r1
 8007f44:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007f48:	881b      	ldrh	r3, [r3, #0]
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d104      	bne.n	8007f58 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8007f4e:	6839      	ldr	r1, [r7, #0]
 8007f50:	6878      	ldr	r0, [r7, #4]
 8007f52:	f000 fb83 	bl	800865c <USBD_CtlError>
                  break;
 8007f56:	e041      	b.n	8007fdc <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007f58:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	da0b      	bge.n	8007f78 <USBD_StdEPReq+0x23e>
 8007f60:	7bbb      	ldrb	r3, [r7, #14]
 8007f62:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007f66:	4613      	mov	r3, r2
 8007f68:	009b      	lsls	r3, r3, #2
 8007f6a:	4413      	add	r3, r2
 8007f6c:	009b      	lsls	r3, r3, #2
 8007f6e:	3310      	adds	r3, #16
 8007f70:	687a      	ldr	r2, [r7, #4]
 8007f72:	4413      	add	r3, r2
 8007f74:	3304      	adds	r3, #4
 8007f76:	e00b      	b.n	8007f90 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007f78:	7bbb      	ldrb	r3, [r7, #14]
 8007f7a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007f7e:	4613      	mov	r3, r2
 8007f80:	009b      	lsls	r3, r3, #2
 8007f82:	4413      	add	r3, r2
 8007f84:	009b      	lsls	r3, r3, #2
 8007f86:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007f8a:	687a      	ldr	r2, [r7, #4]
 8007f8c:	4413      	add	r3, r2
 8007f8e:	3304      	adds	r3, #4
 8007f90:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007f92:	7bbb      	ldrb	r3, [r7, #14]
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d002      	beq.n	8007f9e <USBD_StdEPReq+0x264>
 8007f98:	7bbb      	ldrb	r3, [r7, #14]
 8007f9a:	2b80      	cmp	r3, #128	; 0x80
 8007f9c:	d103      	bne.n	8007fa6 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8007f9e:	68bb      	ldr	r3, [r7, #8]
 8007fa0:	2200      	movs	r2, #0
 8007fa2:	601a      	str	r2, [r3, #0]
 8007fa4:	e00e      	b.n	8007fc4 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8007fa6:	7bbb      	ldrb	r3, [r7, #14]
 8007fa8:	4619      	mov	r1, r3
 8007faa:	6878      	ldr	r0, [r7, #4]
 8007fac:	f001 f9c6 	bl	800933c <USBD_LL_IsStallEP>
 8007fb0:	4603      	mov	r3, r0
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d003      	beq.n	8007fbe <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8007fb6:	68bb      	ldr	r3, [r7, #8]
 8007fb8:	2201      	movs	r2, #1
 8007fba:	601a      	str	r2, [r3, #0]
 8007fbc:	e002      	b.n	8007fc4 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8007fbe:	68bb      	ldr	r3, [r7, #8]
 8007fc0:	2200      	movs	r2, #0
 8007fc2:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007fc4:	68bb      	ldr	r3, [r7, #8]
 8007fc6:	2202      	movs	r2, #2
 8007fc8:	4619      	mov	r1, r3
 8007fca:	6878      	ldr	r0, [r7, #4]
 8007fcc:	f000 fbb7 	bl	800873e <USBD_CtlSendData>
              break;
 8007fd0:	e004      	b.n	8007fdc <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8007fd2:	6839      	ldr	r1, [r7, #0]
 8007fd4:	6878      	ldr	r0, [r7, #4]
 8007fd6:	f000 fb41 	bl	800865c <USBD_CtlError>
              break;
 8007fda:	bf00      	nop
          }
          break;
 8007fdc:	e004      	b.n	8007fe8 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8007fde:	6839      	ldr	r1, [r7, #0]
 8007fe0:	6878      	ldr	r0, [r7, #4]
 8007fe2:	f000 fb3b 	bl	800865c <USBD_CtlError>
          break;
 8007fe6:	bf00      	nop
      }
      break;
 8007fe8:	e004      	b.n	8007ff4 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8007fea:	6839      	ldr	r1, [r7, #0]
 8007fec:	6878      	ldr	r0, [r7, #4]
 8007fee:	f000 fb35 	bl	800865c <USBD_CtlError>
      break;
 8007ff2:	bf00      	nop
  }

  return ret;
 8007ff4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ff6:	4618      	mov	r0, r3
 8007ff8:	3710      	adds	r7, #16
 8007ffa:	46bd      	mov	sp, r7
 8007ffc:	bd80      	pop	{r7, pc}
	...

08008000 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008000:	b580      	push	{r7, lr}
 8008002:	b084      	sub	sp, #16
 8008004:	af00      	add	r7, sp, #0
 8008006:	6078      	str	r0, [r7, #4]
 8008008:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800800a:	2300      	movs	r3, #0
 800800c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800800e:	2300      	movs	r3, #0
 8008010:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008012:	2300      	movs	r3, #0
 8008014:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008016:	683b      	ldr	r3, [r7, #0]
 8008018:	885b      	ldrh	r3, [r3, #2]
 800801a:	0a1b      	lsrs	r3, r3, #8
 800801c:	b29b      	uxth	r3, r3
 800801e:	3b01      	subs	r3, #1
 8008020:	2b06      	cmp	r3, #6
 8008022:	f200 8128 	bhi.w	8008276 <USBD_GetDescriptor+0x276>
 8008026:	a201      	add	r2, pc, #4	; (adr r2, 800802c <USBD_GetDescriptor+0x2c>)
 8008028:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800802c:	08008049 	.word	0x08008049
 8008030:	08008061 	.word	0x08008061
 8008034:	080080a1 	.word	0x080080a1
 8008038:	08008277 	.word	0x08008277
 800803c:	08008277 	.word	0x08008277
 8008040:	08008217 	.word	0x08008217
 8008044:	08008243 	.word	0x08008243
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	687a      	ldr	r2, [r7, #4]
 8008052:	7c12      	ldrb	r2, [r2, #16]
 8008054:	f107 0108 	add.w	r1, r7, #8
 8008058:	4610      	mov	r0, r2
 800805a:	4798      	blx	r3
 800805c:	60f8      	str	r0, [r7, #12]
      break;
 800805e:	e112      	b.n	8008286 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	7c1b      	ldrb	r3, [r3, #16]
 8008064:	2b00      	cmp	r3, #0
 8008066:	d10d      	bne.n	8008084 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800806e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008070:	f107 0208 	add.w	r2, r7, #8
 8008074:	4610      	mov	r0, r2
 8008076:	4798      	blx	r3
 8008078:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	3301      	adds	r3, #1
 800807e:	2202      	movs	r2, #2
 8008080:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008082:	e100      	b.n	8008286 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800808a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800808c:	f107 0208 	add.w	r2, r7, #8
 8008090:	4610      	mov	r0, r2
 8008092:	4798      	blx	r3
 8008094:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	3301      	adds	r3, #1
 800809a:	2202      	movs	r2, #2
 800809c:	701a      	strb	r2, [r3, #0]
      break;
 800809e:	e0f2      	b.n	8008286 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80080a0:	683b      	ldr	r3, [r7, #0]
 80080a2:	885b      	ldrh	r3, [r3, #2]
 80080a4:	b2db      	uxtb	r3, r3
 80080a6:	2b05      	cmp	r3, #5
 80080a8:	f200 80ac 	bhi.w	8008204 <USBD_GetDescriptor+0x204>
 80080ac:	a201      	add	r2, pc, #4	; (adr r2, 80080b4 <USBD_GetDescriptor+0xb4>)
 80080ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080b2:	bf00      	nop
 80080b4:	080080cd 	.word	0x080080cd
 80080b8:	08008101 	.word	0x08008101
 80080bc:	08008135 	.word	0x08008135
 80080c0:	08008169 	.word	0x08008169
 80080c4:	0800819d 	.word	0x0800819d
 80080c8:	080081d1 	.word	0x080081d1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80080d2:	685b      	ldr	r3, [r3, #4]
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d00b      	beq.n	80080f0 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80080de:	685b      	ldr	r3, [r3, #4]
 80080e0:	687a      	ldr	r2, [r7, #4]
 80080e2:	7c12      	ldrb	r2, [r2, #16]
 80080e4:	f107 0108 	add.w	r1, r7, #8
 80080e8:	4610      	mov	r0, r2
 80080ea:	4798      	blx	r3
 80080ec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80080ee:	e091      	b.n	8008214 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80080f0:	6839      	ldr	r1, [r7, #0]
 80080f2:	6878      	ldr	r0, [r7, #4]
 80080f4:	f000 fab2 	bl	800865c <USBD_CtlError>
            err++;
 80080f8:	7afb      	ldrb	r3, [r7, #11]
 80080fa:	3301      	adds	r3, #1
 80080fc:	72fb      	strb	r3, [r7, #11]
          break;
 80080fe:	e089      	b.n	8008214 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008106:	689b      	ldr	r3, [r3, #8]
 8008108:	2b00      	cmp	r3, #0
 800810a:	d00b      	beq.n	8008124 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008112:	689b      	ldr	r3, [r3, #8]
 8008114:	687a      	ldr	r2, [r7, #4]
 8008116:	7c12      	ldrb	r2, [r2, #16]
 8008118:	f107 0108 	add.w	r1, r7, #8
 800811c:	4610      	mov	r0, r2
 800811e:	4798      	blx	r3
 8008120:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008122:	e077      	b.n	8008214 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008124:	6839      	ldr	r1, [r7, #0]
 8008126:	6878      	ldr	r0, [r7, #4]
 8008128:	f000 fa98 	bl	800865c <USBD_CtlError>
            err++;
 800812c:	7afb      	ldrb	r3, [r7, #11]
 800812e:	3301      	adds	r3, #1
 8008130:	72fb      	strb	r3, [r7, #11]
          break;
 8008132:	e06f      	b.n	8008214 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800813a:	68db      	ldr	r3, [r3, #12]
 800813c:	2b00      	cmp	r3, #0
 800813e:	d00b      	beq.n	8008158 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008146:	68db      	ldr	r3, [r3, #12]
 8008148:	687a      	ldr	r2, [r7, #4]
 800814a:	7c12      	ldrb	r2, [r2, #16]
 800814c:	f107 0108 	add.w	r1, r7, #8
 8008150:	4610      	mov	r0, r2
 8008152:	4798      	blx	r3
 8008154:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008156:	e05d      	b.n	8008214 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008158:	6839      	ldr	r1, [r7, #0]
 800815a:	6878      	ldr	r0, [r7, #4]
 800815c:	f000 fa7e 	bl	800865c <USBD_CtlError>
            err++;
 8008160:	7afb      	ldrb	r3, [r7, #11]
 8008162:	3301      	adds	r3, #1
 8008164:	72fb      	strb	r3, [r7, #11]
          break;
 8008166:	e055      	b.n	8008214 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800816e:	691b      	ldr	r3, [r3, #16]
 8008170:	2b00      	cmp	r3, #0
 8008172:	d00b      	beq.n	800818c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800817a:	691b      	ldr	r3, [r3, #16]
 800817c:	687a      	ldr	r2, [r7, #4]
 800817e:	7c12      	ldrb	r2, [r2, #16]
 8008180:	f107 0108 	add.w	r1, r7, #8
 8008184:	4610      	mov	r0, r2
 8008186:	4798      	blx	r3
 8008188:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800818a:	e043      	b.n	8008214 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800818c:	6839      	ldr	r1, [r7, #0]
 800818e:	6878      	ldr	r0, [r7, #4]
 8008190:	f000 fa64 	bl	800865c <USBD_CtlError>
            err++;
 8008194:	7afb      	ldrb	r3, [r7, #11]
 8008196:	3301      	adds	r3, #1
 8008198:	72fb      	strb	r3, [r7, #11]
          break;
 800819a:	e03b      	b.n	8008214 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80081a2:	695b      	ldr	r3, [r3, #20]
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d00b      	beq.n	80081c0 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80081ae:	695b      	ldr	r3, [r3, #20]
 80081b0:	687a      	ldr	r2, [r7, #4]
 80081b2:	7c12      	ldrb	r2, [r2, #16]
 80081b4:	f107 0108 	add.w	r1, r7, #8
 80081b8:	4610      	mov	r0, r2
 80081ba:	4798      	blx	r3
 80081bc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80081be:	e029      	b.n	8008214 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80081c0:	6839      	ldr	r1, [r7, #0]
 80081c2:	6878      	ldr	r0, [r7, #4]
 80081c4:	f000 fa4a 	bl	800865c <USBD_CtlError>
            err++;
 80081c8:	7afb      	ldrb	r3, [r7, #11]
 80081ca:	3301      	adds	r3, #1
 80081cc:	72fb      	strb	r3, [r7, #11]
          break;
 80081ce:	e021      	b.n	8008214 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80081d6:	699b      	ldr	r3, [r3, #24]
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d00b      	beq.n	80081f4 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80081e2:	699b      	ldr	r3, [r3, #24]
 80081e4:	687a      	ldr	r2, [r7, #4]
 80081e6:	7c12      	ldrb	r2, [r2, #16]
 80081e8:	f107 0108 	add.w	r1, r7, #8
 80081ec:	4610      	mov	r0, r2
 80081ee:	4798      	blx	r3
 80081f0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80081f2:	e00f      	b.n	8008214 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80081f4:	6839      	ldr	r1, [r7, #0]
 80081f6:	6878      	ldr	r0, [r7, #4]
 80081f8:	f000 fa30 	bl	800865c <USBD_CtlError>
            err++;
 80081fc:	7afb      	ldrb	r3, [r7, #11]
 80081fe:	3301      	adds	r3, #1
 8008200:	72fb      	strb	r3, [r7, #11]
          break;
 8008202:	e007      	b.n	8008214 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8008204:	6839      	ldr	r1, [r7, #0]
 8008206:	6878      	ldr	r0, [r7, #4]
 8008208:	f000 fa28 	bl	800865c <USBD_CtlError>
          err++;
 800820c:	7afb      	ldrb	r3, [r7, #11]
 800820e:	3301      	adds	r3, #1
 8008210:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8008212:	bf00      	nop
      }
      break;
 8008214:	e037      	b.n	8008286 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	7c1b      	ldrb	r3, [r3, #16]
 800821a:	2b00      	cmp	r3, #0
 800821c:	d109      	bne.n	8008232 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008224:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008226:	f107 0208 	add.w	r2, r7, #8
 800822a:	4610      	mov	r0, r2
 800822c:	4798      	blx	r3
 800822e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008230:	e029      	b.n	8008286 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008232:	6839      	ldr	r1, [r7, #0]
 8008234:	6878      	ldr	r0, [r7, #4]
 8008236:	f000 fa11 	bl	800865c <USBD_CtlError>
        err++;
 800823a:	7afb      	ldrb	r3, [r7, #11]
 800823c:	3301      	adds	r3, #1
 800823e:	72fb      	strb	r3, [r7, #11]
      break;
 8008240:	e021      	b.n	8008286 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	7c1b      	ldrb	r3, [r3, #16]
 8008246:	2b00      	cmp	r3, #0
 8008248:	d10d      	bne.n	8008266 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008252:	f107 0208 	add.w	r2, r7, #8
 8008256:	4610      	mov	r0, r2
 8008258:	4798      	blx	r3
 800825a:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	3301      	adds	r3, #1
 8008260:	2207      	movs	r2, #7
 8008262:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008264:	e00f      	b.n	8008286 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008266:	6839      	ldr	r1, [r7, #0]
 8008268:	6878      	ldr	r0, [r7, #4]
 800826a:	f000 f9f7 	bl	800865c <USBD_CtlError>
        err++;
 800826e:	7afb      	ldrb	r3, [r7, #11]
 8008270:	3301      	adds	r3, #1
 8008272:	72fb      	strb	r3, [r7, #11]
      break;
 8008274:	e007      	b.n	8008286 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8008276:	6839      	ldr	r1, [r7, #0]
 8008278:	6878      	ldr	r0, [r7, #4]
 800827a:	f000 f9ef 	bl	800865c <USBD_CtlError>
      err++;
 800827e:	7afb      	ldrb	r3, [r7, #11]
 8008280:	3301      	adds	r3, #1
 8008282:	72fb      	strb	r3, [r7, #11]
      break;
 8008284:	bf00      	nop
  }

  if (err != 0U)
 8008286:	7afb      	ldrb	r3, [r7, #11]
 8008288:	2b00      	cmp	r3, #0
 800828a:	d11e      	bne.n	80082ca <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800828c:	683b      	ldr	r3, [r7, #0]
 800828e:	88db      	ldrh	r3, [r3, #6]
 8008290:	2b00      	cmp	r3, #0
 8008292:	d016      	beq.n	80082c2 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8008294:	893b      	ldrh	r3, [r7, #8]
 8008296:	2b00      	cmp	r3, #0
 8008298:	d00e      	beq.n	80082b8 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800829a:	683b      	ldr	r3, [r7, #0]
 800829c:	88da      	ldrh	r2, [r3, #6]
 800829e:	893b      	ldrh	r3, [r7, #8]
 80082a0:	4293      	cmp	r3, r2
 80082a2:	bf28      	it	cs
 80082a4:	4613      	movcs	r3, r2
 80082a6:	b29b      	uxth	r3, r3
 80082a8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80082aa:	893b      	ldrh	r3, [r7, #8]
 80082ac:	461a      	mov	r2, r3
 80082ae:	68f9      	ldr	r1, [r7, #12]
 80082b0:	6878      	ldr	r0, [r7, #4]
 80082b2:	f000 fa44 	bl	800873e <USBD_CtlSendData>
 80082b6:	e009      	b.n	80082cc <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80082b8:	6839      	ldr	r1, [r7, #0]
 80082ba:	6878      	ldr	r0, [r7, #4]
 80082bc:	f000 f9ce 	bl	800865c <USBD_CtlError>
 80082c0:	e004      	b.n	80082cc <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80082c2:	6878      	ldr	r0, [r7, #4]
 80082c4:	f000 fa95 	bl	80087f2 <USBD_CtlSendStatus>
 80082c8:	e000      	b.n	80082cc <USBD_GetDescriptor+0x2cc>
    return;
 80082ca:	bf00      	nop
  }
}
 80082cc:	3710      	adds	r7, #16
 80082ce:	46bd      	mov	sp, r7
 80082d0:	bd80      	pop	{r7, pc}
 80082d2:	bf00      	nop

080082d4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80082d4:	b580      	push	{r7, lr}
 80082d6:	b084      	sub	sp, #16
 80082d8:	af00      	add	r7, sp, #0
 80082da:	6078      	str	r0, [r7, #4]
 80082dc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80082de:	683b      	ldr	r3, [r7, #0]
 80082e0:	889b      	ldrh	r3, [r3, #4]
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d131      	bne.n	800834a <USBD_SetAddress+0x76>
 80082e6:	683b      	ldr	r3, [r7, #0]
 80082e8:	88db      	ldrh	r3, [r3, #6]
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d12d      	bne.n	800834a <USBD_SetAddress+0x76>
 80082ee:	683b      	ldr	r3, [r7, #0]
 80082f0:	885b      	ldrh	r3, [r3, #2]
 80082f2:	2b7f      	cmp	r3, #127	; 0x7f
 80082f4:	d829      	bhi.n	800834a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80082f6:	683b      	ldr	r3, [r7, #0]
 80082f8:	885b      	ldrh	r3, [r3, #2]
 80082fa:	b2db      	uxtb	r3, r3
 80082fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008300:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008308:	b2db      	uxtb	r3, r3
 800830a:	2b03      	cmp	r3, #3
 800830c:	d104      	bne.n	8008318 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800830e:	6839      	ldr	r1, [r7, #0]
 8008310:	6878      	ldr	r0, [r7, #4]
 8008312:	f000 f9a3 	bl	800865c <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008316:	e01d      	b.n	8008354 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	7bfa      	ldrb	r2, [r7, #15]
 800831c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008320:	7bfb      	ldrb	r3, [r7, #15]
 8008322:	4619      	mov	r1, r3
 8008324:	6878      	ldr	r0, [r7, #4]
 8008326:	f001 f835 	bl	8009394 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800832a:	6878      	ldr	r0, [r7, #4]
 800832c:	f000 fa61 	bl	80087f2 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008330:	7bfb      	ldrb	r3, [r7, #15]
 8008332:	2b00      	cmp	r3, #0
 8008334:	d004      	beq.n	8008340 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	2202      	movs	r2, #2
 800833a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800833e:	e009      	b.n	8008354 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	2201      	movs	r2, #1
 8008344:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008348:	e004      	b.n	8008354 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800834a:	6839      	ldr	r1, [r7, #0]
 800834c:	6878      	ldr	r0, [r7, #4]
 800834e:	f000 f985 	bl	800865c <USBD_CtlError>
  }
}
 8008352:	bf00      	nop
 8008354:	bf00      	nop
 8008356:	3710      	adds	r7, #16
 8008358:	46bd      	mov	sp, r7
 800835a:	bd80      	pop	{r7, pc}

0800835c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800835c:	b580      	push	{r7, lr}
 800835e:	b084      	sub	sp, #16
 8008360:	af00      	add	r7, sp, #0
 8008362:	6078      	str	r0, [r7, #4]
 8008364:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008366:	2300      	movs	r3, #0
 8008368:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800836a:	683b      	ldr	r3, [r7, #0]
 800836c:	885b      	ldrh	r3, [r3, #2]
 800836e:	b2da      	uxtb	r2, r3
 8008370:	4b4c      	ldr	r3, [pc, #304]	; (80084a4 <USBD_SetConfig+0x148>)
 8008372:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008374:	4b4b      	ldr	r3, [pc, #300]	; (80084a4 <USBD_SetConfig+0x148>)
 8008376:	781b      	ldrb	r3, [r3, #0]
 8008378:	2b01      	cmp	r3, #1
 800837a:	d905      	bls.n	8008388 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800837c:	6839      	ldr	r1, [r7, #0]
 800837e:	6878      	ldr	r0, [r7, #4]
 8008380:	f000 f96c 	bl	800865c <USBD_CtlError>
    return USBD_FAIL;
 8008384:	2303      	movs	r3, #3
 8008386:	e088      	b.n	800849a <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800838e:	b2db      	uxtb	r3, r3
 8008390:	2b02      	cmp	r3, #2
 8008392:	d002      	beq.n	800839a <USBD_SetConfig+0x3e>
 8008394:	2b03      	cmp	r3, #3
 8008396:	d025      	beq.n	80083e4 <USBD_SetConfig+0x88>
 8008398:	e071      	b.n	800847e <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800839a:	4b42      	ldr	r3, [pc, #264]	; (80084a4 <USBD_SetConfig+0x148>)
 800839c:	781b      	ldrb	r3, [r3, #0]
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d01c      	beq.n	80083dc <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 80083a2:	4b40      	ldr	r3, [pc, #256]	; (80084a4 <USBD_SetConfig+0x148>)
 80083a4:	781b      	ldrb	r3, [r3, #0]
 80083a6:	461a      	mov	r2, r3
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80083ac:	4b3d      	ldr	r3, [pc, #244]	; (80084a4 <USBD_SetConfig+0x148>)
 80083ae:	781b      	ldrb	r3, [r3, #0]
 80083b0:	4619      	mov	r1, r3
 80083b2:	6878      	ldr	r0, [r7, #4]
 80083b4:	f7ff f948 	bl	8007648 <USBD_SetClassConfig>
 80083b8:	4603      	mov	r3, r0
 80083ba:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80083bc:	7bfb      	ldrb	r3, [r7, #15]
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d004      	beq.n	80083cc <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 80083c2:	6839      	ldr	r1, [r7, #0]
 80083c4:	6878      	ldr	r0, [r7, #4]
 80083c6:	f000 f949 	bl	800865c <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80083ca:	e065      	b.n	8008498 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 80083cc:	6878      	ldr	r0, [r7, #4]
 80083ce:	f000 fa10 	bl	80087f2 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	2203      	movs	r2, #3
 80083d6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80083da:	e05d      	b.n	8008498 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80083dc:	6878      	ldr	r0, [r7, #4]
 80083de:	f000 fa08 	bl	80087f2 <USBD_CtlSendStatus>
      break;
 80083e2:	e059      	b.n	8008498 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80083e4:	4b2f      	ldr	r3, [pc, #188]	; (80084a4 <USBD_SetConfig+0x148>)
 80083e6:	781b      	ldrb	r3, [r3, #0]
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d112      	bne.n	8008412 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	2202      	movs	r2, #2
 80083f0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80083f4:	4b2b      	ldr	r3, [pc, #172]	; (80084a4 <USBD_SetConfig+0x148>)
 80083f6:	781b      	ldrb	r3, [r3, #0]
 80083f8:	461a      	mov	r2, r3
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80083fe:	4b29      	ldr	r3, [pc, #164]	; (80084a4 <USBD_SetConfig+0x148>)
 8008400:	781b      	ldrb	r3, [r3, #0]
 8008402:	4619      	mov	r1, r3
 8008404:	6878      	ldr	r0, [r7, #4]
 8008406:	f7ff f93b 	bl	8007680 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800840a:	6878      	ldr	r0, [r7, #4]
 800840c:	f000 f9f1 	bl	80087f2 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008410:	e042      	b.n	8008498 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8008412:	4b24      	ldr	r3, [pc, #144]	; (80084a4 <USBD_SetConfig+0x148>)
 8008414:	781b      	ldrb	r3, [r3, #0]
 8008416:	461a      	mov	r2, r3
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	685b      	ldr	r3, [r3, #4]
 800841c:	429a      	cmp	r2, r3
 800841e:	d02a      	beq.n	8008476 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	685b      	ldr	r3, [r3, #4]
 8008424:	b2db      	uxtb	r3, r3
 8008426:	4619      	mov	r1, r3
 8008428:	6878      	ldr	r0, [r7, #4]
 800842a:	f7ff f929 	bl	8007680 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800842e:	4b1d      	ldr	r3, [pc, #116]	; (80084a4 <USBD_SetConfig+0x148>)
 8008430:	781b      	ldrb	r3, [r3, #0]
 8008432:	461a      	mov	r2, r3
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008438:	4b1a      	ldr	r3, [pc, #104]	; (80084a4 <USBD_SetConfig+0x148>)
 800843a:	781b      	ldrb	r3, [r3, #0]
 800843c:	4619      	mov	r1, r3
 800843e:	6878      	ldr	r0, [r7, #4]
 8008440:	f7ff f902 	bl	8007648 <USBD_SetClassConfig>
 8008444:	4603      	mov	r3, r0
 8008446:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8008448:	7bfb      	ldrb	r3, [r7, #15]
 800844a:	2b00      	cmp	r3, #0
 800844c:	d00f      	beq.n	800846e <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800844e:	6839      	ldr	r1, [r7, #0]
 8008450:	6878      	ldr	r0, [r7, #4]
 8008452:	f000 f903 	bl	800865c <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	685b      	ldr	r3, [r3, #4]
 800845a:	b2db      	uxtb	r3, r3
 800845c:	4619      	mov	r1, r3
 800845e:	6878      	ldr	r0, [r7, #4]
 8008460:	f7ff f90e 	bl	8007680 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	2202      	movs	r2, #2
 8008468:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800846c:	e014      	b.n	8008498 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800846e:	6878      	ldr	r0, [r7, #4]
 8008470:	f000 f9bf 	bl	80087f2 <USBD_CtlSendStatus>
      break;
 8008474:	e010      	b.n	8008498 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8008476:	6878      	ldr	r0, [r7, #4]
 8008478:	f000 f9bb 	bl	80087f2 <USBD_CtlSendStatus>
      break;
 800847c:	e00c      	b.n	8008498 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800847e:	6839      	ldr	r1, [r7, #0]
 8008480:	6878      	ldr	r0, [r7, #4]
 8008482:	f000 f8eb 	bl	800865c <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008486:	4b07      	ldr	r3, [pc, #28]	; (80084a4 <USBD_SetConfig+0x148>)
 8008488:	781b      	ldrb	r3, [r3, #0]
 800848a:	4619      	mov	r1, r3
 800848c:	6878      	ldr	r0, [r7, #4]
 800848e:	f7ff f8f7 	bl	8007680 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8008492:	2303      	movs	r3, #3
 8008494:	73fb      	strb	r3, [r7, #15]
      break;
 8008496:	bf00      	nop
  }

  return ret;
 8008498:	7bfb      	ldrb	r3, [r7, #15]
}
 800849a:	4618      	mov	r0, r3
 800849c:	3710      	adds	r7, #16
 800849e:	46bd      	mov	sp, r7
 80084a0:	bd80      	pop	{r7, pc}
 80084a2:	bf00      	nop
 80084a4:	2000041c 	.word	0x2000041c

080084a8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80084a8:	b580      	push	{r7, lr}
 80084aa:	b082      	sub	sp, #8
 80084ac:	af00      	add	r7, sp, #0
 80084ae:	6078      	str	r0, [r7, #4]
 80084b0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80084b2:	683b      	ldr	r3, [r7, #0]
 80084b4:	88db      	ldrh	r3, [r3, #6]
 80084b6:	2b01      	cmp	r3, #1
 80084b8:	d004      	beq.n	80084c4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80084ba:	6839      	ldr	r1, [r7, #0]
 80084bc:	6878      	ldr	r0, [r7, #4]
 80084be:	f000 f8cd 	bl	800865c <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80084c2:	e023      	b.n	800850c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80084ca:	b2db      	uxtb	r3, r3
 80084cc:	2b02      	cmp	r3, #2
 80084ce:	dc02      	bgt.n	80084d6 <USBD_GetConfig+0x2e>
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	dc03      	bgt.n	80084dc <USBD_GetConfig+0x34>
 80084d4:	e015      	b.n	8008502 <USBD_GetConfig+0x5a>
 80084d6:	2b03      	cmp	r3, #3
 80084d8:	d00b      	beq.n	80084f2 <USBD_GetConfig+0x4a>
 80084da:	e012      	b.n	8008502 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	2200      	movs	r2, #0
 80084e0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	3308      	adds	r3, #8
 80084e6:	2201      	movs	r2, #1
 80084e8:	4619      	mov	r1, r3
 80084ea:	6878      	ldr	r0, [r7, #4]
 80084ec:	f000 f927 	bl	800873e <USBD_CtlSendData>
        break;
 80084f0:	e00c      	b.n	800850c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	3304      	adds	r3, #4
 80084f6:	2201      	movs	r2, #1
 80084f8:	4619      	mov	r1, r3
 80084fa:	6878      	ldr	r0, [r7, #4]
 80084fc:	f000 f91f 	bl	800873e <USBD_CtlSendData>
        break;
 8008500:	e004      	b.n	800850c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8008502:	6839      	ldr	r1, [r7, #0]
 8008504:	6878      	ldr	r0, [r7, #4]
 8008506:	f000 f8a9 	bl	800865c <USBD_CtlError>
        break;
 800850a:	bf00      	nop
}
 800850c:	bf00      	nop
 800850e:	3708      	adds	r7, #8
 8008510:	46bd      	mov	sp, r7
 8008512:	bd80      	pop	{r7, pc}

08008514 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008514:	b580      	push	{r7, lr}
 8008516:	b082      	sub	sp, #8
 8008518:	af00      	add	r7, sp, #0
 800851a:	6078      	str	r0, [r7, #4]
 800851c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008524:	b2db      	uxtb	r3, r3
 8008526:	3b01      	subs	r3, #1
 8008528:	2b02      	cmp	r3, #2
 800852a:	d81e      	bhi.n	800856a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800852c:	683b      	ldr	r3, [r7, #0]
 800852e:	88db      	ldrh	r3, [r3, #6]
 8008530:	2b02      	cmp	r3, #2
 8008532:	d004      	beq.n	800853e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8008534:	6839      	ldr	r1, [r7, #0]
 8008536:	6878      	ldr	r0, [r7, #4]
 8008538:	f000 f890 	bl	800865c <USBD_CtlError>
        break;
 800853c:	e01a      	b.n	8008574 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	2201      	movs	r2, #1
 8008542:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800854a:	2b00      	cmp	r3, #0
 800854c:	d005      	beq.n	800855a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	68db      	ldr	r3, [r3, #12]
 8008552:	f043 0202 	orr.w	r2, r3, #2
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	330c      	adds	r3, #12
 800855e:	2202      	movs	r2, #2
 8008560:	4619      	mov	r1, r3
 8008562:	6878      	ldr	r0, [r7, #4]
 8008564:	f000 f8eb 	bl	800873e <USBD_CtlSendData>
      break;
 8008568:	e004      	b.n	8008574 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800856a:	6839      	ldr	r1, [r7, #0]
 800856c:	6878      	ldr	r0, [r7, #4]
 800856e:	f000 f875 	bl	800865c <USBD_CtlError>
      break;
 8008572:	bf00      	nop
  }
}
 8008574:	bf00      	nop
 8008576:	3708      	adds	r7, #8
 8008578:	46bd      	mov	sp, r7
 800857a:	bd80      	pop	{r7, pc}

0800857c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800857c:	b580      	push	{r7, lr}
 800857e:	b082      	sub	sp, #8
 8008580:	af00      	add	r7, sp, #0
 8008582:	6078      	str	r0, [r7, #4]
 8008584:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008586:	683b      	ldr	r3, [r7, #0]
 8008588:	885b      	ldrh	r3, [r3, #2]
 800858a:	2b01      	cmp	r3, #1
 800858c:	d106      	bne.n	800859c <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	2201      	movs	r2, #1
 8008592:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8008596:	6878      	ldr	r0, [r7, #4]
 8008598:	f000 f92b 	bl	80087f2 <USBD_CtlSendStatus>
  }
}
 800859c:	bf00      	nop
 800859e:	3708      	adds	r7, #8
 80085a0:	46bd      	mov	sp, r7
 80085a2:	bd80      	pop	{r7, pc}

080085a4 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80085a4:	b580      	push	{r7, lr}
 80085a6:	b082      	sub	sp, #8
 80085a8:	af00      	add	r7, sp, #0
 80085aa:	6078      	str	r0, [r7, #4]
 80085ac:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80085b4:	b2db      	uxtb	r3, r3
 80085b6:	3b01      	subs	r3, #1
 80085b8:	2b02      	cmp	r3, #2
 80085ba:	d80b      	bhi.n	80085d4 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80085bc:	683b      	ldr	r3, [r7, #0]
 80085be:	885b      	ldrh	r3, [r3, #2]
 80085c0:	2b01      	cmp	r3, #1
 80085c2:	d10c      	bne.n	80085de <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	2200      	movs	r2, #0
 80085c8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80085cc:	6878      	ldr	r0, [r7, #4]
 80085ce:	f000 f910 	bl	80087f2 <USBD_CtlSendStatus>
      }
      break;
 80085d2:	e004      	b.n	80085de <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80085d4:	6839      	ldr	r1, [r7, #0]
 80085d6:	6878      	ldr	r0, [r7, #4]
 80085d8:	f000 f840 	bl	800865c <USBD_CtlError>
      break;
 80085dc:	e000      	b.n	80085e0 <USBD_ClrFeature+0x3c>
      break;
 80085de:	bf00      	nop
  }
}
 80085e0:	bf00      	nop
 80085e2:	3708      	adds	r7, #8
 80085e4:	46bd      	mov	sp, r7
 80085e6:	bd80      	pop	{r7, pc}

080085e8 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80085e8:	b580      	push	{r7, lr}
 80085ea:	b084      	sub	sp, #16
 80085ec:	af00      	add	r7, sp, #0
 80085ee:	6078      	str	r0, [r7, #4]
 80085f0:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80085f2:	683b      	ldr	r3, [r7, #0]
 80085f4:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	781a      	ldrb	r2, [r3, #0]
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	3301      	adds	r3, #1
 8008602:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	781a      	ldrb	r2, [r3, #0]
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	3301      	adds	r3, #1
 8008610:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008612:	68f8      	ldr	r0, [r7, #12]
 8008614:	f7ff fabb 	bl	8007b8e <SWAPBYTE>
 8008618:	4603      	mov	r3, r0
 800861a:	461a      	mov	r2, r3
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	3301      	adds	r3, #1
 8008624:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	3301      	adds	r3, #1
 800862a:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800862c:	68f8      	ldr	r0, [r7, #12]
 800862e:	f7ff faae 	bl	8007b8e <SWAPBYTE>
 8008632:	4603      	mov	r3, r0
 8008634:	461a      	mov	r2, r3
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	3301      	adds	r3, #1
 800863e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	3301      	adds	r3, #1
 8008644:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008646:	68f8      	ldr	r0, [r7, #12]
 8008648:	f7ff faa1 	bl	8007b8e <SWAPBYTE>
 800864c:	4603      	mov	r3, r0
 800864e:	461a      	mov	r2, r3
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	80da      	strh	r2, [r3, #6]
}
 8008654:	bf00      	nop
 8008656:	3710      	adds	r7, #16
 8008658:	46bd      	mov	sp, r7
 800865a:	bd80      	pop	{r7, pc}

0800865c <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800865c:	b580      	push	{r7, lr}
 800865e:	b082      	sub	sp, #8
 8008660:	af00      	add	r7, sp, #0
 8008662:	6078      	str	r0, [r7, #4]
 8008664:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008666:	2180      	movs	r1, #128	; 0x80
 8008668:	6878      	ldr	r0, [r7, #4]
 800866a:	f000 fe29 	bl	80092c0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800866e:	2100      	movs	r1, #0
 8008670:	6878      	ldr	r0, [r7, #4]
 8008672:	f000 fe25 	bl	80092c0 <USBD_LL_StallEP>
}
 8008676:	bf00      	nop
 8008678:	3708      	adds	r7, #8
 800867a:	46bd      	mov	sp, r7
 800867c:	bd80      	pop	{r7, pc}

0800867e <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800867e:	b580      	push	{r7, lr}
 8008680:	b086      	sub	sp, #24
 8008682:	af00      	add	r7, sp, #0
 8008684:	60f8      	str	r0, [r7, #12]
 8008686:	60b9      	str	r1, [r7, #8]
 8008688:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800868a:	2300      	movs	r3, #0
 800868c:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	2b00      	cmp	r3, #0
 8008692:	d036      	beq.n	8008702 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8008698:	6938      	ldr	r0, [r7, #16]
 800869a:	f000 f836 	bl	800870a <USBD_GetLen>
 800869e:	4603      	mov	r3, r0
 80086a0:	3301      	adds	r3, #1
 80086a2:	b29b      	uxth	r3, r3
 80086a4:	005b      	lsls	r3, r3, #1
 80086a6:	b29a      	uxth	r2, r3
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80086ac:	7dfb      	ldrb	r3, [r7, #23]
 80086ae:	68ba      	ldr	r2, [r7, #8]
 80086b0:	4413      	add	r3, r2
 80086b2:	687a      	ldr	r2, [r7, #4]
 80086b4:	7812      	ldrb	r2, [r2, #0]
 80086b6:	701a      	strb	r2, [r3, #0]
  idx++;
 80086b8:	7dfb      	ldrb	r3, [r7, #23]
 80086ba:	3301      	adds	r3, #1
 80086bc:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80086be:	7dfb      	ldrb	r3, [r7, #23]
 80086c0:	68ba      	ldr	r2, [r7, #8]
 80086c2:	4413      	add	r3, r2
 80086c4:	2203      	movs	r2, #3
 80086c6:	701a      	strb	r2, [r3, #0]
  idx++;
 80086c8:	7dfb      	ldrb	r3, [r7, #23]
 80086ca:	3301      	adds	r3, #1
 80086cc:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80086ce:	e013      	b.n	80086f8 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80086d0:	7dfb      	ldrb	r3, [r7, #23]
 80086d2:	68ba      	ldr	r2, [r7, #8]
 80086d4:	4413      	add	r3, r2
 80086d6:	693a      	ldr	r2, [r7, #16]
 80086d8:	7812      	ldrb	r2, [r2, #0]
 80086da:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80086dc:	693b      	ldr	r3, [r7, #16]
 80086de:	3301      	adds	r3, #1
 80086e0:	613b      	str	r3, [r7, #16]
    idx++;
 80086e2:	7dfb      	ldrb	r3, [r7, #23]
 80086e4:	3301      	adds	r3, #1
 80086e6:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80086e8:	7dfb      	ldrb	r3, [r7, #23]
 80086ea:	68ba      	ldr	r2, [r7, #8]
 80086ec:	4413      	add	r3, r2
 80086ee:	2200      	movs	r2, #0
 80086f0:	701a      	strb	r2, [r3, #0]
    idx++;
 80086f2:	7dfb      	ldrb	r3, [r7, #23]
 80086f4:	3301      	adds	r3, #1
 80086f6:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80086f8:	693b      	ldr	r3, [r7, #16]
 80086fa:	781b      	ldrb	r3, [r3, #0]
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d1e7      	bne.n	80086d0 <USBD_GetString+0x52>
 8008700:	e000      	b.n	8008704 <USBD_GetString+0x86>
    return;
 8008702:	bf00      	nop
  }
}
 8008704:	3718      	adds	r7, #24
 8008706:	46bd      	mov	sp, r7
 8008708:	bd80      	pop	{r7, pc}

0800870a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800870a:	b480      	push	{r7}
 800870c:	b085      	sub	sp, #20
 800870e:	af00      	add	r7, sp, #0
 8008710:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008712:	2300      	movs	r3, #0
 8008714:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800871a:	e005      	b.n	8008728 <USBD_GetLen+0x1e>
  {
    len++;
 800871c:	7bfb      	ldrb	r3, [r7, #15]
 800871e:	3301      	adds	r3, #1
 8008720:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008722:	68bb      	ldr	r3, [r7, #8]
 8008724:	3301      	adds	r3, #1
 8008726:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008728:	68bb      	ldr	r3, [r7, #8]
 800872a:	781b      	ldrb	r3, [r3, #0]
 800872c:	2b00      	cmp	r3, #0
 800872e:	d1f5      	bne.n	800871c <USBD_GetLen+0x12>
  }

  return len;
 8008730:	7bfb      	ldrb	r3, [r7, #15]
}
 8008732:	4618      	mov	r0, r3
 8008734:	3714      	adds	r7, #20
 8008736:	46bd      	mov	sp, r7
 8008738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800873c:	4770      	bx	lr

0800873e <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800873e:	b580      	push	{r7, lr}
 8008740:	b084      	sub	sp, #16
 8008742:	af00      	add	r7, sp, #0
 8008744:	60f8      	str	r0, [r7, #12]
 8008746:	60b9      	str	r1, [r7, #8]
 8008748:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	2202      	movs	r2, #2
 800874e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	687a      	ldr	r2, [r7, #4]
 8008756:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	687a      	ldr	r2, [r7, #4]
 800875c:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	68ba      	ldr	r2, [r7, #8]
 8008762:	2100      	movs	r1, #0
 8008764:	68f8      	ldr	r0, [r7, #12]
 8008766:	f000 fe34 	bl	80093d2 <USBD_LL_Transmit>

  return USBD_OK;
 800876a:	2300      	movs	r3, #0
}
 800876c:	4618      	mov	r0, r3
 800876e:	3710      	adds	r7, #16
 8008770:	46bd      	mov	sp, r7
 8008772:	bd80      	pop	{r7, pc}

08008774 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008774:	b580      	push	{r7, lr}
 8008776:	b084      	sub	sp, #16
 8008778:	af00      	add	r7, sp, #0
 800877a:	60f8      	str	r0, [r7, #12]
 800877c:	60b9      	str	r1, [r7, #8]
 800877e:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	68ba      	ldr	r2, [r7, #8]
 8008784:	2100      	movs	r1, #0
 8008786:	68f8      	ldr	r0, [r7, #12]
 8008788:	f000 fe23 	bl	80093d2 <USBD_LL_Transmit>

  return USBD_OK;
 800878c:	2300      	movs	r3, #0
}
 800878e:	4618      	mov	r0, r3
 8008790:	3710      	adds	r7, #16
 8008792:	46bd      	mov	sp, r7
 8008794:	bd80      	pop	{r7, pc}

08008796 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8008796:	b580      	push	{r7, lr}
 8008798:	b084      	sub	sp, #16
 800879a:	af00      	add	r7, sp, #0
 800879c:	60f8      	str	r0, [r7, #12]
 800879e:	60b9      	str	r1, [r7, #8]
 80087a0:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	2203      	movs	r2, #3
 80087a6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	687a      	ldr	r2, [r7, #4]
 80087ae:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	687a      	ldr	r2, [r7, #4]
 80087b6:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	68ba      	ldr	r2, [r7, #8]
 80087be:	2100      	movs	r1, #0
 80087c0:	68f8      	ldr	r0, [r7, #12]
 80087c2:	f000 fe27 	bl	8009414 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80087c6:	2300      	movs	r3, #0
}
 80087c8:	4618      	mov	r0, r3
 80087ca:	3710      	adds	r7, #16
 80087cc:	46bd      	mov	sp, r7
 80087ce:	bd80      	pop	{r7, pc}

080087d0 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80087d0:	b580      	push	{r7, lr}
 80087d2:	b084      	sub	sp, #16
 80087d4:	af00      	add	r7, sp, #0
 80087d6:	60f8      	str	r0, [r7, #12]
 80087d8:	60b9      	str	r1, [r7, #8]
 80087da:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	68ba      	ldr	r2, [r7, #8]
 80087e0:	2100      	movs	r1, #0
 80087e2:	68f8      	ldr	r0, [r7, #12]
 80087e4:	f000 fe16 	bl	8009414 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80087e8:	2300      	movs	r3, #0
}
 80087ea:	4618      	mov	r0, r3
 80087ec:	3710      	adds	r7, #16
 80087ee:	46bd      	mov	sp, r7
 80087f0:	bd80      	pop	{r7, pc}

080087f2 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80087f2:	b580      	push	{r7, lr}
 80087f4:	b082      	sub	sp, #8
 80087f6:	af00      	add	r7, sp, #0
 80087f8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	2204      	movs	r2, #4
 80087fe:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008802:	2300      	movs	r3, #0
 8008804:	2200      	movs	r2, #0
 8008806:	2100      	movs	r1, #0
 8008808:	6878      	ldr	r0, [r7, #4]
 800880a:	f000 fde2 	bl	80093d2 <USBD_LL_Transmit>

  return USBD_OK;
 800880e:	2300      	movs	r3, #0
}
 8008810:	4618      	mov	r0, r3
 8008812:	3708      	adds	r7, #8
 8008814:	46bd      	mov	sp, r7
 8008816:	bd80      	pop	{r7, pc}

08008818 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008818:	b580      	push	{r7, lr}
 800881a:	b082      	sub	sp, #8
 800881c:	af00      	add	r7, sp, #0
 800881e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	2205      	movs	r2, #5
 8008824:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008828:	2300      	movs	r3, #0
 800882a:	2200      	movs	r2, #0
 800882c:	2100      	movs	r1, #0
 800882e:	6878      	ldr	r0, [r7, #4]
 8008830:	f000 fdf0 	bl	8009414 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008834:	2300      	movs	r3, #0
}
 8008836:	4618      	mov	r0, r3
 8008838:	3708      	adds	r7, #8
 800883a:	46bd      	mov	sp, r7
 800883c:	bd80      	pop	{r7, pc}
	...

08008840 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008840:	b580      	push	{r7, lr}
 8008842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008844:	2200      	movs	r2, #0
 8008846:	4912      	ldr	r1, [pc, #72]	; (8008890 <MX_USB_DEVICE_Init+0x50>)
 8008848:	4812      	ldr	r0, [pc, #72]	; (8008894 <MX_USB_DEVICE_Init+0x54>)
 800884a:	f7fe fe8f 	bl	800756c <USBD_Init>
 800884e:	4603      	mov	r3, r0
 8008850:	2b00      	cmp	r3, #0
 8008852:	d001      	beq.n	8008858 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008854:	f7f7 fff0 	bl	8000838 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008858:	490f      	ldr	r1, [pc, #60]	; (8008898 <MX_USB_DEVICE_Init+0x58>)
 800885a:	480e      	ldr	r0, [pc, #56]	; (8008894 <MX_USB_DEVICE_Init+0x54>)
 800885c:	f7fe feb6 	bl	80075cc <USBD_RegisterClass>
 8008860:	4603      	mov	r3, r0
 8008862:	2b00      	cmp	r3, #0
 8008864:	d001      	beq.n	800886a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008866:	f7f7 ffe7 	bl	8000838 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800886a:	490c      	ldr	r1, [pc, #48]	; (800889c <MX_USB_DEVICE_Init+0x5c>)
 800886c:	4809      	ldr	r0, [pc, #36]	; (8008894 <MX_USB_DEVICE_Init+0x54>)
 800886e:	f7fe fdd7 	bl	8007420 <USBD_CDC_RegisterInterface>
 8008872:	4603      	mov	r3, r0
 8008874:	2b00      	cmp	r3, #0
 8008876:	d001      	beq.n	800887c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008878:	f7f7 ffde 	bl	8000838 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800887c:	4805      	ldr	r0, [pc, #20]	; (8008894 <MX_USB_DEVICE_Init+0x54>)
 800887e:	f7fe fecc 	bl	800761a <USBD_Start>
 8008882:	4603      	mov	r3, r0
 8008884:	2b00      	cmp	r3, #0
 8008886:	d001      	beq.n	800888c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008888:	f7f7 ffd6 	bl	8000838 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800888c:	bf00      	nop
 800888e:	bd80      	pop	{r7, pc}
 8008890:	20000158 	.word	0x20000158
 8008894:	20000420 	.word	0x20000420
 8008898:	2000003c 	.word	0x2000003c
 800889c:	20000144 	.word	0x20000144

080088a0 <cdcAvailable>:
uint32_t  rx_len=512;
uint8_t   rx_buf[512];
bool      rx_full = false;

uint32_t cdcAvailable(void)
{
 80088a0:	b480      	push	{r7}
 80088a2:	b083      	sub	sp, #12
 80088a4:	af00      	add	r7, sp, #0
	uint32_t ret;

	ret = (rx_in - rx_out) % rx_len;
 80088a6:	4b0a      	ldr	r3, [pc, #40]	; (80088d0 <cdcAvailable+0x30>)
 80088a8:	681a      	ldr	r2, [r3, #0]
 80088aa:	4b0a      	ldr	r3, [pc, #40]	; (80088d4 <cdcAvailable+0x34>)
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	1ad3      	subs	r3, r2, r3
 80088b0:	4a09      	ldr	r2, [pc, #36]	; (80088d8 <cdcAvailable+0x38>)
 80088b2:	6812      	ldr	r2, [r2, #0]
 80088b4:	fbb3 f1f2 	udiv	r1, r3, r2
 80088b8:	fb01 f202 	mul.w	r2, r1, r2
 80088bc:	1a9b      	subs	r3, r3, r2
 80088be:	607b      	str	r3, [r7, #4]

	return ret;
 80088c0:	687b      	ldr	r3, [r7, #4]
}
 80088c2:	4618      	mov	r0, r3
 80088c4:	370c      	adds	r7, #12
 80088c6:	46bd      	mov	sp, r7
 80088c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088cc:	4770      	bx	lr
 80088ce:	bf00      	nop
 80088d0:	200006f8 	.word	0x200006f8
 80088d4:	200006fc 	.word	0x200006fc
 80088d8:	20000140 	.word	0x20000140

080088dc <cdcRead>:

uint8_t cdcRead(void)
{
 80088dc:	b480      	push	{r7}
 80088de:	b083      	sub	sp, #12
 80088e0:	af00      	add	r7, sp, #0
	uint8_t ret;
	ret = rx_buf[rx_out];
 80088e2:	4b0f      	ldr	r3, [pc, #60]	; (8008920 <cdcRead+0x44>)
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	4a0f      	ldr	r2, [pc, #60]	; (8008924 <cdcRead+0x48>)
 80088e8:	5cd3      	ldrb	r3, [r2, r3]
 80088ea:	71fb      	strb	r3, [r7, #7]

	if(rx_out != rx_in)
 80088ec:	4b0c      	ldr	r3, [pc, #48]	; (8008920 <cdcRead+0x44>)
 80088ee:	681a      	ldr	r2, [r3, #0]
 80088f0:	4b0d      	ldr	r3, [pc, #52]	; (8008928 <cdcRead+0x4c>)
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	429a      	cmp	r2, r3
 80088f6:	d00b      	beq.n	8008910 <cdcRead+0x34>
	{
		rx_out = (rx_out + 1) % rx_len;
 80088f8:	4b09      	ldr	r3, [pc, #36]	; (8008920 <cdcRead+0x44>)
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	3301      	adds	r3, #1
 80088fe:	4a0b      	ldr	r2, [pc, #44]	; (800892c <cdcRead+0x50>)
 8008900:	6812      	ldr	r2, [r2, #0]
 8008902:	fbb3 f1f2 	udiv	r1, r3, r2
 8008906:	fb01 f202 	mul.w	r2, r1, r2
 800890a:	1a9b      	subs	r3, r3, r2
 800890c:	4a04      	ldr	r2, [pc, #16]	; (8008920 <cdcRead+0x44>)
 800890e:	6013      	str	r3, [r2, #0]
	}
	return ret;
 8008910:	79fb      	ldrb	r3, [r7, #7]
}
 8008912:	4618      	mov	r0, r3
 8008914:	370c      	adds	r7, #12
 8008916:	46bd      	mov	sp, r7
 8008918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800891c:	4770      	bx	lr
 800891e:	bf00      	nop
 8008920:	200006fc 	.word	0x200006fc
 8008924:	20000700 	.word	0x20000700
 8008928:	200006f8 	.word	0x200006f8
 800892c:	20000140 	.word	0x20000140

08008930 <cdcDataIn>:

void cdcDataIn(uint8_t rx_data)
{
 8008930:	b480      	push	{r7}
 8008932:	b085      	sub	sp, #20
 8008934:	af00      	add	r7, sp, #0
 8008936:	4603      	mov	r3, r0
 8008938:	71fb      	strb	r3, [r7, #7]
	uint32_t next_rx_in;
	next_rx_in = (rx_in + 1) % rx_len;
 800893a:	4b0f      	ldr	r3, [pc, #60]	; (8008978 <cdcDataIn+0x48>)
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	3301      	adds	r3, #1
 8008940:	4a0e      	ldr	r2, [pc, #56]	; (800897c <cdcDataIn+0x4c>)
 8008942:	6812      	ldr	r2, [r2, #0]
 8008944:	fbb3 f1f2 	udiv	r1, r3, r2
 8008948:	fb01 f202 	mul.w	r2, r1, r2
 800894c:	1a9b      	subs	r3, r3, r2
 800894e:	60fb      	str	r3, [r7, #12]
	rx_buf[rx_in] = rx_data;
 8008950:	4b09      	ldr	r3, [pc, #36]	; (8008978 <cdcDataIn+0x48>)
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	490a      	ldr	r1, [pc, #40]	; (8008980 <cdcDataIn+0x50>)
 8008956:	79fa      	ldrb	r2, [r7, #7]
 8008958:	54ca      	strb	r2, [r1, r3]
	if(next_rx_in != rx_out)
 800895a:	4b0a      	ldr	r3, [pc, #40]	; (8008984 <cdcDataIn+0x54>)
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	68fa      	ldr	r2, [r7, #12]
 8008960:	429a      	cmp	r2, r3
 8008962:	d002      	beq.n	800896a <cdcDataIn+0x3a>
	{
		rx_in = next_rx_in;
 8008964:	4a04      	ldr	r2, [pc, #16]	; (8008978 <cdcDataIn+0x48>)
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	6013      	str	r3, [r2, #0]
	}
}
 800896a:	bf00      	nop
 800896c:	3714      	adds	r7, #20
 800896e:	46bd      	mov	sp, r7
 8008970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008974:	4770      	bx	lr
 8008976:	bf00      	nop
 8008978:	200006f8 	.word	0x200006f8
 800897c:	20000140 	.word	0x20000140
 8008980:	20000700 	.word	0x20000700
 8008984:	200006fc 	.word	0x200006fc

08008988 <cdcWrite>:
uint32_t cdcWrite(uint8_t *pData, uint32_t length)
{
 8008988:	b580      	push	{r7, lr}
 800898a:	b084      	sub	sp, #16
 800898c:	af00      	add	r7, sp, #0
 800898e:	6078      	str	r0, [r7, #4]
 8008990:	6039      	str	r1, [r7, #0]
	uint32_t pre_time;
	uint8_t ret;

	pre_time = millis();
 8008992:	f7f7 fee0 	bl	8000756 <millis>
 8008996:	60f8      	str	r0, [r7, #12]
	while(1)
	{
		ret = CDC_Transmit_FS(pData, length);
 8008998:	683b      	ldr	r3, [r7, #0]
 800899a:	b29b      	uxth	r3, r3
 800899c:	4619      	mov	r1, r3
 800899e:	6878      	ldr	r0, [r7, #4]
 80089a0:	f000 f95e 	bl	8008c60 <CDC_Transmit_FS>
 80089a4:	4603      	mov	r3, r0
 80089a6:	72fb      	strb	r3, [r7, #11]

		if(ret == USBD_OK)
 80089a8:	7afb      	ldrb	r3, [r7, #11]
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d101      	bne.n	80089b2 <cdcWrite+0x2a>
		{
			return length;
 80089ae:	683b      	ldr	r3, [r7, #0]
 80089b0:	e00e      	b.n	80089d0 <cdcWrite+0x48>
		}
		else if(ret == USBD_FAIL)
 80089b2:	7afb      	ldrb	r3, [r7, #11]
 80089b4:	2b03      	cmp	r3, #3
 80089b6:	d101      	bne.n	80089bc <cdcWrite+0x34>
		{
			return 0;
 80089b8:	2300      	movs	r3, #0
 80089ba:	e009      	b.n	80089d0 <cdcWrite+0x48>
		}

		if(millis() - pre_time >= 100)
 80089bc:	f7f7 fecb 	bl	8000756 <millis>
 80089c0:	4602      	mov	r2, r0
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	1ad3      	subs	r3, r2, r3
 80089c6:	2b63      	cmp	r3, #99	; 0x63
 80089c8:	d800      	bhi.n	80089cc <cdcWrite+0x44>
		ret = CDC_Transmit_FS(pData, length);
 80089ca:	e7e5      	b.n	8008998 <cdcWrite+0x10>
		{
			break;
 80089cc:	bf00      	nop
		}

	}
	return 0;
 80089ce:	2300      	movs	r3, #0
}
 80089d0:	4618      	mov	r0, r3
 80089d2:	3710      	adds	r7, #16
 80089d4:	46bd      	mov	sp, r7
 80089d6:	bd80      	pop	{r7, pc}

080089d8 <cdcGetBaud>:
uint32_t cdcGetBaud(void)
{
 80089d8:	b480      	push	{r7}
 80089da:	af00      	add	r7, sp, #0
	return LineCoding.bitrate;
 80089dc:	4b03      	ldr	r3, [pc, #12]	; (80089ec <cdcGetBaud+0x14>)
 80089de:	681b      	ldr	r3, [r3, #0]
}
 80089e0:	4618      	mov	r0, r3
 80089e2:	46bd      	mov	sp, r7
 80089e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089e8:	4770      	bx	lr
 80089ea:	bf00      	nop
 80089ec:	200006f0 	.word	0x200006f0

080089f0 <USBD_CDC_SOF>:
uint32_t sof_cnt = 0;
uint8_t USBD_CDC_SOF(struct _USBD_HandleTypeDef *pdev)
{
 80089f0:	b590      	push	{r4, r7, lr}
 80089f2:	b085      	sub	sp, #20
 80089f4:	af00      	add	r7, sp, #0
 80089f6:	6078      	str	r0, [r7, #4]
  sof_cnt++;
 80089f8:	4b0f      	ldr	r3, [pc, #60]	; (8008a38 <USBD_CDC_SOF+0x48>)
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	3301      	adds	r3, #1
 80089fe:	4a0e      	ldr	r2, [pc, #56]	; (8008a38 <USBD_CDC_SOF+0x48>)
 8008a00:	6013      	str	r3, [r2, #0]
  if(rx_full == true)
 8008a02:	4b0e      	ldr	r3, [pc, #56]	; (8008a3c <USBD_CDC_SOF+0x4c>)
 8008a04:	781b      	ldrb	r3, [r3, #0]
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d010      	beq.n	8008a2c <USBD_CDC_SOF+0x3c>
  {
    uint32_t buf_len;

    //Empty space amount of received buffer
    buf_len = (rx_len - cdcAvailable()) - 1; // for write one space -> -1
 8008a0a:	4b0d      	ldr	r3, [pc, #52]	; (8008a40 <USBD_CDC_SOF+0x50>)
 8008a0c:	681c      	ldr	r4, [r3, #0]
 8008a0e:	f7ff ff47 	bl	80088a0 <cdcAvailable>
 8008a12:	4603      	mov	r3, r0
 8008a14:	1ae3      	subs	r3, r4, r3
 8008a16:	3b01      	subs	r3, #1
 8008a18:	60fb      	str	r3, [r7, #12]

    if(buf_len >= USB_FS_MAX_PACKET_SIZE)
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	2b3f      	cmp	r3, #63	; 0x3f
 8008a1e:	d905      	bls.n	8008a2c <USBD_CDC_SOF+0x3c>
    {
      //USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]); only one is enough
      USBD_CDC_ReceivePacket(pdev);
 8008a20:	6878      	ldr	r0, [r7, #4]
 8008a22:	f7fe fd79 	bl	8007518 <USBD_CDC_ReceivePacket>
      rx_full = false;
 8008a26:	4b05      	ldr	r3, [pc, #20]	; (8008a3c <USBD_CDC_SOF+0x4c>)
 8008a28:	2200      	movs	r2, #0
 8008a2a:	701a      	strb	r2, [r3, #0]
    }

  }
  return 0;
 8008a2c:	2300      	movs	r3, #0
}
 8008a2e:	4618      	mov	r0, r3
 8008a30:	3714      	adds	r7, #20
 8008a32:	46bd      	mov	sp, r7
 8008a34:	bd90      	pop	{r4, r7, pc}
 8008a36:	bf00      	nop
 8008a38:	20000904 	.word	0x20000904
 8008a3c:	20000900 	.word	0x20000900
 8008a40:	20000140 	.word	0x20000140

08008a44 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008a44:	b580      	push	{r7, lr}
 8008a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008a48:	2200      	movs	r2, #0
 8008a4a:	4905      	ldr	r1, [pc, #20]	; (8008a60 <CDC_Init_FS+0x1c>)
 8008a4c:	4805      	ldr	r0, [pc, #20]	; (8008a64 <CDC_Init_FS+0x20>)
 8008a4e:	f7fe fcfc 	bl	800744a <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008a52:	4905      	ldr	r1, [pc, #20]	; (8008a68 <CDC_Init_FS+0x24>)
 8008a54:	4803      	ldr	r0, [pc, #12]	; (8008a64 <CDC_Init_FS+0x20>)
 8008a56:	f7fe fd16 	bl	8007486 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8008a5a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008a5c:	4618      	mov	r0, r3
 8008a5e:	bd80      	pop	{r7, pc}
 8008a60:	20000d08 	.word	0x20000d08
 8008a64:	20000420 	.word	0x20000420
 8008a68:	20000908 	.word	0x20000908

08008a6c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008a6c:	b480      	push	{r7}
 8008a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008a70:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008a72:	4618      	mov	r0, r3
 8008a74:	46bd      	mov	sp, r7
 8008a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a7a:	4770      	bx	lr

08008a7c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008a7c:	b480      	push	{r7}
 8008a7e:	b083      	sub	sp, #12
 8008a80:	af00      	add	r7, sp, #0
 8008a82:	4603      	mov	r3, r0
 8008a84:	6039      	str	r1, [r7, #0]
 8008a86:	71fb      	strb	r3, [r7, #7]
 8008a88:	4613      	mov	r3, r2
 8008a8a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008a8c:	79fb      	ldrb	r3, [r7, #7]
 8008a8e:	2b23      	cmp	r3, #35	; 0x23
 8008a90:	f200 80a3 	bhi.w	8008bda <CDC_Control_FS+0x15e>
 8008a94:	a201      	add	r2, pc, #4	; (adr r2, 8008a9c <CDC_Control_FS+0x20>)
 8008a96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a9a:	bf00      	nop
 8008a9c:	08008bdb 	.word	0x08008bdb
 8008aa0:	08008bdb 	.word	0x08008bdb
 8008aa4:	08008bdb 	.word	0x08008bdb
 8008aa8:	08008bdb 	.word	0x08008bdb
 8008aac:	08008bdb 	.word	0x08008bdb
 8008ab0:	08008bdb 	.word	0x08008bdb
 8008ab4:	08008bdb 	.word	0x08008bdb
 8008ab8:	08008bdb 	.word	0x08008bdb
 8008abc:	08008bdb 	.word	0x08008bdb
 8008ac0:	08008bdb 	.word	0x08008bdb
 8008ac4:	08008bdb 	.word	0x08008bdb
 8008ac8:	08008bdb 	.word	0x08008bdb
 8008acc:	08008bdb 	.word	0x08008bdb
 8008ad0:	08008bdb 	.word	0x08008bdb
 8008ad4:	08008bdb 	.word	0x08008bdb
 8008ad8:	08008bdb 	.word	0x08008bdb
 8008adc:	08008bdb 	.word	0x08008bdb
 8008ae0:	08008bdb 	.word	0x08008bdb
 8008ae4:	08008bdb 	.word	0x08008bdb
 8008ae8:	08008bdb 	.word	0x08008bdb
 8008aec:	08008bdb 	.word	0x08008bdb
 8008af0:	08008bdb 	.word	0x08008bdb
 8008af4:	08008bdb 	.word	0x08008bdb
 8008af8:	08008bdb 	.word	0x08008bdb
 8008afc:	08008bdb 	.word	0x08008bdb
 8008b00:	08008bdb 	.word	0x08008bdb
 8008b04:	08008bdb 	.word	0x08008bdb
 8008b08:	08008bdb 	.word	0x08008bdb
 8008b0c:	08008bdb 	.word	0x08008bdb
 8008b10:	08008bdb 	.word	0x08008bdb
 8008b14:	08008bdb 	.word	0x08008bdb
 8008b18:	08008bdb 	.word	0x08008bdb
 8008b1c:	08008b2d 	.word	0x08008b2d
 8008b20:	08008b87 	.word	0x08008b87
 8008b24:	08008bdb 	.word	0x08008bdb
 8008b28:	08008bdb 	.word	0x08008bdb
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING: // MCU�?? ?��?��?���?? set
    	LineCoding.bitrate 		 = (uint32_t)(pbuf[0]);
 8008b2c:	683b      	ldr	r3, [r7, #0]
 8008b2e:	781b      	ldrb	r3, [r3, #0]
 8008b30:	461a      	mov	r2, r3
 8008b32:	4b2e      	ldr	r3, [pc, #184]	; (8008bec <CDC_Control_FS+0x170>)
 8008b34:	601a      	str	r2, [r3, #0]
    	LineCoding.bitrate 		|= (uint32_t)(pbuf[1]) << 8;
 8008b36:	4b2d      	ldr	r3, [pc, #180]	; (8008bec <CDC_Control_FS+0x170>)
 8008b38:	681a      	ldr	r2, [r3, #0]
 8008b3a:	683b      	ldr	r3, [r7, #0]
 8008b3c:	3301      	adds	r3, #1
 8008b3e:	781b      	ldrb	r3, [r3, #0]
 8008b40:	021b      	lsls	r3, r3, #8
 8008b42:	4313      	orrs	r3, r2
 8008b44:	4a29      	ldr	r2, [pc, #164]	; (8008bec <CDC_Control_FS+0x170>)
 8008b46:	6013      	str	r3, [r2, #0]
    	LineCoding.bitrate 		|= (uint32_t)(pbuf[2]) << 16;
 8008b48:	4b28      	ldr	r3, [pc, #160]	; (8008bec <CDC_Control_FS+0x170>)
 8008b4a:	681a      	ldr	r2, [r3, #0]
 8008b4c:	683b      	ldr	r3, [r7, #0]
 8008b4e:	3302      	adds	r3, #2
 8008b50:	781b      	ldrb	r3, [r3, #0]
 8008b52:	041b      	lsls	r3, r3, #16
 8008b54:	4313      	orrs	r3, r2
 8008b56:	4a25      	ldr	r2, [pc, #148]	; (8008bec <CDC_Control_FS+0x170>)
 8008b58:	6013      	str	r3, [r2, #0]
    	LineCoding.bitrate 		|= (uint32_t)(pbuf[3]) << 24;
 8008b5a:	4b24      	ldr	r3, [pc, #144]	; (8008bec <CDC_Control_FS+0x170>)
 8008b5c:	681a      	ldr	r2, [r3, #0]
 8008b5e:	683b      	ldr	r3, [r7, #0]
 8008b60:	3303      	adds	r3, #3
 8008b62:	781b      	ldrb	r3, [r3, #0]
 8008b64:	061b      	lsls	r3, r3, #24
 8008b66:	4313      	orrs	r3, r2
 8008b68:	4a20      	ldr	r2, [pc, #128]	; (8008bec <CDC_Control_FS+0x170>)
 8008b6a:	6013      	str	r3, [r2, #0]
    	LineCoding.format 		 = pbuf[4];
 8008b6c:	683b      	ldr	r3, [r7, #0]
 8008b6e:	791a      	ldrb	r2, [r3, #4]
 8008b70:	4b1e      	ldr	r3, [pc, #120]	; (8008bec <CDC_Control_FS+0x170>)
 8008b72:	711a      	strb	r2, [r3, #4]
    	LineCoding.paritytype  = pbuf[5];
 8008b74:	683b      	ldr	r3, [r7, #0]
 8008b76:	795a      	ldrb	r2, [r3, #5]
 8008b78:	4b1c      	ldr	r3, [pc, #112]	; (8008bec <CDC_Control_FS+0x170>)
 8008b7a:	715a      	strb	r2, [r3, #5]
    	LineCoding.datatype 	 = pbuf[6];
 8008b7c:	683b      	ldr	r3, [r7, #0]
 8008b7e:	799a      	ldrb	r2, [r3, #6]
 8008b80:	4b1a      	ldr	r3, [pc, #104]	; (8008bec <CDC_Control_FS+0x170>)
 8008b82:	719a      	strb	r2, [r3, #6]
    break;
 8008b84:	e02a      	b.n	8008bdc <CDC_Control_FS+0x160>

    case CDC_GET_LINE_CODING: // PC�?? ?��?��?���?? ?��?���??
    	pbuf[0] = (uint8_t)(LineCoding.bitrate);
 8008b86:	4b19      	ldr	r3, [pc, #100]	; (8008bec <CDC_Control_FS+0x170>)
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	b2da      	uxtb	r2, r3
 8008b8c:	683b      	ldr	r3, [r7, #0]
 8008b8e:	701a      	strb	r2, [r3, #0]
    	pbuf[1] = (uint8_t)(LineCoding.bitrate >> 8);
 8008b90:	4b16      	ldr	r3, [pc, #88]	; (8008bec <CDC_Control_FS+0x170>)
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	0a1a      	lsrs	r2, r3, #8
 8008b96:	683b      	ldr	r3, [r7, #0]
 8008b98:	3301      	adds	r3, #1
 8008b9a:	b2d2      	uxtb	r2, r2
 8008b9c:	701a      	strb	r2, [r3, #0]
    	pbuf[2] = (uint8_t)(LineCoding.bitrate >> 16);
 8008b9e:	4b13      	ldr	r3, [pc, #76]	; (8008bec <CDC_Control_FS+0x170>)
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	0c1a      	lsrs	r2, r3, #16
 8008ba4:	683b      	ldr	r3, [r7, #0]
 8008ba6:	3302      	adds	r3, #2
 8008ba8:	b2d2      	uxtb	r2, r2
 8008baa:	701a      	strb	r2, [r3, #0]
    	pbuf[3] = (uint8_t)(LineCoding.bitrate >> 24);
 8008bac:	4b0f      	ldr	r3, [pc, #60]	; (8008bec <CDC_Control_FS+0x170>)
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	0e1a      	lsrs	r2, r3, #24
 8008bb2:	683b      	ldr	r3, [r7, #0]
 8008bb4:	3303      	adds	r3, #3
 8008bb6:	b2d2      	uxtb	r2, r2
 8008bb8:	701a      	strb	r2, [r3, #0]
    	pbuf[4] = LineCoding.format;
 8008bba:	683b      	ldr	r3, [r7, #0]
 8008bbc:	3304      	adds	r3, #4
 8008bbe:	4a0b      	ldr	r2, [pc, #44]	; (8008bec <CDC_Control_FS+0x170>)
 8008bc0:	7912      	ldrb	r2, [r2, #4]
 8008bc2:	701a      	strb	r2, [r3, #0]
    	pbuf[5] = LineCoding.paritytype;
 8008bc4:	683b      	ldr	r3, [r7, #0]
 8008bc6:	3305      	adds	r3, #5
 8008bc8:	4a08      	ldr	r2, [pc, #32]	; (8008bec <CDC_Control_FS+0x170>)
 8008bca:	7952      	ldrb	r2, [r2, #5]
 8008bcc:	701a      	strb	r2, [r3, #0]
    	pbuf[6] = LineCoding.datatype;
 8008bce:	683b      	ldr	r3, [r7, #0]
 8008bd0:	3306      	adds	r3, #6
 8008bd2:	4a06      	ldr	r2, [pc, #24]	; (8008bec <CDC_Control_FS+0x170>)
 8008bd4:	7992      	ldrb	r2, [r2, #6]
 8008bd6:	701a      	strb	r2, [r3, #0]
    break;
 8008bd8:	e000      	b.n	8008bdc <CDC_Control_FS+0x160>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008bda:	bf00      	nop
  }

  return (USBD_OK);
 8008bdc:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008bde:	4618      	mov	r0, r3
 8008be0:	370c      	adds	r7, #12
 8008be2:	46bd      	mov	sp, r7
 8008be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008be8:	4770      	bx	lr
 8008bea:	bf00      	nop
 8008bec:	200006f0 	.word	0x200006f0

08008bf0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008bf0:	b590      	push	{r4, r7, lr}
 8008bf2:	b085      	sub	sp, #20
 8008bf4:	af00      	add	r7, sp, #0
 8008bf6:	6078      	str	r0, [r7, #4]
 8008bf8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */

  for(int i=0; i<*Len; i++)
 8008bfa:	2300      	movs	r3, #0
 8008bfc:	60fb      	str	r3, [r7, #12]
 8008bfe:	e009      	b.n	8008c14 <CDC_Receive_FS+0x24>
  {
    cdcDataIn(Buf[i]);
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	687a      	ldr	r2, [r7, #4]
 8008c04:	4413      	add	r3, r2
 8008c06:	781b      	ldrb	r3, [r3, #0]
 8008c08:	4618      	mov	r0, r3
 8008c0a:	f7ff fe91 	bl	8008930 <cdcDataIn>
  for(int i=0; i<*Len; i++)
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	3301      	adds	r3, #1
 8008c12:	60fb      	str	r3, [r7, #12]
 8008c14:	683b      	ldr	r3, [r7, #0]
 8008c16:	681a      	ldr	r2, [r3, #0]
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	429a      	cmp	r2, r3
 8008c1c:	d8f0      	bhi.n	8008c00 <CDC_Receive_FS+0x10>
  }
  uint32_t buf_len;

  //Empty space amount of received buffer
  buf_len = (rx_len - cdcAvailable()) - 1; // for write one space -> -1
 8008c1e:	4b0d      	ldr	r3, [pc, #52]	; (8008c54 <CDC_Receive_FS+0x64>)
 8008c20:	681c      	ldr	r4, [r3, #0]
 8008c22:	f7ff fe3d 	bl	80088a0 <cdcAvailable>
 8008c26:	4603      	mov	r3, r0
 8008c28:	1ae3      	subs	r3, r4, r3
 8008c2a:	3b01      	subs	r3, #1
 8008c2c:	60bb      	str	r3, [r7, #8]

  if(buf_len >= USB_FS_MAX_PACKET_SIZE)
 8008c2e:	68bb      	ldr	r3, [r7, #8]
 8008c30:	2b3f      	cmp	r3, #63	; 0x3f
 8008c32:	d907      	bls.n	8008c44 <CDC_Receive_FS+0x54>
  {
    USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008c34:	6879      	ldr	r1, [r7, #4]
 8008c36:	4808      	ldr	r0, [pc, #32]	; (8008c58 <CDC_Receive_FS+0x68>)
 8008c38:	f7fe fc25 	bl	8007486 <USBD_CDC_SetRxBuffer>
    USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8008c3c:	4806      	ldr	r0, [pc, #24]	; (8008c58 <CDC_Receive_FS+0x68>)
 8008c3e:	f7fe fc6b 	bl	8007518 <USBD_CDC_ReceivePacket>
 8008c42:	e002      	b.n	8008c4a <CDC_Receive_FS+0x5a>
  }
  else
  {
    /*buffer not enough space.. please wait*/
    rx_full = true;
 8008c44:	4b05      	ldr	r3, [pc, #20]	; (8008c5c <CDC_Receive_FS+0x6c>)
 8008c46:	2201      	movs	r2, #1
 8008c48:	701a      	strb	r2, [r3, #0]
  }

  return (USBD_OK);
 8008c4a:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008c4c:	4618      	mov	r0, r3
 8008c4e:	3714      	adds	r7, #20
 8008c50:	46bd      	mov	sp, r7
 8008c52:	bd90      	pop	{r4, r7, pc}
 8008c54:	20000140 	.word	0x20000140
 8008c58:	20000420 	.word	0x20000420
 8008c5c:	20000900 	.word	0x20000900

08008c60 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8008c60:	b580      	push	{r7, lr}
 8008c62:	b084      	sub	sp, #16
 8008c64:	af00      	add	r7, sp, #0
 8008c66:	6078      	str	r0, [r7, #4]
 8008c68:	460b      	mov	r3, r1
 8008c6a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8008c6c:	2300      	movs	r3, #0
 8008c6e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8008c70:	4b0d      	ldr	r3, [pc, #52]	; (8008ca8 <CDC_Transmit_FS+0x48>)
 8008c72:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008c76:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8008c78:	68bb      	ldr	r3, [r7, #8]
 8008c7a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d001      	beq.n	8008c86 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8008c82:	2301      	movs	r3, #1
 8008c84:	e00b      	b.n	8008c9e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8008c86:	887b      	ldrh	r3, [r7, #2]
 8008c88:	461a      	mov	r2, r3
 8008c8a:	6879      	ldr	r1, [r7, #4]
 8008c8c:	4806      	ldr	r0, [pc, #24]	; (8008ca8 <CDC_Transmit_FS+0x48>)
 8008c8e:	f7fe fbdc 	bl	800744a <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8008c92:	4805      	ldr	r0, [pc, #20]	; (8008ca8 <CDC_Transmit_FS+0x48>)
 8008c94:	f7fe fc10 	bl	80074b8 <USBD_CDC_TransmitPacket>
 8008c98:	4603      	mov	r3, r0
 8008c9a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8008c9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c9e:	4618      	mov	r0, r3
 8008ca0:	3710      	adds	r7, #16
 8008ca2:	46bd      	mov	sp, r7
 8008ca4:	bd80      	pop	{r7, pc}
 8008ca6:	bf00      	nop
 8008ca8:	20000420 	.word	0x20000420

08008cac <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8008cac:	b480      	push	{r7}
 8008cae:	b087      	sub	sp, #28
 8008cb0:	af00      	add	r7, sp, #0
 8008cb2:	60f8      	str	r0, [r7, #12]
 8008cb4:	60b9      	str	r1, [r7, #8]
 8008cb6:	4613      	mov	r3, r2
 8008cb8:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8008cba:	2300      	movs	r3, #0
 8008cbc:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8008cbe:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008cc2:	4618      	mov	r0, r3
 8008cc4:	371c      	adds	r7, #28
 8008cc6:	46bd      	mov	sp, r7
 8008cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ccc:	4770      	bx	lr
	...

08008cd0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008cd0:	b480      	push	{r7}
 8008cd2:	b083      	sub	sp, #12
 8008cd4:	af00      	add	r7, sp, #0
 8008cd6:	4603      	mov	r3, r0
 8008cd8:	6039      	str	r1, [r7, #0]
 8008cda:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008cdc:	683b      	ldr	r3, [r7, #0]
 8008cde:	2212      	movs	r2, #18
 8008ce0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008ce2:	4b03      	ldr	r3, [pc, #12]	; (8008cf0 <USBD_FS_DeviceDescriptor+0x20>)
}
 8008ce4:	4618      	mov	r0, r3
 8008ce6:	370c      	adds	r7, #12
 8008ce8:	46bd      	mov	sp, r7
 8008cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cee:	4770      	bx	lr
 8008cf0:	20000174 	.word	0x20000174

08008cf4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008cf4:	b480      	push	{r7}
 8008cf6:	b083      	sub	sp, #12
 8008cf8:	af00      	add	r7, sp, #0
 8008cfa:	4603      	mov	r3, r0
 8008cfc:	6039      	str	r1, [r7, #0]
 8008cfe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008d00:	683b      	ldr	r3, [r7, #0]
 8008d02:	2204      	movs	r2, #4
 8008d04:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008d06:	4b03      	ldr	r3, [pc, #12]	; (8008d14 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008d08:	4618      	mov	r0, r3
 8008d0a:	370c      	adds	r7, #12
 8008d0c:	46bd      	mov	sp, r7
 8008d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d12:	4770      	bx	lr
 8008d14:	20000188 	.word	0x20000188

08008d18 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008d18:	b580      	push	{r7, lr}
 8008d1a:	b082      	sub	sp, #8
 8008d1c:	af00      	add	r7, sp, #0
 8008d1e:	4603      	mov	r3, r0
 8008d20:	6039      	str	r1, [r7, #0]
 8008d22:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008d24:	79fb      	ldrb	r3, [r7, #7]
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d105      	bne.n	8008d36 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008d2a:	683a      	ldr	r2, [r7, #0]
 8008d2c:	4907      	ldr	r1, [pc, #28]	; (8008d4c <USBD_FS_ProductStrDescriptor+0x34>)
 8008d2e:	4808      	ldr	r0, [pc, #32]	; (8008d50 <USBD_FS_ProductStrDescriptor+0x38>)
 8008d30:	f7ff fca5 	bl	800867e <USBD_GetString>
 8008d34:	e004      	b.n	8008d40 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008d36:	683a      	ldr	r2, [r7, #0]
 8008d38:	4904      	ldr	r1, [pc, #16]	; (8008d4c <USBD_FS_ProductStrDescriptor+0x34>)
 8008d3a:	4805      	ldr	r0, [pc, #20]	; (8008d50 <USBD_FS_ProductStrDescriptor+0x38>)
 8008d3c:	f7ff fc9f 	bl	800867e <USBD_GetString>
  }
  return USBD_StrDesc;
 8008d40:	4b02      	ldr	r3, [pc, #8]	; (8008d4c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008d42:	4618      	mov	r0, r3
 8008d44:	3708      	adds	r7, #8
 8008d46:	46bd      	mov	sp, r7
 8008d48:	bd80      	pop	{r7, pc}
 8008d4a:	bf00      	nop
 8008d4c:	20001108 	.word	0x20001108
 8008d50:	08009eb8 	.word	0x08009eb8

08008d54 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008d54:	b580      	push	{r7, lr}
 8008d56:	b082      	sub	sp, #8
 8008d58:	af00      	add	r7, sp, #0
 8008d5a:	4603      	mov	r3, r0
 8008d5c:	6039      	str	r1, [r7, #0]
 8008d5e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008d60:	683a      	ldr	r2, [r7, #0]
 8008d62:	4904      	ldr	r1, [pc, #16]	; (8008d74 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008d64:	4804      	ldr	r0, [pc, #16]	; (8008d78 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008d66:	f7ff fc8a 	bl	800867e <USBD_GetString>
  return USBD_StrDesc;
 8008d6a:	4b02      	ldr	r3, [pc, #8]	; (8008d74 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008d6c:	4618      	mov	r0, r3
 8008d6e:	3708      	adds	r7, #8
 8008d70:	46bd      	mov	sp, r7
 8008d72:	bd80      	pop	{r7, pc}
 8008d74:	20001108 	.word	0x20001108
 8008d78:	08009ed0 	.word	0x08009ed0

08008d7c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008d7c:	b580      	push	{r7, lr}
 8008d7e:	b082      	sub	sp, #8
 8008d80:	af00      	add	r7, sp, #0
 8008d82:	4603      	mov	r3, r0
 8008d84:	6039      	str	r1, [r7, #0]
 8008d86:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008d88:	683b      	ldr	r3, [r7, #0]
 8008d8a:	221a      	movs	r2, #26
 8008d8c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008d8e:	f000 f843 	bl	8008e18 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008d92:	4b02      	ldr	r3, [pc, #8]	; (8008d9c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008d94:	4618      	mov	r0, r3
 8008d96:	3708      	adds	r7, #8
 8008d98:	46bd      	mov	sp, r7
 8008d9a:	bd80      	pop	{r7, pc}
 8008d9c:	2000018c 	.word	0x2000018c

08008da0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008da0:	b580      	push	{r7, lr}
 8008da2:	b082      	sub	sp, #8
 8008da4:	af00      	add	r7, sp, #0
 8008da6:	4603      	mov	r3, r0
 8008da8:	6039      	str	r1, [r7, #0]
 8008daa:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008dac:	79fb      	ldrb	r3, [r7, #7]
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d105      	bne.n	8008dbe <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008db2:	683a      	ldr	r2, [r7, #0]
 8008db4:	4907      	ldr	r1, [pc, #28]	; (8008dd4 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008db6:	4808      	ldr	r0, [pc, #32]	; (8008dd8 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008db8:	f7ff fc61 	bl	800867e <USBD_GetString>
 8008dbc:	e004      	b.n	8008dc8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008dbe:	683a      	ldr	r2, [r7, #0]
 8008dc0:	4904      	ldr	r1, [pc, #16]	; (8008dd4 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008dc2:	4805      	ldr	r0, [pc, #20]	; (8008dd8 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008dc4:	f7ff fc5b 	bl	800867e <USBD_GetString>
  }
  return USBD_StrDesc;
 8008dc8:	4b02      	ldr	r3, [pc, #8]	; (8008dd4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008dca:	4618      	mov	r0, r3
 8008dcc:	3708      	adds	r7, #8
 8008dce:	46bd      	mov	sp, r7
 8008dd0:	bd80      	pop	{r7, pc}
 8008dd2:	bf00      	nop
 8008dd4:	20001108 	.word	0x20001108
 8008dd8:	08009ee4 	.word	0x08009ee4

08008ddc <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008ddc:	b580      	push	{r7, lr}
 8008dde:	b082      	sub	sp, #8
 8008de0:	af00      	add	r7, sp, #0
 8008de2:	4603      	mov	r3, r0
 8008de4:	6039      	str	r1, [r7, #0]
 8008de6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008de8:	79fb      	ldrb	r3, [r7, #7]
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d105      	bne.n	8008dfa <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008dee:	683a      	ldr	r2, [r7, #0]
 8008df0:	4907      	ldr	r1, [pc, #28]	; (8008e10 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008df2:	4808      	ldr	r0, [pc, #32]	; (8008e14 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008df4:	f7ff fc43 	bl	800867e <USBD_GetString>
 8008df8:	e004      	b.n	8008e04 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008dfa:	683a      	ldr	r2, [r7, #0]
 8008dfc:	4904      	ldr	r1, [pc, #16]	; (8008e10 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008dfe:	4805      	ldr	r0, [pc, #20]	; (8008e14 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008e00:	f7ff fc3d 	bl	800867e <USBD_GetString>
  }
  return USBD_StrDesc;
 8008e04:	4b02      	ldr	r3, [pc, #8]	; (8008e10 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008e06:	4618      	mov	r0, r3
 8008e08:	3708      	adds	r7, #8
 8008e0a:	46bd      	mov	sp, r7
 8008e0c:	bd80      	pop	{r7, pc}
 8008e0e:	bf00      	nop
 8008e10:	20001108 	.word	0x20001108
 8008e14:	08009ef0 	.word	0x08009ef0

08008e18 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008e18:	b580      	push	{r7, lr}
 8008e1a:	b084      	sub	sp, #16
 8008e1c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008e1e:	4b0f      	ldr	r3, [pc, #60]	; (8008e5c <Get_SerialNum+0x44>)
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008e24:	4b0e      	ldr	r3, [pc, #56]	; (8008e60 <Get_SerialNum+0x48>)
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008e2a:	4b0e      	ldr	r3, [pc, #56]	; (8008e64 <Get_SerialNum+0x4c>)
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008e30:	68fa      	ldr	r2, [r7, #12]
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	4413      	add	r3, r2
 8008e36:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d009      	beq.n	8008e52 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008e3e:	2208      	movs	r2, #8
 8008e40:	4909      	ldr	r1, [pc, #36]	; (8008e68 <Get_SerialNum+0x50>)
 8008e42:	68f8      	ldr	r0, [r7, #12]
 8008e44:	f000 f814 	bl	8008e70 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008e48:	2204      	movs	r2, #4
 8008e4a:	4908      	ldr	r1, [pc, #32]	; (8008e6c <Get_SerialNum+0x54>)
 8008e4c:	68b8      	ldr	r0, [r7, #8]
 8008e4e:	f000 f80f 	bl	8008e70 <IntToUnicode>
  }
}
 8008e52:	bf00      	nop
 8008e54:	3710      	adds	r7, #16
 8008e56:	46bd      	mov	sp, r7
 8008e58:	bd80      	pop	{r7, pc}
 8008e5a:	bf00      	nop
 8008e5c:	1fff7a10 	.word	0x1fff7a10
 8008e60:	1fff7a14 	.word	0x1fff7a14
 8008e64:	1fff7a18 	.word	0x1fff7a18
 8008e68:	2000018e 	.word	0x2000018e
 8008e6c:	2000019e 	.word	0x2000019e

08008e70 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008e70:	b480      	push	{r7}
 8008e72:	b087      	sub	sp, #28
 8008e74:	af00      	add	r7, sp, #0
 8008e76:	60f8      	str	r0, [r7, #12]
 8008e78:	60b9      	str	r1, [r7, #8]
 8008e7a:	4613      	mov	r3, r2
 8008e7c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008e7e:	2300      	movs	r3, #0
 8008e80:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008e82:	2300      	movs	r3, #0
 8008e84:	75fb      	strb	r3, [r7, #23]
 8008e86:	e027      	b.n	8008ed8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	0f1b      	lsrs	r3, r3, #28
 8008e8c:	2b09      	cmp	r3, #9
 8008e8e:	d80b      	bhi.n	8008ea8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	0f1b      	lsrs	r3, r3, #28
 8008e94:	b2da      	uxtb	r2, r3
 8008e96:	7dfb      	ldrb	r3, [r7, #23]
 8008e98:	005b      	lsls	r3, r3, #1
 8008e9a:	4619      	mov	r1, r3
 8008e9c:	68bb      	ldr	r3, [r7, #8]
 8008e9e:	440b      	add	r3, r1
 8008ea0:	3230      	adds	r2, #48	; 0x30
 8008ea2:	b2d2      	uxtb	r2, r2
 8008ea4:	701a      	strb	r2, [r3, #0]
 8008ea6:	e00a      	b.n	8008ebe <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	0f1b      	lsrs	r3, r3, #28
 8008eac:	b2da      	uxtb	r2, r3
 8008eae:	7dfb      	ldrb	r3, [r7, #23]
 8008eb0:	005b      	lsls	r3, r3, #1
 8008eb2:	4619      	mov	r1, r3
 8008eb4:	68bb      	ldr	r3, [r7, #8]
 8008eb6:	440b      	add	r3, r1
 8008eb8:	3237      	adds	r2, #55	; 0x37
 8008eba:	b2d2      	uxtb	r2, r2
 8008ebc:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	011b      	lsls	r3, r3, #4
 8008ec2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008ec4:	7dfb      	ldrb	r3, [r7, #23]
 8008ec6:	005b      	lsls	r3, r3, #1
 8008ec8:	3301      	adds	r3, #1
 8008eca:	68ba      	ldr	r2, [r7, #8]
 8008ecc:	4413      	add	r3, r2
 8008ece:	2200      	movs	r2, #0
 8008ed0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008ed2:	7dfb      	ldrb	r3, [r7, #23]
 8008ed4:	3301      	adds	r3, #1
 8008ed6:	75fb      	strb	r3, [r7, #23]
 8008ed8:	7dfa      	ldrb	r2, [r7, #23]
 8008eda:	79fb      	ldrb	r3, [r7, #7]
 8008edc:	429a      	cmp	r2, r3
 8008ede:	d3d3      	bcc.n	8008e88 <IntToUnicode+0x18>
  }
}
 8008ee0:	bf00      	nop
 8008ee2:	bf00      	nop
 8008ee4:	371c      	adds	r7, #28
 8008ee6:	46bd      	mov	sp, r7
 8008ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eec:	4770      	bx	lr
	...

08008ef0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008ef0:	b580      	push	{r7, lr}
 8008ef2:	b08a      	sub	sp, #40	; 0x28
 8008ef4:	af00      	add	r7, sp, #0
 8008ef6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008ef8:	f107 0314 	add.w	r3, r7, #20
 8008efc:	2200      	movs	r2, #0
 8008efe:	601a      	str	r2, [r3, #0]
 8008f00:	605a      	str	r2, [r3, #4]
 8008f02:	609a      	str	r2, [r3, #8]
 8008f04:	60da      	str	r2, [r3, #12]
 8008f06:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008f10:	d13a      	bne.n	8008f88 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008f12:	2300      	movs	r3, #0
 8008f14:	613b      	str	r3, [r7, #16]
 8008f16:	4b1e      	ldr	r3, [pc, #120]	; (8008f90 <HAL_PCD_MspInit+0xa0>)
 8008f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f1a:	4a1d      	ldr	r2, [pc, #116]	; (8008f90 <HAL_PCD_MspInit+0xa0>)
 8008f1c:	f043 0301 	orr.w	r3, r3, #1
 8008f20:	6313      	str	r3, [r2, #48]	; 0x30
 8008f22:	4b1b      	ldr	r3, [pc, #108]	; (8008f90 <HAL_PCD_MspInit+0xa0>)
 8008f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f26:	f003 0301 	and.w	r3, r3, #1
 8008f2a:	613b      	str	r3, [r7, #16]
 8008f2c:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8008f2e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8008f32:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008f34:	2302      	movs	r3, #2
 8008f36:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008f38:	2300      	movs	r3, #0
 8008f3a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008f3c:	2303      	movs	r3, #3
 8008f3e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008f40:	230a      	movs	r3, #10
 8008f42:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008f44:	f107 0314 	add.w	r3, r7, #20
 8008f48:	4619      	mov	r1, r3
 8008f4a:	4812      	ldr	r0, [pc, #72]	; (8008f94 <HAL_PCD_MspInit+0xa4>)
 8008f4c:	f7f8 ffce 	bl	8001eec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008f50:	4b0f      	ldr	r3, [pc, #60]	; (8008f90 <HAL_PCD_MspInit+0xa0>)
 8008f52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f54:	4a0e      	ldr	r2, [pc, #56]	; (8008f90 <HAL_PCD_MspInit+0xa0>)
 8008f56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008f5a:	6353      	str	r3, [r2, #52]	; 0x34
 8008f5c:	2300      	movs	r3, #0
 8008f5e:	60fb      	str	r3, [r7, #12]
 8008f60:	4b0b      	ldr	r3, [pc, #44]	; (8008f90 <HAL_PCD_MspInit+0xa0>)
 8008f62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008f64:	4a0a      	ldr	r2, [pc, #40]	; (8008f90 <HAL_PCD_MspInit+0xa0>)
 8008f66:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008f6a:	6453      	str	r3, [r2, #68]	; 0x44
 8008f6c:	4b08      	ldr	r3, [pc, #32]	; (8008f90 <HAL_PCD_MspInit+0xa0>)
 8008f6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008f70:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008f74:	60fb      	str	r3, [r7, #12]
 8008f76:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008f78:	2200      	movs	r2, #0
 8008f7a:	2100      	movs	r1, #0
 8008f7c:	2043      	movs	r0, #67	; 0x43
 8008f7e:	f7f8 fb10 	bl	80015a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008f82:	2043      	movs	r0, #67	; 0x43
 8008f84:	f7f8 fb29 	bl	80015da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008f88:	bf00      	nop
 8008f8a:	3728      	adds	r7, #40	; 0x28
 8008f8c:	46bd      	mov	sp, r7
 8008f8e:	bd80      	pop	{r7, pc}
 8008f90:	40023800 	.word	0x40023800
 8008f94:	40020000 	.word	0x40020000

08008f98 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008f98:	b580      	push	{r7, lr}
 8008f9a:	b082      	sub	sp, #8
 8008f9c:	af00      	add	r7, sp, #0
 8008f9e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8008fac:	4619      	mov	r1, r3
 8008fae:	4610      	mov	r0, r2
 8008fb0:	f7fe fb7e 	bl	80076b0 <USBD_LL_SetupStage>
}
 8008fb4:	bf00      	nop
 8008fb6:	3708      	adds	r7, #8
 8008fb8:	46bd      	mov	sp, r7
 8008fba:	bd80      	pop	{r7, pc}

08008fbc <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008fbc:	b580      	push	{r7, lr}
 8008fbe:	b082      	sub	sp, #8
 8008fc0:	af00      	add	r7, sp, #0
 8008fc2:	6078      	str	r0, [r7, #4]
 8008fc4:	460b      	mov	r3, r1
 8008fc6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8008fce:	78fa      	ldrb	r2, [r7, #3]
 8008fd0:	6879      	ldr	r1, [r7, #4]
 8008fd2:	4613      	mov	r3, r2
 8008fd4:	00db      	lsls	r3, r3, #3
 8008fd6:	1a9b      	subs	r3, r3, r2
 8008fd8:	009b      	lsls	r3, r3, #2
 8008fda:	440b      	add	r3, r1
 8008fdc:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8008fe0:	681a      	ldr	r2, [r3, #0]
 8008fe2:	78fb      	ldrb	r3, [r7, #3]
 8008fe4:	4619      	mov	r1, r3
 8008fe6:	f7fe fbb8 	bl	800775a <USBD_LL_DataOutStage>
}
 8008fea:	bf00      	nop
 8008fec:	3708      	adds	r7, #8
 8008fee:	46bd      	mov	sp, r7
 8008ff0:	bd80      	pop	{r7, pc}

08008ff2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008ff2:	b580      	push	{r7, lr}
 8008ff4:	b082      	sub	sp, #8
 8008ff6:	af00      	add	r7, sp, #0
 8008ff8:	6078      	str	r0, [r7, #4]
 8008ffa:	460b      	mov	r3, r1
 8008ffc:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8009004:	78fa      	ldrb	r2, [r7, #3]
 8009006:	6879      	ldr	r1, [r7, #4]
 8009008:	4613      	mov	r3, r2
 800900a:	00db      	lsls	r3, r3, #3
 800900c:	1a9b      	subs	r3, r3, r2
 800900e:	009b      	lsls	r3, r3, #2
 8009010:	440b      	add	r3, r1
 8009012:	3348      	adds	r3, #72	; 0x48
 8009014:	681a      	ldr	r2, [r3, #0]
 8009016:	78fb      	ldrb	r3, [r7, #3]
 8009018:	4619      	mov	r1, r3
 800901a:	f7fe fc01 	bl	8007820 <USBD_LL_DataInStage>
}
 800901e:	bf00      	nop
 8009020:	3708      	adds	r7, #8
 8009022:	46bd      	mov	sp, r7
 8009024:	bd80      	pop	{r7, pc}

08009026 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009026:	b580      	push	{r7, lr}
 8009028:	b082      	sub	sp, #8
 800902a:	af00      	add	r7, sp, #0
 800902c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009034:	4618      	mov	r0, r3
 8009036:	f7fe fd15 	bl	8007a64 <USBD_LL_SOF>
}
 800903a:	bf00      	nop
 800903c:	3708      	adds	r7, #8
 800903e:	46bd      	mov	sp, r7
 8009040:	bd80      	pop	{r7, pc}

08009042 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009042:	b580      	push	{r7, lr}
 8009044:	b084      	sub	sp, #16
 8009046:	af00      	add	r7, sp, #0
 8009048:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800904a:	2301      	movs	r3, #1
 800904c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	68db      	ldr	r3, [r3, #12]
 8009052:	2b02      	cmp	r3, #2
 8009054:	d001      	beq.n	800905a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8009056:	f7f7 fbef 	bl	8000838 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009060:	7bfa      	ldrb	r2, [r7, #15]
 8009062:	4611      	mov	r1, r2
 8009064:	4618      	mov	r0, r3
 8009066:	f7fe fcbf 	bl	80079e8 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009070:	4618      	mov	r0, r3
 8009072:	f7fe fc6b 	bl	800794c <USBD_LL_Reset>
}
 8009076:	bf00      	nop
 8009078:	3710      	adds	r7, #16
 800907a:	46bd      	mov	sp, r7
 800907c:	bd80      	pop	{r7, pc}
	...

08009080 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009080:	b580      	push	{r7, lr}
 8009082:	b082      	sub	sp, #8
 8009084:	af00      	add	r7, sp, #0
 8009086:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800908e:	4618      	mov	r0, r3
 8009090:	f7fe fcba 	bl	8007a08 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	687a      	ldr	r2, [r7, #4]
 80090a0:	6812      	ldr	r2, [r2, #0]
 80090a2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80090a6:	f043 0301 	orr.w	r3, r3, #1
 80090aa:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	6a1b      	ldr	r3, [r3, #32]
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d005      	beq.n	80090c0 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80090b4:	4b04      	ldr	r3, [pc, #16]	; (80090c8 <HAL_PCD_SuspendCallback+0x48>)
 80090b6:	691b      	ldr	r3, [r3, #16]
 80090b8:	4a03      	ldr	r2, [pc, #12]	; (80090c8 <HAL_PCD_SuspendCallback+0x48>)
 80090ba:	f043 0306 	orr.w	r3, r3, #6
 80090be:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80090c0:	bf00      	nop
 80090c2:	3708      	adds	r7, #8
 80090c4:	46bd      	mov	sp, r7
 80090c6:	bd80      	pop	{r7, pc}
 80090c8:	e000ed00 	.word	0xe000ed00

080090cc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80090cc:	b580      	push	{r7, lr}
 80090ce:	b082      	sub	sp, #8
 80090d0:	af00      	add	r7, sp, #0
 80090d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80090da:	4618      	mov	r0, r3
 80090dc:	f7fe fcaa 	bl	8007a34 <USBD_LL_Resume>
}
 80090e0:	bf00      	nop
 80090e2:	3708      	adds	r7, #8
 80090e4:	46bd      	mov	sp, r7
 80090e6:	bd80      	pop	{r7, pc}

080090e8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80090e8:	b580      	push	{r7, lr}
 80090ea:	b082      	sub	sp, #8
 80090ec:	af00      	add	r7, sp, #0
 80090ee:	6078      	str	r0, [r7, #4]
 80090f0:	460b      	mov	r3, r1
 80090f2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80090fa:	78fa      	ldrb	r2, [r7, #3]
 80090fc:	4611      	mov	r1, r2
 80090fe:	4618      	mov	r0, r3
 8009100:	f7fe fcf8 	bl	8007af4 <USBD_LL_IsoOUTIncomplete>
}
 8009104:	bf00      	nop
 8009106:	3708      	adds	r7, #8
 8009108:	46bd      	mov	sp, r7
 800910a:	bd80      	pop	{r7, pc}

0800910c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800910c:	b580      	push	{r7, lr}
 800910e:	b082      	sub	sp, #8
 8009110:	af00      	add	r7, sp, #0
 8009112:	6078      	str	r0, [r7, #4]
 8009114:	460b      	mov	r3, r1
 8009116:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800911e:	78fa      	ldrb	r2, [r7, #3]
 8009120:	4611      	mov	r1, r2
 8009122:	4618      	mov	r0, r3
 8009124:	f7fe fcc0 	bl	8007aa8 <USBD_LL_IsoINIncomplete>
}
 8009128:	bf00      	nop
 800912a:	3708      	adds	r7, #8
 800912c:	46bd      	mov	sp, r7
 800912e:	bd80      	pop	{r7, pc}

08009130 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009130:	b580      	push	{r7, lr}
 8009132:	b082      	sub	sp, #8
 8009134:	af00      	add	r7, sp, #0
 8009136:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800913e:	4618      	mov	r0, r3
 8009140:	f7fe fcfe 	bl	8007b40 <USBD_LL_DevConnected>
}
 8009144:	bf00      	nop
 8009146:	3708      	adds	r7, #8
 8009148:	46bd      	mov	sp, r7
 800914a:	bd80      	pop	{r7, pc}

0800914c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800914c:	b580      	push	{r7, lr}
 800914e:	b082      	sub	sp, #8
 8009150:	af00      	add	r7, sp, #0
 8009152:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800915a:	4618      	mov	r0, r3
 800915c:	f7fe fcfb 	bl	8007b56 <USBD_LL_DevDisconnected>
}
 8009160:	bf00      	nop
 8009162:	3708      	adds	r7, #8
 8009164:	46bd      	mov	sp, r7
 8009166:	bd80      	pop	{r7, pc}

08009168 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009168:	b580      	push	{r7, lr}
 800916a:	b082      	sub	sp, #8
 800916c:	af00      	add	r7, sp, #0
 800916e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	781b      	ldrb	r3, [r3, #0]
 8009174:	2b00      	cmp	r3, #0
 8009176:	d13c      	bne.n	80091f2 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8009178:	4a20      	ldr	r2, [pc, #128]	; (80091fc <USBD_LL_Init+0x94>)
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	4a1e      	ldr	r2, [pc, #120]	; (80091fc <USBD_LL_Init+0x94>)
 8009184:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8009188:	4b1c      	ldr	r3, [pc, #112]	; (80091fc <USBD_LL_Init+0x94>)
 800918a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800918e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8009190:	4b1a      	ldr	r3, [pc, #104]	; (80091fc <USBD_LL_Init+0x94>)
 8009192:	2204      	movs	r2, #4
 8009194:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8009196:	4b19      	ldr	r3, [pc, #100]	; (80091fc <USBD_LL_Init+0x94>)
 8009198:	2202      	movs	r2, #2
 800919a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800919c:	4b17      	ldr	r3, [pc, #92]	; (80091fc <USBD_LL_Init+0x94>)
 800919e:	2200      	movs	r2, #0
 80091a0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80091a2:	4b16      	ldr	r3, [pc, #88]	; (80091fc <USBD_LL_Init+0x94>)
 80091a4:	2202      	movs	r2, #2
 80091a6:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80091a8:	4b14      	ldr	r3, [pc, #80]	; (80091fc <USBD_LL_Init+0x94>)
 80091aa:	2201      	movs	r2, #1
 80091ac:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80091ae:	4b13      	ldr	r3, [pc, #76]	; (80091fc <USBD_LL_Init+0x94>)
 80091b0:	2200      	movs	r2, #0
 80091b2:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80091b4:	4b11      	ldr	r3, [pc, #68]	; (80091fc <USBD_LL_Init+0x94>)
 80091b6:	2200      	movs	r2, #0
 80091b8:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80091ba:	4b10      	ldr	r3, [pc, #64]	; (80091fc <USBD_LL_Init+0x94>)
 80091bc:	2200      	movs	r2, #0
 80091be:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80091c0:	4b0e      	ldr	r3, [pc, #56]	; (80091fc <USBD_LL_Init+0x94>)
 80091c2:	2200      	movs	r2, #0
 80091c4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80091c6:	480d      	ldr	r0, [pc, #52]	; (80091fc <USBD_LL_Init+0x94>)
 80091c8:	f7f9 f92b 	bl	8002422 <HAL_PCD_Init>
 80091cc:	4603      	mov	r3, r0
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d001      	beq.n	80091d6 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80091d2:	f7f7 fb31 	bl	8000838 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80091d6:	2180      	movs	r1, #128	; 0x80
 80091d8:	4808      	ldr	r0, [pc, #32]	; (80091fc <USBD_LL_Init+0x94>)
 80091da:	f7fa fa88 	bl	80036ee <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80091de:	2240      	movs	r2, #64	; 0x40
 80091e0:	2100      	movs	r1, #0
 80091e2:	4806      	ldr	r0, [pc, #24]	; (80091fc <USBD_LL_Init+0x94>)
 80091e4:	f7fa fa3c 	bl	8003660 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80091e8:	2280      	movs	r2, #128	; 0x80
 80091ea:	2101      	movs	r1, #1
 80091ec:	4803      	ldr	r0, [pc, #12]	; (80091fc <USBD_LL_Init+0x94>)
 80091ee:	f7fa fa37 	bl	8003660 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80091f2:	2300      	movs	r3, #0
}
 80091f4:	4618      	mov	r0, r3
 80091f6:	3708      	adds	r7, #8
 80091f8:	46bd      	mov	sp, r7
 80091fa:	bd80      	pop	{r7, pc}
 80091fc:	20001308 	.word	0x20001308

08009200 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009200:	b580      	push	{r7, lr}
 8009202:	b084      	sub	sp, #16
 8009204:	af00      	add	r7, sp, #0
 8009206:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009208:	2300      	movs	r3, #0
 800920a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800920c:	2300      	movs	r3, #0
 800920e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009216:	4618      	mov	r0, r3
 8009218:	f7f9 fa20 	bl	800265c <HAL_PCD_Start>
 800921c:	4603      	mov	r3, r0
 800921e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009220:	7bfb      	ldrb	r3, [r7, #15]
 8009222:	4618      	mov	r0, r3
 8009224:	f000 f942 	bl	80094ac <USBD_Get_USB_Status>
 8009228:	4603      	mov	r3, r0
 800922a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800922c:	7bbb      	ldrb	r3, [r7, #14]
}
 800922e:	4618      	mov	r0, r3
 8009230:	3710      	adds	r7, #16
 8009232:	46bd      	mov	sp, r7
 8009234:	bd80      	pop	{r7, pc}

08009236 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009236:	b580      	push	{r7, lr}
 8009238:	b084      	sub	sp, #16
 800923a:	af00      	add	r7, sp, #0
 800923c:	6078      	str	r0, [r7, #4]
 800923e:	4608      	mov	r0, r1
 8009240:	4611      	mov	r1, r2
 8009242:	461a      	mov	r2, r3
 8009244:	4603      	mov	r3, r0
 8009246:	70fb      	strb	r3, [r7, #3]
 8009248:	460b      	mov	r3, r1
 800924a:	70bb      	strb	r3, [r7, #2]
 800924c:	4613      	mov	r3, r2
 800924e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009250:	2300      	movs	r3, #0
 8009252:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009254:	2300      	movs	r3, #0
 8009256:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800925e:	78bb      	ldrb	r3, [r7, #2]
 8009260:	883a      	ldrh	r2, [r7, #0]
 8009262:	78f9      	ldrb	r1, [r7, #3]
 8009264:	f7f9 fe04 	bl	8002e70 <HAL_PCD_EP_Open>
 8009268:	4603      	mov	r3, r0
 800926a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800926c:	7bfb      	ldrb	r3, [r7, #15]
 800926e:	4618      	mov	r0, r3
 8009270:	f000 f91c 	bl	80094ac <USBD_Get_USB_Status>
 8009274:	4603      	mov	r3, r0
 8009276:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009278:	7bbb      	ldrb	r3, [r7, #14]
}
 800927a:	4618      	mov	r0, r3
 800927c:	3710      	adds	r7, #16
 800927e:	46bd      	mov	sp, r7
 8009280:	bd80      	pop	{r7, pc}

08009282 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009282:	b580      	push	{r7, lr}
 8009284:	b084      	sub	sp, #16
 8009286:	af00      	add	r7, sp, #0
 8009288:	6078      	str	r0, [r7, #4]
 800928a:	460b      	mov	r3, r1
 800928c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800928e:	2300      	movs	r3, #0
 8009290:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009292:	2300      	movs	r3, #0
 8009294:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800929c:	78fa      	ldrb	r2, [r7, #3]
 800929e:	4611      	mov	r1, r2
 80092a0:	4618      	mov	r0, r3
 80092a2:	f7f9 fe4d 	bl	8002f40 <HAL_PCD_EP_Close>
 80092a6:	4603      	mov	r3, r0
 80092a8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80092aa:	7bfb      	ldrb	r3, [r7, #15]
 80092ac:	4618      	mov	r0, r3
 80092ae:	f000 f8fd 	bl	80094ac <USBD_Get_USB_Status>
 80092b2:	4603      	mov	r3, r0
 80092b4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80092b6:	7bbb      	ldrb	r3, [r7, #14]
}
 80092b8:	4618      	mov	r0, r3
 80092ba:	3710      	adds	r7, #16
 80092bc:	46bd      	mov	sp, r7
 80092be:	bd80      	pop	{r7, pc}

080092c0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80092c0:	b580      	push	{r7, lr}
 80092c2:	b084      	sub	sp, #16
 80092c4:	af00      	add	r7, sp, #0
 80092c6:	6078      	str	r0, [r7, #4]
 80092c8:	460b      	mov	r3, r1
 80092ca:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80092cc:	2300      	movs	r3, #0
 80092ce:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80092d0:	2300      	movs	r3, #0
 80092d2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80092da:	78fa      	ldrb	r2, [r7, #3]
 80092dc:	4611      	mov	r1, r2
 80092de:	4618      	mov	r0, r3
 80092e0:	f7f9 ff25 	bl	800312e <HAL_PCD_EP_SetStall>
 80092e4:	4603      	mov	r3, r0
 80092e6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80092e8:	7bfb      	ldrb	r3, [r7, #15]
 80092ea:	4618      	mov	r0, r3
 80092ec:	f000 f8de 	bl	80094ac <USBD_Get_USB_Status>
 80092f0:	4603      	mov	r3, r0
 80092f2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80092f4:	7bbb      	ldrb	r3, [r7, #14]
}
 80092f6:	4618      	mov	r0, r3
 80092f8:	3710      	adds	r7, #16
 80092fa:	46bd      	mov	sp, r7
 80092fc:	bd80      	pop	{r7, pc}

080092fe <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80092fe:	b580      	push	{r7, lr}
 8009300:	b084      	sub	sp, #16
 8009302:	af00      	add	r7, sp, #0
 8009304:	6078      	str	r0, [r7, #4]
 8009306:	460b      	mov	r3, r1
 8009308:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800930a:	2300      	movs	r3, #0
 800930c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800930e:	2300      	movs	r3, #0
 8009310:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009318:	78fa      	ldrb	r2, [r7, #3]
 800931a:	4611      	mov	r1, r2
 800931c:	4618      	mov	r0, r3
 800931e:	f7f9 ff6a 	bl	80031f6 <HAL_PCD_EP_ClrStall>
 8009322:	4603      	mov	r3, r0
 8009324:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009326:	7bfb      	ldrb	r3, [r7, #15]
 8009328:	4618      	mov	r0, r3
 800932a:	f000 f8bf 	bl	80094ac <USBD_Get_USB_Status>
 800932e:	4603      	mov	r3, r0
 8009330:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009332:	7bbb      	ldrb	r3, [r7, #14]
}
 8009334:	4618      	mov	r0, r3
 8009336:	3710      	adds	r7, #16
 8009338:	46bd      	mov	sp, r7
 800933a:	bd80      	pop	{r7, pc}

0800933c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800933c:	b480      	push	{r7}
 800933e:	b085      	sub	sp, #20
 8009340:	af00      	add	r7, sp, #0
 8009342:	6078      	str	r0, [r7, #4]
 8009344:	460b      	mov	r3, r1
 8009346:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800934e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009350:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009354:	2b00      	cmp	r3, #0
 8009356:	da0b      	bge.n	8009370 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009358:	78fb      	ldrb	r3, [r7, #3]
 800935a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800935e:	68f9      	ldr	r1, [r7, #12]
 8009360:	4613      	mov	r3, r2
 8009362:	00db      	lsls	r3, r3, #3
 8009364:	1a9b      	subs	r3, r3, r2
 8009366:	009b      	lsls	r3, r3, #2
 8009368:	440b      	add	r3, r1
 800936a:	333e      	adds	r3, #62	; 0x3e
 800936c:	781b      	ldrb	r3, [r3, #0]
 800936e:	e00b      	b.n	8009388 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009370:	78fb      	ldrb	r3, [r7, #3]
 8009372:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009376:	68f9      	ldr	r1, [r7, #12]
 8009378:	4613      	mov	r3, r2
 800937a:	00db      	lsls	r3, r3, #3
 800937c:	1a9b      	subs	r3, r3, r2
 800937e:	009b      	lsls	r3, r3, #2
 8009380:	440b      	add	r3, r1
 8009382:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8009386:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009388:	4618      	mov	r0, r3
 800938a:	3714      	adds	r7, #20
 800938c:	46bd      	mov	sp, r7
 800938e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009392:	4770      	bx	lr

08009394 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009394:	b580      	push	{r7, lr}
 8009396:	b084      	sub	sp, #16
 8009398:	af00      	add	r7, sp, #0
 800939a:	6078      	str	r0, [r7, #4]
 800939c:	460b      	mov	r3, r1
 800939e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80093a0:	2300      	movs	r3, #0
 80093a2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80093a4:	2300      	movs	r3, #0
 80093a6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80093ae:	78fa      	ldrb	r2, [r7, #3]
 80093b0:	4611      	mov	r1, r2
 80093b2:	4618      	mov	r0, r3
 80093b4:	f7f9 fd37 	bl	8002e26 <HAL_PCD_SetAddress>
 80093b8:	4603      	mov	r3, r0
 80093ba:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80093bc:	7bfb      	ldrb	r3, [r7, #15]
 80093be:	4618      	mov	r0, r3
 80093c0:	f000 f874 	bl	80094ac <USBD_Get_USB_Status>
 80093c4:	4603      	mov	r3, r0
 80093c6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80093c8:	7bbb      	ldrb	r3, [r7, #14]
}
 80093ca:	4618      	mov	r0, r3
 80093cc:	3710      	adds	r7, #16
 80093ce:	46bd      	mov	sp, r7
 80093d0:	bd80      	pop	{r7, pc}

080093d2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80093d2:	b580      	push	{r7, lr}
 80093d4:	b086      	sub	sp, #24
 80093d6:	af00      	add	r7, sp, #0
 80093d8:	60f8      	str	r0, [r7, #12]
 80093da:	607a      	str	r2, [r7, #4]
 80093dc:	603b      	str	r3, [r7, #0]
 80093de:	460b      	mov	r3, r1
 80093e0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80093e2:	2300      	movs	r3, #0
 80093e4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80093e6:	2300      	movs	r3, #0
 80093e8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80093f0:	7af9      	ldrb	r1, [r7, #11]
 80093f2:	683b      	ldr	r3, [r7, #0]
 80093f4:	687a      	ldr	r2, [r7, #4]
 80093f6:	f7f9 fe50 	bl	800309a <HAL_PCD_EP_Transmit>
 80093fa:	4603      	mov	r3, r0
 80093fc:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80093fe:	7dfb      	ldrb	r3, [r7, #23]
 8009400:	4618      	mov	r0, r3
 8009402:	f000 f853 	bl	80094ac <USBD_Get_USB_Status>
 8009406:	4603      	mov	r3, r0
 8009408:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800940a:	7dbb      	ldrb	r3, [r7, #22]
}
 800940c:	4618      	mov	r0, r3
 800940e:	3718      	adds	r7, #24
 8009410:	46bd      	mov	sp, r7
 8009412:	bd80      	pop	{r7, pc}

08009414 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009414:	b580      	push	{r7, lr}
 8009416:	b086      	sub	sp, #24
 8009418:	af00      	add	r7, sp, #0
 800941a:	60f8      	str	r0, [r7, #12]
 800941c:	607a      	str	r2, [r7, #4]
 800941e:	603b      	str	r3, [r7, #0]
 8009420:	460b      	mov	r3, r1
 8009422:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009424:	2300      	movs	r3, #0
 8009426:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009428:	2300      	movs	r3, #0
 800942a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009432:	7af9      	ldrb	r1, [r7, #11]
 8009434:	683b      	ldr	r3, [r7, #0]
 8009436:	687a      	ldr	r2, [r7, #4]
 8009438:	f7f9 fdcc 	bl	8002fd4 <HAL_PCD_EP_Receive>
 800943c:	4603      	mov	r3, r0
 800943e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009440:	7dfb      	ldrb	r3, [r7, #23]
 8009442:	4618      	mov	r0, r3
 8009444:	f000 f832 	bl	80094ac <USBD_Get_USB_Status>
 8009448:	4603      	mov	r3, r0
 800944a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800944c:	7dbb      	ldrb	r3, [r7, #22]
}
 800944e:	4618      	mov	r0, r3
 8009450:	3718      	adds	r7, #24
 8009452:	46bd      	mov	sp, r7
 8009454:	bd80      	pop	{r7, pc}

08009456 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009456:	b580      	push	{r7, lr}
 8009458:	b082      	sub	sp, #8
 800945a:	af00      	add	r7, sp, #0
 800945c:	6078      	str	r0, [r7, #4]
 800945e:	460b      	mov	r3, r1
 8009460:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009468:	78fa      	ldrb	r2, [r7, #3]
 800946a:	4611      	mov	r1, r2
 800946c:	4618      	mov	r0, r3
 800946e:	f7f9 fdfc 	bl	800306a <HAL_PCD_EP_GetRxCount>
 8009472:	4603      	mov	r3, r0
}
 8009474:	4618      	mov	r0, r3
 8009476:	3708      	adds	r7, #8
 8009478:	46bd      	mov	sp, r7
 800947a:	bd80      	pop	{r7, pc}

0800947c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800947c:	b480      	push	{r7}
 800947e:	b083      	sub	sp, #12
 8009480:	af00      	add	r7, sp, #0
 8009482:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009484:	4b03      	ldr	r3, [pc, #12]	; (8009494 <USBD_static_malloc+0x18>)
}
 8009486:	4618      	mov	r0, r3
 8009488:	370c      	adds	r7, #12
 800948a:	46bd      	mov	sp, r7
 800948c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009490:	4770      	bx	lr
 8009492:	bf00      	nop
 8009494:	20001710 	.word	0x20001710

08009498 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009498:	b480      	push	{r7}
 800949a:	b083      	sub	sp, #12
 800949c:	af00      	add	r7, sp, #0
 800949e:	6078      	str	r0, [r7, #4]

}
 80094a0:	bf00      	nop
 80094a2:	370c      	adds	r7, #12
 80094a4:	46bd      	mov	sp, r7
 80094a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094aa:	4770      	bx	lr

080094ac <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80094ac:	b480      	push	{r7}
 80094ae:	b085      	sub	sp, #20
 80094b0:	af00      	add	r7, sp, #0
 80094b2:	4603      	mov	r3, r0
 80094b4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80094b6:	2300      	movs	r3, #0
 80094b8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80094ba:	79fb      	ldrb	r3, [r7, #7]
 80094bc:	2b03      	cmp	r3, #3
 80094be:	d817      	bhi.n	80094f0 <USBD_Get_USB_Status+0x44>
 80094c0:	a201      	add	r2, pc, #4	; (adr r2, 80094c8 <USBD_Get_USB_Status+0x1c>)
 80094c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094c6:	bf00      	nop
 80094c8:	080094d9 	.word	0x080094d9
 80094cc:	080094df 	.word	0x080094df
 80094d0:	080094e5 	.word	0x080094e5
 80094d4:	080094eb 	.word	0x080094eb
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80094d8:	2300      	movs	r3, #0
 80094da:	73fb      	strb	r3, [r7, #15]
    break;
 80094dc:	e00b      	b.n	80094f6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80094de:	2303      	movs	r3, #3
 80094e0:	73fb      	strb	r3, [r7, #15]
    break;
 80094e2:	e008      	b.n	80094f6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80094e4:	2301      	movs	r3, #1
 80094e6:	73fb      	strb	r3, [r7, #15]
    break;
 80094e8:	e005      	b.n	80094f6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80094ea:	2303      	movs	r3, #3
 80094ec:	73fb      	strb	r3, [r7, #15]
    break;
 80094ee:	e002      	b.n	80094f6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80094f0:	2303      	movs	r3, #3
 80094f2:	73fb      	strb	r3, [r7, #15]
    break;
 80094f4:	bf00      	nop
  }
  return usb_status;
 80094f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80094f8:	4618      	mov	r0, r3
 80094fa:	3714      	adds	r7, #20
 80094fc:	46bd      	mov	sp, r7
 80094fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009502:	4770      	bx	lr

08009504 <main>:
 */

#include "main.h"

int main(void)
{
 8009504:	b580      	push	{r7, lr}
 8009506:	af00      	add	r7, sp, #0

	hwInit();
 8009508:	f7f7 fea6 	bl	8001258 <hwInit>
	apInit();
 800950c:	f7f7 f83a 	bl	8000584 <apInit>

	apMain();
 8009510:	f7f7 f846 	bl	80005a0 <apMain>
	return 0;
 8009514:	2300      	movs	r3, #0
}
 8009516:	4618      	mov	r0, r3
 8009518:	bd80      	pop	{r7, pc}
	...

0800951c <__errno>:
 800951c:	4b01      	ldr	r3, [pc, #4]	; (8009524 <__errno+0x8>)
 800951e:	6818      	ldr	r0, [r3, #0]
 8009520:	4770      	bx	lr
 8009522:	bf00      	nop
 8009524:	200001a8 	.word	0x200001a8

08009528 <__libc_init_array>:
 8009528:	b570      	push	{r4, r5, r6, lr}
 800952a:	4d0d      	ldr	r5, [pc, #52]	; (8009560 <__libc_init_array+0x38>)
 800952c:	4c0d      	ldr	r4, [pc, #52]	; (8009564 <__libc_init_array+0x3c>)
 800952e:	1b64      	subs	r4, r4, r5
 8009530:	10a4      	asrs	r4, r4, #2
 8009532:	2600      	movs	r6, #0
 8009534:	42a6      	cmp	r6, r4
 8009536:	d109      	bne.n	800954c <__libc_init_array+0x24>
 8009538:	4d0b      	ldr	r5, [pc, #44]	; (8009568 <__libc_init_array+0x40>)
 800953a:	4c0c      	ldr	r4, [pc, #48]	; (800956c <__libc_init_array+0x44>)
 800953c:	f000 fca8 	bl	8009e90 <_init>
 8009540:	1b64      	subs	r4, r4, r5
 8009542:	10a4      	asrs	r4, r4, #2
 8009544:	2600      	movs	r6, #0
 8009546:	42a6      	cmp	r6, r4
 8009548:	d105      	bne.n	8009556 <__libc_init_array+0x2e>
 800954a:	bd70      	pop	{r4, r5, r6, pc}
 800954c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009550:	4798      	blx	r3
 8009552:	3601      	adds	r6, #1
 8009554:	e7ee      	b.n	8009534 <__libc_init_array+0xc>
 8009556:	f855 3b04 	ldr.w	r3, [r5], #4
 800955a:	4798      	blx	r3
 800955c:	3601      	adds	r6, #1
 800955e:	e7f2      	b.n	8009546 <__libc_init_array+0x1e>
 8009560:	08009f5c 	.word	0x08009f5c
 8009564:	08009f5c 	.word	0x08009f5c
 8009568:	08009f5c 	.word	0x08009f5c
 800956c:	08009f60 	.word	0x08009f60

08009570 <memset>:
 8009570:	4402      	add	r2, r0
 8009572:	4603      	mov	r3, r0
 8009574:	4293      	cmp	r3, r2
 8009576:	d100      	bne.n	800957a <memset+0xa>
 8009578:	4770      	bx	lr
 800957a:	f803 1b01 	strb.w	r1, [r3], #1
 800957e:	e7f9      	b.n	8009574 <memset+0x4>

08009580 <_vsniprintf_r>:
 8009580:	b530      	push	{r4, r5, lr}
 8009582:	4614      	mov	r4, r2
 8009584:	2c00      	cmp	r4, #0
 8009586:	b09b      	sub	sp, #108	; 0x6c
 8009588:	4605      	mov	r5, r0
 800958a:	461a      	mov	r2, r3
 800958c:	da05      	bge.n	800959a <_vsniprintf_r+0x1a>
 800958e:	238b      	movs	r3, #139	; 0x8b
 8009590:	6003      	str	r3, [r0, #0]
 8009592:	f04f 30ff 	mov.w	r0, #4294967295
 8009596:	b01b      	add	sp, #108	; 0x6c
 8009598:	bd30      	pop	{r4, r5, pc}
 800959a:	f44f 7302 	mov.w	r3, #520	; 0x208
 800959e:	f8ad 300c 	strh.w	r3, [sp, #12]
 80095a2:	bf14      	ite	ne
 80095a4:	f104 33ff 	addne.w	r3, r4, #4294967295
 80095a8:	4623      	moveq	r3, r4
 80095aa:	9302      	str	r3, [sp, #8]
 80095ac:	9305      	str	r3, [sp, #20]
 80095ae:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80095b2:	9100      	str	r1, [sp, #0]
 80095b4:	9104      	str	r1, [sp, #16]
 80095b6:	f8ad 300e 	strh.w	r3, [sp, #14]
 80095ba:	4669      	mov	r1, sp
 80095bc:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80095be:	f000 f875 	bl	80096ac <_svfiprintf_r>
 80095c2:	1c43      	adds	r3, r0, #1
 80095c4:	bfbc      	itt	lt
 80095c6:	238b      	movlt	r3, #139	; 0x8b
 80095c8:	602b      	strlt	r3, [r5, #0]
 80095ca:	2c00      	cmp	r4, #0
 80095cc:	d0e3      	beq.n	8009596 <_vsniprintf_r+0x16>
 80095ce:	9b00      	ldr	r3, [sp, #0]
 80095d0:	2200      	movs	r2, #0
 80095d2:	701a      	strb	r2, [r3, #0]
 80095d4:	e7df      	b.n	8009596 <_vsniprintf_r+0x16>
	...

080095d8 <vsniprintf>:
 80095d8:	b507      	push	{r0, r1, r2, lr}
 80095da:	9300      	str	r3, [sp, #0]
 80095dc:	4613      	mov	r3, r2
 80095de:	460a      	mov	r2, r1
 80095e0:	4601      	mov	r1, r0
 80095e2:	4803      	ldr	r0, [pc, #12]	; (80095f0 <vsniprintf+0x18>)
 80095e4:	6800      	ldr	r0, [r0, #0]
 80095e6:	f7ff ffcb 	bl	8009580 <_vsniprintf_r>
 80095ea:	b003      	add	sp, #12
 80095ec:	f85d fb04 	ldr.w	pc, [sp], #4
 80095f0:	200001a8 	.word	0x200001a8

080095f4 <__ssputs_r>:
 80095f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80095f8:	688e      	ldr	r6, [r1, #8]
 80095fa:	429e      	cmp	r6, r3
 80095fc:	4682      	mov	sl, r0
 80095fe:	460c      	mov	r4, r1
 8009600:	4690      	mov	r8, r2
 8009602:	461f      	mov	r7, r3
 8009604:	d838      	bhi.n	8009678 <__ssputs_r+0x84>
 8009606:	898a      	ldrh	r2, [r1, #12]
 8009608:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800960c:	d032      	beq.n	8009674 <__ssputs_r+0x80>
 800960e:	6825      	ldr	r5, [r4, #0]
 8009610:	6909      	ldr	r1, [r1, #16]
 8009612:	eba5 0901 	sub.w	r9, r5, r1
 8009616:	6965      	ldr	r5, [r4, #20]
 8009618:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800961c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009620:	3301      	adds	r3, #1
 8009622:	444b      	add	r3, r9
 8009624:	106d      	asrs	r5, r5, #1
 8009626:	429d      	cmp	r5, r3
 8009628:	bf38      	it	cc
 800962a:	461d      	movcc	r5, r3
 800962c:	0553      	lsls	r3, r2, #21
 800962e:	d531      	bpl.n	8009694 <__ssputs_r+0xa0>
 8009630:	4629      	mov	r1, r5
 8009632:	f000 fb63 	bl	8009cfc <_malloc_r>
 8009636:	4606      	mov	r6, r0
 8009638:	b950      	cbnz	r0, 8009650 <__ssputs_r+0x5c>
 800963a:	230c      	movs	r3, #12
 800963c:	f8ca 3000 	str.w	r3, [sl]
 8009640:	89a3      	ldrh	r3, [r4, #12]
 8009642:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009646:	81a3      	strh	r3, [r4, #12]
 8009648:	f04f 30ff 	mov.w	r0, #4294967295
 800964c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009650:	6921      	ldr	r1, [r4, #16]
 8009652:	464a      	mov	r2, r9
 8009654:	f000 fabe 	bl	8009bd4 <memcpy>
 8009658:	89a3      	ldrh	r3, [r4, #12]
 800965a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800965e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009662:	81a3      	strh	r3, [r4, #12]
 8009664:	6126      	str	r6, [r4, #16]
 8009666:	6165      	str	r5, [r4, #20]
 8009668:	444e      	add	r6, r9
 800966a:	eba5 0509 	sub.w	r5, r5, r9
 800966e:	6026      	str	r6, [r4, #0]
 8009670:	60a5      	str	r5, [r4, #8]
 8009672:	463e      	mov	r6, r7
 8009674:	42be      	cmp	r6, r7
 8009676:	d900      	bls.n	800967a <__ssputs_r+0x86>
 8009678:	463e      	mov	r6, r7
 800967a:	6820      	ldr	r0, [r4, #0]
 800967c:	4632      	mov	r2, r6
 800967e:	4641      	mov	r1, r8
 8009680:	f000 fab6 	bl	8009bf0 <memmove>
 8009684:	68a3      	ldr	r3, [r4, #8]
 8009686:	1b9b      	subs	r3, r3, r6
 8009688:	60a3      	str	r3, [r4, #8]
 800968a:	6823      	ldr	r3, [r4, #0]
 800968c:	4433      	add	r3, r6
 800968e:	6023      	str	r3, [r4, #0]
 8009690:	2000      	movs	r0, #0
 8009692:	e7db      	b.n	800964c <__ssputs_r+0x58>
 8009694:	462a      	mov	r2, r5
 8009696:	f000 fba5 	bl	8009de4 <_realloc_r>
 800969a:	4606      	mov	r6, r0
 800969c:	2800      	cmp	r0, #0
 800969e:	d1e1      	bne.n	8009664 <__ssputs_r+0x70>
 80096a0:	6921      	ldr	r1, [r4, #16]
 80096a2:	4650      	mov	r0, sl
 80096a4:	f000 fabe 	bl	8009c24 <_free_r>
 80096a8:	e7c7      	b.n	800963a <__ssputs_r+0x46>
	...

080096ac <_svfiprintf_r>:
 80096ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096b0:	4698      	mov	r8, r3
 80096b2:	898b      	ldrh	r3, [r1, #12]
 80096b4:	061b      	lsls	r3, r3, #24
 80096b6:	b09d      	sub	sp, #116	; 0x74
 80096b8:	4607      	mov	r7, r0
 80096ba:	460d      	mov	r5, r1
 80096bc:	4614      	mov	r4, r2
 80096be:	d50e      	bpl.n	80096de <_svfiprintf_r+0x32>
 80096c0:	690b      	ldr	r3, [r1, #16]
 80096c2:	b963      	cbnz	r3, 80096de <_svfiprintf_r+0x32>
 80096c4:	2140      	movs	r1, #64	; 0x40
 80096c6:	f000 fb19 	bl	8009cfc <_malloc_r>
 80096ca:	6028      	str	r0, [r5, #0]
 80096cc:	6128      	str	r0, [r5, #16]
 80096ce:	b920      	cbnz	r0, 80096da <_svfiprintf_r+0x2e>
 80096d0:	230c      	movs	r3, #12
 80096d2:	603b      	str	r3, [r7, #0]
 80096d4:	f04f 30ff 	mov.w	r0, #4294967295
 80096d8:	e0d1      	b.n	800987e <_svfiprintf_r+0x1d2>
 80096da:	2340      	movs	r3, #64	; 0x40
 80096dc:	616b      	str	r3, [r5, #20]
 80096de:	2300      	movs	r3, #0
 80096e0:	9309      	str	r3, [sp, #36]	; 0x24
 80096e2:	2320      	movs	r3, #32
 80096e4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80096e8:	f8cd 800c 	str.w	r8, [sp, #12]
 80096ec:	2330      	movs	r3, #48	; 0x30
 80096ee:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009898 <_svfiprintf_r+0x1ec>
 80096f2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80096f6:	f04f 0901 	mov.w	r9, #1
 80096fa:	4623      	mov	r3, r4
 80096fc:	469a      	mov	sl, r3
 80096fe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009702:	b10a      	cbz	r2, 8009708 <_svfiprintf_r+0x5c>
 8009704:	2a25      	cmp	r2, #37	; 0x25
 8009706:	d1f9      	bne.n	80096fc <_svfiprintf_r+0x50>
 8009708:	ebba 0b04 	subs.w	fp, sl, r4
 800970c:	d00b      	beq.n	8009726 <_svfiprintf_r+0x7a>
 800970e:	465b      	mov	r3, fp
 8009710:	4622      	mov	r2, r4
 8009712:	4629      	mov	r1, r5
 8009714:	4638      	mov	r0, r7
 8009716:	f7ff ff6d 	bl	80095f4 <__ssputs_r>
 800971a:	3001      	adds	r0, #1
 800971c:	f000 80aa 	beq.w	8009874 <_svfiprintf_r+0x1c8>
 8009720:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009722:	445a      	add	r2, fp
 8009724:	9209      	str	r2, [sp, #36]	; 0x24
 8009726:	f89a 3000 	ldrb.w	r3, [sl]
 800972a:	2b00      	cmp	r3, #0
 800972c:	f000 80a2 	beq.w	8009874 <_svfiprintf_r+0x1c8>
 8009730:	2300      	movs	r3, #0
 8009732:	f04f 32ff 	mov.w	r2, #4294967295
 8009736:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800973a:	f10a 0a01 	add.w	sl, sl, #1
 800973e:	9304      	str	r3, [sp, #16]
 8009740:	9307      	str	r3, [sp, #28]
 8009742:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009746:	931a      	str	r3, [sp, #104]	; 0x68
 8009748:	4654      	mov	r4, sl
 800974a:	2205      	movs	r2, #5
 800974c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009750:	4851      	ldr	r0, [pc, #324]	; (8009898 <_svfiprintf_r+0x1ec>)
 8009752:	f7f6 fd45 	bl	80001e0 <memchr>
 8009756:	9a04      	ldr	r2, [sp, #16]
 8009758:	b9d8      	cbnz	r0, 8009792 <_svfiprintf_r+0xe6>
 800975a:	06d0      	lsls	r0, r2, #27
 800975c:	bf44      	itt	mi
 800975e:	2320      	movmi	r3, #32
 8009760:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009764:	0711      	lsls	r1, r2, #28
 8009766:	bf44      	itt	mi
 8009768:	232b      	movmi	r3, #43	; 0x2b
 800976a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800976e:	f89a 3000 	ldrb.w	r3, [sl]
 8009772:	2b2a      	cmp	r3, #42	; 0x2a
 8009774:	d015      	beq.n	80097a2 <_svfiprintf_r+0xf6>
 8009776:	9a07      	ldr	r2, [sp, #28]
 8009778:	4654      	mov	r4, sl
 800977a:	2000      	movs	r0, #0
 800977c:	f04f 0c0a 	mov.w	ip, #10
 8009780:	4621      	mov	r1, r4
 8009782:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009786:	3b30      	subs	r3, #48	; 0x30
 8009788:	2b09      	cmp	r3, #9
 800978a:	d94e      	bls.n	800982a <_svfiprintf_r+0x17e>
 800978c:	b1b0      	cbz	r0, 80097bc <_svfiprintf_r+0x110>
 800978e:	9207      	str	r2, [sp, #28]
 8009790:	e014      	b.n	80097bc <_svfiprintf_r+0x110>
 8009792:	eba0 0308 	sub.w	r3, r0, r8
 8009796:	fa09 f303 	lsl.w	r3, r9, r3
 800979a:	4313      	orrs	r3, r2
 800979c:	9304      	str	r3, [sp, #16]
 800979e:	46a2      	mov	sl, r4
 80097a0:	e7d2      	b.n	8009748 <_svfiprintf_r+0x9c>
 80097a2:	9b03      	ldr	r3, [sp, #12]
 80097a4:	1d19      	adds	r1, r3, #4
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	9103      	str	r1, [sp, #12]
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	bfbb      	ittet	lt
 80097ae:	425b      	neglt	r3, r3
 80097b0:	f042 0202 	orrlt.w	r2, r2, #2
 80097b4:	9307      	strge	r3, [sp, #28]
 80097b6:	9307      	strlt	r3, [sp, #28]
 80097b8:	bfb8      	it	lt
 80097ba:	9204      	strlt	r2, [sp, #16]
 80097bc:	7823      	ldrb	r3, [r4, #0]
 80097be:	2b2e      	cmp	r3, #46	; 0x2e
 80097c0:	d10c      	bne.n	80097dc <_svfiprintf_r+0x130>
 80097c2:	7863      	ldrb	r3, [r4, #1]
 80097c4:	2b2a      	cmp	r3, #42	; 0x2a
 80097c6:	d135      	bne.n	8009834 <_svfiprintf_r+0x188>
 80097c8:	9b03      	ldr	r3, [sp, #12]
 80097ca:	1d1a      	adds	r2, r3, #4
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	9203      	str	r2, [sp, #12]
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	bfb8      	it	lt
 80097d4:	f04f 33ff 	movlt.w	r3, #4294967295
 80097d8:	3402      	adds	r4, #2
 80097da:	9305      	str	r3, [sp, #20]
 80097dc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80098a8 <_svfiprintf_r+0x1fc>
 80097e0:	7821      	ldrb	r1, [r4, #0]
 80097e2:	2203      	movs	r2, #3
 80097e4:	4650      	mov	r0, sl
 80097e6:	f7f6 fcfb 	bl	80001e0 <memchr>
 80097ea:	b140      	cbz	r0, 80097fe <_svfiprintf_r+0x152>
 80097ec:	2340      	movs	r3, #64	; 0x40
 80097ee:	eba0 000a 	sub.w	r0, r0, sl
 80097f2:	fa03 f000 	lsl.w	r0, r3, r0
 80097f6:	9b04      	ldr	r3, [sp, #16]
 80097f8:	4303      	orrs	r3, r0
 80097fa:	3401      	adds	r4, #1
 80097fc:	9304      	str	r3, [sp, #16]
 80097fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009802:	4826      	ldr	r0, [pc, #152]	; (800989c <_svfiprintf_r+0x1f0>)
 8009804:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009808:	2206      	movs	r2, #6
 800980a:	f7f6 fce9 	bl	80001e0 <memchr>
 800980e:	2800      	cmp	r0, #0
 8009810:	d038      	beq.n	8009884 <_svfiprintf_r+0x1d8>
 8009812:	4b23      	ldr	r3, [pc, #140]	; (80098a0 <_svfiprintf_r+0x1f4>)
 8009814:	bb1b      	cbnz	r3, 800985e <_svfiprintf_r+0x1b2>
 8009816:	9b03      	ldr	r3, [sp, #12]
 8009818:	3307      	adds	r3, #7
 800981a:	f023 0307 	bic.w	r3, r3, #7
 800981e:	3308      	adds	r3, #8
 8009820:	9303      	str	r3, [sp, #12]
 8009822:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009824:	4433      	add	r3, r6
 8009826:	9309      	str	r3, [sp, #36]	; 0x24
 8009828:	e767      	b.n	80096fa <_svfiprintf_r+0x4e>
 800982a:	fb0c 3202 	mla	r2, ip, r2, r3
 800982e:	460c      	mov	r4, r1
 8009830:	2001      	movs	r0, #1
 8009832:	e7a5      	b.n	8009780 <_svfiprintf_r+0xd4>
 8009834:	2300      	movs	r3, #0
 8009836:	3401      	adds	r4, #1
 8009838:	9305      	str	r3, [sp, #20]
 800983a:	4619      	mov	r1, r3
 800983c:	f04f 0c0a 	mov.w	ip, #10
 8009840:	4620      	mov	r0, r4
 8009842:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009846:	3a30      	subs	r2, #48	; 0x30
 8009848:	2a09      	cmp	r2, #9
 800984a:	d903      	bls.n	8009854 <_svfiprintf_r+0x1a8>
 800984c:	2b00      	cmp	r3, #0
 800984e:	d0c5      	beq.n	80097dc <_svfiprintf_r+0x130>
 8009850:	9105      	str	r1, [sp, #20]
 8009852:	e7c3      	b.n	80097dc <_svfiprintf_r+0x130>
 8009854:	fb0c 2101 	mla	r1, ip, r1, r2
 8009858:	4604      	mov	r4, r0
 800985a:	2301      	movs	r3, #1
 800985c:	e7f0      	b.n	8009840 <_svfiprintf_r+0x194>
 800985e:	ab03      	add	r3, sp, #12
 8009860:	9300      	str	r3, [sp, #0]
 8009862:	462a      	mov	r2, r5
 8009864:	4b0f      	ldr	r3, [pc, #60]	; (80098a4 <_svfiprintf_r+0x1f8>)
 8009866:	a904      	add	r1, sp, #16
 8009868:	4638      	mov	r0, r7
 800986a:	f3af 8000 	nop.w
 800986e:	1c42      	adds	r2, r0, #1
 8009870:	4606      	mov	r6, r0
 8009872:	d1d6      	bne.n	8009822 <_svfiprintf_r+0x176>
 8009874:	89ab      	ldrh	r3, [r5, #12]
 8009876:	065b      	lsls	r3, r3, #25
 8009878:	f53f af2c 	bmi.w	80096d4 <_svfiprintf_r+0x28>
 800987c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800987e:	b01d      	add	sp, #116	; 0x74
 8009880:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009884:	ab03      	add	r3, sp, #12
 8009886:	9300      	str	r3, [sp, #0]
 8009888:	462a      	mov	r2, r5
 800988a:	4b06      	ldr	r3, [pc, #24]	; (80098a4 <_svfiprintf_r+0x1f8>)
 800988c:	a904      	add	r1, sp, #16
 800988e:	4638      	mov	r0, r7
 8009890:	f000 f87a 	bl	8009988 <_printf_i>
 8009894:	e7eb      	b.n	800986e <_svfiprintf_r+0x1c2>
 8009896:	bf00      	nop
 8009898:	08009f20 	.word	0x08009f20
 800989c:	08009f2a 	.word	0x08009f2a
 80098a0:	00000000 	.word	0x00000000
 80098a4:	080095f5 	.word	0x080095f5
 80098a8:	08009f26 	.word	0x08009f26

080098ac <_printf_common>:
 80098ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80098b0:	4616      	mov	r6, r2
 80098b2:	4699      	mov	r9, r3
 80098b4:	688a      	ldr	r2, [r1, #8]
 80098b6:	690b      	ldr	r3, [r1, #16]
 80098b8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80098bc:	4293      	cmp	r3, r2
 80098be:	bfb8      	it	lt
 80098c0:	4613      	movlt	r3, r2
 80098c2:	6033      	str	r3, [r6, #0]
 80098c4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80098c8:	4607      	mov	r7, r0
 80098ca:	460c      	mov	r4, r1
 80098cc:	b10a      	cbz	r2, 80098d2 <_printf_common+0x26>
 80098ce:	3301      	adds	r3, #1
 80098d0:	6033      	str	r3, [r6, #0]
 80098d2:	6823      	ldr	r3, [r4, #0]
 80098d4:	0699      	lsls	r1, r3, #26
 80098d6:	bf42      	ittt	mi
 80098d8:	6833      	ldrmi	r3, [r6, #0]
 80098da:	3302      	addmi	r3, #2
 80098dc:	6033      	strmi	r3, [r6, #0]
 80098de:	6825      	ldr	r5, [r4, #0]
 80098e0:	f015 0506 	ands.w	r5, r5, #6
 80098e4:	d106      	bne.n	80098f4 <_printf_common+0x48>
 80098e6:	f104 0a19 	add.w	sl, r4, #25
 80098ea:	68e3      	ldr	r3, [r4, #12]
 80098ec:	6832      	ldr	r2, [r6, #0]
 80098ee:	1a9b      	subs	r3, r3, r2
 80098f0:	42ab      	cmp	r3, r5
 80098f2:	dc26      	bgt.n	8009942 <_printf_common+0x96>
 80098f4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80098f8:	1e13      	subs	r3, r2, #0
 80098fa:	6822      	ldr	r2, [r4, #0]
 80098fc:	bf18      	it	ne
 80098fe:	2301      	movne	r3, #1
 8009900:	0692      	lsls	r2, r2, #26
 8009902:	d42b      	bmi.n	800995c <_printf_common+0xb0>
 8009904:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009908:	4649      	mov	r1, r9
 800990a:	4638      	mov	r0, r7
 800990c:	47c0      	blx	r8
 800990e:	3001      	adds	r0, #1
 8009910:	d01e      	beq.n	8009950 <_printf_common+0xa4>
 8009912:	6823      	ldr	r3, [r4, #0]
 8009914:	68e5      	ldr	r5, [r4, #12]
 8009916:	6832      	ldr	r2, [r6, #0]
 8009918:	f003 0306 	and.w	r3, r3, #6
 800991c:	2b04      	cmp	r3, #4
 800991e:	bf08      	it	eq
 8009920:	1aad      	subeq	r5, r5, r2
 8009922:	68a3      	ldr	r3, [r4, #8]
 8009924:	6922      	ldr	r2, [r4, #16]
 8009926:	bf0c      	ite	eq
 8009928:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800992c:	2500      	movne	r5, #0
 800992e:	4293      	cmp	r3, r2
 8009930:	bfc4      	itt	gt
 8009932:	1a9b      	subgt	r3, r3, r2
 8009934:	18ed      	addgt	r5, r5, r3
 8009936:	2600      	movs	r6, #0
 8009938:	341a      	adds	r4, #26
 800993a:	42b5      	cmp	r5, r6
 800993c:	d11a      	bne.n	8009974 <_printf_common+0xc8>
 800993e:	2000      	movs	r0, #0
 8009940:	e008      	b.n	8009954 <_printf_common+0xa8>
 8009942:	2301      	movs	r3, #1
 8009944:	4652      	mov	r2, sl
 8009946:	4649      	mov	r1, r9
 8009948:	4638      	mov	r0, r7
 800994a:	47c0      	blx	r8
 800994c:	3001      	adds	r0, #1
 800994e:	d103      	bne.n	8009958 <_printf_common+0xac>
 8009950:	f04f 30ff 	mov.w	r0, #4294967295
 8009954:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009958:	3501      	adds	r5, #1
 800995a:	e7c6      	b.n	80098ea <_printf_common+0x3e>
 800995c:	18e1      	adds	r1, r4, r3
 800995e:	1c5a      	adds	r2, r3, #1
 8009960:	2030      	movs	r0, #48	; 0x30
 8009962:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009966:	4422      	add	r2, r4
 8009968:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800996c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009970:	3302      	adds	r3, #2
 8009972:	e7c7      	b.n	8009904 <_printf_common+0x58>
 8009974:	2301      	movs	r3, #1
 8009976:	4622      	mov	r2, r4
 8009978:	4649      	mov	r1, r9
 800997a:	4638      	mov	r0, r7
 800997c:	47c0      	blx	r8
 800997e:	3001      	adds	r0, #1
 8009980:	d0e6      	beq.n	8009950 <_printf_common+0xa4>
 8009982:	3601      	adds	r6, #1
 8009984:	e7d9      	b.n	800993a <_printf_common+0x8e>
	...

08009988 <_printf_i>:
 8009988:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800998c:	7e0f      	ldrb	r7, [r1, #24]
 800998e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009990:	2f78      	cmp	r7, #120	; 0x78
 8009992:	4691      	mov	r9, r2
 8009994:	4680      	mov	r8, r0
 8009996:	460c      	mov	r4, r1
 8009998:	469a      	mov	sl, r3
 800999a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800999e:	d807      	bhi.n	80099b0 <_printf_i+0x28>
 80099a0:	2f62      	cmp	r7, #98	; 0x62
 80099a2:	d80a      	bhi.n	80099ba <_printf_i+0x32>
 80099a4:	2f00      	cmp	r7, #0
 80099a6:	f000 80d8 	beq.w	8009b5a <_printf_i+0x1d2>
 80099aa:	2f58      	cmp	r7, #88	; 0x58
 80099ac:	f000 80a3 	beq.w	8009af6 <_printf_i+0x16e>
 80099b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80099b4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80099b8:	e03a      	b.n	8009a30 <_printf_i+0xa8>
 80099ba:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80099be:	2b15      	cmp	r3, #21
 80099c0:	d8f6      	bhi.n	80099b0 <_printf_i+0x28>
 80099c2:	a101      	add	r1, pc, #4	; (adr r1, 80099c8 <_printf_i+0x40>)
 80099c4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80099c8:	08009a21 	.word	0x08009a21
 80099cc:	08009a35 	.word	0x08009a35
 80099d0:	080099b1 	.word	0x080099b1
 80099d4:	080099b1 	.word	0x080099b1
 80099d8:	080099b1 	.word	0x080099b1
 80099dc:	080099b1 	.word	0x080099b1
 80099e0:	08009a35 	.word	0x08009a35
 80099e4:	080099b1 	.word	0x080099b1
 80099e8:	080099b1 	.word	0x080099b1
 80099ec:	080099b1 	.word	0x080099b1
 80099f0:	080099b1 	.word	0x080099b1
 80099f4:	08009b41 	.word	0x08009b41
 80099f8:	08009a65 	.word	0x08009a65
 80099fc:	08009b23 	.word	0x08009b23
 8009a00:	080099b1 	.word	0x080099b1
 8009a04:	080099b1 	.word	0x080099b1
 8009a08:	08009b63 	.word	0x08009b63
 8009a0c:	080099b1 	.word	0x080099b1
 8009a10:	08009a65 	.word	0x08009a65
 8009a14:	080099b1 	.word	0x080099b1
 8009a18:	080099b1 	.word	0x080099b1
 8009a1c:	08009b2b 	.word	0x08009b2b
 8009a20:	682b      	ldr	r3, [r5, #0]
 8009a22:	1d1a      	adds	r2, r3, #4
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	602a      	str	r2, [r5, #0]
 8009a28:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009a2c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009a30:	2301      	movs	r3, #1
 8009a32:	e0a3      	b.n	8009b7c <_printf_i+0x1f4>
 8009a34:	6820      	ldr	r0, [r4, #0]
 8009a36:	6829      	ldr	r1, [r5, #0]
 8009a38:	0606      	lsls	r6, r0, #24
 8009a3a:	f101 0304 	add.w	r3, r1, #4
 8009a3e:	d50a      	bpl.n	8009a56 <_printf_i+0xce>
 8009a40:	680e      	ldr	r6, [r1, #0]
 8009a42:	602b      	str	r3, [r5, #0]
 8009a44:	2e00      	cmp	r6, #0
 8009a46:	da03      	bge.n	8009a50 <_printf_i+0xc8>
 8009a48:	232d      	movs	r3, #45	; 0x2d
 8009a4a:	4276      	negs	r6, r6
 8009a4c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009a50:	485e      	ldr	r0, [pc, #376]	; (8009bcc <_printf_i+0x244>)
 8009a52:	230a      	movs	r3, #10
 8009a54:	e019      	b.n	8009a8a <_printf_i+0x102>
 8009a56:	680e      	ldr	r6, [r1, #0]
 8009a58:	602b      	str	r3, [r5, #0]
 8009a5a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009a5e:	bf18      	it	ne
 8009a60:	b236      	sxthne	r6, r6
 8009a62:	e7ef      	b.n	8009a44 <_printf_i+0xbc>
 8009a64:	682b      	ldr	r3, [r5, #0]
 8009a66:	6820      	ldr	r0, [r4, #0]
 8009a68:	1d19      	adds	r1, r3, #4
 8009a6a:	6029      	str	r1, [r5, #0]
 8009a6c:	0601      	lsls	r1, r0, #24
 8009a6e:	d501      	bpl.n	8009a74 <_printf_i+0xec>
 8009a70:	681e      	ldr	r6, [r3, #0]
 8009a72:	e002      	b.n	8009a7a <_printf_i+0xf2>
 8009a74:	0646      	lsls	r6, r0, #25
 8009a76:	d5fb      	bpl.n	8009a70 <_printf_i+0xe8>
 8009a78:	881e      	ldrh	r6, [r3, #0]
 8009a7a:	4854      	ldr	r0, [pc, #336]	; (8009bcc <_printf_i+0x244>)
 8009a7c:	2f6f      	cmp	r7, #111	; 0x6f
 8009a7e:	bf0c      	ite	eq
 8009a80:	2308      	moveq	r3, #8
 8009a82:	230a      	movne	r3, #10
 8009a84:	2100      	movs	r1, #0
 8009a86:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009a8a:	6865      	ldr	r5, [r4, #4]
 8009a8c:	60a5      	str	r5, [r4, #8]
 8009a8e:	2d00      	cmp	r5, #0
 8009a90:	bfa2      	ittt	ge
 8009a92:	6821      	ldrge	r1, [r4, #0]
 8009a94:	f021 0104 	bicge.w	r1, r1, #4
 8009a98:	6021      	strge	r1, [r4, #0]
 8009a9a:	b90e      	cbnz	r6, 8009aa0 <_printf_i+0x118>
 8009a9c:	2d00      	cmp	r5, #0
 8009a9e:	d04d      	beq.n	8009b3c <_printf_i+0x1b4>
 8009aa0:	4615      	mov	r5, r2
 8009aa2:	fbb6 f1f3 	udiv	r1, r6, r3
 8009aa6:	fb03 6711 	mls	r7, r3, r1, r6
 8009aaa:	5dc7      	ldrb	r7, [r0, r7]
 8009aac:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009ab0:	4637      	mov	r7, r6
 8009ab2:	42bb      	cmp	r3, r7
 8009ab4:	460e      	mov	r6, r1
 8009ab6:	d9f4      	bls.n	8009aa2 <_printf_i+0x11a>
 8009ab8:	2b08      	cmp	r3, #8
 8009aba:	d10b      	bne.n	8009ad4 <_printf_i+0x14c>
 8009abc:	6823      	ldr	r3, [r4, #0]
 8009abe:	07de      	lsls	r6, r3, #31
 8009ac0:	d508      	bpl.n	8009ad4 <_printf_i+0x14c>
 8009ac2:	6923      	ldr	r3, [r4, #16]
 8009ac4:	6861      	ldr	r1, [r4, #4]
 8009ac6:	4299      	cmp	r1, r3
 8009ac8:	bfde      	ittt	le
 8009aca:	2330      	movle	r3, #48	; 0x30
 8009acc:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009ad0:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009ad4:	1b52      	subs	r2, r2, r5
 8009ad6:	6122      	str	r2, [r4, #16]
 8009ad8:	f8cd a000 	str.w	sl, [sp]
 8009adc:	464b      	mov	r3, r9
 8009ade:	aa03      	add	r2, sp, #12
 8009ae0:	4621      	mov	r1, r4
 8009ae2:	4640      	mov	r0, r8
 8009ae4:	f7ff fee2 	bl	80098ac <_printf_common>
 8009ae8:	3001      	adds	r0, #1
 8009aea:	d14c      	bne.n	8009b86 <_printf_i+0x1fe>
 8009aec:	f04f 30ff 	mov.w	r0, #4294967295
 8009af0:	b004      	add	sp, #16
 8009af2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009af6:	4835      	ldr	r0, [pc, #212]	; (8009bcc <_printf_i+0x244>)
 8009af8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009afc:	6829      	ldr	r1, [r5, #0]
 8009afe:	6823      	ldr	r3, [r4, #0]
 8009b00:	f851 6b04 	ldr.w	r6, [r1], #4
 8009b04:	6029      	str	r1, [r5, #0]
 8009b06:	061d      	lsls	r5, r3, #24
 8009b08:	d514      	bpl.n	8009b34 <_printf_i+0x1ac>
 8009b0a:	07df      	lsls	r7, r3, #31
 8009b0c:	bf44      	itt	mi
 8009b0e:	f043 0320 	orrmi.w	r3, r3, #32
 8009b12:	6023      	strmi	r3, [r4, #0]
 8009b14:	b91e      	cbnz	r6, 8009b1e <_printf_i+0x196>
 8009b16:	6823      	ldr	r3, [r4, #0]
 8009b18:	f023 0320 	bic.w	r3, r3, #32
 8009b1c:	6023      	str	r3, [r4, #0]
 8009b1e:	2310      	movs	r3, #16
 8009b20:	e7b0      	b.n	8009a84 <_printf_i+0xfc>
 8009b22:	6823      	ldr	r3, [r4, #0]
 8009b24:	f043 0320 	orr.w	r3, r3, #32
 8009b28:	6023      	str	r3, [r4, #0]
 8009b2a:	2378      	movs	r3, #120	; 0x78
 8009b2c:	4828      	ldr	r0, [pc, #160]	; (8009bd0 <_printf_i+0x248>)
 8009b2e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009b32:	e7e3      	b.n	8009afc <_printf_i+0x174>
 8009b34:	0659      	lsls	r1, r3, #25
 8009b36:	bf48      	it	mi
 8009b38:	b2b6      	uxthmi	r6, r6
 8009b3a:	e7e6      	b.n	8009b0a <_printf_i+0x182>
 8009b3c:	4615      	mov	r5, r2
 8009b3e:	e7bb      	b.n	8009ab8 <_printf_i+0x130>
 8009b40:	682b      	ldr	r3, [r5, #0]
 8009b42:	6826      	ldr	r6, [r4, #0]
 8009b44:	6961      	ldr	r1, [r4, #20]
 8009b46:	1d18      	adds	r0, r3, #4
 8009b48:	6028      	str	r0, [r5, #0]
 8009b4a:	0635      	lsls	r5, r6, #24
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	d501      	bpl.n	8009b54 <_printf_i+0x1cc>
 8009b50:	6019      	str	r1, [r3, #0]
 8009b52:	e002      	b.n	8009b5a <_printf_i+0x1d2>
 8009b54:	0670      	lsls	r0, r6, #25
 8009b56:	d5fb      	bpl.n	8009b50 <_printf_i+0x1c8>
 8009b58:	8019      	strh	r1, [r3, #0]
 8009b5a:	2300      	movs	r3, #0
 8009b5c:	6123      	str	r3, [r4, #16]
 8009b5e:	4615      	mov	r5, r2
 8009b60:	e7ba      	b.n	8009ad8 <_printf_i+0x150>
 8009b62:	682b      	ldr	r3, [r5, #0]
 8009b64:	1d1a      	adds	r2, r3, #4
 8009b66:	602a      	str	r2, [r5, #0]
 8009b68:	681d      	ldr	r5, [r3, #0]
 8009b6a:	6862      	ldr	r2, [r4, #4]
 8009b6c:	2100      	movs	r1, #0
 8009b6e:	4628      	mov	r0, r5
 8009b70:	f7f6 fb36 	bl	80001e0 <memchr>
 8009b74:	b108      	cbz	r0, 8009b7a <_printf_i+0x1f2>
 8009b76:	1b40      	subs	r0, r0, r5
 8009b78:	6060      	str	r0, [r4, #4]
 8009b7a:	6863      	ldr	r3, [r4, #4]
 8009b7c:	6123      	str	r3, [r4, #16]
 8009b7e:	2300      	movs	r3, #0
 8009b80:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009b84:	e7a8      	b.n	8009ad8 <_printf_i+0x150>
 8009b86:	6923      	ldr	r3, [r4, #16]
 8009b88:	462a      	mov	r2, r5
 8009b8a:	4649      	mov	r1, r9
 8009b8c:	4640      	mov	r0, r8
 8009b8e:	47d0      	blx	sl
 8009b90:	3001      	adds	r0, #1
 8009b92:	d0ab      	beq.n	8009aec <_printf_i+0x164>
 8009b94:	6823      	ldr	r3, [r4, #0]
 8009b96:	079b      	lsls	r3, r3, #30
 8009b98:	d413      	bmi.n	8009bc2 <_printf_i+0x23a>
 8009b9a:	68e0      	ldr	r0, [r4, #12]
 8009b9c:	9b03      	ldr	r3, [sp, #12]
 8009b9e:	4298      	cmp	r0, r3
 8009ba0:	bfb8      	it	lt
 8009ba2:	4618      	movlt	r0, r3
 8009ba4:	e7a4      	b.n	8009af0 <_printf_i+0x168>
 8009ba6:	2301      	movs	r3, #1
 8009ba8:	4632      	mov	r2, r6
 8009baa:	4649      	mov	r1, r9
 8009bac:	4640      	mov	r0, r8
 8009bae:	47d0      	blx	sl
 8009bb0:	3001      	adds	r0, #1
 8009bb2:	d09b      	beq.n	8009aec <_printf_i+0x164>
 8009bb4:	3501      	adds	r5, #1
 8009bb6:	68e3      	ldr	r3, [r4, #12]
 8009bb8:	9903      	ldr	r1, [sp, #12]
 8009bba:	1a5b      	subs	r3, r3, r1
 8009bbc:	42ab      	cmp	r3, r5
 8009bbe:	dcf2      	bgt.n	8009ba6 <_printf_i+0x21e>
 8009bc0:	e7eb      	b.n	8009b9a <_printf_i+0x212>
 8009bc2:	2500      	movs	r5, #0
 8009bc4:	f104 0619 	add.w	r6, r4, #25
 8009bc8:	e7f5      	b.n	8009bb6 <_printf_i+0x22e>
 8009bca:	bf00      	nop
 8009bcc:	08009f31 	.word	0x08009f31
 8009bd0:	08009f42 	.word	0x08009f42

08009bd4 <memcpy>:
 8009bd4:	440a      	add	r2, r1
 8009bd6:	4291      	cmp	r1, r2
 8009bd8:	f100 33ff 	add.w	r3, r0, #4294967295
 8009bdc:	d100      	bne.n	8009be0 <memcpy+0xc>
 8009bde:	4770      	bx	lr
 8009be0:	b510      	push	{r4, lr}
 8009be2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009be6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009bea:	4291      	cmp	r1, r2
 8009bec:	d1f9      	bne.n	8009be2 <memcpy+0xe>
 8009bee:	bd10      	pop	{r4, pc}

08009bf0 <memmove>:
 8009bf0:	4288      	cmp	r0, r1
 8009bf2:	b510      	push	{r4, lr}
 8009bf4:	eb01 0402 	add.w	r4, r1, r2
 8009bf8:	d902      	bls.n	8009c00 <memmove+0x10>
 8009bfa:	4284      	cmp	r4, r0
 8009bfc:	4623      	mov	r3, r4
 8009bfe:	d807      	bhi.n	8009c10 <memmove+0x20>
 8009c00:	1e43      	subs	r3, r0, #1
 8009c02:	42a1      	cmp	r1, r4
 8009c04:	d008      	beq.n	8009c18 <memmove+0x28>
 8009c06:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009c0a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009c0e:	e7f8      	b.n	8009c02 <memmove+0x12>
 8009c10:	4402      	add	r2, r0
 8009c12:	4601      	mov	r1, r0
 8009c14:	428a      	cmp	r2, r1
 8009c16:	d100      	bne.n	8009c1a <memmove+0x2a>
 8009c18:	bd10      	pop	{r4, pc}
 8009c1a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009c1e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009c22:	e7f7      	b.n	8009c14 <memmove+0x24>

08009c24 <_free_r>:
 8009c24:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009c26:	2900      	cmp	r1, #0
 8009c28:	d044      	beq.n	8009cb4 <_free_r+0x90>
 8009c2a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009c2e:	9001      	str	r0, [sp, #4]
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	f1a1 0404 	sub.w	r4, r1, #4
 8009c36:	bfb8      	it	lt
 8009c38:	18e4      	addlt	r4, r4, r3
 8009c3a:	f000 f913 	bl	8009e64 <__malloc_lock>
 8009c3e:	4a1e      	ldr	r2, [pc, #120]	; (8009cb8 <_free_r+0x94>)
 8009c40:	9801      	ldr	r0, [sp, #4]
 8009c42:	6813      	ldr	r3, [r2, #0]
 8009c44:	b933      	cbnz	r3, 8009c54 <_free_r+0x30>
 8009c46:	6063      	str	r3, [r4, #4]
 8009c48:	6014      	str	r4, [r2, #0]
 8009c4a:	b003      	add	sp, #12
 8009c4c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009c50:	f000 b90e 	b.w	8009e70 <__malloc_unlock>
 8009c54:	42a3      	cmp	r3, r4
 8009c56:	d908      	bls.n	8009c6a <_free_r+0x46>
 8009c58:	6825      	ldr	r5, [r4, #0]
 8009c5a:	1961      	adds	r1, r4, r5
 8009c5c:	428b      	cmp	r3, r1
 8009c5e:	bf01      	itttt	eq
 8009c60:	6819      	ldreq	r1, [r3, #0]
 8009c62:	685b      	ldreq	r3, [r3, #4]
 8009c64:	1949      	addeq	r1, r1, r5
 8009c66:	6021      	streq	r1, [r4, #0]
 8009c68:	e7ed      	b.n	8009c46 <_free_r+0x22>
 8009c6a:	461a      	mov	r2, r3
 8009c6c:	685b      	ldr	r3, [r3, #4]
 8009c6e:	b10b      	cbz	r3, 8009c74 <_free_r+0x50>
 8009c70:	42a3      	cmp	r3, r4
 8009c72:	d9fa      	bls.n	8009c6a <_free_r+0x46>
 8009c74:	6811      	ldr	r1, [r2, #0]
 8009c76:	1855      	adds	r5, r2, r1
 8009c78:	42a5      	cmp	r5, r4
 8009c7a:	d10b      	bne.n	8009c94 <_free_r+0x70>
 8009c7c:	6824      	ldr	r4, [r4, #0]
 8009c7e:	4421      	add	r1, r4
 8009c80:	1854      	adds	r4, r2, r1
 8009c82:	42a3      	cmp	r3, r4
 8009c84:	6011      	str	r1, [r2, #0]
 8009c86:	d1e0      	bne.n	8009c4a <_free_r+0x26>
 8009c88:	681c      	ldr	r4, [r3, #0]
 8009c8a:	685b      	ldr	r3, [r3, #4]
 8009c8c:	6053      	str	r3, [r2, #4]
 8009c8e:	4421      	add	r1, r4
 8009c90:	6011      	str	r1, [r2, #0]
 8009c92:	e7da      	b.n	8009c4a <_free_r+0x26>
 8009c94:	d902      	bls.n	8009c9c <_free_r+0x78>
 8009c96:	230c      	movs	r3, #12
 8009c98:	6003      	str	r3, [r0, #0]
 8009c9a:	e7d6      	b.n	8009c4a <_free_r+0x26>
 8009c9c:	6825      	ldr	r5, [r4, #0]
 8009c9e:	1961      	adds	r1, r4, r5
 8009ca0:	428b      	cmp	r3, r1
 8009ca2:	bf04      	itt	eq
 8009ca4:	6819      	ldreq	r1, [r3, #0]
 8009ca6:	685b      	ldreq	r3, [r3, #4]
 8009ca8:	6063      	str	r3, [r4, #4]
 8009caa:	bf04      	itt	eq
 8009cac:	1949      	addeq	r1, r1, r5
 8009cae:	6021      	streq	r1, [r4, #0]
 8009cb0:	6054      	str	r4, [r2, #4]
 8009cb2:	e7ca      	b.n	8009c4a <_free_r+0x26>
 8009cb4:	b003      	add	sp, #12
 8009cb6:	bd30      	pop	{r4, r5, pc}
 8009cb8:	20001930 	.word	0x20001930

08009cbc <sbrk_aligned>:
 8009cbc:	b570      	push	{r4, r5, r6, lr}
 8009cbe:	4e0e      	ldr	r6, [pc, #56]	; (8009cf8 <sbrk_aligned+0x3c>)
 8009cc0:	460c      	mov	r4, r1
 8009cc2:	6831      	ldr	r1, [r6, #0]
 8009cc4:	4605      	mov	r5, r0
 8009cc6:	b911      	cbnz	r1, 8009cce <sbrk_aligned+0x12>
 8009cc8:	f000 f8bc 	bl	8009e44 <_sbrk_r>
 8009ccc:	6030      	str	r0, [r6, #0]
 8009cce:	4621      	mov	r1, r4
 8009cd0:	4628      	mov	r0, r5
 8009cd2:	f000 f8b7 	bl	8009e44 <_sbrk_r>
 8009cd6:	1c43      	adds	r3, r0, #1
 8009cd8:	d00a      	beq.n	8009cf0 <sbrk_aligned+0x34>
 8009cda:	1cc4      	adds	r4, r0, #3
 8009cdc:	f024 0403 	bic.w	r4, r4, #3
 8009ce0:	42a0      	cmp	r0, r4
 8009ce2:	d007      	beq.n	8009cf4 <sbrk_aligned+0x38>
 8009ce4:	1a21      	subs	r1, r4, r0
 8009ce6:	4628      	mov	r0, r5
 8009ce8:	f000 f8ac 	bl	8009e44 <_sbrk_r>
 8009cec:	3001      	adds	r0, #1
 8009cee:	d101      	bne.n	8009cf4 <sbrk_aligned+0x38>
 8009cf0:	f04f 34ff 	mov.w	r4, #4294967295
 8009cf4:	4620      	mov	r0, r4
 8009cf6:	bd70      	pop	{r4, r5, r6, pc}
 8009cf8:	20001934 	.word	0x20001934

08009cfc <_malloc_r>:
 8009cfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009d00:	1ccd      	adds	r5, r1, #3
 8009d02:	f025 0503 	bic.w	r5, r5, #3
 8009d06:	3508      	adds	r5, #8
 8009d08:	2d0c      	cmp	r5, #12
 8009d0a:	bf38      	it	cc
 8009d0c:	250c      	movcc	r5, #12
 8009d0e:	2d00      	cmp	r5, #0
 8009d10:	4607      	mov	r7, r0
 8009d12:	db01      	blt.n	8009d18 <_malloc_r+0x1c>
 8009d14:	42a9      	cmp	r1, r5
 8009d16:	d905      	bls.n	8009d24 <_malloc_r+0x28>
 8009d18:	230c      	movs	r3, #12
 8009d1a:	603b      	str	r3, [r7, #0]
 8009d1c:	2600      	movs	r6, #0
 8009d1e:	4630      	mov	r0, r6
 8009d20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009d24:	4e2e      	ldr	r6, [pc, #184]	; (8009de0 <_malloc_r+0xe4>)
 8009d26:	f000 f89d 	bl	8009e64 <__malloc_lock>
 8009d2a:	6833      	ldr	r3, [r6, #0]
 8009d2c:	461c      	mov	r4, r3
 8009d2e:	bb34      	cbnz	r4, 8009d7e <_malloc_r+0x82>
 8009d30:	4629      	mov	r1, r5
 8009d32:	4638      	mov	r0, r7
 8009d34:	f7ff ffc2 	bl	8009cbc <sbrk_aligned>
 8009d38:	1c43      	adds	r3, r0, #1
 8009d3a:	4604      	mov	r4, r0
 8009d3c:	d14d      	bne.n	8009dda <_malloc_r+0xde>
 8009d3e:	6834      	ldr	r4, [r6, #0]
 8009d40:	4626      	mov	r6, r4
 8009d42:	2e00      	cmp	r6, #0
 8009d44:	d140      	bne.n	8009dc8 <_malloc_r+0xcc>
 8009d46:	6823      	ldr	r3, [r4, #0]
 8009d48:	4631      	mov	r1, r6
 8009d4a:	4638      	mov	r0, r7
 8009d4c:	eb04 0803 	add.w	r8, r4, r3
 8009d50:	f000 f878 	bl	8009e44 <_sbrk_r>
 8009d54:	4580      	cmp	r8, r0
 8009d56:	d13a      	bne.n	8009dce <_malloc_r+0xd2>
 8009d58:	6821      	ldr	r1, [r4, #0]
 8009d5a:	3503      	adds	r5, #3
 8009d5c:	1a6d      	subs	r5, r5, r1
 8009d5e:	f025 0503 	bic.w	r5, r5, #3
 8009d62:	3508      	adds	r5, #8
 8009d64:	2d0c      	cmp	r5, #12
 8009d66:	bf38      	it	cc
 8009d68:	250c      	movcc	r5, #12
 8009d6a:	4629      	mov	r1, r5
 8009d6c:	4638      	mov	r0, r7
 8009d6e:	f7ff ffa5 	bl	8009cbc <sbrk_aligned>
 8009d72:	3001      	adds	r0, #1
 8009d74:	d02b      	beq.n	8009dce <_malloc_r+0xd2>
 8009d76:	6823      	ldr	r3, [r4, #0]
 8009d78:	442b      	add	r3, r5
 8009d7a:	6023      	str	r3, [r4, #0]
 8009d7c:	e00e      	b.n	8009d9c <_malloc_r+0xa0>
 8009d7e:	6822      	ldr	r2, [r4, #0]
 8009d80:	1b52      	subs	r2, r2, r5
 8009d82:	d41e      	bmi.n	8009dc2 <_malloc_r+0xc6>
 8009d84:	2a0b      	cmp	r2, #11
 8009d86:	d916      	bls.n	8009db6 <_malloc_r+0xba>
 8009d88:	1961      	adds	r1, r4, r5
 8009d8a:	42a3      	cmp	r3, r4
 8009d8c:	6025      	str	r5, [r4, #0]
 8009d8e:	bf18      	it	ne
 8009d90:	6059      	strne	r1, [r3, #4]
 8009d92:	6863      	ldr	r3, [r4, #4]
 8009d94:	bf08      	it	eq
 8009d96:	6031      	streq	r1, [r6, #0]
 8009d98:	5162      	str	r2, [r4, r5]
 8009d9a:	604b      	str	r3, [r1, #4]
 8009d9c:	4638      	mov	r0, r7
 8009d9e:	f104 060b 	add.w	r6, r4, #11
 8009da2:	f000 f865 	bl	8009e70 <__malloc_unlock>
 8009da6:	f026 0607 	bic.w	r6, r6, #7
 8009daa:	1d23      	adds	r3, r4, #4
 8009dac:	1af2      	subs	r2, r6, r3
 8009dae:	d0b6      	beq.n	8009d1e <_malloc_r+0x22>
 8009db0:	1b9b      	subs	r3, r3, r6
 8009db2:	50a3      	str	r3, [r4, r2]
 8009db4:	e7b3      	b.n	8009d1e <_malloc_r+0x22>
 8009db6:	6862      	ldr	r2, [r4, #4]
 8009db8:	42a3      	cmp	r3, r4
 8009dba:	bf0c      	ite	eq
 8009dbc:	6032      	streq	r2, [r6, #0]
 8009dbe:	605a      	strne	r2, [r3, #4]
 8009dc0:	e7ec      	b.n	8009d9c <_malloc_r+0xa0>
 8009dc2:	4623      	mov	r3, r4
 8009dc4:	6864      	ldr	r4, [r4, #4]
 8009dc6:	e7b2      	b.n	8009d2e <_malloc_r+0x32>
 8009dc8:	4634      	mov	r4, r6
 8009dca:	6876      	ldr	r6, [r6, #4]
 8009dcc:	e7b9      	b.n	8009d42 <_malloc_r+0x46>
 8009dce:	230c      	movs	r3, #12
 8009dd0:	603b      	str	r3, [r7, #0]
 8009dd2:	4638      	mov	r0, r7
 8009dd4:	f000 f84c 	bl	8009e70 <__malloc_unlock>
 8009dd8:	e7a1      	b.n	8009d1e <_malloc_r+0x22>
 8009dda:	6025      	str	r5, [r4, #0]
 8009ddc:	e7de      	b.n	8009d9c <_malloc_r+0xa0>
 8009dde:	bf00      	nop
 8009de0:	20001930 	.word	0x20001930

08009de4 <_realloc_r>:
 8009de4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009de8:	4680      	mov	r8, r0
 8009dea:	4614      	mov	r4, r2
 8009dec:	460e      	mov	r6, r1
 8009dee:	b921      	cbnz	r1, 8009dfa <_realloc_r+0x16>
 8009df0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009df4:	4611      	mov	r1, r2
 8009df6:	f7ff bf81 	b.w	8009cfc <_malloc_r>
 8009dfa:	b92a      	cbnz	r2, 8009e08 <_realloc_r+0x24>
 8009dfc:	f7ff ff12 	bl	8009c24 <_free_r>
 8009e00:	4625      	mov	r5, r4
 8009e02:	4628      	mov	r0, r5
 8009e04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009e08:	f000 f838 	bl	8009e7c <_malloc_usable_size_r>
 8009e0c:	4284      	cmp	r4, r0
 8009e0e:	4607      	mov	r7, r0
 8009e10:	d802      	bhi.n	8009e18 <_realloc_r+0x34>
 8009e12:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009e16:	d812      	bhi.n	8009e3e <_realloc_r+0x5a>
 8009e18:	4621      	mov	r1, r4
 8009e1a:	4640      	mov	r0, r8
 8009e1c:	f7ff ff6e 	bl	8009cfc <_malloc_r>
 8009e20:	4605      	mov	r5, r0
 8009e22:	2800      	cmp	r0, #0
 8009e24:	d0ed      	beq.n	8009e02 <_realloc_r+0x1e>
 8009e26:	42bc      	cmp	r4, r7
 8009e28:	4622      	mov	r2, r4
 8009e2a:	4631      	mov	r1, r6
 8009e2c:	bf28      	it	cs
 8009e2e:	463a      	movcs	r2, r7
 8009e30:	f7ff fed0 	bl	8009bd4 <memcpy>
 8009e34:	4631      	mov	r1, r6
 8009e36:	4640      	mov	r0, r8
 8009e38:	f7ff fef4 	bl	8009c24 <_free_r>
 8009e3c:	e7e1      	b.n	8009e02 <_realloc_r+0x1e>
 8009e3e:	4635      	mov	r5, r6
 8009e40:	e7df      	b.n	8009e02 <_realloc_r+0x1e>
	...

08009e44 <_sbrk_r>:
 8009e44:	b538      	push	{r3, r4, r5, lr}
 8009e46:	4d06      	ldr	r5, [pc, #24]	; (8009e60 <_sbrk_r+0x1c>)
 8009e48:	2300      	movs	r3, #0
 8009e4a:	4604      	mov	r4, r0
 8009e4c:	4608      	mov	r0, r1
 8009e4e:	602b      	str	r3, [r5, #0]
 8009e50:	f7f6 fd68 	bl	8000924 <_sbrk>
 8009e54:	1c43      	adds	r3, r0, #1
 8009e56:	d102      	bne.n	8009e5e <_sbrk_r+0x1a>
 8009e58:	682b      	ldr	r3, [r5, #0]
 8009e5a:	b103      	cbz	r3, 8009e5e <_sbrk_r+0x1a>
 8009e5c:	6023      	str	r3, [r4, #0]
 8009e5e:	bd38      	pop	{r3, r4, r5, pc}
 8009e60:	20001938 	.word	0x20001938

08009e64 <__malloc_lock>:
 8009e64:	4801      	ldr	r0, [pc, #4]	; (8009e6c <__malloc_lock+0x8>)
 8009e66:	f000 b811 	b.w	8009e8c <__retarget_lock_acquire_recursive>
 8009e6a:	bf00      	nop
 8009e6c:	2000193c 	.word	0x2000193c

08009e70 <__malloc_unlock>:
 8009e70:	4801      	ldr	r0, [pc, #4]	; (8009e78 <__malloc_unlock+0x8>)
 8009e72:	f000 b80c 	b.w	8009e8e <__retarget_lock_release_recursive>
 8009e76:	bf00      	nop
 8009e78:	2000193c 	.word	0x2000193c

08009e7c <_malloc_usable_size_r>:
 8009e7c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009e80:	1f18      	subs	r0, r3, #4
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	bfbc      	itt	lt
 8009e86:	580b      	ldrlt	r3, [r1, r0]
 8009e88:	18c0      	addlt	r0, r0, r3
 8009e8a:	4770      	bx	lr

08009e8c <__retarget_lock_acquire_recursive>:
 8009e8c:	4770      	bx	lr

08009e8e <__retarget_lock_release_recursive>:
 8009e8e:	4770      	bx	lr

08009e90 <_init>:
 8009e90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e92:	bf00      	nop
 8009e94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009e96:	bc08      	pop	{r3}
 8009e98:	469e      	mov	lr, r3
 8009e9a:	4770      	bx	lr

08009e9c <_fini>:
 8009e9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e9e:	bf00      	nop
 8009ea0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009ea2:	bc08      	pop	{r3}
 8009ea4:	469e      	mov	lr, r3
 8009ea6:	4770      	bx	lr
